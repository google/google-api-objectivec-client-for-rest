// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   DCM/DFA Reporting And Trafficking API (dfareporting/v3.2)
// Description:
//   Manages your DoubleClick Campaign Manager ad campaigns and reports.
// Documentation:
//   https://developers.google.com/doubleclick-advertisers/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDfareporting_Account;
@class GTLRDfareporting_AccountUserProfile;
@class GTLRDfareporting_Ad;
@class GTLRDfareporting_Advertiser;
@class GTLRDfareporting_AdvertiserGroup;
@class GTLRDfareporting_Campaign;
@class GTLRDfareporting_CampaignCreativeAssociation;
@class GTLRDfareporting_ContentCategory;
@class GTLRDfareporting_ConversionsBatchInsertRequest;
@class GTLRDfareporting_ConversionsBatchUpdateRequest;
@class GTLRDfareporting_Creative;
@class GTLRDfareporting_CreativeAssetMetadata;
@class GTLRDfareporting_CreativeField;
@class GTLRDfareporting_CreativeFieldValue;
@class GTLRDfareporting_CreativeGroup;
@class GTLRDfareporting_DimensionValueRequest;
@class GTLRDfareporting_DirectorySite;
@class GTLRDfareporting_DynamicTargetingKey;
@class GTLRDfareporting_EventTag;
@class GTLRDfareporting_FloodlightActivity;
@class GTLRDfareporting_FloodlightActivityGroup;
@class GTLRDfareporting_FloodlightConfiguration;
@class GTLRDfareporting_LandingPage;
@class GTLRDfareporting_Placement;
@class GTLRDfareporting_PlacementGroup;
@class GTLRDfareporting_PlacementStrategy;
@class GTLRDfareporting_RemarketingList;
@class GTLRDfareporting_RemarketingListShare;
@class GTLRDfareporting_Report;
@class GTLRDfareporting_Site;
@class GTLRDfareporting_Size;
@class GTLRDfareporting_Subaccount;
@class GTLRDfareporting_TargetingTemplate;
@class GTLRDfareporting_UserRole;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// action

/** Value: "ACTION_ADD" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionAdd;
/** Value: "ACTION_ASSIGN" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionAssign;
/** Value: "ACTION_ASSOCIATE" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionAssociate;
/** Value: "ACTION_CREATE" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionCreate;
/** Value: "ACTION_DELETE" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionDelete;
/** Value: "ACTION_DISABLE" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionDisable;
/** Value: "ACTION_EMAIL_TAGS" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionEmailTags;
/** Value: "ACTION_ENABLE" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionEnable;
/** Value: "ACTION_LINK" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionLink;
/** Value: "ACTION_MARK_AS_DEFAULT" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionMarkAsDefault;
/** Value: "ACTION_PUSH" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionPush;
/** Value: "ACTION_REMOVE" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionRemove;
/** Value: "ACTION_SEND" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionSend;
/** Value: "ACTION_SHARE" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionShare;
/** Value: "ACTION_UNASSIGN" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionUnassign;
/** Value: "ACTION_UNLINK" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionUnlink;
/** Value: "ACTION_UPDATE" */
GTLR_EXTERN NSString * const kGTLRDfareportingActionActionUpdate;

// ----------------------------------------------------------------------------
// compatibilities

/** Value: "APP" */
GTLR_EXTERN NSString * const kGTLRDfareportingCompatibilitiesApp;
/** Value: "APP_INTERSTITIAL" */
GTLR_EXTERN NSString * const kGTLRDfareportingCompatibilitiesAppInterstitial;
/** Value: "DISPLAY" */
GTLR_EXTERN NSString * const kGTLRDfareportingCompatibilitiesDisplay;
/** Value: "DISPLAY_INTERSTITIAL" */
GTLR_EXTERN NSString * const kGTLRDfareportingCompatibilitiesDisplayInterstitial;
/** Value: "IN_STREAM_AUDIO" */
GTLR_EXTERN NSString * const kGTLRDfareportingCompatibilitiesInStreamAudio;
/** Value: "IN_STREAM_VIDEO" */
GTLR_EXTERN NSString * const kGTLRDfareportingCompatibilitiesInStreamVideo;

// ----------------------------------------------------------------------------
// compatibility

/** Value: "APP" */
GTLR_EXTERN NSString * const kGTLRDfareportingCompatibilityApp;
/** Value: "APP_INTERSTITIAL" */
GTLR_EXTERN NSString * const kGTLRDfareportingCompatibilityAppInterstitial;
/** Value: "DISPLAY" */
GTLR_EXTERN NSString * const kGTLRDfareportingCompatibilityDisplay;
/** Value: "DISPLAY_INTERSTITIAL" */
GTLR_EXTERN NSString * const kGTLRDfareportingCompatibilityDisplayInterstitial;
/** Value: "IN_STREAM_AUDIO" */
GTLR_EXTERN NSString * const kGTLRDfareportingCompatibilityInStreamAudio;
/** Value: "IN_STREAM_VIDEO" */
GTLR_EXTERN NSString * const kGTLRDfareportingCompatibilityInStreamVideo;

// ----------------------------------------------------------------------------
// directories

/** Value: "APPLE_APP_STORE" */
GTLR_EXTERN NSString * const kGTLRDfareportingDirectoriesAppleAppStore;
/** Value: "GOOGLE_PLAY_STORE" */
GTLR_EXTERN NSString * const kGTLRDfareportingDirectoriesGooglePlayStore;
/** Value: "UNKNOWN" */
GTLR_EXTERN NSString * const kGTLRDfareportingDirectoriesUnknown;

// ----------------------------------------------------------------------------
// eventTagTypes

/** Value: "CLICK_THROUGH_EVENT_TAG" */
GTLR_EXTERN NSString * const kGTLRDfareportingEventTagTypesClickThroughEventTag;
/** Value: "IMPRESSION_IMAGE_EVENT_TAG" */
GTLR_EXTERN NSString * const kGTLRDfareportingEventTagTypesImpressionImageEventTag;
/** Value: "IMPRESSION_JAVASCRIPT_EVENT_TAG" */
GTLR_EXTERN NSString * const kGTLRDfareportingEventTagTypesImpressionJavascriptEventTag;

// ----------------------------------------------------------------------------
// floodlightActivityGroupType

/** Value: "COUNTER" */
GTLR_EXTERN NSString * const kGTLRDfareportingFloodlightActivityGroupTypeCounter;
/** Value: "SALE" */
GTLR_EXTERN NSString * const kGTLRDfareportingFloodlightActivityGroupTypeSale;

// ----------------------------------------------------------------------------
// objectType

/** Value: "OBJECT_ACCOUNT" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectAccount;
/** Value: "OBJECT_ACCOUNT_BILLING_FEATURE" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectAccountBillingFeature;
/** Value: "OBJECT_AD" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectAd;
/** Value: "OBJECT_ADVERTISER" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectAdvertiser;
/** Value: "OBJECT_ADVERTISER_GROUP" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectAdvertiserGroup;
/** Value: "OBJECT_BILLING_ACCOUNT_GROUP" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectBillingAccountGroup;
/** Value: "OBJECT_BILLING_FEATURE" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectBillingFeature;
/** Value: "OBJECT_BILLING_MINIMUM_FEE" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectBillingMinimumFee;
/** Value: "OBJECT_BILLING_PROFILE" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectBillingProfile;
/** Value: "OBJECT_CAMPAIGN" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectCampaign;
/** Value: "OBJECT_CONTENT_CATEGORY" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectContentCategory;
/** Value: "OBJECT_CREATIVE" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectCreative;
/** Value: "OBJECT_CREATIVE_ASSET" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectCreativeAsset;
/** Value: "OBJECT_CREATIVE_BUNDLE" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectCreativeBundle;
/** Value: "OBJECT_CREATIVE_FIELD" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectCreativeField;
/** Value: "OBJECT_CREATIVE_GROUP" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectCreativeGroup;
/** Value: "OBJECT_DFA_SITE" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectDfaSite;
/** Value: "OBJECT_EVENT_TAG" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectEventTag;
/** Value: "OBJECT_FLOODLIGHT_ACTIVITY_GROUP" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectFloodlightActivityGroup;
/** Value: "OBJECT_FLOODLIGHT_ACTVITY" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectFloodlightActvity;
/** Value: "OBJECT_FLOODLIGHT_CONFIGURATION" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectFloodlightConfiguration;
/** Value: "OBJECT_INSTREAM_CREATIVE" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectInstreamCreative;
/** Value: "OBJECT_LANDING_PAGE" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectLandingPage;
/** Value: "OBJECT_MEDIA_ORDER" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectMediaOrder;
/** Value: "OBJECT_PLACEMENT" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectPlacement;
/** Value: "OBJECT_PLACEMENT_STRATEGY" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectPlacementStrategy;
/** Value: "OBJECT_PLAYSTORE_LINK" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectPlaystoreLink;
/** Value: "OBJECT_PROVIDED_LIST_CLIENT" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectProvidedListClient;
/** Value: "OBJECT_RATE_CARD" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectRateCard;
/** Value: "OBJECT_REMARKETING_LIST" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectRemarketingList;
/** Value: "OBJECT_RICHMEDIA_CREATIVE" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectRichmediaCreative;
/** Value: "OBJECT_SD_SITE" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectSdSite;
/** Value: "OBJECT_SEARCH_LIFT_STUDY" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectSearchLiftStudy;
/** Value: "OBJECT_SIZE" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectSize;
/** Value: "OBJECT_SUBACCOUNT" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectSubaccount;
/** Value: "OBJECT_TARGETING_TEMPLATE" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectTargetingTemplate;
/** Value: "OBJECT_USER_PROFILE" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectUserProfile;
/** Value: "OBJECT_USER_PROFILE_FILTER" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectUserProfileFilter;
/** Value: "OBJECT_USER_ROLE" */
GTLR_EXTERN NSString * const kGTLRDfareportingObjectTypeObjectUserRole;

// ----------------------------------------------------------------------------
// paymentSource

/** Value: "PLACEMENT_AGENCY_PAID" */
GTLR_EXTERN NSString * const kGTLRDfareportingPaymentSourcePlacementAgencyPaid;
/** Value: "PLACEMENT_PUBLISHER_PAID" */
GTLR_EXTERN NSString * const kGTLRDfareportingPaymentSourcePlacementPublisherPaid;

// ----------------------------------------------------------------------------
// placementGroupType

/** Value: "PLACEMENT_PACKAGE" */
GTLR_EXTERN NSString * const kGTLRDfareportingPlacementGroupTypePlacementPackage;
/** Value: "PLACEMENT_ROADBLOCK" */
GTLR_EXTERN NSString * const kGTLRDfareportingPlacementGroupTypePlacementRoadblock;

// ----------------------------------------------------------------------------
// pricingTypes

/** Value: "PRICING_TYPE_CPA" */
GTLR_EXTERN NSString * const kGTLRDfareportingPricingTypesPricingTypeCpa;
/** Value: "PRICING_TYPE_CPC" */
GTLR_EXTERN NSString * const kGTLRDfareportingPricingTypesPricingTypeCpc;
/** Value: "PRICING_TYPE_CPM" */
GTLR_EXTERN NSString * const kGTLRDfareportingPricingTypesPricingTypeCpm;
/** Value: "PRICING_TYPE_CPM_ACTIVEVIEW" */
GTLR_EXTERN NSString * const kGTLRDfareportingPricingTypesPricingTypeCpmActiveview;
/** Value: "PRICING_TYPE_FLAT_RATE_CLICKS" */
GTLR_EXTERN NSString * const kGTLRDfareportingPricingTypesPricingTypeFlatRateClicks;
/** Value: "PRICING_TYPE_FLAT_RATE_IMPRESSIONS" */
GTLR_EXTERN NSString * const kGTLRDfareportingPricingTypesPricingTypeFlatRateImpressions;

// ----------------------------------------------------------------------------
// scope

/** Value: "ALL" */
GTLR_EXTERN NSString * const kGTLRDfareportingScopeAll;
/** Value: "MINE" */
GTLR_EXTERN NSString * const kGTLRDfareportingScopeMine;
/**
 *  Files shared with me.
 *
 *  Value: "SHARED_WITH_ME"
 */
GTLR_EXTERN NSString * const kGTLRDfareportingScopeSharedWithMe;

// ----------------------------------------------------------------------------
// sortField

/** Value: "ID" */
GTLR_EXTERN NSString * const kGTLRDfareportingSortFieldId;
/** Value: "LAST_MODIFIED_TIME" */
GTLR_EXTERN NSString * const kGTLRDfareportingSortFieldLastModifiedTime;
/** Value: "NAME" */
GTLR_EXTERN NSString * const kGTLRDfareportingSortFieldName;
/** Value: "VALUE" */
GTLR_EXTERN NSString * const kGTLRDfareportingSortFieldValue;

// ----------------------------------------------------------------------------
// sortOrder

/** Value: "ASCENDING" */
GTLR_EXTERN NSString * const kGTLRDfareportingSortOrderAscending;
/** Value: "DESCENDING" */
GTLR_EXTERN NSString * const kGTLRDfareportingSortOrderDescending;

// ----------------------------------------------------------------------------
// status

/** Value: "APPROVED" */
GTLR_EXTERN NSString * const kGTLRDfareportingStatusApproved;
/** Value: "ON_HOLD" */
GTLR_EXTERN NSString * const kGTLRDfareportingStatusOnHold;

// ----------------------------------------------------------------------------
// tagFormats

/** Value: "PLACEMENT_TAG_CLICK_COMMANDS" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagClickCommands;
/** Value: "PLACEMENT_TAG_IFRAME_ILAYER" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagIframeIlayer;
/** Value: "PLACEMENT_TAG_IFRAME_JAVASCRIPT" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagIframeJavascript;
/** Value: "PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagIframeJavascriptLegacy;
/** Value: "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagInstreamVideoPrefetch;
/** Value: "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagInstreamVideoPrefetchVast3;
/** Value: "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagInstreamVideoPrefetchVast4;
/** Value: "PLACEMENT_TAG_INTERNAL_REDIRECT" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagInternalRedirect;
/** Value: "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagInterstitialIframeJavascript;
/** Value: "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagInterstitialIframeJavascriptLegacy;
/** Value: "PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagInterstitialInternalRedirect;
/** Value: "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagInterstitialJavascript;
/** Value: "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagInterstitialJavascriptLegacy;
/** Value: "PLACEMENT_TAG_JAVASCRIPT" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagJavascript;
/** Value: "PLACEMENT_TAG_JAVASCRIPT_LEGACY" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagJavascriptLegacy;
/** Value: "PLACEMENT_TAG_STANDARD" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagStandard;
/** Value: "PLACEMENT_TAG_TRACKING" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagTracking;
/** Value: "PLACEMENT_TAG_TRACKING_IFRAME" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagTrackingIframe;
/** Value: "PLACEMENT_TAG_TRACKING_JAVASCRIPT" */
GTLR_EXTERN NSString * const kGTLRDfareportingTagFormatsPlacementTagTrackingJavascript;

// ----------------------------------------------------------------------------
// type

/** Value: "AD_SERVING_CLICK_TRACKER" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypeAdServingClickTracker;
/** Value: "AD_SERVING_DEFAULT_AD" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypeAdServingDefaultAd;
/** Value: "AD_SERVING_STANDARD_AD" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypeAdServingStandardAd;
/** Value: "AD_SERVING_TRACKING" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypeAdServingTracking;
/** Value: "COUNTER" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypeCounter;
/** Value: "PLANNING_PLACEMENT_TYPE_CREDIT" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypePlanningPlacementTypeCredit;
/** Value: "PLANNING_PLACEMENT_TYPE_REGULAR" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypePlanningPlacementTypeRegular;
/** Value: "SALE" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypeSale;

// ----------------------------------------------------------------------------
// types

/** Value: "BRAND_SAFE_DEFAULT_INSTREAM_VIDEO" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesBrandSafeDefaultInstreamVideo;
/** Value: "CUSTOM_DISPLAY" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesCustomDisplay;
/** Value: "CUSTOM_DISPLAY_INTERSTITIAL" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesCustomDisplayInterstitial;
/** Value: "DISPLAY" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesDisplay;
/** Value: "DISPLAY_IMAGE_GALLERY" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesDisplayImageGallery;
/** Value: "DISPLAY_REDIRECT" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesDisplayRedirect;
/** Value: "FLASH_INPAGE" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesFlashInpage;
/** Value: "HTML5_BANNER" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesHtml5Banner;
/** Value: "IMAGE" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesImage;
/** Value: "INSTREAM_AUDIO" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesInstreamAudio;
/** Value: "INSTREAM_VIDEO" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesInstreamVideo;
/** Value: "INSTREAM_VIDEO_REDIRECT" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesInstreamVideoRedirect;
/** Value: "INTERNAL_REDIRECT" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesInternalRedirect;
/** Value: "INTERSTITIAL_INTERNAL_REDIRECT" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesInterstitialInternalRedirect;
/** Value: "RICH_MEDIA_DISPLAY_BANNER" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesRichMediaDisplayBanner;
/** Value: "RICH_MEDIA_DISPLAY_EXPANDING" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesRichMediaDisplayExpanding;
/** Value: "RICH_MEDIA_DISPLAY_INTERSTITIAL" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesRichMediaDisplayInterstitial;
/** Value: "RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesRichMediaDisplayMultiFloatingInterstitial;
/** Value: "RICH_MEDIA_IM_EXPAND" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesRichMediaImExpand;
/** Value: "RICH_MEDIA_INPAGE_FLOATING" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesRichMediaInpageFloating;
/** Value: "RICH_MEDIA_MOBILE_IN_APP" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesRichMediaMobileInApp;
/** Value: "RICH_MEDIA_PEEL_DOWN" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesRichMediaPeelDown;
/** Value: "TRACKING_TEXT" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesTrackingText;
/** Value: "VPAID_LINEAR_VIDEO" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesVpaidLinearVideo;
/** Value: "VPAID_NON_LINEAR_VIDEO" */
GTLR_EXTERN NSString * const kGTLRDfareportingTypesVpaidNonLinearVideo;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Dfareporting query classes.
 */
@interface GTLRDfareportingQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets the account's active ad summary by account ID.
 *
 *  Method: dfareporting.accountActiveAdSummaries.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AccountActiveAdSummariesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAccountActiveAdSummariesGetWithprofileId:summaryAccountId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/** Account ID. */
@property(nonatomic, assign) long long summaryAccountId;

/**
 *  Fetches a @c GTLRDfareporting_AccountActiveAdSummary.
 *
 *  Gets the account's active ad summary by account ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param summaryAccountId Account ID.
 *
 *  @return GTLRDfareportingQuery_AccountActiveAdSummariesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                  summaryAccountId:(long long)summaryAccountId;

@end

/**
 *  Gets one account permission group by ID.
 *
 *  Method: dfareporting.accountPermissionGroups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AccountPermissionGroupsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAccountPermissionGroupsGetWithprofileId:identifier:]

/**
 *  Account permission group ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_AccountPermissionGroup.
 *
 *  Gets one account permission group by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Account permission group ID.
 *
 *  @return GTLRDfareportingQuery_AccountPermissionGroupsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Retrieves the list of account permission groups.
 *
 *  Method: dfareporting.accountPermissionGroups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AccountPermissionGroupsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAccountPermissionGroupsListWithprofileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_AccountPermissionGroupsListResponse.
 *
 *  Retrieves the list of account permission groups.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AccountPermissionGroupsList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Gets one account permission by ID.
 *
 *  Method: dfareporting.accountPermissions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AccountPermissionsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAccountPermissionsGetWithprofileId:identifier:]

/**
 *  Account permission ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_AccountPermission.
 *
 *  Gets one account permission by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Account permission ID.
 *
 *  @return GTLRDfareportingQuery_AccountPermissionsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Retrieves the list of account permissions.
 *
 *  Method: dfareporting.accountPermissions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AccountPermissionsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAccountPermissionsListWithprofileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_AccountPermissionsListResponse.
 *
 *  Retrieves the list of account permissions.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AccountPermissionsList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Gets one account by ID.
 *
 *  Method: dfareporting.accounts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AccountsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAccountsGetWithprofileId:identifier:]

/**
 *  Account ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Account.
 *
 *  Gets one account by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Account ID.
 *
 *  @return GTLRDfareportingQuery_AccountsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Retrieves the list of accounts, possibly filtered. This method supports
 *  paging.
 *
 *  Method: dfareporting.accounts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AccountsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAccountsListWithprofileId:]

/**
 *  Select only active accounts. Don't set this field to select both active and
 *  non-active accounts.
 */
@property(nonatomic, assign) BOOL active;

/**
 *  Select only accounts with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for objects by name or ID. Wildcards (*) are allowed. For
 *  example, "account*2015" will return objects with names like "account June
 *  2015", "account April 2015", or simply "account 2015". Most of the searches
 *  also add wildcards implicitly at the start and the end of the search string.
 *  For example, a search string of "account" will match objects with name "my
 *  account", "account 2015", or simply "account".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_AccountsListResponse.
 *
 *  Retrieves the list of accounts, possibly filtered. This method supports
 *  paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AccountsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing account. This method supports patch semantics.
 *
 *  Method: dfareporting.accounts.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AccountsPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAccountsPatchWithObject:profileId:identifier:]

/**
 *  Account ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Account.
 *
 *  Updates an existing account. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_Account to include in the query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Account ID.
 *
 *  @return GTLRDfareportingQuery_AccountsPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Account *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing account.
 *
 *  Method: dfareporting.accounts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AccountsUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAccountsUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Account.
 *
 *  Updates an existing account.
 *
 *  @param object The @c GTLRDfareporting_Account to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AccountsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Account *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets one account user profile by ID.
 *
 *  Method: dfareporting.accountUserProfiles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AccountUserProfilesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAccountUserProfilesGetWithprofileId:identifier:]

/**
 *  User profile ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_AccountUserProfile.
 *
 *  Gets one account user profile by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier User profile ID.
 *
 *  @return GTLRDfareportingQuery_AccountUserProfilesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new account user profile.
 *
 *  Method: dfareporting.accountUserProfiles.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AccountUserProfilesInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAccountUserProfilesInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_AccountUserProfile.
 *
 *  Inserts a new account user profile.
 *
 *  @param object The @c GTLRDfareporting_AccountUserProfile to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AccountUserProfilesInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_AccountUserProfile *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of account user profiles, possibly filtered. This method
 *  supports paging.
 *
 *  Method: dfareporting.accountUserProfiles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AccountUserProfilesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAccountUserProfilesListWithprofileId:]

/** Select only active user profiles. */
@property(nonatomic, assign) BOOL active;

/**
 *  Select only user profiles with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for objects by name, ID or email. Wildcards (*) are
 *  allowed. For example, "user profile*2015" will return objects with names
 *  like "user profile June 2015", "user profile April 2015", or simply "user
 *  profile 2015". Most of the searches also add wildcards implicitly at the
 *  start and the end of the search string. For example, a search string of
 *  "user profile" will match objects with name "my user profile", "user profile
 *  2015", or simply "user profile".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/** Select only user profiles with the specified subaccount ID. */
@property(nonatomic, assign) long long subaccountId;

/** Select only user profiles with the specified user role ID. */
@property(nonatomic, assign) long long userRoleId;

/**
 *  Fetches a @c GTLRDfareporting_AccountUserProfilesListResponse.
 *
 *  Retrieves a list of account user profiles, possibly filtered. This method
 *  supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AccountUserProfilesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing account user profile. This method supports patch
 *  semantics.
 *
 *  Method: dfareporting.accountUserProfiles.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AccountUserProfilesPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAccountUserProfilesPatchWithObject:profileId:identifier:]

/**
 *  User profile ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_AccountUserProfile.
 *
 *  Updates an existing account user profile. This method supports patch
 *  semantics.
 *
 *  @param object The @c GTLRDfareporting_AccountUserProfile to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier User profile ID.
 *
 *  @return GTLRDfareportingQuery_AccountUserProfilesPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_AccountUserProfile *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing account user profile.
 *
 *  Method: dfareporting.accountUserProfiles.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AccountUserProfilesUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAccountUserProfilesUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_AccountUserProfile.
 *
 *  Updates an existing account user profile.
 *
 *  @param object The @c GTLRDfareporting_AccountUserProfile to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AccountUserProfilesUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_AccountUserProfile *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets one ad by ID.
 *
 *  Method: dfareporting.ads.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdsGetWithprofileId:identifier:]

/**
 *  Ad ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Ad.
 *
 *  Gets one ad by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Ad ID.
 *
 *  @return GTLRDfareportingQuery_AdsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new ad.
 *
 *  Method: dfareporting.ads.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdsInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdsInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Ad.
 *
 *  Inserts a new ad.
 *
 *  @param object The @c GTLRDfareporting_Ad to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AdsInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Ad *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of ads, possibly filtered. This method supports paging.
 *
 *  Method: dfareporting.ads.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdsListWithprofileId:]

/** Select only active ads. */
@property(nonatomic, assign) BOOL active;

/** Select only ads with this advertiser ID. */
@property(nonatomic, assign) long long advertiserId;

/** Select only archived ads. */
@property(nonatomic, assign) BOOL archived;

/**
 *  Select only ads with these audience segment IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *audienceSegmentIds;

/**
 *  Select only ads with these campaign IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *campaignIds;

/**
 *  Select default ads with the specified compatibility. Applicable when type is
 *  AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering
 *  either on desktop or on mobile devices for regular or interstitial ads,
 *  respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps.
 *  IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with
 *  the VAST standard.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingCompatibilityApp Value "APP"
 *    @arg @c kGTLRDfareportingCompatibilityAppInterstitial Value
 *        "APP_INTERSTITIAL"
 *    @arg @c kGTLRDfareportingCompatibilityDisplay Value "DISPLAY"
 *    @arg @c kGTLRDfareportingCompatibilityDisplayInterstitial Value
 *        "DISPLAY_INTERSTITIAL"
 *    @arg @c kGTLRDfareportingCompatibilityInStreamAudio Value
 *        "IN_STREAM_AUDIO"
 *    @arg @c kGTLRDfareportingCompatibilityInStreamVideo Value
 *        "IN_STREAM_VIDEO"
 */
@property(nonatomic, copy, nullable) NSString *compatibility;

/**
 *  Select only ads with these creative IDs assigned.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *creativeIds;

/**
 *  Select only ads with these creative optimization configuration IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *creativeOptimizationConfigurationIds;

/**
 *  Select only dynamic click trackers. Applicable when type is
 *  AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false,
 *  select static click trackers. Leave unset to select both.
 */
@property(nonatomic, assign) BOOL dynamicClickTracker;

/**
 *  Select only ads with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Select only ads with these landing page IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *landingPageIds;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Select only ads with this event tag override ID. */
@property(nonatomic, assign) long long overriddenEventTagId;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Select only ads with these placement IDs assigned.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *placementIds;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Select only ads whose list targeting expression use these remarketing list
 *  IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *remarketingListIds;

/**
 *  Allows searching for objects by name or ID. Wildcards (*) are allowed. For
 *  example, "ad*2015" will return objects with names like "ad June 2015", "ad
 *  April 2015", or simply "ad 2015". Most of the searches also add wildcards
 *  implicitly at the start and the end of the search string. For example, a
 *  search string of "ad" will match objects with name "my ad", "ad 2015", or
 *  simply "ad".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Select only ads with these size IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *sizeIds;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/** Select only ads that are SSL-compliant. */
@property(nonatomic, assign) BOOL sslCompliant;

/** Select only ads that require SSL. */
@property(nonatomic, assign) BOOL sslRequired;

/**
 *  Select only ads with these types.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingTypeAdServingClickTracker Value
 *        "AD_SERVING_CLICK_TRACKER"
 *    @arg @c kGTLRDfareportingTypeAdServingDefaultAd Value
 *        "AD_SERVING_DEFAULT_AD"
 *    @arg @c kGTLRDfareportingTypeAdServingStandardAd Value
 *        "AD_SERVING_STANDARD_AD"
 *    @arg @c kGTLRDfareportingTypeAdServingTracking Value "AD_SERVING_TRACKING"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *type;

/**
 *  Fetches a @c GTLRDfareporting_AdsListResponse.
 *
 *  Retrieves a list of ads, possibly filtered. This method supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AdsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing ad. This method supports patch semantics.
 *
 *  Method: dfareporting.ads.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdsPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdsPatchWithObject:profileId:identifier:]

/**
 *  Ad ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Ad.
 *
 *  Updates an existing ad. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_Ad to include in the query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Ad ID.
 *
 *  @return GTLRDfareportingQuery_AdsPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Ad *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing ad.
 *
 *  Method: dfareporting.ads.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdsUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdsUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Ad.
 *
 *  Updates an existing ad.
 *
 *  @param object The @c GTLRDfareporting_Ad to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AdsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Ad *)object
                      profileId:(long long)profileId;

@end

/**
 *  Deletes an existing advertiser group.
 *
 *  Method: dfareporting.advertiserGroups.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdvertiserGroupsDelete : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdvertiserGroupsDeleteWithprofileId:identifier:]

/**
 *  Advertiser group ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an existing advertiser group.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Advertiser group ID.
 *
 *  @return GTLRDfareportingQuery_AdvertiserGroupsDelete
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Gets one advertiser group by ID.
 *
 *  Method: dfareporting.advertiserGroups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdvertiserGroupsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdvertiserGroupsGetWithprofileId:identifier:]

/**
 *  Advertiser group ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_AdvertiserGroup.
 *
 *  Gets one advertiser group by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Advertiser group ID.
 *
 *  @return GTLRDfareportingQuery_AdvertiserGroupsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new advertiser group.
 *
 *  Method: dfareporting.advertiserGroups.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdvertiserGroupsInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdvertiserGroupsInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_AdvertiserGroup.
 *
 *  Inserts a new advertiser group.
 *
 *  @param object The @c GTLRDfareporting_AdvertiserGroup to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AdvertiserGroupsInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_AdvertiserGroup *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of advertiser groups, possibly filtered. This method
 *  supports paging.
 *
 *  Method: dfareporting.advertiserGroups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdvertiserGroupsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdvertiserGroupsListWithprofileId:]

/**
 *  Select only advertiser groups with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for objects by name or ID. Wildcards (*) are allowed. For
 *  example, "advertiser*2015" will return objects with names like "advertiser
 *  group June 2015", "advertiser group April 2015", or simply "advertiser group
 *  2015". Most of the searches also add wildcards implicitly at the start and
 *  the end of the search string. For example, a search string of
 *  "advertisergroup" will match objects with name "my advertisergroup",
 *  "advertisergroup 2015", or simply "advertisergroup".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_AdvertiserGroupsListResponse.
 *
 *  Retrieves a list of advertiser groups, possibly filtered. This method
 *  supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AdvertiserGroupsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing advertiser group. This method supports patch semantics.
 *
 *  Method: dfareporting.advertiserGroups.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdvertiserGroupsPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdvertiserGroupsPatchWithObject:profileId:identifier:]

/**
 *  Advertiser group ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_AdvertiserGroup.
 *
 *  Updates an existing advertiser group. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_AdvertiserGroup to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Advertiser group ID.
 *
 *  @return GTLRDfareportingQuery_AdvertiserGroupsPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_AdvertiserGroup *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing advertiser group.
 *
 *  Method: dfareporting.advertiserGroups.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdvertiserGroupsUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdvertiserGroupsUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_AdvertiserGroup.
 *
 *  Updates an existing advertiser group.
 *
 *  @param object The @c GTLRDfareporting_AdvertiserGroup to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AdvertiserGroupsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_AdvertiserGroup *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets one landing page by ID.
 *
 *  Method: dfareporting.advertiserLandingPages.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdvertiserLandingPagesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdvertiserLandingPagesGetWithprofileId:identifier:]

/**
 *  Landing page ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_LandingPage.
 *
 *  Gets one landing page by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Landing page ID.
 *
 *  @return GTLRDfareportingQuery_AdvertiserLandingPagesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new landing page.
 *
 *  Method: dfareporting.advertiserLandingPages.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdvertiserLandingPagesInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdvertiserLandingPagesInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_LandingPage.
 *
 *  Inserts a new landing page.
 *
 *  @param object The @c GTLRDfareporting_LandingPage to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AdvertiserLandingPagesInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_LandingPage *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of landing pages.
 *
 *  Method: dfareporting.advertiserLandingPages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdvertiserLandingPagesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdvertiserLandingPagesListWithprofileId:]

/**
 *  Select only landing pages that belong to these advertisers.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *advertiserIds;

/**
 *  Select only archived landing pages. Don't set this field to select both
 *  archived and non-archived landing pages.
 */
@property(nonatomic, assign) BOOL archived;

/**
 *  Select only landing pages that are associated with these campaigns.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *campaignIds;

/**
 *  Select only landing pages with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for landing pages by name or ID. Wildcards (*) are allowed.
 *  For example, "landingpage*2017" will return landing pages with names like
 *  "landingpage July 2017", "landingpage March 2017", or simply "landingpage
 *  2017". Most of the searches also add wildcards implicitly at the start and
 *  the end of the search string. For example, a search string of "landingpage"
 *  will match campaigns with name "my landingpage", "landingpage 2015", or
 *  simply "landingpage".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/** Select only landing pages that belong to this subaccount. */
@property(nonatomic, assign) long long subaccountId;

/**
 *  Fetches a @c GTLRDfareporting_AdvertiserLandingPagesListResponse.
 *
 *  Retrieves a list of landing pages.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AdvertiserLandingPagesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing landing page. This method supports patch semantics.
 *
 *  Method: dfareporting.advertiserLandingPages.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdvertiserLandingPagesPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdvertiserLandingPagesPatchWithObject:profileId:identifier:]

/**
 *  Landing page ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_LandingPage.
 *
 *  Updates an existing landing page. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_LandingPage to include in the query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Landing page ID.
 *
 *  @return GTLRDfareportingQuery_AdvertiserLandingPagesPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_LandingPage *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing landing page.
 *
 *  Method: dfareporting.advertiserLandingPages.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdvertiserLandingPagesUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdvertiserLandingPagesUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_LandingPage.
 *
 *  Updates an existing landing page.
 *
 *  @param object The @c GTLRDfareporting_LandingPage to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AdvertiserLandingPagesUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_LandingPage *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets one advertiser by ID.
 *
 *  Method: dfareporting.advertisers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdvertisersGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdvertisersGetWithprofileId:identifier:]

/**
 *  Advertiser ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Advertiser.
 *
 *  Gets one advertiser by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Advertiser ID.
 *
 *  @return GTLRDfareportingQuery_AdvertisersGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new advertiser.
 *
 *  Method: dfareporting.advertisers.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdvertisersInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdvertisersInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Advertiser.
 *
 *  Inserts a new advertiser.
 *
 *  @param object The @c GTLRDfareporting_Advertiser to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AdvertisersInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Advertiser *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of advertisers, possibly filtered. This method supports
 *  paging.
 *
 *  Method: dfareporting.advertisers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdvertisersList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdvertisersListWithprofileId:]

/**
 *  Select only advertisers with these advertiser group IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *advertiserGroupIds;

/**
 *  Select only advertisers with these floodlight configuration IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *floodlightConfigurationIds;

/**
 *  Select only advertisers with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/** Select only advertisers which do not belong to any advertiser group. */
@property(nonatomic, assign) BOOL includeAdvertisersWithoutGroupsOnly;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Select only advertisers which use another advertiser's floodlight
 *  configuration.
 */
@property(nonatomic, assign) BOOL onlyParent;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for objects by name or ID. Wildcards (*) are allowed. For
 *  example, "advertiser*2015" will return objects with names like "advertiser
 *  June 2015", "advertiser April 2015", or simply "advertiser 2015". Most of
 *  the searches also add wildcards implicitly at the start and the end of the
 *  search string. For example, a search string of "advertiser" will match
 *  objects with name "my advertiser", "advertiser 2015", or simply
 *  "advertiser".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Select only advertisers with the specified status.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingStatusApproved Value "APPROVED"
 *    @arg @c kGTLRDfareportingStatusOnHold Value "ON_HOLD"
 */
@property(nonatomic, copy, nullable) NSString *status;

/** Select only advertisers with these subaccount IDs. */
@property(nonatomic, assign) long long subaccountId;

/**
 *  Fetches a @c GTLRDfareporting_AdvertisersListResponse.
 *
 *  Retrieves a list of advertisers, possibly filtered. This method supports
 *  paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AdvertisersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing advertiser. This method supports patch semantics.
 *
 *  Method: dfareporting.advertisers.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdvertisersPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdvertisersPatchWithObject:profileId:identifier:]

/**
 *  Advertiser ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Advertiser.
 *
 *  Updates an existing advertiser. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_Advertiser to include in the query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Advertiser ID.
 *
 *  @return GTLRDfareportingQuery_AdvertisersPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Advertiser *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing advertiser.
 *
 *  Method: dfareporting.advertisers.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_AdvertisersUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForAdvertisersUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Advertiser.
 *
 *  Updates an existing advertiser.
 *
 *  @param object The @c GTLRDfareporting_Advertiser to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_AdvertisersUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Advertiser *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of browsers.
 *
 *  Method: dfareporting.browsers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_BrowsersList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForBrowsersListWithprofileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_BrowsersListResponse.
 *
 *  Retrieves a list of browsers.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_BrowsersList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Associates a creative with the specified campaign. This method creates a
 *  default ad with dimensions matching the creative in the campaign if such a
 *  default ad does not exist already.
 *
 *  Method: dfareporting.campaignCreativeAssociations.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CampaignCreativeAssociationsInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCampaignCreativeAssociationsInsertWithObject:profileId:campaignId:]

/** Campaign ID in this association. */
@property(nonatomic, assign) long long campaignId;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_CampaignCreativeAssociation.
 *
 *  Associates a creative with the specified campaign. This method creates a
 *  default ad with dimensions matching the creative in the campaign if such a
 *  default ad does not exist already.
 *
 *  @param object The @c GTLRDfareporting_CampaignCreativeAssociation to include
 *    in the query.
 *  @param profileId User profile ID associated with this request.
 *  @param campaignId Campaign ID in this association.
 *
 *  @return GTLRDfareportingQuery_CampaignCreativeAssociationsInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_CampaignCreativeAssociation *)object
                      profileId:(long long)profileId
                     campaignId:(long long)campaignId;

@end

/**
 *  Retrieves the list of creative IDs associated with the specified campaign.
 *  This method supports paging.
 *
 *  Method: dfareporting.campaignCreativeAssociations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CampaignCreativeAssociationsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCampaignCreativeAssociationsListWithprofileId:campaignId:]

/** Campaign ID in this association. */
@property(nonatomic, assign) long long campaignId;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_CampaignCreativeAssociationsListResponse.
 *
 *  Retrieves the list of creative IDs associated with the specified campaign.
 *  This method supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param campaignId Campaign ID in this association.
 *
 *  @return GTLRDfareportingQuery_CampaignCreativeAssociationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        campaignId:(long long)campaignId;

@end

/**
 *  Gets one campaign by ID.
 *
 *  Method: dfareporting.campaigns.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CampaignsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCampaignsGetWithprofileId:identifier:]

/**
 *  Campaign ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Campaign.
 *
 *  Gets one campaign by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Campaign ID.
 *
 *  @return GTLRDfareportingQuery_CampaignsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new campaign.
 *
 *  Method: dfareporting.campaigns.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CampaignsInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCampaignsInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Campaign.
 *
 *  Inserts a new campaign.
 *
 *  @param object The @c GTLRDfareporting_Campaign to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_CampaignsInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Campaign *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of campaigns, possibly filtered. This method supports
 *  paging.
 *
 *  Method: dfareporting.campaigns.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CampaignsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCampaignsListWithprofileId:]

/**
 *  Select only campaigns whose advertisers belong to these advertiser groups.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *advertiserGroupIds;

/**
 *  Select only campaigns that belong to these advertisers.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *advertiserIds;

/**
 *  Select only archived campaigns. Don't set this field to select both archived
 *  and non-archived campaigns.
 */
@property(nonatomic, assign) BOOL archived;

/** Select only campaigns that have at least one optimization activity. */
@property(nonatomic, assign) BOOL atLeastOneOptimizationActivity;

/**
 *  Exclude campaigns with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *excludedIds;

/**
 *  Select only campaigns with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Select only campaigns that have overridden this event tag ID. */
@property(nonatomic, assign) long long overriddenEventTagId;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For
 *  example, "campaign*2015" will return campaigns with names like "campaign
 *  June 2015", "campaign April 2015", or simply "campaign 2015". Most of the
 *  searches also add wildcards implicitly at the start and the end of the
 *  search string. For example, a search string of "campaign" will match
 *  campaigns with name "my campaign", "campaign 2015", or simply "campaign".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/** Select only campaigns that belong to this subaccount. */
@property(nonatomic, assign) long long subaccountId;

/**
 *  Fetches a @c GTLRDfareporting_CampaignsListResponse.
 *
 *  Retrieves a list of campaigns, possibly filtered. This method supports
 *  paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_CampaignsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing campaign. This method supports patch semantics.
 *
 *  Method: dfareporting.campaigns.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CampaignsPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCampaignsPatchWithObject:profileId:identifier:]

/**
 *  Campaign ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Campaign.
 *
 *  Updates an existing campaign. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_Campaign to include in the query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Campaign ID.
 *
 *  @return GTLRDfareportingQuery_CampaignsPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Campaign *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing campaign.
 *
 *  Method: dfareporting.campaigns.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CampaignsUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCampaignsUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Campaign.
 *
 *  Updates an existing campaign.
 *
 *  @param object The @c GTLRDfareporting_Campaign to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_CampaignsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Campaign *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets one change log by ID.
 *
 *  Method: dfareporting.changeLogs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_ChangeLogsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForChangeLogsGetWithprofileId:identifier:]

/**
 *  Change log ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_ChangeLog.
 *
 *  Gets one change log by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Change log ID.
 *
 *  @return GTLRDfareportingQuery_ChangeLogsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Retrieves a list of change logs. This method supports paging.
 *
 *  Method: dfareporting.changeLogs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_ChangeLogsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForChangeLogsListWithprofileId:]

/**
 *  Select only change logs with the specified action.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingActionActionAdd Value "ACTION_ADD"
 *    @arg @c kGTLRDfareportingActionActionAssign Value "ACTION_ASSIGN"
 *    @arg @c kGTLRDfareportingActionActionAssociate Value "ACTION_ASSOCIATE"
 *    @arg @c kGTLRDfareportingActionActionCreate Value "ACTION_CREATE"
 *    @arg @c kGTLRDfareportingActionActionDelete Value "ACTION_DELETE"
 *    @arg @c kGTLRDfareportingActionActionDisable Value "ACTION_DISABLE"
 *    @arg @c kGTLRDfareportingActionActionEmailTags Value "ACTION_EMAIL_TAGS"
 *    @arg @c kGTLRDfareportingActionActionEnable Value "ACTION_ENABLE"
 *    @arg @c kGTLRDfareportingActionActionLink Value "ACTION_LINK"
 *    @arg @c kGTLRDfareportingActionActionMarkAsDefault Value
 *        "ACTION_MARK_AS_DEFAULT"
 *    @arg @c kGTLRDfareportingActionActionPush Value "ACTION_PUSH"
 *    @arg @c kGTLRDfareportingActionActionRemove Value "ACTION_REMOVE"
 *    @arg @c kGTLRDfareportingActionActionSend Value "ACTION_SEND"
 *    @arg @c kGTLRDfareportingActionActionShare Value "ACTION_SHARE"
 *    @arg @c kGTLRDfareportingActionActionUnassign Value "ACTION_UNASSIGN"
 *    @arg @c kGTLRDfareportingActionActionUnlink Value "ACTION_UNLINK"
 *    @arg @c kGTLRDfareportingActionActionUpdate Value "ACTION_UPDATE"
 */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  Select only change logs with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Select only change logs whose change time is before the specified
 *  maxChangeTime.The time should be formatted as an RFC3339 date/time string.
 *  For example, for 10:54 PM on July 18th, 2015, in the America/New York time
 *  zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year,
 *  month, day, the letter T, the hour (24-hour clock system), minute, second,
 *  and then the time zone offset.
 */
@property(nonatomic, copy, nullable) NSString *maxChangeTime;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Select only change logs whose change time is before the specified
 *  minChangeTime.The time should be formatted as an RFC3339 date/time string.
 *  For example, for 10:54 PM on July 18th, 2015, in the America/New York time
 *  zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year,
 *  month, day, the letter T, the hour (24-hour clock system), minute, second,
 *  and then the time zone offset.
 */
@property(nonatomic, copy, nullable) NSString *minChangeTime;

/**
 *  Select only change logs with these object IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *objectIds;

/**
 *  Select only change logs with the specified object type.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingObjectTypeObjectAccount Value "OBJECT_ACCOUNT"
 *    @arg @c kGTLRDfareportingObjectTypeObjectAccountBillingFeature Value
 *        "OBJECT_ACCOUNT_BILLING_FEATURE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectAd Value "OBJECT_AD"
 *    @arg @c kGTLRDfareportingObjectTypeObjectAdvertiser Value
 *        "OBJECT_ADVERTISER"
 *    @arg @c kGTLRDfareportingObjectTypeObjectAdvertiserGroup Value
 *        "OBJECT_ADVERTISER_GROUP"
 *    @arg @c kGTLRDfareportingObjectTypeObjectBillingAccountGroup Value
 *        "OBJECT_BILLING_ACCOUNT_GROUP"
 *    @arg @c kGTLRDfareportingObjectTypeObjectBillingFeature Value
 *        "OBJECT_BILLING_FEATURE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectBillingMinimumFee Value
 *        "OBJECT_BILLING_MINIMUM_FEE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectBillingProfile Value
 *        "OBJECT_BILLING_PROFILE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectCampaign Value "OBJECT_CAMPAIGN"
 *    @arg @c kGTLRDfareportingObjectTypeObjectContentCategory Value
 *        "OBJECT_CONTENT_CATEGORY"
 *    @arg @c kGTLRDfareportingObjectTypeObjectCreative Value "OBJECT_CREATIVE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectCreativeAsset Value
 *        "OBJECT_CREATIVE_ASSET"
 *    @arg @c kGTLRDfareportingObjectTypeObjectCreativeBundle Value
 *        "OBJECT_CREATIVE_BUNDLE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectCreativeField Value
 *        "OBJECT_CREATIVE_FIELD"
 *    @arg @c kGTLRDfareportingObjectTypeObjectCreativeGroup Value
 *        "OBJECT_CREATIVE_GROUP"
 *    @arg @c kGTLRDfareportingObjectTypeObjectDfaSite Value "OBJECT_DFA_SITE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectEventTag Value "OBJECT_EVENT_TAG"
 *    @arg @c kGTLRDfareportingObjectTypeObjectFloodlightActivityGroup Value
 *        "OBJECT_FLOODLIGHT_ACTIVITY_GROUP"
 *    @arg @c kGTLRDfareportingObjectTypeObjectFloodlightActvity Value
 *        "OBJECT_FLOODLIGHT_ACTVITY"
 *    @arg @c kGTLRDfareportingObjectTypeObjectFloodlightConfiguration Value
 *        "OBJECT_FLOODLIGHT_CONFIGURATION"
 *    @arg @c kGTLRDfareportingObjectTypeObjectInstreamCreative Value
 *        "OBJECT_INSTREAM_CREATIVE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectLandingPage Value
 *        "OBJECT_LANDING_PAGE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectMediaOrder Value
 *        "OBJECT_MEDIA_ORDER"
 *    @arg @c kGTLRDfareportingObjectTypeObjectPlacement Value
 *        "OBJECT_PLACEMENT"
 *    @arg @c kGTLRDfareportingObjectTypeObjectPlacementStrategy Value
 *        "OBJECT_PLACEMENT_STRATEGY"
 *    @arg @c kGTLRDfareportingObjectTypeObjectPlaystoreLink Value
 *        "OBJECT_PLAYSTORE_LINK"
 *    @arg @c kGTLRDfareportingObjectTypeObjectProvidedListClient Value
 *        "OBJECT_PROVIDED_LIST_CLIENT"
 *    @arg @c kGTLRDfareportingObjectTypeObjectRateCard Value "OBJECT_RATE_CARD"
 *    @arg @c kGTLRDfareportingObjectTypeObjectRemarketingList Value
 *        "OBJECT_REMARKETING_LIST"
 *    @arg @c kGTLRDfareportingObjectTypeObjectRichmediaCreative Value
 *        "OBJECT_RICHMEDIA_CREATIVE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectSdSite Value "OBJECT_SD_SITE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectSearchLiftStudy Value
 *        "OBJECT_SEARCH_LIFT_STUDY"
 *    @arg @c kGTLRDfareportingObjectTypeObjectSize Value "OBJECT_SIZE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectSubaccount Value
 *        "OBJECT_SUBACCOUNT"
 *    @arg @c kGTLRDfareportingObjectTypeObjectTargetingTemplate Value
 *        "OBJECT_TARGETING_TEMPLATE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectUserProfile Value
 *        "OBJECT_USER_PROFILE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectUserProfileFilter Value
 *        "OBJECT_USER_PROFILE_FILTER"
 *    @arg @c kGTLRDfareportingObjectTypeObjectUserRole Value "OBJECT_USER_ROLE"
 */
@property(nonatomic, copy, nullable) NSString *objectType;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Select only change logs whose object ID, user name, old or new values match
 *  the search string.
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Select only change logs with these user profile IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *userProfileIds;

/**
 *  Fetches a @c GTLRDfareporting_ChangeLogsListResponse.
 *
 *  Retrieves a list of change logs. This method supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_ChangeLogsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Retrieves a list of cities, possibly filtered.
 *
 *  Method: dfareporting.cities.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CitiesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCitiesListWithprofileId:]

/**
 *  Select only cities from these countries.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *countryDartIds;

/**
 *  Select only cities with these DART IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *dartIds;

/** Select only cities with names starting with this prefix. */
@property(nonatomic, copy, nullable) NSString *namePrefix;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Select only cities from these regions.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *regionDartIds;

/**
 *  Fetches a @c GTLRDfareporting_CitiesListResponse.
 *
 *  Retrieves a list of cities, possibly filtered.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_CitiesList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Gets one connection type by ID.
 *
 *  Method: dfareporting.connectionTypes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_ConnectionTypesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForConnectionTypesGetWithprofileId:identifier:]

/**
 *  Connection type ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_ConnectionType.
 *
 *  Gets one connection type by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Connection type ID.
 *
 *  @return GTLRDfareportingQuery_ConnectionTypesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Retrieves a list of connection types.
 *
 *  Method: dfareporting.connectionTypes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_ConnectionTypesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForConnectionTypesListWithprofileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_ConnectionTypesListResponse.
 *
 *  Retrieves a list of connection types.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_ConnectionTypesList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Deletes an existing content category.
 *
 *  Method: dfareporting.contentCategories.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_ContentCategoriesDelete : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForContentCategoriesDeleteWithprofileId:identifier:]

/**
 *  Content category ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an existing content category.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Content category ID.
 *
 *  @return GTLRDfareportingQuery_ContentCategoriesDelete
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Gets one content category by ID.
 *
 *  Method: dfareporting.contentCategories.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_ContentCategoriesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForContentCategoriesGetWithprofileId:identifier:]

/**
 *  Content category ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_ContentCategory.
 *
 *  Gets one content category by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Content category ID.
 *
 *  @return GTLRDfareportingQuery_ContentCategoriesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new content category.
 *
 *  Method: dfareporting.contentCategories.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_ContentCategoriesInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForContentCategoriesInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_ContentCategory.
 *
 *  Inserts a new content category.
 *
 *  @param object The @c GTLRDfareporting_ContentCategory to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_ContentCategoriesInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_ContentCategory *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of content categories, possibly filtered. This method
 *  supports paging.
 *
 *  Method: dfareporting.contentCategories.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_ContentCategoriesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForContentCategoriesListWithprofileId:]

/**
 *  Select only content categories with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for objects by name or ID. Wildcards (*) are allowed. For
 *  example, "contentcategory*2015" will return objects with names like
 *  "contentcategory June 2015", "contentcategory April 2015", or simply
 *  "contentcategory 2015". Most of the searches also add wildcards implicitly
 *  at the start and the end of the search string. For example, a search string
 *  of "contentcategory" will match objects with name "my contentcategory",
 *  "contentcategory 2015", or simply "contentcategory".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_ContentCategoriesListResponse.
 *
 *  Retrieves a list of content categories, possibly filtered. This method
 *  supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_ContentCategoriesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing content category. This method supports patch semantics.
 *
 *  Method: dfareporting.contentCategories.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_ContentCategoriesPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForContentCategoriesPatchWithObject:profileId:identifier:]

/**
 *  Content category ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_ContentCategory.
 *
 *  Updates an existing content category. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_ContentCategory to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Content category ID.
 *
 *  @return GTLRDfareportingQuery_ContentCategoriesPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_ContentCategory *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing content category.
 *
 *  Method: dfareporting.contentCategories.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_ContentCategoriesUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForContentCategoriesUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_ContentCategory.
 *
 *  Updates an existing content category.
 *
 *  @param object The @c GTLRDfareporting_ContentCategory to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_ContentCategoriesUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_ContentCategory *)object
                      profileId:(long long)profileId;

@end

/**
 *  Inserts conversions.
 *
 *  Method: dfareporting.conversions.batchinsert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDdmconversions
 */
@interface GTLRDfareportingQuery_ConversionsBatchinsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForConversionsBatchinsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_ConversionsBatchInsertResponse.
 *
 *  Inserts conversions.
 *
 *  @param object The @c GTLRDfareporting_ConversionsBatchInsertRequest to
 *    include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_ConversionsBatchinsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_ConversionsBatchInsertRequest *)object
                      profileId:(long long)profileId;

@end

/**
 *  Updates existing conversions.
 *
 *  Method: dfareporting.conversions.batchupdate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDdmconversions
 */
@interface GTLRDfareportingQuery_ConversionsBatchupdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForConversionsBatchupdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_ConversionsBatchUpdateResponse.
 *
 *  Updates existing conversions.
 *
 *  @param object The @c GTLRDfareporting_ConversionsBatchUpdateRequest to
 *    include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_ConversionsBatchupdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_ConversionsBatchUpdateRequest *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets one country by ID.
 *
 *  Method: dfareporting.countries.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CountriesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCountriesGetWithprofileId:dartId:]

/** Country DART ID. */
@property(nonatomic, assign) long long dartId;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Country.
 *
 *  Gets one country by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param dartId Country DART ID.
 *
 *  @return GTLRDfareportingQuery_CountriesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                            dartId:(long long)dartId;

@end

/**
 *  Retrieves a list of countries.
 *
 *  Method: dfareporting.countries.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CountriesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCountriesListWithprofileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_CountriesListResponse.
 *
 *  Retrieves a list of countries.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_CountriesList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Inserts a new creative asset.
 *
 *  Method: dfareporting.creativeAssets.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeAssetsInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeAssetsInsertWithObject:profileId:advertiserId:]

/** Advertiser ID of this creative. This is a required field. */
@property(nonatomic, assign) long long advertiserId;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_CreativeAssetMetadata.
 *
 *  Inserts a new creative asset.
 *
 *  @param object The @c GTLRDfareporting_CreativeAssetMetadata to include in
 *    the query.
 *  @param profileId User profile ID associated with this request.
 *  @param advertiserId Advertiser ID of this creative. This is a required
 *    field.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    1024MB. Accepted MIME type: * / *
 *
 *  @return GTLRDfareportingQuery_CreativeAssetsInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeAssetMetadata *)object
                      profileId:(long long)profileId
                   advertiserId:(long long)advertiserId
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Deletes an existing creative field.
 *
 *  Method: dfareporting.creativeFields.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeFieldsDelete : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeFieldsDeleteWithprofileId:identifier:]

/**
 *  Creative Field ID
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an existing creative field.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Creative Field ID
 *
 *  @return GTLRDfareportingQuery_CreativeFieldsDelete
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Gets one creative field by ID.
 *
 *  Method: dfareporting.creativeFields.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeFieldsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeFieldsGetWithprofileId:identifier:]

/**
 *  Creative Field ID
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_CreativeField.
 *
 *  Gets one creative field by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Creative Field ID
 *
 *  @return GTLRDfareportingQuery_CreativeFieldsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new creative field.
 *
 *  Method: dfareporting.creativeFields.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeFieldsInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeFieldsInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_CreativeField.
 *
 *  Inserts a new creative field.
 *
 *  @param object The @c GTLRDfareporting_CreativeField to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_CreativeFieldsInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeField *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of creative fields, possibly filtered. This method supports
 *  paging.
 *
 *  Method: dfareporting.creativeFields.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeFieldsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeFieldsListWithprofileId:]

/**
 *  Select only creative fields that belong to these advertisers.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *advertiserIds;

/**
 *  Select only creative fields with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for creative fields by name or ID. Wildcards (*) are
 *  allowed. For example, "creativefield*2015" will return creative fields with
 *  names like "creativefield June 2015", "creativefield April 2015", or simply
 *  "creativefield 2015". Most of the searches also add wild-cards implicitly at
 *  the start and the end of the search string. For example, a search string of
 *  "creativefield" will match creative fields with the name "my creativefield",
 *  "creativefield 2015", or simply "creativefield".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_CreativeFieldsListResponse.
 *
 *  Retrieves a list of creative fields, possibly filtered. This method supports
 *  paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_CreativeFieldsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing creative field. This method supports patch semantics.
 *
 *  Method: dfareporting.creativeFields.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeFieldsPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeFieldsPatchWithObject:profileId:identifier:]

/**
 *  Creative Field ID
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_CreativeField.
 *
 *  Updates an existing creative field. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_CreativeField to include in the query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Creative Field ID
 *
 *  @return GTLRDfareportingQuery_CreativeFieldsPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeField *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing creative field.
 *
 *  Method: dfareporting.creativeFields.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeFieldsUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeFieldsUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_CreativeField.
 *
 *  Updates an existing creative field.
 *
 *  @param object The @c GTLRDfareporting_CreativeField to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_CreativeFieldsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeField *)object
                      profileId:(long long)profileId;

@end

/**
 *  Deletes an existing creative field value.
 *
 *  Method: dfareporting.creativeFieldValues.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeFieldValuesDelete : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeFieldValuesDeleteWithprofileId:creativeFieldId:identifier:]

/** Creative field ID for this creative field value. */
@property(nonatomic, assign) long long creativeFieldId;

/**
 *  Creative Field Value ID
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an existing creative field value.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param creativeFieldId Creative field ID for this creative field value.
 *  @param identifier Creative Field Value ID
 *
 *  @return GTLRDfareportingQuery_CreativeFieldValuesDelete
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                   creativeFieldId:(long long)creativeFieldId
                        identifier:(long long)identifier;

@end

/**
 *  Gets one creative field value by ID.
 *
 *  Method: dfareporting.creativeFieldValues.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeFieldValuesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeFieldValuesGetWithprofileId:creativeFieldId:identifier:]

/** Creative field ID for this creative field value. */
@property(nonatomic, assign) long long creativeFieldId;

/**
 *  Creative Field Value ID
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_CreativeFieldValue.
 *
 *  Gets one creative field value by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param creativeFieldId Creative field ID for this creative field value.
 *  @param identifier Creative Field Value ID
 *
 *  @return GTLRDfareportingQuery_CreativeFieldValuesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                   creativeFieldId:(long long)creativeFieldId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new creative field value.
 *
 *  Method: dfareporting.creativeFieldValues.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeFieldValuesInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeFieldValuesInsertWithObject:profileId:creativeFieldId:]

/** Creative field ID for this creative field value. */
@property(nonatomic, assign) long long creativeFieldId;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_CreativeFieldValue.
 *
 *  Inserts a new creative field value.
 *
 *  @param object The @c GTLRDfareporting_CreativeFieldValue to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *  @param creativeFieldId Creative field ID for this creative field value.
 *
 *  @return GTLRDfareportingQuery_CreativeFieldValuesInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeFieldValue *)object
                      profileId:(long long)profileId
                creativeFieldId:(long long)creativeFieldId;

@end

/**
 *  Retrieves a list of creative field values, possibly filtered. This method
 *  supports paging.
 *
 *  Method: dfareporting.creativeFieldValues.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeFieldValuesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeFieldValuesListWithprofileId:creativeFieldId:]

/** Creative field ID for this creative field value. */
@property(nonatomic, assign) long long creativeFieldId;

/**
 *  Select only creative field values with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for creative field values by their values. Wildcards (e.g.
 *  *) are not allowed.
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldValue Value "VALUE"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_CreativeFieldValuesListResponse.
 *
 *  Retrieves a list of creative field values, possibly filtered. This method
 *  supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param creativeFieldId Creative field ID for this creative field value.
 *
 *  @return GTLRDfareportingQuery_CreativeFieldValuesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                   creativeFieldId:(long long)creativeFieldId;

@end

/**
 *  Updates an existing creative field value. This method supports patch
 *  semantics.
 *
 *  Method: dfareporting.creativeFieldValues.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeFieldValuesPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeFieldValuesPatchWithObject:profileId:creativeFieldId:identifier:]

/** Creative field ID for this creative field value. */
@property(nonatomic, assign) long long creativeFieldId;

/**
 *  Creative Field Value ID
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_CreativeFieldValue.
 *
 *  Updates an existing creative field value. This method supports patch
 *  semantics.
 *
 *  @param object The @c GTLRDfareporting_CreativeFieldValue to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *  @param creativeFieldId Creative field ID for this creative field value.
 *  @param identifier Creative Field Value ID
 *
 *  @return GTLRDfareportingQuery_CreativeFieldValuesPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeFieldValue *)object
                      profileId:(long long)profileId
                creativeFieldId:(long long)creativeFieldId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing creative field value.
 *
 *  Method: dfareporting.creativeFieldValues.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeFieldValuesUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeFieldValuesUpdateWithObject:profileId:creativeFieldId:]

/** Creative field ID for this creative field value. */
@property(nonatomic, assign) long long creativeFieldId;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_CreativeFieldValue.
 *
 *  Updates an existing creative field value.
 *
 *  @param object The @c GTLRDfareporting_CreativeFieldValue to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *  @param creativeFieldId Creative field ID for this creative field value.
 *
 *  @return GTLRDfareportingQuery_CreativeFieldValuesUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeFieldValue *)object
                      profileId:(long long)profileId
                creativeFieldId:(long long)creativeFieldId;

@end

/**
 *  Gets one creative group by ID.
 *
 *  Method: dfareporting.creativeGroups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeGroupsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeGroupsGetWithprofileId:identifier:]

/**
 *  Creative group ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_CreativeGroup.
 *
 *  Gets one creative group by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Creative group ID.
 *
 *  @return GTLRDfareportingQuery_CreativeGroupsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new creative group.
 *
 *  Method: dfareporting.creativeGroups.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeGroupsInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeGroupsInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_CreativeGroup.
 *
 *  Inserts a new creative group.
 *
 *  @param object The @c GTLRDfareporting_CreativeGroup to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_CreativeGroupsInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeGroup *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of creative groups, possibly filtered. This method supports
 *  paging.
 *
 *  Method: dfareporting.creativeGroups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeGroupsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeGroupsListWithprofileId:]

/**
 *  Select only creative groups that belong to these advertisers.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *advertiserIds;

/**
 *  Select only creative groups that belong to this subgroup.
 *
 *  @note The documented range is 1..2.
 */
@property(nonatomic, assign) NSInteger groupNumber;

/**
 *  Select only creative groups with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for creative groups by name or ID. Wildcards (*) are
 *  allowed. For example, "creativegroup*2015" will return creative groups with
 *  names like "creativegroup June 2015", "creativegroup April 2015", or simply
 *  "creativegroup 2015". Most of the searches also add wild-cards implicitly at
 *  the start and the end of the search string. For example, a search string of
 *  "creativegroup" will match creative groups with the name "my creativegroup",
 *  "creativegroup 2015", or simply "creativegroup".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_CreativeGroupsListResponse.
 *
 *  Retrieves a list of creative groups, possibly filtered. This method supports
 *  paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_CreativeGroupsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing creative group. This method supports patch semantics.
 *
 *  Method: dfareporting.creativeGroups.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeGroupsPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeGroupsPatchWithObject:profileId:identifier:]

/**
 *  Creative group ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_CreativeGroup.
 *
 *  Updates an existing creative group. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_CreativeGroup to include in the query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Creative group ID.
 *
 *  @return GTLRDfareportingQuery_CreativeGroupsPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeGroup *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing creative group.
 *
 *  Method: dfareporting.creativeGroups.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativeGroupsUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativeGroupsUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_CreativeGroup.
 *
 *  Updates an existing creative group.
 *
 *  @param object The @c GTLRDfareporting_CreativeGroup to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_CreativeGroupsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeGroup *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets one creative by ID.
 *
 *  Method: dfareporting.creatives.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativesGetWithprofileId:identifier:]

/**
 *  Creative ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Creative.
 *
 *  Gets one creative by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Creative ID.
 *
 *  @return GTLRDfareportingQuery_CreativesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new creative.
 *
 *  Method: dfareporting.creatives.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativesInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativesInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Creative.
 *
 *  Inserts a new creative.
 *
 *  @param object The @c GTLRDfareporting_Creative to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_CreativesInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Creative *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of creatives, possibly filtered. This method supports
 *  paging.
 *
 *  Method: dfareporting.creatives.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativesListWithprofileId:]

/**
 *  Select only active creatives. Leave blank to select active and inactive
 *  creatives.
 */
@property(nonatomic, assign) BOOL active;

/** Select only creatives with this advertiser ID. */
@property(nonatomic, assign) long long advertiserId;

/**
 *  Select only archived creatives. Leave blank to select archived and
 *  unarchived creatives.
 */
@property(nonatomic, assign) BOOL archived;

/** Select only creatives with this campaign ID. */
@property(nonatomic, assign) long long campaignId;

/**
 *  Select only in-stream video creatives with these companion IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *companionCreativeIds;

/**
 *  Select only creatives with these creative field IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *creativeFieldIds;

/**
 *  Select only creatives with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Select only creatives with these rendering IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *renderingIds;

/**
 *  Allows searching for objects by name or ID. Wildcards (*) are allowed. For
 *  example, "creative*2015" will return objects with names like "creative June
 *  2015", "creative April 2015", or simply "creative 2015". Most of the
 *  searches also add wildcards implicitly at the start and the end of the
 *  search string. For example, a search string of "creative" will match objects
 *  with name "my creative", "creative 2015", or simply "creative".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Select only creatives with these size IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *sizeIds;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/** Select only creatives corresponding to this Studio creative ID. */
@property(nonatomic, assign) long long studioCreativeId;

/**
 *  Select only creatives with these creative types.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingTypesBrandSafeDefaultInstreamVideo Value
 *        "BRAND_SAFE_DEFAULT_INSTREAM_VIDEO"
 *    @arg @c kGTLRDfareportingTypesCustomDisplay Value "CUSTOM_DISPLAY"
 *    @arg @c kGTLRDfareportingTypesCustomDisplayInterstitial Value
 *        "CUSTOM_DISPLAY_INTERSTITIAL"
 *    @arg @c kGTLRDfareportingTypesDisplay Value "DISPLAY"
 *    @arg @c kGTLRDfareportingTypesDisplayImageGallery Value
 *        "DISPLAY_IMAGE_GALLERY"
 *    @arg @c kGTLRDfareportingTypesDisplayRedirect Value "DISPLAY_REDIRECT"
 *    @arg @c kGTLRDfareportingTypesFlashInpage Value "FLASH_INPAGE"
 *    @arg @c kGTLRDfareportingTypesHtml5Banner Value "HTML5_BANNER"
 *    @arg @c kGTLRDfareportingTypesImage Value "IMAGE"
 *    @arg @c kGTLRDfareportingTypesInstreamAudio Value "INSTREAM_AUDIO"
 *    @arg @c kGTLRDfareportingTypesInstreamVideo Value "INSTREAM_VIDEO"
 *    @arg @c kGTLRDfareportingTypesInstreamVideoRedirect Value
 *        "INSTREAM_VIDEO_REDIRECT"
 *    @arg @c kGTLRDfareportingTypesInternalRedirect Value "INTERNAL_REDIRECT"
 *    @arg @c kGTLRDfareportingTypesInterstitialInternalRedirect Value
 *        "INTERSTITIAL_INTERNAL_REDIRECT"
 *    @arg @c kGTLRDfareportingTypesRichMediaDisplayBanner Value
 *        "RICH_MEDIA_DISPLAY_BANNER"
 *    @arg @c kGTLRDfareportingTypesRichMediaDisplayExpanding Value
 *        "RICH_MEDIA_DISPLAY_EXPANDING"
 *    @arg @c kGTLRDfareportingTypesRichMediaDisplayInterstitial Value
 *        "RICH_MEDIA_DISPLAY_INTERSTITIAL"
 *    @arg @c kGTLRDfareportingTypesRichMediaDisplayMultiFloatingInterstitial
 *        Value "RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL"
 *    @arg @c kGTLRDfareportingTypesRichMediaImExpand Value
 *        "RICH_MEDIA_IM_EXPAND"
 *    @arg @c kGTLRDfareportingTypesRichMediaInpageFloating Value
 *        "RICH_MEDIA_INPAGE_FLOATING"
 *    @arg @c kGTLRDfareportingTypesRichMediaMobileInApp Value
 *        "RICH_MEDIA_MOBILE_IN_APP"
 *    @arg @c kGTLRDfareportingTypesRichMediaPeelDown Value
 *        "RICH_MEDIA_PEEL_DOWN"
 *    @arg @c kGTLRDfareportingTypesTrackingText Value "TRACKING_TEXT"
 *    @arg @c kGTLRDfareportingTypesVpaidLinearVideo Value "VPAID_LINEAR_VIDEO"
 *    @arg @c kGTLRDfareportingTypesVpaidNonLinearVideo Value
 *        "VPAID_NON_LINEAR_VIDEO"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *types;

/**
 *  Fetches a @c GTLRDfareporting_CreativesListResponse.
 *
 *  Retrieves a list of creatives, possibly filtered. This method supports
 *  paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_CreativesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing creative. This method supports patch semantics.
 *
 *  Method: dfareporting.creatives.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativesPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativesPatchWithObject:profileId:identifier:]

/**
 *  Creative ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Creative.
 *
 *  Updates an existing creative. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_Creative to include in the query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Creative ID.
 *
 *  @return GTLRDfareportingQuery_CreativesPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Creative *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing creative.
 *
 *  Method: dfareporting.creatives.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_CreativesUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForCreativesUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Creative.
 *
 *  Updates an existing creative.
 *
 *  @param object The @c GTLRDfareporting_Creative to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_CreativesUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Creative *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves list of report dimension values for a list of filters.
 *
 *  Method: dfareporting.dimensionValues.query
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareporting
 */
@interface GTLRDfareportingQuery_DimensionValuesQuery : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForDimensionValuesQueryWithObject:profileId:]

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 100 (from the
 *        range 0..100).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The value of the nextToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The DFA user profile ID. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_DimensionValueList.
 *
 *  Retrieves list of report dimension values for a list of filters.
 *
 *  @param object The @c GTLRDfareporting_DimensionValueRequest to include in
 *    the query.
 *  @param profileId The DFA user profile ID.
 *
 *  @return GTLRDfareportingQuery_DimensionValuesQuery
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_DimensionValueRequest *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets one directory site contact by ID.
 *
 *  Method: dfareporting.directorySiteContacts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_DirectorySiteContactsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForDirectorySiteContactsGetWithprofileId:identifier:]

/**
 *  Directory site contact ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_DirectorySiteContact.
 *
 *  Gets one directory site contact by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Directory site contact ID.
 *
 *  @return GTLRDfareportingQuery_DirectorySiteContactsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Retrieves a list of directory site contacts, possibly filtered. This method
 *  supports paging.
 *
 *  Method: dfareporting.directorySiteContacts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_DirectorySiteContactsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForDirectorySiteContactsListWithprofileId:]

/**
 *  Select only directory site contacts with these directory site IDs. This is a
 *  required field.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *directorySiteIds;

/**
 *  Select only directory site contacts with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for objects by name, ID or email. Wildcards (*) are
 *  allowed. For example, "directory site contact*2015" will return objects with
 *  names like "directory site contact June 2015", "directory site contact April
 *  2015", or simply "directory site contact 2015". Most of the searches also
 *  add wildcards implicitly at the start and the end of the search string. For
 *  example, a search string of "directory site contact" will match objects with
 *  name "my directory site contact", "directory site contact 2015", or simply
 *  "directory site contact".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_DirectorySiteContactsListResponse.
 *
 *  Retrieves a list of directory site contacts, possibly filtered. This method
 *  supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_DirectorySiteContactsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Gets one directory site by ID.
 *
 *  Method: dfareporting.directorySites.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_DirectorySitesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForDirectorySitesGetWithprofileId:identifier:]

/**
 *  Directory site ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_DirectorySite.
 *
 *  Gets one directory site by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Directory site ID.
 *
 *  @return GTLRDfareportingQuery_DirectorySitesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new directory site.
 *
 *  Method: dfareporting.directorySites.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_DirectorySitesInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForDirectorySitesInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_DirectorySite.
 *
 *  Inserts a new directory site.
 *
 *  @param object The @c GTLRDfareporting_DirectorySite to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_DirectorySitesInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_DirectorySite *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of directory sites, possibly filtered. This method supports
 *  paging.
 *
 *  Method: dfareporting.directorySites.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_DirectorySitesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForDirectorySitesListWithprofileId:]

/**
 *  This search filter is no longer supported and will have no effect on the
 *  results returned.
 */
@property(nonatomic, assign) BOOL acceptsInStreamVideoPlacements;

/**
 *  This search filter is no longer supported and will have no effect on the
 *  results returned.
 */
@property(nonatomic, assign) BOOL acceptsInterstitialPlacements;

/**
 *  Select only directory sites that accept publisher paid placements. This
 *  field can be left blank.
 */
@property(nonatomic, assign) BOOL acceptsPublisherPaidPlacements;

/**
 *  Select only active directory sites. Leave blank to retrieve both active and
 *  inactive directory sites.
 */
@property(nonatomic, assign) BOOL active;

/** Select only directory sites with this country ID. */
@property(nonatomic, assign) long long countryId;

/** Select only directory sites with this Ad Manager network code. */
@property(nonatomic, copy, nullable) NSString *dfpNetworkCode;

/**
 *  Select only directory sites with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Select only directory sites with this parent ID. */
@property(nonatomic, assign) long long parentId;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for objects by name, ID or URL. Wildcards (*) are allowed.
 *  For example, "directory site*2015" will return objects with names like
 *  "directory site June 2015", "directory site April 2015", or simply
 *  "directory site 2015". Most of the searches also add wildcards implicitly at
 *  the start and the end of the search string. For example, a search string of
 *  "directory site" will match objects with name "my directory site",
 *  "directory site 2015" or simply, "directory site".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_DirectorySitesListResponse.
 *
 *  Retrieves a list of directory sites, possibly filtered. This method supports
 *  paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_DirectorySitesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Deletes an existing dynamic targeting key.
 *
 *  Method: dfareporting.dynamicTargetingKeys.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_DynamicTargetingKeysDelete : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForDynamicTargetingKeysDeleteWithprofileId:objectId:name:objectType:]

/**
 *  Name of this dynamic targeting key. This is a required field. Must be less
 *  than 256 characters long and cannot contain commas. All characters are
 *  converted to lowercase.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  ID of the object of this dynamic targeting key. This is a required field.
 */
@property(nonatomic, assign) long long objectId;

/**
 *  Type of the object of this dynamic targeting key. This is a required field.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingObjectTypeObjectAd Value "OBJECT_AD"
 *    @arg @c kGTLRDfareportingObjectTypeObjectAdvertiser Value
 *        "OBJECT_ADVERTISER"
 *    @arg @c kGTLRDfareportingObjectTypeObjectCreative Value "OBJECT_CREATIVE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectPlacement Value
 *        "OBJECT_PLACEMENT"
 */
@property(nonatomic, copy, nullable) NSString *objectType;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an existing dynamic targeting key.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param objectId ID of the object of this dynamic targeting key. This is a
 *    required field.
 *  @param name Name of this dynamic targeting key. This is a required field.
 *    Must be less than 256 characters long and cannot contain commas. All
 *    characters are converted to lowercase.
 *  @param objectType Type of the object of this dynamic targeting key. This is
 *    a required field.
 *
 *  Likely values for @c objectType:
 *    @arg @c kGTLRDfareportingObjectTypeObjectAd Value "OBJECT_AD"
 *    @arg @c kGTLRDfareportingObjectTypeObjectAdvertiser Value
 *        "OBJECT_ADVERTISER"
 *    @arg @c kGTLRDfareportingObjectTypeObjectCreative Value "OBJECT_CREATIVE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectPlacement Value
 *        "OBJECT_PLACEMENT"
 *
 *  @return GTLRDfareportingQuery_DynamicTargetingKeysDelete
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                          objectId:(long long)objectId
                              name:(NSString *)name
                        objectType:(NSString *)objectType;

@end

/**
 *  Inserts a new dynamic targeting key. Keys must be created at the advertiser
 *  level before being assigned to the advertiser's ads, creatives, or
 *  placements. There is a maximum of 1000 keys per advertiser, out of which a
 *  maximum of 20 keys can be assigned per ad, creative, or placement.
 *
 *  Method: dfareporting.dynamicTargetingKeys.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_DynamicTargetingKeysInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForDynamicTargetingKeysInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_DynamicTargetingKey.
 *
 *  Inserts a new dynamic targeting key. Keys must be created at the advertiser
 *  level before being assigned to the advertiser's ads, creatives, or
 *  placements. There is a maximum of 1000 keys per advertiser, out of which a
 *  maximum of 20 keys can be assigned per ad, creative, or placement.
 *
 *  @param object The @c GTLRDfareporting_DynamicTargetingKey to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_DynamicTargetingKeysInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_DynamicTargetingKey *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of dynamic targeting keys.
 *
 *  Method: dfareporting.dynamicTargetingKeys.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_DynamicTargetingKeysList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForDynamicTargetingKeysListWithprofileId:]

/** Select only dynamic targeting keys whose object has this advertiser ID. */
@property(nonatomic, assign) long long advertiserId;

/** Select only dynamic targeting keys exactly matching these names. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

/** Select only dynamic targeting keys with this object ID. */
@property(nonatomic, assign) long long objectId;

/**
 *  Select only dynamic targeting keys with this object type.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingObjectTypeObjectAd Value "OBJECT_AD"
 *    @arg @c kGTLRDfareportingObjectTypeObjectAdvertiser Value
 *        "OBJECT_ADVERTISER"
 *    @arg @c kGTLRDfareportingObjectTypeObjectCreative Value "OBJECT_CREATIVE"
 *    @arg @c kGTLRDfareportingObjectTypeObjectPlacement Value
 *        "OBJECT_PLACEMENT"
 */
@property(nonatomic, copy, nullable) NSString *objectType;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_DynamicTargetingKeysListResponse.
 *
 *  Retrieves a list of dynamic targeting keys.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_DynamicTargetingKeysList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Deletes an existing event tag.
 *
 *  Method: dfareporting.eventTags.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_EventTagsDelete : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForEventTagsDeleteWithprofileId:identifier:]

/**
 *  Event tag ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an existing event tag.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Event tag ID.
 *
 *  @return GTLRDfareportingQuery_EventTagsDelete
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Gets one event tag by ID.
 *
 *  Method: dfareporting.eventTags.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_EventTagsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForEventTagsGetWithprofileId:identifier:]

/**
 *  Event tag ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_EventTag.
 *
 *  Gets one event tag by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Event tag ID.
 *
 *  @return GTLRDfareportingQuery_EventTagsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new event tag.
 *
 *  Method: dfareporting.eventTags.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_EventTagsInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForEventTagsInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_EventTag.
 *
 *  Inserts a new event tag.
 *
 *  @param object The @c GTLRDfareporting_EventTag to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_EventTagsInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_EventTag *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of event tags, possibly filtered.
 *
 *  Method: dfareporting.eventTags.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_EventTagsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForEventTagsListWithprofileId:]

/** Select only event tags that belong to this ad. */
@property(nonatomic, assign) long long adId;

/** Select only event tags that belong to this advertiser. */
@property(nonatomic, assign) long long advertiserId;

/** Select only event tags that belong to this campaign. */
@property(nonatomic, assign) long long campaignId;

/**
 *  Examine only the specified campaign or advertiser's event tags for matching
 *  selector criteria. When set to false, the parent advertiser and parent
 *  campaign of the specified ad or campaign is examined as well. In addition,
 *  when set to false, the status field is examined as well, along with the
 *  enabledByDefault field. This parameter can not be set to true when adId is
 *  specified as ads do not define their own even tags.
 */
@property(nonatomic, assign) BOOL definitionsOnly;

/**
 *  Select only enabled event tags. What is considered enabled or disabled
 *  depends on the definitionsOnly parameter. When definitionsOnly is set to
 *  true, only the specified advertiser or campaign's event tags'
 *  enabledByDefault field is examined. When definitionsOnly is set to false,
 *  the specified ad or specified campaign's parent advertiser's or parent
 *  campaign's event tags' enabledByDefault and status fields are examined as
 *  well.
 */
@property(nonatomic, assign) BOOL enabled;

/**
 *  Select only event tags with the specified event tag types. Event tag types
 *  can be used to specify whether to use a third-party pixel, a third-party
 *  JavaScript URL, or a third-party click-through URL for either impression or
 *  click tracking.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingEventTagTypesClickThroughEventTag Value
 *        "CLICK_THROUGH_EVENT_TAG"
 *    @arg @c kGTLRDfareportingEventTagTypesImpressionImageEventTag Value
 *        "IMPRESSION_IMAGE_EVENT_TAG"
 *    @arg @c kGTLRDfareportingEventTagTypesImpressionJavascriptEventTag Value
 *        "IMPRESSION_JAVASCRIPT_EVENT_TAG"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *eventTagTypes;

/**
 *  Select only event tags with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for objects by name or ID. Wildcards (*) are allowed. For
 *  example, "eventtag*2015" will return objects with names like "eventtag June
 *  2015", "eventtag April 2015", or simply "eventtag 2015". Most of the
 *  searches also add wildcards implicitly at the start and the end of the
 *  search string. For example, a search string of "eventtag" will match objects
 *  with name "my eventtag", "eventtag 2015", or simply "eventtag".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_EventTagsListResponse.
 *
 *  Retrieves a list of event tags, possibly filtered.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_EventTagsList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing event tag. This method supports patch semantics.
 *
 *  Method: dfareporting.eventTags.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_EventTagsPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForEventTagsPatchWithObject:profileId:identifier:]

/**
 *  Event tag ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_EventTag.
 *
 *  Updates an existing event tag. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_EventTag to include in the query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Event tag ID.
 *
 *  @return GTLRDfareportingQuery_EventTagsPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_EventTag *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing event tag.
 *
 *  Method: dfareporting.eventTags.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_EventTagsUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForEventTagsUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_EventTag.
 *
 *  Updates an existing event tag.
 *
 *  @param object The @c GTLRDfareporting_EventTag to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_EventTagsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_EventTag *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a report file by its report ID and file ID. This method supports
 *  media download.
 *
 *  Method: dfareporting.files.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareporting
 */
@interface GTLRDfareportingQuery_FilesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFilesGetWithreportId:fileId:]

/** The ID of the report file. */
@property(nonatomic, assign) long long fileId;

/** The ID of the report. */
@property(nonatomic, assign) long long reportId;

/**
 *  Fetches a @c GTLRDfareporting_File.
 *
 *  Retrieves a report file by its report ID and file ID. This method supports
 *  media download.
 *
 *  @param reportId The ID of the report.
 *  @param fileId The ID of the report file.
 *
 *  @return GTLRDfareportingQuery_FilesGet
 */
+ (instancetype)queryWithReportId:(long long)reportId
                           fileId:(long long)fileId;

/**
 *  Fetches the requested resource data as a @c GTLRDataObject.
 *
 *  Retrieves a report file by its report ID and file ID. This method supports
 *  media download.
 *
 *  @param reportId The ID of the report.
 *  @param fileId The ID of the report file.
 *
 *  @return GTLRDfareportingQuery_FilesGet
 */
+ (instancetype)queryForMediaWithReportId:(long long)reportId
                                   fileId:(long long)fileId;

@end

/**
 *  Lists files for a user profile.
 *
 *  Method: dfareporting.files.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareporting
 */
@interface GTLRDfareportingQuery_FilesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFilesListWithprofileId:]

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 10 (from the
 *        range 0..10).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The value of the nextToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The DFA profile ID. */
@property(nonatomic, assign) long long profileId;

/**
 *  The scope that defines which results are returned.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingScopeAll All files in account. (Value: "ALL")
 *    @arg @c kGTLRDfareportingScopeMine My files. (Value: "MINE")
 *    @arg @c kGTLRDfareportingScopeSharedWithMe Files shared with me. (Value:
 *        "SHARED_WITH_ME")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingScopeMine.
 */
@property(nonatomic, copy, nullable) NSString *scope;

/**
 *  The field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Sort by file ID. (Value: "ID")
 *    @arg @c kGTLRDfareportingSortFieldLastModifiedTime Sort by
 *        'lastmodifiedAt' field. (Value: "LAST_MODIFIED_TIME")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldLastModifiedTime.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Ascending order. (Value:
 *        "ASCENDING")
 *    @arg @c kGTLRDfareportingSortOrderDescending Descending order. (Value:
 *        "DESCENDING")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderDescending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_FileList.
 *
 *  Lists files for a user profile.
 *
 *  @param profileId The DFA profile ID.
 *
 *  @return GTLRDfareportingQuery_FilesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Deletes an existing floodlight activity.
 *
 *  Method: dfareporting.floodlightActivities.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_FloodlightActivitiesDelete : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFloodlightActivitiesDeleteWithprofileId:identifier:]

/**
 *  Floodlight activity ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an existing floodlight activity.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Floodlight activity ID.
 *
 *  @return GTLRDfareportingQuery_FloodlightActivitiesDelete
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Generates a tag for a floodlight activity.
 *
 *  Method: dfareporting.floodlightActivities.generatetag
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_FloodlightActivitiesGeneratetag : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFloodlightActivitiesGeneratetagWithprofileId:]

/** Floodlight activity ID for which we want to generate a tag. */
@property(nonatomic, assign) long long floodlightActivityId;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_FloodlightActivitiesGenerateTagResponse.
 *
 *  Generates a tag for a floodlight activity.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_FloodlightActivitiesGeneratetag
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Gets one floodlight activity by ID.
 *
 *  Method: dfareporting.floodlightActivities.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_FloodlightActivitiesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFloodlightActivitiesGetWithprofileId:identifier:]

/**
 *  Floodlight activity ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_FloodlightActivity.
 *
 *  Gets one floodlight activity by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Floodlight activity ID.
 *
 *  @return GTLRDfareportingQuery_FloodlightActivitiesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new floodlight activity.
 *
 *  Method: dfareporting.floodlightActivities.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_FloodlightActivitiesInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFloodlightActivitiesInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_FloodlightActivity.
 *
 *  Inserts a new floodlight activity.
 *
 *  @param object The @c GTLRDfareporting_FloodlightActivity to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_FloodlightActivitiesInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_FloodlightActivity *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of floodlight activities, possibly filtered. This method
 *  supports paging.
 *
 *  Method: dfareporting.floodlightActivities.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_FloodlightActivitiesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFloodlightActivitiesListWithprofileId:]

/**
 *  Select only floodlight activities for the specified advertiser ID. Must
 *  specify either ids, advertiserId, or floodlightConfigurationId for a
 *  non-empty result.
 */
@property(nonatomic, assign) long long advertiserId;

/**
 *  Select only floodlight activities with the specified floodlight activity
 *  group IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *floodlightActivityGroupIds;

/**
 *  Select only floodlight activities with the specified floodlight activity
 *  group name.
 */
@property(nonatomic, copy, nullable) NSString *floodlightActivityGroupName;

/**
 *  Select only floodlight activities with the specified floodlight activity
 *  group tag string.
 */
@property(nonatomic, copy, nullable) NSString *floodlightActivityGroupTagString;

/**
 *  Select only floodlight activities with the specified floodlight activity
 *  group type.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingFloodlightActivityGroupTypeCounter Value
 *        "COUNTER"
 *    @arg @c kGTLRDfareportingFloodlightActivityGroupTypeSale Value "SALE"
 */
@property(nonatomic, copy, nullable) NSString *floodlightActivityGroupType;

/**
 *  Select only floodlight activities for the specified floodlight configuration
 *  ID. Must specify either ids, advertiserId, or floodlightConfigurationId for
 *  a non-empty result.
 */
@property(nonatomic, assign) long long floodlightConfigurationId;

/**
 *  Select only floodlight activities with the specified IDs. Must specify
 *  either ids, advertiserId, or floodlightConfigurationId for a non-empty
 *  result.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for objects by name or ID. Wildcards (*) are allowed. For
 *  example, "floodlightactivity*2015" will return objects with names like
 *  "floodlightactivity June 2015", "floodlightactivity April 2015", or simply
 *  "floodlightactivity 2015". Most of the searches also add wildcards
 *  implicitly at the start and the end of the search string. For example, a
 *  search string of "floodlightactivity" will match objects with name "my
 *  floodlightactivity activity", "floodlightactivity 2015", or simply
 *  "floodlightactivity".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/** Select only floodlight activities with the specified tag string. */
@property(nonatomic, copy, nullable) NSString *tagString;

/**
 *  Fetches a @c GTLRDfareporting_FloodlightActivitiesListResponse.
 *
 *  Retrieves a list of floodlight activities, possibly filtered. This method
 *  supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_FloodlightActivitiesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing floodlight activity. This method supports patch
 *  semantics.
 *
 *  Method: dfareporting.floodlightActivities.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_FloodlightActivitiesPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFloodlightActivitiesPatchWithObject:profileId:identifier:]

/**
 *  Floodlight activity ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_FloodlightActivity.
 *
 *  Updates an existing floodlight activity. This method supports patch
 *  semantics.
 *
 *  @param object The @c GTLRDfareporting_FloodlightActivity to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Floodlight activity ID.
 *
 *  @return GTLRDfareportingQuery_FloodlightActivitiesPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_FloodlightActivity *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing floodlight activity.
 *
 *  Method: dfareporting.floodlightActivities.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_FloodlightActivitiesUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFloodlightActivitiesUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_FloodlightActivity.
 *
 *  Updates an existing floodlight activity.
 *
 *  @param object The @c GTLRDfareporting_FloodlightActivity to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_FloodlightActivitiesUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_FloodlightActivity *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets one floodlight activity group by ID.
 *
 *  Method: dfareporting.floodlightActivityGroups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_FloodlightActivityGroupsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFloodlightActivityGroupsGetWithprofileId:identifier:]

/**
 *  Floodlight activity Group ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_FloodlightActivityGroup.
 *
 *  Gets one floodlight activity group by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Floodlight activity Group ID.
 *
 *  @return GTLRDfareportingQuery_FloodlightActivityGroupsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new floodlight activity group.
 *
 *  Method: dfareporting.floodlightActivityGroups.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_FloodlightActivityGroupsInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFloodlightActivityGroupsInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_FloodlightActivityGroup.
 *
 *  Inserts a new floodlight activity group.
 *
 *  @param object The @c GTLRDfareporting_FloodlightActivityGroup to include in
 *    the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_FloodlightActivityGroupsInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_FloodlightActivityGroup *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of floodlight activity groups, possibly filtered. This
 *  method supports paging.
 *
 *  Method: dfareporting.floodlightActivityGroups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_FloodlightActivityGroupsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFloodlightActivityGroupsListWithprofileId:]

/**
 *  Select only floodlight activity groups with the specified advertiser ID.
 *  Must specify either advertiserId or floodlightConfigurationId for a
 *  non-empty result.
 */
@property(nonatomic, assign) long long advertiserId;

/**
 *  Select only floodlight activity groups with the specified floodlight
 *  configuration ID. Must specify either advertiserId, or
 *  floodlightConfigurationId for a non-empty result.
 */
@property(nonatomic, assign) long long floodlightConfigurationId;

/**
 *  Select only floodlight activity groups with the specified IDs. Must specify
 *  either advertiserId or floodlightConfigurationId for a non-empty result.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for objects by name or ID. Wildcards (*) are allowed. For
 *  example, "floodlightactivitygroup*2015" will return objects with names like
 *  "floodlightactivitygroup June 2015", "floodlightactivitygroup April 2015",
 *  or simply "floodlightactivitygroup 2015". Most of the searches also add
 *  wildcards implicitly at the start and the end of the search string. For
 *  example, a search string of "floodlightactivitygroup" will match objects
 *  with name "my floodlightactivitygroup activity", "floodlightactivitygroup
 *  2015", or simply "floodlightactivitygroup".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Select only floodlight activity groups with the specified floodlight
 *  activity group type.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingTypeCounter Value "COUNTER"
 *    @arg @c kGTLRDfareportingTypeSale Value "SALE"
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRDfareporting_FloodlightActivityGroupsListResponse.
 *
 *  Retrieves a list of floodlight activity groups, possibly filtered. This
 *  method supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_FloodlightActivityGroupsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing floodlight activity group. This method supports patch
 *  semantics.
 *
 *  Method: dfareporting.floodlightActivityGroups.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_FloodlightActivityGroupsPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFloodlightActivityGroupsPatchWithObject:profileId:identifier:]

/**
 *  Floodlight activity Group ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_FloodlightActivityGroup.
 *
 *  Updates an existing floodlight activity group. This method supports patch
 *  semantics.
 *
 *  @param object The @c GTLRDfareporting_FloodlightActivityGroup to include in
 *    the query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Floodlight activity Group ID.
 *
 *  @return GTLRDfareportingQuery_FloodlightActivityGroupsPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_FloodlightActivityGroup *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing floodlight activity group.
 *
 *  Method: dfareporting.floodlightActivityGroups.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_FloodlightActivityGroupsUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFloodlightActivityGroupsUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_FloodlightActivityGroup.
 *
 *  Updates an existing floodlight activity group.
 *
 *  @param object The @c GTLRDfareporting_FloodlightActivityGroup to include in
 *    the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_FloodlightActivityGroupsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_FloodlightActivityGroup *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets one floodlight configuration by ID.
 *
 *  Method: dfareporting.floodlightConfigurations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_FloodlightConfigurationsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFloodlightConfigurationsGetWithprofileId:identifier:]

/**
 *  Floodlight configuration ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_FloodlightConfiguration.
 *
 *  Gets one floodlight configuration by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Floodlight configuration ID.
 *
 *  @return GTLRDfareportingQuery_FloodlightConfigurationsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Retrieves a list of floodlight configurations, possibly filtered.
 *
 *  Method: dfareporting.floodlightConfigurations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_FloodlightConfigurationsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFloodlightConfigurationsListWithprofileId:]

/**
 *  Set of IDs of floodlight configurations to retrieve. Required field;
 *  otherwise an empty list will be returned.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_FloodlightConfigurationsListResponse.
 *
 *  Retrieves a list of floodlight configurations, possibly filtered.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_FloodlightConfigurationsList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing floodlight configuration. This method supports patch
 *  semantics.
 *
 *  Method: dfareporting.floodlightConfigurations.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_FloodlightConfigurationsPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFloodlightConfigurationsPatchWithObject:profileId:identifier:]

/**
 *  Floodlight configuration ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_FloodlightConfiguration.
 *
 *  Updates an existing floodlight configuration. This method supports patch
 *  semantics.
 *
 *  @param object The @c GTLRDfareporting_FloodlightConfiguration to include in
 *    the query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Floodlight configuration ID.
 *
 *  @return GTLRDfareportingQuery_FloodlightConfigurationsPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_FloodlightConfiguration *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing floodlight configuration.
 *
 *  Method: dfareporting.floodlightConfigurations.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_FloodlightConfigurationsUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForFloodlightConfigurationsUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_FloodlightConfiguration.
 *
 *  Updates an existing floodlight configuration.
 *
 *  @param object The @c GTLRDfareporting_FloodlightConfiguration to include in
 *    the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_FloodlightConfigurationsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_FloodlightConfiguration *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets one inventory item by ID.
 *
 *  Method: dfareporting.inventoryItems.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_InventoryItemsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForInventoryItemsGetWithprofileId:projectId:identifier:]

/**
 *  Inventory item ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/** Project ID for order documents. */
@property(nonatomic, assign) long long projectId;

/**
 *  Fetches a @c GTLRDfareporting_InventoryItem.
 *
 *  Gets one inventory item by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param projectId Project ID for order documents.
 *  @param identifier Inventory item ID.
 *
 *  @return GTLRDfareportingQuery_InventoryItemsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                         projectId:(long long)projectId
                        identifier:(long long)identifier;

@end

/**
 *  Retrieves a list of inventory items, possibly filtered. This method supports
 *  paging.
 *
 *  Method: dfareporting.inventoryItems.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_InventoryItemsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForInventoryItemsListWithprofileId:projectId:]

/**
 *  Select only inventory items with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/** Select only inventory items that are in plan. */
@property(nonatomic, assign) BOOL inPlan;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Select only inventory items that belong to specified orders.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *orderId;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/** Project ID for order documents. */
@property(nonatomic, assign) long long projectId;

/**
 *  Select only inventory items that are associated with these sites.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *siteId;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Select only inventory items with this type.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingTypePlanningPlacementTypeCredit Value
 *        "PLANNING_PLACEMENT_TYPE_CREDIT"
 *    @arg @c kGTLRDfareportingTypePlanningPlacementTypeRegular Value
 *        "PLANNING_PLACEMENT_TYPE_REGULAR"
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRDfareporting_InventoryItemsListResponse.
 *
 *  Retrieves a list of inventory items, possibly filtered. This method supports
 *  paging.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param projectId Project ID for order documents.
 *
 *  @return GTLRDfareportingQuery_InventoryItemsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                         projectId:(long long)projectId;

@end

/**
 *  Retrieves a list of languages.
 *
 *  Method: dfareporting.languages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_LanguagesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForLanguagesListWithprofileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_LanguagesListResponse.
 *
 *  Retrieves a list of languages.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_LanguagesList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Retrieves a list of metros.
 *
 *  Method: dfareporting.metros.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_MetrosList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForMetrosListWithprofileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_MetrosListResponse.
 *
 *  Retrieves a list of metros.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_MetrosList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Gets one mobile app by ID.
 *
 *  Method: dfareporting.mobileApps.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_MobileAppsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForMobileAppsGetWithprofileId:identifier:]

/**
 *  Mobile app ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_MobileApp.
 *
 *  Gets one mobile app by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Mobile app ID.
 *
 *  @return GTLRDfareportingQuery_MobileAppsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(NSString *)identifier;

@end

/**
 *  Retrieves list of available mobile apps.
 *
 *  Method: dfareporting.mobileApps.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_MobileAppsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForMobileAppsListWithprofileId:]

/**
 *  Select only apps from these directories.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingDirectoriesAppleAppStore Value "APPLE_APP_STORE"
 *    @arg @c kGTLRDfareportingDirectoriesGooglePlayStore Value
 *        "GOOGLE_PLAY_STORE"
 *    @arg @c kGTLRDfareportingDirectoriesUnknown Value "UNKNOWN"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *directories;

/** Select only apps with these IDs. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for objects by name or ID. Wildcards (*) are allowed. For
 *  example, "app*2015" will return objects with names like "app Jan 2018", "app
 *  Jan 2018", or simply "app 2018". Most of the searches also add wildcards
 *  implicitly at the start and the end of the search string. For example, a
 *  search string of "app" will match objects with name "my app", "app 2018", or
 *  simply "app".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Fetches a @c GTLRDfareporting_MobileAppsListResponse.
 *
 *  Retrieves list of available mobile apps.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_MobileAppsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Gets one mobile carrier by ID.
 *
 *  Method: dfareporting.mobileCarriers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_MobileCarriersGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForMobileCarriersGetWithprofileId:identifier:]

/**
 *  Mobile carrier ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_MobileCarrier.
 *
 *  Gets one mobile carrier by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Mobile carrier ID.
 *
 *  @return GTLRDfareportingQuery_MobileCarriersGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Retrieves a list of mobile carriers.
 *
 *  Method: dfareporting.mobileCarriers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_MobileCarriersList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForMobileCarriersListWithprofileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_MobileCarriersListResponse.
 *
 *  Retrieves a list of mobile carriers.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_MobileCarriersList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Gets one operating system by DART ID.
 *
 *  Method: dfareporting.operatingSystems.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_OperatingSystemsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForOperatingSystemsGetWithprofileId:dartId:]

/** Operating system DART ID. */
@property(nonatomic, assign) long long dartId;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_OperatingSystem.
 *
 *  Gets one operating system by DART ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param dartId Operating system DART ID.
 *
 *  @return GTLRDfareportingQuery_OperatingSystemsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                            dartId:(long long)dartId;

@end

/**
 *  Retrieves a list of operating systems.
 *
 *  Method: dfareporting.operatingSystems.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_OperatingSystemsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForOperatingSystemsListWithprofileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_OperatingSystemsListResponse.
 *
 *  Retrieves a list of operating systems.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_OperatingSystemsList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Gets one operating system version by ID.
 *
 *  Method: dfareporting.operatingSystemVersions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_OperatingSystemVersionsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForOperatingSystemVersionsGetWithprofileId:identifier:]

/**
 *  Operating system version ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_OperatingSystemVersion.
 *
 *  Gets one operating system version by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Operating system version ID.
 *
 *  @return GTLRDfareportingQuery_OperatingSystemVersionsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Retrieves a list of operating system versions.
 *
 *  Method: dfareporting.operatingSystemVersions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_OperatingSystemVersionsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForOperatingSystemVersionsListWithprofileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_OperatingSystemVersionsListResponse.
 *
 *  Retrieves a list of operating system versions.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_OperatingSystemVersionsList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Gets one order document by ID.
 *
 *  Method: dfareporting.orderDocuments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_OrderDocumentsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForOrderDocumentsGetWithprofileId:projectId:identifier:]

/**
 *  Order document ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/** Project ID for order documents. */
@property(nonatomic, assign) long long projectId;

/**
 *  Fetches a @c GTLRDfareporting_OrderDocument.
 *
 *  Gets one order document by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param projectId Project ID for order documents.
 *  @param identifier Order document ID.
 *
 *  @return GTLRDfareportingQuery_OrderDocumentsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                         projectId:(long long)projectId
                        identifier:(long long)identifier;

@end

/**
 *  Retrieves a list of order documents, possibly filtered. This method supports
 *  paging.
 *
 *  Method: dfareporting.orderDocuments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_OrderDocumentsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForOrderDocumentsListWithprofileId:projectId:]

/**
 *  Select only order documents that have been approved by at least one user.
 */
@property(nonatomic, assign) BOOL approved;

/**
 *  Select only order documents with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Select only order documents for specified orders.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *orderId;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/** Project ID for order documents. */
@property(nonatomic, assign) long long projectId;

/**
 *  Allows searching for order documents by name or ID. Wildcards (*) are
 *  allowed. For example, "orderdocument*2015" will return order documents with
 *  names like "orderdocument June 2015", "orderdocument April 2015", or simply
 *  "orderdocument 2015". Most of the searches also add wildcards implicitly at
 *  the start and the end of the search string. For example, a search string of
 *  "orderdocument" will match order documents with name "my orderdocument",
 *  "orderdocument 2015", or simply "orderdocument".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Select only order documents that are associated with these sites.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *siteId;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_OrderDocumentsListResponse.
 *
 *  Retrieves a list of order documents, possibly filtered. This method supports
 *  paging.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param projectId Project ID for order documents.
 *
 *  @return GTLRDfareportingQuery_OrderDocumentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                         projectId:(long long)projectId;

@end

/**
 *  Gets one order by ID.
 *
 *  Method: dfareporting.orders.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_OrdersGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForOrdersGetWithprofileId:projectId:identifier:]

/**
 *  Order ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/** Project ID for orders. */
@property(nonatomic, assign) long long projectId;

/**
 *  Fetches a @c GTLRDfareporting_Order.
 *
 *  Gets one order by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param projectId Project ID for orders.
 *  @param identifier Order ID.
 *
 *  @return GTLRDfareportingQuery_OrdersGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                         projectId:(long long)projectId
                        identifier:(long long)identifier;

@end

/**
 *  Retrieves a list of orders, possibly filtered. This method supports paging.
 *
 *  Method: dfareporting.orders.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_OrdersList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForOrdersListWithprofileId:projectId:]

/**
 *  Select only orders with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/** Project ID for orders. */
@property(nonatomic, assign) long long projectId;

/**
 *  Allows searching for orders by name or ID. Wildcards (*) are allowed. For
 *  example, "order*2015" will return orders with names like "order June 2015",
 *  "order April 2015", or simply "order 2015". Most of the searches also add
 *  wildcards implicitly at the start and the end of the search string. For
 *  example, a search string of "order" will match orders with name "my order",
 *  "order 2015", or simply "order".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Select only orders that are associated with these site IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *siteId;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_OrdersListResponse.
 *
 *  Retrieves a list of orders, possibly filtered. This method supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param projectId Project ID for orders.
 *
 *  @return GTLRDfareportingQuery_OrdersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                         projectId:(long long)projectId;

@end

/**
 *  Gets one placement group by ID.
 *
 *  Method: dfareporting.placementGroups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementGroupsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementGroupsGetWithprofileId:identifier:]

/**
 *  Placement group ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_PlacementGroup.
 *
 *  Gets one placement group by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Placement group ID.
 *
 *  @return GTLRDfareportingQuery_PlacementGroupsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new placement group.
 *
 *  Method: dfareporting.placementGroups.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementGroupsInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementGroupsInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_PlacementGroup.
 *
 *  Inserts a new placement group.
 *
 *  @param object The @c GTLRDfareporting_PlacementGroup to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_PlacementGroupsInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_PlacementGroup *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of placement groups, possibly filtered. This method
 *  supports paging.
 *
 *  Method: dfareporting.placementGroups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementGroupsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementGroupsListWithprofileId:]

/**
 *  Select only placement groups that belong to these advertisers.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *advertiserIds;

/**
 *  Select only archived placements. Don't set this field to select both
 *  archived and non-archived placements.
 */
@property(nonatomic, assign) BOOL archived;

/**
 *  Select only placement groups that belong to these campaigns.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *campaignIds;

/**
 *  Select only placement groups that are associated with these content
 *  categories.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *contentCategoryIds;

/**
 *  Select only placement groups that are associated with these directory sites.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *directorySiteIds;

/**
 *  Select only placement groups with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Select only placements or placement groups whose end date is on or before
 *  the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
 */
@property(nonatomic, copy, nullable) NSString *maxEndDate;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 800 (from the
 *        range 0..800).
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Select only placements or placement groups whose start date is on or before
 *  the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
 */
@property(nonatomic, copy, nullable) NSString *maxStartDate;

/**
 *  Select only placements or placement groups whose end date is on or after the
 *  specified minEndDate. The date should be formatted as "yyyy-MM-dd".
 */
@property(nonatomic, copy, nullable) NSString *minEndDate;

/**
 *  Select only placements or placement groups whose start date is on or after
 *  the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
 */
@property(nonatomic, copy, nullable) NSString *minStartDate;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Select only placement groups belonging with this group type. A package is a
 *  simple group of placements that acts as a single pricing point for a group
 *  of tags. A roadblock is a group of placements that not only acts as a single
 *  pricing point but also assumes that all the tags in it will be served at the
 *  same time. A roadblock requires one of its assigned placements to be marked
 *  as primary for reporting.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingPlacementGroupTypePlacementPackage Value
 *        "PLACEMENT_PACKAGE"
 *    @arg @c kGTLRDfareportingPlacementGroupTypePlacementRoadblock Value
 *        "PLACEMENT_ROADBLOCK"
 */
@property(nonatomic, copy, nullable) NSString *placementGroupType;

/**
 *  Select only placement groups that are associated with these placement
 *  strategies.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *placementStrategyIds;

/**
 *  Select only placement groups with these pricing types.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingPricingTypesPricingTypeCpa Value
 *        "PRICING_TYPE_CPA"
 *    @arg @c kGTLRDfareportingPricingTypesPricingTypeCpc Value
 *        "PRICING_TYPE_CPC"
 *    @arg @c kGTLRDfareportingPricingTypesPricingTypeCpm Value
 *        "PRICING_TYPE_CPM"
 *    @arg @c kGTLRDfareportingPricingTypesPricingTypeCpmActiveview Value
 *        "PRICING_TYPE_CPM_ACTIVEVIEW"
 *    @arg @c kGTLRDfareportingPricingTypesPricingTypeFlatRateClicks Value
 *        "PRICING_TYPE_FLAT_RATE_CLICKS"
 *    @arg @c kGTLRDfareportingPricingTypesPricingTypeFlatRateImpressions Value
 *        "PRICING_TYPE_FLAT_RATE_IMPRESSIONS"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *pricingTypes;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for placement groups by name or ID. Wildcards (*) are
 *  allowed. For example, "placement*2015" will return placement groups with
 *  names like "placement group June 2015", "placement group May 2015", or
 *  simply "placements 2015". Most of the searches also add wildcards implicitly
 *  at the start and the end of the search string. For example, a search string
 *  of "placementgroup" will match placement groups with name "my
 *  placementgroup", "placementgroup 2015", or simply "placementgroup".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Select only placement groups that are associated with these sites.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *siteIds;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_PlacementGroupsListResponse.
 *
 *  Retrieves a list of placement groups, possibly filtered. This method
 *  supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_PlacementGroupsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing placement group. This method supports patch semantics.
 *
 *  Method: dfareporting.placementGroups.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementGroupsPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementGroupsPatchWithObject:profileId:identifier:]

/**
 *  Placement group ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_PlacementGroup.
 *
 *  Updates an existing placement group. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_PlacementGroup to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Placement group ID.
 *
 *  @return GTLRDfareportingQuery_PlacementGroupsPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_PlacementGroup *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing placement group.
 *
 *  Method: dfareporting.placementGroups.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementGroupsUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementGroupsUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_PlacementGroup.
 *
 *  Updates an existing placement group.
 *
 *  @param object The @c GTLRDfareporting_PlacementGroup to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_PlacementGroupsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_PlacementGroup *)object
                      profileId:(long long)profileId;

@end

/**
 *  Generates tags for a placement.
 *
 *  Method: dfareporting.placements.generatetags
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementsGeneratetags : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementsGeneratetagsWithprofileId:]

/**
 *  Generate placements belonging to this campaign. This is a required field.
 */
@property(nonatomic, assign) long long campaignId;

/**
 *  Generate tags for these placements.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *placementIds;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Tag formats to generate for these placements.
 *  Note: PLACEMENT_TAG_STANDARD can only be generated for 1x1 placements.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagClickCommands Value
 *        "PLACEMENT_TAG_CLICK_COMMANDS"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagIframeIlayer Value
 *        "PLACEMENT_TAG_IFRAME_ILAYER"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagIframeJavascript Value
 *        "PLACEMENT_TAG_IFRAME_JAVASCRIPT"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagIframeJavascriptLegacy
 *        Value "PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagInstreamVideoPrefetch Value
 *        "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagInstreamVideoPrefetchVast3
 *        Value "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagInstreamVideoPrefetchVast4
 *        Value "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagInternalRedirect Value
 *        "PLACEMENT_TAG_INTERNAL_REDIRECT"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagInterstitialIframeJavascript
 *        Value "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagInterstitialIframeJavascriptLegacy
 *        Value "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagInterstitialInternalRedirect
 *        Value "PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagInterstitialJavascript
 *        Value "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagInterstitialJavascriptLegacy
 *        Value "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagJavascript Value
 *        "PLACEMENT_TAG_JAVASCRIPT"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagJavascriptLegacy Value
 *        "PLACEMENT_TAG_JAVASCRIPT_LEGACY"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagStandard Value
 *        "PLACEMENT_TAG_STANDARD"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagTracking Value
 *        "PLACEMENT_TAG_TRACKING"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagTrackingIframe Value
 *        "PLACEMENT_TAG_TRACKING_IFRAME"
 *    @arg @c kGTLRDfareportingTagFormatsPlacementTagTrackingJavascript Value
 *        "PLACEMENT_TAG_TRACKING_JAVASCRIPT"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tagFormats;

/**
 *  Fetches a @c GTLRDfareporting_PlacementsGenerateTagsResponse.
 *
 *  Generates tags for a placement.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_PlacementsGeneratetags
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Gets one placement by ID.
 *
 *  Method: dfareporting.placements.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementsGetWithprofileId:identifier:]

/**
 *  Placement ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Placement.
 *
 *  Gets one placement by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Placement ID.
 *
 *  @return GTLRDfareportingQuery_PlacementsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new placement.
 *
 *  Method: dfareporting.placements.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementsInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementsInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Placement.
 *
 *  Inserts a new placement.
 *
 *  @param object The @c GTLRDfareporting_Placement to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_PlacementsInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Placement *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of placements, possibly filtered. This method supports
 *  paging.
 *
 *  Method: dfareporting.placements.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementsListWithprofileId:]

/**
 *  Select only placements that belong to these advertisers.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *advertiserIds;

/**
 *  Select only archived placements. Don't set this field to select both
 *  archived and non-archived placements.
 */
@property(nonatomic, assign) BOOL archived;

/**
 *  Select only placements that belong to these campaigns.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *campaignIds;

/**
 *  Select only placements that are associated with these compatibilities.
 *  DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on
 *  mobile devices for regular or interstitial ads respectively. APP and
 *  APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to
 *  rendering in in-stream video ads developed with the VAST standard.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingCompatibilitiesApp Value "APP"
 *    @arg @c kGTLRDfareportingCompatibilitiesAppInterstitial Value
 *        "APP_INTERSTITIAL"
 *    @arg @c kGTLRDfareportingCompatibilitiesDisplay Value "DISPLAY"
 *    @arg @c kGTLRDfareportingCompatibilitiesDisplayInterstitial Value
 *        "DISPLAY_INTERSTITIAL"
 *    @arg @c kGTLRDfareportingCompatibilitiesInStreamAudio Value
 *        "IN_STREAM_AUDIO"
 *    @arg @c kGTLRDfareportingCompatibilitiesInStreamVideo Value
 *        "IN_STREAM_VIDEO"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *compatibilities;

/**
 *  Select only placements that are associated with these content categories.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *contentCategoryIds;

/**
 *  Select only placements that are associated with these directory sites.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *directorySiteIds;

/**
 *  Select only placements that belong to these placement groups.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *groupIds;

/**
 *  Select only placements with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Select only placements or placement groups whose end date is on or before
 *  the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
 */
@property(nonatomic, copy, nullable) NSString *maxEndDate;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Select only placements or placement groups whose start date is on or before
 *  the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
 */
@property(nonatomic, copy, nullable) NSString *maxStartDate;

/**
 *  Select only placements or placement groups whose end date is on or after the
 *  specified minEndDate. The date should be formatted as "yyyy-MM-dd".
 */
@property(nonatomic, copy, nullable) NSString *minEndDate;

/**
 *  Select only placements or placement groups whose start date is on or after
 *  the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
 */
@property(nonatomic, copy, nullable) NSString *minStartDate;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Select only placements with this payment source.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingPaymentSourcePlacementAgencyPaid Value
 *        "PLACEMENT_AGENCY_PAID"
 *    @arg @c kGTLRDfareportingPaymentSourcePlacementPublisherPaid Value
 *        "PLACEMENT_PUBLISHER_PAID"
 */
@property(nonatomic, copy, nullable) NSString *paymentSource;

/**
 *  Select only placements that are associated with these placement strategies.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *placementStrategyIds;

/**
 *  Select only placements with these pricing types.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingPricingTypesPricingTypeCpa Value
 *        "PRICING_TYPE_CPA"
 *    @arg @c kGTLRDfareportingPricingTypesPricingTypeCpc Value
 *        "PRICING_TYPE_CPC"
 *    @arg @c kGTLRDfareportingPricingTypesPricingTypeCpm Value
 *        "PRICING_TYPE_CPM"
 *    @arg @c kGTLRDfareportingPricingTypesPricingTypeCpmActiveview Value
 *        "PRICING_TYPE_CPM_ACTIVEVIEW"
 *    @arg @c kGTLRDfareportingPricingTypesPricingTypeFlatRateClicks Value
 *        "PRICING_TYPE_FLAT_RATE_CLICKS"
 *    @arg @c kGTLRDfareportingPricingTypesPricingTypeFlatRateImpressions Value
 *        "PRICING_TYPE_FLAT_RATE_IMPRESSIONS"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *pricingTypes;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for placements by name or ID. Wildcards (*) are allowed.
 *  For example, "placement*2015" will return placements with names like
 *  "placement June 2015", "placement May 2015", or simply "placements 2015".
 *  Most of the searches also add wildcards implicitly at the start and the end
 *  of the search string. For example, a search string of "placement" will match
 *  placements with name "my placement", "placement 2015", or simply
 *  "placement".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Select only placements that are associated with these sites.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *siteIds;

/**
 *  Select only placements that are associated with these sizes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *sizeIds;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_PlacementsListResponse.
 *
 *  Retrieves a list of placements, possibly filtered. This method supports
 *  paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_PlacementsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing placement. This method supports patch semantics.
 *
 *  Method: dfareporting.placements.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementsPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementsPatchWithObject:profileId:identifier:]

/**
 *  Placement ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Placement.
 *
 *  Updates an existing placement. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_Placement to include in the query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Placement ID.
 *
 *  @return GTLRDfareportingQuery_PlacementsPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Placement *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Deletes an existing placement strategy.
 *
 *  Method: dfareporting.placementStrategies.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementStrategiesDelete : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementStrategiesDeleteWithprofileId:identifier:]

/**
 *  Placement strategy ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an existing placement strategy.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Placement strategy ID.
 *
 *  @return GTLRDfareportingQuery_PlacementStrategiesDelete
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Gets one placement strategy by ID.
 *
 *  Method: dfareporting.placementStrategies.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementStrategiesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementStrategiesGetWithprofileId:identifier:]

/**
 *  Placement strategy ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_PlacementStrategy.
 *
 *  Gets one placement strategy by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Placement strategy ID.
 *
 *  @return GTLRDfareportingQuery_PlacementStrategiesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new placement strategy.
 *
 *  Method: dfareporting.placementStrategies.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementStrategiesInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementStrategiesInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_PlacementStrategy.
 *
 *  Inserts a new placement strategy.
 *
 *  @param object The @c GTLRDfareporting_PlacementStrategy to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_PlacementStrategiesInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_PlacementStrategy *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of placement strategies, possibly filtered. This method
 *  supports paging.
 *
 *  Method: dfareporting.placementStrategies.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementStrategiesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementStrategiesListWithprofileId:]

/**
 *  Select only placement strategies with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for objects by name or ID. Wildcards (*) are allowed. For
 *  example, "placementstrategy*2015" will return objects with names like
 *  "placementstrategy June 2015", "placementstrategy April 2015", or simply
 *  "placementstrategy 2015". Most of the searches also add wildcards implicitly
 *  at the start and the end of the search string. For example, a search string
 *  of "placementstrategy" will match objects with name "my placementstrategy",
 *  "placementstrategy 2015", or simply "placementstrategy".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_PlacementStrategiesListResponse.
 *
 *  Retrieves a list of placement strategies, possibly filtered. This method
 *  supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_PlacementStrategiesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing placement strategy. This method supports patch
 *  semantics.
 *
 *  Method: dfareporting.placementStrategies.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementStrategiesPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementStrategiesPatchWithObject:profileId:identifier:]

/**
 *  Placement strategy ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_PlacementStrategy.
 *
 *  Updates an existing placement strategy. This method supports patch
 *  semantics.
 *
 *  @param object The @c GTLRDfareporting_PlacementStrategy to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Placement strategy ID.
 *
 *  @return GTLRDfareportingQuery_PlacementStrategiesPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_PlacementStrategy *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing placement strategy.
 *
 *  Method: dfareporting.placementStrategies.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementStrategiesUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementStrategiesUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_PlacementStrategy.
 *
 *  Updates an existing placement strategy.
 *
 *  @param object The @c GTLRDfareporting_PlacementStrategy to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_PlacementStrategiesUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_PlacementStrategy *)object
                      profileId:(long long)profileId;

@end

/**
 *  Updates an existing placement.
 *
 *  Method: dfareporting.placements.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlacementsUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlacementsUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Placement.
 *
 *  Updates an existing placement.
 *
 *  @param object The @c GTLRDfareporting_Placement to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_PlacementsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Placement *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets one platform type by ID.
 *
 *  Method: dfareporting.platformTypes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlatformTypesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlatformTypesGetWithprofileId:identifier:]

/**
 *  Platform type ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_PlatformType.
 *
 *  Gets one platform type by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Platform type ID.
 *
 *  @return GTLRDfareportingQuery_PlatformTypesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Retrieves a list of platform types.
 *
 *  Method: dfareporting.platformTypes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PlatformTypesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPlatformTypesListWithprofileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_PlatformTypesListResponse.
 *
 *  Retrieves a list of platform types.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_PlatformTypesList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Gets one postal code by ID.
 *
 *  Method: dfareporting.postalCodes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PostalCodesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPostalCodesGetWithprofileId:code:]

/** Postal code ID. */
@property(nonatomic, copy, nullable) NSString *code;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_PostalCode.
 *
 *  Gets one postal code by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param code Postal code ID.
 *
 *  @return GTLRDfareportingQuery_PostalCodesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                              code:(NSString *)code;

@end

/**
 *  Retrieves a list of postal codes.
 *
 *  Method: dfareporting.postalCodes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_PostalCodesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForPostalCodesListWithprofileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_PostalCodesListResponse.
 *
 *  Retrieves a list of postal codes.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_PostalCodesList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Gets one project by ID.
 *
 *  Method: dfareporting.projects.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_ProjectsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForProjectsGetWithprofileId:identifier:]

/**
 *  Project ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Project.
 *
 *  Gets one project by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Project ID.
 *
 *  @return GTLRDfareportingQuery_ProjectsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Retrieves a list of projects, possibly filtered. This method supports
 *  paging.
 *
 *  Method: dfareporting.projects.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_ProjectsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForProjectsListWithprofileId:]

/**
 *  Select only projects with these advertiser IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *advertiserIds;

/**
 *  Select only projects with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for projects by name or ID. Wildcards (*) are allowed. For
 *  example, "project*2015" will return projects with names like "project June
 *  2015", "project April 2015", or simply "project 2015". Most of the searches
 *  also add wildcards implicitly at the start and the end of the search string.
 *  For example, a search string of "project" will match projects with name "my
 *  project", "project 2015", or simply "project".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_ProjectsListResponse.
 *
 *  Retrieves a list of projects, possibly filtered. This method supports
 *  paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_ProjectsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Retrieves a list of regions.
 *
 *  Method: dfareporting.regions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_RegionsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForRegionsListWithprofileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_RegionsListResponse.
 *
 *  Retrieves a list of regions.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_RegionsList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Gets one remarketing list by ID.
 *
 *  Method: dfareporting.remarketingLists.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_RemarketingListsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForRemarketingListsGetWithprofileId:identifier:]

/**
 *  Remarketing list ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_RemarketingList.
 *
 *  Gets one remarketing list by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Remarketing list ID.
 *
 *  @return GTLRDfareportingQuery_RemarketingListsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Gets one remarketing list share by remarketing list ID.
 *
 *  Method: dfareporting.remarketingListShares.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_RemarketingListSharesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForRemarketingListSharesGetWithprofileId:remarketingListId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/** Remarketing list ID. */
@property(nonatomic, assign) long long remarketingListId;

/**
 *  Fetches a @c GTLRDfareporting_RemarketingListShare.
 *
 *  Gets one remarketing list share by remarketing list ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param remarketingListId Remarketing list ID.
 *
 *  @return GTLRDfareportingQuery_RemarketingListSharesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                 remarketingListId:(long long)remarketingListId;

@end

/**
 *  Updates an existing remarketing list share. This method supports patch
 *  semantics.
 *
 *  Method: dfareporting.remarketingListShares.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_RemarketingListSharesPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForRemarketingListSharesPatchWithObject:profileId:remarketingListId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/** Remarketing list ID. */
@property(nonatomic, assign) long long remarketingListId;

/**
 *  Fetches a @c GTLRDfareporting_RemarketingListShare.
 *
 *  Updates an existing remarketing list share. This method supports patch
 *  semantics.
 *
 *  @param object The @c GTLRDfareporting_RemarketingListShare to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *  @param remarketingListId Remarketing list ID.
 *
 *  @return GTLRDfareportingQuery_RemarketingListSharesPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_RemarketingListShare *)object
                      profileId:(long long)profileId
              remarketingListId:(long long)remarketingListId;

@end

/**
 *  Updates an existing remarketing list share.
 *
 *  Method: dfareporting.remarketingListShares.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_RemarketingListSharesUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForRemarketingListSharesUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_RemarketingListShare.
 *
 *  Updates an existing remarketing list share.
 *
 *  @param object The @c GTLRDfareporting_RemarketingListShare to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_RemarketingListSharesUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_RemarketingListShare *)object
                      profileId:(long long)profileId;

@end

/**
 *  Inserts a new remarketing list.
 *
 *  Method: dfareporting.remarketingLists.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_RemarketingListsInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForRemarketingListsInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_RemarketingList.
 *
 *  Inserts a new remarketing list.
 *
 *  @param object The @c GTLRDfareporting_RemarketingList to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_RemarketingListsInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_RemarketingList *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of remarketing lists, possibly filtered. This method
 *  supports paging.
 *
 *  Method: dfareporting.remarketingLists.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_RemarketingListsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForRemarketingListsListWithprofileId:advertiserId:]

/** Select only active or only inactive remarketing lists. */
@property(nonatomic, assign) BOOL active;

/** Select only remarketing lists owned by this advertiser. */
@property(nonatomic, assign) long long advertiserId;

/** Select only remarketing lists that have this floodlight activity ID. */
@property(nonatomic, assign) long long floodlightActivityId;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Allows searching for objects by name or ID. Wildcards (*) are allowed. For
 *  example, "remarketing list*2015" will return objects with names like
 *  "remarketing list June 2015", "remarketing list April 2015", or simply
 *  "remarketing list 2015". Most of the searches also add wildcards implicitly
 *  at the start and the end of the search string. For example, a search string
 *  of "remarketing list" will match objects with name "my remarketing list",
 *  "remarketing list 2015", or simply "remarketing list".
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_RemarketingListsListResponse.
 *
 *  Retrieves a list of remarketing lists, possibly filtered. This method
 *  supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param advertiserId Select only remarketing lists owned by this advertiser.
 *
 *  @return GTLRDfareportingQuery_RemarketingListsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                      advertiserId:(long long)advertiserId;

@end

/**
 *  Updates an existing remarketing list. This method supports patch semantics.
 *
 *  Method: dfareporting.remarketingLists.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_RemarketingListsPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForRemarketingListsPatchWithObject:profileId:identifier:]

/**
 *  Remarketing list ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_RemarketingList.
 *
 *  Updates an existing remarketing list. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_RemarketingList to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Remarketing list ID.
 *
 *  @return GTLRDfareportingQuery_RemarketingListsPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_RemarketingList *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing remarketing list.
 *
 *  Method: dfareporting.remarketingLists.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_RemarketingListsUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForRemarketingListsUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_RemarketingList.
 *
 *  Updates an existing remarketing list.
 *
 *  @param object The @c GTLRDfareporting_RemarketingList to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_RemarketingListsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_RemarketingList *)object
                      profileId:(long long)profileId;

@end

/**
 *  Returns the fields that are compatible to be selected in the respective
 *  sections of a report criteria, given the fields already selected in the
 *  input report and user permissions.
 *
 *  Method: dfareporting.reports.compatibleFields.query
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareporting
 */
@interface GTLRDfareportingQuery_ReportsCompatibleFieldsQuery : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForReportsCompatibleFieldsQueryWithObject:profileId:]

/** The DFA user profile ID. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_CompatibleFields.
 *
 *  Returns the fields that are compatible to be selected in the respective
 *  sections of a report criteria, given the fields already selected in the
 *  input report and user permissions.
 *
 *  @param object The @c GTLRDfareporting_Report to include in the query.
 *  @param profileId The DFA user profile ID.
 *
 *  @return GTLRDfareportingQuery_ReportsCompatibleFieldsQuery
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Report *)object
                      profileId:(long long)profileId;

@end

/**
 *  Deletes a report by its ID.
 *
 *  Method: dfareporting.reports.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareporting
 */
@interface GTLRDfareportingQuery_ReportsDelete : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForReportsDeleteWithprofileId:reportId:]

/** The DFA user profile ID. */
@property(nonatomic, assign) long long profileId;

/** The ID of the report. */
@property(nonatomic, assign) long long reportId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a report by its ID.
 *
 *  @param profileId The DFA user profile ID.
 *  @param reportId The ID of the report.
 *
 *  @return GTLRDfareportingQuery_ReportsDelete
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                          reportId:(long long)reportId;

@end

/**
 *  Retrieves a report file. This method supports media download.
 *
 *  Method: dfareporting.reports.files.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareporting
 */
@interface GTLRDfareportingQuery_ReportsFilesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForReportsFilesGetWithprofileId:reportId:fileId:]

/** The ID of the report file. */
@property(nonatomic, assign) long long fileId;

/** The DFA profile ID. */
@property(nonatomic, assign) long long profileId;

/** The ID of the report. */
@property(nonatomic, assign) long long reportId;

/**
 *  Fetches a @c GTLRDfareporting_File.
 *
 *  Retrieves a report file. This method supports media download.
 *
 *  @param profileId The DFA profile ID.
 *  @param reportId The ID of the report.
 *  @param fileId The ID of the report file.
 *
 *  @return GTLRDfareportingQuery_ReportsFilesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                          reportId:(long long)reportId
                            fileId:(long long)fileId;

/**
 *  Fetches the requested resource data as a @c GTLRDataObject.
 *
 *  Retrieves a report file. This method supports media download.
 *
 *  @param profileId The DFA profile ID.
 *  @param reportId The ID of the report.
 *  @param fileId The ID of the report file.
 *
 *  @return GTLRDfareportingQuery_ReportsFilesGet
 */
+ (instancetype)queryForMediaWithProfileId:(long long)profileId
                                  reportId:(long long)reportId
                                    fileId:(long long)fileId;

@end

/**
 *  Lists files for a report.
 *
 *  Method: dfareporting.reports.files.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareporting
 */
@interface GTLRDfareportingQuery_ReportsFilesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForReportsFilesListWithprofileId:reportId:]

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 10 (from the
 *        range 0..10).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The value of the nextToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The DFA profile ID. */
@property(nonatomic, assign) long long profileId;

/** The ID of the parent report. */
@property(nonatomic, assign) long long reportId;

/**
 *  The field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Sort by file ID. (Value: "ID")
 *    @arg @c kGTLRDfareportingSortFieldLastModifiedTime Sort by
 *        'lastmodifiedAt' field. (Value: "LAST_MODIFIED_TIME")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldLastModifiedTime.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Ascending order. (Value:
 *        "ASCENDING")
 *    @arg @c kGTLRDfareportingSortOrderDescending Descending order. (Value:
 *        "DESCENDING")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderDescending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_FileList.
 *
 *  Lists files for a report.
 *
 *  @param profileId The DFA profile ID.
 *  @param reportId The ID of the parent report.
 *
 *  @return GTLRDfareportingQuery_ReportsFilesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                          reportId:(long long)reportId;

@end

/**
 *  Retrieves a report by its ID.
 *
 *  Method: dfareporting.reports.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareporting
 */
@interface GTLRDfareportingQuery_ReportsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForReportsGetWithprofileId:reportId:]

/** The DFA user profile ID. */
@property(nonatomic, assign) long long profileId;

/** The ID of the report. */
@property(nonatomic, assign) long long reportId;

/**
 *  Fetches a @c GTLRDfareporting_Report.
 *
 *  Retrieves a report by its ID.
 *
 *  @param profileId The DFA user profile ID.
 *  @param reportId The ID of the report.
 *
 *  @return GTLRDfareportingQuery_ReportsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                          reportId:(long long)reportId;

@end

/**
 *  Creates a report.
 *
 *  Method: dfareporting.reports.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareporting
 */
@interface GTLRDfareportingQuery_ReportsInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForReportsInsertWithObject:profileId:]

/** The DFA user profile ID. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Report.
 *
 *  Creates a report.
 *
 *  @param object The @c GTLRDfareporting_Report to include in the query.
 *  @param profileId The DFA user profile ID.
 *
 *  @return GTLRDfareportingQuery_ReportsInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Report *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves list of reports.
 *
 *  Method: dfareporting.reports.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareporting
 */
@interface GTLRDfareportingQuery_ReportsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForReportsListWithprofileId:]

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 10 (from the
 *        range 0..10).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The value of the nextToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The DFA user profile ID. */
@property(nonatomic, assign) long long profileId;

/**
 *  The scope that defines which results are returned.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingScopeAll All reports in account. (Value: "ALL")
 *    @arg @c kGTLRDfareportingScopeMine My reports. (Value: "MINE")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingScopeMine.
 */
@property(nonatomic, copy, nullable) NSString *scope;

/**
 *  The field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Sort by report ID. (Value: "ID")
 *    @arg @c kGTLRDfareportingSortFieldLastModifiedTime Sort by
 *        'lastModifiedTime' field. (Value: "LAST_MODIFIED_TIME")
 *    @arg @c kGTLRDfareportingSortFieldName Sort by name of reports. (Value:
 *        "NAME")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldLastModifiedTime.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Ascending order. (Value:
 *        "ASCENDING")
 *    @arg @c kGTLRDfareportingSortOrderDescending Descending order. (Value:
 *        "DESCENDING")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderDescending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_ReportList.
 *
 *  Retrieves list of reports.
 *
 *  @param profileId The DFA user profile ID.
 *
 *  @return GTLRDfareportingQuery_ReportsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates a report. This method supports patch semantics.
 *
 *  Method: dfareporting.reports.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareporting
 */
@interface GTLRDfareportingQuery_ReportsPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForReportsPatchWithObject:profileId:reportId:]

/** The DFA user profile ID. */
@property(nonatomic, assign) long long profileId;

/** The ID of the report. */
@property(nonatomic, assign) long long reportId;

/**
 *  Fetches a @c GTLRDfareporting_Report.
 *
 *  Updates a report. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_Report to include in the query.
 *  @param profileId The DFA user profile ID.
 *  @param reportId The ID of the report.
 *
 *  @return GTLRDfareportingQuery_ReportsPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Report *)object
                      profileId:(long long)profileId
                       reportId:(long long)reportId;

@end

/**
 *  Runs a report.
 *
 *  Method: dfareporting.reports.run
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareporting
 */
@interface GTLRDfareportingQuery_ReportsRun : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForReportsRunWithprofileId:reportId:]

/** The DFA profile ID. */
@property(nonatomic, assign) long long profileId;

/** The ID of the report. */
@property(nonatomic, assign) long long reportId;

/**
 *  If set and true, tries to run the report synchronously.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL synchronous;

/**
 *  Fetches a @c GTLRDfareporting_File.
 *
 *  Runs a report.
 *
 *  @param profileId The DFA profile ID.
 *  @param reportId The ID of the report.
 *
 *  @return GTLRDfareportingQuery_ReportsRun
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                          reportId:(long long)reportId;

@end

/**
 *  Updates a report.
 *
 *  Method: dfareporting.reports.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareporting
 */
@interface GTLRDfareportingQuery_ReportsUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForReportsUpdateWithObject:profileId:reportId:]

/** The DFA user profile ID. */
@property(nonatomic, assign) long long profileId;

/** The ID of the report. */
@property(nonatomic, assign) long long reportId;

/**
 *  Fetches a @c GTLRDfareporting_Report.
 *
 *  Updates a report.
 *
 *  @param object The @c GTLRDfareporting_Report to include in the query.
 *  @param profileId The DFA user profile ID.
 *  @param reportId The ID of the report.
 *
 *  @return GTLRDfareportingQuery_ReportsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Report *)object
                      profileId:(long long)profileId
                       reportId:(long long)reportId;

@end

/**
 *  Gets one site by ID.
 *
 *  Method: dfareporting.sites.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_SitesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForSitesGetWithprofileId:identifier:]

/**
 *  Site ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Site.
 *
 *  Gets one site by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Site ID.
 *
 *  @return GTLRDfareportingQuery_SitesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new site.
 *
 *  Method: dfareporting.sites.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_SitesInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForSitesInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Site.
 *
 *  Inserts a new site.
 *
 *  @param object The @c GTLRDfareporting_Site to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_SitesInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Site *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of sites, possibly filtered. This method supports paging.
 *
 *  Method: dfareporting.sites.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_SitesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForSitesListWithprofileId:]

/**
 *  This search filter is no longer supported and will have no effect on the
 *  results returned.
 */
@property(nonatomic, assign) BOOL acceptsInStreamVideoPlacements;

/**
 *  This search filter is no longer supported and will have no effect on the
 *  results returned.
 */
@property(nonatomic, assign) BOOL acceptsInterstitialPlacements;

/** Select only sites that accept publisher paid placements. */
@property(nonatomic, assign) BOOL acceptsPublisherPaidPlacements;

/** Select only AdWords sites. */
@property(nonatomic, assign) BOOL adWordsSite;

/** Select only approved sites. */
@property(nonatomic, assign) BOOL approved;

/**
 *  Select only sites with these campaign IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *campaignIds;

/**
 *  Select only sites with these directory site IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *directorySiteIds;

/**
 *  Select only sites with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for objects by name, ID or keyName. Wildcards (*) are
 *  allowed. For example, "site*2015" will return objects with names like "site
 *  June 2015", "site April 2015", or simply "site 2015". Most of the searches
 *  also add wildcards implicitly at the start and the end of the search string.
 *  For example, a search string of "site" will match objects with name "my
 *  site", "site 2015", or simply "site".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/** Select only sites with this subaccount ID. */
@property(nonatomic, assign) long long subaccountId;

/** Select only sites that have not been mapped to a directory site. */
@property(nonatomic, assign) BOOL unmappedSite;

/**
 *  Fetches a @c GTLRDfareporting_SitesListResponse.
 *
 *  Retrieves a list of sites, possibly filtered. This method supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_SitesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing site. This method supports patch semantics.
 *
 *  Method: dfareporting.sites.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_SitesPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForSitesPatchWithObject:profileId:identifier:]

/**
 *  Site ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Site.
 *
 *  Updates an existing site. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_Site to include in the query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Site ID.
 *
 *  @return GTLRDfareportingQuery_SitesPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Site *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing site.
 *
 *  Method: dfareporting.sites.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_SitesUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForSitesUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Site.
 *
 *  Updates an existing site.
 *
 *  @param object The @c GTLRDfareporting_Site to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_SitesUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Site *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets one size by ID.
 *
 *  Method: dfareporting.sizes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_SizesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForSizesGetWithprofileId:identifier:]

/**
 *  Size ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Size.
 *
 *  Gets one size by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Size ID.
 *
 *  @return GTLRDfareportingQuery_SizesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new size.
 *
 *  Method: dfareporting.sizes.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_SizesInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForSizesInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Size.
 *
 *  Inserts a new size.
 *
 *  @param object The @c GTLRDfareporting_Size to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_SizesInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Size *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally
 *  unique and may include values not currently in use by your account. Due to
 *  this, the list of sizes returned by this method may differ from the list
 *  seen in the Trafficking UI.
 *
 *  Method: dfareporting.sizes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_SizesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForSizesListWithprofileId:]

/**
 *  Select only sizes with this height.
 *
 *  @note The documented range is 0..32767.
 */
@property(nonatomic, assign) NSInteger height;

/** Select only IAB standard sizes. */
@property(nonatomic, assign) BOOL iabStandard;

/**
 *  Select only sizes with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Select only sizes with this width.
 *
 *  @note The documented range is 0..32767.
 */
@property(nonatomic, assign) NSInteger width;

/**
 *  Fetches a @c GTLRDfareporting_SizesListResponse.
 *
 *  Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally
 *  unique and may include values not currently in use by your account. Due to
 *  this, the list of sizes returned by this method may differ from the list
 *  seen in the Trafficking UI.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_SizesList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Gets one subaccount by ID.
 *
 *  Method: dfareporting.subaccounts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_SubaccountsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForSubaccountsGetWithprofileId:identifier:]

/**
 *  Subaccount ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Subaccount.
 *
 *  Gets one subaccount by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Subaccount ID.
 *
 *  @return GTLRDfareportingQuery_SubaccountsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new subaccount.
 *
 *  Method: dfareporting.subaccounts.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_SubaccountsInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForSubaccountsInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Subaccount.
 *
 *  Inserts a new subaccount.
 *
 *  @param object The @c GTLRDfareporting_Subaccount to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_SubaccountsInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Subaccount *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets a list of subaccounts, possibly filtered. This method supports paging.
 *
 *  Method: dfareporting.subaccounts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_SubaccountsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForSubaccountsListWithprofileId:]

/**
 *  Select only subaccounts with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for objects by name or ID. Wildcards (*) are allowed. For
 *  example, "subaccount*2015" will return objects with names like "subaccount
 *  June 2015", "subaccount April 2015", or simply "subaccount 2015". Most of
 *  the searches also add wildcards implicitly at the start and the end of the
 *  search string. For example, a search string of "subaccount" will match
 *  objects with name "my subaccount", "subaccount 2015", or simply
 *  "subaccount".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_SubaccountsListResponse.
 *
 *  Gets a list of subaccounts, possibly filtered. This method supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_SubaccountsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing subaccount. This method supports patch semantics.
 *
 *  Method: dfareporting.subaccounts.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_SubaccountsPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForSubaccountsPatchWithObject:profileId:identifier:]

/**
 *  Subaccount ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Subaccount.
 *
 *  Updates an existing subaccount. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_Subaccount to include in the query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Subaccount ID.
 *
 *  @return GTLRDfareportingQuery_SubaccountsPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Subaccount *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing subaccount.
 *
 *  Method: dfareporting.subaccounts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_SubaccountsUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForSubaccountsUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_Subaccount.
 *
 *  Updates an existing subaccount.
 *
 *  @param object The @c GTLRDfareporting_Subaccount to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_SubaccountsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_Subaccount *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets one remarketing list by ID.
 *
 *  Method: dfareporting.targetableRemarketingLists.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_TargetableRemarketingListsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForTargetableRemarketingListsGetWithprofileId:identifier:]

/**
 *  Remarketing list ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_TargetableRemarketingList.
 *
 *  Gets one remarketing list by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Remarketing list ID.
 *
 *  @return GTLRDfareportingQuery_TargetableRemarketingListsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Retrieves a list of targetable remarketing lists, possibly filtered. This
 *  method supports paging.
 *
 *  Method: dfareporting.targetableRemarketingLists.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_TargetableRemarketingListsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForTargetableRemarketingListsListWithprofileId:advertiserId:]

/** Select only active or only inactive targetable remarketing lists. */
@property(nonatomic, assign) BOOL active;

/**
 *  Select only targetable remarketing lists targetable by these advertisers.
 */
@property(nonatomic, assign) long long advertiserId;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Allows searching for objects by name or ID. Wildcards (*) are allowed. For
 *  example, "remarketing list*2015" will return objects with names like
 *  "remarketing list June 2015", "remarketing list April 2015", or simply
 *  "remarketing list 2015". Most of the searches also add wildcards implicitly
 *  at the start and the end of the search string. For example, a search string
 *  of "remarketing list" will match objects with name "my remarketing list",
 *  "remarketing list 2015", or simply "remarketing list".
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_TargetableRemarketingListsListResponse.
 *
 *  Retrieves a list of targetable remarketing lists, possibly filtered. This
 *  method supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param advertiserId Select only targetable remarketing lists targetable by
 *    these advertisers.
 *
 *  @return GTLRDfareportingQuery_TargetableRemarketingListsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                      advertiserId:(long long)advertiserId;

@end

/**
 *  Gets one targeting template by ID.
 *
 *  Method: dfareporting.targetingTemplates.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_TargetingTemplatesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForTargetingTemplatesGetWithprofileId:identifier:]

/**
 *  Targeting template ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_TargetingTemplate.
 *
 *  Gets one targeting template by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Targeting template ID.
 *
 *  @return GTLRDfareportingQuery_TargetingTemplatesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new targeting template.
 *
 *  Method: dfareporting.targetingTemplates.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_TargetingTemplatesInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForTargetingTemplatesInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_TargetingTemplate.
 *
 *  Inserts a new targeting template.
 *
 *  @param object The @c GTLRDfareporting_TargetingTemplate to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_TargetingTemplatesInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_TargetingTemplate *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of targeting templates, optionally filtered. This method
 *  supports paging.
 *
 *  Method: dfareporting.targetingTemplates.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_TargetingTemplatesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForTargetingTemplatesListWithprofileId:]

/** Select only targeting templates with this advertiser ID. */
@property(nonatomic, assign) long long advertiserId;

/**
 *  Select only targeting templates with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for objects by name or ID. Wildcards (*) are allowed. For
 *  example, "template*2015" will return objects with names like "template June
 *  2015", "template April 2015", or simply "template 2015". Most of the
 *  searches also add wildcards implicitly at the start and the end of the
 *  search string. For example, a search string of "template" will match objects
 *  with name "my template", "template 2015", or simply "template".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDfareporting_TargetingTemplatesListResponse.
 *
 *  Retrieves a list of targeting templates, optionally filtered. This method
 *  supports paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_TargetingTemplatesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing targeting template. This method supports patch
 *  semantics.
 *
 *  Method: dfareporting.targetingTemplates.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_TargetingTemplatesPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForTargetingTemplatesPatchWithObject:profileId:identifier:]

/**
 *  Targeting template ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_TargetingTemplate.
 *
 *  Updates an existing targeting template. This method supports patch
 *  semantics.
 *
 *  @param object The @c GTLRDfareporting_TargetingTemplate to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Targeting template ID.
 *
 *  @return GTLRDfareportingQuery_TargetingTemplatesPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_TargetingTemplate *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing targeting template.
 *
 *  Method: dfareporting.targetingTemplates.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_TargetingTemplatesUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForTargetingTemplatesUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_TargetingTemplate.
 *
 *  Updates an existing targeting template.
 *
 *  @param object The @c GTLRDfareporting_TargetingTemplate to include in the
 *    query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_TargetingTemplatesUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_TargetingTemplate *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets one user profile by ID.
 *
 *  Method: dfareporting.userProfiles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareporting
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_UserProfilesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForUserProfilesGetWithprofileId:]

/** The user profile ID. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_UserProfile.
 *
 *  Gets one user profile by ID.
 *
 *  @param profileId The user profile ID.
 *
 *  @return GTLRDfareportingQuery_UserProfilesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Retrieves list of user profiles for a user.
 *
 *  Method: dfareporting.userProfiles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareporting
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_UserProfilesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForUserProfilesList]

/**
 *  Fetches a @c GTLRDfareporting_UserProfileList.
 *
 *  Retrieves list of user profiles for a user.
 *
 *  @return GTLRDfareportingQuery_UserProfilesList
 */
+ (instancetype)query;

@end

/**
 *  Gets one user role permission group by ID.
 *
 *  Method: dfareporting.userRolePermissionGroups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_UserRolePermissionGroupsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForUserRolePermissionGroupsGetWithprofileId:identifier:]

/**
 *  User role permission group ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_UserRolePermissionGroup.
 *
 *  Gets one user role permission group by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier User role permission group ID.
 *
 *  @return GTLRDfareportingQuery_UserRolePermissionGroupsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Gets a list of all supported user role permission groups.
 *
 *  Method: dfareporting.userRolePermissionGroups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_UserRolePermissionGroupsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForUserRolePermissionGroupsListWithprofileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_UserRolePermissionGroupsListResponse.
 *
 *  Gets a list of all supported user role permission groups.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_UserRolePermissionGroupsList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Gets one user role permission by ID.
 *
 *  Method: dfareporting.userRolePermissions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_UserRolePermissionsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForUserRolePermissionsGetWithprofileId:identifier:]

/**
 *  User role permission ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_UserRolePermission.
 *
 *  Gets one user role permission by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier User role permission ID.
 *
 *  @return GTLRDfareportingQuery_UserRolePermissionsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Gets a list of user role permissions, possibly filtered.
 *
 *  Method: dfareporting.userRolePermissions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_UserRolePermissionsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForUserRolePermissionsListWithprofileId:]

/**
 *  Select only user role permissions with these IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_UserRolePermissionsListResponse.
 *
 *  Gets a list of user role permissions, possibly filtered.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_UserRolePermissionsList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Deletes an existing user role.
 *
 *  Method: dfareporting.userRoles.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_UserRolesDelete : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForUserRolesDeleteWithprofileId:identifier:]

/**
 *  User role ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an existing user role.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier User role ID.
 *
 *  @return GTLRDfareportingQuery_UserRolesDelete
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Gets one user role by ID.
 *
 *  Method: dfareporting.userRoles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_UserRolesGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForUserRolesGetWithprofileId:identifier:]

/**
 *  User role ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_UserRole.
 *
 *  Gets one user role by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier User role ID.
 *
 *  @return GTLRDfareportingQuery_UserRolesGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier;

@end

/**
 *  Inserts a new user role.
 *
 *  Method: dfareporting.userRoles.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_UserRolesInsert : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForUserRolesInsertWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_UserRole.
 *
 *  Inserts a new user role.
 *
 *  @param object The @c GTLRDfareporting_UserRole to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_UserRolesInsert
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_UserRole *)object
                      profileId:(long long)profileId;

@end

/**
 *  Retrieves a list of user roles, possibly filtered. This method supports
 *  paging.
 *
 *  Method: dfareporting.userRoles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_UserRolesList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForUserRolesListWithprofileId:]

/**
 *  Select only account level user roles not associated with any specific
 *  subaccount.
 */
@property(nonatomic, assign) BOOL accountUserRoleOnly;

/**
 *  Select only user roles with the specified IDs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ids;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Value of the nextPageToken from the previous result page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Allows searching for objects by name or ID. Wildcards (*) are allowed. For
 *  example, "userrole*2015" will return objects with names like "userrole June
 *  2015", "userrole April 2015", or simply "userrole 2015". Most of the
 *  searches also add wildcards implicitly at the start and the end of the
 *  search string. For example, a search string of "userrole" will match objects
 *  with name "my userrole", "userrole 2015", or simply "userrole".
 */
@property(nonatomic, copy, nullable) NSString *searchString;

/**
 *  Field by which to sort the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortFieldId Value "ID"
 *    @arg @c kGTLRDfareportingSortFieldName Value "NAME"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortFieldId.
 */
@property(nonatomic, copy, nullable) NSString *sortField;

/**
 *  Order of sorted results.
 *
 *  Likely values:
 *    @arg @c kGTLRDfareportingSortOrderAscending Value "ASCENDING"
 *    @arg @c kGTLRDfareportingSortOrderDescending Value "DESCENDING"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDfareportingSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/** Select only user roles that belong to this subaccount. */
@property(nonatomic, assign) long long subaccountId;

/**
 *  Fetches a @c GTLRDfareporting_UserRolesListResponse.
 *
 *  Retrieves a list of user roles, possibly filtered. This method supports
 *  paging.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_UserRolesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

/**
 *  Updates an existing user role. This method supports patch semantics.
 *
 *  Method: dfareporting.userRoles.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_UserRolesPatch : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForUserRolesPatchWithObject:profileId:identifier:]

/**
 *  User role ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) long long identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_UserRole.
 *
 *  Updates an existing user role. This method supports patch semantics.
 *
 *  @param object The @c GTLRDfareporting_UserRole to include in the query.
 *  @param profileId User profile ID associated with this request.
 *  @param identifier User role ID.
 *
 *  @return GTLRDfareportingQuery_UserRolesPatch
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_UserRole *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier;

@end

/**
 *  Updates an existing user role.
 *
 *  Method: dfareporting.userRoles.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_UserRolesUpdate : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForUserRolesUpdateWithObject:profileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_UserRole.
 *
 *  Updates an existing user role.
 *
 *  @param object The @c GTLRDfareporting_UserRole to include in the query.
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_UserRolesUpdate
 */
+ (instancetype)queryWithObject:(GTLRDfareporting_UserRole *)object
                      profileId:(long long)profileId;

@end

/**
 *  Gets one video format by ID.
 *
 *  Method: dfareporting.videoFormats.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_VideoFormatsGet : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForVideoFormatsGetWithprofileId:identifier:]

/**
 *  Video format ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) NSInteger identifier;

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_VideoFormat.
 *
 *  Gets one video format by ID.
 *
 *  @param profileId User profile ID associated with this request.
 *  @param identifier Video format ID.
 *
 *  @return GTLRDfareportingQuery_VideoFormatsGet
 */
+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(NSInteger)identifier;

@end

/**
 *  Lists available video formats.
 *
 *  Method: dfareporting.videoFormats.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDfareportingDfatrafficking
 */
@interface GTLRDfareportingQuery_VideoFormatsList : GTLRDfareportingQuery
// Previous library name was
//   +[GTLQueryDfareporting queryForVideoFormatsListWithprofileId:]

/** User profile ID associated with this request. */
@property(nonatomic, assign) long long profileId;

/**
 *  Fetches a @c GTLRDfareporting_VideoFormatsListResponse.
 *
 *  Lists available video formats.
 *
 *  @param profileId User profile ID associated with this request.
 *
 *  @return GTLRDfareportingQuery_VideoFormatsList
 */
+ (instancetype)queryWithProfileId:(long long)profileId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
