// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   DCM/DFA Reporting And Trafficking API (dfareporting/v3.2)
// Description:
//   Manages your DoubleClick Campaign Manager ad campaigns and reports.
// Documentation:
//   https://developers.google.com/doubleclick-advertisers/

#import "GTLRDfareportingQuery.h"

#import "GTLRDfareportingObjects.h"

// ----------------------------------------------------------------------------
// Constants

// action
NSString * const kGTLRDfareportingActionActionAdd           = @"ACTION_ADD";
NSString * const kGTLRDfareportingActionActionAssign        = @"ACTION_ASSIGN";
NSString * const kGTLRDfareportingActionActionAssociate     = @"ACTION_ASSOCIATE";
NSString * const kGTLRDfareportingActionActionCreate        = @"ACTION_CREATE";
NSString * const kGTLRDfareportingActionActionDelete        = @"ACTION_DELETE";
NSString * const kGTLRDfareportingActionActionDisable       = @"ACTION_DISABLE";
NSString * const kGTLRDfareportingActionActionEmailTags     = @"ACTION_EMAIL_TAGS";
NSString * const kGTLRDfareportingActionActionEnable        = @"ACTION_ENABLE";
NSString * const kGTLRDfareportingActionActionLink          = @"ACTION_LINK";
NSString * const kGTLRDfareportingActionActionMarkAsDefault = @"ACTION_MARK_AS_DEFAULT";
NSString * const kGTLRDfareportingActionActionPush          = @"ACTION_PUSH";
NSString * const kGTLRDfareportingActionActionRemove        = @"ACTION_REMOVE";
NSString * const kGTLRDfareportingActionActionSend          = @"ACTION_SEND";
NSString * const kGTLRDfareportingActionActionShare         = @"ACTION_SHARE";
NSString * const kGTLRDfareportingActionActionUnassign      = @"ACTION_UNASSIGN";
NSString * const kGTLRDfareportingActionActionUnlink        = @"ACTION_UNLINK";
NSString * const kGTLRDfareportingActionActionUpdate        = @"ACTION_UPDATE";

// compatibilities
NSString * const kGTLRDfareportingCompatibilitiesApp           = @"APP";
NSString * const kGTLRDfareportingCompatibilitiesAppInterstitial = @"APP_INTERSTITIAL";
NSString * const kGTLRDfareportingCompatibilitiesDisplay       = @"DISPLAY";
NSString * const kGTLRDfareportingCompatibilitiesDisplayInterstitial = @"DISPLAY_INTERSTITIAL";
NSString * const kGTLRDfareportingCompatibilitiesInStreamAudio = @"IN_STREAM_AUDIO";
NSString * const kGTLRDfareportingCompatibilitiesInStreamVideo = @"IN_STREAM_VIDEO";

// compatibility
NSString * const kGTLRDfareportingCompatibilityApp             = @"APP";
NSString * const kGTLRDfareportingCompatibilityAppInterstitial = @"APP_INTERSTITIAL";
NSString * const kGTLRDfareportingCompatibilityDisplay         = @"DISPLAY";
NSString * const kGTLRDfareportingCompatibilityDisplayInterstitial = @"DISPLAY_INTERSTITIAL";
NSString * const kGTLRDfareportingCompatibilityInStreamAudio   = @"IN_STREAM_AUDIO";
NSString * const kGTLRDfareportingCompatibilityInStreamVideo   = @"IN_STREAM_VIDEO";

// directories
NSString * const kGTLRDfareportingDirectoriesAppleAppStore   = @"APPLE_APP_STORE";
NSString * const kGTLRDfareportingDirectoriesGooglePlayStore = @"GOOGLE_PLAY_STORE";
NSString * const kGTLRDfareportingDirectoriesUnknown         = @"UNKNOWN";

// eventTagTypes
NSString * const kGTLRDfareportingEventTagTypesClickThroughEventTag = @"CLICK_THROUGH_EVENT_TAG";
NSString * const kGTLRDfareportingEventTagTypesImpressionImageEventTag = @"IMPRESSION_IMAGE_EVENT_TAG";
NSString * const kGTLRDfareportingEventTagTypesImpressionJavascriptEventTag = @"IMPRESSION_JAVASCRIPT_EVENT_TAG";

// floodlightActivityGroupType
NSString * const kGTLRDfareportingFloodlightActivityGroupTypeCounter = @"COUNTER";
NSString * const kGTLRDfareportingFloodlightActivityGroupTypeSale = @"SALE";

// objectType
NSString * const kGTLRDfareportingObjectTypeObjectAccount      = @"OBJECT_ACCOUNT";
NSString * const kGTLRDfareportingObjectTypeObjectAccountBillingFeature = @"OBJECT_ACCOUNT_BILLING_FEATURE";
NSString * const kGTLRDfareportingObjectTypeObjectAd           = @"OBJECT_AD";
NSString * const kGTLRDfareportingObjectTypeObjectAdvertiser   = @"OBJECT_ADVERTISER";
NSString * const kGTLRDfareportingObjectTypeObjectAdvertiserGroup = @"OBJECT_ADVERTISER_GROUP";
NSString * const kGTLRDfareportingObjectTypeObjectBillingAccountGroup = @"OBJECT_BILLING_ACCOUNT_GROUP";
NSString * const kGTLRDfareportingObjectTypeObjectBillingFeature = @"OBJECT_BILLING_FEATURE";
NSString * const kGTLRDfareportingObjectTypeObjectBillingMinimumFee = @"OBJECT_BILLING_MINIMUM_FEE";
NSString * const kGTLRDfareportingObjectTypeObjectBillingProfile = @"OBJECT_BILLING_PROFILE";
NSString * const kGTLRDfareportingObjectTypeObjectCampaign     = @"OBJECT_CAMPAIGN";
NSString * const kGTLRDfareportingObjectTypeObjectContentCategory = @"OBJECT_CONTENT_CATEGORY";
NSString * const kGTLRDfareportingObjectTypeObjectCreative     = @"OBJECT_CREATIVE";
NSString * const kGTLRDfareportingObjectTypeObjectCreativeAsset = @"OBJECT_CREATIVE_ASSET";
NSString * const kGTLRDfareportingObjectTypeObjectCreativeBundle = @"OBJECT_CREATIVE_BUNDLE";
NSString * const kGTLRDfareportingObjectTypeObjectCreativeField = @"OBJECT_CREATIVE_FIELD";
NSString * const kGTLRDfareportingObjectTypeObjectCreativeGroup = @"OBJECT_CREATIVE_GROUP";
NSString * const kGTLRDfareportingObjectTypeObjectDfaSite      = @"OBJECT_DFA_SITE";
NSString * const kGTLRDfareportingObjectTypeObjectEventTag     = @"OBJECT_EVENT_TAG";
NSString * const kGTLRDfareportingObjectTypeObjectFloodlightActivityGroup = @"OBJECT_FLOODLIGHT_ACTIVITY_GROUP";
NSString * const kGTLRDfareportingObjectTypeObjectFloodlightActvity = @"OBJECT_FLOODLIGHT_ACTVITY";
NSString * const kGTLRDfareportingObjectTypeObjectFloodlightConfiguration = @"OBJECT_FLOODLIGHT_CONFIGURATION";
NSString * const kGTLRDfareportingObjectTypeObjectInstreamCreative = @"OBJECT_INSTREAM_CREATIVE";
NSString * const kGTLRDfareportingObjectTypeObjectLandingPage  = @"OBJECT_LANDING_PAGE";
NSString * const kGTLRDfareportingObjectTypeObjectMediaOrder   = @"OBJECT_MEDIA_ORDER";
NSString * const kGTLRDfareportingObjectTypeObjectPlacement    = @"OBJECT_PLACEMENT";
NSString * const kGTLRDfareportingObjectTypeObjectPlacementStrategy = @"OBJECT_PLACEMENT_STRATEGY";
NSString * const kGTLRDfareportingObjectTypeObjectPlaystoreLink = @"OBJECT_PLAYSTORE_LINK";
NSString * const kGTLRDfareportingObjectTypeObjectProvidedListClient = @"OBJECT_PROVIDED_LIST_CLIENT";
NSString * const kGTLRDfareportingObjectTypeObjectRateCard     = @"OBJECT_RATE_CARD";
NSString * const kGTLRDfareportingObjectTypeObjectRemarketingList = @"OBJECT_REMARKETING_LIST";
NSString * const kGTLRDfareportingObjectTypeObjectRichmediaCreative = @"OBJECT_RICHMEDIA_CREATIVE";
NSString * const kGTLRDfareportingObjectTypeObjectSdSite       = @"OBJECT_SD_SITE";
NSString * const kGTLRDfareportingObjectTypeObjectSearchLiftStudy = @"OBJECT_SEARCH_LIFT_STUDY";
NSString * const kGTLRDfareportingObjectTypeObjectSize         = @"OBJECT_SIZE";
NSString * const kGTLRDfareportingObjectTypeObjectSubaccount   = @"OBJECT_SUBACCOUNT";
NSString * const kGTLRDfareportingObjectTypeObjectTargetingTemplate = @"OBJECT_TARGETING_TEMPLATE";
NSString * const kGTLRDfareportingObjectTypeObjectUserProfile  = @"OBJECT_USER_PROFILE";
NSString * const kGTLRDfareportingObjectTypeObjectUserProfileFilter = @"OBJECT_USER_PROFILE_FILTER";
NSString * const kGTLRDfareportingObjectTypeObjectUserRole     = @"OBJECT_USER_ROLE";

// paymentSource
NSString * const kGTLRDfareportingPaymentSourcePlacementAgencyPaid = @"PLACEMENT_AGENCY_PAID";
NSString * const kGTLRDfareportingPaymentSourcePlacementPublisherPaid = @"PLACEMENT_PUBLISHER_PAID";

// placementGroupType
NSString * const kGTLRDfareportingPlacementGroupTypePlacementPackage = @"PLACEMENT_PACKAGE";
NSString * const kGTLRDfareportingPlacementGroupTypePlacementRoadblock = @"PLACEMENT_ROADBLOCK";

// pricingTypes
NSString * const kGTLRDfareportingPricingTypesPricingTypeCpa   = @"PRICING_TYPE_CPA";
NSString * const kGTLRDfareportingPricingTypesPricingTypeCpc   = @"PRICING_TYPE_CPC";
NSString * const kGTLRDfareportingPricingTypesPricingTypeCpm   = @"PRICING_TYPE_CPM";
NSString * const kGTLRDfareportingPricingTypesPricingTypeCpmActiveview = @"PRICING_TYPE_CPM_ACTIVEVIEW";
NSString * const kGTLRDfareportingPricingTypesPricingTypeFlatRateClicks = @"PRICING_TYPE_FLAT_RATE_CLICKS";
NSString * const kGTLRDfareportingPricingTypesPricingTypeFlatRateImpressions = @"PRICING_TYPE_FLAT_RATE_IMPRESSIONS";

// scope
NSString * const kGTLRDfareportingScopeAll          = @"ALL";
NSString * const kGTLRDfareportingScopeMine         = @"MINE";
NSString * const kGTLRDfareportingScopeSharedWithMe = @"SHARED_WITH_ME";

// sortField
NSString * const kGTLRDfareportingSortFieldId               = @"ID";
NSString * const kGTLRDfareportingSortFieldLastModifiedTime = @"LAST_MODIFIED_TIME";
NSString * const kGTLRDfareportingSortFieldName             = @"NAME";
NSString * const kGTLRDfareportingSortFieldValue            = @"VALUE";

// sortOrder
NSString * const kGTLRDfareportingSortOrderAscending  = @"ASCENDING";
NSString * const kGTLRDfareportingSortOrderDescending = @"DESCENDING";

// status
NSString * const kGTLRDfareportingStatusApproved = @"APPROVED";
NSString * const kGTLRDfareportingStatusOnHold   = @"ON_HOLD";

// tagFormats
NSString * const kGTLRDfareportingTagFormatsPlacementTagClickCommands = @"PLACEMENT_TAG_CLICK_COMMANDS";
NSString * const kGTLRDfareportingTagFormatsPlacementTagIframeIlayer = @"PLACEMENT_TAG_IFRAME_ILAYER";
NSString * const kGTLRDfareportingTagFormatsPlacementTagIframeJavascript = @"PLACEMENT_TAG_IFRAME_JAVASCRIPT";
NSString * const kGTLRDfareportingTagFormatsPlacementTagIframeJavascriptLegacy = @"PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY";
NSString * const kGTLRDfareportingTagFormatsPlacementTagInstreamVideoPrefetch = @"PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH";
NSString * const kGTLRDfareportingTagFormatsPlacementTagInstreamVideoPrefetchVast3 = @"PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3";
NSString * const kGTLRDfareportingTagFormatsPlacementTagInstreamVideoPrefetchVast4 = @"PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4";
NSString * const kGTLRDfareportingTagFormatsPlacementTagInternalRedirect = @"PLACEMENT_TAG_INTERNAL_REDIRECT";
NSString * const kGTLRDfareportingTagFormatsPlacementTagInterstitialIframeJavascript = @"PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT";
NSString * const kGTLRDfareportingTagFormatsPlacementTagInterstitialIframeJavascriptLegacy = @"PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY";
NSString * const kGTLRDfareportingTagFormatsPlacementTagInterstitialInternalRedirect = @"PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT";
NSString * const kGTLRDfareportingTagFormatsPlacementTagInterstitialJavascript = @"PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT";
NSString * const kGTLRDfareportingTagFormatsPlacementTagInterstitialJavascriptLegacy = @"PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY";
NSString * const kGTLRDfareportingTagFormatsPlacementTagJavascript = @"PLACEMENT_TAG_JAVASCRIPT";
NSString * const kGTLRDfareportingTagFormatsPlacementTagJavascriptLegacy = @"PLACEMENT_TAG_JAVASCRIPT_LEGACY";
NSString * const kGTLRDfareportingTagFormatsPlacementTagStandard = @"PLACEMENT_TAG_STANDARD";
NSString * const kGTLRDfareportingTagFormatsPlacementTagTracking = @"PLACEMENT_TAG_TRACKING";
NSString * const kGTLRDfareportingTagFormatsPlacementTagTrackingIframe = @"PLACEMENT_TAG_TRACKING_IFRAME";
NSString * const kGTLRDfareportingTagFormatsPlacementTagTrackingJavascript = @"PLACEMENT_TAG_TRACKING_JAVASCRIPT";

// type
NSString * const kGTLRDfareportingTypeAdServingClickTracker    = @"AD_SERVING_CLICK_TRACKER";
NSString * const kGTLRDfareportingTypeAdServingDefaultAd       = @"AD_SERVING_DEFAULT_AD";
NSString * const kGTLRDfareportingTypeAdServingStandardAd      = @"AD_SERVING_STANDARD_AD";
NSString * const kGTLRDfareportingTypeAdServingTracking        = @"AD_SERVING_TRACKING";
NSString * const kGTLRDfareportingTypeCounter                  = @"COUNTER";
NSString * const kGTLRDfareportingTypePlanningPlacementTypeCredit = @"PLANNING_PLACEMENT_TYPE_CREDIT";
NSString * const kGTLRDfareportingTypePlanningPlacementTypeRegular = @"PLANNING_PLACEMENT_TYPE_REGULAR";
NSString * const kGTLRDfareportingTypeSale                     = @"SALE";

// types
NSString * const kGTLRDfareportingTypesBrandSafeDefaultInstreamVideo = @"BRAND_SAFE_DEFAULT_INSTREAM_VIDEO";
NSString * const kGTLRDfareportingTypesCustomDisplay           = @"CUSTOM_DISPLAY";
NSString * const kGTLRDfareportingTypesCustomDisplayInterstitial = @"CUSTOM_DISPLAY_INTERSTITIAL";
NSString * const kGTLRDfareportingTypesDisplay                 = @"DISPLAY";
NSString * const kGTLRDfareportingTypesDisplayImageGallery     = @"DISPLAY_IMAGE_GALLERY";
NSString * const kGTLRDfareportingTypesDisplayRedirect         = @"DISPLAY_REDIRECT";
NSString * const kGTLRDfareportingTypesFlashInpage             = @"FLASH_INPAGE";
NSString * const kGTLRDfareportingTypesHtml5Banner             = @"HTML5_BANNER";
NSString * const kGTLRDfareportingTypesImage                   = @"IMAGE";
NSString * const kGTLRDfareportingTypesInstreamAudio           = @"INSTREAM_AUDIO";
NSString * const kGTLRDfareportingTypesInstreamVideo           = @"INSTREAM_VIDEO";
NSString * const kGTLRDfareportingTypesInstreamVideoRedirect   = @"INSTREAM_VIDEO_REDIRECT";
NSString * const kGTLRDfareportingTypesInternalRedirect        = @"INTERNAL_REDIRECT";
NSString * const kGTLRDfareportingTypesInterstitialInternalRedirect = @"INTERSTITIAL_INTERNAL_REDIRECT";
NSString * const kGTLRDfareportingTypesRichMediaDisplayBanner  = @"RICH_MEDIA_DISPLAY_BANNER";
NSString * const kGTLRDfareportingTypesRichMediaDisplayExpanding = @"RICH_MEDIA_DISPLAY_EXPANDING";
NSString * const kGTLRDfareportingTypesRichMediaDisplayInterstitial = @"RICH_MEDIA_DISPLAY_INTERSTITIAL";
NSString * const kGTLRDfareportingTypesRichMediaDisplayMultiFloatingInterstitial = @"RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL";
NSString * const kGTLRDfareportingTypesRichMediaImExpand       = @"RICH_MEDIA_IM_EXPAND";
NSString * const kGTLRDfareportingTypesRichMediaInpageFloating = @"RICH_MEDIA_INPAGE_FLOATING";
NSString * const kGTLRDfareportingTypesRichMediaMobileInApp    = @"RICH_MEDIA_MOBILE_IN_APP";
NSString * const kGTLRDfareportingTypesRichMediaPeelDown       = @"RICH_MEDIA_PEEL_DOWN";
NSString * const kGTLRDfareportingTypesTrackingText            = @"TRACKING_TEXT";
NSString * const kGTLRDfareportingTypesVpaidLinearVideo        = @"VPAID_LINEAR_VIDEO";
NSString * const kGTLRDfareportingTypesVpaidNonLinearVideo     = @"VPAID_NON_LINEAR_VIDEO";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRDfareportingQuery

@dynamic fields;

@end

@implementation GTLRDfareportingQuery_AccountActiveAdSummariesGet

@dynamic profileId, summaryAccountId;

+ (instancetype)queryWithProfileId:(long long)profileId
                  summaryAccountId:(long long)summaryAccountId {
  NSArray *pathParams = @[
    @"profileId", @"summaryAccountId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/accountActiveAdSummaries/{summaryAccountId}";
  GTLRDfareportingQuery_AccountActiveAdSummariesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.summaryAccountId = summaryAccountId;
  query.expectedObjectClass = [GTLRDfareporting_AccountActiveAdSummary class];
  query.loggingName = @"dfareporting.accountActiveAdSummaries.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AccountPermissionGroupsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/accountPermissionGroups/{id}";
  GTLRDfareportingQuery_AccountPermissionGroupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_AccountPermissionGroup class];
  query.loggingName = @"dfareporting.accountPermissionGroups.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AccountPermissionGroupsList

@dynamic profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/accountPermissionGroups";
  GTLRDfareportingQuery_AccountPermissionGroupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_AccountPermissionGroupsListResponse class];
  query.loggingName = @"dfareporting.accountPermissionGroups.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AccountPermissionsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/accountPermissions/{id}";
  GTLRDfareportingQuery_AccountPermissionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_AccountPermission class];
  query.loggingName = @"dfareporting.accountPermissions.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AccountPermissionsList

@dynamic profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/accountPermissions";
  GTLRDfareportingQuery_AccountPermissionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_AccountPermissionsListResponse class];
  query.loggingName = @"dfareporting.accountPermissions.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AccountsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/accounts/{id}";
  GTLRDfareportingQuery_AccountsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Account class];
  query.loggingName = @"dfareporting.accounts.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AccountsList

@dynamic active, ids, maxResults, pageToken, profileId, searchString, sortField,
         sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/accounts";
  GTLRDfareportingQuery_AccountsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_AccountsListResponse class];
  query.loggingName = @"dfareporting.accounts.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AccountsPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_Account *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/accounts";
  GTLRDfareportingQuery_AccountsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Account class];
  query.loggingName = @"dfareporting.accounts.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AccountsUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Account *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/accounts";
  GTLRDfareportingQuery_AccountsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Account class];
  query.loggingName = @"dfareporting.accounts.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AccountUserProfilesGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/accountUserProfiles/{id}";
  GTLRDfareportingQuery_AccountUserProfilesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_AccountUserProfile class];
  query.loggingName = @"dfareporting.accountUserProfiles.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AccountUserProfilesInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_AccountUserProfile *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/accountUserProfiles";
  GTLRDfareportingQuery_AccountUserProfilesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_AccountUserProfile class];
  query.loggingName = @"dfareporting.accountUserProfiles.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AccountUserProfilesList

@dynamic active, ids, maxResults, pageToken, profileId, searchString, sortField,
         sortOrder, subaccountId, userRoleId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/accountUserProfiles";
  GTLRDfareportingQuery_AccountUserProfilesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_AccountUserProfilesListResponse class];
  query.loggingName = @"dfareporting.accountUserProfiles.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AccountUserProfilesPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_AccountUserProfile *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/accountUserProfiles";
  GTLRDfareportingQuery_AccountUserProfilesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_AccountUserProfile class];
  query.loggingName = @"dfareporting.accountUserProfiles.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AccountUserProfilesUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_AccountUserProfile *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/accountUserProfiles";
  GTLRDfareportingQuery_AccountUserProfilesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_AccountUserProfile class];
  query.loggingName = @"dfareporting.accountUserProfiles.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/ads/{id}";
  GTLRDfareportingQuery_AdsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Ad class];
  query.loggingName = @"dfareporting.ads.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdsInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Ad *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/ads";
  GTLRDfareportingQuery_AdsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Ad class];
  query.loggingName = @"dfareporting.ads.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdsList

@dynamic active, advertiserId, archived, audienceSegmentIds, campaignIds,
         compatibility, creativeIds, creativeOptimizationConfigurationIds,
         dynamicClickTracker, ids, landingPageIds, maxResults,
         overriddenEventTagId, pageToken, placementIds, profileId,
         remarketingListIds, searchString, sizeIds, sortField, sortOrder,
         sslCompliant, sslRequired, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"audienceSegmentIds" : [NSNumber class],
    @"campaignIds" : [NSNumber class],
    @"creativeIds" : [NSNumber class],
    @"creativeOptimizationConfigurationIds" : [NSNumber class],
    @"ids" : [NSNumber class],
    @"landingPageIds" : [NSNumber class],
    @"placementIds" : [NSNumber class],
    @"remarketingListIds" : [NSNumber class],
    @"sizeIds" : [NSNumber class],
    @"type" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/ads";
  GTLRDfareportingQuery_AdsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_AdsListResponse class];
  query.loggingName = @"dfareporting.ads.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdsPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_Ad *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/ads";
  GTLRDfareportingQuery_AdsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Ad class];
  query.loggingName = @"dfareporting.ads.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdsUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Ad *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/ads";
  GTLRDfareportingQuery_AdsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Ad class];
  query.loggingName = @"dfareporting.ads.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdvertiserGroupsDelete

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/advertiserGroups/{id}";
  GTLRDfareportingQuery_AdvertiserGroupsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.loggingName = @"dfareporting.advertiserGroups.delete";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdvertiserGroupsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/advertiserGroups/{id}";
  GTLRDfareportingQuery_AdvertiserGroupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_AdvertiserGroup class];
  query.loggingName = @"dfareporting.advertiserGroups.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdvertiserGroupsInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_AdvertiserGroup *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/advertiserGroups";
  GTLRDfareportingQuery_AdvertiserGroupsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_AdvertiserGroup class];
  query.loggingName = @"dfareporting.advertiserGroups.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdvertiserGroupsList

@dynamic ids, maxResults, pageToken, profileId, searchString, sortField,
         sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/advertiserGroups";
  GTLRDfareportingQuery_AdvertiserGroupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_AdvertiserGroupsListResponse class];
  query.loggingName = @"dfareporting.advertiserGroups.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdvertiserGroupsPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_AdvertiserGroup *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/advertiserGroups";
  GTLRDfareportingQuery_AdvertiserGroupsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_AdvertiserGroup class];
  query.loggingName = @"dfareporting.advertiserGroups.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdvertiserGroupsUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_AdvertiserGroup *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/advertiserGroups";
  GTLRDfareportingQuery_AdvertiserGroupsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_AdvertiserGroup class];
  query.loggingName = @"dfareporting.advertiserGroups.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdvertiserLandingPagesGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/advertiserLandingPages/{id}";
  GTLRDfareportingQuery_AdvertiserLandingPagesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_LandingPage class];
  query.loggingName = @"dfareporting.advertiserLandingPages.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdvertiserLandingPagesInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_LandingPage *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/advertiserLandingPages";
  GTLRDfareportingQuery_AdvertiserLandingPagesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_LandingPage class];
  query.loggingName = @"dfareporting.advertiserLandingPages.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdvertiserLandingPagesList

@dynamic advertiserIds, archived, campaignIds, ids, maxResults, pageToken,
         profileId, searchString, sortField, sortOrder, subaccountId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"advertiserIds" : [NSNumber class],
    @"campaignIds" : [NSNumber class],
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/advertiserLandingPages";
  GTLRDfareportingQuery_AdvertiserLandingPagesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_AdvertiserLandingPagesListResponse class];
  query.loggingName = @"dfareporting.advertiserLandingPages.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdvertiserLandingPagesPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_LandingPage *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/advertiserLandingPages";
  GTLRDfareportingQuery_AdvertiserLandingPagesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_LandingPage class];
  query.loggingName = @"dfareporting.advertiserLandingPages.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdvertiserLandingPagesUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_LandingPage *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/advertiserLandingPages";
  GTLRDfareportingQuery_AdvertiserLandingPagesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_LandingPage class];
  query.loggingName = @"dfareporting.advertiserLandingPages.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdvertisersGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/advertisers/{id}";
  GTLRDfareportingQuery_AdvertisersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Advertiser class];
  query.loggingName = @"dfareporting.advertisers.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdvertisersInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Advertiser *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/advertisers";
  GTLRDfareportingQuery_AdvertisersInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Advertiser class];
  query.loggingName = @"dfareporting.advertisers.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdvertisersList

@dynamic advertiserGroupIds, floodlightConfigurationIds, ids,
         includeAdvertisersWithoutGroupsOnly, maxResults, onlyParent, pageToken,
         profileId, searchString, sortField, sortOrder, status, subaccountId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"advertiserGroupIds" : [NSNumber class],
    @"floodlightConfigurationIds" : [NSNumber class],
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/advertisers";
  GTLRDfareportingQuery_AdvertisersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_AdvertisersListResponse class];
  query.loggingName = @"dfareporting.advertisers.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdvertisersPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_Advertiser *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/advertisers";
  GTLRDfareportingQuery_AdvertisersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Advertiser class];
  query.loggingName = @"dfareporting.advertisers.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_AdvertisersUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Advertiser *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/advertisers";
  GTLRDfareportingQuery_AdvertisersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Advertiser class];
  query.loggingName = @"dfareporting.advertisers.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_BrowsersList

@dynamic profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/browsers";
  GTLRDfareportingQuery_BrowsersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_BrowsersListResponse class];
  query.loggingName = @"dfareporting.browsers.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CampaignCreativeAssociationsInsert

@dynamic campaignId, profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_CampaignCreativeAssociation *)object
                      profileId:(long long)profileId
                     campaignId:(long long)campaignId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"campaignId", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations";
  GTLRDfareportingQuery_CampaignCreativeAssociationsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.campaignId = campaignId;
  query.expectedObjectClass = [GTLRDfareporting_CampaignCreativeAssociation class];
  query.loggingName = @"dfareporting.campaignCreativeAssociations.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CampaignCreativeAssociationsList

@dynamic campaignId, maxResults, pageToken, profileId, sortOrder;

+ (instancetype)queryWithProfileId:(long long)profileId
                        campaignId:(long long)campaignId {
  NSArray *pathParams = @[
    @"campaignId", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations";
  GTLRDfareportingQuery_CampaignCreativeAssociationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.campaignId = campaignId;
  query.expectedObjectClass = [GTLRDfareporting_CampaignCreativeAssociationsListResponse class];
  query.loggingName = @"dfareporting.campaignCreativeAssociations.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CampaignsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/campaigns/{id}";
  GTLRDfareportingQuery_CampaignsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Campaign class];
  query.loggingName = @"dfareporting.campaigns.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CampaignsInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Campaign *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/campaigns";
  GTLRDfareportingQuery_CampaignsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Campaign class];
  query.loggingName = @"dfareporting.campaigns.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CampaignsList

@dynamic advertiserGroupIds, advertiserIds, archived,
         atLeastOneOptimizationActivity, excludedIds, ids, maxResults,
         overriddenEventTagId, pageToken, profileId, searchString, sortField,
         sortOrder, subaccountId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"advertiserGroupIds" : [NSNumber class],
    @"advertiserIds" : [NSNumber class],
    @"excludedIds" : [NSNumber class],
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/campaigns";
  GTLRDfareportingQuery_CampaignsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_CampaignsListResponse class];
  query.loggingName = @"dfareporting.campaigns.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CampaignsPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_Campaign *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/campaigns";
  GTLRDfareportingQuery_CampaignsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Campaign class];
  query.loggingName = @"dfareporting.campaigns.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CampaignsUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Campaign *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/campaigns";
  GTLRDfareportingQuery_CampaignsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Campaign class];
  query.loggingName = @"dfareporting.campaigns.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ChangeLogsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/changeLogs/{id}";
  GTLRDfareportingQuery_ChangeLogsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_ChangeLog class];
  query.loggingName = @"dfareporting.changeLogs.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ChangeLogsList

@dynamic action, ids, maxChangeTime, maxResults, minChangeTime, objectIds,
         objectType, pageToken, profileId, searchString, userProfileIds;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class],
    @"objectIds" : [NSNumber class],
    @"userProfileIds" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/changeLogs";
  GTLRDfareportingQuery_ChangeLogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_ChangeLogsListResponse class];
  query.loggingName = @"dfareporting.changeLogs.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CitiesList

@dynamic countryDartIds, dartIds, namePrefix, profileId, regionDartIds;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"countryDartIds" : [NSNumber class],
    @"dartIds" : [NSNumber class],
    @"regionDartIds" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/cities";
  GTLRDfareportingQuery_CitiesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_CitiesListResponse class];
  query.loggingName = @"dfareporting.cities.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ConnectionTypesGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/connectionTypes/{id}";
  GTLRDfareportingQuery_ConnectionTypesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_ConnectionType class];
  query.loggingName = @"dfareporting.connectionTypes.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ConnectionTypesList

@dynamic profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/connectionTypes";
  GTLRDfareportingQuery_ConnectionTypesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_ConnectionTypesListResponse class];
  query.loggingName = @"dfareporting.connectionTypes.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ContentCategoriesDelete

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/contentCategories/{id}";
  GTLRDfareportingQuery_ContentCategoriesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.loggingName = @"dfareporting.contentCategories.delete";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ContentCategoriesGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/contentCategories/{id}";
  GTLRDfareportingQuery_ContentCategoriesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_ContentCategory class];
  query.loggingName = @"dfareporting.contentCategories.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ContentCategoriesInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_ContentCategory *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/contentCategories";
  GTLRDfareportingQuery_ContentCategoriesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_ContentCategory class];
  query.loggingName = @"dfareporting.contentCategories.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ContentCategoriesList

@dynamic ids, maxResults, pageToken, profileId, searchString, sortField,
         sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/contentCategories";
  GTLRDfareportingQuery_ContentCategoriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_ContentCategoriesListResponse class];
  query.loggingName = @"dfareporting.contentCategories.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ContentCategoriesPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_ContentCategory *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/contentCategories";
  GTLRDfareportingQuery_ContentCategoriesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_ContentCategory class];
  query.loggingName = @"dfareporting.contentCategories.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ContentCategoriesUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_ContentCategory *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/contentCategories";
  GTLRDfareportingQuery_ContentCategoriesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_ContentCategory class];
  query.loggingName = @"dfareporting.contentCategories.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ConversionsBatchinsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_ConversionsBatchInsertRequest *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/conversions/batchinsert";
  GTLRDfareportingQuery_ConversionsBatchinsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_ConversionsBatchInsertResponse class];
  query.loggingName = @"dfareporting.conversions.batchinsert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ConversionsBatchupdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_ConversionsBatchUpdateRequest *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/conversions/batchupdate";
  GTLRDfareportingQuery_ConversionsBatchupdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_ConversionsBatchUpdateResponse class];
  query.loggingName = @"dfareporting.conversions.batchupdate";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CountriesGet

@dynamic dartId, profileId;

+ (instancetype)queryWithProfileId:(long long)profileId
                            dartId:(long long)dartId {
  NSArray *pathParams = @[
    @"dartId", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/countries/{dartId}";
  GTLRDfareportingQuery_CountriesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.dartId = dartId;
  query.expectedObjectClass = [GTLRDfareporting_Country class];
  query.loggingName = @"dfareporting.countries.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CountriesList

@dynamic profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/countries";
  GTLRDfareportingQuery_CountriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_CountriesListResponse class];
  query.loggingName = @"dfareporting.countries.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeAssetsInsert

@dynamic advertiserId, profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeAssetMetadata *)object
                      profileId:(long long)profileId
                   advertiserId:(long long)advertiserId
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"advertiserId", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets";
  GTLRDfareportingQuery_CreativeAssetsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.advertiserId = advertiserId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRDfareporting_CreativeAssetMetadata class];
  query.loggingName = @"dfareporting.creativeAssets.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeFieldsDelete

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeFields/{id}";
  GTLRDfareportingQuery_CreativeFieldsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.loggingName = @"dfareporting.creativeFields.delete";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeFieldsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeFields/{id}";
  GTLRDfareportingQuery_CreativeFieldsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_CreativeField class];
  query.loggingName = @"dfareporting.creativeFields.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeFieldsInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeField *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeFields";
  GTLRDfareportingQuery_CreativeFieldsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_CreativeField class];
  query.loggingName = @"dfareporting.creativeFields.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeFieldsList

@dynamic advertiserIds, ids, maxResults, pageToken, profileId, searchString,
         sortField, sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"advertiserIds" : [NSNumber class],
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeFields";
  GTLRDfareportingQuery_CreativeFieldsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_CreativeFieldsListResponse class];
  query.loggingName = @"dfareporting.creativeFields.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeFieldsPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeField *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeFields";
  GTLRDfareportingQuery_CreativeFieldsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_CreativeField class];
  query.loggingName = @"dfareporting.creativeFields.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeFieldsUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeField *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeFields";
  GTLRDfareportingQuery_CreativeFieldsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_CreativeField class];
  query.loggingName = @"dfareporting.creativeFields.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeFieldValuesDelete

@dynamic creativeFieldId, identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                   creativeFieldId:(long long)creativeFieldId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"creativeFieldId", @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}";
  GTLRDfareportingQuery_CreativeFieldValuesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.creativeFieldId = creativeFieldId;
  query.identifier = identifier;
  query.loggingName = @"dfareporting.creativeFieldValues.delete";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeFieldValuesGet

@dynamic creativeFieldId, identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                   creativeFieldId:(long long)creativeFieldId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"creativeFieldId", @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}";
  GTLRDfareportingQuery_CreativeFieldValuesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.creativeFieldId = creativeFieldId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_CreativeFieldValue class];
  query.loggingName = @"dfareporting.creativeFieldValues.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeFieldValuesInsert

@dynamic creativeFieldId, profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeFieldValue *)object
                      profileId:(long long)profileId
                creativeFieldId:(long long)creativeFieldId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"creativeFieldId", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues";
  GTLRDfareportingQuery_CreativeFieldValuesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.creativeFieldId = creativeFieldId;
  query.expectedObjectClass = [GTLRDfareporting_CreativeFieldValue class];
  query.loggingName = @"dfareporting.creativeFieldValues.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeFieldValuesList

@dynamic creativeFieldId, ids, maxResults, pageToken, profileId, searchString,
         sortField, sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId
                   creativeFieldId:(long long)creativeFieldId {
  NSArray *pathParams = @[
    @"creativeFieldId", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues";
  GTLRDfareportingQuery_CreativeFieldValuesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.creativeFieldId = creativeFieldId;
  query.expectedObjectClass = [GTLRDfareporting_CreativeFieldValuesListResponse class];
  query.loggingName = @"dfareporting.creativeFieldValues.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeFieldValuesPatch

@dynamic creativeFieldId, identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeFieldValue *)object
                      profileId:(long long)profileId
                creativeFieldId:(long long)creativeFieldId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"creativeFieldId", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues";
  GTLRDfareportingQuery_CreativeFieldValuesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.creativeFieldId = creativeFieldId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_CreativeFieldValue class];
  query.loggingName = @"dfareporting.creativeFieldValues.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeFieldValuesUpdate

@dynamic creativeFieldId, profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeFieldValue *)object
                      profileId:(long long)profileId
                creativeFieldId:(long long)creativeFieldId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"creativeFieldId", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues";
  GTLRDfareportingQuery_CreativeFieldValuesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.creativeFieldId = creativeFieldId;
  query.expectedObjectClass = [GTLRDfareporting_CreativeFieldValue class];
  query.loggingName = @"dfareporting.creativeFieldValues.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeGroupsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeGroups/{id}";
  GTLRDfareportingQuery_CreativeGroupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_CreativeGroup class];
  query.loggingName = @"dfareporting.creativeGroups.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeGroupsInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeGroup *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeGroups";
  GTLRDfareportingQuery_CreativeGroupsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_CreativeGroup class];
  query.loggingName = @"dfareporting.creativeGroups.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeGroupsList

@dynamic advertiserIds, groupNumber, ids, maxResults, pageToken, profileId,
         searchString, sortField, sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"advertiserIds" : [NSNumber class],
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeGroups";
  GTLRDfareportingQuery_CreativeGroupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_CreativeGroupsListResponse class];
  query.loggingName = @"dfareporting.creativeGroups.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeGroupsPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeGroup *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeGroups";
  GTLRDfareportingQuery_CreativeGroupsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_CreativeGroup class];
  query.loggingName = @"dfareporting.creativeGroups.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativeGroupsUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_CreativeGroup *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creativeGroups";
  GTLRDfareportingQuery_CreativeGroupsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_CreativeGroup class];
  query.loggingName = @"dfareporting.creativeGroups.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativesGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creatives/{id}";
  GTLRDfareportingQuery_CreativesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Creative class];
  query.loggingName = @"dfareporting.creatives.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativesInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Creative *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creatives";
  GTLRDfareportingQuery_CreativesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Creative class];
  query.loggingName = @"dfareporting.creatives.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativesList

@dynamic active, advertiserId, archived, campaignId, companionCreativeIds,
         creativeFieldIds, ids, maxResults, pageToken, profileId, renderingIds,
         searchString, sizeIds, sortField, sortOrder, studioCreativeId, types;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"companionCreativeIds" : [NSNumber class],
    @"creativeFieldIds" : [NSNumber class],
    @"ids" : [NSNumber class],
    @"renderingIds" : [NSNumber class],
    @"sizeIds" : [NSNumber class],
    @"types" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creatives";
  GTLRDfareportingQuery_CreativesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_CreativesListResponse class];
  query.loggingName = @"dfareporting.creatives.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativesPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_Creative *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creatives";
  GTLRDfareportingQuery_CreativesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Creative class];
  query.loggingName = @"dfareporting.creatives.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_CreativesUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Creative *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/creatives";
  GTLRDfareportingQuery_CreativesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Creative class];
  query.loggingName = @"dfareporting.creatives.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_DimensionValuesQuery

@dynamic maxResults, pageToken, profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_DimensionValueRequest *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/dimensionvalues/query";
  GTLRDfareportingQuery_DimensionValuesQuery *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_DimensionValueList class];
  query.loggingName = @"dfareporting.dimensionValues.query";
  return query;
}

@end

@implementation GTLRDfareportingQuery_DirectorySiteContactsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/directorySiteContacts/{id}";
  GTLRDfareportingQuery_DirectorySiteContactsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_DirectorySiteContact class];
  query.loggingName = @"dfareporting.directorySiteContacts.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_DirectorySiteContactsList

@dynamic directorySiteIds, ids, maxResults, pageToken, profileId, searchString,
         sortField, sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"directorySiteIds" : [NSNumber class],
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/directorySiteContacts";
  GTLRDfareportingQuery_DirectorySiteContactsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_DirectorySiteContactsListResponse class];
  query.loggingName = @"dfareporting.directorySiteContacts.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_DirectorySitesGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/directorySites/{id}";
  GTLRDfareportingQuery_DirectorySitesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_DirectorySite class];
  query.loggingName = @"dfareporting.directorySites.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_DirectorySitesInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_DirectorySite *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/directorySites";
  GTLRDfareportingQuery_DirectorySitesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_DirectorySite class];
  query.loggingName = @"dfareporting.directorySites.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_DirectorySitesList

@dynamic acceptsInStreamVideoPlacements, acceptsInterstitialPlacements,
         acceptsPublisherPaidPlacements, active, countryId, dfpNetworkCode, ids,
         maxResults, pageToken, parentId, profileId, searchString, sortField,
         sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/directorySites";
  GTLRDfareportingQuery_DirectorySitesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_DirectorySitesListResponse class];
  query.loggingName = @"dfareporting.directorySites.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_DynamicTargetingKeysDelete

@dynamic name, objectId, objectType, profileId;

+ (instancetype)queryWithProfileId:(long long)profileId
                          objectId:(long long)objectId
                              name:(NSString *)name
                        objectType:(NSString *)objectType {
  NSArray *pathParams = @[
    @"objectId", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/dynamicTargetingKeys/{objectId}";
  GTLRDfareportingQuery_DynamicTargetingKeysDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.objectId = objectId;
  query.name = name;
  query.objectType = objectType;
  query.loggingName = @"dfareporting.dynamicTargetingKeys.delete";
  return query;
}

@end

@implementation GTLRDfareportingQuery_DynamicTargetingKeysInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_DynamicTargetingKey *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/dynamicTargetingKeys";
  GTLRDfareportingQuery_DynamicTargetingKeysInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_DynamicTargetingKey class];
  query.loggingName = @"dfareporting.dynamicTargetingKeys.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_DynamicTargetingKeysList

@dynamic advertiserId, names, objectId, objectType, profileId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"names" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/dynamicTargetingKeys";
  GTLRDfareportingQuery_DynamicTargetingKeysList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_DynamicTargetingKeysListResponse class];
  query.loggingName = @"dfareporting.dynamicTargetingKeys.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_EventTagsDelete

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/eventTags/{id}";
  GTLRDfareportingQuery_EventTagsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.loggingName = @"dfareporting.eventTags.delete";
  return query;
}

@end

@implementation GTLRDfareportingQuery_EventTagsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/eventTags/{id}";
  GTLRDfareportingQuery_EventTagsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_EventTag class];
  query.loggingName = @"dfareporting.eventTags.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_EventTagsInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_EventTag *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/eventTags";
  GTLRDfareportingQuery_EventTagsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_EventTag class];
  query.loggingName = @"dfareporting.eventTags.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_EventTagsList

@dynamic adId, advertiserId, campaignId, definitionsOnly, enabled,
         eventTagTypes, ids, profileId, searchString, sortField, sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"eventTagTypes" : [NSString class],
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/eventTags";
  GTLRDfareportingQuery_EventTagsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_EventTagsListResponse class];
  query.loggingName = @"dfareporting.eventTags.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_EventTagsPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_EventTag *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/eventTags";
  GTLRDfareportingQuery_EventTagsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_EventTag class];
  query.loggingName = @"dfareporting.eventTags.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_EventTagsUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_EventTag *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/eventTags";
  GTLRDfareportingQuery_EventTagsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_EventTag class];
  query.loggingName = @"dfareporting.eventTags.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FilesGet

@dynamic fileId, reportId;

+ (instancetype)queryWithReportId:(long long)reportId
                           fileId:(long long)fileId {
  NSArray *pathParams = @[
    @"fileId", @"reportId"
  ];
  NSString *pathURITemplate = @"reports/{reportId}/files/{fileId}";
  GTLRDfareportingQuery_FilesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.reportId = reportId;
  query.fileId = fileId;
  query.expectedObjectClass = [GTLRDfareporting_File class];
  query.loggingName = @"dfareporting.files.get";
  return query;
}

+ (instancetype)queryForMediaWithReportId:(long long)reportId
                                   fileId:(long long)fileId {
  GTLRDfareportingQuery_FilesGet *query =
    [self queryWithReportId:reportId
                     fileId:fileId];
  query.downloadAsDataObjectType = @"media";
  query.loggingName = @"Download dfareporting.files.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FilesList

@dynamic maxResults, pageToken, profileId, scope, sortField, sortOrder;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/files";
  GTLRDfareportingQuery_FilesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_FileList class];
  query.loggingName = @"dfareporting.files.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FloodlightActivitiesDelete

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/floodlightActivities/{id}";
  GTLRDfareportingQuery_FloodlightActivitiesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.loggingName = @"dfareporting.floodlightActivities.delete";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FloodlightActivitiesGeneratetag

@dynamic floodlightActivityId, profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/floodlightActivities/generatetag";
  GTLRDfareportingQuery_FloodlightActivitiesGeneratetag *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_FloodlightActivitiesGenerateTagResponse class];
  query.loggingName = @"dfareporting.floodlightActivities.generatetag";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FloodlightActivitiesGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/floodlightActivities/{id}";
  GTLRDfareportingQuery_FloodlightActivitiesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_FloodlightActivity class];
  query.loggingName = @"dfareporting.floodlightActivities.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FloodlightActivitiesInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_FloodlightActivity *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/floodlightActivities";
  GTLRDfareportingQuery_FloodlightActivitiesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_FloodlightActivity class];
  query.loggingName = @"dfareporting.floodlightActivities.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FloodlightActivitiesList

@dynamic advertiserId, floodlightActivityGroupIds, floodlightActivityGroupName,
         floodlightActivityGroupTagString, floodlightActivityGroupType,
         floodlightConfigurationId, ids, maxResults, pageToken, profileId,
         searchString, sortField, sortOrder, tagString;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"floodlightActivityGroupIds" : [NSNumber class],
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/floodlightActivities";
  GTLRDfareportingQuery_FloodlightActivitiesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_FloodlightActivitiesListResponse class];
  query.loggingName = @"dfareporting.floodlightActivities.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FloodlightActivitiesPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_FloodlightActivity *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/floodlightActivities";
  GTLRDfareportingQuery_FloodlightActivitiesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_FloodlightActivity class];
  query.loggingName = @"dfareporting.floodlightActivities.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FloodlightActivitiesUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_FloodlightActivity *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/floodlightActivities";
  GTLRDfareportingQuery_FloodlightActivitiesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_FloodlightActivity class];
  query.loggingName = @"dfareporting.floodlightActivities.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FloodlightActivityGroupsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/floodlightActivityGroups/{id}";
  GTLRDfareportingQuery_FloodlightActivityGroupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_FloodlightActivityGroup class];
  query.loggingName = @"dfareporting.floodlightActivityGroups.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FloodlightActivityGroupsInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_FloodlightActivityGroup *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/floodlightActivityGroups";
  GTLRDfareportingQuery_FloodlightActivityGroupsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_FloodlightActivityGroup class];
  query.loggingName = @"dfareporting.floodlightActivityGroups.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FloodlightActivityGroupsList

@dynamic advertiserId, floodlightConfigurationId, ids, maxResults, pageToken,
         profileId, searchString, sortField, sortOrder, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/floodlightActivityGroups";
  GTLRDfareportingQuery_FloodlightActivityGroupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_FloodlightActivityGroupsListResponse class];
  query.loggingName = @"dfareporting.floodlightActivityGroups.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FloodlightActivityGroupsPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_FloodlightActivityGroup *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/floodlightActivityGroups";
  GTLRDfareportingQuery_FloodlightActivityGroupsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_FloodlightActivityGroup class];
  query.loggingName = @"dfareporting.floodlightActivityGroups.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FloodlightActivityGroupsUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_FloodlightActivityGroup *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/floodlightActivityGroups";
  GTLRDfareportingQuery_FloodlightActivityGroupsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_FloodlightActivityGroup class];
  query.loggingName = @"dfareporting.floodlightActivityGroups.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FloodlightConfigurationsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/floodlightConfigurations/{id}";
  GTLRDfareportingQuery_FloodlightConfigurationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_FloodlightConfiguration class];
  query.loggingName = @"dfareporting.floodlightConfigurations.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FloodlightConfigurationsList

@dynamic ids, profileId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/floodlightConfigurations";
  GTLRDfareportingQuery_FloodlightConfigurationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_FloodlightConfigurationsListResponse class];
  query.loggingName = @"dfareporting.floodlightConfigurations.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FloodlightConfigurationsPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_FloodlightConfiguration *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/floodlightConfigurations";
  GTLRDfareportingQuery_FloodlightConfigurationsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_FloodlightConfiguration class];
  query.loggingName = @"dfareporting.floodlightConfigurations.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_FloodlightConfigurationsUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_FloodlightConfiguration *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/floodlightConfigurations";
  GTLRDfareportingQuery_FloodlightConfigurationsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_FloodlightConfiguration class];
  query.loggingName = @"dfareporting.floodlightConfigurations.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_InventoryItemsGet

@dynamic identifier, profileId, projectId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                         projectId:(long long)projectId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId", @"projectId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/projects/{projectId}/inventoryItems/{id}";
  GTLRDfareportingQuery_InventoryItemsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.projectId = projectId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_InventoryItem class];
  query.loggingName = @"dfareporting.inventoryItems.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_InventoryItemsList

@dynamic ids, inPlan, maxResults, orderId, pageToken, profileId, projectId,
         siteId, sortField, sortOrder, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class],
    @"orderId" : [NSNumber class],
    @"siteId" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId
                         projectId:(long long)projectId {
  NSArray *pathParams = @[
    @"profileId", @"projectId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/projects/{projectId}/inventoryItems";
  GTLRDfareportingQuery_InventoryItemsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRDfareporting_InventoryItemsListResponse class];
  query.loggingName = @"dfareporting.inventoryItems.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_LanguagesList

@dynamic profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/languages";
  GTLRDfareportingQuery_LanguagesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_LanguagesListResponse class];
  query.loggingName = @"dfareporting.languages.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_MetrosList

@dynamic profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/metros";
  GTLRDfareportingQuery_MetrosList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_MetrosListResponse class];
  query.loggingName = @"dfareporting.metros.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_MobileAppsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/mobileApps/{id}";
  GTLRDfareportingQuery_MobileAppsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_MobileApp class];
  query.loggingName = @"dfareporting.mobileApps.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_MobileAppsList

@dynamic directories, ids, maxResults, pageToken, profileId, searchString;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"directories" : [NSString class],
    @"ids" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/mobileApps";
  GTLRDfareportingQuery_MobileAppsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_MobileAppsListResponse class];
  query.loggingName = @"dfareporting.mobileApps.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_MobileCarriersGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/mobileCarriers/{id}";
  GTLRDfareportingQuery_MobileCarriersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_MobileCarrier class];
  query.loggingName = @"dfareporting.mobileCarriers.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_MobileCarriersList

@dynamic profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/mobileCarriers";
  GTLRDfareportingQuery_MobileCarriersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_MobileCarriersListResponse class];
  query.loggingName = @"dfareporting.mobileCarriers.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_OperatingSystemsGet

@dynamic dartId, profileId;

+ (instancetype)queryWithProfileId:(long long)profileId
                            dartId:(long long)dartId {
  NSArray *pathParams = @[
    @"dartId", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/operatingSystems/{dartId}";
  GTLRDfareportingQuery_OperatingSystemsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.dartId = dartId;
  query.expectedObjectClass = [GTLRDfareporting_OperatingSystem class];
  query.loggingName = @"dfareporting.operatingSystems.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_OperatingSystemsList

@dynamic profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/operatingSystems";
  GTLRDfareportingQuery_OperatingSystemsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_OperatingSystemsListResponse class];
  query.loggingName = @"dfareporting.operatingSystems.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_OperatingSystemVersionsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/operatingSystemVersions/{id}";
  GTLRDfareportingQuery_OperatingSystemVersionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_OperatingSystemVersion class];
  query.loggingName = @"dfareporting.operatingSystemVersions.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_OperatingSystemVersionsList

@dynamic profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/operatingSystemVersions";
  GTLRDfareportingQuery_OperatingSystemVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_OperatingSystemVersionsListResponse class];
  query.loggingName = @"dfareporting.operatingSystemVersions.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_OrderDocumentsGet

@dynamic identifier, profileId, projectId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                         projectId:(long long)projectId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId", @"projectId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/projects/{projectId}/orderDocuments/{id}";
  GTLRDfareportingQuery_OrderDocumentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.projectId = projectId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_OrderDocument class];
  query.loggingName = @"dfareporting.orderDocuments.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_OrderDocumentsList

@dynamic approved, ids, maxResults, orderId, pageToken, profileId, projectId,
         searchString, siteId, sortField, sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class],
    @"orderId" : [NSNumber class],
    @"siteId" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId
                         projectId:(long long)projectId {
  NSArray *pathParams = @[
    @"profileId", @"projectId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/projects/{projectId}/orderDocuments";
  GTLRDfareportingQuery_OrderDocumentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRDfareporting_OrderDocumentsListResponse class];
  query.loggingName = @"dfareporting.orderDocuments.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_OrdersGet

@dynamic identifier, profileId, projectId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                         projectId:(long long)projectId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId", @"projectId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/projects/{projectId}/orders/{id}";
  GTLRDfareportingQuery_OrdersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.projectId = projectId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Order class];
  query.loggingName = @"dfareporting.orders.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_OrdersList

@dynamic ids, maxResults, pageToken, profileId, projectId, searchString, siteId,
         sortField, sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class],
    @"siteId" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId
                         projectId:(long long)projectId {
  NSArray *pathParams = @[
    @"profileId", @"projectId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/projects/{projectId}/orders";
  GTLRDfareportingQuery_OrdersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRDfareporting_OrdersListResponse class];
  query.loggingName = @"dfareporting.orders.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementGroupsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placementGroups/{id}";
  GTLRDfareportingQuery_PlacementGroupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_PlacementGroup class];
  query.loggingName = @"dfareporting.placementGroups.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementGroupsInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_PlacementGroup *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placementGroups";
  GTLRDfareportingQuery_PlacementGroupsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_PlacementGroup class];
  query.loggingName = @"dfareporting.placementGroups.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementGroupsList

@dynamic advertiserIds, archived, campaignIds, contentCategoryIds,
         directorySiteIds, ids, maxEndDate, maxResults, maxStartDate,
         minEndDate, minStartDate, pageToken, placementGroupType,
         placementStrategyIds, pricingTypes, profileId, searchString, siteIds,
         sortField, sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"advertiserIds" : [NSNumber class],
    @"campaignIds" : [NSNumber class],
    @"contentCategoryIds" : [NSNumber class],
    @"directorySiteIds" : [NSNumber class],
    @"ids" : [NSNumber class],
    @"placementStrategyIds" : [NSNumber class],
    @"pricingTypes" : [NSString class],
    @"siteIds" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placementGroups";
  GTLRDfareportingQuery_PlacementGroupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_PlacementGroupsListResponse class];
  query.loggingName = @"dfareporting.placementGroups.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementGroupsPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_PlacementGroup *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placementGroups";
  GTLRDfareportingQuery_PlacementGroupsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_PlacementGroup class];
  query.loggingName = @"dfareporting.placementGroups.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementGroupsUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_PlacementGroup *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placementGroups";
  GTLRDfareportingQuery_PlacementGroupsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_PlacementGroup class];
  query.loggingName = @"dfareporting.placementGroups.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementsGeneratetags

@dynamic campaignId, placementIds, profileId, tagFormats;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"placementIds" : [NSNumber class],
    @"tagFormats" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placements/generatetags";
  GTLRDfareportingQuery_PlacementsGeneratetags *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_PlacementsGenerateTagsResponse class];
  query.loggingName = @"dfareporting.placements.generatetags";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placements/{id}";
  GTLRDfareportingQuery_PlacementsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Placement class];
  query.loggingName = @"dfareporting.placements.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementsInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Placement *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placements";
  GTLRDfareportingQuery_PlacementsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Placement class];
  query.loggingName = @"dfareporting.placements.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementsList

@dynamic advertiserIds, archived, campaignIds, compatibilities,
         contentCategoryIds, directorySiteIds, groupIds, ids, maxEndDate,
         maxResults, maxStartDate, minEndDate, minStartDate, pageToken,
         paymentSource, placementStrategyIds, pricingTypes, profileId,
         searchString, siteIds, sizeIds, sortField, sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"advertiserIds" : [NSNumber class],
    @"campaignIds" : [NSNumber class],
    @"compatibilities" : [NSString class],
    @"contentCategoryIds" : [NSNumber class],
    @"directorySiteIds" : [NSNumber class],
    @"groupIds" : [NSNumber class],
    @"ids" : [NSNumber class],
    @"placementStrategyIds" : [NSNumber class],
    @"pricingTypes" : [NSString class],
    @"siteIds" : [NSNumber class],
    @"sizeIds" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placements";
  GTLRDfareportingQuery_PlacementsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_PlacementsListResponse class];
  query.loggingName = @"dfareporting.placements.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementsPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_Placement *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placements";
  GTLRDfareportingQuery_PlacementsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Placement class];
  query.loggingName = @"dfareporting.placements.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementStrategiesDelete

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placementStrategies/{id}";
  GTLRDfareportingQuery_PlacementStrategiesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.loggingName = @"dfareporting.placementStrategies.delete";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementStrategiesGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placementStrategies/{id}";
  GTLRDfareportingQuery_PlacementStrategiesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_PlacementStrategy class];
  query.loggingName = @"dfareporting.placementStrategies.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementStrategiesInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_PlacementStrategy *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placementStrategies";
  GTLRDfareportingQuery_PlacementStrategiesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_PlacementStrategy class];
  query.loggingName = @"dfareporting.placementStrategies.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementStrategiesList

@dynamic ids, maxResults, pageToken, profileId, searchString, sortField,
         sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placementStrategies";
  GTLRDfareportingQuery_PlacementStrategiesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_PlacementStrategiesListResponse class];
  query.loggingName = @"dfareporting.placementStrategies.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementStrategiesPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_PlacementStrategy *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placementStrategies";
  GTLRDfareportingQuery_PlacementStrategiesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_PlacementStrategy class];
  query.loggingName = @"dfareporting.placementStrategies.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementStrategiesUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_PlacementStrategy *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placementStrategies";
  GTLRDfareportingQuery_PlacementStrategiesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_PlacementStrategy class];
  query.loggingName = @"dfareporting.placementStrategies.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlacementsUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Placement *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/placements";
  GTLRDfareportingQuery_PlacementsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Placement class];
  query.loggingName = @"dfareporting.placements.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlatformTypesGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/platformTypes/{id}";
  GTLRDfareportingQuery_PlatformTypesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_PlatformType class];
  query.loggingName = @"dfareporting.platformTypes.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PlatformTypesList

@dynamic profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/platformTypes";
  GTLRDfareportingQuery_PlatformTypesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_PlatformTypesListResponse class];
  query.loggingName = @"dfareporting.platformTypes.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PostalCodesGet

@dynamic code, profileId;

+ (instancetype)queryWithProfileId:(long long)profileId
                              code:(NSString *)code {
  NSArray *pathParams = @[
    @"code", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/postalCodes/{code}";
  GTLRDfareportingQuery_PostalCodesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.code = code;
  query.expectedObjectClass = [GTLRDfareporting_PostalCode class];
  query.loggingName = @"dfareporting.postalCodes.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_PostalCodesList

@dynamic profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/postalCodes";
  GTLRDfareportingQuery_PostalCodesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_PostalCodesListResponse class];
  query.loggingName = @"dfareporting.postalCodes.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ProjectsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/projects/{id}";
  GTLRDfareportingQuery_ProjectsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Project class];
  query.loggingName = @"dfareporting.projects.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ProjectsList

@dynamic advertiserIds, ids, maxResults, pageToken, profileId, searchString,
         sortField, sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"advertiserIds" : [NSNumber class],
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/projects";
  GTLRDfareportingQuery_ProjectsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_ProjectsListResponse class];
  query.loggingName = @"dfareporting.projects.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_RegionsList

@dynamic profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/regions";
  GTLRDfareportingQuery_RegionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_RegionsListResponse class];
  query.loggingName = @"dfareporting.regions.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_RemarketingListsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/remarketingLists/{id}";
  GTLRDfareportingQuery_RemarketingListsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_RemarketingList class];
  query.loggingName = @"dfareporting.remarketingLists.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_RemarketingListSharesGet

@dynamic profileId, remarketingListId;

+ (instancetype)queryWithProfileId:(long long)profileId
                 remarketingListId:(long long)remarketingListId {
  NSArray *pathParams = @[
    @"profileId", @"remarketingListId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/remarketingListShares/{remarketingListId}";
  GTLRDfareportingQuery_RemarketingListSharesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.remarketingListId = remarketingListId;
  query.expectedObjectClass = [GTLRDfareporting_RemarketingListShare class];
  query.loggingName = @"dfareporting.remarketingListShares.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_RemarketingListSharesPatch

@dynamic profileId, remarketingListId;

+ (instancetype)queryWithObject:(GTLRDfareporting_RemarketingListShare *)object
                      profileId:(long long)profileId
              remarketingListId:(long long)remarketingListId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/remarketingListShares";
  GTLRDfareportingQuery_RemarketingListSharesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.remarketingListId = remarketingListId;
  query.expectedObjectClass = [GTLRDfareporting_RemarketingListShare class];
  query.loggingName = @"dfareporting.remarketingListShares.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_RemarketingListSharesUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_RemarketingListShare *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/remarketingListShares";
  GTLRDfareportingQuery_RemarketingListSharesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_RemarketingListShare class];
  query.loggingName = @"dfareporting.remarketingListShares.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_RemarketingListsInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_RemarketingList *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/remarketingLists";
  GTLRDfareportingQuery_RemarketingListsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_RemarketingList class];
  query.loggingName = @"dfareporting.remarketingLists.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_RemarketingListsList

@dynamic active, advertiserId, floodlightActivityId, maxResults, name,
         pageToken, profileId, sortField, sortOrder;

+ (instancetype)queryWithProfileId:(long long)profileId
                      advertiserId:(long long)advertiserId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/remarketingLists";
  GTLRDfareportingQuery_RemarketingListsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.advertiserId = advertiserId;
  query.expectedObjectClass = [GTLRDfareporting_RemarketingListsListResponse class];
  query.loggingName = @"dfareporting.remarketingLists.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_RemarketingListsPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_RemarketingList *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/remarketingLists";
  GTLRDfareportingQuery_RemarketingListsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_RemarketingList class];
  query.loggingName = @"dfareporting.remarketingLists.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_RemarketingListsUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_RemarketingList *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/remarketingLists";
  GTLRDfareportingQuery_RemarketingListsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_RemarketingList class];
  query.loggingName = @"dfareporting.remarketingLists.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ReportsCompatibleFieldsQuery

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Report *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/reports/compatiblefields/query";
  GTLRDfareportingQuery_ReportsCompatibleFieldsQuery *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_CompatibleFields class];
  query.loggingName = @"dfareporting.reports.compatibleFields.query";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ReportsDelete

@dynamic profileId, reportId;

+ (instancetype)queryWithProfileId:(long long)profileId
                          reportId:(long long)reportId {
  NSArray *pathParams = @[
    @"profileId", @"reportId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/reports/{reportId}";
  GTLRDfareportingQuery_ReportsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.reportId = reportId;
  query.loggingName = @"dfareporting.reports.delete";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ReportsFilesGet

@dynamic fileId, profileId, reportId;

+ (instancetype)queryWithProfileId:(long long)profileId
                          reportId:(long long)reportId
                            fileId:(long long)fileId {
  NSArray *pathParams = @[
    @"fileId", @"profileId", @"reportId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/reports/{reportId}/files/{fileId}";
  GTLRDfareportingQuery_ReportsFilesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.reportId = reportId;
  query.fileId = fileId;
  query.expectedObjectClass = [GTLRDfareporting_File class];
  query.loggingName = @"dfareporting.reports.files.get";
  return query;
}

+ (instancetype)queryForMediaWithProfileId:(long long)profileId
                                  reportId:(long long)reportId
                                    fileId:(long long)fileId {
  GTLRDfareportingQuery_ReportsFilesGet *query =
    [self queryWithProfileId:profileId
                    reportId:reportId
                      fileId:fileId];
  query.downloadAsDataObjectType = @"media";
  query.loggingName = @"Download dfareporting.reports.files.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ReportsFilesList

@dynamic maxResults, pageToken, profileId, reportId, sortField, sortOrder;

+ (instancetype)queryWithProfileId:(long long)profileId
                          reportId:(long long)reportId {
  NSArray *pathParams = @[
    @"profileId", @"reportId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/reports/{reportId}/files";
  GTLRDfareportingQuery_ReportsFilesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.reportId = reportId;
  query.expectedObjectClass = [GTLRDfareporting_FileList class];
  query.loggingName = @"dfareporting.reports.files.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ReportsGet

@dynamic profileId, reportId;

+ (instancetype)queryWithProfileId:(long long)profileId
                          reportId:(long long)reportId {
  NSArray *pathParams = @[
    @"profileId", @"reportId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/reports/{reportId}";
  GTLRDfareportingQuery_ReportsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.reportId = reportId;
  query.expectedObjectClass = [GTLRDfareporting_Report class];
  query.loggingName = @"dfareporting.reports.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ReportsInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Report *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/reports";
  GTLRDfareportingQuery_ReportsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Report class];
  query.loggingName = @"dfareporting.reports.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ReportsList

@dynamic maxResults, pageToken, profileId, scope, sortField, sortOrder;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/reports";
  GTLRDfareportingQuery_ReportsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_ReportList class];
  query.loggingName = @"dfareporting.reports.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ReportsPatch

@dynamic profileId, reportId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Report *)object
                      profileId:(long long)profileId
                       reportId:(long long)reportId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"profileId", @"reportId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/reports/{reportId}";
  GTLRDfareportingQuery_ReportsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.reportId = reportId;
  query.expectedObjectClass = [GTLRDfareporting_Report class];
  query.loggingName = @"dfareporting.reports.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ReportsRun

@dynamic profileId, reportId, synchronous;

+ (instancetype)queryWithProfileId:(long long)profileId
                          reportId:(long long)reportId {
  NSArray *pathParams = @[
    @"profileId", @"reportId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/reports/{reportId}/run";
  GTLRDfareportingQuery_ReportsRun *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.reportId = reportId;
  query.expectedObjectClass = [GTLRDfareporting_File class];
  query.loggingName = @"dfareporting.reports.run";
  return query;
}

@end

@implementation GTLRDfareportingQuery_ReportsUpdate

@dynamic profileId, reportId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Report *)object
                      profileId:(long long)profileId
                       reportId:(long long)reportId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"profileId", @"reportId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/reports/{reportId}";
  GTLRDfareportingQuery_ReportsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.reportId = reportId;
  query.expectedObjectClass = [GTLRDfareporting_Report class];
  query.loggingName = @"dfareporting.reports.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_SitesGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/sites/{id}";
  GTLRDfareportingQuery_SitesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Site class];
  query.loggingName = @"dfareporting.sites.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_SitesInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Site *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/sites";
  GTLRDfareportingQuery_SitesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Site class];
  query.loggingName = @"dfareporting.sites.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_SitesList

@dynamic acceptsInStreamVideoPlacements, acceptsInterstitialPlacements,
         acceptsPublisherPaidPlacements, adWordsSite, approved, campaignIds,
         directorySiteIds, ids, maxResults, pageToken, profileId, searchString,
         sortField, sortOrder, subaccountId, unmappedSite;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"campaignIds" : [NSNumber class],
    @"directorySiteIds" : [NSNumber class],
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/sites";
  GTLRDfareportingQuery_SitesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_SitesListResponse class];
  query.loggingName = @"dfareporting.sites.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_SitesPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_Site *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/sites";
  GTLRDfareportingQuery_SitesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Site class];
  query.loggingName = @"dfareporting.sites.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_SitesUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Site *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/sites";
  GTLRDfareportingQuery_SitesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Site class];
  query.loggingName = @"dfareporting.sites.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_SizesGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/sizes/{id}";
  GTLRDfareportingQuery_SizesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Size class];
  query.loggingName = @"dfareporting.sizes.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_SizesInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Size *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/sizes";
  GTLRDfareportingQuery_SizesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Size class];
  query.loggingName = @"dfareporting.sizes.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_SizesList

@dynamic height, iabStandard, ids, profileId, width;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/sizes";
  GTLRDfareportingQuery_SizesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_SizesListResponse class];
  query.loggingName = @"dfareporting.sizes.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_SubaccountsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/subaccounts/{id}";
  GTLRDfareportingQuery_SubaccountsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Subaccount class];
  query.loggingName = @"dfareporting.subaccounts.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_SubaccountsInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Subaccount *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/subaccounts";
  GTLRDfareportingQuery_SubaccountsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Subaccount class];
  query.loggingName = @"dfareporting.subaccounts.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_SubaccountsList

@dynamic ids, maxResults, pageToken, profileId, searchString, sortField,
         sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/subaccounts";
  GTLRDfareportingQuery_SubaccountsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_SubaccountsListResponse class];
  query.loggingName = @"dfareporting.subaccounts.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_SubaccountsPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_Subaccount *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/subaccounts";
  GTLRDfareportingQuery_SubaccountsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_Subaccount class];
  query.loggingName = @"dfareporting.subaccounts.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_SubaccountsUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_Subaccount *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/subaccounts";
  GTLRDfareportingQuery_SubaccountsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_Subaccount class];
  query.loggingName = @"dfareporting.subaccounts.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_TargetableRemarketingListsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/targetableRemarketingLists/{id}";
  GTLRDfareportingQuery_TargetableRemarketingListsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_TargetableRemarketingList class];
  query.loggingName = @"dfareporting.targetableRemarketingLists.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_TargetableRemarketingListsList

@dynamic active, advertiserId, maxResults, name, pageToken, profileId,
         sortField, sortOrder;

+ (instancetype)queryWithProfileId:(long long)profileId
                      advertiserId:(long long)advertiserId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/targetableRemarketingLists";
  GTLRDfareportingQuery_TargetableRemarketingListsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.advertiserId = advertiserId;
  query.expectedObjectClass = [GTLRDfareporting_TargetableRemarketingListsListResponse class];
  query.loggingName = @"dfareporting.targetableRemarketingLists.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_TargetingTemplatesGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/targetingTemplates/{id}";
  GTLRDfareportingQuery_TargetingTemplatesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_TargetingTemplate class];
  query.loggingName = @"dfareporting.targetingTemplates.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_TargetingTemplatesInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_TargetingTemplate *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/targetingTemplates";
  GTLRDfareportingQuery_TargetingTemplatesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_TargetingTemplate class];
  query.loggingName = @"dfareporting.targetingTemplates.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_TargetingTemplatesList

@dynamic advertiserId, ids, maxResults, pageToken, profileId, searchString,
         sortField, sortOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/targetingTemplates";
  GTLRDfareportingQuery_TargetingTemplatesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_TargetingTemplatesListResponse class];
  query.loggingName = @"dfareporting.targetingTemplates.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_TargetingTemplatesPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_TargetingTemplate *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/targetingTemplates";
  GTLRDfareportingQuery_TargetingTemplatesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_TargetingTemplate class];
  query.loggingName = @"dfareporting.targetingTemplates.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_TargetingTemplatesUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_TargetingTemplate *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/targetingTemplates";
  GTLRDfareportingQuery_TargetingTemplatesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_TargetingTemplate class];
  query.loggingName = @"dfareporting.targetingTemplates.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_UserProfilesGet

@dynamic profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}";
  GTLRDfareportingQuery_UserProfilesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_UserProfile class];
  query.loggingName = @"dfareporting.userProfiles.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_UserProfilesList

+ (instancetype)query {
  NSString *pathURITemplate = @"userprofiles";
  GTLRDfareportingQuery_UserProfilesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRDfareporting_UserProfileList class];
  query.loggingName = @"dfareporting.userProfiles.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_UserRolePermissionGroupsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/userRolePermissionGroups/{id}";
  GTLRDfareportingQuery_UserRolePermissionGroupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_UserRolePermissionGroup class];
  query.loggingName = @"dfareporting.userRolePermissionGroups.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_UserRolePermissionGroupsList

@dynamic profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/userRolePermissionGroups";
  GTLRDfareportingQuery_UserRolePermissionGroupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_UserRolePermissionGroupsListResponse class];
  query.loggingName = @"dfareporting.userRolePermissionGroups.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_UserRolePermissionsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/userRolePermissions/{id}";
  GTLRDfareportingQuery_UserRolePermissionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_UserRolePermission class];
  query.loggingName = @"dfareporting.userRolePermissions.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_UserRolePermissionsList

@dynamic ids, profileId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/userRolePermissions";
  GTLRDfareportingQuery_UserRolePermissionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_UserRolePermissionsListResponse class];
  query.loggingName = @"dfareporting.userRolePermissions.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_UserRolesDelete

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/userRoles/{id}";
  GTLRDfareportingQuery_UserRolesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.loggingName = @"dfareporting.userRoles.delete";
  return query;
}

@end

@implementation GTLRDfareportingQuery_UserRolesGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(long long)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/userRoles/{id}";
  GTLRDfareportingQuery_UserRolesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_UserRole class];
  query.loggingName = @"dfareporting.userRoles.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_UserRolesInsert

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_UserRole *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/userRoles";
  GTLRDfareportingQuery_UserRolesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_UserRole class];
  query.loggingName = @"dfareporting.userRoles.insert";
  return query;
}

@end

@implementation GTLRDfareportingQuery_UserRolesList

@dynamic accountUserRoleOnly, ids, maxResults, pageToken, profileId,
         searchString, sortField, sortOrder, subaccountId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ids" : [NSNumber class]
  };
  return map;
}

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/userRoles";
  GTLRDfareportingQuery_UserRolesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_UserRolesListResponse class];
  query.loggingName = @"dfareporting.userRoles.list";
  return query;
}

@end

@implementation GTLRDfareportingQuery_UserRolesPatch

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRDfareporting_UserRole *)object
                      profileId:(long long)profileId
                     identifier:(long long)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/userRoles";
  GTLRDfareportingQuery_UserRolesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_UserRole class];
  query.loggingName = @"dfareporting.userRoles.patch";
  return query;
}

@end

@implementation GTLRDfareportingQuery_UserRolesUpdate

@dynamic profileId;

+ (instancetype)queryWithObject:(GTLRDfareporting_UserRole *)object
                      profileId:(long long)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/userRoles";
  GTLRDfareportingQuery_UserRolesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_UserRole class];
  query.loggingName = @"dfareporting.userRoles.update";
  return query;
}

@end

@implementation GTLRDfareportingQuery_VideoFormatsGet

@dynamic identifier, profileId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProfileId:(long long)profileId
                        identifier:(NSInteger)identifier {
  NSArray *pathParams = @[
    @"id", @"profileId"
  ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/videoFormats/{id}";
  GTLRDfareportingQuery_VideoFormatsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRDfareporting_VideoFormat class];
  query.loggingName = @"dfareporting.videoFormats.get";
  return query;
}

@end

@implementation GTLRDfareportingQuery_VideoFormatsList

@dynamic profileId;

+ (instancetype)queryWithProfileId:(long long)profileId {
  NSArray *pathParams = @[ @"profileId" ];
  NSString *pathURITemplate = @"userprofiles/{profileId}/videoFormats";
  GTLRDfareportingQuery_VideoFormatsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRDfareporting_VideoFormatsListResponse class];
  query.loggingName = @"dfareporting.videoFormats.list";
  return query;
}

@end
