// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Composer API (composer/v1)
// Description:
//   Manages Apache Airflow environments on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/composer/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudComposer_AllowedIpRange;
@class GTLRCloudComposer_Date;
@class GTLRCloudComposer_Environment;
@class GTLRCloudComposer_Environment_Labels;
@class GTLRCloudComposer_EnvironmentConfig;
@class GTLRCloudComposer_ImageVersion;
@class GTLRCloudComposer_IPAllocationPolicy;
@class GTLRCloudComposer_NodeConfig;
@class GTLRCloudComposer_Operation;
@class GTLRCloudComposer_Operation_Metadata;
@class GTLRCloudComposer_Operation_Response;
@class GTLRCloudComposer_PrivateClusterConfig;
@class GTLRCloudComposer_PrivateEnvironmentConfig;
@class GTLRCloudComposer_SoftwareConfig;
@class GTLRCloudComposer_SoftwareConfig_AirflowConfigOverrides;
@class GTLRCloudComposer_SoftwareConfig_EnvVariables;
@class GTLRCloudComposer_SoftwareConfig_PypiPackages;
@class GTLRCloudComposer_Status;
@class GTLRCloudComposer_Status_Details_Item;
@class GTLRCloudComposer_WebServerNetworkAccessControl;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudComposer_Environment.state

/**
 *  The environment is in the process of being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudComposer_Environment_State_Creating;
/**
 *  The environment is undergoing deletion. It cannot be used.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudComposer_Environment_State_Deleting;
/**
 *  The environment has encountered an error and cannot be used.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudComposer_Environment_State_Error;
/**
 *  The environment is currently running and healthy. It is ready for use.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudComposer_Environment_State_Running;
/**
 *  The state of the environment is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudComposer_Environment_State_StateUnspecified;
/**
 *  The environment is being updated. It remains usable but cannot receive
 *  additional update requests or be deleted at this time.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudComposer_Environment_State_Updating;

// ----------------------------------------------------------------------------
// GTLRCloudComposer_OperationMetadata.operationType

/**
 *  A resource creation operation.
 *
 *  Value: "CREATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudComposer_OperationMetadata_OperationType_Create;
/**
 *  A resource deletion operation.
 *
 *  Value: "DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudComposer_OperationMetadata_OperationType_Delete;
/**
 *  Unused.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudComposer_OperationMetadata_OperationType_TypeUnspecified;
/**
 *  A resource update operation.
 *
 *  Value: "UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudComposer_OperationMetadata_OperationType_Update;

// ----------------------------------------------------------------------------
// GTLRCloudComposer_OperationMetadata.state

/**
 *  The operation is no longer running but did not succeed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudComposer_OperationMetadata_State_Failed;
/**
 *  The operation has been created but is not yet started.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudComposer_OperationMetadata_State_Pending;
/**
 *  The operation is underway.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudComposer_OperationMetadata_State_Running;
/**
 *  Unused.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudComposer_OperationMetadata_State_StateUnspecified;
/**
 *  The operation completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudComposer_OperationMetadata_State_Succeeded;
/** Value: "SUCCESSFUL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudComposer_OperationMetadata_State_Successful;

/**
 *  Allowed IP range with user-provided description.
 */
@interface GTLRCloudComposer_AllowedIpRange : GTLRObject

/**
 *  Optional. User-provided description. It must contain at most 300 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  IP address or range, defined using CIDR notation, of requests that this rule
 *  applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32`
 *  or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be
 *  properly truncated. For example, `1.2.3.4/24` should be truncated to
 *  `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to
 *  `2001:db8::/32`.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Represents a whole or partial calendar date, such as a birthday. The time of
 *  day and time zone are either specified elsewhere or are insignificant. The
 *  date is relative to the Gregorian Calendar. This can represent one of the
 *  following: * A full date, with non-zero year, month, and day values * A
 *  month and day value, with a zero year, such as an anniversary * A year on
 *  its own, with zero month and day values * A year and month value, with a
 *  zero day, such as a credit card expiration date Related types are
 *  google.type.TimeOfDay and `google.protobuf.Timestamp`.
 */
@interface GTLRCloudComposer_Date : GTLRObject

/**
 *  Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
 *  to specify a year by itself or a year and month where the day isn't
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of a year. Must be from 1 to 12, or 0 to specify a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON
 *  representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRCloudComposer_Empty : GTLRObject
@end


/**
 *  An environment for running orchestration tasks.
 */
@interface GTLRCloudComposer_Environment : GTLRObject

/** Configuration parameters for this environment. */
@property(nonatomic, strong, nullable) GTLRCloudComposer_EnvironmentConfig *config;

/** Output only. The time at which this environment was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. User-defined labels for this environment. The labels map can
 *  contain no more than 64 entries. Entries of the labels map are UTF8 strings
 *  that comply with the following restrictions: * Keys must conform to regexp:
 *  \\p{Ll}\\p{Lo}{0,62} * Values must conform to regexp:
 *  [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} * Both keys and values are additionally
 *  constrained to be <= 128 bytes in size.
 */
@property(nonatomic, strong, nullable) GTLRCloudComposer_Environment_Labels *labels;

/**
 *  The resource name of the environment, in the form:
 *  "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
 *  EnvironmentId must start with a lowercase letter followed by up to 63
 *  lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The current state of the environment.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudComposer_Environment_State_Creating The environment is
 *        in the process of being created. (Value: "CREATING")
 *    @arg @c kGTLRCloudComposer_Environment_State_Deleting The environment is
 *        undergoing deletion. It cannot be used. (Value: "DELETING")
 *    @arg @c kGTLRCloudComposer_Environment_State_Error The environment has
 *        encountered an error and cannot be used. (Value: "ERROR")
 *    @arg @c kGTLRCloudComposer_Environment_State_Running The environment is
 *        currently running and healthy. It is ready for use. (Value: "RUNNING")
 *    @arg @c kGTLRCloudComposer_Environment_State_StateUnspecified The state of
 *        the environment is unknown. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudComposer_Environment_State_Updating The environment is
 *        being updated. It remains usable but cannot receive additional update
 *        requests or be deleted at this time. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The time at which this environment was last modified. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Output only. The UUID (Universally Unique IDentifier) associated with this
 *  environment. This value is generated when the environment is created.
 */
@property(nonatomic, copy, nullable) NSString *uuid;

@end


/**
 *  Optional. User-defined labels for this environment. The labels map can
 *  contain no more than 64 entries. Entries of the labels map are UTF8 strings
 *  that comply with the following restrictions: * Keys must conform to regexp:
 *  \\p{Ll}\\p{Lo}{0,62} * Values must conform to regexp:
 *  [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} * Both keys and values are additionally
 *  constrained to be <= 128 bytes in size.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudComposer_Environment_Labels : GTLRObject
@end


/**
 *  Configuration information for an environment.
 */
@interface GTLRCloudComposer_EnvironmentConfig : GTLRObject

/**
 *  Output only. The URI of the Apache Airflow Web UI hosted within this
 *  environment (see [Airflow web
 *  interface](/composer/docs/how-to/accessing/airflow-web-interface)).
 */
@property(nonatomic, copy, nullable) NSString *airflowUri;

/**
 *  Output only. The Cloud Storage prefix of the DAGs for this environment.
 *  Although Cloud Storage objects reside in a flat namespace, a hierarchical
 *  file tree can be simulated using "/"-delimited object name prefixes. DAG
 *  objects for this environment reside in a simulated directory with the given
 *  prefix.
 */
@property(nonatomic, copy, nullable) NSString *dagGcsPrefix;

/**
 *  Output only. The Kubernetes Engine cluster used to run this environment.
 */
@property(nonatomic, copy, nullable) NSString *gkeCluster;

/** The configuration used for the Kubernetes Engine cluster. */
@property(nonatomic, strong, nullable) GTLRCloudComposer_NodeConfig *nodeConfig;

/**
 *  The number of nodes in the Kubernetes Engine cluster that will be used to
 *  run this environment.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nodeCount;

/** The configuration used for the Private IP Cloud Composer environment. */
@property(nonatomic, strong, nullable) GTLRCloudComposer_PrivateEnvironmentConfig *privateEnvironmentConfig;

/** The configuration settings for software inside the environment. */
@property(nonatomic, strong, nullable) GTLRCloudComposer_SoftwareConfig *softwareConfig;

/**
 *  Optional. The network-level access control policy for the Airflow web
 *  server. If unspecified, no network-level access restrictions will be
 *  applied.
 */
@property(nonatomic, strong, nullable) GTLRCloudComposer_WebServerNetworkAccessControl *webServerNetworkAccessControl;

@end


/**
 *  ImageVersion information
 */
@interface GTLRCloudComposer_ImageVersion : GTLRObject

/**
 *  Whether it is impossible to create an environment with the image version.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationDisabled;

/**
 *  The string identifier of the ImageVersion, in the form:
 *  "composer-x.y.z-airflow-a.b(.c)"
 */
@property(nonatomic, copy, nullable) NSString *imageVersionId;

/**
 *  Whether this is the default ImageVersion used by Composer during environment
 *  creation if no input ImageVersion is specified.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDefault;

/** The date of the version release. */
@property(nonatomic, strong, nullable) GTLRCloudComposer_Date *releaseDate;

/** supported python versions */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedPythonVersions;

/**
 *  Whether it is impossible to upgrade an environment running with the image
 *  version.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *upgradeDisabled;

@end


/**
 *  Configuration for controlling how IPs are allocated in the GKE cluster
 *  running the Apache Airflow software.
 */
@interface GTLRCloudComposer_IPAllocationPolicy : GTLRObject

/**
 *  Optional. The IP address range used to allocate IP addresses to pods in the
 *  GKE cluster. This field is applicable only when `use_ip_aliases` is true.
 *  Set to blank to have GKE choose a range with the default size. Set to
 *  /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask.
 *  Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
 *  notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
 *  `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to
 *  use.
 */
@property(nonatomic, copy, nullable) NSString *clusterIpv4CidrBlock;

/**
 *  Optional. The name of the GKE cluster's secondary range used to allocate IP
 *  addresses to pods. This field is applicable only when `use_ip_aliases` is
 *  true.
 */
@property(nonatomic, copy, nullable) NSString *clusterSecondaryRangeName;

/**
 *  Optional. The IP address range of the services IP addresses in this GKE
 *  cluster. This field is applicable only when `use_ip_aliases` is true. Set to
 *  blank to have GKE choose a range with the default size. Set to /netmask
 *  (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a
 *  [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation
 *  (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`,
 *  `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
 */
@property(nonatomic, copy, nullable) NSString *servicesIpv4CidrBlock;

/**
 *  Optional. The name of the services' secondary range used to allocate IP
 *  addresses to the GKE cluster. This field is applicable only when
 *  `use_ip_aliases` is true.
 */
@property(nonatomic, copy, nullable) NSString *servicesSecondaryRangeName;

/**
 *  Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`,
 *  a VPC-native cluster is created.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useIpAliases;

@end


/**
 *  The environments in a project and location.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "environments" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudComposer_ListEnvironmentsResponse : GTLRCollectionObject

/**
 *  The list of environments returned by a ListEnvironmentsRequest.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudComposer_Environment *> *environments;

/** The page token used to query for the next page if one exists. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The ImageVersions in a project and location.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "imageVersions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudComposer_ListImageVersionsResponse : GTLRCollectionObject

/**
 *  The list of supported ImageVersions in a location.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudComposer_ImageVersion *> *imageVersions;

/** The page token used to query for the next page if one exists. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudComposer_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudComposer_Operation *> *operations;

@end


/**
 *  The configuration information for the Kubernetes Engine nodes running the
 *  Apache Airflow software.
 */
@interface GTLRCloudComposer_NodeConfig : GTLRObject

/**
 *  Optional. The disk size in GB used for node VMs. Minimum size is 20GB. If
 *  unspecified, defaults to 100GB. Cannot be updated.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *diskSizeGb;

/**
 *  Optional. The configuration for controlling how IPs are allocated in the GKE
 *  cluster.
 */
@property(nonatomic, strong, nullable) GTLRCloudComposer_IPAllocationPolicy *ipAllocationPolicy;

/**
 *  Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to
 *  deploy the VMs used to run the Apache Airflow software, specified as a
 *  [relative resource
 *  name](/apis/design/resource_names#relative_resource_name). For example:
 *  "projects/{projectId}/zones/{zoneId}". This `location` must belong to the
 *  enclosing environment's project and location. If both this field and
 *  `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong
 *  to this `location`; if both are unspecified, the service will pick a zone in
 *  the Compute Engine region corresponding to the Cloud Composer location, and
 *  propagate that choice to both fields. If only one field (`location` or
 *  `nodeConfig.machineType`) is specified, the location information from the
 *  specified field will be propagated to the unspecified field.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. The Compute Engine [machine type](/compute/docs/machine-types)
 *  used for cluster instances, specified as a [relative resource
 *  name](/apis/design/resource_names#relative_resource_name). For example:
 *  "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}". The
 *  `machineType` must belong to the enclosing environment's project and
 *  location. If both this field and `nodeConfig.location` are specified, this
 *  `machineType` must belong to the `nodeConfig.location`; if both are
 *  unspecified, the service will pick a zone in the Compute Engine region
 *  corresponding to the Cloud Composer location, and propagate that choice to
 *  both fields. If exactly one of this field and `nodeConfig.location` is
 *  specified, the location information from the specified field will be
 *  propagated to the unspecified field. The `machineTypeId` must not be a
 *  [shared-core machine type](/compute/docs/machine-types#sharedcore). If this
 *  field is unspecified, the `machineTypeId` defaults to "n1-standard-1".
 */
@property(nonatomic, copy, nullable) NSString *machineType;

/**
 *  Optional. The Compute Engine network to be used for machine communications,
 *  specified as a [relative resource
 *  name](/apis/design/resource_names#relative_resource_name). For example:
 *  "projects/{projectId}/global/networks/{networkId}". [Shared
 *  VPC](/vpc/docs/shared-vpc) is not currently supported. The network must
 *  belong to the environment's project. If unspecified, the "default" network
 *  ID in the environment's project is used. If a [Custom Subnet
 *  Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided,
 *  `nodeConfig.subnetwork` must also be provided.
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  Optional. The set of Google API scopes to be made available on all node VMs.
 *  If `oauth_scopes` is empty, defaults to
 *  ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *oauthScopes;

/**
 *  Optional. The Google Cloud Platform Service Account to be used by the node
 *  VMs. If a service account is not specified, the "default" Compute Engine
 *  service account is used. Cannot be updated.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Optional. The Compute Engine subnetwork to be used for machine
 *  communications, specified as a [relative resource
 *  name](/apis/design/resource_names#relative_resource_name). For example:
 *  "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}" If a
 *  subnetwork is provided, `nodeConfig.network` must also be provided, and the
 *  subnetwork must belong to the enclosing environment's project and location.
 */
@property(nonatomic, copy, nullable) NSString *subnetwork;

/**
 *  Optional. The list of instance tags applied to all node VMs. Tags are used
 *  to identify valid sources or targets for network firewalls. Each tag within
 *  the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
 *  Cannot be updated.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudComposer_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudComposer_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudComposer_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudComposer_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudComposer_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudComposer_Operation_Response : GTLRObject
@end


/**
 *  Metadata describing an operation.
 */
@interface GTLRCloudComposer_OperationMetadata : GTLRObject

/** Output only. The time the operation was submitted to the server. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The time when the operation terminated, regardless of its
 *  success. This field is unset if the operation is still ongoing.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. The type of operation being performed.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudComposer_OperationMetadata_OperationType_Create A
 *        resource creation operation. (Value: "CREATE")
 *    @arg @c kGTLRCloudComposer_OperationMetadata_OperationType_Delete A
 *        resource deletion operation. (Value: "DELETE")
 *    @arg @c kGTLRCloudComposer_OperationMetadata_OperationType_TypeUnspecified
 *        Unused. (Value: "TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudComposer_OperationMetadata_OperationType_Update A
 *        resource update operation. (Value: "UPDATE")
 */
@property(nonatomic, copy, nullable) NSString *operationType;

/**
 *  Output only. The resource being operated on, as a [relative resource name](
 *  /apis/design/resource_names#relative_resource_name).
 */
@property(nonatomic, copy, nullable) NSString *resource;

/** Output only. The UUID of the resource being operated on. */
@property(nonatomic, copy, nullable) NSString *resourceUuid;

/**
 *  Output only. The current operation state.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudComposer_OperationMetadata_State_Failed The operation is
 *        no longer running but did not succeed. (Value: "FAILED")
 *    @arg @c kGTLRCloudComposer_OperationMetadata_State_Pending The operation
 *        has been created but is not yet started. (Value: "PENDING")
 *    @arg @c kGTLRCloudComposer_OperationMetadata_State_Running The operation
 *        is underway. (Value: "RUNNING")
 *    @arg @c kGTLRCloudComposer_OperationMetadata_State_StateUnspecified
 *        Unused. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudComposer_OperationMetadata_State_Succeeded The operation
 *        completed successfully. (Value: "SUCCEEDED")
 *    @arg @c kGTLRCloudComposer_OperationMetadata_State_Successful Value
 *        "SUCCESSFUL"
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Configuration options for the private GKE cluster in a Cloud Composer
 *  environment.
 */
@interface GTLRCloudComposer_PrivateClusterConfig : GTLRObject

/**
 *  Optional. If `true`, access to the public endpoint of the GKE cluster is
 *  denied.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enablePrivateEndpoint;

/**
 *  Optional. The CIDR block from which IPv4 range for GKE master will be
 *  reserved. If left blank, the default value of '172.16.0.0/23' is used.
 */
@property(nonatomic, copy, nullable) NSString *masterIpv4CidrBlock;

/**
 *  Output only. The IP range in CIDR notation to use for the hosted master
 *  network. This range is used for assigning internal IP addresses to the GKE
 *  cluster master or set of masters and to the internal load balancer virtual
 *  IP. This range must not overlap with any other ranges in use within the
 *  cluster's network.
 */
@property(nonatomic, copy, nullable) NSString *masterIpv4ReservedRange;

@end


/**
 *  The configuration information for configuring a Private IP Cloud Composer
 *  environment.
 */
@interface GTLRCloudComposer_PrivateEnvironmentConfig : GTLRObject

/**
 *  Optional. The CIDR block from which IP range in tenant project will be
 *  reserved for Cloud SQL. Needs to be disjoint from
 *  `web_server_ipv4_cidr_block`.
 */
@property(nonatomic, copy, nullable) NSString *cloudSqlIpv4CidrBlock;

/**
 *  Optional. If `true`, a Private IP Cloud Composer environment is created. If
 *  this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set
 *  to true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enablePrivateEnvironment;

/**
 *  Optional. Configuration for the private GKE cluster for a Private IP Cloud
 *  Composer environment.
 */
@property(nonatomic, strong, nullable) GTLRCloudComposer_PrivateClusterConfig *privateClusterConfig;

/**
 *  Optional. The CIDR block from which IP range for web server will be
 *  reserved. Needs to be disjoint from
 *  `private_cluster_config.master_ipv4_cidr_block` and
 *  `cloud_sql_ipv4_cidr_block`.
 */
@property(nonatomic, copy, nullable) NSString *webServerIpv4CidrBlock;

/**
 *  Output only. The IP range reserved for the tenant project's App Engine VMs.
 */
@property(nonatomic, copy, nullable) NSString *webServerIpv4ReservedRange;

@end


/**
 *  Specifies the selection and configuration of software inside the
 *  environment.
 */
@interface GTLRCloudComposer_SoftwareConfig : GTLRObject

/**
 *  Optional. Apache Airflow configuration properties to override. Property keys
 *  contain the section and property names, separated by a hyphen, for example
 *  "core-dags_are_paused_at_creation". Section names must not contain hyphens
 *  ("-"), opening square brackets ("["), or closing square brackets ("]"). The
 *  property name must not be empty and must not contain an equals sign ("=") or
 *  semicolon (";"). Section and property names must not contain a period (".").
 *  Apache Airflow configuration property names must be written in
 *  [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can
 *  contain any character, and can be written in any lower/upper case format.
 *  Certain Apache Airflow configuration property values are
 *  [blocked](/composer/docs/concepts/airflow-configurations), and cannot be
 *  overridden.
 */
@property(nonatomic, strong, nullable) GTLRCloudComposer_SoftwareConfig_AirflowConfigOverrides *airflowConfigOverrides;

/**
 *  Optional. Additional environment variables to provide to the Apache Airflow
 *  scheduler, worker, and webserver processes. Environment variable names must
 *  match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow
 *  software configuration overrides (they cannot match the regular expression
 *  `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the
 *  following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` *
 *  `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` *
 *  `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` *
 *  `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
 */
@property(nonatomic, strong, nullable) GTLRCloudComposer_SoftwareConfig_EnvVariables *envVariables;

/**
 *  The version of the software running in the environment. This encapsulates
 *  both the version of Cloud Composer functionality and the version of Apache
 *  Airflow. It must match the regular expression
 *  `composer-([0-9]+\\.[0-9]+\\.[0-9]+|latest)-airflow-[0-9]+\\.[0-9]+(\\.[0-9]+.*)?`.
 *  When used as input, the server also checks if the provided version is
 *  supported and denies the request for an unsupported version. The Cloud
 *  Composer portion of the version is a [semantic version](https://semver.org)
 *  or `latest`. When the patch version is omitted, the current Cloud Composer
 *  patch version is selected. When `latest` is provided instead of an explicit
 *  version number, the server replaces `latest` with the current Cloud Composer
 *  version and stores that version number in the same field. The portion of the
 *  image version that follows *airflow-* is an official Apache Airflow
 *  repository [release
 *  name](https://github.com/apache/incubator-airflow/releases). See also
 *  [Version List](/composer/docs/concepts/versioning/composer-versions).
 */
@property(nonatomic, copy, nullable) NSString *imageVersion;

/**
 *  Optional. Custom Python Package Index (PyPI) packages to be installed in the
 *  environment. Keys refer to the lowercase package name such as "numpy" and
 *  values are the lowercase extras and version specifier such as "==1.12.0",
 *  "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a package without
 *  pinning it to a version specifier, use the empty string as the value.
 */
@property(nonatomic, strong, nullable) GTLRCloudComposer_SoftwareConfig_PypiPackages *pypiPackages;

/**
 *  Optional. The major version of Python used to run the Apache Airflow
 *  scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not
 *  specified, the default is '2'. Cannot be updated.
 */
@property(nonatomic, copy, nullable) NSString *pythonVersion;

@end


/**
 *  Optional. Apache Airflow configuration properties to override. Property keys
 *  contain the section and property names, separated by a hyphen, for example
 *  "core-dags_are_paused_at_creation". Section names must not contain hyphens
 *  ("-"), opening square brackets ("["), or closing square brackets ("]"). The
 *  property name must not be empty and must not contain an equals sign ("=") or
 *  semicolon (";"). Section and property names must not contain a period (".").
 *  Apache Airflow configuration property names must be written in
 *  [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can
 *  contain any character, and can be written in any lower/upper case format.
 *  Certain Apache Airflow configuration property values are
 *  [blocked](/composer/docs/concepts/airflow-configurations), and cannot be
 *  overridden.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudComposer_SoftwareConfig_AirflowConfigOverrides : GTLRObject
@end


/**
 *  Optional. Additional environment variables to provide to the Apache Airflow
 *  scheduler, worker, and webserver processes. Environment variable names must
 *  match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow
 *  software configuration overrides (they cannot match the regular expression
 *  `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the
 *  following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` *
 *  `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` *
 *  `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` *
 *  `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudComposer_SoftwareConfig_EnvVariables : GTLRObject
@end


/**
 *  Optional. Custom Python Package Index (PyPI) packages to be installed in the
 *  environment. Keys refer to the lowercase package name such as "numpy" and
 *  values are the lowercase extras and version specifier such as "==1.12.0",
 *  "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a package without
 *  pinning it to a version specifier, use the empty string as the value.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudComposer_SoftwareConfig_PypiPackages : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudComposer_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudComposer_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudComposer_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudComposer_Status_Details_Item : GTLRObject
@end


/**
 *  Network-level access control policy for the Airflow web server.
 */
@interface GTLRCloudComposer_WebServerNetworkAccessControl : GTLRObject

/** A collection of allowed IP ranges with descriptions. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudComposer_AllowedIpRange *> *allowedIpRanges;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
