// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Analytics Data API (analyticsdata/v1alpha)
// Description:
//   Accesses report data in Google Analytics.
// Documentation:
//   https://developers.google.com/analytics/trusted-testing/analytics-data/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAnalyticsData_BetweenFilter;
@class GTLRAnalyticsData_CaseExpression;
@class GTLRAnalyticsData_Cohort;
@class GTLRAnalyticsData_CohortReportSettings;
@class GTLRAnalyticsData_CohortSpec;
@class GTLRAnalyticsData_CohortsRange;
@class GTLRAnalyticsData_ConcatenateExpression;
@class GTLRAnalyticsData_DateRange;
@class GTLRAnalyticsData_Dimension;
@class GTLRAnalyticsData_DimensionExpression;
@class GTLRAnalyticsData_DimensionHeader;
@class GTLRAnalyticsData_DimensionMetadata;
@class GTLRAnalyticsData_DimensionOrderBy;
@class GTLRAnalyticsData_DimensionValue;
@class GTLRAnalyticsData_Entity;
@class GTLRAnalyticsData_Filter;
@class GTLRAnalyticsData_FilterExpression;
@class GTLRAnalyticsData_FilterExpressionList;
@class GTLRAnalyticsData_InListFilter;
@class GTLRAnalyticsData_Metric;
@class GTLRAnalyticsData_MetricHeader;
@class GTLRAnalyticsData_MetricMetadata;
@class GTLRAnalyticsData_MetricOrderBy;
@class GTLRAnalyticsData_MetricValue;
@class GTLRAnalyticsData_NumericFilter;
@class GTLRAnalyticsData_NumericValue;
@class GTLRAnalyticsData_OrderBy;
@class GTLRAnalyticsData_Pivot;
@class GTLRAnalyticsData_PivotDimensionHeader;
@class GTLRAnalyticsData_PivotHeader;
@class GTLRAnalyticsData_PivotOrderBy;
@class GTLRAnalyticsData_PivotSelection;
@class GTLRAnalyticsData_PropertyQuota;
@class GTLRAnalyticsData_QuotaStatus;
@class GTLRAnalyticsData_ResponseMetaData;
@class GTLRAnalyticsData_Row;
@class GTLRAnalyticsData_RunPivotReportRequest;
@class GTLRAnalyticsData_RunPivotReportResponse;
@class GTLRAnalyticsData_RunReportRequest;
@class GTLRAnalyticsData_RunReportResponse;
@class GTLRAnalyticsData_StringFilter;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRAnalyticsData_CohortsRange.granularity

/**
 *  Daily
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_CohortsRange_Granularity_Daily;
/**
 *  Unspecified.
 *
 *  Value: "GRANULARITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_CohortsRange_Granularity_GranularityUnspecified;
/**
 *  Monthly
 *
 *  Value: "MONTHLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_CohortsRange_Granularity_Monthly;
/**
 *  Weekly
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_CohortsRange_Granularity_Weekly;

// ----------------------------------------------------------------------------
// GTLRAnalyticsData_DimensionOrderBy.orderType

/**
 *  Alphanumeric sort by Unicode code point. For example, "2" < "A" < "X" < "b"
 *  < "z".
 *
 *  Value: "ALPHANUMERIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_DimensionOrderBy_OrderType_Alphanumeric;
/**
 *  Case insensitive alphanumeric sort by lower case Unicode code point. For
 *  example, "2" < "A" < "b" < "X" < "z".
 *
 *  Value: "CASE_INSENSITIVE_ALPHANUMERIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_DimensionOrderBy_OrderType_CaseInsensitiveAlphanumeric;
/**
 *  Dimension values are converted to numbers before sorting. For example in
 *  NUMERIC sort, "25" < "100", and in `ALPHANUMERIC` sort, "100" < "25".
 *  Non-numeric dimension values all have equal ordering value below all numeric
 *  values.
 *
 *  Value: "NUMERIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_DimensionOrderBy_OrderType_Numeric;
/**
 *  Unspecified.
 *
 *  Value: "ORDER_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_DimensionOrderBy_OrderType_OrderTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRAnalyticsData_MetricHeader.type

/**
 *  Unspecified type.
 *
 *  Value: "METRIC_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_MetricHeader_Type_MetricTypeUnspecified;
/**
 *  An amount of money; a special floating point type.
 *
 *  Value: "TYPE_CURRENCY"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_MetricHeader_Type_TypeCurrency;
/**
 *  Floating point type.
 *
 *  Value: "TYPE_FLOAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_MetricHeader_Type_TypeFloat;
/**
 *  Integer type.
 *
 *  Value: "TYPE_INTEGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_MetricHeader_Type_TypeInteger;
/**
 *  A duration of seconds; a special floating point type.
 *
 *  Value: "TYPE_SECONDS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_MetricHeader_Type_TypeSeconds;

// ----------------------------------------------------------------------------
// GTLRAnalyticsData_MetricMetadata.type

/**
 *  Unspecified type.
 *
 *  Value: "METRIC_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_MetricMetadata_Type_MetricTypeUnspecified;
/**
 *  An amount of money; a special floating point type.
 *
 *  Value: "TYPE_CURRENCY"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_MetricMetadata_Type_TypeCurrency;
/**
 *  Floating point type.
 *
 *  Value: "TYPE_FLOAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_MetricMetadata_Type_TypeFloat;
/**
 *  Integer type.
 *
 *  Value: "TYPE_INTEGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_MetricMetadata_Type_TypeInteger;
/**
 *  A duration of seconds; a special floating point type.
 *
 *  Value: "TYPE_SECONDS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_MetricMetadata_Type_TypeSeconds;

// ----------------------------------------------------------------------------
// GTLRAnalyticsData_NumericFilter.operation

/**
 *  Equal
 *
 *  Value: "EQUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_NumericFilter_Operation_Equal;
/**
 *  Greater than
 *
 *  Value: "GREATER_THAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_NumericFilter_Operation_GreaterThan;
/**
 *  Greater than or equal
 *
 *  Value: "GREATER_THAN_OR_EQUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_NumericFilter_Operation_GreaterThanOrEqual;
/**
 *  Less than
 *
 *  Value: "LESS_THAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_NumericFilter_Operation_LessThan;
/**
 *  Less than or equal
 *
 *  Value: "LESS_THAN_OR_EQUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_NumericFilter_Operation_LessThanOrEqual;
/**
 *  Unspecified.
 *
 *  Value: "OPERATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_NumericFilter_Operation_OperationUnspecified;

// ----------------------------------------------------------------------------
// GTLRAnalyticsData_Pivot.metricAggregations

/**
 *  Count operator.
 *
 *  Value: "COUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_Pivot_MetricAggregations_Count;
/**
 *  Maximum operator.
 *
 *  Value: "MAXIMUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_Pivot_MetricAggregations_Maximum;
/**
 *  Unspecified operator.
 *
 *  Value: "METRIC_AGGREGATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_Pivot_MetricAggregations_MetricAggregationUnspecified;
/**
 *  Minimum operator.
 *
 *  Value: "MINIMUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_Pivot_MetricAggregations_Minimum;
/**
 *  SUM operator.
 *
 *  Value: "TOTAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_Pivot_MetricAggregations_Total;

// ----------------------------------------------------------------------------
// GTLRAnalyticsData_RunReportRequest.metricAggregations

/**
 *  Count operator.
 *
 *  Value: "COUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_RunReportRequest_MetricAggregations_Count;
/**
 *  Maximum operator.
 *
 *  Value: "MAXIMUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_RunReportRequest_MetricAggregations_Maximum;
/**
 *  Unspecified operator.
 *
 *  Value: "METRIC_AGGREGATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_RunReportRequest_MetricAggregations_MetricAggregationUnspecified;
/**
 *  Minimum operator.
 *
 *  Value: "MINIMUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_RunReportRequest_MetricAggregations_Minimum;
/**
 *  SUM operator.
 *
 *  Value: "TOTAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_RunReportRequest_MetricAggregations_Total;

// ----------------------------------------------------------------------------
// GTLRAnalyticsData_StringFilter.matchType

/**
 *  Begins with the string value.
 *
 *  Value: "BEGINS_WITH"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_StringFilter_MatchType_BeginsWith;
/**
 *  Contains the string value.
 *
 *  Value: "CONTAINS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_StringFilter_MatchType_Contains;
/**
 *  Ends with the string value.
 *
 *  Value: "ENDS_WITH"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_StringFilter_MatchType_EndsWith;
/**
 *  Exact match of the string value.
 *
 *  Value: "EXACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_StringFilter_MatchType_Exact;
/**
 *  Full regular expression match with the string value.
 *
 *  Value: "FULL_REGEXP"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_StringFilter_MatchType_FullRegexp;
/**
 *  Unspecified
 *
 *  Value: "MATCH_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_StringFilter_MatchType_MatchTypeUnspecified;
/**
 *  Partial regular expression match with the string value.
 *
 *  Value: "PARTIAL_REGEXP"
 */
FOUNDATION_EXTERN NSString * const kGTLRAnalyticsData_StringFilter_MatchType_PartialRegexp;

/**
 *  The batch request containing multiple pivot report requests.
 */
@interface GTLRAnalyticsData_BatchRunPivotReportsRequest : GTLRObject

/**
 *  A property whose events are tracked. This entity must be specified for the
 *  batch. The entity within RunPivotReportRequest may either be unspecified or
 *  consistent with this entity.
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_Entity *entity;

/**
 *  Individual requests. Each request has a separate pivot report response. Each
 *  batch request is allowed up to 5 requests.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_RunPivotReportRequest *> *requests;

@end


/**
 *  The batch response containing multiple pivot reports.
 */
@interface GTLRAnalyticsData_BatchRunPivotReportsResponse : GTLRObject

/**
 *  Individual responses. Each response has a separate pivot report request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_RunPivotReportResponse *> *pivotReports;

@end


/**
 *  The batch request containing multiple report requests.
 */
@interface GTLRAnalyticsData_BatchRunReportsRequest : GTLRObject

/**
 *  A property whose events are tracked. This entity must be specified for the
 *  batch. The entity within RunReportRequest may either be unspecified or
 *  consistent with this entity.
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_Entity *entity;

/**
 *  Individual requests. Each request has a separate report response. Each batch
 *  request is allowed up to 5 requests.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_RunReportRequest *> *requests;

@end


/**
 *  The batch response containing multiple reports.
 */
@interface GTLRAnalyticsData_BatchRunReportsResponse : GTLRObject

/** Individual responses. Each response has a separate report request. */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_RunReportResponse *> *reports;

@end


/**
 *  To express that the result needs to be between two numbers (inclusive).
 */
@interface GTLRAnalyticsData_BetweenFilter : GTLRObject

/** Begins with this number. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_NumericValue *fromValue;

/** Ends with this number. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_NumericValue *toValue;

@end


/**
 *  Used to convert a dimension value to a single case.
 */
@interface GTLRAnalyticsData_CaseExpression : GTLRObject

/**
 *  Name of a dimension. The name must refer back to a name in dimensions field
 *  of the request.
 */
@property(nonatomic, copy, nullable) NSString *dimensionName;

@end


/**
 *  Defines a cohort. A cohort is a group of users who share a common
 *  characteristic. For example, all users with the same acquisition date belong
 *  to the same cohort.
 */
@interface GTLRAnalyticsData_Cohort : GTLRObject

/**
 *  The cohort selects users whose first visit date is between start date and
 *  end date defined in the `dateRange`. In a cohort request, this `dateRange`
 *  is required and the `dateRanges` in the `RunReportRequest` or
 *  `RunPivotReportRequest` must be unspecified. The date range should be
 *  aligned with the cohort's granularity. If CohortsRange uses daily
 *  granularity, the date range can be aligned to any day. If CohortsRange uses
 *  weekly granularity, the date range should be aligned to the week boundary,
 *  starting at Sunday and ending Saturday. If CohortsRange uses monthly
 *  granularity, the date range should be aligned to the month, starting at the
 *  first and ending on the last day of the month.
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_DateRange *dateRange;

/**
 *  The dimension used by cohort. Only supports `firstTouchDate` for retention
 *  report.
 */
@property(nonatomic, copy, nullable) NSString *dimension;

/**
 *  Assigns a name to this cohort. The dimension `cohort` is valued to this name
 *  in a report response. If set, cannot begin with `cohort_` or `RESERVED_`. If
 *  not set, cohorts are named by their zero based index `cohort_0`, `cohort_1`,
 *  etc.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Settings of a cohort report.
 */
@interface GTLRAnalyticsData_CohortReportSettings : GTLRObject

/**
 *  If true, accumulates the result from first visit day to the end day. Not
 *  supported in `RunReportRequest`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *accumulate;

@end


/**
 *  Specification for a cohort report.
 */
@interface GTLRAnalyticsData_CohortSpec : GTLRObject

/** Settings of a cohort report. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_CohortReportSettings *cohortReportSettings;

/** The definition for the cohorts. */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_Cohort *> *cohorts;

/** The data ranges of cohorts. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_CohortsRange *cohortsRange;

@end


/**
 *  Describes date range for a cohort report.
 */
@interface GTLRAnalyticsData_CohortsRange : GTLRObject

/**
 *  For daily cohorts, this will be the end day offset. For weekly cohorts, this
 *  will be the week offset.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endOffset;

/**
 *  Reporting date range for each cohort is calculated based on these three
 *  fields.
 *
 *  Likely values:
 *    @arg @c kGTLRAnalyticsData_CohortsRange_Granularity_Daily Daily (Value:
 *        "DAILY")
 *    @arg @c kGTLRAnalyticsData_CohortsRange_Granularity_GranularityUnspecified
 *        Unspecified. (Value: "GRANULARITY_UNSPECIFIED")
 *    @arg @c kGTLRAnalyticsData_CohortsRange_Granularity_Monthly Monthly
 *        (Value: "MONTHLY")
 *    @arg @c kGTLRAnalyticsData_CohortsRange_Granularity_Weekly Weekly (Value:
 *        "WEEKLY")
 */
@property(nonatomic, copy, nullable) NSString *granularity;

/**
 *  For daily cohorts, this will be the start day offset. For weekly cohorts,
 *  this will be the week offset.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startOffset;

@end


/**
 *  Used to combine dimension values to a single dimension.
 */
@interface GTLRAnalyticsData_ConcatenateExpression : GTLRObject

/**
 *  The delimiter placed between dimension names. Delimiters are often single
 *  characters such as "|" or "," but can be longer strings. If a dimension
 *  value contains the delimiter, both will be present in response with no
 *  distinction. For example if dimension 1 value = "US,FR", dimension 2 value =
 *  "JP", and delimiter = ",", then the response will contain "US,FR,JP".
 */
@property(nonatomic, copy, nullable) NSString *delimiter;

/**
 *  Names of dimensions. The names must refer back to names in the dimensions
 *  field of the request.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dimensionNames;

@end


/**
 *  A contiguous set of days: startDate, startDate + 1, ..., endDate. Requests
 *  are allowed up to 4 date ranges, and the union of the ranges can cover up to
 *  1 year.
 */
@interface GTLRAnalyticsData_DateRange : GTLRObject

/**
 *  The inclusive end date for the query in the format `YYYY-MM-DD`. Cannot be
 *  before `start_date`. The format `NdaysAgo`, `yesterday`, or `today` is also
 *  accepted, and in that case, the date is inferred based on the property's
 *  reporting time zone.
 */
@property(nonatomic, copy, nullable) NSString *endDate;

/**
 *  Assigns a name to this date range. The dimension `dateRange` is valued to
 *  this name in a report response. If set, cannot begin with `date_range_` or
 *  `RESERVED_`. If not set, date ranges are named by their zero based index in
 *  the request: `date_range_0`, `date_range_1`, etc.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The inclusive start date for the query in the format `YYYY-MM-DD`. Cannot be
 *  after `end_date`. The format `NdaysAgo`, `yesterday`, or `today` is also
 *  accepted, and in that case, the date is inferred based on the property's
 *  reporting time zone.
 */
@property(nonatomic, copy, nullable) NSString *startDate;

@end


/**
 *  Dimensions are attributes of your data. For example, the dimension City
 *  indicates the city, for example, "Paris" or "New York", from which an event
 *  originates. Requests are allowed up to 8 dimensions.
 */
@interface GTLRAnalyticsData_Dimension : GTLRObject

/**
 *  One dimension can be the result of an expression of multiple dimensions. For
 *  example, dimension "country, city": concatenate(country, ", ", city).
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_DimensionExpression *dimensionExpression;

/** The name of the dimension. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Used to express a dimension which is the result of a formula of multiple
 *  dimensions. Example usages: 1) lower_case(dimension) 2)
 *  concatenate(dimension1, symbol, dimension2).
 */
@interface GTLRAnalyticsData_DimensionExpression : GTLRObject

/**
 *  Used to combine dimension values to a single dimension. For example,
 *  dimension "country, city": concatenate(country, ", ", city).
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_ConcatenateExpression *concatenate;

/** Used to convert a dimension value to lower case. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_CaseExpression *lowerCase;

/** Used to convert a dimension value to upper case. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_CaseExpression *upperCase;

@end


/**
 *  Describes a dimension column in the report. Dimensions requested in a report
 *  produce column entries within rows and DimensionHeaders. However, dimensions
 *  used exclusively within filters or expressions do not produce columns in a
 *  report; correspondingly, those dimensions do not produce headers.
 */
@interface GTLRAnalyticsData_DimensionHeader : GTLRObject

/** The dimension's name. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Explains a dimension.
 */
@interface GTLRAnalyticsData_DimensionMetadata : GTLRObject

/**
 *  This dimension's name. Useable in [Dimension](#Dimension)'s `name`. For
 *  example, `eventName`.
 */
@property(nonatomic, copy, nullable) NSString *apiName;

/**
 *  Still usable but deprecated names for this dimension. If populated, this
 *  dimension is available by either `apiName` or one of `deprecatedApiNames`
 *  for a period of time. After the deprecation period, the dimension will be
 *  available only by `apiName`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *deprecatedApiNames;

/**
 *  Description of how this dimension is used and calculated.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  This dimension's name within the Google Analytics user interface. For
 *  example, `Event name`.
 */
@property(nonatomic, copy, nullable) NSString *uiName;

@end


/**
 *  Sorts by dimension values.
 */
@interface GTLRAnalyticsData_DimensionOrderBy : GTLRObject

/** A dimension name in the request to order by. */
@property(nonatomic, copy, nullable) NSString *dimensionName;

/**
 *  Controls the rule for dimension value ordering.
 *
 *  Likely values:
 *    @arg @c kGTLRAnalyticsData_DimensionOrderBy_OrderType_Alphanumeric
 *        Alphanumeric sort by Unicode code point. For example, "2" < "A" < "X"
 *        < "b" < "z". (Value: "ALPHANUMERIC")
 *    @arg @c kGTLRAnalyticsData_DimensionOrderBy_OrderType_CaseInsensitiveAlphanumeric
 *        Case insensitive alphanumeric sort by lower case Unicode code point.
 *        For example, "2" < "A" < "b" < "X" < "z". (Value:
 *        "CASE_INSENSITIVE_ALPHANUMERIC")
 *    @arg @c kGTLRAnalyticsData_DimensionOrderBy_OrderType_Numeric Dimension
 *        values are converted to numbers before sorting. For example in NUMERIC
 *        sort, "25" < "100", and in `ALPHANUMERIC` sort, "100" < "25".
 *        Non-numeric dimension values all have equal ordering value below all
 *        numeric values. (Value: "NUMERIC")
 *    @arg @c kGTLRAnalyticsData_DimensionOrderBy_OrderType_OrderTypeUnspecified
 *        Unspecified. (Value: "ORDER_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *orderType;

@end


/**
 *  The value of a dimension.
 */
@interface GTLRAnalyticsData_DimensionValue : GTLRObject

/** Value as a string if the dimension type is a string. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  The unique identifier of the property whose events are tracked.
 */
@interface GTLRAnalyticsData_Entity : GTLRObject

/** A Google Analytics App + Web property id. */
@property(nonatomic, copy, nullable) NSString *propertyId;

@end


/**
 *  An expression to filter dimension or metric values.
 */
@interface GTLRAnalyticsData_Filter : GTLRObject

/** A filter for two values. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_BetweenFilter *betweenFilter;

/**
 *  The dimension name or metric name. Must be a name defined in dimensions or
 *  metrics.
 */
@property(nonatomic, copy, nullable) NSString *fieldName;

/** A filter for in list values. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_InListFilter *inListFilter;

/**
 *  A filter for null values.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nullFilter;

/** A filter for numeric or date values. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_NumericFilter *numericFilter;

/** Strings related filter. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_StringFilter *stringFilter;

@end


/**
 *  To express dimension or metric filters. The fields in the same
 *  FilterExpression need to be either all dimensions or all metrics.
 */
@interface GTLRAnalyticsData_FilterExpression : GTLRObject

/** The FilterExpressions in and_group have an AND relationship. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_FilterExpressionList *andGroup;

/**
 *  A primitive filter. All fields in filter in same FilterExpression needs to
 *  be either all dimensions or metrics.
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_Filter *filter;

/** The FilterExpression is NOT of not_expression. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_FilterExpression *notExpression;

/** The FilterExpressions in or_group have an OR relationship. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_FilterExpressionList *orGroup;

@end


/**
 *  A list of filter expressions.
 */
@interface GTLRAnalyticsData_FilterExpressionList : GTLRObject

/** A list of filter expressions. */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_FilterExpression *> *expressions;

@end


/**
 *  The result needs to be in a list of string values.
 */
@interface GTLRAnalyticsData_InListFilter : GTLRObject

/**
 *  If true, the string value is case sensitive.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *caseSensitive;

/** The list of string values. Must be non-empty. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  The quantitative measurements of a report. For example, the metric
 *  eventCount is the total number of events. Requests are allowed up to 10
 *  metrics.
 */
@interface GTLRAnalyticsData_Metric : GTLRObject

/**
 *  A mathematical expression for derived metrics. For example, the metric Event
 *  count per user is eventCount/totalUsers.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Indicates if a metric is invisible. If a metric is invisible, the metric is
 *  not in the response, but can be used in filters, order_bys or being referred
 *  to in a metric expression.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *invisible;

/** The name of the metric. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Describes a metric column in the report. Visible metrics requested in a
 *  report produce column entries within rows and MetricHeaders. However,
 *  metrics used exclusively within filters or expressions do not produce
 *  columns in a report; correspondingly, those metrics do not produce headers.
 */
@interface GTLRAnalyticsData_MetricHeader : GTLRObject

/** The metric's name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The metric's data type.
 *
 *  Likely values:
 *    @arg @c kGTLRAnalyticsData_MetricHeader_Type_MetricTypeUnspecified
 *        Unspecified type. (Value: "METRIC_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRAnalyticsData_MetricHeader_Type_TypeCurrency An amount of
 *        money; a special floating point type. (Value: "TYPE_CURRENCY")
 *    @arg @c kGTLRAnalyticsData_MetricHeader_Type_TypeFloat Floating point
 *        type. (Value: "TYPE_FLOAT")
 *    @arg @c kGTLRAnalyticsData_MetricHeader_Type_TypeInteger Integer type.
 *        (Value: "TYPE_INTEGER")
 *    @arg @c kGTLRAnalyticsData_MetricHeader_Type_TypeSeconds A duration of
 *        seconds; a special floating point type. (Value: "TYPE_SECONDS")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Explains a metric.
 */
@interface GTLRAnalyticsData_MetricMetadata : GTLRObject

/**
 *  A metric name. Useable in [Metric](#Metric)'s `name`. For example,
 *  `eventCount`.
 */
@property(nonatomic, copy, nullable) NSString *apiName;

/**
 *  Still usable but deprecated names for this metric. If populated, this metric
 *  is available by either `apiName` or one of `deprecatedApiNames` for a period
 *  of time. After the deprecation period, the metric will be available only by
 *  `apiName`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *deprecatedApiNames;

/**
 *  Description of how this metric is used and calculated.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The mathematical expression for this derived metric. Can be used in
 *  [Metric](#Metric)'s `expression` field for equivalent reports. Most metrics
 *  are not expressions, and for non-expressions, this field is empty.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  The type of this metric.
 *
 *  Likely values:
 *    @arg @c kGTLRAnalyticsData_MetricMetadata_Type_MetricTypeUnspecified
 *        Unspecified type. (Value: "METRIC_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRAnalyticsData_MetricMetadata_Type_TypeCurrency An amount of
 *        money; a special floating point type. (Value: "TYPE_CURRENCY")
 *    @arg @c kGTLRAnalyticsData_MetricMetadata_Type_TypeFloat Floating point
 *        type. (Value: "TYPE_FLOAT")
 *    @arg @c kGTLRAnalyticsData_MetricMetadata_Type_TypeInteger Integer type.
 *        (Value: "TYPE_INTEGER")
 *    @arg @c kGTLRAnalyticsData_MetricMetadata_Type_TypeSeconds A duration of
 *        seconds; a special floating point type. (Value: "TYPE_SECONDS")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  This metric's name within the Google Analytics user interface. For example,
 *  `Event count`.
 */
@property(nonatomic, copy, nullable) NSString *uiName;

@end


/**
 *  Sorts by metric values.
 */
@interface GTLRAnalyticsData_MetricOrderBy : GTLRObject

/** A metric name in the request to order by. */
@property(nonatomic, copy, nullable) NSString *metricName;

@end


/**
 *  The value of a metric.
 */
@interface GTLRAnalyticsData_MetricValue : GTLRObject

/** Measurement value. See MetricHeader for type. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Filters for numeric or date values.
 */
@interface GTLRAnalyticsData_NumericFilter : GTLRObject

/**
 *  The operation type for this filter.
 *
 *  Likely values:
 *    @arg @c kGTLRAnalyticsData_NumericFilter_Operation_Equal Equal (Value:
 *        "EQUAL")
 *    @arg @c kGTLRAnalyticsData_NumericFilter_Operation_GreaterThan Greater
 *        than (Value: "GREATER_THAN")
 *    @arg @c kGTLRAnalyticsData_NumericFilter_Operation_GreaterThanOrEqual
 *        Greater than or equal (Value: "GREATER_THAN_OR_EQUAL")
 *    @arg @c kGTLRAnalyticsData_NumericFilter_Operation_LessThan Less than
 *        (Value: "LESS_THAN")
 *    @arg @c kGTLRAnalyticsData_NumericFilter_Operation_LessThanOrEqual Less
 *        than or equal (Value: "LESS_THAN_OR_EQUAL")
 *    @arg @c kGTLRAnalyticsData_NumericFilter_Operation_OperationUnspecified
 *        Unspecified. (Value: "OPERATION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *operation;

/** A numeric value or a date value. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_NumericValue *value;

@end


/**
 *  To represent a number.
 */
@interface GTLRAnalyticsData_NumericValue : GTLRObject

/**
 *  Double value
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *doubleValue;

/**
 *  Integer value
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *int64Value;

@end


/**
 *  The sort options.
 */
@interface GTLRAnalyticsData_OrderBy : GTLRObject

/**
 *  If true, sorts by descending order.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *desc;

/** Sorts results by a dimension's values. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_DimensionOrderBy *dimension;

/** Sorts results by a metric's values. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_MetricOrderBy *metric;

/** Sorts results by a metric's values within a pivot column group. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_PivotOrderBy *pivot;

@end


/**
 *  Describes the visible dimension columns and rows in the report response.
 */
@interface GTLRAnalyticsData_Pivot : GTLRObject

/**
 *  Dimension names for visible columns in the report response. Including
 *  "dateRange" produces a date range column; for each row in the response,
 *  dimension values in the date range column will indicate the corresponding
 *  date range from the request.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *fieldNames;

/**
 *  The number of rows to return in this pivot. If unspecified, 10 rows are
 *  returned. If -1, all rows are returned.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *limit;

/**
 *  Aggregate the metrics by dimensions in this pivot using the specified
 *  metric_aggregations.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metricAggregations;

/**
 *  The row count of the start row. The first row is counted as row 0.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offset;

/**
 *  Specifies how dimensions are ordered in the pivot. In the first Pivot, the
 *  OrderBys determine Row and PivotDimensionHeader ordering; in subsequent
 *  Pivots, the OrderBys determine only PivotDimensionHeader ordering.
 *  Dimensions specified in these OrderBys must be a subset of
 *  Pivot.field_names.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_OrderBy *> *orderBys;

@end


/**
 *  Summarizes dimension values from a row for this pivot.
 */
@interface GTLRAnalyticsData_PivotDimensionHeader : GTLRObject

/** Values of multiple dimensions in a pivot. */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_DimensionValue *> *dimensionValues;

@end


/**
 *  Dimensions' values in a single pivot.
 */
@interface GTLRAnalyticsData_PivotHeader : GTLRObject

/**
 *  The size is the same as the cardinality of the corresponding dimension
 *  combinations.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_PivotDimensionHeader *> *pivotDimensionHeaders;

/**
 *  The cardinality of the pivot as if offset = 0 and limit = -1. The total
 *  number of rows for this pivot's fields regardless of how the parameters
 *  offset and limit are specified in the request.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowCount;

@end


/**
 *  Sorts by a pivot column group.
 */
@interface GTLRAnalyticsData_PivotOrderBy : GTLRObject

/**
 *  In the response to order by, order rows by this column. Must be a metric
 *  name from the request.
 */
@property(nonatomic, copy, nullable) NSString *metricName;

/**
 *  Used to select a dimension name and value pivot. If multiple pivot
 *  selections are given, the sort occurs on rows where all pivot selection
 *  dimension name and value pairs match the row's dimension name and value
 *  pair.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_PivotSelection *> *pivotSelections;

@end


/**
 *  A pair of dimension names and values. Rows with this dimension pivot pair
 *  are ordered by the metric's value. For example if pivots = {{"browser",
 *  "Chrome"}} and metric_name = "Sessions", then the rows will be sorted based
 *  on Sessions in Chrome.
 *  ---------|----------|----------------|----------|---------------- | Chrome |
 *  Chrome | Safari | Safari
 *  ---------|----------|----------------|----------|---------------- Country |
 *  Sessions | Pages/Sessions | Sessions | Pages/Sessions
 *  ---------|----------|----------------|----------|---------------- US | 2 | 2
 *  | 3 | 1 ---------|----------|----------------|----------|----------------
 *  Canada | 3 | 1 | 4 | 1
 *  ---------|----------|----------------|----------|----------------
 */
@interface GTLRAnalyticsData_PivotSelection : GTLRObject

/** Must be a dimension name from the request. */
@property(nonatomic, copy, nullable) NSString *dimensionName;

/** Order by only when the named dimension is this value. */
@property(nonatomic, copy, nullable) NSString *dimensionValue;

@end


/**
 *  Current state of all quotas for this Analytics Property. If any quota for a
 *  property is exhausted, all requests to that property will return Resource
 *  Exhausted errors.
 */
@interface GTLRAnalyticsData_PropertyQuota : GTLRObject

/** Analytics Properties can send up to 10 concurrent requests. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_QuotaStatus *concurrentRequests;

/**
 *  Analytics Properties and cloud project pairs can have up to 10 server errors
 *  per hour.
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_QuotaStatus *serverErrorsPerProjectPerHour;

/**
 *  Analytics Properties can use up to 25,000 tokens per day. Most requests
 *  consume fewer than 10 tokens.
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_QuotaStatus *tokensPerDay;

/**
 *  Analytics Properties can use up to 5,000 tokens per day. An API request
 *  consumes a single number of tokens, and that number is deducted from both
 *  the hourly and daily quotas.
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_QuotaStatus *tokensPerHour;

@end


/**
 *  Current state for a particular quota group.
 */
@interface GTLRAnalyticsData_QuotaStatus : GTLRObject

/**
 *  Quota consumed by this request.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *consumed;

/**
 *  Quota remaining after this request.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *remaining;

@end


/**
 *  Response's metadata carrying additional information about the report
 *  content.
 */
@interface GTLRAnalyticsData_ResponseMetaData : GTLRObject

/**
 *  If true, indicates some buckets of dimension combinations are rolled into
 *  "(other)" row. This can happen for high cardinality reports.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dataLossFromOtherRow;

@end


/**
 *  Report data for each row. For example if RunReportRequest contains: ```none
 *  dimensions { name: "eventName" } dimensions { name: "countryId" } metrics {
 *  name: "eventCount" } ``` One row with 'in_app_purchase' as the eventName,
 *  'us' as the countryId, and 15 as the eventCount, would be: ```none
 *  dimension_values { name: 'in_app_purchase' name: 'us' } metric_values {
 *  int64_value: 15 } ```
 */
@interface GTLRAnalyticsData_Row : GTLRObject

/**
 *  List of requested dimension values. In a PivotReport, dimension_values are
 *  only listed for dimensions included in a pivot.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_DimensionValue *> *dimensionValues;

/** List of requested visible metric values. */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_MetricValue *> *metricValues;

@end


/**
 *  The request to generate a pivot report.
 */
@interface GTLRAnalyticsData_RunPivotReportRequest : GTLRObject

/**
 *  Cohort group associated with this request. If there is a cohort group in the
 *  request the 'cohort' dimension must be present.
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_CohortSpec *cohortSpec;

/**
 *  A currency code in ISO4217 format, such as "AED", "USD", "JPY". If the field
 *  is empty, the report uses the entity's default currency.
 */
@property(nonatomic, copy, nullable) NSString *currencyCode;

/**
 *  The date range to retrieve event data for the report. If multiple date
 *  ranges are specified, event data from each date range is used in the report.
 *  A special dimension with field name "dateRange" can be included in a Pivot's
 *  field names; if included, the report compares between date ranges. In a
 *  cohort request, this `dateRanges` must be unspecified.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_DateRange *> *dateRanges;

/**
 *  The filter clause of dimensions. Dimensions must be requested to be used in
 *  this filter. Metrics cannot be used in this filter.
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_FilterExpression *dimensionFilter;

/**
 *  The dimensions requested. All defined dimensions must be used by one of the
 *  following: dimension_expression, dimension_filter, pivots, order_bys.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_Dimension *> *dimensions;

/**
 *  A property whose events are tracked. Within a batch request, this entity
 *  should either be unspecified or consistent with the batch-level entity.
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_Entity *entity;

/**
 *  If false or unspecified, each row with all metrics equal to 0 will not be
 *  returned. If true, these rows will be returned if they are not separately
 *  removed by a filter.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *keepEmptyRows;

/**
 *  The filter clause of metrics. Applied at post aggregation phase, similar to
 *  SQL having-clause. Metrics must be requested to be used in this filter.
 *  Dimensions cannot be used in this filter.
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_FilterExpression *metricFilter;

/**
 *  The metrics requested, at least one metric needs to be specified. All
 *  defined metrics must be used by one of the following: metric_expression,
 *  metric_filter, order_bys.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_Metric *> *metrics;

/**
 *  Describes the visual format of the report's dimensions in columns or rows.
 *  The union of the fieldNames (dimension names) in all pivots must be a subset
 *  of dimension names defined in Dimensions. No two pivots can share a
 *  dimension. A dimension is only visible if it appears in a pivot.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_Pivot *> *pivots;

/**
 *  Toggles whether to return the current state of this Analytics Property's
 *  quota. Quota is returned in [PropertyQuota](#PropertyQuota).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *returnPropertyQuota;

@end


/**
 *  The response pivot report table corresponding to a pivot request.
 */
@interface GTLRAnalyticsData_RunPivotReportResponse : GTLRObject

/**
 *  Aggregation of metric values. Can be totals, minimums, or maximums. The
 *  returned aggregations are controlled by the metric_aggregations in the
 *  pivot. The type of aggregation returned in each row is shown by the
 *  dimension_values which are set to "RESERVED_".
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_Row *> *aggregates;

/**
 *  Describes dimension columns. The number of DimensionHeaders and ordering of
 *  DimensionHeaders matches the dimensions present in rows.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_DimensionHeader *> *dimensionHeaders;

/** Metadata for the report. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_ResponseMetaData *metadata;

/**
 *  Describes metric columns. The number of MetricHeaders and ordering of
 *  MetricHeaders matches the metrics present in rows.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_MetricHeader *> *metricHeaders;

/**
 *  Summarizes the columns and rows created by a pivot. Each pivot in the
 *  request produces one header in the response. If we have a request like this:
 *  "pivots": [{ "fieldNames": ["country", "city"] }, { "fieldNames":
 *  "eventName" }] We will have the following `pivotHeaders` in the response:
 *  "pivotHeaders" : [{ "dimensionHeaders": [{ "dimensionValues": [ { "value":
 *  "United Kingdom" }, { "value": "London" } ] }, { "dimensionValues": [ {
 *  "value": "Japan" }, { "value": "Osaka" } ] }] }, { "dimensionHeaders": [{
 *  "dimensionValues": [{ "value": "session_start" }] }, { "dimensionValues": [{
 *  "value": "scroll" }] }] }]
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_PivotHeader *> *pivotHeaders;

/** This Analytics Property's quota state including this request. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_PropertyQuota *propertyQuota;

/** Rows of dimension value combinations and metric values in the report. */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_Row *> *rows;

@end


/**
 *  The request to generate a report.
 */
@interface GTLRAnalyticsData_RunReportRequest : GTLRObject

/**
 *  Cohort group associated with this request. If there is a cohort group in the
 *  request the 'cohort' dimension must be present.
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_CohortSpec *cohortSpec;

/**
 *  A currency code in ISO4217 format, such as "AED", "USD", "JPY". If the field
 *  is empty, the report uses the entity's default currency.
 */
@property(nonatomic, copy, nullable) NSString *currencyCode;

/**
 *  Date ranges of data to read. If multiple date ranges are requested, each
 *  response row will contain a zero based date range index. If two date ranges
 *  overlap, the event data for the overlapping days is included in the response
 *  rows for both date ranges. In a cohort request, this `dateRanges` must be
 *  unspecified.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_DateRange *> *dateRanges;

/**
 *  The filter clause of dimensions. Dimensions must be requested to be used in
 *  this filter. Metrics cannot be used in this filter.
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_FilterExpression *dimensionFilter;

/** The dimensions requested and displayed. */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_Dimension *> *dimensions;

/**
 *  A property whose events are tracked. Within a batch request, this entity
 *  should either be unspecified or consistent with the batch-level entity.
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_Entity *entity;

/**
 *  If false or unspecified, each row with all metrics equal to 0 will not be
 *  returned. If true, these rows will be returned if they are not separately
 *  removed by a filter.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *keepEmptyRows;

/**
 *  The number of rows to return. If unspecified, 10 rows are returned. If -1,
 *  all rows are returned.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *limit;

/**
 *  Aggregation of metrics. Aggregated metric values will be shown in rows where
 *  the dimension_values are set to "RESERVED_(MetricAggregation)".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metricAggregations;

/**
 *  The filter clause of metrics. Applied at post aggregation phase, similar to
 *  SQL having-clause. Metrics must be requested to be used in this filter.
 *  Dimensions cannot be used in this filter.
 */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_FilterExpression *metricFilter;

/** The metrics requested and displayed. */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_Metric *> *metrics;

/**
 *  The row count of the start row. The first row is counted as row 0.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offset;

/** Specifies how rows are ordered in the response. */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_OrderBy *> *orderBys;

/**
 *  Toggles whether to return the current state of this Analytics Property's
 *  quota. Quota is returned in [PropertyQuota](#PropertyQuota).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *returnPropertyQuota;

@end


/**
 *  The response report table corresponding to a request.
 */
@interface GTLRAnalyticsData_RunReportResponse : GTLRObject

/**
 *  Describes dimension columns. The number of DimensionHeaders and ordering of
 *  DimensionHeaders matches the dimensions present in rows.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_DimensionHeader *> *dimensionHeaders;

/** If requested, the maximum values of metrics. */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_Row *> *maximums;

/** Metadata for the report. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_ResponseMetaData *metadata;

/**
 *  Describes metric columns. The number of MetricHeaders and ordering of
 *  MetricHeaders matches the metrics present in rows.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_MetricHeader *> *metricHeaders;

/** If requested, the minimum values of metrics. */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_Row *> *minimums;

/** This Analytics Property's quota state including this request. */
@property(nonatomic, strong, nullable) GTLRAnalyticsData_PropertyQuota *propertyQuota;

/**
 *  The total number of rows in the query result, regardless of the number of
 *  rows returned in the response. For example if a query returns 175 rows and
 *  includes limit = 50 in the API request, the response will contain row_count
 *  = 175 but only 50 rows.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowCount;

/** Rows of dimension value combinations and metric values in the report. */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_Row *> *rows;

/** If requested, the totaled values of metrics. */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_Row *> *totals;

@end


/**
 *  The filter for string
 */
@interface GTLRAnalyticsData_StringFilter : GTLRObject

/**
 *  If true, the string value is case sensitive.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *caseSensitive;

/**
 *  The match type for this filter.
 *
 *  Likely values:
 *    @arg @c kGTLRAnalyticsData_StringFilter_MatchType_BeginsWith Begins with
 *        the string value. (Value: "BEGINS_WITH")
 *    @arg @c kGTLRAnalyticsData_StringFilter_MatchType_Contains Contains the
 *        string value. (Value: "CONTAINS")
 *    @arg @c kGTLRAnalyticsData_StringFilter_MatchType_EndsWith Ends with the
 *        string value. (Value: "ENDS_WITH")
 *    @arg @c kGTLRAnalyticsData_StringFilter_MatchType_Exact Exact match of the
 *        string value. (Value: "EXACT")
 *    @arg @c kGTLRAnalyticsData_StringFilter_MatchType_FullRegexp Full regular
 *        expression match with the string value. (Value: "FULL_REGEXP")
 *    @arg @c kGTLRAnalyticsData_StringFilter_MatchType_MatchTypeUnspecified
 *        Unspecified (Value: "MATCH_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRAnalyticsData_StringFilter_MatchType_PartialRegexp Partial
 *        regular expression match with the string value. (Value:
 *        "PARTIAL_REGEXP")
 */
@property(nonatomic, copy, nullable) NSString *matchType;

/** The string value used for the matching. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  The dimensions and metrics currently accepted in reporting methods.
 */
@interface GTLRAnalyticsData_UniversalMetadata : GTLRObject

/** The dimensions descriptions. */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_DimensionMetadata *> *dimensions;

/** The metric descriptions. */
@property(nonatomic, strong, nullable) NSArray<GTLRAnalyticsData_MetricMetadata *> *metrics;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
