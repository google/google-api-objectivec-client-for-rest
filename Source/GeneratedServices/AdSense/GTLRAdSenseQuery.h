// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   AdSense Management API (adsense/v1.4)
// Description:
//   Accesses AdSense publishers' inventory and generates performance reports.
// Documentation:
//   https://developers.google.com/adsense/management/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other AdSense query classes.
 */
@interface GTLRAdSenseQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Get Auto ad code for a given ad client.
 *
 *  Method: adsense.accounts.adclients.getAdCode
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsAdclientsGetAdCode : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsAdclientsGetAdCodeWithaccountId:adClientId:]

/** Account which contains the ad client. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Ad client to get the code for. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/**
 *  Fetches a @c GTLRAdSense_AdCode.
 *
 *  Get Auto ad code for a given ad client.
 *
 *  @param accountId Account which contains the ad client.
 *  @param adClientId Ad client to get the code for.
 *
 *  @return GTLRAdSenseQuery_AccountsAdclientsGetAdCode
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                        adClientId:(NSString *)adClientId;

@end

/**
 *  List all ad clients in the specified account.
 *
 *  Method: adsense.accounts.adclients.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsAdclientsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsAdclientsListWithaccountId:]

/** Account for which to list ad clients. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The maximum number of ad clients to include in the response, used for
 *  paging.
 *
 *  @note The documented range is 0..10000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through ad clients. To retrieve the next
 *  page, set this parameter to the value of "nextPageToken" from the previous
 *  response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_AdClients.
 *
 *  List all ad clients in the specified account.
 *
 *  @param accountId Account for which to list ad clients.
 *
 *  @return GTLRAdSenseQuery_AccountsAdclientsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId;

@end

/**
 *  List all custom channels which the specified ad unit belongs to.
 *
 *  Method: adsense.accounts.adunits.customchannels.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsAdunitsCustomchannelsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsAdunitsCustomchannelsListWithaccountId:adClientId:adUnitId:]

/** Account to which the ad client belongs. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Ad client which contains the ad unit. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/** Ad unit for which to list custom channels. */
@property(nonatomic, copy, nullable) NSString *adUnitId;

/**
 *  The maximum number of custom channels to include in the response, used for
 *  paging.
 *
 *  @note The documented range is 0..10000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through custom channels. To retrieve the
 *  next page, set this parameter to the value of "nextPageToken" from the
 *  previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_CustomChannels.
 *
 *  List all custom channels which the specified ad unit belongs to.
 *
 *  @param accountId Account to which the ad client belongs.
 *  @param adClientId Ad client which contains the ad unit.
 *  @param adUnitId Ad unit for which to list custom channels.
 *
 *  @return GTLRAdSenseQuery_AccountsAdunitsCustomchannelsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                        adClientId:(NSString *)adClientId
                          adUnitId:(NSString *)adUnitId;

@end

/**
 *  Gets the specified ad unit in the specified ad client for the specified
 *  account.
 *
 *  Method: adsense.accounts.adunits.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsAdunitsGet : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsAdunitsGetWithaccountId:adClientId:adUnitId:]

/** Account to which the ad client belongs. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Ad client for which to get the ad unit. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/** Ad unit to retrieve. */
@property(nonatomic, copy, nullable) NSString *adUnitId;

/**
 *  Fetches a @c GTLRAdSense_AdUnit.
 *
 *  Gets the specified ad unit in the specified ad client for the specified
 *  account.
 *
 *  @param accountId Account to which the ad client belongs.
 *  @param adClientId Ad client for which to get the ad unit.
 *  @param adUnitId Ad unit to retrieve.
 *
 *  @return GTLRAdSenseQuery_AccountsAdunitsGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                        adClientId:(NSString *)adClientId
                          adUnitId:(NSString *)adUnitId;

@end

/**
 *  Get ad code for the specified ad unit.
 *
 *  Method: adsense.accounts.adunits.getAdCode
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsAdunitsGetAdCode : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsAdunitsGetAdCodeWithaccountId:adClientId:adUnitId:]

/** Account which contains the ad client. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Ad client with contains the ad unit. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/** Ad unit to get the code for. */
@property(nonatomic, copy, nullable) NSString *adUnitId;

/**
 *  Fetches a @c GTLRAdSense_AdCode.
 *
 *  Get ad code for the specified ad unit.
 *
 *  @param accountId Account which contains the ad client.
 *  @param adClientId Ad client with contains the ad unit.
 *  @param adUnitId Ad unit to get the code for.
 *
 *  @return GTLRAdSenseQuery_AccountsAdunitsGetAdCode
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                        adClientId:(NSString *)adClientId
                          adUnitId:(NSString *)adUnitId;

@end

/**
 *  List all ad units in the specified ad client for the specified account.
 *
 *  Method: adsense.accounts.adunits.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsAdunitsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsAdunitsListWithaccountId:adClientId:]

/** Account to which the ad client belongs. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Ad client for which to list ad units. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/** Whether to include inactive ad units. Default: true. */
@property(nonatomic, assign) BOOL includeInactive;

/**
 *  The maximum number of ad units to include in the response, used for paging.
 *
 *  @note The documented range is 0..10000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through ad units. To retrieve the next
 *  page, set this parameter to the value of "nextPageToken" from the previous
 *  response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_AdUnits.
 *
 *  List all ad units in the specified ad client for the specified account.
 *
 *  @param accountId Account to which the ad client belongs.
 *  @param adClientId Ad client for which to list ad units.
 *
 *  @return GTLRAdSenseQuery_AccountsAdunitsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                        adClientId:(NSString *)adClientId;

@end

/**
 *  Dismiss (delete) the specified alert from the specified publisher AdSense
 *  account.
 *
 *  Method: adsense.accounts.alerts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 */
@interface GTLRAdSenseQuery_AccountsAlertsDelete : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsAlertsDeleteWithaccountId:alertId:]

/** Account which contains the ad unit. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Alert to delete. */
@property(nonatomic, copy, nullable) NSString *alertId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Dismiss (delete) the specified alert from the specified publisher AdSense
 *  account.
 *
 *  @param accountId Account which contains the ad unit.
 *  @param alertId Alert to delete.
 *
 *  @return GTLRAdSenseQuery_AccountsAlertsDelete
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                           alertId:(NSString *)alertId;

@end

/**
 *  List the alerts for the specified AdSense account.
 *
 *  Method: adsense.accounts.alerts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsAlertsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsAlertsListWithaccountId:]

/** Account for which to retrieve the alerts. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The locale to use for translating alert messages. The account locale will be
 *  used if this is not supplied. The AdSense default (English) will be used if
 *  the supplied locale is invalid or unsupported.
 */
@property(nonatomic, copy, nullable) NSString *locale;

/**
 *  Fetches a @c GTLRAdSense_Alerts.
 *
 *  List the alerts for the specified AdSense account.
 *
 *  @param accountId Account for which to retrieve the alerts.
 *
 *  @return GTLRAdSenseQuery_AccountsAlertsList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId;

@end

/**
 *  List all ad units in the specified custom channel.
 *
 *  Method: adsense.accounts.customchannels.adunits.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsCustomchannelsAdunitsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsCustomchannelsAdunitsListWithaccountId:adClientId:customChannelId:]

/** Account to which the ad client belongs. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Ad client which contains the custom channel. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/** Custom channel for which to list ad units. */
@property(nonatomic, copy, nullable) NSString *customChannelId;

/** Whether to include inactive ad units. Default: true. */
@property(nonatomic, assign) BOOL includeInactive;

/**
 *  The maximum number of ad units to include in the response, used for paging.
 *
 *  @note The documented range is 0..10000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through ad units. To retrieve the next
 *  page, set this parameter to the value of "nextPageToken" from the previous
 *  response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_AdUnits.
 *
 *  List all ad units in the specified custom channel.
 *
 *  @param accountId Account to which the ad client belongs.
 *  @param adClientId Ad client which contains the custom channel.
 *  @param customChannelId Custom channel for which to list ad units.
 *
 *  @return GTLRAdSenseQuery_AccountsCustomchannelsAdunitsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                        adClientId:(NSString *)adClientId
                   customChannelId:(NSString *)customChannelId;

@end

/**
 *  Get the specified custom channel from the specified ad client for the
 *  specified account.
 *
 *  Method: adsense.accounts.customchannels.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsCustomchannelsGet : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsCustomchannelsGetWithaccountId:adClientId:customChannelId:]

/** Account to which the ad client belongs. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Ad client which contains the custom channel. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/** Custom channel to retrieve. */
@property(nonatomic, copy, nullable) NSString *customChannelId;

/**
 *  Fetches a @c GTLRAdSense_CustomChannel.
 *
 *  Get the specified custom channel from the specified ad client for the
 *  specified account.
 *
 *  @param accountId Account to which the ad client belongs.
 *  @param adClientId Ad client which contains the custom channel.
 *  @param customChannelId Custom channel to retrieve.
 *
 *  @return GTLRAdSenseQuery_AccountsCustomchannelsGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                        adClientId:(NSString *)adClientId
                   customChannelId:(NSString *)customChannelId;

@end

/**
 *  List all custom channels in the specified ad client for the specified
 *  account.
 *
 *  Method: adsense.accounts.customchannels.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsCustomchannelsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsCustomchannelsListWithaccountId:adClientId:]

/** Account to which the ad client belongs. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Ad client for which to list custom channels. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/**
 *  The maximum number of custom channels to include in the response, used for
 *  paging.
 *
 *  @note The documented range is 0..10000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through custom channels. To retrieve the
 *  next page, set this parameter to the value of "nextPageToken" from the
 *  previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_CustomChannels.
 *
 *  List all custom channels in the specified ad client for the specified
 *  account.
 *
 *  @param accountId Account to which the ad client belongs.
 *  @param adClientId Ad client for which to list custom channels.
 *
 *  @return GTLRAdSenseQuery_AccountsCustomchannelsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                        adClientId:(NSString *)adClientId;

@end

/**
 *  Get information about the selected AdSense account.
 *
 *  Method: adsense.accounts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsGet : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsGetWithaccountId:]

/** Account to get information about. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Whether the tree of sub accounts should be returned. */
@property(nonatomic, assign) BOOL tree;

/**
 *  Fetches a @c GTLRAdSense_Account.
 *
 *  Get information about the selected AdSense account.
 *
 *  @param accountId Account to get information about.
 *
 *  @return GTLRAdSenseQuery_AccountsGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId;

@end

/**
 *  List all accounts available to this AdSense account.
 *
 *  Method: adsense.accounts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsList]

/**
 *  The maximum number of accounts to include in the response, used for paging.
 *
 *  @note The documented range is 0..10000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through accounts. To retrieve the next
 *  page, set this parameter to the value of "nextPageToken" from the previous
 *  response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_Accounts.
 *
 *  List all accounts available to this AdSense account.
 *
 *  @return GTLRAdSenseQuery_AccountsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  List the payments for the specified AdSense account.
 *
 *  Method: adsense.accounts.payments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsPaymentsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsPaymentsListWithaccountId:]

/** Account for which to retrieve the payments. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Fetches a @c GTLRAdSense_Payments.
 *
 *  List the payments for the specified AdSense account.
 *
 *  @param accountId Account for which to retrieve the payments.
 *
 *  @return GTLRAdSenseQuery_AccountsPaymentsList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId;

@end

/**
 *  Generate an AdSense report based on the report request sent in the query
 *  parameters. Returns the result as JSON; to retrieve output in CSV format
 *  specify "alt=csv" as a query parameter.
 *
 *  Method: adsense.accounts.reports.generate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsReportsGenerate : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsReportsGenerateWithaccountId:startDate:endDate:]

/** Account upon which to report. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Optional currency to use when reporting on monetary metrics. Defaults to the
 *  account's currency if not set.
 */
@property(nonatomic, copy, nullable) NSString *currency;

/** Dimensions to base the report on. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dimension;

/** End of the date range to report on in "YYYY-MM-DD" format, inclusive. */
@property(nonatomic, copy, nullable) NSString *endDate;

/** Filters to be run on the report. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *filter;

/**
 *  Optional locale to use for translating report output to a local language.
 *  Defaults to "en_US" if not specified.
 */
@property(nonatomic, copy, nullable) NSString *locale;

/**
 *  The maximum number of rows of report data to return.
 *
 *  @note The documented range is 0..50000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Numeric columns to include in the report. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metric;

/**
 *  The name of a dimension or metric to sort the resulting report on,
 *  optionally prefixed with "+" to sort ascending or "-" to sort descending. If
 *  no prefix is specified, the column is sorted ascending.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sort;

/** Start of the date range to report on in "YYYY-MM-DD" format, inclusive. */
@property(nonatomic, copy, nullable) NSString *startDate;

/**
 *  Index of the first row of report data to return.
 *
 *  @note The documented range is 0..5000.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Whether the report should be generated in the AdSense account's local
 *  timezone. If false default PST/PDT timezone will be used.
 */
@property(nonatomic, assign) BOOL useTimezoneReporting;

/**
 *  Fetches a @c GTLRAdSense_AdsenseReportsGenerateResponse.
 *
 *  Generate an AdSense report based on the report request sent in the query
 *  parameters. Returns the result as JSON; to retrieve output in CSV format
 *  specify "alt=csv" as a query parameter.
 *
 *  @param accountId Account upon which to report.
 *  @param startDate Start of the date range to report on in "YYYY-MM-DD"
 *    format, inclusive.
 *  @param endDate End of the date range to report on in "YYYY-MM-DD" format,
 *    inclusive.
 *
 *  @return GTLRAdSenseQuery_AccountsReportsGenerate
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                         startDate:(NSString *)startDate
                           endDate:(NSString *)endDate;

/**
 *  Fetches the requested resource data as a @c GTLRDataObject.
 *
 *  Generate an AdSense report based on the report request sent in the query
 *  parameters. Returns the result as JSON; to retrieve output in CSV format
 *  specify "alt=csv" as a query parameter.
 *
 *  @param accountId Account upon which to report.
 *  @param startDate Start of the date range to report on in "YYYY-MM-DD"
 *    format, inclusive.
 *  @param endDate End of the date range to report on in "YYYY-MM-DD" format,
 *    inclusive.
 *
 *  @return GTLRAdSenseQuery_AccountsReportsGenerate
 */
+ (instancetype)queryForMediaWithAccountId:(NSString *)accountId
                                 startDate:(NSString *)startDate
                                   endDate:(NSString *)endDate;

@end

/**
 *  Generate an AdSense report based on the saved report ID sent in the query
 *  parameters.
 *
 *  Method: adsense.accounts.reports.saved.generate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsReportsSavedGenerate : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsReportsSavedGenerateWithaccountId:savedReportId:]

/** Account to which the saved reports belong. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Optional locale to use for translating report output to a local language.
 *  Defaults to "en_US" if not specified.
 */
@property(nonatomic, copy, nullable) NSString *locale;

/**
 *  The maximum number of rows of report data to return.
 *
 *  @note The documented range is 0..50000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The saved report to retrieve. */
@property(nonatomic, copy, nullable) NSString *savedReportId;

/**
 *  Index of the first row of report data to return.
 *
 *  @note The documented range is 0..5000.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Fetches a @c GTLRAdSense_AdsenseReportsGenerateResponse.
 *
 *  Generate an AdSense report based on the saved report ID sent in the query
 *  parameters.
 *
 *  @param accountId Account to which the saved reports belong.
 *  @param savedReportId The saved report to retrieve.
 *
 *  @return GTLRAdSenseQuery_AccountsReportsSavedGenerate
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     savedReportId:(NSString *)savedReportId;

@end

/**
 *  List all saved reports in the specified AdSense account.
 *
 *  Method: adsense.accounts.reports.saved.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsReportsSavedList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsReportsSavedListWithaccountId:]

/** Account to which the saved reports belong. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The maximum number of saved reports to include in the response, used for
 *  paging.
 *
 *  @note The documented range is 0..100.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through saved reports. To retrieve the
 *  next page, set this parameter to the value of "nextPageToken" from the
 *  previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_SavedReports.
 *
 *  List all saved reports in the specified AdSense account.
 *
 *  @param accountId Account to which the saved reports belong.
 *
 *  @return GTLRAdSenseQuery_AccountsReportsSavedList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId;

@end

/**
 *  List a specific saved ad style for the specified account.
 *
 *  Method: adsense.accounts.savedadstyles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsSavedadstylesGet : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsSavedadstylesGetWithaccountId:savedAdStyleId:]

/** Account for which to get the saved ad style. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Saved ad style to retrieve. */
@property(nonatomic, copy, nullable) NSString *savedAdStyleId;

/**
 *  Fetches a @c GTLRAdSense_SavedAdStyle.
 *
 *  List a specific saved ad style for the specified account.
 *
 *  @param accountId Account for which to get the saved ad style.
 *  @param savedAdStyleId Saved ad style to retrieve.
 *
 *  @return GTLRAdSenseQuery_AccountsSavedadstylesGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                    savedAdStyleId:(NSString *)savedAdStyleId;

@end

/**
 *  List all saved ad styles in the specified account.
 *
 *  Method: adsense.accounts.savedadstyles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsSavedadstylesList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsSavedadstylesListWithaccountId:]

/** Account for which to list saved ad styles. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The maximum number of saved ad styles to include in the response, used for
 *  paging.
 *
 *  @note The documented range is 0..10000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through saved ad styles. To retrieve the
 *  next page, set this parameter to the value of "nextPageToken" from the
 *  previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_SavedAdStyles.
 *
 *  List all saved ad styles in the specified account.
 *
 *  @param accountId Account for which to list saved ad styles.
 *
 *  @return GTLRAdSenseQuery_AccountsSavedadstylesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId;

@end

/**
 *  List all URL channels in the specified ad client for the specified account.
 *
 *  Method: adsense.accounts.urlchannels.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AccountsUrlchannelsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAccountsUrlchannelsListWithaccountId:adClientId:]

/** Account to which the ad client belongs. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Ad client for which to list URL channels. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/**
 *  The maximum number of URL channels to include in the response, used for
 *  paging.
 *
 *  @note The documented range is 0..10000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through URL channels. To retrieve the
 *  next page, set this parameter to the value of "nextPageToken" from the
 *  previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_UrlChannels.
 *
 *  List all URL channels in the specified ad client for the specified account.
 *
 *  @param accountId Account to which the ad client belongs.
 *  @param adClientId Ad client for which to list URL channels.
 *
 *  @return GTLRAdSenseQuery_AccountsUrlchannelsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                        adClientId:(NSString *)adClientId;

@end

/**
 *  List all ad clients in this AdSense account.
 *
 *  Method: adsense.adclients.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AdclientsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAdclientsList]

/**
 *  The maximum number of ad clients to include in the response, used for
 *  paging.
 *
 *  @note The documented range is 0..10000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through ad clients. To retrieve the next
 *  page, set this parameter to the value of "nextPageToken" from the previous
 *  response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_AdClients.
 *
 *  List all ad clients in this AdSense account.
 *
 *  @return GTLRAdSenseQuery_AdclientsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  List all custom channels which the specified ad unit belongs to.
 *
 *  Method: adsense.adunits.customchannels.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AdunitsCustomchannelsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAdunitsCustomchannelsListWithadClientId:adUnitId:]

/** Ad client which contains the ad unit. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/** Ad unit for which to list custom channels. */
@property(nonatomic, copy, nullable) NSString *adUnitId;

/**
 *  The maximum number of custom channels to include in the response, used for
 *  paging.
 *
 *  @note The documented range is 0..10000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through custom channels. To retrieve the
 *  next page, set this parameter to the value of "nextPageToken" from the
 *  previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_CustomChannels.
 *
 *  List all custom channels which the specified ad unit belongs to.
 *
 *  @param adClientId Ad client which contains the ad unit.
 *  @param adUnitId Ad unit for which to list custom channels.
 *
 *  @return GTLRAdSenseQuery_AdunitsCustomchannelsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAdClientId:(NSString *)adClientId
                           adUnitId:(NSString *)adUnitId;

@end

/**
 *  Gets the specified ad unit in the specified ad client.
 *
 *  Method: adsense.adunits.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AdunitsGet : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAdunitsGetWithadClientId:adUnitId:]

/** Ad client for which to get the ad unit. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/** Ad unit to retrieve. */
@property(nonatomic, copy, nullable) NSString *adUnitId;

/**
 *  Fetches a @c GTLRAdSense_AdUnit.
 *
 *  Gets the specified ad unit in the specified ad client.
 *
 *  @param adClientId Ad client for which to get the ad unit.
 *  @param adUnitId Ad unit to retrieve.
 *
 *  @return GTLRAdSenseQuery_AdunitsGet
 */
+ (instancetype)queryWithAdClientId:(NSString *)adClientId
                           adUnitId:(NSString *)adUnitId;

@end

/**
 *  Get ad code for the specified ad unit.
 *
 *  Method: adsense.adunits.getAdCode
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AdunitsGetAdCode : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAdunitsGetAdCodeWithadClientId:adUnitId:]

/** Ad client with contains the ad unit. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/** Ad unit to get the code for. */
@property(nonatomic, copy, nullable) NSString *adUnitId;

/**
 *  Fetches a @c GTLRAdSense_AdCode.
 *
 *  Get ad code for the specified ad unit.
 *
 *  @param adClientId Ad client with contains the ad unit.
 *  @param adUnitId Ad unit to get the code for.
 *
 *  @return GTLRAdSenseQuery_AdunitsGetAdCode
 */
+ (instancetype)queryWithAdClientId:(NSString *)adClientId
                           adUnitId:(NSString *)adUnitId;

@end

/**
 *  List all ad units in the specified ad client for this AdSense account.
 *
 *  Method: adsense.adunits.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AdunitsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAdunitsListWithadClientId:]

/** Ad client for which to list ad units. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/** Whether to include inactive ad units. Default: true. */
@property(nonatomic, assign) BOOL includeInactive;

/**
 *  The maximum number of ad units to include in the response, used for paging.
 *
 *  @note The documented range is 0..10000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through ad units. To retrieve the next
 *  page, set this parameter to the value of "nextPageToken" from the previous
 *  response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_AdUnits.
 *
 *  List all ad units in the specified ad client for this AdSense account.
 *
 *  @param adClientId Ad client for which to list ad units.
 *
 *  @return GTLRAdSenseQuery_AdunitsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAdClientId:(NSString *)adClientId;

@end

/**
 *  Dismiss (delete) the specified alert from the publisher's AdSense account.
 *
 *  Method: adsense.alerts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 */
@interface GTLRAdSenseQuery_AlertsDelete : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAlertsDeleteWithalertId:]

/** Alert to delete. */
@property(nonatomic, copy, nullable) NSString *alertId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Dismiss (delete) the specified alert from the publisher's AdSense account.
 *
 *  @param alertId Alert to delete.
 *
 *  @return GTLRAdSenseQuery_AlertsDelete
 */
+ (instancetype)queryWithAlertId:(NSString *)alertId;

@end

/**
 *  List the alerts for this AdSense account.
 *
 *  Method: adsense.alerts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_AlertsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForAlertsList]

/**
 *  The locale to use for translating alert messages. The account locale will be
 *  used if this is not supplied. The AdSense default (English) will be used if
 *  the supplied locale is invalid or unsupported.
 */
@property(nonatomic, copy, nullable) NSString *locale;

/**
 *  Fetches a @c GTLRAdSense_Alerts.
 *
 *  List the alerts for this AdSense account.
 *
 *  @return GTLRAdSenseQuery_AlertsList
 */
+ (instancetype)query;

@end

/**
 *  List all ad units in the specified custom channel.
 *
 *  Method: adsense.customchannels.adunits.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_CustomchannelsAdunitsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForCustomchannelsAdunitsListWithadClientId:customChannelId:]

/** Ad client which contains the custom channel. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/** Custom channel for which to list ad units. */
@property(nonatomic, copy, nullable) NSString *customChannelId;

/** Whether to include inactive ad units. Default: true. */
@property(nonatomic, assign) BOOL includeInactive;

/**
 *  The maximum number of ad units to include in the response, used for paging.
 *
 *  @note The documented range is 0..10000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through ad units. To retrieve the next
 *  page, set this parameter to the value of "nextPageToken" from the previous
 *  response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_AdUnits.
 *
 *  List all ad units in the specified custom channel.
 *
 *  @param adClientId Ad client which contains the custom channel.
 *  @param customChannelId Custom channel for which to list ad units.
 *
 *  @return GTLRAdSenseQuery_CustomchannelsAdunitsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAdClientId:(NSString *)adClientId
                    customChannelId:(NSString *)customChannelId;

@end

/**
 *  Get the specified custom channel from the specified ad client.
 *
 *  Method: adsense.customchannels.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_CustomchannelsGet : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForCustomchannelsGetWithadClientId:customChannelId:]

/** Ad client which contains the custom channel. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/** Custom channel to retrieve. */
@property(nonatomic, copy, nullable) NSString *customChannelId;

/**
 *  Fetches a @c GTLRAdSense_CustomChannel.
 *
 *  Get the specified custom channel from the specified ad client.
 *
 *  @param adClientId Ad client which contains the custom channel.
 *  @param customChannelId Custom channel to retrieve.
 *
 *  @return GTLRAdSenseQuery_CustomchannelsGet
 */
+ (instancetype)queryWithAdClientId:(NSString *)adClientId
                    customChannelId:(NSString *)customChannelId;

@end

/**
 *  List all custom channels in the specified ad client for this AdSense
 *  account.
 *
 *  Method: adsense.customchannels.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_CustomchannelsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForCustomchannelsListWithadClientId:]

/** Ad client for which to list custom channels. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/**
 *  The maximum number of custom channels to include in the response, used for
 *  paging.
 *
 *  @note The documented range is 0..10000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through custom channels. To retrieve the
 *  next page, set this parameter to the value of "nextPageToken" from the
 *  previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_CustomChannels.
 *
 *  List all custom channels in the specified ad client for this AdSense
 *  account.
 *
 *  @param adClientId Ad client for which to list custom channels.
 *
 *  @return GTLRAdSenseQuery_CustomchannelsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAdClientId:(NSString *)adClientId;

@end

/**
 *  List the metadata for the dimensions available to this AdSense account.
 *
 *  Method: adsense.metadata.dimensions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_MetadataDimensionsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForMetadataDimensionsList]

/**
 *  Fetches a @c GTLRAdSense_Metadata.
 *
 *  List the metadata for the dimensions available to this AdSense account.
 *
 *  @return GTLRAdSenseQuery_MetadataDimensionsList
 */
+ (instancetype)query;

@end

/**
 *  List the metadata for the metrics available to this AdSense account.
 *
 *  Method: adsense.metadata.metrics.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_MetadataMetricsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForMetadataMetricsList]

/**
 *  Fetches a @c GTLRAdSense_Metadata.
 *
 *  List the metadata for the metrics available to this AdSense account.
 *
 *  @return GTLRAdSenseQuery_MetadataMetricsList
 */
+ (instancetype)query;

@end

/**
 *  List the payments for this AdSense account.
 *
 *  Method: adsense.payments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_PaymentsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForPaymentsList]

/**
 *  Fetches a @c GTLRAdSense_Payments.
 *
 *  List the payments for this AdSense account.
 *
 *  @return GTLRAdSenseQuery_PaymentsList
 */
+ (instancetype)query;

@end

/**
 *  Generate an AdSense report based on the report request sent in the query
 *  parameters. Returns the result as JSON; to retrieve output in CSV format
 *  specify "alt=csv" as a query parameter.
 *
 *  Method: adsense.reports.generate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_ReportsGenerate : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForReportsGenerateWithstartDate:endDate:]

/** Accounts upon which to report. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *accountId;

/**
 *  Optional currency to use when reporting on monetary metrics. Defaults to the
 *  account's currency if not set.
 */
@property(nonatomic, copy, nullable) NSString *currency;

/** Dimensions to base the report on. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dimension;

/** End of the date range to report on in "YYYY-MM-DD" format, inclusive. */
@property(nonatomic, copy, nullable) NSString *endDate;

/** Filters to be run on the report. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *filter;

/**
 *  Optional locale to use for translating report output to a local language.
 *  Defaults to "en_US" if not specified.
 */
@property(nonatomic, copy, nullable) NSString *locale;

/**
 *  The maximum number of rows of report data to return.
 *
 *  @note The documented range is 0..50000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Numeric columns to include in the report. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metric;

/**
 *  The name of a dimension or metric to sort the resulting report on,
 *  optionally prefixed with "+" to sort ascending or "-" to sort descending. If
 *  no prefix is specified, the column is sorted ascending.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sort;

/** Start of the date range to report on in "YYYY-MM-DD" format, inclusive. */
@property(nonatomic, copy, nullable) NSString *startDate;

/**
 *  Index of the first row of report data to return.
 *
 *  @note The documented range is 0..5000.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Whether the report should be generated in the AdSense account's local
 *  timezone. If false default PST/PDT timezone will be used.
 */
@property(nonatomic, assign) BOOL useTimezoneReporting;

/**
 *  Fetches a @c GTLRAdSense_AdsenseReportsGenerateResponse.
 *
 *  Generate an AdSense report based on the report request sent in the query
 *  parameters. Returns the result as JSON; to retrieve output in CSV format
 *  specify "alt=csv" as a query parameter.
 *
 *  @param startDate Start of the date range to report on in "YYYY-MM-DD"
 *    format, inclusive.
 *  @param endDate End of the date range to report on in "YYYY-MM-DD" format,
 *    inclusive.
 *
 *  @return GTLRAdSenseQuery_ReportsGenerate
 */
+ (instancetype)queryWithStartDate:(NSString *)startDate
                           endDate:(NSString *)endDate;

/**
 *  Fetches the requested resource data as a @c GTLRDataObject.
 *
 *  Generate an AdSense report based on the report request sent in the query
 *  parameters. Returns the result as JSON; to retrieve output in CSV format
 *  specify "alt=csv" as a query parameter.
 *
 *  @param startDate Start of the date range to report on in "YYYY-MM-DD"
 *    format, inclusive.
 *  @param endDate End of the date range to report on in "YYYY-MM-DD" format,
 *    inclusive.
 *
 *  @return GTLRAdSenseQuery_ReportsGenerate
 */
+ (instancetype)queryForMediaWithStartDate:(NSString *)startDate
                                   endDate:(NSString *)endDate;

@end

/**
 *  Generate an AdSense report based on the saved report ID sent in the query
 *  parameters.
 *
 *  Method: adsense.reports.saved.generate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_ReportsSavedGenerate : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForReportsSavedGenerateWithsavedReportId:]

/**
 *  Optional locale to use for translating report output to a local language.
 *  Defaults to "en_US" if not specified.
 */
@property(nonatomic, copy, nullable) NSString *locale;

/**
 *  The maximum number of rows of report data to return.
 *
 *  @note The documented range is 0..50000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The saved report to retrieve. */
@property(nonatomic, copy, nullable) NSString *savedReportId;

/**
 *  Index of the first row of report data to return.
 *
 *  @note The documented range is 0..5000.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Fetches a @c GTLRAdSense_AdsenseReportsGenerateResponse.
 *
 *  Generate an AdSense report based on the saved report ID sent in the query
 *  parameters.
 *
 *  @param savedReportId The saved report to retrieve.
 *
 *  @return GTLRAdSenseQuery_ReportsSavedGenerate
 */
+ (instancetype)queryWithSavedReportId:(NSString *)savedReportId;

@end

/**
 *  List all saved reports in this AdSense account.
 *
 *  Method: adsense.reports.saved.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_ReportsSavedList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForReportsSavedList]

/**
 *  The maximum number of saved reports to include in the response, used for
 *  paging.
 *
 *  @note The documented range is 0..100.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through saved reports. To retrieve the
 *  next page, set this parameter to the value of "nextPageToken" from the
 *  previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_SavedReports.
 *
 *  List all saved reports in this AdSense account.
 *
 *  @return GTLRAdSenseQuery_ReportsSavedList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Get a specific saved ad style from the user's account.
 *
 *  Method: adsense.savedadstyles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_SavedadstylesGet : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForSavedadstylesGetWithsavedAdStyleId:]

/** Saved ad style to retrieve. */
@property(nonatomic, copy, nullable) NSString *savedAdStyleId;

/**
 *  Fetches a @c GTLRAdSense_SavedAdStyle.
 *
 *  Get a specific saved ad style from the user's account.
 *
 *  @param savedAdStyleId Saved ad style to retrieve.
 *
 *  @return GTLRAdSenseQuery_SavedadstylesGet
 */
+ (instancetype)queryWithSavedAdStyleId:(NSString *)savedAdStyleId;

@end

/**
 *  List all saved ad styles in the user's account.
 *
 *  Method: adsense.savedadstyles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_SavedadstylesList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForSavedadstylesList]

/**
 *  The maximum number of saved ad styles to include in the response, used for
 *  paging.
 *
 *  @note The documented range is 0..10000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through saved ad styles. To retrieve the
 *  next page, set this parameter to the value of "nextPageToken" from the
 *  previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_SavedAdStyles.
 *
 *  List all saved ad styles in the user's account.
 *
 *  @return GTLRAdSenseQuery_SavedadstylesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  List all URL channels in the specified ad client for this AdSense account.
 *
 *  Method: adsense.urlchannels.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdSense
 *    @c kGTLRAuthScopeAdSenseReadonly
 */
@interface GTLRAdSenseQuery_UrlchannelsList : GTLRAdSenseQuery
// Previous library name was
//   +[GTLQueryAdSense queryForUrlchannelsListWithadClientId:]

/** Ad client for which to list URL channels. */
@property(nonatomic, copy, nullable) NSString *adClientId;

/**
 *  The maximum number of URL channels to include in the response, used for
 *  paging.
 *
 *  @note The documented range is 0..10000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A continuation token, used to page through URL channels. To retrieve the
 *  next page, set this parameter to the value of "nextPageToken" from the
 *  previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdSense_UrlChannels.
 *
 *  List all URL channels in the specified ad client for this AdSense account.
 *
 *  @param adClientId Ad client for which to list URL channels.
 *
 *  @return GTLRAdSenseQuery_UrlchannelsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAdClientId:(NSString *)adClientId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
