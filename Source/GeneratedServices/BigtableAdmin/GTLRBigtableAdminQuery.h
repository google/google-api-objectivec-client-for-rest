// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Bigtable Admin API (bigtableadmin/v2)
// Documentation:
//   https://cloud.google.com/bigtable/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRBigtableAdmin_AppProfile;
@class GTLRBigtableAdmin_CheckConsistencyRequest;
@class GTLRBigtableAdmin_Cluster;
@class GTLRBigtableAdmin_CreateInstanceRequest;
@class GTLRBigtableAdmin_CreateTableRequest;
@class GTLRBigtableAdmin_DropRowRangeRequest;
@class GTLRBigtableAdmin_GenerateConsistencyTokenRequest;
@class GTLRBigtableAdmin_GetIamPolicyRequest;
@class GTLRBigtableAdmin_Instance;
@class GTLRBigtableAdmin_ModifyColumnFamiliesRequest;
@class GTLRBigtableAdmin_SetIamPolicyRequest;
@class GTLRBigtableAdmin_TestIamPermissionsRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// view

/** Value: "FULL" */
GTLR_EXTERN NSString * const kGTLRBigtableAdminViewFull;
/** Value: "NAME_ONLY" */
GTLR_EXTERN NSString * const kGTLRBigtableAdminViewNameOnly;
/** Value: "REPLICATION_VIEW" */
GTLR_EXTERN NSString * const kGTLRBigtableAdminViewReplicationView;
/** Value: "SCHEMA_VIEW" */
GTLR_EXTERN NSString * const kGTLRBigtableAdminViewSchemaView;
/** Value: "VIEW_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRBigtableAdminViewViewUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Bigtable Admin query classes.
 */
@interface GTLRBigtableAdminQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not
 *  guaranteed. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use
 *  Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation,
 *  the operation is not deleted; instead, it becomes an operation with
 *  an Operation.error value with a google.rpc.Status.code of 1,
 *  corresponding to `Code.CANCELLED`.
 *
 *  Method: bigtableadmin.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_OperationsCancel : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForOperationsCancelWithname:]

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not
 *  guaranteed. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use
 *  Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation,
 *  the operation is not deleted; instead, it becomes an operation with
 *  an Operation.error value with a google.rpc.Status.code of 1,
 *  corresponding to `Code.CANCELLED`.
 *
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRBigtableAdminQuery_OperationsCancel
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: bigtableadmin.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_OperationsDelete : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForOperationsDeleteWithname:]

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRBigtableAdminQuery_OperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: bigtableadmin.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_OperationsGet : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRBigtableAdminQuery_OperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *  NOTE: the `name` binding allows API services to override the binding
 *  to use different resource name schemes, such as `users/ * /operations`. To
 *  override the binding, API services can add a binding such as
 *  `"/v1/{name=users/ *}/operations"` to their service configuration.
 *  For backwards compatibility, the default name includes the operations
 *  collection id, however overriding users must ensure the name binding
 *  is the parent resource, without the operations collection id.
 *
 *  Method: bigtableadmin.operations.projects.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_OperationsProjectsOperationsList : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForOperationsProjectsOperationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRBigtableAdmin_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *  NOTE: the `name` binding allows API services to override the binding
 *  to use different resource name schemes, such as `users/ * /operations`. To
 *  override the binding, API services can add a binding such as
 *  `"/v1/{name=users/ *}/operations"` to their service configuration.
 *  For backwards compatibility, the default name includes the operations
 *  collection id, however overriding users must ensure the name binding
 *  is the parent resource, without the operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRBigtableAdminQuery_OperationsProjectsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates an app profile within an instance.
 *
 *  Method: bigtableadmin.projects.instances.appProfiles.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesCreate : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesAppProfilesCreateWithObject:parent:]

/**
 *  The ID to be used when referring to the new app profile within its
 *  instance, e.g., just `myprofile` rather than
 *  `projects/myproject/instances/myinstance/appProfiles/myprofile`.
 */
@property(nonatomic, copy, nullable) NSString *appProfileId;

/** If true, ignore safety checks when creating the app profile. */
@property(nonatomic, assign) BOOL ignoreWarnings;

/**
 *  The unique name of the instance in which to create the new app profile.
 *  Values are of the form
 *  `projects/<project>/instances/<instance>`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_AppProfile.
 *
 *  Creates an app profile within an instance.
 *
 *  @param object The @c GTLRBigtableAdmin_AppProfile to include in the query.
 *  @param parent The unique name of the instance in which to create the new app
 *    profile.
 *    Values are of the form
 *    `projects/<project>/instances/<instance>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesCreate
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_AppProfile *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an app profile from an instance.
 *
 *  Method: bigtableadmin.projects.instances.appProfiles.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesDelete : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesAppProfilesDeleteWithname:]

/** If true, ignore safety checks when deleting the app profile. */
@property(nonatomic, assign) BOOL ignoreWarnings;

/**
 *  The unique name of the app profile to be deleted. Values are of the form
 *  `projects/<project>/instances/<instance>/appProfiles/<app_profile>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Empty.
 *
 *  Deletes an app profile from an instance.
 *
 *  @param name The unique name of the app profile to be deleted. Values are of
 *    the form
 *    `projects/<project>/instances/<instance>/appProfiles/<app_profile>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets information about an app profile.
 *
 *  Method: bigtableadmin.projects.instances.appProfiles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesGet : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesAppProfilesGetWithname:]

/**
 *  The unique name of the requested app profile. Values are of the form
 *  `projects/<project>/instances/<instance>/appProfiles/<app_profile>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_AppProfile.
 *
 *  Gets information about an app profile.
 *
 *  @param name The unique name of the requested app profile. Values are of the
 *    form
 *    `projects/<project>/instances/<instance>/appProfiles/<app_profile>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about app profiles in an instance.
 *
 *  Method: bigtableadmin.projects.instances.appProfiles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesList : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesAppProfilesListWithparent:]

/**
 *  Maximum number of results per page.
 *  CURRENTLY UNIMPLEMENTED AND IGNORED.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The value of `next_page_token` returned by a previous call. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The unique name of the instance for which a list of app profiles is
 *  requested. Values are of the form
 *  `projects/<project>/instances/<instance>`.
 *  Use `<instance> = '-'` to list AppProfiles for all Instances in a project,
 *  e.g., `projects/myproject/instances/-`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_ListAppProfilesResponse.
 *
 *  Lists information about app profiles in an instance.
 *
 *  @param parent The unique name of the instance for which a list of app
 *    profiles is
 *    requested. Values are of the form
 *    `projects/<project>/instances/<instance>`.
 *    Use `<instance> = '-'` to list AppProfiles for all Instances in a project,
 *    e.g., `projects/myproject/instances/-`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an app profile within an instance.
 *
 *  Method: bigtableadmin.projects.instances.appProfiles.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesPatch : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesAppProfilesPatchWithObject:name:]

/** If true, ignore safety checks when updating the app profile. */
@property(nonatomic, assign) BOOL ignoreWarnings;

/**
 *  (`OutputOnly`)
 *  The unique name of the app profile. Values are of the form
 *  `projects/<project>/instances/<instance>/appProfiles/_a-zA-Z0-9*`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The subset of app profile fields which should be replaced.
 *  If unset, all fields will be replaced.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Updates an app profile within an instance.
 *
 *  @param object The @c GTLRBigtableAdmin_AppProfile to include in the query.
 *  @param name (`OutputOnly`)
 *    The unique name of the app profile. Values are of the form
 *    `projects/<project>/instances/<instance>/appProfiles/_a-zA-Z0-9*`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesPatch
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_AppProfile *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a cluster within an instance.
 *
 *  Method: bigtableadmin.projects.instances.clusters.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersCreate : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesClustersCreateWithObject:parent:]

/**
 *  The ID to be used when referring to the new cluster within its instance,
 *  e.g., just `mycluster` rather than
 *  `projects/myproject/instances/myinstance/clusters/mycluster`.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  The unique name of the instance in which to create the new cluster.
 *  Values are of the form
 *  `projects/<project>/instances/<instance>`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Creates a cluster within an instance.
 *
 *  @param object The @c GTLRBigtableAdmin_Cluster to include in the query.
 *  @param parent The unique name of the instance in which to create the new
 *    cluster.
 *    Values are of the form
 *    `projects/<project>/instances/<instance>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersCreate
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_Cluster *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a cluster from an instance.
 *
 *  Method: bigtableadmin.projects.instances.clusters.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersDelete : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesClustersDeleteWithname:]

/**
 *  The unique name of the cluster to be deleted. Values are of the form
 *  `projects/<project>/instances/<instance>/clusters/<cluster>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Empty.
 *
 *  Deletes a cluster from an instance.
 *
 *  @param name The unique name of the cluster to be deleted. Values are of the
 *    form
 *    `projects/<project>/instances/<instance>/clusters/<cluster>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets information about a cluster.
 *
 *  Method: bigtableadmin.projects.instances.clusters.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersGet : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesClustersGetWithname:]

/**
 *  The unique name of the requested cluster. Values are of the form
 *  `projects/<project>/instances/<instance>/clusters/<cluster>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Cluster.
 *
 *  Gets information about a cluster.
 *
 *  @param name The unique name of the requested cluster. Values are of the form
 *    `projects/<project>/instances/<instance>/clusters/<cluster>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about clusters in an instance.
 *
 *  Method: bigtableadmin.projects.instances.clusters.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersList : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesClustersListWithparent:]

/** DEPRECATED: This field is unused and ignored. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The unique name of the instance for which a list of clusters is requested.
 *  Values are of the form `projects/<project>/instances/<instance>`.
 *  Use `<instance> = '-'` to list Clusters for all Instances in a project,
 *  e.g., `projects/myproject/instances/-`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_ListClustersResponse.
 *
 *  Lists information about clusters in an instance.
 *
 *  @param parent The unique name of the instance for which a list of clusters
 *    is requested.
 *    Values are of the form `projects/<project>/instances/<instance>`.
 *    Use `<instance> = '-'` to list Clusters for all Instances in a project,
 *    e.g., `projects/myproject/instances/-`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a cluster within an instance.
 *
 *  Method: bigtableadmin.projects.instances.clusters.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersUpdate : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesClustersUpdateWithObject:name:]

/**
 *  (`OutputOnly`)
 *  The unique name of the cluster. Values are of the form
 *  `projects/<project>/instances/<instance>/clusters/a-z*`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Updates a cluster within an instance.
 *
 *  @param object The @c GTLRBigtableAdmin_Cluster to include in the query.
 *  @param name (`OutputOnly`)
 *    The unique name of the cluster. Values are of the form
 *    `projects/<project>/instances/<instance>/clusters/a-z*`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersUpdate
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_Cluster *)object
                           name:(NSString *)name;

@end

/**
 *  Create an instance within a project.
 *
 *  Method: bigtableadmin.projects.instances.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesCreate : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesCreateWithObject:parent:]

/**
 *  The unique name of the project in which to create the new instance.
 *  Values are of the form `projects/<project>`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Create an instance within a project.
 *
 *  @param object The @c GTLRBigtableAdmin_CreateInstanceRequest to include in
 *    the query.
 *  @param parent The unique name of the project in which to create the new
 *    instance.
 *    Values are of the form `projects/<project>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesCreate
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_CreateInstanceRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete an instance from a project.
 *
 *  Method: bigtableadmin.projects.instances.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesDelete : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesDeleteWithname:]

/**
 *  The unique name of the instance to be deleted.
 *  Values are of the form `projects/<project>/instances/<instance>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Empty.
 *
 *  Delete an instance from a project.
 *
 *  @param name The unique name of the instance to be deleted.
 *    Values are of the form `projects/<project>/instances/<instance>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets information about an instance.
 *
 *  Method: bigtableadmin.projects.instances.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesGet : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesGetWithname:]

/**
 *  The unique name of the requested instance. Values are of the form
 *  `projects/<project>/instances/<instance>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Instance.
 *
 *  Gets information about an instance.
 *
 *  @param name The unique name of the requested instance. Values are of the
 *    form
 *    `projects/<project>/instances/<instance>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for an instance resource. Returns an empty
 *  policy if an instance exists but does not have a policy set.
 *
 *  Method: bigtableadmin.projects.instances.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesGetIamPolicy : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesGetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBigtableAdmin_Policy.
 *
 *  Gets the access control policy for an instance resource. Returns an empty
 *  policy if an instance exists but does not have a policy set.
 *
 *  @param object The @c GTLRBigtableAdmin_GetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists information about instances in a project.
 *
 *  Method: bigtableadmin.projects.instances.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesList : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesListWithparent:]

/** DEPRECATED: This field is unused and ignored. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The unique name of the project for which a list of instances is requested.
 *  Values are of the form `projects/<project>`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_ListInstancesResponse.
 *
 *  Lists information about instances in a project.
 *
 *  @param parent The unique name of the project for which a list of instances
 *    is requested.
 *    Values are of the form `projects/<project>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Partially updates an instance within a project. This method can modify all
 *  fields of an Instance and is the preferred way to update an Instance.
 *
 *  Method: bigtableadmin.projects.instances.partialUpdateInstance
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesPartialUpdateInstance : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesPartialUpdateInstanceWithObject:name:]

/**
 *  (`OutputOnly`)
 *  The unique name of the instance. Values are of the form
 *  `projects/<project>/instances/a-z+[a-z0-9]`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The subset of Instance fields which should be replaced.
 *  Must be explicitly set.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Partially updates an instance within a project. This method can modify all
 *  fields of an Instance and is the preferred way to update an Instance.
 *
 *  @param object The @c GTLRBigtableAdmin_Instance to include in the query.
 *  @param name (`OutputOnly`)
 *    The unique name of the instance. Values are of the form
 *    `projects/<project>/instances/a-z+[a-z0-9]`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesPartialUpdateInstance
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_Instance *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on an instance resource. Replaces any
 *  existing policy.
 *
 *  Method: bigtableadmin.projects.instances.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesSetIamPolicy : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBigtableAdmin_Policy.
 *
 *  Sets the access control policy on an instance resource. Replaces any
 *  existing policy.
 *
 *  @param object The @c GTLRBigtableAdmin_SetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Checks replication consistency based on a consistency token, that is, if
 *  replication has caught up based on the conditions specified in the token
 *  and the check request.
 *
 *  Method: bigtableadmin.projects.instances.tables.checkConsistency
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesCheckConsistency : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesTablesCheckConsistencyWithObject:name:]

/**
 *  The unique name of the Table for which to check replication consistency.
 *  Values are of the form
 *  `projects/<project>/instances/<instance>/tables/<table>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_CheckConsistencyResponse.
 *
 *  Checks replication consistency based on a consistency token, that is, if
 *  replication has caught up based on the conditions specified in the token
 *  and the check request.
 *
 *  @param object The @c GTLRBigtableAdmin_CheckConsistencyRequest to include in
 *    the query.
 *  @param name The unique name of the Table for which to check replication
 *    consistency.
 *    Values are of the form
 *    `projects/<project>/instances/<instance>/tables/<table>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesCheckConsistency
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_CheckConsistencyRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new table in the specified instance.
 *  The table can be created with a full set of initial column families,
 *  specified in the request.
 *
 *  Method: bigtableadmin.projects.instances.tables.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesCreate : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesTablesCreateWithObject:parent:]

/**
 *  The unique name of the instance in which to create the table.
 *  Values are of the form `projects/<project>/instances/<instance>`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_Table.
 *
 *  Creates a new table in the specified instance.
 *  The table can be created with a full set of initial column families,
 *  specified in the request.
 *
 *  @param object The @c GTLRBigtableAdmin_CreateTableRequest to include in the
 *    query.
 *  @param parent The unique name of the instance in which to create the table.
 *    Values are of the form `projects/<project>/instances/<instance>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesCreate
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_CreateTableRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Permanently deletes a specified table and all of its data.
 *
 *  Method: bigtableadmin.projects.instances.tables.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesDelete : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesTablesDeleteWithname:]

/**
 *  The unique name of the table to be deleted.
 *  Values are of the form
 *  `projects/<project>/instances/<instance>/tables/<table>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Empty.
 *
 *  Permanently deletes a specified table and all of its data.
 *
 *  @param name The unique name of the table to be deleted.
 *    Values are of the form
 *    `projects/<project>/instances/<instance>/tables/<table>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Permanently drop/delete a row range from a specified table. The request can
 *  specify whether to delete all rows in a table, or only those that match a
 *  particular prefix.
 *
 *  Method: bigtableadmin.projects.instances.tables.dropRowRange
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesDropRowRange : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesTablesDropRowRangeWithObject:name:]

/**
 *  The unique name of the table on which to drop a range of rows.
 *  Values are of the form
 *  `projects/<project>/instances/<instance>/tables/<table>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Empty.
 *
 *  Permanently drop/delete a row range from a specified table. The request can
 *  specify whether to delete all rows in a table, or only those that match a
 *  particular prefix.
 *
 *  @param object The @c GTLRBigtableAdmin_DropRowRangeRequest to include in the
 *    query.
 *  @param name The unique name of the table on which to drop a range of rows.
 *    Values are of the form
 *    `projects/<project>/instances/<instance>/tables/<table>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesDropRowRange
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_DropRowRangeRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Generates a consistency token for a Table, which can be used in
 *  CheckConsistency to check whether mutations to the table that finished
 *  before this call started have been replicated. The tokens will be available
 *  for 90 days.
 *
 *  Method: bigtableadmin.projects.instances.tables.generateConsistencyToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesGenerateConsistencyToken : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesTablesGenerateConsistencyTokenWithObject:name:]

/**
 *  The unique name of the Table for which to create a consistency token.
 *  Values are of the form
 *  `projects/<project>/instances/<instance>/tables/<table>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_GenerateConsistencyTokenResponse.
 *
 *  Generates a consistency token for a Table, which can be used in
 *  CheckConsistency to check whether mutations to the table that finished
 *  before this call started have been replicated. The tokens will be available
 *  for 90 days.
 *
 *  @param object The @c GTLRBigtableAdmin_GenerateConsistencyTokenRequest to
 *    include in the query.
 *  @param name The unique name of the Table for which to create a consistency
 *    token.
 *    Values are of the form
 *    `projects/<project>/instances/<instance>/tables/<table>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesGenerateConsistencyToken
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_GenerateConsistencyTokenRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets metadata information about the specified table.
 *
 *  Method: bigtableadmin.projects.instances.tables.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesGet : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesTablesGetWithname:]

/**
 *  The unique name of the requested table.
 *  Values are of the form
 *  `projects/<project>/instances/<instance>/tables/<table>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The view to be applied to the returned table's fields.
 *  Defaults to `SCHEMA_VIEW` if unspecified.
 *
 *  Likely values:
 *    @arg @c kGTLRBigtableAdminViewViewUnspecified Value "VIEW_UNSPECIFIED"
 *    @arg @c kGTLRBigtableAdminViewNameOnly Value "NAME_ONLY"
 *    @arg @c kGTLRBigtableAdminViewSchemaView Value "SCHEMA_VIEW"
 *    @arg @c kGTLRBigtableAdminViewReplicationView Value "REPLICATION_VIEW"
 *    @arg @c kGTLRBigtableAdminViewFull Value "FULL"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBigtableAdmin_Table.
 *
 *  Gets metadata information about the specified table.
 *
 *  @param name The unique name of the requested table.
 *    Values are of the form
 *    `projects/<project>/instances/<instance>/tables/<table>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all tables served from a specified instance.
 *
 *  Method: bigtableadmin.projects.instances.tables.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesList : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesTablesListWithparent:]

/**
 *  Maximum number of results per page.
 *  CURRENTLY UNIMPLEMENTED AND IGNORED.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The value of `next_page_token` returned by a previous call. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The unique name of the instance for which tables should be listed.
 *  Values are of the form `projects/<project>/instances/<instance>`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The view to be applied to the returned tables' fields.
 *  Defaults to `NAME_ONLY` if unspecified; no others are currently supported.
 *
 *  Likely values:
 *    @arg @c kGTLRBigtableAdminViewViewUnspecified Value "VIEW_UNSPECIFIED"
 *    @arg @c kGTLRBigtableAdminViewNameOnly Value "NAME_ONLY"
 *    @arg @c kGTLRBigtableAdminViewSchemaView Value "SCHEMA_VIEW"
 *    @arg @c kGTLRBigtableAdminViewReplicationView Value "REPLICATION_VIEW"
 *    @arg @c kGTLRBigtableAdminViewFull Value "FULL"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBigtableAdmin_ListTablesResponse.
 *
 *  Lists all tables served from a specified instance.
 *
 *  @param parent The unique name of the instance for which tables should be
 *    listed.
 *    Values are of the form `projects/<project>/instances/<instance>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Performs a series of column family modifications on the specified table.
 *  Either all or none of the modifications will occur before this method
 *  returns, but data requests received prior to that point may see a table
 *  where only some modifications have taken effect.
 *
 *  Method: bigtableadmin.projects.instances.tables.modifyColumnFamilies
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesModifyColumnFamilies : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesTablesModifyColumnFamiliesWithObject:name:]

/**
 *  The unique name of the table whose families should be modified.
 *  Values are of the form
 *  `projects/<project>/instances/<instance>/tables/<table>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Table.
 *
 *  Performs a series of column family modifications on the specified table.
 *  Either all or none of the modifications will occur before this method
 *  returns, but data requests received prior to that point may see a table
 *  where only some modifications have taken effect.
 *
 *  @param object The @c GTLRBigtableAdmin_ModifyColumnFamiliesRequest to
 *    include in the query.
 *  @param name The unique name of the table whose families should be modified.
 *    Values are of the form
 *    `projects/<project>/instances/<instance>/tables/<table>`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesModifyColumnFamilies
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_ModifyColumnFamiliesRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Returns permissions that the caller has on the specified instance resource.
 *
 *  Method: bigtableadmin.projects.instances.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTestIamPermissions : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBigtableAdmin_TestIamPermissionsResponse.
 *
 *  Returns permissions that the caller has on the specified instance resource.
 *
 *  @param object The @c GTLRBigtableAdmin_TestIamPermissionsRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Updates an instance within a project. This method updates only the display
 *  name and type for an Instance. To update other Instance properties, such as
 *  labels, use PartialUpdateInstance.
 *
 *  Method: bigtableadmin.projects.instances.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesUpdate : GTLRBigtableAdminQuery
// Previous library name was
//   +[GTLQueryBigtableAdmin queryForProjectsInstancesUpdateWithObject:name:]

/**
 *  (`OutputOnly`)
 *  The unique name of the instance. Values are of the form
 *  `projects/<project>/instances/a-z+[a-z0-9]`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Instance.
 *
 *  Updates an instance within a project. This method updates only the display
 *  name and type for an Instance. To update other Instance properties, such as
 *  labels, use PartialUpdateInstance.
 *
 *  @param object The @c GTLRBigtableAdmin_Instance to include in the query.
 *  @param name (`OutputOnly`)
 *    The unique name of the instance. Values are of the form
 *    `projects/<project>/instances/a-z+[a-z0-9]`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesUpdate
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_Instance *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
