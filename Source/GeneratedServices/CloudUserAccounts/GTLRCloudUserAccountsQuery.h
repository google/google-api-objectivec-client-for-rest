// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud User Accounts API (clouduseraccounts/vm_alpha)
// Description:
//   Creates and manages users and groups for accessing Google Compute Engine
//   virtual machines.
// Documentation:
//   https://cloud.google.com/compute/docs/access/user-accounts/api/latest/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudUserAccounts_Group;
@class GTLRCloudUserAccounts_GroupsAddMemberRequest;
@class GTLRCloudUserAccounts_GroupsRemoveMemberRequest;
@class GTLRCloudUserAccounts_Policy;
@class GTLRCloudUserAccounts_PublicKey;
@class GTLRCloudUserAccounts_TestPermissionsRequest;
@class GTLRCloudUserAccounts_User;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Cloud User Accounts query classes.
 */
@interface GTLRCloudUserAccountsQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Deletes the specified operation resource.
 *
 *  Method: clouduseraccounts.globalAccountsOperations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 */
@interface GTLRCloudUserAccountsQuery_GlobalAccountsOperationsDelete : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForGlobalAccountsOperationsDeleteWithproject:operation:]

/** Name of the Operations resource to delete. */
@property(nonatomic, copy, nullable) NSString *operation;

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes the specified operation resource.
 *
 *  @param project Project ID for this request.
 *  @param operation Name of the Operations resource to delete.
 *
 *  @returns GTLRCloudUserAccountsQuery_GlobalAccountsOperationsDelete
 */
+ (instancetype)queryWithProject:(NSString *)project
                       operation:(NSString *)operation;

@end

/**
 *  Retrieves the specified operation resource.
 *
 *  Method: clouduseraccounts.globalAccountsOperations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatformReadOnly
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccountsReadonly
 */
@interface GTLRCloudUserAccountsQuery_GlobalAccountsOperationsGet : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForGlobalAccountsOperationsGetWithproject:operation:]

/** Name of the Operations resource to return. */
@property(nonatomic, copy, nullable) NSString *operation;

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRCloudUserAccounts_Operation.
 *
 *  Retrieves the specified operation resource.
 *
 *  @param project Project ID for this request.
 *  @param operation Name of the Operations resource to return.
 *
 *  @returns GTLRCloudUserAccountsQuery_GlobalAccountsOperationsGet
 */
+ (instancetype)queryWithProject:(NSString *)project
                       operation:(NSString *)operation;

@end

/**
 *  Retrieves the list of operation resources contained within the specified
 *  project.
 *
 *  Method: clouduseraccounts.globalAccountsOperations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatformReadOnly
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccountsReadonly
 */
@interface GTLRCloudUserAccountsQuery_GlobalAccountsOperationsList : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForGlobalAccountsOperationsListWithproject:]

/**
 *  Sets a filter expression for filtering listed resources, in the form
 *  filter={expression}. Your {expression} must be in the format: field_name
 *  comparison_string literal_string.
 *  The field_name is the name of the field you want to compare. Only atomic
 *  field types are supported (string, number, boolean). The comparison_string
 *  must be either eq (equals) or ne (not equals). The literal_string is the
 *  string value to filter to. The literal value must be valid for the type of
 *  field you are filtering by (string, number, boolean). For string fields, the
 *  literal value is interpreted as a regular expression using RE2 syntax. The
 *  literal value must match the entire field.
 *  For example, to filter for instances that do not have a name of
 *  example-instance, you would use filter=name ne example-instance.
 *  Compute Engine Beta API Only: If you use filtering in the Beta API, you can
 *  also filter on nested fields. For example, you could filter on instances
 *  that have set the scheduling.automaticRestart field to true. In particular,
 *  use filtering on nested fields to take advantage of instance labels to
 *  organize and filter results based on label values.
 *  The Beta API also supports filtering on multiple expressions by providing
 *  each separate expression within parentheses. For example,
 *  (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple
 *  expressions are treated as AND expressions, meaning that resources must
 *  match all expressions to pass the filters.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The maximum number of results per page that should be returned. If the
 *  number of available results is larger than maxResults, Compute Engine
 *  returns a nextPageToken that can be used to get the next page of results in
 *  subsequent list requests.
 *
 *  @note If not set, the documented server-side default will be 500 (from the
 *        range 0..500).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Sorts list results by a certain order. By default, results are returned in
 *  alphanumerical order based on the resource name.
 *  You can also sort results in descending order based on the creation
 *  timestamp using orderBy="creationTimestamp desc". This sorts results based
 *  on the creationTimestamp field in reverse chronological order (newest result
 *  first). Use this to sort resources like operations so that the newest
 *  operation is returned first.
 *  Currently, only sorting by name or creationTimestamp desc is supported.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Specifies a page token to use. Set pageToken to the nextPageToken returned
 *  by a previous list request to get the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRCloudUserAccounts_OperationList.
 *
 *  Retrieves the list of operation resources contained within the specified
 *  project.
 *
 *  @param project Project ID for this request.
 *
 *  @returns GTLRCloudUserAccountsQuery_GlobalAccountsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProject:(NSString *)project;

@end

/**
 *  Adds users to the specified group.
 *
 *  Method: clouduseraccounts.groups.addMember
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 */
@interface GTLRCloudUserAccountsQuery_GroupsAddMember : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForGroupsAddMemberWithObject:project:groupName:]

/** Name of the group for this request. */
@property(nonatomic, copy, nullable) NSString *groupName;

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRCloudUserAccounts_Operation.
 *
 *  Adds users to the specified group.
 *
 *  @param object The @c GTLRCloudUserAccounts_GroupsAddMemberRequest to include
 *    in the query.
 *  @param project Project ID for this request.
 *  @param groupName Name of the group for this request.
 *
 *  @returns GTLRCloudUserAccountsQuery_GroupsAddMember
 */
+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_GroupsAddMemberRequest *)object
                        project:(NSString *)project
                      groupName:(NSString *)groupName;

@end

/**
 *  Deletes the specified Group resource.
 *
 *  Method: clouduseraccounts.groups.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 */
@interface GTLRCloudUserAccountsQuery_GroupsDelete : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForGroupsDeleteWithproject:groupName:]

/** Name of the Group resource to delete. */
@property(nonatomic, copy, nullable) NSString *groupName;

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRCloudUserAccounts_Operation.
 *
 *  Deletes the specified Group resource.
 *
 *  @param project Project ID for this request.
 *  @param groupName Name of the Group resource to delete.
 *
 *  @returns GTLRCloudUserAccountsQuery_GroupsDelete
 */
+ (instancetype)queryWithProject:(NSString *)project
                       groupName:(NSString *)groupName;

@end

/**
 *  Returns the specified Group resource.
 *
 *  Method: clouduseraccounts.groups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatformReadOnly
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccountsReadonly
 */
@interface GTLRCloudUserAccountsQuery_GroupsGet : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForGroupsGetWithproject:groupName:]

/** Name of the Group resource to return. */
@property(nonatomic, copy, nullable) NSString *groupName;

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRCloudUserAccounts_Group.
 *
 *  Returns the specified Group resource.
 *
 *  @param project Project ID for this request.
 *  @param groupName Name of the Group resource to return.
 *
 *  @returns GTLRCloudUserAccountsQuery_GroupsGet
 */
+ (instancetype)queryWithProject:(NSString *)project
                       groupName:(NSString *)groupName;

@end

/**
 *  Gets the access control policy for a resource. May be empty if no such
 *  policy or resource exists.
 *
 *  Method: clouduseraccounts.groups.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatformReadOnly
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccountsReadonly
 */
@interface GTLRCloudUserAccountsQuery_GroupsGetIamPolicy : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForGroupsGetIamPolicyWithproject:resource:]

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/** Name of the resource for this request. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudUserAccounts_Policy.
 *
 *  Gets the access control policy for a resource. May be empty if no such
 *  policy or resource exists.
 *
 *  @param project Project ID for this request.
 *  @param resource Name of the resource for this request.
 *
 *  @returns GTLRCloudUserAccountsQuery_GroupsGetIamPolicy
 */
+ (instancetype)queryWithProject:(NSString *)project
                        resource:(NSString *)resource;

@end

/**
 *  Creates a Group resource in the specified project using the data included in
 *  the request.
 *
 *  Method: clouduseraccounts.groups.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 */
@interface GTLRCloudUserAccountsQuery_GroupsInsert : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForGroupsInsertWithObject:project:]

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRCloudUserAccounts_Operation.
 *
 *  Creates a Group resource in the specified project using the data included in
 *  the request.
 *
 *  @param object The @c GTLRCloudUserAccounts_Group to include in the query.
 *  @param project Project ID for this request.
 *
 *  @returns GTLRCloudUserAccountsQuery_GroupsInsert
 */
+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_Group *)object
                        project:(NSString *)project;

@end

/**
 *  Retrieves the list of groups contained within the specified project.
 *
 *  Method: clouduseraccounts.groups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatformReadOnly
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccountsReadonly
 */
@interface GTLRCloudUserAccountsQuery_GroupsList : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForGroupsListWithproject:]

/**
 *  Sets a filter expression for filtering listed resources, in the form
 *  filter={expression}. Your {expression} must be in the format: field_name
 *  comparison_string literal_string.
 *  The field_name is the name of the field you want to compare. Only atomic
 *  field types are supported (string, number, boolean). The comparison_string
 *  must be either eq (equals) or ne (not equals). The literal_string is the
 *  string value to filter to. The literal value must be valid for the type of
 *  field you are filtering by (string, number, boolean). For string fields, the
 *  literal value is interpreted as a regular expression using RE2 syntax. The
 *  literal value must match the entire field.
 *  For example, to filter for instances that do not have a name of
 *  example-instance, you would use filter=name ne example-instance.
 *  Compute Engine Beta API Only: If you use filtering in the Beta API, you can
 *  also filter on nested fields. For example, you could filter on instances
 *  that have set the scheduling.automaticRestart field to true. In particular,
 *  use filtering on nested fields to take advantage of instance labels to
 *  organize and filter results based on label values.
 *  The Beta API also supports filtering on multiple expressions by providing
 *  each separate expression within parentheses. For example,
 *  (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple
 *  expressions are treated as AND expressions, meaning that resources must
 *  match all expressions to pass the filters.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The maximum number of results per page that should be returned. If the
 *  number of available results is larger than maxResults, Compute Engine
 *  returns a nextPageToken that can be used to get the next page of results in
 *  subsequent list requests.
 *
 *  @note If not set, the documented server-side default will be 500 (from the
 *        range 0..500).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Sorts list results by a certain order. By default, results are returned in
 *  alphanumerical order based on the resource name.
 *  You can also sort results in descending order based on the creation
 *  timestamp using orderBy="creationTimestamp desc". This sorts results based
 *  on the creationTimestamp field in reverse chronological order (newest result
 *  first). Use this to sort resources like operations so that the newest
 *  operation is returned first.
 *  Currently, only sorting by name or creationTimestamp desc is supported.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Specifies a page token to use. Set pageToken to the nextPageToken returned
 *  by a previous list request to get the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRCloudUserAccounts_GroupList.
 *
 *  Retrieves the list of groups contained within the specified project.
 *
 *  @param project Project ID for this request.
 *
 *  @returns GTLRCloudUserAccountsQuery_GroupsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProject:(NSString *)project;

@end

/**
 *  Removes users from the specified group.
 *
 *  Method: clouduseraccounts.groups.removeMember
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 */
@interface GTLRCloudUserAccountsQuery_GroupsRemoveMember : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForGroupsRemoveMemberWithObject:project:groupName:]

/** Name of the group for this request. */
@property(nonatomic, copy, nullable) NSString *groupName;

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRCloudUserAccounts_Operation.
 *
 *  Removes users from the specified group.
 *
 *  @param object The @c GTLRCloudUserAccounts_GroupsRemoveMemberRequest to
 *    include in the query.
 *  @param project Project ID for this request.
 *  @param groupName Name of the group for this request.
 *
 *  @returns GTLRCloudUserAccountsQuery_GroupsRemoveMember
 */
+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_GroupsRemoveMemberRequest *)object
                        project:(NSString *)project
                      groupName:(NSString *)groupName;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  Method: clouduseraccounts.groups.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatformReadOnly
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccountsReadonly
 */
@interface GTLRCloudUserAccountsQuery_GroupsSetIamPolicy : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForGroupsSetIamPolicyWithObject:project:resource:]

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/** Name of the resource for this request. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudUserAccounts_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  @param object The @c GTLRCloudUserAccounts_Policy to include in the query.
 *  @param project Project ID for this request.
 *  @param resource Name of the resource for this request.
 *
 *  @returns GTLRCloudUserAccountsQuery_GroupsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_Policy *)object
                        project:(NSString *)project
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource.
 *
 *  Method: clouduseraccounts.groups.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatformReadOnly
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccountsReadonly
 */
@interface GTLRCloudUserAccountsQuery_GroupsTestIamPermissions : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForGroupsTestIamPermissionsWithObject:project:resource:]

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/** Name of the resource for this request. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudUserAccounts_TestPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource.
 *
 *  @param object The @c GTLRCloudUserAccounts_TestPermissionsRequest to include
 *    in the query.
 *  @param project Project ID for this request.
 *  @param resource Name of the resource for this request.
 *
 *  @returns GTLRCloudUserAccountsQuery_GroupsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_TestPermissionsRequest *)object
                        project:(NSString *)project
                       resource:(NSString *)resource;

@end

/**
 *  Returns a list of authorized public keys for a specific user account.
 *
 *  Method: clouduseraccounts.linux.getAuthorizedKeysView
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatformReadOnly
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccountsReadonly
 */
@interface GTLRCloudUserAccountsQuery_LinuxGetAuthorizedKeysView : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForLinuxGetAuthorizedKeysViewWithproject:zoneProperty:user:instance:]

/** The fully-qualified URL of the virtual machine requesting the view. */
@property(nonatomic, copy, nullable) NSString *instance;

/** Whether the view was requested as part of a user-initiated login. */
@property(nonatomic, assign) BOOL login;

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  The user account for which you want to get a list of authorized public keys.
 */
@property(nonatomic, copy, nullable) NSString *user;

/**
 *  Name of the zone for this request.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

/**
 *  Fetches a @c GTLRCloudUserAccounts_LinuxGetAuthorizedKeysViewResponse.
 *
 *  Returns a list of authorized public keys for a specific user account.
 *
 *  @param project Project ID for this request.
 *  @param zoneProperty Name of the zone for this request.
 *  @param user The user account for which you want to get a list of authorized
 *    public keys.
 *  @param instance The fully-qualified URL of the virtual machine requesting
 *    the view.
 *
 *  @returns GTLRCloudUserAccountsQuery_LinuxGetAuthorizedKeysView
 */
+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                            user:(NSString *)user
                        instance:(NSString *)instance;

@end

/**
 *  Retrieves a list of user accounts for an instance within a specific project.
 *
 *  Method: clouduseraccounts.linux.getLinuxAccountViews
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatformReadOnly
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccountsReadonly
 */
@interface GTLRCloudUserAccountsQuery_LinuxGetLinuxAccountViews : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForLinuxGetLinuxAccountViewsWithproject:zoneProperty:instance:]

/**
 *  Sets a filter expression for filtering listed resources, in the form
 *  filter={expression}. Your {expression} must be in the format: field_name
 *  comparison_string literal_string.
 *  The field_name is the name of the field you want to compare. Only atomic
 *  field types are supported (string, number, boolean). The comparison_string
 *  must be either eq (equals) or ne (not equals). The literal_string is the
 *  string value to filter to. The literal value must be valid for the type of
 *  field you are filtering by (string, number, boolean). For string fields, the
 *  literal value is interpreted as a regular expression using RE2 syntax. The
 *  literal value must match the entire field.
 *  For example, to filter for instances that do not have a name of
 *  example-instance, you would use filter=name ne example-instance.
 *  Compute Engine Beta API Only: If you use filtering in the Beta API, you can
 *  also filter on nested fields. For example, you could filter on instances
 *  that have set the scheduling.automaticRestart field to true. In particular,
 *  use filtering on nested fields to take advantage of instance labels to
 *  organize and filter results based on label values.
 *  The Beta API also supports filtering on multiple expressions by providing
 *  each separate expression within parentheses. For example,
 *  (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple
 *  expressions are treated as AND expressions, meaning that resources must
 *  match all expressions to pass the filters.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The fully-qualified URL of the virtual machine requesting the views. */
@property(nonatomic, copy, nullable) NSString *instance;

/**
 *  The maximum number of results per page that should be returned. If the
 *  number of available results is larger than maxResults, Compute Engine
 *  returns a nextPageToken that can be used to get the next page of results in
 *  subsequent list requests.
 *
 *  @note If not set, the documented server-side default will be 500 (from the
 *        range 0..500).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Sorts list results by a certain order. By default, results are returned in
 *  alphanumerical order based on the resource name.
 *  You can also sort results in descending order based on the creation
 *  timestamp using orderBy="creationTimestamp desc". This sorts results based
 *  on the creationTimestamp field in reverse chronological order (newest result
 *  first). Use this to sort resources like operations so that the newest
 *  operation is returned first.
 *  Currently, only sorting by name or creationTimestamp desc is supported.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Specifies a page token to use. Set pageToken to the nextPageToken returned
 *  by a previous list request to get the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Name of the zone for this request.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

/**
 *  Fetches a @c GTLRCloudUserAccounts_LinuxGetLinuxAccountViewsResponse.
 *
 *  Retrieves a list of user accounts for an instance within a specific project.
 *
 *  @param project Project ID for this request.
 *  @param zoneProperty Name of the zone for this request.
 *  @param instance The fully-qualified URL of the virtual machine requesting
 *    the views.
 *
 *  @returns GTLRCloudUserAccountsQuery_LinuxGetLinuxAccountViews
 */
+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        instance:(NSString *)instance;

@end

/**
 *  Adds a public key to the specified User resource with the data included in
 *  the request.
 *
 *  Method: clouduseraccounts.users.addPublicKey
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 */
@interface GTLRCloudUserAccountsQuery_UsersAddPublicKey : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForUsersAddPublicKeyWithObject:project:user:]

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/** Name of the user for this request. */
@property(nonatomic, copy, nullable) NSString *user;

/**
 *  Fetches a @c GTLRCloudUserAccounts_Operation.
 *
 *  Adds a public key to the specified User resource with the data included in
 *  the request.
 *
 *  @param object The @c GTLRCloudUserAccounts_PublicKey to include in the
 *    query.
 *  @param project Project ID for this request.
 *  @param user Name of the user for this request.
 *
 *  @returns GTLRCloudUserAccountsQuery_UsersAddPublicKey
 */
+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_PublicKey *)object
                        project:(NSString *)project
                           user:(NSString *)user;

@end

/**
 *  Deletes the specified User resource.
 *
 *  Method: clouduseraccounts.users.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 */
@interface GTLRCloudUserAccountsQuery_UsersDelete : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForUsersDeleteWithproject:user:]

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/** Name of the user resource to delete. */
@property(nonatomic, copy, nullable) NSString *user;

/**
 *  Fetches a @c GTLRCloudUserAccounts_Operation.
 *
 *  Deletes the specified User resource.
 *
 *  @param project Project ID for this request.
 *  @param user Name of the user resource to delete.
 *
 *  @returns GTLRCloudUserAccountsQuery_UsersDelete
 */
+ (instancetype)queryWithProject:(NSString *)project
                            user:(NSString *)user;

@end

/**
 *  Returns the specified User resource.
 *
 *  Method: clouduseraccounts.users.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatformReadOnly
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccountsReadonly
 */
@interface GTLRCloudUserAccountsQuery_UsersGet : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForUsersGetWithproject:user:]

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/** Name of the user resource to return. */
@property(nonatomic, copy, nullable) NSString *user;

/**
 *  Fetches a @c GTLRCloudUserAccounts_User.
 *
 *  Returns the specified User resource.
 *
 *  @param project Project ID for this request.
 *  @param user Name of the user resource to return.
 *
 *  @returns GTLRCloudUserAccountsQuery_UsersGet
 */
+ (instancetype)queryWithProject:(NSString *)project
                            user:(NSString *)user;

@end

/**
 *  Gets the access control policy for a resource. May be empty if no such
 *  policy or resource exists.
 *
 *  Method: clouduseraccounts.users.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatformReadOnly
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccountsReadonly
 */
@interface GTLRCloudUserAccountsQuery_UsersGetIamPolicy : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForUsersGetIamPolicyWithproject:resource:]

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/** Name of the resource for this request. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudUserAccounts_Policy.
 *
 *  Gets the access control policy for a resource. May be empty if no such
 *  policy or resource exists.
 *
 *  @param project Project ID for this request.
 *  @param resource Name of the resource for this request.
 *
 *  @returns GTLRCloudUserAccountsQuery_UsersGetIamPolicy
 */
+ (instancetype)queryWithProject:(NSString *)project
                        resource:(NSString *)resource;

@end

/**
 *  Creates a User resource in the specified project using the data included in
 *  the request.
 *
 *  Method: clouduseraccounts.users.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 */
@interface GTLRCloudUserAccountsQuery_UsersInsert : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForUsersInsertWithObject:project:]

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRCloudUserAccounts_Operation.
 *
 *  Creates a User resource in the specified project using the data included in
 *  the request.
 *
 *  @param object The @c GTLRCloudUserAccounts_User to include in the query.
 *  @param project Project ID for this request.
 *
 *  @returns GTLRCloudUserAccountsQuery_UsersInsert
 */
+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_User *)object
                        project:(NSString *)project;

@end

/**
 *  Retrieves a list of users contained within the specified project.
 *
 *  Method: clouduseraccounts.users.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatformReadOnly
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccountsReadonly
 */
@interface GTLRCloudUserAccountsQuery_UsersList : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForUsersListWithproject:]

/**
 *  Sets a filter expression for filtering listed resources, in the form
 *  filter={expression}. Your {expression} must be in the format: field_name
 *  comparison_string literal_string.
 *  The field_name is the name of the field you want to compare. Only atomic
 *  field types are supported (string, number, boolean). The comparison_string
 *  must be either eq (equals) or ne (not equals). The literal_string is the
 *  string value to filter to. The literal value must be valid for the type of
 *  field you are filtering by (string, number, boolean). For string fields, the
 *  literal value is interpreted as a regular expression using RE2 syntax. The
 *  literal value must match the entire field.
 *  For example, to filter for instances that do not have a name of
 *  example-instance, you would use filter=name ne example-instance.
 *  Compute Engine Beta API Only: If you use filtering in the Beta API, you can
 *  also filter on nested fields. For example, you could filter on instances
 *  that have set the scheduling.automaticRestart field to true. In particular,
 *  use filtering on nested fields to take advantage of instance labels to
 *  organize and filter results based on label values.
 *  The Beta API also supports filtering on multiple expressions by providing
 *  each separate expression within parentheses. For example,
 *  (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple
 *  expressions are treated as AND expressions, meaning that resources must
 *  match all expressions to pass the filters.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The maximum number of results per page that should be returned. If the
 *  number of available results is larger than maxResults, Compute Engine
 *  returns a nextPageToken that can be used to get the next page of results in
 *  subsequent list requests.
 *
 *  @note If not set, the documented server-side default will be 500 (from the
 *        range 0..500).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Sorts list results by a certain order. By default, results are returned in
 *  alphanumerical order based on the resource name.
 *  You can also sort results in descending order based on the creation
 *  timestamp using orderBy="creationTimestamp desc". This sorts results based
 *  on the creationTimestamp field in reverse chronological order (newest result
 *  first). Use this to sort resources like operations so that the newest
 *  operation is returned first.
 *  Currently, only sorting by name or creationTimestamp desc is supported.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Specifies a page token to use. Set pageToken to the nextPageToken returned
 *  by a previous list request to get the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRCloudUserAccounts_UserList.
 *
 *  Retrieves a list of users contained within the specified project.
 *
 *  @param project Project ID for this request.
 *
 *  @returns GTLRCloudUserAccountsQuery_UsersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProject:(NSString *)project;

@end

/**
 *  Removes the specified public key from the user.
 *
 *  Method: clouduseraccounts.users.removePublicKey
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 */
@interface GTLRCloudUserAccountsQuery_UsersRemovePublicKey : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForUsersRemovePublicKeyWithproject:user:fingerprint:]

/**
 *  The fingerprint of the public key to delete. Public keys are identified by
 *  their fingerprint, which is defined by RFC4716 to be the MD5 digest of the
 *  public key.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/** Name of the user for this request. */
@property(nonatomic, copy, nullable) NSString *user;

/**
 *  Fetches a @c GTLRCloudUserAccounts_Operation.
 *
 *  Removes the specified public key from the user.
 *
 *  @param project Project ID for this request.
 *  @param user Name of the user for this request.
 *  @param fingerprint The fingerprint of the public key to delete. Public keys
 *    are identified by their fingerprint, which is defined by RFC4716 to be the
 *    MD5 digest of the public key.
 *
 *  @returns GTLRCloudUserAccountsQuery_UsersRemovePublicKey
 */
+ (instancetype)queryWithProject:(NSString *)project
                            user:(NSString *)user
                     fingerprint:(NSString *)fingerprint;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  Method: clouduseraccounts.users.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatformReadOnly
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccountsReadonly
 */
@interface GTLRCloudUserAccountsQuery_UsersSetIamPolicy : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForUsersSetIamPolicyWithObject:project:resource:]

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/** Name of the resource for this request. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudUserAccounts_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  @param object The @c GTLRCloudUserAccounts_Policy to include in the query.
 *  @param project Project ID for this request.
 *  @param resource Name of the resource for this request.
 *
 *  @returns GTLRCloudUserAccountsQuery_UsersSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_Policy *)object
                        project:(NSString *)project
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource.
 *
 *  Method: clouduseraccounts.users.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatform
 *    @c kGTLRAuthScopeCloudUserAccountsCloudPlatformReadOnly
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccounts
 *    @c kGTLRAuthScopeCloudUserAccountsCloudUseraccountsReadonly
 */
@interface GTLRCloudUserAccountsQuery_UsersTestIamPermissions : GTLRCloudUserAccountsQuery
// Previous library name was
//   +[GTLQueryCloudUserAccounts queryForUsersTestIamPermissionsWithObject:project:resource:]

/** Project ID for this request. */
@property(nonatomic, copy, nullable) NSString *project;

/** Name of the resource for this request. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudUserAccounts_TestPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource.
 *
 *  @param object The @c GTLRCloudUserAccounts_TestPermissionsRequest to include
 *    in the query.
 *  @param project Project ID for this request.
 *  @param resource Name of the resource for this request.
 *
 *  @returns GTLRCloudUserAccountsQuery_UsersTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_TestPermissionsRequest *)object
                        project:(NSString *)project
                       resource:(NSString *)resource;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
