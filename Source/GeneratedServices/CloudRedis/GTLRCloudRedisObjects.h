// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Memorystore for Redis API (redis/v1beta1)
// Description:
//   The Google Cloud Memorystore for Redis API is used for creating and
//   managing Redis instances on the Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/memorystore/docs/redis/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudRedis_GoogleCloudRedisV1beta1LocationMetadata_AvailableZones;
@class GTLRCloudRedis_GoogleCloudRedisV1beta1ZoneMetadata;
@class GTLRCloudRedis_Instance;
@class GTLRCloudRedis_Instance_Labels;
@class GTLRCloudRedis_Instance_RedisConfigs;
@class GTLRCloudRedis_Location;
@class GTLRCloudRedis_Location_Labels;
@class GTLRCloudRedis_Location_Metadata;
@class GTLRCloudRedis_LocationMetadata_AvailableZones;
@class GTLRCloudRedis_Operation;
@class GTLRCloudRedis_Operation_Metadata;
@class GTLRCloudRedis_Operation_Response;
@class GTLRCloudRedis_Status;
@class GTLRCloudRedis_Status_Details_Item;
@class GTLRCloudRedis_ZoneMetadata;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudRedis_Instance.state

/**
 *  Redis instance is being created.
 *
 *  Value: "CREATING"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_Instance_State_Creating;
/**
 *  Redis instance is being deleted.
 *
 *  Value: "DELETING"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_Instance_State_Deleting;
/**
 *  Redis instance is exporting data.
 *
 *  Value: "EXPORTING"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_Instance_State_Exporting;
/**
 *  Redis instance is importing data (availability may be affected).
 *
 *  Value: "IMPORTING"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_Instance_State_Importing;
/**
 *  Maintenance is being performed on this Redis instance.
 *
 *  Value: "MAINTENANCE"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_Instance_State_Maintenance;
/**
 *  Redis instance has been created and is fully usable.
 *
 *  Value: "READY"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_Instance_State_Ready;
/**
 *  Redis instance is being repaired and may be unusable. Details can be
 *  found in the `status_message` field.
 *
 *  Value: "REPAIRING"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_Instance_State_Repairing;
/**
 *  Not set.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_Instance_State_StateUnspecified;
/**
 *  Redis instance configuration is being updated. Certain kinds of updates
 *  may cause the instance to become unusable while the update is in
 *  progress.
 *
 *  Value: "UPDATING"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_Instance_State_Updating;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_Instance.tier

/**
 *  BASIC tier: standalone instance
 *
 *  Value: "BASIC"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_Instance_Tier_Basic;
/**
 *  STANDARD_HA tier: highly available primary/replica instances
 *
 *  Value: "STANDARD_HA"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_Instance_Tier_StandardHa;
/**
 *  Not set.
 *
 *  Value: "TIER_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_Instance_Tier_TierUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_OperationMetadata.operationType

/**
 *  Redis instance is being created.
 *
 *  Value: "CREATE_REDIS_INSTANCE"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_OperationMetadata_OperationType_CreateRedisInstance;
/**
 *  Redis instance is being deleted.
 *
 *  Value: "DELETE_REDIS_INSTANCE"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_OperationMetadata_OperationType_DeleteRedisInstance;
/**
 *  Redis instance is being in maintenance.
 *
 *  Value: "MAINTENANCE_FOR_REDIS_INSTANCE"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_OperationMetadata_OperationType_MaintenanceForRedisInstance;
/**
 *  Redis instance is being repaired.
 *
 *  Value: "REPAIR_REDIS_INSTANCE"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_OperationMetadata_OperationType_RepairRedisInstance;
/**
 *  Not set.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_OperationMetadata_OperationType_TypeUnspecified;
/**
 *  Redis instance is being updated.
 *
 *  Value: "UPDATE_REDIS_INSTANCE"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_OperationMetadata_OperationType_UpdateRedisInstance;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_OperationMetadata.state

/**
 *  The operation completed successfully.
 *
 *  Value: "DONE"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_OperationMetadata_State_Done;
/**
 *  The operation has failed or was cancelled.
 *
 *  Value: "FAILED"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_OperationMetadata_State_Failed;
/**
 *  The operation has been created.
 *
 *  Value: "PENDING"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_OperationMetadata_State_Pending;
/**
 *  The operation is currently running.
 *
 *  Value: "RUNNING"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_OperationMetadata_State_Running;
/**
 *  Not set.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudRedis_OperationMetadata_State_StatusUnspecified;

/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRCloudRedis_GoogleCloudCommonOperationMetadata : GTLRObject

/** [Output only] API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  [Output only] Identifies whether the user has requested cancellation
 *  of the operation. Operations that have successfully been cancelled
 *  have Operation.error value with a google.rpc.Status.code of 1,
 *  corresponding to `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cancelRequested;

/** [Output only] The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** [Output only] The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** [Output only] Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusDetail;

/**
 *  [Output only] Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** [Output only] Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  This location metadata represents additional configuration options for a
 *  given location where a Redis instance may be created. All fields are output
 *  only. It is returned as content of the
 *  `google.cloud.location.Location.metadata` field.
 */
@interface GTLRCloudRedis_GoogleCloudRedisV1beta1LocationMetadata : GTLRObject

/**
 *  Output only. The set of available zones in the location. The map is keyed
 *  by the lowercase ID of each zone, as defined by GCE. These keys can be
 *  specified in `location_id` or `alternative_location_id` fields when
 *  creating a Redis instance.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_GoogleCloudRedisV1beta1LocationMetadata_AvailableZones *availableZones;

@end


/**
 *  Output only. The set of available zones in the location. The map is keyed
 *  by the lowercase ID of each zone, as defined by GCE. These keys can be
 *  specified in `location_id` or `alternative_location_id` fields when
 *  creating a Redis instance.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudRedis_GoogleCloudRedisV1beta1ZoneMetadata. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRedis_GoogleCloudRedisV1beta1LocationMetadata_AvailableZones : GTLRObject
@end


/**
 *  Defines specific information for a particular zone. Currently empty and
 *  reserved for future use only.
 */
@interface GTLRCloudRedis_GoogleCloudRedisV1beta1ZoneMetadata : GTLRObject
@end


/**
 *  A Google Cloud Redis instance.
 */
@interface GTLRCloudRedis_Instance : GTLRObject

/**
 *  Optional. Only applicable to STANDARD_HA tier which protects the instance
 *  against zonal failures by provisioning it across two zones. If provided, it
 *  must be a different zone from the one provided in [location_id].
 */
@property(nonatomic, copy, nullable) NSString *alternativeLocationId;

/**
 *  Optional. The full name of the Google Compute Engine
 *  [network](/compute/docs/networks-and-firewalls#networks) to which the
 *  instance is connected. If left unspecified, the `default` network
 *  will be used.
 */
@property(nonatomic, copy, nullable) NSString *authorizedNetwork;

/** Output only. The time the instance was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The current zone where the Redis endpoint is placed. In
 *  single zone deployments, this will always be the same as [location_id]
 *  provided by the user at creation time. In cross-zone instances (only
 *  applicable in STANDARD_HA tier), this can be either [location_id] or
 *  [alternative_location_id] and can change on a failover event.
 */
@property(nonatomic, copy, nullable) NSString *currentLocationId;

/** An arbitrary and optional user-provided name for the instance. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. Hostname or IP address of the exposed Redis endpoint used by
 *  clients to connect to the service.
 */
@property(nonatomic, copy, nullable) NSString *host;

/** Resource labels to represent user provided metadata */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Instance_Labels *labels;

/**
 *  Optional. The zone where the instance will be provisioned. If not provided,
 *  the service will choose a zone for the instance. For STANDARD_HA tier,
 *  instances will be created across two zones for protection against zonal
 *  failures. if [alternative_location_id] is also provided, it must be
 *  different from [location_id].
 */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Required. Redis memory size in GB, up to 200GB.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memorySizeGb;

/**
 *  Required. Unique name of the resource in this scope including project and
 *  location using the form:
 *  `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
 *  Note: Redis instances are managed and addressed at regional level so
 *  location_id here refers to a GCP region; however, users get to choose which
 *  specific zone (or collection of zones for cross-zone instances) an instance
 *  should be provisioned in. Refer to [location_id] and
 *  [alternative_location_id] fields for more details.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The port number of the exposed Redis endpoint.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/**
 *  Optional. Redis configuration parameters, according to
 *  http://redis.io/topics/config. Currently, the only supported parameters
 *  are:
 *  * maxmemory-policy
 *  * notify-keyspace-events
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Instance_RedisConfigs *redisConfigs;

/**
 *  Optional. The version of Redis software.
 *  If not provided, latest supported version will be used. Updating the
 *  version will perform an upgrade/downgrade to the new version. Currently,
 *  the supported values are `REDIS_3_2` for Redis 3.2.
 */
@property(nonatomic, copy, nullable) NSString *redisVersion;

/**
 *  Optional. The CIDR range of internal addresses that are reserved for this
 *  instance. If not provided, the service will choose an unused /29 block,
 *  for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be unique
 *  and non-overlapping with existing subnets in a network.
 */
@property(nonatomic, copy, nullable) NSString *reservedIpRange;

/**
 *  Output only. The current state of this instance.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_Instance_State_Creating Redis instance is being
 *        created. (Value: "CREATING")
 *    @arg @c kGTLRCloudRedis_Instance_State_Deleting Redis instance is being
 *        deleted. (Value: "DELETING")
 *    @arg @c kGTLRCloudRedis_Instance_State_Exporting Redis instance is
 *        exporting data. (Value: "EXPORTING")
 *    @arg @c kGTLRCloudRedis_Instance_State_Importing Redis instance is
 *        importing data (availability may be affected). (Value: "IMPORTING")
 *    @arg @c kGTLRCloudRedis_Instance_State_Maintenance Maintenance is being
 *        performed on this Redis instance. (Value: "MAINTENANCE")
 *    @arg @c kGTLRCloudRedis_Instance_State_Ready Redis instance has been
 *        created and is fully usable. (Value: "READY")
 *    @arg @c kGTLRCloudRedis_Instance_State_Repairing Redis instance is being
 *        repaired and may be unusable. Details can be
 *        found in the `status_message` field. (Value: "REPAIRING")
 *    @arg @c kGTLRCloudRedis_Instance_State_StateUnspecified Not set. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_Instance_State_Updating Redis instance
 *        configuration is being updated. Certain kinds of updates
 *        may cause the instance to become unusable while the update is in
 *        progress. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Additional information about the current status of this
 *  instance, if available.
 */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Required. The service tier of the instance.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_Instance_Tier_Basic BASIC tier: standalone
 *        instance (Value: "BASIC")
 *    @arg @c kGTLRCloudRedis_Instance_Tier_StandardHa STANDARD_HA tier: highly
 *        available primary/replica instances (Value: "STANDARD_HA")
 *    @arg @c kGTLRCloudRedis_Instance_Tier_TierUnspecified Not set. (Value:
 *        "TIER_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *tier;

@end


/**
 *  Resource labels to represent user provided metadata
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRedis_Instance_Labels : GTLRObject
@end


/**
 *  Optional. Redis configuration parameters, according to
 *  http://redis.io/topics/config. Currently, the only supported parameters
 *  are:
 *  * maxmemory-policy
 *  * notify-keyspace-events
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRedis_Instance_RedisConfigs : GTLRObject
@end


/**
 *  Response for ListInstances.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "instances" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudRedis_ListInstancesResponse : GTLRCollectionObject

/**
 *  A list of Redis instances in the project in the specified location,
 *  or across all locations.
 *  If the `location_id` in the parent field of the request is "-", all regions
 *  available to the project are queried, and the results aggregated.
 *  If in such an aggregated query a location is unavailable, a dummy Redis
 *  entry is included in the response with the "name" field set to a value of
 *  the form projects/{project_id}/locations/{location_id}/instances/- and the
 *  "status" field set to ERROR and "status_message" field set to "location not
 *  available for ListInstances".
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_Instance *> *instances;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudRedis_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudRedis_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_Operation *> *operations;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRCloudRedis_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name.
 *  For example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations.
 *  For example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRedis_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRedis_Location_Metadata : GTLRObject
@end


/**
 *  This location metadata represents additional configuration options for a
 *  given location where a Redis instance may be created. All fields are output
 *  only. It is returned as content of the
 *  `google.cloud.location.Location.metadata` field.
 */
@interface GTLRCloudRedis_LocationMetadata : GTLRObject

/**
 *  Output only. The set of available zones in the location. The map is keyed
 *  by the lowercase ID of each zone, as defined by GCE. These keys can be
 *  specified in `location_id` or `alternative_location_id` fields when
 *  creating a Redis instance.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_LocationMetadata_AvailableZones *availableZones;

@end


/**
 *  Output only. The set of available zones in the location. The map is keyed
 *  by the lowercase ID of each zone, as defined by GCE. These keys can be
 *  specified in `location_id` or `alternative_location_id` fields when
 *  creating a Redis instance.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudRedis_ZoneMetadata. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRedis_LocationMetadata_AvailableZones : GTLRObject
@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudRedis_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the
 *  `name` should have the format of `operations/some/unique/name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRedis_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRedis_Operation_Response : GTLRObject
@end


/**
 *  This operation metadata represents the state of operations that may have
 *  happened or are happening on the instance. All fields are output only. It is
 *  returned as content of the `google.longrunning.Operation.metadata` field.
 *  The
 *  `google.longrunning.Operation.name` field will be of the form
 *  `projects/{project_id}/locations/{location_id}/operations/{operation_id}`
 *  and
 *  the name for a `ListOperations` request will be of the form
 *  `projects/{project_id}/locations/{location_id}`
 *  On a ListOperations request where {location_id} is "-", all regions
 *  available to the {project_id} are queried and the results aggregated. If a
 *  location is not available, a dummy `google.longrunning.Operation` entry will
 *  be included in the `operations` field of the response, with the `name` field
 *  set to a value of the form
 *  `projects/{project_id}/locations/{location_id}/operations/-` and the `done`
 *  field will be set and the `result.error` field set with the `code` field set
 *  to `google.rpc.Code.DEADLINE_EXCEEDED` and the `message` field set to
 *  `location unavailable for ListOperations`. The Operation metadata` field
 *  will not be set for such a dummy operation.
 */
@interface GTLRCloudRedis_OperationMetadata : GTLRObject

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Detailed operation progress, if available. */
@property(nonatomic, copy, nullable) NSString *detail;

/** Output only. The time the operation was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. The operation type.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_OperationMetadata_OperationType_CreateRedisInstance
 *        Redis instance is being created. (Value: "CREATE_REDIS_INSTANCE")
 *    @arg @c kGTLRCloudRedis_OperationMetadata_OperationType_DeleteRedisInstance
 *        Redis instance is being deleted. (Value: "DELETE_REDIS_INSTANCE")
 *    @arg @c kGTLRCloudRedis_OperationMetadata_OperationType_MaintenanceForRedisInstance
 *        Redis instance is being in maintenance. (Value:
 *        "MAINTENANCE_FOR_REDIS_INSTANCE")
 *    @arg @c kGTLRCloudRedis_OperationMetadata_OperationType_RepairRedisInstance
 *        Redis instance is being repaired. (Value: "REPAIR_REDIS_INSTANCE")
 *    @arg @c kGTLRCloudRedis_OperationMetadata_OperationType_TypeUnspecified
 *        Not set. (Value: "TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_OperationMetadata_OperationType_UpdateRedisInstance
 *        Redis instance is being updated. (Value: "UPDATE_REDIS_INSTANCE")
 */
@property(nonatomic, copy, nullable) NSString *operationType;

/** Output only. The time the operation was started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. The current state of the operation.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_OperationMetadata_State_Done The operation
 *        completed successfully. (Value: "DONE")
 *    @arg @c kGTLRCloudRedis_OperationMetadata_State_Failed The operation has
 *        failed or was cancelled. (Value: "FAILED")
 *    @arg @c kGTLRCloudRedis_OperationMetadata_State_Pending The operation has
 *        been created. (Value: "PENDING")
 *    @arg @c kGTLRCloudRedis_OperationMetadata_State_Running The operation is
 *        currently running. (Value: "RUNNING")
 *    @arg @c kGTLRCloudRedis_OperationMetadata_State_StatusUnspecified Not set.
 *        (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRCloudRedis_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudRedis_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRedis_Status_Details_Item : GTLRObject
@end


/**
 *  Defines specific information for a particular zone. Currently empty and
 *  reserved for future use only.
 */
@interface GTLRCloudRedis_ZoneMetadata : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
