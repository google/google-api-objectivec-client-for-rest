// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Storage Transfer API (storagetransfer/v1)
// Description:
//   Transfers data from external data sources to a Google Cloud Storage bucket
//   or between Google Cloud Storage buckets.
// Documentation:
//   https://cloud.google.com/storage-transfer/docs

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRStorageTransfer_CancelOperationRequest;
@class GTLRStorageTransfer_PauseTransferOperationRequest;
@class GTLRStorageTransfer_ResumeTransferOperationRequest;
@class GTLRStorageTransfer_TransferJob;
@class GTLRStorageTransfer_UpdateTransferJobRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other StorageTransfer query classes.
 */
@interface GTLRStorageTransferQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Returns the Google service account that is used by Storage Transfer Service
 *  to access buckets in the project where transfers run or in other projects.
 *  Each Google service account is associated with one Google Cloud Platform
 *  Console project. Users should add this service account to the Google Cloud
 *  Storage bucket ACLs to grant access to Storage Transfer Service. This
 *  service account is created and owned by Storage Transfer Service and can
 *  only be used by Storage Transfer Service.
 *
 *  Method: storagetransfer.googleServiceAccounts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageTransferCloudPlatform
 */
@interface GTLRStorageTransferQuery_GoogleServiceAccountsGet : GTLRStorageTransferQuery
// Previous library name was
//   +[GTLQueryStorageTransfer queryForGoogleServiceAccountsGetWithprojectId:]

/**
 *  Required. The ID of the Google Cloud Platform Console project that the
 *  Google service account is associated with.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRStorageTransfer_GoogleServiceAccount.
 *
 *  Returns the Google service account that is used by Storage Transfer Service
 *  to access buckets in the project where transfers run or in other projects.
 *  Each Google service account is associated with one Google Cloud Platform
 *  Console project. Users should add this service account to the Google Cloud
 *  Storage bucket ACLs to grant access to Storage Transfer Service. This
 *  service account is created and owned by Storage Transfer Service and can
 *  only be used by Storage Transfer Service.
 *
 *  @param projectId Required. The ID of the Google Cloud Platform Console
 *    project that the Google service account is associated with.
 *
 *  @return GTLRStorageTransferQuery_GoogleServiceAccountsGet
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId;

@end

/**
 *  Creates a transfer job that runs periodically.
 *
 *  Method: storagetransfer.transferJobs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageTransferCloudPlatform
 */
@interface GTLRStorageTransferQuery_TransferJobsCreate : GTLRStorageTransferQuery
// Previous library name was
//   +[GTLQueryStorageTransfer queryForTransferJobsCreateWithObject:]

/**
 *  Fetches a @c GTLRStorageTransfer_TransferJob.
 *
 *  Creates a transfer job that runs periodically.
 *
 *  @param object The @c GTLRStorageTransfer_TransferJob to include in the
 *    query.
 *
 *  @return GTLRStorageTransferQuery_TransferJobsCreate
 */
+ (instancetype)queryWithObject:(GTLRStorageTransfer_TransferJob *)object;

@end

/**
 *  Gets a transfer job.
 *
 *  Method: storagetransfer.transferJobs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageTransferCloudPlatform
 */
@interface GTLRStorageTransferQuery_TransferJobsGet : GTLRStorageTransferQuery
// Previous library name was
//   +[GTLQueryStorageTransfer queryForTransferJobsGetWithjobName:projectId:]

/** Required. " The job to get. */
@property(nonatomic, copy, nullable) NSString *jobName;

/**
 *  Required. The ID of the Google Cloud Platform Console project that owns the
 *  job.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRStorageTransfer_TransferJob.
 *
 *  Gets a transfer job.
 *
 *  @param jobName Required. " The job to get.
 *  @param projectId Required. The ID of the Google Cloud Platform Console
 *    project that owns the job.
 *
 *  @return GTLRStorageTransferQuery_TransferJobsGet
 */
+ (instancetype)queryWithJobName:(NSString *)jobName
                       projectId:(NSString *)projectId;

@end

/**
 *  Lists transfer jobs.
 *
 *  Method: storagetransfer.transferJobs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageTransferCloudPlatform
 */
@interface GTLRStorageTransferQuery_TransferJobsList : GTLRStorageTransferQuery
// Previous library name was
//   +[GTLQueryStorageTransfer queryForTransferJobsListWithfilter:]

/**
 *  Required. A list of query parameters specified as JSON text in the form of:
 *  `{"projectId":"my_project_id", "jobNames":["jobid1","jobid2",...],
 *  "jobStatuses":["status1","status2",...]}` Since `jobNames` and `jobStatuses`
 *  support multiple values, their values must be specified with array notation.
 *  `projectId` is required. `jobNames` and `jobStatuses` are optional. The
 *  valid values for `jobStatuses` are case-insensitive: ENABLED, DISABLED, and
 *  DELETED.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The list page size. The max allowed value is 256. */
@property(nonatomic, assign) NSInteger pageSize;

/** The list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRStorageTransfer_ListTransferJobsResponse.
 *
 *  Lists transfer jobs.
 *
 *  @param filter Required. A list of query parameters specified as JSON text in
 *    the form of: `{"projectId":"my_project_id",
 *    "jobNames":["jobid1","jobid2",...],
 *    "jobStatuses":["status1","status2",...]}` Since `jobNames` and
 *    `jobStatuses` support multiple values, their values must be specified with
 *    array notation. `projectId` is required. `jobNames` and `jobStatuses` are
 *    optional. The valid values for `jobStatuses` are case-insensitive:
 *    ENABLED, DISABLED, and DELETED.
 *
 *  @return GTLRStorageTransferQuery_TransferJobsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilter:(NSString *)filter;

@end

/**
 *  Updates a transfer job. Updating a job's transfer spec does not affect
 *  transfer operations that are running already. **Note:** The job's status
 *  field can be modified using this RPC (for example, to set a job's status to
 *  DELETED, DISABLED, or ENABLED).
 *
 *  Method: storagetransfer.transferJobs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageTransferCloudPlatform
 */
@interface GTLRStorageTransferQuery_TransferJobsPatch : GTLRStorageTransferQuery
// Previous library name was
//   +[GTLQueryStorageTransfer queryForTransferJobsPatchWithObject:jobName:]

/** Required. The name of job to update. */
@property(nonatomic, copy, nullable) NSString *jobName;

/**
 *  Fetches a @c GTLRStorageTransfer_TransferJob.
 *
 *  Updates a transfer job. Updating a job's transfer spec does not affect
 *  transfer operations that are running already. **Note:** The job's status
 *  field can be modified using this RPC (for example, to set a job's status to
 *  DELETED, DISABLED, or ENABLED).
 *
 *  @param object The @c GTLRStorageTransfer_UpdateTransferJobRequest to include
 *    in the query.
 *  @param jobName Required. The name of job to update.
 *
 *  @return GTLRStorageTransferQuery_TransferJobsPatch
 */
+ (instancetype)queryWithObject:(GTLRStorageTransfer_UpdateTransferJobRequest *)object
                        jobName:(NSString *)jobName;

@end

/**
 *  Cancels a transfer. Use the transferOperations.get method to check if the
 *  cancellation succeeded or if the operation completed despite the `cancel`
 *  request. When you cancel an operation, the currently running transfer is
 *  interrupted. For recurring transfer jobs, the next instance of the transfer
 *  job will still run. For example, if your job is configured to run every day
 *  at 1pm and you cancel Monday's operation at 1:05pm, Monday's transfer will
 *  stop. However, a transfer job will still be attempted on Tuesday. This
 *  applies only to currently running operations. If an operation is not
 *  currently running, `cancel` does nothing. *Caution:* Canceling a transfer
 *  job can leave your data in an unknown state. We recommend that you restore
 *  the state at both the destination and the source after the `cancel` request
 *  completes so that your data is in a consistent state. When you cancel a job,
 *  the next job computes a delta of files and may repair any inconsistent
 *  state. For instance, if you run a job every day, and today's job found 10
 *  new files and transferred five files before you canceled the job, tomorrow's
 *  transfer operation will compute a new delta with the five files that were
 *  not copied today plus any new files discovered tomorrow.
 *
 *  Method: storagetransfer.transferOperations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageTransferCloudPlatform
 */
@interface GTLRStorageTransferQuery_TransferOperationsCancel : GTLRStorageTransferQuery
// Previous library name was
//   +[GTLQueryStorageTransfer queryForTransferOperationsCancelWithObject:name:]

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRStorageTransfer_Empty.
 *
 *  Cancels a transfer. Use the transferOperations.get method to check if the
 *  cancellation succeeded or if the operation completed despite the `cancel`
 *  request. When you cancel an operation, the currently running transfer is
 *  interrupted. For recurring transfer jobs, the next instance of the transfer
 *  job will still run. For example, if your job is configured to run every day
 *  at 1pm and you cancel Monday's operation at 1:05pm, Monday's transfer will
 *  stop. However, a transfer job will still be attempted on Tuesday. This
 *  applies only to currently running operations. If an operation is not
 *  currently running, `cancel` does nothing. *Caution:* Canceling a transfer
 *  job can leave your data in an unknown state. We recommend that you restore
 *  the state at both the destination and the source after the `cancel` request
 *  completes so that your data is in a consistent state. When you cancel a job,
 *  the next job computes a delta of files and may repair any inconsistent
 *  state. For instance, if you run a job every day, and today's job found 10
 *  new files and transferred five files before you canceled the job, tomorrow's
 *  transfer operation will compute a new delta with the five files that were
 *  not copied today plus any new files discovered tomorrow.
 *
 *  @param object The @c GTLRStorageTransfer_CancelOperationRequest to include
 *    in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRStorageTransferQuery_TransferOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRStorageTransfer_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: storagetransfer.transferOperations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageTransferCloudPlatform
 */
@interface GTLRStorageTransferQuery_TransferOperationsGet : GTLRStorageTransferQuery
// Previous library name was
//   +[GTLQueryStorageTransfer queryForTransferOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRStorageTransfer_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRStorageTransferQuery_TransferOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists transfer operations.
 *
 *  Method: storagetransfer.transferOperations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageTransferCloudPlatform
 */
@interface GTLRStorageTransferQuery_TransferOperationsList : GTLRStorageTransferQuery
// Previous library name was
//   +[GTLQueryStorageTransfer queryForTransferOperationsListWithname:filter:]

/**
 *  Required. A list of query parameters specified as JSON text in the form of:
 *  `{"projectId":"my_project_id", "jobNames":["jobid1","jobid2",...],
 *  "operationNames":["opid1","opid2",...],
 *  "transferStatuses":["status1","status2",...]}` Since `jobNames`,
 *  `operationNames`, and `transferStatuses` support multiple values, they must
 *  be specified with array notation. `projectId` is required. `jobNames`,
 *  `operationNames`, and `transferStatuses` are optional. The valid values for
 *  `transferStatuses` are case-insensitive: IN_PROGRESS, PAUSED, SUCCESS,
 *  FAILED, and ABORTED.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Required. The value `transferOperations`. */
@property(nonatomic, copy, nullable) NSString *name;

/** The list page size. The max allowed value is 256. */
@property(nonatomic, assign) NSInteger pageSize;

/** The list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRStorageTransfer_ListOperationsResponse.
 *
 *  Lists transfer operations.
 *
 *  @param name Required. The value `transferOperations`.
 *  @param filter Required. A list of query parameters specified as JSON text in
 *    the form of: `{"projectId":"my_project_id",
 *    "jobNames":["jobid1","jobid2",...],
 *    "operationNames":["opid1","opid2",...],
 *    "transferStatuses":["status1","status2",...]}` Since `jobNames`,
 *    `operationNames`, and `transferStatuses` support multiple values, they
 *    must be specified with array notation. `projectId` is required.
 *    `jobNames`, `operationNames`, and `transferStatuses` are optional. The
 *    valid values for `transferStatuses` are case-insensitive: IN_PROGRESS,
 *    PAUSED, SUCCESS, FAILED, and ABORTED.
 *
 *  @return GTLRStorageTransferQuery_TransferOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name
                       filter:(NSString *)filter;

@end

/**
 *  Pauses a transfer operation.
 *
 *  Method: storagetransfer.transferOperations.pause
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageTransferCloudPlatform
 */
@interface GTLRStorageTransferQuery_TransferOperationsPause : GTLRStorageTransferQuery
// Previous library name was
//   +[GTLQueryStorageTransfer queryForTransferOperationsPauseWithObject:name:]

/** Required. The name of the transfer operation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRStorageTransfer_Empty.
 *
 *  Pauses a transfer operation.
 *
 *  @param object The @c GTLRStorageTransfer_PauseTransferOperationRequest to
 *    include in the query.
 *  @param name Required. The name of the transfer operation.
 *
 *  @return GTLRStorageTransferQuery_TransferOperationsPause
 */
+ (instancetype)queryWithObject:(GTLRStorageTransfer_PauseTransferOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Resumes a transfer operation that is paused.
 *
 *  Method: storagetransfer.transferOperations.resume
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageTransferCloudPlatform
 */
@interface GTLRStorageTransferQuery_TransferOperationsResume : GTLRStorageTransferQuery
// Previous library name was
//   +[GTLQueryStorageTransfer queryForTransferOperationsResumeWithObject:name:]

/** Required. The name of the transfer operation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRStorageTransfer_Empty.
 *
 *  Resumes a transfer operation that is paused.
 *
 *  @param object The @c GTLRStorageTransfer_ResumeTransferOperationRequest to
 *    include in the query.
 *  @param name Required. The name of the transfer operation.
 *
 *  @return GTLRStorageTransferQuery_TransferOperationsResume
 */
+ (instancetype)queryWithObject:(GTLRStorageTransfer_ResumeTransferOperationRequest *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
