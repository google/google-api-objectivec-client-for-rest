// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Tasks API (cloudtasks/v2beta2)
// Description:
//   Manages the execution of large numbers of distributed requests. Cloud Tasks
//   is in Alpha.
// Documentation:
//   https://cloud.google.com/cloud-tasks/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudTasks_AppEngineHttpRequest;
@class GTLRCloudTasks_AppEngineHttpRequest_Headers;
@class GTLRCloudTasks_AppEngineHttpTarget;
@class GTLRCloudTasks_AppEngineQueueConfig;
@class GTLRCloudTasks_AppEngineRouting;
@class GTLRCloudTasks_AppEngineTaskTarget;
@class GTLRCloudTasks_AppEngineTaskTarget_Headers;
@class GTLRCloudTasks_AttemptStatus;
@class GTLRCloudTasks_Binding;
@class GTLRCloudTasks_Location;
@class GTLRCloudTasks_Location_Labels;
@class GTLRCloudTasks_Location_Metadata;
@class GTLRCloudTasks_Policy;
@class GTLRCloudTasks_PullMessage;
@class GTLRCloudTasks_PullQueueConfig;
@class GTLRCloudTasks_PullTarget;
@class GTLRCloudTasks_PullTaskTarget;
@class GTLRCloudTasks_Queue;
@class GTLRCloudTasks_RateLimits;
@class GTLRCloudTasks_RetryConfig;
@class GTLRCloudTasks_Status;
@class GTLRCloudTasks_Status_Details_Item;
@class GTLRCloudTasks_Task;
@class GTLRCloudTasks_TaskStatus;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudTasks_AppEngineHttpRequest.httpMethod

/**
 *  HTTP Delete
 *
 *  Value: "DELETE"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Delete;
/**
 *  HTTP Get
 *
 *  Value: "GET"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Get;
/**
 *  HTTP Head
 *
 *  Value: "HEAD"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Head;
/**
 *  HTTP method unspecified
 *
 *  Value: "HTTP_METHOD_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_HttpMethodUnspecified;
/**
 *  HTTP Post
 *
 *  Value: "POST"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Post;
/**
 *  HTTP Put
 *
 *  Value: "PUT"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Put;

// ----------------------------------------------------------------------------
// GTLRCloudTasks_AppEngineTaskTarget.httpMethod

/**
 *  HTTP Delete
 *
 *  Value: "DELETE"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_AppEngineTaskTarget_HttpMethod_Delete;
/**
 *  HTTP Get
 *
 *  Value: "GET"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_AppEngineTaskTarget_HttpMethod_Get;
/**
 *  HTTP Head
 *
 *  Value: "HEAD"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_AppEngineTaskTarget_HttpMethod_Head;
/**
 *  HTTP method unspecified
 *
 *  Value: "HTTP_METHOD_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_AppEngineTaskTarget_HttpMethod_HttpMethodUnspecified;
/**
 *  HTTP Post
 *
 *  Value: "POST"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_AppEngineTaskTarget_HttpMethod_Post;
/**
 *  HTTP Put
 *
 *  Value: "PUT"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_AppEngineTaskTarget_HttpMethod_Put;

// ----------------------------------------------------------------------------
// GTLRCloudTasks_CancelLeaseRequest.responseView

/**
 *  The basic view omits fields which can be large or can contain
 *  sensitive data.
 *  This view does not include (AppEngineHttpRequest.payload
 *  and PullMessage.payload). These payloads are desirable to
 *  return only when needed, because they can be large and because
 *  of the sensitivity of the data that you choose to store in it.
 *
 *  Value: "BASIC"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_CancelLeaseRequest_ResponseView_Basic;
/**
 *  All information is returned.
 *  Authorization for Task.View.FULL requires
 *  `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
 *  permission on the Queue.name resource.
 *
 *  Value: "FULL"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_CancelLeaseRequest_ResponseView_Full;
/**
 *  Unspecified. Defaults to BASIC.
 *
 *  Value: "VIEW_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_CancelLeaseRequest_ResponseView_ViewUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudTasks_CreateTaskRequest.responseView

/**
 *  The basic view omits fields which can be large or can contain
 *  sensitive data.
 *  This view does not include (AppEngineHttpRequest.payload
 *  and PullMessage.payload). These payloads are desirable to
 *  return only when needed, because they can be large and because
 *  of the sensitivity of the data that you choose to store in it.
 *
 *  Value: "BASIC"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_CreateTaskRequest_ResponseView_Basic;
/**
 *  All information is returned.
 *  Authorization for Task.View.FULL requires
 *  `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
 *  permission on the Queue.name resource.
 *
 *  Value: "FULL"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_CreateTaskRequest_ResponseView_Full;
/**
 *  Unspecified. Defaults to BASIC.
 *
 *  Value: "VIEW_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_CreateTaskRequest_ResponseView_ViewUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudTasks_PullTasksRequest.responseView

/**
 *  The basic view omits fields which can be large or can contain
 *  sensitive data.
 *  This view does not include (AppEngineHttpRequest.payload
 *  and PullMessage.payload). These payloads are desirable to
 *  return only when needed, because they can be large and because
 *  of the sensitivity of the data that you choose to store in it.
 *
 *  Value: "BASIC"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_PullTasksRequest_ResponseView_Basic;
/**
 *  All information is returned.
 *  Authorization for Task.View.FULL requires
 *  `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
 *  permission on the Queue.name resource.
 *
 *  Value: "FULL"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_PullTasksRequest_ResponseView_Full;
/**
 *  Unspecified. Defaults to BASIC.
 *
 *  Value: "VIEW_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_PullTasksRequest_ResponseView_ViewUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudTasks_Queue.state

/**
 *  The queue is disabled.
 *  A queue becomes `DISABLED` when
 *  [queue.yaml](/appengine/docs/python/config/queueref) or
 *  [queue.xml](appengine/docs/standard/java/config/queueref) is uploaded
 *  which does not contain the queue. You cannot directly disable a queue.
 *  When a queue is disabled, tasks can still be added to a queue
 *  but the tasks are not dispatched and CloudTasks.PullTasks calls
 *  return a `FAILED_PRECONDITION` error.
 *  To permanently delete this queue and all of its tasks, call
 *  CloudTasks.DeleteQueue.
 *
 *  Value: "DISABLED"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_Queue_State_Disabled;
/**
 *  Tasks are paused by the user. If the queue is paused then Cloud
 *  Tasks will stop delivering tasks from it, but more tasks can
 *  still be added to it by the user. When a pull queue is paused,
 *  all CloudTasks.PullTasks calls will return a
 *  `FAILED_PRECONDITION` error.
 *
 *  Value: "PAUSED"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_Queue_State_Paused;
/**
 *  The queue is running. Tasks can be dispatched.
 *
 *  Value: "RUNNING"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_Queue_State_Running;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_Queue_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudTasks_RenewLeaseRequest.responseView

/**
 *  The basic view omits fields which can be large or can contain
 *  sensitive data.
 *  This view does not include (AppEngineHttpRequest.payload
 *  and PullMessage.payload). These payloads are desirable to
 *  return only when needed, because they can be large and because
 *  of the sensitivity of the data that you choose to store in it.
 *
 *  Value: "BASIC"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_RenewLeaseRequest_ResponseView_Basic;
/**
 *  All information is returned.
 *  Authorization for Task.View.FULL requires
 *  `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
 *  permission on the Queue.name resource.
 *
 *  Value: "FULL"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_RenewLeaseRequest_ResponseView_Full;
/**
 *  Unspecified. Defaults to BASIC.
 *
 *  Value: "VIEW_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_RenewLeaseRequest_ResponseView_ViewUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudTasks_RunTaskRequest.responseView

/**
 *  The basic view omits fields which can be large or can contain
 *  sensitive data.
 *  This view does not include (AppEngineHttpRequest.payload
 *  and PullMessage.payload). These payloads are desirable to
 *  return only when needed, because they can be large and because
 *  of the sensitivity of the data that you choose to store in it.
 *
 *  Value: "BASIC"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_RunTaskRequest_ResponseView_Basic;
/**
 *  All information is returned.
 *  Authorization for Task.View.FULL requires
 *  `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
 *  permission on the Queue.name resource.
 *
 *  Value: "FULL"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_RunTaskRequest_ResponseView_Full;
/**
 *  Unspecified. Defaults to BASIC.
 *
 *  Value: "VIEW_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_RunTaskRequest_ResponseView_ViewUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudTasks_Task.view

/**
 *  The basic view omits fields which can be large or can contain
 *  sensitive data.
 *  This view does not include (AppEngineHttpRequest.payload
 *  and PullMessage.payload). These payloads are desirable to
 *  return only when needed, because they can be large and because
 *  of the sensitivity of the data that you choose to store in it.
 *
 *  Value: "BASIC"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_Task_View_Basic;
/**
 *  All information is returned.
 *  Authorization for Task.View.FULL requires
 *  `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
 *  permission on the Queue.name resource.
 *
 *  Value: "FULL"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_Task_View_Full;
/**
 *  Unspecified. Defaults to BASIC.
 *
 *  Value: "VIEW_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudTasks_Task_View_ViewUnspecified;

/**
 *  Request message for acknowledging a task using
 *  CloudTasks.AcknowledgeTask.
 */
@interface GTLRCloudTasks_AcknowledgeTaskRequest : GTLRObject

/**
 *  Required.
 *  The task's current schedule time, available in the Task.schedule_time
 *  returned in PullTasksResponse.tasks or
 *  CloudTasks.RenewLease. This restriction is to check that
 *  the caller is acknowledging the correct task.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleTime;

@end


/**
 *  App Engine HTTP request.
 *  The message defines the HTTP request that is sent to an App Engine app when
 *  the task is dispatched.
 *  This proto can only be used for tasks in a queue which has
 *  Queue.app_engine_http_target set.
 *  Using AppEngineHttpRequest requires
 *  [`appengine.applications.get`](/appengine/docs/admin-api/access-control)
 *  Google IAM permission for the project
 *  and the following scope:
 *  `https://www.googleapis.com/auth/cloud-platform`
 *  The task will be delivered to the App Engine app which belongs to the same
 *  project as the queue. For more information, see
 *  [How Requests are
 *  Routed](/appengine/docs/standard/python/how-requests-are-routed)
 *  and how routing is affected by
 *  [dispatch files](/appengine/docs/python/config/dispatchref).
 *  The AppEngineRouting used to construct the URL that the task is
 *  delivered to can be set at the queue-level or task-level:
 *  * If set, AppEngineHttpTarget.app_engine_routing_override is used for
 *  all tasks in the queue, no matter what the setting is for the
 *  task-level app_engine_routing.
 *  The `url` that the task will be sent to is:
 *  * `url =` AppEngineRouting.host `+` AppEngineHttpRequest.relative_url
 *  The task will be sent to a task handler by an HTTP
 *  request using the specified AppEngineHttpRequest.http_method (for example
 *  POST, HTTP GET, etc). The task attempt has succeeded if the task handler
 *  returns an HTTP response code in the range [200 - 299]. Error 503 is
 *  considered an App Engine system error instead of an application error.
 *  Requests returning error 503 will be retried regardless of retry
 *  configuration and not counted against retry counts.
 *  Any other response code or a failure to receive a response before the
 *  deadline is a failed attempt.
 */
@interface GTLRCloudTasks_AppEngineHttpRequest : GTLRObject

/**
 *  Task-level setting for App Engine routing.
 *  If set, AppEngineHttpTarget.app_engine_routing_override is used for
 *  all tasks in the queue, no matter what the setting is for the
 *  task-level app_engine_routing.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_AppEngineRouting *appEngineRouting;

/**
 *  HTTP request headers.
 *  This map contains the header field names and values.
 *  Headers can be set when the
 *  [task is created](google.cloud.tasks.v2beta2.CloudTasks.CreateTask).
 *  Repeated headers are not supported but a header value can contain commas.
 *  Cloud Tasks sets some headers to default values:
 *  * `User-Agent`: By default, this header is
 *  `"AppEngine-Google; (+http://code.google.com/appengine)"`.
 *  This header can be modified, but Cloud Tasks will append
 *  `"AppEngine-Google; (+http://code.google.com/appengine)"` to the
 *  modified `User-Agent`.
 *  If the task has an AppEngineHttpRequest.payload, Cloud Tasks sets the
 *  following headers:
 *  * `Content-Type`: By default, the `Content-Type` header is set to
 *  `"application/octet-stream"`. The default can be overridden by explictly
 *  setting `Content-Type` to a particular media type when the
 *  [task is created](google.cloud.tasks.v2beta2.CloudTasks.CreateTask).
 *  For example, `Content-Type` can be set to `"application/json"`.
 *  * `Content-Length`: This is computed by Cloud Tasks. This value is
 *  output only. It cannot be changed.
 *  The headers below cannot be set or overridden:
 *  * `Host`
 *  * `X-Google-*`
 *  * `X-AppEngine-*`
 *  In addition, some App Engine headers, which contain
 *  task-specific information, are also be sent to the task handler; see
 *  [request
 *  headers](/appengine/docs/python/taskqueue/push/creating-handlers#reading_request_headers).
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_AppEngineHttpRequest_Headers *headers;

/**
 *  The HTTP method to use for the request. The default is POST.
 *  The app's request handler for the task's target URL must be able to handle
 *  HTTP requests with this http_method, otherwise the task attempt will fail
 *  with error code 405 (Method Not Allowed). See
 *  [Writing a push task request
 *  handler](/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler)
 *  and the documentation for the request handlers in the language your app is
 *  written in e.g.
 *  [python
 *  RequestHandler](/appengine/docs/python/tools/webapp/requesthandlerclass).
 *
 *  Likely values:
 *    @arg @c kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Delete HTTP Delete
 *        (Value: "DELETE")
 *    @arg @c kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Get HTTP Get
 *        (Value: "GET")
 *    @arg @c kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Head HTTP Head
 *        (Value: "HEAD")
 *    @arg @c kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_HttpMethodUnspecified
 *        HTTP method unspecified (Value: "HTTP_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Post HTTP Post
 *        (Value: "POST")
 *    @arg @c kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Put HTTP Put
 *        (Value: "PUT")
 */
@property(nonatomic, copy, nullable) NSString *httpMethod;

/**
 *  Payload.
 *  The payload will be sent as the HTTP message body. A message
 *  body, and thus a payload, is allowed only if the HTTP method is
 *  POST or PUT. It is an error to set a data payload on a task with
 *  an incompatible HttpMethod.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *payload;

/**
 *  The relative URL.
 *  The relative URL must begin with "/" and must be a valid HTTP relative URL.
 *  It can contain a path and query string arguments.
 *  If the relative URL is empty, then the root path "/" will be used.
 *  No spaces are allowed, and the maximum length allowed is 2083 characters.
 */
@property(nonatomic, copy, nullable) NSString *relativeUrl;

@end


/**
 *  HTTP request headers.
 *  This map contains the header field names and values.
 *  Headers can be set when the
 *  [task is created](google.cloud.tasks.v2beta2.CloudTasks.CreateTask).
 *  Repeated headers are not supported but a header value can contain commas.
 *  Cloud Tasks sets some headers to default values:
 *  * `User-Agent`: By default, this header is
 *  `"AppEngine-Google; (+http://code.google.com/appengine)"`.
 *  This header can be modified, but Cloud Tasks will append
 *  `"AppEngine-Google; (+http://code.google.com/appengine)"` to the
 *  modified `User-Agent`.
 *  If the task has an AppEngineHttpRequest.payload, Cloud Tasks sets the
 *  following headers:
 *  * `Content-Type`: By default, the `Content-Type` header is set to
 *  `"application/octet-stream"`. The default can be overridden by explictly
 *  setting `Content-Type` to a particular media type when the
 *  [task is created](google.cloud.tasks.v2beta2.CloudTasks.CreateTask).
 *  For example, `Content-Type` can be set to `"application/json"`.
 *  * `Content-Length`: This is computed by Cloud Tasks. This value is
 *  output only. It cannot be changed.
 *  The headers below cannot be set or overridden:
 *  * `Host`
 *  * `X-Google-*`
 *  * `X-AppEngine-*`
 *  In addition, some App Engine headers, which contain
 *  task-specific information, are also be sent to the task handler; see
 *  [request
 *  headers](/appengine/docs/python/taskqueue/push/creating-handlers#reading_request_headers).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudTasks_AppEngineHttpRequest_Headers : GTLRObject
@end


/**
 *  App Engine HTTP target.
 *  The task will be delivered to the App Engine application hostname
 *  specified by its AppEngineHttpTarget and AppEngineHttpRequest.
 *  The documentation for AppEngineHttpRequest explains how the
 *  task's host URL is constructed.
 *  Using AppEngineHttpTarget requires
 *  [`appengine.applications.get`](/appengine/docs/admin-api/access-control)
 *  Google IAM permission for the project
 *  and the following scope:
 *  `https://www.googleapis.com/auth/cloud-platform`
 */
@interface GTLRCloudTasks_AppEngineHttpTarget : GTLRObject

/**
 *  Overrides for the
 *  task-level app_engine_routing.
 *  If set, AppEngineHttpTarget.app_engine_routing_override is used for
 *  all tasks in the queue, no matter what the setting is for the
 *  task-level app_engine_routing.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_AppEngineRouting *appEngineRoutingOverride;

@end


/**
 *  Deprecated. Use AppEngineHttpTarget.
 */
@interface GTLRCloudTasks_AppEngineQueueConfig : GTLRObject

/** Deprecated. Use AppEngineHttpTarget.app_engine_routing_override. */
@property(nonatomic, strong, nullable) GTLRCloudTasks_AppEngineRouting *appEngineRoutingOverride;

@end


/**
 *  App Engine Routing.
 *  For more information about services, versions, and instances see
 *  [An Overview of App
 *  Engine](/appengine/docs/python/an-overview-of-app-engine),
 *  [Microservices Architecture on Google App
 *  Engine](/appengine/docs/python/microservices-on-app-engine),
 *  [App Engine Standard request
 *  routing](/appengine/docs/standard/python/how-requests-are-routed),
 *  and [App Engine Flex request
 *  routing](/appengine/docs/flexible/python/how-requests-are-routed).
 */
@interface GTLRCloudTasks_AppEngineRouting : GTLRObject

/**
 *  Output only. The host that the task is sent to.
 *  For more information, see
 *  [How Requests are
 *  Routed](/appengine/docs/standard/python/how-requests-are-routed).
 *  The host is constructed as:
 *  * `host = [application_domain_name]`</br>
 *  `| [service] + '.' + [application_domain_name]`</br>
 *  `| [version] + '.' + [application_domain_name]`</br>
 *  `| [version_dot_service]+ '.' + [application_domain_name]`</br>
 *  `| [instance] + '.' + [application_domain_name]`</br>
 *  `| [instance_dot_service] + '.' + [application_domain_name]`</br>
 *  `| [instance_dot_version] + '.' + [application_domain_name]`</br>
 *  `| [instance_dot_version_dot_service] + '.' + [application_domain_name]`
 *  * `application_domain_name` = The domain name of the app, for
 *  example <app-id>.appspot.com, which is associated with the
 *  queue's project ID. Some tasks which were created using the App Engine
 *  SDK use a custom domain name.
 *  * `service =` AppEngineRouting.service
 *  * `version =` AppEngineRouting.version
 *  * `version_dot_service =`
 *  AppEngineRouting.version `+ '.' +` AppEngineRouting.service
 *  * `instance =` AppEngineRouting.instance
 *  * `instance_dot_service =`
 *  AppEngineRouting.instance `+ '.' +` AppEngineRouting.service
 *  * `instance_dot_version =`
 *  AppEngineRouting.instance `+ '.' +` AppEngineRouting.version
 *  * `instance_dot_version_dot_service =`
 *  AppEngineRouting.instance `+ '.' +`
 *  AppEngineRouting.version `+ '.' +` AppEngineRouting.service
 *  If AppEngineRouting.service is empty, then the task will be sent
 *  to the service which is the default service when the task is attempted.
 *  If AppEngineRouting.version is empty, then the task will be sent
 *  to the version which is the default version when the task is attempted.
 *  If AppEngineRouting.instance is empty, then the task will be sent
 *  to an instance which is available when the task is attempted.
 *  When AppEngineRouting.service is "default",
 *  AppEngineRouting.version is "default", and
 *  AppEngineRouting.instance is empty, AppEngineRouting.host is
 *  shortened to just the `application_domain_name`.
 *  If AppEngineRouting.service, AppEngineRouting.version, or
 *  AppEngineRouting.instance is invalid, then the task will be sent
 *  to the default version of the default service when the task is attempted.
 */
@property(nonatomic, copy, nullable) NSString *host;

/**
 *  App instance.
 *  By default, the task is sent to an instance which is available when
 *  the task is attempted.
 *  Requests can only be sent to a specific instance if
 *  [manual scaling is used in App Engine
 *  Standard](/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes).
 *  App Engine Flex does not support instances. For more information, see
 *  [App Engine Standard request
 *  routing](/appengine/docs/standard/python/how-requests-are-routed)
 *  and [App Engine Flex request
 *  routing](/appengine/docs/flexible/python/how-requests-are-routed).
 */
@property(nonatomic, copy, nullable) NSString *instance;

/**
 *  App service.
 *  By default, the task is sent to the service which is the default
 *  service when the task is attempted ("default").
 *  For some queues or tasks which were created using the App Engine Task Queue
 *  API, AppEngineRouting.host is not parsable into
 *  AppEngineRouting.service, AppEngineRouting.version, and
 *  AppEngineRouting.instance. For example, some tasks which were created
 *  using the App Engine SDK use a custom domain name; custom domains are not
 *  parsed by Cloud Tasks. If AppEngineRouting.host is not parsable, then
 *  AppEngineRouting.service, AppEngineRouting.version, and
 *  AppEngineRouting.instance are the empty string.
 */
@property(nonatomic, copy, nullable) NSString *service;

/**
 *  App version.
 *  By default, the task is sent to the version which is the default
 *  version when the task is attempted ("default").
 *  For some queues or tasks which were created using the App Engine Task Queue
 *  API, AppEngineRouting.host is not parsable into
 *  AppEngineRouting.service, AppEngineRouting.version, and
 *  AppEngineRouting.instance. For example, some tasks which were created
 *  using the App Engine SDK use a custom domain name; custom domains are not
 *  parsed by Cloud Tasks. If AppEngineRouting.host is not parsable, then
 *  AppEngineRouting.service, AppEngineRouting.version, and
 *  AppEngineRouting.instance are the empty string.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Deprecated. Use AppEngineHttpRequest.
 */
@interface GTLRCloudTasks_AppEngineTaskTarget : GTLRObject

/** Deprecated. Use AppEngineHttpRequest.app_engine_routing. */
@property(nonatomic, strong, nullable) GTLRCloudTasks_AppEngineRouting *appEngineRouting;

/** Deprecated. Use AppEngineHttpRequest.headers. */
@property(nonatomic, strong, nullable) GTLRCloudTasks_AppEngineTaskTarget_Headers *headers;

/**
 *  Deprecated. Use AppEngineHttpRequest.http_method.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudTasks_AppEngineTaskTarget_HttpMethod_Delete HTTP Delete
 *        (Value: "DELETE")
 *    @arg @c kGTLRCloudTasks_AppEngineTaskTarget_HttpMethod_Get HTTP Get
 *        (Value: "GET")
 *    @arg @c kGTLRCloudTasks_AppEngineTaskTarget_HttpMethod_Head HTTP Head
 *        (Value: "HEAD")
 *    @arg @c kGTLRCloudTasks_AppEngineTaskTarget_HttpMethod_HttpMethodUnspecified
 *        HTTP method unspecified (Value: "HTTP_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRCloudTasks_AppEngineTaskTarget_HttpMethod_Post HTTP Post
 *        (Value: "POST")
 *    @arg @c kGTLRCloudTasks_AppEngineTaskTarget_HttpMethod_Put HTTP Put
 *        (Value: "PUT")
 */
@property(nonatomic, copy, nullable) NSString *httpMethod;

/**
 *  Deprecated. Use AppEngineHttpRequest.payload.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *payload;

/** Deprecated. Use AppEngineHttpRequest.relative_url. */
@property(nonatomic, copy, nullable) NSString *relativeUrl;

@end


/**
 *  Deprecated. Use AppEngineHttpRequest.headers.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudTasks_AppEngineTaskTarget_Headers : GTLRObject
@end


/**
 *  The status of a task attempt.
 */
@interface GTLRCloudTasks_AttemptStatus : GTLRObject

/**
 *  Output only. The time that this attempt was dispatched.
 *  `dispatch_time` will be truncated to the nearest microsecond.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *dispatchTime;

/**
 *  Output only. The response from the target for this attempt.
 *  If the task has not been attempted or the task is currently running
 *  then the response status is google.rpc.Code.UNKNOWN.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_Status *responseStatus;

/**
 *  Output only. The time that this attempt response was received.
 *  `response_time` will be truncated to the nearest microsecond.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *responseTime;

/**
 *  Output only. The time that this attempt was scheduled.
 *  `schedule_time` will be truncated to the nearest microsecond.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleTime;

@end


/**
 *  Associates `members` with a `role`.
 */
@interface GTLRCloudTasks_Binding : GTLRObject

/**
 *  Specifies the identities requesting access for a Cloud Platform resource.
 *  `members` can have the following values:
 *  * `allUsers`: A special identifier that represents anyone who is
 *  on the internet; with or without a Google account.
 *  * `allAuthenticatedUsers`: A special identifier that represents anyone
 *  who is authenticated with a Google account or a service account.
 *  * `user:{emailid}`: An email address that represents a specific Google
 *  account. For example, `alice\@gmail.com` or `joe\@example.com`.
 *  * `serviceAccount:{emailid}`: An email address that represents a service
 *  account. For example, `my-other-app\@appspot.gserviceaccount.com`.
 *  * `group:{emailid}`: An email address that represents a Google group.
 *  For example, `admins\@example.com`.
 *  * `domain:{domain}`: A Google Apps domain name that represents all the
 *  users of that domain. For example, `google.com` or `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to `members`.
 *  For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
 *  Required
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  Request message for canceling a lease using
 *  CloudTasks.CancelLease.
 */
@interface GTLRCloudTasks_CancelLeaseRequest : GTLRObject

/**
 *  The response_view specifies which subset of the Task will be
 *  returned.
 *  By default response_view is Task.View.BASIC; not all
 *  information is retrieved by default because some data, such as
 *  payloads, might be desirable to return only when needed because
 *  of its large size or because of the sensitivity of data that it
 *  contains.
 *  Authorization for Task.View.FULL requires `cloudtasks.tasks.fullView`
 *  [Google IAM](/iam/) permission on the
 *  Task.name resource.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudTasks_CancelLeaseRequest_ResponseView_Basic The basic
 *        view omits fields which can be large or can contain
 *        sensitive data.
 *        This view does not include (AppEngineHttpRequest.payload
 *        and PullMessage.payload). These payloads are desirable to
 *        return only when needed, because they can be large and because
 *        of the sensitivity of the data that you choose to store in it. (Value:
 *        "BASIC")
 *    @arg @c kGTLRCloudTasks_CancelLeaseRequest_ResponseView_Full All
 *        information is returned.
 *        Authorization for Task.View.FULL requires
 *        `cloudtasks.tasks.fullView` [Google
 *        IAM](https://cloud.google.com/iam/)
 *        permission on the Queue.name resource. (Value: "FULL")
 *    @arg @c kGTLRCloudTasks_CancelLeaseRequest_ResponseView_ViewUnspecified
 *        Unspecified. Defaults to BASIC. (Value: "VIEW_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *responseView;

/**
 *  Required.
 *  The task's current schedule time, available in the Task.schedule_time
 *  returned in PullTasksResponse.tasks or
 *  CloudTasks.RenewLease. This restriction is to check that
 *  the caller is canceling the correct task.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleTime;

@end


/**
 *  Request message for CloudTasks.CreateTask.
 */
@interface GTLRCloudTasks_CreateTaskRequest : GTLRObject

/**
 *  The response_view specifies which subset of the Task will be
 *  returned.
 *  By default response_view is Task.View.BASIC; not all
 *  information is retrieved by default because some data, such as
 *  payloads, might be desirable to return only when needed because
 *  of its large size or because of the sensitivity of data that it
 *  contains.
 *  Authorization for Task.View.FULL requires `cloudtasks.tasks.fullView`
 *  [Google IAM](/iam/) permission on the
 *  Task.name resource.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudTasks_CreateTaskRequest_ResponseView_Basic The basic
 *        view omits fields which can be large or can contain
 *        sensitive data.
 *        This view does not include (AppEngineHttpRequest.payload
 *        and PullMessage.payload). These payloads are desirable to
 *        return only when needed, because they can be large and because
 *        of the sensitivity of the data that you choose to store in it. (Value:
 *        "BASIC")
 *    @arg @c kGTLRCloudTasks_CreateTaskRequest_ResponseView_Full All
 *        information is returned.
 *        Authorization for Task.View.FULL requires
 *        `cloudtasks.tasks.fullView` [Google
 *        IAM](https://cloud.google.com/iam/)
 *        permission on the Queue.name resource. (Value: "FULL")
 *    @arg @c kGTLRCloudTasks_CreateTaskRequest_ResponseView_ViewUnspecified
 *        Unspecified. Defaults to BASIC. (Value: "VIEW_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *responseView;

/**
 *  Required.
 *  The task to add.
 *  Task names have the following format:
 *  `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`.
 *  The user can optionally specify a name for the task in
 *  Task.name. If a name is not specified then the system will
 *  generate a random unique task id, which will be returned in the
 *  response's Task.name.
 *  If Task.schedule_time is not set or is in the past then Cloud
 *  Tasks will set it to the current time.
 *  Task De-duplication:
 *  Explicitly specifying a task ID enables task de-duplication. If
 *  a task's ID is identical to that of an existing task or a task
 *  that was deleted or completed recently then the call will fail
 *  with google.rpc.Code.ALREADY_EXISTS. If the task's queue was
 *  created using Cloud Tasks, then another task with the same name
 *  can't be created for ~1hour after the original task was deleted
 *  or completed. If the task's queue was created using queue.yaml or
 *  queue.xml, then another task with the same name can't be created
 *  for ~9days after the original task was deleted or completed.
 *  Because there is an extra lookup cost to identify duplicate task
 *  names, these CloudTasks.CreateTask calls have significantly
 *  increased latency. Using hashed strings for the task id or for
 *  the prefix of the task id is recommended. Choosing task ids that
 *  are sequential or have sequential prefixes, for example using a
 *  timestamp, causes an increase in latency and error rates in all
 *  task commands. The infrastructure relies on an approximately
 *  uniform distribution of task ids to store and serve tasks
 *  efficiently.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_Task *task;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRCloudTasks_Empty : GTLRObject
@end


/**
 *  Request message for `GetIamPolicy` method.
 */
@interface GTLRCloudTasks_GetIamPolicyRequest : GTLRObject
@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudTasks_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudTasks_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for CloudTasks.ListQueues.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "queues" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudTasks_ListQueuesResponse : GTLRCollectionObject

/**
 *  A token to retrieve next page of results.
 *  To return the next page of results, call
 *  CloudTasks.ListQueues with this value as the
 *  ListQueuesRequest.page_token.
 *  If the next_page_token is empty, there are no more results.
 *  The page token is valid for only 2 hours.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of queues.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudTasks_Queue *> *queues;

@end


/**
 *  Response message for listing tasks using CloudTasks.ListTasks.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "tasks" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudTasks_ListTasksResponse : GTLRCollectionObject

/**
 *  A token to retrieve next page of results.
 *  To return the next page of results, call
 *  CloudTasks.ListTasks with this value as the
 *  ListTasksRequest.page_token.
 *  If the next_page_token is empty, there are no more results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of tasks.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudTasks_Task *> *tasks;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRCloudTasks_Location : GTLRObject

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations.
 *  For example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudTasks_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudTasks_Location_Metadata : GTLRObject
@end


/**
 *  Request message for CloudTasks.PauseQueue.
 */
@interface GTLRCloudTasks_PauseQueueRequest : GTLRObject
@end


/**
 *  Defines an Identity and Access Management (IAM) policy. It is used to
 *  specify access control policies for Cloud Platform resources.
 *  A `Policy` consists of a list of `bindings`. A `Binding` binds a list of
 *  `members` to a `role`, where the members can be user accounts, Google
 *  groups,
 *  Google domains, and service accounts. A `role` is a named list of
 *  permissions
 *  defined by IAM.
 *  **Example**
 *  {
 *  "bindings": [
 *  {
 *  "role": "roles/owner",
 *  "members": [
 *  "user:mike\@example.com",
 *  "group:admins\@example.com",
 *  "domain:google.com",
 *  "serviceAccount:my-other-app\@appspot.gserviceaccount.com",
 *  ]
 *  },
 *  {
 *  "role": "roles/viewer",
 *  "members": ["user:sean\@example.com"]
 *  }
 *  ]
 *  }
 *  For a description of IAM and its features, see the
 *  [IAM developer's guide](https://cloud.google.com/iam).
 */
@interface GTLRCloudTasks_Policy : GTLRObject

/**
 *  Associates a list of `members` to a `role`.
 *  `bindings` with no members will result in an error.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudTasks_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help
 *  prevent simultaneous updates of a policy from overwriting each other.
 *  It is strongly suggested that systems make use of the `etag` in the
 *  read-modify-write cycle to perform policy updates in order to avoid race
 *  conditions: An `etag` is returned in the response to `getIamPolicy`, and
 *  systems are expected to put that etag in the request to `setIamPolicy` to
 *  ensure that their change will be applied to the same version of the policy.
 *  If no `etag` is provided in the call to `setIamPolicy`, then the existing
 *  policy is overwritten blindly.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Version of the `Policy`. The default version is 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  The pull message contains data that can be used by the caller of
 *  CloudTasks.PullTasks to process the task.
 *  This proto can only be used for tasks in a queue which has
 *  Queue.pull_target set.
 */
@interface GTLRCloudTasks_PullMessage : GTLRObject

/**
 *  A data payload consumed by the task worker to execute the task.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *payload;

/**
 *  The task's tag.
 *  Tags allow similar tasks to be processed in a batch. If you label
 *  tasks with a tag, your task worker can pull tasks
 *  with the same tag using PullTasksRequest.filter. For example,
 *  if you want to aggregate the events associated with a specific
 *  user once a day, you could tag tasks with the user ID.
 *  The task's tag can only be set when the
 *  task is created.
 *  The tag must be less than 500 bytes.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *tag;

@end


/**
 *  Deprecated. Use PullTarget.
 */
@interface GTLRCloudTasks_PullQueueConfig : GTLRObject
@end


/**
 *  Pull target.
 */
@interface GTLRCloudTasks_PullTarget : GTLRObject
@end


/**
 *  Request message for pulling tasks using CloudTasks.PullTasks.
 */
@interface GTLRCloudTasks_PullTasksRequest : GTLRObject

/**
 *  `filter` can be used to specify a subset of tasks to lease.
 *  When `filter` is set to `tag=<my-tag>` then the
 *  PullTasksResponse will contain only tasks whose
 *  PullMessage.tag is equal to `<my-tag>`. `<my-tag>` must be less than
 *  500 bytes.
 *  When `filter` is set to `tag_function=oldest_tag()`, only tasks which have
 *  the same tag as the task with the oldest schedule_time will be returned.
 *  Grammar Syntax:
 *  * `filter = "tag=" tag | "tag_function=" function`
 *  * `tag = string | bytes`
 *  * `function = "oldest_tag()"`
 *  The `oldest_tag()` function returns tasks which have the same tag as the
 *  oldest task (ordered by schedule time).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The duration of the lease.
 *  Each task returned in the PullTasksResponse will have its
 *  Task.schedule_time set to the current time plus the
 *  `lease_duration`. A task that has been returned in a
 *  PullTasksResponse is leased -- that task will not be
 *  returned in a different PullTasksResponse before the
 *  Task.schedule_time.
 *  After the lease holder has successfully finished the work
 *  associated with the task, the lease holder must call
 *  CloudTasks.AcknowledgeTask. If the task is not acknowledged
 *  via CloudTasks.AcknowledgeTask before the
 *  Task.schedule_time then it will be returned in a later
 *  PullTasksResponse so that another lease holder can process
 *  it.
 *  The maximum lease duration is 1 week.
 *  `lease_duration` will be truncated to the nearest second.
 */
@property(nonatomic, strong, nullable) GTLRDuration *leaseDuration;

/**
 *  The maximum number of tasks to lease. The maximum that can be
 *  requested is 1000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxTasks;

/**
 *  The response_view specifies which subset of the Task will be
 *  returned.
 *  By default response_view is Task.View.BASIC; not all
 *  information is retrieved by default because some data, such as
 *  payloads, might be desirable to return only when needed because
 *  of its large size or because of the sensitivity of data that it
 *  contains.
 *  Authorization for Task.View.FULL requires `cloudtasks.tasks.fullView`
 *  [Google IAM](/iam/) permission on the
 *  Task.name resource.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudTasks_PullTasksRequest_ResponseView_Basic The basic view
 *        omits fields which can be large or can contain
 *        sensitive data.
 *        This view does not include (AppEngineHttpRequest.payload
 *        and PullMessage.payload). These payloads are desirable to
 *        return only when needed, because they can be large and because
 *        of the sensitivity of the data that you choose to store in it. (Value:
 *        "BASIC")
 *    @arg @c kGTLRCloudTasks_PullTasksRequest_ResponseView_Full All information
 *        is returned.
 *        Authorization for Task.View.FULL requires
 *        `cloudtasks.tasks.fullView` [Google
 *        IAM](https://cloud.google.com/iam/)
 *        permission on the Queue.name resource. (Value: "FULL")
 *    @arg @c kGTLRCloudTasks_PullTasksRequest_ResponseView_ViewUnspecified
 *        Unspecified. Defaults to BASIC. (Value: "VIEW_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *responseView;

@end


/**
 *  Response message for pulling tasks using CloudTasks.PullTasks.
 */
@interface GTLRCloudTasks_PullTasksResponse : GTLRObject

/** The leased tasks. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudTasks_Task *> *tasks;

@end


/**
 *  Deprecated. Use PullMessage.
 */
@interface GTLRCloudTasks_PullTaskTarget : GTLRObject

/**
 *  Deprecated. Use PullMessage.payload.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *payload;

/**
 *  Deprecated. Use PullMessage.tag.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *tag;

@end


/**
 *  Request message for CloudTasks.PurgeQueue.
 */
@interface GTLRCloudTasks_PurgeQueueRequest : GTLRObject
@end


/**
 *  A queue is a container of related tasks. Queues are configured to manage
 *  how those tasks are dispatched. Configurable properties include rate limits,
 *  retry options, target types, and others.
 */
@interface GTLRCloudTasks_Queue : GTLRObject

/**
 *  App Engine HTTP target.
 *  An App Engine queue is a queue that has an AppEngineHttpTarget.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_AppEngineHttpTarget *appEngineHttpTarget;

/** Deprecated. Use Queue.app_engine_http_target. */
@property(nonatomic, strong, nullable) GTLRCloudTasks_AppEngineQueueConfig *appEngineQueueConfig;

/**
 *  The queue name.
 *  The queue name must have the following format:
 *  `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`
 *  * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]),
 *  hyphens (-), colons (:), or periods (.).
 *  * `LOCATION_ID` is the canonical ID for the queue's location.
 *  The list of available locations can be obtained by calling
 *  google.cloud.location.Locations.ListLocations.
 *  For more information, see https://cloud.google.com/about/locations/.
 *  * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or
 *  hyphens (-). The maximum length is 100 characters.
 *  Caller-specified and required in CreateQueueRequest, after which
 *  it becomes output only.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Deprecated. Use Queue.pull_target. */
@property(nonatomic, strong, nullable) GTLRCloudTasks_PullQueueConfig *pullQueueConfig;

/**
 *  Pull target.
 *  A pull queue is a queue that has a PullTarget.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_PullTarget *pullTarget;

/**
 *  Output only. The last time this queue was purged.
 *  All tasks that were created before this time
 *  were purged.
 *  A queue can be purged using CloudTasks.PurgeQueue, the
 *  [App Engine Task Queue SDK, or the Cloud
 *  Console](/appengine/docs/standard/python/taskqueue/push/deleting-tasks-and-queues#purging_all_tasks_from_a_queue).
 *  Purge time will be truncated to the nearest microsecond. Purge
 *  time will be zero if the queue has never been purged.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *purgeTime;

/**
 *  Rate limits for task dispatches.
 *  Queue.rate_limits and Queue.retry_config are related because they
 *  both control task attempts however they control how tasks are attempted in
 *  different ways:
 *  * Queue.rate_limits controls the total rate of dispatches from a queue
 *  (i.e. all traffic dispatched from the queue, regardless of whether the
 *  dispatch is from a first attempt or a retry).
 *  * Queue.retry_config controls what happens to particular a task after
 *  its first attempt fails. That is, Queue.retry_config controls task
 *  retries (the second attempt, third attempt, etc).
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_RateLimits *rateLimits;

/**
 *  Settings that determine the retry behavior.
 *  * For tasks created using Cloud Tasks: the queue-level retry settings
 *  apply to all tasks in the queue that were created using Cloud Tasks.
 *  Retry settings cannot be set on individual tasks.
 *  * For tasks created using the App Engine SDK: the queue-level retry
 *  settings apply to all tasks in the queue which do not have retry settings
 *  explicitly set on the task and were created by the App Engine SDK. See
 *  [App Engine
 *  documentation](/appengine/docs/standard/python/taskqueue/push/retrying-tasks).
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_RetryConfig *retryConfig;

/**
 *  Output only. The state of the queue.
 *  `state` can only be changed by called
 *  CloudTasks.PauseQueue, CloudTasks.ResumeQueue, or uploading
 *  [queue.yaml](/appengine/docs/python/config/queueref).
 *  CloudTasks.UpdateQueue cannot be used to change `state`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudTasks_Queue_State_Disabled The queue is disabled.
 *        A queue becomes `DISABLED` when
 *        [queue.yaml](/appengine/docs/python/config/queueref) or
 *        [queue.xml](appengine/docs/standard/java/config/queueref) is uploaded
 *        which does not contain the queue. You cannot directly disable a queue.
 *        When a queue is disabled, tasks can still be added to a queue
 *        but the tasks are not dispatched and CloudTasks.PullTasks calls
 *        return a `FAILED_PRECONDITION` error.
 *        To permanently delete this queue and all of its tasks, call
 *        CloudTasks.DeleteQueue. (Value: "DISABLED")
 *    @arg @c kGTLRCloudTasks_Queue_State_Paused Tasks are paused by the user.
 *        If the queue is paused then Cloud
 *        Tasks will stop delivering tasks from it, but more tasks can
 *        still be added to it by the user. When a pull queue is paused,
 *        all CloudTasks.PullTasks calls will return a
 *        `FAILED_PRECONDITION` error. (Value: "PAUSED")
 *    @arg @c kGTLRCloudTasks_Queue_State_Running The queue is running. Tasks
 *        can be dispatched. (Value: "RUNNING")
 *    @arg @c kGTLRCloudTasks_Queue_State_StateUnspecified Unspecified state.
 *        (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Rate limits.
 *  This message determines the maximum rate that tasks can be dispatched by a
 *  queue, regardless of whether the dispatch is a first task attempt or a
 *  retry.
 */
@interface GTLRCloudTasks_RateLimits : GTLRObject

/**
 *  Output only. The max burst size.
 *  Max burst size limits how fast the queue is processed when many
 *  tasks are in the queue and the rate is high. This field allows
 *  the queue to have a high rate so processing starts shortly after
 *  a task is enqueued, but still limits resource usage when many
 *  tasks are enqueued in a short period of time.
 *  * For App Engine queues, if
 *  RateLimits.max_tasks_dispatched_per_second is 1, this
 *  field is 10; otherwise this field is
 *  RateLimits.max_tasks_dispatched_per_second / 5.
 *  * For pull queues, this field is output only and always 10,000.
 *  Note: For App Engine queues that were created through
 *  `queue.yaml/xml`, `max_burst_size` might not have the same
 *  settings as specified above; CloudTasks.UpdateQueue can be
 *  used to set `max_burst_size` only to the values specified above.
 *  This field has the same meaning as
 *  [bucket_size in
 *  queue.yaml](/appengine/docs/standard/python/config/queueref#bucket_size).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxBurstSize;

/**
 *  The maximum number of concurrent tasks that Cloud Tasks allows
 *  to be dispatched for this queue. After this threshold has been
 *  reached, Cloud Tasks stops dispatching tasks until the number of
 *  concurrent requests decreases.
 *  The maximum allowed value is 5,000.
 *  * For App Engine queues, this field is 10 by default.
 *  * For pull queues, this field is output only and always -1, which
 *  indicates no limit.
 *  This field has the same meaning as
 *  [max_concurrent_requests in
 *  queue.yaml](/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxConcurrentTasks;

/**
 *  The maximum rate at which tasks are dispatched from this
 *  queue.
 *  The maximum allowed value is 500.
 *  * For App Engine queues, this field is 1 by default.
 *  * For pull queues, this field is output only and always 10,000.
 *  In addition to the `max_tasks_dispatched_per_second` limit, a maximum of
 *  10 QPS of CloudTasks.PullTasks requests are allowed per queue.
 *  This field has the same meaning as
 *  [rate in queue.yaml](/appengine/docs/standard/python/config/queueref#rate).
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxTasksDispatchedPerSecond;

@end


/**
 *  Request message for renewing a lease using CloudTasks.RenewLease.
 */
@interface GTLRCloudTasks_RenewLeaseRequest : GTLRObject

/**
 *  Required.
 *  The desired new lease duration, starting from now.
 *  The maximum lease duration is 1 week.
 *  `lease_duration` will be truncated to the nearest second.
 */
@property(nonatomic, strong, nullable) GTLRDuration *leaseDuration;

/**
 *  The response_view specifies which subset of the Task will be
 *  returned.
 *  By default response_view is Task.View.BASIC; not all
 *  information is retrieved by default because some data, such as
 *  payloads, might be desirable to return only when needed because
 *  of its large size or because of the sensitivity of data that it
 *  contains.
 *  Authorization for Task.View.FULL requires `cloudtasks.tasks.fullView`
 *  [Google IAM](/iam/) permission on the
 *  Task.name resource.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudTasks_RenewLeaseRequest_ResponseView_Basic The basic
 *        view omits fields which can be large or can contain
 *        sensitive data.
 *        This view does not include (AppEngineHttpRequest.payload
 *        and PullMessage.payload). These payloads are desirable to
 *        return only when needed, because they can be large and because
 *        of the sensitivity of the data that you choose to store in it. (Value:
 *        "BASIC")
 *    @arg @c kGTLRCloudTasks_RenewLeaseRequest_ResponseView_Full All
 *        information is returned.
 *        Authorization for Task.View.FULL requires
 *        `cloudtasks.tasks.fullView` [Google
 *        IAM](https://cloud.google.com/iam/)
 *        permission on the Queue.name resource. (Value: "FULL")
 *    @arg @c kGTLRCloudTasks_RenewLeaseRequest_ResponseView_ViewUnspecified
 *        Unspecified. Defaults to BASIC. (Value: "VIEW_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *responseView;

/**
 *  Required.
 *  The task's current schedule time, available in the Task.schedule_time
 *  returned in PullTasksResponse.tasks or
 *  CloudTasks.RenewLease. This restriction is to check that
 *  the caller is renewing the correct task.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleTime;

@end


/**
 *  Request message for CloudTasks.ResumeQueue.
 */
@interface GTLRCloudTasks_ResumeQueueRequest : GTLRObject
@end


/**
 *  Retry config.
 *  These settings determine how a failed task attempt is retried.
 */
@interface GTLRCloudTasks_RetryConfig : GTLRObject

/**
 *  The maximum number of attempts for a task.
 *  Cloud Tasks will attempt the task `max_attempts` times (that
 *  is, if the first attempt fails, then there will be
 *  `max_attempts - 1` retries). Must be > 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxAttempts;

/**
 *  The maximum amount of time to wait before retrying a task after
 *  it fails. The default is 1 hour.
 *  * For [App Engine queues](google.cloud.tasks.v2beta2.AppEngineHttpTarget),
 *  this field is 1 hour by default.
 *  * For [pull queues](google.cloud.tasks.v2beta2.PullTarget), this field
 *  is output only and always 0.
 *  `max_backoff` will be truncated to the nearest second.
 *  This field has the same meaning as
 *  [max_backoff_seconds in
 *  queue.yaml](/appengine/docs/standard/python/config/queueref#retry_parameters).
 */
@property(nonatomic, strong, nullable) GTLRDuration *maxBackoff;

/**
 *  The time between retries will double `max_doublings` times.
 *  A task's retry interval starts at RetryConfig.min_backoff,
 *  then doubles `max_doublings` times, then increases linearly, and
 *  finally retries retries at intervals of
 *  RetryConfig.max_backoff up to max_attempts times.
 *  For example, if RetryConfig.min_backoff is 10s,
 *  RetryConfig.max_backoff is 300s, and `max_doublings` is 3,
 *  then the a task will first be retried in 10s. The retry interval
 *  will double three times, and then increase linearly by 2^3 * 10s.
 *  Finally, the task will retry at intervals of
 *  RetryConfig.max_backoff until the task has been attempted
 *  `max_attempts` times. Thus, the requests will retry at 10s, 20s,
 *  40s, 80s, 160s, 240s, 300s, 300s, ....
 *  * For [App Engine queues](google.cloud.tasks.v2beta2.AppEngineHttpTarget),
 *  this field is 16 by default.
 *  * For [pull queues](google.cloud.tasks.v2beta2.PullTarget), this field
 *  is output only and always 0.
 *  This field has the same meaning as
 *  [max_doublings in
 *  queue.yaml](/appengine/docs/standard/python/config/queueref#retry_parameters).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxDoublings;

/**
 *  If positive, `max_retry_duration` specifies the time limit for retrying a
 *  failed task, measured from when the task was first attempted. Once
 *  `max_retry_duration` time has passed *and* the task has been attempted
 *  RetryConfig.max_attempts times, no further attempts will be made and
 *  the task will be deleted.
 *  If zero, then the task age is unlimited.
 *  * For [App Engine queues](google.cloud.tasks.v2beta2.AppEngineHttpTarget),
 *  this field is 0 seconds by default.
 *  * For [pull queues](google.cloud.tasks.v2beta2.PullTarget), this
 *  field is output only and always 0.
 *  `max_retry_duration` will be truncated to the nearest second.
 *  This field has the same meaning as
 *  [task_age_limit in
 *  queue.yaml](/appengine/docs/standard/python/config/queueref#retry_parameters).
 */
@property(nonatomic, strong, nullable) GTLRDuration *maxRetryDuration;

/**
 *  The minimum amount of time to wait before retrying a task after
 *  it fails.
 *  * For [App Engine queues](google.cloud.tasks.v2beta2.AppEngineHttpTarget),
 *  this field is 0.1 seconds by default.
 *  * For [pull queues](google.cloud.tasks.v2beta2.PullTarget), this
 *  field is output only and always 0.
 *  `min_backoff` will be truncated to the nearest second.
 *  This field has the same meaning as
 *  [min_backoff_seconds in
 *  queue.yaml](/appengine/docs/standard/python/config/queueref#retry_parameters).
 */
@property(nonatomic, strong, nullable) GTLRDuration *minBackoff;

/**
 *  If true, then the number of attempts is unlimited.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *unlimitedAttempts;

@end


/**
 *  Request message for forcing a task to run now using
 *  CloudTasks.RunTask.
 */
@interface GTLRCloudTasks_RunTaskRequest : GTLRObject

/**
 *  The response_view specifies which subset of the Task will be
 *  returned.
 *  By default response_view is Task.View.BASIC; not all
 *  information is retrieved by default because some data, such as
 *  payloads, might be desirable to return only when needed because
 *  of its large size or because of the sensitivity of data that it
 *  contains.
 *  Authorization for Task.View.FULL requires `cloudtasks.tasks.fullView`
 *  [Google IAM](/iam/) permission on the
 *  Task.name resource.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudTasks_RunTaskRequest_ResponseView_Basic The basic view
 *        omits fields which can be large or can contain
 *        sensitive data.
 *        This view does not include (AppEngineHttpRequest.payload
 *        and PullMessage.payload). These payloads are desirable to
 *        return only when needed, because they can be large and because
 *        of the sensitivity of the data that you choose to store in it. (Value:
 *        "BASIC")
 *    @arg @c kGTLRCloudTasks_RunTaskRequest_ResponseView_Full All information
 *        is returned.
 *        Authorization for Task.View.FULL requires
 *        `cloudtasks.tasks.fullView` [Google
 *        IAM](https://cloud.google.com/iam/)
 *        permission on the Queue.name resource. (Value: "FULL")
 *    @arg @c kGTLRCloudTasks_RunTaskRequest_ResponseView_ViewUnspecified
 *        Unspecified. Defaults to BASIC. (Value: "VIEW_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *responseView;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRCloudTasks_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a
 *  valid policy but certain Cloud Platform services (such as Projects)
 *  might reject them.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_Policy *policy;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRCloudTasks_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudTasks_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudTasks_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudTasks_Status_Details_Item : GTLRObject
@end


/**
 *  A unit of scheduled work.
 */
@interface GTLRCloudTasks_Task : GTLRObject

/**
 *  App Engine HTTP request that is sent to the task's target. Can be set
 *  only if Queue.app_engine_http_target is set.
 *  An App Engine task is a task that has AppEngineHttpRequest set.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_AppEngineHttpRequest *appEngineHttpRequest;

/** Deprecated. Use Task.app_engine_http_request. */
@property(nonatomic, strong, nullable) GTLRCloudTasks_AppEngineTaskTarget *appEngineTaskTarget;

/**
 *  Output only. The time that the task was created.
 *  `create_time` will be truncated to the nearest second.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The task name.
 *  The task name must have the following format:
 *  `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`
 *  * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]),
 *  hyphens (-), colons (:), or periods (.).
 *  * `LOCATION_ID` is the canonical ID for the task's location.
 *  The list of available locations can be obtained by calling
 *  google.cloud.location.Locations.ListLocations.
 *  For more information, see https://cloud.google.com/about/locations/.
 *  * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or
 *  hyphens (-). The maximum length is 100 characters.
 *  * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]),
 *  hyphens (-), or underscores (_). The maximum length is 500 characters.
 *  Optionally caller-specified in CreateTaskRequest.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Pull message contains data that should be used by the caller of
 *  CloudTasks.PullTasks to process the task. Can be set only if
 *  Queue.pull_target is set.
 *  A pull task is a task that has PullMessage set.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_PullMessage *pullMessage;

/** Deprecated. Use Task.pull_message. */
@property(nonatomic, strong, nullable) GTLRCloudTasks_PullTaskTarget *pullTaskTarget;

/**
 *  The time when the task is scheduled to be attempted.
 *  For pull queues, this is the time when the task is available to
 *  be leased; if a task is currently leased, this is the time when
 *  the current lease expires, that is, the time that the task was
 *  leased plus the PullTasksRequest.lease_duration.
 *  For App Engine queues, this is when the task will be attempted or retried.
 *  `schedule_time` will be truncated to the nearest microsecond.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleTime;

/** Output only. The task status. */
@property(nonatomic, strong, nullable) GTLRCloudTasks_TaskStatus *taskStatus;

/**
 *  Output only. The view specifies which subset of the Task has
 *  been returned.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudTasks_Task_View_Basic The basic view omits fields which
 *        can be large or can contain
 *        sensitive data.
 *        This view does not include (AppEngineHttpRequest.payload
 *        and PullMessage.payload). These payloads are desirable to
 *        return only when needed, because they can be large and because
 *        of the sensitivity of the data that you choose to store in it. (Value:
 *        "BASIC")
 *    @arg @c kGTLRCloudTasks_Task_View_Full All information is returned.
 *        Authorization for Task.View.FULL requires
 *        `cloudtasks.tasks.fullView` [Google
 *        IAM](https://cloud.google.com/iam/)
 *        permission on the Queue.name resource. (Value: "FULL")
 *    @arg @c kGTLRCloudTasks_Task_View_ViewUnspecified Unspecified. Defaults to
 *        BASIC. (Value: "VIEW_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *view;

@end


/**
 *  Status of the task.
 */
@interface GTLRCloudTasks_TaskStatus : GTLRObject

/**
 *  Output only. The number of attempts dispatched.
 *  This count includes tasks which have been dispatched but haven't
 *  received a response.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *attemptDispatchCount;

/**
 *  Output only. The number of attempts which have received a response.
 *  This field is not calculated for
 *  [pull tasks](google.cloud.tasks.v2beta2.PullTaskTarget).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *attemptResponseCount;

/**
 *  Output only. The status of the task's first attempt.
 *  Only AttemptStatus.dispatch_time will be set.
 *  The other AttemptStatus information is not retained by Cloud Tasks.
 *  This field is not calculated for
 *  [pull tasks](google.cloud.tasks.v2beta2.PullTaskTarget).
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_AttemptStatus *firstAttemptStatus;

/**
 *  Output only. The status of the task's last attempt.
 *  This field is not calculated for
 *  [pull tasks](google.cloud.tasks.v2beta2.PullTaskTarget).
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_AttemptStatus *lastAttemptStatus;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRCloudTasks_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as '*' or 'storage.*') are not allowed. For more
 *  information see
 *  [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRCloudTasks_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is
 *  allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
