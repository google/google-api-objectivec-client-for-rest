// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   URL Shortener API (urlshortener/v1)
// Description:
//   Lets you create, inspect, and manage goo.gl short URLs
// Documentation:
//   https://developers.google.com/url-shortener/v1/getting_started

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRURLShortener_AnalyticsSnapshot;
@class GTLRURLShortener_AnalyticsSummary;
@class GTLRURLShortener_StringCount;
@class GTLRURLShortener_Url;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  GTLRURLShortener_AnalyticsSnapshot
 */
@interface GTLRURLShortener_AnalyticsSnapshot : GTLRObject

/**
 *  Top browsers, e.g. "Chrome"; sorted by (descending) click counts. Only
 *  present if this data is available.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRURLShortener_StringCount *> *browsers;

/**
 *  Top countries (expressed as country codes), e.g. "US" or "DE"; sorted by
 *  (descending) click counts. Only present if this data is available.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRURLShortener_StringCount *> *countries;

/**
 *  Number of clicks on all goo.gl short URLs pointing to this long URL.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longUrlClicks;

/**
 *  Top platforms or OSes, e.g. "Windows"; sorted by (descending) click counts.
 *  Only present if this data is available.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRURLShortener_StringCount *> *platforms;

/**
 *  Top referring hosts, e.g. "www.google.com"; sorted by (descending) click
 *  counts. Only present if this data is available.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRURLShortener_StringCount *> *referrers;

/**
 *  Number of clicks on this short URL.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shortUrlClicks;

@end


/**
 *  GTLRURLShortener_AnalyticsSummary
 */
@interface GTLRURLShortener_AnalyticsSummary : GTLRObject

/** Click analytics over all time. */
@property(nonatomic, strong, nullable) GTLRURLShortener_AnalyticsSnapshot *allTime;

/** Click analytics over the last day. */
@property(nonatomic, strong, nullable) GTLRURLShortener_AnalyticsSnapshot *day;

/** Click analytics over the last month. */
@property(nonatomic, strong, nullable) GTLRURLShortener_AnalyticsSnapshot *month;

/** Click analytics over the last two hours. */
@property(nonatomic, strong, nullable) GTLRURLShortener_AnalyticsSnapshot *twoHours;

/** Click analytics over the last week. */
@property(nonatomic, strong, nullable) GTLRURLShortener_AnalyticsSnapshot *week;

@end


/**
 *  GTLRURLShortener_StringCount
 */
@interface GTLRURLShortener_StringCount : GTLRObject

/**
 *  Number of clicks for this top entry, e.g. for this particular country or
 *  browser.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  Label assigned to this top entry, e.g. "US" or "Chrome".
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  GTLRURLShortener_Url
 */
@interface GTLRURLShortener_Url : GTLRObject

/**
 *  A summary of the click analytics for the short and long URL. Might not be
 *  present if not requested or currently unavailable.
 */
@property(nonatomic, strong, nullable) GTLRURLShortener_AnalyticsSummary *analytics;

/**
 *  Time the short URL was created; ISO 8601 representation using the
 *  yyyy-MM-dd'T'HH:mm:ss.SSSZZ format, e.g. "2010-10-14T19:01:24.944+00:00".
 */
@property(nonatomic, copy, nullable) NSString *created;

/**
 *  Short URL, e.g. "http://goo.gl/l6MS".
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The fixed string "urlshortener#url". */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Long URL, e.g. "http://www.google.com/". Might not be present if the status
 *  is "REMOVED".
 */
@property(nonatomic, copy, nullable) NSString *longUrl;

/**
 *  Status of the target URL. Possible values: "OK", "MALWARE", "PHISHING", or
 *  "REMOVED". A URL might be marked "REMOVED" if it was flagged as spam, for
 *  example.
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  GTLRURLShortener_UrlHistory
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRURLShortener_UrlHistory : GTLRCollectionObject

/**
 *  A list of URL resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRURLShortener_Url *> *items;

/**
 *  Number of items returned with each full "page" of results. Note that the
 *  last page could have fewer items than the "itemsPerPage" value.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *itemsPerPage;

/** The fixed string "urlshortener#urlHistory". */
@property(nonatomic, copy, nullable) NSString *kind;

/** A token to provide to get the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Total number of short URLs associated with this user (may be approximate).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalItems;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
