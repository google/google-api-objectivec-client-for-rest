// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Resource Manager API (cloudresourcemanager/v2)
// Description:
//   Creates, reads, and updates metadata for Google Cloud Platform resource
//   containers.
// Documentation:
//   https://cloud.google.com/resource-manager

#import "GTLRCloudResourceManagerQuery.h"

#import "GTLRCloudResourceManagerObjects.h"

@implementation GTLRCloudResourceManagerQuery

@dynamic fields;

@end

@implementation GTLRCloudResourceManagerQuery_FoldersCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRCloudResourceManager_Folder *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v2/folders";
  GTLRCloudResourceManagerQuery_FoldersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRCloudResourceManager_Operation class];
  query.loggingName = @"cloudresourcemanager.folders.create";
  return query;
}

@end

@implementation GTLRCloudResourceManagerQuery_FoldersDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRCloudResourceManagerQuery_FoldersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudResourceManager_Folder class];
  query.loggingName = @"cloudresourcemanager.folders.delete";
  return query;
}

@end

@implementation GTLRCloudResourceManagerQuery_FoldersGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRCloudResourceManagerQuery_FoldersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudResourceManager_Folder class];
  query.loggingName = @"cloudresourcemanager.folders.get";
  return query;
}

@end

@implementation GTLRCloudResourceManagerQuery_FoldersGetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRCloudResourceManager_GetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v2/{+resource}:getIamPolicy";
  GTLRCloudResourceManagerQuery_FoldersGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudResourceManager_Policy class];
  query.loggingName = @"cloudresourcemanager.folders.getIamPolicy";
  return query;
}

@end

@implementation GTLRCloudResourceManagerQuery_FoldersList

@dynamic pageSize, pageToken, parent, showDeleted;

+ (instancetype)query {
  NSString *pathURITemplate = @"v2/folders";
  GTLRCloudResourceManagerQuery_FoldersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRCloudResourceManager_ListFoldersResponse class];
  query.loggingName = @"cloudresourcemanager.folders.list";
  return query;
}

@end

@implementation GTLRCloudResourceManagerQuery_FoldersMove

@dynamic name;

+ (instancetype)queryWithObject:(GTLRCloudResourceManager_MoveFolderRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:move";
  GTLRCloudResourceManagerQuery_FoldersMove *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudResourceManager_Operation class];
  query.loggingName = @"cloudresourcemanager.folders.move";
  return query;
}

@end

@implementation GTLRCloudResourceManagerQuery_FoldersPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRCloudResourceManager_Folder *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRCloudResourceManagerQuery_FoldersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudResourceManager_Folder class];
  query.loggingName = @"cloudresourcemanager.folders.patch";
  return query;
}

@end

@implementation GTLRCloudResourceManagerQuery_FoldersSearch

+ (instancetype)queryWithObject:(GTLRCloudResourceManager_SearchFoldersRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v2/folders:search";
  GTLRCloudResourceManagerQuery_FoldersSearch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRCloudResourceManager_SearchFoldersResponse class];
  query.loggingName = @"cloudresourcemanager.folders.search";
  return query;
}

@end

@implementation GTLRCloudResourceManagerQuery_FoldersSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRCloudResourceManager_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v2/{+resource}:setIamPolicy";
  GTLRCloudResourceManagerQuery_FoldersSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudResourceManager_Policy class];
  query.loggingName = @"cloudresourcemanager.folders.setIamPolicy";
  return query;
}

@end

@implementation GTLRCloudResourceManagerQuery_FoldersTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRCloudResourceManager_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v2/{+resource}:testIamPermissions";
  GTLRCloudResourceManagerQuery_FoldersTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudResourceManager_TestIamPermissionsResponse class];
  query.loggingName = @"cloudresourcemanager.folders.testIamPermissions";
  return query;
}

@end

@implementation GTLRCloudResourceManagerQuery_FoldersUndelete

@dynamic name;

+ (instancetype)queryWithObject:(GTLRCloudResourceManager_UndeleteFolderRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:undelete";
  GTLRCloudResourceManagerQuery_FoldersUndelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudResourceManager_Folder class];
  query.loggingName = @"cloudresourcemanager.folders.undelete";
  return query;
}

@end

@implementation GTLRCloudResourceManagerQuery_OperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudResourceManagerQuery_OperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudResourceManager_Operation class];
  query.loggingName = @"cloudresourcemanager.operations.get";
  return query;
}

@end
