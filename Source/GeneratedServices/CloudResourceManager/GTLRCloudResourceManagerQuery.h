// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Cloud Resource Manager API (cloudresourcemanager/v1)
// Description:
//   The Google Cloud Resource Manager API provides methods for creating,
//   reading, and updating project metadata.
// Documentation:
//   https://cloud.google.com/resource-manager

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudResourceManager_ClearOrgPolicyRequest;
@class GTLRCloudResourceManager_GetAncestryRequest;
@class GTLRCloudResourceManager_GetEffectiveOrgPolicyRequest;
@class GTLRCloudResourceManager_GetIamPolicyRequest;
@class GTLRCloudResourceManager_GetOrgPolicyRequest;
@class GTLRCloudResourceManager_Lien;
@class GTLRCloudResourceManager_ListAvailableOrgPolicyConstraintsRequest;
@class GTLRCloudResourceManager_ListOrgPoliciesRequest;
@class GTLRCloudResourceManager_Project;
@class GTLRCloudResourceManager_SearchOrganizationsRequest;
@class GTLRCloudResourceManager_SetIamPolicyRequest;
@class GTLRCloudResourceManager_SetOrgPolicyRequest;
@class GTLRCloudResourceManager_TestIamPermissionsRequest;
@class GTLRCloudResourceManager_UndeleteProjectRequest;

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Cloud Resource Manager query classes.
 */
@interface GTLRCloudResourceManagerQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Clears a `Policy` from a resource.
 *
 *  Method: cloudresourcemanager.folders.clearOrgPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 */
@interface GTLRCloudResourceManagerQuery_FoldersClearOrgPolicy : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForFoldersClearOrgPolicyWithObject:resource:]

/** Name of the resource for the `Policy` to clear. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_Empty.
 *
 *  Clears a `Policy` from a resource.
 *
 *  @param object The @c GTLRCloudResourceManager_ClearOrgPolicyRequest to
 *    include in the query.
 *  @param resource Name of the resource for the `Policy` to clear.
 *
 *  @returns GTLRCloudResourceManagerQuery_FoldersClearOrgPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_ClearOrgPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Gets the effective `Policy` on a resource. This is the result of merging
 *  `Policies` in the resource hierarchy. The returned `Policy` will not have
 *  an `etag`set because it is a computed `Policy` across multiple resources.
 *
 *  Method: cloudresourcemanager.folders.getEffectiveOrgPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_FoldersGetEffectiveOrgPolicy : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForFoldersGetEffectiveOrgPolicyWithObject:resource:]

/** The name of the resource to start computing the effective `Policy`. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_OrgPolicy.
 *
 *  Gets the effective `Policy` on a resource. This is the result of merging
 *  `Policies` in the resource hierarchy. The returned `Policy` will not have
 *  an `etag`set because it is a computed `Policy` across multiple resources.
 *
 *  @param object The @c GTLRCloudResourceManager_GetEffectiveOrgPolicyRequest
 *    to include in the query.
 *  @param resource The name of the resource to start computing the effective
 *    `Policy`.
 *
 *  @returns GTLRCloudResourceManagerQuery_FoldersGetEffectiveOrgPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_GetEffectiveOrgPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Gets a `Policy` on a resource.
 *  If no `Policy` is set on the resource, a `Policy` is returned with default
 *  values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The
 *  `etag` value can be used with `SetOrgPolicy()` to create or update a
 *  `Policy` during read-modify-write.
 *
 *  Method: cloudresourcemanager.folders.getOrgPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_FoldersGetOrgPolicy : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForFoldersGetOrgPolicyWithObject:resource:]

/** Name of the resource the `Policy` is set on. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_OrgPolicy.
 *
 *  Gets a `Policy` on a resource.
 *  If no `Policy` is set on the resource, a `Policy` is returned with default
 *  values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The
 *  `etag` value can be used with `SetOrgPolicy()` to create or update a
 *  `Policy` during read-modify-write.
 *
 *  @param object The @c GTLRCloudResourceManager_GetOrgPolicyRequest to include
 *    in the query.
 *  @param resource Name of the resource the `Policy` is set on.
 *
 *  @returns GTLRCloudResourceManagerQuery_FoldersGetOrgPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_GetOrgPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists `Constraints` that could be applied on the specified resource.
 *
 *  Method: cloudresourcemanager.folders.listAvailableOrgPolicyConstraints
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_FoldersListAvailableOrgPolicyConstraints : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForFoldersListAvailableOrgPolicyConstraintsWithObject:resource:]

/** Name of the resource to list `Constraints` for. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c
 *  GTLRCloudResourceManager_ListAvailableOrgPolicyConstraintsResponse.
 *
 *  Lists `Constraints` that could be applied on the specified resource.
 *
 *  @param object The @c
 *    GTLRCloudResourceManager_ListAvailableOrgPolicyConstraintsRequest to
 *    include in the query.
 *  @param resource Name of the resource to list `Constraints` for.
 *
 *  @returns GTLRCloudResourceManagerQuery_FoldersListAvailableOrgPolicyConstraints
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_ListAvailableOrgPolicyConstraintsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists all the `Policies` set for a particular resource.
 *
 *  Method: cloudresourcemanager.folders.listOrgPolicies
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_FoldersListOrgPolicies : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForFoldersListOrgPoliciesWithObject:resource:]

/** Name of the resource to list Policies for. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_ListOrgPoliciesResponse.
 *
 *  Lists all the `Policies` set for a particular resource.
 *
 *  @param object The @c GTLRCloudResourceManager_ListOrgPoliciesRequest to
 *    include in the query.
 *  @param resource Name of the resource to list Policies for.
 *
 *  @returns GTLRCloudResourceManagerQuery_FoldersListOrgPolicies
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_ListOrgPoliciesRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Updates the specified `Policy` on the resource. Creates a new `Policy` for
 *  that `Constraint` on the resource if one does not exist.
 *  Not supplying an `etag` on the request `Policy` results in an unconditional
 *  write of the `Policy`.
 *
 *  Method: cloudresourcemanager.folders.setOrgPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 */
@interface GTLRCloudResourceManagerQuery_FoldersSetOrgPolicy : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForFoldersSetOrgPolicyWithObject:resource:]

/** Resource name of the resource to attach the `Policy`. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_OrgPolicy.
 *
 *  Updates the specified `Policy` on the resource. Creates a new `Policy` for
 *  that `Constraint` on the resource if one does not exist.
 *  Not supplying an `etag` on the request `Policy` results in an unconditional
 *  write of the `Policy`.
 *
 *  @param object The @c GTLRCloudResourceManager_SetOrgPolicyRequest to include
 *    in the query.
 *  @param resource Resource name of the resource to attach the `Policy`.
 *
 *  @returns GTLRCloudResourceManagerQuery_FoldersSetOrgPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_SetOrgPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Create a Lien which applies to the resource denoted by the `parent` field.
 *  Callers of this method will require permission on the `parent` resource.
 *  For example, applying to `projects/1234` requires permission
 *  `resourcemanager.projects.updateLiens`.
 *  NOTE: Some resources may limit the number of Liens which may be applied.
 *
 *  Method: cloudresourcemanager.liens.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_LiensCreate : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForLiensCreateWithObject:]

/**
 *  Fetches a @c GTLRCloudResourceManager_Lien.
 *
 *  Create a Lien which applies to the resource denoted by the `parent` field.
 *  Callers of this method will require permission on the `parent` resource.
 *  For example, applying to `projects/1234` requires permission
 *  `resourcemanager.projects.updateLiens`.
 *  NOTE: Some resources may limit the number of Liens which may be applied.
 *
 *  @param object The @c GTLRCloudResourceManager_Lien to include in the query.
 *
 *  @returns GTLRCloudResourceManagerQuery_LiensCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_Lien *)object;

@end

/**
 *  Delete a Lien by `name`.
 *  Callers of this method will require permission on the `parent` resource.
 *  For example, a Lien with a `parent` of `projects/1234` requires permission
 *  `resourcemanager.projects.updateLiens`.
 *
 *  Method: cloudresourcemanager.liens.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_LiensDelete : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForLiensDeleteWithname:]

/** The name/identifier of the Lien to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudResourceManager_Empty.
 *
 *  Delete a Lien by `name`.
 *  Callers of this method will require permission on the `parent` resource.
 *  For example, a Lien with a `parent` of `projects/1234` requires permission
 *  `resourcemanager.projects.updateLiens`.
 *
 *  @param name The name/identifier of the Lien to delete.
 *
 *  @returns GTLRCloudResourceManagerQuery_LiensDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List all Liens applied to the `parent` resource.
 *  Callers of this method will require permission on the `parent` resource.
 *  For example, a Lien with a `parent` of `projects/1234` requires permission
 *  `resourcemanager.projects.get`.
 *
 *  Method: cloudresourcemanager.liens.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_LiensList : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForLiensList]

/**
 *  The maximum number of items to return. This is a suggestion for the server.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The `next_page_token` value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The name of the resource to list all attached Liens.
 *  For example, `projects/1234`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudResourceManager_ListLiensResponse.
 *
 *  List all Liens applied to the `parent` resource.
 *  Callers of this method will require permission on the `parent` resource.
 *  For example, a Lien with a `parent` of `projects/1234` requires permission
 *  `resourcemanager.projects.get`.
 *
 *  @returns GTLRCloudResourceManagerQuery_LiensList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: cloudresourcemanager.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_OperationsGet : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudResourceManager_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @returns GTLRCloudResourceManagerQuery_OperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Clears a `Policy` from a resource.
 *
 *  Method: cloudresourcemanager.organizations.clearOrgPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 */
@interface GTLRCloudResourceManagerQuery_OrganizationsClearOrgPolicy : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForOrganizationsClearOrgPolicyWithObject:resource:]

/** Name of the resource for the `Policy` to clear. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_Empty.
 *
 *  Clears a `Policy` from a resource.
 *
 *  @param object The @c GTLRCloudResourceManager_ClearOrgPolicyRequest to
 *    include in the query.
 *  @param resource Name of the resource for the `Policy` to clear.
 *
 *  @returns GTLRCloudResourceManagerQuery_OrganizationsClearOrgPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_ClearOrgPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Fetches an Organization resource identified by the specified resource name.
 *
 *  Method: cloudresourcemanager.organizations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_OrganizationsGet : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForOrganizationsGetWithname:]

/**
 *  The resource name of the Organization to fetch, e.g. "organizations/1234".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudResourceManager_Organization.
 *
 *  Fetches an Organization resource identified by the specified resource name.
 *
 *  @param name The resource name of the Organization to fetch, e.g.
 *    "organizations/1234".
 *
 *  @returns GTLRCloudResourceManagerQuery_OrganizationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the effective `Policy` on a resource. This is the result of merging
 *  `Policies` in the resource hierarchy. The returned `Policy` will not have
 *  an `etag`set because it is a computed `Policy` across multiple resources.
 *
 *  Method: cloudresourcemanager.organizations.getEffectiveOrgPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_OrganizationsGetEffectiveOrgPolicy : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForOrganizationsGetEffectiveOrgPolicyWithObject:resource:]

/** The name of the resource to start computing the effective `Policy`. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_OrgPolicy.
 *
 *  Gets the effective `Policy` on a resource. This is the result of merging
 *  `Policies` in the resource hierarchy. The returned `Policy` will not have
 *  an `etag`set because it is a computed `Policy` across multiple resources.
 *
 *  @param object The @c GTLRCloudResourceManager_GetEffectiveOrgPolicyRequest
 *    to include in the query.
 *  @param resource The name of the resource to start computing the effective
 *    `Policy`.
 *
 *  @returns GTLRCloudResourceManagerQuery_OrganizationsGetEffectiveOrgPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_GetEffectiveOrgPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Gets the access control policy for an Organization resource. May be empty
 *  if no such policy or resource exists. The `resource` field should be the
 *  organization's resource name, e.g. "organizations/123".
 *  Authorization requires the Google IAM permission
 *  `resourcemanager.organizations.getIamPolicy` on the specified organization
 *
 *  Method: cloudresourcemanager.organizations.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_OrganizationsGetIamPolicy : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForOrganizationsGetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_Policy.
 *
 *  Gets the access control policy for an Organization resource. May be empty
 *  if no such policy or resource exists. The `resource` field should be the
 *  organization's resource name, e.g. "organizations/123".
 *  Authorization requires the Google IAM permission
 *  `resourcemanager.organizations.getIamPolicy` on the specified organization
 *
 *  @param object The @c GTLRCloudResourceManager_GetIamPolicyRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @returns GTLRCloudResourceManagerQuery_OrganizationsGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Gets a `Policy` on a resource.
 *  If no `Policy` is set on the resource, a `Policy` is returned with default
 *  values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The
 *  `etag` value can be used with `SetOrgPolicy()` to create or update a
 *  `Policy` during read-modify-write.
 *
 *  Method: cloudresourcemanager.organizations.getOrgPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_OrganizationsGetOrgPolicy : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForOrganizationsGetOrgPolicyWithObject:resource:]

/** Name of the resource the `Policy` is set on. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_OrgPolicy.
 *
 *  Gets a `Policy` on a resource.
 *  If no `Policy` is set on the resource, a `Policy` is returned with default
 *  values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The
 *  `etag` value can be used with `SetOrgPolicy()` to create or update a
 *  `Policy` during read-modify-write.
 *
 *  @param object The @c GTLRCloudResourceManager_GetOrgPolicyRequest to include
 *    in the query.
 *  @param resource Name of the resource the `Policy` is set on.
 *
 *  @returns GTLRCloudResourceManagerQuery_OrganizationsGetOrgPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_GetOrgPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists `Constraints` that could be applied on the specified resource.
 *
 *  Method: cloudresourcemanager.organizations.listAvailableOrgPolicyConstraints
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_OrganizationsListAvailableOrgPolicyConstraints : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForOrganizationsListAvailableOrgPolicyConstraintsWithObject:resource:]

/** Name of the resource to list `Constraints` for. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c
 *  GTLRCloudResourceManager_ListAvailableOrgPolicyConstraintsResponse.
 *
 *  Lists `Constraints` that could be applied on the specified resource.
 *
 *  @param object The @c
 *    GTLRCloudResourceManager_ListAvailableOrgPolicyConstraintsRequest to
 *    include in the query.
 *  @param resource Name of the resource to list `Constraints` for.
 *
 *  @returns GTLRCloudResourceManagerQuery_OrganizationsListAvailableOrgPolicyConstraints
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_ListAvailableOrgPolicyConstraintsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists all the `Policies` set for a particular resource.
 *
 *  Method: cloudresourcemanager.organizations.listOrgPolicies
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_OrganizationsListOrgPolicies : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForOrganizationsListOrgPoliciesWithObject:resource:]

/** Name of the resource to list Policies for. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_ListOrgPoliciesResponse.
 *
 *  Lists all the `Policies` set for a particular resource.
 *
 *  @param object The @c GTLRCloudResourceManager_ListOrgPoliciesRequest to
 *    include in the query.
 *  @param resource Name of the resource to list Policies for.
 *
 *  @returns GTLRCloudResourceManagerQuery_OrganizationsListOrgPolicies
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_ListOrgPoliciesRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Searches Organization resources that are visible to the user and satisfy
 *  the specified filter. This method returns Organizations in an unspecified
 *  order. New Organizations do not necessarily appear at the end of the
 *  results.
 *  Search will only return organizations on which the user has the permission
 *  `resourcemanager.organizations.get`
 *
 *  Method: cloudresourcemanager.organizations.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_OrganizationsSearch : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForOrganizationsSearchWithObject:]

/**
 *  Fetches a @c GTLRCloudResourceManager_SearchOrganizationsResponse.
 *
 *  Searches Organization resources that are visible to the user and satisfy
 *  the specified filter. This method returns Organizations in an unspecified
 *  order. New Organizations do not necessarily appear at the end of the
 *  results.
 *  Search will only return organizations on which the user has the permission
 *  `resourcemanager.organizations.get`
 *
 *  @param object The @c GTLRCloudResourceManager_SearchOrganizationsRequest to
 *    include in the query.
 *
 *  @returns GTLRCloudResourceManagerQuery_OrganizationsSearch
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_SearchOrganizationsRequest *)object;

@end

/**
 *  Sets the access control policy on an Organization resource. Replaces any
 *  existing policy. The `resource` field should be the organization's resource
 *  name, e.g. "organizations/123".
 *  Authorization requires the Google IAM permission
 *  `resourcemanager.organizations.setIamPolicy` on the specified organization
 *
 *  Method: cloudresourcemanager.organizations.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 */
@interface GTLRCloudResourceManagerQuery_OrganizationsSetIamPolicy : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForOrganizationsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_Policy.
 *
 *  Sets the access control policy on an Organization resource. Replaces any
 *  existing policy. The `resource` field should be the organization's resource
 *  name, e.g. "organizations/123".
 *  Authorization requires the Google IAM permission
 *  `resourcemanager.organizations.setIamPolicy` on the specified organization
 *
 *  @param object The @c GTLRCloudResourceManager_SetIamPolicyRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @returns GTLRCloudResourceManagerQuery_OrganizationsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Updates the specified `Policy` on the resource. Creates a new `Policy` for
 *  that `Constraint` on the resource if one does not exist.
 *  Not supplying an `etag` on the request `Policy` results in an unconditional
 *  write of the `Policy`.
 *
 *  Method: cloudresourcemanager.organizations.setOrgPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 */
@interface GTLRCloudResourceManagerQuery_OrganizationsSetOrgPolicy : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForOrganizationsSetOrgPolicyWithObject:resource:]

/** Resource name of the resource to attach the `Policy`. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_OrgPolicy.
 *
 *  Updates the specified `Policy` on the resource. Creates a new `Policy` for
 *  that `Constraint` on the resource if one does not exist.
 *  Not supplying an `etag` on the request `Policy` results in an unconditional
 *  write of the `Policy`.
 *
 *  @param object The @c GTLRCloudResourceManager_SetOrgPolicyRequest to include
 *    in the query.
 *  @param resource Resource name of the resource to attach the `Policy`.
 *
 *  @returns GTLRCloudResourceManagerQuery_OrganizationsSetOrgPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_SetOrgPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified Organization.
 *  The `resource` field should be the organization's resource name,
 *  e.g. "organizations/123".
 *  There are no permissions required for making this API call.
 *
 *  Method: cloudresourcemanager.organizations.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_OrganizationsTestIamPermissions : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForOrganizationsTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified Organization.
 *  The `resource` field should be the organization's resource name,
 *  e.g. "organizations/123".
 *  There are no permissions required for making this API call.
 *
 *  @param object The @c GTLRCloudResourceManager_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @returns GTLRCloudResourceManagerQuery_OrganizationsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Clears a `Policy` from a resource.
 *
 *  Method: cloudresourcemanager.projects.clearOrgPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 */
@interface GTLRCloudResourceManagerQuery_ProjectsClearOrgPolicy : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForProjectsClearOrgPolicyWithObject:resource:]

/** Name of the resource for the `Policy` to clear. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_Empty.
 *
 *  Clears a `Policy` from a resource.
 *
 *  @param object The @c GTLRCloudResourceManager_ClearOrgPolicyRequest to
 *    include in the query.
 *  @param resource Name of the resource for the `Policy` to clear.
 *
 *  @returns GTLRCloudResourceManagerQuery_ProjectsClearOrgPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_ClearOrgPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Request that a new Project be created. The result is an Operation which
 *  can be used to track the creation process. It is automatically deleted
 *  after a few hours, so there is no need to call DeleteOperation.
 *  Our SLO permits Project creation to take up to 30 seconds at the 90th
 *  percentile. As of 2016-08-29, we are observing 6 seconds 50th percentile
 *  latency. 95th percentile latency is around 11 seconds. We recommend
 *  polling at the 5th second with an exponential backoff.
 *  Authorization requires the Google IAM permission
 *  `resourcemanager.projects.create` on the specified parent for the new
 *  project.
 *
 *  Method: cloudresourcemanager.projects.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 */
@interface GTLRCloudResourceManagerQuery_ProjectsCreate : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForProjectsCreateWithObject:]

/**
 *  Fetches a @c GTLRCloudResourceManager_Operation.
 *
 *  Request that a new Project be created. The result is an Operation which
 *  can be used to track the creation process. It is automatically deleted
 *  after a few hours, so there is no need to call DeleteOperation.
 *  Our SLO permits Project creation to take up to 30 seconds at the 90th
 *  percentile. As of 2016-08-29, we are observing 6 seconds 50th percentile
 *  latency. 95th percentile latency is around 11 seconds. We recommend
 *  polling at the 5th second with an exponential backoff.
 *  Authorization requires the Google IAM permission
 *  `resourcemanager.projects.create` on the specified parent for the new
 *  project.
 *
 *  @param object The @c GTLRCloudResourceManager_Project to include in the
 *    query.
 *
 *  @returns GTLRCloudResourceManagerQuery_ProjectsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_Project *)object;

@end

/**
 *  Marks the Project identified by the specified
 *  `project_id` (for example, `my-project-123`) for deletion.
 *  This method will only affect the Project if the following criteria are met:
 *  + The Project does not have a billing account associated with it.
 *  + The Project has a lifecycle state of
 *  ACTIVE.
 *  This method changes the Project's lifecycle state from
 *  ACTIVE
 *  to DELETE_REQUESTED.
 *  The deletion starts at an unspecified time,
 *  at which point the Project is no longer accessible.
 *  Until the deletion completes, you can check the lifecycle state
 *  checked by retrieving the Project with GetProject,
 *  and the Project remains visible to ListProjects.
 *  However, you cannot update the project.
 *  After the deletion completes, the Project is not retrievable by
 *  the GetProject and
 *  ListProjects methods.
 *  The caller must have modify permissions for this Project.
 *
 *  Method: cloudresourcemanager.projects.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 */
@interface GTLRCloudResourceManagerQuery_ProjectsDelete : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForProjectsDeleteWithprojectId:]

/**
 *  The Project ID (for example, `foo-bar-123`).
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudResourceManager_Empty.
 *
 *  Marks the Project identified by the specified
 *  `project_id` (for example, `my-project-123`) for deletion.
 *  This method will only affect the Project if the following criteria are met:
 *  + The Project does not have a billing account associated with it.
 *  + The Project has a lifecycle state of
 *  ACTIVE.
 *  This method changes the Project's lifecycle state from
 *  ACTIVE
 *  to DELETE_REQUESTED.
 *  The deletion starts at an unspecified time,
 *  at which point the Project is no longer accessible.
 *  Until the deletion completes, you can check the lifecycle state
 *  checked by retrieving the Project with GetProject,
 *  and the Project remains visible to ListProjects.
 *  However, you cannot update the project.
 *  After the deletion completes, the Project is not retrievable by
 *  the GetProject and
 *  ListProjects methods.
 *  The caller must have modify permissions for this Project.
 *
 *  @param projectId The Project ID (for example, `foo-bar-123`).
 *    Required.
 *
 *  @returns GTLRCloudResourceManagerQuery_ProjectsDelete
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId;

@end

/**
 *  Retrieves the Project identified by the specified
 *  `project_id` (for example, `my-project-123`).
 *  The caller must have read permissions for this Project.
 *
 *  Method: cloudresourcemanager.projects.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_ProjectsGet : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForProjectsGetWithprojectId:]

/**
 *  The Project ID (for example, `my-project-123`).
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudResourceManager_Project.
 *
 *  Retrieves the Project identified by the specified
 *  `project_id` (for example, `my-project-123`).
 *  The caller must have read permissions for this Project.
 *
 *  @param projectId The Project ID (for example, `my-project-123`).
 *    Required.
 *
 *  @returns GTLRCloudResourceManagerQuery_ProjectsGet
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId;

@end

/**
 *  Gets a list of ancestors in the resource hierarchy for the Project
 *  identified by the specified `project_id` (for example, `my-project-123`).
 *  The caller must have read permissions for this Project.
 *
 *  Method: cloudresourcemanager.projects.getAncestry
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_ProjectsGetAncestry : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForProjectsGetAncestryWithObject:projectId:]

/**
 *  The Project ID (for example, `my-project-123`).
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudResourceManager_GetAncestryResponse.
 *
 *  Gets a list of ancestors in the resource hierarchy for the Project
 *  identified by the specified `project_id` (for example, `my-project-123`).
 *  The caller must have read permissions for this Project.
 *
 *  @param object The @c GTLRCloudResourceManager_GetAncestryRequest to include
 *    in the query.
 *  @param projectId The Project ID (for example, `my-project-123`).
 *    Required.
 *
 *  @returns GTLRCloudResourceManagerQuery_ProjectsGetAncestry
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_GetAncestryRequest *)object
                      projectId:(NSString *)projectId;

@end

/**
 *  Gets the effective `Policy` on a resource. This is the result of merging
 *  `Policies` in the resource hierarchy. The returned `Policy` will not have
 *  an `etag`set because it is a computed `Policy` across multiple resources.
 *
 *  Method: cloudresourcemanager.projects.getEffectiveOrgPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_ProjectsGetEffectiveOrgPolicy : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForProjectsGetEffectiveOrgPolicyWithObject:resource:]

/** The name of the resource to start computing the effective `Policy`. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_OrgPolicy.
 *
 *  Gets the effective `Policy` on a resource. This is the result of merging
 *  `Policies` in the resource hierarchy. The returned `Policy` will not have
 *  an `etag`set because it is a computed `Policy` across multiple resources.
 *
 *  @param object The @c GTLRCloudResourceManager_GetEffectiveOrgPolicyRequest
 *    to include in the query.
 *  @param resource The name of the resource to start computing the effective
 *    `Policy`.
 *
 *  @returns GTLRCloudResourceManagerQuery_ProjectsGetEffectiveOrgPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_GetEffectiveOrgPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns the IAM access control policy for the specified Project.
 *  Permission is denied if the policy or the resource does not exist.
 *  Authorization requires the Google IAM permission
 *  `resourcemanager.projects.getIamPolicy` on the project
 *
 *  Method: cloudresourcemanager.projects.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_ProjectsGetIamPolicy : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForProjectsGetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_Policy.
 *
 *  Returns the IAM access control policy for the specified Project.
 *  Permission is denied if the policy or the resource does not exist.
 *  Authorization requires the Google IAM permission
 *  `resourcemanager.projects.getIamPolicy` on the project
 *
 *  @param object The @c GTLRCloudResourceManager_GetIamPolicyRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @returns GTLRCloudResourceManagerQuery_ProjectsGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Gets a `Policy` on a resource.
 *  If no `Policy` is set on the resource, a `Policy` is returned with default
 *  values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The
 *  `etag` value can be used with `SetOrgPolicy()` to create or update a
 *  `Policy` during read-modify-write.
 *
 *  Method: cloudresourcemanager.projects.getOrgPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_ProjectsGetOrgPolicy : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForProjectsGetOrgPolicyWithObject:resource:]

/** Name of the resource the `Policy` is set on. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_OrgPolicy.
 *
 *  Gets a `Policy` on a resource.
 *  If no `Policy` is set on the resource, a `Policy` is returned with default
 *  values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The
 *  `etag` value can be used with `SetOrgPolicy()` to create or update a
 *  `Policy` during read-modify-write.
 *
 *  @param object The @c GTLRCloudResourceManager_GetOrgPolicyRequest to include
 *    in the query.
 *  @param resource Name of the resource the `Policy` is set on.
 *
 *  @returns GTLRCloudResourceManagerQuery_ProjectsGetOrgPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_GetOrgPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists Projects that are visible to the user and satisfy the
 *  specified filter. This method returns Projects in an unspecified order.
 *  New Projects do not necessarily appear at the end of the list.
 *
 *  Method: cloudresourcemanager.projects.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_ProjectsList : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForProjectsList]

/**
 *  An expression for filtering the results of the request. Filter rules are
 *  case insensitive. The fields eligible for filtering are:
 *  + `name`
 *  + `id`
 *  + <code>labels.<em>key</em></code> where *key* is the name of a label
 *  Some examples of using labels as filters:
 *  |Filter|Description|
 *  |------|-----------|
 *  |name:how*|The project's name starts with "how".|
 *  |name:Howl|The project's name is `Howl` or `howl`.|
 *  |name:HOWL|Equivalent to above.|
 *  |NAME:howl|Equivalent to above.|
 *  |labels.color:*|The project has the label `color`.|
 *  |labels.color:red|The project's label `color` has the value `red`.|
 *  |labels.color:red&nbsp;labels.size:big|The project's label `color` has the
 *  value `red` and its label `size` has the value `big`.
 *  If you specify a filter that has both `parent.type` and `parent.id`, then
 *  the `resourcemanager.projects.list` permission is checked on the parent.
 *  If the user has this permission, all projects under the parent will be
 *  returned after remaining filters have been applied. If the user lacks this
 *  permission, then all projects for which the user has the
 *  `resourcemanager.projects.get` permission will be returned after remaining
 *  filters have been applied. If no filter is specified, the call will return
 *  projects for which the user has `resourcemanager.projects.get` permissions.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The maximum number of Projects to return in the response.
 *  The server can return fewer Projects than requested.
 *  If unspecified, server picks an appropriate default.
 *  Optional.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to ListProjects
 *  that indicates from where listing should continue.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudResourceManager_ListProjectsResponse.
 *
 *  Lists Projects that are visible to the user and satisfy the
 *  specified filter. This method returns Projects in an unspecified order.
 *  New Projects do not necessarily appear at the end of the list.
 *
 *  @returns GTLRCloudResourceManagerQuery_ProjectsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Lists `Constraints` that could be applied on the specified resource.
 *
 *  Method: cloudresourcemanager.projects.listAvailableOrgPolicyConstraints
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_ProjectsListAvailableOrgPolicyConstraints : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForProjectsListAvailableOrgPolicyConstraintsWithObject:resource:]

/** Name of the resource to list `Constraints` for. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c
 *  GTLRCloudResourceManager_ListAvailableOrgPolicyConstraintsResponse.
 *
 *  Lists `Constraints` that could be applied on the specified resource.
 *
 *  @param object The @c
 *    GTLRCloudResourceManager_ListAvailableOrgPolicyConstraintsRequest to
 *    include in the query.
 *  @param resource Name of the resource to list `Constraints` for.
 *
 *  @returns GTLRCloudResourceManagerQuery_ProjectsListAvailableOrgPolicyConstraints
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_ListAvailableOrgPolicyConstraintsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists all the `Policies` set for a particular resource.
 *
 *  Method: cloudresourcemanager.projects.listOrgPolicies
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_ProjectsListOrgPolicies : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForProjectsListOrgPoliciesWithObject:resource:]

/** Name of the resource to list Policies for. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_ListOrgPoliciesResponse.
 *
 *  Lists all the `Policies` set for a particular resource.
 *
 *  @param object The @c GTLRCloudResourceManager_ListOrgPoliciesRequest to
 *    include in the query.
 *  @param resource Name of the resource to list Policies for.
 *
 *  @returns GTLRCloudResourceManagerQuery_ProjectsListOrgPolicies
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_ListOrgPoliciesRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Sets the IAM access control policy for the specified Project. Replaces
 *  any existing policy.
 *  The following constraints apply when using `setIamPolicy()`:
 *  + Project does not support `allUsers` and `allAuthenticatedUsers` as
 *  `members` in a `Binding` of a `Policy`.
 *  + The owner role can be granted only to `user` and `serviceAccount`.
 *  + Service accounts can be made owners of a project directly
 *  without any restrictions. However, to be added as an owner, a user must be
 *  invited via Cloud Platform console and must accept the invitation.
 *  + A user cannot be granted the owner role using `setIamPolicy()`. The user
 *  must be granted the owner role using the Cloud Platform Console and must
 *  explicitly accept the invitation.
 *  + Invitations to grant the owner role cannot be sent using
 *  `setIamPolicy()`;
 *  they must be sent only using the Cloud Platform Console.
 *  + Membership changes that leave the project without any owners that have
 *  accepted the Terms of Service (ToS) will be rejected.
 *  + If the project is not part of an organization, there must be at least
 *  one owner who has accepted the Terms of Service (ToS) agreement in the
 *  policy. Calling `setIamPolicy()` to remove the last ToS-accepted owner
 *  from the policy will fail. This restriction also applies to legacy
 *  projects that no longer have owners who have accepted the ToS. Edits to
 *  IAM policies will be rejected until the lack of a ToS-accepting owner is
 *  rectified.
 *  + Calling this method requires enabling the App Engine Admin API.
 *  Note: Removing service accounts from policies or changing their roles
 *  can render services completely inoperable. It is important to understand
 *  how the service account is being used before removing or updating its
 *  roles.
 *  Authorization requires the Google IAM permission
 *  `resourcemanager.projects.setIamPolicy` on the project
 *
 *  Method: cloudresourcemanager.projects.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 */
@interface GTLRCloudResourceManagerQuery_ProjectsSetIamPolicy : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForProjectsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_Policy.
 *
 *  Sets the IAM access control policy for the specified Project. Replaces
 *  any existing policy.
 *  The following constraints apply when using `setIamPolicy()`:
 *  + Project does not support `allUsers` and `allAuthenticatedUsers` as
 *  `members` in a `Binding` of a `Policy`.
 *  + The owner role can be granted only to `user` and `serviceAccount`.
 *  + Service accounts can be made owners of a project directly
 *  without any restrictions. However, to be added as an owner, a user must be
 *  invited via Cloud Platform console and must accept the invitation.
 *  + A user cannot be granted the owner role using `setIamPolicy()`. The user
 *  must be granted the owner role using the Cloud Platform Console and must
 *  explicitly accept the invitation.
 *  + Invitations to grant the owner role cannot be sent using
 *  `setIamPolicy()`;
 *  they must be sent only using the Cloud Platform Console.
 *  + Membership changes that leave the project without any owners that have
 *  accepted the Terms of Service (ToS) will be rejected.
 *  + If the project is not part of an organization, there must be at least
 *  one owner who has accepted the Terms of Service (ToS) agreement in the
 *  policy. Calling `setIamPolicy()` to remove the last ToS-accepted owner
 *  from the policy will fail. This restriction also applies to legacy
 *  projects that no longer have owners who have accepted the ToS. Edits to
 *  IAM policies will be rejected until the lack of a ToS-accepting owner is
 *  rectified.
 *  + Calling this method requires enabling the App Engine Admin API.
 *  Note: Removing service accounts from policies or changing their roles
 *  can render services completely inoperable. It is important to understand
 *  how the service account is being used before removing or updating its
 *  roles.
 *  Authorization requires the Google IAM permission
 *  `resourcemanager.projects.setIamPolicy` on the project
 *
 *  @param object The @c GTLRCloudResourceManager_SetIamPolicyRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @returns GTLRCloudResourceManagerQuery_ProjectsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Updates the specified `Policy` on the resource. Creates a new `Policy` for
 *  that `Constraint` on the resource if one does not exist.
 *  Not supplying an `etag` on the request `Policy` results in an unconditional
 *  write of the `Policy`.
 *
 *  Method: cloudresourcemanager.projects.setOrgPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 */
@interface GTLRCloudResourceManagerQuery_ProjectsSetOrgPolicy : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForProjectsSetOrgPolicyWithObject:resource:]

/** Resource name of the resource to attach the `Policy`. */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_OrgPolicy.
 *
 *  Updates the specified `Policy` on the resource. Creates a new `Policy` for
 *  that `Constraint` on the resource if one does not exist.
 *  Not supplying an `etag` on the request `Policy` results in an unconditional
 *  write of the `Policy`.
 *
 *  @param object The @c GTLRCloudResourceManager_SetOrgPolicyRequest to include
 *    in the query.
 *  @param resource Resource name of the resource to attach the `Policy`.
 *
 *  @returns GTLRCloudResourceManagerQuery_ProjectsSetOrgPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_SetOrgPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified Project.
 *  There are no permissions required for making this API call.
 *
 *  Method: cloudresourcemanager.projects.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatformReadOnly
 */
@interface GTLRCloudResourceManagerQuery_ProjectsTestIamPermissions : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForProjectsTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudResourceManager_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified Project.
 *  There are no permissions required for making this API call.
 *
 *  @param object The @c GTLRCloudResourceManager_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @returns GTLRCloudResourceManagerQuery_ProjectsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Restores the Project identified by the specified
 *  `project_id` (for example, `my-project-123`).
 *  You can only use this method for a Project that has a lifecycle state of
 *  DELETE_REQUESTED.
 *  After deletion starts, the Project cannot be restored.
 *  The caller must have modify permissions for this Project.
 *
 *  Method: cloudresourcemanager.projects.undelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 */
@interface GTLRCloudResourceManagerQuery_ProjectsUndelete : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForProjectsUndeleteWithObject:projectId:]

/**
 *  The project ID (for example, `foo-bar-123`).
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudResourceManager_Empty.
 *
 *  Restores the Project identified by the specified
 *  `project_id` (for example, `my-project-123`).
 *  You can only use this method for a Project that has a lifecycle state of
 *  DELETE_REQUESTED.
 *  After deletion starts, the Project cannot be restored.
 *  The caller must have modify permissions for this Project.
 *
 *  @param object The @c GTLRCloudResourceManager_UndeleteProjectRequest to
 *    include in the query.
 *  @param projectId The project ID (for example, `foo-bar-123`).
 *    Required.
 *
 *  @returns GTLRCloudResourceManagerQuery_ProjectsUndelete
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_UndeleteProjectRequest *)object
                      projectId:(NSString *)projectId;

@end

/**
 *  Updates the attributes of the Project identified by the specified
 *  `project_id` (for example, `my-project-123`).
 *  The caller must have modify permissions for this Project.
 *
 *  Method: cloudresourcemanager.projects.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudResourceManagerCloudPlatform
 */
@interface GTLRCloudResourceManagerQuery_ProjectsUpdate : GTLRCloudResourceManagerQuery
// Previous library name was
//   +[GTLQueryCloudResourceManager queryForProjectsUpdateWithObject:projectId:]

/**
 *  The project ID (for example, `my-project-123`).
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudResourceManager_Project.
 *
 *  Updates the attributes of the Project identified by the specified
 *  `project_id` (for example, `my-project-123`).
 *  The caller must have modify permissions for this Project.
 *
 *  @param object The @c GTLRCloudResourceManager_Project to include in the
 *    query.
 *  @param projectId The project ID (for example, `my-project-123`).
 *    Required.
 *
 *  @returns GTLRCloudResourceManagerQuery_ProjectsUpdate
 */
+ (instancetype)queryWithObject:(GTLRCloudResourceManager_Project *)object
                      projectId:(NSString *)projectId;

@end

NS_ASSUME_NONNULL_END
