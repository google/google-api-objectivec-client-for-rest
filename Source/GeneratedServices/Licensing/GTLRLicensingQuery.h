// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Enterprise License Manager API (licensing/v1)
// Description:
//   Views and manages licenses for your domain.
// Documentation:
//   https://developers.google.com/google-apps/licensing/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRLicensing_LicenseAssignment;
@class GTLRLicensing_LicenseAssignmentInsert;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Licensing query classes.
 */
@interface GTLRLicensingQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Revoke License.
 *
 *  Method: licensing.licenseAssignments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLicensingAppsLicensing
 */
@interface GTLRLicensingQuery_LicenseAssignmentsDelete : GTLRLicensingQuery
// Previous library name was
//   +[GTLQueryLicensing queryForLicenseAssignmentsDeleteWithproductId:skuId:userId:]

/** Name for product */
@property(nonatomic, copy, nullable) NSString *productId;

/** Name for sku */
@property(nonatomic, copy, nullable) NSString *skuId;

/** email id or unique Id of the user */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Revoke License.
 *
 *  @param productId Name for product
 *  @param skuId Name for sku
 *  @param userId email id or unique Id of the user
 *
 *  @return GTLRLicensingQuery_LicenseAssignmentsDelete
 */
+ (instancetype)queryWithProductId:(NSString *)productId
                             skuId:(NSString *)skuId
                            userId:(NSString *)userId;

@end

/**
 *  Get license assignment of a particular product and sku for a user
 *
 *  Method: licensing.licenseAssignments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLicensingAppsLicensing
 */
@interface GTLRLicensingQuery_LicenseAssignmentsGet : GTLRLicensingQuery
// Previous library name was
//   +[GTLQueryLicensing queryForLicenseAssignmentsGetWithproductId:skuId:userId:]

/** Name for product */
@property(nonatomic, copy, nullable) NSString *productId;

/** Name for sku */
@property(nonatomic, copy, nullable) NSString *skuId;

/** email id or unique Id of the user */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRLicensing_LicenseAssignment.
 *
 *  Get license assignment of a particular product and sku for a user
 *
 *  @param productId Name for product
 *  @param skuId Name for sku
 *  @param userId email id or unique Id of the user
 *
 *  @return GTLRLicensingQuery_LicenseAssignmentsGet
 */
+ (instancetype)queryWithProductId:(NSString *)productId
                             skuId:(NSString *)skuId
                            userId:(NSString *)userId;

@end

/**
 *  Assign License.
 *
 *  Method: licensing.licenseAssignments.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLicensingAppsLicensing
 */
@interface GTLRLicensingQuery_LicenseAssignmentsInsert : GTLRLicensingQuery
// Previous library name was
//   +[GTLQueryLicensing queryForLicenseAssignmentsInsertWithObject:productId:skuId:]

/** Name for product */
@property(nonatomic, copy, nullable) NSString *productId;

/** Name for sku */
@property(nonatomic, copy, nullable) NSString *skuId;

/**
 *  Fetches a @c GTLRLicensing_LicenseAssignment.
 *
 *  Assign License.
 *
 *  @param object The @c GTLRLicensing_LicenseAssignmentInsert to include in the
 *    query.
 *  @param productId Name for product
 *  @param skuId Name for sku
 *
 *  @return GTLRLicensingQuery_LicenseAssignmentsInsert
 */
+ (instancetype)queryWithObject:(GTLRLicensing_LicenseAssignmentInsert *)object
                      productId:(NSString *)productId
                          skuId:(NSString *)skuId;

@end

/**
 *  List license assignments for given product of the customer.
 *
 *  Method: licensing.licenseAssignments.listForProduct
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLicensingAppsLicensing
 */
@interface GTLRLicensingQuery_LicenseAssignmentsListForProduct : GTLRLicensingQuery
// Previous library name was
//   +[GTLQueryLicensing queryForLicenseAssignmentsListForProductWithproductId:customerId:]

/**
 *  CustomerId represents the customer for whom licenseassignments are queried
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Maximum number of campaigns to return at one time. Must be positive.
 *  Optional. Default value is 100.
 *
 *  @note If not set, the documented server-side default will be 100 (from the
 *        range 1..1000).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Token to fetch the next page.Optional. By default server will return first
 *  page
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name for product */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRLicensing_LicenseAssignmentList.
 *
 *  List license assignments for given product of the customer.
 *
 *  @param productId Name for product
 *  @param customerId CustomerId represents the customer for whom
 *    licenseassignments are queried
 *
 *  @return GTLRLicensingQuery_LicenseAssignmentsListForProduct
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProductId:(NSString *)productId
                        customerId:(NSString *)customerId;

@end

/**
 *  List license assignments for given product and sku of the customer.
 *
 *  Method: licensing.licenseAssignments.listForProductAndSku
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLicensingAppsLicensing
 */
@interface GTLRLicensingQuery_LicenseAssignmentsListForProductAndSku : GTLRLicensingQuery
// Previous library name was
//   +[GTLQueryLicensing queryForLicenseAssignmentsListForProductAndSkuWithproductId:skuId:customerId:]

/**
 *  CustomerId represents the customer for whom licenseassignments are queried
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Maximum number of campaigns to return at one time. Must be positive.
 *  Optional. Default value is 100.
 *
 *  @note If not set, the documented server-side default will be 100 (from the
 *        range 1..1000).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Token to fetch the next page.Optional. By default server will return first
 *  page
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name for product */
@property(nonatomic, copy, nullable) NSString *productId;

/** Name for sku */
@property(nonatomic, copy, nullable) NSString *skuId;

/**
 *  Fetches a @c GTLRLicensing_LicenseAssignmentList.
 *
 *  List license assignments for given product and sku of the customer.
 *
 *  @param productId Name for product
 *  @param skuId Name for sku
 *  @param customerId CustomerId represents the customer for whom
 *    licenseassignments are queried
 *
 *  @return GTLRLicensingQuery_LicenseAssignmentsListForProductAndSku
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProductId:(NSString *)productId
                             skuId:(NSString *)skuId
                        customerId:(NSString *)customerId;

@end

/**
 *  Assign License. This method supports patch semantics.
 *
 *  Method: licensing.licenseAssignments.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLicensingAppsLicensing
 */
@interface GTLRLicensingQuery_LicenseAssignmentsPatch : GTLRLicensingQuery
// Previous library name was
//   +[GTLQueryLicensing queryForLicenseAssignmentsPatchWithObject:productId:skuId:userId:]

/** Name for product */
@property(nonatomic, copy, nullable) NSString *productId;

/** Name for sku for which license would be revoked */
@property(nonatomic, copy, nullable) NSString *skuId;

/** email id or unique Id of the user */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRLicensing_LicenseAssignment.
 *
 *  Assign License. This method supports patch semantics.
 *
 *  @param object The @c GTLRLicensing_LicenseAssignment to include in the
 *    query.
 *  @param productId Name for product
 *  @param skuId Name for sku for which license would be revoked
 *  @param userId email id or unique Id of the user
 *
 *  @return GTLRLicensingQuery_LicenseAssignmentsPatch
 */
+ (instancetype)queryWithObject:(GTLRLicensing_LicenseAssignment *)object
                      productId:(NSString *)productId
                          skuId:(NSString *)skuId
                         userId:(NSString *)userId;

@end

/**
 *  Assign License.
 *
 *  Method: licensing.licenseAssignments.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLicensingAppsLicensing
 */
@interface GTLRLicensingQuery_LicenseAssignmentsUpdate : GTLRLicensingQuery
// Previous library name was
//   +[GTLQueryLicensing queryForLicenseAssignmentsUpdateWithObject:productId:skuId:userId:]

/** Name for product */
@property(nonatomic, copy, nullable) NSString *productId;

/** Name for sku for which license would be revoked */
@property(nonatomic, copy, nullable) NSString *skuId;

/** email id or unique Id of the user */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRLicensing_LicenseAssignment.
 *
 *  Assign License.
 *
 *  @param object The @c GTLRLicensing_LicenseAssignment to include in the
 *    query.
 *  @param productId Name for product
 *  @param skuId Name for sku for which license would be revoked
 *  @param userId email id or unique Id of the user
 *
 *  @return GTLRLicensingQuery_LicenseAssignmentsUpdate
 */
+ (instancetype)queryWithObject:(GTLRLicensing_LicenseAssignment *)object
                      productId:(NSString *)productId
                          skuId:(NSString *)skuId
                         userId:(NSString *)userId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
