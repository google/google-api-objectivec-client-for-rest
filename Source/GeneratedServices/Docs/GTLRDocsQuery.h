// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Docs API (docs/v1)
// Description:
//   Reads and writes Google Docs documents.
// Documentation:
//   https://developers.google.com/docs/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDocs_BatchUpdateDocumentRequest;
@class GTLRDocs_Document;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// suggestionsViewMode

/** Value: "DEFAULT_FOR_CURRENT_ACCESS" */
FOUNDATION_EXTERN NSString * const kGTLRDocsSuggestionsViewModeDefaultForCurrentAccess;
/** Value: "PREVIEW_SUGGESTIONS_ACCEPTED" */
FOUNDATION_EXTERN NSString * const kGTLRDocsSuggestionsViewModePreviewSuggestionsAccepted;
/** Value: "PREVIEW_WITHOUT_SUGGESTIONS" */
FOUNDATION_EXTERN NSString * const kGTLRDocsSuggestionsViewModePreviewWithoutSuggestions;
/** Value: "SUGGESTIONS_INLINE" */
FOUNDATION_EXTERN NSString * const kGTLRDocsSuggestionsViewModeSuggestionsInline;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Docs query classes.
 */
@interface GTLRDocsQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Applies one or more updates to the document.
 *  Each request is validated before
 *  being applied. If any request is not valid, then the entire request will
 *  fail and nothing will be applied.
 *  Some requests have replies to
 *  give you some information about how they are applied. Other requests do
 *  not need to return information; these each return an empty reply.
 *  The order of replies matches that of the requests.
 *  For example, suppose you call batchUpdate with four updates, and only the
 *  third one returns information. The response would have two empty replies,
 *  the reply to the third request, and another empty reply, in that order.
 *  Because other users may be editing the document, the document
 *  might not exactly reflect your changes: your changes may
 *  be altered with respect to collaborator changes. If there are no
 *  collaborators, the document should reflect your changes. In any case,
 *  the updates in your request are guaranteed to be applied together
 *  atomically.
 *
 *  Method: docs.documents.batchUpdate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDocsDocuments
 *    @c kGTLRAuthScopeDocsDrive
 *    @c kGTLRAuthScopeDocsDriveFile
 */
@interface GTLRDocsQuery_DocumentsBatchUpdate : GTLRDocsQuery
// Previous library name was
//   +[GTLQueryDocs queryForDocumentsBatchUpdateWithObject:documentId:]

/** The ID of the document to update. */
@property(nonatomic, copy, nullable) NSString *documentId;

/**
 *  Fetches a @c GTLRDocs_BatchUpdateDocumentResponse.
 *
 *  Applies one or more updates to the document.
 *  Each request is validated before
 *  being applied. If any request is not valid, then the entire request will
 *  fail and nothing will be applied.
 *  Some requests have replies to
 *  give you some information about how they are applied. Other requests do
 *  not need to return information; these each return an empty reply.
 *  The order of replies matches that of the requests.
 *  For example, suppose you call batchUpdate with four updates, and only the
 *  third one returns information. The response would have two empty replies,
 *  the reply to the third request, and another empty reply, in that order.
 *  Because other users may be editing the document, the document
 *  might not exactly reflect your changes: your changes may
 *  be altered with respect to collaborator changes. If there are no
 *  collaborators, the document should reflect your changes. In any case,
 *  the updates in your request are guaranteed to be applied together
 *  atomically.
 *
 *  @param object The @c GTLRDocs_BatchUpdateDocumentRequest to include in the
 *    query.
 *  @param documentId The ID of the document to update.
 *
 *  @return GTLRDocsQuery_DocumentsBatchUpdate
 */
+ (instancetype)queryWithObject:(GTLRDocs_BatchUpdateDocumentRequest *)object
                     documentId:(NSString *)documentId;

@end

/**
 *  Creates a blank document using the title given in the request. Other fields
 *  in the request, including any provided content, are ignored.
 *  Returns the created document.
 *
 *  Method: docs.documents.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDocsDocuments
 *    @c kGTLRAuthScopeDocsDrive
 *    @c kGTLRAuthScopeDocsDriveFile
 */
@interface GTLRDocsQuery_DocumentsCreate : GTLRDocsQuery
// Previous library name was
//   +[GTLQueryDocs queryForDocumentsCreateWithObject:]

/**
 *  Fetches a @c GTLRDocs_Document.
 *
 *  Creates a blank document using the title given in the request. Other fields
 *  in the request, including any provided content, are ignored.
 *  Returns the created document.
 *
 *  @param object The @c GTLRDocs_Document to include in the query.
 *
 *  @return GTLRDocsQuery_DocumentsCreate
 */
+ (instancetype)queryWithObject:(GTLRDocs_Document *)object;

@end

/**
 *  Gets the latest version of the specified document.
 *
 *  Method: docs.documents.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDocsDocuments
 *    @c kGTLRAuthScopeDocsDocumentsReadonly
 *    @c kGTLRAuthScopeDocsDrive
 *    @c kGTLRAuthScopeDocsDriveFile
 *    @c kGTLRAuthScopeDocsDriveReadonly
 */
@interface GTLRDocsQuery_DocumentsGet : GTLRDocsQuery
// Previous library name was
//   +[GTLQueryDocs queryForDocumentsGetWithdocumentId:]

/** The ID of the document to retrieve. */
@property(nonatomic, copy, nullable) NSString *documentId;

/**
 *  The suggestions view mode to apply to the document. This allows viewing the
 *  document with all suggestions inline, accepted or rejected. If one is not
 *  specified, DEFAULT_FOR_CURRENT_ACCESS is
 *  used.
 *
 *  Likely values:
 *    @arg @c kGTLRDocsSuggestionsViewModeDefaultForCurrentAccess Value
 *        "DEFAULT_FOR_CURRENT_ACCESS"
 *    @arg @c kGTLRDocsSuggestionsViewModeSuggestionsInline Value
 *        "SUGGESTIONS_INLINE"
 *    @arg @c kGTLRDocsSuggestionsViewModePreviewSuggestionsAccepted Value
 *        "PREVIEW_SUGGESTIONS_ACCEPTED"
 *    @arg @c kGTLRDocsSuggestionsViewModePreviewWithoutSuggestions Value
 *        "PREVIEW_WITHOUT_SUGGESTIONS"
 */
@property(nonatomic, copy, nullable) NSString *suggestionsViewMode;

/**
 *  Fetches a @c GTLRDocs_Document.
 *
 *  Gets the latest version of the specified document.
 *
 *  @param documentId The ID of the document to retrieve.
 *
 *  @return GTLRDocsQuery_DocumentsGet
 */
+ (instancetype)queryWithDocumentId:(NSString *)documentId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
