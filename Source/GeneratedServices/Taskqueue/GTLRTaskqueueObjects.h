// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   TaskQueue API (taskqueue/v1beta2)
// Description:
//   Accesses a Google App Engine Pull Task Queue over REST.
// Documentation:
//   https://developers.google.com/appengine/docs/python/taskqueue/rest

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRTaskqueue_Task;
@class GTLRTaskqueue_TaskQueue_Acl;
@class GTLRTaskqueue_TaskQueue_Stats;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  GTLRTaskqueue_Task
 */
@interface GTLRTaskqueue_Task : GTLRObject

/**
 *  Time (in seconds since the epoch) at which the task was enqueued.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enqueueTimestamp;

/**
 *  Name of the task.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The kind of object returned, in this case set to task. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Time (in seconds since the epoch) at which the task lease will expire. This
 *  value is 0 if the task isnt currently leased out to a worker.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *leaseTimestamp;

/**
 *  A bag of bytes which is the task payload. The payload on the JSON side is
 *  always Base64 encoded.
 */
@property(nonatomic, copy, nullable) NSString *payloadBase64;

/** Name of the queue that the task is in. */
@property(nonatomic, copy, nullable) NSString *queueName;

/**
 *  The number of leases applied to this task.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *retryCount;

/**
 *  Tag for the task, could be used later to lease tasks grouped by a specific
 *  tag.
 */
@property(nonatomic, copy, nullable) NSString *tag;

@end


/**
 *  GTLRTaskqueue_TaskQueue
 */
@interface GTLRTaskqueue_TaskQueue : GTLRObject

/** ACLs that are applicable to this TaskQueue object. */
@property(nonatomic, strong, nullable) GTLRTaskqueue_TaskQueue_Acl *acl;

/**
 *  Name of the taskqueue.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The kind of REST object returned, in this case taskqueue. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The number of times we should lease out tasks before giving up on them. If
 *  unset we lease them out forever until a worker deletes the task.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxLeases;

/** Statistics for the TaskQueue object in question. */
@property(nonatomic, strong, nullable) GTLRTaskqueue_TaskQueue_Stats *stats;

@end


/**
 *  ACLs that are applicable to this TaskQueue object.
 */
@interface GTLRTaskqueue_TaskQueue_Acl : GTLRObject

/**
 *  Email addresses of users who are "admins" of the TaskQueue. This means they
 *  can control the queue, eg set ACLs for the queue.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *adminEmails;

/**
 *  Email addresses of users who can "consume" tasks from the TaskQueue. This
 *  means they can Dequeue and Delete tasks from the queue.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *consumerEmails;

/**
 *  Email addresses of users who can "produce" tasks into the TaskQueue. This
 *  means they can Insert tasks into the queue.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *producerEmails;

@end


/**
 *  Statistics for the TaskQueue object in question.
 */
@interface GTLRTaskqueue_TaskQueue_Stats : GTLRObject

/**
 *  Number of tasks leased in the last hour.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *leasedLastHour;

/**
 *  Number of tasks leased in the last minute.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *leasedLastMinute;

/**
 *  The timestamp (in seconds since the epoch) of the oldest unfinished task.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *oldestTask;

/**
 *  Number of tasks in the queue.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalTasks;

@end


/**
 *  GTLRTaskqueue_Tasks
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRTaskqueue_Tasks : GTLRCollectionObject

/**
 *  The actual list of tasks returned as a result of the lease operation.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTaskqueue_Task *> *items;

/** The kind of object returned, a list of tasks. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  GTLRTaskqueue_Tasks2
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRTaskqueue_Tasks2 : GTLRCollectionObject

/**
 *  The actual list of tasks currently active in the TaskQueue.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTaskqueue_Task *> *items;

/** The kind of object returned, a list of tasks. */
@property(nonatomic, copy, nullable) NSString *kind;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
