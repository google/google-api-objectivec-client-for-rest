// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   TaskQueue API (taskqueue/v1beta2)
// Description:
//   Accesses a Google App Engine Pull Task Queue over REST.
// Documentation:
//   https://developers.google.com/appengine/docs/python/taskqueue/rest

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRTaskqueue_Task;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Taskqueue query classes.
 */
@interface GTLRTaskqueueQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Get detailed information about a TaskQueue.
 *
 *  Method: taskqueue.taskqueues.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTaskqueue
 *    @c kGTLRAuthScopeTaskqueueConsumer
 */
@interface GTLRTaskqueueQuery_TaskqueuesGet : GTLRTaskqueueQuery
// Previous library name was
//   +[GTLQueryTaskqueue queryForTaskqueuesGetWithproject:taskqueue:]

/** Whether to get stats. Optional. */
@property(nonatomic, assign) BOOL getStats;

/** The project under which the queue lies. */
@property(nonatomic, copy, nullable) NSString *project;

/** The id of the taskqueue to get the properties of. */
@property(nonatomic, copy, nullable) NSString *taskqueue;

/**
 *  Fetches a @c GTLRTaskqueue_TaskQueue.
 *
 *  Get detailed information about a TaskQueue.
 *
 *  @param project The project under which the queue lies.
 *  @param taskqueue The id of the taskqueue to get the properties of.
 *
 *  @returns GTLRTaskqueueQuery_TaskqueuesGet
 */
+ (instancetype)queryWithProject:(NSString *)project
                       taskqueue:(NSString *)taskqueue;

@end

/**
 *  Delete a task from a TaskQueue.
 *
 *  Method: taskqueue.tasks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTaskqueue
 *    @c kGTLRAuthScopeTaskqueueConsumer
 */
@interface GTLRTaskqueueQuery_TasksDelete : GTLRTaskqueueQuery
// Previous library name was
//   +[GTLQueryTaskqueue queryForTasksDeleteWithproject:taskqueue:task:]

/** The project under which the queue lies. */
@property(nonatomic, copy, nullable) NSString *project;

/** The id of the task to delete. */
@property(nonatomic, copy, nullable) NSString *task;

/** The taskqueue to delete a task from. */
@property(nonatomic, copy, nullable) NSString *taskqueue;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Delete a task from a TaskQueue.
 *
 *  @param project The project under which the queue lies.
 *  @param taskqueue The taskqueue to delete a task from.
 *  @param task The id of the task to delete.
 *
 *  @returns GTLRTaskqueueQuery_TasksDelete
 */
+ (instancetype)queryWithProject:(NSString *)project
                       taskqueue:(NSString *)taskqueue
                            task:(NSString *)task;

@end

/**
 *  Get a particular task from a TaskQueue.
 *
 *  Method: taskqueue.tasks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTaskqueue
 *    @c kGTLRAuthScopeTaskqueueConsumer
 */
@interface GTLRTaskqueueQuery_TasksGet : GTLRTaskqueueQuery
// Previous library name was
//   +[GTLQueryTaskqueue queryForTasksGetWithproject:taskqueue:task:]

/** The project under which the queue lies. */
@property(nonatomic, copy, nullable) NSString *project;

/** The task to get properties of. */
@property(nonatomic, copy, nullable) NSString *task;

/** The taskqueue in which the task belongs. */
@property(nonatomic, copy, nullable) NSString *taskqueue;

/**
 *  Fetches a @c GTLRTaskqueue_Task.
 *
 *  Get a particular task from a TaskQueue.
 *
 *  @param project The project under which the queue lies.
 *  @param taskqueue The taskqueue in which the task belongs.
 *  @param task The task to get properties of.
 *
 *  @returns GTLRTaskqueueQuery_TasksGet
 */
+ (instancetype)queryWithProject:(NSString *)project
                       taskqueue:(NSString *)taskqueue
                            task:(NSString *)task;

@end

/**
 *  Insert a new task in a TaskQueue
 *
 *  Method: taskqueue.tasks.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTaskqueue
 *    @c kGTLRAuthScopeTaskqueueConsumer
 */
@interface GTLRTaskqueueQuery_TasksInsert : GTLRTaskqueueQuery
// Previous library name was
//   +[GTLQueryTaskqueue queryForTasksInsertWithObject:project:taskqueue:]

/** The project under which the queue lies */
@property(nonatomic, copy, nullable) NSString *project;

/** The taskqueue to insert the task into */
@property(nonatomic, copy, nullable) NSString *taskqueue;

/**
 *  Fetches a @c GTLRTaskqueue_Task.
 *
 *  Insert a new task in a TaskQueue
 *
 *  @param object The @c GTLRTaskqueue_Task to include in the query.
 *  @param project The project under which the queue lies
 *  @param taskqueue The taskqueue to insert the task into
 *
 *  @returns GTLRTaskqueueQuery_TasksInsert
 */
+ (instancetype)queryWithObject:(GTLRTaskqueue_Task *)object
                        project:(NSString *)project
                      taskqueue:(NSString *)taskqueue;

@end

/**
 *  Lease 1 or more tasks from a TaskQueue.
 *
 *  Method: taskqueue.tasks.lease
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTaskqueue
 *    @c kGTLRAuthScopeTaskqueueConsumer
 */
@interface GTLRTaskqueueQuery_TasksLease : GTLRTaskqueueQuery
// Previous library name was
//   +[GTLQueryTaskqueue queryForTasksLeaseWithproject:taskqueue:numTasks:leaseSecs:]

/** When true, all returned tasks will have the same tag */
@property(nonatomic, assign) BOOL groupByTag;

/** The lease in seconds. */
@property(nonatomic, assign) NSInteger leaseSecs;

/** The number of tasks to lease. */
@property(nonatomic, assign) NSInteger numTasks;

/** The project under which the queue lies. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  The tag allowed for tasks in the response. Must only be specified if
 *  group_by_tag is true. If group_by_tag is true and tag is not specified the
 *  tag will be that of the oldest task by eta, i.e. the first available tag
 */
@property(nonatomic, copy, nullable) NSString *tag;

/** The taskqueue to lease a task from. */
@property(nonatomic, copy, nullable) NSString *taskqueue;

/**
 *  Fetches a @c GTLRTaskqueue_Tasks.
 *
 *  Lease 1 or more tasks from a TaskQueue.
 *
 *  @param project The project under which the queue lies.
 *  @param taskqueue The taskqueue to lease a task from.
 *  @param numTasks The number of tasks to lease.
 *  @param leaseSecs The lease in seconds.
 *
 *  @returns GTLRTaskqueueQuery_TasksLease
 */
+ (instancetype)queryWithProject:(NSString *)project
                       taskqueue:(NSString *)taskqueue
                        numTasks:(NSInteger)numTasks
                       leaseSecs:(NSInteger)leaseSecs;

@end

/**
 *  List Tasks in a TaskQueue
 *
 *  Method: taskqueue.tasks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTaskqueue
 *    @c kGTLRAuthScopeTaskqueueConsumer
 */
@interface GTLRTaskqueueQuery_TasksList : GTLRTaskqueueQuery
// Previous library name was
//   +[GTLQueryTaskqueue queryForTasksListWithproject:taskqueue:]

/** The project under which the queue lies. */
@property(nonatomic, copy, nullable) NSString *project;

/** The id of the taskqueue to list tasks from. */
@property(nonatomic, copy, nullable) NSString *taskqueue;

/**
 *  Fetches a @c GTLRTaskqueue_Tasks2.
 *
 *  List Tasks in a TaskQueue
 *
 *  @param project The project under which the queue lies.
 *  @param taskqueue The id of the taskqueue to list tasks from.
 *
 *  @returns GTLRTaskqueueQuery_TasksList
 */
+ (instancetype)queryWithProject:(NSString *)project
                       taskqueue:(NSString *)taskqueue;

@end

/**
 *  Update tasks that are leased out of a TaskQueue. This method supports patch
 *  semantics.
 *
 *  Method: taskqueue.tasks.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTaskqueue
 *    @c kGTLRAuthScopeTaskqueueConsumer
 */
@interface GTLRTaskqueueQuery_TasksPatch : GTLRTaskqueueQuery
// Previous library name was
//   +[GTLQueryTaskqueue queryForTasksPatchWithObject:project:taskqueue:task:newLeaseSeconds:]

/** The new lease in seconds. */
@property(nonatomic, assign) NSInteger newLeaseSeconds;

/** The project under which the queue lies. */
@property(nonatomic, copy, nullable) NSString *project;

@property(nonatomic, copy, nullable) NSString *task;

@property(nonatomic, copy, nullable) NSString *taskqueue;

/**
 *  Fetches a @c GTLRTaskqueue_Task.
 *
 *  Update tasks that are leased out of a TaskQueue. This method supports patch
 *  semantics.
 *
 *  @param object The @c GTLRTaskqueue_Task to include in the query.
 *  @param project The project under which the queue lies.
 *  @param taskqueue NSString
 *  @param task NSString
 *  @param newLeaseSeconds The new lease in seconds.
 *
 *  @returns GTLRTaskqueueQuery_TasksPatch
 */
+ (instancetype)queryWithObject:(GTLRTaskqueue_Task *)object
                        project:(NSString *)project
                      taskqueue:(NSString *)taskqueue
                           task:(NSString *)task
                newLeaseSeconds:(NSInteger)newLeaseSeconds;

@end

/**
 *  Update tasks that are leased out of a TaskQueue.
 *
 *  Method: taskqueue.tasks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTaskqueue
 *    @c kGTLRAuthScopeTaskqueueConsumer
 */
@interface GTLRTaskqueueQuery_TasksUpdate : GTLRTaskqueueQuery
// Previous library name was
//   +[GTLQueryTaskqueue queryForTasksUpdateWithObject:project:taskqueue:task:newLeaseSeconds:]

/** The new lease in seconds. */
@property(nonatomic, assign) NSInteger newLeaseSeconds;

/** The project under which the queue lies. */
@property(nonatomic, copy, nullable) NSString *project;

@property(nonatomic, copy, nullable) NSString *task;

@property(nonatomic, copy, nullable) NSString *taskqueue;

/**
 *  Fetches a @c GTLRTaskqueue_Task.
 *
 *  Update tasks that are leased out of a TaskQueue.
 *
 *  @param object The @c GTLRTaskqueue_Task to include in the query.
 *  @param project The project under which the queue lies.
 *  @param taskqueue NSString
 *  @param task NSString
 *  @param newLeaseSeconds The new lease in seconds.
 *
 *  @returns GTLRTaskqueueQuery_TasksUpdate
 */
+ (instancetype)queryWithObject:(GTLRTaskqueue_Task *)object
                        project:(NSString *)project
                      taskqueue:(NSString *)taskqueue
                           task:(NSString *)task
                newLeaseSeconds:(NSInteger)newLeaseSeconds;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
