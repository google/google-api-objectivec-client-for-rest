// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Replica Pool API (replicapool/v1beta1)
// Description:
//   The Replica Pool API allows users to declaratively provision and manage
//   groups of Google Compute Engine instances based on a common template.
// Documentation:
//   https://developers.google.com/compute/docs/replica-pool/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRReplicaPool_Pool;
@class GTLRReplicaPool_PoolsDeleteRequest;
@class GTLRReplicaPool_ReplicasDeleteRequest;
@class GTLRReplicaPool_Template;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other ReplicaPool query classes.
 */
@interface GTLRReplicaPoolQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Deletes a replica pool.
 *
 *  Method: replicapool.pools.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeReplicaPool
 *    @c kGTLRAuthScopeReplicaPoolCloudPlatform
 *    @c kGTLRAuthScopeReplicaPoolNdevCloudman
 */
@interface GTLRReplicaPoolQuery_PoolsDelete : GTLRReplicaPoolQuery
// Previous library name was
//   +[GTLQueryReplicaPool queryForPoolsDeleteWithObject:projectName:zoneProperty:poolName:]

/** The name of the replica pool for this request. */
@property(nonatomic, copy, nullable) NSString *poolName;

/** The project ID for this replica pool. */
@property(nonatomic, copy, nullable) NSString *projectName;

/**
 *  The zone for this replica pool.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a replica pool.
 *
 *  @param object The @c GTLRReplicaPool_PoolsDeleteRequest to include in the
 *    query.
 *  @param projectName The project ID for this replica pool.
 *  @param zoneProperty The zone for this replica pool.
 *  @param poolName The name of the replica pool for this request.
 *
 *  @return GTLRReplicaPoolQuery_PoolsDelete
 */
+ (instancetype)queryWithObject:(GTLRReplicaPool_PoolsDeleteRequest *)object
                    projectName:(NSString *)projectName
                   zoneProperty:(NSString *)zoneProperty
                       poolName:(NSString *)poolName;

@end

/**
 *  Gets information about a single replica pool.
 *
 *  Method: replicapool.pools.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeReplicaPool
 *    @c kGTLRAuthScopeReplicaPoolCloudPlatform
 *    @c kGTLRAuthScopeReplicaPoolCloudPlatformReadOnly
 *    @c kGTLRAuthScopeReplicaPoolNdevCloudman
 *    @c kGTLRAuthScopeReplicaPoolNdevCloudmanReadonly
 *    @c kGTLRAuthScopeReplicaPoolReadonly
 */
@interface GTLRReplicaPoolQuery_PoolsGet : GTLRReplicaPoolQuery
// Previous library name was
//   +[GTLQueryReplicaPool queryForPoolsGetWithprojectName:zoneProperty:poolName:]

/** The name of the replica pool for this request. */
@property(nonatomic, copy, nullable) NSString *poolName;

/** The project ID for this replica pool. */
@property(nonatomic, copy, nullable) NSString *projectName;

/**
 *  The zone for this replica pool.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

/**
 *  Fetches a @c GTLRReplicaPool_Pool.
 *
 *  Gets information about a single replica pool.
 *
 *  @param projectName The project ID for this replica pool.
 *  @param zoneProperty The zone for this replica pool.
 *  @param poolName The name of the replica pool for this request.
 *
 *  @return GTLRReplicaPoolQuery_PoolsGet
 */
+ (instancetype)queryWithProjectName:(NSString *)projectName
                        zoneProperty:(NSString *)zoneProperty
                            poolName:(NSString *)poolName;

@end

/**
 *  Inserts a new replica pool.
 *
 *  Method: replicapool.pools.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeReplicaPool
 *    @c kGTLRAuthScopeReplicaPoolCloudPlatform
 *    @c kGTLRAuthScopeReplicaPoolNdevCloudman
 */
@interface GTLRReplicaPoolQuery_PoolsInsert : GTLRReplicaPoolQuery
// Previous library name was
//   +[GTLQueryReplicaPool queryForPoolsInsertWithObject:projectName:zoneProperty:]

/** The project ID for this replica pool. */
@property(nonatomic, copy, nullable) NSString *projectName;

/**
 *  The zone for this replica pool.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

/**
 *  Fetches a @c GTLRReplicaPool_Pool.
 *
 *  Inserts a new replica pool.
 *
 *  @param object The @c GTLRReplicaPool_Pool to include in the query.
 *  @param projectName The project ID for this replica pool.
 *  @param zoneProperty The zone for this replica pool.
 *
 *  @return GTLRReplicaPoolQuery_PoolsInsert
 */
+ (instancetype)queryWithObject:(GTLRReplicaPool_Pool *)object
                    projectName:(NSString *)projectName
                   zoneProperty:(NSString *)zoneProperty;

@end

/**
 *  List all replica pools.
 *
 *  Method: replicapool.pools.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeReplicaPool
 *    @c kGTLRAuthScopeReplicaPoolCloudPlatform
 *    @c kGTLRAuthScopeReplicaPoolCloudPlatformReadOnly
 *    @c kGTLRAuthScopeReplicaPoolNdevCloudman
 *    @c kGTLRAuthScopeReplicaPoolNdevCloudmanReadonly
 *    @c kGTLRAuthScopeReplicaPoolReadonly
 */
@interface GTLRReplicaPoolQuery_PoolsList : GTLRReplicaPoolQuery
// Previous library name was
//   +[GTLQueryReplicaPool queryForPoolsListWithprojectName:zoneProperty:]

/**
 *  Maximum count of results to be returned. Acceptable values are 0 to 100,
 *  inclusive. (Default: 50)
 *
 *  @note If not set, the documented server-side default will be 500 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Set this to the nextPageToken value returned by a previous list request to
 *  obtain the next page of results from the previous list request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The project ID for this request. */
@property(nonatomic, copy, nullable) NSString *projectName;

/**
 *  The zone for this replica pool.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

/**
 *  Fetches a @c GTLRReplicaPool_PoolsListResponse.
 *
 *  List all replica pools.
 *
 *  @param projectName The project ID for this request.
 *  @param zoneProperty The zone for this replica pool.
 *
 *  @return GTLRReplicaPoolQuery_PoolsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProjectName:(NSString *)projectName
                        zoneProperty:(NSString *)zoneProperty;

@end

/**
 *  Resize a pool. This is an asynchronous operation, and multiple overlapping
 *  resize requests can be made. Replica Pools will use the information from the
 *  last resize request.
 *
 *  Method: replicapool.pools.resize
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeReplicaPool
 *    @c kGTLRAuthScopeReplicaPoolCloudPlatform
 *    @c kGTLRAuthScopeReplicaPoolNdevCloudman
 */
@interface GTLRReplicaPoolQuery_PoolsResize : GTLRReplicaPoolQuery
// Previous library name was
//   +[GTLQueryReplicaPool queryForPoolsResizeWithprojectName:zoneProperty:poolName:]

/**
 *  The desired number of replicas to resize to. If this number is larger than
 *  the existing number of replicas, new replicas will be added. If the number
 *  is smaller, then existing replicas will be deleted.
 */
@property(nonatomic, assign) NSInteger numReplicas;

/** The name of the replica pool for this request. */
@property(nonatomic, copy, nullable) NSString *poolName;

/** The project ID for this replica pool. */
@property(nonatomic, copy, nullable) NSString *projectName;

/**
 *  The zone for this replica pool.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

/**
 *  Fetches a @c GTLRReplicaPool_Pool.
 *
 *  Resize a pool. This is an asynchronous operation, and multiple overlapping
 *  resize requests can be made. Replica Pools will use the information from the
 *  last resize request.
 *
 *  @param projectName The project ID for this replica pool.
 *  @param zoneProperty The zone for this replica pool.
 *  @param poolName The name of the replica pool for this request.
 *
 *  @return GTLRReplicaPoolQuery_PoolsResize
 */
+ (instancetype)queryWithProjectName:(NSString *)projectName
                        zoneProperty:(NSString *)zoneProperty
                            poolName:(NSString *)poolName;

@end

/**
 *  Update the template used by the pool.
 *
 *  Method: replicapool.pools.updatetemplate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeReplicaPool
 *    @c kGTLRAuthScopeReplicaPoolCloudPlatform
 *    @c kGTLRAuthScopeReplicaPoolNdevCloudman
 */
@interface GTLRReplicaPoolQuery_PoolsUpdatetemplate : GTLRReplicaPoolQuery
// Previous library name was
//   +[GTLQueryReplicaPool queryForPoolsUpdatetemplateWithObject:projectName:zoneProperty:poolName:]

/** The name of the replica pool for this request. */
@property(nonatomic, copy, nullable) NSString *poolName;

/** The project ID for this replica pool. */
@property(nonatomic, copy, nullable) NSString *projectName;

/**
 *  The zone for this replica pool.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Update the template used by the pool.
 *
 *  @param object The @c GTLRReplicaPool_Template to include in the query.
 *  @param projectName The project ID for this replica pool.
 *  @param zoneProperty The zone for this replica pool.
 *  @param poolName The name of the replica pool for this request.
 *
 *  @return GTLRReplicaPoolQuery_PoolsUpdatetemplate
 */
+ (instancetype)queryWithObject:(GTLRReplicaPool_Template *)object
                    projectName:(NSString *)projectName
                   zoneProperty:(NSString *)zoneProperty
                       poolName:(NSString *)poolName;

@end

/**
 *  Deletes a replica from the pool.
 *
 *  Method: replicapool.replicas.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeReplicaPool
 *    @c kGTLRAuthScopeReplicaPoolCloudPlatform
 *    @c kGTLRAuthScopeReplicaPoolNdevCloudman
 */
@interface GTLRReplicaPoolQuery_ReplicasDelete : GTLRReplicaPoolQuery
// Previous library name was
//   +[GTLQueryReplicaPool queryForReplicasDeleteWithObject:projectName:zoneProperty:poolName:replicaName:]

/** The replica pool name for this request. */
@property(nonatomic, copy, nullable) NSString *poolName;

/** The project ID for this request. */
@property(nonatomic, copy, nullable) NSString *projectName;

/** The name of the replica for this request. */
@property(nonatomic, copy, nullable) NSString *replicaName;

/**
 *  The zone where the replica lives.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

/**
 *  Fetches a @c GTLRReplicaPool_Replica.
 *
 *  Deletes a replica from the pool.
 *
 *  @param object The @c GTLRReplicaPool_ReplicasDeleteRequest to include in the
 *    query.
 *  @param projectName The project ID for this request.
 *  @param zoneProperty The zone where the replica lives.
 *  @param poolName The replica pool name for this request.
 *  @param replicaName The name of the replica for this request.
 *
 *  @return GTLRReplicaPoolQuery_ReplicasDelete
 */
+ (instancetype)queryWithObject:(GTLRReplicaPool_ReplicasDeleteRequest *)object
                    projectName:(NSString *)projectName
                   zoneProperty:(NSString *)zoneProperty
                       poolName:(NSString *)poolName
                    replicaName:(NSString *)replicaName;

@end

/**
 *  Gets information about a specific replica.
 *
 *  Method: replicapool.replicas.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeReplicaPool
 *    @c kGTLRAuthScopeReplicaPoolCloudPlatform
 *    @c kGTLRAuthScopeReplicaPoolCloudPlatformReadOnly
 *    @c kGTLRAuthScopeReplicaPoolNdevCloudman
 *    @c kGTLRAuthScopeReplicaPoolNdevCloudmanReadonly
 *    @c kGTLRAuthScopeReplicaPoolReadonly
 */
@interface GTLRReplicaPoolQuery_ReplicasGet : GTLRReplicaPoolQuery
// Previous library name was
//   +[GTLQueryReplicaPool queryForReplicasGetWithprojectName:zoneProperty:poolName:replicaName:]

/** The replica pool name for this request. */
@property(nonatomic, copy, nullable) NSString *poolName;

/** The project ID for this request. */
@property(nonatomic, copy, nullable) NSString *projectName;

/** The name of the replica for this request. */
@property(nonatomic, copy, nullable) NSString *replicaName;

/**
 *  The zone where the replica lives.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

/**
 *  Fetches a @c GTLRReplicaPool_Replica.
 *
 *  Gets information about a specific replica.
 *
 *  @param projectName The project ID for this request.
 *  @param zoneProperty The zone where the replica lives.
 *  @param poolName The replica pool name for this request.
 *  @param replicaName The name of the replica for this request.
 *
 *  @return GTLRReplicaPoolQuery_ReplicasGet
 */
+ (instancetype)queryWithProjectName:(NSString *)projectName
                        zoneProperty:(NSString *)zoneProperty
                            poolName:(NSString *)poolName
                         replicaName:(NSString *)replicaName;

@end

/**
 *  Lists all replicas in a pool.
 *
 *  Method: replicapool.replicas.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeReplicaPool
 *    @c kGTLRAuthScopeReplicaPoolCloudPlatform
 *    @c kGTLRAuthScopeReplicaPoolCloudPlatformReadOnly
 *    @c kGTLRAuthScopeReplicaPoolNdevCloudman
 *    @c kGTLRAuthScopeReplicaPoolNdevCloudmanReadonly
 *    @c kGTLRAuthScopeReplicaPoolReadonly
 */
@interface GTLRReplicaPoolQuery_ReplicasList : GTLRReplicaPoolQuery
// Previous library name was
//   +[GTLQueryReplicaPool queryForReplicasListWithprojectName:zoneProperty:poolName:]

/**
 *  Maximum count of results to be returned. Acceptable values are 0 to 100,
 *  inclusive. (Default: 50)
 *
 *  @note If not set, the documented server-side default will be 500 (from the
 *        range 0..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Set this to the nextPageToken value returned by a previous list request to
 *  obtain the next page of results from the previous list request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The replica pool name for this request. */
@property(nonatomic, copy, nullable) NSString *poolName;

/** The project ID for this request. */
@property(nonatomic, copy, nullable) NSString *projectName;

/**
 *  The zone where the replica pool lives.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

/**
 *  Fetches a @c GTLRReplicaPool_ReplicasListResponse.
 *
 *  Lists all replicas in a pool.
 *
 *  @param projectName The project ID for this request.
 *  @param zoneProperty The zone where the replica pool lives.
 *  @param poolName The replica pool name for this request.
 *
 *  @return GTLRReplicaPoolQuery_ReplicasList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProjectName:(NSString *)projectName
                        zoneProperty:(NSString *)zoneProperty
                            poolName:(NSString *)poolName;

@end

/**
 *  Restarts a replica in a pool.
 *
 *  Method: replicapool.replicas.restart
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeReplicaPool
 *    @c kGTLRAuthScopeReplicaPoolCloudPlatform
 *    @c kGTLRAuthScopeReplicaPoolNdevCloudman
 */
@interface GTLRReplicaPoolQuery_ReplicasRestart : GTLRReplicaPoolQuery
// Previous library name was
//   +[GTLQueryReplicaPool queryForReplicasRestartWithprojectName:zoneProperty:poolName:replicaName:]

/** The replica pool name for this request. */
@property(nonatomic, copy, nullable) NSString *poolName;

/** The project ID for this request. */
@property(nonatomic, copy, nullable) NSString *projectName;

/** The name of the replica for this request. */
@property(nonatomic, copy, nullable) NSString *replicaName;

/**
 *  The zone where the replica lives.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

/**
 *  Fetches a @c GTLRReplicaPool_Replica.
 *
 *  Restarts a replica in a pool.
 *
 *  @param projectName The project ID for this request.
 *  @param zoneProperty The zone where the replica lives.
 *  @param poolName The replica pool name for this request.
 *  @param replicaName The name of the replica for this request.
 *
 *  @return GTLRReplicaPoolQuery_ReplicasRestart
 */
+ (instancetype)queryWithProjectName:(NSString *)projectName
                        zoneProperty:(NSString *)zoneProperty
                            poolName:(NSString *)poolName
                         replicaName:(NSString *)replicaName;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
