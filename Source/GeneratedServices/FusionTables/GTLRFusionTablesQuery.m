// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Fusion Tables API (fusiontables/v2)
// Description:
//   API for working with Fusion Tables data.
// Documentation:
//   https://developers.google.com/fusiontables

#import "GTLRFusionTablesQuery.h"

#import "GTLRFusionTablesObjects.h"

@implementation GTLRFusionTablesQuery

@dynamic fields;

@end

@implementation GTLRFusionTablesQuery_ColumnDelete

@dynamic columnId, tableId;

+ (instancetype)queryWithTableId:(NSString *)tableId
                        columnId:(NSString *)columnId {
  NSArray *pathParams = @[
    @"columnId", @"tableId"
  ];
  NSString *pathURITemplate = @"tables/{tableId}/columns/{columnId}";
  GTLRFusionTablesQuery_ColumnDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.columnId = columnId;
  query.loggingName = @"fusiontables.column.delete";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_ColumnGet

@dynamic columnId, tableId;

+ (instancetype)queryWithTableId:(NSString *)tableId
                        columnId:(NSString *)columnId {
  NSArray *pathParams = @[
    @"columnId", @"tableId"
  ];
  NSString *pathURITemplate = @"tables/{tableId}/columns/{columnId}";
  GTLRFusionTablesQuery_ColumnGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.columnId = columnId;
  query.expectedObjectClass = [GTLRFusionTables_Column class];
  query.loggingName = @"fusiontables.column.get";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_ColumnInsert

@dynamic tableId;

+ (instancetype)queryWithObject:(GTLRFusionTables_Column *)object
                        tableId:(NSString *)tableId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"tableId" ];
  NSString *pathURITemplate = @"tables/{tableId}/columns";
  GTLRFusionTablesQuery_ColumnInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRFusionTables_Column class];
  query.loggingName = @"fusiontables.column.insert";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_ColumnList

@dynamic maxResults, pageToken, tableId;

+ (instancetype)queryWithTableId:(NSString *)tableId {
  NSArray *pathParams = @[ @"tableId" ];
  NSString *pathURITemplate = @"tables/{tableId}/columns";
  GTLRFusionTablesQuery_ColumnList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRFusionTables_ColumnList class];
  query.loggingName = @"fusiontables.column.list";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_ColumnPatch

@dynamic columnId, tableId;

+ (instancetype)queryWithObject:(GTLRFusionTables_Column *)object
                        tableId:(NSString *)tableId
                       columnId:(NSString *)columnId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"columnId", @"tableId"
  ];
  NSString *pathURITemplate = @"tables/{tableId}/columns/{columnId}";
  GTLRFusionTablesQuery_ColumnPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.tableId = tableId;
  query.columnId = columnId;
  query.expectedObjectClass = [GTLRFusionTables_Column class];
  query.loggingName = @"fusiontables.column.patch";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_ColumnUpdate

@dynamic columnId, tableId;

+ (instancetype)queryWithObject:(GTLRFusionTables_Column *)object
                        tableId:(NSString *)tableId
                       columnId:(NSString *)columnId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"columnId", @"tableId"
  ];
  NSString *pathURITemplate = @"tables/{tableId}/columns/{columnId}";
  GTLRFusionTablesQuery_ColumnUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.tableId = tableId;
  query.columnId = columnId;
  query.expectedObjectClass = [GTLRFusionTables_Column class];
  query.loggingName = @"fusiontables.column.update";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_QuerySql

@dynamic hdrs, sql, typed;

+ (instancetype)queryWithSql:(NSString *)sql {
  NSString *pathURITemplate = @"query";
  GTLRFusionTablesQuery_QuerySql *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.sql = sql;
  query.expectedObjectClass = [GTLRFusionTables_Sqlresponse class];
  query.loggingName = @"fusiontables.query.sql";
  return query;
}

+ (instancetype)queryForMediaWithSql:(NSString *)sql {
  GTLRFusionTablesQuery_QuerySql *query =
    [self queryWithSql:sql];
  query.downloadAsDataObjectType = @"media";
  query.useMediaDownloadService = YES;
  query.loggingName = @"Download fusiontables.query.sql";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_QuerySqlGet

@dynamic hdrs, sql, typed;

+ (instancetype)queryWithSql:(NSString *)sql {
  NSString *pathURITemplate = @"query";
  GTLRFusionTablesQuery_QuerySqlGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.sql = sql;
  query.expectedObjectClass = [GTLRFusionTables_Sqlresponse class];
  query.loggingName = @"fusiontables.query.sqlGet";
  return query;
}

+ (instancetype)queryForMediaWithSql:(NSString *)sql {
  GTLRFusionTablesQuery_QuerySqlGet *query =
    [self queryWithSql:sql];
  query.downloadAsDataObjectType = @"media";
  query.useMediaDownloadService = YES;
  query.loggingName = @"Download fusiontables.query.sqlGet";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_StyleDelete

@dynamic styleId, tableId;

+ (instancetype)queryWithTableId:(NSString *)tableId
                         styleId:(NSInteger)styleId {
  NSArray *pathParams = @[
    @"styleId", @"tableId"
  ];
  NSString *pathURITemplate = @"tables/{tableId}/styles/{styleId}";
  GTLRFusionTablesQuery_StyleDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.styleId = styleId;
  query.loggingName = @"fusiontables.style.delete";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_StyleGet

@dynamic styleId, tableId;

+ (instancetype)queryWithTableId:(NSString *)tableId
                         styleId:(NSInteger)styleId {
  NSArray *pathParams = @[
    @"styleId", @"tableId"
  ];
  NSString *pathURITemplate = @"tables/{tableId}/styles/{styleId}";
  GTLRFusionTablesQuery_StyleGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.styleId = styleId;
  query.expectedObjectClass = [GTLRFusionTables_StyleSetting class];
  query.loggingName = @"fusiontables.style.get";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_StyleInsert

@dynamic tableId;

+ (instancetype)queryWithObject:(GTLRFusionTables_StyleSetting *)object
                        tableId:(NSString *)tableId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"tableId" ];
  NSString *pathURITemplate = @"tables/{tableId}/styles";
  GTLRFusionTablesQuery_StyleInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRFusionTables_StyleSetting class];
  query.loggingName = @"fusiontables.style.insert";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_StyleList

@dynamic maxResults, pageToken, tableId;

+ (instancetype)queryWithTableId:(NSString *)tableId {
  NSArray *pathParams = @[ @"tableId" ];
  NSString *pathURITemplate = @"tables/{tableId}/styles";
  GTLRFusionTablesQuery_StyleList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRFusionTables_StyleSettingList class];
  query.loggingName = @"fusiontables.style.list";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_StylePatch

@dynamic styleId, tableId;

+ (instancetype)queryWithObject:(GTLRFusionTables_StyleSetting *)object
                        tableId:(NSString *)tableId
                        styleId:(NSInteger)styleId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"styleId", @"tableId"
  ];
  NSString *pathURITemplate = @"tables/{tableId}/styles/{styleId}";
  GTLRFusionTablesQuery_StylePatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.tableId = tableId;
  query.styleId = styleId;
  query.expectedObjectClass = [GTLRFusionTables_StyleSetting class];
  query.loggingName = @"fusiontables.style.patch";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_StyleUpdate

@dynamic styleId, tableId;

+ (instancetype)queryWithObject:(GTLRFusionTables_StyleSetting *)object
                        tableId:(NSString *)tableId
                        styleId:(NSInteger)styleId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"styleId", @"tableId"
  ];
  NSString *pathURITemplate = @"tables/{tableId}/styles/{styleId}";
  GTLRFusionTablesQuery_StyleUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.tableId = tableId;
  query.styleId = styleId;
  query.expectedObjectClass = [GTLRFusionTables_StyleSetting class];
  query.loggingName = @"fusiontables.style.update";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TableCopy

@dynamic copyPresentation, tableId;

+ (instancetype)queryWithTableId:(NSString *)tableId {
  NSArray *pathParams = @[ @"tableId" ];
  NSString *pathURITemplate = @"tables/{tableId}/copy";
  GTLRFusionTablesQuery_TableCopy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRFusionTables_Table class];
  query.loggingName = @"fusiontables.table.copy";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TableDelete

@dynamic tableId;

+ (instancetype)queryWithTableId:(NSString *)tableId {
  NSArray *pathParams = @[ @"tableId" ];
  NSString *pathURITemplate = @"tables/{tableId}";
  GTLRFusionTablesQuery_TableDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.loggingName = @"fusiontables.table.delete";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TableGet

@dynamic tableId;

+ (instancetype)queryWithTableId:(NSString *)tableId {
  NSArray *pathParams = @[ @"tableId" ];
  NSString *pathURITemplate = @"tables/{tableId}";
  GTLRFusionTablesQuery_TableGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRFusionTables_Table class];
  query.loggingName = @"fusiontables.table.get";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TableImportRows

@dynamic delimiter, encoding, endLine, isStrict, startLine, tableId;

+ (instancetype)queryWithTableId:(NSString *)tableId
                uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSArray *pathParams = @[ @"tableId" ];
  NSString *pathURITemplate = @"tables/{tableId}/import";
  GTLRFusionTablesQuery_TableImportRows *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRFusionTables_Import class];
  query.loggingName = @"fusiontables.table.importRows";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TableImportTable

@dynamic delimiter, encoding, name;

+ (instancetype)queryWithName:(NSString *)name
             uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSString *pathURITemplate = @"tables/import";
  GTLRFusionTablesQuery_TableImportTable *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.name = name;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRFusionTables_Table class];
  query.loggingName = @"fusiontables.table.importTable";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TableInsert

+ (instancetype)queryWithObject:(GTLRFusionTables_Table *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"tables";
  GTLRFusionTablesQuery_TableInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRFusionTables_Table class];
  query.loggingName = @"fusiontables.table.insert";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TableList

@dynamic maxResults, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"tables";
  GTLRFusionTablesQuery_TableList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRFusionTables_TableList class];
  query.loggingName = @"fusiontables.table.list";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TablePatch

@dynamic replaceViewDefinition, tableId;

+ (instancetype)queryWithObject:(GTLRFusionTables_Table *)object
                        tableId:(NSString *)tableId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"tableId" ];
  NSString *pathURITemplate = @"tables/{tableId}";
  GTLRFusionTablesQuery_TablePatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRFusionTables_Table class];
  query.loggingName = @"fusiontables.table.patch";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TableRefetchSheet

@dynamic tableId;

+ (instancetype)queryWithTableId:(NSString *)tableId {
  NSArray *pathParams = @[ @"tableId" ];
  NSString *pathURITemplate = @"tables/{tableId}/refetch";
  GTLRFusionTablesQuery_TableRefetchSheet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRFusionTables_Task class];
  query.loggingName = @"fusiontables.table.refetchSheet";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TableReplaceRows

@dynamic delimiter, encoding, endLine, isStrict, startLine, tableId;

+ (instancetype)queryWithTableId:(NSString *)tableId
                uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSArray *pathParams = @[ @"tableId" ];
  NSString *pathURITemplate = @"tables/{tableId}/replace";
  GTLRFusionTablesQuery_TableReplaceRows *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRFusionTables_Task class];
  query.loggingName = @"fusiontables.table.replaceRows";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TableUpdate

@dynamic replaceViewDefinition, tableId;

+ (instancetype)queryWithObject:(GTLRFusionTables_Table *)object
                        tableId:(NSString *)tableId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"tableId" ];
  NSString *pathURITemplate = @"tables/{tableId}";
  GTLRFusionTablesQuery_TableUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRFusionTables_Table class];
  query.loggingName = @"fusiontables.table.update";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TaskDelete

@dynamic tableId, taskId;

+ (instancetype)queryWithTableId:(NSString *)tableId
                          taskId:(NSString *)taskId {
  NSArray *pathParams = @[
    @"tableId", @"taskId"
  ];
  NSString *pathURITemplate = @"tables/{tableId}/tasks/{taskId}";
  GTLRFusionTablesQuery_TaskDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.taskId = taskId;
  query.loggingName = @"fusiontables.task.delete";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TaskGet

@dynamic tableId, taskId;

+ (instancetype)queryWithTableId:(NSString *)tableId
                          taskId:(NSString *)taskId {
  NSArray *pathParams = @[
    @"tableId", @"taskId"
  ];
  NSString *pathURITemplate = @"tables/{tableId}/tasks/{taskId}";
  GTLRFusionTablesQuery_TaskGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.taskId = taskId;
  query.expectedObjectClass = [GTLRFusionTables_Task class];
  query.loggingName = @"fusiontables.task.get";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TaskList

@dynamic maxResults, pageToken, startIndex, tableId;

+ (instancetype)queryWithTableId:(NSString *)tableId {
  NSArray *pathParams = @[ @"tableId" ];
  NSString *pathURITemplate = @"tables/{tableId}/tasks";
  GTLRFusionTablesQuery_TaskList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRFusionTables_TaskList class];
  query.loggingName = @"fusiontables.task.list";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TemplateDelete

@dynamic tableId, templateId;

+ (instancetype)queryWithTableId:(NSString *)tableId
                      templateId:(NSInteger)templateId {
  NSArray *pathParams = @[
    @"tableId", @"templateId"
  ];
  NSString *pathURITemplate = @"tables/{tableId}/templates/{templateId}";
  GTLRFusionTablesQuery_TemplateDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.templateId = templateId;
  query.loggingName = @"fusiontables.template.delete";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TemplateGet

@dynamic tableId, templateId;

+ (instancetype)queryWithTableId:(NSString *)tableId
                      templateId:(NSInteger)templateId {
  NSArray *pathParams = @[
    @"tableId", @"templateId"
  ];
  NSString *pathURITemplate = @"tables/{tableId}/templates/{templateId}";
  GTLRFusionTablesQuery_TemplateGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.templateId = templateId;
  query.expectedObjectClass = [GTLRFusionTables_Template class];
  query.loggingName = @"fusiontables.template.get";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TemplateInsert

@dynamic tableId;

+ (instancetype)queryWithObject:(GTLRFusionTables_Template *)object
                        tableId:(NSString *)tableId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"tableId" ];
  NSString *pathURITemplate = @"tables/{tableId}/templates";
  GTLRFusionTablesQuery_TemplateInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRFusionTables_Template class];
  query.loggingName = @"fusiontables.template.insert";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TemplateList

@dynamic maxResults, pageToken, tableId;

+ (instancetype)queryWithTableId:(NSString *)tableId {
  NSArray *pathParams = @[ @"tableId" ];
  NSString *pathURITemplate = @"tables/{tableId}/templates";
  GTLRFusionTablesQuery_TemplateList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRFusionTables_TemplateList class];
  query.loggingName = @"fusiontables.template.list";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TemplatePatch

@dynamic tableId, templateId;

+ (instancetype)queryWithObject:(GTLRFusionTables_Template *)object
                        tableId:(NSString *)tableId
                     templateId:(NSInteger)templateId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"tableId", @"templateId"
  ];
  NSString *pathURITemplate = @"tables/{tableId}/templates/{templateId}";
  GTLRFusionTablesQuery_TemplatePatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.tableId = tableId;
  query.templateId = templateId;
  query.expectedObjectClass = [GTLRFusionTables_Template class];
  query.loggingName = @"fusiontables.template.patch";
  return query;
}

@end

@implementation GTLRFusionTablesQuery_TemplateUpdate

@dynamic tableId, templateId;

+ (instancetype)queryWithObject:(GTLRFusionTables_Template *)object
                        tableId:(NSString *)tableId
                     templateId:(NSInteger)templateId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"tableId", @"templateId"
  ];
  NSString *pathURITemplate = @"tables/{tableId}/templates/{templateId}";
  GTLRFusionTablesQuery_TemplateUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.tableId = tableId;
  query.templateId = templateId;
  query.expectedObjectClass = [GTLRFusionTables_Template class];
  query.loggingName = @"fusiontables.template.update";
  return query;
}

@end
