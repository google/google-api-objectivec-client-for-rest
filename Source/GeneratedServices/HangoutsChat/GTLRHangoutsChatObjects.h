// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Chat API (chat/v1)
// Description:
//   Enables bots to fetch information and perform actions in Google Chat.
//   Authentication using a service account is a prerequisite for using the
//   Google Chat REST API.
// Documentation:
//   https://developers.google.com/hangouts/chat

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRHangoutsChat_ActionParameter;
@class GTLRHangoutsChat_ActionResponse;
@class GTLRHangoutsChat_Annotation;
@class GTLRHangoutsChat_Attachment;
@class GTLRHangoutsChat_AttachmentDataRef;
@class GTLRHangoutsChat_Button;
@class GTLRHangoutsChat_Card;
@class GTLRHangoutsChat_CardAction;
@class GTLRHangoutsChat_CardHeader;
@class GTLRHangoutsChat_CardWithId;
@class GTLRHangoutsChat_Color;
@class GTLRHangoutsChat_DriveDataRef;
@class GTLRHangoutsChat_FormAction;
@class GTLRHangoutsChat_GoogleAppsCardV1Action;
@class GTLRHangoutsChat_GoogleAppsCardV1ActionParameter;
@class GTLRHangoutsChat_GoogleAppsCardV1BorderStyle;
@class GTLRHangoutsChat_GoogleAppsCardV1Button;
@class GTLRHangoutsChat_GoogleAppsCardV1ButtonList;
@class GTLRHangoutsChat_GoogleAppsCardV1Card;
@class GTLRHangoutsChat_GoogleAppsCardV1CardAction;
@class GTLRHangoutsChat_GoogleAppsCardV1CardFixedFooter;
@class GTLRHangoutsChat_GoogleAppsCardV1CardHeader;
@class GTLRHangoutsChat_GoogleAppsCardV1DateTimePicker;
@class GTLRHangoutsChat_GoogleAppsCardV1DecoratedText;
@class GTLRHangoutsChat_GoogleAppsCardV1Divider;
@class GTLRHangoutsChat_GoogleAppsCardV1Grid;
@class GTLRHangoutsChat_GoogleAppsCardV1GridItem;
@class GTLRHangoutsChat_GoogleAppsCardV1Icon;
@class GTLRHangoutsChat_GoogleAppsCardV1Image;
@class GTLRHangoutsChat_GoogleAppsCardV1ImageComponent;
@class GTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle;
@class GTLRHangoutsChat_GoogleAppsCardV1OnClick;
@class GTLRHangoutsChat_GoogleAppsCardV1OpenLink;
@class GTLRHangoutsChat_GoogleAppsCardV1Section;
@class GTLRHangoutsChat_GoogleAppsCardV1SelectionInput;
@class GTLRHangoutsChat_GoogleAppsCardV1SelectionItem;
@class GTLRHangoutsChat_GoogleAppsCardV1SuggestionItem;
@class GTLRHangoutsChat_GoogleAppsCardV1Suggestions;
@class GTLRHangoutsChat_GoogleAppsCardV1SwitchControl;
@class GTLRHangoutsChat_GoogleAppsCardV1TextInput;
@class GTLRHangoutsChat_GoogleAppsCardV1TextParagraph;
@class GTLRHangoutsChat_GoogleAppsCardV1Widget;
@class GTLRHangoutsChat_Image;
@class GTLRHangoutsChat_ImageButton;
@class GTLRHangoutsChat_KeyValue;
@class GTLRHangoutsChat_Membership;
@class GTLRHangoutsChat_Message;
@class GTLRHangoutsChat_OnClick;
@class GTLRHangoutsChat_OpenLink;
@class GTLRHangoutsChat_Section;
@class GTLRHangoutsChat_SlashCommand;
@class GTLRHangoutsChat_SlashCommandMetadata;
@class GTLRHangoutsChat_Space;
@class GTLRHangoutsChat_TextButton;
@class GTLRHangoutsChat_TextParagraph;
@class GTLRHangoutsChat_Thread;
@class GTLRHangoutsChat_User;
@class GTLRHangoutsChat_UserMentionMetadata;
@class GTLRHangoutsChat_WidgetMarkup;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_ActionResponse.type

/**
 *  Post as a new message in the topic.
 *
 *  Value: "NEW_MESSAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_NewMessage;
/**
 *  Update a message, with cards only. (Only after a MESSAGE event with a
 *  matched url, or a CARD_CLICKED event on a human created message).
 *
 *  Value: "REQUEST_CONFIG"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_RequestConfig;
/**
 *  Default type; will be handled as NEW_MESSAGE.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_TypeUnspecified;
/**
 *  Update the bot's message. This is only permitted on a CARD_CLICKED event
 *  where the message sender type is BOT.
 *
 *  Value: "UPDATE_MESSAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_UpdateMessage;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Annotation.type

/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "ANNOTATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Annotation_Type_AnnotationTypeUnspecified;
/**
 *  A slash command is invoked.
 *
 *  Value: "SLASH_COMMAND"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Annotation_Type_SlashCommand;
/**
 *  A user is mentioned.
 *
 *  Value: "USER_MENTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Annotation_Type_UserMention;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Attachment.source

/** Value: "DRIVE_FILE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Attachment_Source_DriveFile;
/** Value: "SOURCE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Attachment_Source_SourceUnspecified;
/** Value: "UPLOADED_CONTENT" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Attachment_Source_UploadedContent;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_CardHeader.imageStyle

/**
 *  Circular border.
 *
 *  Value: "AVATAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CardHeader_ImageStyle_Avatar;
/**
 *  Square border.
 *
 *  Value: "IMAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CardHeader_ImageStyle_Image;
/** Value: "IMAGE_STYLE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CardHeader_ImageStyle_ImageStyleUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_DeprecatedEvent.type

/**
 *  The bot was added to a room or DM.
 *
 *  Value: "ADDED_TO_SPACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_Type_AddedToSpace;
/**
 *  The bot's interactive card was clicked.
 *
 *  Value: "CARD_CLICKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_Type_CardClicked;
/**
 *  A message was sent in a room or direct message.
 *
 *  Value: "MESSAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_Type_Message;
/**
 *  The bot was removed from a room or DM.
 *
 *  Value: "REMOVED_FROM_SPACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_Type_RemovedFromSpace;
/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_Type_Unspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Action.loadIndicator

/**
 *  Nothing is displayed.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Action_LoadIndicator_None;
/**
 *  Displays a spinner to indicate that content is loading.
 *
 *  Value: "SPINNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Action_LoadIndicator_Spinner;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1BorderStyle.type

/**
 *  No value specified.
 *
 *  Value: "BORDER_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_BorderTypeUnspecified;
/**
 *  No border.
 *
 *  Value: "NO_BORDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_NoBorder;
/**
 *  Outline.
 *
 *  Value: "STROKE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_Stroke;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Card.displayStyle

/** Value: "DISPLAY_STYLE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_DisplayStyleUnspecified;
/**
 *  The header of the card appears at the bottom of the sidebar, partially
 *  covering the current top card of the stack. Clicking the header pops the
 *  card into the card stack. If the card has no header, a generated header is
 *  used instead.
 *
 *  Value: "PEEK"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_Peek;
/**
 *  The card is shown by replacing the view of the top card in the card stack.
 *
 *  Value: "REPLACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_Replace;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1CardHeader.imageType

/**
 *  Applies a circular mask to the image.
 *
 *  Value: "CIRCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1CardHeader_ImageType_Circle;
/**
 *  Applies no cropping to the image.
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1CardHeader_ImageType_Square;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1DateTimePicker.type

/**
 *  The user can select a date and time.
 *
 *  Value: "DATE_AND_TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_DateAndTime;
/**
 *  The user can only select a date.
 *
 *  Value: "DATE_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_DateOnly;
/**
 *  The user can only select a time.
 *
 *  Value: "TIME_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_TimeOnly;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1GridItem.layout

/**
 *  No layout specified.
 *
 *  Value: "GRID_ITEM_LAYOUT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_GridItemLayoutUnspecified;
/**
 *  The title and subtitle are shown above the grid item's image.
 *
 *  Value: "TEXT_ABOVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_TextAbove;
/**
 *  The title and subtitle are shown below the grid item's image.
 *
 *  Value: "TEXT_BELOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_TextBelow;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1GridItem.textAlignment

/**
 *  Alignment to the center position.
 *
 *  Value: "CENTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_TextAlignment_Center;
/**
 *  Alignment to the end position.
 *
 *  Value: "END"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_TextAlignment_End;
/**
 *  Unspecified alignment.
 *
 *  Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_TextAlignment_HorizontalAlignmentUnspecified;
/**
 *  Alignment to the start position.
 *
 *  Value: "START"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_TextAlignment_Start;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Icon.imageType

/**
 *  Applies a circular mask to the image.
 *
 *  Value: "CIRCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Icon_ImageType_Circle;
/**
 *  Applies no cropping to the image.
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Icon_ImageType_Square;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle.type

/**
 *  Applies a circular crop.
 *
 *  Value: "CIRCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Circle;
/**
 *  No value specified.
 *
 *  Value: "IMAGE_CROP_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_ImageCropTypeUnspecified;
/**
 *  Applies a rectangular crop with a 4:3 aspect ratio.
 *
 *  Value: "RECTANGLE_4_3"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Rectangle43;
/**
 *  Applies a rectangular crop with a custom aspect ratio.
 *
 *  Value: "RECTANGLE_CUSTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_RectangleCustom;
/**
 *  Applies a square crop.
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Square;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1OpenLink.onClose

/**
 *  Doesn’t reload the card after the child window closes. Reloads the card
 *  after the child window closes. If used in conjunction with
 *  [OpenAs.OVERLAY](/workspace/add-ons/reference/rpc/google.apps.card.v1#openas),
 *  the child window acts as a modal dialog and the main card is blocked until
 *  the child window closes.
 *
 *  Value: "NOTHING"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OnClose_Nothing;
/** Value: "RELOAD" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OnClose_Reload;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1OpenLink.openAs

/**
 *  The link opens as a full size window (if that's the frame used by the
 *  client.
 *
 *  Value: "FULL_SIZE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OpenAs_FullSize;
/**
 *  The link opens as an overlay, such as a pop-up.
 *
 *  Value: "OVERLAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OpenAs_Overlay;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1SelectionInput.type

/**
 *  The selection type is a checkbox.
 *
 *  Value: "CHECK_BOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_CheckBox;
/**
 *  The selection type is a dropdown.
 *
 *  Value: "DROPDOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_Dropdown;
/**
 *  The selection type is a radio button.
 *
 *  Value: "RADIO_BUTTON"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_RadioButton;
/**
 *  The selection type is a switch.
 *
 *  Value: "SWITCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_Switch;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1SwitchControl.controlType

/**
 *  Deprecated in favor of `CHECK_BOX`.
 *
 *  Value: "CHECKBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_Checkbox;
/** Value: "CHECK_BOX" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_CheckBox;
/** Value: "SWITCH" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_Switch;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1TextInput.type

/**
 *  The text is put into multiple lines.
 *
 *  Value: "MULTIPLE_LINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1TextInput_Type_MultipleLine;
/**
 *  The text is put into a single line.
 *
 *  Value: "SINGLE_LINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1TextInput_Type_SingleLine;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Widget.horizontalAlignment

/**
 *  Alignment to the center position.
 *
 *  Value: "CENTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_Center;
/**
 *  Alignment to the end position.
 *
 *  Value: "END"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_End;
/**
 *  Unspecified alignment.
 *
 *  Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_HorizontalAlignmentUnspecified;
/**
 *  Alignment to the start position.
 *
 *  Value: "START"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_Start;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_ImageButton.icon

/** Value: "AIRPLANE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Airplane;
/** Value: "BOOKMARK" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Bookmark;
/** Value: "BUS" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Bus;
/** Value: "CAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Car;
/** Value: "CLOCK" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Clock;
/** Value: "CONFIRMATION_NUMBER_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_ConfirmationNumberIcon;
/** Value: "DESCRIPTION" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Description;
/** Value: "DOLLAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Dollar;
/** Value: "EMAIL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Email;
/** Value: "EVENT_PERFORMER" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_EventPerformer;
/** Value: "EVENT_SEAT" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_EventSeat;
/** Value: "FLIGHT_ARRIVAL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_FlightArrival;
/** Value: "FLIGHT_DEPARTURE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_FlightDeparture;
/** Value: "HOTEL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Hotel;
/** Value: "HOTEL_ROOM_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_HotelRoomType;
/** Value: "ICON_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_IconUnspecified;
/** Value: "INVITE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Invite;
/** Value: "MAP_PIN" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_MapPin;
/** Value: "MEMBERSHIP" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Membership;
/** Value: "MULTIPLE_PEOPLE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_MultiplePeople;
/** Value: "OFFER" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Offer;
/** Value: "PERSON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Person;
/** Value: "PHONE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Phone;
/** Value: "RESTAURANT_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_RestaurantIcon;
/** Value: "SHOPPING_CART" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_ShoppingCart;
/** Value: "STAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Star;
/** Value: "STORE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Store;
/** Value: "TICKET" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Ticket;
/** Value: "TRAIN" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Train;
/** Value: "VIDEO_CAMERA" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_VideoCamera;
/** Value: "VIDEO_PLAY" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_VideoPlay;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_KeyValue.icon

/** Value: "AIRPLANE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Airplane;
/** Value: "BOOKMARK" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Bookmark;
/** Value: "BUS" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Bus;
/** Value: "CAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Car;
/** Value: "CLOCK" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Clock;
/** Value: "CONFIRMATION_NUMBER_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_ConfirmationNumberIcon;
/** Value: "DESCRIPTION" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Description;
/** Value: "DOLLAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Dollar;
/** Value: "EMAIL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Email;
/** Value: "EVENT_PERFORMER" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_EventPerformer;
/** Value: "EVENT_SEAT" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_EventSeat;
/** Value: "FLIGHT_ARRIVAL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_FlightArrival;
/** Value: "FLIGHT_DEPARTURE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_FlightDeparture;
/** Value: "HOTEL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Hotel;
/** Value: "HOTEL_ROOM_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_HotelRoomType;
/** Value: "ICON_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_IconUnspecified;
/** Value: "INVITE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Invite;
/** Value: "MAP_PIN" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_MapPin;
/** Value: "MEMBERSHIP" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Membership;
/** Value: "MULTIPLE_PEOPLE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_MultiplePeople;
/** Value: "OFFER" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Offer;
/** Value: "PERSON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Person;
/** Value: "PHONE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Phone;
/** Value: "RESTAURANT_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_RestaurantIcon;
/** Value: "SHOPPING_CART" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_ShoppingCart;
/** Value: "STAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Star;
/** Value: "STORE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Store;
/** Value: "TICKET" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Ticket;
/** Value: "TRAIN" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Train;
/** Value: "VIDEO_CAMERA" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_VideoCamera;
/** Value: "VIDEO_PLAY" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_VideoPlay;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Membership.state

/**
 *  The user has been invited, is able to join the space, but currently has not
 *  joined.
 *
 *  Value: "INVITED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_State_Invited;
/**
 *  The user has joined the space.
 *
 *  Value: "JOINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_State_Joined;
/**
 *  Default, do not use.
 *
 *  Value: "MEMBERSHIP_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_State_MembershipStateUnspecified;
/**
 *  The user is not a member of the space, has not been invited and is not able
 *  to join the space.
 *
 *  Value: "NOT_A_MEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_State_NotAMember;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_SlashCommandMetadata.type

/**
 *  Add bot to space.
 *
 *  Value: "ADD"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_SlashCommandMetadata_Type_Add;
/**
 *  Invoke slash command in space.
 *
 *  Value: "INVOKE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_SlashCommandMetadata_Type_Invoke;
/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_SlashCommandMetadata_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Space.type

/**
 *  1:1 Direct Message between a human and a bot, where all messages are flat.
 *
 *  Value: "DM"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_Type_Dm;
/**
 *  Multi-user spaces such as rooms and DMs between humans.
 *
 *  Value: "ROOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_Type_Room;
/** Value: "TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_User.type

/**
 *  Bot user.
 *
 *  Value: "BOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_User_Type_Bot;
/**
 *  Human user.
 *
 *  Value: "HUMAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_User_Type_Human;
/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_User_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_UserMentionMetadata.type

/**
 *  Add user to space.
 *
 *  Value: "ADD"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_UserMentionMetadata_Type_Add;
/**
 *  Mention user in space.
 *
 *  Value: "MENTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_UserMentionMetadata_Type_Mention;
/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_UserMentionMetadata_Type_TypeUnspecified;

/**
 *  List of string parameters to supply when the action method is invoked. For
 *  example, consider three snooze buttons: snooze now, snooze 1 day, snooze
 *  next week. You might use action method = snooze(), passing the snooze type
 *  and snooze time in the list of string parameters.
 */
@interface GTLRHangoutsChat_ActionParameter : GTLRObject

/** The name of the parameter for the action script. */
@property(nonatomic, copy, nullable) NSString *key;

/** The value of the parameter. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Parameters that a bot can use to configure how it's response is posted.
 */
@interface GTLRHangoutsChat_ActionResponse : GTLRObject

/**
 *  The type of bot response.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_NewMessage Post as a new
 *        message in the topic. (Value: "NEW_MESSAGE")
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_RequestConfig Update a
 *        message, with cards only. (Only after a MESSAGE event with a matched
 *        url, or a CARD_CLICKED event on a human created message). (Value:
 *        "REQUEST_CONFIG")
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_TypeUnspecified Default
 *        type; will be handled as NEW_MESSAGE. (Value: "TYPE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_UpdateMessage Update the
 *        bot's message. This is only permitted on a CARD_CLICKED event where
 *        the message sender type is BOT. (Value: "UPDATE_MESSAGE")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  URL for users to auth or config. (Only for REQUEST_CONFIG response types.)
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Annotations associated with the plain-text body of the message. Example
 *  plain-text message body: ``` Hello \@FooBot how are you!" ``` The
 *  corresponding annotations metadata: ``` "annotations":[{
 *  "type":"USER_MENTION", "startIndex":6, "length":7, "userMention": { "user":
 *  { "name":"users/107946847022116401880", "displayName":"FooBot",
 *  "avatarUrl":"https://goo.gl/aeDtrS", "type":"BOT" }, "type":"MENTION" } }]
 *  ```
 */
@interface GTLRHangoutsChat_Annotation : GTLRObject

/**
 *  Length of the substring in the plain-text message body this annotation
 *  corresponds to.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/** The metadata for a slash command. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_SlashCommandMetadata *slashCommand;

/**
 *  Start index (0-based, inclusive) in the plain-text message body this
 *  annotation corresponds to.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startIndex;

/**
 *  The type of this annotation.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Annotation_Type_AnnotationTypeUnspecified
 *        Default value for the enum. DO NOT USE. (Value:
 *        "ANNOTATION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_Annotation_Type_SlashCommand A slash command is
 *        invoked. (Value: "SLASH_COMMAND")
 *    @arg @c kGTLRHangoutsChat_Annotation_Type_UserMention A user is mentioned.
 *        (Value: "USER_MENTION")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The metadata of user mention. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_UserMentionMetadata *userMention;

@end


/**
 *  An attachment in Hangouts Chat.
 */
@interface GTLRHangoutsChat_Attachment : GTLRObject

/**
 *  A reference to the attachment data. This is used with the media API to
 *  download the attachment data.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_AttachmentDataRef *attachmentDataRef;

/** The original file name for the content, not the full path. */
@property(nonatomic, copy, nullable) NSString *contentName;

/** The content type (MIME type) of the file. */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  Output only. The download URL which should be used to allow a human user to
 *  download the attachment. Bots should not use this URL to download attachment
 *  content.
 */
@property(nonatomic, copy, nullable) NSString *downloadUri;

/** A reference to the drive attachment. This is used with the Drive API. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_DriveDataRef *driveDataRef;

/**
 *  Resource name of the attachment, in the form "spaces/ * /messages/ *
 *  /attachments/ *".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The source of the attachment.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Attachment_Source_DriveFile Value "DRIVE_FILE"
 *    @arg @c kGTLRHangoutsChat_Attachment_Source_SourceUnspecified Value
 *        "SOURCE_UNSPECIFIED"
 *    @arg @c kGTLRHangoutsChat_Attachment_Source_UploadedContent Value
 *        "UPLOADED_CONTENT"
 */
@property(nonatomic, copy, nullable) NSString *source;

/**
 *  Output only. The thumbnail URL which should be used to preview the
 *  attachment to a human user. Bots should not use this URL to download
 *  attachment content.
 */
@property(nonatomic, copy, nullable) NSString *thumbnailUri;

@end


/**
 *  A reference to the data of an attachment.
 */
@interface GTLRHangoutsChat_AttachmentDataRef : GTLRObject

/**
 *  The resource name of the attachment data. This is used with the media API to
 *  download the attachment data.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end


/**
 *  A button. Can be a text button or an image button.
 */
@interface GTLRHangoutsChat_Button : GTLRObject

/** A button with image and onclick action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_ImageButton *imageButton;

/** A button with text and onclick action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_TextButton *textButton;

@end


/**
 *  A card is a UI element that can contain UI widgets such as texts, images.
 */
@interface GTLRHangoutsChat_Card : GTLRObject

/** The actions of this card. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_CardAction *> *cardActions;

/** The header of the card. A header usually contains a title and an image. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_CardHeader *header;

/** Name of the card. */
@property(nonatomic, copy, nullable) NSString *name;

/** Sections are separated by a line divider. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Section *> *sections;

@end


/**
 *  A card action is the action associated with the card. For an invoice card, a
 *  typical action would be: delete invoice, email invoice or open the invoice
 *  in browser.
 */
@interface GTLRHangoutsChat_CardAction : GTLRObject

/** The label used to be displayed in the action menu item. */
@property(nonatomic, copy, nullable) NSString *actionLabel;

/** The onclick action for this action item. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OnClick *onClick;

@end


/**
 *  GTLRHangoutsChat_CardHeader
 */
@interface GTLRHangoutsChat_CardHeader : GTLRObject

/**
 *  The image's type (e.g. square border or circular border).
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_CardHeader_ImageStyle_Avatar Circular border.
 *        (Value: "AVATAR")
 *    @arg @c kGTLRHangoutsChat_CardHeader_ImageStyle_Image Square border.
 *        (Value: "IMAGE")
 *    @arg @c kGTLRHangoutsChat_CardHeader_ImageStyle_ImageStyleUnspecified
 *        Value "IMAGE_STYLE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *imageStyle;

/** The URL of the image in the card header. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/** The subtitle of the card header. */
@property(nonatomic, copy, nullable) NSString *subtitle;

/**
 *  The title must be specified. The header has a fixed height: if both a title
 *  and subtitle is specified, each will take up 1 line. If only the title is
 *  specified, it will take up both lines.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Widgets for chatbots to specify.
 */
@interface GTLRHangoutsChat_CardWithId : GTLRObject

/**
 *  Card proto that allows chatbots to specify UI elements and editable widgets.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Card *card;

/** Chatbot-specified identifier for this widget. Scoped within a message. */
@property(nonatomic, copy, nullable) NSString *cardId;

@end


/**
 *  Represents a color in the RGBA color space. This representation is designed
 *  for simplicity of conversion to/from color representations in various
 *  languages over compactness. For example, the fields of this representation
 *  can be trivially provided to the constructor of `java.awt.Color` in Java; it
 *  can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha`
 *  method in iOS; and, with just a little work, it can be easily formatted into
 *  a CSS `rgba()` string in JavaScript. This reference page doesn't carry
 *  information about the absolute color space that should be used to interpret
 *  the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default,
 *  applications should assume the sRGB color space. When color equality needs
 *  to be decided, implementations, unless documented otherwise, treat two
 *  colors as equal if all their red, green, blue, and alpha values each differ
 *  by at most 1e-5. Example (Java): import com.google.type.Color; // ... public
 *  static java.awt.Color fromProto(Color protocolor) { float alpha =
 *  protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new
 *  java.awt.Color( protocolor.getRed(), protocolor.getGreen(),
 *  protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color
 *  color) { float red = (float) color.getRed(); float green = (float)
 *  color.getGreen(); float blue = (float) color.getBlue(); float denominator =
 *  255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red /
 *  denominator) .setGreen(green / denominator) .setBlue(blue / denominator);
 *  int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha(
 *  FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build());
 *  } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ...
 *  static UIColor* fromProto(Color* protocolor) { float red = [protocolor red];
 *  float green = [protocolor green]; float blue = [protocolor blue];
 *  FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if
 *  (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor
 *  colorWithRed:red green:green blue:blue alpha:alpha]; } static Color*
 *  toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color
 *  getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color*
 *  result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green];
 *  [result setBlue:blue]; if (alpha <= 0.9999) { [result
 *  setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return
 *  result; } // ... Example (JavaScript): // ... var protoToCssColor =
 *  function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac =
 *  rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red =
 *  Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue
 *  = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return
 *  rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value ||
 *  0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(',
 *  rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor =
 *  function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green
 *  << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6
 *  - hexString.length; var resultBuilder = ['#']; for (var i = 0; i <
 *  missingZeros; i++) { resultBuilder.push('0'); }
 *  resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
 */
@interface GTLRHangoutsChat_Color : GTLRObject

/**
 *  The fraction of this color that should be applied to the pixel. That is, the
 *  final pixel color is defined by the equation: `pixel color = alpha * (this
 *  color) + (1.0 - alpha) * (background color)` This means that a value of 1.0
 *  corresponds to a solid color, whereas a value of 0.0 corresponds to a
 *  completely transparent color. This uses a wrapper message rather than a
 *  simple float scalar so that it is possible to distinguish between a default
 *  value and the value being unset. If omitted, this color object is rendered
 *  as a solid color (as if the alpha value had been explicitly given a value of
 *  1.0).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *alpha;

/**
 *  The amount of blue in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blue;

/**
 *  The amount of green in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *green;

/**
 *  The amount of red in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *red;

@end


/**
 *  Google Chat events.
 */
@interface GTLRHangoutsChat_DeprecatedEvent : GTLRObject

/**
 *  The form action data associated with an interactive card that was clicked.
 *  Only populated for CARD_CLICKED events. See the [Interactive Cards
 *  guide](/chat/how-tos/cards-onclick) for more information.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_FormAction *action;

/**
 *  The URL the bot should redirect the user to after they have completed an
 *  authorization or configuration flow outside of Google Chat. See the
 *  [Authorizing access to 3p services guide](/chat/how-tos/auth-3p) for more
 *  information.
 */
@property(nonatomic, copy, nullable) NSString *configCompleteRedirectUrl;

/** The timestamp indicating when the event was dispatched. */
@property(nonatomic, strong, nullable) GTLRDateTime *eventTime;

/** The message that triggered the event, if applicable. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Message *message;

/** The room or DM in which the event occurred. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Space *space;

/**
 *  The bot-defined key for the thread related to the event. See the thread_key
 *  field of the `spaces.message.create` request for more information.
 */
@property(nonatomic, copy, nullable) NSString *threadKey;

/**
 *  A secret value that bots can use to verify if a request is from Google. The
 *  token is randomly generated by Google, remains static, and can be obtained
 *  from the Google Chat API configuration page in the Cloud Console. Developers
 *  can revoke/regenerate it if needed from the same page.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  The type of the event.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_Type_AddedToSpace The bot was
 *        added to a room or DM. (Value: "ADDED_TO_SPACE")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_Type_CardClicked The bot's
 *        interactive card was clicked. (Value: "CARD_CLICKED")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_Type_Message A message was sent
 *        in a room or direct message. (Value: "MESSAGE")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_Type_RemovedFromSpace The bot
 *        was removed from a room or DM. (Value: "REMOVED_FROM_SPACE")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_Type_Unspecified Default value
 *        for the enum. DO NOT USE. (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The user that triggered the event. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *user;

@end


/**
 *  A reference to the data of a drive attachment.
 */
@interface GTLRHangoutsChat_DriveDataRef : GTLRObject

/** The id for the drive file, for use with the Drive API. */
@property(nonatomic, copy, nullable) NSString *driveFileId;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON
 *  representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRHangoutsChat_Empty : GTLRObject
@end


/**
 *  A form action describes the behavior when the form is submitted. For
 *  example, an Apps Script can be invoked to handle the form.
 */
@interface GTLRHangoutsChat_FormAction : GTLRObject

/**
 *  The method name is used to identify which part of the form triggered the
 *  form submission. This information is echoed back to the bot as part of the
 *  card click event. The same method name can be used for several elements that
 *  trigger a common behavior if desired.
 */
@property(nonatomic, copy, nullable) NSString *actionMethodName;

/** List of action parameters. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_ActionParameter *> *parameters;

@end


/**
 *  An action that describes the behavior when the form is submitted. For
 *  example, an Apps Script can be invoked to handle the form.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Action : GTLRObject

/**
 *  Apps Script function to invoke when the containing element is
 *  clicked/activated.
 */
@property(nonatomic, copy, nullable) NSString *function;

/**
 *  loadIndicator
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Action_LoadIndicator_None
 *        Nothing is displayed. (Value: "NONE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Action_LoadIndicator_Spinner
 *        Displays a spinner to indicate that content is loading. (Value:
 *        "SPINNER")
 */
@property(nonatomic, copy, nullable) NSString *loadIndicator;

/** List of action parameters. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1ActionParameter *> *parameters;

/**
 *  Indicates whether form values persist after the action. The default value is
 *  `false`. If `true`, form values remain after the action is triggered. When
 *  using
 *  [LoadIndicator.NONE](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator)
 *  for actions, `persist_values` = `true`is recommended, as it ensures that any
 *  changes made by the user after form or on change actions are sent to the
 *  server are not overwritten by the response. If `false`, the form values are
 *  cleared when the action is triggered. When `persist_values` is set to
 *  `false`, it is strongly recommended that the card use
 *  [LoadIndicator.SPINNER](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator)
 *  for all actions, as this locks the UI to ensure no changes are made by the
 *  user while the action is being processed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *persistValues;

@end


/**
 *  List of string parameters to supply when the action method is invoked. For
 *  example, consider three snooze buttons: snooze now, snooze 1 day, snooze
 *  next week. You might use action method = snooze(), passing the snooze type
 *  and snooze time in the list of string parameters.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1ActionParameter : GTLRObject

/** The name of the parameter for the action script. */
@property(nonatomic, copy, nullable) NSString *key;

/** The value of the parameter. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Represents the complete border style applied to widgets.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1BorderStyle : GTLRObject

/**
 *  The corner radius for the border.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cornerRadius;

/** The colors to use when the type is `BORDER_TYPE_STROKE`. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Color *strokeColor;

/**
 *  The border type.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_BorderTypeUnspecified
 *        No value specified. (Value: "BORDER_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_NoBorder No
 *        border. (Value: "NO_BORDER")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_Stroke Outline.
 *        (Value: "STROKE")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A button. Can be a text button or an image button.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Button : GTLRObject

/**
 *  The alternative text used for accessibility. Has no effect when an icon is
 *  set; use `icon.alt_text` instead.
 */
@property(nonatomic, copy, nullable) NSString *altText;

/** If set, the button is filled with a solid background. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Color *color;

/**
 *  If true, the button is displayed in a disabled state and doesn't respond to
 *  user actions.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

/** The icon image. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Icon *icon;

/** The action to perform when the button is clicked. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OnClick *onClick;

/** The text of the button. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A list of buttons layed out horizontally.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1ButtonList : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1Button *> *buttons;

@end


/**
 *  A card is a UI element that can contain UI widgets such as text and images.
 *  For more information, see Cards . For example, the following JSON creates a
 *  card that has a header with the name, position, icons, and link for a
 *  contact, followed by a section with contact information like email and phone
 *  number. ``` { "header": { "title": "Heba Salam", "subtitle": "Software
 *  Engineer", "imageStyle": "ImageStyle.AVATAR", "imageUrl":
 *  "https://example.com/heba_salam.png", "imageAltText": "Avatar for Heba
 *  Salam" }, "sections" : [ { "header": "Contact Info", "widgets": [ {
 *  "decorated_text": { "icon": { "knownIcon": "EMAIL" }, "content":
 *  "heba.salam\@example.com" } }, { "decoratedText": { "icon": { "knownIcon":
 *  "PERSON" }, "content": "Online" } }, { "decoratedText": { "icon": {
 *  "knownIcon": "PHONE" }, "content": "+1 (555) 555-1234" } }, { "buttons": [ {
 *  "textButton": { "text": "Share", }, "onClick": { "openLink": { "url":
 *  "https://example.com/share" } } }, { "textButton": { "text": "Edit", },
 *  "onClick": { "action": { "function": "goToView", "parameters": [ { "key":
 *  "viewType", "value": "EDIT" } ], "loadIndicator": "LoadIndicator.SPINNER" }
 *  } } ] } ], "collapsible": true, "uncollapsibleWidgetsCount": 3 } ],
 *  "cardActions": [ { "actionLabel": "Send Feedback", "onClick": { "openLink":
 *  { "url": "https://example.com/feedback" } } } ], "name":
 *  "contact-card-K3wB6arF2H9L" } ```
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Card : GTLRObject

/**
 *  The actions of this card. They are added to a card's generated toolbar menu.
 *  For example, the following JSON constructs a card action menu with Settings
 *  and Send Feedback options: ``` "card_actions": [ { "actionLabel": "Setting",
 *  "onClick": { "action": { "functionName": "goToView", "parameters": [ {
 *  "key": "viewType", "value": "SETTING" } ], "loadIndicator":
 *  "LoadIndicator.SPINNER" } } }, { "actionLabel": "Send Feedback", "onClick":
 *  { "openLink": { "url": "https://example.com/feedback" } } } ] ```
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1CardAction *> *cardActions;

/**
 *  The display style for peekCardHeader.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_DisplayStyleUnspecified
 *        Value "DISPLAY_STYLE_UNSPECIFIED"
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_Peek The
 *        header of the card appears at the bottom of the sidebar, partially
 *        covering the current top card of the stack. Clicking the header pops
 *        the card into the card stack. If the card has no header, a generated
 *        header is used instead. (Value: "PEEK")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_Replace The
 *        card is shown by replacing the view of the top card in the card stack.
 *        (Value: "REPLACE")
 */
@property(nonatomic, copy, nullable) NSString *displayStyle;

/** The fixed footer shown at the bottom of this card. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1CardFixedFooter *fixedFooter;

/** The header of the card. A header usually contains a title and an image. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1CardHeader *header;

/**
 *  Name of the card, which is used as a identifier for the card in card
 *  navigation.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  When displaying contextual content, the peek card header acts as a
 *  placeholder so that the user can navigate forward between the homepage cards
 *  and the contextual cards.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1CardHeader *peekCardHeader;

/** Sections are separated by a line divider. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1Section *> *sections;

@end


/**
 *  A card action is the action associated with the card. For example, an
 *  invoice card might include actions such as delete invoice, email invoice, or
 *  open the invoice in a browser.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1CardAction : GTLRObject

/** The label that displays as the action menu item. */
@property(nonatomic, copy, nullable) NSString *actionLabel;

/** The onclick action for this action item. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OnClick *onClick;

@end


/**
 *  A persistent (sticky) footer that is added to the bottom of the card.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1CardFixedFooter : GTLRObject

/**
 *  The primary button of the fixed footer. The button must be a text button
 *  with text and color set.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Button *primaryButton;

/**
 *  The secondary button of the fixed footer. The button must be a text button
 *  with text and color set. `primaryButton` must be set if `secondaryButton` is
 *  set.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Button *secondaryButton;

@end


/**
 *  GTLRHangoutsChat_GoogleAppsCardV1CardHeader
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1CardHeader : GTLRObject

/** The alternative text of this image which is used for accessibility. */
@property(nonatomic, copy, nullable) NSString *imageAltText;

/**
 *  The image's type.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1CardHeader_ImageType_Circle
 *        Applies a circular mask to the image. (Value: "CIRCLE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1CardHeader_ImageType_Square
 *        Applies no cropping to the image. (Value: "SQUARE")
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/** The URL of the image in the card header. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/** The subtitle of the card header. */
@property(nonatomic, copy, nullable) NSString *subtitle;

/**
 *  The title of the card header. The title must be specified. The header has a
 *  fixed height: if both a title and subtitle are specified, each takes up one
 *  line. If only the title is specified, it takes up both lines.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  The widget that lets users to specify a date and time.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1DateTimePicker : GTLRObject

/** The label for the field that displays to the user. */
@property(nonatomic, copy, nullable) NSString *label;

/**
 *  The name of the text input that's used in formInput, and uniquely identifies
 *  this input.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Triggered when the user clicks Save or Clear from the date/time picker
 *  dialog. This is only triggered if the value changed as a result of the
 *  Save/Clear operation.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *onChangeAction;

/**
 *  The number representing the time zone offset from UTC, in minutes. If set,
 *  the `value_ms_epoch` is displayed in the specified time zone. If not set, it
 *  uses the user's time zone setting on the client side.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timezoneOffsetDate;

/**
 *  The type of the date/time picker.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_DateAndTime
 *        The user can select a date and time. (Value: "DATE_AND_TIME")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_DateOnly The
 *        user can only select a date. (Value: "DATE_ONLY")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_TimeOnly The
 *        user can only select a time. (Value: "TIME_ONLY")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The value to display as the default value before user input or previous user
 *  input. It is represented in milliseconds (Epoch time). For `DATE_AND_TIME`
 *  type, the full epoch value is used. For `DATE_ONLY` type, only date of the
 *  epoch time is used. For `TIME_ONLY` type, only time of the epoch time is
 *  used. For example, you can set epoch time to `3 * 60 * 60 * 1000` to
 *  represent 3am.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valueMsEpoch;

@end


/**
 *  A widget that displays text with optional decorations such as a label above
 *  or below the text, an icon in front of the text, a selection widget or a
 *  button after the text.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1DecoratedText : GTLRObject

/** The formatted text label that shows below the main text. */
@property(nonatomic, copy, nullable) NSString *bottomLabel;

/** A button that can be clicked to trigger an action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Button *button;

/** An icon displayed after the text. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Icon *endIcon;

/** Deprecated in favor of start_icon. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Icon *icon;

/** Only the top and bottom label and content region are clickable. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OnClick *onClick;

/** The icon displayed in front of the text. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Icon *startIcon;

/**
 *  A switch widget can be clicked to change its state or trigger an action.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1SwitchControl *switchControl;

/**
 *  Required. The main widget formatted text. See Text formatting for details.
 */
@property(nonatomic, copy, nullable) NSString *text;

/** The formatted text label that shows above the main text. */
@property(nonatomic, copy, nullable) NSString *topLabel;

/**
 *  The wrap text setting. If `true`, the text is wrapped and displayed in
 *  multiline. Otherwise, the text is truncated.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wrapText;

@end


/**
 *  A divider that appears in between widgets.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Divider : GTLRObject
@end


/**
 *  Represents a Grid widget that displays items in a configurable grid layout.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Grid : GTLRCollectionObject

/** The border style to apply to each grid item. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1BorderStyle *borderStyle;

/**
 *  The number of columns to display in the grid. A default value is used if
 *  this field isn't specified, and that default value is different depending on
 *  where the grid is shown (dialog versus companion).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columnCount;

/**
 *  The items to display in the grid.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1GridItem *> *items;

/**
 *  This callback is reused by each individual grid item, but with the item's
 *  identifier and index in the items list added to the callback's parameters.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OnClick *onClick;

/** The text that displays in the grid header. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Represents a single item in the grid layout.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1GridItem : GTLRObject

/**
 *  A user-specified identifier for this grid item. This identifier is returned
 *  in the parent Grid's onClick callback parameters.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The image that displays in the grid item. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1ImageComponent *image;

/**
 *  The layout to use for the grid item.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_GridItemLayoutUnspecified
 *        No layout specified. (Value: "GRID_ITEM_LAYOUT_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_TextAbove The
 *        title and subtitle are shown above the grid item's image. (Value:
 *        "TEXT_ABOVE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_TextBelow The
 *        title and subtitle are shown below the grid item's image. (Value:
 *        "TEXT_BELOW")
 */
@property(nonatomic, copy, nullable) NSString *layout;

/** The grid item's subtitle. */
@property(nonatomic, copy, nullable) NSString *subtitle;

/**
 *  The horizontal alignment of the grid item's text.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_TextAlignment_Center
 *        Alignment to the center position. (Value: "CENTER")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_TextAlignment_End
 *        Alignment to the end position. (Value: "END")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_TextAlignment_HorizontalAlignmentUnspecified
 *        Unspecified alignment. (Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_TextAlignment_Start
 *        Alignment to the start position. (Value: "START")
 */
@property(nonatomic, copy, nullable) NSString *textAlignment;

/** The grid item's title. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  GTLRHangoutsChat_GoogleAppsCardV1Icon
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Icon : GTLRObject

/**
 *  The description of the icon, used for accessibility. The default value is
 *  provided if you don't specify one.
 */
@property(nonatomic, copy, nullable) NSString *altText;

/** The icon specified by a URL. */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The crop style applied to the image. In some cases, applying a `CIRCLE` crop
 *  causes the image to be drawn larger than a standard icon.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Icon_ImageType_Circle Applies a
 *        circular mask to the image. (Value: "CIRCLE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Icon_ImageType_Square Applies no
 *        cropping to the image. (Value: "SQUARE")
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/** The icon specified by the string name of a list of known icons */
@property(nonatomic, copy, nullable) NSString *knownIcon;

@end


/**
 *  An image that is specified by a URL and can have an onClick action.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Image : GTLRObject

/** The alternative text of this image, used for accessibility. */
@property(nonatomic, copy, nullable) NSString *altText;

/** An image URL. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OnClick *onClick;

@end


/**
 *  GTLRHangoutsChat_GoogleAppsCardV1ImageComponent
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1ImageComponent : GTLRObject

/** The accessibility label for the image. */
@property(nonatomic, copy, nullable) NSString *altText;

/** The border style to apply to the image. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1BorderStyle *borderStyle;

/** The crop style to apply to the image. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle *cropStyle;

/** The image URL. */
@property(nonatomic, copy, nullable) NSString *imageUri;

@end


/**
 *  Represents the crop style applied to an image.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle : GTLRObject

/**
 *  The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aspectRatio;

/**
 *  The crop type.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Circle
 *        Applies a circular crop. (Value: "CIRCLE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_ImageCropTypeUnspecified
 *        No value specified. (Value: "IMAGE_CROP_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Rectangle43
 *        Applies a rectangular crop with a 4:3 aspect ratio. (Value:
 *        "RECTANGLE_4_3")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_RectangleCustom
 *        Applies a rectangular crop with a custom aspect ratio. (Value:
 *        "RECTANGLE_CUSTOM")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Square
 *        Applies a square crop. (Value: "SQUARE")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRHangoutsChat_GoogleAppsCardV1OnClick
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1OnClick : GTLRObject

/** If specified, an action is triggered by this onClick. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *action;

/** A new card is pushed to the card stack after clicking if specified. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Card *card;

/**
 *  An add-on triggers this action when the action needs to open a link. This
 *  differs from the open_link above in that this needs to talk to server to get
 *  the link. Thus some preparation work is required for web client to do before
 *  the open link action response comes back.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *openDynamicLinkAction;

/** If specified, this onClick triggers an open link action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OpenLink *openLink;

@end


/**
 *  GTLRHangoutsChat_GoogleAppsCardV1OpenLink
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1OpenLink : GTLRObject

/**
 *  onClose
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OnClose_Nothing Doesn’t
 *        reload the card after the child window closes. Reloads the card after
 *        the child window closes. If used in conjunction with
 *        [OpenAs.OVERLAY](/workspace/add-ons/reference/rpc/google.apps.card.v1#openas),
 *        the child window acts as a modal dialog and the main card is blocked
 *        until the child window closes. (Value: "NOTHING")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OnClose_Reload Value
 *        "RELOAD"
 */
@property(nonatomic, copy, nullable) NSString *onClose;

/**
 *  openAs
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OpenAs_FullSize The
 *        link opens as a full size window (if that's the frame used by the
 *        client. (Value: "FULL_SIZE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OpenAs_Overlay The link
 *        opens as an overlay, such as a pop-up. (Value: "OVERLAY")
 */
@property(nonatomic, copy, nullable) NSString *openAs;

/** The URL to open. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  A section contains a collection of widgets that are rendered vertically in
 *  the order that they are specified. Across all platforms, cards have a narrow
 *  fixed width, so there is currently no need for layout properties, for
 *  example, float.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Section : GTLRObject

/**
 *  Indicates whether this section is collapsible. If a section is collapsible,
 *  the description must be given.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *collapsible;

/** The header of the section. Formatted text is supported. */
@property(nonatomic, copy, nullable) NSString *header;

/**
 *  The number of uncollapsible widgets. For example, when a section contains
 *  five widgets and the `numUncollapsibleWidget` is set to `2`, the first two
 *  widgets are always shown and the last three are collapsed as default. The
 *  `numUncollapsibleWidget` is taken into account only when collapsible is set
 *  to `true`.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *uncollapsibleWidgetsCount;

/** A section must contain at least 1 widget. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1Widget *> *widgets;

@end


/**
 *  A widget that creates a UI item (for example, a drop-down list) with options
 *  for users to select.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1SelectionInput : GTLRCollectionObject

/**
 *  items
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1SelectionItem *> *items;

/** The label displayed ahead of the switch control. */
@property(nonatomic, copy, nullable) NSString *label;

/** The name of the text input which is used in formInput. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If specified, the form is submitted when the selection changes. If not
 *  specified, you must specify a separate button.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *onChangeAction;

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_CheckBox The
 *        selection type is a checkbox. (Value: "CHECK_BOX")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_Dropdown The
 *        selection type is a dropdown. (Value: "DROPDOWN")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_RadioButton
 *        The selection type is a radio button. (Value: "RADIO_BUTTON")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_Switch The
 *        selection type is a switch. (Value: "SWITCH")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The item in the switch control. A radio button, at most one of the items is
 *  selected.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1SelectionItem : GTLRObject

/**
 *  If more than one item is selected for `RADIO_BUTTON` and `DROPDOWN`, the
 *  first selected item is treated as selected and the ones after are ignored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *selected;

/** The text to be displayed. */
@property(nonatomic, copy, nullable) NSString *text;

/**
 *  The value associated with this item. The client should use this as a form
 *  input value.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A suggestion item. Only supports text for now.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1SuggestionItem : GTLRObject

@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A container wrapping elements necessary for showing suggestion items used in
 *  text input autocomplete.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Suggestions : GTLRCollectionObject

/**
 *  A list of suggestions items which will be used in are used in autocomplete.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1SuggestionItem *> *items;

@end


/**
 *  GTLRHangoutsChat_GoogleAppsCardV1SwitchControl
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1SwitchControl : GTLRObject

/**
 *  The control type, either switch or checkbox.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_Checkbox
 *        Deprecated in favor of `CHECK_BOX`. (Value: "CHECKBOX")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_CheckBox
 *        Value "CHECK_BOX"
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_Switch
 *        Value "SWITCH"
 */
@property(nonatomic, copy, nullable) NSString *controlType;

/** The name of the switch widget that's used in formInput. */
@property(nonatomic, copy, nullable) NSString *name;

/** The action when the switch state is changed. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *onChangeAction;

/**
 *  If the switch is selected.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *selected;

/** The value is what is passed back in the callback. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A text input is a UI item where users can input text. A text input can also
 *  have an onChange action and suggestions.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1TextInput : GTLRObject

/**
 *  The refresh function that returns suggestions based on the user's input
 *  text. If the callback is not specified, autocomplete is done in client side
 *  based on the initial suggestion items.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *autoCompleteAction;

/** The hint text. */
@property(nonatomic, copy, nullable) NSString *hintText;

/** The initial suggestions made before any user input. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Suggestions *initialSuggestions;

/** At least one of label and hintText must be specified. */
@property(nonatomic, copy, nullable) NSString *label;

/** The name of the text input which is used in formInput. */
@property(nonatomic, copy, nullable) NSString *name;

/** The onChange action, for example, invoke a function. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *onChangeAction;

/**
 *  The style of the text, for example, a single line or multiple lines.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1TextInput_Type_MultipleLine The
 *        text is put into multiple lines. (Value: "MULTIPLE_LINE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1TextInput_Type_SingleLine The
 *        text is put into a single line. (Value: "SINGLE_LINE")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The default value when there is no input from the user. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A paragraph of text that supports formatting. See [Text
 *  formatting](workspace/add-ons/concepts/widgets#text_formatting") for
 *  details.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1TextParagraph : GTLRObject

/** The text that's shown in the widget. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A widget is a UI element that presents texts, images, etc.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Widget : GTLRObject

/**
 *  A list of buttons. For example, the following JSON creates two buttons. The
 *  first is a filled text button and the second is an image button that opens a
 *  link: ``` "buttonList": { "buttons": [ "button": { "text": "Edit", "Color":
 *  { "Red": 255 "Green": 255 "Blue": 255 } "disabled": true }, "button": {
 *  "icon": { "knownIcon": "INVITE" "altText": "check calendar" }, "onClick": {
 *  "openLink": { "url": "https://example.com/calendar" } } }, ] } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1ButtonList *buttonList;

/**
 *  Displays a selection/input widget for date/time. For example, the following
 *  JSON creates a date/time picker for an appointment time: ```
 *  "date_time_picker": { "name": "appointment_time", "label": "Book your
 *  appointment at:", "type": "DateTimePickerType.DATE_AND_TIME",
 *  "valueMsEpoch": "796435200000" } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1DateTimePicker *dateTimePicker;

/**
 *  Displays a decorated text item in this widget. For example, the following
 *  JSON creates a decorated text widget showing email address: ```
 *  "decoratedText": { "icon": { "knownIcon": "EMAIL" }, "topLabel": "Email
 *  Address", "content": "heba.salam\@example.com", "bottomLabel": "This is a
 *  new Email address!", "switchWidget": { "name":
 *  "has_send_welcome_email_to_heba_salam", "selected": false, "controlType":
 *  "ControlType.CHECKBOX" } } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1DecoratedText *decoratedText;

/**
 *  Displays a divider. For example, the following JSON creates a divider: ```
 *  "divider": { } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Divider *divider;

/**
 *  Displays a grid with a collection of items. For example, the following JSON
 *  creates a 2 column grid with a single item: ``` "grid": { "title": "A fine
 *  collection of items", "numColumns": 2, "borderStyle": { "type": "STROKE",
 *  "cornerRadius": 4.0 }, "items": [ "image": { "imageUri":
 *  "https://www.example.com/image.png", "cropStyle": { "type": "SQUARE" },
 *  "borderStyle": { "type": "STROKE" } }, "title": "An item", "textAlignment":
 *  "CENTER" ], "onClick": { "openLink": { "url":"https://www.example.com" } } }
 *  ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Grid *grid;

/**
 *  The horizontal alignment of this widget.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_Center
 *        Alignment to the center position. (Value: "CENTER")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_End
 *        Alignment to the end position. (Value: "END")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_HorizontalAlignmentUnspecified
 *        Unspecified alignment. (Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_Start
 *        Alignment to the start position. (Value: "START")
 */
@property(nonatomic, copy, nullable) NSString *horizontalAlignment;

/**
 *  Displays an image in this widget. For example, the following JSON creates an
 *  image with alternative text: ``` "image": { "imageUrl":
 *  "https://example.com/heba_salam.png" "altText": "Avatar for Heba Salam" }
 *  ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Image *image;

/**
 *  Displays a switch control in this widget. For example, the following JSON
 *  creates a dropdown selection for size: ``` "switchControl": { "name":
 *  "size", "label": "Size" "type": "SelectionType.DROPDOWN", "items": [ {
 *  "text": "S", "value": "small", "selected": false }, { "text": "M", "value":
 *  "medium", "selected": true }, { "text": "L", "value": "large", "selected":
 *  false }, { "text": "XL", "value": "extra_large", "selected": false } ] } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1SelectionInput *selectionInput;

/**
 *  Displays a text input in this widget. For example, the following JSON
 *  creates a text input for mail address: ``` "textInput": { "name":
 *  "mailing_address", "label": "Mailing Address" } ``` As another example, the
 *  following JSON creates a text input for programming language with static
 *  suggestions: ``` "textInput": { "name": "preferred_programing_language",
 *  "label": "Preferred Language", "initialSuggestions": { "items": [ { "text":
 *  "C++" }, { "text": "Java" }, { "text": "JavaScript" }, { "text": "Python" }
 *  ] } } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1TextInput *textInput;

/**
 *  Displays a text paragraph in this widget. For example, the following JSON
 *  creates a bolded text: ``` "textParagraph": { "text": " *bold text*" } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1TextParagraph *textParagraph;

@end


/**
 *  An image that is specified by a URL and can have an onclick action.
 */
@interface GTLRHangoutsChat_Image : GTLRObject

/**
 *  The aspect ratio of this image (width/height). This field allows clients to
 *  reserve the right height for the image while waiting for it to load. It's
 *  not meant to override the native aspect ratio of the image. If unset, the
 *  server fills it by prefetching the image.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aspectRatio;

/** The URL of the image. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/** The onclick action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OnClick *onClick;

@end


/**
 *  An image button with an onclick action.
 */
@interface GTLRHangoutsChat_ImageButton : GTLRObject

/**
 *  The icon specified by an enum that indices to an icon provided by Chat API.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Airplane Value "AIRPLANE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Bookmark Value "BOOKMARK"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Bus Value "BUS"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Car Value "CAR"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Clock Value "CLOCK"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_ConfirmationNumberIcon Value
 *        "CONFIRMATION_NUMBER_ICON"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Description Value "DESCRIPTION"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Dollar Value "DOLLAR"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Email Value "EMAIL"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_EventPerformer Value
 *        "EVENT_PERFORMER"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_EventSeat Value "EVENT_SEAT"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_FlightArrival Value
 *        "FLIGHT_ARRIVAL"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_FlightDeparture Value
 *        "FLIGHT_DEPARTURE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Hotel Value "HOTEL"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_HotelRoomType Value
 *        "HOTEL_ROOM_TYPE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_IconUnspecified Value
 *        "ICON_UNSPECIFIED"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Invite Value "INVITE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_MapPin Value "MAP_PIN"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Membership Value "MEMBERSHIP"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_MultiplePeople Value
 *        "MULTIPLE_PEOPLE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Offer Value "OFFER"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Person Value "PERSON"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Phone Value "PHONE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_RestaurantIcon Value
 *        "RESTAURANT_ICON"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_ShoppingCart Value
 *        "SHOPPING_CART"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Star Value "STAR"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Store Value "STORE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Ticket Value "TICKET"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Train Value "TRAIN"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_VideoCamera Value
 *        "VIDEO_CAMERA"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_VideoPlay Value "VIDEO_PLAY"
 */
@property(nonatomic, copy, nullable) NSString *icon;

/** The icon specified by a URL. */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The name of this image_button which will be used for accessibility. Default
 *  value will be provided if developers don't specify.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The onclick action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OnClick *onClick;

@end


/**
 *  A UI element contains a key (label) and a value (content). And this element
 *  may also contain some actions such as onclick button.
 */
@interface GTLRHangoutsChat_KeyValue : GTLRObject

/** The text of the bottom label. Formatted text supported. */
@property(nonatomic, copy, nullable) NSString *bottomLabel;

/** A button that can be clicked to trigger an action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Button *button;

/** The text of the content. Formatted text supported and always required. */
@property(nonatomic, copy, nullable) NSString *content;

/**
 *  If the content should be multiline.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *contentMultiline;

/**
 *  An enum value that will be replaced by the Chat API with the corresponding
 *  icon image.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Airplane Value "AIRPLANE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Bookmark Value "BOOKMARK"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Bus Value "BUS"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Car Value "CAR"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Clock Value "CLOCK"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_ConfirmationNumberIcon Value
 *        "CONFIRMATION_NUMBER_ICON"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Description Value "DESCRIPTION"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Dollar Value "DOLLAR"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Email Value "EMAIL"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_EventPerformer Value
 *        "EVENT_PERFORMER"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_EventSeat Value "EVENT_SEAT"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_FlightArrival Value
 *        "FLIGHT_ARRIVAL"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_FlightDeparture Value
 *        "FLIGHT_DEPARTURE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Hotel Value "HOTEL"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_HotelRoomType Value
 *        "HOTEL_ROOM_TYPE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_IconUnspecified Value
 *        "ICON_UNSPECIFIED"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Invite Value "INVITE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_MapPin Value "MAP_PIN"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Membership Value "MEMBERSHIP"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_MultiplePeople Value
 *        "MULTIPLE_PEOPLE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Offer Value "OFFER"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Person Value "PERSON"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Phone Value "PHONE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_RestaurantIcon Value
 *        "RESTAURANT_ICON"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_ShoppingCart Value "SHOPPING_CART"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Star Value "STAR"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Store Value "STORE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Ticket Value "TICKET"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Train Value "TRAIN"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_VideoCamera Value "VIDEO_CAMERA"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_VideoPlay Value "VIDEO_PLAY"
 */
@property(nonatomic, copy, nullable) NSString *icon;

/** The icon specified by a URL. */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The onclick action. Only the top label, bottom label and content region are
 *  clickable.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OnClick *onClick;

/** The text of the top label. Formatted text supported. */
@property(nonatomic, copy, nullable) NSString *topLabel;

@end


/**
 *  GTLRHangoutsChat_ListMembershipsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "memberships" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRHangoutsChat_ListMembershipsResponse : GTLRCollectionObject

/**
 *  List of memberships in the requested (or first) page.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Membership *> *memberships;

/**
 *  Continuation token to retrieve the next page of results. It will be empty
 *  for the last page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRHangoutsChat_ListSpacesResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "spaces" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRHangoutsChat_ListSpacesResponse : GTLRCollectionObject

/**
 *  Continuation token to retrieve the next page of results. It will be empty
 *  for the last page of results. Tokens expire in an hour. An error is thrown
 *  if an expired token is passed.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of spaces in the requested (or first) page.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Space *> *spaces;

@end


/**
 *  Media resource.
 */
@interface GTLRHangoutsChat_Media : GTLRObject

/** Name of the media resource. */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end


/**
 *  Represents a membership relation in Hangouts Chat.
 */
@interface GTLRHangoutsChat_Membership : GTLRObject

/**
 *  The creation time of the membership a.k.a the time at which the member
 *  joined the space, if applicable.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** A User in Hangout Chat */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *member;

@property(nonatomic, copy, nullable) NSString *name;

/**
 *  State of the membership.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Membership_State_Invited The user has been
 *        invited, is able to join the space, but currently has not joined.
 *        (Value: "INVITED")
 *    @arg @c kGTLRHangoutsChat_Membership_State_Joined The user has joined the
 *        space. (Value: "JOINED")
 *    @arg @c kGTLRHangoutsChat_Membership_State_MembershipStateUnspecified
 *        Default, do not use. (Value: "MEMBERSHIP_STATE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_Membership_State_NotAMember The user is not a
 *        member of the space, has not been invited and is not able to join the
 *        space. (Value: "NOT_A_MEMBER")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  A message in Hangouts Chat.
 */
@interface GTLRHangoutsChat_Message : GTLRObject

/**
 *  Input only. Parameters that a bot can use to configure how its response is
 *  posted.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_ActionResponse *actionResponse;

/** Output only. Annotations associated with the text in this message. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Annotation *> *annotations;

/** Plain-text body of the message with all bot mentions stripped out. */
@property(nonatomic, copy, nullable) NSString *argumentText;

/** User uploaded attachment. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Attachment *> *attachment;

/**
 *  Rich, formatted and interactive cards that can be used to display UI
 *  elements such as: formatted texts, buttons, clickable images. Cards are
 *  normally displayed below the plain-text body of the message.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Card *> *cards;

/**
 *  Rich, formatted and interactive cards that can be used to display UI
 *  elements and editable widgets, such as: formatted text, buttons, clickable
 *  images, checkboxes, radio buttons. Cards are normally displayed below the
 *  plain-text body of the message. This v2 allows input widgets. The string key
 *  is a unique identifier among cards in the same message for identifying
 *  inputs.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_CardWithId *> *cardsV2;

/**
 *  Output only. The time at which the message was created in Hangouts Chat
 *  server.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  A plain-text description of the message's cards, used when the actual cards
 *  cannot be displayed (e.g. mobile notifications).
 */
@property(nonatomic, copy, nullable) NSString *fallbackText;

@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Text for generating preview chips. This text will not be displayed to the
 *  user, but any links to images, web pages, videos, etc. included here will
 *  generate preview chips.
 */
@property(nonatomic, copy, nullable) NSString *previewText;

/** The user who created the message. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *sender;

/** Slash command information, if applicable. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_SlashCommand *slashCommand;

/** The space the message belongs to. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Space *space;

/** Plain-text body of the message. */
@property(nonatomic, copy, nullable) NSString *text;

/** The thread the message belongs to. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Thread *thread;

@end


/**
 *  An onclick action (e.g. open a link).
 */
@interface GTLRHangoutsChat_OnClick : GTLRObject

/** A form action will be triggered by this onclick if specified. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_FormAction *action;

/** This onclick triggers an open link action if specified. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OpenLink *openLink;

@end


/**
 *  A link that opens a new window.
 */
@interface GTLRHangoutsChat_OpenLink : GTLRObject

/** The URL to open. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  A section contains a collection of widgets that are rendered (vertically) in
 *  the order that they are specified. Across all platforms, cards have a narrow
 *  fixed width, so there is currently no need for layout properties (e.g.
 *  float).
 */
@interface GTLRHangoutsChat_Section : GTLRObject

/** The header of the section, text formatted supported. */
@property(nonatomic, copy, nullable) NSString *header;

/** A section must contain at least 1 widget. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_WidgetMarkup *> *widgets;

@end


/**
 *  A Slash Command in Chat.
 */
@interface GTLRHangoutsChat_SlashCommand : GTLRObject

/**
 *  The id of the slash command invoked.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *commandId;

@end


/**
 *  Annotation metadata for slash commands (/).
 */
@interface GTLRHangoutsChat_SlashCommandMetadata : GTLRObject

/** The bot whose command was invoked. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *bot;

/**
 *  The command id of the invoked slash command.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *commandId;

/** The name of the invoked slash command. */
@property(nonatomic, copy, nullable) NSString *commandName;

/**
 *  Indicating whether the slash command is for a dialog.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *triggersDialog;

/**
 *  The type of slash command.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_SlashCommandMetadata_Type_Add Add bot to space.
 *        (Value: "ADD")
 *    @arg @c kGTLRHangoutsChat_SlashCommandMetadata_Type_Invoke Invoke slash
 *        command in space. (Value: "INVOKE")
 *    @arg @c kGTLRHangoutsChat_SlashCommandMetadata_Type_TypeUnspecified
 *        Default value for the enum. DO NOT USE. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A room or DM in Hangouts Chat.
 */
@interface GTLRHangoutsChat_Space : GTLRObject

/**
 *  Output only. The display name (only if the space is a room). Please note
 *  that this field might not be populated in direct messages between humans.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Resource name of the space, in the form "spaces/ *". Example:
 *  spaces/AAAAMpdlehYs
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Whether the space is a DM between a bot and a single human.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *singleUserBotDm;

/**
 *  Whether the messages are threaded in this space.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *threaded;

/**
 *  Output only. The type of a space. This is deprecated. Use
 *  `single_user_bot_dm` instead.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Space_Type_Dm 1:1 Direct Message between a human
 *        and a bot, where all messages are flat. (Value: "DM")
 *    @arg @c kGTLRHangoutsChat_Space_Type_Room Multi-user spaces such as rooms
 *        and DMs between humans. (Value: "ROOM")
 *    @arg @c kGTLRHangoutsChat_Space_Type_TypeUnspecified Value
 *        "TYPE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A button with text and onclick action.
 */
@interface GTLRHangoutsChat_TextButton : GTLRObject

/** The onclick action of the button. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OnClick *onClick;

/** The text of the button. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A paragraph of text. Formatted text supported.
 */
@interface GTLRHangoutsChat_TextParagraph : GTLRObject

@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A thread in Hangouts Chat.
 */
@interface GTLRHangoutsChat_Thread : GTLRObject

/**
 *  Resource name, in the form "spaces/ * /threads/ *". Example:
 *  spaces/AAAAMpdlehY/threads/UMxbHmzDlr4
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A user in Google Chat.
 */
@interface GTLRHangoutsChat_User : GTLRObject

/** The user's display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Obfuscated domain information. */
@property(nonatomic, copy, nullable) NSString *domainId;

/**
 *  True when the user is deleted or the user's profile is not visible.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isAnonymous;

/** Resource name, in the format "users/ *". */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  User type.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_User_Type_Bot Bot user. (Value: "BOT")
 *    @arg @c kGTLRHangoutsChat_User_Type_Human Human user. (Value: "HUMAN")
 *    @arg @c kGTLRHangoutsChat_User_Type_TypeUnspecified Default value for the
 *        enum. DO NOT USE. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Annotation metadata for user mentions (\@).
 */
@interface GTLRHangoutsChat_UserMentionMetadata : GTLRObject

/**
 *  The type of user mention.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_UserMentionMetadata_Type_Add Add user to space.
 *        (Value: "ADD")
 *    @arg @c kGTLRHangoutsChat_UserMentionMetadata_Type_Mention Mention user in
 *        space. (Value: "MENTION")
 *    @arg @c kGTLRHangoutsChat_UserMentionMetadata_Type_TypeUnspecified Default
 *        value for the enum. DO NOT USE. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The user mentioned. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *user;

@end


/**
 *  A widget is a UI element that presents texts, images, etc.
 */
@interface GTLRHangoutsChat_WidgetMarkup : GTLRObject

/**
 *  A list of buttons. Buttons is also oneof data and only one of these fields
 *  should be set.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Button *> *buttons;

/** Display an image in this widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Image *image;

/** Display a key value item in this widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_KeyValue *keyValue;

/** Display a text paragraph in this widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_TextParagraph *textParagraph;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
