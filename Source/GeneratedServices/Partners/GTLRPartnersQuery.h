// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Partners API (partners/v2)
// Description:
//   Searches certified companies and creates contact leads with them, and also
//   audits the usage of clients.
// Documentation:
//   https://developers.google.com/partners/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRPartners_Company;
@class GTLRPartners_CompanyRelation;
@class GTLRPartners_CreateLeadRequest;
@class GTLRPartners_Lead;
@class GTLRPartners_LogMessageRequest;
@class GTLRPartners_LogUserEventRequest;
@class GTLRPartners_UserProfile;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// gpsMotivations

/** Value: "GPSM_HELP_WITH_ADVERTISING" */
GTLR_EXTERN NSString * const kGTLRPartnersGpsMotivationsGpsmHelpWithAdvertising;
/** Value: "GPSM_HELP_WITH_WEBSITE" */
GTLR_EXTERN NSString * const kGTLRPartnersGpsMotivationsGpsmHelpWithWebsite;
/** Value: "GPSM_NO_WEBSITE" */
GTLR_EXTERN NSString * const kGTLRPartnersGpsMotivationsGpsmNoWebsite;
/** Value: "GPS_MOTIVATION_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRPartnersGpsMotivationsGpsMotivationUnspecified;

// ----------------------------------------------------------------------------
// industries

/** Value: "I_AUTOMOTIVE" */
GTLR_EXTERN NSString * const kGTLRPartnersIndustriesIAutomotive;
/** Value: "I_BUSINESS_TO_BUSINESS" */
GTLR_EXTERN NSString * const kGTLRPartnersIndustriesIBusinessToBusiness;
/** Value: "I_CONSUMER_PACKAGED_GOODS" */
GTLR_EXTERN NSString * const kGTLRPartnersIndustriesIConsumerPackagedGoods;
/** Value: "I_EDUCATION" */
GTLR_EXTERN NSString * const kGTLRPartnersIndustriesIEducation;
/** Value: "I_FINANCE" */
GTLR_EXTERN NSString * const kGTLRPartnersIndustriesIFinance;
/** Value: "I_HEALTHCARE" */
GTLR_EXTERN NSString * const kGTLRPartnersIndustriesIHealthcare;
/** Value: "I_MEDIA_AND_ENTERTAINMENT" */
GTLR_EXTERN NSString * const kGTLRPartnersIndustriesIMediaAndEntertainment;
/** Value: "INDUSTRY_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRPartnersIndustriesIndustryUnspecified;
/** Value: "I_RETAIL" */
GTLR_EXTERN NSString * const kGTLRPartnersIndustriesIRetail;
/** Value: "I_TECHNOLOGY" */
GTLR_EXTERN NSString * const kGTLRPartnersIndustriesITechnology;
/** Value: "I_TRAVEL" */
GTLR_EXTERN NSString * const kGTLRPartnersIndustriesITravel;

// ----------------------------------------------------------------------------
// services

/** Value: "S_ADVANCED_ADWORDS_SUPPORT" */
GTLR_EXTERN NSString * const kGTLRPartnersServicesSAdvancedAdwordsSupport;
/** Value: "S_ADVERTISING_ON_GOOGLE" */
GTLR_EXTERN NSString * const kGTLRPartnersServicesSAdvertisingOnGoogle;
/** Value: "S_AN_ENHANCED_WEBSITE" */
GTLR_EXTERN NSString * const kGTLRPartnersServicesSAnEnhancedWebsite;
/** Value: "S_AN_ONLINE_MARKETING_PLAN" */
GTLR_EXTERN NSString * const kGTLRPartnersServicesSAnOnlineMarketingPlan;
/** Value: "SERVICE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRPartnersServicesServiceUnspecified;
/** Value: "S_MOBILE_AND_VIDEO_ADS" */
GTLR_EXTERN NSString * const kGTLRPartnersServicesSMobileAndVideoAds;
/** Value: "S_MOBILE_WEBSITE_SERVICES" */
GTLR_EXTERN NSString * const kGTLRPartnersServicesSMobileWebsiteServices;

// ----------------------------------------------------------------------------
// specializations

/** Value: "BADGE_SPECIALIZATION_ADWORDS_DISPLAY" */
GTLR_EXTERN NSString * const kGTLRPartnersSpecializationsBadgeSpecializationAdwordsDisplay;
/** Value: "BADGE_SPECIALIZATION_ADWORDS_MOBILE" */
GTLR_EXTERN NSString * const kGTLRPartnersSpecializationsBadgeSpecializationAdwordsMobile;
/** Value: "BADGE_SPECIALIZATION_ADWORDS_SEARCH" */
GTLR_EXTERN NSString * const kGTLRPartnersSpecializationsBadgeSpecializationAdwordsSearch;
/** Value: "BADGE_SPECIALIZATION_ADWORDS_SHOPPING" */
GTLR_EXTERN NSString * const kGTLRPartnersSpecializationsBadgeSpecializationAdwordsShopping;
/** Value: "BADGE_SPECIALIZATION_ADWORDS_VIDEO" */
GTLR_EXTERN NSString * const kGTLRPartnersSpecializationsBadgeSpecializationAdwordsVideo;
/** Value: "BADGE_SPECIALIZATION_UNKNOWN" */
GTLR_EXTERN NSString * const kGTLRPartnersSpecializationsBadgeSpecializationUnknown;

// ----------------------------------------------------------------------------
// userView

/** Value: "BASIC" */
GTLR_EXTERN NSString * const kGTLRPartnersUserViewBasic;
/** Value: "PROFILE" */
GTLR_EXTERN NSString * const kGTLRPartnersUserViewProfile;
/** Value: "PUBLIC_PROFILE" */
GTLR_EXTERN NSString * const kGTLRPartnersUserViewPublicProfile;

// ----------------------------------------------------------------------------
// view

/** Value: "COMPANY_VIEW_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRPartnersViewCompanyViewUnspecified;
/** Value: "CV_GOOGLE_PARTNER_SEARCH" */
GTLR_EXTERN NSString * const kGTLRPartnersViewCvGooglePartnerSearch;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Partners query classes.
 */
@interface GTLRPartnersQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Lists analytics data for a user's associated company.
 *  Should only be called within the context of an authorized logged in user.
 *
 *  Method: partners.analytics.list
 */
@interface GTLRPartnersQuery_AnalyticsList : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForAnalyticsList]

/**
 *  Requested page size. Server may return fewer analytics than requested.
 *  If unspecified or set to 0, default value is 30.
 *  Specifies the number of days in the date range when querying analytics.
 *  The `page_token` represents the end date of the date range
 *  and the start date is calculated using the `page_size` as the number
 *  of days BEFORE the end date.
 *  Must be a non-negative integer.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results that the server returns.
 *  Typically, this is the value of `ListAnalyticsResponse.next_page_token`
 *  returned from the previous call to
 *  ListAnalytics.
 *  Will be a date string in `YYYY-MM-DD` format representing the end date
 *  of the date range of results to return.
 *  If unspecified or set to "", default value is the current date.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Experiment IDs the current request belongs to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestMetadataExperimentIds;

/** Locale to use for the current request. */
@property(nonatomic, copy, nullable) NSString *requestMetadataLocale;

/** Google Partners session ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataPartnersSessionId;

/**
 *  Identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSourceId;

/**
 *  Second level identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSubId;

/** IP address to use instead of the user's geo-located IP address. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesIpAddress;

/** Logged-in user ID to impersonate instead of the user's ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesUserId;

/**
 *  Fetches a @c GTLRPartners_ListAnalyticsResponse.
 *
 *  Lists analytics data for a user's associated company.
 *  Should only be called within the context of an authorized logged in user.
 *
 *  @return GTLRPartnersQuery_AnalyticsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Logs a generic message from the client, such as
 *  `Failed to render component`, `Profile page is running slow`,
 *  `More than 500 users have accessed this result.`, etc.
 *
 *  Method: partners.clientMessages.log
 */
@interface GTLRPartnersQuery_ClientMessagesLog : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForClientMessagesLogWithObject:]

/**
 *  Fetches a @c GTLRPartners_LogMessageResponse.
 *
 *  Logs a generic message from the client, such as
 *  `Failed to render component`, `Profile page is running slow`,
 *  `More than 500 users have accessed this result.`, etc.
 *
 *  @param object The @c GTLRPartners_LogMessageRequest to include in the query.
 *
 *  @return GTLRPartnersQuery_ClientMessagesLog
 */
+ (instancetype)queryWithObject:(GTLRPartners_LogMessageRequest *)object;

@end

/**
 *  Gets a company.
 *
 *  Method: partners.companies.get
 */
@interface GTLRPartnersQuery_CompaniesGet : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForCompaniesGetWithcompanyId:]

/**
 *  The address to use for sorting the company's addresses by proximity.
 *  If not given, the geo-located address of the request is used.
 *  Used when order_by is set.
 */
@property(nonatomic, copy, nullable) NSString *address;

/** The ID of the company to retrieve. */
@property(nonatomic, copy, nullable) NSString *companyId;

/**
 *  If the company's budget is in a different currency code than this one, then
 *  the converted budget is converted to this currency code.
 */
@property(nonatomic, copy, nullable) NSString *currencyCode;

/**
 *  How to order addresses within the returned company. Currently, only
 *  `address` and `address desc` is supported which will sorted by closest to
 *  farthest in distance from given address and farthest to closest distance
 *  from given address respectively.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Experiment IDs the current request belongs to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestMetadataExperimentIds;

/** Locale to use for the current request. */
@property(nonatomic, copy, nullable) NSString *requestMetadataLocale;

/** Google Partners session ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataPartnersSessionId;

/**
 *  Identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSourceId;

/**
 *  Second level identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSubId;

/** IP address to use instead of the user's geo-located IP address. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesIpAddress;

/** Logged-in user ID to impersonate instead of the user's ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesUserId;

/**
 *  The view of `Company` resource to be returned. This must not be
 *  `COMPANY_VIEW_UNSPECIFIED`.
 *
 *  Likely values:
 *    @arg @c kGTLRPartnersViewCompanyViewUnspecified Value
 *        "COMPANY_VIEW_UNSPECIFIED"
 *    @arg @c kGTLRPartnersViewCvGooglePartnerSearch Value
 *        "CV_GOOGLE_PARTNER_SEARCH"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRPartners_GetCompanyResponse.
 *
 *  Gets a company.
 *
 *  @param companyId The ID of the company to retrieve.
 *
 *  @return GTLRPartnersQuery_CompaniesGet
 */
+ (instancetype)queryWithCompanyId:(NSString *)companyId;

@end

/**
 *  Creates an advertiser lead for the given company ID.
 *
 *  Method: partners.companies.leads.create
 */
@interface GTLRPartnersQuery_CompaniesLeadsCreate : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForCompaniesLeadsCreateWithObject:companyId:]

/** The ID of the company to contact. */
@property(nonatomic, copy, nullable) NSString *companyId;

/**
 *  Fetches a @c GTLRPartners_CreateLeadResponse.
 *
 *  Creates an advertiser lead for the given company ID.
 *
 *  @param object The @c GTLRPartners_CreateLeadRequest to include in the query.
 *  @param companyId The ID of the company to contact.
 *
 *  @return GTLRPartnersQuery_CompaniesLeadsCreate
 */
+ (instancetype)queryWithObject:(GTLRPartners_CreateLeadRequest *)object
                      companyId:(NSString *)companyId;

@end

/**
 *  Lists companies.
 *
 *  Method: partners.companies.list
 */
@interface GTLRPartnersQuery_CompaniesList : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForCompaniesList]

/**
 *  The address to use when searching for companies.
 *  If not given, the geo-located address of the request is used.
 */
@property(nonatomic, copy, nullable) NSString *address;

/** Company name to search for. */
@property(nonatomic, copy, nullable) NSString *companyName;

/**
 *  List of reasons for using Google Partner Search to get companies.
 *
 *  Likely values:
 *    @arg @c kGTLRPartnersGpsMotivationsGpsMotivationUnspecified Value
 *        "GPS_MOTIVATION_UNSPECIFIED"
 *    @arg @c kGTLRPartnersGpsMotivationsGpsmHelpWithAdvertising Value
 *        "GPSM_HELP_WITH_ADVERTISING"
 *    @arg @c kGTLRPartnersGpsMotivationsGpsmHelpWithWebsite Value
 *        "GPSM_HELP_WITH_WEBSITE"
 *    @arg @c kGTLRPartnersGpsMotivationsGpsmNoWebsite Value "GPSM_NO_WEBSITE"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *gpsMotivations;

/**
 *  List of industries the company can help with.
 *
 *  Likely values:
 *    @arg @c kGTLRPartnersIndustriesIndustryUnspecified Value
 *        "INDUSTRY_UNSPECIFIED"
 *    @arg @c kGTLRPartnersIndustriesIAutomotive Value "I_AUTOMOTIVE"
 *    @arg @c kGTLRPartnersIndustriesIBusinessToBusiness Value
 *        "I_BUSINESS_TO_BUSINESS"
 *    @arg @c kGTLRPartnersIndustriesIConsumerPackagedGoods Value
 *        "I_CONSUMER_PACKAGED_GOODS"
 *    @arg @c kGTLRPartnersIndustriesIEducation Value "I_EDUCATION"
 *    @arg @c kGTLRPartnersIndustriesIFinance Value "I_FINANCE"
 *    @arg @c kGTLRPartnersIndustriesIHealthcare Value "I_HEALTHCARE"
 *    @arg @c kGTLRPartnersIndustriesIMediaAndEntertainment Value
 *        "I_MEDIA_AND_ENTERTAINMENT"
 *    @arg @c kGTLRPartnersIndustriesIRetail Value "I_RETAIL"
 *    @arg @c kGTLRPartnersIndustriesITechnology Value "I_TECHNOLOGY"
 *    @arg @c kGTLRPartnersIndustriesITravel Value "I_TRAVEL"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *industries;

/**
 *  List of language codes that company can support. Only primary language
 *  subtags are accepted as defined by
 *  <a href="https://tools.ietf.org/html/bcp47">BCP 47</a>
 *  (IETF BCP 47, "Tags for Identifying Languages").
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *languageCodes;

/** The 3-letter currency code defined in ISO 4217. */
@property(nonatomic, copy, nullable) NSString *maxMonthlyBudgetCurrencyCode;

/**
 *  Number of nano (10^-9) units of the amount.
 *  The value must be between -999,999,999 and +999,999,999 inclusive.
 *  If `units` is positive, `nanos` must be positive or zero.
 *  If `units` is zero, `nanos` can be positive, zero, or negative.
 *  If `units` is negative, `nanos` must be negative or zero.
 *  For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
 */
@property(nonatomic, assign) NSInteger maxMonthlyBudgetNanos;

/**
 *  The whole units of the amount.
 *  For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
 */
@property(nonatomic, assign) long long maxMonthlyBudgetUnits;

/** The 3-letter currency code defined in ISO 4217. */
@property(nonatomic, copy, nullable) NSString *minMonthlyBudgetCurrencyCode;

/**
 *  Number of nano (10^-9) units of the amount.
 *  The value must be between -999,999,999 and +999,999,999 inclusive.
 *  If `units` is positive, `nanos` must be positive or zero.
 *  If `units` is zero, `nanos` can be positive, zero, or negative.
 *  If `units` is negative, `nanos` must be negative or zero.
 *  For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
 */
@property(nonatomic, assign) NSInteger minMonthlyBudgetNanos;

/**
 *  The whole units of the amount.
 *  For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
 */
@property(nonatomic, assign) long long minMonthlyBudgetUnits;

/**
 *  How to order addresses within the returned companies. Currently, only
 *  `address` and `address desc` is supported which will sorted by closest to
 *  farthest in distance from given address and farthest to closest distance
 *  from given address respectively.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Requested page size. Server may return fewer companies than requested.
 *  If unspecified, server picks an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results that the server returns.
 *  Typically, this is the value of `ListCompaniesResponse.next_page_token`
 *  returned from the previous call to
 *  ListCompanies.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Experiment IDs the current request belongs to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestMetadataExperimentIds;

/** Locale to use for the current request. */
@property(nonatomic, copy, nullable) NSString *requestMetadataLocale;

/** Google Partners session ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataPartnersSessionId;

/**
 *  Identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSourceId;

/**
 *  Second level identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSubId;

/** IP address to use instead of the user's geo-located IP address. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesIpAddress;

/** Logged-in user ID to impersonate instead of the user's ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesUserId;

/**
 *  List of services that the returned agencies should provide. If this is
 *  not empty, any returned agency must have at least one of these services,
 *  or one of the specializations in the "specializations" field.
 *
 *  Likely values:
 *    @arg @c kGTLRPartnersServicesServiceUnspecified Value
 *        "SERVICE_UNSPECIFIED"
 *    @arg @c kGTLRPartnersServicesSAdvancedAdwordsSupport Value
 *        "S_ADVANCED_ADWORDS_SUPPORT"
 *    @arg @c kGTLRPartnersServicesSAdvertisingOnGoogle Value
 *        "S_ADVERTISING_ON_GOOGLE"
 *    @arg @c kGTLRPartnersServicesSAnEnhancedWebsite Value
 *        "S_AN_ENHANCED_WEBSITE"
 *    @arg @c kGTLRPartnersServicesSAnOnlineMarketingPlan Value
 *        "S_AN_ONLINE_MARKETING_PLAN"
 *    @arg @c kGTLRPartnersServicesSMobileAndVideoAds Value
 *        "S_MOBILE_AND_VIDEO_ADS"
 *    @arg @c kGTLRPartnersServicesSMobileWebsiteServices Value
 *        "S_MOBILE_WEBSITE_SERVICES"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *services;

/**
 *  List of specializations that the returned agencies should provide. If this
 *  is not empty, any returned agency must have at least one of these
 *  specializations, or one of the services in the "services" field.
 *
 *  Likely values:
 *    @arg @c kGTLRPartnersSpecializationsBadgeSpecializationUnknown Value
 *        "BADGE_SPECIALIZATION_UNKNOWN"
 *    @arg @c kGTLRPartnersSpecializationsBadgeSpecializationAdwordsSearch Value
 *        "BADGE_SPECIALIZATION_ADWORDS_SEARCH"
 *    @arg @c kGTLRPartnersSpecializationsBadgeSpecializationAdwordsDisplay
 *        Value "BADGE_SPECIALIZATION_ADWORDS_DISPLAY"
 *    @arg @c kGTLRPartnersSpecializationsBadgeSpecializationAdwordsMobile Value
 *        "BADGE_SPECIALIZATION_ADWORDS_MOBILE"
 *    @arg @c kGTLRPartnersSpecializationsBadgeSpecializationAdwordsVideo Value
 *        "BADGE_SPECIALIZATION_ADWORDS_VIDEO"
 *    @arg @c kGTLRPartnersSpecializationsBadgeSpecializationAdwordsShopping
 *        Value "BADGE_SPECIALIZATION_ADWORDS_SHOPPING"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *specializations;

/**
 *  The view of the `Company` resource to be returned. This must not be
 *  `COMPANY_VIEW_UNSPECIFIED`.
 *
 *  Likely values:
 *    @arg @c kGTLRPartnersViewCompanyViewUnspecified Value
 *        "COMPANY_VIEW_UNSPECIFIED"
 *    @arg @c kGTLRPartnersViewCvGooglePartnerSearch Value
 *        "CV_GOOGLE_PARTNER_SEARCH"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Website URL that will help to find a better matched company.
 *  .
 */
@property(nonatomic, copy, nullable) NSString *websiteUrl;

/**
 *  Fetches a @c GTLRPartners_ListCompaniesResponse.
 *
 *  Lists companies.
 *
 *  @return GTLRPartnersQuery_CompaniesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Lists advertiser leads for a user's associated company.
 *  Should only be called within the context of an authorized logged in user.
 *
 *  Method: partners.leads.list
 */
@interface GTLRPartnersQuery_LeadsList : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForLeadsList]

/**
 *  How to order Leads. Currently, only `create_time`
 *  and `create_time desc` are supported
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Requested page size. Server may return fewer leads than requested.
 *  If unspecified, server picks an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results that the server returns.
 *  Typically, this is the value of `ListLeadsResponse.next_page_token`
 *  returned from the previous call to
 *  ListLeads.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Experiment IDs the current request belongs to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestMetadataExperimentIds;

/** Locale to use for the current request. */
@property(nonatomic, copy, nullable) NSString *requestMetadataLocale;

/** Google Partners session ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataPartnersSessionId;

/**
 *  Identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSourceId;

/**
 *  Second level identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSubId;

/** IP address to use instead of the user's geo-located IP address. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesIpAddress;

/** Logged-in user ID to impersonate instead of the user's ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesUserId;

/**
 *  Fetches a @c GTLRPartners_ListLeadsResponse.
 *
 *  Lists advertiser leads for a user's associated company.
 *  Should only be called within the context of an authorized logged in user.
 *
 *  @return GTLRPartnersQuery_LeadsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Lists the Historical Offers for the current user (or user's entire company)
 *
 *  Method: partners.offers.history.list
 */
@interface GTLRPartnersQuery_OffersHistoryList : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForOffersHistoryList]

/**
 *  if true, show history for the entire company. Requires user to be admin.
 */
@property(nonatomic, assign) BOOL entireCompany;

/**
 *  Comma-separated list of fields to order by, e.g.: "foo,bar,baz".
 *  Use "foo desc" to sort descending.
 *  List of valid field names is: name, offer_code, expiration_time, status,
 *  last_modified_time, sender_name, creation_time, country_code,
 *  offer_type.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Maximum number of rows to return per page. */
@property(nonatomic, assign) NSInteger pageSize;

/** Token to retrieve a specific page. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Experiment IDs the current request belongs to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestMetadataExperimentIds;

/** Locale to use for the current request. */
@property(nonatomic, copy, nullable) NSString *requestMetadataLocale;

/** Google Partners session ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataPartnersSessionId;

/**
 *  Identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSourceId;

/**
 *  Second level identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSubId;

/** IP address to use instead of the user's geo-located IP address. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesIpAddress;

/** Logged-in user ID to impersonate instead of the user's ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesUserId;

/**
 *  Fetches a @c GTLRPartners_ListOffersHistoryResponse.
 *
 *  Lists the Historical Offers for the current user (or user's entire company)
 *
 *  @return GTLRPartnersQuery_OffersHistoryList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Lists the Offers available for the current user
 *
 *  Method: partners.offers.list
 */
@interface GTLRPartnersQuery_OffersList : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForOffersList]

/** Experiment IDs the current request belongs to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestMetadataExperimentIds;

/** Locale to use for the current request. */
@property(nonatomic, copy, nullable) NSString *requestMetadataLocale;

/** Google Partners session ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataPartnersSessionId;

/**
 *  Identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSourceId;

/**
 *  Second level identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSubId;

/** IP address to use instead of the user's geo-located IP address. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesIpAddress;

/** Logged-in user ID to impersonate instead of the user's ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesUserId;

/**
 *  Fetches a @c GTLRPartners_ListOffersResponse.
 *
 *  Lists the Offers available for the current user
 *
 *  @return GTLRPartnersQuery_OffersList
 */
+ (instancetype)query;

@end

/**
 *  Logs a user event.
 *
 *  Method: partners.userEvents.log
 */
@interface GTLRPartnersQuery_UserEventsLog : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForUserEventsLogWithObject:]

/**
 *  Fetches a @c GTLRPartners_LogUserEventResponse.
 *
 *  Logs a user event.
 *
 *  @param object The @c GTLRPartners_LogUserEventRequest to include in the
 *    query.
 *
 *  @return GTLRPartnersQuery_UserEventsLog
 */
+ (instancetype)queryWithObject:(GTLRPartners_LogUserEventRequest *)object;

@end

/**
 *  Creates a user's company relation. Affiliates the user to a company.
 *
 *  Method: partners.users.createCompanyRelation
 */
@interface GTLRPartnersQuery_UsersCreateCompanyRelation : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForUsersCreateCompanyRelationWithObject:userId:]

/** Experiment IDs the current request belongs to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestMetadataExperimentIds;

/** Locale to use for the current request. */
@property(nonatomic, copy, nullable) NSString *requestMetadataLocale;

/** Google Partners session ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataPartnersSessionId;

/**
 *  Identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSourceId;

/**
 *  Second level identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSubId;

/** IP address to use instead of the user's geo-located IP address. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesIpAddress;

/** Logged-in user ID to impersonate instead of the user's ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesUserId;

/**
 *  The ID of the user. Can be set to <code>me</code> to mean
 *  the currently authenticated user.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRPartners_CompanyRelation.
 *
 *  Creates a user's company relation. Affiliates the user to a company.
 *
 *  @param object The @c GTLRPartners_CompanyRelation to include in the query.
 *  @param userId The ID of the user. Can be set to <code>me</code> to mean
 *    the currently authenticated user.
 *
 *  @return GTLRPartnersQuery_UsersCreateCompanyRelation
 */
+ (instancetype)queryWithObject:(GTLRPartners_CompanyRelation *)object
                         userId:(NSString *)userId;

@end

/**
 *  Deletes a user's company relation. Unaffiliaites the user from a company.
 *
 *  Method: partners.users.deleteCompanyRelation
 */
@interface GTLRPartnersQuery_UsersDeleteCompanyRelation : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForUsersDeleteCompanyRelationWithuserId:]

/** Experiment IDs the current request belongs to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestMetadataExperimentIds;

/** Locale to use for the current request. */
@property(nonatomic, copy, nullable) NSString *requestMetadataLocale;

/** Google Partners session ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataPartnersSessionId;

/**
 *  Identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSourceId;

/**
 *  Second level identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSubId;

/** IP address to use instead of the user's geo-located IP address. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesIpAddress;

/** Logged-in user ID to impersonate instead of the user's ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesUserId;

/**
 *  The ID of the user. Can be set to <code>me</code> to mean
 *  the currently authenticated user.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRPartners_Empty.
 *
 *  Deletes a user's company relation. Unaffiliaites the user from a company.
 *
 *  @param userId The ID of the user. Can be set to <code>me</code> to mean
 *    the currently authenticated user.
 *
 *  @return GTLRPartnersQuery_UsersDeleteCompanyRelation
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Gets a user.
 *
 *  Method: partners.users.get
 */
@interface GTLRPartnersQuery_UsersGet : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForUsersGetWithuserId:]

/** Experiment IDs the current request belongs to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestMetadataExperimentIds;

/** Locale to use for the current request. */
@property(nonatomic, copy, nullable) NSString *requestMetadataLocale;

/** Google Partners session ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataPartnersSessionId;

/**
 *  Identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSourceId;

/**
 *  Second level identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSubId;

/** IP address to use instead of the user's geo-located IP address. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesIpAddress;

/** Logged-in user ID to impersonate instead of the user's ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesUserId;

/**
 *  Identifier of the user. Can be set to <code>me</code> to mean the currently
 *  authenticated user.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Specifies what parts of the user information to return.
 *
 *  Likely values:
 *    @arg @c kGTLRPartnersUserViewBasic Value "BASIC"
 *    @arg @c kGTLRPartnersUserViewProfile Value "PROFILE"
 *    @arg @c kGTLRPartnersUserViewPublicProfile Value "PUBLIC_PROFILE"
 */
@property(nonatomic, copy, nullable) NSString *userView;

/**
 *  Fetches a @c GTLRPartners_User.
 *
 *  Gets a user.
 *
 *  @param userId Identifier of the user. Can be set to <code>me</code> to mean
 *    the currently
 *    authenticated user.
 *
 *  @return GTLRPartnersQuery_UsersGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Lists states for current user.
 *
 *  Method: partners.userStates.list
 */
@interface GTLRPartnersQuery_UserStatesList : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForUserStatesList]

/** Experiment IDs the current request belongs to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestMetadataExperimentIds;

/** Locale to use for the current request. */
@property(nonatomic, copy, nullable) NSString *requestMetadataLocale;

/** Google Partners session ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataPartnersSessionId;

/**
 *  Identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSourceId;

/**
 *  Second level identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSubId;

/** IP address to use instead of the user's geo-located IP address. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesIpAddress;

/** Logged-in user ID to impersonate instead of the user's ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesUserId;

/**
 *  Fetches a @c GTLRPartners_ListUserStatesResponse.
 *
 *  Lists states for current user.
 *
 *  @return GTLRPartnersQuery_UserStatesList
 */
+ (instancetype)query;

@end

/**
 *  Updates a user's profile. A user can only update their own profile and
 *  should only be called within the context of a logged in user.
 *
 *  Method: partners.users.updateProfile
 */
@interface GTLRPartnersQuery_UsersUpdateProfile : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForUsersUpdateProfileWithObject:]

/** Experiment IDs the current request belongs to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestMetadataExperimentIds;

/** Locale to use for the current request. */
@property(nonatomic, copy, nullable) NSString *requestMetadataLocale;

/** Google Partners session ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataPartnersSessionId;

/**
 *  Identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSourceId;

/**
 *  Second level identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSubId;

/** IP address to use instead of the user's geo-located IP address. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesIpAddress;

/** Logged-in user ID to impersonate instead of the user's ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesUserId;

/**
 *  Fetches a @c GTLRPartners_UserProfile.
 *
 *  Updates a user's profile. A user can only update their own profile and
 *  should only be called within the context of a logged in user.
 *
 *  @param object The @c GTLRPartners_UserProfile to include in the query.
 *
 *  @return GTLRPartnersQuery_UsersUpdateProfile
 */
+ (instancetype)queryWithObject:(GTLRPartners_UserProfile *)object;

@end

/**
 *  Gets Partners Status of the logged in user's agency.
 *  Should only be called if the logged in user is the admin of the agency.
 *
 *  Method: partners.getPartnersstatus
 */
@interface GTLRPartnersQuery_V2GetPartnersstatus : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForGetPartnersstatus]

/** Experiment IDs the current request belongs to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestMetadataExperimentIds;

/** Locale to use for the current request. */
@property(nonatomic, copy, nullable) NSString *requestMetadataLocale;

/** Google Partners session ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataPartnersSessionId;

/**
 *  Identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSourceId;

/**
 *  Second level identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSubId;

/** IP address to use instead of the user's geo-located IP address. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesIpAddress;

/** Logged-in user ID to impersonate instead of the user's ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesUserId;

/**
 *  Fetches a @c GTLRPartners_GetPartnersStatusResponse.
 *
 *  Gets Partners Status of the logged in user's agency.
 *  Should only be called if the logged in user is the admin of the agency.
 *
 *  @return GTLRPartnersQuery_V2GetPartnersstatus
 */
+ (instancetype)query;

@end

/**
 *  Update company.
 *  Should only be called within the context of an authorized logged in user.
 *
 *  Method: partners.updateCompanies
 */
@interface GTLRPartnersQuery_V2UpdateCompanies : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForUpdateCompaniesWithObject:]

/** Experiment IDs the current request belongs to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestMetadataExperimentIds;

/** Locale to use for the current request. */
@property(nonatomic, copy, nullable) NSString *requestMetadataLocale;

/** Google Partners session ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataPartnersSessionId;

/**
 *  Identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSourceId;

/**
 *  Second level identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSubId;

/** IP address to use instead of the user's geo-located IP address. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesIpAddress;

/** Logged-in user ID to impersonate instead of the user's ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesUserId;

/**
 *  Standard field mask for the set of fields to be updated.
 *  Required with at least 1 value in FieldMask's paths.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRPartners_Company.
 *
 *  Update company.
 *  Should only be called within the context of an authorized logged in user.
 *
 *  @param object The @c GTLRPartners_Company to include in the query.
 *
 *  @return GTLRPartnersQuery_V2UpdateCompanies
 */
+ (instancetype)queryWithObject:(GTLRPartners_Company *)object;

@end

/**
 *  Updates the specified lead.
 *
 *  Method: partners.updateLeads
 */
@interface GTLRPartnersQuery_V2UpdateLeads : GTLRPartnersQuery
// Previous library name was
//   +[GTLQueryPartners queryForUpdateLeadsWithObject:]

/** Experiment IDs the current request belongs to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestMetadataExperimentIds;

/** Locale to use for the current request. */
@property(nonatomic, copy, nullable) NSString *requestMetadataLocale;

/** Google Partners session ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataPartnersSessionId;

/**
 *  Identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSourceId;

/**
 *  Second level identifier to indicate where the traffic comes from.
 *  An identifier has multiple letters created by a team which redirected the
 *  traffic to us.
 */
@property(nonatomic, copy, nullable) NSString *requestMetadataTrafficSourceTrafficSubId;

/** IP address to use instead of the user's geo-located IP address. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesIpAddress;

/** Logged-in user ID to impersonate instead of the user's ID. */
@property(nonatomic, copy, nullable) NSString *requestMetadataUserOverridesUserId;

/**
 *  Standard field mask for the set of fields to be updated.
 *  Required with at least 1 value in FieldMask's paths.
 *  Only `state` and `adwords_customer_id` are currently supported.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRPartners_Lead.
 *
 *  Updates the specified lead.
 *
 *  @param object The @c GTLRPartners_Lead to include in the query.
 *
 *  @return GTLRPartnersQuery_V2UpdateLeads
 */
+ (instancetype)queryWithObject:(GTLRPartners_Lead *)object;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
