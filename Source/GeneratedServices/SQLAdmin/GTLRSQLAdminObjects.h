// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud SQL Admin API (sqladmin/v1beta4)
// Description:
//   Creates and manages Cloud SQL instances, which provide fully managed MySQL
//   or PostgreSQL databases.
// Documentation:
//   https://cloud.google.com/sql/docs/reference/latest

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRSQLAdmin_AclEntry;
@class GTLRSQLAdmin_ApiWarning;
@class GTLRSQLAdmin_BackupConfiguration;
@class GTLRSQLAdmin_BackupRun;
@class GTLRSQLAdmin_BinLogCoordinates;
@class GTLRSQLAdmin_CloneContext;
@class GTLRSQLAdmin_Database;
@class GTLRSQLAdmin_DatabaseFlags;
@class GTLRSQLAdmin_DatabaseInstance;
@class GTLRSQLAdmin_DatabaseInstance_FailoverReplica;
@class GTLRSQLAdmin_DemoteMasterConfiguration;
@class GTLRSQLAdmin_DemoteMasterContext;
@class GTLRSQLAdmin_DemoteMasterMySqlReplicaConfiguration;
@class GTLRSQLAdmin_ExportContext;
@class GTLRSQLAdmin_ExportContext_CsvExportOptions;
@class GTLRSQLAdmin_ExportContext_SqlExportOptions;
@class GTLRSQLAdmin_ExportContext_SqlExportOptions_MysqlExportOptions;
@class GTLRSQLAdmin_FailoverContext;
@class GTLRSQLAdmin_Flag;
@class GTLRSQLAdmin_ImportContext;
@class GTLRSQLAdmin_ImportContext_CsvImportOptions;
@class GTLRSQLAdmin_IpConfiguration;
@class GTLRSQLAdmin_IpMapping;
@class GTLRSQLAdmin_LocationPreference;
@class GTLRSQLAdmin_MaintenanceWindow;
@class GTLRSQLAdmin_MySqlReplicaConfiguration;
@class GTLRSQLAdmin_OnPremisesConfiguration;
@class GTLRSQLAdmin_Operation;
@class GTLRSQLAdmin_OperationError;
@class GTLRSQLAdmin_OperationErrors;
@class GTLRSQLAdmin_ReplicaConfiguration;
@class GTLRSQLAdmin_RestoreBackupContext;
@class GTLRSQLAdmin_RotateServerCaContext;
@class GTLRSQLAdmin_Settings;
@class GTLRSQLAdmin_Settings_UserLabels;
@class GTLRSQLAdmin_SslCert;
@class GTLRSQLAdmin_SslCertDetail;
@class GTLRSQLAdmin_Tier;
@class GTLRSQLAdmin_TruncateLogContext;
@class GTLRSQLAdmin_User;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  An entry for an Access Control list.
 */
@interface GTLRSQLAdmin_AclEntry : GTLRObject

/**
 *  The time when this access control entry expires in RFC 3339 format, for
 *  example 2012-11-15T16:19:00.094Z.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expirationTime;

/** This is always sql#aclEntry. */
@property(nonatomic, copy, nullable) NSString *kind;

/** An optional label to identify this entry. */
@property(nonatomic, copy, nullable) NSString *name;

/** The whitelisted value for the access control list. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  An Admin API warning message.
 */
@interface GTLRSQLAdmin_ApiWarning : GTLRObject

/** Code to uniquely identify the warning type. */
@property(nonatomic, copy, nullable) NSString *code;

/** The warning message. */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  Database instance backup configuration.
 */
@interface GTLRSQLAdmin_BackupConfiguration : GTLRObject

/**
 *  Whether binary log is enabled. If backup configuration is disabled, binary
 *  log must be disabled as well.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *binaryLogEnabled;

/**
 *  Whether this configuration is enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

/** This is always sql#backupConfiguration. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *replicationLogArchivingEnabled;

/**
 *  Start time for the daily backup configuration in UTC timezone in the 24 hour
 *  format - HH:MM.
 */
@property(nonatomic, copy, nullable) NSString *startTime;

@end


/**
 *  A BackupRun resource.
 */
@interface GTLRSQLAdmin_BackupRun : GTLRObject

/**
 *  The description of this run, only applicable to on-demand backups.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The time the backup operation completed in UTC timezone in RFC 3339 format,
 *  for example 2012-11-15T16:19:00.094Z.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The time the run was enqueued in UTC timezone in RFC 3339 format, for
 *  example 2012-11-15T16:19:00.094Z.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *enqueuedTime;

/**
 *  Information about why the backup operation failed. This is only present if
 *  the run has the FAILED status.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_OperationError *error;

/**
 *  The identifier for this backup run. Unique only for a specific Cloud SQL
 *  instance.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

/** Name of the database instance. */
@property(nonatomic, copy, nullable) NSString *instance;

/** This is always sql#backupRun. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The URI of this resource. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  The time the backup operation actually started in UTC timezone in RFC 3339
 *  format, for example 2012-11-15T16:19:00.094Z.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/** The status of this run. */
@property(nonatomic, copy, nullable) NSString *status;

/** The type of this run; can be either "AUTOMATED" or "ON_DEMAND". */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The start time of the backup window during which this the backup was
 *  attempted in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *windowStartTime;

@end


/**
 *  Backup run list results.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSQLAdmin_BackupRunsListResponse : GTLRCollectionObject

/**
 *  A list of backup runs in reverse chronological order of the enqueued time.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_BackupRun *> *items;

/** This is always sql#backupRunsList. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The continuation token, used to page through large result sets. Provide this
 *  value in a subsequent request to return the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Binary log coordinates.
 */
@interface GTLRSQLAdmin_BinLogCoordinates : GTLRObject

/** Name of the binary log file for a Cloud SQL instance. */
@property(nonatomic, copy, nullable) NSString *binLogFileName;

/**
 *  Position (offset) within the binary log file.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *binLogPosition;

/** This is always sql#binLogCoordinates. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Database instance clone context.
 */
@interface GTLRSQLAdmin_CloneContext : GTLRObject

/**
 *  Binary log coordinates, if specified, identify the position up to which the
 *  source instance should be cloned. If not specified, the source instance is
 *  cloned up to the most recent binary log coordinates.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_BinLogCoordinates *binLogCoordinates;

/** Name of the Cloud SQL instance to be created as a clone. */
@property(nonatomic, copy, nullable) NSString *destinationInstanceName;

/** This is always sql#cloneContext. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Reserved for future use.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pitrTimestampMs;

@end


/**
 *  Represents a SQL database on the Cloud SQL instance.
 */
@interface GTLRSQLAdmin_Database : GTLRObject

/** The MySQL charset value. */
@property(nonatomic, copy, nullable) NSString *charset;

/** The MySQL collation value. */
@property(nonatomic, copy, nullable) NSString *collation;

/**
 *  This field is deprecated and will be removed from a future version of the
 *  API.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The name of the Cloud SQL instance. This does not include the project ID.
 */
@property(nonatomic, copy, nullable) NSString *instance;

/** This is always sql#database. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the database in the Cloud SQL instance. This does not include
 *  the project ID or instance name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The project ID of the project containing the Cloud SQL database. The Google
 *  apps domain is prefixed if applicable.
 */
@property(nonatomic, copy, nullable) NSString *project;

/** The URI of this resource. */
@property(nonatomic, copy, nullable) NSString *selfLink;

@end


/**
 *  Database flags for Cloud SQL instances.
 */
@interface GTLRSQLAdmin_DatabaseFlags : GTLRObject

/**
 *  The name of the flag. These flags are passed at instance startup, so include
 *  both server options and system variables for MySQL. Flags should be
 *  specified with underscores, not hyphens. For more information, see
 *  Configuring Database Flags in the Cloud SQL documentation.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The value of the flag. Booleans should be set to on for true and off for
 *  false. This field must be omitted if the flag doesn't take a value.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A Cloud SQL instance resource.
 */
@interface GTLRSQLAdmin_DatabaseInstance : GTLRObject

/**
 *  FIRST_GEN: First Generation instance. MySQL only.
 *  SECOND_GEN: Second Generation instance or PostgreSQL instance.
 *  EXTERNAL: A database server that is not managed by Google.
 *  This property is read-only; use the tier property in the settings object to
 *  determine the database type and Second or First Generation.
 */
@property(nonatomic, copy, nullable) NSString *backendType;

/** Connection name of the Cloud SQL instance used in connection strings. */
@property(nonatomic, copy, nullable) NSString *connectionName;

/**
 *  The current disk usage of the instance in bytes. This property has been
 *  deprecated. Users should use the
 *  "cloudsql.googleapis.com/database/disk/bytes_used" metric in Cloud
 *  Monitoring API instead. Please see this announcement for details.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentDiskSize;

/**
 *  The database engine type and version. The databaseVersion field can not be
 *  changed after instance creation. MySQL Second Generation instances:
 *  MYSQL_5_7 (default) or MYSQL_5_6. PostgreSQL instances: POSTGRES_9_6 MySQL
 *  First Generation instances: MYSQL_5_6 (default) or MYSQL_5_5
 */
@property(nonatomic, copy, nullable) NSString *databaseVersion;

/**
 *  This field is deprecated and will be removed from a future version of the
 *  API. Use the settings.settingsVersion field instead.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The name and status of the failover replica. This property is applicable
 *  only to Second Generation instances.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_DatabaseInstance_FailoverReplica *failoverReplica;

/**
 *  The Compute Engine zone that the instance is currently serving from. This
 *  value could be different from the zone that was specified when the instance
 *  was created if the instance has failed over to its secondary zone.
 */
@property(nonatomic, copy, nullable) NSString *gceZone;

/**
 *  The instance type. This can be one of the following.
 *  CLOUD_SQL_INSTANCE: A Cloud SQL instance that is not replicating from a
 *  master.
 *  ON_PREMISES_INSTANCE: An instance running on the customer's premises.
 *  READ_REPLICA_INSTANCE: A Cloud SQL instance configured as a read-replica.
 */
@property(nonatomic, copy, nullable) NSString *instanceType;

/** The assigned IP addresses for the instance. */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_IpMapping *> *ipAddresses;

/**
 *  The IPv6 address assigned to the instance. This property is applicable only
 *  to First Generation instances.
 */
@property(nonatomic, copy, nullable) NSString *ipv6Address;

/** This is always sql#instance. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the instance which will act as master in the replication setup.
 */
@property(nonatomic, copy, nullable) NSString *masterInstanceName;

/**
 *  The maximum disk size of the instance in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxDiskSize;

/** Name of the Cloud SQL instance. This does not include the project ID. */
@property(nonatomic, copy, nullable) NSString *name;

/** Configuration specific to on-premises instances. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_OnPremisesConfiguration *onPremisesConfiguration;

/**
 *  The project ID of the project containing the Cloud SQL instance. The Google
 *  apps domain is prefixed if applicable.
 */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  The geographical region. Can be us-central (FIRST_GEN instances only),
 *  us-central1 (SECOND_GEN instances only), asia-east1 or europe-west1.
 *  Defaults to us-central or us-central1 depending on the instance type (First
 *  Generation or Second Generation). The region can not be changed after
 *  instance creation.
 */
@property(nonatomic, copy, nullable) NSString *region;

/** Configuration specific to failover replicas and read replicas. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ReplicaConfiguration *replicaConfiguration;

/** The replicas of the instance. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *replicaNames;

/** The URI of this resource. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/** SSL configuration. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_SslCert *serverCaCert;

/**
 *  The service account email address assigned to the instance. This property is
 *  applicable only to Second Generation instances.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccountEmailAddress;

/** The user settings. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_Settings *settings;

/**
 *  The current serving state of the Cloud SQL instance. This can be one of the
 *  following.
 *  RUNNABLE: The instance is running, or is ready to run when accessed.
 *  SUSPENDED: The instance is not available, for example due to problems with
 *  billing.
 *  PENDING_CREATE: The instance is being created.
 *  MAINTENANCE: The instance is down for maintenance.
 *  FAILED: The instance creation failed.
 *  UNKNOWN_STATE: The state of the instance is unknown.
 */
@property(nonatomic, copy, nullable) NSString *state;

/** If the instance state is SUSPENDED, the reason for the suspension. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suspensionReason;

@end


/**
 *  The name and status of the failover replica. This property is applicable
 *  only to Second Generation instances.
 */
@interface GTLRSQLAdmin_DatabaseInstance_FailoverReplica : GTLRObject

/**
 *  The availability status of the failover replica. A false status indicates
 *  that the failover replica is out of sync. The master can only failover to
 *  the falover replica when the status is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *available;

/**
 *  The name of the failover replica. If specified at instance creation, a
 *  failover replica is created for the instance. The name doesn't include the
 *  project ID. This property is applicable only to Second Generation instances.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Database list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRSQLAdmin_DatabasesListResponse : GTLRCollectionObject

/**
 *  List of database resources in the instance.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_Database *> *items;

/** This is always sql#databasesList. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Read-replica configuration for connecting to the on-premises master.
 */
@interface GTLRSQLAdmin_DemoteMasterConfiguration : GTLRObject

/** This is always sql#demoteMasterConfiguration. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  MySQL specific configuration when replicating from a MySQL on-premises
 *  master. Replication configuration information such as the username,
 *  password, certificates, and keys are not stored in the instance metadata.
 *  The configuration information is used only to set up the replication
 *  connection and is stored by MySQL in a file named master.info in the data
 *  directory.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_DemoteMasterMySqlReplicaConfiguration *mysqlReplicaConfiguration;

@end


/**
 *  Database instance demote master context.
 */
@interface GTLRSQLAdmin_DemoteMasterContext : GTLRObject

/** This is always sql#demoteMasterContext. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the instance which will act as on-premises master in the
 *  replication setup.
 */
@property(nonatomic, copy, nullable) NSString *masterInstanceName;

/**
 *  Configuration specific to read-replicas replicating from the on-premises
 *  master.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_DemoteMasterConfiguration *replicaConfiguration;

/**
 *  Verify GTID consistency for demote operation. Default value: True. Second
 *  Generation instances only. Setting this flag to false enables you to bypass
 *  GTID consistency check between on-premises master and Cloud SQL instance
 *  during the demotion operation but also exposes you to the risk of future
 *  replication failures. Change the value only if you know the reason for the
 *  GTID divergence and are confident that doing so will not cause any
 *  replication issues.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verifyGtidConsistency;

@end


/**
 *  Read-replica configuration specific to MySQL databases.
 */
@interface GTLRSQLAdmin_DemoteMasterMySqlReplicaConfiguration : GTLRObject

/** PEM representation of the trusted CA's x509 certificate. */
@property(nonatomic, copy, nullable) NSString *caCertificate;

/** PEM representation of the slave's x509 certificate. */
@property(nonatomic, copy, nullable) NSString *clientCertificate;

/**
 *  PEM representation of the slave's private key. The corresponsing public key
 *  is encoded in the client's certificate. The format of the slave's private
 *  key can be either PKCS #1 or PKCS #8.
 */
@property(nonatomic, copy, nullable) NSString *clientKey;

/** This is always sql#demoteMasterMysqlReplicaConfiguration. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The password for the replication connection. */
@property(nonatomic, copy, nullable) NSString *password;

/** The username for the replication connection. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  Database instance export context.
 */
@interface GTLRSQLAdmin_ExportContext : GTLRObject

/**
 *  Options for exporting data as CSV.
 *  Exporting in CSV format using the Cloud SQL Admin API is not supported for
 *  PostgreSQL instances.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ExportContext_CsvExportOptions *csvExportOptions;

/**
 *  Databases to be exported.
 *  MySQL instances: If fileType is SQL and no database is specified, all
 *  databases are exported, except for the mysql system database. If fileType is
 *  CSV, you can specify one database, either by using this property or by using
 *  the csvExportOptions.selectQuery property, which takes precedence over this
 *  property.
 *  PostgreSQL instances: If fileType is SQL, you must specify one database to
 *  be exported. A fileType of CSV is not supported for PostgreSQL instances.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *databases;

/**
 *  The file type for the specified uri.
 *  SQL: The file contains SQL statements.
 *  CSV: The file contains CSV data.
 *  CSV is not supported for PostgreSQL instances.
 */
@property(nonatomic, copy, nullable) NSString *fileType;

/** This is always sql#exportContext. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Options for exporting data as SQL statements. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ExportContext_SqlExportOptions *sqlExportOptions;

/**
 *  The path to the file in Google Cloud Storage where the export will be
 *  stored. The URI is in the form gs://bucketName/fileName. If the file already
 *  exists, the requests succeeds, but the operation fails. If fileType is SQL
 *  and the filename ends with .gz, the contents are compressed.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Options for exporting data as CSV.
 *  Exporting in CSV format using the Cloud SQL Admin API is not supported for
 *  PostgreSQL instances.
 */
@interface GTLRSQLAdmin_ExportContext_CsvExportOptions : GTLRObject

/** The select query used to extract the data. */
@property(nonatomic, copy, nullable) NSString *selectQuery;

@end


/**
 *  Options for exporting data as SQL statements.
 */
@interface GTLRSQLAdmin_ExportContext_SqlExportOptions : GTLRObject

/** Options for exporting from MySQL. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ExportContext_SqlExportOptions_MysqlExportOptions *mysqlExportOptions;

/**
 *  Export only schemas.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *schemaOnly;

/**
 *  Tables to export, or that were exported, from the specified database. If you
 *  specify tables, specify one and only one database. For PostgreSQL instances,
 *  you can specify only one table.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tables;

@end


/**
 *  Options for exporting from MySQL.
 */
@interface GTLRSQLAdmin_ExportContext_SqlExportOptions_MysqlExportOptions : GTLRObject

/**
 *  Option to include SQL statement required to set up replication. If set to 1,
 *  the dump file includes a CHANGE MASTER TO statement with the binary log
 *  coordinates. If set to 2, the CHANGE MASTER TO statement is written as a SQL
 *  comment, and has no effect. All other values are ignored.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *masterData;

@end


/**
 *  Database instance failover context.
 */
@interface GTLRSQLAdmin_FailoverContext : GTLRObject

/** This is always sql#failoverContext. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The current settings version of this instance. Request will be rejected if
 *  this version doesn't match the current settings version.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *settingsVersion;

@end


/**
 *  A flag resource.
 */
@interface GTLRSQLAdmin_Flag : GTLRObject

/** For STRING flags, a list of strings that the value can be set to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedStringValues;

/**
 *  The database version this flag applies to. Can be MYSQL_5_5, MYSQL_5_6, or
 *  MYSQL_5_7. MYSQL_5_7 is applicable only to Second Generation instances.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *appliesTo;

/** This is always sql#flag. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  For INTEGER flags, the maximum allowed value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxValue;

/**
 *  For INTEGER flags, the minimum allowed value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minValue;

/**
 *  This is the name of the flag. Flag names always use underscores, not
 *  hyphens, e.g. max_allowed_packet
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Indicates whether changing this flag will trigger a database restart. Only
 *  applicable to Second Generation instances.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requiresRestart;

/**
 *  The type of the flag. Flags are typed to being BOOLEAN, STRING, INTEGER or
 *  NONE. NONE is used for flags which do not take a value, such as
 *  skip_grant_tables.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Flags list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRSQLAdmin_FlagsListResponse : GTLRCollectionObject

/**
 *  List of flags.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_Flag *> *items;

/** This is always sql#flagsList. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Database instance import context.
 */
@interface GTLRSQLAdmin_ImportContext : GTLRObject

/**
 *  Options for importing data as CSV.
 *  Importing CSV data using the Cloud SQL Admin API is not supported for
 *  PostgreSQL instances.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ImportContext_CsvImportOptions *csvImportOptions;

/**
 *  The target database for the import. If fileType is SQL, this field is
 *  required only if the import file does not specify a database, and is
 *  overridden by any database specification in the import file. If fileType is
 *  CSV, one database must be specified.
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  The file type for the specified uri.
 *  SQL: The file contains SQL statements.
 *  CSV: The file contains CSV data.
 *  Importing CSV data using the Cloud SQL Admin API is not supported for
 *  PostgreSQL instances.
 */
@property(nonatomic, copy, nullable) NSString *fileType;

/**
 *  The PostgreSQL user for this import operation. Defaults to
 *  cloudsqlsuperuser. PostgreSQL instances only.
 */
@property(nonatomic, copy, nullable) NSString *importUser;

/** This is always sql#importContext. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Path to the import file in Cloud Storage, in the form
 *  gs://bucketName/fileName. Compressed gzip files (.gz) are supported when
 *  fileType is SQL. The instance must have write permissions to the bucket and
 *  read access to the file.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Options for importing data as CSV.
 *  Importing CSV data using the Cloud SQL Admin API is not supported for
 *  PostgreSQL instances.
 */
@interface GTLRSQLAdmin_ImportContext_CsvImportOptions : GTLRObject

/**
 *  The columns to which CSV data is imported. If not specified, all columns of
 *  the database table are loaded with CSV data.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *columns;

/** The table to which CSV data is imported. */
@property(nonatomic, copy, nullable) NSString *table;

@end


/**
 *  Database instance clone request.
 */
@interface GTLRSQLAdmin_InstancesCloneRequest : GTLRObject

/** Contains details about the clone operation. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_CloneContext *cloneContext;

@end


/**
 *  Database demote master request.
 */
@interface GTLRSQLAdmin_InstancesDemoteMasterRequest : GTLRObject

/** Contains details about the demoteMaster operation. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_DemoteMasterContext *demoteMasterContext;

@end


/**
 *  Database instance export request.
 */
@interface GTLRSQLAdmin_InstancesExportRequest : GTLRObject

/** Contains details about the export operation. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ExportContext *exportContext;

@end


/**
 *  Instance failover request.
 */
@interface GTLRSQLAdmin_InstancesFailoverRequest : GTLRObject

/** Failover Context. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_FailoverContext *failoverContext;

@end


/**
 *  Database instance import request.
 */
@interface GTLRSQLAdmin_InstancesImportRequest : GTLRObject

/** Contains details about the import operation. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ImportContext *importContext;

@end


/**
 *  Database instances list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSQLAdmin_InstancesListResponse : GTLRCollectionObject

/**
 *  List of database instance resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_DatabaseInstance *> *items;

/** This is always sql#instancesList. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The continuation token, used to page through large result sets. Provide this
 *  value in a subsequent request to return the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** List of warnings that ocurred while handling the request. */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_ApiWarning *> *warnings;

@end


/**
 *  Instances ListServerCas response.
 */
@interface GTLRSQLAdmin_InstancesListServerCasResponse : GTLRObject

@property(nonatomic, copy, nullable) NSString *activeVersion;

/** List of server CA certificates for the instance. */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_SslCert *> *certs;

/** This is always sql#instancesListServerCas. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Database instance restore backup request.
 */
@interface GTLRSQLAdmin_InstancesRestoreBackupRequest : GTLRObject

/** Parameters required to perform the restore backup operation. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_RestoreBackupContext *restoreBackupContext;

@end


/**
 *  Rotate Server CA request.
 */
@interface GTLRSQLAdmin_InstancesRotateServerCaRequest : GTLRObject

/** Contains details about the rotate server CA operation. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_RotateServerCaContext *rotateServerCaContext;

@end


/**
 *  Instance truncate log request.
 */
@interface GTLRSQLAdmin_InstancesTruncateLogRequest : GTLRObject

/** Contains details about the truncate log operation. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_TruncateLogContext *truncateLogContext;

@end


/**
 *  IP Management configuration.
 */
@interface GTLRSQLAdmin_IpConfiguration : GTLRObject

/**
 *  The list of external networks that are allowed to connect to the instance
 *  using the IP. In CIDR notation, also known as 'slash' notation (e.g.
 *  192.168.100.0/24).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_AclEntry *> *authorizedNetworks;

/**
 *  Whether the instance should be assigned an IP address or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ipv4Enabled;

/**
 *  The resource link for the VPC network from which the Cloud SQL instance is
 *  accessible for private IP. For example,
 *  /projects/myProject/global/networks/default. This setting can be updated,
 *  but it cannot be removed after it is set.
 */
@property(nonatomic, copy, nullable) NSString *privateNetwork;

/**
 *  Whether SSL connections over IP should be enforced or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requireSsl;

@end


/**
 *  Database instance IP Mapping.
 */
@interface GTLRSQLAdmin_IpMapping : GTLRObject

/** The IP address assigned. */
@property(nonatomic, copy, nullable) NSString *ipAddress;

/**
 *  The due time for this IP to be retired in RFC 3339 format, for example
 *  2012-11-15T16:19:00.094Z. This field is only available when the IP is
 *  scheduled to be retired.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *timeToRetire;

/**
 *  The type of this IP address. A PRIMARY address is an address that can accept
 *  incoming connections. An OUTGOING address is the source address of
 *  connections originating from the instance, if supported.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Preferred location. This specifies where a Cloud SQL instance should
 *  preferably be located, either in a specific Compute Engine zone, or
 *  co-located with an App Engine application. Note that if the preferred
 *  location is not available, the instance will be located as close as possible
 *  within the region. Only one location may be specified.
 */
@interface GTLRSQLAdmin_LocationPreference : GTLRObject

/**
 *  The AppEngine application to follow, it must be in the same region as the
 *  Cloud SQL instance.
 */
@property(nonatomic, copy, nullable) NSString *followGaeApplication;

/** This is always sql#locationPreference. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The preferred Compute Engine zone (e.g. us-central1-a, us-central1-b, etc.).
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  Maintenance window. This specifies when a v2 Cloud SQL instance should
 *  preferably be restarted for system maintenance purposes.
 */
@interface GTLRSQLAdmin_MaintenanceWindow : GTLRObject

/**
 *  day of week (1-7), starting on Monday.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  hour of day - 0 to 23.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hour;

/** This is always sql#maintenanceWindow. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Maintenance timing setting: canary (Earlier) or stable (Later).
 *  Learn more.
 */
@property(nonatomic, copy, nullable) NSString *updateTrack;

@end


/**
 *  Read-replica configuration specific to MySQL databases.
 */
@interface GTLRSQLAdmin_MySqlReplicaConfiguration : GTLRObject

/** PEM representation of the trusted CA's x509 certificate. */
@property(nonatomic, copy, nullable) NSString *caCertificate;

/** PEM representation of the slave's x509 certificate. */
@property(nonatomic, copy, nullable) NSString *clientCertificate;

/**
 *  PEM representation of the slave's private key. The corresponsing public key
 *  is encoded in the client's certificate.
 */
@property(nonatomic, copy, nullable) NSString *clientKey;

/**
 *  Seconds to wait between connect retries. MySQL's default is 60 seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *connectRetryInterval;

/**
 *  Path to a SQL dump file in Google Cloud Storage from which the slave
 *  instance is to be created. The URI is in the form gs://bucketName/fileName.
 *  Compressed gzip files (.gz) are also supported. Dumps should have the binlog
 *  co-ordinates from which replication should begin. This can be accomplished
 *  by setting --master-data to 1 when using mysqldump.
 */
@property(nonatomic, copy, nullable) NSString *dumpFilePath;

/** This is always sql#mysqlReplicaConfiguration. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Interval in milliseconds between replication heartbeats.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *masterHeartbeatPeriod;

/** The password for the replication connection. */
@property(nonatomic, copy, nullable) NSString *password;

/** A list of permissible ciphers to use for SSL encryption. */
@property(nonatomic, copy, nullable) NSString *sslCipher;

/** The username for the replication connection. */
@property(nonatomic, copy, nullable) NSString *username;

/**
 *  Whether or not to check the master's Common Name value in the certificate
 *  that it sends during the SSL handshake.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verifyServerCertificate;

@end


/**
 *  On-premises instance configuration.
 */
@interface GTLRSQLAdmin_OnPremisesConfiguration : GTLRObject

/** The host and port of the on-premises instance in host:port format */
@property(nonatomic, copy, nullable) NSString *hostPort;

/** This is always sql#onPremisesConfiguration. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  An Operation resource. For successful operations that return an Operation
 *  resource, only the fields relevant to the operation are populated in the
 *  resource.
 */
@interface GTLRSQLAdmin_Operation : GTLRObject

/**
 *  The time this operation finished in UTC timezone in RFC 3339 format, for
 *  example 2012-11-15T16:19:00.094Z.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  If errors occurred during processing of this operation, this field will be
 *  populated.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_OperationErrors *error;

/** The context for export operation, if applicable. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ExportContext *exportContext;

/** The context for import operation, if applicable. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ImportContext *importContext;

/**
 *  The time this operation was enqueued in UTC timezone in RFC 3339 format, for
 *  example 2012-11-15T16:19:00.094Z.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *insertTime;

/** This is always sql#operation. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  An identifier that uniquely identifies the operation. You can use this
 *  identifier to retrieve the Operations resource that has information about
 *  the operation.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The type of the operation. Valid values are CREATE, DELETE, UPDATE, RESTART,
 *  IMPORT, EXPORT, BACKUP_VOLUME, RESTORE_VOLUME, CREATE_USER, DELETE_USER,
 *  CREATE_DATABASE, DELETE_DATABASE .
 */
@property(nonatomic, copy, nullable) NSString *operationType;

/** The URI of this resource. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  The time this operation actually started in UTC timezone in RFC 3339 format,
 *  for example 2012-11-15T16:19:00.094Z.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The status of an operation. Valid values are PENDING, RUNNING, DONE,
 *  UNKNOWN.
 */
@property(nonatomic, copy, nullable) NSString *status;

/** Name of the database instance related to this operation. */
@property(nonatomic, copy, nullable) NSString *targetId;

@property(nonatomic, copy, nullable) NSString *targetLink;

/** The project ID of the target instance related to this operation. */
@property(nonatomic, copy, nullable) NSString *targetProject;

/** The email address of the user who initiated this operation. */
@property(nonatomic, copy, nullable) NSString *user;

@end


/**
 *  Database instance operation error.
 */
@interface GTLRSQLAdmin_OperationError : GTLRObject

/** Identifies the specific error that occurred. */
@property(nonatomic, copy, nullable) NSString *code;

/** This is always sql#operationError. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Additional information about the error encountered. */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  Database instance operation errors list wrapper.
 */
@interface GTLRSQLAdmin_OperationErrors : GTLRObject

/** The list of errors encountered while processing this operation. */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_OperationError *> *errors;

/** This is always sql#operationErrors. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Database instance list operations response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSQLAdmin_OperationsListResponse : GTLRCollectionObject

/**
 *  List of operation resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_Operation *> *items;

/** This is always sql#operationsList. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The continuation token, used to page through large result sets. Provide this
 *  value in a subsequent request to return the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Read-replica configuration for connecting to the master.
 */
@interface GTLRSQLAdmin_ReplicaConfiguration : GTLRObject

/**
 *  Specifies if the replica is the failover target. If the field is set to true
 *  the replica will be designated as a failover replica. In case the master
 *  instance fails, the replica instance will be promoted as the new master
 *  instance.
 *  Only one replica can be specified as failover target, and the replica has to
 *  be in different zone with the master instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failoverTarget;

/** This is always sql#replicaConfiguration. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  MySQL specific configuration when replicating from a MySQL on-premises
 *  master. Replication configuration information such as the username,
 *  password, certificates, and keys are not stored in the instance metadata.
 *  The configuration information is used only to set up the replication
 *  connection and is stored by MySQL in a file named master.info in the data
 *  directory.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_MySqlReplicaConfiguration *mysqlReplicaConfiguration;

@end


/**
 *  Database instance restore from backup context.
 */
@interface GTLRSQLAdmin_RestoreBackupContext : GTLRObject

/**
 *  The ID of the backup run to restore from.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *backupRunId;

/** The ID of the instance that the backup was taken from. */
@property(nonatomic, copy, nullable) NSString *instanceId;

/** This is always sql#restoreBackupContext. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Instance rotate server CA context.
 */
@interface GTLRSQLAdmin_RotateServerCaContext : GTLRObject

/** This is always sql#rotateServerCaContext. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The fingerprint of the next version to be rotated to. If left unspecified,
 *  will be rotated to the most recently added server CA version.
 */
@property(nonatomic, copy, nullable) NSString *nextVersion;

@end


/**
 *  Database instance settings.
 */
@interface GTLRSQLAdmin_Settings : GTLRObject

/**
 *  The activation policy specifies when the instance is activated; it is
 *  applicable only when the instance state is RUNNABLE. Valid values:
 *  ALWAYS: The instance is on, and remains so even in the absence of connection
 *  requests.
 *  NEVER: The instance is off; it is not activated, even if a connection
 *  request arrives.
 *  ON_DEMAND: First Generation instances only. The instance responds to
 *  incoming requests, and turns itself off when not in use. Instances with
 *  PER_USE pricing turn off after 15 minutes of inactivity. Instances with
 *  PER_PACKAGE pricing turn off after 12 hours of inactivity.
 */
@property(nonatomic, copy, nullable) NSString *activationPolicy;

/**
 *  The App Engine app IDs that can access this instance. First Generation
 *  instances only.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *authorizedGaeApplications;

/**
 *  Availability type (PostgreSQL instances only). Potential values:
 *  ZONAL: The instance serves data from only one zone. Outages in that zone
 *  affect data accessibility.
 *  REGIONAL: The instance can serve data from more than one zone in a region
 *  (it is highly available).
 *  For more information, see Overview of the High Availability Configuration.
 */
@property(nonatomic, copy, nullable) NSString *availabilityType;

/** The daily backup configuration for the instance. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_BackupConfiguration *backupConfiguration;

/**
 *  Configuration specific to read replica instances. Indicates whether database
 *  flags for crash-safe replication are enabled. This property is only
 *  applicable to First Generation instances.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *crashSafeReplicationEnabled;

/** The database flags passed to the instance at startup. */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_DatabaseFlags *> *databaseFlags;

/**
 *  Configuration specific to read replica instances. Indicates whether
 *  replication is enabled or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *databaseReplicationEnabled;

/**
 *  The size of data disk, in GB. The data disk size minimum is 10GB. Not used
 *  for First Generation instances.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dataDiskSizeGb;

/**
 *  The type of data disk: PD_SSD (default) or PD_HDD. Not used for First
 *  Generation instances.
 */
@property(nonatomic, copy, nullable) NSString *dataDiskType;

/**
 *  The settings for IP Management. This allows to enable or disable the
 *  instance IP and manage which external networks can connect to the instance.
 *  The IPv4 address cannot be disabled for Second Generation instances.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_IpConfiguration *ipConfiguration;

/** This is always sql#settings. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The location preference settings. This allows the instance to be located as
 *  near as possible to either an App Engine app or Compute Engine zone for
 *  better performance. App Engine co-location is only applicable to First
 *  Generation instances.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_LocationPreference *locationPreference;

/**
 *  The maintenance window for this instance. This specifies when the instance
 *  can be restarted for maintenance purposes. Not used for First Generation
 *  instances.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_MaintenanceWindow *maintenanceWindow;

/**
 *  The pricing plan for this instance. This can be either PER_USE or PACKAGE.
 *  Only PER_USE is supported for Second Generation instances.
 */
@property(nonatomic, copy, nullable) NSString *pricingPlan;

/**
 *  The type of replication this instance uses. This can be either ASYNCHRONOUS
 *  or SYNCHRONOUS. This property is only applicable to First Generation
 *  instances.
 */
@property(nonatomic, copy, nullable) NSString *replicationType;

/**
 *  The version of instance settings. This is a required field for update method
 *  to make sure concurrent updates are handled properly. During update, use the
 *  most recent settingsVersion value for this instance and do not try to update
 *  this value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *settingsVersion;

/**
 *  Configuration to increase storage size automatically. The default value is
 *  true. Not used for First Generation instances.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *storageAutoResize;

/**
 *  The maximum size to which storage capacity can be automatically increased.
 *  The default value is 0, which specifies that there is no limit. Not used for
 *  First Generation instances.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *storageAutoResizeLimit;

/**
 *  The tier (or machine type) for this instance, for example db-n1-standard-1
 *  (MySQL instances) or db-custom-1-3840 (PostgreSQL instances). For MySQL
 *  instances, this property determines whether the instance is First or Second
 *  Generation. For more information, see Instance Settings.
 */
@property(nonatomic, copy, nullable) NSString *tier;

/**
 *  User-provided labels, represented as a dictionary where each label is a
 *  single key value pair.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_Settings_UserLabels *userLabels;

@end


/**
 *  User-provided labels, represented as a dictionary where each label is a
 *  single key value pair.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSQLAdmin_Settings_UserLabels : GTLRObject
@end


/**
 *  SslCerts Resource
 */
@interface GTLRSQLAdmin_SslCert : GTLRObject

/** PEM representation. */
@property(nonatomic, copy, nullable) NSString *cert;

/** Serial number, as extracted from the certificate. */
@property(nonatomic, copy, nullable) NSString *certSerialNumber;

/** User supplied name. Constrained to [a-zA-Z.-_ ]+. */
@property(nonatomic, copy, nullable) NSString *commonName;

/**
 *  The time when the certificate was created in RFC 3339 format, for example
 *  2012-11-15T16:19:00.094Z
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The time when the certificate expires in RFC 3339 format, for example
 *  2012-11-15T16:19:00.094Z.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expirationTime;

/** Name of the database instance. */
@property(nonatomic, copy, nullable) NSString *instance;

/** This is always sql#sslCert. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The URI of this resource. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/** Sha1 Fingerprint. */
@property(nonatomic, copy, nullable) NSString *sha1Fingerprint;

@end


/**
 *  SslCertDetail.
 */
@interface GTLRSQLAdmin_SslCertDetail : GTLRObject

/** The public information about the cert. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_SslCert *certInfo;

/**
 *  The private key for the client cert, in pem format. Keep private in order to
 *  protect your security.
 */
@property(nonatomic, copy, nullable) NSString *certPrivateKey;

@end


/**
 *  SslCerts create ephemeral certificate request.
 */
@interface GTLRSQLAdmin_SslCertsCreateEphemeralRequest : GTLRObject

/** PEM encoded public key to include in the signed certificate. */
@property(nonatomic, copy, nullable) NSString *publicKey;

@end


/**
 *  SslCerts insert request.
 */
@interface GTLRSQLAdmin_SslCertsInsertRequest : GTLRObject

/**
 *  User supplied name. Must be a distinct name from the other certificates for
 *  this instance.
 */
@property(nonatomic, copy, nullable) NSString *commonName;

@end


/**
 *  SslCert insert response.
 */
@interface GTLRSQLAdmin_SslCertsInsertResponse : GTLRObject

/**
 *  The new client certificate and private key. For First Generation instances,
 *  the new certificate does not take effect until the instance is restarted.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_SslCertDetail *clientCert;

/** This is always sql#sslCertsInsert. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The operation to track the ssl certs insert request. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_Operation *operation;

/**
 *  The server Certificate Authority's certificate. If this is missing you can
 *  force a new one to be generated by calling resetSslConfig method on
 *  instances resource.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_SslCert *serverCaCert;

@end


/**
 *  SslCerts list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRSQLAdmin_SslCertsListResponse : GTLRCollectionObject

/**
 *  List of client certificates for the instance.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_SslCert *> *items;

/** This is always sql#sslCertsList. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  A Google Cloud SQL service tier resource.
 */
@interface GTLRSQLAdmin_Tier : GTLRObject

/**
 *  The maximum disk size of this tier in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *DiskQuota;

/** This is always sql#tier. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The maximum RAM usage of this tier in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *RAM;

/** The applicable regions for this tier. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *region;

/**
 *  An identifier for the machine type, for example, db-n1-standard-1. For
 *  related information, see Pricing.
 */
@property(nonatomic, copy, nullable) NSString *tier;

@end


/**
 *  Tiers list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRSQLAdmin_TiersListResponse : GTLRCollectionObject

/**
 *  List of tiers.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_Tier *> *items;

/** This is always sql#tiersList. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Database Instance truncate log context.
 */
@interface GTLRSQLAdmin_TruncateLogContext : GTLRObject

/** This is always sql#truncateLogContext. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The type of log to truncate. Valid values are MYSQL_GENERAL_TABLE and
 *  MYSQL_SLOW_TABLE.
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  A Cloud SQL user resource.
 */
@interface GTLRSQLAdmin_User : GTLRObject

/**
 *  This field is deprecated and will be removed from a future version of the
 *  API.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The host name from which the user can connect. For insert operations, host
 *  defaults to an empty string. For update operations, host is specified as
 *  part of the request URL. The host name cannot be updated after insertion.
 */
@property(nonatomic, copy, nullable) NSString *host;

/**
 *  The name of the Cloud SQL instance. This does not include the project ID.
 *  Can be omitted for update since it is already specified on the URL.
 */
@property(nonatomic, copy, nullable) NSString *instance;

/** This is always sql#user. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the user in the Cloud SQL instance. Can be omitted for update
 *  since it is already specified in the URL.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The password for the user. */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  The project ID of the project containing the Cloud SQL database. The Google
 *  apps domain is prefixed if applicable. Can be omitted for update since it is
 *  already specified on the URL.
 */
@property(nonatomic, copy, nullable) NSString *project;

@end


/**
 *  User list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSQLAdmin_UsersListResponse : GTLRCollectionObject

/**
 *  List of user resources in the instance.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_User *> *items;

/** This is always sql#usersList. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  An identifier that uniquely identifies the operation. You can use this
 *  identifier to retrieve the Operations resource that has information about
 *  the operation.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
