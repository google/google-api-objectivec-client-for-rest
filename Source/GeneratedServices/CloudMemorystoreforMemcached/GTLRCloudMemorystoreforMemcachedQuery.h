// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Memorystore for Memcached API (memcache/v1beta2)
// Description:
//   Google Cloud Memorystore for Memcached API is used for creating and
//   managing Memcached instances in GCP.
// Documentation:
//   https://cloud.google.com/memorystore/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudMemorystoreforMemcached_ApplyParametersRequest;
@class GTLRCloudMemorystoreforMemcached_CancelOperationRequest;
@class GTLRCloudMemorystoreforMemcached_Instance;
@class GTLRCloudMemorystoreforMemcached_UpdateParametersRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Cloud Memorystore for Memcached query classes.
 */
@interface GTLRCloudMemorystoreforMemcachedQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets information about a location.
 *
 *  Method: memcache.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudMemorystoreforMemcachedCloudPlatform
 */
@interface GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsGet : GTLRCloudMemorystoreforMemcachedQuery
// Previous library name was
//   +[GTLQueryCloudMemorystoreforMemcached queryForProjectsLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudMemorystoreforMemcached_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  ApplyParameters will restart the set of specified nodes in order to update
 *  them to the current set of parameters for the Memcached Instance.
 *
 *  Method: memcache.projects.locations.instances.applyParameters
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudMemorystoreforMemcachedCloudPlatform
 */
@interface GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsInstancesApplyParameters : GTLRCloudMemorystoreforMemcachedQuery
// Previous library name was
//   +[GTLQueryCloudMemorystoreforMemcached queryForProjectsLocationsInstancesApplyParametersWithObject:name:]

/**
 *  Required. Resource name of the Memcached instance for which parameter group
 *  updates should be applied.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudMemorystoreforMemcached_Operation.
 *
 *  ApplyParameters will restart the set of specified nodes in order to update
 *  them to the current set of parameters for the Memcached Instance.
 *
 *  @param object The @c GTLRCloudMemorystoreforMemcached_ApplyParametersRequest
 *    to include in the query.
 *  @param name Required. Resource name of the Memcached instance for which
 *    parameter group updates should be applied.
 *
 *  @return GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsInstancesApplyParameters
 */
+ (instancetype)queryWithObject:(GTLRCloudMemorystoreforMemcached_ApplyParametersRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new Instance in a given location.
 *
 *  Method: memcache.projects.locations.instances.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudMemorystoreforMemcachedCloudPlatform
 */
@interface GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsInstancesCreate : GTLRCloudMemorystoreforMemcachedQuery
// Previous library name was
//   +[GTLQueryCloudMemorystoreforMemcached queryForProjectsLocationsInstancesCreateWithObject:parent:]

/**
 *  Required. The logical name of the Memcached instance in the user project
 *  with the following restrictions: * Must contain only lowercase letters,
 *  numbers, and hyphens. * Must start with a letter. * Must be between 1-40
 *  characters. * Must end with a number or a letter. * Must be unique within
 *  the user project / location If any of the above are not met, will raise an
 *  invalid argument error.
 */
@property(nonatomic, copy, nullable) NSString *instanceId;

/**
 *  Required. The resource name of the instance location using the form:
 *  `projects/{project_id}/locations/{location_id}` where `location_id` refers
 *  to a GCP region
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudMemorystoreforMemcached_Operation.
 *
 *  Creates a new Instance in a given location.
 *
 *  @param object The @c GTLRCloudMemorystoreforMemcached_Instance to include in
 *    the query.
 *  @param parent Required. The resource name of the instance location using the
 *    form: `projects/{project_id}/locations/{location_id}` where `location_id`
 *    refers to a GCP region
 *
 *  @return GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsInstancesCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudMemorystoreforMemcached_Instance *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Instance.
 *
 *  Method: memcache.projects.locations.instances.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudMemorystoreforMemcachedCloudPlatform
 */
@interface GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsInstancesDelete : GTLRCloudMemorystoreforMemcachedQuery
// Previous library name was
//   +[GTLQueryCloudMemorystoreforMemcached queryForProjectsLocationsInstancesDeleteWithname:]

/**
 *  Required. Memcached instance resource name in the format:
 *  `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
 *  where `location_id` refers to a GCP region
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudMemorystoreforMemcached_Operation.
 *
 *  Deletes a single Instance.
 *
 *  @param name Required. Memcached instance resource name in the format:
 *    `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
 *    where `location_id` refers to a GCP region
 *
 *  @return GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsInstancesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single Instance.
 *
 *  Method: memcache.projects.locations.instances.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudMemorystoreforMemcachedCloudPlatform
 */
@interface GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsInstancesGet : GTLRCloudMemorystoreforMemcachedQuery
// Previous library name was
//   +[GTLQueryCloudMemorystoreforMemcached queryForProjectsLocationsInstancesGetWithname:]

/**
 *  Required. Memcached instance resource name in the format:
 *  `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
 *  where `location_id` refers to a GCP region
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudMemorystoreforMemcached_Instance.
 *
 *  Gets details of a single Instance.
 *
 *  @param name Required. Memcached instance resource name in the format:
 *    `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
 *    where `location_id` refers to a GCP region
 *
 *  @return GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsInstancesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Instances in a given location.
 *
 *  Method: memcache.projects.locations.instances.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudMemorystoreforMemcachedCloudPlatform
 */
@interface GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsInstancesList : GTLRCloudMemorystoreforMemcachedQuery
// Previous library name was
//   +[GTLQueryCloudMemorystoreforMemcached queryForProjectsLocationsInstancesListWithparent:]

/**
 *  List filter. For example, exclude all Memcached instances with name as
 *  my-instance by specifying "name != my-instance".
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Sort results. Supported values are "name", "name desc" or "" (unsorted).
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of items to return. If not specified, a default value of
 *  1000 will be used by the service. Regardless of the page_size value, the
 *  response may include a partial list and a caller should only rely on
 *  response's next_page_token to determine if there are more instances left to
 *  be queried.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name of the instance location using the form:
 *  `projects/{project_id}/locations/{location_id}` where `location_id` refers
 *  to a GCP region
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudMemorystoreforMemcached_ListInstancesResponse.
 *
 *  Lists Instances in a given location.
 *
 *  @param parent Required. The resource name of the instance location using the
 *    form: `projects/{project_id}/locations/{location_id}` where `location_id`
 *    refers to a GCP region
 *
 *  @return GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsInstancesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an existing Instance in a given project and location.
 *
 *  Method: memcache.projects.locations.instances.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudMemorystoreforMemcachedCloudPlatform
 */
@interface GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsInstancesPatch : GTLRCloudMemorystoreforMemcachedQuery
// Previous library name was
//   +[GTLQueryCloudMemorystoreforMemcached queryForProjectsLocationsInstancesPatchWithObject:name:]

/**
 *  Required. Unique name of the resource in this scope including project and
 *  location using the form:
 *  `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
 *  Note: Memcached instances are managed and addressed at regional level so
 *  location_id here refers to a GCP region; however, users may choose which
 *  zones Memcached nodes within an instances should be provisioned in. Refer to
 *  [zones] field for more details.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Mask of fields to update. * `displayName`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudMemorystoreforMemcached_Operation.
 *
 *  Updates an existing Instance in a given project and location.
 *
 *  @param object The @c GTLRCloudMemorystoreforMemcached_Instance to include in
 *    the query.
 *  @param name Required. Unique name of the resource in this scope including
 *    project and location using the form:
 *    `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
 *    Note: Memcached instances are managed and addressed at regional level so
 *    location_id here refers to a GCP region; however, users may choose which
 *    zones Memcached nodes within an instances should be provisioned in. Refer
 *    to [zones] field for more details.
 *
 *  @return GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsInstancesPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudMemorystoreforMemcached_Instance *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the defined Memcached Parameters for an existing Instance. This
 *  method only stages the parameters, it must be followed by ApplyParameters to
 *  apply the parameters to nodes of the Memcached Instance.
 *
 *  Method: memcache.projects.locations.instances.updateParameters
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudMemorystoreforMemcachedCloudPlatform
 */
@interface GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsInstancesUpdateParameters : GTLRCloudMemorystoreforMemcachedQuery
// Previous library name was
//   +[GTLQueryCloudMemorystoreforMemcached queryForProjectsLocationsInstancesUpdateParametersWithObject:name:]

/**
 *  Required. Resource name of the Memcached instance for which the parameters
 *  should be updated.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudMemorystoreforMemcached_Operation.
 *
 *  Updates the defined Memcached Parameters for an existing Instance. This
 *  method only stages the parameters, it must be followed by ApplyParameters to
 *  apply the parameters to nodes of the Memcached Instance.
 *
 *  @param object The @c
 *    GTLRCloudMemorystoreforMemcached_UpdateParametersRequest to include in the
 *    query.
 *  @param name Required. Resource name of the Memcached instance for which the
 *    parameters should be updated.
 *
 *  @return GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsInstancesUpdateParameters
 */
+ (instancetype)queryWithObject:(GTLRCloudMemorystoreforMemcached_UpdateParametersRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: memcache.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudMemorystoreforMemcachedCloudPlatform
 */
@interface GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsList : GTLRCloudMemorystoreforMemcachedQuery
// Previous library name was
//   +[GTLQueryCloudMemorystoreforMemcached queryForProjectsLocationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudMemorystoreforMemcached_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: memcache.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudMemorystoreforMemcachedCloudPlatform
 */
@interface GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsOperationsCancel : GTLRCloudMemorystoreforMemcachedQuery
// Previous library name was
//   +[GTLQueryCloudMemorystoreforMemcached queryForProjectsLocationsOperationsCancelWithObject:name:]

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudMemorystoreforMemcached_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRCloudMemorystoreforMemcached_CancelOperationRequest
 *    to include in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRCloudMemorystoreforMemcached_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: memcache.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudMemorystoreforMemcachedCloudPlatform
 */
@interface GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsOperationsDelete : GTLRCloudMemorystoreforMemcachedQuery
// Previous library name was
//   +[GTLQueryCloudMemorystoreforMemcached queryForProjectsLocationsOperationsDeleteWithname:]

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudMemorystoreforMemcached_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: memcache.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudMemorystoreforMemcachedCloudPlatform
 */
@interface GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsOperationsGet : GTLRCloudMemorystoreforMemcachedQuery
// Previous library name was
//   +[GTLQueryCloudMemorystoreforMemcached queryForProjectsLocationsOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudMemorystoreforMemcached_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: memcache.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudMemorystoreforMemcachedCloudPlatform
 */
@interface GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsOperationsList : GTLRCloudMemorystoreforMemcachedQuery
// Previous library name was
//   +[GTLQueryCloudMemorystoreforMemcached queryForProjectsLocationsOperationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudMemorystoreforMemcached_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRCloudMemorystoreforMemcachedQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
