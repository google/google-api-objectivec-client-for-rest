// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Memorystore for Memcached API (memcache/v1beta2)
// Description:
//   Google Cloud Memorystore for Memcached API is used for creating and
//   managing Memcached instances in GCP.
// Documentation:
//   https://cloud.google.com/memorystore/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudMemorystoreforMemcached_AuditConfig;
@class GTLRCloudMemorystoreforMemcached_AuditLogConfig;
@class GTLRCloudMemorystoreforMemcached_Binding;
@class GTLRCloudMemorystoreforMemcached_Expr;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1beta2LocationMetadata_AvailableZones;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_Labels;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenancePolicyNames;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenanceSchedules;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_ProducerMetadata;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_SoftwareVersions;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1SloExclusion;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata;
@class GTLRCloudMemorystoreforMemcached_Instance;
@class GTLRCloudMemorystoreforMemcached_Instance_Labels;
@class GTLRCloudMemorystoreforMemcached_InstanceMessage;
@class GTLRCloudMemorystoreforMemcached_Location;
@class GTLRCloudMemorystoreforMemcached_Location_Labels;
@class GTLRCloudMemorystoreforMemcached_Location_Metadata;
@class GTLRCloudMemorystoreforMemcached_MemcacheParameters;
@class GTLRCloudMemorystoreforMemcached_MemcacheParameters_Params;
@class GTLRCloudMemorystoreforMemcached_Node;
@class GTLRCloudMemorystoreforMemcached_NodeConfig;
@class GTLRCloudMemorystoreforMemcached_Operation;
@class GTLRCloudMemorystoreforMemcached_Operation_Metadata;
@class GTLRCloudMemorystoreforMemcached_Operation_Response;
@class GTLRCloudMemorystoreforMemcached_Policy;
@class GTLRCloudMemorystoreforMemcached_Status;
@class GTLRCloudMemorystoreforMemcached_Status_Details_Item;
@class GTLRCloudMemorystoreforMemcached_ZoneMetadata;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudMemorystoreforMemcached_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance.state

/**
 *  Instance is being created.
 *
 *  Value: "CREATING"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Creating;
/**
 *  Instance is being deleted.
 *
 *  Value: "DELETING"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Deleting;
/**
 *  Instance encountered an error and is in indeterministic state.
 *
 *  Value: "ERROR"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Error;
/**
 *  Instance has been created and is ready to use.
 *
 *  Value: "READY"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Ready;
/**
 *  Instance is unheathy and under repair.
 *
 *  Value: "REPAIRING"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Repairing;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_StateUnspecified;
/**
 *  Instance is being updated.
 *
 *  Value: "UPDATING"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Updating;

// ----------------------------------------------------------------------------
// GTLRCloudMemorystoreforMemcached_Instance.memcacheVersion

/**
 *  Memcached 1.5 version.
 *
 *  Value: "MEMCACHE_1_5"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Instance_MemcacheVersion_Memcache15;
/** Value: "MEMCACHE_VERSION_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Instance_MemcacheVersion_MemcacheVersionUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudMemorystoreforMemcached_Instance.state

/**
 *  Memcached instance is being created.
 *
 *  Value: "CREATING"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Instance_State_Creating;
/**
 *  Memcached instance is being deleted.
 *
 *  Value: "DELETING"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Instance_State_Deleting;
/**
 *  Memcached instance is going through maintenance, e.g. data plane rollout.
 *
 *  Value: "PERFORMING_MAINTENANCE"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Instance_State_PerformingMaintenance;
/**
 *  Memcached instance has been created and ready to be used.
 *
 *  Value: "READY"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Instance_State_Ready;
/**
 *  State not set.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Instance_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudMemorystoreforMemcached_InstanceMessage.code

/**
 *  Message Code not set.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_InstanceMessage_Code_CodeUnspecified;
/**
 *  Memcached nodes are distributed unevenly.
 *
 *  Value: "ZONE_DISTRIBUTION_UNBALANCED"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_InstanceMessage_Code_ZoneDistributionUnbalanced;

// ----------------------------------------------------------------------------
// GTLRCloudMemorystoreforMemcached_Node.state

/**
 *  Node is being created.
 *
 *  Value: "CREATING"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Node_State_Creating;
/**
 *  Node is being deleted.
 *
 *  Value: "DELETING"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Node_State_Deleting;
/**
 *  Node has been created and ready to be used.
 *
 *  Value: "READY"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Node_State_Ready;
/**
 *  Node state is not set.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Node_State_StateUnspecified;
/**
 *  Node is being updated.
 *
 *  Value: "UPDATING"
 */
GTLR_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Node_State_Updating;

/**
 *  Request for ApplyParameters.
 */
@interface GTLRCloudMemorystoreforMemcached_ApplyParametersRequest : GTLRObject

/**
 *  Whether to apply instance-level parameter group to all nodes. If set to
 *  true, will explicitly restrict users from specifying any nodes, and apply
 *  parameter group updates to all nodes within the instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *applyAll;

/** Nodes to which we should apply the instance-level parameter group. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *nodeIds;

@end


/**
 *  Specifies the audit configuration for a service.
 *  The configuration determines which permission types are logged, and what
 *  identities, if any, are exempted from logging.
 *  An AuditConfig must have one or more AuditLogConfigs.
 *  If there are AuditConfigs for both `allServices` and a specific service,
 *  the union of the two AuditConfigs is used for that service: the log_types
 *  specified in each AuditConfig are enabled, and the exempted_members in each
 *  AuditLogConfig are exempted.
 *  Example Policy with multiple AuditConfigs:
 *  {
 *  "audit_configs": [
 *  {
 *  "service": "allServices"
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  "exempted_members": [
 *  "user:jose\@example.com"
 *  ]
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  },
 *  {
 *  "log_type": "ADMIN_READ",
 *  }
 *  ]
 *  },
 *  {
 *  "service": "sampleservice.googleapis.com"
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  "exempted_members": [
 *  "user:aliya\@example.com"
 *  ]
 *  }
 *  ]
 *  }
 *  ]
 *  }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts jose\@example.com from DATA_READ logging, and
 *  aliya\@example.com from DATA_WRITE logging.
 */
@interface GTLRCloudMemorystoreforMemcached_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging.
 *  For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
 *  `allServices` is a special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions.
 *  Example:
 *  {
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  "exempted_members": [
 *  "user:jose\@example.com"
 *  ]
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  }
 *  ]
 *  }
 *  This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
 *  jose\@example.com from DATA_READ logging.
 */
@interface GTLRCloudMemorystoreforMemcached_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission.
 *  Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMemorystoreforMemcached_AuditLogConfig_LogType_AdminRead
 *        Admin reads. Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_AuditLogConfig_LogType_DataRead
 *        Data reads. Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_AuditLogConfig_LogType_DataWrite
 *        Data writes. Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_AuditLogConfig_LogType_LogTypeUnspecified
 *        Default case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members` with a `role`.
 */
@interface GTLRCloudMemorystoreforMemcached_Binding : GTLRObject

/**
 *  The condition that is associated with this binding.
 *  NOTE: An unsatisfied condition will not allow user access via current
 *  binding. Different bindings, including their conditions, are examined
 *  independently.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_Expr *condition;

/**
 *  Specifies the identities requesting access for a Cloud Platform resource.
 *  `members` can have the following values:
 *  * `allUsers`: A special identifier that represents anyone who is
 *  on the internet; with or without a Google account.
 *  * `allAuthenticatedUsers`: A special identifier that represents anyone
 *  who is authenticated with a Google account or a service account.
 *  * `user:{emailid}`: An email address that represents a specific Google
 *  account. For example, `alice\@example.com` .
 *  * `serviceAccount:{emailid}`: An email address that represents a service
 *  account. For example, `my-other-app\@appspot.gserviceaccount.com`.
 *  * `group:{emailid}`: An email address that represents a Google group.
 *  For example, `admins\@example.com`.
 *  * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For
 *  example, `alice\@example.com?uid=123456789012345678901`. If the user is
 *  recovered, this value reverts to `user:{emailid}` and the recovered user
 *  retains the role in the binding.
 *  * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus
 *  unique identifier) representing a service account that has been recently
 *  deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`.
 *  If the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding.
 *  * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a Google group that has been recently
 *  deleted. For example, `admins\@example.com?uid=123456789012345678901`. If
 *  the group is recovered, this value reverts to `group:{emailid}` and the
 *  recovered group retains the role in the binding.
 *  * `domain:{domain}`: The G Suite domain (primary) that represents all the
 *  users of that domain. For example, `google.com` or `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to `members`.
 *  For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRCloudMemorystoreforMemcached_CancelOperationRequest : GTLRObject
@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRCloudMemorystoreforMemcached_Empty : GTLRObject
@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec.
 *  Example (Comparison):
 *  title: "Summary size limit"
 *  description: "Determines if a summary is less than 100 chars"
 *  expression: "document.summary.size() < 100"
 *  Example (Equality):
 *  title: "Requestor is owner"
 *  description: "Determines if requestor is the document owner"
 *  expression: "document.owner == request.auth.claims.email"
 *  Example (Logic):
 *  title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation):
 *  title: "Notification string"
 *  description: "Create a notification string with a timestamp."
 *  expression: "'New message received at ' + string(document.create_time)"
 *  The exact variables and functions that may be referenced within an
 *  expression
 *  are determined by the service that evaluates it. See the service
 *  documentation for additional information.
 */
@interface GTLRCloudMemorystoreforMemcached_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing
 *  its purpose. This can be used e.g. in UIs which allow to enter the
 *  expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Metadata for the given google.cloud.location.Location.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1beta2LocationMetadata : GTLRObject

/**
 *  Output only. The set of available zones in the location. The map is keyed
 *  by the lowercase ID of each zone, as defined by GCE. These keys can be
 *  specified in the `zones` field when creating a Memcached instance.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1beta2LocationMetadata_AvailableZones *availableZones;

@end


/**
 *  Output only. The set of available zones in the location. The map is keyed
 *  by the lowercase ID of each zone, as defined by GCE. These keys can be
 *  specified in the `zones` field when creating a Memcached instance.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudMemorystoreforMemcached_ZoneMetadata. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1beta2LocationMetadata_AvailableZones : GTLRObject
@end


/**
 *  Represents the metadata of a long-running operation.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1beta2OperationMetadata : GTLRObject

/** API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Identifies whether the user has requested cancellation
 *  of the operation. Operations that have successfully been cancelled
 *  have Operation.error value with a google.rpc.Status.code of 1,
 *  corresponding to `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cancelRequested;

/** Time when the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Time when the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusDetail;

/** Server-defined resource path for the target of the operation. */
@property(nonatomic, copy, nullable) NSString *target;

/** Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance : GTLRObject

/**
 *  consumer_defined_name is the name that is set by the consumer. On the other
 *  hand Name field represents system-assigned id of an instance so consumers
 *  are not necessarily aware of it.
 *  consumer_defined_name is used for notification/UI purposes for consumer to
 *  recognize their instances.
 */
@property(nonatomic, copy, nullable) NSString *consumerDefinedName;

/** Output only. Timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. Resource labels to represent user provided metadata. Each label
 *  is a key-value pair, where both the key and the value are arbitrary strings
 *  provided by the user.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_Labels *labels;

/**
 *  The MaintenancePolicies that have been attached to the instance.
 *  The key must be of the type name of the oneof policy name defined in
 *  MaintenancePolicy, and the referenced policy must define the same policy
 *  type. For complete details of MaintenancePolicy, please refer to
 *  go/cloud-saas-mw-ug.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenancePolicyNames *maintenancePolicyNames;

/**
 *  The MaintenanceSchedule contains the scheduling information of published
 *  maintenance schedule.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenanceSchedules *maintenanceSchedules;

/**
 *  Unique name of the resource. It uses the form:
 *  `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Custom string attributes used primarily to expose
 *  producer-specific information in monitoring dashboards.
 *  See go/get-instance-metadata.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_ProducerMetadata *producerMetadata;

/**
 *  Output only. The list of data plane resources provisioned for this
 *  instance, e.g. compute VMs. See go/get-instance-metadata.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource *> *provisionedResources;

/**
 *  Link to the SLM instance template. Only populated when updating SLM
 *  instances via SSA's Actuation service adaptor.
 *  Service producers with custom control plane (e.g. Cloud SQL) doesn't
 *  need to populate this field. Instead they should use software_versions.
 */
@property(nonatomic, copy, nullable) NSString *slmInstanceTemplate;

/**
 *  Output only. SLO metadata for instance classification in the
 *  Standardized dataplane SLO platform.
 *  See go/cloud-ssa-standard-slo for feature description.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata *sloMetadata;

/**
 *  Software versions that are used to deploy this instance. This can be
 *  mutated by rollout services.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_SoftwareVersions *softwareVersions;

/**
 *  Output only. Current lifecycle state of the resource (e.g. if it's being
 *  created or ready to use).
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Creating
 *        Instance is being created. (Value: "CREATING")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Deleting
 *        Instance is being deleted. (Value: "DELETING")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Error
 *        Instance encountered an error and is in indeterministic state. (Value:
 *        "ERROR")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Ready
 *        Instance has been created and is ready to use. (Value: "READY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Repairing
 *        Instance is unheathy and under repair. (Value: "REPAIRING")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_StateUnspecified
 *        Unspecified state. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Updating
 *        Instance is being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. ID of the associated GCP tenant project.
 *  See go/get-instance-metadata.
 */
@property(nonatomic, copy, nullable) NSString *tenantProjectId;

/** Output only. Timestamp when the resource was last modified. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Resource labels to represent user provided metadata. Each label
 *  is a key-value pair, where both the key and the value are arbitrary strings
 *  provided by the user.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_Labels : GTLRObject
@end


/**
 *  The MaintenancePolicies that have been attached to the instance.
 *  The key must be of the type name of the oneof policy name defined in
 *  MaintenancePolicy, and the referenced policy must define the same policy
 *  type. For complete details of MaintenancePolicy, please refer to
 *  go/cloud-saas-mw-ug.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenancePolicyNames : GTLRObject
@end


/**
 *  The MaintenanceSchedule contains the scheduling information of published
 *  maintenance schedule.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenanceSchedules : GTLRObject
@end


/**
 *  Output only. Custom string attributes used primarily to expose
 *  producer-specific information in monitoring dashboards.
 *  See go/get-instance-metadata.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_ProducerMetadata : GTLRObject
@end


/**
 *  Software versions that are used to deploy this instance. This can be
 *  mutated by rollout services.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_SoftwareVersions : GTLRObject
@end


/**
 *  Maintenance schedule which is exposed to customer and potentially end user,
 *  indicating published upcoming future maintenance schedule
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule : GTLRObject

/**
 *  Can this scheduled update be rescheduled?
 *  By default, it's true and API needs to do explicitly check whether it's
 *  set, if it's set as false explicitly, it's false
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canReschedule;

/** The scheduled end time for the maintenance. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The rollout management policy this maintenance schedule is associated
 *  with. When doing reschedule update request, the reschedule should be
 *  against this given policy.
 */
@property(nonatomic, copy, nullable) NSString *rolloutManagementPolicy;

/** The scheduled start time for the maintenance. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  Node information for custom per-node SLO implementations.
 *  SSA does not support per-node SLO, but producers can populate per-node
 *  information in SloMetadata for custom precomputations.
 *  SSA Eligibility Exporter will emit per-node metric based on this
 *  information.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata : GTLRObject

/**
 *  By default node is eligible if instance is eligible.
 *  But individual node might be excluded from SLO by adding entry here.
 *  For semantic see SloMetadata.exclusions.
 *  If both instance and node level exclusions are present for time period,
 *  the node level's reason will be reported by Eligibility Exporter.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1SloExclusion *> *exclusions;

/** The location of the node, if different from instance location. */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  The id of the node.
 *  This should be equal to SaasInstanceNode.node_id.
 */
@property(nonatomic, copy, nullable) NSString *nodeId;

@end


/**
 *  Describes provisioned dataplane resources.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource : GTLRObject

/**
 *  Type of the resource. This can be either a GCP resource or a custom one
 *  (e.g. another cloud provider's VM). For GCP compute resources use singular
 *  form of the names listed in GCP compute API documentation
 *  (https://cloud.google.com/compute/docs/reference/rest/v1/), prefixed with
 *  'compute-', for example: 'compute-instance', 'compute-disk',
 *  'compute-autoscaler'.
 */
@property(nonatomic, copy, nullable) NSString *resourceType;

/**
 *  URL identifying the resource, e.g.
 *  "https://www.googleapis.com/compute/v1/projects/...)".
 */
@property(nonatomic, copy, nullable) NSString *resourceUrl;

@end


/**
 *  SloEligibility is a tuple containing eligibility value: true if an instance
 *  is eligible for SLO calculation or false if it should be excluded from all
 *  SLO-related calculations along with a user-defined reason.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility : GTLRObject

/**
 *  Whether an instance is eligible or ineligible.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *eligible;

/**
 *  User-defined reason for the current value of instance eligibility. Usually,
 *  this can be directly mapped to the internal state. An empty reason is
 *  allowed.
 */
@property(nonatomic, copy, nullable) NSString *reason;

@end


/**
 *  SloExclusion represents an exclusion in SLI calculation applies to all SLOs.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1SloExclusion : GTLRObject

/**
 *  Exclusion duration. No restrictions on the possible values.
 *  When an ongoing operation is taking longer than initially expected,
 *  an existing entry in the exclusion list can be updated by extending the
 *  duration. This is supported by the subsystem exporting eligibility data
 *  as long as such extension is committed at least 10 minutes before the
 *  original exclusion expiration - otherwise it is possible that there will
 *  be "gaps" in the exclusion application in the exported timeseries.
 */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/**
 *  Human-readable reason for the exclusion.
 *  This should be a static string (e.g. "Disruptive update in progress")
 *  and should not contain dynamically generated data (e.g. instance name).
 *  Can be left empty.
 */
@property(nonatomic, copy, nullable) NSString *reason;

/**
 *  Name of an SLI that this exclusion applies to. Can be left empty,
 *  signaling that the instance should be excluded from all SLIs defined
 *  in the service SLO configuration.
 */
@property(nonatomic, copy, nullable) NSString *sliName;

/**
 *  Start time of the exclusion. No alignment (e.g. to a full minute) needed.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  SloMetadata contains resources required for proper SLO classification of the
 *  instance.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata : GTLRObject

/** Optional. User-defined instance eligibility. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility *eligibility;

/**
 *  List of SLO exclusion windows. When multiple entries in the list match
 *  (matching the exclusion time-window against current time point)
 *  the exclusion reason used in the first matching entry will be published.
 *  It is not needed to include expired exclusion in this list, as only the
 *  currently applicable exclusions are taken into account by the eligibility
 *  exporting subsystem (the historical state of exclusions will be reflected
 *  in the historically produced timeseries regardless of the current state).
 *  This field can be used to mark the instance as temporary ineligible
 *  for the purpose of SLO calculation. For permanent instance SLO exclusion,
 *  use of custom instance eligibility is recommended. See 'eligibility' field
 *  below.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1SloExclusion *> *exclusions;

/**
 *  Optional. List of nodes.
 *  Some producers need to use per-node metadata to calculate SLO.
 *  This field allows such producers to publish per-node SLO meta data,
 *  which will be consumed by SSA Eligibility Exporter and published in the
 *  form of per node metric to Monarch.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata *> *nodes;

/**
 *  Name of the SLO tier the Instance belongs to. This name will be expected to
 *  match the tiers specified in the service SLO configuration.
 *  Field is mandatory and must not be empty.
 */
@property(nonatomic, copy, nullable) NSString *tier;

@end


/**
 *  GTLRCloudMemorystoreforMemcached_Instance
 */
@interface GTLRCloudMemorystoreforMemcached_Instance : GTLRObject

/**
 *  Optional. The full name of the Google Compute Engine
 *  [network](/compute/docs/networks-and-firewalls#networks) to which the
 *  instance is connected. If left unspecified, the `default` network
 *  will be used.
 */
@property(nonatomic, copy, nullable) NSString *authorizedNetwork;

/** Output only. The time the instance was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Endpoint for Discovery API */
@property(nonatomic, copy, nullable) NSString *discoveryEndpoint;

/**
 *  Optional. User provided name for the instance only used for display
 *  purposes. Cannot be more than 80 characters.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** List of messages that describe current statuses of memcached instance. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_InstanceMessage *> *instanceMessages;

/**
 *  Optional. Resource labels to represent user-provided metadata.
 *  Refer to cloud documentation on labels for more details.
 *  https://cloud.google.com/compute/docs/labeling-resources
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_Instance_Labels *labels;

/**
 *  Output only. The full version of memcached server running on this instance.
 *  System automatically determines the full memcached version for an instance
 *  based on the input MemcacheVersion.
 *  The full version format will be "memcached-1.5.16".
 */
@property(nonatomic, copy, nullable) NSString *memcacheFullVersion;

/**
 *  Output only. List of Memcached nodes.
 *  Refer to [Node] message for more details.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_Node *> *memcacheNodes;

/**
 *  Optional. The major version of Memcached software.
 *  If not provided, latest supported version will be used. Currently the
 *  latest supported major version is MEMCACHE_1_5.
 *  The minor version will be automatically determined by our system based on
 *  the latest supported minor version.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Instance_MemcacheVersion_Memcache15
 *        Memcached 1.5 version. (Value: "MEMCACHE_1_5")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Instance_MemcacheVersion_MemcacheVersionUnspecified
 *        Value "MEMCACHE_VERSION_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *memcacheVersion;

/**
 *  Required. Unique name of the resource in this scope including project and
 *  location using the form:
 *  `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
 *  Note: Memcached instances are managed and addressed at regional level so
 *  location_id here refers to a GCP region; however, users may choose which
 *  zones Memcached nodes within an instances should be provisioned in.
 *  Refer to [zones] field for more details.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. Configuration for Memcached nodes. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_NodeConfig *nodeConfig;

/**
 *  Required. Number of nodes in the Memcached instance.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nodeCount;

/**
 *  Optional: User defined parameters to apply to the memcached process
 *  on each node.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_MemcacheParameters *parameters;

/**
 *  Output only. The state of this Memcached instance.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Instance_State_Creating
 *        Memcached instance is being created. (Value: "CREATING")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Instance_State_Deleting
 *        Memcached instance is being deleted. (Value: "DELETING")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Instance_State_PerformingMaintenance
 *        Memcached instance is going through maintenance, e.g. data plane
 *        rollout. (Value: "PERFORMING_MAINTENANCE")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Instance_State_Ready Memcached
 *        instance has been created and ready to be used. (Value: "READY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Instance_State_StateUnspecified
 *        State not set. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The time the instance was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Optional. Zones where Memcached nodes should be provisioned in.
 *  Memcached nodes will be equally distributed across these zones. If not
 *  provided, the service will by default create nodes in all zones in the
 *  region for the instance.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *zones;

@end


/**
 *  Optional. Resource labels to represent user-provided metadata.
 *  Refer to cloud documentation on labels for more details.
 *  https://cloud.google.com/compute/docs/labeling-resources
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_Instance_Labels : GTLRObject
@end


/**
 *  GTLRCloudMemorystoreforMemcached_InstanceMessage
 */
@interface GTLRCloudMemorystoreforMemcached_InstanceMessage : GTLRObject

/**
 *  A code that correspond to one type of user-facing message.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMemorystoreforMemcached_InstanceMessage_Code_CodeUnspecified
 *        Message Code not set. (Value: "CODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_InstanceMessage_Code_ZoneDistributionUnbalanced
 *        Memcached nodes are distributed unevenly. (Value:
 *        "ZONE_DISTRIBUTION_UNBALANCED")
 */
@property(nonatomic, copy, nullable) NSString *code;

/** Message on memcached instance which will be exposed to users. */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  Response for ListInstances.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "resources" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudMemorystoreforMemcached_ListInstancesResponse : GTLRCollectionObject

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of Memcached instances in the project in the specified location,
 *  or across all locations.
 *  If the `location_id` in the parent field of the request is "-", all regions
 *  available to the project are queried, and the results aggregated.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_Instance *> *resources;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudMemorystoreforMemcached_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudMemorystoreforMemcached_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_Operation *> *operations;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRCloudMemorystoreforMemcached_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name.
 *  For example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations.
 *  For example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_Location_Metadata : GTLRObject
@end


/**
 *  GTLRCloudMemorystoreforMemcached_MemcacheParameters
 */
@interface GTLRCloudMemorystoreforMemcached_MemcacheParameters : GTLRObject

/**
 *  Output only. The unique ID associated with this set of parameters. Users
 *  can use this id to determine if the parameters associated with the instance
 *  differ from the parameters associated with the nodes and any action needs
 *  to be taken to apply parameters on nodes.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** User defined set of parameters to use in the memcached process. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_MemcacheParameters_Params *params;

@end


/**
 *  User defined set of parameters to use in the memcached process.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_MemcacheParameters_Params : GTLRObject
@end


/**
 *  GTLRCloudMemorystoreforMemcached_Node
 */
@interface GTLRCloudMemorystoreforMemcached_Node : GTLRObject

/**
 *  Output only. Hostname or IP address of the Memcached node used by the
 *  clients to connect to the Memcached server on this node.
 */
@property(nonatomic, copy, nullable) NSString *host;

/**
 *  Output only. Identifier of the Memcached node. The node id does not
 *  include project or location like the Memcached instance name.
 */
@property(nonatomic, copy, nullable) NSString *nodeId;

/** User defined parameters currently applied to the node. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_MemcacheParameters *parameters;

/**
 *  Output only. The port number of the Memcached server on this node.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/**
 *  Output only. Current state of the Memcached node.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Node_State_Creating Node is
 *        being created. (Value: "CREATING")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Node_State_Deleting Node is
 *        being deleted. (Value: "DELETING")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Node_State_Ready Node has been
 *        created and ready to be used. (Value: "READY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Node_State_StateUnspecified Node
 *        state is not set. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Node_State_Updating Node is
 *        being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Location (GCP Zone) for the Memcached node.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  Configuration for a Memcached Node.
 */
@interface GTLRCloudMemorystoreforMemcached_NodeConfig : GTLRObject

/**
 *  Required. Number of cpus per Memcached node.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cpuCount;

/**
 *  Required. Memory size in MiB for each Memcached node.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memorySizeMb;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudMemorystoreforMemcached_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the
 *  `name` should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_Operation_Response : GTLRObject
@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources.
 *  A `Policy` is a collection of `bindings`. A `binding` binds one or more
 *  `members` to a single `role`. Members can be user accounts, service
 *  accounts,
 *  Google groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role.
 *  Optionally, a `binding` can specify a `condition`, which is a logical
 *  expression that allows access to a resource only if the expression evaluates
 *  to `true`. A condition can add constraints based on attributes of the
 *  request, the resource, or both.
 *  **JSON example:**
 *  {
 *  "bindings": [
 *  {
 *  "role": "roles/resourcemanager.organizationAdmin",
 *  "members": [
 *  "user:mike\@example.com",
 *  "group:admins\@example.com",
 *  "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com"
 *  ]
 *  },
 *  {
 *  "role": "roles/resourcemanager.organizationViewer",
 *  "members": ["user:eve\@example.com"],
 *  "condition": {
 *  "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020",
 *  "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')",
 *  }
 *  }
 *  ],
 *  "etag": "BwWWja0YfJA=",
 *  "version": 3
 *  }
 *  **YAML example:**
 *  bindings:
 *  - members:
 *  - user:mike\@example.com
 *  - group:admins\@example.com
 *  - domain:google.com
 *  - serviceAccount:my-project-id\@appspot.gserviceaccount.com
 *  role: roles/resourcemanager.organizationAdmin
 *  - members:
 *  - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer
 *  condition:
 *  title: expirable access
 *  description: Does not grant access after Sep 2020
 *  expression: request.time < timestamp('2020-10-01T00:00:00.000Z')
 *  - etag: BwWWja0YfJA=
 *  - version: 3
 *  For a description of IAM and its features, see the
 *  [IAM documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRCloudMemorystoreforMemcached_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members` to a `role`. Optionally, may specify a
 *  `condition` that determines how and when the `bindings` are applied. Each
 *  of the `bindings` must contain at least one member.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help
 *  prevent simultaneous updates of a policy from overwriting each other.
 *  It is strongly suggested that systems make use of the `etag` in the
 *  read-modify-write cycle to perform policy updates in order to avoid race
 *  conditions: An `etag` is returned in the response to `getIamPolicy`, and
 *  systems are expected to put that etag in the request to `setIamPolicy` to
 *  ensure that their change will be applied to the same version of the policy.
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy.
 *  Valid values are `0`, `1`, and `3`. Requests that specify an invalid value
 *  are rejected.
 *  Any operation that affects conditional role bindings must specify version
 *  `3`. This requirement applies to the following operations:
 *  * Getting a policy that includes a conditional role binding
 *  * Adding a conditional role binding to a policy
 *  * Changing a conditional role binding in a policy
 *  * Removing any role binding, with or without a condition, from a policy
 *  that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost.
 *  If a policy does not include any conditions, operations on that policy may
 *  specify any valid version or leave the field unset.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRCloudMemorystoreforMemcached_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a
 *  valid policy but certain Cloud Platform services (such as Projects)
 *  might reject them.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used:
 *  paths: "bindings, etag"
 *  This field is only used by Cloud IAM.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details.
 *  You can find out more about this error model and how to work with it in the
 *  [API Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudMemorystoreforMemcached_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudMemorystoreforMemcached_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_Status_Details_Item : GTLRObject
@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRCloudMemorystoreforMemcached_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as '*' or 'storage.*') are not allowed. For more
 *  information see
 *  [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRCloudMemorystoreforMemcached_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is
 *  allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Request for UpdateParameters.
 */
@interface GTLRCloudMemorystoreforMemcached_UpdateParametersRequest : GTLRObject

/** The parameters to apply to the instance. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_MemcacheParameters *parameters;

/**
 *  Required. Mask of fields to update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  GTLRCloudMemorystoreforMemcached_ZoneMetadata
 */
@interface GTLRCloudMemorystoreforMemcached_ZoneMetadata : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
