// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Service Usage API (serviceusage/v1)
// Description:
//   Enables services that service consumers want to use on Google Cloud
//   Platform, lists the available or enabled services, or disables services
//   that service consumers no longer use.
// Documentation:
//   https://cloud.google.com/service-usage/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRServiceUsage_Api;
@class GTLRServiceUsage_Authentication;
@class GTLRServiceUsage_AuthenticationRule;
@class GTLRServiceUsage_AuthorizationConfig;
@class GTLRServiceUsage_AuthProvider;
@class GTLRServiceUsage_AuthRequirement;
@class GTLRServiceUsage_Backend;
@class GTLRServiceUsage_BackendRule;
@class GTLRServiceUsage_Billing;
@class GTLRServiceUsage_BillingDestination;
@class GTLRServiceUsage_Context;
@class GTLRServiceUsage_ContextRule;
@class GTLRServiceUsage_Control;
@class GTLRServiceUsage_CustomError;
@class GTLRServiceUsage_CustomErrorRule;
@class GTLRServiceUsage_CustomHttpPattern;
@class GTLRServiceUsage_Documentation;
@class GTLRServiceUsage_DocumentationRule;
@class GTLRServiceUsage_EnableFailure;
@class GTLRServiceUsage_Endpoint;
@class GTLRServiceUsage_Enum;
@class GTLRServiceUsage_EnumValue;
@class GTLRServiceUsage_Experimental;
@class GTLRServiceUsage_Field;
@class GTLRServiceUsage_GoogleApiServiceusageV1Service;
@class GTLRServiceUsage_GoogleApiServiceusageV1ServiceConfig;
@class GTLRServiceUsage_Http;
@class GTLRServiceUsage_HttpRule;
@class GTLRServiceUsage_LabelDescriptor;
@class GTLRServiceUsage_LogDescriptor;
@class GTLRServiceUsage_Logging;
@class GTLRServiceUsage_LoggingDestination;
@class GTLRServiceUsage_Method;
@class GTLRServiceUsage_MetricDescriptor;
@class GTLRServiceUsage_MetricDescriptorMetadata;
@class GTLRServiceUsage_MetricRule;
@class GTLRServiceUsage_MetricRule_MetricCosts;
@class GTLRServiceUsage_Mixin;
@class GTLRServiceUsage_MonitoredResourceDescriptor;
@class GTLRServiceUsage_Monitoring;
@class GTLRServiceUsage_MonitoringDestination;
@class GTLRServiceUsage_OAuthRequirements;
@class GTLRServiceUsage_Operation;
@class GTLRServiceUsage_Operation_Metadata;
@class GTLRServiceUsage_Operation_Response;
@class GTLRServiceUsage_Option;
@class GTLRServiceUsage_Option_Value;
@class GTLRServiceUsage_Page;
@class GTLRServiceUsage_Quota;
@class GTLRServiceUsage_QuotaLimit;
@class GTLRServiceUsage_QuotaLimit_Values;
@class GTLRServiceUsage_SourceContext;
@class GTLRServiceUsage_SourceInfo;
@class GTLRServiceUsage_SourceInfo_SourceFiles_Item;
@class GTLRServiceUsage_Status;
@class GTLRServiceUsage_Status_Details_Item;
@class GTLRServiceUsage_SystemParameter;
@class GTLRServiceUsage_SystemParameterRule;
@class GTLRServiceUsage_SystemParameters;
@class GTLRServiceUsage_Type;
@class GTLRServiceUsage_Usage;
@class GTLRServiceUsage_UsageRule;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRServiceUsage_Api.syntax

/**
 *  Syntax `proto2`.
 *
 *  Value: "SYNTAX_PROTO2"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Api_Syntax_SyntaxProto2;
/**
 *  Syntax `proto3`.
 *
 *  Value: "SYNTAX_PROTO3"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Api_Syntax_SyntaxProto3;

// ----------------------------------------------------------------------------
// GTLRServiceUsage_BackendRule.pathTranslation

/**
 *  The request path will be appended to the backend address.
 *  # Examples
 *  Given the following operation config:
 *  Method path: /api/company/{cid}/user/{uid}
 *  Backend address: https://example.appspot.com
 *  Requests to the following request paths will call the backend at the
 *  translated path:
 *  Request path: /api/company/widgetworks/user/johndoe
 *  Translated: https://example.appspot.com/api/company/widgetworks/user/johndoe
 *  Request path: /api/company/widgetworks/user/johndoe?timezone=EST
 *  Translated:
 *  https://example.appspot.com/api/company/widgetworks/user/johndoe?timezone=EST
 *
 *  Value: "APPEND_PATH_TO_ADDRESS"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_BackendRule_PathTranslation_AppendPathToAddress;
/**
 *  Use the backend address as-is, with no modification to the path. If the
 *  URL pattern contains variables, the variable names and values will be
 *  appended to the query string. If a query string parameter and a URL
 *  pattern variable have the same name, this may result in duplicate keys in
 *  the query string.
 *  # Examples
 *  Given the following operation config:
 *  Method path: /api/company/{cid}/user/{uid}
 *  Backend address: https://example.cloudfunctions.net/getUser
 *  Requests to the following request paths will call the backend at the
 *  translated path:
 *  Request path: /api/company/widgetworks/user/johndoe
 *  Translated:
 *  https://example.cloudfunctions.net/getUser?cid=widgetworks&uid=johndoe
 *  Request path: /api/company/widgetworks/user/johndoe?timezone=EST
 *  Translated:
 *  https://example.cloudfunctions.net/getUser?timezone=EST&cid=widgetworks&uid=johndoe
 *
 *  Value: "CONSTANT_ADDRESS"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_BackendRule_PathTranslation_ConstantAddress;
/** Value: "PATH_TRANSLATION_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRServiceUsage_BackendRule_PathTranslation_PathTranslationUnspecified;

// ----------------------------------------------------------------------------
// GTLRServiceUsage_Enum.syntax

/**
 *  Syntax `proto2`.
 *
 *  Value: "SYNTAX_PROTO2"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Enum_Syntax_SyntaxProto2;
/**
 *  Syntax `proto3`.
 *
 *  Value: "SYNTAX_PROTO3"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Enum_Syntax_SyntaxProto3;

// ----------------------------------------------------------------------------
// GTLRServiceUsage_Field.cardinality

/**
 *  For optional fields.
 *
 *  Value: "CARDINALITY_OPTIONAL"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Cardinality_CardinalityOptional;
/**
 *  For repeated fields.
 *
 *  Value: "CARDINALITY_REPEATED"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Cardinality_CardinalityRepeated;
/**
 *  For required fields. Proto2 syntax only.
 *
 *  Value: "CARDINALITY_REQUIRED"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Cardinality_CardinalityRequired;
/**
 *  For fields with unknown cardinality.
 *
 *  Value: "CARDINALITY_UNKNOWN"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Cardinality_CardinalityUnknown;

// ----------------------------------------------------------------------------
// GTLRServiceUsage_Field.kind

/**
 *  Field type bool.
 *
 *  Value: "TYPE_BOOL"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeBool;
/**
 *  Field type bytes.
 *
 *  Value: "TYPE_BYTES"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeBytes;
/**
 *  Field type double.
 *
 *  Value: "TYPE_DOUBLE"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeDouble;
/**
 *  Field type enum.
 *
 *  Value: "TYPE_ENUM"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeEnum;
/**
 *  Field type fixed32.
 *
 *  Value: "TYPE_FIXED32"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeFixed32;
/**
 *  Field type fixed64.
 *
 *  Value: "TYPE_FIXED64"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeFixed64;
/**
 *  Field type float.
 *
 *  Value: "TYPE_FLOAT"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeFloat;
/**
 *  Field type group. Proto2 syntax only, and deprecated.
 *
 *  Value: "TYPE_GROUP"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeGroup;
/**
 *  Field type int32.
 *
 *  Value: "TYPE_INT32"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeInt32;
/**
 *  Field type int64.
 *
 *  Value: "TYPE_INT64"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeInt64;
/**
 *  Field type message.
 *
 *  Value: "TYPE_MESSAGE"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeMessage;
/**
 *  Field type sfixed32.
 *
 *  Value: "TYPE_SFIXED32"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeSfixed32;
/**
 *  Field type sfixed64.
 *
 *  Value: "TYPE_SFIXED64"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeSfixed64;
/**
 *  Field type sint32.
 *
 *  Value: "TYPE_SINT32"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeSint32;
/**
 *  Field type sint64.
 *
 *  Value: "TYPE_SINT64"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeSint64;
/**
 *  Field type string.
 *
 *  Value: "TYPE_STRING"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeString;
/**
 *  Field type uint32.
 *
 *  Value: "TYPE_UINT32"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeUint32;
/**
 *  Field type uint64.
 *
 *  Value: "TYPE_UINT64"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeUint64;
/**
 *  Field type unknown.
 *
 *  Value: "TYPE_UNKNOWN"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Field_Kind_TypeUnknown;

// ----------------------------------------------------------------------------
// GTLRServiceUsage_GoogleApiServiceusageV1Service.state

/**
 *  The service cannot be used by this consumer. It has either been explicitly
 *  disabled, or has never been enabled.
 *
 *  Value: "DISABLED"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_GoogleApiServiceusageV1Service_State_Disabled;
/**
 *  The service has been explicitly enabled for use by this consumer.
 *
 *  Value: "ENABLED"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_GoogleApiServiceusageV1Service_State_Enabled;
/**
 *  The default value, which indicates that the enabled state of the service
 *  is unspecified or not meaningful. Currently, all consumers other than
 *  projects (such as folders and organizations) are always in this state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_GoogleApiServiceusageV1Service_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRServiceUsage_LabelDescriptor.valueType

/**
 *  Boolean; true or false.
 *
 *  Value: "BOOL"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_LabelDescriptor_ValueType_Bool;
/**
 *  A 64-bit signed integer.
 *
 *  Value: "INT64"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_LabelDescriptor_ValueType_Int64;
/**
 *  A variable-length string. This is the default.
 *
 *  Value: "STRING"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_LabelDescriptor_ValueType_String;

// ----------------------------------------------------------------------------
// GTLRServiceUsage_Method.syntax

/**
 *  Syntax `proto2`.
 *
 *  Value: "SYNTAX_PROTO2"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Method_Syntax_SyntaxProto2;
/**
 *  Syntax `proto3`.
 *
 *  Value: "SYNTAX_PROTO3"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Method_Syntax_SyntaxProto3;

// ----------------------------------------------------------------------------
// GTLRServiceUsage_MetricDescriptor.metricKind

/**
 *  A value accumulated over a time interval. Cumulative
 *  measurements in a time series should have the same start time
 *  and increasing end times, until an event resets the cumulative
 *  value to zero and sets a new start time for the following
 *  points.
 *
 *  Value: "CUMULATIVE"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptor_MetricKind_Cumulative;
/**
 *  The change in a value during a time interval.
 *
 *  Value: "DELTA"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptor_MetricKind_Delta;
/**
 *  An instantaneous measurement of a value.
 *
 *  Value: "GAUGE"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptor_MetricKind_Gauge;
/**
 *  Do not use this default value.
 *
 *  Value: "METRIC_KIND_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptor_MetricKind_MetricKindUnspecified;

// ----------------------------------------------------------------------------
// GTLRServiceUsage_MetricDescriptor.valueType

/**
 *  The value is a boolean.
 *  This value type can be used only if the metric kind is `GAUGE`.
 *
 *  Value: "BOOL"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptor_ValueType_Bool;
/**
 *  The value is a `Distribution`.
 *
 *  Value: "DISTRIBUTION"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptor_ValueType_Distribution;
/**
 *  The value is a double precision floating point number.
 *
 *  Value: "DOUBLE"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptor_ValueType_Double;
/**
 *  The value is a signed 64-bit integer.
 *
 *  Value: "INT64"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptor_ValueType_Int64;
/**
 *  The value is money.
 *
 *  Value: "MONEY"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptor_ValueType_Money;
/**
 *  The value is a text string.
 *  This value type can be used only if the metric kind is `GAUGE`.
 *
 *  Value: "STRING"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptor_ValueType_String;
/**
 *  Do not use this default value.
 *
 *  Value: "VALUE_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptor_ValueType_ValueTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRServiceUsage_MetricDescriptorMetadata.launchStage

/**
 *  Alpha is a limited availability test for releases before they are cleared
 *  for widespread use. By Alpha, all significant design issues are resolved
 *  and we are in the process of verifying functionality. Alpha customers
 *  need to apply for access, agree to applicable terms, and have their
 *  projects whitelisted. Alpha releases don’t have to be feature complete,
 *  no SLAs are provided, and there are no technical support obligations, but
 *  they will be far enough along that customers can actually use them in
 *  test environments or for limited-use tests -- just like they would in
 *  normal production cases.
 *
 *  Value: "ALPHA"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptorMetadata_LaunchStage_Alpha;
/**
 *  Beta is the point at which we are ready to open a release for any
 *  customer to use. There are no SLA or technical support obligations in a
 *  Beta release. Products will be complete from a feature perspective, but
 *  may have some open outstanding issues. Beta releases are suitable for
 *  limited production use cases.
 *
 *  Value: "BETA"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptorMetadata_LaunchStage_Beta;
/**
 *  Deprecated features are scheduled to be shut down and removed. For more
 *  information, see the “Deprecation Policy” section of our [Terms of
 *  Service](https://cloud.google.com/terms/)
 *  and the [Google Cloud Platform Subject to the Deprecation
 *  Policy](https://cloud.google.com/terms/deprecation) documentation.
 *
 *  Value: "DEPRECATED"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptorMetadata_LaunchStage_Deprecated;
/**
 *  Early Access features are limited to a closed group of testers. To use
 *  these features, you must sign up in advance and sign a Trusted Tester
 *  agreement (which includes confidentiality provisions). These features may
 *  be unstable, changed in backward-incompatible ways, and are not
 *  guaranteed to be released.
 *
 *  Value: "EARLY_ACCESS"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptorMetadata_LaunchStage_EarlyAccess;
/**
 *  GA features are open to all developers and are considered stable and
 *  fully qualified for production use.
 *
 *  Value: "GA"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptorMetadata_LaunchStage_Ga;
/**
 *  Do not use this default value.
 *
 *  Value: "LAUNCH_STAGE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_MetricDescriptorMetadata_LaunchStage_LaunchStageUnspecified;

// ----------------------------------------------------------------------------
// GTLRServiceUsage_Type.syntax

/**
 *  Syntax `proto2`.
 *
 *  Value: "SYNTAX_PROTO2"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Type_Syntax_SyntaxProto2;
/**
 *  Syntax `proto3`.
 *
 *  Value: "SYNTAX_PROTO3"
 */
GTLR_EXTERN NSString * const kGTLRServiceUsage_Type_Syntax_SyntaxProto3;

/**
 *  Api is a light-weight descriptor for an API Interface.
 *  Interfaces are also described as "protocol buffer services" in some
 *  contexts,
 *  such as by the "service" keyword in a .proto file, but they are different
 *  from API Services, which represent a concrete implementation of an interface
 *  as opposed to simply a description of methods and bindings. They are also
 *  sometimes simply referred to as "APIs" in other contexts, such as the name
 *  of
 *  this message itself. See https://cloud.google.com/apis/design/glossary for
 *  detailed terminology.
 */
@interface GTLRServiceUsage_Api : GTLRObject

/** The methods of this interface, in unspecified order. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Method *> *methods;

/** Included interfaces. See Mixin. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Mixin *> *mixins;

/**
 *  The fully qualified name of this interface, including package name
 *  followed by the interface's simple name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Any metadata attached to the interface. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Option *> *options;

/**
 *  Source context for the protocol buffer service represented by this
 *  message.
 */
@property(nonatomic, strong, nullable) GTLRServiceUsage_SourceContext *sourceContext;

/**
 *  The source syntax of the service.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceUsage_Api_Syntax_SyntaxProto2 Syntax `proto2`. (Value:
 *        "SYNTAX_PROTO2")
 *    @arg @c kGTLRServiceUsage_Api_Syntax_SyntaxProto3 Syntax `proto3`. (Value:
 *        "SYNTAX_PROTO3")
 */
@property(nonatomic, copy, nullable) NSString *syntax;

/**
 *  A version string for this interface. If specified, must have the form
 *  `major-version.minor-version`, as in `1.10`. If the minor version is
 *  omitted, it defaults to zero. If the entire version field is empty, the
 *  major version is derived from the package name, as outlined below. If the
 *  field is not empty, the version in the package name will be verified to be
 *  consistent with what is provided here.
 *  The versioning schema uses [semantic
 *  versioning](http://semver.org) where the major version number
 *  indicates a breaking change and the minor version an additive,
 *  non-breaking change. Both version numbers are signals to users
 *  what to expect from different versions, and should be carefully
 *  chosen based on the product plan.
 *  The major version is also reflected in the package name of the
 *  interface, which must end in `v<major-version>`, as in
 *  `google.feature.v1`. For major versions 0 and 1, the suffix can
 *  be omitted. Zero major versions must only be used for
 *  experimental, non-GA interfaces.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  `Authentication` defines the authentication configuration for an API.
 *  Example for an API targeted for external use:
 *  name: calendar.googleapis.com
 *  authentication:
 *  providers:
 *  - id: google_calendar_auth
 *  jwks_uri: https://www.googleapis.com/oauth2/v1/certs
 *  issuer: https://securetoken.google.com
 *  rules:
 *  - selector: "*"
 *  requirements:
 *  provider_id: google_calendar_auth
 */
@interface GTLRServiceUsage_Authentication : GTLRObject

/** Defines a set of authentication providers that a service supports. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_AuthProvider *> *providers;

/**
 *  A list of authentication rules that apply to individual API methods.
 *  **NOTE:** All service configuration rules follow "last one wins" order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_AuthenticationRule *> *rules;

@end


/**
 *  Authentication rules for the service.
 *  By default, if a method has any authentication requirements, every request
 *  must include a valid credential matching one of the requirements.
 *  It's an error to include more than one kind of credential in a single
 *  request.
 *  If a method doesn't have any auth requirements, request credentials will be
 *  ignored.
 */
@interface GTLRServiceUsage_AuthenticationRule : GTLRObject

/**
 *  If true, the service accepts API keys without any other credential.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowWithoutCredential;

/** The requirements for OAuth credentials. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_OAuthRequirements *oauth;

/** Requirements for additional authentication providers. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_AuthRequirement *> *requirements;

/**
 *  Selects the methods to which this rule applies.
 *  Refer to selector for syntax details.
 */
@property(nonatomic, copy, nullable) NSString *selector;

@end


/**
 *  Configuration of authorization.
 *  This section determines the authorization provider, if unspecified, then no
 *  authorization check will be done.
 *  Example:
 *  experimental:
 *  authorization:
 *  provider: firebaserules.googleapis.com
 */
@interface GTLRServiceUsage_AuthorizationConfig : GTLRObject

/**
 *  The name of the authorization provider, such as
 *  firebaserules.googleapis.com.
 */
@property(nonatomic, copy, nullable) NSString *provider;

@end


/**
 *  Configuration for an anthentication provider, including support for
 *  [JSON Web Token
 *  (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
 */
@interface GTLRServiceUsage_AuthProvider : GTLRObject

/**
 *  The list of JWT
 *  [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3).
 *  that are allowed to access. A JWT containing any of these audiences will
 *  be accepted. When this setting is absent, only JWTs with audience
 *  "https://Service_name/API_name"
 *  will be accepted. For example, if no audiences are in the setting,
 *  LibraryService API will only accept JWTs with the following audience
 *  "https://library-example.googleapis.com/google.example.library.v1.LibraryService".
 *  Example:
 *  audiences: bookstore_android.apps.googleusercontent.com,
 *  bookstore_web.apps.googleusercontent.com
 */
@property(nonatomic, copy, nullable) NSString *audiences;

/**
 *  Redirect URL if JWT token is required but not present or is expired.
 *  Implement authorizationUrl of securityDefinitions in OpenAPI spec.
 */
@property(nonatomic, copy, nullable) NSString *authorizationUrl;

/**
 *  The unique identifier of the auth provider. It will be referred to by
 *  `AuthRequirement.provider_id`.
 *  Example: "bookstore_auth".
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies the principal that issued the JWT. See
 *  https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1
 *  Usually a URL or an email address.
 *  Example: https://securetoken.google.com
 *  Example: 1234567-compute\@developer.gserviceaccount.com
 */
@property(nonatomic, copy, nullable) NSString *issuer;

/**
 *  URL of the provider's public key set to validate signature of the JWT. See
 *  [OpenID
 *  Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
 *  Optional if the key set document:
 *  - can be retrieved from
 *  [OpenID
 *  Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html
 *  of the issuer.
 *  - can be inferred from the email domain of the issuer (e.g. a Google service
 *  account).
 *  Example: https://www.googleapis.com/oauth2/v1/certs
 */
@property(nonatomic, copy, nullable) NSString *jwksUri;

@end


/**
 *  User-defined authentication requirements, including support for
 *  [JSON Web Token
 *  (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
 */
@interface GTLRServiceUsage_AuthRequirement : GTLRObject

/**
 *  NOTE: This will be deprecated soon, once AuthProvider.audiences is
 *  implemented and accepted in all the runtime components.
 *  The list of JWT
 *  [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3).
 *  that are allowed to access. A JWT containing any of these audiences will
 *  be accepted. When this setting is absent, only JWTs with audience
 *  "https://Service_name/API_name"
 *  will be accepted. For example, if no audiences are in the setting,
 *  LibraryService API will only accept JWTs with the following audience
 *  "https://library-example.googleapis.com/google.example.library.v1.LibraryService".
 *  Example:
 *  audiences: bookstore_android.apps.googleusercontent.com,
 *  bookstore_web.apps.googleusercontent.com
 */
@property(nonatomic, copy, nullable) NSString *audiences;

/**
 *  id from authentication provider.
 *  Example:
 *  provider_id: bookstore_auth
 */
@property(nonatomic, copy, nullable) NSString *providerId;

@end


/**
 *  `Backend` defines the backend configuration for a service.
 */
@interface GTLRServiceUsage_Backend : GTLRObject

/**
 *  A list of API backend rules that apply to individual API methods.
 *  **NOTE:** All service configuration rules follow "last one wins" order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_BackendRule *> *rules;

@end


/**
 *  A backend rule provides configuration for an individual API element.
 */
@interface GTLRServiceUsage_BackendRule : GTLRObject

/** The address of the API backend. */
@property(nonatomic, copy, nullable) NSString *address;

/**
 *  The number of seconds to wait for a response from a request. The default
 *  deadline for gRPC is infinite (no deadline) and HTTP requests is 5 seconds.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deadline;

/**
 *  The JWT audience is used when generating a JWT id token for the backend.
 */
@property(nonatomic, copy, nullable) NSString *jwtAudience;

/**
 *  Minimum deadline in seconds needed for this method. Calls having deadline
 *  value lower than this will be rejected.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minDeadline;

/**
 *  The number of seconds to wait for the completion of a long running
 *  operation. The default is no deadline.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *operationDeadline;

/**
 *  pathTranslation
 *
 *  Likely values:
 *    @arg @c kGTLRServiceUsage_BackendRule_PathTranslation_AppendPathToAddress
 *        The request path will be appended to the backend address.
 *        # Examples
 *        Given the following operation config:
 *        Method path: /api/company/{cid}/user/{uid}
 *        Backend address: https://example.appspot.com
 *        Requests to the following request paths will call the backend at the
 *        translated path:
 *        Request path: /api/company/widgetworks/user/johndoe
 *        Translated:
 *        https://example.appspot.com/api/company/widgetworks/user/johndoe
 *        Request path: /api/company/widgetworks/user/johndoe?timezone=EST
 *        Translated:
 *        https://example.appspot.com/api/company/widgetworks/user/johndoe?timezone=EST
 *        (Value: "APPEND_PATH_TO_ADDRESS")
 *    @arg @c kGTLRServiceUsage_BackendRule_PathTranslation_ConstantAddress Use
 *        the backend address as-is, with no modification to the path. If the
 *        URL pattern contains variables, the variable names and values will be
 *        appended to the query string. If a query string parameter and a URL
 *        pattern variable have the same name, this may result in duplicate keys
 *        in
 *        the query string.
 *        # Examples
 *        Given the following operation config:
 *        Method path: /api/company/{cid}/user/{uid}
 *        Backend address: https://example.cloudfunctions.net/getUser
 *        Requests to the following request paths will call the backend at the
 *        translated path:
 *        Request path: /api/company/widgetworks/user/johndoe
 *        Translated:
 *        https://example.cloudfunctions.net/getUser?cid=widgetworks&uid=johndoe
 *        Request path: /api/company/widgetworks/user/johndoe?timezone=EST
 *        Translated:
 *        https://example.cloudfunctions.net/getUser?timezone=EST&cid=widgetworks&uid=johndoe
 *        (Value: "CONSTANT_ADDRESS")
 *    @arg @c kGTLRServiceUsage_BackendRule_PathTranslation_PathTranslationUnspecified
 *        Value "PATH_TRANSLATION_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *pathTranslation;

/**
 *  Selects the methods to which this rule applies.
 *  Refer to selector for syntax details.
 */
@property(nonatomic, copy, nullable) NSString *selector;

@end


/**
 *  Request message for the `BatchEnableServices` method.
 */
@interface GTLRServiceUsage_BatchEnableServicesRequest : GTLRObject

/**
 *  The identifiers of the services to enable on the project.
 *  A valid identifier would be:
 *  serviceusage.googleapis.com
 *  Enabling services requires that each service is public or is shared with
 *  the user enabling the service.
 *  Two or more services must be specified. To enable a single service,
 *  use the `EnableService` method instead.
 *  A single request can enable a maximum of 20 services at a time. If more
 *  than 20 services are specified, the request will fail, and no state changes
 *  will occur.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *serviceIds;

@end


/**
 *  Response message for the `BatchEnableServices` method.
 *  This response message is assigned to the `response` field of the returned
 *  Operation when that operation is done.
 */
@interface GTLRServiceUsage_BatchEnableServicesResponse : GTLRObject

/**
 *  If allow_partial_success is true, and one or more services could not be
 *  enabled, this field contains the details about each failure.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_EnableFailure *> *failures;

/** The new state of the services after enabling. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_GoogleApiServiceusageV1Service *> *services;

@end


/**
 *  Billing related configuration of the service.
 *  The following example shows how to configure monitored resources and metrics
 *  for billing:
 *  monitored_resources:
 *  - type: library.googleapis.com/branch
 *  labels:
 *  - key: /city
 *  description: The city where the library branch is located in.
 *  - key: /name
 *  description: The name of the branch.
 *  metrics:
 *  - name: library.googleapis.com/book/borrowed_count
 *  metric_kind: DELTA
 *  value_type: INT64
 *  billing:
 *  consumer_destinations:
 *  - monitored_resource: library.googleapis.com/branch
 *  metrics:
 *  - library.googleapis.com/book/borrowed_count
 */
@interface GTLRServiceUsage_Billing : GTLRObject

/**
 *  Billing configurations for sending metrics to the consumer project.
 *  There can be multiple consumer destinations per service, each one must have
 *  a different monitored resource type. A metric can be used in at most
 *  one consumer destination.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_BillingDestination *> *consumerDestinations;

@end


/**
 *  Configuration of a specific billing destination (Currently only support
 *  bill against consumer project).
 */
@interface GTLRServiceUsage_BillingDestination : GTLRObject

/**
 *  Names of the metrics to report to this billing destination.
 *  Each name must be defined in Service.metrics section.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

/**
 *  The monitored resource type. The type must be defined in
 *  Service.monitored_resources section.
 */
@property(nonatomic, copy, nullable) NSString *monitoredResource;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRServiceUsage_CancelOperationRequest : GTLRObject
@end


/**
 *  `Context` defines which contexts an API requests.
 *  Example:
 *  context:
 *  rules:
 *  - selector: "*"
 *  requested:
 *  - google.rpc.context.ProjectContext
 *  - google.rpc.context.OriginContext
 *  The above specifies that all methods in the API request
 *  `google.rpc.context.ProjectContext` and
 *  `google.rpc.context.OriginContext`.
 *  Available context types are defined in package
 *  `google.rpc.context`.
 *  This also provides mechanism to whitelist any protobuf message extension
 *  that
 *  can be sent in grpc metadata using “x-goog-ext-<extension_id>-bin” and
 *  “x-goog-ext-<extension_id>-jspb” format. For example, list any service
 *  specific protobuf types that can appear in grpc metadata as follows in your
 *  yaml file:
 *  Example:
 *  context:
 *  rules:
 *  - selector: "google.example.library.v1.LibraryService.CreateBook"
 *  allowed_request_extensions:
 *  - google.foo.v1.NewExtension
 *  allowed_response_extensions:
 *  - google.foo.v1.NewExtension
 *  You can also specify extension ID instead of fully qualified extension name
 *  here.
 */
@interface GTLRServiceUsage_Context : GTLRObject

/**
 *  A list of RPC context rules that apply to individual API methods.
 *  **NOTE:** All service configuration rules follow "last one wins" order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_ContextRule *> *rules;

@end


/**
 *  A context rule provides information about the context for an individual API
 *  element.
 */
@interface GTLRServiceUsage_ContextRule : GTLRObject

/**
 *  A list of full type names or extension IDs of extensions allowed in grpc
 *  side channel from client to backend.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedRequestExtensions;

/**
 *  A list of full type names or extension IDs of extensions allowed in grpc
 *  side channel from backend to client.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedResponseExtensions;

/** A list of full type names of provided contexts. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *provided;

/** A list of full type names of requested contexts. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requested;

/**
 *  Selects the methods to which this rule applies.
 *  Refer to selector for syntax details.
 */
@property(nonatomic, copy, nullable) NSString *selector;

@end


/**
 *  Selects and configures the service controller used by the service. The
 *  service controller handles features like abuse, quota, billing, logging,
 *  monitoring, etc.
 */
@interface GTLRServiceUsage_Control : GTLRObject

/**
 *  The service control environment to use. If empty, no control plane
 *  feature (like quota and billing) will be enabled.
 */
@property(nonatomic, copy, nullable) NSString *environment;

@end


/**
 *  Customize service error responses. For example, list any service
 *  specific protobuf types that can appear in error detail lists of
 *  error responses.
 *  Example:
 *  custom_error:
 *  types:
 *  - google.foo.v1.CustomError
 *  - google.foo.v1.AnotherError
 */
@interface GTLRServiceUsage_CustomError : GTLRObject

/**
 *  The list of custom error rules that apply to individual API messages.
 *  **NOTE:** All service configuration rules follow "last one wins" order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_CustomErrorRule *> *rules;

/**
 *  The list of custom error detail types, e.g. 'google.foo.v1.CustomError'.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *types;

@end


/**
 *  A custom error rule.
 */
@interface GTLRServiceUsage_CustomErrorRule : GTLRObject

/**
 *  Mark this message as possible payload in error response. Otherwise,
 *  objects of this type will be filtered when they appear in error payload.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isErrorType;

/**
 *  Selects messages to which this rule applies.
 *  Refer to selector for syntax details.
 */
@property(nonatomic, copy, nullable) NSString *selector;

@end


/**
 *  A custom pattern is used for defining custom HTTP verb.
 */
@interface GTLRServiceUsage_CustomHttpPattern : GTLRObject

/** The name of this custom HTTP verb. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The path matched by this custom verb. */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  Request message for the `DisableService` method.
 */
@interface GTLRServiceUsage_DisableServiceRequest : GTLRObject

/**
 *  Indicates if services that are enabled and which depend on this service
 *  should also be disabled. If not set, an error will be generated if any
 *  enabled services depend on the service to be disabled. When set, the
 *  service, and any enabled services that depend on it, will be disabled
 *  together.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableDependentServices;

@end


/**
 *  Response message for the `DisableService` method.
 *  This response message is assigned to the `response` field of the returned
 *  Operation when that operation is done.
 */
@interface GTLRServiceUsage_DisableServiceResponse : GTLRObject

/** The new state of the service after disabling. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_GoogleApiServiceusageV1Service *service;

@end


/**
 *  `Documentation` provides the information for describing a service.
 *  Example:
 *  <pre><code>documentation:
 *  summary: >
 *  The Google Calendar API gives access
 *  to most calendar features.
 *  pages:
 *  - name: Overview
 *  content: &#40;== include google/foo/overview.md ==&#41;
 *  - name: Tutorial
 *  content: &#40;== include google/foo/tutorial.md ==&#41;
 *  subpages;
 *  - name: Java
 *  content: &#40;== include google/foo/tutorial_java.md ==&#41;
 *  rules:
 *  - selector: google.calendar.Calendar.Get
 *  description: >
 *  ...
 *  - selector: google.calendar.Calendar.Put
 *  description: >
 *  ...
 *  </code></pre>
 *  Documentation is provided in markdown syntax. In addition to
 *  standard markdown features, definition lists, tables and fenced
 *  code blocks are supported. Section headers can be provided and are
 *  interpreted relative to the section nesting of the context where
 *  a documentation fragment is embedded.
 *  Documentation from the IDL is merged with documentation defined
 *  via the config at normalization time, where documentation provided
 *  by config rules overrides IDL provided.
 *  A number of constructs specific to the API platform are supported
 *  in documentation text.
 *  In order to reference a proto element, the following
 *  notation can be used:
 *  <pre><code>&#91;fully.qualified.proto.name]&#91;]</code></pre>
 *  To override the display text used for the link, this can be used:
 *  <pre><code>&#91;display text]&#91;fully.qualified.proto.name]</code></pre>
 *  Text can be excluded from doc using the following notation:
 *  <pre><code>&#40;-- internal comment --&#41;</code></pre>
 *  A few directives are available in documentation. Note that
 *  directives must appear on a single line to be properly
 *  identified. The `include` directive includes a markdown file from
 *  an external source:
 *  <pre><code>&#40;== include path/to/file ==&#41;</code></pre>
 *  The `resource_for` directive marks a message to be the resource of
 *  a collection in REST view. If it is not specified, tools attempt
 *  to infer the resource from the operations in a collection:
 *  <pre><code>&#40;== resource_for v1.shelves.books ==&#41;</code></pre>
 *  The directive `suppress_warning` does not directly affect documentation
 *  and is documented together with service config validation.
 */
@interface GTLRServiceUsage_Documentation : GTLRObject

/** The URL to the root of documentation. */
@property(nonatomic, copy, nullable) NSString *documentationRootUrl;

/**
 *  Declares a single overview page. For example:
 *  <pre><code>documentation:
 *  summary: ...
 *  overview: &#40;== include overview.md ==&#41;
 *  </code></pre>
 *  This is a shortcut for the following declaration (using pages style):
 *  <pre><code>documentation:
 *  summary: ...
 *  pages:
 *  - name: Overview
 *  content: &#40;== include overview.md ==&#41;
 *  </code></pre>
 *  Note: you cannot specify both `overview` field and `pages` field.
 */
@property(nonatomic, copy, nullable) NSString *overview;

/** The top level pages for the documentation set. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Page *> *pages;

/**
 *  A list of documentation rules that apply to individual API elements.
 *  **NOTE:** All service configuration rules follow "last one wins" order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_DocumentationRule *> *rules;

/**
 *  A short summary of what the service does. Can only be provided by
 *  plain text.
 */
@property(nonatomic, copy, nullable) NSString *summary;

@end


/**
 *  A documentation rule provides information about individual API elements.
 */
@interface GTLRServiceUsage_DocumentationRule : GTLRObject

/**
 *  Deprecation description of the selected element(s). It can be provided if an
 *  element is marked as `deprecated`.
 */
@property(nonatomic, copy, nullable) NSString *deprecationDescription;

/**
 *  Description of the selected API(s).
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The selector is a comma-separated list of patterns. Each pattern is a
 *  qualified name of the element which may end in "*", indicating a wildcard.
 *  Wildcards are only allowed at the end and for a whole component of the
 *  qualified name, i.e. "foo.*" is ok, but not "foo.b*" or "foo.*.bar". To
 *  specify a default for all applicable elements, the whole pattern "*"
 *  is used.
 */
@property(nonatomic, copy, nullable) NSString *selector;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRServiceUsage_Empty : GTLRObject
@end


/**
 *  Provides error messages for the failing services.
 */
@interface GTLRServiceUsage_EnableFailure : GTLRObject

/** An error message describing why the service could not be enabled. */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/** The service id of a service that could not be enabled. */
@property(nonatomic, copy, nullable) NSString *serviceId;

@end


/**
 *  Request message for the `EnableService` method.
 */
@interface GTLRServiceUsage_EnableServiceRequest : GTLRObject
@end


/**
 *  Response message for the `EnableService` method.
 *  This response message is assigned to the `response` field of the returned
 *  Operation when that operation is done.
 */
@interface GTLRServiceUsage_EnableServiceResponse : GTLRObject

/** The new state of the service after enabling. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_GoogleApiServiceusageV1Service *service;

@end


/**
 *  `Endpoint` describes a network endpoint that serves a set of APIs.
 *  A service may expose any number of endpoints, and all endpoints share the
 *  same service configuration, such as quota configuration and monitoring
 *  configuration.
 *  Example service configuration:
 *  name: library-example.googleapis.com
 *  endpoints:
 *  # Below entry makes 'google.example.library.v1.Library'
 *  # API be served from endpoint address library-example.googleapis.com.
 *  # It also allows HTTP OPTIONS calls to be passed to the backend, for
 *  # it to decide whether the subsequent cross-origin request is
 *  # allowed to proceed.
 *  - name: library-example.googleapis.com
 *  allow_cors: true
 */
@interface GTLRServiceUsage_Endpoint : GTLRObject

/**
 *  DEPRECATED: This field is no longer supported. Instead of using aliases,
 *  please specify multiple google.api.Endpoint for each of the intended
 *  aliases.
 *  Additional names that this endpoint will be hosted on.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *aliases;

/**
 *  Allowing
 *  [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing), aka
 *  cross-domain traffic, would allow the backends served from this endpoint to
 *  receive and respond to HTTP OPTIONS requests. The response will be used by
 *  the browser to determine whether the subsequent cross-origin request is
 *  allowed to proceed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowCors;

/** The list of features enabled on this endpoint. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *features;

/** The canonical name of this endpoint. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The specification of an Internet routable address of API frontend that will
 *  handle requests to this [API
 *  Endpoint](https://cloud.google.com/apis/design/glossary).
 *  It should be either a valid IPv4 address or a fully-qualified domain name.
 *  For example, "8.8.8.8" or "myservice.appspot.com".
 */
@property(nonatomic, copy, nullable) NSString *target;

@end


/**
 *  Enum type definition.
 */
@interface GTLRServiceUsage_Enum : GTLRObject

/** Enum value definitions. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_EnumValue *> *enumvalue;

/** Enum type name. */
@property(nonatomic, copy, nullable) NSString *name;

/** Protocol buffer options. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Option *> *options;

/** The source context. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_SourceContext *sourceContext;

/**
 *  The source syntax.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceUsage_Enum_Syntax_SyntaxProto2 Syntax `proto2`.
 *        (Value: "SYNTAX_PROTO2")
 *    @arg @c kGTLRServiceUsage_Enum_Syntax_SyntaxProto3 Syntax `proto3`.
 *        (Value: "SYNTAX_PROTO3")
 */
@property(nonatomic, copy, nullable) NSString *syntax;

@end


/**
 *  Enum value definition.
 */
@interface GTLRServiceUsage_EnumValue : GTLRObject

/** Enum value name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Enum value number.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *number;

/** Protocol buffer options. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Option *> *options;

@end


/**
 *  Experimental service configuration. These configuration options can
 *  only be used by whitelisted users.
 */
@interface GTLRServiceUsage_Experimental : GTLRObject

/** Authorization configuration. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_AuthorizationConfig *authorization;

@end


/**
 *  A single field of a message type.
 */
@interface GTLRServiceUsage_Field : GTLRObject

/**
 *  The field cardinality.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceUsage_Field_Cardinality_CardinalityOptional For
 *        optional fields. (Value: "CARDINALITY_OPTIONAL")
 *    @arg @c kGTLRServiceUsage_Field_Cardinality_CardinalityRepeated For
 *        repeated fields. (Value: "CARDINALITY_REPEATED")
 *    @arg @c kGTLRServiceUsage_Field_Cardinality_CardinalityRequired For
 *        required fields. Proto2 syntax only. (Value: "CARDINALITY_REQUIRED")
 *    @arg @c kGTLRServiceUsage_Field_Cardinality_CardinalityUnknown For fields
 *        with unknown cardinality. (Value: "CARDINALITY_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *cardinality;

/**
 *  The string value of the default value of this field. Proto2 syntax only.
 */
@property(nonatomic, copy, nullable) NSString *defaultValue;

/** The field JSON name. */
@property(nonatomic, copy, nullable) NSString *jsonName;

/**
 *  The field type.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeBool Field type bool. (Value:
 *        "TYPE_BOOL")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeBytes Field type bytes. (Value:
 *        "TYPE_BYTES")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeDouble Field type double. (Value:
 *        "TYPE_DOUBLE")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeEnum Field type enum. (Value:
 *        "TYPE_ENUM")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeFixed32 Field type fixed32.
 *        (Value: "TYPE_FIXED32")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeFixed64 Field type fixed64.
 *        (Value: "TYPE_FIXED64")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeFloat Field type float. (Value:
 *        "TYPE_FLOAT")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeGroup Field type group. Proto2
 *        syntax only, and deprecated. (Value: "TYPE_GROUP")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeInt32 Field type int32. (Value:
 *        "TYPE_INT32")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeInt64 Field type int64. (Value:
 *        "TYPE_INT64")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeMessage Field type message.
 *        (Value: "TYPE_MESSAGE")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeSfixed32 Field type sfixed32.
 *        (Value: "TYPE_SFIXED32")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeSfixed64 Field type sfixed64.
 *        (Value: "TYPE_SFIXED64")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeSint32 Field type sint32. (Value:
 *        "TYPE_SINT32")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeSint64 Field type sint64. (Value:
 *        "TYPE_SINT64")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeString Field type string. (Value:
 *        "TYPE_STRING")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeUint32 Field type uint32. (Value:
 *        "TYPE_UINT32")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeUint64 Field type uint64. (Value:
 *        "TYPE_UINT64")
 *    @arg @c kGTLRServiceUsage_Field_Kind_TypeUnknown Field type unknown.
 *        (Value: "TYPE_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The field name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The field number.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *number;

/**
 *  The index of the field type in `Type.oneofs`, for message or enumeration
 *  types. The first type has index 1; zero means the type is not in the list.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *oneofIndex;

/** The protocol buffer options. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Option *> *options;

/**
 *  Whether to use alternative packed wire representation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *packed;

/**
 *  The field type URL, without the scheme, for message or enumeration
 *  types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
 */
@property(nonatomic, copy, nullable) NSString *typeUrl;

@end


/**
 *  `Service` is the root object of Google service configuration schema. It
 *  describes basic information about a service, such as the name and the
 *  title, and delegates other aspects to sub-sections. Each sub-section is
 *  either a proto message or a repeated proto message that configures a
 *  specific aspect, such as auth. See each proto message definition for
 *  details.
 *  Example:
 *  type: google.api.Service
 *  config_version: 3
 *  name: calendar.googleapis.com
 *  title: Google Calendar API
 *  apis:
 *  - name: google.calendar.v3.Calendar
 *  authentication:
 *  providers:
 *  - id: google_calendar_auth
 *  jwks_uri: https://www.googleapis.com/oauth2/v1/certs
 *  issuer: https://securetoken.google.com
 *  rules:
 *  - selector: "*"
 *  requirements:
 *  provider_id: google_calendar_auth
 */
@interface GTLRServiceUsage_GoogleApiService : GTLRObject

/**
 *  A list of API interfaces exported by this service. Only the `name` field
 *  of the google.protobuf.Api needs to be provided by the configuration
 *  author, as the remaining fields will be derived from the IDL during the
 *  normalization process. It is an error to specify an API interface here
 *  which cannot be resolved against the associated IDL files.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Api *> *apis;

/** Auth configuration. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Authentication *authentication;

/** API backend configuration. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Backend *backend;

/** Billing configuration. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Billing *billing;

/**
 *  The semantic version of the service configuration. The config version
 *  affects the interpretation of the service configuration. For example,
 *  certain features are enabled by default for certain config versions.
 *  The latest config version is `3`.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *configVersion;

/** Context configuration. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Context *context;

/** Configuration for the service control plane. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Control *control;

/** Custom error configuration. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_CustomError *customError;

/** Additional API documentation. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Documentation *documentation;

/**
 *  Configuration for network endpoints. If this is empty, then an endpoint
 *  with the same name as the service is automatically generated to service all
 *  defined APIs.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Endpoint *> *endpoints;

/**
 *  A list of all enum types included in this API service. Enums
 *  referenced directly or indirectly by the `apis` are automatically
 *  included. Enums which are not referenced but shall be included
 *  should be listed here by name. Example:
 *  enums:
 *  - name: google.someapi.v1.SomeEnum
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Enum *> *enums;

/** Experimental configuration. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Experimental *experimental;

/** HTTP configuration. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Http *http;

/**
 *  A unique ID for a specific instance of this message, typically assigned
 *  by the client for tracking purpose. If empty, the server may choose to
 *  generate one instead. Must be no longer than 60 characters.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Logging configuration. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Logging *logging;

/** Defines the logs used by this service. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_LogDescriptor *> *logs;

/** Defines the metrics used by this service. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_MetricDescriptor *> *metrics;

/**
 *  Defines the monitored resources used by this service. This is required
 *  by the Service.monitoring and Service.logging configurations.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_MonitoredResourceDescriptor *> *monitoredResources;

/** Monitoring configuration. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Monitoring *monitoring;

/**
 *  The service name, which is a DNS-like logical identifier for the
 *  service, such as `calendar.googleapis.com`. The service name
 *  typically goes through DNS verification to make sure the owner
 *  of the service also owns the DNS name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The Google project that owns this service. */
@property(nonatomic, copy, nullable) NSString *producerProjectId;

/** Quota configuration. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Quota *quota;

/**
 *  Output only. The source information for this configuration if available.
 */
@property(nonatomic, strong, nullable) GTLRServiceUsage_SourceInfo *sourceInfo;

/** System parameter configuration. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_SystemParameters *systemParameters;

/**
 *  A list of all proto message types included in this API service.
 *  It serves similar purpose as [google.api.Service.types], except that
 *  these types are not needed by user-defined APIs. Therefore, they will not
 *  show up in the generated discovery doc. This field should only be used
 *  to define system APIs in ESF.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Type *> *systemTypes;

/** The product title for this service. */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  A list of all proto message types included in this API service.
 *  Types referenced directly or indirectly by the `apis` are
 *  automatically included. Messages which are not referenced but
 *  shall be included, such as types used by the `google.protobuf.Any` type,
 *  should be listed here by name. Example:
 *  types:
 *  - name: google.protobuf.Int32
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Type *> *types;

/** Configuration controlling usage of this service. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Usage *usage;

@end


/**
 *  The operation metadata returned for the batchend services operation.
 */
@interface GTLRServiceUsage_GoogleApiServiceusageV1OperationMetadata : GTLRObject

/**
 *  The full name of the resources that this operation is directly
 *  associated with.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNames;

@end


/**
 *  A service that is available for use by the consumer.
 */
@interface GTLRServiceUsage_GoogleApiServiceusageV1Service : GTLRObject

/**
 *  The service configuration of the available service.
 *  Some fields may be filtered out of the configuration in responses to
 *  the `ListServices` method. These fields are present only in responses to
 *  the `GetService` method.
 */
@property(nonatomic, strong, nullable) GTLRServiceUsage_GoogleApiServiceusageV1ServiceConfig *config;

/**
 *  The resource name of the consumer and service.
 *  A valid name would be:
 *  - projects/123/services/serviceusage.googleapis.com
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The resource name of the consumer.
 *  A valid name would be:
 *  - projects/123
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Whether or not the service has been enabled for use by the consumer.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceUsage_GoogleApiServiceusageV1Service_State_Disabled
 *        The service cannot be used by this consumer. It has either been
 *        explicitly
 *        disabled, or has never been enabled. (Value: "DISABLED")
 *    @arg @c kGTLRServiceUsage_GoogleApiServiceusageV1Service_State_Enabled The
 *        service has been explicitly enabled for use by this consumer. (Value:
 *        "ENABLED")
 *    @arg @c kGTLRServiceUsage_GoogleApiServiceusageV1Service_State_StateUnspecified
 *        The default value, which indicates that the enabled state of the
 *        service
 *        is unspecified or not meaningful. Currently, all consumers other than
 *        projects (such as folders and organizations) are always in this state.
 *        (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  The configuration of the service.
 */
@interface GTLRServiceUsage_GoogleApiServiceusageV1ServiceConfig : GTLRObject

/**
 *  A list of API interfaces exported by this service. Contains only the names,
 *  versions, and method names of the interfaces.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Api *> *apis;

/** Auth configuration. Contains only the OAuth rules. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Authentication *authentication;

/**
 *  Additional API documentation. Contains only the summary and the
 *  documentation URL.
 */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Documentation *documentation;

/**
 *  Configuration for network endpoints. Contains only the names and aliases
 *  of the endpoints.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Endpoint *> *endpoints;

/**
 *  The DNS address at which this service is available.
 *  An example DNS address would be:
 *  `calendar.googleapis.com`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Quota configuration. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Quota *quota;

/** The product title for this service. */
@property(nonatomic, copy, nullable) NSString *title;

/** Configuration controlling usage of this service. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Usage *usage;

@end


/**
 *  Defines the HTTP configuration for an API service. It contains a list of
 *  HttpRule, each specifying the mapping of an RPC method
 *  to one or more HTTP REST API methods.
 */
@interface GTLRServiceUsage_Http : GTLRObject

/**
 *  When set to true, URL path parmeters will be fully URI-decoded except in
 *  cases of single segment matches in reserved expansion, where "%2F" will be
 *  left encoded.
 *  The default behavior is to not decode RFC 6570 reserved characters in multi
 *  segment matches.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fullyDecodeReservedExpansion;

/**
 *  A list of HTTP configuration rules that apply to individual API methods.
 *  **NOTE:** All service configuration rules follow "last one wins" order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_HttpRule *> *rules;

@end


/**
 *  # gRPC Transcoding
 *  gRPC Transcoding is a feature for mapping between a gRPC method and one or
 *  more HTTP REST endpoints. It allows developers to build a single API service
 *  that supports both gRPC APIs and REST APIs. Many systems, including [Google
 *  APIs](https://github.com/googleapis/googleapis),
 *  [Cloud Endpoints](https://cloud.google.com/endpoints), [gRPC
 *  Gateway](https://github.com/grpc-ecosystem/grpc-gateway),
 *  and [Envoy](https://github.com/envoyproxy/envoy) proxy support this feature
 *  and use it for large scale production services.
 *  `HttpRule` defines the schema of the gRPC/REST mapping. The mapping
 *  specifies
 *  how different portions of the gRPC request message are mapped to the URL
 *  path, URL query parameters, and HTTP request body. It also controls how the
 *  gRPC response message is mapped to the HTTP response body. `HttpRule` is
 *  typically specified as an `google.api.http` annotation on the gRPC method.
 *  Each mapping specifies a URL path template and an HTTP method. The path
 *  template may refer to one or more fields in the gRPC request message, as
 *  long
 *  as each field is a non-repeated field with a primitive (non-message) type.
 *  The path template controls how fields of the request message are mapped to
 *  the URL path.
 *  Example:
 *  service Messaging {
 *  rpc GetMessage(GetMessageRequest) returns (Message) {
 *  option (google.api.http) = {
 *  get: "/v1/{name=messages/ *}"
 *  };
 *  }
 *  }
 *  message GetMessageRequest {
 *  string name = 1; // Mapped to URL path.
 *  }
 *  message Message {
 *  string text = 1; // The resource content.
 *  }
 *  This enables an HTTP REST to gRPC mapping as below:
 *  HTTP | gRPC
 *  -----|-----
 *  `GET /v1/messages/123456` | `GetMessage(name: "messages/123456")`
 *  Any fields in the request message which are not bound by the path template
 *  automatically become HTTP query parameters if there is no HTTP request body.
 *  For example:
 *  service Messaging {
 *  rpc GetMessage(GetMessageRequest) returns (Message) {
 *  option (google.api.http) = {
 *  get:"/v1/messages/{message_id}"
 *  };
 *  }
 *  }
 *  message GetMessageRequest {
 *  message SubMessage {
 *  string subfield = 1;
 *  }
 *  string message_id = 1; // Mapped to URL path.
 *  int64 revision = 2; // Mapped to URL query parameter `revision`.
 *  SubMessage sub = 3; // Mapped to URL query parameter `sub.subfield`.
 *  }
 *  This enables a HTTP JSON to RPC mapping as below:
 *  HTTP | gRPC
 *  -----|-----
 *  `GET /v1/messages/123456?revision=2&sub.subfield=foo` |
 *  `GetMessage(message_id: "123456" revision: 2 sub: SubMessage(subfield:
 *  "foo"))`
 *  Note that fields which are mapped to URL query parameters must have a
 *  primitive type or a repeated primitive type or a non-repeated message type.
 *  In the case of a repeated type, the parameter can be repeated in the URL
 *  as `...?param=A&param=B`. In the case of a message type, each field of the
 *  message is mapped to a separate parameter, such as
 *  `...?foo.a=A&foo.b=B&foo.c=C`.
 *  For HTTP methods that allow a request body, the `body` field
 *  specifies the mapping. Consider a REST update method on the
 *  message resource collection:
 *  service Messaging {
 *  rpc UpdateMessage(UpdateMessageRequest) returns (Message) {
 *  option (google.api.http) = {
 *  patch: "/v1/messages/{message_id}"
 *  body: "message"
 *  };
 *  }
 *  }
 *  message UpdateMessageRequest {
 *  string message_id = 1; // mapped to the URL
 *  Message message = 2; // mapped to the body
 *  }
 *  The following HTTP JSON to RPC mapping is enabled, where the
 *  representation of the JSON in the request body is determined by
 *  protos JSON encoding:
 *  HTTP | gRPC
 *  -----|-----
 *  `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id:
 *  "123456" message { text: "Hi!" })`
 *  The special name `*` can be used in the body mapping to define that
 *  every field not bound by the path template should be mapped to the
 *  request body. This enables the following alternative definition of
 *  the update method:
 *  service Messaging {
 *  rpc UpdateMessage(Message) returns (Message) {
 *  option (google.api.http) = {
 *  patch: "/v1/messages/{message_id}"
 *  body: "*"
 *  };
 *  }
 *  }
 *  message Message {
 *  string message_id = 1;
 *  string text = 2;
 *  }
 *  The following HTTP JSON to RPC mapping is enabled:
 *  HTTP | gRPC
 *  -----|-----
 *  `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id:
 *  "123456" text: "Hi!")`
 *  Note that when using `*` in the body mapping, it is not possible to
 *  have HTTP parameters, as all fields not bound by the path end in
 *  the body. This makes this option more rarely used in practice when
 *  defining REST APIs. The common usage of `*` is in custom methods
 *  which don't use the URL at all for transferring data.
 *  It is possible to define multiple HTTP methods for one RPC by using
 *  the `additional_bindings` option. Example:
 *  service Messaging {
 *  rpc GetMessage(GetMessageRequest) returns (Message) {
 *  option (google.api.http) = {
 *  get: "/v1/messages/{message_id}"
 *  additional_bindings {
 *  get: "/v1/users/{user_id}/messages/{message_id}"
 *  }
 *  };
 *  }
 *  }
 *  message GetMessageRequest {
 *  string message_id = 1;
 *  string user_id = 2;
 *  }
 *  This enables the following two alternative HTTP JSON to RPC mappings:
 *  HTTP | gRPC
 *  -----|-----
 *  `GET /v1/messages/123456` | `GetMessage(message_id: "123456")`
 *  `GET /v1/users/me/messages/123456` | `GetMessage(user_id: "me" message_id:
 *  "123456")`
 *  ## Rules for HTTP mapping
 *  1. Leaf request fields (recursive expansion nested messages in the request
 *  message) are classified into three categories:
 *  - Fields referred by the path template. They are passed via the URL path.
 *  - Fields referred by the HttpRule.body. They are passed via the HTTP
 *  request body.
 *  - All other fields are passed via the URL query parameters, and the
 *  parameter name is the field path in the request message. A repeated
 *  field can be represented as multiple query parameters under the same
 *  name.
 *  2. If HttpRule.body is "*", there is no URL query parameter, all fields
 *  are passed via URL path and HTTP request body.
 *  3. If HttpRule.body is omitted, there is no HTTP request body, all
 *  fields are passed via URL path and URL query parameters.
 *  ### Path template syntax
 *  Template = "/" Segments [ Verb ] ;
 *  Segments = Segment { "/" Segment } ;
 *  Segment = "*" | "**" | LITERAL | Variable ;
 *  Variable = "{" FieldPath [ "=" Segments ] "}" ;
 *  FieldPath = IDENT { "." IDENT } ;
 *  Verb = ":" LITERAL ;
 *  The syntax `*` matches a single URL path segment. The syntax `**` matches
 *  zero or more URL path segments, which must be the last part of the URL path
 *  except the `Verb`.
 *  The syntax `Variable` matches part of the URL path as specified by its
 *  template. A variable template must not contain other variables. If a
 *  variable
 *  matches a single path segment, its template may be omitted, e.g. `{var}`
 *  is equivalent to `{var=*}`.
 *  The syntax `LITERAL` matches literal text in the URL path. If the `LITERAL`
 *  contains any reserved character, such characters should be percent-encoded
 *  before the matching.
 *  If a variable contains exactly one path segment, such as `"{var}"` or
 *  `"{var=*}"`, when such a variable is expanded into a URL path on the client
 *  side, all characters except `[-_.~0-9a-zA-Z]` are percent-encoded. The
 *  server side does the reverse decoding. Such variables show up in the
 *  [Discovery
 *  Document](https://developers.google.com/discovery/v1/reference/apis)
 *  as `{var}`.
 *  If a variable contains multiple path segments, such as `"{var=foo/ *}"`
 *  or `"{var=**}"`, when such a variable is expanded into a URL path on the
 *  client side, all characters except `[-_.~/0-9a-zA-Z]` are percent-encoded.
 *  The server side does the reverse decoding, except "%2F" and "%2f" are left
 *  unchanged. Such variables show up in the
 *  [Discovery
 *  Document](https://developers.google.com/discovery/v1/reference/apis)
 *  as `{+var}`.
 *  ## Using gRPC API Service Configuration
 *  gRPC API Service Configuration (service config) is a configuration language
 *  for configuring a gRPC service to become a user-facing product. The
 *  service config is simply the YAML representation of the `google.api.Service`
 *  proto message.
 *  As an alternative to annotating your proto file, you can configure gRPC
 *  transcoding in your service config YAML files. You do this by specifying a
 *  `HttpRule` that maps the gRPC method to a REST endpoint, achieving the same
 *  effect as the proto annotation. This can be particularly useful if you
 *  have a proto that is reused in multiple services. Note that any transcoding
 *  specified in the service config will override any matching transcoding
 *  configuration in the proto.
 *  Example:
 *  http:
 *  rules:
 *  # Selects a gRPC method and applies HttpRule to it.
 *  - selector: example.v1.Messaging.GetMessage
 *  get: /v1/messages/{message_id}/{sub.subfield}
 *  ## Special notes
 *  When gRPC Transcoding is used to map a gRPC to JSON REST endpoints, the
 *  proto to JSON conversion must follow the [proto3
 *  specification](https://developers.google.com/protocol-buffers/docs/proto3#json).
 *  While the single segment variable follows the semantics of
 *  [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2 Simple String
 *  Expansion, the multi segment variable **does not** follow RFC 6570 Section
 *  3.2.3 Reserved Expansion. The reason is that the Reserved Expansion
 *  does not expand special characters like `?` and `#`, which would lead
 *  to invalid URLs. As the result, gRPC Transcoding uses a custom encoding
 *  for multi segment variables.
 *  The path variables **must not** refer to any repeated or mapped field,
 *  because client libraries are not capable of handling such variable
 *  expansion.
 *  The path variables **must not** capture the leading "/" character. The
 *  reason
 *  is that the most common use case "{var}" does not capture the leading "/"
 *  character. For consistency, all path variables must share the same behavior.
 *  Repeated message fields must not be mapped to URL query parameters, because
 *  no client library can support such complicated mapping.
 *  If an API needs to use a JSON array for request or response body, it can map
 *  the request or response body to a repeated field. However, some gRPC
 *  Transcoding implementations may not support this feature.
 */
@interface GTLRServiceUsage_HttpRule : GTLRObject

/**
 *  Additional HTTP bindings for the selector. Nested bindings must
 *  not contain an `additional_bindings` field themselves (that is,
 *  the nesting may only be one level deep).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_HttpRule *> *additionalBindings;

/**
 *  The name of the request field whose value is mapped to the HTTP request
 *  body, or `*` for mapping all request fields not captured by the path
 *  pattern to the HTTP body, or omitted for not having any HTTP request body.
 *  NOTE: the referred field must be present at the top-level of the request
 *  message type.
 */
@property(nonatomic, copy, nullable) NSString *body;

/**
 *  The custom pattern is used for specifying an HTTP method that is not
 *  included in the `pattern` field, such as HEAD, or "*" to leave the
 *  HTTP method unspecified for this rule. The wild-card rule is useful
 *  for services that provide content to Web (HTML) clients.
 */
@property(nonatomic, strong, nullable) GTLRServiceUsage_CustomHttpPattern *custom;

/**
 *  Maps to HTTP DELETE. Used for deleting a resource.
 *
 *  Remapped to 'deleteProperty' to avoid language reserved word 'delete'.
 */
@property(nonatomic, copy, nullable) NSString *deleteProperty;

/**
 *  Maps to HTTP GET. Used for listing and getting information about
 *  resources.
 */
@property(nonatomic, copy, nullable) NSString *get;

/** Maps to HTTP PATCH. Used for updating a resource. */
@property(nonatomic, copy, nullable) NSString *patch;

/**
 *  Maps to HTTP POST. Used for creating a resource or performing an action.
 */
@property(nonatomic, copy, nullable) NSString *post;

/** Maps to HTTP PUT. Used for replacing a resource. */
@property(nonatomic, copy, nullable) NSString *put;

/**
 *  Optional. The name of the response field whose value is mapped to the HTTP
 *  response body. When omitted, the entire response message will be used
 *  as the HTTP response body.
 *  NOTE: The referred field must be present at the top-level of the response
 *  message type.
 */
@property(nonatomic, copy, nullable) NSString *responseBody;

/**
 *  Selects a method to which this rule applies.
 *  Refer to selector for syntax details.
 */
@property(nonatomic, copy, nullable) NSString *selector;

@end


/**
 *  A description of a label.
 */
@interface GTLRServiceUsage_LabelDescriptor : GTLRObject

/**
 *  A human-readable description for the label.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The label key. */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  The type of data that can be assigned to the label.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceUsage_LabelDescriptor_ValueType_Bool Boolean; true or
 *        false. (Value: "BOOL")
 *    @arg @c kGTLRServiceUsage_LabelDescriptor_ValueType_Int64 A 64-bit signed
 *        integer. (Value: "INT64")
 *    @arg @c kGTLRServiceUsage_LabelDescriptor_ValueType_String A
 *        variable-length string. This is the default. (Value: "STRING")
 */
@property(nonatomic, copy, nullable) NSString *valueType;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRServiceUsage_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Operation *> *operations;

@end


/**
 *  Response message for the `ListServices` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "services" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRServiceUsage_ListServicesResponse : GTLRCollectionObject

/**
 *  Token that can be passed to `ListServices` to resume a paginated
 *  query.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The available services for the requested project.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_GoogleApiServiceusageV1Service *> *services;

@end


/**
 *  A description of a log type. Example in YAML format:
 *  - name: library.googleapis.com/activity_history
 *  description: The history of borrowing and returning library items.
 *  display_name: Activity
 *  labels:
 *  - key: /customer_id
 *  description: Identifier of a library customer
 */
@interface GTLRServiceUsage_LogDescriptor : GTLRObject

/**
 *  A human-readable description of this log. This information appears in
 *  the documentation and can contain details.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The human-readable name for this log. This information appears on
 *  the user interface and should be concise.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The set of labels that are available to describe a specific log entry.
 *  Runtime requests that contain labels not specified here are
 *  considered invalid.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_LabelDescriptor *> *labels;

/**
 *  The name of the log. It must be less than 512 characters long and can
 *  include the following characters: upper- and lower-case alphanumeric
 *  characters [A-Za-z0-9], and punctuation characters including
 *  slash, underscore, hyphen, period [/_-.].
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Logging configuration of the service.
 *  The following example shows how to configure logs to be sent to the
 *  producer and consumer projects. In the example, the `activity_history`
 *  log is sent to both the producer and consumer projects, whereas the
 *  `purchase_history` log is only sent to the producer project.
 *  monitored_resources:
 *  - type: library.googleapis.com/branch
 *  labels:
 *  - key: /city
 *  description: The city where the library branch is located in.
 *  - key: /name
 *  description: The name of the branch.
 *  logs:
 *  - name: activity_history
 *  labels:
 *  - key: /customer_id
 *  - name: purchase_history
 *  logging:
 *  producer_destinations:
 *  - monitored_resource: library.googleapis.com/branch
 *  logs:
 *  - activity_history
 *  - purchase_history
 *  consumer_destinations:
 *  - monitored_resource: library.googleapis.com/branch
 *  logs:
 *  - activity_history
 */
@interface GTLRServiceUsage_Logging : GTLRObject

/**
 *  Logging configurations for sending logs to the consumer project.
 *  There can be multiple consumer destinations, each one must have a
 *  different monitored resource type. A log can be used in at most
 *  one consumer destination.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_LoggingDestination *> *consumerDestinations;

/**
 *  Logging configurations for sending logs to the producer project.
 *  There can be multiple producer destinations, each one must have a
 *  different monitored resource type. A log can be used in at most
 *  one producer destination.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_LoggingDestination *> *producerDestinations;

@end


/**
 *  Configuration of a specific logging destination (the producer project
 *  or the consumer project).
 */
@interface GTLRServiceUsage_LoggingDestination : GTLRObject

/**
 *  Names of the logs to be sent to this destination. Each name must
 *  be defined in the Service.logs section. If the log name is
 *  not a domain scoped name, it will be automatically prefixed with
 *  the service name followed by "/".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *logs;

/**
 *  The monitored resource type. The type must be defined in the
 *  Service.monitored_resources section.
 */
@property(nonatomic, copy, nullable) NSString *monitoredResource;

@end


/**
 *  Method represents a method of an API interface.
 */
@interface GTLRServiceUsage_Method : GTLRObject

/** The simple name of this method. */
@property(nonatomic, copy, nullable) NSString *name;

/** Any metadata attached to the method. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Option *> *options;

/**
 *  If true, the request is streamed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestStreaming;

/** A URL of the input message type. */
@property(nonatomic, copy, nullable) NSString *requestTypeUrl;

/**
 *  If true, the response is streamed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *responseStreaming;

/** The URL of the output message type. */
@property(nonatomic, copy, nullable) NSString *responseTypeUrl;

/**
 *  The source syntax of this method.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceUsage_Method_Syntax_SyntaxProto2 Syntax `proto2`.
 *        (Value: "SYNTAX_PROTO2")
 *    @arg @c kGTLRServiceUsage_Method_Syntax_SyntaxProto3 Syntax `proto3`.
 *        (Value: "SYNTAX_PROTO3")
 */
@property(nonatomic, copy, nullable) NSString *syntax;

@end


/**
 *  Defines a metric type and its schema. Once a metric descriptor is created,
 *  deleting or altering it stops data collection and makes the metric type's
 *  existing data unusable.
 */
@interface GTLRServiceUsage_MetricDescriptor : GTLRObject

/**
 *  A detailed description of the metric, which can be used in documentation.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  A concise name for the metric, which can be displayed in user interfaces.
 *  Use sentence case without an ending period, for example "Request count".
 *  This field is optional but it is recommended to be set for any metrics
 *  associated with user-visible concepts, such as Quota.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The set of labels that can be used to describe a specific
 *  instance of this metric type. For example, the
 *  `appengine.googleapis.com/http/server/response_latencies` metric
 *  type has a label for the HTTP response code, `response_code`, so
 *  you can look at latencies for successful responses or just
 *  for responses that failed.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_LabelDescriptor *> *labels;

/** Optional. Metadata which can be used to guide usage of the metric. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_MetricDescriptorMetadata *metadata;

/**
 *  Whether the metric records instantaneous values, changes to a value, etc.
 *  Some combinations of `metric_kind` and `value_type` might not be supported.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceUsage_MetricDescriptor_MetricKind_Cumulative A value
 *        accumulated over a time interval. Cumulative
 *        measurements in a time series should have the same start time
 *        and increasing end times, until an event resets the cumulative
 *        value to zero and sets a new start time for the following
 *        points. (Value: "CUMULATIVE")
 *    @arg @c kGTLRServiceUsage_MetricDescriptor_MetricKind_Delta The change in
 *        a value during a time interval. (Value: "DELTA")
 *    @arg @c kGTLRServiceUsage_MetricDescriptor_MetricKind_Gauge An
 *        instantaneous measurement of a value. (Value: "GAUGE")
 *    @arg @c kGTLRServiceUsage_MetricDescriptor_MetricKind_MetricKindUnspecified
 *        Do not use this default value. (Value: "METRIC_KIND_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *metricKind;

/** The resource name of the metric descriptor. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The metric type, including its DNS name prefix. The type is not
 *  URL-encoded. All user-defined metric types have the DNS name
 *  `custom.googleapis.com` or `external.googleapis.com`. Metric types should
 *  use a natural hierarchical grouping. For example:
 *  "custom.googleapis.com/invoice/paid/amount"
 *  "external.googleapis.com/prometheus/up"
 *  "appengine.googleapis.com/http/server/response_latencies"
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The unit in which the metric value is reported. It is only applicable
 *  if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
 *  supported units are a subset of [The Unified Code for Units of
 *  Measure](http://unitsofmeasure.org/ucum.html) standard:
 *  **Basic units (UNIT)**
 *  * `bit` bit
 *  * `By` byte
 *  * `s` second
 *  * `min` minute
 *  * `h` hour
 *  * `d` day
 *  **Prefixes (PREFIX)**
 *  * `k` kilo (10**3)
 *  * `M` mega (10**6)
 *  * `G` giga (10**9)
 *  * `T` tera (10**12)
 *  * `P` peta (10**15)
 *  * `E` exa (10**18)
 *  * `Z` zetta (10**21)
 *  * `Y` yotta (10**24)
 *  * `m` milli (10**-3)
 *  * `u` micro (10**-6)
 *  * `n` nano (10**-9)
 *  * `p` pico (10**-12)
 *  * `f` femto (10**-15)
 *  * `a` atto (10**-18)
 *  * `z` zepto (10**-21)
 *  * `y` yocto (10**-24)
 *  * `Ki` kibi (2**10)
 *  * `Mi` mebi (2**20)
 *  * `Gi` gibi (2**30)
 *  * `Ti` tebi (2**40)
 *  **Grammar**
 *  The grammar also includes these connectors:
 *  * `/` division (as an infix operator, e.g. `1/s`).
 *  * `.` multiplication (as an infix operator, e.g. `GBy.d`)
 *  The grammar for a unit is as follows:
 *  Expression = Component { "." Component } { "/" Component } ;
 *  Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ]
 *  | Annotation
 *  | "1"
 *  ;
 *  Annotation = "{" NAME "}" ;
 *  Notes:
 *  * `Annotation` is just a comment if it follows a `UNIT` and is
 *  equivalent to `1` if it is used alone. For examples,
 *  `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
 *  * `NAME` is a sequence of non-blank printable ASCII characters not
 *  containing '{' or '}'.
 *  * `1` represents dimensionless value 1, such as in `1/s`.
 *  * `%` represents dimensionless value 1/100, and annotates values giving
 *  a percentage.
 */
@property(nonatomic, copy, nullable) NSString *unit;

/**
 *  Whether the measurement is an integer, a floating-point number, etc.
 *  Some combinations of `metric_kind` and `value_type` might not be supported.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceUsage_MetricDescriptor_ValueType_Bool The value is a
 *        boolean.
 *        This value type can be used only if the metric kind is `GAUGE`.
 *        (Value: "BOOL")
 *    @arg @c kGTLRServiceUsage_MetricDescriptor_ValueType_Distribution The
 *        value is a `Distribution`. (Value: "DISTRIBUTION")
 *    @arg @c kGTLRServiceUsage_MetricDescriptor_ValueType_Double The value is a
 *        double precision floating point number. (Value: "DOUBLE")
 *    @arg @c kGTLRServiceUsage_MetricDescriptor_ValueType_Int64 The value is a
 *        signed 64-bit integer. (Value: "INT64")
 *    @arg @c kGTLRServiceUsage_MetricDescriptor_ValueType_Money The value is
 *        money. (Value: "MONEY")
 *    @arg @c kGTLRServiceUsage_MetricDescriptor_ValueType_String The value is a
 *        text string.
 *        This value type can be used only if the metric kind is `GAUGE`.
 *        (Value: "STRING")
 *    @arg @c kGTLRServiceUsage_MetricDescriptor_ValueType_ValueTypeUnspecified
 *        Do not use this default value. (Value: "VALUE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *valueType;

@end


/**
 *  Additional annotations that can be used to guide the usage of a metric.
 */
@interface GTLRServiceUsage_MetricDescriptorMetadata : GTLRObject

/**
 *  The delay of data points caused by ingestion. Data points older than this
 *  age are guaranteed to be ingested and available to be read, excluding
 *  data loss due to errors.
 */
@property(nonatomic, strong, nullable) GTLRDuration *ingestDelay;

/**
 *  The launch stage of the metric definition.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceUsage_MetricDescriptorMetadata_LaunchStage_Alpha Alpha
 *        is a limited availability test for releases before they are cleared
 *        for widespread use. By Alpha, all significant design issues are
 *        resolved
 *        and we are in the process of verifying functionality. Alpha customers
 *        need to apply for access, agree to applicable terms, and have their
 *        projects whitelisted. Alpha releases don’t have to be feature
 *        complete,
 *        no SLAs are provided, and there are no technical support obligations,
 *        but
 *        they will be far enough along that customers can actually use them in
 *        test environments or for limited-use tests -- just like they would in
 *        normal production cases. (Value: "ALPHA")
 *    @arg @c kGTLRServiceUsage_MetricDescriptorMetadata_LaunchStage_Beta Beta
 *        is the point at which we are ready to open a release for any
 *        customer to use. There are no SLA or technical support obligations in
 *        a
 *        Beta release. Products will be complete from a feature perspective,
 *        but
 *        may have some open outstanding issues. Beta releases are suitable for
 *        limited production use cases. (Value: "BETA")
 *    @arg @c kGTLRServiceUsage_MetricDescriptorMetadata_LaunchStage_Deprecated
 *        Deprecated features are scheduled to be shut down and removed. For
 *        more
 *        information, see the “Deprecation Policy” section of our [Terms of
 *        Service](https://cloud.google.com/terms/)
 *        and the [Google Cloud Platform Subject to the Deprecation
 *        Policy](https://cloud.google.com/terms/deprecation) documentation.
 *        (Value: "DEPRECATED")
 *    @arg @c kGTLRServiceUsage_MetricDescriptorMetadata_LaunchStage_EarlyAccess
 *        Early Access features are limited to a closed group of testers. To use
 *        these features, you must sign up in advance and sign a Trusted Tester
 *        agreement (which includes confidentiality provisions). These features
 *        may
 *        be unstable, changed in backward-incompatible ways, and are not
 *        guaranteed to be released. (Value: "EARLY_ACCESS")
 *    @arg @c kGTLRServiceUsage_MetricDescriptorMetadata_LaunchStage_Ga GA
 *        features are open to all developers and are considered stable and
 *        fully qualified for production use. (Value: "GA")
 *    @arg @c kGTLRServiceUsage_MetricDescriptorMetadata_LaunchStage_LaunchStageUnspecified
 *        Do not use this default value. (Value: "LAUNCH_STAGE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *launchStage;

/**
 *  The sampling period of metric data points. For metrics which are written
 *  periodically, consecutive data points are stored at this time interval,
 *  excluding data loss due to errors. Metrics with a higher granularity have
 *  a smaller sampling period.
 */
@property(nonatomic, strong, nullable) GTLRDuration *samplePeriod;

@end


/**
 *  Bind API methods to metrics. Binding a method to a metric causes that
 *  metric's configured quota behaviors to apply to the method call.
 */
@interface GTLRServiceUsage_MetricRule : GTLRObject

/**
 *  Metrics to update when the selected methods are called, and the associated
 *  cost applied to each metric.
 *  The key of the map is the metric name, and the values are the amount
 *  increased for the metric against which the quota limits are defined.
 *  The value must not be negative.
 */
@property(nonatomic, strong, nullable) GTLRServiceUsage_MetricRule_MetricCosts *metricCosts;

/**
 *  Selects the methods to which this rule applies.
 *  Refer to selector for syntax details.
 */
@property(nonatomic, copy, nullable) NSString *selector;

@end


/**
 *  Metrics to update when the selected methods are called, and the associated
 *  cost applied to each metric.
 *  The key of the map is the metric name, and the values are the amount
 *  increased for the metric against which the quota limits are defined.
 *  The value must not be negative.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of longLongValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceUsage_MetricRule_MetricCosts : GTLRObject
@end


/**
 *  Declares an API Interface to be included in this interface. The including
 *  interface must redeclare all the methods from the included interface, but
 *  documentation and options are inherited as follows:
 *  - If after comment and whitespace stripping, the documentation
 *  string of the redeclared method is empty, it will be inherited
 *  from the original method.
 *  - Each annotation belonging to the service config (http,
 *  visibility) which is not set in the redeclared method will be
 *  inherited.
 *  - If an http annotation is inherited, the path pattern will be
 *  modified as follows. Any version prefix will be replaced by the
 *  version of the including interface plus the root path if
 *  specified.
 *  Example of a simple mixin:
 *  package google.acl.v1;
 *  service AccessControl {
 *  // Get the underlying ACL object.
 *  rpc GetAcl(GetAclRequest) returns (Acl) {
 *  option (google.api.http).get = "/v1/{resource=**}:getAcl";
 *  }
 *  }
 *  package google.storage.v2;
 *  service Storage {
 *  // rpc GetAcl(GetAclRequest) returns (Acl);
 *  // Get a data record.
 *  rpc GetData(GetDataRequest) returns (Data) {
 *  option (google.api.http).get = "/v2/{resource=**}";
 *  }
 *  }
 *  Example of a mixin configuration:
 *  apis:
 *  - name: google.storage.v2.Storage
 *  mixins:
 *  - name: google.acl.v1.AccessControl
 *  The mixin construct implies that all methods in `AccessControl` are
 *  also declared with same name and request/response types in
 *  `Storage`. A documentation generator or annotation processor will
 *  see the effective `Storage.GetAcl` method after inherting
 *  documentation and annotations as follows:
 *  service Storage {
 *  // Get the underlying ACL object.
 *  rpc GetAcl(GetAclRequest) returns (Acl) {
 *  option (google.api.http).get = "/v2/{resource=**}:getAcl";
 *  }
 *  ...
 *  }
 *  Note how the version in the path pattern changed from `v1` to `v2`.
 *  If the `root` field in the mixin is specified, it should be a
 *  relative path under which inherited HTTP paths are placed. Example:
 *  apis:
 *  - name: google.storage.v2.Storage
 *  mixins:
 *  - name: google.acl.v1.AccessControl
 *  root: acls
 *  This implies the following inherited HTTP annotation:
 *  service Storage {
 *  // Get the underlying ACL object.
 *  rpc GetAcl(GetAclRequest) returns (Acl) {
 *  option (google.api.http).get = "/v2/acls/{resource=**}:getAcl";
 *  }
 *  ...
 *  }
 */
@interface GTLRServiceUsage_Mixin : GTLRObject

/** The fully qualified name of the interface which is included. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If non-empty specifies a path under which inherited HTTP paths
 *  are rooted.
 */
@property(nonatomic, copy, nullable) NSString *root;

@end


/**
 *  An object that describes the schema of a MonitoredResource object using a
 *  type name and a set of labels. For example, the monitored resource
 *  descriptor for Google Compute Engine VM instances has a type of
 *  `"gce_instance"` and specifies the use of the labels `"instance_id"` and
 *  `"zone"` to identify particular VM instances.
 *  Different APIs can support different monitored resource types. APIs
 *  generally
 *  provide a `list` method that returns the monitored resource descriptors used
 *  by the API.
 */
@interface GTLRServiceUsage_MonitoredResourceDescriptor : GTLRObject

/**
 *  Optional. A detailed description of the monitored resource type that might
 *  be used in documentation.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. A concise name for the monitored resource type that might be
 *  displayed in user interfaces. It should be a Title Cased Noun Phrase,
 *  without any article or other determiners. For example,
 *  `"Google Cloud SQL Database"`.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Required. A set of labels used to describe instances of this monitored
 *  resource type. For example, an individual Google Cloud SQL database is
 *  identified by values for the labels `"database_id"` and `"zone"`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_LabelDescriptor *> *labels;

/**
 *  Optional. The resource name of the monitored resource descriptor:
 *  `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where
 *  {type} is the value of the `type` field in this object and
 *  {project_id} is a project ID that provides API-specific context for
 *  accessing the type. APIs that do not use project information can use the
 *  resource name format `"monitoredResourceDescriptors/{type}"`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The monitored resource type. For example, the type
 *  `"cloudsql_database"` represents databases in Google Cloud SQL.
 *  The maximum length of this value is 256 characters.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Monitoring configuration of the service.
 *  The example below shows how to configure monitored resources and metrics
 *  for monitoring. In the example, a monitored resource and two metrics are
 *  defined. The `library.googleapis.com/book/returned_count` metric is sent
 *  to both producer and consumer projects, whereas the
 *  `library.googleapis.com/book/overdue_count` metric is only sent to the
 *  consumer project.
 *  monitored_resources:
 *  - type: library.googleapis.com/branch
 *  labels:
 *  - key: /city
 *  description: The city where the library branch is located in.
 *  - key: /name
 *  description: The name of the branch.
 *  metrics:
 *  - name: library.googleapis.com/book/returned_count
 *  metric_kind: DELTA
 *  value_type: INT64
 *  labels:
 *  - key: /customer_id
 *  - name: library.googleapis.com/book/overdue_count
 *  metric_kind: GAUGE
 *  value_type: INT64
 *  labels:
 *  - key: /customer_id
 *  monitoring:
 *  producer_destinations:
 *  - monitored_resource: library.googleapis.com/branch
 *  metrics:
 *  - library.googleapis.com/book/returned_count
 *  consumer_destinations:
 *  - monitored_resource: library.googleapis.com/branch
 *  metrics:
 *  - library.googleapis.com/book/returned_count
 *  - library.googleapis.com/book/overdue_count
 */
@interface GTLRServiceUsage_Monitoring : GTLRObject

/**
 *  Monitoring configurations for sending metrics to the consumer project.
 *  There can be multiple consumer destinations. A monitored resouce type may
 *  appear in multiple monitoring destinations if different aggregations are
 *  needed for different sets of metrics associated with that monitored
 *  resource type. A monitored resource and metric pair may only be used once
 *  in the Monitoring configuration.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_MonitoringDestination *> *consumerDestinations;

/**
 *  Monitoring configurations for sending metrics to the producer project.
 *  There can be multiple producer destinations. A monitored resouce type may
 *  appear in multiple monitoring destinations if different aggregations are
 *  needed for different sets of metrics associated with that monitored
 *  resource type. A monitored resource and metric pair may only be used once
 *  in the Monitoring configuration.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_MonitoringDestination *> *producerDestinations;

@end


/**
 *  Configuration of a specific monitoring destination (the producer project
 *  or the consumer project).
 */
@interface GTLRServiceUsage_MonitoringDestination : GTLRObject

/**
 *  Types of the metrics to report to this monitoring destination.
 *  Each type must be defined in Service.metrics section.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

/**
 *  The monitored resource type. The type must be defined in
 *  Service.monitored_resources section.
 */
@property(nonatomic, copy, nullable) NSString *monitoredResource;

@end


/**
 *  OAuth scopes are a way to define data and permissions on data. For example,
 *  there are scopes defined for "Read-only access to Google Calendar" and
 *  "Access to Cloud Platform". Users can consent to a scope for an application,
 *  giving it permission to access that data on their behalf.
 *  OAuth scope specifications should be fairly coarse grained; a user will need
 *  to see and understand the text description of what your scope means.
 *  In most cases: use one or at most two OAuth scopes for an entire family of
 *  products. If your product has multiple APIs, you should probably be sharing
 *  the OAuth scope across all of those APIs.
 *  When you need finer grained OAuth consent screens: talk with your product
 *  management about how developers will use them in practice.
 *  Please note that even though each of the canonical scopes is enough for a
 *  request to be accepted and passed to the backend, a request can still fail
 *  due to the backend requiring additional scopes or permissions.
 */
@interface GTLRServiceUsage_OAuthRequirements : GTLRObject

/**
 *  The list of publicly documented OAuth scopes that are allowed access. An
 *  OAuth token containing any of these scopes will be accepted.
 *  Example:
 *  canonical_scopes: https://www.googleapis.com/auth/calendar,
 *  https://www.googleapis.com/auth/calendar.read
 */
@property(nonatomic, copy, nullable) NSString *canonicalScopes;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRServiceUsage_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the
 *  `name` should have the format of `operations/some/unique/name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceUsage_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceUsage_Operation_Response : GTLRObject
@end


/**
 *  The operation metadata returned for the batchend services operation.
 */
@interface GTLRServiceUsage_OperationMetadata : GTLRObject

/**
 *  The full name of the resources that this operation is directly
 *  associated with.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNames;

@end


/**
 *  A protocol buffer option, which can be attached to a message, field,
 *  enumeration, etc.
 */
@interface GTLRServiceUsage_Option : GTLRObject

/**
 *  The option's name. For protobuf built-in options (options defined in
 *  descriptor.proto), this is the short name. For example, `"map_entry"`.
 *  For custom options, it should be the fully-qualified name. For example,
 *  `"google.api.http"`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The option's value packed in an Any message. If the value is a primitive,
 *  the corresponding wrapper type defined in google/protobuf/wrappers.proto
 *  should be used. If the value is an enum, it should be stored as an int32
 *  value using the google.protobuf.Int32Value type.
 */
@property(nonatomic, strong, nullable) GTLRServiceUsage_Option_Value *value;

@end


/**
 *  The option's value packed in an Any message. If the value is a primitive,
 *  the corresponding wrapper type defined in google/protobuf/wrappers.proto
 *  should be used. If the value is an enum, it should be stored as an int32
 *  value using the google.protobuf.Int32Value type.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceUsage_Option_Value : GTLRObject
@end


/**
 *  Represents a documentation page. A page can contain subpages to represent
 *  nested documentation set structure.
 */
@interface GTLRServiceUsage_Page : GTLRObject

/**
 *  The Markdown content of the page. You can use <code>&#40;== include {path}
 *  ==&#41;</code>
 *  to include content from a Markdown file.
 */
@property(nonatomic, copy, nullable) NSString *content;

/**
 *  The name of the page. It will be used as an identity of the page to
 *  generate URI of the page, text of the link to this page in navigation,
 *  etc. The full page name (start from the root page name to this page
 *  concatenated with `.`) can be used as reference to the page in your
 *  documentation. For example:
 *  <pre><code>pages:
 *  - name: Tutorial
 *  content: &#40;== include tutorial.md ==&#41;
 *  subpages:
 *  - name: Java
 *  content: &#40;== include tutorial_java.md ==&#41;
 *  </code></pre>
 *  You can reference `Java` page using Markdown reference link syntax:
 *  `Java`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Subpages of this page. The order of subpages specified here will be
 *  honored in the generated docset.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Page *> *subpages;

@end


/**
 *  Quota configuration helps to achieve fairness and budgeting in service
 *  usage.
 *  The quota configuration works this way:
 *  - The service configuration defines a set of metrics.
 *  - For API calls, the quota.metric_rules maps methods to metrics with
 *  corresponding costs.
 *  - The quota.limits defines limits on the metrics, which will be used for
 *  quota checks at runtime.
 *  An example quota configuration in yaml format:
 *  quota:
 *  limits:
 *  - name: apiWriteQpsPerProject
 *  metric: library.googleapis.com/write_calls
 *  unit: "1/min/{project}" # rate limit for consumer projects
 *  values:
 *  STANDARD: 10000
 *  # The metric rules bind all methods to the read_calls metric,
 *  # except for the UpdateBook and DeleteBook methods. These two methods
 *  # are mapped to the write_calls metric, with the UpdateBook method
 *  # consuming at twice rate as the DeleteBook method.
 *  metric_rules:
 *  - selector: "*"
 *  metric_costs:
 *  library.googleapis.com/read_calls: 1
 *  - selector: google.example.library.v1.LibraryService.UpdateBook
 *  metric_costs:
 *  library.googleapis.com/write_calls: 2
 *  - selector: google.example.library.v1.LibraryService.DeleteBook
 *  metric_costs:
 *  library.googleapis.com/write_calls: 1
 *  Corresponding Metric definition:
 *  metrics:
 *  - name: library.googleapis.com/read_calls
 *  display_name: Read requests
 *  metric_kind: DELTA
 *  value_type: INT64
 *  - name: library.googleapis.com/write_calls
 *  display_name: Write requests
 *  metric_kind: DELTA
 *  value_type: INT64
 */
@interface GTLRServiceUsage_Quota : GTLRObject

/** List of `QuotaLimit` definitions for the service. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_QuotaLimit *> *limits;

/**
 *  List of `MetricRule` definitions, each one mapping a selected method to one
 *  or more metrics.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_MetricRule *> *metricRules;

@end


/**
 *  `QuotaLimit` defines a specific limit that applies over a specified duration
 *  for a limit type. There can be at most one limit for a duration and limit
 *  type combination defined within a `QuotaGroup`.
 */
@interface GTLRServiceUsage_QuotaLimit : GTLRObject

/**
 *  Default number of tokens that can be consumed during the specified
 *  duration. This is the number of tokens assigned when a client
 *  application developer activates the service for his/her project.
 *  Specifying a value of 0 will block all requests. This can be used if you
 *  are provisioning quota to selected consumers and blocking others.
 *  Similarly, a value of -1 will indicate an unlimited quota. No other
 *  negative values are allowed.
 *  Used by group-based quotas only.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultLimit;

/**
 *  Optional. User-visible, extended description for this quota limit.
 *  Should be used only when more context is needed to understand this limit
 *  than provided by the limit's display name (see: `display_name`).
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  User-visible display name for this limit.
 *  Optional. If not set, the UI will provide a default display name based on
 *  the quota configuration. This field can be used to override the default
 *  display name generated from the configuration.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Duration of this limit in textual notation. Example: "100s", "24h", "1d".
 *  For duration longer than a day, only multiple of days is supported. We
 *  support only "100s" and "1d" for now. Additional support will be added in
 *  the future. "0" indicates indefinite duration.
 *  Used by group-based quotas only.
 */
@property(nonatomic, copy, nullable) NSString *duration;

/**
 *  Free tier value displayed in the Developers Console for this limit.
 *  The free tier is the number of tokens that will be subtracted from the
 *  billed amount when billing is enabled.
 *  This field can only be set on a limit with duration "1d", in a billable
 *  group; it is invalid on any other limit. If this field is not set, it
 *  defaults to 0, indicating that there is no free tier for this service.
 *  Used by group-based quotas only.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *freeTier;

/**
 *  Maximum number of tokens that can be consumed during the specified
 *  duration. Client application developers can override the default limit up
 *  to this maximum. If specified, this value cannot be set to a value less
 *  than the default limit. If not specified, it is set to the default limit.
 *  To allow clients to apply overrides with no upper bound, set this to -1,
 *  indicating unlimited maximum quota.
 *  Used by group-based quotas only.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxLimit;

/**
 *  The name of the metric this quota limit applies to. The quota limits with
 *  the same metric will be checked together during runtime. The metric must be
 *  defined within the service config.
 */
@property(nonatomic, copy, nullable) NSString *metric;

/**
 *  Name of the quota limit.
 *  The name must be provided, and it must be unique within the service. The
 *  name can only include alphanumeric characters as well as '-'.
 *  The maximum length of the limit name is 64 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specify the unit of the quota limit. It uses the same syntax as
 *  Metric.unit. The supported unit kinds are determined by the quota
 *  backend system.
 *  Here are some examples:
 *  * "1/min/{project}" for quota per minute per project.
 *  Note: the order of unit components is insignificant.
 *  The "1" at the beginning is required to follow the metric unit syntax.
 */
@property(nonatomic, copy, nullable) NSString *unit;

/**
 *  Tiered limit values. You must specify this as a key:value pair, with an
 *  integer value that is the maximum number of requests allowed for the
 *  specified unit. Currently only STANDARD is supported.
 */
@property(nonatomic, strong, nullable) GTLRServiceUsage_QuotaLimit_Values *values;

@end


/**
 *  Tiered limit values. You must specify this as a key:value pair, with an
 *  integer value that is the maximum number of requests allowed for the
 *  specified unit. Currently only STANDARD is supported.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of longLongValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceUsage_QuotaLimit_Values : GTLRObject
@end


/**
 *  `SourceContext` represents information about the source of a
 *  protobuf element, like the file in which it is defined.
 */
@interface GTLRServiceUsage_SourceContext : GTLRObject

/**
 *  The path-qualified name of the .proto file that contained the associated
 *  protobuf element. For example: `"google/protobuf/source_context.proto"`.
 */
@property(nonatomic, copy, nullable) NSString *fileName;

@end


/**
 *  Source information used to create a Service Config
 */
@interface GTLRServiceUsage_SourceInfo : GTLRObject

/** All files used during config generation. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_SourceInfo_SourceFiles_Item *> *sourceFiles;

@end


/**
 *  GTLRServiceUsage_SourceInfo_SourceFiles_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceUsage_SourceInfo_SourceFiles_Item : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRServiceUsage_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRServiceUsage_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceUsage_Status_Details_Item : GTLRObject
@end


/**
 *  Define a parameter's name and location. The parameter may be passed as
 *  either
 *  an HTTP header or a URL query parameter, and if both are passed the behavior
 *  is implementation-dependent.
 */
@interface GTLRServiceUsage_SystemParameter : GTLRObject

/**
 *  Define the HTTP header name to use for the parameter. It is case
 *  insensitive.
 */
@property(nonatomic, copy, nullable) NSString *httpHeader;

/**
 *  Define the name of the parameter, such as "api_key" . It is case sensitive.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Define the URL query parameter name to use for the parameter. It is case
 *  sensitive.
 */
@property(nonatomic, copy, nullable) NSString *urlQueryParameter;

@end


/**
 *  Define a system parameter rule mapping system parameter definitions to
 *  methods.
 */
@interface GTLRServiceUsage_SystemParameterRule : GTLRObject

/**
 *  Define parameters. Multiple names may be defined for a parameter.
 *  For a given method call, only one of them should be used. If multiple
 *  names are used the behavior is implementation-dependent.
 *  If none of the specified names are present the behavior is
 *  parameter-dependent.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_SystemParameter *> *parameters;

/**
 *  Selects the methods to which this rule applies. Use '*' to indicate all
 *  methods in all APIs.
 *  Refer to selector for syntax details.
 */
@property(nonatomic, copy, nullable) NSString *selector;

@end


/**
 *  ### System parameter configuration
 *  A system parameter is a special kind of parameter defined by the API
 *  system, not by an individual API. It is typically mapped to an HTTP header
 *  and/or a URL query parameter. This configuration specifies which methods
 *  change the names of the system parameters.
 */
@interface GTLRServiceUsage_SystemParameters : GTLRObject

/**
 *  Define system parameters.
 *  The parameters defined here will override the default parameters
 *  implemented by the system. If this field is missing from the service
 *  config, default system parameters will be used. Default system parameters
 *  and names is implementation-dependent.
 *  Example: define api key for all methods
 *  system_parameters
 *  rules:
 *  - selector: "*"
 *  parameters:
 *  - name: api_key
 *  url_query_parameter: api_key
 *  Example: define 2 api key names for a specific method.
 *  system_parameters
 *  rules:
 *  - selector: "/ListShelves"
 *  parameters:
 *  - name: api_key
 *  http_header: Api-Key1
 *  - name: api_key
 *  http_header: Api-Key2
 *  **NOTE:** All service configuration rules follow "last one wins" order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_SystemParameterRule *> *rules;

@end


/**
 *  A protocol buffer message type.
 */
@interface GTLRServiceUsage_Type : GTLRObject

/** The list of fields. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Field *> *fields;

/** The fully qualified message name. */
@property(nonatomic, copy, nullable) NSString *name;

/** The list of types appearing in `oneof` definitions in this type. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *oneofs;

/** The protocol buffer options. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_Option *> *options;

/** The source context. */
@property(nonatomic, strong, nullable) GTLRServiceUsage_SourceContext *sourceContext;

/**
 *  The source syntax.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceUsage_Type_Syntax_SyntaxProto2 Syntax `proto2`.
 *        (Value: "SYNTAX_PROTO2")
 *    @arg @c kGTLRServiceUsage_Type_Syntax_SyntaxProto3 Syntax `proto3`.
 *        (Value: "SYNTAX_PROTO3")
 */
@property(nonatomic, copy, nullable) NSString *syntax;

@end


/**
 *  Configuration controlling usage of a service.
 */
@interface GTLRServiceUsage_Usage : GTLRObject

/**
 *  The full resource name of a channel used for sending notifications to the
 *  service producer.
 *  Google Service Management currently only supports
 *  [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification
 *  channel. To use Google Cloud Pub/Sub as the channel, this must be the name
 *  of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format
 *  documented in https://cloud.google.com/pubsub/docs/overview.
 */
@property(nonatomic, copy, nullable) NSString *producerNotificationChannel;

/**
 *  Requirements that must be satisfied before a consumer project can use the
 *  service. Each requirement is of the form <service.name>/<requirement-id>;
 *  for example 'serviceusage.googleapis.com/billing-enabled'.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requirements;

/**
 *  A list of usage rules that apply to individual API methods.
 *  **NOTE:** All service configuration rules follow "last one wins" order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceUsage_UsageRule *> *rules;

@end


/**
 *  Usage configuration rules for the service.
 *  NOTE: Under development.
 *  Use this rule to configure unregistered calls for the service. Unregistered
 *  calls are calls that do not contain consumer project identity.
 *  (Example: calls that do not contain an API key).
 *  By default, API methods do not allow unregistered calls, and each method
 *  call
 *  must be identified by a consumer project identity. Use this rule to
 *  allow/disallow unregistered calls.
 *  Example of an API that wants to allow unregistered calls for entire service.
 *  usage:
 *  rules:
 *  - selector: "*"
 *  allow_unregistered_calls: true
 *  Example of a method that wants to allow unregistered calls.
 *  usage:
 *  rules:
 *  - selector: "google.example.library.v1.LibraryService.CreateBook"
 *  allow_unregistered_calls: true
 */
@interface GTLRServiceUsage_UsageRule : GTLRObject

/**
 *  If true, the selected method allows unregistered calls, e.g. calls
 *  that don't identify any user or application.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowUnregisteredCalls;

/**
 *  Selects the methods to which this rule applies. Use '*' to indicate all
 *  methods in all APIs.
 *  Refer to selector for syntax details.
 */
@property(nonatomic, copy, nullable) NSString *selector;

/**
 *  If true, the selected method should skip service control and the control
 *  plane features, such as quota and billing, will not be available.
 *  This flag is used by Google Cloud Endpoints to bypass checks for internal
 *  methods, such as service health check methods.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipServiceControl;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
