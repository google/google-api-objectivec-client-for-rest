// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Library Agent API (libraryagent/v1)
// Description:
//   A simple Google Example Library API.
// Documentation:
//   https://cloud.google.com/docs/quota

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Libraryagent query classes.
 */
@interface GTLRLibraryagentQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Borrow a book from the library. Returns the book if it is borrowed
 *  successfully. Returns NOT_FOUND if the book does not exist in the library.
 *  Returns quota exceeded error if the amount of books borrowed exceeds
 *  allocation quota in any dimensions.
 *
 *  Method: libraryagent.shelves.books.borrow
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLibraryagentCloudPlatform
 */
@interface GTLRLibraryagentQuery_ShelvesBooksBorrow : GTLRLibraryagentQuery
// Previous library name was
//   +[GTLQueryLibraryagent queryForShelvesBooksBorrowWithname:]

/** The name of the book to borrow. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLibraryagent_GoogleExampleLibraryagentV1Book.
 *
 *  Borrow a book from the library. Returns the book if it is borrowed
 *  successfully. Returns NOT_FOUND if the book does not exist in the library.
 *  Returns quota exceeded error if the amount of books borrowed exceeds
 *  allocation quota in any dimensions.
 *
 *  @param name The name of the book to borrow.
 *
 *  @return GTLRLibraryagentQuery_ShelvesBooksBorrow
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a book. Returns NOT_FOUND if the book does not exist.
 *
 *  Method: libraryagent.shelves.books.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLibraryagentCloudPlatform
 */
@interface GTLRLibraryagentQuery_ShelvesBooksGet : GTLRLibraryagentQuery
// Previous library name was
//   +[GTLQueryLibraryagent queryForShelvesBooksGetWithname:]

/** The name of the book to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLibraryagent_GoogleExampleLibraryagentV1Book.
 *
 *  Gets a book. Returns NOT_FOUND if the book does not exist.
 *
 *  @param name The name of the book to retrieve.
 *
 *  @return GTLRLibraryagentQuery_ShelvesBooksGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists books in a shelf. The order is unspecified but deterministic. Newly
 *  created books will not necessarily be added to the end of this list.
 *  Returns NOT_FOUND if the shelf does not exist.
 *
 *  Method: libraryagent.shelves.books.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLibraryagentCloudPlatform
 */
@interface GTLRLibraryagentQuery_ShelvesBooksList : GTLRLibraryagentQuery
// Previous library name was
//   +[GTLQueryLibraryagent queryForShelvesBooksListWithparent:]

/**
 *  Requested page size. Server may return fewer books than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListBooksResponse.next_page_token.
 *  returned from the previous call to `ListBooks` method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The name of the shelf whose books we'd like to list. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLibraryagent_GoogleExampleLibraryagentV1ListBooksResponse.
 *
 *  Lists books in a shelf. The order is unspecified but deterministic. Newly
 *  created books will not necessarily be added to the end of this list.
 *  Returns NOT_FOUND if the shelf does not exist.
 *
 *  @param parent The name of the shelf whose books we'd like to list.
 *
 *  @return GTLRLibraryagentQuery_ShelvesBooksList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Return a book to the library. Returns the book if it is returned to the
 *  library successfully.
 *  Returns error if the book does not belong to the library
 *  or the users didn't borrow before.
 *
 *  Method: libraryagent.shelves.books.return
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLibraryagentCloudPlatform
 */
@interface GTLRLibraryagentQuery_ShelvesBooksReturn : GTLRLibraryagentQuery
// Previous library name was
//   +[GTLQueryLibraryagent queryForShelvesBooksReturnWithname:]

/** The name of the book to return. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLibraryagent_GoogleExampleLibraryagentV1Book.
 *
 *  Return a book to the library. Returns the book if it is returned to the
 *  library successfully.
 *  Returns error if the book does not belong to the library
 *  or the users didn't borrow before.
 *
 *  @param name The name of the book to return.
 *
 *  @return GTLRLibraryagentQuery_ShelvesBooksReturn
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a shelf. Returns NOT_FOUND if the shelf does not exist.
 *
 *  Method: libraryagent.shelves.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLibraryagentCloudPlatform
 */
@interface GTLRLibraryagentQuery_ShelvesGet : GTLRLibraryagentQuery
// Previous library name was
//   +[GTLQueryLibraryagent queryForShelvesGetWithname:]

/** The name of the shelf to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLibraryagent_GoogleExampleLibraryagentV1Shelf.
 *
 *  Gets a shelf. Returns NOT_FOUND if the shelf does not exist.
 *
 *  @param name The name of the shelf to retrieve.
 *
 *  @return GTLRLibraryagentQuery_ShelvesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists shelves. The order is unspecified but deterministic. Newly created
 *  shelves will not necessarily be added to the end of this list.
 *
 *  Method: libraryagent.shelves.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLibraryagentCloudPlatform
 */
@interface GTLRLibraryagentQuery_ShelvesList : GTLRLibraryagentQuery
// Previous library name was
//   +[GTLQueryLibraryagent queryForShelvesList]

/**
 *  Requested page size. Server may return fewer shelves than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListShelvesResponse.next_page_token
 *  returned from the previous call to `ListShelves` method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c
 *  GTLRLibraryagent_GoogleExampleLibraryagentV1ListShelvesResponse.
 *
 *  Lists shelves. The order is unspecified but deterministic. Newly created
 *  shelves will not necessarily be added to the end of this list.
 *
 *  @return GTLRLibraryagentQuery_ShelvesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
