// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   App Engine Admin API (appengine/v1)
// Description:
//   Provisions and manages developers' App Engine applications.
// Documentation:
//   https://cloud.google.com/appengine/docs/admin-api/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAppengine_Application;
@class GTLRAppengine_AuthorizedCertificate;
@class GTLRAppengine_BatchUpdateIngressRulesRequest;
@class GTLRAppengine_DebugInstanceRequest;
@class GTLRAppengine_DomainMapping;
@class GTLRAppengine_FirewallRule;
@class GTLRAppengine_RepairApplicationRequest;
@class GTLRAppengine_Service;
@class GTLRAppengine_Version;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// overrideStrategy

/** Value: "OVERRIDE" */
GTLR_EXTERN NSString * const kGTLRAppengineOverrideStrategyOverride;
/** Value: "STRICT" */
GTLR_EXTERN NSString * const kGTLRAppengineOverrideStrategyStrict;
/** Value: "UNSPECIFIED_DOMAIN_OVERRIDE_STRATEGY" */
GTLR_EXTERN NSString * const kGTLRAppengineOverrideStrategyUnspecifiedDomainOverrideStrategy;

// ----------------------------------------------------------------------------
// view

/** Value: "BASIC" */
GTLR_EXTERN NSString * const kGTLRAppengineViewBasic;
/** Value: "BASIC_CERTIFICATE" */
GTLR_EXTERN NSString * const kGTLRAppengineViewBasicCertificate;
/** Value: "FULL" */
GTLR_EXTERN NSString * const kGTLRAppengineViewFull;
/** Value: "FULL_CERTIFICATE" */
GTLR_EXTERN NSString * const kGTLRAppengineViewFullCertificate;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Appengine query classes.
 */
@interface GTLRAppengineQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Uploads the specified SSL certificate.
 *
 *  Method: appengine.apps.authorizedCertificates.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsAuthorizedCertificatesCreate : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsAuthorizedCertificatesCreateWithObject:appsId:]

/**
 *  Part of `parent`. Name of the parent Application resource. Example:
 *  apps/myapp.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/**
 *  Fetches a @c GTLRAppengine_AuthorizedCertificate.
 *
 *  Uploads the specified SSL certificate.
 *
 *  @param object The @c GTLRAppengine_AuthorizedCertificate to include in the
 *    query.
 *  @param appsId Part of `parent`. Name of the parent Application resource.
 *    Example: apps/myapp.
 *
 *  @return GTLRAppengineQuery_AppsAuthorizedCertificatesCreate
 */
+ (instancetype)queryWithObject:(GTLRAppengine_AuthorizedCertificate *)object
                         appsId:(NSString *)appsId;

@end

/**
 *  Deletes the specified SSL certificate.
 *
 *  Method: appengine.apps.authorizedCertificates.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsAuthorizedCertificatesDelete : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsAuthorizedCertificatesDeleteWithappsId:authorizedCertificatesId:]

/**
 *  Part of `name`. Name of the resource to delete. Example:
 *  apps/myapp/authorizedCertificates/12345.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *authorizedCertificatesId;

/**
 *  Fetches a @c GTLRAppengine_Empty.
 *
 *  Deletes the specified SSL certificate.
 *
 *  @param appsId Part of `name`. Name of the resource to delete. Example:
 *    apps/myapp/authorizedCertificates/12345.
 *  @param authorizedCertificatesId Part of `name`. See documentation of
 *    `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsAuthorizedCertificatesDelete
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId
       authorizedCertificatesId:(NSString *)authorizedCertificatesId;

@end

/**
 *  Gets the specified SSL certificate.
 *
 *  Method: appengine.apps.authorizedCertificates.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsAuthorizedCertificatesGet : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsAuthorizedCertificatesGetWithappsId:authorizedCertificatesId:]

/**
 *  Part of `name`. Name of the resource requested. Example:
 *  apps/myapp/authorizedCertificates/12345.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *authorizedCertificatesId;

/**
 *  Controls the set of fields returned in the GET response.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengineViewBasicCertificate Value "BASIC_CERTIFICATE"
 *    @arg @c kGTLRAppengineViewFullCertificate Value "FULL_CERTIFICATE"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRAppengine_AuthorizedCertificate.
 *
 *  Gets the specified SSL certificate.
 *
 *  @param appsId Part of `name`. Name of the resource requested. Example:
 *    apps/myapp/authorizedCertificates/12345.
 *  @param authorizedCertificatesId Part of `name`. See documentation of
 *    `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsAuthorizedCertificatesGet
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId
       authorizedCertificatesId:(NSString *)authorizedCertificatesId;

@end

/**
 *  Lists all SSL certificates the user is authorized to administer.
 *
 *  Method: appengine.apps.authorizedCertificates.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsAuthorizedCertificatesList : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsAuthorizedCertificatesListWithappsId:]

/**
 *  Part of `parent`. Name of the parent Application resource. Example:
 *  apps/myapp.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Maximum results to return per page. */
@property(nonatomic, assign) NSInteger pageSize;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Controls the set of fields returned in the LIST response.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengineViewBasicCertificate Value "BASIC_CERTIFICATE"
 *    @arg @c kGTLRAppengineViewFullCertificate Value "FULL_CERTIFICATE"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRAppengine_ListAuthorizedCertificatesResponse.
 *
 *  Lists all SSL certificates the user is authorized to administer.
 *
 *  @param appsId Part of `parent`. Name of the parent Application resource.
 *    Example: apps/myapp.
 *
 *  @return GTLRAppengineQuery_AppsAuthorizedCertificatesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId;

@end

/**
 *  Updates the specified SSL certificate. To renew a certificate and maintain
 *  its existing domain mappings, update certificate_data with a new
 *  certificate. The new certificate must be applicable to the same domains as
 *  the original certificate. The certificate display_name may also be updated.
 *
 *  Method: appengine.apps.authorizedCertificates.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsAuthorizedCertificatesPatch : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsAuthorizedCertificatesPatchWithObject:appsId:authorizedCertificatesId:]

/**
 *  Part of `name`. Name of the resource to update. Example:
 *  apps/myapp/authorizedCertificates/12345.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *authorizedCertificatesId;

/**
 *  Standard field mask for the set of fields to be updated. Updates are only
 *  supported on the certificate_raw_data and display_name fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAppengine_AuthorizedCertificate.
 *
 *  Updates the specified SSL certificate. To renew a certificate and maintain
 *  its existing domain mappings, update certificate_data with a new
 *  certificate. The new certificate must be applicable to the same domains as
 *  the original certificate. The certificate display_name may also be updated.
 *
 *  @param object The @c GTLRAppengine_AuthorizedCertificate to include in the
 *    query.
 *  @param appsId Part of `name`. Name of the resource to update. Example:
 *    apps/myapp/authorizedCertificates/12345.
 *  @param authorizedCertificatesId Part of `name`. See documentation of
 *    `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsAuthorizedCertificatesPatch
 */
+ (instancetype)queryWithObject:(GTLRAppengine_AuthorizedCertificate *)object
                         appsId:(NSString *)appsId
       authorizedCertificatesId:(NSString *)authorizedCertificatesId;

@end

/**
 *  Lists all domains the user is authorized to administer.
 *
 *  Method: appengine.apps.authorizedDomains.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsAuthorizedDomainsList : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsAuthorizedDomainsListWithappsId:]

/**
 *  Part of `parent`. Name of the parent Application resource. Example:
 *  apps/myapp.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Maximum results to return per page. */
@property(nonatomic, assign) NSInteger pageSize;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAppengine_ListAuthorizedDomainsResponse.
 *
 *  Lists all domains the user is authorized to administer.
 *
 *  @param appsId Part of `parent`. Name of the parent Application resource.
 *    Example: apps/myapp.
 *
 *  @return GTLRAppengineQuery_AppsAuthorizedDomainsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId;

@end

/**
 *  Creates an App Engine application for a Google Cloud Platform project.
 *  Required fields:
 *  id - The ID of the target Cloud Platform project.
 *  location - The region (https://cloud.google.com/appengine/docs/locations)
 *  where you want the App Engine application located.For more information about
 *  App Engine applications, see Managing Projects, Applications, and Billing
 *  (https://cloud.google.com/appengine/docs/standard/python/console/).
 *
 *  Method: appengine.apps.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsCreate : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsCreateWithObject:]

/**
 *  Fetches a @c GTLRAppengine_Operation.
 *
 *  Creates an App Engine application for a Google Cloud Platform project.
 *  Required fields:
 *  id - The ID of the target Cloud Platform project.
 *  location - The region (https://cloud.google.com/appengine/docs/locations)
 *  where you want the App Engine application located.For more information about
 *  App Engine applications, see Managing Projects, Applications, and Billing
 *  (https://cloud.google.com/appengine/docs/standard/python/console/).
 *
 *  @param object The @c GTLRAppengine_Application to include in the query.
 *
 *  @return GTLRAppengineQuery_AppsCreate
 */
+ (instancetype)queryWithObject:(GTLRAppengine_Application *)object;

@end

/**
 *  Maps a domain to an application. A user must be authorized to administer a
 *  domain in order to map it to an application. For a list of available
 *  authorized domains, see AuthorizedDomains.ListAuthorizedDomains.
 *
 *  Method: appengine.apps.domainMappings.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsDomainMappingsCreate : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsDomainMappingsCreateWithObject:appsId:]

/**
 *  Part of `parent`. Name of the parent Application resource. Example:
 *  apps/myapp.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/**
 *  Whether the domain creation should override any existing mappings for this
 *  domain. By default, overrides are rejected.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengineOverrideStrategyUnspecifiedDomainOverrideStrategy
 *        Value "UNSPECIFIED_DOMAIN_OVERRIDE_STRATEGY"
 *    @arg @c kGTLRAppengineOverrideStrategyStrict Value "STRICT"
 *    @arg @c kGTLRAppengineOverrideStrategyOverride Value "OVERRIDE"
 */
@property(nonatomic, copy, nullable) NSString *overrideStrategy;

/**
 *  Fetches a @c GTLRAppengine_Operation.
 *
 *  Maps a domain to an application. A user must be authorized to administer a
 *  domain in order to map it to an application. For a list of available
 *  authorized domains, see AuthorizedDomains.ListAuthorizedDomains.
 *
 *  @param object The @c GTLRAppengine_DomainMapping to include in the query.
 *  @param appsId Part of `parent`. Name of the parent Application resource.
 *    Example: apps/myapp.
 *
 *  @return GTLRAppengineQuery_AppsDomainMappingsCreate
 */
+ (instancetype)queryWithObject:(GTLRAppengine_DomainMapping *)object
                         appsId:(NSString *)appsId;

@end

/**
 *  Deletes the specified domain mapping. A user must be authorized to
 *  administer the associated domain in order to delete a DomainMapping
 *  resource.
 *
 *  Method: appengine.apps.domainMappings.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsDomainMappingsDelete : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsDomainMappingsDeleteWithappsId:domainMappingsId:]

/**
 *  Part of `name`. Name of the resource to delete. Example:
 *  apps/myapp/domainMappings/example.com.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *domainMappingsId;

/**
 *  Fetches a @c GTLRAppengine_Operation.
 *
 *  Deletes the specified domain mapping. A user must be authorized to
 *  administer the associated domain in order to delete a DomainMapping
 *  resource.
 *
 *  @param appsId Part of `name`. Name of the resource to delete. Example:
 *    apps/myapp/domainMappings/example.com.
 *  @param domainMappingsId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsDomainMappingsDelete
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId
               domainMappingsId:(NSString *)domainMappingsId;

@end

/**
 *  Gets the specified domain mapping.
 *
 *  Method: appengine.apps.domainMappings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsDomainMappingsGet : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsDomainMappingsGetWithappsId:domainMappingsId:]

/**
 *  Part of `name`. Name of the resource requested. Example:
 *  apps/myapp/domainMappings/example.com.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *domainMappingsId;

/**
 *  Fetches a @c GTLRAppengine_DomainMapping.
 *
 *  Gets the specified domain mapping.
 *
 *  @param appsId Part of `name`. Name of the resource requested. Example:
 *    apps/myapp/domainMappings/example.com.
 *  @param domainMappingsId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsDomainMappingsGet
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId
               domainMappingsId:(NSString *)domainMappingsId;

@end

/**
 *  Lists the domain mappings on an application.
 *
 *  Method: appengine.apps.domainMappings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsDomainMappingsList : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsDomainMappingsListWithappsId:]

/**
 *  Part of `parent`. Name of the parent Application resource. Example:
 *  apps/myapp.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Maximum results to return per page. */
@property(nonatomic, assign) NSInteger pageSize;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAppengine_ListDomainMappingsResponse.
 *
 *  Lists the domain mappings on an application.
 *
 *  @param appsId Part of `parent`. Name of the parent Application resource.
 *    Example: apps/myapp.
 *
 *  @return GTLRAppengineQuery_AppsDomainMappingsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId;

@end

/**
 *  Updates the specified domain mapping. To map an SSL certificate to a domain
 *  mapping, update certificate_id to point to an AuthorizedCertificate
 *  resource. A user must be authorized to administer the associated domain in
 *  order to update a DomainMapping resource.
 *
 *  Method: appengine.apps.domainMappings.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsDomainMappingsPatch : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsDomainMappingsPatchWithObject:appsId:domainMappingsId:]

/**
 *  Part of `name`. Name of the resource to update. Example:
 *  apps/myapp/domainMappings/example.com.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *domainMappingsId;

/**
 *  Standard field mask for the set of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAppengine_Operation.
 *
 *  Updates the specified domain mapping. To map an SSL certificate to a domain
 *  mapping, update certificate_id to point to an AuthorizedCertificate
 *  resource. A user must be authorized to administer the associated domain in
 *  order to update a DomainMapping resource.
 *
 *  @param object The @c GTLRAppengine_DomainMapping to include in the query.
 *  @param appsId Part of `name`. Name of the resource to update. Example:
 *    apps/myapp/domainMappings/example.com.
 *  @param domainMappingsId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsDomainMappingsPatch
 */
+ (instancetype)queryWithObject:(GTLRAppengine_DomainMapping *)object
                         appsId:(NSString *)appsId
               domainMappingsId:(NSString *)domainMappingsId;

@end

/**
 *  Replaces the entire firewall ruleset in one bulk operation. This overrides
 *  and replaces the rules of an existing firewall with the new rules.If the
 *  final rule does not match traffic with the '*' wildcard IP range, then an
 *  "allow all" rule is explicitly added to the end of the list.
 *
 *  Method: appengine.apps.firewall.ingressRules.batchUpdate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsFirewallIngressRulesBatchUpdate : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsFirewallIngressRulesBatchUpdateWithObject:appsId:]

/**
 *  Part of `name`. Name of the Firewall collection to set. Example:
 *  apps/myapp/firewall/ingressRules.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/**
 *  Fetches a @c GTLRAppengine_BatchUpdateIngressRulesResponse.
 *
 *  Replaces the entire firewall ruleset in one bulk operation. This overrides
 *  and replaces the rules of an existing firewall with the new rules.If the
 *  final rule does not match traffic with the '*' wildcard IP range, then an
 *  "allow all" rule is explicitly added to the end of the list.
 *
 *  @param object The @c GTLRAppengine_BatchUpdateIngressRulesRequest to include
 *    in the query.
 *  @param appsId Part of `name`. Name of the Firewall collection to set.
 *    Example: apps/myapp/firewall/ingressRules.
 *
 *  @return GTLRAppengineQuery_AppsFirewallIngressRulesBatchUpdate
 */
+ (instancetype)queryWithObject:(GTLRAppengine_BatchUpdateIngressRulesRequest *)object
                         appsId:(NSString *)appsId;

@end

/**
 *  Creates a firewall rule for the application.
 *
 *  Method: appengine.apps.firewall.ingressRules.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsFirewallIngressRulesCreate : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsFirewallIngressRulesCreateWithObject:appsId:]

/**
 *  Part of `parent`. Name of the parent Firewall collection in which to create
 *  a new rule. Example: apps/myapp/firewall/ingressRules.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/**
 *  Fetches a @c GTLRAppengine_FirewallRule.
 *
 *  Creates a firewall rule for the application.
 *
 *  @param object The @c GTLRAppengine_FirewallRule to include in the query.
 *  @param appsId Part of `parent`. Name of the parent Firewall collection in
 *    which to create a new rule. Example: apps/myapp/firewall/ingressRules.
 *
 *  @return GTLRAppengineQuery_AppsFirewallIngressRulesCreate
 */
+ (instancetype)queryWithObject:(GTLRAppengine_FirewallRule *)object
                         appsId:(NSString *)appsId;

@end

/**
 *  Deletes the specified firewall rule.
 *
 *  Method: appengine.apps.firewall.ingressRules.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsFirewallIngressRulesDelete : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsFirewallIngressRulesDeleteWithappsId:ingressRulesId:]

/**
 *  Part of `name`. Name of the Firewall resource to delete. Example:
 *  apps/myapp/firewall/ingressRules/100.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *ingressRulesId;

/**
 *  Fetches a @c GTLRAppengine_Empty.
 *
 *  Deletes the specified firewall rule.
 *
 *  @param appsId Part of `name`. Name of the Firewall resource to delete.
 *    Example: apps/myapp/firewall/ingressRules/100.
 *  @param ingressRulesId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsFirewallIngressRulesDelete
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId
                 ingressRulesId:(NSString *)ingressRulesId;

@end

/**
 *  Gets the specified firewall rule.
 *
 *  Method: appengine.apps.firewall.ingressRules.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsFirewallIngressRulesGet : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsFirewallIngressRulesGetWithappsId:ingressRulesId:]

/**
 *  Part of `name`. Name of the Firewall resource to retrieve. Example:
 *  apps/myapp/firewall/ingressRules/100.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *ingressRulesId;

/**
 *  Fetches a @c GTLRAppengine_FirewallRule.
 *
 *  Gets the specified firewall rule.
 *
 *  @param appsId Part of `name`. Name of the Firewall resource to retrieve.
 *    Example: apps/myapp/firewall/ingressRules/100.
 *  @param ingressRulesId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsFirewallIngressRulesGet
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId
                 ingressRulesId:(NSString *)ingressRulesId;

@end

/**
 *  Lists the firewall rules of an application.
 *
 *  Method: appengine.apps.firewall.ingressRules.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsFirewallIngressRulesList : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsFirewallIngressRulesListWithappsId:]

/**
 *  Part of `parent`. Name of the Firewall collection to retrieve. Example:
 *  apps/myapp/firewall/ingressRules.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/**
 *  A valid IP Address. If set, only rules matching this address will be
 *  returned. The first returned rule will be the rule that fires on requests
 *  from this IP.
 */
@property(nonatomic, copy, nullable) NSString *matchingAddress;

/** Maximum results to return per page. */
@property(nonatomic, assign) NSInteger pageSize;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAppengine_ListIngressRulesResponse.
 *
 *  Lists the firewall rules of an application.
 *
 *  @param appsId Part of `parent`. Name of the Firewall collection to retrieve.
 *    Example: apps/myapp/firewall/ingressRules.
 *
 *  @return GTLRAppengineQuery_AppsFirewallIngressRulesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId;

@end

/**
 *  Updates the specified firewall rule.
 *
 *  Method: appengine.apps.firewall.ingressRules.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsFirewallIngressRulesPatch : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsFirewallIngressRulesPatchWithObject:appsId:ingressRulesId:]

/**
 *  Part of `name`. Name of the Firewall resource to update. Example:
 *  apps/myapp/firewall/ingressRules/100.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *ingressRulesId;

/**
 *  Standard field mask for the set of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAppengine_FirewallRule.
 *
 *  Updates the specified firewall rule.
 *
 *  @param object The @c GTLRAppengine_FirewallRule to include in the query.
 *  @param appsId Part of `name`. Name of the Firewall resource to update.
 *    Example: apps/myapp/firewall/ingressRules/100.
 *  @param ingressRulesId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsFirewallIngressRulesPatch
 */
+ (instancetype)queryWithObject:(GTLRAppengine_FirewallRule *)object
                         appsId:(NSString *)appsId
                 ingressRulesId:(NSString *)ingressRulesId;

@end

/**
 *  Gets information about an application.
 *
 *  Method: appengine.apps.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsGet : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsGetWithappsId:]

/**
 *  Part of `name`. Name of the Application resource to get. Example:
 *  apps/myapp.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/**
 *  Fetches a @c GTLRAppengine_Application.
 *
 *  Gets information about an application.
 *
 *  @param appsId Part of `name`. Name of the Application resource to get.
 *    Example: apps/myapp.
 *
 *  @return GTLRAppengineQuery_AppsGet
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId;

@end

/**
 *  Gets information about a location.
 *
 *  Method: appengine.apps.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsLocationsGet : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsLocationsGetWithappsId:locationsId:]

/** Part of `name`. Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *locationsId;

/**
 *  Fetches a @c GTLRAppengine_Location.
 *
 *  Gets information about a location.
 *
 *  @param appsId Part of `name`. Resource name for the location.
 *  @param locationsId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsLocationsGet
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId
                    locationsId:(NSString *)locationsId;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: appengine.apps.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsLocationsList : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsLocationsListWithappsId:]

/**
 *  Part of `name`. The resource that owns the locations collection, if
 *  applicable.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAppengine_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param appsId Part of `name`. The resource that owns the locations
 *    collection, if applicable.
 *
 *  @return GTLRAppengineQuery_AppsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: appengine.apps.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsOperationsGet : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsOperationsGetWithappsId:operationsId:]

/** Part of `name`. The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *operationsId;

/**
 *  Fetches a @c GTLRAppengine_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param appsId Part of `name`. The name of the operation resource.
 *  @param operationsId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsOperationsGet
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId
                   operationsId:(NSString *)operationsId;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name
 *  binding allows API services to override the binding to use different
 *  resource name schemes, such as users/ * /operations. To override the
 *  binding, API services can add a binding such as "/v1/{name=users/
 *  *}/operations" to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: appengine.apps.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsOperationsList : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsOperationsListWithappsId:]

/** Part of `name`. The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *appsId;

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAppengine_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name
 *  binding allows API services to override the binding to use different
 *  resource name schemes, such as users/ * /operations. To override the
 *  binding, API services can add a binding such as "/v1/{name=users/
 *  *}/operations" to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param appsId Part of `name`. The name of the operation's parent resource.
 *
 *  @return GTLRAppengineQuery_AppsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId;

@end

/**
 *  Updates the specified Application resource. You can update the following
 *  fields:
 *  auth_domain - Google authentication domain for controlling user access to
 *  the application.
 *  default_cookie_expiration - Cookie expiration policy for the application.
 *
 *  Method: appengine.apps.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsPatch : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsPatchWithObject:appsId:]

/**
 *  Part of `name`. Name of the Application resource to update. Example:
 *  apps/myapp.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/**
 *  Standard field mask for the set of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAppengine_Operation.
 *
 *  Updates the specified Application resource. You can update the following
 *  fields:
 *  auth_domain - Google authentication domain for controlling user access to
 *  the application.
 *  default_cookie_expiration - Cookie expiration policy for the application.
 *
 *  @param object The @c GTLRAppengine_Application to include in the query.
 *  @param appsId Part of `name`. Name of the Application resource to update.
 *    Example: apps/myapp.
 *
 *  @return GTLRAppengineQuery_AppsPatch
 */
+ (instancetype)queryWithObject:(GTLRAppengine_Application *)object
                         appsId:(NSString *)appsId;

@end

/**
 *  Recreates the required App Engine features for the specified App Engine
 *  application, for example a Cloud Storage bucket or App Engine service
 *  account. Use this method if you receive an error message about a missing
 *  feature, for example, Error retrieving the App Engine service account.
 *
 *  Method: appengine.apps.repair
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsRepair : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsRepairWithObject:appsId:]

/** Part of `name`. Name of the application to repair. Example: apps/myapp */
@property(nonatomic, copy, nullable) NSString *appsId;

/**
 *  Fetches a @c GTLRAppengine_Operation.
 *
 *  Recreates the required App Engine features for the specified App Engine
 *  application, for example a Cloud Storage bucket or App Engine service
 *  account. Use this method if you receive an error message about a missing
 *  feature, for example, Error retrieving the App Engine service account.
 *
 *  @param object The @c GTLRAppengine_RepairApplicationRequest to include in
 *    the query.
 *  @param appsId Part of `name`. Name of the application to repair. Example:
 *    apps/myapp
 *
 *  @return GTLRAppengineQuery_AppsRepair
 */
+ (instancetype)queryWithObject:(GTLRAppengine_RepairApplicationRequest *)object
                         appsId:(NSString *)appsId;

@end

/**
 *  Deletes the specified service and all enclosed versions.
 *
 *  Method: appengine.apps.services.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsServicesDelete : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsServicesDeleteWithappsId:servicesId:]

/**
 *  Part of `name`. Name of the resource requested. Example:
 *  apps/myapp/services/default.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *servicesId;

/**
 *  Fetches a @c GTLRAppengine_Operation.
 *
 *  Deletes the specified service and all enclosed versions.
 *
 *  @param appsId Part of `name`. Name of the resource requested. Example:
 *    apps/myapp/services/default.
 *  @param servicesId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsServicesDelete
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId
                     servicesId:(NSString *)servicesId;

@end

/**
 *  Gets the current configuration of the specified service.
 *
 *  Method: appengine.apps.services.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsServicesGet : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsServicesGetWithappsId:servicesId:]

/**
 *  Part of `name`. Name of the resource requested. Example:
 *  apps/myapp/services/default.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *servicesId;

/**
 *  Fetches a @c GTLRAppengine_Service.
 *
 *  Gets the current configuration of the specified service.
 *
 *  @param appsId Part of `name`. Name of the resource requested. Example:
 *    apps/myapp/services/default.
 *  @param servicesId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsServicesGet
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId
                     servicesId:(NSString *)servicesId;

@end

/**
 *  Lists all the services in the application.
 *
 *  Method: appengine.apps.services.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsServicesList : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsServicesListWithappsId:]

/**
 *  Part of `parent`. Name of the parent Application resource. Example:
 *  apps/myapp.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Maximum results to return per page. */
@property(nonatomic, assign) NSInteger pageSize;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAppengine_ListServicesResponse.
 *
 *  Lists all the services in the application.
 *
 *  @param appsId Part of `parent`. Name of the parent Application resource.
 *    Example: apps/myapp.
 *
 *  @return GTLRAppengineQuery_AppsServicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId;

@end

/**
 *  Updates the configuration of the specified service.
 *
 *  Method: appengine.apps.services.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsServicesPatch : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsServicesPatchWithObject:appsId:servicesId:]

/**
 *  Part of `name`. Name of the resource to update. Example:
 *  apps/myapp/services/default.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/**
 *  Set to true to gradually shift traffic to one or more versions that you
 *  specify. By default, traffic is shifted immediately. For gradual traffic
 *  migration, the target versions must be located within instances that are
 *  configured for both warmup requests
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#InboundServiceType)
 *  and automatic scaling
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#AutomaticScaling).
 *  You must specify the shardBy
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services#ShardBy)
 *  field in the Service resource. Gradual traffic migration is not supported in
 *  the App Engine flexible environment. For examples, see Migrating and
 *  Splitting Traffic
 *  (https://cloud.google.com/appengine/docs/admin-api/migrating-splitting-traffic).
 */
@property(nonatomic, assign) BOOL migrateTraffic;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *servicesId;

/**
 *  Standard field mask for the set of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAppengine_Operation.
 *
 *  Updates the configuration of the specified service.
 *
 *  @param object The @c GTLRAppengine_Service to include in the query.
 *  @param appsId Part of `name`. Name of the resource to update. Example:
 *    apps/myapp/services/default.
 *  @param servicesId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsServicesPatch
 */
+ (instancetype)queryWithObject:(GTLRAppengine_Service *)object
                         appsId:(NSString *)appsId
                     servicesId:(NSString *)servicesId;

@end

/**
 *  Deploys code and resource files to a new version.
 *
 *  Method: appengine.apps.services.versions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsServicesVersionsCreate : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsServicesVersionsCreateWithObject:appsId:servicesId:]

/**
 *  Part of `parent`. Name of the parent resource to create this version under.
 *  Example: apps/myapp/services/default.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `parent`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *servicesId;

/**
 *  Fetches a @c GTLRAppengine_Operation.
 *
 *  Deploys code and resource files to a new version.
 *
 *  @param object The @c GTLRAppengine_Version to include in the query.
 *  @param appsId Part of `parent`. Name of the parent resource to create this
 *    version under. Example: apps/myapp/services/default.
 *  @param servicesId Part of `parent`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsServicesVersionsCreate
 */
+ (instancetype)queryWithObject:(GTLRAppengine_Version *)object
                         appsId:(NSString *)appsId
                     servicesId:(NSString *)servicesId;

@end

/**
 *  Deletes an existing Version resource.
 *
 *  Method: appengine.apps.services.versions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsServicesVersionsDelete : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsServicesVersionsDeleteWithappsId:servicesId:versionsId:]

/**
 *  Part of `name`. Name of the resource requested. Example:
 *  apps/myapp/services/default/versions/v1.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *servicesId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *versionsId;

/**
 *  Fetches a @c GTLRAppengine_Operation.
 *
 *  Deletes an existing Version resource.
 *
 *  @param appsId Part of `name`. Name of the resource requested. Example:
 *    apps/myapp/services/default/versions/v1.
 *  @param servicesId Part of `name`. See documentation of `appsId`.
 *  @param versionsId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsServicesVersionsDelete
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId
                     servicesId:(NSString *)servicesId
                     versionsId:(NSString *)versionsId;

@end

/**
 *  Gets the specified Version resource. By default, only a BASIC_VIEW will be
 *  returned. Specify the FULL_VIEW parameter to get the full resource.
 *
 *  Method: appengine.apps.services.versions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsServicesVersionsGet : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsServicesVersionsGetWithappsId:servicesId:versionsId:]

/**
 *  Part of `name`. Name of the resource requested. Example:
 *  apps/myapp/services/default/versions/v1.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *servicesId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *versionsId;

/**
 *  Controls the set of fields returned in the Get response.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengineViewBasic Value "BASIC"
 *    @arg @c kGTLRAppengineViewFull Value "FULL"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRAppengine_Version.
 *
 *  Gets the specified Version resource. By default, only a BASIC_VIEW will be
 *  returned. Specify the FULL_VIEW parameter to get the full resource.
 *
 *  @param appsId Part of `name`. Name of the resource requested. Example:
 *    apps/myapp/services/default/versions/v1.
 *  @param servicesId Part of `name`. See documentation of `appsId`.
 *  @param versionsId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsServicesVersionsGet
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId
                     servicesId:(NSString *)servicesId
                     versionsId:(NSString *)versionsId;

@end

/**
 *  Enables debugging on a VM instance. This allows you to use the SSH command
 *  to connect to the virtual machine where the instance lives. While in "debug
 *  mode", the instance continues to serve live traffic. You should delete the
 *  instance when you are done debugging and then allow the system to take over
 *  and determine if another instance should be started.Only applicable for
 *  instances in App Engine flexible environment.
 *
 *  Method: appengine.apps.services.versions.instances.debug
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsServicesVersionsInstancesDebug : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsServicesVersionsInstancesDebugWithObject:appsId:servicesId:versionsId:instancesId:]

/**
 *  Part of `name`. Name of the resource requested. Example:
 *  apps/myapp/services/default/versions/v1/instances/instance-1.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *instancesId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *servicesId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *versionsId;

/**
 *  Fetches a @c GTLRAppengine_Operation.
 *
 *  Enables debugging on a VM instance. This allows you to use the SSH command
 *  to connect to the virtual machine where the instance lives. While in "debug
 *  mode", the instance continues to serve live traffic. You should delete the
 *  instance when you are done debugging and then allow the system to take over
 *  and determine if another instance should be started.Only applicable for
 *  instances in App Engine flexible environment.
 *
 *  @param object The @c GTLRAppengine_DebugInstanceRequest to include in the
 *    query.
 *  @param appsId Part of `name`. Name of the resource requested. Example:
 *    apps/myapp/services/default/versions/v1/instances/instance-1.
 *  @param servicesId Part of `name`. See documentation of `appsId`.
 *  @param versionsId Part of `name`. See documentation of `appsId`.
 *  @param instancesId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsServicesVersionsInstancesDebug
 */
+ (instancetype)queryWithObject:(GTLRAppengine_DebugInstanceRequest *)object
                         appsId:(NSString *)appsId
                     servicesId:(NSString *)servicesId
                     versionsId:(NSString *)versionsId
                    instancesId:(NSString *)instancesId;

@end

/**
 *  Stops a running instance.
 *
 *  Method: appengine.apps.services.versions.instances.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsServicesVersionsInstancesDelete : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsServicesVersionsInstancesDeleteWithappsId:servicesId:versionsId:instancesId:]

/**
 *  Part of `name`. Name of the resource requested. Example:
 *  apps/myapp/services/default/versions/v1/instances/instance-1.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *instancesId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *servicesId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *versionsId;

/**
 *  Fetches a @c GTLRAppengine_Operation.
 *
 *  Stops a running instance.
 *
 *  @param appsId Part of `name`. Name of the resource requested. Example:
 *    apps/myapp/services/default/versions/v1/instances/instance-1.
 *  @param servicesId Part of `name`. See documentation of `appsId`.
 *  @param versionsId Part of `name`. See documentation of `appsId`.
 *  @param instancesId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsServicesVersionsInstancesDelete
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId
                     servicesId:(NSString *)servicesId
                     versionsId:(NSString *)versionsId
                    instancesId:(NSString *)instancesId;

@end

/**
 *  Gets instance information.
 *
 *  Method: appengine.apps.services.versions.instances.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsServicesVersionsInstancesGet : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsServicesVersionsInstancesGetWithappsId:servicesId:versionsId:instancesId:]

/**
 *  Part of `name`. Name of the resource requested. Example:
 *  apps/myapp/services/default/versions/v1/instances/instance-1.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *instancesId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *servicesId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *versionsId;

/**
 *  Fetches a @c GTLRAppengine_Instance.
 *
 *  Gets instance information.
 *
 *  @param appsId Part of `name`. Name of the resource requested. Example:
 *    apps/myapp/services/default/versions/v1/instances/instance-1.
 *  @param servicesId Part of `name`. See documentation of `appsId`.
 *  @param versionsId Part of `name`. See documentation of `appsId`.
 *  @param instancesId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsServicesVersionsInstancesGet
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId
                     servicesId:(NSString *)servicesId
                     versionsId:(NSString *)versionsId
                    instancesId:(NSString *)instancesId;

@end

/**
 *  Lists the instances of a version.Tip: To aggregate details about instances
 *  over time, see the Stackdriver Monitoring API
 *  (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
 *
 *  Method: appengine.apps.services.versions.instances.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsServicesVersionsInstancesList : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsServicesVersionsInstancesListWithappsId:servicesId:versionsId:]

/**
 *  Part of `parent`. Name of the parent Version resource. Example:
 *  apps/myapp/services/default/versions/v1.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Maximum results to return per page. */
@property(nonatomic, assign) NSInteger pageSize;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Part of `parent`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *servicesId;

/** Part of `parent`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *versionsId;

/**
 *  Fetches a @c GTLRAppengine_ListInstancesResponse.
 *
 *  Lists the instances of a version.Tip: To aggregate details about instances
 *  over time, see the Stackdriver Monitoring API
 *  (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
 *
 *  @param appsId Part of `parent`. Name of the parent Version resource.
 *    Example: apps/myapp/services/default/versions/v1.
 *  @param servicesId Part of `parent`. See documentation of `appsId`.
 *  @param versionsId Part of `parent`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsServicesVersionsInstancesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId
                     servicesId:(NSString *)servicesId
                     versionsId:(NSString *)versionsId;

@end

/**
 *  Lists the versions of a service.
 *
 *  Method: appengine.apps.services.versions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineAdmin
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 *    @c kGTLRAuthScopeAppengineCloudPlatformReadOnly
 */
@interface GTLRAppengineQuery_AppsServicesVersionsList : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsServicesVersionsListWithappsId:servicesId:]

/**
 *  Part of `parent`. Name of the parent Service resource. Example:
 *  apps/myapp/services/default.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Maximum results to return per page. */
@property(nonatomic, assign) NSInteger pageSize;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Part of `parent`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *servicesId;

/**
 *  Controls the set of fields returned in the List response.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengineViewBasic Value "BASIC"
 *    @arg @c kGTLRAppengineViewFull Value "FULL"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRAppengine_ListVersionsResponse.
 *
 *  Lists the versions of a service.
 *
 *  @param appsId Part of `parent`. Name of the parent Service resource.
 *    Example: apps/myapp/services/default.
 *  @param servicesId Part of `parent`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsServicesVersionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAppsId:(NSString *)appsId
                     servicesId:(NSString *)servicesId;

@end

/**
 *  Updates the specified Version resource. You can specify the following fields
 *  depending on the App Engine environment and type of scaling that the version
 *  resource uses:Standard environment
 *  instance_class
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic
 *  scaling in the standard environment:
 *  automatic_scaling.min_idle_instances
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
 *  automatic_scaling.max_idle_instances
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
 *  automaticScaling.standard_scheduler_settings.max_instances
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
 *  automaticScaling.standard_scheduler_settings.min_instances
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
 *  automaticScaling.standard_scheduler_settings.target_cpu_utilization
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
 *  automaticScaling.standard_scheduler_settings.target_throughput_utilization
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic
 *  scaling or manual scaling in the standard environment:
 *  serving_status
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)Flexible
 *  environment
 *  serving_status
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic
 *  scaling in the flexible environment:
 *  automatic_scaling.min_total_instances
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
 *  automatic_scaling.max_total_instances
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
 *  automatic_scaling.cool_down_period_sec
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
 *  automatic_scaling.cpu_utilization.target_utilization
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
 *
 *  Method: appengine.apps.services.versions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppengineCloudPlatform
 */
@interface GTLRAppengineQuery_AppsServicesVersionsPatch : GTLRAppengineQuery
// Previous library name was
//   +[GTLQueryAppengine queryForAppsServicesVersionsPatchWithObject:appsId:servicesId:versionsId:]

/**
 *  Part of `name`. Name of the resource to update. Example:
 *  apps/myapp/services/default/versions/1.
 */
@property(nonatomic, copy, nullable) NSString *appsId;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *servicesId;

/**
 *  Standard field mask for the set of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/** Part of `name`. See documentation of `appsId`. */
@property(nonatomic, copy, nullable) NSString *versionsId;

/**
 *  Fetches a @c GTLRAppengine_Operation.
 *
 *  Updates the specified Version resource. You can specify the following fields
 *  depending on the App Engine environment and type of scaling that the version
 *  resource uses:Standard environment
 *  instance_class
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic
 *  scaling in the standard environment:
 *  automatic_scaling.min_idle_instances
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
 *  automatic_scaling.max_idle_instances
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
 *  automaticScaling.standard_scheduler_settings.max_instances
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
 *  automaticScaling.standard_scheduler_settings.min_instances
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
 *  automaticScaling.standard_scheduler_settings.target_cpu_utilization
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
 *  automaticScaling.standard_scheduler_settings.target_throughput_utilization
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic
 *  scaling or manual scaling in the standard environment:
 *  serving_status
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)Flexible
 *  environment
 *  serving_status
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic
 *  scaling in the flexible environment:
 *  automatic_scaling.min_total_instances
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
 *  automatic_scaling.max_total_instances
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
 *  automatic_scaling.cool_down_period_sec
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
 *  automatic_scaling.cpu_utilization.target_utilization
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
 *
 *  @param object The @c GTLRAppengine_Version to include in the query.
 *  @param appsId Part of `name`. Name of the resource to update. Example:
 *    apps/myapp/services/default/versions/1.
 *  @param servicesId Part of `name`. See documentation of `appsId`.
 *  @param versionsId Part of `name`. See documentation of `appsId`.
 *
 *  @return GTLRAppengineQuery_AppsServicesVersionsPatch
 */
+ (instancetype)queryWithObject:(GTLRAppengine_Version *)object
                         appsId:(NSString *)appsId
                     servicesId:(NSString *)servicesId
                     versionsId:(NSString *)versionsId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
