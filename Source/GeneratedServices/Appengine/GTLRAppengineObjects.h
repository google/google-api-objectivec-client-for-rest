// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   App Engine Admin API (appengine/v1)
// Description:
//   Provisions and manages developers' App Engine applications.
// Documentation:
//   https://cloud.google.com/appengine/docs/admin-api/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAppengine_ApiConfigHandler;
@class GTLRAppengine_ApiEndpointHandler;
@class GTLRAppengine_AuthorizedCertificate;
@class GTLRAppengine_AuthorizedDomain;
@class GTLRAppengine_AutomaticScaling;
@class GTLRAppengine_BasicScaling;
@class GTLRAppengine_CertificateRawData;
@class GTLRAppengine_CloudBuildOptions;
@class GTLRAppengine_ContainerInfo;
@class GTLRAppengine_CpuUtilization;
@class GTLRAppengine_CreateVersionMetadataV1;
@class GTLRAppengine_CreateVersionMetadataV1Alpha;
@class GTLRAppengine_CreateVersionMetadataV1Beta;
@class GTLRAppengine_Deployment;
@class GTLRAppengine_Deployment_Files;
@class GTLRAppengine_DiskUtilization;
@class GTLRAppengine_DomainMapping;
@class GTLRAppengine_EndpointsApiService;
@class GTLRAppengine_Entrypoint;
@class GTLRAppengine_ErrorHandler;
@class GTLRAppengine_FeatureSettings;
@class GTLRAppengine_FileInfo;
@class GTLRAppengine_FirewallRule;
@class GTLRAppengine_HealthCheck;
@class GTLRAppengine_IdentityAwareProxy;
@class GTLRAppengine_Instance;
@class GTLRAppengine_Library;
@class GTLRAppengine_LivenessCheck;
@class GTLRAppengine_Location;
@class GTLRAppengine_Location_Labels;
@class GTLRAppengine_Location_Metadata;
@class GTLRAppengine_ManagedCertificate;
@class GTLRAppengine_ManualScaling;
@class GTLRAppengine_Network;
@class GTLRAppengine_NetworkUtilization;
@class GTLRAppengine_Operation;
@class GTLRAppengine_Operation_Metadata;
@class GTLRAppengine_Operation_Response;
@class GTLRAppengine_ReadinessCheck;
@class GTLRAppengine_RequestUtilization;
@class GTLRAppengine_ResourceRecord;
@class GTLRAppengine_Resources;
@class GTLRAppengine_ScriptHandler;
@class GTLRAppengine_Service;
@class GTLRAppengine_SslSettings;
@class GTLRAppengine_StandardSchedulerSettings;
@class GTLRAppengine_StaticFilesHandler;
@class GTLRAppengine_StaticFilesHandler_HttpHeaders;
@class GTLRAppengine_Status;
@class GTLRAppengine_Status_Details_Item;
@class GTLRAppengine_TrafficSplit;
@class GTLRAppengine_TrafficSplit_Allocations;
@class GTLRAppengine_UrlDispatchRule;
@class GTLRAppengine_UrlMap;
@class GTLRAppengine_Version;
@class GTLRAppengine_Version_BetaSettings;
@class GTLRAppengine_Version_EnvVariables;
@class GTLRAppengine_Volume;
@class GTLRAppengine_ZipInfo;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRAppengine_ApiConfigHandler.authFailAction

/**
 *  Redirects user to "accounts.google.com". The user is redirected back to the
 *  application URL after signing in or creating an account.
 *
 *  Value: "AUTH_FAIL_ACTION_REDIRECT"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ApiConfigHandler_AuthFailAction_AuthFailActionRedirect;
/**
 *  Rejects request with a 401 HTTP status code and an error message.
 *
 *  Value: "AUTH_FAIL_ACTION_UNAUTHORIZED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ApiConfigHandler_AuthFailAction_AuthFailActionUnauthorized;
/**
 *  Not specified. AUTH_FAIL_ACTION_REDIRECT is assumed.
 *
 *  Value: "AUTH_FAIL_ACTION_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ApiConfigHandler_AuthFailAction_AuthFailActionUnspecified;

// ----------------------------------------------------------------------------
// GTLRAppengine_ApiConfigHandler.login

/**
 *  If the user is not signed in, the auth_fail_action is taken. In addition, if
 *  the user is not an administrator for the application, they are given an
 *  error message regardless of auth_fail_action. If the user is an
 *  administrator, the handler proceeds.
 *
 *  Value: "LOGIN_ADMIN"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ApiConfigHandler_Login_LoginAdmin;
/**
 *  Does not require that the user is signed in.
 *
 *  Value: "LOGIN_OPTIONAL"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ApiConfigHandler_Login_LoginOptional;
/**
 *  If the user has signed in, the handler proceeds normally. Otherwise, the
 *  auth_fail_action is taken.
 *
 *  Value: "LOGIN_REQUIRED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ApiConfigHandler_Login_LoginRequired;
/**
 *  Not specified. LOGIN_OPTIONAL is assumed.
 *
 *  Value: "LOGIN_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ApiConfigHandler_Login_LoginUnspecified;

// ----------------------------------------------------------------------------
// GTLRAppengine_ApiConfigHandler.securityLevel

/**
 *  Requests for a URL that match this handler that do not use HTTPS are
 *  automatically redirected to the HTTPS URL with the same path. Query
 *  parameters are reserved for the redirect.
 *
 *  Value: "SECURE_ALWAYS"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ApiConfigHandler_SecurityLevel_SecureAlways;
/**
 *  Both HTTP and HTTPS requests with URLs that match the handler succeed
 *  without redirects. The application can examine the request to determine
 *  which protocol was used, and respond accordingly.
 *
 *  Value: "SECURE_DEFAULT"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ApiConfigHandler_SecurityLevel_SecureDefault;
/**
 *  Requests for a URL that match this handler that use HTTPS are automatically
 *  redirected to the HTTP equivalent URL.
 *
 *  Value: "SECURE_NEVER"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ApiConfigHandler_SecurityLevel_SecureNever;
/**
 *  Both HTTP and HTTPS requests with URLs that match the handler succeed
 *  without redirects. The application can examine the request to determine
 *  which protocol was used and respond accordingly.
 *
 *  Value: "SECURE_OPTIONAL"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ApiConfigHandler_SecurityLevel_SecureOptional;
/**
 *  Not specified.
 *
 *  Value: "SECURE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ApiConfigHandler_SecurityLevel_SecureUnspecified;

// ----------------------------------------------------------------------------
// GTLRAppengine_Application.servingStatus

/**
 *  Application is serving.
 *
 *  Value: "SERVING"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_Application_ServingStatus_Serving;
/**
 *  Application has been disabled by the system.
 *
 *  Value: "SYSTEM_DISABLED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_Application_ServingStatus_SystemDisabled;
/**
 *  Serving status is unspecified.
 *
 *  Value: "UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_Application_ServingStatus_Unspecified;
/**
 *  Application has been disabled by the user.
 *
 *  Value: "USER_DISABLED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_Application_ServingStatus_UserDisabled;

// ----------------------------------------------------------------------------
// GTLRAppengine_EndpointsApiService.rolloutStrategy

/**
 *  Endpoints service configuration ID will be fixed to the configuration ID
 *  specified by config_id.
 *
 *  Value: "FIXED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_EndpointsApiService_RolloutStrategy_Fixed;
/**
 *  Endpoints service configuration ID will be updated with each rollout.
 *
 *  Value: "MANAGED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_EndpointsApiService_RolloutStrategy_Managed;
/**
 *  Not specified. Defaults to FIXED.
 *
 *  Value: "UNSPECIFIED_ROLLOUT_STRATEGY"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_EndpointsApiService_RolloutStrategy_UnspecifiedRolloutStrategy;

// ----------------------------------------------------------------------------
// GTLRAppengine_ErrorHandler.errorCode

/**
 *  All other error types.
 *
 *  Value: "ERROR_CODE_DEFAULT"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ErrorHandler_ErrorCode_ErrorCodeDefault;
/**
 *  Client blocked by the application's Denial of Service protection
 *  configuration.
 *
 *  Value: "ERROR_CODE_DOS_API_DENIAL"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ErrorHandler_ErrorCode_ErrorCodeDosApiDenial;
/**
 *  Application has exceeded a resource quota.
 *
 *  Value: "ERROR_CODE_OVER_QUOTA"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ErrorHandler_ErrorCode_ErrorCodeOverQuota;
/**
 *  Deadline reached before the application responds.
 *
 *  Value: "ERROR_CODE_TIMEOUT"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ErrorHandler_ErrorCode_ErrorCodeTimeout;
/**
 *  Not specified. ERROR_CODE_DEFAULT is assumed.
 *
 *  Value: "ERROR_CODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ErrorHandler_ErrorCode_ErrorCodeUnspecified;

// ----------------------------------------------------------------------------
// GTLRAppengine_FirewallRule.action

/**
 *  Matching requests are allowed.
 *
 *  Value: "ALLOW"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_FirewallRule_Action_Allow;
/**
 *  Matching requests are denied.
 *
 *  Value: "DENY"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_FirewallRule_Action_Deny;
/** Value: "UNSPECIFIED_ACTION" */
GTLR_EXTERN NSString * const kGTLRAppengine_FirewallRule_Action_UnspecifiedAction;

// ----------------------------------------------------------------------------
// GTLRAppengine_Instance.availability

/** Value: "DYNAMIC" */
GTLR_EXTERN NSString * const kGTLRAppengine_Instance_Availability_Dynamic;
/** Value: "RESIDENT" */
GTLR_EXTERN NSString * const kGTLRAppengine_Instance_Availability_Resident;
/** Value: "UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRAppengine_Instance_Availability_Unspecified;

// ----------------------------------------------------------------------------
// GTLRAppengine_ManagedCertificate.status

/**
 *  All renewal attempts have been exhausted, likely due to an invalid DNS
 *  setup.
 *
 *  Value: "FAILED_PERMANENT"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ManagedCertificate_Status_FailedPermanent;
/**
 *  Most recent renewal failed due to a CAA retrieval failure. This means that
 *  the domain's DNS provider does not properly handle CAA records, failing
 *  requests for CAA records when no CAA records are defined. Renewals will
 *  continue to fail until the DNS provider is changed or a CAA record is added
 *  for the given domain. The last successfully provisioned certificate may
 *  still be serving.
 *
 *  Value: "FAILED_RETRYING_CAA_CHECKING"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ManagedCertificate_Status_FailedRetryingCaaChecking;
/**
 *  Most recent renewal failed due to an explicit CAA record that does not
 *  include the in-use CA, Let's Encrypt. Renewals will continue to fail until
 *  the CAA is reconfigured. The last successfully provisioned certificate may
 *  still be serving.
 *
 *  Value: "FAILED_RETRYING_CAA_FORBIDDEN"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ManagedCertificate_Status_FailedRetryingCaaForbidden;
/**
 *  Most recent renewal failed due to an invalid DNS setup and will be retried.
 *  Renewal attempts will continue to fail until the certificate domain's DNS
 *  configuration is fixed. The last successfully provisioned certificate may
 *  still be serving.
 *
 *  Value: "FAILED_RETRYING_NOT_VISIBLE"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ManagedCertificate_Status_FailedRetryingNotVisible;
/** Value: "MANAGEMENT_STATUS_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRAppengine_ManagedCertificate_Status_ManagementStatusUnspecified;
/**
 *  Certificate was successfully obtained and inserted into the serving system.
 *
 *  Value: "OK"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ManagedCertificate_Status_Ok;
/**
 *  Certificate is under active attempts to acquire or renew.
 *
 *  Value: "PENDING"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ManagedCertificate_Status_Pending;

// ----------------------------------------------------------------------------
// GTLRAppengine_ResourceRecord.type

/**
 *  An A resource record. Data is an IPv4 address.
 *
 *  Value: "A"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ResourceRecord_Type_A;
/**
 *  An AAAA resource record. Data is an IPv6 address.
 *
 *  Value: "AAAA"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ResourceRecord_Type_Aaaa;
/**
 *  A CNAME resource record. Data is a domain name to be aliased.
 *
 *  Value: "CNAME"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ResourceRecord_Type_Cname;
/**
 *  An unknown resource record.
 *
 *  Value: "RECORD_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_ResourceRecord_Type_RecordTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRAppengine_SslSettings.sslManagementType

/**
 *  SSL support for this domain is configured automatically. The mapped SSL
 *  certificate will be automatically renewed.
 *
 *  Value: "AUTOMATIC"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_SslSettings_SslManagementType_Automatic;
/**
 *  SSL support for this domain is configured manually by the user. Either the
 *  domain has no SSL support or a user-obtained SSL certificate has been
 *  explictly mapped to this domain.
 *
 *  Value: "MANUAL"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_SslSettings_SslManagementType_Manual;
/**
 *  Defaults to AUTOMATIC.
 *
 *  Value: "SSL_MANAGEMENT_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_SslSettings_SslManagementType_SslManagementTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRAppengine_TrafficSplit.shardBy

/**
 *  Diversion based on a specially named cookie, "GOOGAPPUID." The cookie must
 *  be set by the application itself or no diversion will occur.
 *
 *  Value: "COOKIE"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_TrafficSplit_ShardBy_Cookie;
/**
 *  Diversion based on applying the modulus operation to a fingerprint of the IP
 *  address.
 *
 *  Value: "IP"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_TrafficSplit_ShardBy_Ip;
/**
 *  Diversion based on weighted random assignment. An incoming request is
 *  randomly routed to a version in the traffic split, with probability
 *  proportional to the version's traffic share.
 *
 *  Value: "RANDOM"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_TrafficSplit_ShardBy_Random;
/**
 *  Diversion method unspecified.
 *
 *  Value: "UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_TrafficSplit_ShardBy_Unspecified;

// ----------------------------------------------------------------------------
// GTLRAppengine_UrlMap.authFailAction

/**
 *  Redirects user to "accounts.google.com". The user is redirected back to the
 *  application URL after signing in or creating an account.
 *
 *  Value: "AUTH_FAIL_ACTION_REDIRECT"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_AuthFailAction_AuthFailActionRedirect;
/**
 *  Rejects request with a 401 HTTP status code and an error message.
 *
 *  Value: "AUTH_FAIL_ACTION_UNAUTHORIZED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_AuthFailAction_AuthFailActionUnauthorized;
/**
 *  Not specified. AUTH_FAIL_ACTION_REDIRECT is assumed.
 *
 *  Value: "AUTH_FAIL_ACTION_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_AuthFailAction_AuthFailActionUnspecified;

// ----------------------------------------------------------------------------
// GTLRAppengine_UrlMap.login

/**
 *  If the user is not signed in, the auth_fail_action is taken. In addition, if
 *  the user is not an administrator for the application, they are given an
 *  error message regardless of auth_fail_action. If the user is an
 *  administrator, the handler proceeds.
 *
 *  Value: "LOGIN_ADMIN"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_Login_LoginAdmin;
/**
 *  Does not require that the user is signed in.
 *
 *  Value: "LOGIN_OPTIONAL"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_Login_LoginOptional;
/**
 *  If the user has signed in, the handler proceeds normally. Otherwise, the
 *  auth_fail_action is taken.
 *
 *  Value: "LOGIN_REQUIRED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_Login_LoginRequired;
/**
 *  Not specified. LOGIN_OPTIONAL is assumed.
 *
 *  Value: "LOGIN_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_Login_LoginUnspecified;

// ----------------------------------------------------------------------------
// GTLRAppengine_UrlMap.redirectHttpResponseCode

/**
 *  301 Moved Permanently code.
 *
 *  Value: "REDIRECT_HTTP_RESPONSE_CODE_301"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_RedirectHttpResponseCode_RedirectHttpResponseCode301;
/**
 *  302 Moved Temporarily code.
 *
 *  Value: "REDIRECT_HTTP_RESPONSE_CODE_302"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_RedirectHttpResponseCode_RedirectHttpResponseCode302;
/**
 *  303 See Other code.
 *
 *  Value: "REDIRECT_HTTP_RESPONSE_CODE_303"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_RedirectHttpResponseCode_RedirectHttpResponseCode303;
/**
 *  307 Temporary Redirect code.
 *
 *  Value: "REDIRECT_HTTP_RESPONSE_CODE_307"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_RedirectHttpResponseCode_RedirectHttpResponseCode307;
/**
 *  Not specified. 302 is assumed.
 *
 *  Value: "REDIRECT_HTTP_RESPONSE_CODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_RedirectHttpResponseCode_RedirectHttpResponseCodeUnspecified;

// ----------------------------------------------------------------------------
// GTLRAppengine_UrlMap.securityLevel

/**
 *  Requests for a URL that match this handler that do not use HTTPS are
 *  automatically redirected to the HTTPS URL with the same path. Query
 *  parameters are reserved for the redirect.
 *
 *  Value: "SECURE_ALWAYS"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_SecurityLevel_SecureAlways;
/**
 *  Both HTTP and HTTPS requests with URLs that match the handler succeed
 *  without redirects. The application can examine the request to determine
 *  which protocol was used, and respond accordingly.
 *
 *  Value: "SECURE_DEFAULT"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_SecurityLevel_SecureDefault;
/**
 *  Requests for a URL that match this handler that use HTTPS are automatically
 *  redirected to the HTTP equivalent URL.
 *
 *  Value: "SECURE_NEVER"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_SecurityLevel_SecureNever;
/**
 *  Both HTTP and HTTPS requests with URLs that match the handler succeed
 *  without redirects. The application can examine the request to determine
 *  which protocol was used and respond accordingly.
 *
 *  Value: "SECURE_OPTIONAL"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_SecurityLevel_SecureOptional;
/**
 *  Not specified.
 *
 *  Value: "SECURE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_UrlMap_SecurityLevel_SecureUnspecified;

// ----------------------------------------------------------------------------
// GTLRAppengine_Version.inboundServices

/** Value: "INBOUND_SERVICE_CHANNEL_PRESENCE" */
GTLR_EXTERN NSString * const kGTLRAppengine_Version_InboundServices_InboundServiceChannelPresence;
/** Value: "INBOUND_SERVICE_MAIL" */
GTLR_EXTERN NSString * const kGTLRAppengine_Version_InboundServices_InboundServiceMail;
/** Value: "INBOUND_SERVICE_MAIL_BOUNCE" */
GTLR_EXTERN NSString * const kGTLRAppengine_Version_InboundServices_InboundServiceMailBounce;
/** Value: "INBOUND_SERVICE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRAppengine_Version_InboundServices_InboundServiceUnspecified;
/** Value: "INBOUND_SERVICE_WARMUP" */
GTLR_EXTERN NSString * const kGTLRAppengine_Version_InboundServices_InboundServiceWarmup;
/** Value: "INBOUND_SERVICE_XMPP_ERROR" */
GTLR_EXTERN NSString * const kGTLRAppengine_Version_InboundServices_InboundServiceXmppError;
/** Value: "INBOUND_SERVICE_XMPP_MESSAGE" */
GTLR_EXTERN NSString * const kGTLRAppengine_Version_InboundServices_InboundServiceXmppMessage;
/** Value: "INBOUND_SERVICE_XMPP_PRESENCE" */
GTLR_EXTERN NSString * const kGTLRAppengine_Version_InboundServices_InboundServiceXmppPresence;
/** Value: "INBOUND_SERVICE_XMPP_SUBSCRIBE" */
GTLR_EXTERN NSString * const kGTLRAppengine_Version_InboundServices_InboundServiceXmppSubscribe;

// ----------------------------------------------------------------------------
// GTLRAppengine_Version.servingStatus

/**
 *  Currently serving. Instances are created according to the scaling settings
 *  of the version.
 *
 *  Value: "SERVING"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_Version_ServingStatus_Serving;
/**
 *  Not specified.
 *
 *  Value: "SERVING_STATUS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_Version_ServingStatus_ServingStatusUnspecified;
/**
 *  Disabled. No instances will be created and the scaling settings are ignored
 *  until the state of the version changes to SERVING.
 *
 *  Value: "STOPPED"
 */
GTLR_EXTERN NSString * const kGTLRAppengine_Version_ServingStatus_Stopped;

/**
 *  Google Cloud Endpoints
 *  (https://cloud.google.com/appengine/docs/python/endpoints/) configuration
 *  for API handlers.
 */
@interface GTLRAppengine_ApiConfigHandler : GTLRObject

/**
 *  Action to take when users access resources that require authentication.
 *  Defaults to redirect.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_ApiConfigHandler_AuthFailAction_AuthFailActionRedirect
 *        Redirects user to "accounts.google.com". The user is redirected back
 *        to the application URL after signing in or creating an account.
 *        (Value: "AUTH_FAIL_ACTION_REDIRECT")
 *    @arg @c kGTLRAppengine_ApiConfigHandler_AuthFailAction_AuthFailActionUnauthorized
 *        Rejects request with a 401 HTTP status code and an error message.
 *        (Value: "AUTH_FAIL_ACTION_UNAUTHORIZED")
 *    @arg @c kGTLRAppengine_ApiConfigHandler_AuthFailAction_AuthFailActionUnspecified
 *        Not specified. AUTH_FAIL_ACTION_REDIRECT is assumed. (Value:
 *        "AUTH_FAIL_ACTION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *authFailAction;

/**
 *  Level of login required to access this resource. Defaults to optional.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_ApiConfigHandler_Login_LoginAdmin If the user is
 *        not signed in, the auth_fail_action is taken. In addition, if the user
 *        is not an administrator for the application, they are given an error
 *        message regardless of auth_fail_action. If the user is an
 *        administrator, the handler proceeds. (Value: "LOGIN_ADMIN")
 *    @arg @c kGTLRAppengine_ApiConfigHandler_Login_LoginOptional Does not
 *        require that the user is signed in. (Value: "LOGIN_OPTIONAL")
 *    @arg @c kGTLRAppengine_ApiConfigHandler_Login_LoginRequired If the user
 *        has signed in, the handler proceeds normally. Otherwise, the
 *        auth_fail_action is taken. (Value: "LOGIN_REQUIRED")
 *    @arg @c kGTLRAppengine_ApiConfigHandler_Login_LoginUnspecified Not
 *        specified. LOGIN_OPTIONAL is assumed. (Value: "LOGIN_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *login;

/** Path to the script from the application root directory. */
@property(nonatomic, copy, nullable) NSString *script;

/**
 *  Security (HTTPS) enforcement for this URL.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_ApiConfigHandler_SecurityLevel_SecureAlways
 *        Requests for a URL that match this handler that do not use HTTPS are
 *        automatically redirected to the HTTPS URL with the same path. Query
 *        parameters are reserved for the redirect. (Value: "SECURE_ALWAYS")
 *    @arg @c kGTLRAppengine_ApiConfigHandler_SecurityLevel_SecureDefault Both
 *        HTTP and HTTPS requests with URLs that match the handler succeed
 *        without redirects. The application can examine the request to
 *        determine which protocol was used, and respond accordingly. (Value:
 *        "SECURE_DEFAULT")
 *    @arg @c kGTLRAppengine_ApiConfigHandler_SecurityLevel_SecureNever Requests
 *        for a URL that match this handler that use HTTPS are automatically
 *        redirected to the HTTP equivalent URL. (Value: "SECURE_NEVER")
 *    @arg @c kGTLRAppengine_ApiConfigHandler_SecurityLevel_SecureOptional Both
 *        HTTP and HTTPS requests with URLs that match the handler succeed
 *        without redirects. The application can examine the request to
 *        determine which protocol was used and respond accordingly. (Value:
 *        "SECURE_OPTIONAL")
 *    @arg @c kGTLRAppengine_ApiConfigHandler_SecurityLevel_SecureUnspecified
 *        Not specified. (Value: "SECURE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *securityLevel;

/** URL to serve the endpoint at. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Uses Google Cloud Endpoints to handle requests.
 */
@interface GTLRAppengine_ApiEndpointHandler : GTLRObject

/** Path to the script from the application root directory. */
@property(nonatomic, copy, nullable) NSString *scriptPath;

@end


/**
 *  An Application resource contains the top-level configuration of an App
 *  Engine application.
 */
@interface GTLRAppengine_Application : GTLRObject

/**
 *  Google Apps authentication domain that controls which users can access this
 *  application.Defaults to open access for any Google Account.
 */
@property(nonatomic, copy, nullable) NSString *authDomain;

/**
 *  Google Cloud Storage bucket that can be used for storing files associated
 *  with this application. This bucket is associated with the application and
 *  can be used by the gcloud deployment commands.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *codeBucket;

/**
 *  Google Cloud Storage bucket that can be used by this application to store
 *  content.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *defaultBucket;

/** Cookie expiration policy for this application. */
@property(nonatomic, strong, nullable) GTLRDuration *defaultCookieExpiration;

/**
 *  Hostname used to reach this application, as resolved by App
 *  Engine.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *defaultHostname;

/**
 *  HTTP path dispatch rules for requests to the application that do not
 *  explicitly target a service or version. Rules are order-dependent. Up to 20
 *  dispatch rules can be supported.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_UrlDispatchRule *> *dispatchRules;

/** The feature specific settings to be used in the application. */
@property(nonatomic, strong, nullable) GTLRAppengine_FeatureSettings *featureSettings;

/**
 *  The Google Container Registry domain used for storing managed build docker
 *  images for this application.
 */
@property(nonatomic, copy, nullable) NSString *gcrDomain;

@property(nonatomic, strong, nullable) GTLRAppengine_IdentityAwareProxy *iap;

/**
 *  Identifier of the Application resource. This identifier is equivalent to the
 *  project ID of the Google Cloud Platform project where you want to deploy
 *  your application. Example: myapp.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Location from which this application runs. Application instances run out of
 *  the data centers in the specified location, which is also where all of the
 *  application's end user content is stored.Defaults to us-central.View the
 *  list of supported locations
 *  (https://cloud.google.com/appengine/docs/locations).
 */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Full path to the Application resource in the API. Example:
 *  apps/myapp.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Serving status of this application.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_Application_ServingStatus_Serving Application is
 *        serving. (Value: "SERVING")
 *    @arg @c kGTLRAppengine_Application_ServingStatus_SystemDisabled
 *        Application has been disabled by the system. (Value:
 *        "SYSTEM_DISABLED")
 *    @arg @c kGTLRAppengine_Application_ServingStatus_Unspecified Serving
 *        status is unspecified. (Value: "UNSPECIFIED")
 *    @arg @c kGTLRAppengine_Application_ServingStatus_UserDisabled Application
 *        has been disabled by the user. (Value: "USER_DISABLED")
 */
@property(nonatomic, copy, nullable) NSString *servingStatus;

@end


/**
 *  An SSL certificate that a user has been authorized to administer. A user is
 *  authorized to administer any certificate that applies to one of their
 *  authorized domains.
 */
@interface GTLRAppengine_AuthorizedCertificate : GTLRObject

/**
 *  The SSL certificate serving the AuthorizedCertificate resource. This must be
 *  obtained independently from a certificate authority.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_CertificateRawData *certificateRawData;

/**
 *  The user-specified display name of the certificate. This is not guaranteed
 *  to be unique. Example: My Certificate.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Aggregate count of the domain mappings with this certificate mapped. This
 *  count includes domain mappings on applications for which the user does not
 *  have VIEWER permissions.Only returned by GET or LIST requests when
 *  specifically requested by the view=FULL_CERTIFICATE option.\@OutputOnly
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *domainMappingsCount;

/**
 *  Topmost applicable domains of this certificate. This certificate applies to
 *  these domains and their subdomains. Example: example.com.\@OutputOnly
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *domainNames;

/**
 *  The time when this certificate expires. To update the renewal time on this
 *  certificate, upload an SSL certificate with a different expiration time
 *  using AuthorizedCertificates.UpdateAuthorizedCertificate.\@OutputOnly
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/**
 *  Relative name of the certificate. This is a unique value autogenerated on
 *  AuthorizedCertificate resource creation. Example: 12345.\@OutputOnly
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Only applicable if this certificate is managed by App Engine. Managed
 *  certificates are tied to the lifecycle of a DomainMapping and cannot be
 *  updated or deleted via the AuthorizedCertificates API. If this certificate
 *  is manually administered by the user, this field will be empty.\@OutputOnly
 */
@property(nonatomic, strong, nullable) GTLRAppengine_ManagedCertificate *managedCertificate;

/**
 *  Full path to the AuthorizedCertificate resource in the API. Example:
 *  apps/myapp/authorizedCertificates/12345.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The full paths to user visible Domain Mapping resources that have this
 *  certificate mapped. Example: apps/myapp/domainMappings/example.com.This may
 *  not represent the full list of mapped domain mappings if the user does not
 *  have VIEWER permissions on all of the applications that have this
 *  certificate mapped. See domain_mappings_count for a complete count.Only
 *  returned by GET or LIST requests when specifically requested by the
 *  view=FULL_CERTIFICATE option.\@OutputOnly
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *visibleDomainMappings;

@end


/**
 *  A domain that a user has been authorized to administer. To authorize use of
 *  a domain, verify ownership via Webmaster Central
 *  (https://www.google.com/webmasters/verification/home).
 */
@interface GTLRAppengine_AuthorizedDomain : GTLRObject

/**
 *  Fully qualified domain name of the domain authorized for use. Example:
 *  example.com.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Full path to the AuthorizedDomain resource in the API. Example:
 *  apps/myapp/authorizedDomains/example.com.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Automatic scaling is based on request rate, response latencies, and other
 *  application metrics.
 */
@interface GTLRAppengine_AutomaticScaling : GTLRObject

/**
 *  The time period that the Autoscaler
 *  (https://cloud.google.com/compute/docs/autoscaler/) should wait before it
 *  starts collecting information from a new instance. This prevents the
 *  autoscaler from collecting information when the instance is initializing,
 *  during which the collected usage would not be reliable. Only applicable in
 *  the App Engine flexible environment.
 */
@property(nonatomic, strong, nullable) GTLRDuration *coolDownPeriod;

/** Target scaling by CPU usage. */
@property(nonatomic, strong, nullable) GTLRAppengine_CpuUtilization *cpuUtilization;

/** Target scaling by disk usage. */
@property(nonatomic, strong, nullable) GTLRAppengine_DiskUtilization *diskUtilization;

/**
 *  Number of concurrent requests an automatic scaling instance can accept
 *  before the scheduler spawns a new instance.Defaults to a runtime-specific
 *  value.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxConcurrentRequests;

/**
 *  Maximum number of idle instances that should be maintained for this version.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxIdleInstances;

/**
 *  Maximum amount of time that a request should wait in the pending queue
 *  before starting a new instance to handle it.
 */
@property(nonatomic, strong, nullable) GTLRDuration *maxPendingLatency;

/**
 *  Maximum number of instances that should be started to handle requests for
 *  this version.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxTotalInstances;

/**
 *  Minimum number of idle instances that should be maintained for this version.
 *  Only applicable for the default version of a service.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minIdleInstances;

/**
 *  Minimum amount of time a request should wait in the pending queue before
 *  starting a new instance to handle it.
 */
@property(nonatomic, strong, nullable) GTLRDuration *minPendingLatency;

/**
 *  Minimum number of running instances that should be maintained for this
 *  version.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minTotalInstances;

/** Target scaling by network usage. */
@property(nonatomic, strong, nullable) GTLRAppengine_NetworkUtilization *networkUtilization;

/** Target scaling by request utilization. */
@property(nonatomic, strong, nullable) GTLRAppengine_RequestUtilization *requestUtilization;

/** Scheduler settings for standard environment. */
@property(nonatomic, strong, nullable) GTLRAppengine_StandardSchedulerSettings *standardSchedulerSettings;

@end


/**
 *  A service with basic scaling will create an instance when the application
 *  receives a request. The instance will be turned down when the app becomes
 *  idle. Basic scaling is ideal for work that is intermittent or driven by user
 *  activity.
 */
@interface GTLRAppengine_BasicScaling : GTLRObject

/**
 *  Duration of time after the last request that an instance must wait before
 *  the instance is shut down.
 */
@property(nonatomic, strong, nullable) GTLRDuration *idleTimeout;

/**
 *  Maximum number of instances to create for this version.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxInstances;

@end


/**
 *  Request message for Firewall.BatchUpdateIngressRules.
 */
@interface GTLRAppengine_BatchUpdateIngressRulesRequest : GTLRObject

/** A list of FirewallRules to replace the existing set. */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_FirewallRule *> *ingressRules;

@end


/**
 *  Response message for Firewall.UpdateAllIngressRules.
 */
@interface GTLRAppengine_BatchUpdateIngressRulesResponse : GTLRObject

/** The full list of ingress FirewallRules for this application. */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_FirewallRule *> *ingressRules;

@end


/**
 *  An SSL certificate obtained from a certificate authority.
 */
@interface GTLRAppengine_CertificateRawData : GTLRObject

/**
 *  Unencrypted PEM encoded RSA private key. This field is set once on
 *  certificate creation and then encrypted. The key size must be 2048 bits or
 *  fewer. Must include the header and footer. Example: <pre> -----BEGIN RSA
 *  PRIVATE KEY----- <unencrypted_key_value> -----END RSA PRIVATE KEY-----
 *  </pre> \@InputOnly
 */
@property(nonatomic, copy, nullable) NSString *privateKey;

/**
 *  PEM encoded x.509 public key certificate. This field is set once on
 *  certificate creation. Must include the header and footer. Example: <pre>
 *  -----BEGIN CERTIFICATE----- <certificate_value> -----END CERTIFICATE-----
 *  </pre>
 */
@property(nonatomic, copy, nullable) NSString *publicCertificate;

@end


/**
 *  Options for the build operations performed as a part of the version
 *  deployment. Only applicable for App Engine flexible environment when
 *  creating a version using source code directly.
 */
@interface GTLRAppengine_CloudBuildOptions : GTLRObject

/**
 *  Path to the yaml file used in deployment, used to determine runtime
 *  configuration details.Required for flexible environment builds.See
 *  https://cloud.google.com/appengine/docs/standard/python/config/appref for
 *  more details.
 */
@property(nonatomic, copy, nullable) NSString *appYamlPath;

/**
 *  The Cloud Build timeout used as part of any dependent builds performed by
 *  version creation. Defaults to 10 minutes.
 */
@property(nonatomic, strong, nullable) GTLRDuration *cloudBuildTimeout;

@end


/**
 *  Docker image that is used to create a container and start a VM instance for
 *  the version that you deploy. Only applicable for instances running in the
 *  App Engine flexible environment.
 */
@interface GTLRAppengine_ContainerInfo : GTLRObject

/**
 *  URI to the hosted container image in Google Container Registry. The URI must
 *  be fully qualified and include a tag or digest. Examples:
 *  "gcr.io/my-project/image:tag" or "gcr.io/my-project/image\@digest"
 */
@property(nonatomic, copy, nullable) NSString *image;

@end


/**
 *  Target scaling by CPU usage.
 */
@interface GTLRAppengine_CpuUtilization : GTLRObject

/** Period of time over which CPU utilization is calculated. */
@property(nonatomic, strong, nullable) GTLRDuration *aggregationWindowLength;

/**
 *  Target CPU utilization ratio to maintain when scaling. Must be between 0 and
 *  1.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetUtilization;

@end


/**
 *  Metadata for the given google.longrunning.Operation during a
 *  google.appengine.v1.CreateVersionRequest.
 */
@interface GTLRAppengine_CreateVersionMetadataV1 : GTLRObject

/**
 *  The Cloud Build ID if one was created as part of the version create.
 *  \@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *cloudBuildId;

@end


/**
 *  Metadata for the given google.longrunning.Operation during a
 *  google.appengine.v1alpha.CreateVersionRequest.
 */
@interface GTLRAppengine_CreateVersionMetadataV1Alpha : GTLRObject

/**
 *  The Cloud Build ID if one was created as part of the version create.
 *  \@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *cloudBuildId;

@end


/**
 *  Metadata for the given google.longrunning.Operation during a
 *  google.appengine.v1beta.CreateVersionRequest.
 */
@interface GTLRAppengine_CreateVersionMetadataV1Beta : GTLRObject

/**
 *  The Cloud Build ID if one was created as part of the version create.
 *  \@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *cloudBuildId;

@end


/**
 *  Request message for Instances.DebugInstance.
 */
@interface GTLRAppengine_DebugInstanceRequest : GTLRObject

/**
 *  Public SSH key to add to the instance. Examples:
 *  [USERNAME]:ssh-rsa [KEY_VALUE] [USERNAME]
 *  [USERNAME]:ssh-rsa [KEY_VALUE] google-ssh
 *  {"userName":"[USERNAME]","expireOn":"[EXPIRE_TIME]"}For more information,
 *  see Adding and Removing SSH Keys
 *  (https://cloud.google.com/compute/docs/instances/adding-removing-ssh-keys).
 */
@property(nonatomic, copy, nullable) NSString *sshKey;

@end


/**
 *  Code and application artifacts used to deploy a version to App Engine.
 */
@interface GTLRAppengine_Deployment : GTLRObject

/**
 *  Options for any Google Cloud Build builds created as a part of this
 *  deployment.These options will only be used if a new build is created, such
 *  as when deploying to the App Engine flexible environment using files or zip.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_CloudBuildOptions *cloudBuildOptions;

/**
 *  The Docker image for the container that runs the version. Only applicable
 *  for instances running in the App Engine flexible environment.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_ContainerInfo *container;

/**
 *  Manifest of the files stored in Google Cloud Storage that are included as
 *  part of this version. All files must be readable using the credentials
 *  supplied with this call.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_Deployment_Files *files;

/** The zip file for this deployment, if this is a zip deployment. */
@property(nonatomic, strong, nullable) GTLRAppengine_ZipInfo *zip;

@end


/**
 *  Manifest of the files stored in Google Cloud Storage that are included as
 *  part of this version. All files must be readable using the credentials
 *  supplied with this call.
 *
 *  @note This class is documented as having more properties of
 *        GTLRAppengine_FileInfo. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRAppengine_Deployment_Files : GTLRObject
@end


/**
 *  Target scaling by disk usage. Only applicable in the App Engine flexible
 *  environment.
 */
@interface GTLRAppengine_DiskUtilization : GTLRObject

/**
 *  Target bytes read per second.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetReadBytesPerSecond;

/**
 *  Target ops read per seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetReadOpsPerSecond;

/**
 *  Target bytes written per second.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetWriteBytesPerSecond;

/**
 *  Target ops written per second.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetWriteOpsPerSecond;

@end


/**
 *  A domain serving an App Engine application.
 */
@interface GTLRAppengine_DomainMapping : GTLRObject

/**
 *  Relative name of the domain serving the application. Example: example.com.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Full path to the DomainMapping resource in the API. Example:
 *  apps/myapp/domainMapping/example.com.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The resource records required to configure this domain mapping. These
 *  records must be added to the domain's DNS configuration in order to serve
 *  the application via this domain mapping.\@OutputOnly
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_ResourceRecord *> *resourceRecords;

/**
 *  SSL configuration for this domain. If unconfigured, this domain will not
 *  serve with SSL.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_SslSettings *sslSettings;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for Empty is empty JSON object {}.
 */
@interface GTLRAppengine_Empty : GTLRObject
@end


/**
 *  Cloud Endpoints (https://cloud.google.com/endpoints) configuration. The
 *  Endpoints API Service provides tooling for serving Open API and gRPC
 *  endpoints via an NGINX proxy. Only valid for App Engine Flexible environment
 *  deployments.The fields here refer to the name and configuration ID of a
 *  "service" resource in the Service Management API
 *  (https://cloud.google.com/service-management/overview).
 */
@interface GTLRAppengine_EndpointsApiService : GTLRObject

/**
 *  Endpoints service configuration ID as specified by the Service Management
 *  API. For example "2016-09-19r1".By default, the rollout strategy for
 *  Endpoints is RolloutStrategy.FIXED. This means that Endpoints starts up with
 *  a particular configuration ID. When a new configuration is rolled out,
 *  Endpoints must be given the new configuration ID. The config_id field is
 *  used to give the configuration ID and is required in this case.Endpoints
 *  also has a rollout strategy called RolloutStrategy.MANAGED. When using this,
 *  Endpoints fetches the latest configuration and does not need the
 *  configuration ID. In this case, config_id must be omitted.
 */
@property(nonatomic, copy, nullable) NSString *configId;

/**
 *  Enable or disable trace sampling. By default, this is set to false for
 *  enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableTraceSampling;

/**
 *  Endpoints service name which is the name of the "service" resource in the
 *  Service Management API. For example "myapi.endpoints.myproject.cloud.goog"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Endpoints rollout strategy. If FIXED, config_id must be specified. If
 *  MANAGED, config_id must be omitted.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_EndpointsApiService_RolloutStrategy_Fixed Endpoints
 *        service configuration ID will be fixed to the configuration ID
 *        specified by config_id. (Value: "FIXED")
 *    @arg @c kGTLRAppengine_EndpointsApiService_RolloutStrategy_Managed
 *        Endpoints service configuration ID will be updated with each rollout.
 *        (Value: "MANAGED")
 *    @arg @c kGTLRAppengine_EndpointsApiService_RolloutStrategy_UnspecifiedRolloutStrategy
 *        Not specified. Defaults to FIXED. (Value:
 *        "UNSPECIFIED_ROLLOUT_STRATEGY")
 */
@property(nonatomic, copy, nullable) NSString *rolloutStrategy;

@end


/**
 *  The entrypoint for the application.
 */
@interface GTLRAppengine_Entrypoint : GTLRObject

/** The format should be a shell command that can be fed to bash -c. */
@property(nonatomic, copy, nullable) NSString *shell;

@end


/**
 *  Custom static error page to be served when an error occurs.
 */
@interface GTLRAppengine_ErrorHandler : GTLRObject

/**
 *  Error condition this handler applies to.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_ErrorHandler_ErrorCode_ErrorCodeDefault All other
 *        error types. (Value: "ERROR_CODE_DEFAULT")
 *    @arg @c kGTLRAppengine_ErrorHandler_ErrorCode_ErrorCodeDosApiDenial Client
 *        blocked by the application's Denial of Service protection
 *        configuration. (Value: "ERROR_CODE_DOS_API_DENIAL")
 *    @arg @c kGTLRAppengine_ErrorHandler_ErrorCode_ErrorCodeOverQuota
 *        Application has exceeded a resource quota. (Value:
 *        "ERROR_CODE_OVER_QUOTA")
 *    @arg @c kGTLRAppengine_ErrorHandler_ErrorCode_ErrorCodeTimeout Deadline
 *        reached before the application responds. (Value: "ERROR_CODE_TIMEOUT")
 *    @arg @c kGTLRAppengine_ErrorHandler_ErrorCode_ErrorCodeUnspecified Not
 *        specified. ERROR_CODE_DEFAULT is assumed. (Value:
 *        "ERROR_CODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *errorCode;

/** MIME type of file. Defaults to text/html. */
@property(nonatomic, copy, nullable) NSString *mimeType;

/** Static file content to be served for this error. */
@property(nonatomic, copy, nullable) NSString *staticFile;

@end


/**
 *  The feature specific settings to be used in the application. These define
 *  behaviors that are user configurable.
 */
@interface GTLRAppengine_FeatureSettings : GTLRObject

/**
 *  Boolean value indicating if split health checks should be used instead of
 *  the legacy health checks. At an app.yaml level, this means defaulting to
 *  'readiness_check' and 'liveness_check' values instead of 'health_check'
 *  ones. Once the legacy 'health_check' behavior is deprecated, and this value
 *  is always true, this setting can be removed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *splitHealthChecks;

@end


/**
 *  Single source file that is part of the version to be deployed. Each source
 *  file that is deployed must be specified separately.
 */
@interface GTLRAppengine_FileInfo : GTLRObject

/**
 *  The MIME type of the file.Defaults to the value from Google Cloud Storage.
 */
@property(nonatomic, copy, nullable) NSString *mimeType;

/** The SHA1 hash of the file, in hex. */
@property(nonatomic, copy, nullable) NSString *sha1Sum;

/**
 *  URL source to use to fetch this file. Must be a URL to a resource in Google
 *  Cloud Storage in the form
 *  'http(s)://storage.googleapis.com/<bucket>/<object>'.
 */
@property(nonatomic, copy, nullable) NSString *sourceUrl;

@end


/**
 *  A single firewall rule that is evaluated against incoming traffic and
 *  provides an action to take on matched requests.
 */
@interface GTLRAppengine_FirewallRule : GTLRObject

/**
 *  The action to take on matched requests.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_FirewallRule_Action_Allow Matching requests are
 *        allowed. (Value: "ALLOW")
 *    @arg @c kGTLRAppengine_FirewallRule_Action_Deny Matching requests are
 *        denied. (Value: "DENY")
 *    @arg @c kGTLRAppengine_FirewallRule_Action_UnspecifiedAction Value
 *        "UNSPECIFIED_ACTION"
 */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  An optional string description of this rule. This field has a maximum length
 *  of 100 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  A positive integer between 1, Int32.MaxValue-1 that defines the order of
 *  rule evaluation. Rules with the lowest priority are evaluated first.A
 *  default rule at priority Int32.MaxValue matches all IPv4 and IPv6 traffic
 *  when no previous rule matches. Only the action of this rule can be modified
 *  by the user.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *priority;

/**
 *  IP address or range, defined using CIDR notation, of requests that this rule
 *  applies to. You can use the wildcard character "*" to match all IPs
 *  equivalent to "0/0" and "::/0" together. Examples: 192.168.1.1 or
 *  192.168.0.0/16 or 2001:db8::/32 or
 *  2001:0db8:0000:0042:0000:8a2e:0370:7334.<p>Truncation will be silently
 *  performed on addresses which are not properly truncated. For example,
 *  1.2.3.4/24 is accepted as the same address as 1.2.3.0/24. Similarly, for
 *  IPv6, 2001:db8::1/32 is accepted as the same address as 2001:db8::/32.
 */
@property(nonatomic, copy, nullable) NSString *sourceRange;

@end


/**
 *  Health checking configuration for VM instances. Unhealthy instances are
 *  killed and replaced with new instances. Only applicable for instances in App
 *  Engine flexible environment.
 */
@interface GTLRAppengine_HealthCheck : GTLRObject

/** Interval between health checks. */
@property(nonatomic, strong, nullable) GTLRDuration *checkInterval;

/**
 *  Whether to explicitly disable health checks for this instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableHealthCheck;

/**
 *  Number of consecutive successful health checks required before receiving
 *  traffic.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *healthyThreshold;

/**
 *  Host header to send when performing an HTTP health check. Example:
 *  "myapp.appspot.com"
 */
@property(nonatomic, copy, nullable) NSString *host;

/**
 *  Number of consecutive failed health checks required before an instance is
 *  restarted.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *restartThreshold;

/** Time before the health check is considered failed. */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/**
 *  Number of consecutive failed health checks required before removing traffic.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *unhealthyThreshold;

@end


/**
 *  Identity-Aware Proxy
 */
@interface GTLRAppengine_IdentityAwareProxy : GTLRObject

/**
 *  Whether the serving infrastructure will authenticate and authorize all
 *  incoming requests.If true, the oauth2_client_id and oauth2_client_secret
 *  fields must be non-empty.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

/** OAuth2 client ID to use for the authentication flow. */
@property(nonatomic, copy, nullable) NSString *oauth2ClientId;

/**
 *  OAuth2 client secret to use for the authentication flow.For security
 *  reasons, this value cannot be retrieved via the API. Instead, the SHA-256
 *  hash of the value is returned in the oauth2_client_secret_sha256
 *  field.\@InputOnly
 */
@property(nonatomic, copy, nullable) NSString *oauth2ClientSecret;

/** Hex-encoded SHA-256 hash of the client secret.\@OutputOnly */
@property(nonatomic, copy, nullable) NSString *oauth2ClientSecretSha256;

@end


/**
 *  An Instance resource is the computing unit that App Engine uses to
 *  automatically scale an application.
 */
@interface GTLRAppengine_Instance : GTLRObject

/** App Engine release this instance is running on.\@OutputOnly */
@property(nonatomic, copy, nullable) NSString *appEngineRelease;

/**
 *  Availability of the instance.\@OutputOnly
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_Instance_Availability_Dynamic Value "DYNAMIC"
 *    @arg @c kGTLRAppengine_Instance_Availability_Resident Value "RESIDENT"
 *    @arg @c kGTLRAppengine_Instance_Availability_Unspecified Value
 *        "UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *availability;

/**
 *  Average latency (ms) over the last minute.\@OutputOnly
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *averageLatency;

/**
 *  Number of errors since this instance was started.\@OutputOnly
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *errors;

/**
 *  Relative name of the instance within the version. Example:
 *  instance-1.\@OutputOnly
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Total memory in use (bytes).\@OutputOnly
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memoryUsage;

/**
 *  Full path to the Instance resource in the API. Example:
 *  apps/myapp/services/default/versions/v1/instances/instance-1.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Average queries per second (QPS) over the last minute.\@OutputOnly
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *qps;

/**
 *  Number of requests since this instance was started.\@OutputOnly
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requests;

/** Time that this instance was started.\@OutputOnly */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Whether this instance is in debug mode. Only applicable for instances in App
 *  Engine flexible environment.\@OutputOnly
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *vmDebugEnabled;

/**
 *  Virtual machine ID of this instance. Only applicable for instances in App
 *  Engine flexible environment.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *vmId;

/**
 *  The IP address of this instance. Only applicable for instances in App Engine
 *  flexible environment.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *vmIp;

/**
 *  Name of the virtual machine where this instance lives. Only applicable for
 *  instances in App Engine flexible environment.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *vmName;

/**
 *  Status of the virtual machine where this instance lives. Only applicable for
 *  instances in App Engine flexible environment.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *vmStatus;

/**
 *  Zone where the virtual machine is located. Only applicable for instances in
 *  App Engine flexible environment.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *vmZoneName;

@end


/**
 *  Third-party Python runtime library that is required by the application.
 */
@interface GTLRAppengine_Library : GTLRObject

/** Name of the library. Example: "django". */
@property(nonatomic, copy, nullable) NSString *name;

/** Version of the library to select, or "latest". */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Response message for AuthorizedCertificates.ListAuthorizedCertificates.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "certificates" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAppengine_ListAuthorizedCertificatesResponse : GTLRCollectionObject

/**
 *  The SSL certificates the user is authorized to administer.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_AuthorizedCertificate *> *certificates;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for AuthorizedDomains.ListAuthorizedDomains.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "domains" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAppengine_ListAuthorizedDomainsResponse : GTLRCollectionObject

/**
 *  The authorized domains belonging to the user.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_AuthorizedDomain *> *domains;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for DomainMappings.ListDomainMappings.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "domainMappings" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRAppengine_ListDomainMappingsResponse : GTLRCollectionObject

/**
 *  The domain mappings for the application.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_DomainMapping *> *domainMappings;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for Firewall.ListIngressRules.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "ingressRules" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAppengine_ListIngressRulesResponse : GTLRCollectionObject

/**
 *  The ingress FirewallRules for this application.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_FirewallRule *> *ingressRules;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for Instances.ListInstances.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "instances" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAppengine_ListInstancesResponse : GTLRCollectionObject

/**
 *  The instances belonging to the requested version.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_Instance *> *instances;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAppengine_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAppengine_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_Operation *> *operations;

@end


/**
 *  Response message for Services.ListServices.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "services" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAppengine_ListServicesResponse : GTLRCollectionObject

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The services belonging to the requested application.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_Service *> *services;

@end


/**
 *  Response message for Versions.ListVersions.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "versions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAppengine_ListVersionsResponse : GTLRCollectionObject

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The versions belonging to the requested service.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_Version *> *versions;

@end


/**
 *  Health checking configuration for VM instances. Unhealthy instances are
 *  killed and replaced with new instances.
 */
@interface GTLRAppengine_LivenessCheck : GTLRObject

/** Interval between health checks. */
@property(nonatomic, strong, nullable) GTLRDuration *checkInterval;

/**
 *  Number of consecutive failed checks required before considering the VM
 *  unhealthy.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failureThreshold;

/**
 *  Host header to send when performing a HTTP Liveness check. Example:
 *  "myapp.appspot.com"
 */
@property(nonatomic, copy, nullable) NSString *host;

/** The initial delay before starting to execute the checks. */
@property(nonatomic, strong, nullable) GTLRDuration *initialDelay;

/** The request path. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Number of consecutive successful checks required before considering the VM
 *  healthy.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *successThreshold;

/** Time before the check is considered failed. */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRAppengine_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRAppengine_Location_Labels *labels;

/** The canonical id for this location. For example: "us-east1". */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: "projects/example-project/locations/us-east1"
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRAppengine_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRAppengine_Location_Metadata : GTLRObject
@end


/**
 *  Metadata for the given google.cloud.location.Location.
 */
@interface GTLRAppengine_LocationMetadata : GTLRObject

/**
 *  App Engine flexible environment is available in the given
 *  location.\@OutputOnly
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *flexibleEnvironmentAvailable;

/**
 *  App Engine standard environment is available in the given
 *  location.\@OutputOnly
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *standardEnvironmentAvailable;

@end


/**
 *  A certificate managed by App Engine.
 */
@interface GTLRAppengine_ManagedCertificate : GTLRObject

/**
 *  Time at which the certificate was last renewed. The renewal process is fully
 *  managed. Certificate renewal will automatically occur before the certificate
 *  expires. Renewal errors can be tracked via ManagementStatus.\@OutputOnly
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastRenewalTime;

/**
 *  Status of certificate management. Refers to the most recent certificate
 *  acquisition or renewal attempt.\@OutputOnly
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_ManagedCertificate_Status_FailedPermanent All
 *        renewal attempts have been exhausted, likely due to an invalid DNS
 *        setup. (Value: "FAILED_PERMANENT")
 *    @arg @c kGTLRAppengine_ManagedCertificate_Status_FailedRetryingCaaChecking
 *        Most recent renewal failed due to a CAA retrieval failure. This means
 *        that the domain's DNS provider does not properly handle CAA records,
 *        failing requests for CAA records when no CAA records are defined.
 *        Renewals will continue to fail until the DNS provider is changed or a
 *        CAA record is added for the given domain. The last successfully
 *        provisioned certificate may still be serving. (Value:
 *        "FAILED_RETRYING_CAA_CHECKING")
 *    @arg @c kGTLRAppengine_ManagedCertificate_Status_FailedRetryingCaaForbidden
 *        Most recent renewal failed due to an explicit CAA record that does not
 *        include the in-use CA, Let's Encrypt. Renewals will continue to fail
 *        until the CAA is reconfigured. The last successfully provisioned
 *        certificate may still be serving. (Value:
 *        "FAILED_RETRYING_CAA_FORBIDDEN")
 *    @arg @c kGTLRAppengine_ManagedCertificate_Status_FailedRetryingNotVisible
 *        Most recent renewal failed due to an invalid DNS setup and will be
 *        retried. Renewal attempts will continue to fail until the certificate
 *        domain's DNS configuration is fixed. The last successfully provisioned
 *        certificate may still be serving. (Value:
 *        "FAILED_RETRYING_NOT_VISIBLE")
 *    @arg @c kGTLRAppengine_ManagedCertificate_Status_ManagementStatusUnspecified
 *        Value "MANAGEMENT_STATUS_UNSPECIFIED"
 *    @arg @c kGTLRAppengine_ManagedCertificate_Status_Ok Certificate was
 *        successfully obtained and inserted into the serving system. (Value:
 *        "OK")
 *    @arg @c kGTLRAppengine_ManagedCertificate_Status_Pending Certificate is
 *        under active attempts to acquire or renew. (Value: "PENDING")
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  A service with manual scaling runs continuously, allowing you to perform
 *  complex initialization and rely on the state of its memory over time.
 */
@interface GTLRAppengine_ManualScaling : GTLRObject

/**
 *  Number of instances to assign to the service at the start. This number can
 *  later be altered by using the Modules API
 *  (https://cloud.google.com/appengine/docs/python/modules/functions)
 *  set_num_instances() function.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *instances;

@end


/**
 *  Extra network settings. Only applicable in the App Engine flexible
 *  environment.
 */
@interface GTLRAppengine_Network : GTLRObject

/**
 *  List of ports, or port pairs, to forward from the virtual machine to the
 *  application container. Only applicable in the App Engine flexible
 *  environment.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *forwardedPorts;

/**
 *  Tag to apply to the instance during creation. Only applicable in the App
 *  Engine flexible environment.
 */
@property(nonatomic, copy, nullable) NSString *instanceTag;

/**
 *  Google Compute Engine network where the virtual machines are created.
 *  Specify the short name, not the resource path.Defaults to default.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Google Cloud Platform sub-network where the virtual machines are created.
 *  Specify the short name, not the resource path.If a subnetwork name is
 *  specified, a network name will also be required unless it is for the default
 *  network.
 *  If the network that the instance is being created in is a Legacy network,
 *  then the IP address is allocated from the IPv4Range.
 *  If the network that the instance is being created in is an auto Subnet Mode
 *  Network, then only network name should be specified (not the
 *  subnetwork_name) and the IP address is created from the IPCidrRange of the
 *  subnetwork that exists in that zone for that network.
 *  If the network that the instance is being created in is a custom Subnet Mode
 *  Network, then the subnetwork_name must be specified and the IP address is
 *  created from the IPCidrRange of the subnetwork.If specified, the subnetwork
 *  must exist in the same region as the App Engine flexible environment
 *  application.
 */
@property(nonatomic, copy, nullable) NSString *subnetworkName;

@end


/**
 *  Target scaling by network usage. Only applicable in the App Engine flexible
 *  environment.
 */
@interface GTLRAppengine_NetworkUtilization : GTLRObject

/**
 *  Target bytes received per second.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetReceivedBytesPerSecond;

/**
 *  Target packets received per second.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetReceivedPacketsPerSecond;

/**
 *  Target bytes sent per second.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetSentBytesPerSecond;

/**
 *  Target packets sent per second.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetSentPacketsPerSecond;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRAppengine_Operation : GTLRObject

/**
 *  If the value is false, it means the operation is still in progress. If true,
 *  the operation is completed, and either error or response is available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRAppengine_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the name should
 *  have the format of operations/some/unique/name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as Delete, the response is
 *  google.protobuf.Empty. If the original method is standard Get/Create/Update,
 *  the response should be the resource. For other methods, the response should
 *  have the type XxxResponse, where Xxx is the original method name. For
 *  example, if the original method name is TakeSnapshot(), the inferred
 *  response type is TakeSnapshotResponse.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRAppengine_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as Delete, the response is
 *  google.protobuf.Empty. If the original method is standard Get/Create/Update,
 *  the response should be the resource. For other methods, the response should
 *  have the type XxxResponse, where Xxx is the original method name. For
 *  example, if the original method name is TakeSnapshot(), the inferred
 *  response type is TakeSnapshotResponse.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRAppengine_Operation_Response : GTLRObject
@end


/**
 *  Metadata for the given google.longrunning.Operation.
 */
@interface GTLRAppengine_OperationMetadata : GTLRObject

/** Timestamp that this operation completed.\@OutputOnly */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Timestamp that this operation was created.\@OutputOnly */
@property(nonatomic, strong, nullable) GTLRDateTime *insertTime;

/**
 *  API method that initiated this operation. Example:
 *  google.appengine.v1beta4.Version.CreateVersion.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *method;

/**
 *  Type of this operation. Deprecated, use method field instead. Example:
 *  "create_version".\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *operationType;

/**
 *  Name of the resource that this operation is acting on. Example:
 *  apps/myapp/modules/default.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *target;

/** User who requested this operation.\@OutputOnly */
@property(nonatomic, copy, nullable) NSString *user;

@end


/**
 *  Metadata for the given google.longrunning.Operation.
 */
@interface GTLRAppengine_OperationMetadataV1 : GTLRObject

@property(nonatomic, strong, nullable) GTLRAppengine_CreateVersionMetadataV1 *createVersionMetadata;

/** Time that this operation completed.\@OutputOnly */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Ephemeral message that may change every time the operation is polled.
 *  \@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *ephemeralMessage;

/** Time that this operation was created.\@OutputOnly */
@property(nonatomic, strong, nullable) GTLRDateTime *insertTime;

/**
 *  API method that initiated this operation. Example:
 *  google.appengine.v1.Versions.CreateVersion.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *method;

/**
 *  Name of the resource that this operation is acting on. Example:
 *  apps/myapp/services/default.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *target;

/** User who requested this operation.\@OutputOnly */
@property(nonatomic, copy, nullable) NSString *user;

/** Durable messages that persist on every operation poll. \@OutputOnly */
@property(nonatomic, strong, nullable) NSArray<NSString *> *warning;

@end


/**
 *  Metadata for the given google.longrunning.Operation.
 */
@interface GTLRAppengine_OperationMetadataV1Alpha : GTLRObject

@property(nonatomic, strong, nullable) GTLRAppengine_CreateVersionMetadataV1Alpha *createVersionMetadata;

/** Time that this operation completed.\@OutputOnly */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Ephemeral message that may change every time the operation is polled.
 *  \@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *ephemeralMessage;

/** Time that this operation was created.\@OutputOnly */
@property(nonatomic, strong, nullable) GTLRDateTime *insertTime;

/**
 *  API method that initiated this operation. Example:
 *  google.appengine.v1alpha.Versions.CreateVersion.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *method;

/**
 *  Name of the resource that this operation is acting on. Example:
 *  apps/myapp/services/default.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *target;

/** User who requested this operation.\@OutputOnly */
@property(nonatomic, copy, nullable) NSString *user;

/** Durable messages that persist on every operation poll. \@OutputOnly */
@property(nonatomic, strong, nullable) NSArray<NSString *> *warning;

@end


/**
 *  Metadata for the given google.longrunning.Operation.
 */
@interface GTLRAppengine_OperationMetadataV1Beta : GTLRObject

@property(nonatomic, strong, nullable) GTLRAppengine_CreateVersionMetadataV1Beta *createVersionMetadata;

/** Time that this operation completed.\@OutputOnly */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Ephemeral message that may change every time the operation is polled.
 *  \@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *ephemeralMessage;

/** Time that this operation was created.\@OutputOnly */
@property(nonatomic, strong, nullable) GTLRDateTime *insertTime;

/**
 *  API method that initiated this operation. Example:
 *  google.appengine.v1beta.Versions.CreateVersion.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *method;

/**
 *  Name of the resource that this operation is acting on. Example:
 *  apps/myapp/services/default.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *target;

/** User who requested this operation.\@OutputOnly */
@property(nonatomic, copy, nullable) NSString *user;

/** Durable messages that persist on every operation poll. \@OutputOnly */
@property(nonatomic, strong, nullable) NSArray<NSString *> *warning;

@end


/**
 *  Metadata for the given google.longrunning.Operation.
 */
@interface GTLRAppengine_OperationMetadataV1Beta5 : GTLRObject

/** Timestamp that this operation completed.\@OutputOnly */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Timestamp that this operation was created.\@OutputOnly */
@property(nonatomic, strong, nullable) GTLRDateTime *insertTime;

/**
 *  API method name that initiated this operation. Example:
 *  google.appengine.v1beta5.Version.CreateVersion.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *method;

/**
 *  Name of the resource that this operation is acting on. Example:
 *  apps/myapp/services/default.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *target;

/** User who requested this operation.\@OutputOnly */
@property(nonatomic, copy, nullable) NSString *user;

@end


/**
 *  Readiness checking configuration for VM instances. Unhealthy instances are
 *  removed from traffic rotation.
 */
@interface GTLRAppengine_ReadinessCheck : GTLRObject

/**
 *  A maximum time limit on application initialization, measured from moment the
 *  application successfully replies to a healthcheck until it is ready to serve
 *  traffic.
 */
@property(nonatomic, strong, nullable) GTLRDuration *appStartTimeout;

/** Interval between health checks. */
@property(nonatomic, strong, nullable) GTLRDuration *checkInterval;

/**
 *  Number of consecutive failed checks required before removing traffic.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failureThreshold;

/**
 *  Host header to send when performing a HTTP Readiness check. Example:
 *  "myapp.appspot.com"
 */
@property(nonatomic, copy, nullable) NSString *host;

/** The request path. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Number of consecutive successful checks required before receiving traffic.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *successThreshold;

/** Time before the check is considered failed. */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

@end


/**
 *  Request message for 'Applications.RepairApplication'.
 */
@interface GTLRAppengine_RepairApplicationRequest : GTLRObject
@end


/**
 *  Target scaling by request utilization. Only applicable in the App Engine
 *  flexible environment.
 */
@interface GTLRAppengine_RequestUtilization : GTLRObject

/**
 *  Target number of concurrent requests.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetConcurrentRequests;

/**
 *  Target requests per second.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetRequestCountPerSecond;

@end


/**
 *  A DNS resource record.
 */
@interface GTLRAppengine_ResourceRecord : GTLRObject

/**
 *  Relative name of the object affected by this record. Only applicable for
 *  CNAME records. Example: 'www'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Data for this record. Values vary by record type, as defined in RFC 1035
 *  (section 5) and RFC 1034 (section 3.6.1).
 */
@property(nonatomic, copy, nullable) NSString *rrdata;

/**
 *  Resource record type. Example: AAAA.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_ResourceRecord_Type_A An A resource record. Data is
 *        an IPv4 address. (Value: "A")
 *    @arg @c kGTLRAppengine_ResourceRecord_Type_Aaaa An AAAA resource record.
 *        Data is an IPv6 address. (Value: "AAAA")
 *    @arg @c kGTLRAppengine_ResourceRecord_Type_Cname A CNAME resource record.
 *        Data is a domain name to be aliased. (Value: "CNAME")
 *    @arg @c kGTLRAppengine_ResourceRecord_Type_RecordTypeUnspecified An
 *        unknown resource record. (Value: "RECORD_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Machine resources for a version.
 */
@interface GTLRAppengine_Resources : GTLRObject

/**
 *  Number of CPU cores needed.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cpu;

/**
 *  Disk size (GB) needed.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *diskGb;

/**
 *  Memory (GB) needed.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memoryGb;

/** User specified volumes. */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_Volume *> *volumes;

@end


/**
 *  Executes a script to handle the request that matches the URL pattern.
 */
@interface GTLRAppengine_ScriptHandler : GTLRObject

/** Path to the script from the application root directory. */
@property(nonatomic, copy, nullable) NSString *scriptPath;

@end


/**
 *  A Service resource is a logical component of an application that can share
 *  state and communicate in a secure fashion with other services. For example,
 *  an application that handles customer requests might include separate
 *  services to handle tasks such as backend data analysis or API requests from
 *  mobile devices. Each service has a collection of versions that define a
 *  specific set of code used to implement the functionality of that service.
 */
@interface GTLRAppengine_Service : GTLRObject

/**
 *  Relative name of the service within the application. Example:
 *  default.\@OutputOnly
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Full path to the Service resource in the API. Example:
 *  apps/myapp/services/default.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Mapping that defines fractional HTTP traffic diversion to different versions
 *  within the service.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_TrafficSplit *split;

@end


/**
 *  SSL configuration for a DomainMapping resource.
 */
@interface GTLRAppengine_SslSettings : GTLRObject

/**
 *  ID of the AuthorizedCertificate resource configuring SSL for the
 *  application. Clearing this field will remove SSL support.By default, a
 *  managed certificate is automatically created for every domain mapping. To
 *  omit SSL support or to configure SSL manually, specify
 *  SslManagementType.MANUAL on a CREATE or UPDATE request. You must be
 *  authorized to administer the AuthorizedCertificate resource to manually map
 *  it to a DomainMapping resource. Example: 12345.
 */
@property(nonatomic, copy, nullable) NSString *certificateId;

/**
 *  ID of the managed AuthorizedCertificate resource currently being
 *  provisioned, if applicable. Until the new managed certificate has been
 *  successfully provisioned, the previous SSL state will be preserved. Once the
 *  provisioning process completes, the certificate_id field will reflect the
 *  new managed certificate and this field will be left empty. To remove SSL
 *  support while there is still a pending managed certificate, clear the
 *  certificate_id field with an UpdateDomainMappingRequest.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *pendingManagedCertificateId;

/**
 *  SSL management type for this domain. If AUTOMATIC, a managed certificate is
 *  automatically provisioned. If MANUAL, certificate_id must be manually
 *  specified in order to configure SSL for this domain.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_SslSettings_SslManagementType_Automatic SSL support
 *        for this domain is configured automatically. The mapped SSL
 *        certificate will be automatically renewed. (Value: "AUTOMATIC")
 *    @arg @c kGTLRAppengine_SslSettings_SslManagementType_Manual SSL support
 *        for this domain is configured manually by the user. Either the domain
 *        has no SSL support or a user-obtained SSL certificate has been
 *        explictly mapped to this domain. (Value: "MANUAL")
 *    @arg @c kGTLRAppengine_SslSettings_SslManagementType_SslManagementTypeUnspecified
 *        Defaults to AUTOMATIC. (Value: "SSL_MANAGEMENT_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *sslManagementType;

@end


/**
 *  Scheduler settings for standard environment.
 */
@interface GTLRAppengine_StandardSchedulerSettings : GTLRObject

/**
 *  Maximum number of instances to run for this version. Set to zero to disable
 *  max_instances configuration.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxInstances;

/**
 *  Minimum number of instances to run for this version. Set to zero to disable
 *  min_instances configuration.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minInstances;

/**
 *  Target CPU utilization ratio to maintain when scaling.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetCpuUtilization;

/**
 *  Target throughput utilization ratio to maintain when scaling
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetThroughputUtilization;

@end


/**
 *  Files served directly to the user for a given URL, such as images, CSS
 *  stylesheets, or JavaScript source files. Static file handlers describe which
 *  files in the application directory are static files, and which URLs serve
 *  them.
 */
@interface GTLRAppengine_StaticFilesHandler : GTLRObject

/**
 *  Whether files should also be uploaded as code data. By default, files
 *  declared in static file handlers are uploaded as static data and are only
 *  served to end users; they cannot be read by the application. If enabled,
 *  uploads are charged against both your code and static data storage resource
 *  quotas.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *applicationReadable;

/**
 *  Time a static file served by this handler should be cached by web proxies
 *  and browsers.
 */
@property(nonatomic, strong, nullable) GTLRDuration *expiration;

/** HTTP headers to use for all responses from these URLs. */
@property(nonatomic, strong, nullable) GTLRAppengine_StaticFilesHandler_HttpHeaders *httpHeaders;

/**
 *  MIME type used to serve all files served by this handler.Defaults to
 *  file-specific MIME types, which are derived from each file's filename
 *  extension.
 */
@property(nonatomic, copy, nullable) NSString *mimeType;

/**
 *  Path to the static files matched by the URL pattern, from the application
 *  root directory. The path can refer to text matched in groupings in the URL
 *  pattern.
 */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Whether this handler should match the request if the file referenced by the
 *  handler does not exist.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requireMatchingFile;

/**
 *  Regular expression that matches the file paths for all files that should be
 *  referenced by this handler.
 */
@property(nonatomic, copy, nullable) NSString *uploadPathRegex;

@end


/**
 *  HTTP headers to use for all responses from these URLs.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRAppengine_StaticFilesHandler_HttpHeaders : GTLRObject
@end


/**
 *  The Status type defines a logical error model that is suitable for different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  gRPC (https://github.com/grpc). The error model is designed to be:
 *  Simple to use and understand for most users
 *  Flexible enough to meet unexpected needsOverviewThe Status message contains
 *  three pieces of data: error code, error message, and error details. The
 *  error code should be an enum value of google.rpc.Code, but it may accept
 *  additional error codes if needed. The error message should be a
 *  developer-facing English message that helps developers understand and
 *  resolve the error. If a localized user-facing error message is needed, put
 *  the localized message in the error details or localize it in the client. The
 *  optional error details may contain arbitrary information about the error.
 *  There is a predefined set of error detail types in the package google.rpc
 *  that can be used for common error conditions.Language mappingThe Status
 *  message is the logical representation of the error model, but it is not
 *  necessarily the actual wire format. When the Status message is exposed in
 *  different client libraries and different wire protocols, it can be mapped
 *  differently. For example, it will likely be mapped to some exceptions in
 *  Java, but more likely mapped to some error codes in C.Other usesThe error
 *  model and the Status message can be used in a variety of environments,
 *  either with or without APIs, to provide a consistent developer experience
 *  across different environments.Example uses of this error model include:
 *  Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the Status in the normal response to indicate the partial
 *  errors.
 *  Workflow errors. A typical workflow has multiple steps. Each step may have a
 *  Status message for error reporting.
 *  Batch operations. If a client uses batch request and batch response, the
 *  Status message should be used directly inside batch response, one for each
 *  error sub-response.
 *  Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the Status message.
 *  Logging. If some API errors are stored in logs, the message Status could be
 *  used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRAppengine_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRAppengine_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRAppengine_Status_Details_Item : GTLRObject
@end


/**
 *  Traffic routing configuration for versions within a single service. Traffic
 *  splits define how traffic directed to the service is assigned to versions.
 */
@interface GTLRAppengine_TrafficSplit : GTLRObject

/**
 *  Mapping from version IDs within the service to fractional (0.000, 1]
 *  allocations of traffic for that version. Each version can be specified only
 *  once, but some versions in the service may not have any traffic allocation.
 *  Services that have traffic allocated cannot be deleted until either the
 *  service is deleted or their traffic allocation is removed. Allocations must
 *  sum to 1. Up to two decimal place precision is supported for IP-based splits
 *  and up to three decimal places is supported for cookie-based splits.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_TrafficSplit_Allocations *allocations;

/**
 *  Mechanism used to determine which version a request is sent to. The traffic
 *  selection algorithm will be stable for either type until allocations are
 *  changed.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_TrafficSplit_ShardBy_Cookie Diversion based on a
 *        specially named cookie, "GOOGAPPUID." The cookie must be set by the
 *        application itself or no diversion will occur. (Value: "COOKIE")
 *    @arg @c kGTLRAppengine_TrafficSplit_ShardBy_Ip Diversion based on applying
 *        the modulus operation to a fingerprint of the IP address. (Value:
 *        "IP")
 *    @arg @c kGTLRAppengine_TrafficSplit_ShardBy_Random Diversion based on
 *        weighted random assignment. An incoming request is randomly routed to
 *        a version in the traffic split, with probability proportional to the
 *        version's traffic share. (Value: "RANDOM")
 *    @arg @c kGTLRAppengine_TrafficSplit_ShardBy_Unspecified Diversion method
 *        unspecified. (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *shardBy;

@end


/**
 *  Mapping from version IDs within the service to fractional (0.000, 1]
 *  allocations of traffic for that version. Each version can be specified only
 *  once, but some versions in the service may not have any traffic allocation.
 *  Services that have traffic allocated cannot be deleted until either the
 *  service is deleted or their traffic allocation is removed. Allocations must
 *  sum to 1. Up to two decimal place precision is supported for IP-based splits
 *  and up to three decimal places is supported for cookie-based splits.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of doubleValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRAppengine_TrafficSplit_Allocations : GTLRObject
@end


/**
 *  Rules to match an HTTP request and dispatch that request to a service.
 */
@interface GTLRAppengine_UrlDispatchRule : GTLRObject

/**
 *  Domain name to match against. The wildcard "*" is supported if specified
 *  before a period: "*.".Defaults to matching all domains: "*".
 */
@property(nonatomic, copy, nullable) NSString *domain;

/**
 *  Pathname within the host. Must start with a "/". A single "*" can be
 *  included at the end of the path.The sum of the lengths of the domain and
 *  path may not exceed 100 characters.
 */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Resource ID of a service in this application that should serve the matched
 *  request. The service must already exist. Example: default.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  URL pattern and description of how the URL should be handled. App Engine can
 *  handle URLs by executing application code or by serving static files
 *  uploaded with the version, such as images, CSS, or JavaScript.
 */
@interface GTLRAppengine_UrlMap : GTLRObject

/** Uses API Endpoints to handle requests. */
@property(nonatomic, strong, nullable) GTLRAppengine_ApiEndpointHandler *apiEndpoint;

/**
 *  Action to take when users access resources that require authentication.
 *  Defaults to redirect.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_UrlMap_AuthFailAction_AuthFailActionRedirect
 *        Redirects user to "accounts.google.com". The user is redirected back
 *        to the application URL after signing in or creating an account.
 *        (Value: "AUTH_FAIL_ACTION_REDIRECT")
 *    @arg @c kGTLRAppengine_UrlMap_AuthFailAction_AuthFailActionUnauthorized
 *        Rejects request with a 401 HTTP status code and an error message.
 *        (Value: "AUTH_FAIL_ACTION_UNAUTHORIZED")
 *    @arg @c kGTLRAppengine_UrlMap_AuthFailAction_AuthFailActionUnspecified Not
 *        specified. AUTH_FAIL_ACTION_REDIRECT is assumed. (Value:
 *        "AUTH_FAIL_ACTION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *authFailAction;

/**
 *  Level of login required to access this resource. Not supported for Node.js
 *  in the App Engine standard environment.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_UrlMap_Login_LoginAdmin If the user is not signed
 *        in, the auth_fail_action is taken. In addition, if the user is not an
 *        administrator for the application, they are given an error message
 *        regardless of auth_fail_action. If the user is an administrator, the
 *        handler proceeds. (Value: "LOGIN_ADMIN")
 *    @arg @c kGTLRAppengine_UrlMap_Login_LoginOptional Does not require that
 *        the user is signed in. (Value: "LOGIN_OPTIONAL")
 *    @arg @c kGTLRAppengine_UrlMap_Login_LoginRequired If the user has signed
 *        in, the handler proceeds normally. Otherwise, the auth_fail_action is
 *        taken. (Value: "LOGIN_REQUIRED")
 *    @arg @c kGTLRAppengine_UrlMap_Login_LoginUnspecified Not specified.
 *        LOGIN_OPTIONAL is assumed. (Value: "LOGIN_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *login;

/**
 *  30x code to use when performing redirects for the secure field. Defaults to
 *  302.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_UrlMap_RedirectHttpResponseCode_RedirectHttpResponseCode301
 *        301 Moved Permanently code. (Value: "REDIRECT_HTTP_RESPONSE_CODE_301")
 *    @arg @c kGTLRAppengine_UrlMap_RedirectHttpResponseCode_RedirectHttpResponseCode302
 *        302 Moved Temporarily code. (Value: "REDIRECT_HTTP_RESPONSE_CODE_302")
 *    @arg @c kGTLRAppengine_UrlMap_RedirectHttpResponseCode_RedirectHttpResponseCode303
 *        303 See Other code. (Value: "REDIRECT_HTTP_RESPONSE_CODE_303")
 *    @arg @c kGTLRAppengine_UrlMap_RedirectHttpResponseCode_RedirectHttpResponseCode307
 *        307 Temporary Redirect code. (Value:
 *        "REDIRECT_HTTP_RESPONSE_CODE_307")
 *    @arg @c kGTLRAppengine_UrlMap_RedirectHttpResponseCode_RedirectHttpResponseCodeUnspecified
 *        Not specified. 302 is assumed. (Value:
 *        "REDIRECT_HTTP_RESPONSE_CODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *redirectHttpResponseCode;

/**
 *  Executes a script to handle the requests that match this URL pattern. Only
 *  the auto value is supported for Node.js in the App Engine standard
 *  environment, for example "script": "auto".
 */
@property(nonatomic, strong, nullable) GTLRAppengine_ScriptHandler *script;

/**
 *  Security (HTTPS) enforcement for this URL.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_UrlMap_SecurityLevel_SecureAlways Requests for a
 *        URL that match this handler that do not use HTTPS are automatically
 *        redirected to the HTTPS URL with the same path. Query parameters are
 *        reserved for the redirect. (Value: "SECURE_ALWAYS")
 *    @arg @c kGTLRAppengine_UrlMap_SecurityLevel_SecureDefault Both HTTP and
 *        HTTPS requests with URLs that match the handler succeed without
 *        redirects. The application can examine the request to determine which
 *        protocol was used, and respond accordingly. (Value: "SECURE_DEFAULT")
 *    @arg @c kGTLRAppengine_UrlMap_SecurityLevel_SecureNever Requests for a URL
 *        that match this handler that use HTTPS are automatically redirected to
 *        the HTTP equivalent URL. (Value: "SECURE_NEVER")
 *    @arg @c kGTLRAppengine_UrlMap_SecurityLevel_SecureOptional Both HTTP and
 *        HTTPS requests with URLs that match the handler succeed without
 *        redirects. The application can examine the request to determine which
 *        protocol was used and respond accordingly. (Value: "SECURE_OPTIONAL")
 *    @arg @c kGTLRAppengine_UrlMap_SecurityLevel_SecureUnspecified Not
 *        specified. (Value: "SECURE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *securityLevel;

/** Returns the contents of a file, such as an image, as the response. */
@property(nonatomic, strong, nullable) GTLRAppengine_StaticFilesHandler *staticFiles;

/**
 *  URL prefix. Uses regular expression syntax, which means regexp special
 *  characters must be escaped, but should not contain groupings. All URLs that
 *  begin with this prefix are handled by this handler, using the portion of the
 *  URL after the prefix as part of the file path.
 */
@property(nonatomic, copy, nullable) NSString *urlRegex;

@end


/**
 *  A Version resource is a specific set of source code and configuration files
 *  that are deployed into a service.
 */
@interface GTLRAppengine_Version : GTLRObject

/**
 *  Serving configuration for Google Cloud Endpoints
 *  (https://cloud.google.com/appengine/docs/python/endpoints/).Only returned in
 *  GET requests if view=FULL is set.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_ApiConfigHandler *apiConfig;

/**
 *  Automatic scaling is based on request rate, response latencies, and other
 *  application metrics.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_AutomaticScaling *automaticScaling;

/**
 *  A service with basic scaling will create an instance when the application
 *  receives a request. The instance will be turned down when the app becomes
 *  idle. Basic scaling is ideal for work that is intermittent or driven by user
 *  activity.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_BasicScaling *basicScaling;

/**
 *  Metadata settings that are supplied to this version to enable beta runtime
 *  features.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_Version_BetaSettings *betaSettings;

/** Email address of the user who created this version.\@OutputOnly */
@property(nonatomic, copy, nullable) NSString *createdBy;

/** Time that this version was created.\@OutputOnly */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Duration that static files should be cached by web proxies and browsers.
 *  Only applicable if the corresponding StaticFilesHandler
 *  (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StaticFilesHandler)
 *  does not specify its own expiration time.Only returned in GET requests if
 *  view=FULL is set.
 */
@property(nonatomic, strong, nullable) GTLRDuration *defaultExpiration;

/**
 *  Code and application artifacts that make up this version.Only returned in
 *  GET requests if view=FULL is set.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_Deployment *deployment;

/**
 *  Total size in bytes of all the files that are included in this version and
 *  currently hosted on the App Engine disk.\@OutputOnly
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *diskUsageBytes;

/**
 *  Cloud Endpoints configuration.If endpoints_api_service is set, the Cloud
 *  Endpoints Extensible Service Proxy will be provided to serve the API
 *  implemented by the app.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_EndpointsApiService *endpointsApiService;

/** The entrypoint for the application. */
@property(nonatomic, strong, nullable) GTLRAppengine_Entrypoint *entrypoint;

/** App Engine execution environment for this version.Defaults to standard. */
@property(nonatomic, copy, nullable) NSString *env;

/**
 *  Environment variables available to the application.Only returned in GET
 *  requests if view=FULL is set.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_Version_EnvVariables *envVariables;

/**
 *  Custom static error pages. Limited to 10KB per page.Only returned in GET
 *  requests if view=FULL is set.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_ErrorHandler *> *errorHandlers;

/**
 *  An ordered list of URL-matching patterns that should be applied to incoming
 *  requests. The first matching URL handles the request and other request
 *  handlers are not attempted.Only returned in GET requests if view=FULL is
 *  set.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_UrlMap *> *handlers;

/**
 *  Configures health checking for instances. Unhealthy instances are stopped
 *  and replaced with new instances. Only applicable in the App Engine flexible
 *  environment.Only returned in GET requests if view=FULL is set.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_HealthCheck *healthCheck;

/**
 *  Relative name of the version within the service. Example: v1. Version names
 *  can contain only lowercase letters, numbers, or hyphens. Reserved names:
 *  "default", "latest", and any name with the prefix "ah-".
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Before an application can receive email or XMPP messages, the application
 *  must be configured to enable the service.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *inboundServices;

/**
 *  Instance class that is used to run this version. Valid values are:
 *  AutomaticScaling: F1, F2, F4, F4_1G
 *  ManualScaling or BasicScaling: B1, B2, B4, B8, B4_1GDefaults to F1 for
 *  AutomaticScaling and B1 for ManualScaling or BasicScaling.
 */
@property(nonatomic, copy, nullable) NSString *instanceClass;

/**
 *  Configuration for third-party Python runtime libraries that are required by
 *  the application.Only returned in GET requests if view=FULL is set.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAppengine_Library *> *libraries;

/**
 *  Configures liveness health checking for instances. Unhealthy instances are
 *  stopped and replaced with new instancesOnly returned in GET requests if
 *  view=FULL is set.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_LivenessCheck *livenessCheck;

/**
 *  A service with manual scaling runs continuously, allowing you to perform
 *  complex initialization and rely on the state of its memory over time.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_ManualScaling *manualScaling;

/**
 *  Full path to the Version resource in the API. Example:
 *  apps/myapp/services/default/versions/v1.\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Extra network settings. Only applicable in the App Engine flexible
 *  environment.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_Network *network;

/**
 *  Files that match this pattern will not be built into this version. Only
 *  applicable for Go runtimes.Only returned in GET requests if view=FULL is
 *  set.
 */
@property(nonatomic, copy, nullable) NSString *nobuildFilesRegex;

/**
 *  Configures readiness health checking for instances. Unhealthy instances are
 *  not put into the backend traffic rotation.Only returned in GET requests if
 *  view=FULL is set.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_ReadinessCheck *readinessCheck;

/**
 *  Machine resources for this version. Only applicable in the App Engine
 *  flexible environment.
 */
@property(nonatomic, strong, nullable) GTLRAppengine_Resources *resources;

/** Desired runtime. Example: python27. */
@property(nonatomic, copy, nullable) NSString *runtime;

/**
 *  The version of the API in the given runtime environment. Please see the
 *  app.yaml reference for valid values at
 *  https://cloud.google.com/appengine/docs/standard/<language>/config/appref
 */
@property(nonatomic, copy, nullable) NSString *runtimeApiVersion;

/**
 *  The channel of the runtime to use. Only available for some runtimes.
 *  Defaults to the default channel.
 */
@property(nonatomic, copy, nullable) NSString *runtimeChannel;

/** The path or name of the app's main executable. */
@property(nonatomic, copy, nullable) NSString *runtimeMainExecutablePath;

/**
 *  Current serving status of this version. Only the versions with a SERVING
 *  status create instances and can be billed.SERVING_STATUS_UNSPECIFIED is an
 *  invalid value. Defaults to SERVING.
 *
 *  Likely values:
 *    @arg @c kGTLRAppengine_Version_ServingStatus_Serving Currently serving.
 *        Instances are created according to the scaling settings of the
 *        version. (Value: "SERVING")
 *    @arg @c kGTLRAppengine_Version_ServingStatus_ServingStatusUnspecified Not
 *        specified. (Value: "SERVING_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRAppengine_Version_ServingStatus_Stopped Disabled. No
 *        instances will be created and the scaling settings are ignored until
 *        the state of the version changes to SERVING. (Value: "STOPPED")
 */
@property(nonatomic, copy, nullable) NSString *servingStatus;

/**
 *  Whether multiple requests can be dispatched to this version at once.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *threadsafe;

/**
 *  Serving URL for this version. Example:
 *  "https://myversion-dot-myservice-dot-myapp.appspot.com"\@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *versionUrl;

/**
 *  Whether to deploy this version in a container on a virtual machine.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *vm;

/**
 *  The Google Compute Engine zones that are supported by this version in the
 *  App Engine flexible environment.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *zones;

@end


/**
 *  Metadata settings that are supplied to this version to enable beta runtime
 *  features.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRAppengine_Version_BetaSettings : GTLRObject
@end


/**
 *  Environment variables available to the application.Only returned in GET
 *  requests if view=FULL is set.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRAppengine_Version_EnvVariables : GTLRObject
@end


/**
 *  Volumes mounted within the app container. Only applicable in the App Engine
 *  flexible environment.
 */
@interface GTLRAppengine_Volume : GTLRObject

/** Unique name for the volume. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Volume size in gigabytes.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sizeGb;

/** Underlying volume type, e.g. 'tmpfs'. */
@property(nonatomic, copy, nullable) NSString *volumeType;

@end


/**
 *  The zip file information for a zip deployment.
 */
@interface GTLRAppengine_ZipInfo : GTLRObject

/**
 *  An estimate of the number of files in a zip for a zip deployment. If set,
 *  must be greater than or equal to the actual number of files. Used for
 *  optimizing performance; if not provided, deployment may be slow.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *filesCount;

/**
 *  URL of the zip file to deploy from. Must be a URL to a resource in Google
 *  Cloud Storage in the form
 *  'http(s)://storage.googleapis.com/<bucket>/<object>'.
 */
@property(nonatomic, copy, nullable) NSString *sourceUrl;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
