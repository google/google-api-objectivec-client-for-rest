// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Chrome Management API (chromemanagement/v1)
// Description:
//   The Chrome Management API is a suite of services that allows Chrome
//   administrators to view, manage and gain insights on their Chrome OS The
//   Chrome Management API is a suite of services that allows GSuite domain
//   administrators to view, manage and gain insights on their Chrome OS and
//   Chrome Browser devices and users.
// Documentation:
//   http://developers.google.com/chrome/management/

#import "GTLRChromeManagementQuery.h"

#import "GTLRChromeManagementObjects.h"

// ----------------------------------------------------------------------------
// Constants

// appType
NSString * const kGTLRChromeManagementAppTypeAndroidApp        = @"ANDROID_APP";
NSString * const kGTLRChromeManagementAppTypeApp               = @"APP";
NSString * const kGTLRChromeManagementAppTypeAppTypeUnspecified = @"APP_TYPE_UNSPECIFIED";
NSString * const kGTLRChromeManagementAppTypeExtension         = @"EXTENSION";
NSString * const kGTLRChromeManagementAppTypeHostedApp         = @"HOSTED_APP";
NSString * const kGTLRChromeManagementAppTypeTheme             = @"THEME";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRChromeManagementQuery

@dynamic fields;

@end

@implementation GTLRChromeManagementQuery_CustomersReportsCountChromeVersions

@dynamic customer, filter, orgUnitId, pageSize, pageToken;

+ (instancetype)queryWithCustomer:(NSString *)customer {
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"v1/{+customer}/reports:countChromeVersions";
  GTLRChromeManagementQuery_CustomersReportsCountChromeVersions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.expectedObjectClass = [GTLRChromeManagement_GoogleChromeManagementV1CountChromeVersionsResponse class];
  query.loggingName = @"chromemanagement.customers.reports.countChromeVersions";
  return query;
}

@end

@implementation GTLRChromeManagementQuery_CustomersReportsCountInstalledApps

@dynamic customer, filter, orderBy, orgUnitId, pageSize, pageToken;

+ (instancetype)queryWithCustomer:(NSString *)customer {
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"v1/{+customer}/reports:countInstalledApps";
  GTLRChromeManagementQuery_CustomersReportsCountInstalledApps *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.expectedObjectClass = [GTLRChromeManagement_GoogleChromeManagementV1CountInstalledAppsResponse class];
  query.loggingName = @"chromemanagement.customers.reports.countInstalledApps";
  return query;
}

@end

@implementation GTLRChromeManagementQuery_CustomersReportsFindInstalledAppDevices

@dynamic appId, appType, customer, filter, orderBy, orgUnitId, pageSize,
         pageToken;

+ (instancetype)queryWithCustomer:(NSString *)customer {
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"v1/{+customer}/reports:findInstalledAppDevices";
  GTLRChromeManagementQuery_CustomersReportsFindInstalledAppDevices *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.expectedObjectClass = [GTLRChromeManagement_GoogleChromeManagementV1FindInstalledAppDevicesResponse class];
  query.loggingName = @"chromemanagement.customers.reports.findInstalledAppDevices";
  return query;
}

@end
