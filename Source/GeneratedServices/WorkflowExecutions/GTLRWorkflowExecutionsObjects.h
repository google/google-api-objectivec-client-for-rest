// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Workflow Executions API (workflowexecutions/v1)
// Description:
//   Execute workflows created with Workflows API.
// Documentation:
//   https://cloud.google.com/workflows

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRWorkflowExecutions_Error;
@class GTLRWorkflowExecutions_Execution;
@class GTLRWorkflowExecutions_Position;
@class GTLRWorkflowExecutions_StackTrace;
@class GTLRWorkflowExecutions_StackTraceElement;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRWorkflowExecutions_Execution.state

/**
 *  The execution is in progress.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_State_Active;
/**
 *  The execution was stopped intentionally.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_State_Cancelled;
/**
 *  The execution failed with an error.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_State_Failed;
/**
 *  Invalid state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_State_StateUnspecified;
/**
 *  The execution finished successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_State_Succeeded;

/**
 *  Request for the CancelExecution method.
 */
@interface GTLRWorkflowExecutions_CancelExecutionRequest : GTLRObject
@end


/**
 *  Error describes why the execution was abnormally terminated.
 */
@interface GTLRWorkflowExecutions_Error : GTLRObject

/** Human readable stack trace string. */
@property(nonatomic, copy, nullable) NSString *context;

/** Error message and data returned represented as a JSON string. */
@property(nonatomic, copy, nullable) NSString *payload;

/** Stack trace with detailed information of where error was generated. */
@property(nonatomic, strong, nullable) GTLRWorkflowExecutions_StackTrace *stackTrace;

@end


/**
 *  A running instance of a
 *  [Workflow](/workflows/docs/reference/rest/v1/projects.locations.workflows).
 */
@interface GTLRWorkflowExecutions_Execution : GTLRObject

/**
 *  Input parameters of the execution represented as a JSON string. The size
 *  limit is 32KB. *Note*: If you are using the REST API directly to run your
 *  workflow, you must escape any JSON string value of `argument`. Example:
 *  `'{"argument":"{\\"firstName\\":\\"FIRST\\",\\"lastName\\":\\"LAST\\"}"}'`
 */
@property(nonatomic, copy, nullable) NSString *argument;

/** Output only. Marks the end of execution, successful or not. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. The error which caused the execution to finish prematurely. The
 *  value is only present if the execution's state is `FAILED` or `CANCELLED`.
 */
@property(nonatomic, strong, nullable) GTLRWorkflowExecutions_Error *error;

/**
 *  Output only. The resource name of the execution. Format:
 *  projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Output of the execution represented as a JSON string. The value
 *  can only be present if the execution's state is `SUCCEEDED`.
 */
@property(nonatomic, copy, nullable) NSString *result;

/** Output only. Marks the beginning of execution. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. Current state of the execution.
 *
 *  Likely values:
 *    @arg @c kGTLRWorkflowExecutions_Execution_State_Active The execution is in
 *        progress. (Value: "ACTIVE")
 *    @arg @c kGTLRWorkflowExecutions_Execution_State_Cancelled The execution
 *        was stopped intentionally. (Value: "CANCELLED")
 *    @arg @c kGTLRWorkflowExecutions_Execution_State_Failed The execution
 *        failed with an error. (Value: "FAILED")
 *    @arg @c kGTLRWorkflowExecutions_Execution_State_StateUnspecified Invalid
 *        state. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRWorkflowExecutions_Execution_State_Succeeded The execution
 *        finished successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. Revision of the workflow this execution is using. */
@property(nonatomic, copy, nullable) NSString *workflowRevisionId;

@end


/**
 *  Response for the ListExecutions method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "executions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRWorkflowExecutions_ListExecutionsResponse : GTLRCollectionObject

/**
 *  The executions which match the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWorkflowExecutions_Execution *> *executions;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Position contains source position information about the stack trace element
 *  such as line number, column number and length of the code block in bytes.
 */
@interface GTLRWorkflowExecutions_Position : GTLRObject

/**
 *  The source code column position (of the line) the current instruction was
 *  generated from.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *column;

/**
 *  The length in bytes of text in this character group, e.g. digits of a
 *  number, string length, or AST (abstract syntax tree) node.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/**
 *  The source code line number the current instruction was generated from.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *line;

@end


/**
 *  A collection of stack elements (frames) where an error occurred.
 */
@interface GTLRWorkflowExecutions_StackTrace : GTLRObject

/** An array of Stack elements. */
@property(nonatomic, strong, nullable) NSArray<GTLRWorkflowExecutions_StackTraceElement *> *elements;

@end


/**
 *  A single stack element (frame) where an error occurred.
 */
@interface GTLRWorkflowExecutions_StackTraceElement : GTLRObject

/** The source position information of the stacktrace element. */
@property(nonatomic, strong, nullable) GTLRWorkflowExecutions_Position *position;

/** The routine where the error occurred. */
@property(nonatomic, copy, nullable) NSString *routine;

/** The step the error occurred at. */
@property(nonatomic, copy, nullable) NSString *step;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
