// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play Android Developer API (androidpublisher/v3)
// Description:
//   Lets Android application developers access their Google Play accounts.
// Documentation:
//   https://developers.google.com/android-publisher

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAndroidPublisher_Apk;
@class GTLRAndroidPublisher_ApkBinary;
@class GTLRAndroidPublisher_Bundle;
@class GTLRAndroidPublisher_Comment;
@class GTLRAndroidPublisher_CountryTargeting;
@class GTLRAndroidPublisher_DeobfuscationFile;
@class GTLRAndroidPublisher_DeveloperComment;
@class GTLRAndroidPublisher_DeviceMetadata;
@class GTLRAndroidPublisher_DeviceSpec;
@class GTLRAndroidPublisher_ExpansionFile;
@class GTLRAndroidPublisher_ExternallyHostedApk;
@class GTLRAndroidPublisher_Image;
@class GTLRAndroidPublisher_InAppProduct;
@class GTLRAndroidPublisher_InAppProduct_Listings;
@class GTLRAndroidPublisher_InAppProduct_Prices;
@class GTLRAndroidPublisher_InAppProductListing;
@class GTLRAndroidPublisher_IntroductoryPriceInfo;
@class GTLRAndroidPublisher_Listing;
@class GTLRAndroidPublisher_LocalizedText;
@class GTLRAndroidPublisher_PageInfo;
@class GTLRAndroidPublisher_Price;
@class GTLRAndroidPublisher_Review;
@class GTLRAndroidPublisher_ReviewReplyResult;
@class GTLRAndroidPublisher_SubscriptionCancelSurveyResult;
@class GTLRAndroidPublisher_SubscriptionDeferralInfo;
@class GTLRAndroidPublisher_SubscriptionPriceChange;
@class GTLRAndroidPublisher_Timestamp;
@class GTLRAndroidPublisher_TokenPagination;
@class GTLRAndroidPublisher_Track;
@class GTLRAndroidPublisher_TrackRelease;
@class GTLRAndroidPublisher_UserComment;
@class GTLRAndroidPublisher_UsesPermission;
@class GTLRAndroidPublisher_Variant;
@class GTLRAndroidPublisher_VoidedPurchase;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_DeobfuscationFile.symbolType

/**
 *  Unspecified deobfuscation file type.
 *
 *  Value: "deobfuscationFileTypeUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_DeobfuscationFile_SymbolType_DeobfuscationFileTypeUnspecified;
/**
 *  Native debugging symbols file type.
 *
 *  Value: "nativeCode"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_DeobfuscationFile_SymbolType_NativeCode;
/**
 *  Proguard deobfuscation file type.
 *
 *  Value: "proguard"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_DeobfuscationFile_SymbolType_Proguard;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_InAppProduct.purchaseType

/**
 *  The default product type - one time purchase.
 *
 *  Value: "managedUser"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_InAppProduct_PurchaseType_ManagedUser;
/**
 *  Unspecified purchase type.
 *
 *  Value: "purchaseTypeUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_InAppProduct_PurchaseType_PurchaseTypeUnspecified;
/**
 *  In-app product with a recurring period.
 *
 *  Value: "subscription"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_InAppProduct_PurchaseType_Subscription;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_InAppProduct.status

/**
 *  The product is published and active in the store.
 *
 *  Value: "active"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_InAppProduct_Status_Active;
/**
 *  The product is not published and therefore inactive in the store.
 *
 *  Value: "inactive"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_InAppProduct_Status_Inactive;
/**
 *  Unspecified status.
 *
 *  Value: "statusUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_InAppProduct_Status_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_TrackRelease.status

/**
 *  The release will have no further changes. Its APKs are being served to all
 *  users, unless they are eligible to APKs of a more recent release.
 *
 *  Value: "completed"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_TrackRelease_Status_Completed;
/**
 *  The release's APKs are not being served to users.
 *
 *  Value: "draft"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_TrackRelease_Status_Draft;
/**
 *  The release's APKs will no longer be served to users. Users who already have
 *  these APKs are unaffected.
 *
 *  Value: "halted"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_TrackRelease_Status_Halted;
/**
 *  The release's APKs are being served to a fraction of users, determined by
 *  'user_fraction'.
 *
 *  Value: "inProgress"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_TrackRelease_Status_InProgress;
/**
 *  Unspecified status.
 *
 *  Value: "statusUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_TrackRelease_Status_StatusUnspecified;

/**
 *  Information about an APK. The resource for ApksService.
 */
@interface GTLRAndroidPublisher_Apk : GTLRObject

/** Information about the binary payload of this APK. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_ApkBinary *binary;

/**
 *  The version code of the APK, as specified in the manifest file.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionCode;

@end


/**
 *  Represents the binary payload of an APK.
 */
@interface GTLRAndroidPublisher_ApkBinary : GTLRObject

/**
 *  A sha1 hash of the APK payload, encoded as a hex string and matching the
 *  output of the sha1sum command.
 */
@property(nonatomic, copy, nullable) NSString *sha1;

/**
 *  A sha256 hash of the APK payload, encoded as a hex string and matching the
 *  output of the sha256sum command.
 */
@property(nonatomic, copy, nullable) NSString *sha256;

@end


/**
 *  Request to create a new externally hosted APK.
 */
@interface GTLRAndroidPublisher_ApksAddExternallyHostedRequest : GTLRObject

/** The definition of the externally-hosted APK and where it is located. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_ExternallyHostedApk *externallyHostedApk;

@end


/**
 *  Response for creating a new externally hosted APK.
 */
@interface GTLRAndroidPublisher_ApksAddExternallyHostedResponse : GTLRObject

/** The definition of the externally-hosted APK and where it is located. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_ExternallyHostedApk *externallyHostedApk;

@end


/**
 *  Response listing all APKs.
 */
@interface GTLRAndroidPublisher_ApksListResponse : GTLRObject

/** All APKs. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Apk *> *apks;

/** The kind of this response ("androidpublisher#apksListResponse"). */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  The app details. The resource for DetailsService.
 */
@interface GTLRAndroidPublisher_AppDetails : GTLRObject

/** The user-visible support email for this app. */
@property(nonatomic, copy, nullable) NSString *contactEmail;

/** The user-visible support telephone number for this app. */
@property(nonatomic, copy, nullable) NSString *contactPhone;

/** The user-visible website for this app. */
@property(nonatomic, copy, nullable) NSString *contactWebsite;

/** Default language code, in BCP 47 format (eg "en-US"). */
@property(nonatomic, copy, nullable) NSString *defaultLanguage;

@end


/**
 *  An app edit. The resource for EditsService.
 */
@interface GTLRAndroidPublisher_AppEdit : GTLRObject

/**
 *  Output only. The time (as seconds since Epoch) at which the edit will expire
 *  and will be no longer valid for use.
 */
@property(nonatomic, copy, nullable) NSString *expiryTimeSeconds;

/**
 *  Output only. Identifier of the edit. Can be used in subsequent API calls.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  Information about a bundle. The resource for BundlesService.
 */
@interface GTLRAndroidPublisher_Bundle : GTLRObject

/**
 *  A sha1 hash of the upload payload, encoded as a hex string and matching the
 *  output of the sha1sum command.
 */
@property(nonatomic, copy, nullable) NSString *sha1;

/**
 *  A sha256 hash of the upload payload, encoded as a hex string and matching
 *  the output of the sha256sum command.
 */
@property(nonatomic, copy, nullable) NSString *sha256;

/**
 *  The version code of the Android App Bundle, as specified in the Android App
 *  Bundle's base module APK manifest file.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionCode;

@end


/**
 *  Response listing all bundles.
 */
@interface GTLRAndroidPublisher_BundlesListResponse : GTLRObject

/** All bundles. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Bundle *> *bundles;

/** The kind of this response ("androidpublisher#bundlesListResponse"). */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  An entry of conversation between user and developer.
 */
@interface GTLRAndroidPublisher_Comment : GTLRObject

/** A comment from a developer. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_DeveloperComment *developerComment;

/** A comment from a user. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_UserComment *userComment;

@end


/**
 *  Country targeting specification.
 */
@interface GTLRAndroidPublisher_CountryTargeting : GTLRObject

/**
 *  Countries to target, specified as two letter [CLDR
 *  codes](https://unicode.org/cldr/charts/latest/supplemental/territory_containment_un_m_49.html).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *countries;

/**
 *  Include "rest of world" as well as explicitly targeted countries.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeRestOfWorld;

@end


/**
 *  Represents a deobfuscation file.
 */
@interface GTLRAndroidPublisher_DeobfuscationFile : GTLRObject

/**
 *  The type of the deobfuscation file.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_DeobfuscationFile_SymbolType_DeobfuscationFileTypeUnspecified
 *        Unspecified deobfuscation file type. (Value:
 *        "deobfuscationFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisher_DeobfuscationFile_SymbolType_NativeCode
 *        Native debugging symbols file type. (Value: "nativeCode")
 *    @arg @c kGTLRAndroidPublisher_DeobfuscationFile_SymbolType_Proguard
 *        Proguard deobfuscation file type. (Value: "proguard")
 */
@property(nonatomic, copy, nullable) NSString *symbolType;

@end


/**
 *  Responses for the upload.
 */
@interface GTLRAndroidPublisher_DeobfuscationFilesUploadResponse : GTLRObject

/** The uploaded Deobfuscation File configuration. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_DeobfuscationFile *deobfuscationFile;

@end


/**
 *  Developer entry from conversation between user and developer.
 */
@interface GTLRAndroidPublisher_DeveloperComment : GTLRObject

/** The last time at which this comment was updated. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Timestamp *lastModified;

/** The content of the comment, i.e. reply body. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Characteristics of the user's device.
 */
@interface GTLRAndroidPublisher_DeviceMetadata : GTLRObject

/** Device CPU make, e.g. "Qualcomm" */
@property(nonatomic, copy, nullable) NSString *cpuMake;

/** Device CPU model, e.g. "MSM8974" */
@property(nonatomic, copy, nullable) NSString *cpuModel;

/** Device class (e.g. tablet) */
@property(nonatomic, copy, nullable) NSString *deviceClass;

/**
 *  OpenGL version
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *glEsVersion;

/** Device manufacturer (e.g. Motorola) */
@property(nonatomic, copy, nullable) NSString *manufacturer;

/** Comma separated list of native platforms (e.g. "arm", "arm7") */
@property(nonatomic, copy, nullable) NSString *nativePlatform;

/** Device model name (e.g. Droid) */
@property(nonatomic, copy, nullable) NSString *productName;

/**
 *  Device RAM in Megabytes, e.g. "2048"
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ramMb;

/**
 *  Screen density in DPI
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenDensityDpi;

/**
 *  Screen height in pixels
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenHeightPx;

/**
 *  Screen width in pixels
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenWidthPx;

@end


/**
 *  The device spec used to generate a system APK.
 */
@interface GTLRAndroidPublisher_DeviceSpec : GTLRObject

/**
 *  Screen dpi.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenDensity;

/**
 *  Supported ABI architectures in the order of preference. The values should be
 *  the string as reported by the platform, e.g. "armeabi-v7a", "x86_64".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedAbis;

/** All installed locales represented as BCP-47 strings, e.g. "en-US". */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedLocales;

@end


/**
 *  An expansion file. The resource for ExpansionFilesService.
 */
@interface GTLRAndroidPublisher_ExpansionFile : GTLRObject

/**
 *  If set, this field indicates that this APK has an expansion file uploaded to
 *  it: this APK does not reference another APK's expansion file. The field's
 *  value is the size of the uploaded expansion file in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fileSize;

/**
 *  If set, this APK's expansion file references another APK's expansion file.
 *  The file_size field will not be set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *referencesVersion;

@end


/**
 *  Response for uploading an expansion file.
 */
@interface GTLRAndroidPublisher_ExpansionFilesUploadResponse : GTLRObject

/** The uploaded expansion file configuration. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_ExpansionFile *expansionFile;

@end


/**
 *  Defines an APK available for this application that is hosted externally and
 *  not uploaded to Google Play. This function is only available to
 *  organizations using Managed Play whose application is configured to restrict
 *  distribution to the organizations.
 */
@interface GTLRAndroidPublisher_ExternallyHostedApk : GTLRObject

/** The application label. */
@property(nonatomic, copy, nullable) NSString *applicationLabel;

/**
 *  A certificate (or array of certificates if a certificate-chain is used) used
 *  to sign this APK, represented as a base64 encoded byte array.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *certificateBase64s;

/** The URL at which the APK is hosted. This must be an https URL. */
@property(nonatomic, copy, nullable) NSString *externallyHostedUrl;

/**
 *  The sha1 checksum of this APK, represented as a base64 encoded byte array.
 */
@property(nonatomic, copy, nullable) NSString *fileSha1Base64;

/**
 *  The sha256 checksum of this APK, represented as a base64 encoded byte array.
 */
@property(nonatomic, copy, nullable) NSString *fileSha256Base64;

/**
 *  The file size in bytes of this APK.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fileSize;

/** The icon image from the APK, as a base64 encoded byte array. */
@property(nonatomic, copy, nullable) NSString *iconBase64;

/**
 *  The maximum SDK supported by this APK (optional).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maximumSdk;

/**
 *  The minimum SDK targeted by this APK.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minimumSdk;

/** The native code environments supported by this APK (optional). */
@property(nonatomic, strong, nullable) NSArray<NSString *> *nativeCodes;

/** The package name. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The features required by this APK (optional). */
@property(nonatomic, strong, nullable) NSArray<NSString *> *usesFeatures;

/** The permissions requested by this APK. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_UsesPermission *> *usesPermissions;

/**
 *  The version code of this APK.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionCode;

/** The version name of this APK. */
@property(nonatomic, copy, nullable) NSString *versionName;

@end


/**
 *  An uploaded image. The resource for ImagesService.
 */
@interface GTLRAndroidPublisher_Image : GTLRObject

/**
 *  A unique id representing this image.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** A sha1 hash of the image. */
@property(nonatomic, copy, nullable) NSString *sha1;

/** A sha256 hash of the image. */
@property(nonatomic, copy, nullable) NSString *sha256;

/** A URL that will serve a preview of the image. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Response for deleting all images.
 */
@interface GTLRAndroidPublisher_ImagesDeleteAllResponse : GTLRObject

/** The deleted images. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Image *> *deleted;

@end


/**
 *  Response listing all images.
 */
@interface GTLRAndroidPublisher_ImagesListResponse : GTLRObject

/** All listed Images. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Image *> *images;

@end


/**
 *  Response for uploading an image.
 */
@interface GTLRAndroidPublisher_ImagesUploadResponse : GTLRObject

/** The uploaded image. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Image *image;

@end


/**
 *  An in-app product. The resource for InappproductsService.
 */
@interface GTLRAndroidPublisher_InAppProduct : GTLRObject

/**
 *  Default language of the localized data, as defined by BCP-47. e.g. "en-US".
 */
@property(nonatomic, copy, nullable) NSString *defaultLanguage;

/**
 *  Default price. Cannot be zero, as in-app products are never free. Always in
 *  the developer's Checkout merchant currency.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Price *defaultPrice;

/**
 *  Grace period of the subscription, specified in ISO 8601 format. Allows
 *  developers to give their subscribers a grace period when the payment for the
 *  new recurrence period is declined. Acceptable values are P0D (zero days),
 *  P3D (three days), P7D (seven days), P14D (14 days), and P30D (30 days).
 */
@property(nonatomic, copy, nullable) NSString *gracePeriod;

/**
 *  List of localized title and description data. Map key is the language of the
 *  localized data, as defined by BCP-47, e.g. "en-US".
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_InAppProduct_Listings *listings;

/** Package name of the parent app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Prices per buyer region. None of these can be zero, as in-app products are
 *  never free. Map key is region code, as defined by ISO 3166-2.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_InAppProduct_Prices *prices;

/**
 *  The type of the product, e.g. a recurring subscription.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_InAppProduct_PurchaseType_ManagedUser The
 *        default product type - one time purchase. (Value: "managedUser")
 *    @arg @c kGTLRAndroidPublisher_InAppProduct_PurchaseType_PurchaseTypeUnspecified
 *        Unspecified purchase type. (Value: "purchaseTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisher_InAppProduct_PurchaseType_Subscription
 *        In-app product with a recurring period. (Value: "subscription")
 */
@property(nonatomic, copy, nullable) NSString *purchaseType;

/** Stock-keeping-unit (SKU) of the product, unique within an app. */
@property(nonatomic, copy, nullable) NSString *sku;

/**
 *  The status of the product, e.g. whether it's active.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_InAppProduct_Status_Active The product is
 *        published and active in the store. (Value: "active")
 *    @arg @c kGTLRAndroidPublisher_InAppProduct_Status_Inactive The product is
 *        not published and therefore inactive in the store. (Value: "inactive")
 *    @arg @c kGTLRAndroidPublisher_InAppProduct_Status_StatusUnspecified
 *        Unspecified status. (Value: "statusUnspecified")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Subscription period, specified in ISO 8601 format. Acceptable values are P1W
 *  (one week), P1M (one month), P3M (three months), P6M (six months), and P1Y
 *  (one year).
 */
@property(nonatomic, copy, nullable) NSString *subscriptionPeriod;

/**
 *  Trial period, specified in ISO 8601 format. Acceptable values are anything
 *  between P7D (seven days) and P999D (999 days).
 */
@property(nonatomic, copy, nullable) NSString *trialPeriod;

@end


/**
 *  List of localized title and description data. Map key is the language of the
 *  localized data, as defined by BCP-47, e.g. "en-US".
 *
 *  @note This class is documented as having more properties of
 *        GTLRAndroidPublisher_InAppProductListing. Use @c -additionalJSONKeys
 *        and @c -additionalPropertyForName: to get the list of properties and
 *        then fetch them; or @c -additionalProperties to fetch them all at
 *        once.
 */
@interface GTLRAndroidPublisher_InAppProduct_Listings : GTLRObject
@end


/**
 *  Prices per buyer region. None of these can be zero, as in-app products are
 *  never free. Map key is region code, as defined by ISO 3166-2.
 *
 *  @note This class is documented as having more properties of
 *        GTLRAndroidPublisher_Price. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRAndroidPublisher_InAppProduct_Prices : GTLRObject
@end


/**
 *  Store listing of a single in-app product.
 */
@interface GTLRAndroidPublisher_InAppProductListing : GTLRObject

/** Localized entitlement benefits for a subscription. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *benefits;

/**
 *  Description for the store listing.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Title for the store listing. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Response listing all in-app products.
 */
@interface GTLRAndroidPublisher_InappproductsListResponse : GTLRObject

/** All in-app products. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_InAppProduct *> *inappproduct;

/**
 *  The kind of this response ("androidpublisher#inappproductsListResponse").
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Information about the current page. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_PageInfo *pageInfo;

/** Pagination token, to handle a number of products that is over one page. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_TokenPagination *tokenPagination;

@end


/**
 *  An artifact resource which gets created when uploading an APK or Android App
 *  Bundle through internal app sharing.
 */
@interface GTLRAndroidPublisher_InternalAppSharingArtifact : GTLRObject

/**
 *  The sha256 fingerprint of the certificate used to sign the generated
 *  artifact.
 */
@property(nonatomic, copy, nullable) NSString *certificateFingerprint;

/**
 *  The download URL generated for the uploaded artifact. Users that are
 *  authorized to download can follow the link to the Play Store app to install
 *  it.
 */
@property(nonatomic, copy, nullable) NSString *downloadUrl;

/**
 *  The sha256 hash of the artifact represented as a lowercase hexadecimal
 *  number, matching the output of the sha256sum command.
 */
@property(nonatomic, copy, nullable) NSString *sha256;

@end


/**
 *  Contains the introductory price information for a subscription.
 */
@interface GTLRAndroidPublisher_IntroductoryPriceInfo : GTLRObject

/**
 *  Introductory price of the subscription, not including tax. The currency is
 *  the same as price_currency_code. Price is expressed in micro-units, where
 *  1,000,000 micro-units represents one unit of the currency. For example, if
 *  the subscription price is €1.99, price_amount_micros is 1990000.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *introductoryPriceAmountMicros;

/**
 *  ISO 4217 currency code for the introductory subscription price. For example,
 *  if the price is specified in British pounds sterling, price_currency_code is
 *  "GBP".
 */
@property(nonatomic, copy, nullable) NSString *introductoryPriceCurrencyCode;

/**
 *  The number of billing period to offer introductory pricing.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *introductoryPriceCycles;

/**
 *  Introductory price period, specified in ISO 8601 format. Common values are
 *  (but not limited to) "P1W" (one week), "P1M" (one month), "P3M" (three
 *  months), "P6M" (six months), and "P1Y" (one year).
 */
@property(nonatomic, copy, nullable) NSString *introductoryPricePeriod;

@end


/**
 *  A localized store listing. The resource for ListingsService.
 */
@interface GTLRAndroidPublisher_Listing : GTLRObject

/** Full description of the app. */
@property(nonatomic, copy, nullable) NSString *fullDescription;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German).
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Short description of the app. */
@property(nonatomic, copy, nullable) NSString *shortDescription;

/** Localized title of the app. */
@property(nonatomic, copy, nullable) NSString *title;

/** URL of a promotional YouTube video for the app. */
@property(nonatomic, copy, nullable) NSString *video;

@end


/**
 *  Response listing all localized listings.
 */
@interface GTLRAndroidPublisher_ListingsListResponse : GTLRObject

/** The kind of this response ("androidpublisher#listingsListResponse"). */
@property(nonatomic, copy, nullable) NSString *kind;

/** All localized listings. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Listing *> *listings;

@end


/**
 *  Release notes specification, i.e. language and text.
 */
@interface GTLRAndroidPublisher_LocalizedText : GTLRObject

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German).
 */
@property(nonatomic, copy, nullable) NSString *language;

/** The text in the given language. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Information about the current page. List operations that supports paging
 *  return only one "page" of results. This protocol buffer message describes
 *  the page that has been returned.
 */
@interface GTLRAndroidPublisher_PageInfo : GTLRObject

/**
 *  Maximum number of results returned in one page. ! The number of results
 *  included in the API response.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resultPerPage;

/**
 *  Index of the first result returned in the current page.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startIndex;

/**
 *  Total number of results available on the backend ! The total number of
 *  results in the result set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalResults;

@end


/**
 *  Definition of a price, i.e. currency and units.
 */
@interface GTLRAndroidPublisher_Price : GTLRObject

/**
 *  3 letter Currency code, as defined by ISO 4217. See
 *  java/com/google/common/money/CurrencyCode.java
 */
@property(nonatomic, copy, nullable) NSString *currency;

/** Price in 1/million of the currency base unit, represented as a string. */
@property(nonatomic, copy, nullable) NSString *priceMicros;

@end


/**
 *  A ProductPurchase resource indicates the status of a user's inapp product
 *  purchase.
 */
@interface GTLRAndroidPublisher_ProductPurchase : GTLRObject

/**
 *  The acknowledgement state of the inapp product. Possible values are: 0. Yet
 *  to be acknowledged 1. Acknowledged
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *acknowledgementState;

/**
 *  The consumption state of the inapp product. Possible values are: 0. Yet to
 *  be consumed 1. Consumed
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *consumptionState;

/**
 *  A developer-specified string that contains supplemental information about an
 *  order.
 */
@property(nonatomic, copy, nullable) NSString *developerPayload;

/**
 *  This kind represents an inappPurchase object in the androidpublisher
 *  service.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  An obfuscated version of the id that is uniquely associated with the user's
 *  account in your app. Only present if specified using
 *  https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedaccountid
 *  when the purchase was made.
 */
@property(nonatomic, copy, nullable) NSString *obfuscatedExternalAccountId;

/**
 *  An obfuscated version of the id that is uniquely associated with the user's
 *  profile in your app. Only present if specified using
 *  https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedprofileid
 *  when the purchase was made.
 */
@property(nonatomic, copy, nullable) NSString *obfuscatedExternalProfileId;

/** The order id associated with the purchase of the inapp product. */
@property(nonatomic, copy, nullable) NSString *orderId;

/** The inapp product SKU. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  The purchase state of the order. Possible values are: 0. Purchased 1.
 *  Canceled 2. Pending
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *purchaseState;

/**
 *  The time the product was purchased, in milliseconds since the epoch (Jan 1,
 *  1970).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *purchaseTimeMillis;

/** The purchase token generated to identify this purchase. */
@property(nonatomic, copy, nullable) NSString *purchaseToken;

/**
 *  The type of purchase of the inapp product. This field is only set if this
 *  purchase was not made using the standard in-app billing flow. Possible
 *  values are: 0. Test (i.e. purchased from a license testing account) 1. Promo
 *  (i.e. purchased using a promo code) 2. Rewarded (i.e. from watching a video
 *  ad instead of paying)
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *purchaseType;

/**
 *  The quantity associated with the purchase of the inapp product.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *quantity;

@end


/**
 *  Request for the product.purchases.acknowledge API.
 */
@interface GTLRAndroidPublisher_ProductPurchasesAcknowledgeRequest : GTLRObject

/** Payload to attach to the purchase. */
@property(nonatomic, copy, nullable) NSString *developerPayload;

@end


/**
 *  An Android app review.
 */
@interface GTLRAndroidPublisher_Review : GTLRObject

/** The name of the user who wrote the review. */
@property(nonatomic, copy, nullable) NSString *authorName;

/** A repeated field containing comments for the review. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Comment *> *comments;

/** Unique identifier for this review. */
@property(nonatomic, copy, nullable) NSString *reviewId;

@end


/**
 *  The result of replying/updating a reply to review.
 */
@interface GTLRAndroidPublisher_ReviewReplyResult : GTLRObject

/** The time at which the reply took effect. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Timestamp *lastEdited;

/** The reply text that was applied. */
@property(nonatomic, copy, nullable) NSString *replyText;

@end


/**
 *  Response listing reviews.
 */
@interface GTLRAndroidPublisher_ReviewsListResponse : GTLRObject

/** Information about the current page. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_PageInfo *pageInfo;

/** List of reviews. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Review *> *reviews;

/** Pagination token, to handle a number of products that is over one page. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_TokenPagination *tokenPagination;

@end


/**
 *  Request to reply to review or update existing reply.
 */
@interface GTLRAndroidPublisher_ReviewsReplyRequest : GTLRObject

/**
 *  The text to set as the reply. Replies of more than approximately 350
 *  characters will be rejected. HTML tags will be stripped.
 */
@property(nonatomic, copy, nullable) NSString *replyText;

@end


/**
 *  Response on status of replying to a review.
 */
@interface GTLRAndroidPublisher_ReviewsReplyResponse : GTLRObject

/** The result of replying/updating a reply to review. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_ReviewReplyResult *result;

@end


/**
 *  Information provided by the user when they complete the subscription
 *  cancellation flow (cancellation reason survey).
 */
@interface GTLRAndroidPublisher_SubscriptionCancelSurveyResult : GTLRObject

/**
 *  The cancellation reason the user chose in the survey. Possible values are:
 *  0. Other 1. I don't use this service enough 2. Technical issues 3.
 *  Cost-related reasons 4. I found a better app
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cancelSurveyReason;

/**
 *  The customized input cancel reason from the user. Only present when
 *  cancelReason is 0.
 */
@property(nonatomic, copy, nullable) NSString *userInputCancelReason;

@end


/**
 *  A SubscriptionDeferralInfo contains the data needed to defer a subscription
 *  purchase to a future expiry time.
 */
@interface GTLRAndroidPublisher_SubscriptionDeferralInfo : GTLRObject

/**
 *  The desired next expiry time to assign to the subscription, in milliseconds
 *  since the Epoch. The given time must be later/greater than the current
 *  expiry time for the subscription.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *desiredExpiryTimeMillis;

/**
 *  The expected expiry time for the subscription. If the current expiry time
 *  for the subscription is not the value specified here, the deferral will not
 *  occur.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expectedExpiryTimeMillis;

@end


/**
 *  Contains the price change information for a subscription that can be used to
 *  control the user journey for the price change in the app. This can be in the
 *  form of seeking confirmation from the user or tailoring the experience for a
 *  successful conversion.
 */
@interface GTLRAndroidPublisher_SubscriptionPriceChange : GTLRObject

/**
 *  The new price the subscription will renew with if the price change is
 *  accepted by the user.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Price *newPrice NS_RETURNS_NOT_RETAINED;

/**
 *  The current state of the price change. Possible values are: 0. Outstanding:
 *  State for a pending price change waiting for the user to agree. In this
 *  state, you can optionally seek confirmation from the user using the In-App
 *  API. 1. Accepted: State for an accepted price change that the subscription
 *  will renew with unless it's canceled. The price change takes effect on a
 *  future date when the subscription renews. Note that the change might not
 *  occur when the subscription is renewed next.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *state;

@end


/**
 *  A SubscriptionPurchase resource indicates the status of a user's
 *  subscription purchase.
 */
@interface GTLRAndroidPublisher_SubscriptionPurchase : GTLRObject

/**
 *  The acknowledgement state of the subscription product. Possible values are:
 *  0. Yet to be acknowledged 1. Acknowledged
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *acknowledgementState;

/**
 *  Whether the subscription will automatically be renewed when it reaches its
 *  current expiry time.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoRenewing;

/**
 *  Time at which the subscription will be automatically resumed, in
 *  milliseconds since the Epoch. Only present if the user has requested to
 *  pause the subscription.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoResumeTimeMillis;

/**
 *  The reason why a subscription was canceled or is not auto-renewing. Possible
 *  values are: 0. User canceled the subscription 1. Subscription was canceled
 *  by the system, for example because of a billing problem 2. Subscription was
 *  replaced with a new subscription 3. Subscription was canceled by the
 *  developer
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cancelReason;

/**
 *  Information provided by the user when they complete the subscription
 *  cancellation flow (cancellation reason survey).
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_SubscriptionCancelSurveyResult *cancelSurveyResult;

/**
 *  ISO 3166-1 alpha-2 billing country/region code of the user at the time the
 *  subscription was granted.
 */
@property(nonatomic, copy, nullable) NSString *countryCode;

/**
 *  A developer-specified string that contains supplemental information about an
 *  order.
 */
@property(nonatomic, copy, nullable) NSString *developerPayload;

/**
 *  The email address of the user when the subscription was purchased. Only
 *  present for purchases made with 'Subscribe with Google'.
 */
@property(nonatomic, copy, nullable) NSString *emailAddress;

/**
 *  Time at which the subscription will expire, in milliseconds since the Epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expiryTimeMillis;

/**
 *  User account identifier in the third-party service. Only present if account
 *  linking happened as part of the subscription purchase flow.
 */
@property(nonatomic, copy, nullable) NSString *externalAccountId;

/**
 *  The family name of the user when the subscription was purchased. Only
 *  present for purchases made with 'Subscribe with Google'.
 */
@property(nonatomic, copy, nullable) NSString *familyName;

/**
 *  The given name of the user when the subscription was purchased. Only present
 *  for purchases made with 'Subscribe with Google'.
 */
@property(nonatomic, copy, nullable) NSString *givenName;

/**
 *  Introductory price information of the subscription. This is only present
 *  when the subscription was purchased with an introductory price. This field
 *  does not indicate the subscription is currently in introductory price
 *  period.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_IntroductoryPriceInfo *introductoryPriceInfo;

/**
 *  This kind represents a subscriptionPurchase object in the androidpublisher
 *  service.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The purchase token of the originating purchase if this subscription is one
 *  of the following: 0. Re-signup of a canceled but non-lapsed subscription 1.
 *  Upgrade/downgrade from a previous subscription For example, suppose a user
 *  originally signs up and you receive purchase token X, then the user cancels
 *  and goes through the resignup flow (before their subscription lapses) and
 *  you receive purchase token Y, and finally the user upgrades their
 *  subscription and you receive purchase token Z. If you call this API with
 *  purchase token Z, this field will be set to Y. If you call this API with
 *  purchase token Y, this field will be set to X. If you call this API with
 *  purchase token X, this field will not be set.
 */
@property(nonatomic, copy, nullable) NSString *linkedPurchaseToken;

/**
 *  An obfuscated version of the id that is uniquely associated with the user's
 *  account in your app. Present for the following purchases: * If account
 *  linking happened as part of the subscription purchase flow. * It was
 *  specified using
 *  https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedaccountid
 *  when the purchase was made.
 */
@property(nonatomic, copy, nullable) NSString *obfuscatedExternalAccountId;

/**
 *  An obfuscated version of the id that is uniquely associated with the user's
 *  profile in your app. Only present if specified using
 *  https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedprofileid
 *  when the purchase was made.
 */
@property(nonatomic, copy, nullable) NSString *obfuscatedExternalProfileId;

/**
 *  The order id of the latest recurring order associated with the purchase of
 *  the subscription.
 */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  The payment state of the subscription. Possible values are: 0. Payment
 *  pending 1. Payment received 2. Free trial 3. Pending deferred
 *  upgrade/downgrade
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *paymentState;

/**
 *  Price of the subscription, not including tax. Price is expressed in
 *  micro-units, where 1,000,000 micro-units represents one unit of the
 *  currency. For example, if the subscription price is €1.99,
 *  price_amount_micros is 1990000.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *priceAmountMicros;

/**
 *  The latest price change information available. This is present only when
 *  there is an upcoming price change for the subscription yet to be applied.
 *  Once the subscription renews with the new price or the subscription is
 *  canceled, no price change information will be returned.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_SubscriptionPriceChange *priceChange;

/**
 *  ISO 4217 currency code for the subscription price. For example, if the price
 *  is specified in British pounds sterling, price_currency_code is "GBP".
 */
@property(nonatomic, copy, nullable) NSString *priceCurrencyCode;

/**
 *  The Google profile id of the user when the subscription was purchased. Only
 *  present for purchases made with 'Subscribe with Google'.
 */
@property(nonatomic, copy, nullable) NSString *profileId;

/**
 *  The profile name of the user when the subscription was purchased. Only
 *  present for purchases made with 'Subscribe with Google'.
 */
@property(nonatomic, copy, nullable) NSString *profileName;

/**
 *  The promotion code applied on this purchase. This field is only set if a
 *  vanity code promotion is applied when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *promotionCode;

/**
 *  The type of promotion applied on this purchase. This field is only set if a
 *  promotion is applied when the subscription was purchased. Possible values
 *  are: 0. One time code 1. Vanity code
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *promotionType;

/**
 *  The type of purchase of the subscription. This field is only set if this
 *  purchase was not made using the standard in-app billing flow. Possible
 *  values are: 0. Test (i.e. purchased from a license testing account) 1. Promo
 *  (i.e. purchased using a promo code)
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *purchaseType;

/**
 *  Time at which the subscription was granted, in milliseconds since the Epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startTimeMillis;

/**
 *  The time at which the subscription was canceled by the user, in milliseconds
 *  since the epoch. Only present if cancelReason is 0.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *userCancellationTimeMillis;

@end


/**
 *  Request for the purchases.subscriptions.acknowledge API.
 */
@interface GTLRAndroidPublisher_SubscriptionPurchasesAcknowledgeRequest : GTLRObject

/** Payload to attach to the purchase. */
@property(nonatomic, copy, nullable) NSString *developerPayload;

@end


/**
 *  Request for the purchases.subscriptions.defer API.
 */
@interface GTLRAndroidPublisher_SubscriptionPurchasesDeferRequest : GTLRObject

/** The information about the new desired expiry time for the subscription. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_SubscriptionDeferralInfo *deferralInfo;

@end


/**
 *  Response for the purchases.subscriptions.defer API.
 */
@interface GTLRAndroidPublisher_SubscriptionPurchasesDeferResponse : GTLRObject

/**
 *  The new expiry time for the subscription in milliseconds since the Epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *newExpiryTimeMillis NS_RETURNS_NOT_RETAINED;

@end


/**
 *  Response to list previously created system APK variants.
 */
@interface GTLRAndroidPublisher_SystemApksListResponse : GTLRObject

/** All system APK variants created. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Variant *> *variants;

@end


/**
 *  The testers of an app. The resource for TestersService.
 */
@interface GTLRAndroidPublisher_Testers : GTLRObject

/** All testing Google Groups, as email addresses. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *googleGroups;

@end


/**
 *  A Timestamp represents a point in time independent of any time zone or local
 *  calendar, encoded as a count of seconds and fractions of seconds at
 *  nanosecond resolution. The count is relative to an epoch at UTC midnight on
 *  January 1, 1970.
 */
@interface GTLRAndroidPublisher_Timestamp : GTLRObject

/**
 *  Non-negative fractions of a second at nanosecond resolution. Must be from 0
 *  to 999,999,999 inclusive.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Represents seconds of UTC time since Unix epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

@end


/**
 *  Pagination information returned by a List operation when token pagination is
 *  enabled. List operations that supports paging return only one "page" of
 *  results. This protocol buffer message describes the page that has been
 *  returned. When using token pagination, clients should use the next/previous
 *  token to get another page of the result. The presence or absence of
 *  next/previous token indicates whether a next/previous page is available and
 *  provides a mean of accessing this page. ListRequest.page_token should be set
 *  to either next_page_token or previous_page_token to access another page.
 */
@interface GTLRAndroidPublisher_TokenPagination : GTLRObject

/**
 *  Tokens to pass to the standard list field 'page_token'. Whenever available,
 *  tokens are preferred over manipulating start_index.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, copy, nullable) NSString *previousPageToken;

@end


/**
 *  A track configuration. The resource for TracksService.
 */
@interface GTLRAndroidPublisher_Track : GTLRObject

/**
 *  In a read request, represents all active releases in the track. In an update
 *  request, represents desired changes.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_TrackRelease *> *releases;

/** Identifier of the track. */
@property(nonatomic, copy, nullable) NSString *track;

@end


/**
 *  A release within a track.
 */
@interface GTLRAndroidPublisher_TrackRelease : GTLRObject

/** Restricts a release to a specific set of countries. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_CountryTargeting *countryTargeting;

/**
 *  In-app update priority of the release. All newly added APKs in the release
 *  will be considered at this priority. Can take values in the range [0, 5],
 *  with 5 the highest priority. Defaults to 0. in_app_update_priority can not
 *  be updated once the release is rolled out. See
 *  https://developer.android.com/guide/playcore/in-app-updates.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inAppUpdatePriority;

/**
 *  The release name. Not required to be unique. If not set, the name is
 *  generated from the APK's version_name. If the release contains multiple
 *  APKs, the name is generated from the date.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** A description of what is new in this release. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_LocalizedText *> *releaseNotes;

/**
 *  The status of the release.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_TrackRelease_Status_Completed The release
 *        will have no further changes. Its APKs are being served to all users,
 *        unless they are eligible to APKs of a more recent release. (Value:
 *        "completed")
 *    @arg @c kGTLRAndroidPublisher_TrackRelease_Status_Draft The release's APKs
 *        are not being served to users. (Value: "draft")
 *    @arg @c kGTLRAndroidPublisher_TrackRelease_Status_Halted The release's
 *        APKs will no longer be served to users. Users who already have these
 *        APKs are unaffected. (Value: "halted")
 *    @arg @c kGTLRAndroidPublisher_TrackRelease_Status_InProgress The release's
 *        APKs are being served to a fraction of users, determined by
 *        'user_fraction'. (Value: "inProgress")
 *    @arg @c kGTLRAndroidPublisher_TrackRelease_Status_StatusUnspecified
 *        Unspecified status. (Value: "statusUnspecified")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Fraction of users who are eligible for a staged release. 0 < fraction < 1.
 *  Can only be set when status is "inProgress" or "halted".
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *userFraction;

/**
 *  Version codes of all APKs in the release. Must include version codes to
 *  retain from previous releases.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *versionCodes;

@end


/**
 *  Response listing all tracks.
 */
@interface GTLRAndroidPublisher_TracksListResponse : GTLRObject

/** The kind of this response ("androidpublisher#tracksListResponse"). */
@property(nonatomic, copy, nullable) NSString *kind;

/** All tracks. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Track *> *tracks;

@end


/**
 *  User entry from conversation between user and developer.
 */
@interface GTLRAndroidPublisher_UserComment : GTLRObject

/**
 *  Integer Android SDK version of the user's device at the time the review was
 *  written, e.g. 23 is Marshmallow. May be absent.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *androidOsVersion;

/**
 *  Integer version code of the app as installed at the time the review was
 *  written. May be absent.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *appVersionCode;

/**
 *  String version name of the app as installed at the time the review was
 *  written. May be absent.
 */
@property(nonatomic, copy, nullable) NSString *appVersionName;

/** Codename for the reviewer's device, e.g. klte, flounder. May be absent. */
@property(nonatomic, copy, nullable) NSString *device;

/** Information about the characteristics of the user's device. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_DeviceMetadata *deviceMetadata;

/** The last time at which this comment was updated. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Timestamp *lastModified;

/**
 *  Untranslated text of the review, where the review was translated. If the
 *  review was not translated this is left blank.
 */
@property(nonatomic, copy, nullable) NSString *originalText;

/**
 *  Language code for the reviewer. This is taken from the device settings so is
 *  not guaranteed to match the language the review is written in. May be
 *  absent.
 */
@property(nonatomic, copy, nullable) NSString *reviewerLanguage;

/**
 *  The star rating associated with the review, from 1 to 5.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *starRating;

/**
 *  The content of the comment, i.e. review body. In some cases users have been
 *  able to write a review with separate title and body; in those cases the
 *  title and body are concatenated and separated by a tab character.
 */
@property(nonatomic, copy, nullable) NSString *text;

/**
 *  Number of users who have given this review a thumbs down.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *thumbsDownCount;

/**
 *  Number of users who have given this review a thumbs up.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *thumbsUpCount;

@end


/**
 *  A permission used by this APK.
 */
@interface GTLRAndroidPublisher_UsesPermission : GTLRObject

/**
 *  Optionally, the maximum SDK version for which the permission is required.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxSdkVersion;

/** The name of the permission requested. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  APK that is suitable for inclusion in a system image. The resource of
 *  SystemApksService.
 */
@interface GTLRAndroidPublisher_Variant : GTLRObject

/** The device spec used to generate the APK. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_DeviceSpec *deviceSpec;

/**
 *  Output only. The ID of a previously created system APK variant.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *variantId;

@end


/**
 *  A VoidedPurchase resource indicates a purchase that was either
 *  canceled/refunded/charged-back.
 */
@interface GTLRAndroidPublisher_VoidedPurchase : GTLRObject

/**
 *  This kind represents a voided purchase object in the androidpublisher
 *  service.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The order id which uniquely identifies a one-time purchase, subscription
 *  purchase, or subscription renewal.
 */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  The time at which the purchase was made, in milliseconds since the epoch
 *  (Jan 1, 1970).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *purchaseTimeMillis;

/**
 *  The token which uniquely identifies a one-time purchase or subscription. To
 *  uniquely identify subscription renewals use order_id (available starting
 *  from version 3 of the API).
 */
@property(nonatomic, copy, nullable) NSString *purchaseToken;

/**
 *  The reason why the purchase was voided, possible values are: 0. Other 1.
 *  Remorse 2. Not_received 3. Defective 4. Accidental_purchase 5. Fraud 6.
 *  Friendly_fraud 7. Chargeback
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *voidedReason;

/**
 *  The initiator of voided purchase, possible values are: 0. User 1. Developer
 *  2. Google
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *voidedSource;

/**
 *  The time at which the purchase was canceled/refunded/charged-back, in
 *  milliseconds since the epoch (Jan 1, 1970).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *voidedTimeMillis;

@end


/**
 *  Response for the voidedpurchases.list API.
 */
@interface GTLRAndroidPublisher_VoidedPurchasesListResponse : GTLRObject

/** General pagination information. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_PageInfo *pageInfo;

/** Pagination information for token pagination. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_TokenPagination *tokenPagination;

@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_VoidedPurchase *> *voidedPurchases;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
