// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play Developer API (androidpublisher/v3)
// Description:
//   Accesses Android application developers' Google Play accounts.
// Documentation:
//   https://developers.google.com/android-publisher

#import "GTLRAndroidPublisherQuery.h"

#import "GTLRAndroidPublisherObjects.h"

// ----------------------------------------------------------------------------
// Constants

// deobfuscationFileType
NSString * const kGTLRAndroidPublisherDeobfuscationFileTypeProguard = @"proguard";

// expansionFileType
NSString * const kGTLRAndroidPublisherExpansionFileTypeMain  = @"main";
NSString * const kGTLRAndroidPublisherExpansionFileTypePatch = @"patch";

// imageType
NSString * const kGTLRAndroidPublisherImageTypeFeatureGraphic  = @"featureGraphic";
NSString * const kGTLRAndroidPublisherImageTypeIcon            = @"icon";
NSString * const kGTLRAndroidPublisherImageTypePhoneScreenshots = @"phoneScreenshots";
NSString * const kGTLRAndroidPublisherImageTypePromoGraphic    = @"promoGraphic";
NSString * const kGTLRAndroidPublisherImageTypeSevenInchScreenshots = @"sevenInchScreenshots";
NSString * const kGTLRAndroidPublisherImageTypeTenInchScreenshots = @"tenInchScreenshots";
NSString * const kGTLRAndroidPublisherImageTypeTvBanner        = @"tvBanner";
NSString * const kGTLRAndroidPublisherImageTypeTvScreenshots   = @"tvScreenshots";
NSString * const kGTLRAndroidPublisherImageTypeWearScreenshots = @"wearScreenshots";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRAndroidPublisherQuery

@dynamic fields;

@end

@implementation GTLRAndroidPublisherQuery_EditsApksAddexternallyhosted

@dynamic editId, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ApksAddExternallyHostedRequest *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/apks/externallyHosted";
  GTLRAndroidPublisherQuery_EditsApksAddexternallyhosted *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_ApksAddExternallyHostedResponse class];
  query.loggingName = @"androidpublisher.edits.apks.addexternallyhosted";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsApksList

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/apks";
  GTLRAndroidPublisherQuery_EditsApksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_ApksListResponse class];
  query.loggingName = @"androidpublisher.edits.apks.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsApksUpload

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                    uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/apks";
  GTLRAndroidPublisherQuery_EditsApksUpload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRAndroidPublisher_Apk class];
  query.loggingName = @"androidpublisher.edits.apks.upload";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsBundlesList

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/bundles";
  GTLRAndroidPublisherQuery_EditsBundlesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_BundlesListResponse class];
  query.loggingName = @"androidpublisher.edits.bundles.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsBundlesUpload

@dynamic ackBundleInstallationWarning, editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                    uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/bundles";
  GTLRAndroidPublisherQuery_EditsBundlesUpload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRAndroidPublisher_Bundle class];
  query.loggingName = @"androidpublisher.edits.bundles.upload";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsCommit

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}:commit";
  GTLRAndroidPublisherQuery_EditsCommit *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_AppEdit class];
  query.loggingName = @"androidpublisher.edits.commit";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsDelete

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}";
  GTLRAndroidPublisherQuery_EditsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.loggingName = @"androidpublisher.edits.delete";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsDeobfuscationfilesUpload

@dynamic apkVersionCode, deobfuscationFileType, editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                      apkVersionCode:(NSInteger)apkVersionCode
               deobfuscationFileType:(NSString *)deobfuscationFileType
                    uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSArray *pathParams = @[
    @"apkVersionCode", @"deobfuscationFileType", @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}";
  GTLRAndroidPublisherQuery_EditsDeobfuscationfilesUpload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.apkVersionCode = apkVersionCode;
  query.deobfuscationFileType = deobfuscationFileType;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRAndroidPublisher_DeobfuscationFilesUploadResponse class];
  query.loggingName = @"androidpublisher.edits.deobfuscationfiles.upload";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsDetailsGet

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/details";
  GTLRAndroidPublisherQuery_EditsDetailsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_AppDetails class];
  query.loggingName = @"androidpublisher.edits.details.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsDetailsPatch

@dynamic editId, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_AppDetails *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/details";
  GTLRAndroidPublisherQuery_EditsDetailsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_AppDetails class];
  query.loggingName = @"androidpublisher.edits.details.patch";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsDetailsUpdate

@dynamic editId, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_AppDetails *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/details";
  GTLRAndroidPublisherQuery_EditsDetailsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_AppDetails class];
  query.loggingName = @"androidpublisher.edits.details.update";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsExpansionfilesGet

@dynamic apkVersionCode, editId, expansionFileType, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                      apkVersionCode:(NSInteger)apkVersionCode
                   expansionFileType:(NSString *)expansionFileType {
  NSArray *pathParams = @[
    @"apkVersionCode", @"editId", @"expansionFileType", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}";
  GTLRAndroidPublisherQuery_EditsExpansionfilesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.apkVersionCode = apkVersionCode;
  query.expansionFileType = expansionFileType;
  query.expectedObjectClass = [GTLRAndroidPublisher_ExpansionFile class];
  query.loggingName = @"androidpublisher.edits.expansionfiles.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsExpansionfilesPatch

@dynamic apkVersionCode, editId, expansionFileType, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ExpansionFile *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                 apkVersionCode:(NSInteger)apkVersionCode
              expansionFileType:(NSString *)expansionFileType {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"apkVersionCode", @"editId", @"expansionFileType", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}";
  GTLRAndroidPublisherQuery_EditsExpansionfilesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.apkVersionCode = apkVersionCode;
  query.expansionFileType = expansionFileType;
  query.expectedObjectClass = [GTLRAndroidPublisher_ExpansionFile class];
  query.loggingName = @"androidpublisher.edits.expansionfiles.patch";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsExpansionfilesUpdate

@dynamic apkVersionCode, editId, expansionFileType, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ExpansionFile *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                 apkVersionCode:(NSInteger)apkVersionCode
              expansionFileType:(NSString *)expansionFileType {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"apkVersionCode", @"editId", @"expansionFileType", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}";
  GTLRAndroidPublisherQuery_EditsExpansionfilesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.apkVersionCode = apkVersionCode;
  query.expansionFileType = expansionFileType;
  query.expectedObjectClass = [GTLRAndroidPublisher_ExpansionFile class];
  query.loggingName = @"androidpublisher.edits.expansionfiles.update";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsExpansionfilesUpload

@dynamic apkVersionCode, editId, expansionFileType, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                      apkVersionCode:(NSInteger)apkVersionCode
                   expansionFileType:(NSString *)expansionFileType
                    uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSArray *pathParams = @[
    @"apkVersionCode", @"editId", @"expansionFileType", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}";
  GTLRAndroidPublisherQuery_EditsExpansionfilesUpload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.apkVersionCode = apkVersionCode;
  query.expansionFileType = expansionFileType;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRAndroidPublisher_ExpansionFilesUploadResponse class];
  query.loggingName = @"androidpublisher.edits.expansionfiles.upload";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsGet

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}";
  GTLRAndroidPublisherQuery_EditsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_AppEdit class];
  query.loggingName = @"androidpublisher.edits.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsImagesDelete

@dynamic editId, imageId, imageType, language, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType
                             imageId:(NSString *)imageId {
  NSArray *pathParams = @[
    @"editId", @"imageId", @"imageType", @"language", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}";
  GTLRAndroidPublisherQuery_EditsImagesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.language = language;
  query.imageType = imageType;
  query.imageId = imageId;
  query.loggingName = @"androidpublisher.edits.images.delete";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsImagesDeleteall

@dynamic editId, imageType, language, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType {
  NSArray *pathParams = @[
    @"editId", @"imageType", @"language", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/listings/{language}/{imageType}";
  GTLRAndroidPublisherQuery_EditsImagesDeleteall *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.language = language;
  query.imageType = imageType;
  query.expectedObjectClass = [GTLRAndroidPublisher_ImagesDeleteAllResponse class];
  query.loggingName = @"androidpublisher.edits.images.deleteall";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsImagesList

@dynamic editId, imageType, language, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType {
  NSArray *pathParams = @[
    @"editId", @"imageType", @"language", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/listings/{language}/{imageType}";
  GTLRAndroidPublisherQuery_EditsImagesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.language = language;
  query.imageType = imageType;
  query.expectedObjectClass = [GTLRAndroidPublisher_ImagesListResponse class];
  query.loggingName = @"androidpublisher.edits.images.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsImagesUpload

@dynamic editId, imageType, language, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType
                    uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSArray *pathParams = @[
    @"editId", @"imageType", @"language", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/listings/{language}/{imageType}";
  GTLRAndroidPublisherQuery_EditsImagesUpload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.language = language;
  query.imageType = imageType;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRAndroidPublisher_ImagesUploadResponse class];
  query.loggingName = @"androidpublisher.edits.images.upload";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsInsert

@dynamic packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_AppEdit *)object
                    packageName:(NSString *)packageName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"{packageName}/edits";
  GTLRAndroidPublisherQuery_EditsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.expectedObjectClass = [GTLRAndroidPublisher_AppEdit class];
  query.loggingName = @"androidpublisher.edits.insert";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsListingsDelete

@dynamic editId, language, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language {
  NSArray *pathParams = @[
    @"editId", @"language", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/listings/{language}";
  GTLRAndroidPublisherQuery_EditsListingsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.language = language;
  query.loggingName = @"androidpublisher.edits.listings.delete";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsListingsDeleteall

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/listings";
  GTLRAndroidPublisherQuery_EditsListingsDeleteall *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.loggingName = @"androidpublisher.edits.listings.deleteall";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsListingsGet

@dynamic editId, language, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language {
  NSArray *pathParams = @[
    @"editId", @"language", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/listings/{language}";
  GTLRAndroidPublisherQuery_EditsListingsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.language = language;
  query.expectedObjectClass = [GTLRAndroidPublisher_Listing class];
  query.loggingName = @"androidpublisher.edits.listings.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsListingsList

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/listings";
  GTLRAndroidPublisherQuery_EditsListingsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_ListingsListResponse class];
  query.loggingName = @"androidpublisher.edits.listings.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsListingsPatch

@dynamic editId, language, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Listing *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                       language:(NSString *)language {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"language", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/listings/{language}";
  GTLRAndroidPublisherQuery_EditsListingsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.language = language;
  query.expectedObjectClass = [GTLRAndroidPublisher_Listing class];
  query.loggingName = @"androidpublisher.edits.listings.patch";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsListingsUpdate

@dynamic editId, language, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Listing *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                       language:(NSString *)language {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"language", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/listings/{language}";
  GTLRAndroidPublisherQuery_EditsListingsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.language = language;
  query.expectedObjectClass = [GTLRAndroidPublisher_Listing class];
  query.loggingName = @"androidpublisher.edits.listings.update";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsTestersGet

@dynamic editId, packageName, track;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                               track:(NSString *)track {
  NSArray *pathParams = @[
    @"editId", @"packageName", @"track"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/testers/{track}";
  GTLRAndroidPublisherQuery_EditsTestersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.track = track;
  query.expectedObjectClass = [GTLRAndroidPublisher_Testers class];
  query.loggingName = @"androidpublisher.edits.testers.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsTestersPatch

@dynamic editId, packageName, track;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Testers *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"packageName", @"track"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/testers/{track}";
  GTLRAndroidPublisherQuery_EditsTestersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.track = track;
  query.expectedObjectClass = [GTLRAndroidPublisher_Testers class];
  query.loggingName = @"androidpublisher.edits.testers.patch";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsTestersUpdate

@dynamic editId, packageName, track;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Testers *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"packageName", @"track"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/testers/{track}";
  GTLRAndroidPublisherQuery_EditsTestersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.track = track;
  query.expectedObjectClass = [GTLRAndroidPublisher_Testers class];
  query.loggingName = @"androidpublisher.edits.testers.update";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsTracksGet

@dynamic editId, packageName, track;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                               track:(NSString *)track {
  NSArray *pathParams = @[
    @"editId", @"packageName", @"track"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/tracks/{track}";
  GTLRAndroidPublisherQuery_EditsTracksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.track = track;
  query.expectedObjectClass = [GTLRAndroidPublisher_Track class];
  query.loggingName = @"androidpublisher.edits.tracks.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsTracksList

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/tracks";
  GTLRAndroidPublisherQuery_EditsTracksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_TracksListResponse class];
  query.loggingName = @"androidpublisher.edits.tracks.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsTracksPatch

@dynamic editId, packageName, track;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Track *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"packageName", @"track"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/tracks/{track}";
  GTLRAndroidPublisherQuery_EditsTracksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.track = track;
  query.expectedObjectClass = [GTLRAndroidPublisher_Track class];
  query.loggingName = @"androidpublisher.edits.tracks.patch";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsTracksUpdate

@dynamic editId, packageName, track;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Track *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"packageName", @"track"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}/tracks/{track}";
  GTLRAndroidPublisherQuery_EditsTracksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.track = track;
  query.expectedObjectClass = [GTLRAndroidPublisher_Track class];
  query.loggingName = @"androidpublisher.edits.tracks.update";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsValidate

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/edits/{editId}:validate";
  GTLRAndroidPublisherQuery_EditsValidate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_AppEdit class];
  query.loggingName = @"androidpublisher.edits.validate";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_InappproductsDelete

@dynamic packageName, sku;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                                 sku:(NSString *)sku {
  NSArray *pathParams = @[
    @"packageName", @"sku"
  ];
  NSString *pathURITemplate = @"{packageName}/inappproducts/{sku}";
  GTLRAndroidPublisherQuery_InappproductsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.sku = sku;
  query.loggingName = @"androidpublisher.inappproducts.delete";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_InappproductsGet

@dynamic packageName, sku;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                                 sku:(NSString *)sku {
  NSArray *pathParams = @[
    @"packageName", @"sku"
  ];
  NSString *pathURITemplate = @"{packageName}/inappproducts/{sku}";
  GTLRAndroidPublisherQuery_InappproductsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.sku = sku;
  query.expectedObjectClass = [GTLRAndroidPublisher_InAppProduct class];
  query.loggingName = @"androidpublisher.inappproducts.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_InappproductsInsert

@dynamic autoConvertMissingPrices, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_InAppProduct *)object
                    packageName:(NSString *)packageName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"{packageName}/inappproducts";
  GTLRAndroidPublisherQuery_InappproductsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.expectedObjectClass = [GTLRAndroidPublisher_InAppProduct class];
  query.loggingName = @"androidpublisher.inappproducts.insert";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_InappproductsList

@dynamic maxResults, packageName, startIndex, token;

+ (instancetype)queryWithPackageName:(NSString *)packageName {
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"{packageName}/inappproducts";
  GTLRAndroidPublisherQuery_InappproductsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.expectedObjectClass = [GTLRAndroidPublisher_InappproductsListResponse class];
  query.loggingName = @"androidpublisher.inappproducts.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_InappproductsPatch

@dynamic autoConvertMissingPrices, packageName, sku;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_InAppProduct *)object
                    packageName:(NSString *)packageName
                            sku:(NSString *)sku {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"packageName", @"sku"
  ];
  NSString *pathURITemplate = @"{packageName}/inappproducts/{sku}";
  GTLRAndroidPublisherQuery_InappproductsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.sku = sku;
  query.expectedObjectClass = [GTLRAndroidPublisher_InAppProduct class];
  query.loggingName = @"androidpublisher.inappproducts.patch";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_InappproductsUpdate

@dynamic autoConvertMissingPrices, packageName, sku;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_InAppProduct *)object
                    packageName:(NSString *)packageName
                            sku:(NSString *)sku {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"packageName", @"sku"
  ];
  NSString *pathURITemplate = @"{packageName}/inappproducts/{sku}";
  GTLRAndroidPublisherQuery_InappproductsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.sku = sku;
  query.expectedObjectClass = [GTLRAndroidPublisher_InAppProduct class];
  query.loggingName = @"androidpublisher.inappproducts.update";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_OrdersRefund

@dynamic orderId, packageName, revoke;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                             orderId:(NSString *)orderId {
  NSArray *pathParams = @[
    @"orderId", @"packageName"
  ];
  NSString *pathURITemplate = @"{packageName}/orders/{orderId}:refund";
  GTLRAndroidPublisherQuery_OrdersRefund *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.orderId = orderId;
  query.loggingName = @"androidpublisher.orders.refund";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesProductsGet

@dynamic packageName, productId, token;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId
                               token:(NSString *)token {
  NSArray *pathParams = @[
    @"packageName", @"productId", @"token"
  ];
  NSString *pathURITemplate = @"{packageName}/purchases/products/{productId}/tokens/{token}";
  GTLRAndroidPublisherQuery_PurchasesProductsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.productId = productId;
  query.token = token;
  query.expectedObjectClass = [GTLRAndroidPublisher_ProductPurchase class];
  query.loggingName = @"androidpublisher.purchases.products.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesSubscriptionsCancel

@dynamic packageName, subscriptionId, token;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token {
  NSArray *pathParams = @[
    @"packageName", @"subscriptionId", @"token"
  ];
  NSString *pathURITemplate = @"{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel";
  GTLRAndroidPublisherQuery_PurchasesSubscriptionsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.subscriptionId = subscriptionId;
  query.token = token;
  query.loggingName = @"androidpublisher.purchases.subscriptions.cancel";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesSubscriptionsDefer

@dynamic packageName, subscriptionId, token;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_SubscriptionPurchasesDeferRequest *)object
                    packageName:(NSString *)packageName
                 subscriptionId:(NSString *)subscriptionId
                          token:(NSString *)token {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"packageName", @"subscriptionId", @"token"
  ];
  NSString *pathURITemplate = @"{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer";
  GTLRAndroidPublisherQuery_PurchasesSubscriptionsDefer *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.subscriptionId = subscriptionId;
  query.token = token;
  query.expectedObjectClass = [GTLRAndroidPublisher_SubscriptionPurchasesDeferResponse class];
  query.loggingName = @"androidpublisher.purchases.subscriptions.defer";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesSubscriptionsGet

@dynamic packageName, subscriptionId, token;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token {
  NSArray *pathParams = @[
    @"packageName", @"subscriptionId", @"token"
  ];
  NSString *pathURITemplate = @"{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}";
  GTLRAndroidPublisherQuery_PurchasesSubscriptionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.subscriptionId = subscriptionId;
  query.token = token;
  query.expectedObjectClass = [GTLRAndroidPublisher_SubscriptionPurchase class];
  query.loggingName = @"androidpublisher.purchases.subscriptions.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesSubscriptionsRefund

@dynamic packageName, subscriptionId, token;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token {
  NSArray *pathParams = @[
    @"packageName", @"subscriptionId", @"token"
  ];
  NSString *pathURITemplate = @"{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund";
  GTLRAndroidPublisherQuery_PurchasesSubscriptionsRefund *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.subscriptionId = subscriptionId;
  query.token = token;
  query.loggingName = @"androidpublisher.purchases.subscriptions.refund";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesSubscriptionsRevoke

@dynamic packageName, subscriptionId, token;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token {
  NSArray *pathParams = @[
    @"packageName", @"subscriptionId", @"token"
  ];
  NSString *pathURITemplate = @"{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke";
  GTLRAndroidPublisherQuery_PurchasesSubscriptionsRevoke *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.subscriptionId = subscriptionId;
  query.token = token;
  query.loggingName = @"androidpublisher.purchases.subscriptions.revoke";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesVoidedpurchasesList

@dynamic endTime, maxResults, packageName, startIndex, startTime, token;

+ (instancetype)queryWithPackageName:(NSString *)packageName {
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"{packageName}/purchases/voidedpurchases";
  GTLRAndroidPublisherQuery_PurchasesVoidedpurchasesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.expectedObjectClass = [GTLRAndroidPublisher_VoidedPurchasesListResponse class];
  query.loggingName = @"androidpublisher.purchases.voidedpurchases.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_ReviewsGet

@dynamic packageName, reviewId, translationLanguage;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                            reviewId:(NSString *)reviewId {
  NSArray *pathParams = @[
    @"packageName", @"reviewId"
  ];
  NSString *pathURITemplate = @"{packageName}/reviews/{reviewId}";
  GTLRAndroidPublisherQuery_ReviewsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.reviewId = reviewId;
  query.expectedObjectClass = [GTLRAndroidPublisher_Review class];
  query.loggingName = @"androidpublisher.reviews.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_ReviewsList

@dynamic maxResults, packageName, startIndex, token, translationLanguage;

+ (instancetype)queryWithPackageName:(NSString *)packageName {
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"{packageName}/reviews";
  GTLRAndroidPublisherQuery_ReviewsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.expectedObjectClass = [GTLRAndroidPublisher_ReviewsListResponse class];
  query.loggingName = @"androidpublisher.reviews.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_ReviewsReply

@dynamic packageName, reviewId;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ReviewsReplyRequest *)object
                    packageName:(NSString *)packageName
                       reviewId:(NSString *)reviewId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"packageName", @"reviewId"
  ];
  NSString *pathURITemplate = @"{packageName}/reviews/{reviewId}:reply";
  GTLRAndroidPublisherQuery_ReviewsReply *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.reviewId = reviewId;
  query.expectedObjectClass = [GTLRAndroidPublisher_ReviewsReplyResponse class];
  query.loggingName = @"androidpublisher.reviews.reply";
  return query;
}

@end
