// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play Android Developer API (androidpublisher/v3)
// Description:
//   Lets Android application developers access their Google Play accounts.
// Documentation:
//   https://developers.google.com/android-publisher

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAndroidPublisher_ApksAddExternallyHostedRequest;
@class GTLRAndroidPublisher_AppDetails;
@class GTLRAndroidPublisher_AppEdit;
@class GTLRAndroidPublisher_ExpansionFile;
@class GTLRAndroidPublisher_InAppProduct;
@class GTLRAndroidPublisher_Listing;
@class GTLRAndroidPublisher_ProductPurchasesAcknowledgeRequest;
@class GTLRAndroidPublisher_ReviewsReplyRequest;
@class GTLRAndroidPublisher_SubscriptionPurchasesAcknowledgeRequest;
@class GTLRAndroidPublisher_SubscriptionPurchasesDeferRequest;
@class GTLRAndroidPublisher_Testers;
@class GTLRAndroidPublisher_Track;
@class GTLRAndroidPublisher_Variant;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// deobfuscationFileType

/**
 *  Unspecified deobfuscation file type.
 *
 *  Value: "deobfuscationFileTypeUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherDeobfuscationFileTypeDeobfuscationFileTypeUnspecified;
/**
 *  Native debugging symbols file type.
 *
 *  Value: "nativeCode"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherDeobfuscationFileTypeNativeCode;
/**
 *  Proguard deobfuscation file type.
 *
 *  Value: "proguard"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherDeobfuscationFileTypeProguard;

// ----------------------------------------------------------------------------
// expansionFileType

/**
 *  Unspecified expansion file type.
 *
 *  Value: "expansionFileTypeUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified;
/**
 *  Main expansion file.
 *
 *  Value: "main"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherExpansionFileTypeMain;
/**
 *  Patch expansion file.
 *
 *  Value: "patch"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherExpansionFileTypePatch;

// ----------------------------------------------------------------------------
// imageType

/**
 *  Unspecified type. Do not use.
 *
 *  Value: "appImageTypeUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified;
/**
 *  Feature graphic.
 *
 *  Value: "featureGraphic"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypeFeatureGraphic;
/**
 *  Icon.
 *
 *  Value: "icon"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypeIcon;
/**
 *  Phone screenshot.
 *
 *  Value: "phoneScreenshots"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypePhoneScreenshots;
/**
 *  Seven inch screenshot.
 *
 *  Value: "sevenInchScreenshots"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypeSevenInchScreenshots;
/**
 *  Ten inch screenshot.
 *
 *  Value: "tenInchScreenshots"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypeTenInchScreenshots;
/**
 *  TV banner.
 *
 *  Value: "tvBanner"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypeTvBanner;
/**
 *  TV screenshot.
 *
 *  Value: "tvScreenshots"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypeTvScreenshots;
/**
 *  Wear screenshot.
 *
 *  Value: "wearScreenshots"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypeWearScreenshots;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Android Publisher query classes.
 */
@interface GTLRAndroidPublisherQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new APK without uploading the APK itself to Google Play, instead
 *  hosting the APK at a specified URL. This function is only available to
 *  organizations using Managed Play whose application is configured to restrict
 *  distribution to the organizations.
 *
 *  Method: androidpublisher.edits.apks.addexternallyhosted
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsApksAddexternallyhosted : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsApksAddexternallyhostedWithObject:packageName:editId:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ApksAddExternallyHostedResponse.
 *
 *  Creates a new APK without uploading the APK itself to Google Play, instead
 *  hosting the APK at a specified URL. This function is only available to
 *  organizations using Managed Play whose application is configured to restrict
 *  distribution to the organizations.
 *
 *  @param object The @c GTLRAndroidPublisher_ApksAddExternallyHostedRequest to
 *    include in the query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsApksAddexternallyhosted
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ApksAddExternallyHostedRequest *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId;

@end

/**
 *  Lists all current APKs of the app and edit.
 *
 *  Method: androidpublisher.edits.apks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsApksList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsApksListWithpackageName:editId:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ApksListResponse.
 *
 *  Lists all current APKs of the app and edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsApksList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Uploads an APK and adds to the current edit.
 *
 *  Method: androidpublisher.edits.apks.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsApksUpload : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsApksUploadWithpackageName:editId:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_Apk.
 *
 *  Uploads an APK and adds to the current edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    10737418240. Accepted MIME types: application/octet-stream,
 *    application/vnd.android.package-archive
 *
 *  @return GTLRAndroidPublisherQuery_EditsApksUpload
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Lists all current Android App Bundles of the app and edit.
 *
 *  Method: androidpublisher.edits.bundles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsBundlesList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsBundlesListWithpackageName:editId:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_BundlesListResponse.
 *
 *  Lists all current Android App Bundles of the app and edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsBundlesList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Uploads a new Android App Bundle to this edit. If you are using the Google
 *  API client libraries, please increase the timeout of the http request before
 *  calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts
 *  and
 *  Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors)
 *  for an example in java.
 *
 *  Method: androidpublisher.edits.bundles.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsBundlesUpload : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsBundlesUploadWithpackageName:editId:]

/**
 *  Must be set to true if the bundle installation may trigger a warning on user
 *  devices (for example, if installation size may be over a threshold,
 *  typically 100 MB).
 */
@property(nonatomic, assign) BOOL ackBundleInstallationWarning;

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_Bundle.
 *
 *  Uploads a new Android App Bundle to this edit. If you are using the Google
 *  API client libraries, please increase the timeout of the http request before
 *  calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts
 *  and
 *  Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors)
 *  for an example in java.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    10737418240. Accepted MIME type: application/octet-stream
 *
 *  @return GTLRAndroidPublisherQuery_EditsBundlesUpload
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Commits an app edit.
 *
 *  Method: androidpublisher.edits.commit
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsCommit : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsCommitWithpackageName:editId:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppEdit.
 *
 *  Commits an app edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsCommit
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Deletes an app edit.
 *
 *  Method: androidpublisher.edits.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsDelete : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsDeleteWithpackageName:editId:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an app edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsDelete
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Uploads a new deobfuscation file and attaches to the specified APK.
 *
 *  Method: androidpublisher.edits.deobfuscationfiles.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsDeobfuscationfilesUpload : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsDeobfuscationfilesUploadWithpackageName:editId:apkVersionCode:deobfuscationFileType:]

/** The version code of the APK whose Deobfuscation File is being uploaded. */
@property(nonatomic, assign) NSInteger apkVersionCode;

/**
 *  The type of the deobfuscation file.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherDeobfuscationFileTypeDeobfuscationFileTypeUnspecified
 *        Unspecified deobfuscation file type. (Value:
 *        "deobfuscationFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherDeobfuscationFileTypeProguard Proguard
 *        deobfuscation file type. (Value: "proguard")
 *    @arg @c kGTLRAndroidPublisherDeobfuscationFileTypeNativeCode Native
 *        debugging symbols file type. (Value: "nativeCode")
 */
@property(nonatomic, copy, nullable) NSString *deobfuscationFileType;

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Unique identifier for the Android app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_DeobfuscationFilesUploadResponse.
 *
 *  Uploads a new deobfuscation file and attaches to the specified APK.
 *
 *  @param packageName Unique identifier for the Android app.
 *  @param editId Unique identifier for this edit.
 *  @param apkVersionCode The version code of the APK whose Deobfuscation File
 *    is being uploaded.
 *  @param deobfuscationFileType The type of the deobfuscation file.
 *
 *  Likely values for @c deobfuscationFileType:
 *    @arg @c kGTLRAndroidPublisherDeobfuscationFileTypeDeobfuscationFileTypeUnspecified
 *        Unspecified deobfuscation file type. (Value:
 *        "deobfuscationFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherDeobfuscationFileTypeProguard Proguard
 *        deobfuscation file type. (Value: "proguard")
 *    @arg @c kGTLRAndroidPublisherDeobfuscationFileTypeNativeCode Native
 *        debugging symbols file type. (Value: "nativeCode")
 *  @param uploadParameters The media to include in this query. Maximum size
 *    314572800. Accepted MIME type: application/octet-stream
 *
 *  @return GTLRAndroidPublisherQuery_EditsDeobfuscationfilesUpload
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                      apkVersionCode:(NSInteger)apkVersionCode
               deobfuscationFileType:(NSString *)deobfuscationFileType
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Gets details of an app.
 *
 *  Method: androidpublisher.edits.details.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsDetailsGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsDetailsGetWithpackageName:editId:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppDetails.
 *
 *  Gets details of an app.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsDetailsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Patches details of an app.
 *
 *  Method: androidpublisher.edits.details.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsDetailsPatch : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsDetailsPatchWithObject:packageName:editId:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppDetails.
 *
 *  Patches details of an app.
 *
 *  @param object The @c GTLRAndroidPublisher_AppDetails to include in the
 *    query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsDetailsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_AppDetails *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId;

@end

/**
 *  Updates details of an app.
 *
 *  Method: androidpublisher.edits.details.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsDetailsUpdate : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsDetailsUpdateWithObject:packageName:editId:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppDetails.
 *
 *  Updates details of an app.
 *
 *  @param object The @c GTLRAndroidPublisher_AppDetails to include in the
 *    query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsDetailsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_AppDetails *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId;

@end

/**
 *  Fetches the expansion file configuration for the specified APK.
 *
 *  Method: androidpublisher.edits.expansionfiles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsExpansionfilesGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsExpansionfilesGetWithpackageName:editId:apkVersionCode:expansionFileType:]

/**
 *  The version code of the APK whose expansion file configuration is being read
 *  or modified.
 */
@property(nonatomic, assign) NSInteger apkVersionCode;

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  The file type of the file configuration which is being read or modified.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified
 *        Unspecified expansion file type. (Value:
 *        "expansionFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Main expansion file.
 *        (Value: "main")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Patch expansion file.
 *        (Value: "patch")
 */
@property(nonatomic, copy, nullable) NSString *expansionFileType;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ExpansionFile.
 *
 *  Fetches the expansion file configuration for the specified APK.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param apkVersionCode The version code of the APK whose expansion file
 *    configuration is being read or modified.
 *  @param expansionFileType The file type of the file configuration which is
 *    being read or modified.
 *
 *  Likely values for @c expansionFileType:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified
 *        Unspecified expansion file type. (Value:
 *        "expansionFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Main expansion file.
 *        (Value: "main")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Patch expansion file.
 *        (Value: "patch")
 *
 *  @return GTLRAndroidPublisherQuery_EditsExpansionfilesGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                      apkVersionCode:(NSInteger)apkVersionCode
                   expansionFileType:(NSString *)expansionFileType;

@end

/**
 *  Patches the APK's expansion file configuration to reference another APK's
 *  expansion file. To add a new expansion file use the Upload method.
 *
 *  Method: androidpublisher.edits.expansionfiles.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsExpansionfilesPatch : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsExpansionfilesPatchWithObject:packageName:editId:apkVersionCode:expansionFileType:]

/**
 *  The version code of the APK whose expansion file configuration is being read
 *  or modified.
 */
@property(nonatomic, assign) NSInteger apkVersionCode;

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  The file type of the expansion file configuration which is being updated.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified
 *        Unspecified expansion file type. (Value:
 *        "expansionFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Main expansion file.
 *        (Value: "main")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Patch expansion file.
 *        (Value: "patch")
 */
@property(nonatomic, copy, nullable) NSString *expansionFileType;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ExpansionFile.
 *
 *  Patches the APK's expansion file configuration to reference another APK's
 *  expansion file. To add a new expansion file use the Upload method.
 *
 *  @param object The @c GTLRAndroidPublisher_ExpansionFile to include in the
 *    query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param apkVersionCode The version code of the APK whose expansion file
 *    configuration is being read or modified.
 *  @param expansionFileType The file type of the expansion file configuration
 *    which is being updated.
 *
 *  Likely values for @c expansionFileType:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified
 *        Unspecified expansion file type. (Value:
 *        "expansionFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Main expansion file.
 *        (Value: "main")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Patch expansion file.
 *        (Value: "patch")
 *
 *  @return GTLRAndroidPublisherQuery_EditsExpansionfilesPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ExpansionFile *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                 apkVersionCode:(NSInteger)apkVersionCode
              expansionFileType:(NSString *)expansionFileType;

@end

/**
 *  Updates the APK's expansion file configuration to reference another APK's
 *  expansion file. To add a new expansion file use the Upload method.
 *
 *  Method: androidpublisher.edits.expansionfiles.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsExpansionfilesUpdate : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsExpansionfilesUpdateWithObject:packageName:editId:apkVersionCode:expansionFileType:]

/**
 *  The version code of the APK whose expansion file configuration is being read
 *  or modified.
 */
@property(nonatomic, assign) NSInteger apkVersionCode;

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  The file type of the file configuration which is being read or modified.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified
 *        Unspecified expansion file type. (Value:
 *        "expansionFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Main expansion file.
 *        (Value: "main")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Patch expansion file.
 *        (Value: "patch")
 */
@property(nonatomic, copy, nullable) NSString *expansionFileType;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ExpansionFile.
 *
 *  Updates the APK's expansion file configuration to reference another APK's
 *  expansion file. To add a new expansion file use the Upload method.
 *
 *  @param object The @c GTLRAndroidPublisher_ExpansionFile to include in the
 *    query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param apkVersionCode The version code of the APK whose expansion file
 *    configuration is being read or modified.
 *  @param expansionFileType The file type of the file configuration which is
 *    being read or modified.
 *
 *  Likely values for @c expansionFileType:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified
 *        Unspecified expansion file type. (Value:
 *        "expansionFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Main expansion file.
 *        (Value: "main")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Patch expansion file.
 *        (Value: "patch")
 *
 *  @return GTLRAndroidPublisherQuery_EditsExpansionfilesUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ExpansionFile *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                 apkVersionCode:(NSInteger)apkVersionCode
              expansionFileType:(NSString *)expansionFileType;

@end

/**
 *  Uploads a new expansion file and attaches to the specified APK.
 *
 *  Method: androidpublisher.edits.expansionfiles.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsExpansionfilesUpload : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsExpansionfilesUploadWithpackageName:editId:apkVersionCode:expansionFileType:]

/**
 *  The version code of the APK whose expansion file configuration is being read
 *  or modified.
 */
@property(nonatomic, assign) NSInteger apkVersionCode;

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  The file type of the expansion file configuration which is being updated.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified
 *        Unspecified expansion file type. (Value:
 *        "expansionFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Main expansion file.
 *        (Value: "main")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Patch expansion file.
 *        (Value: "patch")
 */
@property(nonatomic, copy, nullable) NSString *expansionFileType;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ExpansionFilesUploadResponse.
 *
 *  Uploads a new expansion file and attaches to the specified APK.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param apkVersionCode The version code of the APK whose expansion file
 *    configuration is being read or modified.
 *  @param expansionFileType The file type of the expansion file configuration
 *    which is being updated.
 *
 *  Likely values for @c expansionFileType:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified
 *        Unspecified expansion file type. (Value:
 *        "expansionFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Main expansion file.
 *        (Value: "main")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Patch expansion file.
 *        (Value: "patch")
 *  @param uploadParameters The media to include in this query. Maximum size
 *    2147483648. Accepted MIME type: application/octet-stream
 *
 *  @return GTLRAndroidPublisherQuery_EditsExpansionfilesUpload
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                      apkVersionCode:(NSInteger)apkVersionCode
                   expansionFileType:(NSString *)expansionFileType
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Gets an app edit.
 *
 *  Method: androidpublisher.edits.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsGetWithpackageName:editId:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppEdit.
 *
 *  Gets an app edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Deletes the image (specified by id) from the edit.
 *
 *  Method: androidpublisher.edits.images.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsImagesDelete : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsImagesDeleteWithpackageName:editId:language:imageType:imageId:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier an image within the set of images attached to this edit.
 */
@property(nonatomic, copy, nullable) NSString *imageId;

/**
 *  Type of the Image.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified Unspecified
 *        type. Do not use. (Value: "appImageTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Phone screenshot.
 *        (Value: "phoneScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Seven inch
 *        screenshot. (Value: "sevenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Ten inch
 *        screenshot. (Value: "tenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots TV screenshot. (Value:
 *        "tvScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Wear screenshot.
 *        (Value: "wearScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Icon. (Value: "icon")
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Feature graphic.
 *        (Value: "featureGraphic")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner TV banner. (Value:
 *        "tvBanner")
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German).
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes the image (specified by id) from the edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param language Language localization code (a BCP-47 language tag; for
 *    example, "de-AT" for Austrian German).
 *  @param imageType Type of the Image.
 *  @param imageId Unique identifier an image within the set of images attached
 *    to this edit.
 *
 *  Likely values for @c imageType:
 *    @arg @c kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified Unspecified
 *        type. Do not use. (Value: "appImageTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Phone screenshot.
 *        (Value: "phoneScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Seven inch
 *        screenshot. (Value: "sevenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Ten inch
 *        screenshot. (Value: "tenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots TV screenshot. (Value:
 *        "tvScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Wear screenshot.
 *        (Value: "wearScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Icon. (Value: "icon")
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Feature graphic.
 *        (Value: "featureGraphic")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner TV banner. (Value:
 *        "tvBanner")
 *
 *  @return GTLRAndroidPublisherQuery_EditsImagesDelete
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType
                             imageId:(NSString *)imageId;

@end

/**
 *  Deletes all images for the specified language and image type. Returns an
 *  empty response if no images are found.
 *
 *  Method: androidpublisher.edits.images.deleteall
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsImagesDeleteall : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsImagesDeleteallWithpackageName:editId:language:imageType:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Type of the Image. Providing an image type that refers to no images is a
 *  no-op.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified Unspecified
 *        type. Do not use. (Value: "appImageTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Phone screenshot.
 *        (Value: "phoneScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Seven inch
 *        screenshot. (Value: "sevenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Ten inch
 *        screenshot. (Value: "tenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots TV screenshot. (Value:
 *        "tvScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Wear screenshot.
 *        (Value: "wearScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Icon. (Value: "icon")
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Feature graphic.
 *        (Value: "featureGraphic")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner TV banner. (Value:
 *        "tvBanner")
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German). Providing a language that is not supported by the App is a
 *  no-op.
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ImagesDeleteAllResponse.
 *
 *  Deletes all images for the specified language and image type. Returns an
 *  empty response if no images are found.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param language Language localization code (a BCP-47 language tag; for
 *    example, "de-AT" for Austrian German). Providing a language that is not
 *    supported by the App is a no-op.
 *  @param imageType Type of the Image. Providing an image type that refers to
 *    no images is a no-op.
 *
 *  Likely values for @c imageType:
 *    @arg @c kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified Unspecified
 *        type. Do not use. (Value: "appImageTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Phone screenshot.
 *        (Value: "phoneScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Seven inch
 *        screenshot. (Value: "sevenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Ten inch
 *        screenshot. (Value: "tenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots TV screenshot. (Value:
 *        "tvScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Wear screenshot.
 *        (Value: "wearScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Icon. (Value: "icon")
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Feature graphic.
 *        (Value: "featureGraphic")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner TV banner. (Value:
 *        "tvBanner")
 *
 *  @return GTLRAndroidPublisherQuery_EditsImagesDeleteall
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType;

@end

/**
 *  Lists all images. The response may be empty.
 *
 *  Method: androidpublisher.edits.images.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsImagesList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsImagesListWithpackageName:editId:language:imageType:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Type of the Image. Providing an image type that refers to no images will
 *  return an empty response.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified Unspecified
 *        type. Do not use. (Value: "appImageTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Phone screenshot.
 *        (Value: "phoneScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Seven inch
 *        screenshot. (Value: "sevenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Ten inch
 *        screenshot. (Value: "tenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots TV screenshot. (Value:
 *        "tvScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Wear screenshot.
 *        (Value: "wearScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Icon. (Value: "icon")
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Feature graphic.
 *        (Value: "featureGraphic")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner TV banner. (Value:
 *        "tvBanner")
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German). There must be a store listing for the specified language.
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ImagesListResponse.
 *
 *  Lists all images. The response may be empty.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param language Language localization code (a BCP-47 language tag; for
 *    example, "de-AT" for Austrian German). There must be a store listing for
 *    the specified language.
 *  @param imageType Type of the Image. Providing an image type that refers to
 *    no images will return an empty response.
 *
 *  Likely values for @c imageType:
 *    @arg @c kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified Unspecified
 *        type. Do not use. (Value: "appImageTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Phone screenshot.
 *        (Value: "phoneScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Seven inch
 *        screenshot. (Value: "sevenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Ten inch
 *        screenshot. (Value: "tenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots TV screenshot. (Value:
 *        "tvScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Wear screenshot.
 *        (Value: "wearScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Icon. (Value: "icon")
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Feature graphic.
 *        (Value: "featureGraphic")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner TV banner. (Value:
 *        "tvBanner")
 *
 *  @return GTLRAndroidPublisherQuery_EditsImagesList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType;

@end

/**
 *  Uploads an image of the specified language and image type, and adds to the
 *  edit.
 *
 *  Method: androidpublisher.edits.images.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsImagesUpload : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsImagesUploadWithpackageName:editId:language:imageType:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Type of the Image.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified Unspecified
 *        type. Do not use. (Value: "appImageTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Phone screenshot.
 *        (Value: "phoneScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Seven inch
 *        screenshot. (Value: "sevenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Ten inch
 *        screenshot. (Value: "tenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots TV screenshot. (Value:
 *        "tvScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Wear screenshot.
 *        (Value: "wearScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Icon. (Value: "icon")
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Feature graphic.
 *        (Value: "featureGraphic")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner TV banner. (Value:
 *        "tvBanner")
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German). Providing a language that is not supported by the App is a
 *  no-op.
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ImagesUploadResponse.
 *
 *  Uploads an image of the specified language and image type, and adds to the
 *  edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param language Language localization code (a BCP-47 language tag; for
 *    example, "de-AT" for Austrian German). Providing a language that is not
 *    supported by the App is a no-op.
 *  @param imageType Type of the Image.
 *
 *  Likely values for @c imageType:
 *    @arg @c kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified Unspecified
 *        type. Do not use. (Value: "appImageTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Phone screenshot.
 *        (Value: "phoneScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Seven inch
 *        screenshot. (Value: "sevenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Ten inch
 *        screenshot. (Value: "tenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots TV screenshot. (Value:
 *        "tvScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Wear screenshot.
 *        (Value: "wearScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Icon. (Value: "icon")
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Feature graphic.
 *        (Value: "featureGraphic")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner TV banner. (Value:
 *        "tvBanner")
 *  @param uploadParameters The media to include in this query. Maximum size
 *    15728640. Accepted MIME type: image/ *
 *
 *  @return GTLRAndroidPublisherQuery_EditsImagesUpload
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Creates a new edit for an app.
 *
 *  Method: androidpublisher.edits.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsInsert : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsInsertWithObject:packageName:]

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppEdit.
 *
 *  Creates a new edit for an app.
 *
 *  @param object The @c GTLRAndroidPublisher_AppEdit to include in the query.
 *  @param packageName Package name of the app.
 *
 *  @return GTLRAndroidPublisherQuery_EditsInsert
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_AppEdit *)object
                    packageName:(NSString *)packageName;

@end

/**
 *  Deletes a localized store listing.
 *
 *  Method: androidpublisher.edits.listings.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsDelete : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsListingsDeleteWithpackageName:editId:language:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German).
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a localized store listing.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param language Language localization code (a BCP-47 language tag; for
 *    example, "de-AT" for Austrian German).
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsDelete
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language;

@end

/**
 *  Deletes all store listings.
 *
 *  Method: androidpublisher.edits.listings.deleteall
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsDeleteall : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsListingsDeleteallWithpackageName:editId:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes all store listings.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsDeleteall
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Gets a localized store listing.
 *
 *  Method: androidpublisher.edits.listings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsListingsGetWithpackageName:editId:language:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German).
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_Listing.
 *
 *  Gets a localized store listing.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param language Language localization code (a BCP-47 language tag; for
 *    example, "de-AT" for Austrian German).
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language;

@end

/**
 *  Lists all localized store listings.
 *
 *  Method: androidpublisher.edits.listings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsListingsListWithpackageName:editId:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ListingsListResponse.
 *
 *  Lists all localized store listings.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Patches a localized store listing.
 *
 *  Method: androidpublisher.edits.listings.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsPatch : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsListingsPatchWithObject:packageName:editId:language:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German).
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_Listing.
 *
 *  Patches a localized store listing.
 *
 *  @param object The @c GTLRAndroidPublisher_Listing to include in the query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param language Language localization code (a BCP-47 language tag; for
 *    example, "de-AT" for Austrian German).
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Listing *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                       language:(NSString *)language;

@end

/**
 *  Creates or updates a localized store listing.
 *
 *  Method: androidpublisher.edits.listings.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsUpdate : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsListingsUpdateWithObject:packageName:editId:language:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German).
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_Listing.
 *
 *  Creates or updates a localized store listing.
 *
 *  @param object The @c GTLRAndroidPublisher_Listing to include in the query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param language Language localization code (a BCP-47 language tag; for
 *    example, "de-AT" for Austrian German).
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Listing *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                       language:(NSString *)language;

@end

/**
 *  Gets testers.
 *
 *  Method: androidpublisher.edits.testers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTestersGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsTestersGetWithpackageName:editId:track:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The track to read from. */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Testers.
 *
 *  Gets testers.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param track The track to read from.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTestersGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                               track:(NSString *)track;

@end

/**
 *  Patches testers.
 *
 *  Method: androidpublisher.edits.testers.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTestersPatch : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsTestersPatchWithObject:packageName:editId:track:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The track to update. */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Testers.
 *
 *  Patches testers.
 *
 *  @param object The @c GTLRAndroidPublisher_Testers to include in the query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param track The track to update.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTestersPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Testers *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track;

@end

/**
 *  Updates testers.
 *
 *  Method: androidpublisher.edits.testers.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTestersUpdate : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsTestersUpdateWithObject:packageName:editId:track:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The track to update. */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Testers.
 *
 *  Updates testers.
 *
 *  @param object The @c GTLRAndroidPublisher_Testers to include in the query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param track The track to update.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTestersUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Testers *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track;

@end

/**
 *  Gets a track.
 *
 *  Method: androidpublisher.edits.tracks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTracksGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsTracksGetWithpackageName:editId:track:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Identifier of the track. */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Track.
 *
 *  Gets a track.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param track Identifier of the track.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTracksGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                               track:(NSString *)track;

@end

/**
 *  Lists all tracks.
 *
 *  Method: androidpublisher.edits.tracks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTracksList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsTracksListWithpackageName:editId:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_TracksListResponse.
 *
 *  Lists all tracks.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTracksList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Patches a track.
 *
 *  Method: androidpublisher.edits.tracks.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTracksPatch : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsTracksPatchWithObject:packageName:editId:track:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Identifier of the track. */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Track.
 *
 *  Patches a track.
 *
 *  @param object The @c GTLRAndroidPublisher_Track to include in the query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param track Identifier of the track.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTracksPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Track *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track;

@end

/**
 *  Updates a track.
 *
 *  Method: androidpublisher.edits.tracks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTracksUpdate : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsTracksUpdateWithObject:packageName:editId:track:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Identifier of the track. */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Track.
 *
 *  Updates a track.
 *
 *  @param object The @c GTLRAndroidPublisher_Track to include in the query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param track Identifier of the track.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTracksUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Track *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track;

@end

/**
 *  Validates an app edit.
 *
 *  Method: androidpublisher.edits.validate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsValidate : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsValidateWithpackageName:editId:]

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppEdit.
 *
 *  Validates an app edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsValidate
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Deletes an in-app product (i.e. a managed product or a subscriptions).
 *
 *  Method: androidpublisher.inappproducts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsDelete : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForInappproductsDeleteWithpackageName:sku:]

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Unique identifier for the in-app product. */
@property(nonatomic, copy, nullable) NSString *sku;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an in-app product (i.e. a managed product or a subscriptions).
 *
 *  @param packageName Package name of the app.
 *  @param sku Unique identifier for the in-app product.
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsDelete
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                                 sku:(NSString *)sku;

@end

/**
 *  Gets an in-app product, which can be a managed product or a subscription.
 *
 *  Method: androidpublisher.inappproducts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForInappproductsGetWithpackageName:sku:]

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Unique identifier for the in-app product. */
@property(nonatomic, copy, nullable) NSString *sku;

/**
 *  Fetches a @c GTLRAndroidPublisher_InAppProduct.
 *
 *  Gets an in-app product, which can be a managed product or a subscription.
 *
 *  @param packageName Package name of the app.
 *  @param sku Unique identifier for the in-app product.
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                                 sku:(NSString *)sku;

@end

/**
 *  Creates an in-app product (i.e. a managed product or a subscriptions).
 *
 *  Method: androidpublisher.inappproducts.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsInsert : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForInappproductsInsertWithObject:packageName:]

/**
 *  If true the prices for all regions targeted by the parent app that don't
 *  have a price specified for this in-app product will be auto converted to the
 *  target currency based on the default price. Defaults to false.
 */
@property(nonatomic, assign) BOOL autoConvertMissingPrices;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_InAppProduct.
 *
 *  Creates an in-app product (i.e. a managed product or a subscriptions).
 *
 *  @param object The @c GTLRAndroidPublisher_InAppProduct to include in the
 *    query.
 *  @param packageName Package name of the app.
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsInsert
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_InAppProduct *)object
                    packageName:(NSString *)packageName;

@end

/**
 *  Lists all in-app products - both managed products and subscriptions.
 *
 *  Method: androidpublisher.inappproducts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForInappproductsListWithpackageName:]

/** How many results the list operation should return. */
@property(nonatomic, assign) NSUInteger maxResults;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The index of the first element to return. */
@property(nonatomic, assign) NSUInteger startIndex;

/** Pagination token. If empty, list starts at the first product. */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidPublisher_InappproductsListResponse.
 *
 *  Lists all in-app products - both managed products and subscriptions.
 *
 *  @param packageName Package name of the app.
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName;

@end

/**
 *  Patches an in-app product (i.e. a managed product or a subscriptions).
 *
 *  Method: androidpublisher.inappproducts.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsPatch : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForInappproductsPatchWithObject:packageName:sku:]

/**
 *  If true the prices for all regions targeted by the parent app that don't
 *  have a price specified for this in-app product will be auto converted to the
 *  target currency based on the default price. Defaults to false.
 */
@property(nonatomic, assign) BOOL autoConvertMissingPrices;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Unique identifier for the in-app product. */
@property(nonatomic, copy, nullable) NSString *sku;

/**
 *  Fetches a @c GTLRAndroidPublisher_InAppProduct.
 *
 *  Patches an in-app product (i.e. a managed product or a subscriptions).
 *
 *  @param object The @c GTLRAndroidPublisher_InAppProduct to include in the
 *    query.
 *  @param packageName Package name of the app.
 *  @param sku Unique identifier for the in-app product.
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_InAppProduct *)object
                    packageName:(NSString *)packageName
                            sku:(NSString *)sku;

@end

/**
 *  Updates an in-app product (i.e. a managed product or a subscriptions).
 *
 *  Method: androidpublisher.inappproducts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsUpdate : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForInappproductsUpdateWithObject:packageName:sku:]

/**
 *  If true the prices for all regions targeted by the parent app that don't
 *  have a price specified for this in-app product will be auto converted to the
 *  target currency based on the default price. Defaults to false.
 */
@property(nonatomic, assign) BOOL autoConvertMissingPrices;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Unique identifier for the in-app product. */
@property(nonatomic, copy, nullable) NSString *sku;

/**
 *  Fetches a @c GTLRAndroidPublisher_InAppProduct.
 *
 *  Updates an in-app product (i.e. a managed product or a subscriptions).
 *
 *  @param object The @c GTLRAndroidPublisher_InAppProduct to include in the
 *    query.
 *  @param packageName Package name of the app.
 *  @param sku Unique identifier for the in-app product.
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_InAppProduct *)object
                    packageName:(NSString *)packageName
                            sku:(NSString *)sku;

@end

/**
 *  Uploads an APK to internal app sharing. If you are using the Google API
 *  client libraries, please increase the timeout of the http request before
 *  calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts
 *  and
 *  Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors)
 *  for an example in java.
 *
 *  Method: androidpublisher.internalappsharingartifacts.uploadapk
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InternalappsharingartifactsUploadapk : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForInternalappsharingartifactsUploadapkWithpackageName:]

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_InternalAppSharingArtifact.
 *
 *  Uploads an APK to internal app sharing. If you are using the Google API
 *  client libraries, please increase the timeout of the http request before
 *  calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts
 *  and
 *  Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors)
 *  for an example in java.
 *
 *  @param packageName Package name of the app.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    1073741824. Accepted MIME types: application/octet-stream,
 *    application/vnd.android.package-archive
 *
 *  @return GTLRAndroidPublisherQuery_InternalappsharingartifactsUploadapk
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Uploads an app bundle to internal app sharing. If you are using the Google
 *  API client libraries, please increase the timeout of the http request before
 *  calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts
 *  and
 *  Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors)
 *  for an example in java.
 *
 *  Method: androidpublisher.internalappsharingartifacts.uploadbundle
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InternalappsharingartifactsUploadbundle : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForInternalappsharingartifactsUploadbundleWithpackageName:]

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_InternalAppSharingArtifact.
 *
 *  Uploads an app bundle to internal app sharing. If you are using the Google
 *  API client libraries, please increase the timeout of the http request before
 *  calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts
 *  and
 *  Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors)
 *  for an example in java.
 *
 *  @param packageName Package name of the app.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    10737418240. Accepted MIME type: application/octet-stream
 *
 *  @return GTLRAndroidPublisherQuery_InternalappsharingartifactsUploadbundle
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Refund a user's subscription or in-app purchase order.
 *
 *  Method: androidpublisher.orders.refund
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_OrdersRefund : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForOrdersRefundWithpackageName:orderId:]

/**
 *  The order ID provided to the user when the subscription or in-app order was
 *  purchased.
 */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  The package name of the application for which this subscription or in-app
 *  item was purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Whether to revoke the purchased item. If set to true, access to the
 *  subscription or in-app item will be terminated immediately. If the item is a
 *  recurring subscription, all future payments will also be terminated.
 *  Consumed in-app items need to be handled by developer's app. (optional).
 */
@property(nonatomic, assign) BOOL revoke;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Refund a user's subscription or in-app purchase order.
 *
 *  @param packageName The package name of the application for which this
 *    subscription or in-app item was purchased (for example, 'com.some.thing').
 *  @param orderId The order ID provided to the user when the subscription or
 *    in-app order was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_OrdersRefund
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                             orderId:(NSString *)orderId;

@end

/**
 *  Acknowledges a purchase of an inapp item.
 *
 *  Method: androidpublisher.purchases.products.acknowledge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesProductsAcknowledge : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForPurchasesProductsAcknowledgeWithObject:packageName:productId:token:]

/**
 *  The package name of the application the inapp product was sold in (for
 *  example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The inapp product SKU (for example, 'com.some.thing.inapp1'). */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  The token provided to the user's device when the inapp product was
 *  purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Acknowledges a purchase of an inapp item.
 *
 *  @param object The @c GTLRAndroidPublisher_ProductPurchasesAcknowledgeRequest
 *    to include in the query.
 *  @param packageName The package name of the application the inapp product was
 *    sold in (for example, 'com.some.thing').
 *  @param productId The inapp product SKU (for example,
 *    'com.some.thing.inapp1').
 *  @param token The token provided to the user's device when the inapp product
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesProductsAcknowledge
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ProductPurchasesAcknowledgeRequest *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                          token:(NSString *)token;

@end

/**
 *  Checks the purchase and consumption status of an inapp item.
 *
 *  Method: androidpublisher.purchases.products.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesProductsGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForPurchasesProductsGetWithpackageName:productId:token:]

/**
 *  The package name of the application the inapp product was sold in (for
 *  example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The inapp product SKU (for example, 'com.some.thing.inapp1'). */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  The token provided to the user's device when the inapp product was
 *  purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidPublisher_ProductPurchase.
 *
 *  Checks the purchase and consumption status of an inapp item.
 *
 *  @param packageName The package name of the application the inapp product was
 *    sold in (for example, 'com.some.thing').
 *  @param productId The inapp product SKU (for example,
 *    'com.some.thing.inapp1').
 *  @param token The token provided to the user's device when the inapp product
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesProductsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId
                               token:(NSString *)token;

@end

/**
 *  Acknowledges a subscription purchase.
 *
 *  Method: androidpublisher.purchases.subscriptions.acknowledge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsAcknowledge : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForPurchasesSubscriptionsAcknowledgeWithObject:packageName:subscriptionId:token:]

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Acknowledges a subscription purchase.
 *
 *  @param object The @c
 *    GTLRAndroidPublisher_SubscriptionPurchasesAcknowledgeRequest to include in
 *    the query.
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsAcknowledge
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_SubscriptionPurchasesAcknowledgeRequest *)object
                    packageName:(NSString *)packageName
                 subscriptionId:(NSString *)subscriptionId
                          token:(NSString *)token;

@end

/**
 *  Cancels a user's subscription purchase. The subscription remains valid until
 *  its expiration time.
 *
 *  Method: androidpublisher.purchases.subscriptions.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsCancel : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForPurchasesSubscriptionsCancelWithpackageName:subscriptionId:token:]

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Cancels a user's subscription purchase. The subscription remains valid until
 *  its expiration time.
 *
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsCancel
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token;

@end

/**
 *  Defers a user's subscription purchase until a specified future expiration
 *  time.
 *
 *  Method: androidpublisher.purchases.subscriptions.defer
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsDefer : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForPurchasesSubscriptionsDeferWithObject:packageName:subscriptionId:token:]

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidPublisher_SubscriptionPurchasesDeferResponse.
 *
 *  Defers a user's subscription purchase until a specified future expiration
 *  time.
 *
 *  @param object The @c GTLRAndroidPublisher_SubscriptionPurchasesDeferRequest
 *    to include in the query.
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsDefer
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_SubscriptionPurchasesDeferRequest *)object
                    packageName:(NSString *)packageName
                 subscriptionId:(NSString *)subscriptionId
                          token:(NSString *)token;

@end

/**
 *  Checks whether a user's subscription purchase is valid and returns its
 *  expiry time.
 *
 *  Method: androidpublisher.purchases.subscriptions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForPurchasesSubscriptionsGetWithpackageName:subscriptionId:token:]

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidPublisher_SubscriptionPurchase.
 *
 *  Checks whether a user's subscription purchase is valid and returns its
 *  expiry time.
 *
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token;

@end

/**
 *  Refunds a user's subscription purchase, but the subscription remains valid
 *  until its expiration time and it will continue to recur.
 *
 *  Method: androidpublisher.purchases.subscriptions.refund
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsRefund : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForPurchasesSubscriptionsRefundWithpackageName:subscriptionId:token:]

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** "The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Refunds a user's subscription purchase, but the subscription remains valid
 *  until its expiration time and it will continue to recur.
 *
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId "The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsRefund
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token;

@end

/**
 *  Refunds and immediately revokes a user's subscription purchase. Access to
 *  the subscription will be terminated immediately and it will stop recurring.
 *
 *  Method: androidpublisher.purchases.subscriptions.revoke
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsRevoke : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForPurchasesSubscriptionsRevokeWithpackageName:subscriptionId:token:]

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Refunds and immediately revokes a user's subscription purchase. Access to
 *  the subscription will be terminated immediately and it will stop recurring.
 *
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsRevoke
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token;

@end

/**
 *  Lists the purchases that were canceled, refunded or charged-back.
 *
 *  Method: androidpublisher.purchases.voidedpurchases.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesVoidedpurchasesList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForPurchasesVoidedpurchasesListWithpackageName:]

/**
 *  The time, in milliseconds since the Epoch, of the newest voided purchase
 *  that you want to see in the response. The value of this parameter cannot be
 *  greater than the current time and is ignored if a pagination token is set.
 *  Default value is current time. Note: This filter is applied on the time at
 *  which the record is seen as voided by our systems and not the actual voided
 *  time returned in the response.
 */
@property(nonatomic, assign) long long endTime;

/**
 *  Defines how many results the list operation should return. The default
 *  number depends on the resource collection.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The package name of the application for which voided purchases need to be
 *  returned (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Defines the index of the first element to return. This can only be used if
 *  indexed paging is enabled.
 */
@property(nonatomic, assign) NSUInteger startIndex;

/**
 *  The time, in milliseconds since the Epoch, of the oldest voided purchase
 *  that you want to see in the response. The value of this parameter cannot be
 *  older than 30 days and is ignored if a pagination token is set. Default
 *  value is current time minus 30 days. Note: This filter is applied on the
 *  time at which the record is seen as voided by our systems and not the actual
 *  voided time returned in the response.
 */
@property(nonatomic, assign) long long startTime;

/**
 *  Defines the token of the page to return, usually taken from TokenPagination.
 *  This can only be used if token paging is enabled.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  The type of voided purchases that you want to see in the response. Possible
 *  values are: 0. Only voided in-app product purchases will be returned in the
 *  response. This is the default value. 1. Both voided in-app purchases and
 *  voided subscription purchases will be returned in the response. Note: Before
 *  requesting to receive voided subscription purchases, you must switch to use
 *  orderId in the response which uniquely identifies one-time purchases and
 *  subscriptions. Otherwise, you will receive multiple subscription orders with
 *  the same PurchaseToken, because subscription renewal orders share the same
 *  PurchaseToken.
 */
@property(nonatomic, assign) NSInteger type;

/**
 *  Fetches a @c GTLRAndroidPublisher_VoidedPurchasesListResponse.
 *
 *  Lists the purchases that were canceled, refunded or charged-back.
 *
 *  @param packageName The package name of the application for which voided
 *    purchases need to be returned (for example, 'com.some.thing').
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesVoidedpurchasesList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName;

@end

/**
 *  Gets a single review.
 *
 *  Method: androidpublisher.reviews.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_ReviewsGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForReviewsGetWithpackageName:reviewId:]

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Unique identifier for a review. */
@property(nonatomic, copy, nullable) NSString *reviewId;

/** Language localization code. */
@property(nonatomic, copy, nullable) NSString *translationLanguage;

/**
 *  Fetches a @c GTLRAndroidPublisher_Review.
 *
 *  Gets a single review.
 *
 *  @param packageName Package name of the app.
 *  @param reviewId Unique identifier for a review.
 *
 *  @return GTLRAndroidPublisherQuery_ReviewsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                            reviewId:(NSString *)reviewId;

@end

/**
 *  Lists all reviews.
 *
 *  Method: androidpublisher.reviews.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_ReviewsList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForReviewsListWithpackageName:]

/** How many results the list operation should return. */
@property(nonatomic, assign) NSUInteger maxResults;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The index of the first element to return. */
@property(nonatomic, assign) NSUInteger startIndex;

/** Pagination token. If empty, list starts at the first review. */
@property(nonatomic, copy, nullable) NSString *token;

/** Language localization code. */
@property(nonatomic, copy, nullable) NSString *translationLanguage;

/**
 *  Fetches a @c GTLRAndroidPublisher_ReviewsListResponse.
 *
 *  Lists all reviews.
 *
 *  @param packageName Package name of the app.
 *
 *  @return GTLRAndroidPublisherQuery_ReviewsList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName;

@end

/**
 *  Replies to a single review, or updates an existing reply.
 *
 *  Method: androidpublisher.reviews.reply
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_ReviewsReply : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForReviewsReplyWithObject:packageName:reviewId:]

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Unique identifier for a review. */
@property(nonatomic, copy, nullable) NSString *reviewId;

/**
 *  Fetches a @c GTLRAndroidPublisher_ReviewsReplyResponse.
 *
 *  Replies to a single review, or updates an existing reply.
 *
 *  @param object The @c GTLRAndroidPublisher_ReviewsReplyRequest to include in
 *    the query.
 *  @param packageName Package name of the app.
 *  @param reviewId Unique identifier for a review.
 *
 *  @return GTLRAndroidPublisherQuery_ReviewsReply
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ReviewsReplyRequest *)object
                    packageName:(NSString *)packageName
                       reviewId:(NSString *)reviewId;

@end

/**
 *  Creates an APK which is suitable for inclusion in a system image from an
 *  already uploaded Android App Bundle.
 *
 *  Method: androidpublisher.systemapks.variants.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_SystemapksVariantsCreate : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForSystemapksVariantsCreateWithObject:packageName:versionCode:]

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The version code of the App Bundle. */
@property(nonatomic, assign) long long versionCode;

/**
 *  Fetches a @c GTLRAndroidPublisher_Variant.
 *
 *  Creates an APK which is suitable for inclusion in a system image from an
 *  already uploaded Android App Bundle.
 *
 *  @param object The @c GTLRAndroidPublisher_Variant to include in the query.
 *  @param packageName Package name of the app.
 *  @param versionCode The version code of the App Bundle.
 *
 *  @return GTLRAndroidPublisherQuery_SystemapksVariantsCreate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Variant *)object
                    packageName:(NSString *)packageName
                    versionCode:(long long)versionCode;

@end

/**
 *  Downloads a previously created system APK which is suitable for inclusion in
 *  a system image.
 *
 *  Method: androidpublisher.systemapks.variants.download
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_SystemapksVariantsDownload : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForSystemapksVariantsDownloadWithpackageName:versionCode:variantId:]

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The ID of a previously created system APK variant. */
@property(nonatomic, assign) NSUInteger variantId;

/** The version code of the App Bundle. */
@property(nonatomic, assign) long long versionCode;

/**
 *  Fetches the requested resource data as a @c GTLRDataObject.
 *
 *  Downloads a previously created system APK which is suitable for inclusion in
 *  a system image.
 *
 *  @param packageName Package name of the app.
 *  @param versionCode The version code of the App Bundle.
 *  @param variantId The ID of a previously created system APK variant.
 *
 *  @return GTLRAndroidPublisherQuery_SystemapksVariantsDownload
 */
+ (instancetype)queryForMediaWithPackageName:(NSString *)packageName
                                 versionCode:(long long)versionCode
                                   variantId:(NSUInteger)variantId;

@end

/**
 *  Returns a previously created system APK variant.
 *
 *  Method: androidpublisher.systemapks.variants.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_SystemapksVariantsGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForSystemapksVariantsGetWithpackageName:versionCode:variantId:]

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The ID of a previously created system APK variant. */
@property(nonatomic, assign) NSUInteger variantId;

/** The version code of the App Bundle. */
@property(nonatomic, assign) long long versionCode;

/**
 *  Fetches a @c GTLRAndroidPublisher_Variant.
 *
 *  Returns a previously created system APK variant.
 *
 *  @param packageName Package name of the app.
 *  @param versionCode The version code of the App Bundle.
 *  @param variantId The ID of a previously created system APK variant.
 *
 *  @return GTLRAndroidPublisherQuery_SystemapksVariantsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                         versionCode:(long long)versionCode
                           variantId:(NSUInteger)variantId;

@end

/**
 *  Returns the list of previously created system APK variants.
 *
 *  Method: androidpublisher.systemapks.variants.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_SystemapksVariantsList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForSystemapksVariantsListWithpackageName:versionCode:]

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The version code of the App Bundle. */
@property(nonatomic, assign) long long versionCode;

/**
 *  Fetches a @c GTLRAndroidPublisher_SystemApksListResponse.
 *
 *  Returns the list of previously created system APK variants.
 *
 *  @param packageName Package name of the app.
 *  @param versionCode The version code of the App Bundle.
 *
 *  @return GTLRAndroidPublisherQuery_SystemapksVariantsList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                         versionCode:(long long)versionCode;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
