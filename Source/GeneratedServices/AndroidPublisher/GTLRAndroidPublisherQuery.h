// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play Developer API (androidpublisher/v3)
// Description:
//   Accesses Android application developers' Google Play accounts.
// Documentation:
//   https://developers.google.com/android-publisher

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAndroidPublisher_ApksAddExternallyHostedRequest;
@class GTLRAndroidPublisher_AppDetails;
@class GTLRAndroidPublisher_AppEdit;
@class GTLRAndroidPublisher_ExpansionFile;
@class GTLRAndroidPublisher_InAppProduct;
@class GTLRAndroidPublisher_Listing;
@class GTLRAndroidPublisher_ReviewsReplyRequest;
@class GTLRAndroidPublisher_SubscriptionPurchasesDeferRequest;
@class GTLRAndroidPublisher_Testers;
@class GTLRAndroidPublisher_Track;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// deobfuscationFileType

/** Value: "proguard" */
GTLR_EXTERN NSString * const kGTLRAndroidPublisherDeobfuscationFileTypeProguard;

// ----------------------------------------------------------------------------
// expansionFileType

/** Value: "main" */
GTLR_EXTERN NSString * const kGTLRAndroidPublisherExpansionFileTypeMain;
/** Value: "patch" */
GTLR_EXTERN NSString * const kGTLRAndroidPublisherExpansionFileTypePatch;

// ----------------------------------------------------------------------------
// imageType

/** Value: "featureGraphic" */
GTLR_EXTERN NSString * const kGTLRAndroidPublisherImageTypeFeatureGraphic;
/** Value: "icon" */
GTLR_EXTERN NSString * const kGTLRAndroidPublisherImageTypeIcon;
/** Value: "phoneScreenshots" */
GTLR_EXTERN NSString * const kGTLRAndroidPublisherImageTypePhoneScreenshots;
/** Value: "promoGraphic" */
GTLR_EXTERN NSString * const kGTLRAndroidPublisherImageTypePromoGraphic;
/** Value: "sevenInchScreenshots" */
GTLR_EXTERN NSString * const kGTLRAndroidPublisherImageTypeSevenInchScreenshots;
/** Value: "tenInchScreenshots" */
GTLR_EXTERN NSString * const kGTLRAndroidPublisherImageTypeTenInchScreenshots;
/** Value: "tvBanner" */
GTLR_EXTERN NSString * const kGTLRAndroidPublisherImageTypeTvBanner;
/** Value: "tvScreenshots" */
GTLR_EXTERN NSString * const kGTLRAndroidPublisherImageTypeTvScreenshots;
/** Value: "wearScreenshots" */
GTLR_EXTERN NSString * const kGTLRAndroidPublisherImageTypeWearScreenshots;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Android Publisher query classes.
 */
@interface GTLRAndroidPublisherQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new APK without uploading the APK itself to Google Play, instead
 *  hosting the APK at a specified URL. This function is only available to
 *  enterprises using Google Play for Work whose application is configured to
 *  restrict distribution to the enterprise domain.
 *
 *  Method: androidpublisher.edits.apks.addexternallyhosted
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsApksAddexternallyhosted : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsApksAddexternallyhostedWithObject:packageName:editId:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ApksAddExternallyHostedResponse.
 *
 *  Creates a new APK without uploading the APK itself to Google Play, instead
 *  hosting the APK at a specified URL. This function is only available to
 *  enterprises using Google Play for Work whose application is configured to
 *  restrict distribution to the enterprise domain.
 *
 *  @param object The @c GTLRAndroidPublisher_ApksAddExternallyHostedRequest to
 *    include in the query.
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsApksAddexternallyhosted
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ApksAddExternallyHostedRequest *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId;

@end

/**
 *  GTLRAndroidPublisherQuery_EditsApksList
 *
 *  Method: androidpublisher.edits.apks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsApksList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsApksListWithpackageName:editId:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ApksListResponse.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsApksList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  GTLRAndroidPublisherQuery_EditsApksUpload
 *
 *  Method: androidpublisher.edits.apks.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsApksUpload : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsApksUploadWithpackageName:editId:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_Apk.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    1GB. Accepted MIME types: application/octet-stream,
 *    application/vnd.android.package-archive
 *
 *  @return GTLRAndroidPublisherQuery_EditsApksUpload
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  GTLRAndroidPublisherQuery_EditsBundlesList
 *
 *  Method: androidpublisher.edits.bundles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsBundlesList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsBundlesListWithpackageName:editId:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_BundlesListResponse.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsBundlesList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Uploads a new Android App Bundle to this edit. If you are using the Google
 *  API client libraries, please increase the timeout of the http request before
 *  calling this endpoint (a timeout of 2 minutes is recommended). See:
 *  https://developers.google.com/api-client-library/java/google-api-java-client/errors
 *  for an example in java.
 *
 *  Method: androidpublisher.edits.bundles.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsBundlesUpload : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsBundlesUploadWithpackageName:editId:]

/**
 *  Must be set to true if the bundle installation may trigger a warning on user
 *  devices (for example, if installation size may be over a threshold,
 *  typically 100 MB).
 */
@property(nonatomic, assign) BOOL ackBundleInstallationWarning;

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_Bundle.
 *
 *  Uploads a new Android App Bundle to this edit. If you are using the Google
 *  API client libraries, please increase the timeout of the http request before
 *  calling this endpoint (a timeout of 2 minutes is recommended). See:
 *  https://developers.google.com/api-client-library/java/google-api-java-client/errors
 *  for an example in java.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    2GB. Accepted MIME type: application/octet-stream
 *
 *  @return GTLRAndroidPublisherQuery_EditsBundlesUpload
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Commits/applies the changes made in this edit back to the app.
 *
 *  Method: androidpublisher.edits.commit
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsCommit : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsCommitWithpackageName:editId:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppEdit.
 *
 *  Commits/applies the changes made in this edit back to the app.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsCommit
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Deletes an edit for an app. Creating a new edit will automatically delete
 *  any of your previous edits so this method need only be called if you want to
 *  preemptively abandon an edit.
 *
 *  Method: androidpublisher.edits.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsDelete : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsDeleteWithpackageName:editId:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an edit for an app. Creating a new edit will automatically delete
 *  any of your previous edits so this method need only be called if you want to
 *  preemptively abandon an edit.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsDelete
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Uploads the deobfuscation file of the specified APK. If a deobfuscation file
 *  already exists, it will be replaced.
 *
 *  Method: androidpublisher.edits.deobfuscationfiles.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsDeobfuscationfilesUpload : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsDeobfuscationfilesUploadWithpackageName:editId:apkVersionCode:deobfuscationFileType:]

/** The version code of the APK whose deobfuscation file is being uploaded. */
@property(nonatomic, assign) NSInteger apkVersionCode;

/**
 *  deobfuscationFileType
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherDeobfuscationFileTypeProguard Value
 *        "proguard"
 */
@property(nonatomic, copy, nullable) NSString *deobfuscationFileType;

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier of the Android app for which the deobfuscatiuon files are
 *  being uploaded; for example, "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_DeobfuscationFilesUploadResponse.
 *
 *  Uploads the deobfuscation file of the specified APK. If a deobfuscation file
 *  already exists, it will be replaced.
 *
 *  @param packageName Unique identifier of the Android app for which the
 *    deobfuscatiuon files are being uploaded; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param apkVersionCode The version code of the APK whose deobfuscation file
 *    is being uploaded.
 *  @param deobfuscationFileType NSString
 *
 *  Likely values for @c deobfuscationFileType:
 *    @arg @c kGTLRAndroidPublisherDeobfuscationFileTypeProguard Value
 *        "proguard"
 *  @param uploadParameters The media to include in this query. Maximum size
 *    300MB. Accepted MIME type: application/octet-stream
 *
 *  @return GTLRAndroidPublisherQuery_EditsDeobfuscationfilesUpload
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                      apkVersionCode:(NSInteger)apkVersionCode
               deobfuscationFileType:(NSString *)deobfuscationFileType
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Fetches app details for this edit. This includes the default language and
 *  developer support contact information.
 *
 *  Method: androidpublisher.edits.details.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsDetailsGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsDetailsGetWithpackageName:editId:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppDetails.
 *
 *  Fetches app details for this edit. This includes the default language and
 *  developer support contact information.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsDetailsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Updates app details for this edit. This method supports patch semantics.
 *
 *  Method: androidpublisher.edits.details.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsDetailsPatch : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsDetailsPatchWithObject:packageName:editId:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppDetails.
 *
 *  Updates app details for this edit. This method supports patch semantics.
 *
 *  @param object The @c GTLRAndroidPublisher_AppDetails to include in the
 *    query.
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsDetailsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_AppDetails *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId;

@end

/**
 *  Updates app details for this edit.
 *
 *  Method: androidpublisher.edits.details.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsDetailsUpdate : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsDetailsUpdateWithObject:packageName:editId:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppDetails.
 *
 *  Updates app details for this edit.
 *
 *  @param object The @c GTLRAndroidPublisher_AppDetails to include in the
 *    query.
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsDetailsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_AppDetails *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId;

@end

/**
 *  Fetches the Expansion File configuration for the APK specified.
 *
 *  Method: androidpublisher.edits.expansionfiles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsExpansionfilesGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsExpansionfilesGetWithpackageName:editId:apkVersionCode:expansionFileType:]

/**
 *  The version code of the APK whose Expansion File configuration is being read
 *  or modified.
 */
@property(nonatomic, assign) NSInteger apkVersionCode;

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  expansionFileType
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Value "main"
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Value "patch"
 */
@property(nonatomic, copy, nullable) NSString *expansionFileType;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ExpansionFile.
 *
 *  Fetches the Expansion File configuration for the APK specified.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param apkVersionCode The version code of the APK whose Expansion File
 *    configuration is being read or modified.
 *  @param expansionFileType NSString
 *
 *  Likely values for @c expansionFileType:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Value "main"
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Value "patch"
 *
 *  @return GTLRAndroidPublisherQuery_EditsExpansionfilesGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                      apkVersionCode:(NSInteger)apkVersionCode
                   expansionFileType:(NSString *)expansionFileType;

@end

/**
 *  Updates the APK's Expansion File configuration to reference another APK's
 *  Expansion Files. To add a new Expansion File use the Upload method. This
 *  method supports patch semantics.
 *
 *  Method: androidpublisher.edits.expansionfiles.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsExpansionfilesPatch : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsExpansionfilesPatchWithObject:packageName:editId:apkVersionCode:expansionFileType:]

/**
 *  The version code of the APK whose Expansion File configuration is being read
 *  or modified.
 */
@property(nonatomic, assign) NSInteger apkVersionCode;

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  expansionFileType
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Value "main"
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Value "patch"
 */
@property(nonatomic, copy, nullable) NSString *expansionFileType;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ExpansionFile.
 *
 *  Updates the APK's Expansion File configuration to reference another APK's
 *  Expansion Files. To add a new Expansion File use the Upload method. This
 *  method supports patch semantics.
 *
 *  @param object The @c GTLRAndroidPublisher_ExpansionFile to include in the
 *    query.
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param apkVersionCode The version code of the APK whose Expansion File
 *    configuration is being read or modified.
 *  @param expansionFileType NSString
 *
 *  Likely values for @c expansionFileType:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Value "main"
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Value "patch"
 *
 *  @return GTLRAndroidPublisherQuery_EditsExpansionfilesPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ExpansionFile *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                 apkVersionCode:(NSInteger)apkVersionCode
              expansionFileType:(NSString *)expansionFileType;

@end

/**
 *  Updates the APK's Expansion File configuration to reference another APK's
 *  Expansion Files. To add a new Expansion File use the Upload method.
 *
 *  Method: androidpublisher.edits.expansionfiles.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsExpansionfilesUpdate : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsExpansionfilesUpdateWithObject:packageName:editId:apkVersionCode:expansionFileType:]

/**
 *  The version code of the APK whose Expansion File configuration is being read
 *  or modified.
 */
@property(nonatomic, assign) NSInteger apkVersionCode;

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  expansionFileType
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Value "main"
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Value "patch"
 */
@property(nonatomic, copy, nullable) NSString *expansionFileType;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ExpansionFile.
 *
 *  Updates the APK's Expansion File configuration to reference another APK's
 *  Expansion Files. To add a new Expansion File use the Upload method.
 *
 *  @param object The @c GTLRAndroidPublisher_ExpansionFile to include in the
 *    query.
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param apkVersionCode The version code of the APK whose Expansion File
 *    configuration is being read or modified.
 *  @param expansionFileType NSString
 *
 *  Likely values for @c expansionFileType:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Value "main"
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Value "patch"
 *
 *  @return GTLRAndroidPublisherQuery_EditsExpansionfilesUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ExpansionFile *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                 apkVersionCode:(NSInteger)apkVersionCode
              expansionFileType:(NSString *)expansionFileType;

@end

/**
 *  Uploads and attaches a new Expansion File to the APK specified.
 *
 *  Method: androidpublisher.edits.expansionfiles.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsExpansionfilesUpload : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsExpansionfilesUploadWithpackageName:editId:apkVersionCode:expansionFileType:]

/**
 *  The version code of the APK whose Expansion File configuration is being read
 *  or modified.
 */
@property(nonatomic, assign) NSInteger apkVersionCode;

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  expansionFileType
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Value "main"
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Value "patch"
 */
@property(nonatomic, copy, nullable) NSString *expansionFileType;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ExpansionFilesUploadResponse.
 *
 *  Uploads and attaches a new Expansion File to the APK specified.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param apkVersionCode The version code of the APK whose Expansion File
 *    configuration is being read or modified.
 *  @param expansionFileType NSString
 *
 *  Likely values for @c expansionFileType:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Value "main"
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Value "patch"
 *  @param uploadParameters The media to include in this query. Maximum size
 *    2048MB. Accepted MIME type: application/octet-stream
 *
 *  @return GTLRAndroidPublisherQuery_EditsExpansionfilesUpload
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                      apkVersionCode:(NSInteger)apkVersionCode
                   expansionFileType:(NSString *)expansionFileType
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Returns information about the edit specified. Calls will fail if the edit is
 *  no long active (e.g. has been deleted, superseded or expired).
 *
 *  Method: androidpublisher.edits.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsGetWithpackageName:editId:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppEdit.
 *
 *  Returns information about the edit specified. Calls will fail if the edit is
 *  no long active (e.g. has been deleted, superseded or expired).
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Deletes the image (specified by id) from the edit.
 *
 *  Method: androidpublisher.edits.images.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsImagesDelete : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsImagesDeleteWithpackageName:editId:language:imageType:imageId:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier an image within the set of images attached to this edit.
 */
@property(nonatomic, copy, nullable) NSString *imageId;

/**
 *  imageType
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Value
 *        "featureGraphic"
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Value "icon"
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Value
 *        "phoneScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypePromoGraphic Value "promoGraphic"
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Value
 *        "sevenInchScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Value
 *        "tenInchScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner Value "tvBanner"
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots Value "tvScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Value
 *        "wearScreenshots"
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/**
 *  The language code (a BCP-47 language tag) of the localized listing whose
 *  images are to read or modified. For example, to select Austrian German, pass
 *  "de-AT".
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes the image (specified by id) from the edit.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param language The language code (a BCP-47 language tag) of the localized
 *    listing whose images are to read or modified. For example, to select
 *    Austrian German, pass "de-AT".
 *  @param imageType NSString
 *  @param imageId Unique identifier an image within the set of images attached
 *    to this edit.
 *
 *  Likely values for @c imageType:
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Value
 *        "featureGraphic"
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Value "icon"
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Value
 *        "phoneScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypePromoGraphic Value "promoGraphic"
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Value
 *        "sevenInchScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Value
 *        "tenInchScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner Value "tvBanner"
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots Value "tvScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Value
 *        "wearScreenshots"
 *
 *  @return GTLRAndroidPublisherQuery_EditsImagesDelete
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType
                             imageId:(NSString *)imageId;

@end

/**
 *  Deletes all images for the specified language and image type.
 *
 *  Method: androidpublisher.edits.images.deleteall
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsImagesDeleteall : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsImagesDeleteallWithpackageName:editId:language:imageType:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  imageType
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Value
 *        "featureGraphic"
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Value "icon"
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Value
 *        "phoneScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypePromoGraphic Value "promoGraphic"
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Value
 *        "sevenInchScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Value
 *        "tenInchScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner Value "tvBanner"
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots Value "tvScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Value
 *        "wearScreenshots"
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/**
 *  The language code (a BCP-47 language tag) of the localized listing whose
 *  images are to read or modified. For example, to select Austrian German, pass
 *  "de-AT".
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ImagesDeleteAllResponse.
 *
 *  Deletes all images for the specified language and image type.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param language The language code (a BCP-47 language tag) of the localized
 *    listing whose images are to read or modified. For example, to select
 *    Austrian German, pass "de-AT".
 *  @param imageType NSString
 *
 *  Likely values for @c imageType:
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Value
 *        "featureGraphic"
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Value "icon"
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Value
 *        "phoneScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypePromoGraphic Value "promoGraphic"
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Value
 *        "sevenInchScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Value
 *        "tenInchScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner Value "tvBanner"
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots Value "tvScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Value
 *        "wearScreenshots"
 *
 *  @return GTLRAndroidPublisherQuery_EditsImagesDeleteall
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType;

@end

/**
 *  Lists all images for the specified language and image type.
 *
 *  Method: androidpublisher.edits.images.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsImagesList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsImagesListWithpackageName:editId:language:imageType:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  imageType
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Value
 *        "featureGraphic"
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Value "icon"
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Value
 *        "phoneScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypePromoGraphic Value "promoGraphic"
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Value
 *        "sevenInchScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Value
 *        "tenInchScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner Value "tvBanner"
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots Value "tvScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Value
 *        "wearScreenshots"
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/**
 *  The language code (a BCP-47 language tag) of the localized listing whose
 *  images are to read or modified. For example, to select Austrian German, pass
 *  "de-AT".
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ImagesListResponse.
 *
 *  Lists all images for the specified language and image type.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param language The language code (a BCP-47 language tag) of the localized
 *    listing whose images are to read or modified. For example, to select
 *    Austrian German, pass "de-AT".
 *  @param imageType NSString
 *
 *  Likely values for @c imageType:
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Value
 *        "featureGraphic"
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Value "icon"
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Value
 *        "phoneScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypePromoGraphic Value "promoGraphic"
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Value
 *        "sevenInchScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Value
 *        "tenInchScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner Value "tvBanner"
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots Value "tvScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Value
 *        "wearScreenshots"
 *
 *  @return GTLRAndroidPublisherQuery_EditsImagesList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType;

@end

/**
 *  Uploads a new image and adds it to the list of images for the specified
 *  language and image type.
 *
 *  Method: androidpublisher.edits.images.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsImagesUpload : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsImagesUploadWithpackageName:editId:language:imageType:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  imageType
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Value
 *        "featureGraphic"
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Value "icon"
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Value
 *        "phoneScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypePromoGraphic Value "promoGraphic"
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Value
 *        "sevenInchScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Value
 *        "tenInchScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner Value "tvBanner"
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots Value "tvScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Value
 *        "wearScreenshots"
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/**
 *  The language code (a BCP-47 language tag) of the localized listing whose
 *  images are to read or modified. For example, to select Austrian German, pass
 *  "de-AT".
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ImagesUploadResponse.
 *
 *  Uploads a new image and adds it to the list of images for the specified
 *  language and image type.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param language The language code (a BCP-47 language tag) of the localized
 *    listing whose images are to read or modified. For example, to select
 *    Austrian German, pass "de-AT".
 *  @param imageType NSString
 *
 *  Likely values for @c imageType:
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Value
 *        "featureGraphic"
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Value "icon"
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Value
 *        "phoneScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypePromoGraphic Value "promoGraphic"
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Value
 *        "sevenInchScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Value
 *        "tenInchScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner Value "tvBanner"
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots Value "tvScreenshots"
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Value
 *        "wearScreenshots"
 *  @param uploadParameters The media to include in this query. Maximum size
 *    15MB. Accepted MIME type: image/ *
 *
 *  @return GTLRAndroidPublisherQuery_EditsImagesUpload
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Creates a new edit for an app, populated with the app's current state.
 *
 *  Method: androidpublisher.edits.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsInsert : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsInsertWithObject:packageName:]

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppEdit.
 *
 *  Creates a new edit for an app, populated with the app's current state.
 *
 *  @param object The @c GTLRAndroidPublisher_AppEdit to include in the query.
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *
 *  @return GTLRAndroidPublisherQuery_EditsInsert
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_AppEdit *)object
                    packageName:(NSString *)packageName;

@end

/**
 *  Deletes the specified localized store listing from an edit.
 *
 *  Method: androidpublisher.edits.listings.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsDelete : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsListingsDeleteWithpackageName:editId:language:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  The language code (a BCP-47 language tag) of the localized listing to read
 *  or modify. For example, to select Austrian German, pass "de-AT".
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes the specified localized store listing from an edit.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param language The language code (a BCP-47 language tag) of the localized
 *    listing to read or modify. For example, to select Austrian German, pass
 *    "de-AT".
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsDelete
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language;

@end

/**
 *  Deletes all localized listings from an edit.
 *
 *  Method: androidpublisher.edits.listings.deleteall
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsDeleteall : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsListingsDeleteallWithpackageName:editId:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes all localized listings from an edit.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsDeleteall
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Fetches information about a localized store listing.
 *
 *  Method: androidpublisher.edits.listings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsListingsGetWithpackageName:editId:language:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  The language code (a BCP-47 language tag) of the localized listing to read
 *  or modify. For example, to select Austrian German, pass "de-AT".
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_Listing.
 *
 *  Fetches information about a localized store listing.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param language The language code (a BCP-47 language tag) of the localized
 *    listing to read or modify. For example, to select Austrian German, pass
 *    "de-AT".
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language;

@end

/**
 *  Returns all of the localized store listings attached to this edit.
 *
 *  Method: androidpublisher.edits.listings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsListingsListWithpackageName:editId:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ListingsListResponse.
 *
 *  Returns all of the localized store listings attached to this edit.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Creates or updates a localized store listing. This method supports patch
 *  semantics.
 *
 *  Method: androidpublisher.edits.listings.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsPatch : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsListingsPatchWithObject:packageName:editId:language:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  The language code (a BCP-47 language tag) of the localized listing to read
 *  or modify. For example, to select Austrian German, pass "de-AT".
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_Listing.
 *
 *  Creates or updates a localized store listing. This method supports patch
 *  semantics.
 *
 *  @param object The @c GTLRAndroidPublisher_Listing to include in the query.
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param language The language code (a BCP-47 language tag) of the localized
 *    listing to read or modify. For example, to select Austrian German, pass
 *    "de-AT".
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Listing *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                       language:(NSString *)language;

@end

/**
 *  Creates or updates a localized store listing.
 *
 *  Method: androidpublisher.edits.listings.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsUpdate : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsListingsUpdateWithObject:packageName:editId:language:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  The language code (a BCP-47 language tag) of the localized listing to read
 *  or modify. For example, to select Austrian German, pass "de-AT".
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_Listing.
 *
 *  Creates or updates a localized store listing.
 *
 *  @param object The @c GTLRAndroidPublisher_Listing to include in the query.
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param language The language code (a BCP-47 language tag) of the localized
 *    listing to read or modify. For example, to select Austrian German, pass
 *    "de-AT".
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Listing *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                       language:(NSString *)language;

@end

/**
 *  GTLRAndroidPublisherQuery_EditsTestersGet
 *
 *  Method: androidpublisher.edits.testers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTestersGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsTestersGetWithpackageName:editId:track:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  The track to read or modify. Acceptable values are: "alpha", "beta",
 *  "production", "rollout" or "internal".
 */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Testers.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param track The track to read or modify. Acceptable values are: "alpha",
 *    "beta", "production", "rollout" or "internal".
 *
 *  @return GTLRAndroidPublisherQuery_EditsTestersGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                               track:(NSString *)track;

@end

/**
 *  GTLRAndroidPublisherQuery_EditsTestersPatch
 *
 *  Method: androidpublisher.edits.testers.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTestersPatch : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsTestersPatchWithObject:packageName:editId:track:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  The track to read or modify. Acceptable values are: "alpha", "beta",
 *  "production", "rollout" or "internal".
 */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Testers.
 *
 *  @param object The @c GTLRAndroidPublisher_Testers to include in the query.
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param track The track to read or modify. Acceptable values are: "alpha",
 *    "beta", "production", "rollout" or "internal".
 *
 *  @return GTLRAndroidPublisherQuery_EditsTestersPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Testers *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track;

@end

/**
 *  GTLRAndroidPublisherQuery_EditsTestersUpdate
 *
 *  Method: androidpublisher.edits.testers.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTestersUpdate : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsTestersUpdateWithObject:packageName:editId:track:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  The track to read or modify. Acceptable values are: "alpha", "beta",
 *  "production", "rollout" or "internal".
 */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Testers.
 *
 *  @param object The @c GTLRAndroidPublisher_Testers to include in the query.
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param track The track to read or modify. Acceptable values are: "alpha",
 *    "beta", "production", "rollout" or "internal".
 *
 *  @return GTLRAndroidPublisherQuery_EditsTestersUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Testers *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track;

@end

/**
 *  Fetches the track configuration for the specified track type. Includes the
 *  APK version codes that are in this track.
 *
 *  Method: androidpublisher.edits.tracks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTracksGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsTracksGetWithpackageName:editId:track:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The track to read or modify. */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Track.
 *
 *  Fetches the track configuration for the specified track type. Includes the
 *  APK version codes that are in this track.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param track The track to read or modify.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTracksGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                               track:(NSString *)track;

@end

/**
 *  Lists all the track configurations for this edit.
 *
 *  Method: androidpublisher.edits.tracks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTracksList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsTracksListWithpackageName:editId:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_TracksListResponse.
 *
 *  Lists all the track configurations for this edit.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTracksList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Updates the track configuration for the specified track type. When halted,
 *  the rollout track cannot be updated without adding new APKs, and adding new
 *  APKs will cause it to resume. This method supports patch semantics.
 *
 *  Method: androidpublisher.edits.tracks.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTracksPatch : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsTracksPatchWithObject:packageName:editId:track:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The track to read or modify. */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Track.
 *
 *  Updates the track configuration for the specified track type. When halted,
 *  the rollout track cannot be updated without adding new APKs, and adding new
 *  APKs will cause it to resume. This method supports patch semantics.
 *
 *  @param object The @c GTLRAndroidPublisher_Track to include in the query.
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param track The track to read or modify.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTracksPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Track *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track;

@end

/**
 *  Updates the track configuration for the specified track type. When halted,
 *  the rollout track cannot be updated without adding new APKs, and adding new
 *  APKs will cause it to resume.
 *
 *  Method: androidpublisher.edits.tracks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTracksUpdate : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsTracksUpdateWithObject:packageName:editId:track:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The track to read or modify. */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Track.
 *
 *  Updates the track configuration for the specified track type. When halted,
 *  the rollout track cannot be updated without adding new APKs, and adding new
 *  APKs will cause it to resume.
 *
 *  @param object The @c GTLRAndroidPublisher_Track to include in the query.
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *  @param track The track to read or modify.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTracksUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Track *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track;

@end

/**
 *  Checks that the edit can be successfully committed. The edit's changes are
 *  not applied to the live app.
 *
 *  Method: androidpublisher.edits.validate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsValidate : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForEditsValidateWithpackageName:editId:]

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier for the Android app that is being updated; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppEdit.
 *
 *  Checks that the edit can be successfully committed. The edit's changes are
 *  not applied to the live app.
 *
 *  @param packageName Unique identifier for the Android app that is being
 *    updated; for example, "com.spiffygame".
 *  @param editId Unique identifier for this edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsValidate
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Delete an in-app product for an app.
 *
 *  Method: androidpublisher.inappproducts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsDelete : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForInappproductsDeleteWithpackageName:sku:]

/**
 *  Unique identifier for the Android app with the in-app product; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Unique identifier for the in-app product. */
@property(nonatomic, copy, nullable) NSString *sku;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Delete an in-app product for an app.
 *
 *  @param packageName Unique identifier for the Android app with the in-app
 *    product; for example, "com.spiffygame".
 *  @param sku Unique identifier for the in-app product.
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsDelete
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                                 sku:(NSString *)sku;

@end

/**
 *  Returns information about the in-app product specified.
 *
 *  Method: androidpublisher.inappproducts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForInappproductsGetWithpackageName:sku:]

@property(nonatomic, copy, nullable) NSString *packageName;

/** Unique identifier for the in-app product. */
@property(nonatomic, copy, nullable) NSString *sku;

/**
 *  Fetches a @c GTLRAndroidPublisher_InAppProduct.
 *
 *  Returns information about the in-app product specified.
 *
 *  @param packageName NSString
 *  @param sku Unique identifier for the in-app product.
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                                 sku:(NSString *)sku;

@end

/**
 *  Creates a new in-app product for an app.
 *
 *  Method: androidpublisher.inappproducts.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsInsert : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForInappproductsInsertWithObject:packageName:]

/**
 *  If true the prices for all regions targeted by the parent app that don't
 *  have a price specified for this in-app product will be auto converted to the
 *  target currency based on the default price. Defaults to false.
 */
@property(nonatomic, assign) BOOL autoConvertMissingPrices;

/** Unique identifier for the Android app; for example, "com.spiffygame". */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_InAppProduct.
 *
 *  Creates a new in-app product for an app.
 *
 *  @param object The @c GTLRAndroidPublisher_InAppProduct to include in the
 *    query.
 *  @param packageName Unique identifier for the Android app; for example,
 *    "com.spiffygame".
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsInsert
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_InAppProduct *)object
                    packageName:(NSString *)packageName;

@end

/**
 *  List all the in-app products for an Android app, both subscriptions and
 *  managed in-app products..
 *
 *  Method: androidpublisher.inappproducts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForInappproductsListWithpackageName:]

@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Unique identifier for the Android app with in-app products; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

@property(nonatomic, assign) NSUInteger startIndex;

@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidPublisher_InappproductsListResponse.
 *
 *  List all the in-app products for an Android app, both subscriptions and
 *  managed in-app products..
 *
 *  @param packageName Unique identifier for the Android app with in-app
 *    products; for example, "com.spiffygame".
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName;

@end

/**
 *  Updates the details of an in-app product. This method supports patch
 *  semantics.
 *
 *  Method: androidpublisher.inappproducts.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsPatch : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForInappproductsPatchWithObject:packageName:sku:]

/**
 *  If true the prices for all regions targeted by the parent app that don't
 *  have a price specified for this in-app product will be auto converted to the
 *  target currency based on the default price. Defaults to false.
 */
@property(nonatomic, assign) BOOL autoConvertMissingPrices;

/**
 *  Unique identifier for the Android app with the in-app product; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Unique identifier for the in-app product. */
@property(nonatomic, copy, nullable) NSString *sku;

/**
 *  Fetches a @c GTLRAndroidPublisher_InAppProduct.
 *
 *  Updates the details of an in-app product. This method supports patch
 *  semantics.
 *
 *  @param object The @c GTLRAndroidPublisher_InAppProduct to include in the
 *    query.
 *  @param packageName Unique identifier for the Android app with the in-app
 *    product; for example, "com.spiffygame".
 *  @param sku Unique identifier for the in-app product.
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_InAppProduct *)object
                    packageName:(NSString *)packageName
                            sku:(NSString *)sku;

@end

/**
 *  Updates the details of an in-app product.
 *
 *  Method: androidpublisher.inappproducts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsUpdate : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForInappproductsUpdateWithObject:packageName:sku:]

/**
 *  If true the prices for all regions targeted by the parent app that don't
 *  have a price specified for this in-app product will be auto converted to the
 *  target currency based on the default price. Defaults to false.
 */
@property(nonatomic, assign) BOOL autoConvertMissingPrices;

/**
 *  Unique identifier for the Android app with the in-app product; for example,
 *  "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Unique identifier for the in-app product. */
@property(nonatomic, copy, nullable) NSString *sku;

/**
 *  Fetches a @c GTLRAndroidPublisher_InAppProduct.
 *
 *  Updates the details of an in-app product.
 *
 *  @param object The @c GTLRAndroidPublisher_InAppProduct to include in the
 *    query.
 *  @param packageName Unique identifier for the Android app with the in-app
 *    product; for example, "com.spiffygame".
 *  @param sku Unique identifier for the in-app product.
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_InAppProduct *)object
                    packageName:(NSString *)packageName
                            sku:(NSString *)sku;

@end

/**
 *  Refund a user's subscription or in-app purchase order.
 *
 *  Method: androidpublisher.orders.refund
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_OrdersRefund : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForOrdersRefundWithpackageName:orderId:]

/**
 *  The order ID provided to the user when the subscription or in-app order was
 *  purchased.
 */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  The package name of the application for which this subscription or in-app
 *  item was purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Whether to revoke the purchased item. If set to true, access to the
 *  subscription or in-app item will be terminated immediately. If the item is a
 *  recurring subscription, all future payments will also be terminated.
 *  Consumed in-app items need to be handled by developer's app. (optional)
 */
@property(nonatomic, assign) BOOL revoke;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Refund a user's subscription or in-app purchase order.
 *
 *  @param packageName The package name of the application for which this
 *    subscription or in-app item was purchased (for example, 'com.some.thing').
 *  @param orderId The order ID provided to the user when the subscription or
 *    in-app order was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_OrdersRefund
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                             orderId:(NSString *)orderId;

@end

/**
 *  Checks the purchase and consumption status of an inapp item.
 *
 *  Method: androidpublisher.purchases.products.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesProductsGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForPurchasesProductsGetWithpackageName:productId:token:]

/**
 *  The package name of the application the inapp product was sold in (for
 *  example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The inapp product SKU (for example, 'com.some.thing.inapp1'). */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  The token provided to the user's device when the inapp product was
 *  purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidPublisher_ProductPurchase.
 *
 *  Checks the purchase and consumption status of an inapp item.
 *
 *  @param packageName The package name of the application the inapp product was
 *    sold in (for example, 'com.some.thing').
 *  @param productId The inapp product SKU (for example,
 *    'com.some.thing.inapp1').
 *  @param token The token provided to the user's device when the inapp product
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesProductsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId
                               token:(NSString *)token;

@end

/**
 *  Cancels a user's subscription purchase. The subscription remains valid until
 *  its expiration time.
 *
 *  Method: androidpublisher.purchases.subscriptions.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsCancel : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForPurchasesSubscriptionsCancelWithpackageName:subscriptionId:token:]

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Cancels a user's subscription purchase. The subscription remains valid until
 *  its expiration time.
 *
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsCancel
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token;

@end

/**
 *  Defers a user's subscription purchase until a specified future expiration
 *  time.
 *
 *  Method: androidpublisher.purchases.subscriptions.defer
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsDefer : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForPurchasesSubscriptionsDeferWithObject:packageName:subscriptionId:token:]

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidPublisher_SubscriptionPurchasesDeferResponse.
 *
 *  Defers a user's subscription purchase until a specified future expiration
 *  time.
 *
 *  @param object The @c GTLRAndroidPublisher_SubscriptionPurchasesDeferRequest
 *    to include in the query.
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsDefer
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_SubscriptionPurchasesDeferRequest *)object
                    packageName:(NSString *)packageName
                 subscriptionId:(NSString *)subscriptionId
                          token:(NSString *)token;

@end

/**
 *  Checks whether a user's subscription purchase is valid and returns its
 *  expiry time.
 *
 *  Method: androidpublisher.purchases.subscriptions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForPurchasesSubscriptionsGetWithpackageName:subscriptionId:token:]

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidPublisher_SubscriptionPurchase.
 *
 *  Checks whether a user's subscription purchase is valid and returns its
 *  expiry time.
 *
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token;

@end

/**
 *  Refunds a user's subscription purchase, but the subscription remains valid
 *  until its expiration time and it will continue to recur.
 *
 *  Method: androidpublisher.purchases.subscriptions.refund
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsRefund : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForPurchasesSubscriptionsRefundWithpackageName:subscriptionId:token:]

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Refunds a user's subscription purchase, but the subscription remains valid
 *  until its expiration time and it will continue to recur.
 *
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsRefund
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token;

@end

/**
 *  Refunds and immediately revokes a user's subscription purchase. Access to
 *  the subscription will be terminated immediately and it will stop recurring.
 *
 *  Method: androidpublisher.purchases.subscriptions.revoke
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsRevoke : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForPurchasesSubscriptionsRevokeWithpackageName:subscriptionId:token:]

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Refunds and immediately revokes a user's subscription purchase. Access to
 *  the subscription will be terminated immediately and it will stop recurring.
 *
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsRevoke
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token;

@end

/**
 *  Lists the purchases that were canceled, refunded or charged-back.
 *
 *  Method: androidpublisher.purchases.voidedpurchases.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesVoidedpurchasesList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForPurchasesVoidedpurchasesListWithpackageName:]

/**
 *  The time, in milliseconds since the Epoch, of the newest voided in-app
 *  product purchase that you want to see in the response. The value of this
 *  parameter cannot be greater than the current time and is ignored if a
 *  pagination token is set. Default value is current time. Note: This filter is
 *  applied on the time at which the record is seen as voided by our systems and
 *  not the actual voided time returned in the response.
 */
@property(nonatomic, assign) long long endTime;

@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The package name of the application for which voided purchases need to be
 *  returned (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

@property(nonatomic, assign) NSUInteger startIndex;

/**
 *  The time, in milliseconds since the Epoch, of the oldest voided in-app
 *  product purchase that you want to see in the response. The value of this
 *  parameter cannot be older than 30 days and is ignored if a pagination token
 *  is set. Default value is current time minus 30 days. Note: This filter is
 *  applied on the time at which the record is seen as voided by our systems and
 *  not the actual voided time returned in the response.
 */
@property(nonatomic, assign) long long startTime;

@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidPublisher_VoidedPurchasesListResponse.
 *
 *  Lists the purchases that were canceled, refunded or charged-back.
 *
 *  @param packageName The package name of the application for which voided
 *    purchases need to be returned (for example, 'com.some.thing').
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesVoidedpurchasesList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName;

@end

/**
 *  Returns a single review.
 *
 *  Method: androidpublisher.reviews.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_ReviewsGet : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForReviewsGetWithpackageName:reviewId:]

/**
 *  Unique identifier for the Android app for which we want reviews; for
 *  example, "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

@property(nonatomic, copy, nullable) NSString *reviewId;

@property(nonatomic, copy, nullable) NSString *translationLanguage;

/**
 *  Fetches a @c GTLRAndroidPublisher_Review.
 *
 *  Returns a single review.
 *
 *  @param packageName Unique identifier for the Android app for which we want
 *    reviews; for example, "com.spiffygame".
 *  @param reviewId NSString
 *
 *  @return GTLRAndroidPublisherQuery_ReviewsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                            reviewId:(NSString *)reviewId;

@end

/**
 *  Returns a list of reviews. Only reviews from last week will be returned.
 *
 *  Method: androidpublisher.reviews.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_ReviewsList : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForReviewsListWithpackageName:]

@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Unique identifier for the Android app for which we want reviews; for
 *  example, "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

@property(nonatomic, assign) NSUInteger startIndex;

@property(nonatomic, copy, nullable) NSString *token;

@property(nonatomic, copy, nullable) NSString *translationLanguage;

/**
 *  Fetches a @c GTLRAndroidPublisher_ReviewsListResponse.
 *
 *  Returns a list of reviews. Only reviews from last week will be returned.
 *
 *  @param packageName Unique identifier for the Android app for which we want
 *    reviews; for example, "com.spiffygame".
 *
 *  @return GTLRAndroidPublisherQuery_ReviewsList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName;

@end

/**
 *  Reply to a single review, or update an existing reply.
 *
 *  Method: androidpublisher.reviews.reply
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_ReviewsReply : GTLRAndroidPublisherQuery
// Previous library name was
//   +[GTLQueryAndroidPublisher queryForReviewsReplyWithObject:packageName:reviewId:]

/**
 *  Unique identifier for the Android app for which we want reviews; for
 *  example, "com.spiffygame".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

@property(nonatomic, copy, nullable) NSString *reviewId;

/**
 *  Fetches a @c GTLRAndroidPublisher_ReviewsReplyResponse.
 *
 *  Reply to a single review, or update an existing reply.
 *
 *  @param object The @c GTLRAndroidPublisher_ReviewsReplyRequest to include in
 *    the query.
 *  @param packageName Unique identifier for the Android app for which we want
 *    reviews; for example, "com.spiffygame".
 *  @param reviewId NSString
 *
 *  @return GTLRAndroidPublisherQuery_ReviewsReply
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ReviewsReplyRequest *)object
                    packageName:(NSString *)packageName
                       reviewId:(NSString *)reviewId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
