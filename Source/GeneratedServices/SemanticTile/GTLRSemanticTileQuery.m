// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Semantic Tile API (vectortile/v1)
// Description:
//   Serves vector tiles containing geospatial data.
// Documentation:
//   https://developers.google.com/maps/contact-sales/

#import "GTLRSemanticTileQuery.h"

#import "GTLRSemanticTileObjects.h"

// ----------------------------------------------------------------------------
// Constants

// clientInfoPlatform
NSString * const kGTLRSemanticTileClientInfoPlatformAndroid    = @"ANDROID";
NSString * const kGTLRSemanticTileClientInfoPlatformEditor     = @"EDITOR";
NSString * const kGTLRSemanticTileClientInfoPlatformIos        = @"IOS";
NSString * const kGTLRSemanticTileClientInfoPlatformLinux      = @"LINUX";
NSString * const kGTLRSemanticTileClientInfoPlatformMacOs      = @"MAC_OS";
NSString * const kGTLRSemanticTileClientInfoPlatformPlatformUnspecified = @"PLATFORM_UNSPECIFIED";
NSString * const kGTLRSemanticTileClientInfoPlatformWebGl      = @"WEB_GL";
NSString * const kGTLRSemanticTileClientInfoPlatformWindows    = @"WINDOWS";

// terrainFormats
NSString * const kGTLRSemanticTileTerrainFormatsFirstDerivative = @"FIRST_DERIVATIVE";
NSString * const kGTLRSemanticTileTerrainFormatsSecondDerivative = @"SECOND_DERIVATIVE";
NSString * const kGTLRSemanticTileTerrainFormatsTerrainFormatUnknown = @"TERRAIN_FORMAT_UNKNOWN";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRSemanticTileQuery

@dynamic fields;

@end

@implementation GTLRSemanticTileQuery_FeaturetilesGet

@dynamic clientInfoApiClient, clientInfoApplicationId,
         clientInfoApplicationVersion, clientInfoDeviceModel,
         clientInfoOperatingSystem, clientInfoPlatform, clientInfoUserId,
         clientTileVersionId, enableDetailedHighwayTypes, enableFeatureNames,
         enableModeledVolumes, enablePoliticalFeatures, enablePrivateRoads,
         enableUnclippedBuildings, languageCode, name, regionCode;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"clientInfoApiClient" : @"clientInfo.apiClient",
    @"clientInfoApplicationId" : @"clientInfo.applicationId",
    @"clientInfoApplicationVersion" : @"clientInfo.applicationVersion",
    @"clientInfoDeviceModel" : @"clientInfo.deviceModel",
    @"clientInfoOperatingSystem" : @"clientInfo.operatingSystem",
    @"clientInfoPlatform" : @"clientInfo.platform",
    @"clientInfoUserId" : @"clientInfo.userId"
  };
  return map;
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSemanticTileQuery_FeaturetilesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSemanticTile_FeatureTile class];
  query.loggingName = @"vectortile.featuretiles.get";
  return query;
}

@end

@implementation GTLRSemanticTileQuery_TerraintilesGet

@dynamic altitudePrecisionCentimeters, clientInfoApiClient,
         clientInfoApplicationId, clientInfoApplicationVersion,
         clientInfoDeviceModel, clientInfoOperatingSystem, clientInfoPlatform,
         clientInfoUserId, maxElevationResolutionCells,
         minElevationResolutionCells, name, terrainFormats;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"clientInfoApiClient" : @"clientInfo.apiClient",
    @"clientInfoApplicationId" : @"clientInfo.applicationId",
    @"clientInfoApplicationVersion" : @"clientInfo.applicationVersion",
    @"clientInfoDeviceModel" : @"clientInfo.deviceModel",
    @"clientInfoOperatingSystem" : @"clientInfo.operatingSystem",
    @"clientInfoPlatform" : @"clientInfo.platform",
    @"clientInfoUserId" : @"clientInfo.userId"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"terrainFormats" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSemanticTileQuery_TerraintilesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSemanticTile_TerrainTile class];
  query.loggingName = @"vectortile.terraintiles.get";
  return query;
}

@end
