// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Semantic Tile API (vectortile/v1)
// Description:
//   Serves vector tiles containing geospatial data.
// Documentation:
//   https://developers.google.com/maps/contact-sales/

#import "GTLRSemanticTileObjects.h"

// ----------------------------------------------------------------------------
// Constants

// GTLRSemanticTile_Area.type
NSString * const kGTLRSemanticTile_Area_Type_IndexedTriangles = @"INDEXED_TRIANGLES";
NSString * const kGTLRSemanticTile_Area_Type_TriangleFan      = @"TRIANGLE_FAN";
NSString * const kGTLRSemanticTile_Area_Type_TriangleStrip    = @"TRIANGLE_STRIP";

// GTLRSemanticTile_Feature.type
NSString * const kGTLRSemanticTile_Feature_Type_AdministrativeArea1 = @"ADMINISTRATIVE_AREA1";
NSString * const kGTLRSemanticTile_Feature_Type_ArterialRoad   = @"ARTERIAL_ROAD";
NSString * const kGTLRSemanticTile_Feature_Type_Bank           = @"BANK";
NSString * const kGTLRSemanticTile_Feature_Type_Bar            = @"BAR";
NSString * const kGTLRSemanticTile_Feature_Type_Beach          = @"BEACH";
NSString * const kGTLRSemanticTile_Feature_Type_Cafe           = @"CAFE";
NSString * const kGTLRSemanticTile_Feature_Type_ControlledAccessHighway = @"CONTROLLED_ACCESS_HIGHWAY";
NSString * const kGTLRSemanticTile_Feature_Type_EventVenue     = @"EVENT_VENUE";
NSString * const kGTLRSemanticTile_Feature_Type_FeatureTypeUnspecified = @"FEATURE_TYPE_UNSPECIFIED";
NSString * const kGTLRSemanticTile_Feature_Type_Ferry          = @"FERRY";
NSString * const kGTLRSemanticTile_Feature_Type_Footpath       = @"FOOTPATH";
NSString * const kGTLRSemanticTile_Feature_Type_Forest         = @"FOREST";
NSString * const kGTLRSemanticTile_Feature_Type_Highway        = @"HIGHWAY";
NSString * const kGTLRSemanticTile_Feature_Type_Locality       = @"LOCALITY";
NSString * const kGTLRSemanticTile_Feature_Type_LocalRoad      = @"LOCAL_ROAD";
NSString * const kGTLRSemanticTile_Feature_Type_Lodging        = @"LODGING";
NSString * const kGTLRSemanticTile_Feature_Type_Park           = @"PARK";
NSString * const kGTLRSemanticTile_Feature_Type_Political      = @"POLITICAL";
NSString * const kGTLRSemanticTile_Feature_Type_Rail           = @"RAIL";
NSString * const kGTLRSemanticTile_Feature_Type_Region         = @"REGION";
NSString * const kGTLRSemanticTile_Feature_Type_Restaurant     = @"RESTAURANT";
NSString * const kGTLRSemanticTile_Feature_Type_Road           = @"ROAD";
NSString * const kGTLRSemanticTile_Feature_Type_School         = @"SCHOOL";
NSString * const kGTLRSemanticTile_Feature_Type_Segment        = @"SEGMENT";
NSString * const kGTLRSemanticTile_Feature_Type_Shopping       = @"SHOPPING";
NSString * const kGTLRSemanticTile_Feature_Type_Structure      = @"STRUCTURE";
NSString * const kGTLRSemanticTile_Feature_Type_Sublocality    = @"SUBLOCALITY";
NSString * const kGTLRSemanticTile_Feature_Type_TouristDestination = @"TOURIST_DESTINATION";
NSString * const kGTLRSemanticTile_Feature_Type_Water          = @"WATER";

// GTLRSemanticTile_FeatureTile.status
NSString * const kGTLRSemanticTile_FeatureTile_Status_StatusOk = @"STATUS_OK";
NSString * const kGTLRSemanticTile_FeatureTile_Status_StatusOkDataUnchanged = @"STATUS_OK_DATA_UNCHANGED";

// GTLRSemanticTile_Relation.relationType
NSString * const kGTLRSemanticTile_Relation_RelationType_Occupies = @"OCCUPIES";
NSString * const kGTLRSemanticTile_Relation_RelationType_PrimarilyOccupiedBy = @"PRIMARILY_OCCUPIED_BY";
NSString * const kGTLRSemanticTile_Relation_RelationType_RelationTypeUnspecified = @"RELATION_TYPE_UNSPECIFIED";

// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_Area
//

@implementation GTLRSemanticTile_Area
@dynamic basemapZOrder, hasExternalEdges, internalEdges, loopBreaks,
         triangleIndices, type, vertexOffsets, zOrder;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"internalEdges" : [NSNumber class],
    @"loopBreaks" : [NSNumber class],
    @"triangleIndices" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_BasemapZOrder
//

@implementation GTLRSemanticTile_BasemapZOrder
@dynamic zGrade, zPlane, zWithinGrade;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_ExtrudedArea
//

@implementation GTLRSemanticTile_ExtrudedArea
@dynamic area, maxZ, minZ;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_Feature
//

@implementation GTLRSemanticTile_Feature
@dynamic displayName, geometry, placeId, relations, segmentInfo, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"relations" : [GTLRSemanticTile_Relation class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_FeatureTile
//

@implementation GTLRSemanticTile_FeatureTile
@dynamic coordinates, features, name, providers, status, versionId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"features" : [GTLRSemanticTile_Feature class],
    @"providers" : [GTLRSemanticTile_ProviderInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_FirstDerivativeElevationGrid
//

@implementation GTLRSemanticTile_FirstDerivativeElevationGrid
@dynamic altitudeMultiplier, rows;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rows" : [GTLRSemanticTile_Row class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_Geometry
//

@implementation GTLRSemanticTile_Geometry
@dynamic areas, extrudedAreas, lines, modeledVolumes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"areas" : [GTLRSemanticTile_Area class],
    @"extrudedAreas" : [GTLRSemanticTile_ExtrudedArea class],
    @"lines" : [GTLRSemanticTile_Line class],
    @"modeledVolumes" : [GTLRSemanticTile_ModeledVolume class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_Line
//

@implementation GTLRSemanticTile_Line
@dynamic basemapZOrder, vertexOffsets, zOrder;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_ModeledVolume
//

@implementation GTLRSemanticTile_ModeledVolume
@dynamic strips, vertexOffsets;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"strips" : [GTLRSemanticTile_TriangleStrip class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_ProviderInfo
//

@implementation GTLRSemanticTile_ProviderInfo
@dynamic descriptionProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_Relation
//

@implementation GTLRSemanticTile_Relation
@dynamic relatedFeatureIndex, relationType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_RoadInfo
//

@implementation GTLRSemanticTile_RoadInfo
@dynamic isPrivate;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_Row
//

@implementation GTLRSemanticTile_Row
@dynamic altitudeDiffs;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"altitudeDiffs" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_SecondDerivativeElevationGrid
//

@implementation GTLRSemanticTile_SecondDerivativeElevationGrid
@dynamic altitudeMultiplier, columnCount, encodedData, rowCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_SegmentInfo
//

@implementation GTLRSemanticTile_SegmentInfo
@dynamic roadInfo;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_TerrainTile
//

@implementation GTLRSemanticTile_TerrainTile
@dynamic coordinates, firstDerivative, name, secondDerivative;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_TileCoordinates
//

@implementation GTLRSemanticTile_TileCoordinates
@dynamic x, y, zoom;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_TriangleStrip
//

@implementation GTLRSemanticTile_TriangleStrip
@dynamic vertexIndices;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"vertexIndices" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_Vertex2DList
//

@implementation GTLRSemanticTile_Vertex2DList
@dynamic xOffsets, yOffsets;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"xOffsets" : [NSNumber class],
    @"yOffsets" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSemanticTile_Vertex3DList
//

@implementation GTLRSemanticTile_Vertex3DList
@dynamic xOffsets, yOffsets, zOffsets;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"xOffsets" : [NSNumber class],
    @"yOffsets" : [NSNumber class],
    @"zOffsets" : [NSNumber class]
  };
  return map;
}

@end
