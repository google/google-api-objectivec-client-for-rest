// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase Remote Config API (firebaseremoteconfig/v1)
// Description:
//   Firebase Remote Config API allows the 3P clients to manage Remote Config
//   conditions and parameters for Firebase applications.
// Documentation:
//   https://firebase.google.com/docs/remote-config/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRFirebaseRemoteConfig_RemoteConfig;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Firebase Remote Config query classes.
 */
@interface GTLRFirebaseRemoteConfigQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Get the latest version Remote Configuration for a project.
 *  Returns the RemoteConfig as the payload, and also the eTag as a
 *  response header.
 *
 *  Method: firebaseremoteconfig.projects.getRemoteConfig
 */
@interface GTLRFirebaseRemoteConfigQuery_ProjectsGetRemoteConfig : GTLRFirebaseRemoteConfigQuery
// Previous library name was
//   +[GTLQueryFirebaseRemoteConfig queryForProjectsGetRemoteConfigWithproject:]

/**
 *  The GMP project identifier. Required.
 *  See note at the beginning of this file regarding project ids.
 */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRFirebaseRemoteConfig_RemoteConfig.
 *
 *  Get the latest version Remote Configuration for a project.
 *  Returns the RemoteConfig as the payload, and also the eTag as a
 *  response header.
 *
 *  @param project The GMP project identifier. Required.
 *    See note at the beginning of this file regarding project ids.
 *
 *  @returns GTLRFirebaseRemoteConfigQuery_ProjectsGetRemoteConfig
 */
+ (instancetype)queryWithProject:(NSString *)project;

@end

/**
 *  Update a RemoteConfig. We treat this as an always-existing
 *  resource (when it is not found in our data store, we treat it as version
 *  0, a template with zero conditions and zero parameters). Hence there are
 *  no Create or Delete operations. Returns the updated template when
 *  successful (and the updated eTag as a response header), or an error if
 *  things go wrong.
 *  Possible error messages:
 *  * VALIDATION_ERROR (HTTP status 400) with additional details if the
 *  template being passed in can not be validated.
 *  * AUTHENTICATION_ERROR (HTTP status 401) if the request can not be
 *  authenticate (e.g. no access token, or invalid access token).
 *  * AUTHORIZATION_ERROR (HTTP status 403) if the request can not be
 *  authorized (e.g. the user has no access to the specified project id).
 *  * VERSION_MISMATCH (HTTP status 412) when trying to update when the
 *  expected eTag (passed in via the "If-match" header) is not specified, or
 *  is specified but does does not match the current eTag.
 *  * Internal error (HTTP status 500) for Database problems or other internal
 *  errors.
 *
 *  Method: firebaseremoteconfig.projects.updateRemoteConfig
 */
@interface GTLRFirebaseRemoteConfigQuery_ProjectsUpdateRemoteConfig : GTLRFirebaseRemoteConfigQuery
// Previous library name was
//   +[GTLQueryFirebaseRemoteConfig queryForProjectsUpdateRemoteConfigWithObject:project:]

/**
 *  The GMP project identifier. Required.
 *  See note at the beginning of this file regarding project ids.
 */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Optional. Defaults to <code>false</code> (UpdateRemoteConfig call should
 *  update the backend if there are no validation/interal errors). May be set
 *  to <code>true</code> to indicate that, should no validation errors occur,
 *  the call should return a "200 OK" instead of performing the update. Note
 *  that other error messages (500 Internal Error, 412 Version Mismatch, etc)
 *  may still result after flipping to <code>false</code>, even if getting a
 *  "200 OK" when calling with <code>true</code>.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseRemoteConfig_RemoteConfig.
 *
 *  Update a RemoteConfig. We treat this as an always-existing
 *  resource (when it is not found in our data store, we treat it as version
 *  0, a template with zero conditions and zero parameters). Hence there are
 *  no Create or Delete operations. Returns the updated template when
 *  successful (and the updated eTag as a response header), or an error if
 *  things go wrong.
 *  Possible error messages:
 *  * VALIDATION_ERROR (HTTP status 400) with additional details if the
 *  template being passed in can not be validated.
 *  * AUTHENTICATION_ERROR (HTTP status 401) if the request can not be
 *  authenticate (e.g. no access token, or invalid access token).
 *  * AUTHORIZATION_ERROR (HTTP status 403) if the request can not be
 *  authorized (e.g. the user has no access to the specified project id).
 *  * VERSION_MISMATCH (HTTP status 412) when trying to update when the
 *  expected eTag (passed in via the "If-match" header) is not specified, or
 *  is specified but does does not match the current eTag.
 *  * Internal error (HTTP status 500) for Database problems or other internal
 *  errors.
 *
 *  @param object The @c GTLRFirebaseRemoteConfig_RemoteConfig to include in the
 *    query.
 *  @param project The GMP project identifier. Required.
 *    See note at the beginning of this file regarding project ids.
 *
 *  @returns GTLRFirebaseRemoteConfigQuery_ProjectsUpdateRemoteConfig
 */
+ (instancetype)queryWithObject:(GTLRFirebaseRemoteConfig_RemoteConfig *)object
                        project:(NSString *)project;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
