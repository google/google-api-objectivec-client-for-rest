// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase Remote Config API (firebaseremoteconfig/v1)
// Description:
//   Firebase Remote Config API allows the 3P clients to manage Remote Config
//   conditions and parameters for Firebase applications.
// Documentation:
//   https://firebase.google.com/docs/remote-config/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRFirebaseRemoteConfig_RemoteConfig_Parameters;
@class GTLRFirebaseRemoteConfig_RemoteConfigCondition;
@class GTLRFirebaseRemoteConfig_RemoteConfigParameter;
@class GTLRFirebaseRemoteConfig_RemoteConfigParameter_ConditionalValues;
@class GTLRFirebaseRemoteConfig_RemoteConfigParameterValue;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRFirebaseRemoteConfig_RemoteConfigCondition.tagColor

/**
 *  Blue
 *
 *  Value: "BLUE"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Blue;
/**
 *  Brown
 *
 *  Value: "BROWN"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Brown;
/** Value: "CONDITION_DISPLAY_COLOR_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_ConditionDisplayColorUnspecified;
/**
 *  Cyan
 *
 *  Value: "CYAN"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Cyan;
/**
 *  aka "Red Orange"
 *
 *  Value: "DEEP_ORANGE"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_DeepOrange;
/**
 *  Green
 *
 *  Value: "GREEN"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Green;
/**
 *  Indigo
 *  *
 *
 *  Value: "INDIGO"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Indigo;
/**
 *  Lime - Approved deviation from Material color palette
 *
 *  Value: "LIME"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Lime;
/**
 *  Orange
 *
 *  Value: "ORANGE"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Orange;
/**
 *  Pink
 *
 *  Value: "PINK"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Pink;
/**
 *  Purple
 *
 *  Value: "PURPLE"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Purple;
/**
 *  Teal
 *
 *  Value: "TEAL"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Teal;

/**
 *  *
 *  The RemoteConfig consists of a list of conditions (which can be
 *  thought of as named "if" statements) and a map of parameters (parameter key
 *  to a structure containing an optional default value, as well as a optional
 *  submap of (condition name to value when that condition is true).
 */
@interface GTLRFirebaseRemoteConfig_RemoteConfig : GTLRObject

/**
 *  The list of named conditions. The order *does* affect the semantics.
 *  The condition_name values of these entries must be unique.
 *  The resolved value of a config parameter P is determined as follow:
 *  * Let Y be the set of values from the submap of P that refer to conditions
 *  that evaluate to <code>true</code>.
 *  * If Y is non empty, the value is taken from the specific submap in Y whose
 *  condition_name is the earliest in this condition list.
 *  * Else, if P has a default value option (condition_name is empty) then
 *  the value is taken from that option.
 *  * Else, parameter P has no value and is omitted from the config result.
 *  Example: parameter key "p1", default value "v1", submap specified as
 *  {"c1": v2, "c2": v3} where "c1" and "c2" are names of conditions in the
 *  condition list (where "c1" in this example appears before "c2"). The
 *  value of p1 would be v2 as long as c1 is true. Otherwise, if c2 is true,
 *  p1 would evaluate to v3, and if c1 and c2 are both false, p1 would evaluate
 *  to v1. If no default value was specified, and c1 and c2 were both false,
 *  no value for p1 would be generated.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseRemoteConfig_RemoteConfigCondition *> *conditions;

/**
 *  Map of parameter keys to their optional default values and optional submap
 *  of (condition name : value). Order doesn't affect semantics, and so is
 *  sorted by the server. The 'key' values of the params must be unique.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseRemoteConfig_RemoteConfig_Parameters *parameters;

@end


/**
 *  Map of parameter keys to their optional default values and optional submap
 *  of (condition name : value). Order doesn't affect semantics, and so is
 *  sorted by the server. The 'key' values of the params must be unique.
 *
 *  @note This class is documented as having more properties of
 *        GTLRFirebaseRemoteConfig_RemoteConfigParameter. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseRemoteConfig_RemoteConfig_Parameters : GTLRObject
@end


/**
 *  A single RemoteConfig Condition. A list of these (because order matters) are
 *  part of a single RemoteConfig template.
 */
@interface GTLRFirebaseRemoteConfig_RemoteConfigCondition : GTLRObject

/**
 *  Optional.
 *  A description for this Condition. Length must be less than or equal to
 *  100 characters (or more precisely, unicode code points, which is defined in
 *  java/com/google/wireless/android/config/ConstsExporter.java).
 *  A description may contain any Unicode characters
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Required. */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Required.
 *  A non empty and unique name of this condition.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional.
 *  The display (tag) color of this condition. This serves as part of a tag
 *  (in the future, we may add tag text as well as tag color, but that is not
 *  yet implemented in the UI).
 *  This value has no affect on the semantics of the delivered config and it
 *  is ignored by the backend, except for passing it through write/read
 *  requests.
 *  Not having this value or having the "CONDITION_DISPLAY_COLOR_UNSPECIFIED"
 *  value (0) have the same meaning: Let the UI choose any valid color when
 *  displaying the condition.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Blue Blue
 *        (Value: "BLUE")
 *    @arg @c kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Brown
 *        Brown (Value: "BROWN")
 *    @arg @c kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_ConditionDisplayColorUnspecified
 *        Value "CONDITION_DISPLAY_COLOR_UNSPECIFIED"
 *    @arg @c kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Cyan Cyan
 *        (Value: "CYAN")
 *    @arg @c kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_DeepOrange
 *        aka "Red Orange" (Value: "DEEP_ORANGE")
 *    @arg @c kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Green
 *        Green (Value: "GREEN")
 *    @arg @c kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Indigo
 *        Indigo
 *        * (Value: "INDIGO")
 *    @arg @c kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Lime Lime
 *        - Approved deviation from Material color palette (Value: "LIME")
 *    @arg @c kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Orange
 *        Orange (Value: "ORANGE")
 *    @arg @c kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Pink Pink
 *        (Value: "PINK")
 *    @arg @c kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Purple
 *        Purple (Value: "PURPLE")
 *    @arg @c kGTLRFirebaseRemoteConfig_RemoteConfigCondition_TagColor_Teal Teal
 *        (Value: "TEAL")
 */
@property(nonatomic, copy, nullable) NSString *tagColor;

@end


/**
 *  While default_value and conditional_values are each optional, at least one
 *  of
 *  the two is required - otherwise, the parameter is meaningless (and an
 *  exception will be thrown by the validation logic).
 */
@interface GTLRFirebaseRemoteConfig_RemoteConfigParameter : GTLRObject

/**
 *  Optional - a map of (condition_name, value). The condition_name of the
 *  highest priority (the one listed first in the conditions array) determines
 *  the value of this parameter.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseRemoteConfig_RemoteConfigParameter_ConditionalValues *conditionalValues;

/**
 *  Optional - value to set the parameter to, when none of the named conditions
 *  evaluate to <code>true</code>.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseRemoteConfig_RemoteConfigParameterValue *defaultValue;

/**
 *  Optional.
 *  A description for this Parameter. Length must be less than or equal to
 *  100 characters (or more precisely, unicode code points, which is defined in
 *  java/com/google/wireless/android/config/ConstsExporter.java).
 *  A description may contain any Unicode characters
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

@end


/**
 *  Optional - a map of (condition_name, value). The condition_name of the
 *  highest priority (the one listed first in the conditions array) determines
 *  the value of this parameter.
 *
 *  @note This class is documented as having more properties of
 *        GTLRFirebaseRemoteConfig_RemoteConfigParameterValue. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseRemoteConfig_RemoteConfigParameter_ConditionalValues : GTLRObject
@end


/**
 *  A RemoteConfigParameter's "value" (either the default value, or the value
 *  associated with a condition name) is either a string, or the
 *  "use_in_app_default" indicator (which means to leave out the parameter from
 *  the returned <key, value> map that is the output of the parameter fetch).
 *  We represent the "use_in_app_default" as a bool, but (when using the boolean
 *  instead of the string) it should always be <code>true</code>.
 */
@interface GTLRFirebaseRemoteConfig_RemoteConfigParameterValue : GTLRObject

/**
 *  if true, omit the parameter from the map of fetched parameter values
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useInAppDefault;

/** the string to set the parameter to */
@property(nonatomic, copy, nullable) NSString *value;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
