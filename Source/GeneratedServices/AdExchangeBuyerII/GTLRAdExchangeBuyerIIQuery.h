// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Ad Exchange Buyer API II (adexchangebuyer2/v2beta1)
// Description:
//   Accesses the latest features for managing Ad Exchange accounts, Real-Time
//   Bidding configurations and auction metrics, and Marketplace programmatic
//   deals.
// Documentation:
//   https://developers.google.com/ad-exchange/buyer-rest/guides/client-access/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAdExchangeBuyerII_AddDealAssociationRequest;
@class GTLRAdExchangeBuyerII_Client;
@class GTLRAdExchangeBuyerII_ClientUser;
@class GTLRAdExchangeBuyerII_ClientUserInvitation;
@class GTLRAdExchangeBuyerII_Creative;
@class GTLRAdExchangeBuyerII_FilterSet;
@class GTLRAdExchangeBuyerII_RemoveDealAssociationRequest;
@class GTLRAdExchangeBuyerII_StopWatchingCreativeRequest;
@class GTLRAdExchangeBuyerII_WatchCreativeRequest;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// duplicateIdMode

/** Value: "FORCE_ENABLE_DUPLICATE_IDS" */
GTLR_EXTERN NSString * const kGTLRAdExchangeBuyerIIDuplicateIdModeForceEnableDuplicateIds;
/** Value: "NO_DUPLICATES" */
GTLR_EXTERN NSString * const kGTLRAdExchangeBuyerIIDuplicateIdModeNoDuplicates;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other AdExchangeBuyerII query classes.
 */
@interface GTLRAdExchangeBuyerIIQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new client buyer.
 *
 *  Method: adexchangebuyer2.accounts.clients.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsCreate : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsClientsCreateWithObject:accountId:]

/**
 *  Unique numerical account ID for the buyer of which the client buyer
 *  is a customer; the sponsor buyer to create a client for. (required)
 */
@property(nonatomic, assign) long long accountId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Client.
 *
 *  Creates a new client buyer.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_Client to include in the query.
 *  @param accountId Unique numerical account ID for the buyer of which the
 *    client buyer
 *    is a customer; the sponsor buyer to create a client for. (required)
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsClientsCreate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_Client *)object
                      accountId:(long long)accountId;

@end

/**
 *  Gets a client buyer with a given client account ID.
 *
 *  Method: adexchangebuyer2.accounts.clients.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsGet : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsClientsGetWithaccountId:clientAccountId:]

/** Numerical account ID of the client's sponsor buyer. (required) */
@property(nonatomic, assign) long long accountId;

/** Numerical account ID of the client buyer to retrieve. (required) */
@property(nonatomic, assign) long long clientAccountId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Client.
 *
 *  Gets a client buyer with a given client account ID.
 *
 *  @param accountId Numerical account ID of the client's sponsor buyer.
 *    (required)
 *  @param clientAccountId Numerical account ID of the client buyer to retrieve.
 *    (required)
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsClientsGet
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                   clientAccountId:(long long)clientAccountId;

@end

/**
 *  Creates and sends out an email invitation to access
 *  an Ad Exchange client buyer account.
 *
 *  Method: adexchangebuyer2.accounts.clients.invitations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsCreate : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsClientsInvitationsCreateWithObject:accountId:clientAccountId:]

/** Numerical account ID of the client's sponsor buyer. (required) */
@property(nonatomic, assign) long long accountId;

/**
 *  Numerical account ID of the client buyer that the user
 *  should be associated with. (required)
 */
@property(nonatomic, assign) long long clientAccountId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ClientUserInvitation.
 *
 *  Creates and sends out an email invitation to access
 *  an Ad Exchange client buyer account.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_ClientUserInvitation to include
 *    in the query.
 *  @param accountId Numerical account ID of the client's sponsor buyer.
 *    (required)
 *  @param clientAccountId Numerical account ID of the client buyer that the
 *    user
 *    should be associated with. (required)
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsCreate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_ClientUserInvitation *)object
                      accountId:(long long)accountId
                clientAccountId:(long long)clientAccountId;

@end

/**
 *  Retrieves an existing client user invitation.
 *
 *  Method: adexchangebuyer2.accounts.clients.invitations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsGet : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsClientsInvitationsGetWithaccountId:clientAccountId:invitationId:]

/** Numerical account ID of the client's sponsor buyer. (required) */
@property(nonatomic, assign) long long accountId;

/**
 *  Numerical account ID of the client buyer that the user invitation
 *  to be retrieved is associated with. (required)
 */
@property(nonatomic, assign) long long clientAccountId;

/** Numerical identifier of the user invitation to retrieve. (required) */
@property(nonatomic, assign) long long invitationId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ClientUserInvitation.
 *
 *  Retrieves an existing client user invitation.
 *
 *  @param accountId Numerical account ID of the client's sponsor buyer.
 *    (required)
 *  @param clientAccountId Numerical account ID of the client buyer that the
 *    user invitation
 *    to be retrieved is associated with. (required)
 *  @param invitationId Numerical identifier of the user invitation to retrieve.
 *    (required)
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsGet
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                   clientAccountId:(long long)clientAccountId
                      invitationId:(long long)invitationId;

@end

/**
 *  Lists all the client users invitations for a client
 *  with a given account ID.
 *
 *  Method: adexchangebuyer2.accounts.clients.invitations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsClientsInvitationsListWithaccountId:clientAccountId:]

/** Numerical account ID of the client's sponsor buyer. (required) */
@property(nonatomic, assign) long long accountId;

/**
 *  Numerical account ID of the client buyer to list invitations for.
 *  (required)
 *  You must either specify a string representation of a
 *  numerical account identifier or the `-` character
 *  to list all the invitations for all the clients
 *  of a given sponsor buyer.
 */
@property(nonatomic, copy, nullable) NSString *clientAccountId;

/**
 *  Requested page size. Server may return fewer clients than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListClientUserInvitationsResponse.nextPageToken
 *  returned from the previous call to the
 *  clients.invitations.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListClientUserInvitationsResponse.
 *
 *  Lists all the client users invitations for a client
 *  with a given account ID.
 *
 *  @param accountId Numerical account ID of the client's sponsor buyer.
 *    (required)
 *  @param clientAccountId Numerical account ID of the client buyer to list
 *    invitations for.
 *    (required)
 *    You must either specify a string representation of a
 *    numerical account identifier or the `-` character
 *    to list all the invitations for all the clients
 *    of a given sponsor buyer.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                   clientAccountId:(NSString *)clientAccountId;

@end

/**
 *  Lists all the clients for the current sponsor buyer.
 *
 *  Method: adexchangebuyer2.accounts.clients.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsClientsListWithaccountId:]

/**
 *  Unique numerical account ID of the sponsor buyer to list the clients for.
 */
@property(nonatomic, assign) long long accountId;

/**
 *  Requested page size. The server may return fewer clients than requested.
 *  If unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListClientsResponse.nextPageToken
 *  returned from the previous call to the
 *  accounts.clients.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListClientsResponse.
 *
 *  Lists all the clients for the current sponsor buyer.
 *
 *  @param accountId Unique numerical account ID of the sponsor buyer to list
 *    the clients for.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsClientsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId;

@end

/**
 *  Updates an existing client buyer.
 *
 *  Method: adexchangebuyer2.accounts.clients.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsUpdate : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsClientsUpdateWithObject:accountId:clientAccountId:]

/**
 *  Unique numerical account ID for the buyer of which the client buyer
 *  is a customer; the sponsor buyer to update a client for. (required)
 */
@property(nonatomic, assign) long long accountId;

/** Unique numerical account ID of the client to update. (required) */
@property(nonatomic, assign) long long clientAccountId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Client.
 *
 *  Updates an existing client buyer.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_Client to include in the query.
 *  @param accountId Unique numerical account ID for the buyer of which the
 *    client buyer
 *    is a customer; the sponsor buyer to update a client for. (required)
 *  @param clientAccountId Unique numerical account ID of the client to update.
 *    (required)
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsClientsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_Client *)object
                      accountId:(long long)accountId
                clientAccountId:(long long)clientAccountId;

@end

/**
 *  Retrieves an existing client user.
 *
 *  Method: adexchangebuyer2.accounts.clients.users.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersGet : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsClientsUsersGetWithaccountId:clientAccountId:userId:]

/** Numerical account ID of the client's sponsor buyer. (required) */
@property(nonatomic, assign) long long accountId;

/**
 *  Numerical account ID of the client buyer
 *  that the user to be retrieved is associated with. (required)
 */
@property(nonatomic, assign) long long clientAccountId;

/** Numerical identifier of the user to retrieve. (required) */
@property(nonatomic, assign) long long userId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ClientUser.
 *
 *  Retrieves an existing client user.
 *
 *  @param accountId Numerical account ID of the client's sponsor buyer.
 *    (required)
 *  @param clientAccountId Numerical account ID of the client buyer
 *    that the user to be retrieved is associated with. (required)
 *  @param userId Numerical identifier of the user to retrieve. (required)
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersGet
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                   clientAccountId:(long long)clientAccountId
                            userId:(long long)userId;

@end

/**
 *  Lists all the known client users for a specified
 *  sponsor buyer account ID.
 *
 *  Method: adexchangebuyer2.accounts.clients.users.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsClientsUsersListWithaccountId:clientAccountId:]

/**
 *  Numerical account ID of the sponsor buyer of the client to list users for.
 *  (required)
 */
@property(nonatomic, assign) long long accountId;

/**
 *  The account ID of the client buyer to list users for. (required)
 *  You must specify either a string representation of a
 *  numerical account identifier or the `-` character
 *  to list all the client users for all the clients
 *  of a given sponsor buyer.
 */
@property(nonatomic, copy, nullable) NSString *clientAccountId;

/**
 *  Requested page size. The server may return fewer clients than requested.
 *  If unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListClientUsersResponse.nextPageToken
 *  returned from the previous call to the
 *  accounts.clients.users.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListClientUsersResponse.
 *
 *  Lists all the known client users for a specified
 *  sponsor buyer account ID.
 *
 *  @param accountId Numerical account ID of the sponsor buyer of the client to
 *    list users for.
 *    (required)
 *  @param clientAccountId The account ID of the client buyer to list users for.
 *    (required)
 *    You must specify either a string representation of a
 *    numerical account identifier or the `-` character
 *    to list all the client users for all the clients
 *    of a given sponsor buyer.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                   clientAccountId:(NSString *)clientAccountId;

@end

/**
 *  Updates an existing client user.
 *  Only the user status can be changed on update.
 *
 *  Method: adexchangebuyer2.accounts.clients.users.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersUpdate : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsClientsUsersUpdateWithObject:accountId:clientAccountId:userId:]

/** Numerical account ID of the client's sponsor buyer. (required) */
@property(nonatomic, assign) long long accountId;

/**
 *  Numerical account ID of the client buyer that the user to be retrieved
 *  is associated with. (required)
 */
@property(nonatomic, assign) long long clientAccountId;

/** Numerical identifier of the user to retrieve. (required) */
@property(nonatomic, assign) long long userId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ClientUser.
 *
 *  Updates an existing client user.
 *  Only the user status can be changed on update.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_ClientUser to include in the
 *    query.
 *  @param accountId Numerical account ID of the client's sponsor buyer.
 *    (required)
 *  @param clientAccountId Numerical account ID of the client buyer that the
 *    user to be retrieved
 *    is associated with. (required)
 *  @param userId Numerical identifier of the user to retrieve. (required)
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersUpdate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_ClientUser *)object
                      accountId:(long long)accountId
                clientAccountId:(long long)clientAccountId
                         userId:(long long)userId;

@end

/**
 *  Creates a creative.
 *
 *  Method: adexchangebuyer2.accounts.creatives.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesCreate : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsCreativesCreateWithObject:accountId:]

/**
 *  The account that this creative belongs to.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Indicates if multiple creatives can share an ID or not. Default is
 *  NO_DUPLICATES (one ID per creative).
 *
 *  Likely values:
 *    @arg @c kGTLRAdExchangeBuyerIIDuplicateIdModeNoDuplicates Value
 *        "NO_DUPLICATES"
 *    @arg @c kGTLRAdExchangeBuyerIIDuplicateIdModeForceEnableDuplicateIds Value
 *        "FORCE_ENABLE_DUPLICATE_IDS"
 */
@property(nonatomic, copy, nullable) NSString *duplicateIdMode;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Creative.
 *
 *  Creates a creative.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_Creative to include in the query.
 *  @param accountId The account that this creative belongs to.
 *    Can be used to filter the response of the
 *    creatives.list
 *    method.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsCreativesCreate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_Creative *)object
                      accountId:(NSString *)accountId;

@end

/**
 *  Associate an existing deal with a creative.
 *
 *  Method: adexchangebuyer2.accounts.creatives.dealAssociations.add
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsAdd : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsCreativesDealAssociationsAddWithObject:accountId:creativeId:]

/** The account the creative belongs to. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the creative associated with the deal. */
@property(nonatomic, copy, nullable) NSString *creativeId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Empty.
 *
 *  Associate an existing deal with a creative.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_AddDealAssociationRequest to
 *    include in the query.
 *  @param accountId The account the creative belongs to.
 *  @param creativeId The ID of the creative associated with the deal.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsAdd
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_AddDealAssociationRequest *)object
                      accountId:(NSString *)accountId
                     creativeId:(NSString *)creativeId;

@end

/**
 *  List all creative-deal associations.
 *
 *  Method: adexchangebuyer2.accounts.creatives.dealAssociations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsCreativesDealAssociationsListWithaccountId:creativeId:]

/**
 *  The account to list the associations from.
 *  Specify "-" to list all creatives the current user has access to.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The creative ID to list the associations from.
 *  Specify "-" to list all creatives under the above account.
 */
@property(nonatomic, copy, nullable) NSString *creativeId;

/**
 *  Requested page size. Server may return fewer associations than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListDealAssociationsResponse.next_page_token
 *  returned from the previous call to 'ListDealAssociations' method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  An optional query string to filter deal associations. If no filter is
 *  specified, all associations will be returned.
 *  Supported queries are:
 *  <ul>
 *  <li>accountId=<i>account_id_string</i>
 *  <li>creativeId=<i>creative_id_string</i>
 *  <li>dealsId=<i>deals_id_string</i>
 *  <li>dealsStatus:{approved, conditionally_approved, disapproved,
 *  not_checked}
 *  <li>openAuctionStatus:{approved, conditionally_approved, disapproved,
 *  not_checked}
 *  </ul>
 *  Example: 'dealsId=12345 AND dealsStatus:disapproved'
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListDealAssociationsResponse.
 *
 *  List all creative-deal associations.
 *
 *  @param accountId The account to list the associations from.
 *    Specify "-" to list all creatives the current user has access to.
 *  @param creativeId The creative ID to list the associations from.
 *    Specify "-" to list all creatives under the above account.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                        creativeId:(NSString *)creativeId;

@end

/**
 *  Remove the association between a deal and a creative.
 *
 *  Method: adexchangebuyer2.accounts.creatives.dealAssociations.remove
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsRemove : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsCreativesDealAssociationsRemoveWithObject:accountId:creativeId:]

/** The account the creative belongs to. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the creative associated with the deal. */
@property(nonatomic, copy, nullable) NSString *creativeId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Empty.
 *
 *  Remove the association between a deal and a creative.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_RemoveDealAssociationRequest to
 *    include in the query.
 *  @param accountId The account the creative belongs to.
 *  @param creativeId The ID of the creative associated with the deal.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsRemove
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_RemoveDealAssociationRequest *)object
                      accountId:(NSString *)accountId
                     creativeId:(NSString *)creativeId;

@end

/**
 *  Gets a creative.
 *
 *  Method: adexchangebuyer2.accounts.creatives.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesGet : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsCreativesGetWithaccountId:creativeId:]

/** The account the creative belongs to. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the creative to retrieve. */
@property(nonatomic, copy, nullable) NSString *creativeId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Creative.
 *
 *  Gets a creative.
 *
 *  @param accountId The account the creative belongs to.
 *  @param creativeId The ID of the creative to retrieve.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsCreativesGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                        creativeId:(NSString *)creativeId;

@end

/**
 *  Lists creatives.
 *
 *  Method: adexchangebuyer2.accounts.creatives.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsCreativesListWithaccountId:]

/**
 *  The account to list the creatives from.
 *  Specify "-" to list all creatives the current user has access to.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Requested page size. The server may return fewer creatives than requested
 *  (due to timeout constraint) even if more are available via another call.
 *  If unspecified, server will pick an appropriate default.
 *  Acceptable values are 1 to 1000, inclusive.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListCreativesResponse.next_page_token
 *  returned from the previous call to 'ListCreatives' method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  An optional query string to filter creatives. If no filter is specified,
 *  all active creatives will be returned.
 *  Supported queries are:
 *  <ul>
 *  <li>accountId=<i>account_id_string</i>
 *  <li>creativeId=<i>creative_id_string</i>
 *  <li>dealsStatus: {approved, conditionally_approved, disapproved,
 *  not_checked}
 *  <li>openAuctionStatus: {approved, conditionally_approved, disapproved,
 *  not_checked}
 *  <li>attribute: {a numeric attribute from the list of attributes}
 *  <li>disapprovalReason: {a reason from DisapprovalReason
 *  </ul>
 *  Example: 'accountId=12345 AND (dealsStatus:disapproved AND
 *  disapprovalReason:unacceptable_content) OR attribute:47'
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListCreativesResponse.
 *
 *  Lists creatives.
 *
 *  @param accountId The account to list the creatives from.
 *    Specify "-" to list all creatives the current user has access to.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsCreativesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId;

@end

/**
 *  Stops watching a creative. Will stop push notifications being sent to the
 *  topics when the creative changes status.
 *
 *  Method: adexchangebuyer2.accounts.creatives.stopWatching
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesStopWatching : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsCreativesStopWatchingWithObject:accountId:creativeId:]

/** The account of the creative to stop notifications for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The creative ID of the creative to stop notifications for.
 *  Specify "-" to specify stopping account level notifications.
 */
@property(nonatomic, copy, nullable) NSString *creativeId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Empty.
 *
 *  Stops watching a creative. Will stop push notifications being sent to the
 *  topics when the creative changes status.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_StopWatchingCreativeRequest to
 *    include in the query.
 *  @param accountId The account of the creative to stop notifications for.
 *  @param creativeId The creative ID of the creative to stop notifications for.
 *    Specify "-" to specify stopping account level notifications.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsCreativesStopWatching
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_StopWatchingCreativeRequest *)object
                      accountId:(NSString *)accountId
                     creativeId:(NSString *)creativeId;

@end

/**
 *  Updates a creative.
 *
 *  Method: adexchangebuyer2.accounts.creatives.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesUpdate : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsCreativesUpdateWithObject:accountId:creativeId:]

/**
 *  The account that this creative belongs to.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The buyer-defined creative ID of this creative.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *creativeId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Creative.
 *
 *  Updates a creative.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_Creative to include in the query.
 *  @param accountId The account that this creative belongs to.
 *    Can be used to filter the response of the
 *    creatives.list
 *    method.
 *  @param creativeId The buyer-defined creative ID of this creative.
 *    Can be used to filter the response of the
 *    creatives.list
 *    method.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsCreativesUpdate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_Creative *)object
                      accountId:(NSString *)accountId
                     creativeId:(NSString *)creativeId;

@end

/**
 *  Watches a creative. Will result in push notifications being sent to the
 *  topic when the creative changes status.
 *
 *  Method: adexchangebuyer2.accounts.creatives.watch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesWatch : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsCreativesWatchWithObject:accountId:creativeId:]

/** The account of the creative to watch. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The creative ID to watch for status changes.
 *  Specify "-" to watch all creatives under the above account.
 *  If both creative-level and account-level notifications are
 *  sent, only a single notification will be sent to the
 *  creative-level notification topic.
 */
@property(nonatomic, copy, nullable) NSString *creativeId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Empty.
 *
 *  Watches a creative. Will result in push notifications being sent to the
 *  topic when the creative changes status.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_WatchCreativeRequest to include
 *    in the query.
 *  @param accountId The account of the creative to watch.
 *  @param creativeId The creative ID to watch for status changes.
 *    Specify "-" to watch all creatives under the above account.
 *    If both creative-level and account-level notifications are
 *    sent, only a single notification will be sent to the
 *    creative-level notification topic.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsCreativesWatch
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_WatchCreativeRequest *)object
                      accountId:(NSString *)accountId
                     creativeId:(NSString *)creativeId;

@end

/**
 *  Lists all metrics that are measured in terms of number of bids.
 *
 *  Method: adexchangebuyer2.accounts.filterSets.bidMetrics.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsBidMetricsList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsFilterSetsBidMetricsListWithaccountId:filterSetId:]

/** Account ID of the buyer. */
@property(nonatomic, assign) long long accountId;

/** The ID of the filter set to apply. */
@property(nonatomic, assign) long long filterSetId;

/**
 *  Requested page size. The server may return fewer results than requested.
 *  If unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListBidMetricsResponse.nextPageToken
 *  returned from the previous call to the
 *  accounts.filterSets.bidMetrics.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListBidMetricsResponse.
 *
 *  Lists all metrics that are measured in terms of number of bids.
 *
 *  @param accountId Account ID of the buyer.
 *  @param filterSetId The ID of the filter set to apply.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsBidMetricsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                       filterSetId:(long long)filterSetId;

@end

/**
 *  List all errors that occurred in bid responses, with the number of bid
 *  responses affected for each reason.
 *
 *  Method: adexchangebuyer2.accounts.filterSets.bidResponseErrors.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsBidResponseErrorsList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsFilterSetsBidResponseErrorsListWithaccountId:filterSetId:]

/** Account ID of the buyer. */
@property(nonatomic, assign) long long accountId;

/** The ID of the filter set to apply. */
@property(nonatomic, assign) long long filterSetId;

/**
 *  Requested page size. The server may return fewer results than requested.
 *  If unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListBidResponseErrorsResponse.nextPageToken
 *  returned from the previous call to the
 *  accounts.filterSets.bidResponseErrors.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListBidResponseErrorsResponse.
 *
 *  List all errors that occurred in bid responses, with the number of bid
 *  responses affected for each reason.
 *
 *  @param accountId Account ID of the buyer.
 *  @param filterSetId The ID of the filter set to apply.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsBidResponseErrorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                       filterSetId:(long long)filterSetId;

@end

/**
 *  List all reasons for which bid responses were considered to have no
 *  applicable bids, with the number of bid responses affected for each reason.
 *
 *  Method: adexchangebuyer2.accounts.filterSets.bidResponsesWithoutBids.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsBidResponsesWithoutBidsList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsFilterSetsBidResponsesWithoutBidsListWithaccountId:filterSetId:]

/** Account ID of the buyer. */
@property(nonatomic, assign) long long accountId;

/** The ID of the filter set to apply. */
@property(nonatomic, assign) long long filterSetId;

/**
 *  Requested page size. The server may return fewer results than requested.
 *  If unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListBidResponsesWithoutBidsResponse.nextPageToken
 *  returned from the previous call to the
 *  accounts.filterSets.bidResponsesWithoutBids.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListBidResponsesWithoutBidsResponse.
 *
 *  List all reasons for which bid responses were considered to have no
 *  applicable bids, with the number of bid responses affected for each reason.
 *
 *  @param accountId Account ID of the buyer.
 *  @param filterSetId The ID of the filter set to apply.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsBidResponsesWithoutBidsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                       filterSetId:(long long)filterSetId;

@end

/**
 *  Creates the specified filter set for the account with the given account ID.
 *
 *  Method: adexchangebuyer2.accounts.filterSets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsCreate : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsFilterSetsCreateWithObject:accountId:]

/** Account ID of the buyer. */
@property(nonatomic, assign) long long accountId;

/**
 *  Whether the filter set is transient, or should be persisted indefinitely.
 *  By default, filter sets are not transient.
 *  If transient, it will be available for at least 1 hour after creation.
 */
@property(nonatomic, assign) BOOL isTransient;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_FilterSet.
 *
 *  Creates the specified filter set for the account with the given account ID.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_FilterSet to include in the
 *    query.
 *  @param accountId Account ID of the buyer.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsCreate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_FilterSet *)object
                      accountId:(long long)accountId;

@end

/**
 *  Deletes the requested filter set from the account with the given account
 *  ID.
 *
 *  Method: adexchangebuyer2.accounts.filterSets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsDelete : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsFilterSetsDeleteWithaccountId:filterSetId:]

/** Account ID of the buyer. */
@property(nonatomic, assign) long long accountId;

/** The ID of the filter set to delete. */
@property(nonatomic, assign) long long filterSetId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Empty.
 *
 *  Deletes the requested filter set from the account with the given account
 *  ID.
 *
 *  @param accountId Account ID of the buyer.
 *  @param filterSetId The ID of the filter set to delete.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsDelete
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                       filterSetId:(long long)filterSetId;

@end

/**
 *  List all reasons that caused a bid request not to be sent for an
 *  impression, with the number of bid requests not sent for each reason.
 *
 *  Method: adexchangebuyer2.accounts.filterSets.filteredBidRequests.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsFilteredBidRequestsList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsFilterSetsFilteredBidRequestsListWithaccountId:filterSetId:]

/** Account ID of the buyer. */
@property(nonatomic, assign) long long accountId;

/** The ID of the filter set to apply. */
@property(nonatomic, assign) long long filterSetId;

/**
 *  Requested page size. The server may return fewer results than requested.
 *  If unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListFilteredBidRequestsResponse.nextPageToken
 *  returned from the previous call to the
 *  accounts.filterSets.filteredBidRequests.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListFilteredBidRequestsResponse.
 *
 *  List all reasons that caused a bid request not to be sent for an
 *  impression, with the number of bid requests not sent for each reason.
 *
 *  @param accountId Account ID of the buyer.
 *  @param filterSetId The ID of the filter set to apply.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsFilteredBidRequestsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                       filterSetId:(long long)filterSetId;

@end

/**
 *  List all details associated with a specific reason for which bids were
 *  filtered and a specific creative that was filtered for that reason, with
 *  the number of bids filtered for each detail.
 *
 *  Method: adexchangebuyer2.accounts.filterSets.filteredBids.creatives.details.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsFilteredBidsCreativesDetailsList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsFilterSetsFilteredBidsCreativesDetailsListWithaccountId:filterSetId:creativeStatusId:creativeId:]

/** Account ID of the buyer. */
@property(nonatomic, assign) long long accountId;

/** The creative ID for which to retrieve a breakdown by detail. */
@property(nonatomic, copy, nullable) NSString *creativeId;

/**
 *  The ID of the creative status for which to retrieve a breakdown by detail.
 *  See
 *  [creative-status-codes](https://developers.google.com/ad-exchange/rtb/downloads/creative-status-codes).
 */
@property(nonatomic, assign) NSInteger creativeStatusId;

/** The ID of the filter set to apply. */
@property(nonatomic, assign) long long filterSetId;

/**
 *  Requested page size. The server may return fewer results than requested.
 *  If unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListCreativeStatusAndCreativeBreakdownByDetailResponse.nextPageToken
 *  returned from the previous call to the
 *  accounts.filterSets.filteredBids.creatives.details.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c
 *  GTLRAdExchangeBuyerII_ListCreativeStatusAndCreativeBreakdownByDetailResponse.
 *
 *  List all details associated with a specific reason for which bids were
 *  filtered and a specific creative that was filtered for that reason, with
 *  the number of bids filtered for each detail.
 *
 *  @param accountId Account ID of the buyer.
 *  @param filterSetId The ID of the filter set to apply.
 *  @param creativeStatusId The ID of the creative status for which to retrieve
 *    a breakdown by detail.
 *    See
 *    [creative-status-codes](https://developers.google.com/ad-exchange/rtb/downloads/creative-status-codes).
 *  @param creativeId The creative ID for which to retrieve a breakdown by
 *    detail.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsFilteredBidsCreativesDetailsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                       filterSetId:(long long)filterSetId
                  creativeStatusId:(NSInteger)creativeStatusId
                        creativeId:(NSString *)creativeId;

@end

/**
 *  List all creatives associated with a specific reason for which bids were
 *  filtered, with the number of bids filtered for each creative.
 *
 *  Method: adexchangebuyer2.accounts.filterSets.filteredBids.creatives.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsFilteredBidsCreativesList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsFilterSetsFilteredBidsCreativesListWithaccountId:filterSetId:creativeStatusId:]

/** Account ID of the buyer. */
@property(nonatomic, assign) long long accountId;

/**
 *  The ID of the creative status for which to retrieve a breakdown by
 *  creative.
 *  See
 *  [creative-status-codes](https://developers.google.com/ad-exchange/rtb/downloads/creative-status-codes).
 */
@property(nonatomic, assign) NSInteger creativeStatusId;

/** The ID of the filter set to apply. */
@property(nonatomic, assign) long long filterSetId;

/**
 *  Requested page size. The server may return fewer results than requested.
 *  If unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListCreativeStatusBreakdownByCreativeResponse.nextPageToken
 *  returned from the previous call to the
 *  accounts.filterSets.filteredBids.creatives.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c
 *  GTLRAdExchangeBuyerII_ListCreativeStatusBreakdownByCreativeResponse.
 *
 *  List all creatives associated with a specific reason for which bids were
 *  filtered, with the number of bids filtered for each creative.
 *
 *  @param accountId Account ID of the buyer.
 *  @param filterSetId The ID of the filter set to apply.
 *  @param creativeStatusId The ID of the creative status for which to retrieve
 *    a breakdown by
 *    creative.
 *    See
 *    [creative-status-codes](https://developers.google.com/ad-exchange/rtb/downloads/creative-status-codes).
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsFilteredBidsCreativesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                       filterSetId:(long long)filterSetId
                  creativeStatusId:(NSInteger)creativeStatusId;

@end

/**
 *  List all details associated with a specific reason for which bids were
 *  filtered, with the number of bids filtered for each detail.
 *
 *  Method: adexchangebuyer2.accounts.filterSets.filteredBids.details.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsFilteredBidsDetailsList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsFilterSetsFilteredBidsDetailsListWithaccountId:filterSetId:creativeStatusId:]

/** Account ID of the buyer. */
@property(nonatomic, assign) long long accountId;

/**
 *  The ID of the creative status for which to retrieve a breakdown by detail.
 *  See
 *  [creative-status-codes](https://developers.google.com/ad-exchange/rtb/downloads/creative-status-codes).
 */
@property(nonatomic, assign) NSInteger creativeStatusId;

/** The ID of the filter set to apply. */
@property(nonatomic, assign) long long filterSetId;

/**
 *  Requested page size. The server may return fewer results than requested.
 *  If unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListCreativeStatusBreakdownByDetailResponse.nextPageToken
 *  returned from the previous call to the
 *  accounts.filterSets.filteredBids.details.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c
 *  GTLRAdExchangeBuyerII_ListCreativeStatusBreakdownByDetailResponse.
 *
 *  List all details associated with a specific reason for which bids were
 *  filtered, with the number of bids filtered for each detail.
 *
 *  @param accountId Account ID of the buyer.
 *  @param filterSetId The ID of the filter set to apply.
 *  @param creativeStatusId The ID of the creative status for which to retrieve
 *    a breakdown by detail.
 *    See
 *    [creative-status-codes](https://developers.google.com/ad-exchange/rtb/downloads/creative-status-codes).
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsFilteredBidsDetailsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                       filterSetId:(long long)filterSetId
                  creativeStatusId:(NSInteger)creativeStatusId;

@end

/**
 *  List all reasons for which bids were filtered, with the number of bids
 *  filtered for each reason.
 *
 *  Method: adexchangebuyer2.accounts.filterSets.filteredBids.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsFilteredBidsList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsFilterSetsFilteredBidsListWithaccountId:filterSetId:]

/** Account ID of the buyer. */
@property(nonatomic, assign) long long accountId;

/** The ID of the filter set to apply. */
@property(nonatomic, assign) long long filterSetId;

/**
 *  Requested page size. The server may return fewer results than requested.
 *  If unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListFilteredBidsResponse.nextPageToken
 *  returned from the previous call to the
 *  accounts.filterSets.filteredBids.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListFilteredBidsResponse.
 *
 *  List all reasons for which bids were filtered, with the number of bids
 *  filtered for each reason.
 *
 *  @param accountId Account ID of the buyer.
 *  @param filterSetId The ID of the filter set to apply.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsFilteredBidsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                       filterSetId:(long long)filterSetId;

@end

/**
 *  Retrieves the requested filter set for the account with the given account
 *  ID.
 *
 *  Method: adexchangebuyer2.accounts.filterSets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsGet : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsFilterSetsGetWithaccountId:filterSetId:]

/** Account ID of the buyer. */
@property(nonatomic, assign) long long accountId;

/** The ID of the filter set to get. */
@property(nonatomic, assign) long long filterSetId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_FilterSet.
 *
 *  Retrieves the requested filter set for the account with the given account
 *  ID.
 *
 *  @param accountId Account ID of the buyer.
 *  @param filterSetId The ID of the filter set to get.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsGet
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                       filterSetId:(long long)filterSetId;

@end

/**
 *  Lists all metrics that are measured in terms of number of impressions.
 *
 *  Method: adexchangebuyer2.accounts.filterSets.impressionMetrics.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsImpressionMetricsList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsFilterSetsImpressionMetricsListWithaccountId:filterSetId:]

/** Account ID of the buyer. */
@property(nonatomic, assign) long long accountId;

/** The ID of the filter set to apply. */
@property(nonatomic, assign) long long filterSetId;

/**
 *  Requested page size. The server may return fewer results than requested.
 *  If unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListImpressionMetricsResponse.nextPageToken
 *  returned from the previous call to the
 *  accounts.filterSets.impressionMetrics.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListImpressionMetricsResponse.
 *
 *  Lists all metrics that are measured in terms of number of impressions.
 *
 *  @param accountId Account ID of the buyer.
 *  @param filterSetId The ID of the filter set to apply.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsImpressionMetricsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                       filterSetId:(long long)filterSetId;

@end

/**
 *  Lists all filter sets for the account with the given account ID.
 *
 *  Method: adexchangebuyer2.accounts.filterSets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsFilterSetsListWithaccountId:]

/** Account ID of the buyer. */
@property(nonatomic, assign) long long accountId;

/**
 *  Requested page size. The server may return fewer results than requested.
 *  If unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListFilterSetsResponse.nextPageToken
 *  returned from the previous call to the
 *  accounts.filterSets.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListFilterSetsResponse.
 *
 *  Lists all filter sets for the account with the given account ID.
 *
 *  @param accountId Account ID of the buyer.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId;

@end

/**
 *  List all reasons for which bids lost in the auction, with the number of
 *  bids that lost for each reason.
 *
 *  Method: adexchangebuyer2.accounts.filterSets.losingBids.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsLosingBidsList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsFilterSetsLosingBidsListWithaccountId:filterSetId:]

/** Account ID of the buyer. */
@property(nonatomic, assign) long long accountId;

/** The ID of the filter set to apply. */
@property(nonatomic, assign) long long filterSetId;

/**
 *  Requested page size. The server may return fewer results than requested.
 *  If unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListLosingBidsResponse.nextPageToken
 *  returned from the previous call to the
 *  accounts.filterSets.losingBids.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListLosingBidsResponse.
 *
 *  List all reasons for which bids lost in the auction, with the number of
 *  bids that lost for each reason.
 *
 *  @param accountId Account ID of the buyer.
 *  @param filterSetId The ID of the filter set to apply.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsLosingBidsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                       filterSetId:(long long)filterSetId;

@end

/**
 *  List all reasons for which winning bids were not billable, with the number
 *  of bids not billed for each reason.
 *
 *  Method: adexchangebuyer2.accounts.filterSets.nonBillableWinningBids.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsNonBillableWinningBidsList : GTLRAdExchangeBuyerIIQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyerII queryForAccountsFilterSetsNonBillableWinningBidsListWithaccountId:filterSetId:]

/** Account ID of the buyer. */
@property(nonatomic, assign) long long accountId;

/** The ID of the filter set to apply. */
@property(nonatomic, assign) long long filterSetId;

/**
 *  Requested page size. The server may return fewer results than requested.
 *  If unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return.
 *  Typically, this is the value of
 *  ListNonBillableWinningBidsResponse.nextPageToken
 *  returned from the previous call to the
 *  accounts.filterSets.nonBillableWinningBids.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListNonBillableWinningBidsResponse.
 *
 *  List all reasons for which winning bids were not billable, with the number
 *  of bids not billed for each reason.
 *
 *  @param accountId Account ID of the buyer.
 *  @param filterSetId The ID of the filter set to apply.
 *
 *  @returns GTLRAdExchangeBuyerIIQuery_AccountsFilterSetsNonBillableWinningBidsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                       filterSetId:(long long)filterSetId;

@end

NS_ASSUME_NONNULL_END
