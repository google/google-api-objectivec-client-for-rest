// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Ad Exchange Buyer API II (adexchangebuyer2/v2beta1)
// Description:
//   Accesses the latest features for managing Authorized Buyers accounts,
//   Real-Time Bidding configurations and auction metrics, and Marketplace
//   programmatic deals.
// Documentation:
//   https://developers.google.com/authorized-buyers/apis/reference/rest/

#import "GTLRAdExchangeBuyerIIQuery.h"

#import "GTLRAdExchangeBuyerIIObjects.h"

// ----------------------------------------------------------------------------
// Constants

// duplicateIdMode
NSString * const kGTLRAdExchangeBuyerIIDuplicateIdModeForceEnableDuplicateIds = @"FORCE_ENABLE_DUPLICATE_IDS";
NSString * const kGTLRAdExchangeBuyerIIDuplicateIdModeNoDuplicates = @"NO_DUPLICATES";

// filterSyntax
NSString * const kGTLRAdExchangeBuyerIIFilterSyntaxFilterSyntaxUnspecified = @"FILTER_SYNTAX_UNSPECIFIED";
NSString * const kGTLRAdExchangeBuyerIIFilterSyntaxListFilter  = @"LIST_FILTER";
NSString * const kGTLRAdExchangeBuyerIIFilterSyntaxPql         = @"PQL";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRAdExchangeBuyerIIQuery

@dynamic fields;

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsClientsCreate

@dynamic accountId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_Client *)object
                      accountId:(long long)accountId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/clients";
  GTLRAdExchangeBuyerIIQuery_AccountsClientsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Client class];
  query.loggingName = @"adexchangebuyer2.accounts.clients.create";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsClientsGet

@dynamic accountId, clientAccountId;

+ (instancetype)queryWithAccountId:(long long)accountId
                   clientAccountId:(long long)clientAccountId {
  NSArray *pathParams = @[
    @"accountId", @"clientAccountId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/clients/{clientAccountId}";
  GTLRAdExchangeBuyerIIQuery_AccountsClientsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.clientAccountId = clientAccountId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Client class];
  query.loggingName = @"adexchangebuyer2.accounts.clients.get";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsCreate

@dynamic accountId, clientAccountId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_ClientUserInvitation *)object
                      accountId:(long long)accountId
                clientAccountId:(long long)clientAccountId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"clientAccountId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations";
  GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.clientAccountId = clientAccountId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ClientUserInvitation class];
  query.loggingName = @"adexchangebuyer2.accounts.clients.invitations.create";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsGet

@dynamic accountId, clientAccountId, invitationId;

+ (instancetype)queryWithAccountId:(long long)accountId
                   clientAccountId:(long long)clientAccountId
                      invitationId:(long long)invitationId {
  NSArray *pathParams = @[
    @"accountId", @"clientAccountId", @"invitationId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations/{invitationId}";
  GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.clientAccountId = clientAccountId;
  query.invitationId = invitationId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ClientUserInvitation class];
  query.loggingName = @"adexchangebuyer2.accounts.clients.invitations.get";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsList

@dynamic accountId, clientAccountId, pageSize, pageToken;

+ (instancetype)queryWithAccountId:(long long)accountId
                   clientAccountId:(NSString *)clientAccountId {
  NSArray *pathParams = @[
    @"accountId", @"clientAccountId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations";
  GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.clientAccountId = clientAccountId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListClientUserInvitationsResponse class];
  query.loggingName = @"adexchangebuyer2.accounts.clients.invitations.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsClientsList

@dynamic accountId, pageSize, pageToken, partnerClientId;

+ (instancetype)queryWithAccountId:(long long)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/clients";
  GTLRAdExchangeBuyerIIQuery_AccountsClientsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListClientsResponse class];
  query.loggingName = @"adexchangebuyer2.accounts.clients.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsClientsUpdate

@dynamic accountId, clientAccountId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_Client *)object
                      accountId:(long long)accountId
                clientAccountId:(long long)clientAccountId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"clientAccountId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/clients/{clientAccountId}";
  GTLRAdExchangeBuyerIIQuery_AccountsClientsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.clientAccountId = clientAccountId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Client class];
  query.loggingName = @"adexchangebuyer2.accounts.clients.update";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersGet

@dynamic accountId, clientAccountId, userId;

+ (instancetype)queryWithAccountId:(long long)accountId
                   clientAccountId:(long long)clientAccountId
                            userId:(long long)userId {
  NSArray *pathParams = @[
    @"accountId", @"clientAccountId", @"userId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}";
  GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.clientAccountId = clientAccountId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ClientUser class];
  query.loggingName = @"adexchangebuyer2.accounts.clients.users.get";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersList

@dynamic accountId, clientAccountId, pageSize, pageToken;

+ (instancetype)queryWithAccountId:(long long)accountId
                   clientAccountId:(NSString *)clientAccountId {
  NSArray *pathParams = @[
    @"accountId", @"clientAccountId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/clients/{clientAccountId}/users";
  GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.clientAccountId = clientAccountId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListClientUsersResponse class];
  query.loggingName = @"adexchangebuyer2.accounts.clients.users.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersUpdate

@dynamic accountId, clientAccountId, userId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_ClientUser *)object
                      accountId:(long long)accountId
                clientAccountId:(long long)clientAccountId
                         userId:(long long)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"clientAccountId", @"userId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}";
  GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.clientAccountId = clientAccountId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ClientUser class];
  query.loggingName = @"adexchangebuyer2.accounts.clients.users.update";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsCreativesCreate

@dynamic accountId, duplicateIdMode;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_Creative *)object
                      accountId:(NSString *)accountId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/creatives";
  GTLRAdExchangeBuyerIIQuery_AccountsCreativesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Creative class];
  query.loggingName = @"adexchangebuyer2.accounts.creatives.create";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsAdd

@dynamic accountId, creativeId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_AddDealAssociationRequest *)object
                      accountId:(NSString *)accountId
                     creativeId:(NSString *)creativeId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"creativeId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:add";
  GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsAdd *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.creativeId = creativeId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Empty class];
  query.loggingName = @"adexchangebuyer2.accounts.creatives.dealAssociations.add";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsList

@dynamic accountId, creativeId, pageSize, pageToken, query;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                        creativeId:(NSString *)creativeId {
  NSArray *pathParams = @[
    @"accountId", @"creativeId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations";
  GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.creativeId = creativeId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListDealAssociationsResponse class];
  query.loggingName = @"adexchangebuyer2.accounts.creatives.dealAssociations.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsRemove

@dynamic accountId, creativeId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_RemoveDealAssociationRequest *)object
                      accountId:(NSString *)accountId
                     creativeId:(NSString *)creativeId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"creativeId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:remove";
  GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsRemove *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.creativeId = creativeId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Empty class];
  query.loggingName = @"adexchangebuyer2.accounts.creatives.dealAssociations.remove";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsCreativesGet

@dynamic accountId, creativeId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                        creativeId:(NSString *)creativeId {
  NSArray *pathParams = @[
    @"accountId", @"creativeId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/creatives/{creativeId}";
  GTLRAdExchangeBuyerIIQuery_AccountsCreativesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.creativeId = creativeId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Creative class];
  query.loggingName = @"adexchangebuyer2.accounts.creatives.get";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsCreativesList

@dynamic accountId, pageSize, pageToken, query;

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/creatives";
  GTLRAdExchangeBuyerIIQuery_AccountsCreativesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListCreativesResponse class];
  query.loggingName = @"adexchangebuyer2.accounts.creatives.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsCreativesStopWatching

@dynamic accountId, creativeId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_StopWatchingCreativeRequest *)object
                      accountId:(NSString *)accountId
                     creativeId:(NSString *)creativeId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"creativeId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/creatives/{creativeId}:stopWatching";
  GTLRAdExchangeBuyerIIQuery_AccountsCreativesStopWatching *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.creativeId = creativeId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Empty class];
  query.loggingName = @"adexchangebuyer2.accounts.creatives.stopWatching";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsCreativesUpdate

@dynamic accountId, creativeId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_Creative *)object
                      accountId:(NSString *)accountId
                     creativeId:(NSString *)creativeId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"creativeId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/creatives/{creativeId}";
  GTLRAdExchangeBuyerIIQuery_AccountsCreativesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.creativeId = creativeId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Creative class];
  query.loggingName = @"adexchangebuyer2.accounts.creatives.update";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsCreativesWatch

@dynamic accountId, creativeId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_WatchCreativeRequest *)object
                      accountId:(NSString *)accountId
                     creativeId:(NSString *)creativeId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"creativeId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/creatives/{creativeId}:watch";
  GTLRAdExchangeBuyerIIQuery_AccountsCreativesWatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.creativeId = creativeId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Empty class];
  query.loggingName = @"adexchangebuyer2.accounts.creatives.watch";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsFinalizedProposalsList

@dynamic accountId, filter, filterSyntax, pageSize, pageToken;

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/finalizedProposals";
  GTLRAdExchangeBuyerIIQuery_AccountsFinalizedProposalsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListProposalsResponse class];
  query.loggingName = @"adexchangebuyer2.accounts.finalizedProposals.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsProductsGet

@dynamic accountId, productId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                         productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"accountId", @"productId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/products/{productId}";
  GTLRAdExchangeBuyerIIQuery_AccountsProductsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.productId = productId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Product class];
  query.loggingName = @"adexchangebuyer2.accounts.products.get";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsProductsList

@dynamic accountId, filter, pageSize, pageToken;

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/products";
  GTLRAdExchangeBuyerIIQuery_AccountsProductsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListProductsResponse class];
  query.loggingName = @"adexchangebuyer2.accounts.products.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsProposalsAccept

@dynamic accountId, proposalId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_AcceptProposalRequest *)object
                      accountId:(NSString *)accountId
                     proposalId:(NSString *)proposalId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"proposalId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/proposals/{proposalId}:accept";
  GTLRAdExchangeBuyerIIQuery_AccountsProposalsAccept *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.proposalId = proposalId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Proposal class];
  query.loggingName = @"adexchangebuyer2.accounts.proposals.accept";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsProposalsAddNote

@dynamic accountId, proposalId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_AddNoteRequest *)object
                      accountId:(NSString *)accountId
                     proposalId:(NSString *)proposalId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"proposalId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/proposals/{proposalId}:addNote";
  GTLRAdExchangeBuyerIIQuery_AccountsProposalsAddNote *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.proposalId = proposalId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Note class];
  query.loggingName = @"adexchangebuyer2.accounts.proposals.addNote";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsProposalsCancelNegotiation

@dynamic accountId, proposalId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_CancelNegotiationRequest *)object
                      accountId:(NSString *)accountId
                     proposalId:(NSString *)proposalId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"proposalId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/proposals/{proposalId}:cancelNegotiation";
  GTLRAdExchangeBuyerIIQuery_AccountsProposalsCancelNegotiation *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.proposalId = proposalId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Proposal class];
  query.loggingName = @"adexchangebuyer2.accounts.proposals.cancelNegotiation";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsProposalsCompleteSetup

@dynamic accountId, proposalId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_CompleteSetupRequest *)object
                      accountId:(NSString *)accountId
                     proposalId:(NSString *)proposalId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"proposalId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/proposals/{proposalId}:completeSetup";
  GTLRAdExchangeBuyerIIQuery_AccountsProposalsCompleteSetup *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.proposalId = proposalId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Proposal class];
  query.loggingName = @"adexchangebuyer2.accounts.proposals.completeSetup";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsProposalsCreate

@dynamic accountId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_Proposal *)object
                      accountId:(NSString *)accountId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/proposals";
  GTLRAdExchangeBuyerIIQuery_AccountsProposalsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Proposal class];
  query.loggingName = @"adexchangebuyer2.accounts.proposals.create";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsProposalsGet

@dynamic accountId, proposalId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                        proposalId:(NSString *)proposalId {
  NSArray *pathParams = @[
    @"accountId", @"proposalId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/proposals/{proposalId}";
  GTLRAdExchangeBuyerIIQuery_AccountsProposalsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.proposalId = proposalId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Proposal class];
  query.loggingName = @"adexchangebuyer2.accounts.proposals.get";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsProposalsList

@dynamic accountId, filter, filterSyntax, pageSize, pageToken;

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/proposals";
  GTLRAdExchangeBuyerIIQuery_AccountsProposalsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListProposalsResponse class];
  query.loggingName = @"adexchangebuyer2.accounts.proposals.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsProposalsPause

@dynamic accountId, proposalId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_PauseProposalRequest *)object
                      accountId:(NSString *)accountId
                     proposalId:(NSString *)proposalId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"proposalId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/proposals/{proposalId}:pause";
  GTLRAdExchangeBuyerIIQuery_AccountsProposalsPause *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.proposalId = proposalId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Proposal class];
  query.loggingName = @"adexchangebuyer2.accounts.proposals.pause";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsProposalsResume

@dynamic accountId, proposalId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_ResumeProposalRequest *)object
                      accountId:(NSString *)accountId
                     proposalId:(NSString *)proposalId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"proposalId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/proposals/{proposalId}:resume";
  GTLRAdExchangeBuyerIIQuery_AccountsProposalsResume *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.proposalId = proposalId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Proposal class];
  query.loggingName = @"adexchangebuyer2.accounts.proposals.resume";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsProposalsUpdate

@dynamic accountId, proposalId;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_Proposal *)object
                      accountId:(NSString *)accountId
                     proposalId:(NSString *)proposalId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"proposalId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/proposals/{proposalId}";
  GTLRAdExchangeBuyerIIQuery_AccountsProposalsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.proposalId = proposalId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Proposal class];
  query.loggingName = @"adexchangebuyer2.accounts.proposals.update";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsPublisherProfilesGet

@dynamic accountId, publisherProfileId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                publisherProfileId:(NSString *)publisherProfileId {
  NSArray *pathParams = @[
    @"accountId", @"publisherProfileId"
  ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/publisherProfiles/{publisherProfileId}";
  GTLRAdExchangeBuyerIIQuery_AccountsPublisherProfilesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.publisherProfileId = publisherProfileId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_PublisherProfile class];
  query.loggingName = @"adexchangebuyer2.accounts.publisherProfiles.get";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_AccountsPublisherProfilesList

@dynamic accountId, pageSize, pageToken;

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"v2beta1/accounts/{accountId}/publisherProfiles";
  GTLRAdExchangeBuyerIIQuery_AccountsPublisherProfilesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListPublisherProfilesResponse class];
  query.loggingName = @"adexchangebuyer2.accounts.publisherProfiles.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersAccountsCreativesDelete

@dynamic creativeId, ownerName;

+ (instancetype)queryWithOwnerName:(NSString *)ownerName
                        creativeId:(NSString *)creativeId {
  NSArray *pathParams = @[
    @"creativeId", @"ownerName"
  ];
  NSString *pathURITemplate = @"v2beta1/{+ownerName}/creatives/{creativeId}";
  GTLRAdExchangeBuyerIIQuery_BiddersAccountsCreativesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.ownerName = ownerName;
  query.creativeId = creativeId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Empty class];
  query.loggingName = @"adexchangebuyer2.bidders.accounts.creatives.delete";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsBidMetricsList

@dynamic filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName {
  NSArray *pathParams = @[ @"filterSetName" ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/bidMetrics";
  GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsBidMetricsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListBidMetricsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.accounts.filterSets.bidMetrics.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsBidResponseErrorsList

@dynamic filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName {
  NSArray *pathParams = @[ @"filterSetName" ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/bidResponseErrors";
  GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsBidResponseErrorsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListBidResponseErrorsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.accounts.filterSets.bidResponseErrors.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsBidResponsesWithoutBidsList

@dynamic filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName {
  NSArray *pathParams = @[ @"filterSetName" ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/bidResponsesWithoutBids";
  GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsBidResponsesWithoutBidsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListBidResponsesWithoutBidsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.accounts.filterSets.bidResponsesWithoutBids.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsCreate

@dynamic isTransient, ownerName;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_FilterSet *)object
                      ownerName:(NSString *)ownerName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"ownerName" ];
  NSString *pathURITemplate = @"v2beta1/{+ownerName}/filterSets";
  GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.ownerName = ownerName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_FilterSet class];
  query.loggingName = @"adexchangebuyer2.bidders.accounts.filterSets.create";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2beta1/{+name}";
  GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Empty class];
  query.loggingName = @"adexchangebuyer2.bidders.accounts.filterSets.delete";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsFilteredBidRequestsList

@dynamic filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName {
  NSArray *pathParams = @[ @"filterSetName" ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/filteredBidRequests";
  GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsFilteredBidRequestsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListFilteredBidRequestsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.accounts.filterSets.filteredBidRequests.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsFilteredBidsCreativesList

@dynamic creativeStatusId, filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName
                      creativeStatusId:(NSInteger)creativeStatusId {
  NSArray *pathParams = @[
    @"creativeStatusId", @"filterSetName"
  ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/creatives";
  GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsFilteredBidsCreativesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.creativeStatusId = creativeStatusId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListCreativeStatusBreakdownByCreativeResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.accounts.filterSets.filteredBids.creatives.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsFilteredBidsDetailsList

@dynamic creativeStatusId, filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName
                      creativeStatusId:(NSInteger)creativeStatusId {
  NSArray *pathParams = @[
    @"creativeStatusId", @"filterSetName"
  ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/details";
  GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsFilteredBidsDetailsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.creativeStatusId = creativeStatusId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListCreativeStatusBreakdownByDetailResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.accounts.filterSets.filteredBids.details.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsFilteredBidsList

@dynamic filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName {
  NSArray *pathParams = @[ @"filterSetName" ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/filteredBids";
  GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsFilteredBidsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListFilteredBidsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.accounts.filterSets.filteredBids.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2beta1/{+name}";
  GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_FilterSet class];
  query.loggingName = @"adexchangebuyer2.bidders.accounts.filterSets.get";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsImpressionMetricsList

@dynamic filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName {
  NSArray *pathParams = @[ @"filterSetName" ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/impressionMetrics";
  GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsImpressionMetricsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListImpressionMetricsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.accounts.filterSets.impressionMetrics.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsList

@dynamic ownerName, pageSize, pageToken;

+ (instancetype)queryWithOwnerName:(NSString *)ownerName {
  NSArray *pathParams = @[ @"ownerName" ];
  NSString *pathURITemplate = @"v2beta1/{+ownerName}/filterSets";
  GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.ownerName = ownerName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListFilterSetsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.accounts.filterSets.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsLosingBidsList

@dynamic filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName {
  NSArray *pathParams = @[ @"filterSetName" ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/losingBids";
  GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsLosingBidsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListLosingBidsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.accounts.filterSets.losingBids.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsNonBillableWinningBidsList

@dynamic filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName {
  NSArray *pathParams = @[ @"filterSetName" ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/nonBillableWinningBids";
  GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsNonBillableWinningBidsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListNonBillableWinningBidsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.accounts.filterSets.nonBillableWinningBids.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsBidMetricsList

@dynamic filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName {
  NSArray *pathParams = @[ @"filterSetName" ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/bidMetrics";
  GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsBidMetricsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListBidMetricsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.filterSets.bidMetrics.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsBidResponseErrorsList

@dynamic filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName {
  NSArray *pathParams = @[ @"filterSetName" ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/bidResponseErrors";
  GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsBidResponseErrorsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListBidResponseErrorsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.filterSets.bidResponseErrors.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsBidResponsesWithoutBidsList

@dynamic filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName {
  NSArray *pathParams = @[ @"filterSetName" ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/bidResponsesWithoutBids";
  GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsBidResponsesWithoutBidsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListBidResponsesWithoutBidsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.filterSets.bidResponsesWithoutBids.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsCreate

@dynamic isTransient, ownerName;

+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_FilterSet *)object
                      ownerName:(NSString *)ownerName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"ownerName" ];
  NSString *pathURITemplate = @"v2beta1/{+ownerName}/filterSets";
  GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.ownerName = ownerName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_FilterSet class];
  query.loggingName = @"adexchangebuyer2.bidders.filterSets.create";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2beta1/{+name}";
  GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_Empty class];
  query.loggingName = @"adexchangebuyer2.bidders.filterSets.delete";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsFilteredBidRequestsList

@dynamic filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName {
  NSArray *pathParams = @[ @"filterSetName" ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/filteredBidRequests";
  GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsFilteredBidRequestsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListFilteredBidRequestsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.filterSets.filteredBidRequests.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsFilteredBidsCreativesList

@dynamic creativeStatusId, filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName
                      creativeStatusId:(NSInteger)creativeStatusId {
  NSArray *pathParams = @[
    @"creativeStatusId", @"filterSetName"
  ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/creatives";
  GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsFilteredBidsCreativesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.creativeStatusId = creativeStatusId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListCreativeStatusBreakdownByCreativeResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.filterSets.filteredBids.creatives.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsFilteredBidsDetailsList

@dynamic creativeStatusId, filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName
                      creativeStatusId:(NSInteger)creativeStatusId {
  NSArray *pathParams = @[
    @"creativeStatusId", @"filterSetName"
  ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/details";
  GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsFilteredBidsDetailsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.creativeStatusId = creativeStatusId;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListCreativeStatusBreakdownByDetailResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.filterSets.filteredBids.details.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsFilteredBidsList

@dynamic filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName {
  NSArray *pathParams = @[ @"filterSetName" ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/filteredBids";
  GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsFilteredBidsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListFilteredBidsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.filterSets.filteredBids.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2beta1/{+name}";
  GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_FilterSet class];
  query.loggingName = @"adexchangebuyer2.bidders.filterSets.get";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsImpressionMetricsList

@dynamic filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName {
  NSArray *pathParams = @[ @"filterSetName" ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/impressionMetrics";
  GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsImpressionMetricsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListImpressionMetricsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.filterSets.impressionMetrics.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsList

@dynamic ownerName, pageSize, pageToken;

+ (instancetype)queryWithOwnerName:(NSString *)ownerName {
  NSArray *pathParams = @[ @"ownerName" ];
  NSString *pathURITemplate = @"v2beta1/{+ownerName}/filterSets";
  GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.ownerName = ownerName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListFilterSetsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.filterSets.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsLosingBidsList

@dynamic filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName {
  NSArray *pathParams = @[ @"filterSetName" ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/losingBids";
  GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsLosingBidsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListLosingBidsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.filterSets.losingBids.list";
  return query;
}

@end

@implementation GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsNonBillableWinningBidsList

@dynamic filterSetName, pageSize, pageToken;

+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName {
  NSArray *pathParams = @[ @"filterSetName" ];
  NSString *pathURITemplate = @"v2beta1/{+filterSetName}/nonBillableWinningBids";
  GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsNonBillableWinningBidsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.filterSetName = filterSetName;
  query.expectedObjectClass = [GTLRAdExchangeBuyerII_ListNonBillableWinningBidsResponse class];
  query.loggingName = @"adexchangebuyer2.bidders.filterSets.nonBillableWinningBids.list";
  return query;
}

@end
