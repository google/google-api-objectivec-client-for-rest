// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Vision API (vision/v1)
// Description:
//   Integrates Google Vision features, including image labeling, face, logo,
//   and landmark detection, optical character recognition (OCR), and detection
//   of explicit content, into applications.
// Documentation:
//   https://cloud.google.com/vision/

#import "GTLRVisionQuery.h"

#import "GTLRVisionObjects.h"

@implementation GTLRVisionQuery

@dynamic fields;

@end

@implementation GTLRVisionQuery_FilesAsyncBatchAnnotate

+ (instancetype)queryWithObject:(GTLRVision_AsyncBatchAnnotateFilesRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/files:asyncBatchAnnotate";
  GTLRVisionQuery_FilesAsyncBatchAnnotate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRVision_Operation class];
  query.loggingName = @"vision.files.asyncBatchAnnotate";
  return query;
}

@end

@implementation GTLRVisionQuery_ImagesAnnotate

+ (instancetype)queryWithObject:(GTLRVision_BatchAnnotateImagesRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/images:annotate";
  GTLRVisionQuery_ImagesAnnotate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRVision_BatchAnnotateImagesResponse class];
  query.loggingName = @"vision.images.annotate";
  return query;
}

@end

@implementation GTLRVisionQuery_LocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVisionQuery_LocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVision_Operation class];
  query.loggingName = @"vision.locations.operations.get";
  return query;
}

@end

@implementation GTLRVisionQuery_OperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRVision_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRVisionQuery_OperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRVision_Empty class];
  query.loggingName = @"vision.operations.cancel";
  return query;
}

@end

@implementation GTLRVisionQuery_OperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVisionQuery_OperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVision_Empty class];
  query.loggingName = @"vision.operations.delete";
  return query;
}

@end

@implementation GTLRVisionQuery_OperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVisionQuery_OperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVision_Operation class];
  query.loggingName = @"vision.operations.get";
  return query;
}

@end

@implementation GTLRVisionQuery_OperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVisionQuery_OperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVision_ListOperationsResponse class];
  query.loggingName = @"vision.operations.list";
  return query;
}

@end
