// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Vision API (vision/v1)
// Description:
//   Integrates Google Vision features, including image labeling, face, logo,
//   and landmark detection, optical character recognition (OCR), and detection
//   of explicit content, into applications.
// Documentation:
//   https://cloud.google.com/vision/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRVision_AddProductToProductSetRequest;
@class GTLRVision_AsyncBatchAnnotateFilesRequest;
@class GTLRVision_AsyncBatchAnnotateImagesRequest;
@class GTLRVision_BatchAnnotateFilesRequest;
@class GTLRVision_BatchAnnotateImagesRequest;
@class GTLRVision_CancelOperationRequest;
@class GTLRVision_ImportProductSetsRequest;
@class GTLRVision_Product;
@class GTLRVision_ProductSet;
@class GTLRVision_PurgeProductsRequest;
@class GTLRVision_ReferenceImage;
@class GTLRVision_RemoveProductFromProductSetRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Vision query classes.
 */
@interface GTLRVisionQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Service that performs image detection and annotation for a batch of files.
 *  Now only "application/pdf", "image/tiff" and "image/gif" are supported.
 *  This service will extract at most 5 (customers can specify which 5 in
 *  AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each
 *  file provided and perform detection and annotation for each image
 *  extracted.
 *
 *  Method: vision.files.annotate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_FilesAnnotate : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForFilesAnnotateWithObject:]

/**
 *  Fetches a @c GTLRVision_BatchAnnotateFilesResponse.
 *
 *  Service that performs image detection and annotation for a batch of files.
 *  Now only "application/pdf", "image/tiff" and "image/gif" are supported.
 *  This service will extract at most 5 (customers can specify which 5 in
 *  AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each
 *  file provided and perform detection and annotation for each image
 *  extracted.
 *
 *  @param object The @c GTLRVision_BatchAnnotateFilesRequest to include in the
 *    query.
 *
 *  @return GTLRVisionQuery_FilesAnnotate
 */
+ (instancetype)queryWithObject:(GTLRVision_BatchAnnotateFilesRequest *)object;

@end

/**
 *  Run asynchronous image detection and annotation for a list of generic
 *  files, such as PDF files, which may contain multiple pages and multiple
 *  images per page. Progress and results can be retrieved through the
 *  `google.longrunning.Operations` interface.
 *  `Operation.metadata` contains `OperationMetadata` (metadata).
 *  `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).
 *
 *  Method: vision.files.asyncBatchAnnotate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_FilesAsyncBatchAnnotate : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForFilesAsyncBatchAnnotateWithObject:]

/**
 *  Fetches a @c GTLRVision_Operation.
 *
 *  Run asynchronous image detection and annotation for a list of generic
 *  files, such as PDF files, which may contain multiple pages and multiple
 *  images per page. Progress and results can be retrieved through the
 *  `google.longrunning.Operations` interface.
 *  `Operation.metadata` contains `OperationMetadata` (metadata).
 *  `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).
 *
 *  @param object The @c GTLRVision_AsyncBatchAnnotateFilesRequest to include in
 *    the query.
 *
 *  @return GTLRVisionQuery_FilesAsyncBatchAnnotate
 */
+ (instancetype)queryWithObject:(GTLRVision_AsyncBatchAnnotateFilesRequest *)object;

@end

/**
 *  Run image detection and annotation for a batch of images.
 *
 *  Method: vision.images.annotate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ImagesAnnotate : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForImagesAnnotateWithObject:]

/**
 *  Fetches a @c GTLRVision_BatchAnnotateImagesResponse.
 *
 *  Run image detection and annotation for a batch of images.
 *
 *  @param object The @c GTLRVision_BatchAnnotateImagesRequest to include in the
 *    query.
 *
 *  @return GTLRVisionQuery_ImagesAnnotate
 */
+ (instancetype)queryWithObject:(GTLRVision_BatchAnnotateImagesRequest *)object;

@end

/**
 *  Run asynchronous image detection and annotation for a list of images.
 *  Progress and results can be retrieved through the
 *  `google.longrunning.Operations` interface.
 *  `Operation.metadata` contains `OperationMetadata` (metadata).
 *  `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results).
 *  This service will write image annotation outputs to json files in customer
 *  GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
 *
 *  Method: vision.images.asyncBatchAnnotate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ImagesAsyncBatchAnnotate : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForImagesAsyncBatchAnnotateWithObject:]

/**
 *  Fetches a @c GTLRVision_Operation.
 *
 *  Run asynchronous image detection and annotation for a list of images.
 *  Progress and results can be retrieved through the
 *  `google.longrunning.Operations` interface.
 *  `Operation.metadata` contains `OperationMetadata` (metadata).
 *  `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results).
 *  This service will write image annotation outputs to json files in customer
 *  GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
 *
 *  @param object The @c GTLRVision_AsyncBatchAnnotateImagesRequest to include
 *    in the query.
 *
 *  @return GTLRVisionQuery_ImagesAsyncBatchAnnotate
 */
+ (instancetype)queryWithObject:(GTLRVision_AsyncBatchAnnotateImagesRequest *)object;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: vision.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_LocationsOperationsGet : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForLocationsOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRVision_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRVisionQuery_LocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not
 *  guaranteed. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use
 *  Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation,
 *  the operation is not deleted; instead, it becomes an operation with
 *  an Operation.error value with a google.rpc.Status.code of 1,
 *  corresponding to `Code.CANCELLED`.
 *
 *  Method: vision.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_OperationsCancel : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForOperationsCancelWithObject:name:]

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRVision_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not
 *  guaranteed. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use
 *  Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation,
 *  the operation is not deleted; instead, it becomes an operation with
 *  an Operation.error value with a google.rpc.Status.code of 1,
 *  corresponding to `Code.CANCELLED`.
 *
 *  @param object The @c GTLRVision_CancelOperationRequest to include in the
 *    query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRVisionQuery_OperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRVision_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: vision.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_OperationsDelete : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForOperationsDeleteWithname:]

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRVision_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRVisionQuery_OperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: vision.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_OperationsGet : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRVision_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRVisionQuery_OperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *  NOTE: the `name` binding allows API services to override the binding
 *  to use different resource name schemes, such as `users/ * /operations`. To
 *  override the binding, API services can add a binding such as
 *  `"/v1/{name=users/ *}/operations"` to their service configuration.
 *  For backwards compatibility, the default name includes the operations
 *  collection id, however overriding users must ensure the name binding
 *  is the parent resource, without the operations collection id.
 *
 *  Method: vision.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_OperationsList : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForOperationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRVision_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *  NOTE: the `name` binding allows API services to override the binding
 *  to use different resource name schemes, such as `users/ * /operations`. To
 *  override the binding, API services can add a binding such as
 *  `"/v1/{name=users/ *}/operations"` to their service configuration.
 *  For backwards compatibility, the default name includes the operations
 *  collection id, however overriding users must ensure the name binding
 *  is the parent resource, without the operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRVisionQuery_OperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Service that performs image detection and annotation for a batch of files.
 *  Now only "application/pdf", "image/tiff" and "image/gif" are supported.
 *  This service will extract at most 5 (customers can specify which 5 in
 *  AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each
 *  file provided and perform detection and annotation for each image
 *  extracted.
 *
 *  Method: vision.projects.files.annotate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsFilesAnnotate : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsFilesAnnotateWithObject:parent:]

/**
 *  Optional. Target project and location to make a call.
 *  Format: `projects/{project-id}/locations/{location-id}`.
 *  If no parent is specified, a region will be chosen automatically.
 *  Supported location-ids:
 *  `us`: USA country only,
 *  `asia`: East asia areas, like Japan, Taiwan,
 *  `eu`: The European Union.
 *  Example: `projects/project-A/locations/eu`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRVision_BatchAnnotateFilesResponse.
 *
 *  Service that performs image detection and annotation for a batch of files.
 *  Now only "application/pdf", "image/tiff" and "image/gif" are supported.
 *  This service will extract at most 5 (customers can specify which 5 in
 *  AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each
 *  file provided and perform detection and annotation for each image
 *  extracted.
 *
 *  @param object The @c GTLRVision_BatchAnnotateFilesRequest to include in the
 *    query.
 *  @param parent Optional. Target project and location to make a call.
 *    Format: `projects/{project-id}/locations/{location-id}`.
 *    If no parent is specified, a region will be chosen automatically.
 *    Supported location-ids:
 *    `us`: USA country only,
 *    `asia`: East asia areas, like Japan, Taiwan,
 *    `eu`: The European Union.
 *    Example: `projects/project-A/locations/eu`.
 *
 *  @return GTLRVisionQuery_ProjectsFilesAnnotate
 */
+ (instancetype)queryWithObject:(GTLRVision_BatchAnnotateFilesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Run asynchronous image detection and annotation for a list of generic
 *  files, such as PDF files, which may contain multiple pages and multiple
 *  images per page. Progress and results can be retrieved through the
 *  `google.longrunning.Operations` interface.
 *  `Operation.metadata` contains `OperationMetadata` (metadata).
 *  `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).
 *
 *  Method: vision.projects.files.asyncBatchAnnotate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsFilesAsyncBatchAnnotate : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsFilesAsyncBatchAnnotateWithObject:parent:]

/**
 *  Optional. Target project and location to make a call.
 *  Format: `projects/{project-id}/locations/{location-id}`.
 *  If no parent is specified, a region will be chosen automatically.
 *  Supported location-ids:
 *  `us`: USA country only,
 *  `asia`: East asia areas, like Japan, Taiwan,
 *  `eu`: The European Union.
 *  Example: `projects/project-A/locations/eu`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRVision_Operation.
 *
 *  Run asynchronous image detection and annotation for a list of generic
 *  files, such as PDF files, which may contain multiple pages and multiple
 *  images per page. Progress and results can be retrieved through the
 *  `google.longrunning.Operations` interface.
 *  `Operation.metadata` contains `OperationMetadata` (metadata).
 *  `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).
 *
 *  @param object The @c GTLRVision_AsyncBatchAnnotateFilesRequest to include in
 *    the query.
 *  @param parent Optional. Target project and location to make a call.
 *    Format: `projects/{project-id}/locations/{location-id}`.
 *    If no parent is specified, a region will be chosen automatically.
 *    Supported location-ids:
 *    `us`: USA country only,
 *    `asia`: East asia areas, like Japan, Taiwan,
 *    `eu`: The European Union.
 *    Example: `projects/project-A/locations/eu`.
 *
 *  @return GTLRVisionQuery_ProjectsFilesAsyncBatchAnnotate
 */
+ (instancetype)queryWithObject:(GTLRVision_AsyncBatchAnnotateFilesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Run image detection and annotation for a batch of images.
 *
 *  Method: vision.projects.images.annotate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsImagesAnnotate : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsImagesAnnotateWithObject:parent:]

/**
 *  Optional. Target project and location to make a call.
 *  Format: `projects/{project-id}/locations/{location-id}`.
 *  If no parent is specified, a region will be chosen automatically.
 *  Supported location-ids:
 *  `us`: USA country only,
 *  `asia`: East asia areas, like Japan, Taiwan,
 *  `eu`: The European Union.
 *  Example: `projects/project-A/locations/eu`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRVision_BatchAnnotateImagesResponse.
 *
 *  Run image detection and annotation for a batch of images.
 *
 *  @param object The @c GTLRVision_BatchAnnotateImagesRequest to include in the
 *    query.
 *  @param parent Optional. Target project and location to make a call.
 *    Format: `projects/{project-id}/locations/{location-id}`.
 *    If no parent is specified, a region will be chosen automatically.
 *    Supported location-ids:
 *    `us`: USA country only,
 *    `asia`: East asia areas, like Japan, Taiwan,
 *    `eu`: The European Union.
 *    Example: `projects/project-A/locations/eu`.
 *
 *  @return GTLRVisionQuery_ProjectsImagesAnnotate
 */
+ (instancetype)queryWithObject:(GTLRVision_BatchAnnotateImagesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Run asynchronous image detection and annotation for a list of images.
 *  Progress and results can be retrieved through the
 *  `google.longrunning.Operations` interface.
 *  `Operation.metadata` contains `OperationMetadata` (metadata).
 *  `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results).
 *  This service will write image annotation outputs to json files in customer
 *  GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
 *
 *  Method: vision.projects.images.asyncBatchAnnotate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsImagesAsyncBatchAnnotate : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsImagesAsyncBatchAnnotateWithObject:parent:]

/**
 *  Optional. Target project and location to make a call.
 *  Format: `projects/{project-id}/locations/{location-id}`.
 *  If no parent is specified, a region will be chosen automatically.
 *  Supported location-ids:
 *  `us`: USA country only,
 *  `asia`: East asia areas, like Japan, Taiwan,
 *  `eu`: The European Union.
 *  Example: `projects/project-A/locations/eu`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRVision_Operation.
 *
 *  Run asynchronous image detection and annotation for a list of images.
 *  Progress and results can be retrieved through the
 *  `google.longrunning.Operations` interface.
 *  `Operation.metadata` contains `OperationMetadata` (metadata).
 *  `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results).
 *  This service will write image annotation outputs to json files in customer
 *  GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
 *
 *  @param object The @c GTLRVision_AsyncBatchAnnotateImagesRequest to include
 *    in the query.
 *  @param parent Optional. Target project and location to make a call.
 *    Format: `projects/{project-id}/locations/{location-id}`.
 *    If no parent is specified, a region will be chosen automatically.
 *    Supported location-ids:
 *    `us`: USA country only,
 *    `asia`: East asia areas, like Japan, Taiwan,
 *    `eu`: The European Union.
 *    Example: `projects/project-A/locations/eu`.
 *
 *  @return GTLRVisionQuery_ProjectsImagesAsyncBatchAnnotate
 */
+ (instancetype)queryWithObject:(GTLRVision_AsyncBatchAnnotateImagesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Service that performs image detection and annotation for a batch of files.
 *  Now only "application/pdf", "image/tiff" and "image/gif" are supported.
 *  This service will extract at most 5 (customers can specify which 5 in
 *  AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each
 *  file provided and perform detection and annotation for each image
 *  extracted.
 *
 *  Method: vision.projects.locations.files.annotate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsFilesAnnotate : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsFilesAnnotateWithObject:parent:]

/**
 *  Optional. Target project and location to make a call.
 *  Format: `projects/{project-id}/locations/{location-id}`.
 *  If no parent is specified, a region will be chosen automatically.
 *  Supported location-ids:
 *  `us`: USA country only,
 *  `asia`: East asia areas, like Japan, Taiwan,
 *  `eu`: The European Union.
 *  Example: `projects/project-A/locations/eu`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRVision_BatchAnnotateFilesResponse.
 *
 *  Service that performs image detection and annotation for a batch of files.
 *  Now only "application/pdf", "image/tiff" and "image/gif" are supported.
 *  This service will extract at most 5 (customers can specify which 5 in
 *  AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each
 *  file provided and perform detection and annotation for each image
 *  extracted.
 *
 *  @param object The @c GTLRVision_BatchAnnotateFilesRequest to include in the
 *    query.
 *  @param parent Optional. Target project and location to make a call.
 *    Format: `projects/{project-id}/locations/{location-id}`.
 *    If no parent is specified, a region will be chosen automatically.
 *    Supported location-ids:
 *    `us`: USA country only,
 *    `asia`: East asia areas, like Japan, Taiwan,
 *    `eu`: The European Union.
 *    Example: `projects/project-A/locations/eu`.
 *
 *  @return GTLRVisionQuery_ProjectsLocationsFilesAnnotate
 */
+ (instancetype)queryWithObject:(GTLRVision_BatchAnnotateFilesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Run asynchronous image detection and annotation for a list of generic
 *  files, such as PDF files, which may contain multiple pages and multiple
 *  images per page. Progress and results can be retrieved through the
 *  `google.longrunning.Operations` interface.
 *  `Operation.metadata` contains `OperationMetadata` (metadata).
 *  `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).
 *
 *  Method: vision.projects.locations.files.asyncBatchAnnotate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsFilesAsyncBatchAnnotate : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsFilesAsyncBatchAnnotateWithObject:parent:]

/**
 *  Optional. Target project and location to make a call.
 *  Format: `projects/{project-id}/locations/{location-id}`.
 *  If no parent is specified, a region will be chosen automatically.
 *  Supported location-ids:
 *  `us`: USA country only,
 *  `asia`: East asia areas, like Japan, Taiwan,
 *  `eu`: The European Union.
 *  Example: `projects/project-A/locations/eu`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRVision_Operation.
 *
 *  Run asynchronous image detection and annotation for a list of generic
 *  files, such as PDF files, which may contain multiple pages and multiple
 *  images per page. Progress and results can be retrieved through the
 *  `google.longrunning.Operations` interface.
 *  `Operation.metadata` contains `OperationMetadata` (metadata).
 *  `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).
 *
 *  @param object The @c GTLRVision_AsyncBatchAnnotateFilesRequest to include in
 *    the query.
 *  @param parent Optional. Target project and location to make a call.
 *    Format: `projects/{project-id}/locations/{location-id}`.
 *    If no parent is specified, a region will be chosen automatically.
 *    Supported location-ids:
 *    `us`: USA country only,
 *    `asia`: East asia areas, like Japan, Taiwan,
 *    `eu`: The European Union.
 *    Example: `projects/project-A/locations/eu`.
 *
 *  @return GTLRVisionQuery_ProjectsLocationsFilesAsyncBatchAnnotate
 */
+ (instancetype)queryWithObject:(GTLRVision_AsyncBatchAnnotateFilesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Run image detection and annotation for a batch of images.
 *
 *  Method: vision.projects.locations.images.annotate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsImagesAnnotate : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsImagesAnnotateWithObject:parent:]

/**
 *  Optional. Target project and location to make a call.
 *  Format: `projects/{project-id}/locations/{location-id}`.
 *  If no parent is specified, a region will be chosen automatically.
 *  Supported location-ids:
 *  `us`: USA country only,
 *  `asia`: East asia areas, like Japan, Taiwan,
 *  `eu`: The European Union.
 *  Example: `projects/project-A/locations/eu`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRVision_BatchAnnotateImagesResponse.
 *
 *  Run image detection and annotation for a batch of images.
 *
 *  @param object The @c GTLRVision_BatchAnnotateImagesRequest to include in the
 *    query.
 *  @param parent Optional. Target project and location to make a call.
 *    Format: `projects/{project-id}/locations/{location-id}`.
 *    If no parent is specified, a region will be chosen automatically.
 *    Supported location-ids:
 *    `us`: USA country only,
 *    `asia`: East asia areas, like Japan, Taiwan,
 *    `eu`: The European Union.
 *    Example: `projects/project-A/locations/eu`.
 *
 *  @return GTLRVisionQuery_ProjectsLocationsImagesAnnotate
 */
+ (instancetype)queryWithObject:(GTLRVision_BatchAnnotateImagesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Run asynchronous image detection and annotation for a list of images.
 *  Progress and results can be retrieved through the
 *  `google.longrunning.Operations` interface.
 *  `Operation.metadata` contains `OperationMetadata` (metadata).
 *  `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results).
 *  This service will write image annotation outputs to json files in customer
 *  GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
 *
 *  Method: vision.projects.locations.images.asyncBatchAnnotate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsImagesAsyncBatchAnnotate : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsImagesAsyncBatchAnnotateWithObject:parent:]

/**
 *  Optional. Target project and location to make a call.
 *  Format: `projects/{project-id}/locations/{location-id}`.
 *  If no parent is specified, a region will be chosen automatically.
 *  Supported location-ids:
 *  `us`: USA country only,
 *  `asia`: East asia areas, like Japan, Taiwan,
 *  `eu`: The European Union.
 *  Example: `projects/project-A/locations/eu`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRVision_Operation.
 *
 *  Run asynchronous image detection and annotation for a list of images.
 *  Progress and results can be retrieved through the
 *  `google.longrunning.Operations` interface.
 *  `Operation.metadata` contains `OperationMetadata` (metadata).
 *  `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results).
 *  This service will write image annotation outputs to json files in customer
 *  GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
 *
 *  @param object The @c GTLRVision_AsyncBatchAnnotateImagesRequest to include
 *    in the query.
 *  @param parent Optional. Target project and location to make a call.
 *    Format: `projects/{project-id}/locations/{location-id}`.
 *    If no parent is specified, a region will be chosen automatically.
 *    Supported location-ids:
 *    `us`: USA country only,
 *    `asia`: East asia areas, like Japan, Taiwan,
 *    `eu`: The European Union.
 *    Example: `projects/project-A/locations/eu`.
 *
 *  @return GTLRVisionQuery_ProjectsLocationsImagesAsyncBatchAnnotate
 */
+ (instancetype)queryWithObject:(GTLRVision_AsyncBatchAnnotateImagesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: vision.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsOperationsGet : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRVision_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRVisionQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates and returns a new product resource.
 *  Possible errors:
 *  * Returns INVALID_ARGUMENT if display_name is missing or longer than 4096
 *  characters.
 *  * Returns INVALID_ARGUMENT if description is longer than 4096 characters.
 *  * Returns INVALID_ARGUMENT if product_category is missing or invalid.
 *
 *  Method: vision.projects.locations.products.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductsCreate : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductsCreateWithObject:parent:]

/**
 *  Required. The project in which the Product should be created.
 *  Format is
 *  `projects/PROJECT_ID/locations/LOC_ID`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  A user-supplied resource id for this Product. If set, the server will
 *  attempt to use this value as the resource id. If it is already in use, an
 *  error is returned with code ALREADY_EXISTS. Must be at most 128 characters
 *  long. It cannot contain the character `/`.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRVision_Product.
 *
 *  Creates and returns a new product resource.
 *  Possible errors:
 *  * Returns INVALID_ARGUMENT if display_name is missing or longer than 4096
 *  characters.
 *  * Returns INVALID_ARGUMENT if description is longer than 4096 characters.
 *  * Returns INVALID_ARGUMENT if product_category is missing or invalid.
 *
 *  @param object The @c GTLRVision_Product to include in the query.
 *  @param parent Required. The project in which the Product should be created.
 *    Format is
 *    `projects/PROJECT_ID/locations/LOC_ID`.
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductsCreate
 */
+ (instancetype)queryWithObject:(GTLRVision_Product *)object
                         parent:(NSString *)parent;

@end

/**
 *  Permanently deletes a product and its reference images.
 *  Metadata of the product and all its images will be deleted right away, but
 *  search queries against ProductSets containing the product may still work
 *  until all related caches are refreshed.
 *
 *  Method: vision.projects.locations.products.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductsDelete : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductsDeleteWithname:]

/**
 *  Required. Resource name of product to delete.
 *  Format is:
 *  `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRVision_Empty.
 *
 *  Permanently deletes a product and its reference images.
 *  Metadata of the product and all its images will be deleted right away, but
 *  search queries against ProductSets containing the product may still work
 *  until all related caches are refreshed.
 *
 *  @param name Required. Resource name of product to delete.
 *    Format is:
 *    `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Adds a Product to the specified ProductSet. If the Product is already
 *  present, no change is made.
 *  One Product can be added to at most 100 ProductSets.
 *  Possible errors:
 *  * Returns NOT_FOUND if the Product or the ProductSet doesn't exist.
 *
 *  Method: vision.projects.locations.productSets.addProduct
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductSetsAddProduct : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductSetsAddProductWithObject:name:]

/**
 *  Required. The resource name for the ProductSet to modify.
 *  Format is:
 *  `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRVision_Empty.
 *
 *  Adds a Product to the specified ProductSet. If the Product is already
 *  present, no change is made.
 *  One Product can be added to at most 100 ProductSets.
 *  Possible errors:
 *  * Returns NOT_FOUND if the Product or the ProductSet doesn't exist.
 *
 *  @param object The @c GTLRVision_AddProductToProductSetRequest to include in
 *    the query.
 *  @param name Required. The resource name for the ProductSet to modify.
 *    Format is:
 *    `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductSetsAddProduct
 */
+ (instancetype)queryWithObject:(GTLRVision_AddProductToProductSetRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates and returns a new ProductSet resource.
 *  Possible errors:
 *  * Returns INVALID_ARGUMENT if display_name is missing, or is longer than
 *  4096 characters.
 *
 *  Method: vision.projects.locations.productSets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductSetsCreate : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductSetsCreateWithObject:parent:]

/**
 *  Required. The project in which the ProductSet should be created.
 *  Format is `projects/PROJECT_ID/locations/LOC_ID`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  A user-supplied resource id for this ProductSet. If set, the server will
 *  attempt to use this value as the resource id. If it is already in use, an
 *  error is returned with code ALREADY_EXISTS. Must be at most 128 characters
 *  long. It cannot contain the character `/`.
 */
@property(nonatomic, copy, nullable) NSString *productSetId;

/**
 *  Fetches a @c GTLRVision_ProductSet.
 *
 *  Creates and returns a new ProductSet resource.
 *  Possible errors:
 *  * Returns INVALID_ARGUMENT if display_name is missing, or is longer than
 *  4096 characters.
 *
 *  @param object The @c GTLRVision_ProductSet to include in the query.
 *  @param parent Required. The project in which the ProductSet should be
 *    created.
 *    Format is `projects/PROJECT_ID/locations/LOC_ID`.
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductSetsCreate
 */
+ (instancetype)queryWithObject:(GTLRVision_ProductSet *)object
                         parent:(NSString *)parent;

@end

/**
 *  Permanently deletes a ProductSet. Products and ReferenceImages in the
 *  ProductSet are not deleted.
 *  The actual image files are not deleted from Google Cloud Storage.
 *
 *  Method: vision.projects.locations.productSets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductSetsDelete : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductSetsDeleteWithname:]

/**
 *  Required. Resource name of the ProductSet to delete.
 *  Format is:
 *  `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRVision_Empty.
 *
 *  Permanently deletes a ProductSet. Products and ReferenceImages in the
 *  ProductSet are not deleted.
 *  The actual image files are not deleted from Google Cloud Storage.
 *
 *  @param name Required. Resource name of the ProductSet to delete.
 *    Format is:
 *    `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductSetsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets information associated with a ProductSet.
 *  Possible errors:
 *  * Returns NOT_FOUND if the ProductSet does not exist.
 *
 *  Method: vision.projects.locations.productSets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductSetsGet : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductSetsGetWithname:]

/**
 *  Required. Resource name of the ProductSet to get.
 *  Format is:
 *  `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRVision_ProductSet.
 *
 *  Gets information associated with a ProductSet.
 *  Possible errors:
 *  * Returns NOT_FOUND if the ProductSet does not exist.
 *
 *  @param name Required. Resource name of the ProductSet to get.
 *    Format is:
 *    `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductSetsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Asynchronous API that imports a list of reference images to specified
 *  product sets based on a list of image information.
 *  The google.longrunning.Operation API can be used to keep track of the
 *  progress and results of the request.
 *  `Operation.metadata` contains `BatchOperationMetadata`. (progress)
 *  `Operation.response` contains `ImportProductSetsResponse`. (results)
 *  The input source of this method is a csv file on Google Cloud Storage.
 *  For the format of the csv file please see
 *  ImportProductSetsGcsSource.csv_file_uri.
 *
 *  Method: vision.projects.locations.productSets.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductSetsImport : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductSetsImportWithObject:parent:]

/**
 *  Required. The project in which the ProductSets should be imported.
 *  Format is `projects/PROJECT_ID/locations/LOC_ID`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRVision_Operation.
 *
 *  Asynchronous API that imports a list of reference images to specified
 *  product sets based on a list of image information.
 *  The google.longrunning.Operation API can be used to keep track of the
 *  progress and results of the request.
 *  `Operation.metadata` contains `BatchOperationMetadata`. (progress)
 *  `Operation.response` contains `ImportProductSetsResponse`. (results)
 *  The input source of this method is a csv file on Google Cloud Storage.
 *  For the format of the csv file please see
 *  ImportProductSetsGcsSource.csv_file_uri.
 *
 *  @param object The @c GTLRVision_ImportProductSetsRequest to include in the
 *    query.
 *  @param parent Required. The project in which the ProductSets should be
 *    imported.
 *    Format is `projects/PROJECT_ID/locations/LOC_ID`.
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductSetsImport
 */
+ (instancetype)queryWithObject:(GTLRVision_ImportProductSetsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists ProductSets in an unspecified order.
 *  Possible errors:
 *  * Returns INVALID_ARGUMENT if page_size is greater than 100, or less
 *  than 1.
 *
 *  Method: vision.projects.locations.productSets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductSetsList : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductSetsListWithparent:]

/** The maximum number of items to return. Default 10, maximum 100. */
@property(nonatomic, assign) NSInteger pageSize;

/** The next_page_token returned from a previous List request, if any. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The project from which ProductSets should be listed.
 *  Format is `projects/PROJECT_ID/locations/LOC_ID`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRVision_ListProductSetsResponse.
 *
 *  Lists ProductSets in an unspecified order.
 *  Possible errors:
 *  * Returns INVALID_ARGUMENT if page_size is greater than 100, or less
 *  than 1.
 *
 *  @param parent Required. The project from which ProductSets should be listed.
 *    Format is `projects/PROJECT_ID/locations/LOC_ID`.
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductSetsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Makes changes to a ProductSet resource.
 *  Only display_name can be updated currently.
 *  Possible errors:
 *  * Returns NOT_FOUND if the ProductSet does not exist.
 *  * Returns INVALID_ARGUMENT if display_name is present in update_mask but
 *  missing from the request or longer than 4096 characters.
 *
 *  Method: vision.projects.locations.productSets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductSetsPatch : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductSetsPatchWithObject:name:]

/**
 *  The resource name of the ProductSet.
 *  Format is:
 *  `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`.
 *  This field is ignored when creating a ProductSet.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The FieldMask that specifies which fields to
 *  update.
 *  If update_mask isn't specified, all mutable fields are to be updated.
 *  Valid mask path is `display_name`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRVision_ProductSet.
 *
 *  Makes changes to a ProductSet resource.
 *  Only display_name can be updated currently.
 *  Possible errors:
 *  * Returns NOT_FOUND if the ProductSet does not exist.
 *  * Returns INVALID_ARGUMENT if display_name is present in update_mask but
 *  missing from the request or longer than 4096 characters.
 *
 *  @param object The @c GTLRVision_ProductSet to include in the query.
 *  @param name The resource name of the ProductSet.
 *    Format is:
 *    `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`.
 *    This field is ignored when creating a ProductSet.
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductSetsPatch
 */
+ (instancetype)queryWithObject:(GTLRVision_ProductSet *)object
                           name:(NSString *)name;

@end

/**
 *  Lists the Products in a ProductSet, in an unspecified order. If the
 *  ProductSet does not exist, the products field of the response will be
 *  empty.
 *  Possible errors:
 *  * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.
 *
 *  Method: vision.projects.locations.productSets.products.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductSetsProductsList : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductSetsProductsListWithname:]

/**
 *  Required. The ProductSet resource for which to retrieve Products.
 *  Format is:
 *  `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The maximum number of items to return. Default 10, maximum 100. */
@property(nonatomic, assign) NSInteger pageSize;

/** The next_page_token returned from a previous List request, if any. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRVision_ListProductsInProductSetResponse.
 *
 *  Lists the Products in a ProductSet, in an unspecified order. If the
 *  ProductSet does not exist, the products field of the response will be
 *  empty.
 *  Possible errors:
 *  * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.
 *
 *  @param name Required. The ProductSet resource for which to retrieve
 *    Products.
 *    Format is:
 *    `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductSetsProductsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Removes a Product from the specified ProductSet.
 *
 *  Method: vision.projects.locations.productSets.removeProduct
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductSetsRemoveProduct : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductSetsRemoveProductWithObject:name:]

/**
 *  Required. The resource name for the ProductSet to modify.
 *  Format is:
 *  `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRVision_Empty.
 *
 *  Removes a Product from the specified ProductSet.
 *
 *  @param object The @c GTLRVision_RemoveProductFromProductSetRequest to
 *    include in the query.
 *  @param name Required. The resource name for the ProductSet to modify.
 *    Format is:
 *    `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductSetsRemoveProduct
 */
+ (instancetype)queryWithObject:(GTLRVision_RemoveProductFromProductSetRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information associated with a Product.
 *  Possible errors:
 *  * Returns NOT_FOUND if the Product does not exist.
 *
 *  Method: vision.projects.locations.products.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductsGet : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductsGetWithname:]

/**
 *  Required. Resource name of the Product to get.
 *  Format is:
 *  `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRVision_Product.
 *
 *  Gets information associated with a Product.
 *  Possible errors:
 *  * Returns NOT_FOUND if the Product does not exist.
 *
 *  @param name Required. Resource name of the Product to get.
 *    Format is:
 *    `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists products in an unspecified order.
 *  Possible errors:
 *  * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.
 *
 *  Method: vision.projects.locations.products.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductsList : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductsListWithparent:]

/** The maximum number of items to return. Default 10, maximum 100. */
@property(nonatomic, assign) NSInteger pageSize;

/** The next_page_token returned from a previous List request, if any. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The project OR ProductSet from which Products should be listed.
 *  Format:
 *  `projects/PROJECT_ID/locations/LOC_ID`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRVision_ListProductsResponse.
 *
 *  Lists products in an unspecified order.
 *  Possible errors:
 *  * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.
 *
 *  @param parent Required. The project OR ProductSet from which Products should
 *    be listed.
 *    Format:
 *    `projects/PROJECT_ID/locations/LOC_ID`
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Makes changes to a Product resource.
 *  Only the `display_name`, `description`, and `labels` fields can be updated
 *  right now.
 *  If labels are updated, the change will not be reflected in queries until
 *  the next index time.
 *  Possible errors:
 *  * Returns NOT_FOUND if the Product does not exist.
 *  * Returns INVALID_ARGUMENT if display_name is present in update_mask but is
 *  missing from the request or longer than 4096 characters.
 *  * Returns INVALID_ARGUMENT if description is present in update_mask but is
 *  longer than 4096 characters.
 *  * Returns INVALID_ARGUMENT if product_category is present in update_mask.
 *
 *  Method: vision.projects.locations.products.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductsPatch : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductsPatchWithObject:name:]

/**
 *  The resource name of the product.
 *  Format is:
 *  `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.
 *  This field is ignored when creating a product.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The FieldMask that specifies which fields
 *  to update.
 *  If update_mask isn't specified, all mutable fields are to be updated.
 *  Valid mask paths include `product_labels`, `display_name`, and
 *  `description`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRVision_Product.
 *
 *  Makes changes to a Product resource.
 *  Only the `display_name`, `description`, and `labels` fields can be updated
 *  right now.
 *  If labels are updated, the change will not be reflected in queries until
 *  the next index time.
 *  Possible errors:
 *  * Returns NOT_FOUND if the Product does not exist.
 *  * Returns INVALID_ARGUMENT if display_name is present in update_mask but is
 *  missing from the request or longer than 4096 characters.
 *  * Returns INVALID_ARGUMENT if description is present in update_mask but is
 *  longer than 4096 characters.
 *  * Returns INVALID_ARGUMENT if product_category is present in update_mask.
 *
 *  @param object The @c GTLRVision_Product to include in the query.
 *  @param name The resource name of the product.
 *    Format is:
 *    `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.
 *    This field is ignored when creating a product.
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductsPatch
 */
+ (instancetype)queryWithObject:(GTLRVision_Product *)object
                           name:(NSString *)name;

@end

/**
 *  Asynchronous API to delete all Products in a ProductSet or all Products
 *  that are in no ProductSet.
 *  If a Product is a member of the specified ProductSet in addition to other
 *  ProductSets, the Product will still be deleted.
 *  It is recommended to not delete the specified ProductSet until after this
 *  operation has completed. It is also recommended to not add any of the
 *  Products involved in the batch delete to a new ProductSet while this
 *  operation is running because those Products may still end up deleted.
 *  It's not possible to undo the PurgeProducts operation. Therefore, it is
 *  recommended to keep the csv files used in ImportProductSets (if that was
 *  how you originally built the Product Set) before starting PurgeProducts, in
 *  case you need to re-import the data after deletion.
 *  If the plan is to purge all of the Products from a ProductSet and then
 *  re-use the empty ProductSet to re-import new Products into the empty
 *  ProductSet, you must wait until the PurgeProducts operation has finished
 *  for that ProductSet.
 *  The google.longrunning.Operation API can be used to keep track of the
 *  progress and results of the request.
 *  `Operation.metadata` contains `BatchOperationMetadata`. (progress)
 *
 *  Method: vision.projects.locations.products.purge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductsPurge : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductsPurgeWithObject:parent:]

/**
 *  Required. The project and location in which the Products should be deleted.
 *  Format is `projects/PROJECT_ID/locations/LOC_ID`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRVision_Operation.
 *
 *  Asynchronous API to delete all Products in a ProductSet or all Products
 *  that are in no ProductSet.
 *  If a Product is a member of the specified ProductSet in addition to other
 *  ProductSets, the Product will still be deleted.
 *  It is recommended to not delete the specified ProductSet until after this
 *  operation has completed. It is also recommended to not add any of the
 *  Products involved in the batch delete to a new ProductSet while this
 *  operation is running because those Products may still end up deleted.
 *  It's not possible to undo the PurgeProducts operation. Therefore, it is
 *  recommended to keep the csv files used in ImportProductSets (if that was
 *  how you originally built the Product Set) before starting PurgeProducts, in
 *  case you need to re-import the data after deletion.
 *  If the plan is to purge all of the Products from a ProductSet and then
 *  re-use the empty ProductSet to re-import new Products into the empty
 *  ProductSet, you must wait until the PurgeProducts operation has finished
 *  for that ProductSet.
 *  The google.longrunning.Operation API can be used to keep track of the
 *  progress and results of the request.
 *  `Operation.metadata` contains `BatchOperationMetadata`. (progress)
 *
 *  @param object The @c GTLRVision_PurgeProductsRequest to include in the
 *    query.
 *  @param parent Required. The project and location in which the Products
 *    should be deleted.
 *    Format is `projects/PROJECT_ID/locations/LOC_ID`.
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductsPurge
 */
+ (instancetype)queryWithObject:(GTLRVision_PurgeProductsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates and returns a new ReferenceImage resource.
 *  The `bounding_poly` field is optional. If `bounding_poly` is not specified,
 *  the system will try to detect regions of interest in the image that are
 *  compatible with the product_category on the parent product. If it is
 *  specified, detection is ALWAYS skipped. The system converts polygons into
 *  non-rotated rectangles.
 *  Note that the pipeline will resize the image if the image resolution is too
 *  large to process (above 50MP).
 *  Possible errors:
 *  * Returns INVALID_ARGUMENT if the image_uri is missing or longer than 4096
 *  characters.
 *  * Returns INVALID_ARGUMENT if the product does not exist.
 *  * Returns INVALID_ARGUMENT if bounding_poly is not provided, and nothing
 *  compatible with the parent product's product_category is detected.
 *  * Returns INVALID_ARGUMENT if bounding_poly contains more than 10 polygons.
 *
 *  Method: vision.projects.locations.products.referenceImages.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductsReferenceImagesCreate : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductsReferenceImagesCreateWithObject:parent:]

/**
 *  Required. Resource name of the product in which to create the reference
 *  image.
 *  Format is
 *  `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  A user-supplied resource id for the ReferenceImage to be added. If set,
 *  the server will attempt to use this value as the resource id. If it is
 *  already in use, an error is returned with code ALREADY_EXISTS. Must be at
 *  most 128 characters long. It cannot contain the character `/`.
 */
@property(nonatomic, copy, nullable) NSString *referenceImageId;

/**
 *  Fetches a @c GTLRVision_ReferenceImage.
 *
 *  Creates and returns a new ReferenceImage resource.
 *  The `bounding_poly` field is optional. If `bounding_poly` is not specified,
 *  the system will try to detect regions of interest in the image that are
 *  compatible with the product_category on the parent product. If it is
 *  specified, detection is ALWAYS skipped. The system converts polygons into
 *  non-rotated rectangles.
 *  Note that the pipeline will resize the image if the image resolution is too
 *  large to process (above 50MP).
 *  Possible errors:
 *  * Returns INVALID_ARGUMENT if the image_uri is missing or longer than 4096
 *  characters.
 *  * Returns INVALID_ARGUMENT if the product does not exist.
 *  * Returns INVALID_ARGUMENT if bounding_poly is not provided, and nothing
 *  compatible with the parent product's product_category is detected.
 *  * Returns INVALID_ARGUMENT if bounding_poly contains more than 10 polygons.
 *
 *  @param object The @c GTLRVision_ReferenceImage to include in the query.
 *  @param parent Required. Resource name of the product in which to create the
 *    reference image.
 *    Format is
 *    `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductsReferenceImagesCreate
 */
+ (instancetype)queryWithObject:(GTLRVision_ReferenceImage *)object
                         parent:(NSString *)parent;

@end

/**
 *  Permanently deletes a reference image.
 *  The image metadata will be deleted right away, but search queries
 *  against ProductSets containing the image may still work until all related
 *  caches are refreshed.
 *  The actual image files are not deleted from Google Cloud Storage.
 *
 *  Method: vision.projects.locations.products.referenceImages.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductsReferenceImagesDelete : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductsReferenceImagesDeleteWithname:]

/**
 *  Required. The resource name of the reference image to delete.
 *  Format is:
 *  `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRVision_Empty.
 *
 *  Permanently deletes a reference image.
 *  The image metadata will be deleted right away, but search queries
 *  against ProductSets containing the image may still work until all related
 *  caches are refreshed.
 *  The actual image files are not deleted from Google Cloud Storage.
 *
 *  @param name Required. The resource name of the reference image to delete.
 *    Format is:
 *    `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductsReferenceImagesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets information associated with a ReferenceImage.
 *  Possible errors:
 *  * Returns NOT_FOUND if the specified image does not exist.
 *
 *  Method: vision.projects.locations.products.referenceImages.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductsReferenceImagesGet : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductsReferenceImagesGetWithname:]

/**
 *  Required. The resource name of the ReferenceImage to get.
 *  Format is:
 *  `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRVision_ReferenceImage.
 *
 *  Gets information associated with a ReferenceImage.
 *  Possible errors:
 *  * Returns NOT_FOUND if the specified image does not exist.
 *
 *  @param name Required. The resource name of the ReferenceImage to get.
 *    Format is:
 *    `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`.
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductsReferenceImagesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists reference images.
 *  Possible errors:
 *  * Returns NOT_FOUND if the parent product does not exist.
 *  * Returns INVALID_ARGUMENT if the page_size is greater than 100, or less
 *  than 1.
 *
 *  Method: vision.projects.locations.products.referenceImages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsLocationsProductsReferenceImagesList : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsLocationsProductsReferenceImagesListWithparent:]

/** The maximum number of items to return. Default 10, maximum 100. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results to be returned. This is the value
 *  of `nextPageToken` returned in a previous reference image list request.
 *  Defaults to the first page if not specified.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Resource name of the product containing the reference images.
 *  Format is
 *  `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRVision_ListReferenceImagesResponse.
 *
 *  Lists reference images.
 *  Possible errors:
 *  * Returns NOT_FOUND if the parent product does not exist.
 *  * Returns INVALID_ARGUMENT if the page_size is greater than 100, or less
 *  than 1.
 *
 *  @param parent Required. Resource name of the product containing the
 *    reference images.
 *    Format is
 *    `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.
 *
 *  @return GTLRVisionQuery_ProjectsLocationsProductsReferenceImagesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: vision.projects.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVisionCloudPlatform
 *    @c kGTLRAuthScopeVisionCloudVision
 */
@interface GTLRVisionQuery_ProjectsOperationsGet : GTLRVisionQuery
// Previous library name was
//   +[GTLQueryVision queryForProjectsOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRVision_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRVisionQuery_ProjectsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
