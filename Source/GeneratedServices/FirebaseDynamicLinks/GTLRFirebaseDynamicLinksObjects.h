// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase Dynamic Links API (firebasedynamiclinks/v1)
// Description:
//   Programmatically creates and manages Firebase Dynamic Links.
// Documentation:
//   https://firebase.google.com/docs/dynamic-links/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRFirebaseDynamicLinks_AnalyticsInfo;
@class GTLRFirebaseDynamicLinks_AndroidInfo;
@class GTLRFirebaseDynamicLinks_DesktopInfo;
@class GTLRFirebaseDynamicLinks_DeviceInfo;
@class GTLRFirebaseDynamicLinks_DynamicLinkEventStat;
@class GTLRFirebaseDynamicLinks_DynamicLinkInfo;
@class GTLRFirebaseDynamicLinks_DynamicLinkWarning;
@class GTLRFirebaseDynamicLinks_GooglePlayAnalytics;
@class GTLRFirebaseDynamicLinks_IosInfo;
@class GTLRFirebaseDynamicLinks_ITunesConnectAnalytics;
@class GTLRFirebaseDynamicLinks_ManagedShortLink;
@class GTLRFirebaseDynamicLinks_NavigationInfo;
@class GTLRFirebaseDynamicLinks_SocialMetaTagInfo;
@class GTLRFirebaseDynamicLinks_Suffix;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRFirebaseDynamicLinks_DynamicLinkEventStat.event

/**
 *  Indicates that the app is opened for the first time after an install
 *  triggered by FDLs
 *
 *  Value: "APP_FIRST_OPEN"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Event_AppFirstOpen;
/**
 *  Indicates that an FDL triggers an app install from Play store, currently
 *  it's impossible to get stats from App store.
 *
 *  Value: "APP_INSTALL"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Event_AppInstall;
/**
 *  Indicates that the app is opened via an FDL for non-first time.
 *
 *  Value: "APP_RE_OPEN"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Event_AppReOpen;
/**
 *  Indicates that an FDL is clicked by users.
 *
 *  Value: "CLICK"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Event_Click;
/**
 *  Unspecified type.
 *
 *  Value: "DYNAMIC_LINK_EVENT_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Event_DynamicLinkEventUnspecified;
/**
 *  Indicates that an FDL redirects users to fallback link.
 *
 *  Value: "REDIRECT"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Event_Redirect;

// ----------------------------------------------------------------------------
// GTLRFirebaseDynamicLinks_DynamicLinkEventStat.platform

/**
 *  Represents Android platform.
 *  All apps and browsers on Android are classfied in this category.
 *
 *  Value: "ANDROID"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Platform_Android;
/**
 *  Represents desktop.
 *
 *  Value: "DESKTOP"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Platform_Desktop;
/**
 *  Unspecified platform.
 *
 *  Value: "DYNAMIC_LINK_PLATFORM_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Platform_DynamicLinkPlatformUnspecified;
/**
 *  Represents iOS platform.
 *  All apps and browsers on iOS are classfied in this category.
 *
 *  Value: "IOS"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Platform_Ios;
/**
 *  Platforms are not categorized as Android/iOS/Destop fall into here.
 *
 *  Value: "OTHER"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Platform_Other;

// ----------------------------------------------------------------------------
// GTLRFirebaseDynamicLinks_DynamicLinkWarning.warningCode

/**
 *  isAd param format is incorrect.
 *
 *  Value: "BAD_AD_PARAM"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_BadAdParam;
/**
 *  Debug param format is incorrect.
 *
 *  Value: "BAD_DEBUG_PARAM"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_BadDebugParam;
/**
 *  Android fallback link has an invalid (non http/https) URI scheme.
 *
 *  Value: "BAD_URI_SCHEME_ANDROID_FALLBACK_LINK"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_BadUriSchemeAndroidFallbackLink;
/**
 *  iOS fallback link has an invalid (non http/https) URI scheme.
 *
 *  Value: "BAD_URI_SCHEME_IOS_FALLBACK_LINK"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_BadUriSchemeIosFallbackLink;
/**
 *  iPad fallback link has an invalid (non http/https) URI scheme.
 *
 *  Value: "BAD_URI_SCHEME_IPAD_FALLBACK_LINK"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_BadUriSchemeIpadFallbackLink;
/**
 *  Social meta tag image link has an invalid (non http/https) URI scheme.
 *
 *  Value: "BAD_URI_SCHEME_SOCIAL_IMAGE_LINK"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_BadUriSchemeSocialImageLink;
/** Value: "BAD_URI_SCHEME_SOCIAL_URL" */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_BadUriSchemeSocialUrl;
/**
 *  Unknown code.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_CodeUnspecified;
/**
 *  Indicates a certain param is deprecated.
 *
 *  Value: "DEPRECATED_PARAM"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_DeprecatedParam;
/**
 *  Dynamic Link URL length is too long.
 *
 *  Value: "LINK_LENGTH_TOO_LONG"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_LinkLengthTooLong;
/**
 *  Dynamic Link URL contains fragments.
 *
 *  Value: "LINK_WITH_FRAGMENTS"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_LinkWithFragments;
/**
 *  The Android package does not match any in developer's DevConsole project.
 *
 *  Value: "NOT_IN_PROJECT_ANDROID_PACKAGE_NAME"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotInProjectAndroidPackageName;
/**
 *  The iOS bundle ID does not match any in developer's DevConsole project.
 *
 *  Value: "NOT_IN_PROJECT_IOS_BUNDLE_ID"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotInProjectIosBundleId;
/**
 *  The iPad bundle ID does not match any in developer's DevConsole project.
 *
 *  Value: "NOT_IN_PROJECT_IPAD_BUNDLE_ID"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotInProjectIpadBundleId;
/**
 *  The Android minimum version code has to be a valid integer.
 *
 *  Value: "NOT_INTEGER_ANDROID_PACKAGE_MIN_VERSION"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotIntegerAndroidPackageMinVersion;
/**
 *  The iOS bundle ID does not match with the given iOS store ID.
 *
 *  Value: "NOT_MATCHING_IOS_BUNDLE_ID_AND_STORE_ID"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotMatchingIosBundleIdAndStoreId;
/**
 *  iOS app store ID format is incorrect, e.g. not numeric.
 *
 *  Value: "NOT_NUMERIC_IOS_APP_STORE_ID"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotNumericIosAppStoreId;
/**
 *  Android fallback link is not a valid URI.
 *
 *  Value: "NOT_URI_ANDROID_FALLBACK_LINK"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotUriAndroidFallbackLink;
/**
 *  Android link is not a valid URI.
 *
 *  Value: "NOT_URI_ANDROID_LINK"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotUriAndroidLink;
/**
 *  iOS fallback link is not a valid URI.
 *
 *  Value: "NOT_URI_IOS_FALLBACK_LINK"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotUriIosFallbackLink;
/**
 *  iPad fallback link is not a valid URI.
 *
 *  Value: "NOT_URI_IPAD_FALLBACK_LINK"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotUriIpadFallbackLink;
/**
 *  Social meta tag image link is not a valid URI.
 *
 *  Value: "NOT_URI_SOCIAL_IMAGE_LINK"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotUriSocialImageLink;
/** Value: "NOT_URI_SOCIAL_URL" */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotUriSocialUrl;
/**
 *  Indicates certain paramater is too long.
 *
 *  Value: "TOO_LONG_PARAM"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_TooLongParam;
/**
 *  Android link param is not needed, e.g. when param 'al' and 'link' have
 *  the same value..
 *
 *  Value: "UNNECESSARY_ANDROID_LINK"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_UnnecessaryAndroidLink;
/**
 *  Android package min version param is not needed, e.g. when
 *  'apn' is missing.
 *
 *  Value: "UNNECESSARY_ANDROID_PACKAGE_MIN_VERSION"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_UnnecessaryAndroidPackageMinVersion;
/**
 *  iOS app store ID is not needed.
 *
 *  Value: "UNNECESSARY_IOS_APP_STORE_ID"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_UnnecessaryIosAppStoreId;
/**
 *  iOS URL scheme is not needed, e.g. when 'ibi' are 'ipbi' are all missing.
 *
 *  Value: "UNNECESSARY_IOS_URL_SCHEME"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_UnnecessaryIosUrlScheme;
/**
 *  Indicates certain paramater is not recognized.
 *
 *  Value: "UNRECOGNIZED_PARAM"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_UnrecognizedParam;

// ----------------------------------------------------------------------------
// GTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest.retrievalMethod

/**
 *  iSDK performs a strong match only if weak match is found upon a dev
 *  API call.
 *
 *  Value: "EXPLICIT_STRONG_AFTER_WEAK_MATCH"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest_RetrievalMethod_ExplicitStrongAfterWeakMatch;
/**
 *  iSDK performs a server lookup by device fingerprint upon a dev API call.
 *
 *  Value: "EXPLICIT_WEAK_MATCH"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest_RetrievalMethod_ExplicitWeakMatch;
/**
 *  iSDK performs a server lookup by device fingerprint in the background
 *  when app is first-opened; no API called by developer.
 *
 *  Value: "IMPLICIT_WEAK_MATCH"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest_RetrievalMethod_ImplicitWeakMatch;
/**
 *  Unknown method.
 *
 *  Value: "UNKNOWN_PAYLOAD_RETRIEVAL_METHOD"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest_RetrievalMethod_UnknownPayloadRetrievalMethod;

// ----------------------------------------------------------------------------
// GTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest.visualStyle

/**
 *  Custom style.
 *
 *  Value: "CUSTOM_STYLE"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest_VisualStyle_CustomStyle;
/**
 *  Default style.
 *
 *  Value: "DEFAULT_STYLE"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest_VisualStyle_DefaultStyle;
/**
 *  Unknown style.
 *
 *  Value: "UNKNOWN_VISUAL_STYLE"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest_VisualStyle_UnknownVisualStyle;

// ----------------------------------------------------------------------------
// GTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse.attributionConfidence

/**
 *  Default confidence, match based on fingerprint
 *
 *  Value: "DEFAULT"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse_AttributionConfidence_Default;
/**
 *  Unique confidence, match based on "unique match link to check" or other
 *  means
 *
 *  Value: "UNIQUE"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse_AttributionConfidence_Unique;
/**
 *  Unset.
 *
 *  Value: "UNKNOWN_ATTRIBUTION_CONFIDENCE"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse_AttributionConfidence_UnknownAttributionConfidence;
/**
 *  Weak confidence, more than one matching link found or link suspected to
 *  be false positive
 *
 *  Value: "WEAK"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse_AttributionConfidence_Weak;

// ----------------------------------------------------------------------------
// GTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse.requestIpVersion

/**
 *  Request made from an IPv4 IP address.
 *
 *  Value: "IP_V4"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse_RequestIpVersion_IpV4;
/**
 *  Request made from an IPv6 IP address.
 *
 *  Value: "IP_V6"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse_RequestIpVersion_IpV6;
/**
 *  Unset.
 *
 *  Value: "UNKNOWN_IP_VERSION"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse_RequestIpVersion_UnknownIpVersion;

// ----------------------------------------------------------------------------
// GTLRFirebaseDynamicLinks_ManagedShortLink.flaggedAttribute

/** Value: "SPAM" */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_ManagedShortLink_FlaggedAttribute_Spam;
/** Value: "UNSPECIFIED_ATTRIBUTE" */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_ManagedShortLink_FlaggedAttribute_UnspecifiedAttribute;

// ----------------------------------------------------------------------------
// GTLRFirebaseDynamicLinks_ManagedShortLink.visibility

/**
 *  Link created in console and should not be shown in console (but can
 *  be shown in the console again if it is unarchived).
 *
 *  Value: "ARCHIVED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_ManagedShortLink_Visibility_Archived;
/**
 *  Link created outside of console and should never be shown in console.
 *
 *  Value: "NEVER_SHOWN"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_ManagedShortLink_Visibility_NeverShown;
/**
 *  Link created in console and should be shown in console.
 *
 *  Value: "UNARCHIVED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_ManagedShortLink_Visibility_Unarchived;
/**
 *  Visibility of the link is not specified.
 *
 *  Value: "UNSPECIFIED_VISIBILITY"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_ManagedShortLink_Visibility_UnspecifiedVisibility;

// ----------------------------------------------------------------------------
// GTLRFirebaseDynamicLinks_Suffix.option

/**
 *  Custom DDL suffix is a client specified string, for example,
 *  "buy2get1free".
 *  NOTE: custom suffix should only be available to managed short link
 *  creation
 *
 *  Value: "CUSTOM"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_Suffix_Option_Custom;
/**
 *  The suffix option is not specified, performs as UNGUESSABLE .
 *
 *  Value: "OPTION_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_Suffix_Option_OptionUnspecified;
/**
 *  Short Dynamic Link suffix is a base62 [0-9A-Za-z] string starting with a
 *  length of 4 chars. the length will increase when all the space is
 *  occupied.
 *
 *  Value: "SHORT"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_Suffix_Option_Short;
/**
 *  Short Dynamic Link suffix is a base62 [0-9A-Za-z] encoded string of
 *  a random generated 96 bit random number, which has a length of 17 chars.
 *  For example, "nlAR8U4SlKRZw1cb2".
 *  It prevents other people from guessing and crawling short Dynamic Links
 *  that contain personal identifiable information.
 *
 *  Value: "UNGUESSABLE"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseDynamicLinks_Suffix_Option_Unguessable;

/**
 *  Tracking parameters supported by Dynamic Link.
 */
@interface GTLRFirebaseDynamicLinks_AnalyticsInfo : GTLRObject

/** Google Play Campaign Measurements. */
@property(nonatomic, strong, nullable) GTLRFirebaseDynamicLinks_GooglePlayAnalytics *googlePlayAnalytics;

/** iTunes Connect App Analytics. */
@property(nonatomic, strong, nullable) GTLRFirebaseDynamicLinks_ITunesConnectAnalytics *itunesConnectAnalytics;

@end


/**
 *  Android related attributes to the Dynamic Link.
 */
@interface GTLRFirebaseDynamicLinks_AndroidInfo : GTLRObject

/** Link to open on Android if the app is not installed. */
@property(nonatomic, copy, nullable) NSString *androidFallbackLink;

/** If specified, this overrides the ‘link’ parameter on Android. */
@property(nonatomic, copy, nullable) NSString *androidLink;

/**
 *  Minimum version code for the Android app. If the installed app’s version
 *  code is lower, then the user is taken to the Play Store.
 */
@property(nonatomic, copy, nullable) NSString *androidMinPackageVersionCode;

/** Android package name of the app. */
@property(nonatomic, copy, nullable) NSString *androidPackageName;

@end


/**
 *  Request to create a managed Short Dynamic Link.
 */
@interface GTLRFirebaseDynamicLinks_CreateManagedShortLinkRequest : GTLRObject

/**
 *  Information about the Dynamic Link to be shortened.
 *  [Learn
 *  more](https://firebase.google.com/docs/reference/dynamic-links/link-shortener).
 */
@property(nonatomic, strong, nullable) GTLRFirebaseDynamicLinks_DynamicLinkInfo *dynamicLinkInfo;

/**
 *  Full long Dynamic Link URL with desired query parameters specified.
 *  For example,
 *  "https://sample.app.goo.gl/?link=http://www.google.com&apn=com.sample",
 *  [Learn
 *  more](https://firebase.google.com/docs/reference/dynamic-links/link-shortener).
 */
@property(nonatomic, copy, nullable) NSString *longDynamicLink;

/**
 *  Link name to associate with the link. It's used for marketer to identify
 *  manually-created links in the Firebase console
 *  (https://console.firebase.google.com/).
 *  Links must be named to be tracked.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Google SDK version. Version takes the form "$major.$minor.$patch" */
@property(nonatomic, copy, nullable) NSString *sdkVersion;

/** Short Dynamic Link suffix. Optional. */
@property(nonatomic, strong, nullable) GTLRFirebaseDynamicLinks_Suffix *suffix;

@end


/**
 *  Response to create a short Dynamic Link.
 */
@interface GTLRFirebaseDynamicLinks_CreateManagedShortLinkResponse : GTLRObject

/** Short Dynamic Link value. e.g. https://abcd.app.goo.gl/wxyz */
@property(nonatomic, strong, nullable) GTLRFirebaseDynamicLinks_ManagedShortLink *managedShortLink;

/** Preview link to show the link flow chart. (debug info.) */
@property(nonatomic, copy, nullable) NSString *previewLink;

/** Information about potential warnings on link creation. */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseDynamicLinks_DynamicLinkWarning *> *warning;

@end


/**
 *  Request to create a short Dynamic Link.
 */
@interface GTLRFirebaseDynamicLinks_CreateShortDynamicLinkRequest : GTLRObject

/**
 *  Information about the Dynamic Link to be shortened.
 *  [Learn
 *  more](https://firebase.google.com/docs/reference/dynamic-links/link-shortener).
 */
@property(nonatomic, strong, nullable) GTLRFirebaseDynamicLinks_DynamicLinkInfo *dynamicLinkInfo;

/**
 *  Full long Dynamic Link URL with desired query parameters specified.
 *  For example,
 *  "https://sample.app.goo.gl/?link=http://www.google.com&apn=com.sample",
 *  [Learn
 *  more](https://firebase.google.com/docs/reference/dynamic-links/link-shortener).
 */
@property(nonatomic, copy, nullable) NSString *longDynamicLink;

/** Google SDK version. Version takes the form "$major.$minor.$patch" */
@property(nonatomic, copy, nullable) NSString *sdkVersion;

/** Short Dynamic Link suffix. Optional. */
@property(nonatomic, strong, nullable) GTLRFirebaseDynamicLinks_Suffix *suffix;

@end


/**
 *  Response to create a short Dynamic Link.
 */
@interface GTLRFirebaseDynamicLinks_CreateShortDynamicLinkResponse : GTLRObject

/** Preview link to show the link flow chart. (debug info.) */
@property(nonatomic, copy, nullable) NSString *previewLink;

/** Short Dynamic Link value. e.g. https://abcd.app.goo.gl/wxyz */
@property(nonatomic, copy, nullable) NSString *shortLink;

/** Information about potential warnings on link creation. */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseDynamicLinks_DynamicLinkWarning *> *warning;

@end


/**
 *  Desktop related attributes to the Dynamic Link.
 */
@interface GTLRFirebaseDynamicLinks_DesktopInfo : GTLRObject

/** Link to open on desktop. */
@property(nonatomic, copy, nullable) NSString *desktopFallbackLink;

@end


/**
 *  Signals associated with the device making the request.
 */
@interface GTLRFirebaseDynamicLinks_DeviceInfo : GTLRObject

/** Device model name. */
@property(nonatomic, copy, nullable) NSString *deviceModelName;

/** Device language code setting. */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Device language code setting obtained by executing JavaScript code in
 *  WebView.
 */
@property(nonatomic, copy, nullable) NSString *languageCodeFromWebview;

/**
 *  Device language code raw setting.
 *  iOS does returns language code in different format than iOS WebView.
 *  For example WebView returns en_US, but iOS returns en-US.
 *  Field below will return raw value returned by iOS.
 */
@property(nonatomic, copy, nullable) NSString *languageCodeRaw;

/**
 *  Device display resolution height.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenResolutionHeight;

/**
 *  Device display resolution width.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenResolutionWidth;

/** Device timezone setting. */
@property(nonatomic, copy, nullable) NSString *timezone;

@end


/**
 *  Dynamic Link event stat.
 */
@interface GTLRFirebaseDynamicLinks_DynamicLinkEventStat : GTLRObject

/**
 *  The number of times this event occurred.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  Link event.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Event_AppFirstOpen
 *        Indicates that the app is opened for the first time after an install
 *        triggered by FDLs (Value: "APP_FIRST_OPEN")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Event_AppInstall
 *        Indicates that an FDL triggers an app install from Play store,
 *        currently
 *        it's impossible to get stats from App store. (Value: "APP_INSTALL")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Event_AppReOpen
 *        Indicates that the app is opened via an FDL for non-first time.
 *        (Value: "APP_RE_OPEN")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Event_Click
 *        Indicates that an FDL is clicked by users. (Value: "CLICK")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Event_DynamicLinkEventUnspecified
 *        Unspecified type. (Value: "DYNAMIC_LINK_EVENT_UNSPECIFIED")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Event_Redirect
 *        Indicates that an FDL redirects users to fallback link. (Value:
 *        "REDIRECT")
 */
@property(nonatomic, copy, nullable) NSString *event;

/**
 *  Requested platform.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Platform_Android
 *        Represents Android platform.
 *        All apps and browsers on Android are classfied in this category.
 *        (Value: "ANDROID")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Platform_Desktop
 *        Represents desktop. (Value: "DESKTOP")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Platform_DynamicLinkPlatformUnspecified
 *        Unspecified platform. (Value: "DYNAMIC_LINK_PLATFORM_UNSPECIFIED")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Platform_Ios
 *        Represents iOS platform.
 *        All apps and browsers on iOS are classfied in this category. (Value:
 *        "IOS")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkEventStat_Platform_Other
 *        Platforms are not categorized as Android/iOS/Destop fall into here.
 *        (Value: "OTHER")
 */
@property(nonatomic, copy, nullable) NSString *platform;

@end


/**
 *  Information about a Dynamic Link.
 */
@interface GTLRFirebaseDynamicLinks_DynamicLinkInfo : GTLRObject

/**
 *  Parameters used for tracking. See all tracking parameters in the
 *  [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
 */
@property(nonatomic, strong, nullable) GTLRFirebaseDynamicLinks_AnalyticsInfo *analyticsInfo;

/**
 *  Android related information. See Android related parameters in the
 *  [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
 */
@property(nonatomic, strong, nullable) GTLRFirebaseDynamicLinks_AndroidInfo *androidInfo;

/**
 *  Desktop related information. See desktop related parameters in the
 *  [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
 */
@property(nonatomic, strong, nullable) GTLRFirebaseDynamicLinks_DesktopInfo *desktopInfo;

/**
 *  E.g. https://maps.app.goo.gl, https://maps.page.link, https://g.co/maps
 *  More examples can be found in description of getNormalizedUriPrefix in
 *  j/c/g/firebase/dynamiclinks/uri/DdlDomain.java
 *  Will fallback to dynamic_link_domain is this field is missing
 */
@property(nonatomic, copy, nullable) NSString *domainUriPrefix;

/**
 *  Dynamic Links domain that the project owns, e.g. abcd.app.goo.gl
 *  [Learn more](https://firebase.google.com/docs/dynamic-links/android/receive)
 *  on how to set up Dynamic Link domain associated with your Firebase project.
 *  Required if missing domain_uri_prefix.
 */
@property(nonatomic, copy, nullable) NSString *dynamicLinkDomain;

/**
 *  iOS related information. See iOS related parameters in the
 *  [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
 */
@property(nonatomic, strong, nullable) GTLRFirebaseDynamicLinks_IosInfo *iosInfo;

/**
 *  The link your app will open, You can specify any URL your app can handle.
 *  This link must be a well-formatted URL, be properly URL-encoded, and use
 *  the HTTP or HTTPS scheme. See 'link' parameters in the
 *  [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *link;

/** Information of navigation behavior of a Firebase Dynamic Links. */
@property(nonatomic, strong, nullable) GTLRFirebaseDynamicLinks_NavigationInfo *navigationInfo;

/**
 *  Parameters for social meta tag params.
 *  Used to set meta tag data for link previews on social sites.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseDynamicLinks_SocialMetaTagInfo *socialMetaTagInfo;

@end


/**
 *  Analytics stats of a Dynamic Link for a given timeframe.
 */
@interface GTLRFirebaseDynamicLinks_DynamicLinkStats : GTLRObject

/** Dynamic Link event stats. */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseDynamicLinks_DynamicLinkEventStat *> *linkEventStats;

@end


/**
 *  Dynamic Links warning messages.
 */
@interface GTLRFirebaseDynamicLinks_DynamicLinkWarning : GTLRObject

/**
 *  The warning code.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_BadAdParam
 *        isAd param format is incorrect. (Value: "BAD_AD_PARAM")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_BadDebugParam
 *        Debug param format is incorrect. (Value: "BAD_DEBUG_PARAM")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_BadUriSchemeAndroidFallbackLink
 *        Android fallback link has an invalid (non http/https) URI scheme.
 *        (Value: "BAD_URI_SCHEME_ANDROID_FALLBACK_LINK")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_BadUriSchemeIosFallbackLink
 *        iOS fallback link has an invalid (non http/https) URI scheme. (Value:
 *        "BAD_URI_SCHEME_IOS_FALLBACK_LINK")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_BadUriSchemeIpadFallbackLink
 *        iPad fallback link has an invalid (non http/https) URI scheme. (Value:
 *        "BAD_URI_SCHEME_IPAD_FALLBACK_LINK")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_BadUriSchemeSocialImageLink
 *        Social meta tag image link has an invalid (non http/https) URI scheme.
 *        (Value: "BAD_URI_SCHEME_SOCIAL_IMAGE_LINK")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_BadUriSchemeSocialUrl
 *        Value "BAD_URI_SCHEME_SOCIAL_URL"
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_CodeUnspecified
 *        Unknown code. (Value: "CODE_UNSPECIFIED")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_DeprecatedParam
 *        Indicates a certain param is deprecated. (Value: "DEPRECATED_PARAM")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_LinkLengthTooLong
 *        Dynamic Link URL length is too long. (Value: "LINK_LENGTH_TOO_LONG")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_LinkWithFragments
 *        Dynamic Link URL contains fragments. (Value: "LINK_WITH_FRAGMENTS")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotInProjectAndroidPackageName
 *        The Android package does not match any in developer's DevConsole
 *        project. (Value: "NOT_IN_PROJECT_ANDROID_PACKAGE_NAME")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotInProjectIosBundleId
 *        The iOS bundle ID does not match any in developer's DevConsole
 *        project. (Value: "NOT_IN_PROJECT_IOS_BUNDLE_ID")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotInProjectIpadBundleId
 *        The iPad bundle ID does not match any in developer's DevConsole
 *        project. (Value: "NOT_IN_PROJECT_IPAD_BUNDLE_ID")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotIntegerAndroidPackageMinVersion
 *        The Android minimum version code has to be a valid integer. (Value:
 *        "NOT_INTEGER_ANDROID_PACKAGE_MIN_VERSION")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotMatchingIosBundleIdAndStoreId
 *        The iOS bundle ID does not match with the given iOS store ID. (Value:
 *        "NOT_MATCHING_IOS_BUNDLE_ID_AND_STORE_ID")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotNumericIosAppStoreId
 *        iOS app store ID format is incorrect, e.g. not numeric. (Value:
 *        "NOT_NUMERIC_IOS_APP_STORE_ID")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotUriAndroidFallbackLink
 *        Android fallback link is not a valid URI. (Value:
 *        "NOT_URI_ANDROID_FALLBACK_LINK")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotUriAndroidLink
 *        Android link is not a valid URI. (Value: "NOT_URI_ANDROID_LINK")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotUriIosFallbackLink
 *        iOS fallback link is not a valid URI. (Value:
 *        "NOT_URI_IOS_FALLBACK_LINK")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotUriIpadFallbackLink
 *        iPad fallback link is not a valid URI. (Value:
 *        "NOT_URI_IPAD_FALLBACK_LINK")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotUriSocialImageLink
 *        Social meta tag image link is not a valid URI. (Value:
 *        "NOT_URI_SOCIAL_IMAGE_LINK")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_NotUriSocialUrl
 *        Value "NOT_URI_SOCIAL_URL"
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_TooLongParam
 *        Indicates certain paramater is too long. (Value: "TOO_LONG_PARAM")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_UnnecessaryAndroidLink
 *        Android link param is not needed, e.g. when param 'al' and 'link' have
 *        the same value.. (Value: "UNNECESSARY_ANDROID_LINK")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_UnnecessaryAndroidPackageMinVersion
 *        Android package min version param is not needed, e.g. when
 *        'apn' is missing. (Value: "UNNECESSARY_ANDROID_PACKAGE_MIN_VERSION")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_UnnecessaryIosAppStoreId
 *        iOS app store ID is not needed. (Value:
 *        "UNNECESSARY_IOS_APP_STORE_ID")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_UnnecessaryIosUrlScheme
 *        iOS URL scheme is not needed, e.g. when 'ibi' are 'ipbi' are all
 *        missing. (Value: "UNNECESSARY_IOS_URL_SCHEME")
 *    @arg @c kGTLRFirebaseDynamicLinks_DynamicLinkWarning_WarningCode_UnrecognizedParam
 *        Indicates certain paramater is not recognized. (Value:
 *        "UNRECOGNIZED_PARAM")
 */
@property(nonatomic, copy, nullable) NSString *warningCode;

/** The document describing the warning, and helps resolve. */
@property(nonatomic, copy, nullable) NSString *warningDocumentLink;

/** The warning message to help developers improve their requests. */
@property(nonatomic, copy, nullable) NSString *warningMessage;

@end


/**
 *  Request for iSDK to execute strong match flow for post-install attribution.
 *  This is meant for iOS requests only. Requests from other platforms will
 *  not be honored.
 */
@interface GTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest : GTLRObject

/**
 *  App installation epoch time (https://en.wikipedia.org/wiki/Unix_time).
 *  This is a client signal for a more accurate weak match.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *appInstallationTime;

/** APP bundle ID. */
@property(nonatomic, copy, nullable) NSString *bundleId;

/** Device information. */
@property(nonatomic, strong, nullable) GTLRFirebaseDynamicLinks_DeviceInfo *device;

/**
 *  iOS version, ie: 9.3.5.
 *  Consider adding "build".
 */
@property(nonatomic, copy, nullable) NSString *iosVersion;

/**
 *  App post install attribution retrieval information. Disambiguates
 *  mechanism (iSDK or developer invoked) to retrieve payload from
 *  clicked link.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest_RetrievalMethod_ExplicitStrongAfterWeakMatch
 *        iSDK performs a strong match only if weak match is found upon a dev
 *        API call. (Value: "EXPLICIT_STRONG_AFTER_WEAK_MATCH")
 *    @arg @c kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest_RetrievalMethod_ExplicitWeakMatch
 *        iSDK performs a server lookup by device fingerprint upon a dev API
 *        call. (Value: "EXPLICIT_WEAK_MATCH")
 *    @arg @c kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest_RetrievalMethod_ImplicitWeakMatch
 *        iSDK performs a server lookup by device fingerprint in the background
 *        when app is first-opened; no API called by developer. (Value:
 *        "IMPLICIT_WEAK_MATCH")
 *    @arg @c kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest_RetrievalMethod_UnknownPayloadRetrievalMethod
 *        Unknown method. (Value: "UNKNOWN_PAYLOAD_RETRIEVAL_METHOD")
 */
@property(nonatomic, copy, nullable) NSString *retrievalMethod;

/** Google SDK version. Version takes the form "$major.$minor.$patch" */
@property(nonatomic, copy, nullable) NSString *sdkVersion;

/**
 *  Possible unique matched link that server need to check before performing
 *  fingerprint match. If passed link is short server need to expand the link.
 *  If link is long server need to vslidate the link.
 */
@property(nonatomic, copy, nullable) NSString *uniqueMatchLinkToCheck;

/**
 *  Strong match page information. Disambiguates between default UI and
 *  custom page to present when strong match succeeds/fails to find cookie.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest_VisualStyle_CustomStyle
 *        Custom style. (Value: "CUSTOM_STYLE")
 *    @arg @c kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest_VisualStyle_DefaultStyle
 *        Default style. (Value: "DEFAULT_STYLE")
 *    @arg @c kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionRequest_VisualStyle_UnknownVisualStyle
 *        Unknown style. (Value: "UNKNOWN_VISUAL_STYLE")
 */
@property(nonatomic, copy, nullable) NSString *visualStyle;

@end


/**
 *  Response for iSDK to execute strong match flow for post-install attribution.
 */
@interface GTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse : GTLRObject

/**
 *  The minimum version for app, specified by dev through ?imv= parameter.
 *  Return to iSDK to allow app to evaluate if current version meets this.
 */
@property(nonatomic, copy, nullable) NSString *appMinimumVersion;

/**
 *  The confidence of the returned attribution.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse_AttributionConfidence_Default
 *        Default confidence, match based on fingerprint (Value: "DEFAULT")
 *    @arg @c kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse_AttributionConfidence_Unique
 *        Unique confidence, match based on "unique match link to check" or
 *        other
 *        means (Value: "UNIQUE")
 *    @arg @c kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse_AttributionConfidence_UnknownAttributionConfidence
 *        Unset. (Value: "UNKNOWN_ATTRIBUTION_CONFIDENCE")
 *    @arg @c kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse_AttributionConfidence_Weak
 *        Weak confidence, more than one matching link found or link suspected
 *        to
 *        be false positive (Value: "WEAK")
 */
@property(nonatomic, copy, nullable) NSString *attributionConfidence;

/**
 *  The deep-link attributed post-install via one of several techniques
 *  (fingerprint, copy unique).
 */
@property(nonatomic, copy, nullable) NSString *deepLink;

/**
 *  User-agent specific custom-scheme URIs for iSDK to open. This will be set
 *  according to the user-agent tha the click was originally made in. There is
 *  no Safari-equivalent custom-scheme open URLs.
 *  ie: googlechrome://www.example.com
 *  ie: firefox://open-url?url=http://www.example.com
 *  ie: opera-http://example.com
 */
@property(nonatomic, copy, nullable) NSString *externalBrowserDestinationLink;

/**
 *  The link to navigate to update the app if min version is not met.
 *  This is either (in order): 1) fallback link (from ?ifl= parameter, if
 *  specified by developer) or 2) AppStore URL (from ?isi= parameter, if
 *  specified), or 3) the payload link (from required link= parameter).
 */
@property(nonatomic, copy, nullable) NSString *fallbackLink;

/**
 *  Invitation ID attributed post-install via one of several techniques
 *  (fingerprint, copy unique).
 */
@property(nonatomic, copy, nullable) NSString *invitationId;

/**
 *  Instruction for iSDK to attemmpt to perform strong match. For instance,
 *  if browser does not support/allow cookie or outside of support browsers,
 *  this will be false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isStrongMatchExecutable;

/**
 *  Describes why match failed, ie: "discarded due to low confidence".
 *  This message will be publicly visible.
 */
@property(nonatomic, copy, nullable) NSString *matchMessage;

/**
 *  Entire FDL (short or long) attributed post-install via one of several
 *  techniques (fingerprint, copy unique).
 */
@property(nonatomic, copy, nullable) NSString *requestedLink;

/**
 *  Which IP version the request was made from.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse_RequestIpVersion_IpV4
 *        Request made from an IPv4 IP address. (Value: "IP_V4")
 *    @arg @c kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse_RequestIpVersion_IpV6
 *        Request made from an IPv6 IP address. (Value: "IP_V6")
 *    @arg @c kGTLRFirebaseDynamicLinks_GetIosPostInstallAttributionResponse_RequestIpVersion_UnknownIpVersion
 *        Unset. (Value: "UNKNOWN_IP_VERSION")
 */
@property(nonatomic, copy, nullable) NSString *requestIpVersion;

/**
 *  The entire FDL, expanded from a short link. It is the same as the
 *  requested_link, if it is long. Parameters from this should not be
 *  used directly (ie: server can default utm_[campaign|medium|source]
 *  to a value when requested_link lack them, server determine the best
 *  fallback_link when requested_link specifies >1 fallback links).
 */
@property(nonatomic, copy, nullable) NSString *resolvedLink;

/** Scion campaign value to be propagated by iSDK to Scion at post-install. */
@property(nonatomic, copy, nullable) NSString *utmCampaign;

/** Scion medium value to be propagated by iSDK to Scion at post-install. */
@property(nonatomic, copy, nullable) NSString *utmMedium;

/** Scion source value to be propagated by iSDK to Scion at post-install. */
@property(nonatomic, copy, nullable) NSString *utmSource;

@end


/**
 *  Request for iSDK to get reopen attribution for app universal link open
 *  deeplinking. This endpoint is meant for only iOS requests.
 */
@interface GTLRFirebaseDynamicLinks_GetIosReopenAttributionRequest : GTLRObject

/** APP bundle ID. */
@property(nonatomic, copy, nullable) NSString *bundleId;

/**
 *  FDL link to be verified from an app universal link open.
 *  The FDL link can be one of:
 *  1) short FDL.
 *  e.g. <app_code>.page.link/<ddl_id>, or
 *  2) long FDL.
 *  e.g. <app_code>.page.link/?{query params}, or
 *  3) Invite FDL.
 *  e.g. <app_code>.page.link/i/<invite_id_or_alias>
 */
@property(nonatomic, copy, nullable) NSString *requestedLink;

/** Google SDK version. Version takes the form "$major.$minor.$patch" */
@property(nonatomic, copy, nullable) NSString *sdkVersion;

@end


/**
 *  Response for iSDK to get reopen attribution for app universal link open
 *  deeplinking. This endpoint is meant for only iOS requests.
 */
@interface GTLRFirebaseDynamicLinks_GetIosReopenAttributionResponse : GTLRObject

/**
 *  The deep-link attributed the app universal link open. For both regular
 *  FDL links and invite FDL links.
 */
@property(nonatomic, copy, nullable) NSString *deepLink;

/** Optional invitation ID, for only invite typed requested FDL links. */
@property(nonatomic, copy, nullable) NSString *invitationId;

/**
 *  FDL input value of the "&imv=" parameter, minimum app version to be
 *  returned to Google Firebase SDK running on iOS-9.
 */
@property(nonatomic, copy, nullable) NSString *iosMinAppVersion;

/**
 *  The entire FDL, expanded from a short link. It is the same as the
 *  requested_link, if it is long.
 */
@property(nonatomic, copy, nullable) NSString *resolvedLink;

/** Scion campaign value to be propagated by iSDK to Scion at app-reopen. */
@property(nonatomic, copy, nullable) NSString *utmCampaign;

/** Scion medium value to be propagated by iSDK to Scion at app-reopen. */
@property(nonatomic, copy, nullable) NSString *utmMedium;

/** Scion source value to be propagated by iSDK to Scion at app-reopen. */
@property(nonatomic, copy, nullable) NSString *utmSource;

@end


/**
 *  Parameters for Google Play Campaign Measurements.
 *  [Learn
 *  more](https://developers.google.com/analytics/devguides/collection/android/v4/campaigns#campaign-params)
 */
@interface GTLRFirebaseDynamicLinks_GooglePlayAnalytics : GTLRObject

/**
 *  [AdWords autotagging
 *  parameter](https://support.google.com/analytics/answer/1033981?hl=en);
 *  used to measure Google AdWords ads. This value is generated dynamically
 *  and should never be modified.
 */
@property(nonatomic, copy, nullable) NSString *gclid;

/**
 *  Campaign name; used for keyword analysis to identify a specific product
 *  promotion or strategic campaign.
 */
@property(nonatomic, copy, nullable) NSString *utmCampaign;

/**
 *  Campaign content; used for A/B testing and content-targeted ads to
 *  differentiate ads or links that point to the same URL.
 */
@property(nonatomic, copy, nullable) NSString *utmContent;

/**
 *  Campaign medium; used to identify a medium such as email or cost-per-click.
 */
@property(nonatomic, copy, nullable) NSString *utmMedium;

/**
 *  Campaign source; used to identify a search engine, newsletter, or other
 *  source.
 */
@property(nonatomic, copy, nullable) NSString *utmSource;

/** Campaign term; used with paid search to supply the keywords for ads. */
@property(nonatomic, copy, nullable) NSString *utmTerm;

@end


/**
 *  iOS related attributes to the Dynamic Link..
 */
@interface GTLRFirebaseDynamicLinks_IosInfo : GTLRObject

/** iOS App Store ID. */
@property(nonatomic, copy, nullable) NSString *iosAppStoreId;

/** iOS bundle ID of the app. */
@property(nonatomic, copy, nullable) NSString *iosBundleId;

/**
 *  Custom (destination) scheme to use for iOS. By default, we’ll use the
 *  bundle ID as the custom scheme. Developer can override this behavior using
 *  this param.
 */
@property(nonatomic, copy, nullable) NSString *iosCustomScheme;

/** Link to open on iOS if the app is not installed. */
@property(nonatomic, copy, nullable) NSString *iosFallbackLink;

/** iPad bundle ID of the app. */
@property(nonatomic, copy, nullable) NSString *iosIpadBundleId;

/** If specified, this overrides the ios_fallback_link value on iPads. */
@property(nonatomic, copy, nullable) NSString *iosIpadFallbackLink;

/** iOS minimum version. */
@property(nonatomic, copy, nullable) NSString *iosMinimumVersion;

@end


/**
 *  Parameters for iTunes Connect App Analytics.
 */
@interface GTLRFirebaseDynamicLinks_ITunesConnectAnalytics : GTLRObject

/** Affiliate token used to create affiliate-coded links. */
@property(nonatomic, copy, nullable) NSString *at;

/**
 *  Campaign text that developers can optionally add to any link in order to
 *  track sales from a specific marketing campaign.
 */
@property(nonatomic, copy, nullable) NSString *ct;

/** iTune media types, including music, podcasts, audiobooks and so on. */
@property(nonatomic, copy, nullable) NSString *mt;

/**
 *  Provider token that enables analytics for Dynamic Links from within iTunes
 *  Connect.
 */
@property(nonatomic, copy, nullable) NSString *pt;

@end


/**
 *  Managed Short Link.
 */
@interface GTLRFirebaseDynamicLinks_ManagedShortLink : GTLRObject

/** Creation timestamp of the short link. */
@property(nonatomic, strong, nullable) GTLRDateTime *creationTime;

/** Attributes that have been flagged about this short url. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *flaggedAttribute;

/** Full Dyamic Link info */
@property(nonatomic, strong, nullable) GTLRFirebaseDynamicLinks_DynamicLinkInfo *info;

/**
 *  Short durable link url, for example, "https://sample.app.goo.gl/xyz123".
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *link;

/**
 *  Link name defined by the creator.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *linkName;

/**
 *  Visibility status of link.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseDynamicLinks_ManagedShortLink_Visibility_Archived
 *        Link created in console and should not be shown in console (but can
 *        be shown in the console again if it is unarchived). (Value:
 *        "ARCHIVED")
 *    @arg @c kGTLRFirebaseDynamicLinks_ManagedShortLink_Visibility_NeverShown
 *        Link created outside of console and should never be shown in console.
 *        (Value: "NEVER_SHOWN")
 *    @arg @c kGTLRFirebaseDynamicLinks_ManagedShortLink_Visibility_Unarchived
 *        Link created in console and should be shown in console. (Value:
 *        "UNARCHIVED")
 *    @arg @c kGTLRFirebaseDynamicLinks_ManagedShortLink_Visibility_UnspecifiedVisibility
 *        Visibility of the link is not specified. (Value:
 *        "UNSPECIFIED_VISIBILITY")
 */
@property(nonatomic, copy, nullable) NSString *visibility;

@end


/**
 *  Information of navigation behavior.
 */
@interface GTLRFirebaseDynamicLinks_NavigationInfo : GTLRObject

/**
 *  If this option is on, FDL click will be forced to redirect rather than
 *  show an interstitial page.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableForcedRedirect;

@end


/**
 *  Parameters for social meta tag params.
 *  Used to set meta tag data for link previews on social sites.
 */
@interface GTLRFirebaseDynamicLinks_SocialMetaTagInfo : GTLRObject

/** A short description of the link. Optional. */
@property(nonatomic, copy, nullable) NSString *socialDescription;

/** An image url string. Optional. */
@property(nonatomic, copy, nullable) NSString *socialImageLink;

/** Title to be displayed. Optional. */
@property(nonatomic, copy, nullable) NSString *socialTitle;

@end


/**
 *  Short Dynamic Link suffix.
 */
@interface GTLRFirebaseDynamicLinks_Suffix : GTLRObject

/** Only applies to Option.CUSTOM. */
@property(nonatomic, copy, nullable) NSString *customSuffix;

/**
 *  Suffix option.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseDynamicLinks_Suffix_Option_Custom Custom DDL suffix
 *        is a client specified string, for example,
 *        "buy2get1free".
 *        NOTE: custom suffix should only be available to managed short link
 *        creation (Value: "CUSTOM")
 *    @arg @c kGTLRFirebaseDynamicLinks_Suffix_Option_OptionUnspecified The
 *        suffix option is not specified, performs as UNGUESSABLE . (Value:
 *        "OPTION_UNSPECIFIED")
 *    @arg @c kGTLRFirebaseDynamicLinks_Suffix_Option_Short Short Dynamic Link
 *        suffix is a base62 [0-9A-Za-z] string starting with a
 *        length of 4 chars. the length will increase when all the space is
 *        occupied. (Value: "SHORT")
 *    @arg @c kGTLRFirebaseDynamicLinks_Suffix_Option_Unguessable Short Dynamic
 *        Link suffix is a base62 [0-9A-Za-z] encoded string of
 *        a random generated 96 bit random number, which has a length of 17
 *        chars.
 *        For example, "nlAR8U4SlKRZw1cb2".
 *        It prevents other people from guessing and crawling short Dynamic
 *        Links
 *        that contain personal identifiable information. (Value: "UNGUESSABLE")
 */
@property(nonatomic, copy, nullable) NSString *option;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
