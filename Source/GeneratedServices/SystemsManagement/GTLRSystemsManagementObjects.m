// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud OS Config API (osconfig/v1)
// Description:
//   OS management tools that can be used for patch management, patch
//   compliance, and configuration management on VM instances.
// Documentation:
//   https://cloud.google.com/

#import "GTLRSystemsManagementObjects.h"

// ----------------------------------------------------------------------------
// Constants

// GTLRSystemsManagement_AptSettings.type
NSString * const kGTLRSystemsManagement_AptSettings_Type_Dist  = @"DIST";
NSString * const kGTLRSystemsManagement_AptSettings_Type_TypeUnspecified = @"TYPE_UNSPECIFIED";
NSString * const kGTLRSystemsManagement_AptSettings_Type_Upgrade = @"UPGRADE";

// GTLRSystemsManagement_ExecStepConfig.interpreter
NSString * const kGTLRSystemsManagement_ExecStepConfig_Interpreter_InterpreterUnspecified = @"INTERPRETER_UNSPECIFIED";
NSString * const kGTLRSystemsManagement_ExecStepConfig_Interpreter_Powershell = @"POWERSHELL";
NSString * const kGTLRSystemsManagement_ExecStepConfig_Interpreter_Shell = @"SHELL";

// GTLRSystemsManagement_PatchConfig.rebootConfig
NSString * const kGTLRSystemsManagement_PatchConfig_RebootConfig_Always = @"ALWAYS";
NSString * const kGTLRSystemsManagement_PatchConfig_RebootConfig_Default = @"DEFAULT";
NSString * const kGTLRSystemsManagement_PatchConfig_RebootConfig_Never = @"NEVER";
NSString * const kGTLRSystemsManagement_PatchConfig_RebootConfig_RebootConfigUnspecified = @"REBOOT_CONFIG_UNSPECIFIED";

// GTLRSystemsManagement_PatchJob.state
NSString * const kGTLRSystemsManagement_PatchJob_State_Canceled = @"CANCELED";
NSString * const kGTLRSystemsManagement_PatchJob_State_CompletedWithErrors = @"COMPLETED_WITH_ERRORS";
NSString * const kGTLRSystemsManagement_PatchJob_State_InstanceLookup = @"INSTANCE_LOOKUP";
NSString * const kGTLRSystemsManagement_PatchJob_State_Patching = @"PATCHING";
NSString * const kGTLRSystemsManagement_PatchJob_State_Started = @"STARTED";
NSString * const kGTLRSystemsManagement_PatchJob_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRSystemsManagement_PatchJob_State_Succeeded = @"SUCCEEDED";
NSString * const kGTLRSystemsManagement_PatchJob_State_TimedOut = @"TIMED_OUT";

// GTLRSystemsManagement_PatchJobInstanceDetails.state
NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_Acked = @"ACKED";
NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_ApplyingPatches = @"APPLYING_PATCHES";
NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_DownloadingPatches = @"DOWNLOADING_PATCHES";
NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_Failed = @"FAILED";
NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_Inactive = @"INACTIVE";
NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_NoAgentDetected = @"NO_AGENT_DETECTED";
NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_Notified = @"NOTIFIED";
NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_PatchStateUnspecified = @"PATCH_STATE_UNSPECIFIED";
NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_Pending = @"PENDING";
NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_Rebooting = @"REBOOTING";
NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_RunningPostPatchStep = @"RUNNING_POST_PATCH_STEP";
NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_RunningPrePatchStep = @"RUNNING_PRE_PATCH_STEP";
NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_Started = @"STARTED";
NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_Succeeded = @"SUCCEEDED";
NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_SucceededRebootRequired = @"SUCCEEDED_REBOOT_REQUIRED";
NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_TimedOut = @"TIMED_OUT";

// GTLRSystemsManagement_RecurringSchedule.frequency
NSString * const kGTLRSystemsManagement_RecurringSchedule_Frequency_FrequencyUnspecified = @"FREQUENCY_UNSPECIFIED";
NSString * const kGTLRSystemsManagement_RecurringSchedule_Frequency_Monthly = @"MONTHLY";
NSString * const kGTLRSystemsManagement_RecurringSchedule_Frequency_Weekly = @"WEEKLY";

// GTLRSystemsManagement_WeekDayOfMonth.dayOfWeek
NSString * const kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_DayOfWeekUnspecified = @"DAY_OF_WEEK_UNSPECIFIED";
NSString * const kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Friday = @"FRIDAY";
NSString * const kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Monday = @"MONDAY";
NSString * const kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Saturday = @"SATURDAY";
NSString * const kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Sunday = @"SUNDAY";
NSString * const kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Thursday = @"THURSDAY";
NSString * const kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Tuesday = @"TUESDAY";
NSString * const kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Wednesday = @"WEDNESDAY";

// GTLRSystemsManagement_WeeklySchedule.dayOfWeek
NSString * const kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_DayOfWeekUnspecified = @"DAY_OF_WEEK_UNSPECIFIED";
NSString * const kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Friday = @"FRIDAY";
NSString * const kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Monday = @"MONDAY";
NSString * const kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Saturday = @"SATURDAY";
NSString * const kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Sunday = @"SUNDAY";
NSString * const kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Thursday = @"THURSDAY";
NSString * const kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Tuesday = @"TUESDAY";
NSString * const kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Wednesday = @"WEDNESDAY";

// GTLRSystemsManagement_WindowsUpdateSettings.classifications
NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_ClassificationUnspecified = @"CLASSIFICATION_UNSPECIFIED";
NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_Critical = @"CRITICAL";
NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_Definition = @"DEFINITION";
NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_Driver = @"DRIVER";
NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_FeaturePack = @"FEATURE_PACK";
NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_Security = @"SECURITY";
NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_ServicePack = @"SERVICE_PACK";
NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_Tool = @"TOOL";
NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_Update = @"UPDATE";
NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_UpdateRollup = @"UPDATE_ROLLUP";

// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_AptSettings
//

@implementation GTLRSystemsManagement_AptSettings
@dynamic excludes, exclusivePackages, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"excludes" : [NSString class],
    @"exclusivePackages" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_CancelPatchJobRequest
//

@implementation GTLRSystemsManagement_CancelPatchJobRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_Empty
//

@implementation GTLRSystemsManagement_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_ExecStep
//

@implementation GTLRSystemsManagement_ExecStep
@dynamic linuxExecStepConfig, windowsExecStepConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_ExecStepConfig
//

@implementation GTLRSystemsManagement_ExecStepConfig
@dynamic allowedSuccessCodes, gcsObject, interpreter, localPath;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"allowedSuccessCodes" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_ExecutePatchJobRequest
//

@implementation GTLRSystemsManagement_ExecutePatchJobRequest
@dynamic descriptionProperty, displayName, dryRun, duration, instanceFilter,
         patchConfig;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_GcsObject
//

@implementation GTLRSystemsManagement_GcsObject
@dynamic bucket, generationNumber, object;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_GooSettings
//

@implementation GTLRSystemsManagement_GooSettings
@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_ListPatchDeploymentsResponse
//

@implementation GTLRSystemsManagement_ListPatchDeploymentsResponse
@dynamic nextPageToken, patchDeployments;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"patchDeployments" : [GTLRSystemsManagement_PatchDeployment class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"patchDeployments";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_ListPatchJobInstanceDetailsResponse
//

@implementation GTLRSystemsManagement_ListPatchJobInstanceDetailsResponse
@dynamic nextPageToken, patchJobInstanceDetails;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"patchJobInstanceDetails" : [GTLRSystemsManagement_PatchJobInstanceDetails class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"patchJobInstanceDetails";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_ListPatchJobsResponse
//

@implementation GTLRSystemsManagement_ListPatchJobsResponse
@dynamic nextPageToken, patchJobs;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"patchJobs" : [GTLRSystemsManagement_PatchJob class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"patchJobs";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_MonthlySchedule
//

@implementation GTLRSystemsManagement_MonthlySchedule
@dynamic monthDay, weekDayOfMonth;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_OneTimeSchedule
//

@implementation GTLRSystemsManagement_OneTimeSchedule
@dynamic executeTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_PatchConfig
//

@implementation GTLRSystemsManagement_PatchConfig
@dynamic apt, goo, postStep, preStep, rebootConfig, windowsUpdate, yum, zypper;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_PatchDeployment
//

@implementation GTLRSystemsManagement_PatchDeployment
@dynamic createTime, descriptionProperty, duration, instanceFilter,
         lastExecuteTime, name, oneTimeSchedule, patchConfig, recurringSchedule,
         updateTime;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_PatchInstanceFilter
//

@implementation GTLRSystemsManagement_PatchInstanceFilter
@dynamic all, groupLabels, instanceNamePrefixes, instances, zones;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"groupLabels" : [GTLRSystemsManagement_PatchInstanceFilterGroupLabel class],
    @"instanceNamePrefixes" : [NSString class],
    @"instances" : [NSString class],
    @"zones" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_PatchInstanceFilterGroupLabel
//

@implementation GTLRSystemsManagement_PatchInstanceFilterGroupLabel
@dynamic labels;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_PatchInstanceFilterGroupLabel_Labels
//

@implementation GTLRSystemsManagement_PatchInstanceFilterGroupLabel_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_PatchJob
//

@implementation GTLRSystemsManagement_PatchJob
@dynamic createTime, descriptionProperty, displayName, dryRun, duration,
         errorMessage, instanceDetailsSummary, instanceFilter, name,
         patchConfig, patchDeployment, percentComplete, state, updateTime;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_PatchJobInstanceDetails
//

@implementation GTLRSystemsManagement_PatchJobInstanceDetails
@dynamic attemptCount, failureReason, instanceSystemId, name, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_PatchJobInstanceDetailsSummary
//

@implementation GTLRSystemsManagement_PatchJobInstanceDetailsSummary
@dynamic ackedInstanceCount, applyingPatchesInstanceCount,
         downloadingPatchesInstanceCount, failedInstanceCount,
         inactiveInstanceCount, noAgentDetectedInstanceCount,
         notifiedInstanceCount, pendingInstanceCount,
         postPatchStepInstanceCount, prePatchStepInstanceCount,
         rebootingInstanceCount, startedInstanceCount, succeededInstanceCount,
         succeededRebootRequiredInstanceCount, timedOutInstanceCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_RecurringSchedule
//

@implementation GTLRSystemsManagement_RecurringSchedule
@dynamic endTime, frequency, lastExecuteTime, monthly, nextExecuteTime,
         startTime, timeOfDay, timeZone, weekly;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_TimeOfDay
//

@implementation GTLRSystemsManagement_TimeOfDay
@dynamic hours, minutes, nanos, seconds;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_TimeZone
//

@implementation GTLRSystemsManagement_TimeZone
@dynamic identifier, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_WeekDayOfMonth
//

@implementation GTLRSystemsManagement_WeekDayOfMonth
@dynamic dayOfWeek, weekOrdinal;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_WeeklySchedule
//

@implementation GTLRSystemsManagement_WeeklySchedule
@dynamic dayOfWeek;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_WindowsUpdateSettings
//

@implementation GTLRSystemsManagement_WindowsUpdateSettings
@dynamic classifications, excludes, exclusivePatches;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"classifications" : [NSString class],
    @"excludes" : [NSString class],
    @"exclusivePatches" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_YumSettings
//

@implementation GTLRSystemsManagement_YumSettings
@dynamic excludes, exclusivePackages, minimal, security;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"excludes" : [NSString class],
    @"exclusivePackages" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSystemsManagement_ZypperSettings
//

@implementation GTLRSystemsManagement_ZypperSettings
@dynamic categories, excludes, exclusivePatches, severities, withOptional,
         withUpdate;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"categories" : [NSString class],
    @"excludes" : [NSString class],
    @"exclusivePatches" : [NSString class],
    @"severities" : [NSString class]
  };
  return map;
}

@end
