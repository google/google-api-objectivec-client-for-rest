// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud OS Config API (osconfig/v1)
// Description:
//   OS management tools that can be used for patch management, patch
//   compliance, and configuration management on VM instances.
// Documentation:
//   https://cloud.google.com/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRSystemsManagement_AptSettings;
@class GTLRSystemsManagement_ExecStep;
@class GTLRSystemsManagement_ExecStepConfig;
@class GTLRSystemsManagement_FixedOrPercent;
@class GTLRSystemsManagement_GcsObject;
@class GTLRSystemsManagement_GooSettings;
@class GTLRSystemsManagement_MonthlySchedule;
@class GTLRSystemsManagement_OneTimeSchedule;
@class GTLRSystemsManagement_PatchConfig;
@class GTLRSystemsManagement_PatchDeployment;
@class GTLRSystemsManagement_PatchInstanceFilter;
@class GTLRSystemsManagement_PatchInstanceFilterGroupLabel;
@class GTLRSystemsManagement_PatchInstanceFilterGroupLabel_Labels;
@class GTLRSystemsManagement_PatchJob;
@class GTLRSystemsManagement_PatchJobInstanceDetails;
@class GTLRSystemsManagement_PatchJobInstanceDetailsSummary;
@class GTLRSystemsManagement_PatchRollout;
@class GTLRSystemsManagement_RecurringSchedule;
@class GTLRSystemsManagement_TimeOfDay;
@class GTLRSystemsManagement_TimeZone;
@class GTLRSystemsManagement_WeekDayOfMonth;
@class GTLRSystemsManagement_WeeklySchedule;
@class GTLRSystemsManagement_WindowsUpdateSettings;
@class GTLRSystemsManagement_YumSettings;
@class GTLRSystemsManagement_ZypperSettings;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRSystemsManagement_AptSettings.type

/**
 *  Runs `apt-get dist-upgrade`.
 *
 *  Value: "DIST"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_AptSettings_Type_Dist;
/**
 *  By default, upgrade will be performed.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_AptSettings_Type_TypeUnspecified;
/**
 *  Runs `apt-get upgrade`.
 *
 *  Value: "UPGRADE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_AptSettings_Type_Upgrade;

// ----------------------------------------------------------------------------
// GTLRSystemsManagement_ExecStepConfig.interpreter

/**
 *  Invalid for a Windows ExecStepConfig. For a Linux ExecStepConfig, the
 *  interpreter will be parsed from the shebang line of the script if
 *  unspecified.
 *
 *  Value: "INTERPRETER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_ExecStepConfig_Interpreter_InterpreterUnspecified;
/**
 *  Indicates that the file is run with PowerShell flags `-NonInteractive`,
 *  `-NoProfile`, and `-ExecutionPolicy Bypass`.
 *
 *  Value: "POWERSHELL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_ExecStepConfig_Interpreter_Powershell;
/**
 *  Indicates that the script is run with `/bin/sh` on Linux and `cmd` on
 *  Windows.
 *
 *  Value: "SHELL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_ExecStepConfig_Interpreter_Shell;

// ----------------------------------------------------------------------------
// GTLRSystemsManagement_PatchConfig.rebootConfig

/**
 *  Always reboot the machine after the update completes.
 *
 *  Value: "ALWAYS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchConfig_RebootConfig_Always;
/**
 *  The agent decides if a reboot is necessary by checking signals such as
 *  registry keys on Windows or `/var/run/reboot-required` on APT based systems.
 *  On RPM based systems, a set of core system package install times are
 *  compared with system boot time.
 *
 *  Value: "DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchConfig_RebootConfig_Default;
/**
 *  Never reboot the machine after the update completes.
 *
 *  Value: "NEVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchConfig_RebootConfig_Never;
/**
 *  The default behavior is DEFAULT.
 *
 *  Value: "REBOOT_CONFIG_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchConfig_RebootConfig_RebootConfigUnspecified;

// ----------------------------------------------------------------------------
// GTLRSystemsManagement_PatchJob.state

/**
 *  The patch job was canceled.
 *
 *  Value: "CANCELED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJob_State_Canceled;
/**
 *  Patch job completed but there were errors.
 *
 *  Value: "COMPLETED_WITH_ERRORS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJob_State_CompletedWithErrors;
/**
 *  The patch job is looking up instances to run the patch on.
 *
 *  Value: "INSTANCE_LOOKUP"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJob_State_InstanceLookup;
/**
 *  Instances are being patched.
 *
 *  Value: "PATCHING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJob_State_Patching;
/**
 *  The patch job was successfully initiated.
 *
 *  Value: "STARTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJob_State_Started;
/**
 *  State must be specified.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJob_State_StateUnspecified;
/**
 *  Patch job completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJob_State_Succeeded;
/**
 *  The patch job timed out.
 *
 *  Value: "TIMED_OUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJob_State_TimedOut;

// ----------------------------------------------------------------------------
// GTLRSystemsManagement_PatchJobInstanceDetails.state

/**
 *  The instance acked the notification and will start shortly.
 *
 *  Value: "ACKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_Acked;
/**
 *  The instance is applying patches.
 *
 *  Value: "APPLYING_PATCHES"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_ApplyingPatches;
/**
 *  The instance is downloading patches.
 *
 *  Value: "DOWNLOADING_PATCHES"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_DownloadingPatches;
/**
 *  The instance has failed to apply the patch.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_Failed;
/**
 *  Instance is inactive and cannot be patched.
 *
 *  Value: "INACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_Inactive;
/**
 *  The service could not detect the presence of the agent. Check to ensure that
 *  the agent is installed, running, and able to communicate with the service.
 *
 *  Value: "NO_AGENT_DETECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_NoAgentDetected;
/**
 *  The instance is notified that it should be patched.
 *
 *  Value: "NOTIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_Notified;
/**
 *  Unspecified.
 *
 *  Value: "PATCH_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_PatchStateUnspecified;
/**
 *  The instance is not yet notified.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_Pending;
/**
 *  The instance is rebooting.
 *
 *  Value: "REBOOTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_Rebooting;
/**
 *  The instance is running the post-patch step.
 *
 *  Value: "RUNNING_POST_PATCH_STEP"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_RunningPostPatchStep;
/**
 *  The instance is running the pre-patch step.
 *
 *  Value: "RUNNING_PRE_PATCH_STEP"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_RunningPrePatchStep;
/**
 *  The instance has started the patching process.
 *
 *  Value: "STARTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_Started;
/**
 *  The instance has completed applying patches.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_Succeeded;
/**
 *  The instance has completed applying patches but a reboot is required.
 *
 *  Value: "SUCCEEDED_REBOOT_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_SucceededRebootRequired;
/**
 *  The instance exceeded the time out while applying the patch.
 *
 *  Value: "TIMED_OUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchJobInstanceDetails_State_TimedOut;

// ----------------------------------------------------------------------------
// GTLRSystemsManagement_PatchRollout.mode

/**
 *  Patches are applied to VMs in all zones at the same time.
 *
 *  Value: "CONCURRENT_ZONES"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchRollout_Mode_ConcurrentZones;
/**
 *  Mode must be specified.
 *
 *  Value: "MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchRollout_Mode_ModeUnspecified;
/**
 *  Patches are applied one zone at a time. The patch job begins in the region
 *  with the lowest number of targeted VMs. Within the region, patching begins
 *  in the zone with the lowest number of targeted VMs. If multiple regions (or
 *  zones within a region) have the same number of targeted VMs, a tie-breaker
 *  is achieved by sorting the regions or zones in alphabetical order.
 *
 *  Value: "ZONE_BY_ZONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_PatchRollout_Mode_ZoneByZone;

// ----------------------------------------------------------------------------
// GTLRSystemsManagement_RecurringSchedule.frequency

/**
 *  Invalid. A frequency must be specified.
 *
 *  Value: "FREQUENCY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_RecurringSchedule_Frequency_FrequencyUnspecified;
/**
 *  Indicates that the frequency should be expressed in terms of months.
 *
 *  Value: "MONTHLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_RecurringSchedule_Frequency_Monthly;
/**
 *  Indicates that the frequency should be expressed in terms of weeks.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_RecurringSchedule_Frequency_Weekly;

// ----------------------------------------------------------------------------
// GTLRSystemsManagement_WeekDayOfMonth.dayOfWeek

/**
 *  The day of the week is unspecified.
 *
 *  Value: "DAY_OF_WEEK_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_DayOfWeekUnspecified;
/**
 *  Friday
 *
 *  Value: "FRIDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Friday;
/**
 *  Monday
 *
 *  Value: "MONDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Monday;
/**
 *  Saturday
 *
 *  Value: "SATURDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Saturday;
/**
 *  Sunday
 *
 *  Value: "SUNDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Sunday;
/**
 *  Thursday
 *
 *  Value: "THURSDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Thursday;
/**
 *  Tuesday
 *
 *  Value: "TUESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Tuesday;
/**
 *  Wednesday
 *
 *  Value: "WEDNESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Wednesday;

// ----------------------------------------------------------------------------
// GTLRSystemsManagement_WeeklySchedule.dayOfWeek

/**
 *  The day of the week is unspecified.
 *
 *  Value: "DAY_OF_WEEK_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_DayOfWeekUnspecified;
/**
 *  Friday
 *
 *  Value: "FRIDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Friday;
/**
 *  Monday
 *
 *  Value: "MONDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Monday;
/**
 *  Saturday
 *
 *  Value: "SATURDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Saturday;
/**
 *  Sunday
 *
 *  Value: "SUNDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Sunday;
/**
 *  Thursday
 *
 *  Value: "THURSDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Thursday;
/**
 *  Tuesday
 *
 *  Value: "TUESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Tuesday;
/**
 *  Wednesday
 *
 *  Value: "WEDNESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Wednesday;

// ----------------------------------------------------------------------------
// GTLRSystemsManagement_WindowsUpdateSettings.classifications

/**
 *  Invalid. If classifications are included, they must be specified.
 *
 *  Value: "CLASSIFICATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_ClassificationUnspecified;
/**
 *  "A widely released fix for a specific problem that addresses a critical,
 *  non-security-related bug." [1]
 *
 *  Value: "CRITICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_Critical;
/**
 *  "A widely released and frequent software update that contains additions to a
 *  product's definition database. Definition databases are often used to detect
 *  objects that have specific attributes, such as malicious code, phishing
 *  websites, or junk mail." [1]
 *
 *  Value: "DEFINITION"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_Definition;
/**
 *  "Software that controls the input and output of a device." [1]
 *
 *  Value: "DRIVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_Driver;
/**
 *  "New product functionality that is first distributed outside the context of
 *  a product release and that is typically included in the next full product
 *  release." [1]
 *
 *  Value: "FEATURE_PACK"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_FeaturePack;
/**
 *  "A widely released fix for a product-specific, security-related
 *  vulnerability. Security vulnerabilities are rated by their severity. The
 *  severity rating is indicated in the Microsoft security bulletin as critical,
 *  important, moderate, or low." [1]
 *
 *  Value: "SECURITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_Security;
/**
 *  "A tested, cumulative set of all hotfixes, security updates, critical
 *  updates, and updates. Additionally, service packs may contain additional
 *  fixes for problems that are found internally since the release of the
 *  product. Service packs my also contain a limited number of
 *  customer-requested design changes or features." [1]
 *
 *  Value: "SERVICE_PACK"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_ServicePack;
/**
 *  "A utility or feature that helps complete a task or set of tasks." [1]
 *
 *  Value: "TOOL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_Tool;
/**
 *  "A widely released fix for a specific problem. An update addresses a
 *  noncritical, non-security-related bug." [1]
 *
 *  Value: "UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_Update;
/**
 *  "A tested, cumulative set of hotfixes, security updates, critical updates,
 *  and updates that are packaged together for easy deployment. A rollup
 *  generally targets a specific area, such as security, or a component of a
 *  product, such as Internet Information Services (IIS)." [1]
 *
 *  Value: "UPDATE_ROLLUP"
 */
FOUNDATION_EXTERN NSString * const kGTLRSystemsManagement_WindowsUpdateSettings_Classifications_UpdateRollup;

/**
 *  Apt patching is completed by executing `apt-get update && apt-get upgrade`.
 *  Additional options can be set to control how this is executed.
 */
@interface GTLRSystemsManagement_AptSettings : GTLRObject

/**
 *  List of packages to exclude from update. These packages will be excluded
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *excludes;

/**
 *  An exclusive list of packages to be updated. These are the only packages
 *  that will be updated. If these packages are not installed, they will be
 *  ignored. This field cannot be specified with any other patch configuration
 *  fields.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exclusivePackages;

/**
 *  By changing the type to DIST, the patching is performed using `apt-get
 *  dist-upgrade` instead.
 *
 *  Likely values:
 *    @arg @c kGTLRSystemsManagement_AptSettings_Type_Dist Runs `apt-get
 *        dist-upgrade`. (Value: "DIST")
 *    @arg @c kGTLRSystemsManagement_AptSettings_Type_TypeUnspecified By
 *        default, upgrade will be performed. (Value: "TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSystemsManagement_AptSettings_Type_Upgrade Runs `apt-get
 *        upgrade`. (Value: "UPGRADE")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Message for canceling a patch job.
 */
@interface GTLRSystemsManagement_CancelPatchJobRequest : GTLRObject
@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON
 *  representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRSystemsManagement_Empty : GTLRObject
@end


/**
 *  A step that runs an executable for a PatchJob.
 */
@interface GTLRSystemsManagement_ExecStep : GTLRObject

/** The ExecStepConfig for all Linux VMs targeted by the PatchJob. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_ExecStepConfig *linuxExecStepConfig;

/** The ExecStepConfig for all Windows VMs targeted by the PatchJob. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_ExecStepConfig *windowsExecStepConfig;

@end


/**
 *  Common configurations for an ExecStep.
 */
@interface GTLRSystemsManagement_ExecStepConfig : GTLRObject

/**
 *  Defaults to [0]. A list of possible return values that the execution can
 *  return to indicate a success.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *allowedSuccessCodes;

/** A Cloud Storage object containing the executable. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_GcsObject *gcsObject;

/**
 *  The script interpreter to use to run the script. If no interpreter is
 *  specified the script will be executed directly, which will likely only
 *  succeed for scripts with [shebang lines]
 *  (https://en.wikipedia.org/wiki/Shebang_\\(Unix\\)).
 *
 *  Likely values:
 *    @arg @c kGTLRSystemsManagement_ExecStepConfig_Interpreter_InterpreterUnspecified
 *        Invalid for a Windows ExecStepConfig. For a Linux ExecStepConfig, the
 *        interpreter will be parsed from the shebang line of the script if
 *        unspecified. (Value: "INTERPRETER_UNSPECIFIED")
 *    @arg @c kGTLRSystemsManagement_ExecStepConfig_Interpreter_Powershell
 *        Indicates that the file is run with PowerShell flags
 *        `-NonInteractive`, `-NoProfile`, and `-ExecutionPolicy Bypass`.
 *        (Value: "POWERSHELL")
 *    @arg @c kGTLRSystemsManagement_ExecStepConfig_Interpreter_Shell Indicates
 *        that the script is run with `/bin/sh` on Linux and `cmd` on Windows.
 *        (Value: "SHELL")
 */
@property(nonatomic, copy, nullable) NSString *interpreter;

/** An absolute path to the executable on the VM. */
@property(nonatomic, copy, nullable) NSString *localPath;

@end


/**
 *  A request message to initiate patching across Compute Engine instances.
 */
@interface GTLRSystemsManagement_ExecutePatchJobRequest : GTLRObject

/**
 *  Description of the patch job. Length of the description is limited to 1024
 *  characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Display name for this patch job. This does not have to be unique. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  If this patch is a dry-run only, instances are contacted but will do
 *  nothing.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dryRun;

/**
 *  Duration of the patch job. After the duration ends, the patch job times out.
 */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/**
 *  Required. Instances to patch, either explicitly or filtered by some criteria
 *  such as zone or labels.
 */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_PatchInstanceFilter *instanceFilter;

/**
 *  Patch configuration being applied. If omitted, instances are patched using
 *  the default configurations.
 */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_PatchConfig *patchConfig;

/** Rollout strategy of the patch job. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_PatchRollout *rollout;

@end


/**
 *  Message encapsulating a value that can be either absolute ("fixed") or
 *  relative ("percent") to a value.
 */
@interface GTLRSystemsManagement_FixedOrPercent : GTLRObject

/**
 *  Specifies a fixed value.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fixed;

/**
 *  Specifies the relative value defined as a percentage, which will be
 *  multiplied by a reference value.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *percent;

@end


/**
 *  Cloud Storage object representation.
 */
@interface GTLRSystemsManagement_GcsObject : GTLRObject

/** Required. Bucket of the Cloud Storage object. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Required. Generation number of the Cloud Storage object. This is used to
 *  ensure that the ExecStep specified by this PatchJob does not change.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generationNumber;

/** Required. Name of the Cloud Storage object. */
@property(nonatomic, copy, nullable) NSString *object;

@end


/**
 *  Googet patching is performed by running `googet update`.
 */
@interface GTLRSystemsManagement_GooSettings : GTLRObject
@end


/**
 *  A response message for listing patch deployments.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "patchDeployments" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRSystemsManagement_ListPatchDeploymentsResponse : GTLRCollectionObject

/**
 *  A pagination token that can be used to get the next page of patch
 *  deployments.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of patch deployments.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSystemsManagement_PatchDeployment *> *patchDeployments;

@end


/**
 *  A response message for listing the instances details for a patch job.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "patchJobInstanceDetails" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRSystemsManagement_ListPatchJobInstanceDetailsResponse : GTLRCollectionObject

/** A pagination token that can be used to get the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of instance status.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSystemsManagement_PatchJobInstanceDetails *> *patchJobInstanceDetails;

@end


/**
 *  A response message for listing patch jobs.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "patchJobs" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSystemsManagement_ListPatchJobsResponse : GTLRCollectionObject

/** A pagination token that can be used to get the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of patch jobs.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSystemsManagement_PatchJob *> *patchJobs;

@end


/**
 *  Represents a monthly schedule. An example of a valid monthly schedule is "on
 *  the third Tuesday of the month" or "on the 15th of the month".
 */
@interface GTLRSystemsManagement_MonthlySchedule : GTLRObject

/**
 *  Required. One day of the month. 1-31 indicates the 1st to the 31st day. -1
 *  indicates the last day of the month. Months without the target day will be
 *  skipped. For example, a schedule to run "every month on the 31st" will not
 *  run in February, April, June, etc.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *monthDay;

/** Required. Week day in a month. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_WeekDayOfMonth *weekDayOfMonth;

@end


/**
 *  Sets the time for a one time patch deployment. Timestamp is in
 *  [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
 */
@interface GTLRSystemsManagement_OneTimeSchedule : GTLRObject

/** Required. The desired patch job execution time. */
@property(nonatomic, strong, nullable) GTLRDateTime *executeTime;

@end


/**
 *  Patch configuration specifications. Contains details on how to apply the
 *  patch(es) to a VM instance.
 */
@interface GTLRSystemsManagement_PatchConfig : GTLRObject

/**
 *  Apt update settings. Use this setting to override the default `apt` patch
 *  rules.
 */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_AptSettings *apt;

/**
 *  Goo update settings. Use this setting to override the default `goo` patch
 *  rules.
 */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_GooSettings *goo;

/** The `ExecStep` to run after the patch update. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_ExecStep *postStep;

/** The `ExecStep` to run before the patch update. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_ExecStep *preStep;

/**
 *  Post-patch reboot settings.
 *
 *  Likely values:
 *    @arg @c kGTLRSystemsManagement_PatchConfig_RebootConfig_Always Always
 *        reboot the machine after the update completes. (Value: "ALWAYS")
 *    @arg @c kGTLRSystemsManagement_PatchConfig_RebootConfig_Default The agent
 *        decides if a reboot is necessary by checking signals such as registry
 *        keys on Windows or `/var/run/reboot-required` on APT based systems. On
 *        RPM based systems, a set of core system package install times are
 *        compared with system boot time. (Value: "DEFAULT")
 *    @arg @c kGTLRSystemsManagement_PatchConfig_RebootConfig_Never Never reboot
 *        the machine after the update completes. (Value: "NEVER")
 *    @arg @c kGTLRSystemsManagement_PatchConfig_RebootConfig_RebootConfigUnspecified
 *        The default behavior is DEFAULT. (Value: "REBOOT_CONFIG_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *rebootConfig;

/**
 *  Windows update settings. Use this override the default windows patch rules.
 */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_WindowsUpdateSettings *windowsUpdate;

/**
 *  Yum update settings. Use this setting to override the default `yum` patch
 *  rules.
 */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_YumSettings *yum;

/**
 *  Zypper update settings. Use this setting to override the default `zypper`
 *  patch rules.
 */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_ZypperSettings *zypper;

@end


/**
 *  Patch deployments are configurations that individual patch jobs use to
 *  complete a patch. These configurations include instance filter, package
 *  repository settings, and a schedule. For more information about creating and
 *  managing patch deployments, see [Scheduling patch
 *  jobs](https://cloud.google.com/compute/docs/os-patch-management/schedule-patch-jobs).
 */
@interface GTLRSystemsManagement_PatchDeployment : GTLRObject

/**
 *  Output only. Time the patch deployment was created. Timestamp is in
 *  [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. Description of the patch deployment. Length of the description is
 *  limited to 1024 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. Duration of the patch. After the duration ends, the patch times
 *  out.
 */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/** Required. VM instances to patch. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_PatchInstanceFilter *instanceFilter;

/**
 *  Output only. The last time a patch job was started by this deployment.
 *  Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastExecuteTime;

/**
 *  Unique name for the patch deployment resource in a project. The patch
 *  deployment name is in the form:
 *  `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field
 *  is ignored when you create a new patch deployment.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. Schedule a one-time execution. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_OneTimeSchedule *oneTimeSchedule;

/** Optional. Patch configuration that is applied. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_PatchConfig *patchConfig;

/** Required. Schedule recurring executions. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_RecurringSchedule *recurringSchedule;

/** Optional. Rollout strategy of the patch job. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_PatchRollout *rollout;

/**
 *  Output only. Time the patch deployment was last updated. Timestamp is in
 *  [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  A filter to target VM instances for patching. The targeted VMs must meet all
 *  criteria specified. So if both labels and zones are specified, the patch job
 *  targets only VMs with those labels and in those zones.
 */
@interface GTLRSystemsManagement_PatchInstanceFilter : GTLRObject

/**
 *  Target all VM instances in the project. If true, no other criteria is
 *  permitted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *all;

/**
 *  Targets VM instances matching ANY of these GroupLabels. This allows
 *  targeting of disparate groups of VM instances.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSystemsManagement_PatchInstanceFilterGroupLabel *> *groupLabels;

/**
 *  Targets VMs whose name starts with one of these prefixes. Similar to labels,
 *  this is another way to group VMs when targeting configs, for example
 *  prefix="prod-".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *instanceNamePrefixes;

/**
 *  Targets any of the VM instances specified. Instances are specified by their
 *  URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`,
 *  `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or
 *  `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *instances;

/**
 *  Targets VM instances in ANY of these zones. Leave empty to target VM
 *  instances in any zone.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *zones;

@end


/**
 *  Targets a group of VM instances by using their [assigned
 *  labels](https://cloud.google.com/compute/docs/labeling-resources). Labels
 *  are key-value pairs. A `GroupLabel` is a combination of labels that is used
 *  to target VMs for a patch job. For example, a patch job can target VMs that
 *  have the following `GroupLabel`: `{"env":"test", "app":"web"}`. This means
 *  that the patch job is applied to VMs that have both the labels `env=test`
 *  and `app=web`.
 */
@interface GTLRSystemsManagement_PatchInstanceFilterGroupLabel : GTLRObject

/**
 *  Compute Engine instance labels that must be present for a VM instance to be
 *  targeted by this filter.
 */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_PatchInstanceFilterGroupLabel_Labels *labels;

@end


/**
 *  Compute Engine instance labels that must be present for a VM instance to be
 *  targeted by this filter.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSystemsManagement_PatchInstanceFilterGroupLabel_Labels : GTLRObject
@end


/**
 *  A high level representation of a patch job that is either in progress or has
 *  completed. Instance details are not included in the job. To paginate through
 *  instance details, use ListPatchJobInstanceDetails. For more information
 *  about patch jobs, see [Creating patch
 *  jobs](https://cloud.google.com/compute/docs/os-patch-management/create-patch-job).
 */
@interface GTLRSystemsManagement_PatchJob : GTLRObject

/** Time this patch job was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Description of the patch job. Length of the description is limited to 1024
 *  characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Display name for this patch job. This is not a unique identifier. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  If this patch job is a dry run, the agent reports that it has finished
 *  without running any updates on the VM instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dryRun;

/**
 *  Duration of the patch job. After the duration ends, the patch job times out.
 */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/**
 *  If this patch job failed, this message provides information about the
 *  failure.
 */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/** Summary of instance details. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_PatchJobInstanceDetailsSummary *instanceDetailsSummary;

/** Instances to patch. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_PatchInstanceFilter *instanceFilter;

/**
 *  Unique identifier for this patch job in the form `projects/ * /patchJobs/ *`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Patch configuration being applied. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_PatchConfig *patchConfig;

/** Output only. Name of the patch deployment that created this patch job. */
@property(nonatomic, copy, nullable) NSString *patchDeployment;

/**
 *  Reflects the overall progress of the patch job in the range of 0.0 being no
 *  progress to 100.0 being complete.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *percentComplete;

/** Rollout strategy being applied. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_PatchRollout *rollout;

/**
 *  The current state of the PatchJob.
 *
 *  Likely values:
 *    @arg @c kGTLRSystemsManagement_PatchJob_State_Canceled The patch job was
 *        canceled. (Value: "CANCELED")
 *    @arg @c kGTLRSystemsManagement_PatchJob_State_CompletedWithErrors Patch
 *        job completed but there were errors. (Value: "COMPLETED_WITH_ERRORS")
 *    @arg @c kGTLRSystemsManagement_PatchJob_State_InstanceLookup The patch job
 *        is looking up instances to run the patch on. (Value:
 *        "INSTANCE_LOOKUP")
 *    @arg @c kGTLRSystemsManagement_PatchJob_State_Patching Instances are being
 *        patched. (Value: "PATCHING")
 *    @arg @c kGTLRSystemsManagement_PatchJob_State_Started The patch job was
 *        successfully initiated. (Value: "STARTED")
 *    @arg @c kGTLRSystemsManagement_PatchJob_State_StateUnspecified State must
 *        be specified. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRSystemsManagement_PatchJob_State_Succeeded Patch job
 *        completed successfully. (Value: "SUCCEEDED")
 *    @arg @c kGTLRSystemsManagement_PatchJob_State_TimedOut The patch job timed
 *        out. (Value: "TIMED_OUT")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Last time this patch job was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Patch details for a VM instance. For more information about reviewing VM
 *  instance details, see [Listing all VM instance details for a specific patch
 *  job](https://cloud.google.com/compute/docs/os-patch-management/manage-patch-jobs#list-instance-details).
 */
@interface GTLRSystemsManagement_PatchJobInstanceDetails : GTLRObject

/**
 *  The number of times the agent that the agent attempts to apply the patch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *attemptCount;

/** If the patch fails, this field provides the reason. */
@property(nonatomic, copy, nullable) NSString *failureReason;

/**
 *  The unique identifier for the instance. This identifier is defined by the
 *  server.
 */
@property(nonatomic, copy, nullable) NSString *instanceSystemId;

/** The instance name in the form `projects/ * /zones/ * /instances/ *` */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Current state of instance patch.
 *
 *  Likely values:
 *    @arg @c kGTLRSystemsManagement_PatchJobInstanceDetails_State_Acked The
 *        instance acked the notification and will start shortly. (Value:
 *        "ACKED")
 *    @arg @c kGTLRSystemsManagement_PatchJobInstanceDetails_State_ApplyingPatches
 *        The instance is applying patches. (Value: "APPLYING_PATCHES")
 *    @arg @c kGTLRSystemsManagement_PatchJobInstanceDetails_State_DownloadingPatches
 *        The instance is downloading patches. (Value: "DOWNLOADING_PATCHES")
 *    @arg @c kGTLRSystemsManagement_PatchJobInstanceDetails_State_Failed The
 *        instance has failed to apply the patch. (Value: "FAILED")
 *    @arg @c kGTLRSystemsManagement_PatchJobInstanceDetails_State_Inactive
 *        Instance is inactive and cannot be patched. (Value: "INACTIVE")
 *    @arg @c kGTLRSystemsManagement_PatchJobInstanceDetails_State_NoAgentDetected
 *        The service could not detect the presence of the agent. Check to
 *        ensure that the agent is installed, running, and able to communicate
 *        with the service. (Value: "NO_AGENT_DETECTED")
 *    @arg @c kGTLRSystemsManagement_PatchJobInstanceDetails_State_Notified The
 *        instance is notified that it should be patched. (Value: "NOTIFIED")
 *    @arg @c kGTLRSystemsManagement_PatchJobInstanceDetails_State_PatchStateUnspecified
 *        Unspecified. (Value: "PATCH_STATE_UNSPECIFIED")
 *    @arg @c kGTLRSystemsManagement_PatchJobInstanceDetails_State_Pending The
 *        instance is not yet notified. (Value: "PENDING")
 *    @arg @c kGTLRSystemsManagement_PatchJobInstanceDetails_State_Rebooting The
 *        instance is rebooting. (Value: "REBOOTING")
 *    @arg @c kGTLRSystemsManagement_PatchJobInstanceDetails_State_RunningPostPatchStep
 *        The instance is running the post-patch step. (Value:
 *        "RUNNING_POST_PATCH_STEP")
 *    @arg @c kGTLRSystemsManagement_PatchJobInstanceDetails_State_RunningPrePatchStep
 *        The instance is running the pre-patch step. (Value:
 *        "RUNNING_PRE_PATCH_STEP")
 *    @arg @c kGTLRSystemsManagement_PatchJobInstanceDetails_State_Started The
 *        instance has started the patching process. (Value: "STARTED")
 *    @arg @c kGTLRSystemsManagement_PatchJobInstanceDetails_State_Succeeded The
 *        instance has completed applying patches. (Value: "SUCCEEDED")
 *    @arg @c kGTLRSystemsManagement_PatchJobInstanceDetails_State_SucceededRebootRequired
 *        The instance has completed applying patches but a reboot is required.
 *        (Value: "SUCCEEDED_REBOOT_REQUIRED")
 *    @arg @c kGTLRSystemsManagement_PatchJobInstanceDetails_State_TimedOut The
 *        instance exceeded the time out while applying the patch. (Value:
 *        "TIMED_OUT")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  A summary of the current patch state across all instances that this patch
 *  job affects. Contains counts of instances in different states. These states
 *  map to `InstancePatchState`. List patch job instance details to see the
 *  specific states of each instance.
 */
@interface GTLRSystemsManagement_PatchJobInstanceDetailsSummary : GTLRObject

/**
 *  Number of instances that have acked and will start shortly.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ackedInstanceCount;

/**
 *  Number of instances that are applying patches.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *applyingPatchesInstanceCount;

/**
 *  Number of instances that are downloading patches.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *downloadingPatchesInstanceCount;

/**
 *  Number of instances that failed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failedInstanceCount;

/**
 *  Number of instances that are inactive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inactiveInstanceCount;

/**
 *  Number of instances that do not appear to be running the agent. Check to
 *  ensure that the agent is installed, running, and able to communicate with
 *  the service.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *noAgentDetectedInstanceCount;

/**
 *  Number of instances notified about patch job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *notifiedInstanceCount;

/**
 *  Number of instances pending patch job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pendingInstanceCount;

/**
 *  Number of instances that are running the post-patch step.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *postPatchStepInstanceCount;

/**
 *  Number of instances that are running the pre-patch step.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *prePatchStepInstanceCount;

/**
 *  Number of instances rebooting.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rebootingInstanceCount;

/**
 *  Number of instances that have started.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startedInstanceCount;

/**
 *  Number of instances that have completed successfully.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *succeededInstanceCount;

/**
 *  Number of instances that require reboot.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *succeededRebootRequiredInstanceCount;

/**
 *  Number of instances that exceeded the time out while applying the patch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timedOutInstanceCount;

@end


/**
 *  Patch rollout configuration specifications. Contains details on the
 *  concurrency control when applying patch(es) to all targeted VMs.
 */
@interface GTLRSystemsManagement_PatchRollout : GTLRObject

/**
 *  The maximum number (or percentage) of VMs per zone to disrupt at any given
 *  moment. The number of VMs calculated from multiplying the percentage by the
 *  total number of VMs in a zone is rounded up. During patching, a VM is
 *  considered disrupted from the time the agent is notified to begin until
 *  patching has completed. This disruption time includes the time to complete
 *  reboot and any post-patch steps. A VM contributes to the disruption budget
 *  if its patching operation fails either when applying the patches, running
 *  pre or post patch steps, or if it fails to respond with a success
 *  notification before timing out. VMs that are not running or do not have an
 *  active agent do not count toward this disruption budget. For zone-by-zone
 *  rollouts, if the disruption budget in a zone is exceeded, the patch job
 *  stops, because continuing to the next zone requires completion of the patch
 *  process in the previous zone. For example, if the disruption budget has a
 *  fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch
 *  job continues to patch 2 VMs at a time until the zone is completed. When
 *  that zone is completed successfully, patching begins with 10 VMs at a time
 *  in the next zone. If 10 VMs in the next zone fail to patch, the patch job
 *  stops.
 */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_FixedOrPercent *disruptionBudget;

/**
 *  Mode of the patch rollout.
 *
 *  Likely values:
 *    @arg @c kGTLRSystemsManagement_PatchRollout_Mode_ConcurrentZones Patches
 *        are applied to VMs in all zones at the same time. (Value:
 *        "CONCURRENT_ZONES")
 *    @arg @c kGTLRSystemsManagement_PatchRollout_Mode_ModeUnspecified Mode must
 *        be specified. (Value: "MODE_UNSPECIFIED")
 *    @arg @c kGTLRSystemsManagement_PatchRollout_Mode_ZoneByZone Patches are
 *        applied one zone at a time. The patch job begins in the region with
 *        the lowest number of targeted VMs. Within the region, patching begins
 *        in the zone with the lowest number of targeted VMs. If multiple
 *        regions (or zones within a region) have the same number of targeted
 *        VMs, a tie-breaker is achieved by sorting the regions or zones in
 *        alphabetical order. (Value: "ZONE_BY_ZONE")
 */
@property(nonatomic, copy, nullable) NSString *mode;

@end


/**
 *  Sets the time for recurring patch deployments.
 */
@interface GTLRSystemsManagement_RecurringSchedule : GTLRObject

/**
 *  Optional. The end time at which a recurring patch deployment schedule is no
 *  longer active.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Required. The frequency unit of this recurring schedule.
 *
 *  Likely values:
 *    @arg @c kGTLRSystemsManagement_RecurringSchedule_Frequency_FrequencyUnspecified
 *        Invalid. A frequency must be specified. (Value:
 *        "FREQUENCY_UNSPECIFIED")
 *    @arg @c kGTLRSystemsManagement_RecurringSchedule_Frequency_Monthly
 *        Indicates that the frequency should be expressed in terms of months.
 *        (Value: "MONTHLY")
 *    @arg @c kGTLRSystemsManagement_RecurringSchedule_Frequency_Weekly
 *        Indicates that the frequency should be expressed in terms of weeks.
 *        (Value: "WEEKLY")
 */
@property(nonatomic, copy, nullable) NSString *frequency;

/** Output only. The time the last patch job ran successfully. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastExecuteTime;

/** Required. Schedule with monthly executions. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_MonthlySchedule *monthly;

/** Output only. The time the next patch job is scheduled to run. */
@property(nonatomic, strong, nullable) GTLRDateTime *nextExecuteTime;

/**
 *  Optional. The time that the recurring schedule becomes effective. Defaults
 *  to `create_time` of the patch deployment.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/** Required. Time of the day to run a recurring deployment. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_TimeOfDay *timeOfDay;

/**
 *  Required. Defines the time zone that `time_of_day` is relative to. The rules
 *  for daylight saving time are determined by the chosen time zone.
 */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_TimeZone *timeZone;

/** Required. Schedule with weekly executions. */
@property(nonatomic, strong, nullable) GTLRSystemsManagement_WeeklySchedule *weekly;

@end


/**
 *  Represents a time of day. The date and time zone are either not significant
 *  or are specified elsewhere. An API may choose to allow leap seconds. Related
 *  types are google.type.Date and `google.protobuf.Timestamp`.
 */
@interface GTLRSystemsManagement_TimeOfDay : GTLRObject

/**
 *  Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to
 *  allow the value "24:00:00" for scenarios like business closing time.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hours;

/**
 *  Minutes of hour of day. Must be from 0 to 59.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minutes;

/**
 *  Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Seconds of minutes of the time. Must normally be from 0 to 59. An API may
 *  allow the value 60 if it allows leap-seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

@end


/**
 *  Represents a time zone from the [IANA Time Zone
 *  Database](https://www.iana.org/time-zones).
 */
@interface GTLRSystemsManagement_TimeZone : GTLRObject

/**
 *  IANA Time Zone Database time zone, e.g. "America/New_York".
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Optional. IANA Time Zone Database version number, e.g. "2019a". */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Represents one week day in a month. An example is "the 4th Sunday".
 */
@interface GTLRSystemsManagement_WeekDayOfMonth : GTLRObject

/**
 *  Required. A day of the week.
 *
 *  Likely values:
 *    @arg @c kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_DayOfWeekUnspecified
 *        The day of the week is unspecified. (Value: "DAY_OF_WEEK_UNSPECIFIED")
 *    @arg @c kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Friday Friday
 *        (Value: "FRIDAY")
 *    @arg @c kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Monday Monday
 *        (Value: "MONDAY")
 *    @arg @c kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Saturday Saturday
 *        (Value: "SATURDAY")
 *    @arg @c kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Sunday Sunday
 *        (Value: "SUNDAY")
 *    @arg @c kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Thursday Thursday
 *        (Value: "THURSDAY")
 *    @arg @c kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Tuesday Tuesday
 *        (Value: "TUESDAY")
 *    @arg @c kGTLRSystemsManagement_WeekDayOfMonth_DayOfWeek_Wednesday
 *        Wednesday (Value: "WEDNESDAY")
 */
@property(nonatomic, copy, nullable) NSString *dayOfWeek;

/**
 *  Required. Week number in a month. 1-4 indicates the 1st to 4th week of the
 *  month. -1 indicates the last week of the month.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *weekOrdinal;

@end


/**
 *  Represents a weekly schedule.
 */
@interface GTLRSystemsManagement_WeeklySchedule : GTLRObject

/**
 *  Required. Day of the week.
 *
 *  Likely values:
 *    @arg @c kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_DayOfWeekUnspecified
 *        The day of the week is unspecified. (Value: "DAY_OF_WEEK_UNSPECIFIED")
 *    @arg @c kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Friday Friday
 *        (Value: "FRIDAY")
 *    @arg @c kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Monday Monday
 *        (Value: "MONDAY")
 *    @arg @c kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Saturday Saturday
 *        (Value: "SATURDAY")
 *    @arg @c kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Sunday Sunday
 *        (Value: "SUNDAY")
 *    @arg @c kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Thursday Thursday
 *        (Value: "THURSDAY")
 *    @arg @c kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Tuesday Tuesday
 *        (Value: "TUESDAY")
 *    @arg @c kGTLRSystemsManagement_WeeklySchedule_DayOfWeek_Wednesday
 *        Wednesday (Value: "WEDNESDAY")
 */
@property(nonatomic, copy, nullable) NSString *dayOfWeek;

@end


/**
 *  Windows patching is performed using the Windows Update Agent.
 */
@interface GTLRSystemsManagement_WindowsUpdateSettings : GTLRObject

/**
 *  Only apply updates of these windows update classifications. If empty, all
 *  updates are applied.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *classifications;

/** List of KBs to exclude from update. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *excludes;

/**
 *  An exclusive list of kbs to be updated. These are the only patches that will
 *  be updated. This field must not be used with other patch configurations.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exclusivePatches;

@end


/**
 *  Yum patching is performed by executing `yum update`. Additional options can
 *  be set to control how this is executed. Note that not all settings are
 *  supported on all platforms.
 */
@interface GTLRSystemsManagement_YumSettings : GTLRObject

/**
 *  List of packages to exclude from update. These packages are excluded by
 *  using the yum `--exclude` flag.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *excludes;

/**
 *  An exclusive list of packages to be updated. These are the only packages
 *  that will be updated. If these packages are not installed, they will be
 *  ignored. This field must not be specified with any other patch configuration
 *  fields.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exclusivePackages;

/**
 *  Will cause patch to run `yum update-minimal` instead.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minimal;

/**
 *  Adds the `--security` flag to `yum update`. Not supported on all platforms.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *security;

@end


/**
 *  Zypper patching is performed by running `zypper patch`. See also
 *  https://en.opensuse.org/SDB:Zypper_manual.
 */
@interface GTLRSystemsManagement_ZypperSettings : GTLRObject

/**
 *  Install only patches with these categories. Common categories include
 *  security, recommended, and feature.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *categories;

/** List of patches to exclude from update. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *excludes;

/**
 *  An exclusive list of patches to be updated. These are the only patches that
 *  will be installed using 'zypper patch patch:' command. This field must not
 *  be used with any other patch configuration fields.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exclusivePatches;

/**
 *  Install only patches with these severities. Common severities include
 *  critical, important, moderate, and low.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *severities;

/**
 *  Adds the `--with-optional` flag to `zypper patch`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *withOptional;

/**
 *  Adds the `--with-update` flag, to `zypper patch`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *withUpdate;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
