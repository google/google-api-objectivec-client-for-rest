// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Kubernetes Engine API (container/v1)
// Description:
//   Builds and manages container-based applications, powered by the open source
//   Kubernetes technology.
// Documentation:
//   https://cloud.google.com/container-engine/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRContainer_AcceleratorConfig;
@class GTLRContainer_AddonsConfig;
@class GTLRContainer_AuthenticatorGroupsConfig;
@class GTLRContainer_AutoprovisioningNodePoolDefaults;
@class GTLRContainer_AutoUpgradeOptions;
@class GTLRContainer_BigQueryDestination;
@class GTLRContainer_BinaryAuthorization;
@class GTLRContainer_CidrBlock;
@class GTLRContainer_ClientCertificateConfig;
@class GTLRContainer_CloudRunConfig;
@class GTLRContainer_Cluster;
@class GTLRContainer_Cluster_ResourceLabels;
@class GTLRContainer_ClusterAutoscaling;
@class GTLRContainer_ClusterUpdate;
@class GTLRContainer_ConsumptionMeteringConfig;
@class GTLRContainer_DailyMaintenanceWindow;
@class GTLRContainer_DatabaseEncryption;
@class GTLRContainer_HorizontalPodAutoscaling;
@class GTLRContainer_HttpCacheControlResponseHeader;
@class GTLRContainer_HttpLoadBalancing;
@class GTLRContainer_IntraNodeVisibilityConfig;
@class GTLRContainer_IPAllocationPolicy;
@class GTLRContainer_Jwk;
@class GTLRContainer_KubernetesDashboard;
@class GTLRContainer_LegacyAbac;
@class GTLRContainer_MaintenancePolicy;
@class GTLRContainer_MaintenanceWindow;
@class GTLRContainer_MaintenanceWindow_MaintenanceExclusions;
@class GTLRContainer_MasterAuth;
@class GTLRContainer_MasterAuthorizedNetworksConfig;
@class GTLRContainer_MaxPodsConstraint;
@class GTLRContainer_Metric;
@class GTLRContainer_NetworkConfig;
@class GTLRContainer_NetworkPolicy;
@class GTLRContainer_NetworkPolicyConfig;
@class GTLRContainer_NodeConfig;
@class GTLRContainer_NodeConfig_Labels;
@class GTLRContainer_NodeConfig_Metadata;
@class GTLRContainer_NodeManagement;
@class GTLRContainer_NodePool;
@class GTLRContainer_NodePoolAutoscaling;
@class GTLRContainer_NodeTaint;
@class GTLRContainer_Operation;
@class GTLRContainer_OperationProgress;
@class GTLRContainer_PrivateClusterConfig;
@class GTLRContainer_RecurringTimeWindow;
@class GTLRContainer_ReservationAffinity;
@class GTLRContainer_ResourceLimit;
@class GTLRContainer_ResourceUsageExportConfig;
@class GTLRContainer_SandboxConfig;
@class GTLRContainer_SetLabelsRequest_ResourceLabels;
@class GTLRContainer_ShieldedInstanceConfig;
@class GTLRContainer_ShieldedNodes;
@class GTLRContainer_StatusCondition;
@class GTLRContainer_TimeWindow;
@class GTLRContainer_UpgradeSettings;
@class GTLRContainer_UsableSubnetwork;
@class GTLRContainer_UsableSubnetworkSecondaryRange;
@class GTLRContainer_VerticalPodAutoscaling;
@class GTLRContainer_WorkloadIdentityConfig;
@class GTLRContainer_WorkloadMetadataConfig;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRContainer_Cluster.status

/**
 *  The DEGRADED state indicates the cluster requires user action to restore
 *  full functionality. Details can be found in the `statusMessage` field.
 *
 *  Value: "DEGRADED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Cluster_Status_Degraded;
/**
 *  The ERROR state indicates the cluster may be unusable. Details
 *  can be found in the `statusMessage` field.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Cluster_Status_Error;
/**
 *  The PROVISIONING state indicates the cluster is being created.
 *
 *  Value: "PROVISIONING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Cluster_Status_Provisioning;
/**
 *  The RECONCILING state indicates that some work is actively being done on
 *  the cluster, such as upgrading the master or node software. Details can
 *  be found in the `statusMessage` field.
 *
 *  Value: "RECONCILING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Cluster_Status_Reconciling;
/**
 *  The RUNNING state indicates the cluster has been created and is fully
 *  usable.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Cluster_Status_Running;
/**
 *  Not set.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Cluster_Status_StatusUnspecified;
/**
 *  The STOPPING state indicates the cluster is being deleted.
 *
 *  Value: "STOPPING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Cluster_Status_Stopping;

// ----------------------------------------------------------------------------
// GTLRContainer_DatabaseEncryption.state

/**
 *  Secrets in etcd are stored in plain text (at etcd level) - this is
 *  unrelated to Compute Engine level full disk encryption.
 *
 *  Value: "DECRYPTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_DatabaseEncryption_State_Decrypted;
/**
 *  Secrets in etcd are encrypted.
 *
 *  Value: "ENCRYPTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_DatabaseEncryption_State_Encrypted;
/**
 *  Should never be set
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_DatabaseEncryption_State_Unknown;

// ----------------------------------------------------------------------------
// GTLRContainer_NetworkPolicy.provider

/**
 *  Tigera (Calico Felix).
 *
 *  Value: "CALICO"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_NetworkPolicy_Provider_Calico;
/**
 *  Not set
 *
 *  Value: "PROVIDER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_NetworkPolicy_Provider_ProviderUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainer_NodePool.status

/**
 *  The ERROR state indicates the node pool may be unusable. Details
 *  can be found in the `statusMessage` field.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_NodePool_Status_Error;
/**
 *  The PROVISIONING state indicates the node pool is being created.
 *
 *  Value: "PROVISIONING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_NodePool_Status_Provisioning;
/**
 *  The RECONCILING state indicates that some work is actively being done on
 *  the node pool, such as upgrading node software. Details can
 *  be found in the `statusMessage` field.
 *
 *  Value: "RECONCILING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_NodePool_Status_Reconciling;
/**
 *  The RUNNING state indicates the node pool has been created
 *  and is fully usable.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_NodePool_Status_Running;
/**
 *  The RUNNING_WITH_ERROR state indicates the node pool has been created
 *  and is partially usable. Some error state has occurred and some
 *  functionality may be impaired. Customer may need to reissue a request
 *  or trigger a new update.
 *
 *  Value: "RUNNING_WITH_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_NodePool_Status_RunningWithError;
/**
 *  Not set.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_NodePool_Status_StatusUnspecified;
/**
 *  The STOPPING state indicates the node pool is being deleted.
 *
 *  Value: "STOPPING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_NodePool_Status_Stopping;

// ----------------------------------------------------------------------------
// GTLRContainer_NodeTaint.effect

/**
 *  Not set
 *
 *  Value: "EFFECT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_NodeTaint_Effect_EffectUnspecified;
/**
 *  NoExecute
 *
 *  Value: "NO_EXECUTE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_NodeTaint_Effect_NoExecute;
/**
 *  NoSchedule
 *
 *  Value: "NO_SCHEDULE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_NodeTaint_Effect_NoSchedule;
/**
 *  PreferNoSchedule
 *
 *  Value: "PREFER_NO_SCHEDULE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_NodeTaint_Effect_PreferNoSchedule;

// ----------------------------------------------------------------------------
// GTLRContainer_Operation.operationType

/**
 *  Automatic node pool repair.
 *
 *  Value: "AUTO_REPAIR_NODES"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_AutoRepairNodes;
/**
 *  Automatic node upgrade.
 *
 *  Value: "AUTO_UPGRADE_NODES"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_AutoUpgradeNodes;
/**
 *  Cluster create.
 *
 *  Value: "CREATE_CLUSTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_CreateCluster;
/**
 *  Node pool create.
 *
 *  Value: "CREATE_NODE_POOL"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_CreateNodePool;
/**
 *  Cluster delete.
 *
 *  Value: "DELETE_CLUSTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_DeleteCluster;
/**
 *  Node pool delete.
 *
 *  Value: "DELETE_NODE_POOL"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_DeleteNodePool;
/**
 *  Cluster repair.
 *
 *  Value: "REPAIR_CLUSTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_RepairCluster;
/**
 *  Set labels.
 *
 *  Value: "SET_LABELS"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_SetLabels;
/**
 *  Set the maintenance policy.
 *
 *  Value: "SET_MAINTENANCE_POLICY"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_SetMaintenancePolicy;
/**
 *  Set/generate master auth materials
 *
 *  Value: "SET_MASTER_AUTH"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_SetMasterAuth;
/**
 *  Updates network policy for a cluster.
 *
 *  Value: "SET_NETWORK_POLICY"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_SetNetworkPolicy;
/**
 *  Set node pool management.
 *
 *  Value: "SET_NODE_POOL_MANAGEMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_SetNodePoolManagement;
/**
 *  Set node pool size.
 *
 *  Value: "SET_NODE_POOL_SIZE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_SetNodePoolSize;
/**
 *  Not set.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_TypeUnspecified;
/**
 *  Cluster update.
 *
 *  Value: "UPDATE_CLUSTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_UpdateCluster;
/**
 *  A master upgrade.
 *
 *  Value: "UPGRADE_MASTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_UpgradeMaster;
/**
 *  A node upgrade.
 *
 *  Value: "UPGRADE_NODES"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_OperationType_UpgradeNodes;

// ----------------------------------------------------------------------------
// GTLRContainer_Operation.status

/**
 *  The operation is aborting.
 *
 *  Value: "ABORTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_Status_Aborting;
/**
 *  The operation is done, either cancelled or completed.
 *
 *  Value: "DONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_Status_Done;
/**
 *  The operation has been created.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_Status_Pending;
/**
 *  The operation is currently running.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_Status_Running;
/**
 *  Not set.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_Operation_Status_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainer_OperationProgress.status

/**
 *  The operation is aborting.
 *
 *  Value: "ABORTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_OperationProgress_Status_Aborting;
/**
 *  The operation is done, either cancelled or completed.
 *
 *  Value: "DONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_OperationProgress_Status_Done;
/**
 *  The operation has been created.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_OperationProgress_Status_Pending;
/**
 *  The operation is currently running.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_OperationProgress_Status_Running;
/**
 *  Not set.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_OperationProgress_Status_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainer_ReservationAffinity.consumeReservationType

/**
 *  Consume any reservation available.
 *
 *  Value: "ANY_RESERVATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_ReservationAffinity_ConsumeReservationType_AnyReservation;
/**
 *  Do not consume from any reserved capacity.
 *
 *  Value: "NO_RESERVATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_ReservationAffinity_ConsumeReservationType_NoReservation;
/**
 *  Must consume from a specific reservation. Must specify key value fields
 *  for specifying the reservations.
 *
 *  Value: "SPECIFIC_RESERVATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_ReservationAffinity_ConsumeReservationType_SpecificReservation;
/**
 *  Default value. This should not be used.
 *
 *  Value: "UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_ReservationAffinity_ConsumeReservationType_Unspecified;

// ----------------------------------------------------------------------------
// GTLRContainer_SandboxConfig.type

/**
 *  Run sandbox using gvisor.
 *
 *  Value: "GVISOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_SandboxConfig_Type_Gvisor;
/**
 *  Default value. This should not be used.
 *
 *  Value: "UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_SandboxConfig_Type_Unspecified;

// ----------------------------------------------------------------------------
// GTLRContainer_SetMasterAuthRequest.action

/**
 *  Generate a new password and set it to that.
 *
 *  Value: "GENERATE_PASSWORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_SetMasterAuthRequest_Action_GeneratePassword;
/**
 *  Set the password to a user generated value.
 *
 *  Value: "SET_PASSWORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_SetMasterAuthRequest_Action_SetPassword;
/**
 *  Set the username. If an empty username is provided, basic authentication
 *  is disabled for the cluster. If a non-empty username is provided, basic
 *  authentication is enabled, with either a provided password or a generated
 *  one.
 *
 *  Value: "SET_USERNAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_SetMasterAuthRequest_Action_SetUsername;
/**
 *  Operation is unknown and will error out.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_SetMasterAuthRequest_Action_Unknown;

// ----------------------------------------------------------------------------
// GTLRContainer_StatusCondition.code

/**
 *  Unable to perform an encrypt operation against the CloudKMS key used for
 *  etcd level encryption.
 *  More codes TBA
 *
 *  Value: "CLOUD_KMS_KEY_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_StatusCondition_Code_CloudKmsKeyError;
/**
 *  Google Compute Engine quota was exceeded.
 *
 *  Value: "GCE_QUOTA_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_StatusCondition_Code_GceQuotaExceeded;
/**
 *  GCE_STOCKOUT indicates that Google Compute Engine resources are
 *  temporarily unavailable.
 *
 *  Value: "GCE_STOCKOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_StatusCondition_Code_GceStockout;
/**
 *  GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot
 *  service account.
 *
 *  Value: "GKE_SERVICE_ACCOUNT_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_StatusCondition_Code_GkeServiceAccountDeleted;
/**
 *  Cluster state was manually changed by an SRE due to a system logic error.
 *
 *  Value: "SET_BY_OPERATOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_StatusCondition_Code_SetByOperator;
/**
 *  UNKNOWN indicates a generic condition.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_StatusCondition_Code_Unknown;

// ----------------------------------------------------------------------------
// GTLRContainer_UsableSubnetworkSecondaryRange.status

/**
 *  IN_USE_MANAGED_POD denotes this range was created by GKE and is claimed
 *  for pods. It cannot be used for other clusters.
 *
 *  Value: "IN_USE_MANAGED_POD"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_UsableSubnetworkSecondaryRange_Status_InUseManagedPod;
/**
 *  IN_USE_SERVICE denotes that this range is claimed by a cluster for
 *  services. It cannot be used for other clusters.
 *
 *  Value: "IN_USE_SERVICE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_UsableSubnetworkSecondaryRange_Status_InUseService;
/**
 *  IN_USE_SHAREABLE_POD denotes this range was created by the network admin
 *  and is currently claimed by a cluster for pods. It can only be used by
 *  other clusters as a pod range.
 *
 *  Value: "IN_USE_SHAREABLE_POD"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_UsableSubnetworkSecondaryRange_Status_InUseShareablePod;
/**
 *  UNKNOWN is the zero value of the Status enum. It's not a valid status.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_UsableSubnetworkSecondaryRange_Status_Unknown;
/**
 *  UNUSED denotes that this range is unclaimed by any cluster.
 *
 *  Value: "UNUSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_UsableSubnetworkSecondaryRange_Status_Unused;

// ----------------------------------------------------------------------------
// GTLRContainer_WorkloadMetadataConfig.mode

/**
 *  Expose all Compute Engine metadata to pods.
 *
 *  Value: "GCE_METADATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_WorkloadMetadataConfig_Mode_GceMetadata;
/**
 *  Run the GKE Metadata Server on this node. The GKE Metadata Server exposes
 *  a metadata API to workloads that is compatible with the V1 Compute
 *  Metadata APIs exposed by the Compute Engine and App Engine Metadata
 *  Servers. This feature can only be enabled if Workload Identity is enabled
 *  at the cluster level.
 *
 *  Value: "GKE_METADATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_WorkloadMetadataConfig_Mode_GkeMetadata;
/**
 *  Not set.
 *
 *  Value: "MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainer_WorkloadMetadataConfig_Mode_ModeUnspecified;

/**
 *  AcceleratorConfig represents a Hardware Accelerator request.
 */
@interface GTLRContainer_AcceleratorConfig : GTLRObject

/**
 *  The number of the accelerator cards exposed to an instance.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *acceleratorCount;

/**
 *  The accelerator type resource name. List of supported accelerators
 *  [here](https://cloud.google.com/compute/docs/gpus)
 */
@property(nonatomic, copy, nullable) NSString *acceleratorType;

@end


/**
 *  Configuration for the addons that can be automatically spun up in the
 *  cluster, enabling additional functionality.
 */
@interface GTLRContainer_AddonsConfig : GTLRObject

/**
 *  Configuration for the Cloud Run addon, which allows the user to use a
 *  managed Knative service.
 */
@property(nonatomic, strong, nullable) GTLRContainer_CloudRunConfig *cloudRunConfig;

/**
 *  Configuration for the horizontal pod autoscaling feature, which
 *  increases or decreases the number of replica pods a replication controller
 *  has based on the resource usage of the existing pods.
 */
@property(nonatomic, strong, nullable) GTLRContainer_HorizontalPodAutoscaling *horizontalPodAutoscaling;

/**
 *  Configuration for the HTTP (L7) load balancing controller addon, which
 *  makes it easy to set up HTTP load balancers for services in a cluster.
 */
@property(nonatomic, strong, nullable) GTLRContainer_HttpLoadBalancing *httpLoadBalancing;

/**
 *  Configuration for the Kubernetes Dashboard.
 *  This addon is deprecated, and will be disabled in 1.15. It is recommended
 *  to use the Cloud Console to manage and monitor your Kubernetes clusters,
 *  workloads and applications. For more information, see:
 *  https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
 */
@property(nonatomic, strong, nullable) GTLRContainer_KubernetesDashboard *kubernetesDashboard;

/**
 *  Configuration for NetworkPolicy. This only tracks whether the addon
 *  is enabled or not on the Master, it does not track whether network policy
 *  is enabled for the nodes.
 */
@property(nonatomic, strong, nullable) GTLRContainer_NetworkPolicyConfig *networkPolicyConfig;

@end


/**
 *  Configuration for returning group information from authenticators.
 */
@interface GTLRContainer_AuthenticatorGroupsConfig : GTLRObject

/**
 *  Whether this cluster should return group membership lookups
 *  during authentication using a group of security groups.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

/**
 *  The name of the security group-of-groups to be used. Only relevant
 *  if enabled = true.
 */
@property(nonatomic, copy, nullable) NSString *securityGroup;

@end


/**
 *  AutoprovisioningNodePoolDefaults contains defaults for a node pool created
 *  by NAP.
 */
@interface GTLRContainer_AutoprovisioningNodePoolDefaults : GTLRObject

/** Specifies the node management options for NAP created node-pools. */
@property(nonatomic, strong, nullable) GTLRContainer_NodeManagement *management;

/**
 *  Scopes that are used by NAP when creating node pools. If oauth_scopes are
 *  specified, service_account should be empty.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *oauthScopes;

/**
 *  The Google Cloud Platform Service Account to be used by the node VMs. If
 *  service_account is specified, scopes should be empty.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/** Specifies the upgrade settings for NAP created node pools */
@property(nonatomic, strong, nullable) GTLRContainer_UpgradeSettings *upgradeSettings;

@end


/**
 *  AutoUpgradeOptions defines the set of options for the user to control how
 *  the Auto Upgrades will proceed.
 */
@interface GTLRContainer_AutoUpgradeOptions : GTLRObject

/**
 *  [Output only] This field is set when upgrades are about to commence
 *  with the approximate start time for the upgrades, in
 *  [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
 */
@property(nonatomic, copy, nullable) NSString *autoUpgradeStartTime;

/**
 *  [Output only] This field is set when upgrades are about to commence
 *  with the description of the upgrade.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

@end


/**
 *  Parameters for using BigQuery as the destination of resource usage export.
 */
@interface GTLRContainer_BigQueryDestination : GTLRObject

/** The ID of a BigQuery Dataset. */
@property(nonatomic, copy, nullable) NSString *datasetId;

@end


/**
 *  Configuration for Binary Authorization.
 */
@interface GTLRContainer_BinaryAuthorization : GTLRObject

/**
 *  Enable Binary Authorization for this cluster. If enabled, all container
 *  images will be validated by Binary Authorization.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  CancelOperationRequest cancels a single operation.
 */
@interface GTLRContainer_CancelOperationRequest : GTLRObject

/**
 *  The name (project, location, operation id) of the operation to cancel.
 *  Specified in the format 'projects/ * /locations/ * /operations/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Deprecated. The server-assigned `name` of the operation.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *operationId;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://support.google.com/cloud/answer/6158840).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  operation resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  CidrBlock contains an optional name and one CIDR block.
 */
@interface GTLRContainer_CidrBlock : GTLRObject

/** cidr_block must be specified in CIDR notation. */
@property(nonatomic, copy, nullable) NSString *cidrBlock;

/** display_name is an optional field for users to identify CIDR blocks. */
@property(nonatomic, copy, nullable) NSString *displayName;

@end


/**
 *  Configuration for client certificates on the cluster.
 */
@interface GTLRContainer_ClientCertificateConfig : GTLRObject

/**
 *  Issue a client certificate.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *issueClientCertificate;

@end


/**
 *  Configuration options for the Cloud Run feature.
 */
@interface GTLRContainer_CloudRunConfig : GTLRObject

/**
 *  Whether Cloud Run addon is enabled for this cluster.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

@end


/**
 *  A Google Kubernetes Engine cluster.
 */
@interface GTLRContainer_Cluster : GTLRObject

/** Configurations for the various addons available to run in the cluster. */
@property(nonatomic, strong, nullable) GTLRContainer_AddonsConfig *addonsConfig;

/** Configuration controlling RBAC group membership information. */
@property(nonatomic, strong, nullable) GTLRContainer_AuthenticatorGroupsConfig *authenticatorGroupsConfig;

/** Cluster-level autoscaling configuration. */
@property(nonatomic, strong, nullable) GTLRContainer_ClusterAutoscaling *autoscaling;

/** Configuration for Binary Authorization. */
@property(nonatomic, strong, nullable) GTLRContainer_BinaryAuthorization *binaryAuthorization;

/**
 *  The IP address range of the container pods in this cluster, in
 *  [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
 *  notation (e.g. `10.96.0.0/14`). Leave blank to have
 *  one automatically chosen or specify a `/14` block in `10.0.0.0/8`.
 */
@property(nonatomic, copy, nullable) NSString *clusterIpv4Cidr;

/** Which conditions caused the current cluster state. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_StatusCondition *> *conditions;

/**
 *  [Output only] The time the cluster was created, in
 *  [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
 */
@property(nonatomic, copy, nullable) NSString *createTime;

/** [Output only] The current software version of the master endpoint. */
@property(nonatomic, copy, nullable) NSString *currentMasterVersion;

/**
 *  [Output only] The number of nodes currently in the cluster. Deprecated.
 *  Call Kubernetes API directly to retrieve node information.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentNodeCount;

/**
 *  [Output only] Deprecated, use
 *  [NodePools.version](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools)
 *  instead. The current version of the node software components. If they are
 *  currently at multiple versions because they're in the process of being
 *  upgraded, this reflects the minimum version of all nodes.
 */
@property(nonatomic, copy, nullable) NSString *currentNodeVersion;

/** Configuration of etcd encryption. */
@property(nonatomic, strong, nullable) GTLRContainer_DatabaseEncryption *databaseEncryption;

/**
 *  The default constraint on the maximum number of pods that can be run
 *  simultaneously on a node in the node pool of this cluster. Only honored
 *  if cluster created with IP Alias support.
 */
@property(nonatomic, strong, nullable) GTLRContainer_MaxPodsConstraint *defaultMaxPodsConstraint;

/**
 *  An optional description of this cluster.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Kubernetes alpha features are enabled on this cluster. This includes alpha
 *  API groups (e.g. v1alpha1) and features that may not be production ready in
 *  the kubernetes version of the master and nodes.
 *  The cluster has no SLA for uptime and master/node upgrades are disabled.
 *  Alpha enabled clusters are automatically deleted thirty days after
 *  creation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableKubernetesAlpha;

/**
 *  Enable the ability to use Cloud TPUs in this cluster.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableTpu;

/**
 *  [Output only] The IP address of this cluster's master endpoint.
 *  The endpoint can be accessed from the internet at
 *  `https://username:password\@endpoint/`.
 *  See the `masterAuth` property of this resource for username and
 *  password information.
 */
@property(nonatomic, copy, nullable) NSString *endpoint;

/**
 *  [Output only] The time the cluster will be automatically
 *  deleted in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
 */
@property(nonatomic, copy, nullable) NSString *expireTime;

/**
 *  The initial Kubernetes version for this cluster. Valid versions are those
 *  found in validMasterVersions returned by getServerConfig. The version can
 *  be upgraded over time; such upgrades are reflected in
 *  currentMasterVersion and currentNodeVersion.
 *  Users may specify either explicit versions offered by
 *  Kubernetes Engine or version aliases, which have the following behavior:
 *  - "latest": picks the highest valid Kubernetes version
 *  - "1.X": picks the highest valid patch+gke.N patch in the 1.X version
 *  - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version
 *  - "1.X.Y-gke.N": picks an explicit Kubernetes version
 *  - "","-": picks the default Kubernetes version
 */
@property(nonatomic, copy, nullable) NSString *initialClusterVersion;

/**
 *  The number of nodes to create in this cluster. You must ensure that your
 *  Compute Engine <a href="/compute/docs/resource-quotas">resource quota</a>
 *  is sufficient for this number of instances. You must also have available
 *  firewall and routes quota.
 *  For requests, this field should only be used in lieu of a
 *  "node_pool" object, since this configuration (along with the
 *  "node_config") will be used to create a "NodePool" object with an
 *  auto-generated name. Do not use this and a node_pool at the same time.
 *  This field is deprecated, use node_pool.initial_node_count instead.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *initialNodeCount;

/** Deprecated. Use node_pools.instance_group_urls. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *instanceGroupUrls;

/** Configuration for cluster IP allocation. */
@property(nonatomic, strong, nullable) GTLRContainer_IPAllocationPolicy *ipAllocationPolicy;

/** The fingerprint of the set of labels for this cluster. */
@property(nonatomic, copy, nullable) NSString *labelFingerprint;

/** Configuration for the legacy ABAC authorization mode. */
@property(nonatomic, strong, nullable) GTLRContainer_LegacyAbac *legacyAbac;

/**
 *  [Output only] The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available)
 *  or
 *  [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available)
 *  in which the cluster resides.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  The list of Google Compute Engine
 *  [zones](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster's nodes should be located.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *locations;

/**
 *  The logging service the cluster should use to write logs.
 *  Currently available options:
 *  * `logging.googleapis.com/kubernetes` - The Cloud Logging
 *  service with a Kubernetes-native resource model
 *  * `logging.googleapis.com` - The legacy Cloud Logging service (no longer
 *  available as of GKE 1.15).
 *  * `none` - no logs will be exported from the cluster.
 *  If left as an empty string,`logging.googleapis.com/kubernetes` will be
 *  used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.
 */
@property(nonatomic, copy, nullable) NSString *loggingService;

/** Configure the maintenance policy for this cluster. */
@property(nonatomic, strong, nullable) GTLRContainer_MaintenancePolicy *maintenancePolicy;

/**
 *  The authentication information for accessing the master endpoint.
 *  If unspecified, the defaults are used:
 *  For clusters before v1.12, if master_auth is unspecified, `username` will
 *  be set to "admin", a random password will be generated, and a client
 *  certificate will be issued.
 */
@property(nonatomic, strong, nullable) GTLRContainer_MasterAuth *masterAuth;

/** The configuration options for master authorized networks feature. */
@property(nonatomic, strong, nullable) GTLRContainer_MasterAuthorizedNetworksConfig *masterAuthorizedNetworksConfig;

/**
 *  The monitoring service the cluster should use to write metrics.
 *  Currently available options:
 *  * "monitoring.googleapis.com/kubernetes" - The Cloud Monitoring
 *  service with a Kubernetes-native resource model
 *  * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no
 *  longer available as of GKE 1.15).
 *  * `none` - No metrics will be exported from the cluster.
 *  If left as an empty string,`monitoring.googleapis.com/kubernetes` will be
 *  used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.
 */
@property(nonatomic, copy, nullable) NSString *monitoringService;

/**
 *  The name of this cluster. The name must be unique within this project
 *  and location (e.g. zone or region), and can be up to 40 characters with
 *  the following restrictions:
 *  * Lowercase letters, numbers, and hyphens only.
 *  * Must start with a letter.
 *  * Must end with a number or a letter.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The name of the Google Compute Engine
 *  [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks)
 *  to which the cluster is connected. If left unspecified, the `default`
 *  network will be used.
 */
@property(nonatomic, copy, nullable) NSString *network;

/** Configuration for cluster networking. */
@property(nonatomic, strong, nullable) GTLRContainer_NetworkConfig *networkConfig;

/** Configuration options for the NetworkPolicy feature. */
@property(nonatomic, strong, nullable) GTLRContainer_NetworkPolicy *networkPolicy;

/**
 *  Parameters used in creating the cluster's nodes.
 *  For requests, this field should only be used in lieu of a
 *  "node_pool" object, since this configuration (along with the
 *  "initial_node_count") will be used to create a "NodePool" object with an
 *  auto-generated name. Do not use this and a node_pool at the same time.
 *  For responses, this field will be populated with the node configuration of
 *  the first node pool. (For configuration of each node pool, see
 *  `node_pool.config`)
 *  If unspecified, the defaults are used.
 *  This field is deprecated, use node_pool.config instead.
 */
@property(nonatomic, strong, nullable) GTLRContainer_NodeConfig *nodeConfig;

/**
 *  [Output only] The size of the address space on each node for hosting
 *  containers. This is provisioned from within the `container_ipv4_cidr`
 *  range. This field will only be set when cluster is in route-based network
 *  mode.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nodeIpv4CidrSize;

/**
 *  The node pools associated with this cluster.
 *  This field should not be set if "node_config" or "initial_node_count" are
 *  specified.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_NodePool *> *nodePools;

/** Configuration for private cluster. */
@property(nonatomic, strong, nullable) GTLRContainer_PrivateClusterConfig *privateClusterConfig;

/**
 *  The resource labels for the cluster to use to annotate any related
 *  Google Compute Engine resources.
 */
@property(nonatomic, strong, nullable) GTLRContainer_Cluster_ResourceLabels *resourceLabels;

/**
 *  Configuration for exporting resource usages. Resource usage export is
 *  disabled when this config is unspecified.
 */
@property(nonatomic, strong, nullable) GTLRContainer_ResourceUsageExportConfig *resourceUsageExportConfig;

/** [Output only] Server-defined URL for the resource. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  [Output only] The IP address range of the Kubernetes services in
 *  this cluster, in
 *  [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
 *  notation (e.g. `1.2.3.4/29`). Service addresses are
 *  typically put in the last `/16` from the container CIDR.
 */
@property(nonatomic, copy, nullable) NSString *servicesIpv4Cidr;

/** Shielded Nodes configuration. */
@property(nonatomic, strong, nullable) GTLRContainer_ShieldedNodes *shieldedNodes;

/**
 *  [Output only] The current status of this cluster.
 *
 *  Likely values:
 *    @arg @c kGTLRContainer_Cluster_Status_Degraded The DEGRADED state
 *        indicates the cluster requires user action to restore
 *        full functionality. Details can be found in the `statusMessage` field.
 *        (Value: "DEGRADED")
 *    @arg @c kGTLRContainer_Cluster_Status_Error The ERROR state indicates the
 *        cluster may be unusable. Details
 *        can be found in the `statusMessage` field. (Value: "ERROR")
 *    @arg @c kGTLRContainer_Cluster_Status_Provisioning The PROVISIONING state
 *        indicates the cluster is being created. (Value: "PROVISIONING")
 *    @arg @c kGTLRContainer_Cluster_Status_Reconciling The RECONCILING state
 *        indicates that some work is actively being done on
 *        the cluster, such as upgrading the master or node software. Details
 *        can
 *        be found in the `statusMessage` field. (Value: "RECONCILING")
 *    @arg @c kGTLRContainer_Cluster_Status_Running The RUNNING state indicates
 *        the cluster has been created and is fully
 *        usable. (Value: "RUNNING")
 *    @arg @c kGTLRContainer_Cluster_Status_StatusUnspecified Not set. (Value:
 *        "STATUS_UNSPECIFIED")
 *    @arg @c kGTLRContainer_Cluster_Status_Stopping The STOPPING state
 *        indicates the cluster is being deleted. (Value: "STOPPING")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  [Output only] Additional information about the current status of this
 *  cluster, if available.
 */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  The name of the Google Compute Engine
 *  [subnetwork](https://cloud.google.com/compute/docs/subnetworks) to which
 *  the cluster is connected.
 */
@property(nonatomic, copy, nullable) NSString *subnetwork;

/**
 *  [Output only] The IP address range of the Cloud TPUs in this cluster, in
 *  [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
 *  notation (e.g. `1.2.3.4/29`).
 */
@property(nonatomic, copy, nullable) NSString *tpuIpv4CidrBlock;

/** Cluster-level Vertical Pod Autoscaling configuration. */
@property(nonatomic, strong, nullable) GTLRContainer_VerticalPodAutoscaling *verticalPodAutoscaling;

/**
 *  Configuration for the use of Kubernetes Service Accounts in GCP IAM
 *  policies.
 */
@property(nonatomic, strong, nullable) GTLRContainer_WorkloadIdentityConfig *workloadIdentityConfig;

/**
 *  [Output only] The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field is deprecated, use location instead.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  The resource labels for the cluster to use to annotate any related
 *  Google Compute Engine resources.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRContainer_Cluster_ResourceLabels : GTLRObject
@end


/**
 *  ClusterAutoscaling contains global, per-cluster information
 *  required by Cluster Autoscaler to automatically adjust
 *  the size of the cluster and create/delete
 *  node pools based on the current needs.
 */
@interface GTLRContainer_ClusterAutoscaling : GTLRObject

/**
 *  The list of Google Compute Engine
 *  [zones](https://cloud.google.com/compute/docs/zones#available) in which the
 *  NodePool's nodes can be created by NAP.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *autoprovisioningLocations;

/**
 *  AutoprovisioningNodePoolDefaults contains defaults for a node pool
 *  created by NAP.
 */
@property(nonatomic, strong, nullable) GTLRContainer_AutoprovisioningNodePoolDefaults *autoprovisioningNodePoolDefaults;

/**
 *  Enables automatic node pool creation and deletion.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableNodeAutoprovisioning;

/**
 *  Contains global constraints regarding minimum and maximum
 *  amount of resources in the cluster.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_ResourceLimit *> *resourceLimits;

@end


/**
 *  ClusterUpdate describes an update to the cluster. Exactly one update can
 *  be applied to a cluster with each request, so at most one field can be
 *  provided.
 */
@interface GTLRContainer_ClusterUpdate : GTLRObject

/** Configurations for the various addons available to run in the cluster. */
@property(nonatomic, strong, nullable) GTLRContainer_AddonsConfig *desiredAddonsConfig;

/** The desired configuration options for the Binary Authorization feature. */
@property(nonatomic, strong, nullable) GTLRContainer_BinaryAuthorization *desiredBinaryAuthorization;

/** Cluster-level autoscaling configuration. */
@property(nonatomic, strong, nullable) GTLRContainer_ClusterAutoscaling *desiredClusterAutoscaling;

/** Configuration of etcd encryption. */
@property(nonatomic, strong, nullable) GTLRContainer_DatabaseEncryption *desiredDatabaseEncryption;

/**
 *  The desired image type for the node pool.
 *  NOTE: Set the "desired_node_pool" field as well.
 */
@property(nonatomic, copy, nullable) NSString *desiredImageType;

/** The desired config of Intra-node visibility. */
@property(nonatomic, strong, nullable) GTLRContainer_IntraNodeVisibilityConfig *desiredIntraNodeVisibilityConfig;

/**
 *  The desired list of Google Compute Engine
 *  [zones](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster's nodes should be located. Changing the locations a cluster is in
 *  will result in nodes being either created or removed from the cluster,
 *  depending on whether locations are being added or removed.
 *  This list must always include the cluster's primary zone.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *desiredLocations;

/**
 *  The logging service the cluster should use to write logs.
 *  Currently available options:
 *  * `logging.googleapis.com/kubernetes` - The Cloud Logging
 *  service with a Kubernetes-native resource model
 *  * `logging.googleapis.com` - The legacy Cloud Logging service (no longer
 *  available as of GKE 1.15).
 *  * `none` - no logs will be exported from the cluster.
 *  If left as an empty string,`logging.googleapis.com/kubernetes` will be
 *  used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.
 */
@property(nonatomic, copy, nullable) NSString *desiredLoggingService;

/**
 *  The desired configuration options for master authorized networks feature.
 */
@property(nonatomic, strong, nullable) GTLRContainer_MasterAuthorizedNetworksConfig *desiredMasterAuthorizedNetworksConfig;

/**
 *  The Kubernetes version to change the master to.
 *  Users may specify either explicit versions offered by
 *  Kubernetes Engine or version aliases, which have the following behavior:
 *  - "latest": picks the highest valid Kubernetes version
 *  - "1.X": picks the highest valid patch+gke.N patch in the 1.X version
 *  - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version
 *  - "1.X.Y-gke.N": picks an explicit Kubernetes version
 *  - "-": picks the default Kubernetes version
 */
@property(nonatomic, copy, nullable) NSString *desiredMasterVersion;

/**
 *  The monitoring service the cluster should use to write metrics.
 *  Currently available options:
 *  * "monitoring.googleapis.com/kubernetes" - The Cloud Monitoring
 *  service with a Kubernetes-native resource model
 *  * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no
 *  longer available as of GKE 1.15).
 *  * `none` - No metrics will be exported from the cluster.
 *  If left as an empty string,`monitoring.googleapis.com/kubernetes` will be
 *  used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.
 */
@property(nonatomic, copy, nullable) NSString *desiredMonitoringService;

/**
 *  Autoscaler configuration for the node pool specified in
 *  desired_node_pool_id. If there is only one pool in the
 *  cluster and desired_node_pool_id is not provided then
 *  the change applies to that single node pool.
 */
@property(nonatomic, strong, nullable) GTLRContainer_NodePoolAutoscaling *desiredNodePoolAutoscaling;

/**
 *  The node pool to be upgraded. This field is mandatory if
 *  "desired_node_version", "desired_image_family" or
 *  "desired_node_pool_autoscaling" is specified and there is more than one
 *  node pool on the cluster.
 */
@property(nonatomic, copy, nullable) NSString *desiredNodePoolId;

/**
 *  The Kubernetes version to change the nodes to (typically an
 *  upgrade).
 *  Users may specify either explicit versions offered by
 *  Kubernetes Engine or version aliases, which have the following behavior:
 *  - "latest": picks the highest valid Kubernetes version
 *  - "1.X": picks the highest valid patch+gke.N patch in the 1.X version
 *  - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version
 *  - "1.X.Y-gke.N": picks an explicit Kubernetes version
 *  - "-": picks the Kubernetes master version
 */
@property(nonatomic, copy, nullable) NSString *desiredNodeVersion;

/** The desired configuration for exporting resource usage. */
@property(nonatomic, strong, nullable) GTLRContainer_ResourceUsageExportConfig *desiredResourceUsageExportConfig;

/** Configuration for Shielded Nodes. */
@property(nonatomic, strong, nullable) GTLRContainer_ShieldedNodes *desiredShieldedNodes;

/** Cluster-level Vertical Pod Autoscaling configuration. */
@property(nonatomic, strong, nullable) GTLRContainer_VerticalPodAutoscaling *desiredVerticalPodAutoscaling;

/** Configuration for Workload Identity. */
@property(nonatomic, strong, nullable) GTLRContainer_WorkloadIdentityConfig *desiredWorkloadIdentityConfig;

@end


/**
 *  CompleteIPRotationRequest moves the cluster master back into single-IP mode.
 */
@interface GTLRContainer_CompleteIPRotationRequest : GTLRObject

/**
 *  Deprecated. The name of the cluster.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  The name (project, location, cluster id) of the cluster to complete IP
 *  rotation. Specified in the format 'projects/ * /locations/ * /clusters/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://developers.google.com/console/help/new/#projectnumber).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  Parameters for controlling consumption metering.
 */
@interface GTLRContainer_ConsumptionMeteringConfig : GTLRObject

/**
 *  Whether to enable consumption metering for this cluster. If enabled, a
 *  second BigQuery table will be created to hold resource consumption
 *  records.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  CreateClusterRequest creates a cluster.
 */
@interface GTLRContainer_CreateClusterRequest : GTLRObject

/**
 *  Required. A [cluster
 *  resource](https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters)
 */
@property(nonatomic, strong, nullable) GTLRContainer_Cluster *cluster;

/**
 *  The parent (project and location) where the cluster will be created.
 *  Specified in the format 'projects/ * /locations/ *'.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://support.google.com/cloud/answer/6158840).
 *  This field has been deprecated and replaced by the parent field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the parent
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  CreateNodePoolRequest creates a node pool for a cluster.
 */
@interface GTLRContainer_CreateNodePoolRequest : GTLRObject

/**
 *  Deprecated. The name of the cluster.
 *  This field has been deprecated and replaced by the parent field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/** Required. The node pool to create. */
@property(nonatomic, strong, nullable) GTLRContainer_NodePool *nodePool;

/**
 *  The parent (project, location, cluster id) where the node pool will be
 *  created. Specified in the format
 *  'projects/ * /locations/ * /clusters/ *'.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://developers.google.com/console/help/new/#projectnumber).
 *  This field has been deprecated and replaced by the parent field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the parent
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  Time window specified for daily maintenance operations.
 */
@interface GTLRContainer_DailyMaintenanceWindow : GTLRObject

/**
 *  [Output only] Duration of the time window, automatically chosen to be
 *  smallest possible in the given scenario.
 *  Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt)
 *  format "PTnHnMnS".
 */
@property(nonatomic, copy, nullable) NSString *duration;

/**
 *  Time within the maintenance window to start the maintenance operations.
 *  Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt)
 *  format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
 */
@property(nonatomic, copy, nullable) NSString *startTime;

@end


/**
 *  Configuration of etcd encryption.
 */
@interface GTLRContainer_DatabaseEncryption : GTLRObject

/**
 *  Name of CloudKMS key to use for the encryption of secrets in etcd.
 *  Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
 */
@property(nonatomic, copy, nullable) NSString *keyName;

/**
 *  Denotes the state of etcd encryption.
 *
 *  Likely values:
 *    @arg @c kGTLRContainer_DatabaseEncryption_State_Decrypted Secrets in etcd
 *        are stored in plain text (at etcd level) - this is
 *        unrelated to Compute Engine level full disk encryption. (Value:
 *        "DECRYPTED")
 *    @arg @c kGTLRContainer_DatabaseEncryption_State_Encrypted Secrets in etcd
 *        are encrypted. (Value: "ENCRYPTED")
 *    @arg @c kGTLRContainer_DatabaseEncryption_State_Unknown Should never be
 *        set (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRContainer_Empty : GTLRObject
@end


/**
 *  GetJSONWebKeysResponse is a valid JSON Web Key Set as specififed in rfc 7517
 */
@interface GTLRContainer_GetJSONWebKeysResponse : GTLRObject

/**
 *  OnePlatform automatically extracts this field and uses it to set the HTTP
 *  Cache-Control header.
 */
@property(nonatomic, strong, nullable) GTLRContainer_HttpCacheControlResponseHeader *cacheHeader;

/**
 *  The public component of the keys used by the cluster to sign token
 *  requests.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_Jwk *> *keys;

@end


/**
 *  GetOpenIDConfigResponse is an OIDC discovery document for the cluster.
 *  See the OpenID Connect Discovery 1.0 specification for details.
 */
@interface GTLRContainer_GetOpenIDConfigResponse : GTLRObject

/**
 *  OnePlatform automatically extracts this field and uses it to set the HTTP
 *  Cache-Control header.
 */
@property(nonatomic, strong, nullable) GTLRContainer_HttpCacheControlResponseHeader *cacheHeader;

/** Supported claims. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *claimsSupported;

/** Supported grant types. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *grantTypes;

/** supported ID Token signing Algorithms. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *idTokenSigningAlgValuesSupported;

/** OIDC Issuer. */
@property(nonatomic, copy, nullable) NSString *issuer;

/** JSON Web Key uri. */
@property(nonatomic, copy, nullable) NSString *jwksUri;

/** Supported response types. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *responseTypesSupported;

/** Supported subject types. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *subjectTypesSupported;

@end


/**
 *  Configuration options for the horizontal pod autoscaling feature, which
 *  increases or decreases the number of replica pods a replication controller
 *  has based on the resource usage of the existing pods.
 */
@interface GTLRContainer_HorizontalPodAutoscaling : GTLRObject

/**
 *  Whether the Horizontal Pod Autoscaling feature is enabled in the cluster.
 *  When enabled, it ensures that metrics are collected into Stackdriver
 *  Monitoring.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

@end


/**
 *  RFC-2616: cache control support
 */
@interface GTLRContainer_HttpCacheControlResponseHeader : GTLRObject

/**
 *  14.6 response cache age, in seconds since the response is generated
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *age;

/** 14.9 request and response directives */
@property(nonatomic, copy, nullable) NSString *directive;

/** 14.21 response cache expires, in RFC 1123 date format */
@property(nonatomic, copy, nullable) NSString *expires;

@end


/**
 *  Configuration options for the HTTP (L7) load balancing controller addon,
 *  which makes it easy to set up HTTP load balancers for services in a cluster.
 */
@interface GTLRContainer_HttpLoadBalancing : GTLRObject

/**
 *  Whether the HTTP Load Balancing controller is enabled in the cluster.
 *  When enabled, it runs a small pod in the cluster that manages the load
 *  balancers.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

@end


/**
 *  IntraNodeVisibilityConfig contains the desired config of the intra-node
 *  visibility on this cluster.
 */
@interface GTLRContainer_IntraNodeVisibilityConfig : GTLRObject

/**
 *  Enables intra node visibility for this cluster.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  Configuration for controlling how IPs are allocated in the cluster.
 */
@interface GTLRContainer_IPAllocationPolicy : GTLRObject

/** This field is deprecated, use cluster_ipv4_cidr_block. */
@property(nonatomic, copy, nullable) NSString *clusterIpv4Cidr;

/**
 *  The IP address range for the cluster pod IPs. If this field is set, then
 *  `cluster.cluster_ipv4_cidr` must be left blank.
 *  This field is only applicable when `use_ip_aliases` is true.
 *  Set to blank to have a range chosen with the default size.
 *  Set to /netmask (e.g. `/14`) to have a range chosen with a specific
 *  netmask.
 *  Set to a
 *  [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
 *  notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
 *  `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range
 *  to use.
 */
@property(nonatomic, copy, nullable) NSString *clusterIpv4CidrBlock;

/**
 *  The name of the secondary range to be used for the cluster CIDR
 *  block. The secondary range will be used for pod IP
 *  addresses. This must be an existing secondary range associated
 *  with the cluster subnetwork.
 *  This field is only applicable with use_ip_aliases is true and
 *  create_subnetwork is false.
 */
@property(nonatomic, copy, nullable) NSString *clusterSecondaryRangeName;

/**
 *  Whether a new subnetwork will be created automatically for the cluster.
 *  This field is only applicable when `use_ip_aliases` is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *createSubnetwork;

/** This field is deprecated, use node_ipv4_cidr_block. */
@property(nonatomic, copy, nullable) NSString *nodeIpv4Cidr;

/**
 *  The IP address range of the instance IPs in this cluster.
 *  This is applicable only if `create_subnetwork` is true.
 *  Set to blank to have a range chosen with the default size.
 *  Set to /netmask (e.g. `/14`) to have a range chosen with a specific
 *  netmask.
 *  Set to a
 *  [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
 *  notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
 *  `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range
 *  to use.
 */
@property(nonatomic, copy, nullable) NSString *nodeIpv4CidrBlock;

/** This field is deprecated, use services_ipv4_cidr_block. */
@property(nonatomic, copy, nullable) NSString *servicesIpv4Cidr;

/**
 *  The IP address range of the services IPs in this cluster. If blank, a range
 *  will be automatically chosen with the default size.
 *  This field is only applicable when `use_ip_aliases` is true.
 *  Set to blank to have a range chosen with the default size.
 *  Set to /netmask (e.g. `/14`) to have a range chosen with a specific
 *  netmask.
 *  Set to a
 *  [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
 *  notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
 *  `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range
 *  to use.
 */
@property(nonatomic, copy, nullable) NSString *servicesIpv4CidrBlock;

/**
 *  The name of the secondary range to be used as for the services
 *  CIDR block. The secondary range will be used for service
 *  ClusterIPs. This must be an existing secondary range associated
 *  with the cluster subnetwork.
 *  This field is only applicable with use_ip_aliases is true and
 *  create_subnetwork is false.
 */
@property(nonatomic, copy, nullable) NSString *servicesSecondaryRangeName;

/**
 *  A custom subnetwork name to be used if `create_subnetwork` is true. If
 *  this field is empty, then an automatic name will be chosen for the new
 *  subnetwork.
 */
@property(nonatomic, copy, nullable) NSString *subnetworkName;

/**
 *  The IP address range of the Cloud TPUs in this cluster. If unspecified, a
 *  range will be automatically chosen with the default size.
 *  This field is only applicable when `use_ip_aliases` is true.
 *  If unspecified, the range will use the default size.
 *  Set to /netmask (e.g. `/14`) to have a range chosen with a specific
 *  netmask.
 *  Set to a
 *  [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
 *  notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
 *  `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range
 *  to use.
 */
@property(nonatomic, copy, nullable) NSString *tpuIpv4CidrBlock;

/**
 *  Whether alias IPs will be used for pod IPs in the cluster.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useIpAliases;

@end


/**
 *  Jwk is a JSON Web Key as specified in RFC 7517
 */
@interface GTLRContainer_Jwk : GTLRObject

/** Algorithm. */
@property(nonatomic, copy, nullable) NSString *alg;

/** Used for ECDSA keys. */
@property(nonatomic, copy, nullable) NSString *crv;

/** Used for RSA keys. */
@property(nonatomic, copy, nullable) NSString *e;

/** Key ID. */
@property(nonatomic, copy, nullable) NSString *kid;

/** Key Type. */
@property(nonatomic, copy, nullable) NSString *kty;

/** Used for RSA keys. */
@property(nonatomic, copy, nullable) NSString *n;

/** Permitted uses for the public keys. */
@property(nonatomic, copy, nullable) NSString *use;

/** Used for ECDSA keys. */
@property(nonatomic, copy, nullable) NSString *x;

/** Used for ECDSA keys. */
@property(nonatomic, copy, nullable) NSString *y;

@end


/**
 *  Configuration for the Kubernetes Dashboard.
 */
@interface GTLRContainer_KubernetesDashboard : GTLRObject

/**
 *  Whether the Kubernetes Dashboard is enabled for this cluster.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

@end


/**
 *  Configuration for the legacy Attribute Based Access Control authorization
 *  mode.
 */
@interface GTLRContainer_LegacyAbac : GTLRObject

/**
 *  Whether the ABAC authorizer is enabled for this cluster. When enabled,
 *  identities in the system, including service accounts, nodes, and
 *  controllers, will have statically granted permissions beyond those
 *  provided by the RBAC configuration or IAM.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  ListClustersResponse is the result of ListClustersRequest.
 */
@interface GTLRContainer_ListClustersResponse : GTLRObject

/**
 *  A list of clusters in the project in the specified zone, or
 *  across all ones.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_Cluster *> *clusters;

/**
 *  If any zones are listed here, the list of clusters returned
 *  may be missing those zones.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *missingZones;

@end


/**
 *  ListNodePoolsResponse is the result of ListNodePoolsRequest.
 */
@interface GTLRContainer_ListNodePoolsResponse : GTLRObject

/** A list of node pools for a cluster. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_NodePool *> *nodePools;

@end


/**
 *  ListOperationsResponse is the result of ListOperationsRequest.
 */
@interface GTLRContainer_ListOperationsResponse : GTLRObject

/**
 *  If any zones are listed here, the list of operations returned
 *  may be missing the operations from those zones.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *missingZones;

/** A list of operations in the project in the specified zone. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_Operation *> *operations;

@end


/**
 *  ListUsableSubnetworksResponse is the response of
 *  ListUsableSubnetworksRequest.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "subnetworks" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRContainer_ListUsableSubnetworksResponse : GTLRCollectionObject

/**
 *  This token allows you to get the next page of results for list requests.
 *  If the number of results is larger than `page_size`, use the
 *  `next_page_token` as a value for the query parameter `page_token` in the
 *  next request. The value will become empty when there are no more pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of usable subnetworks in the specified network project.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_UsableSubnetwork *> *subnetworks;

@end


/**
 *  MaintenancePolicy defines the maintenance policy to be used for the cluster.
 */
@interface GTLRContainer_MaintenancePolicy : GTLRObject

/**
 *  A hash identifying the version of this policy, so that updates to fields of
 *  the policy won't accidentally undo intermediate changes (and so that users
 *  of the API unaware of some fields won't accidentally remove other fields).
 *  Make a <code>get()</code> request to the cluster to get the current
 *  resource version and include it with requests to set the policy.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/** Specifies the maintenance window in which maintenance may be performed. */
@property(nonatomic, strong, nullable) GTLRContainer_MaintenanceWindow *window;

@end


/**
 *  MaintenanceWindow defines the maintenance window to be used for the cluster.
 */
@interface GTLRContainer_MaintenanceWindow : GTLRObject

/** DailyMaintenanceWindow specifies a daily maintenance operation window. */
@property(nonatomic, strong, nullable) GTLRContainer_DailyMaintenanceWindow *dailyMaintenanceWindow;

/**
 *  Exceptions to maintenance window. Non-emergency maintenance should not
 *  occur in these windows.
 */
@property(nonatomic, strong, nullable) GTLRContainer_MaintenanceWindow_MaintenanceExclusions *maintenanceExclusions;

/**
 *  RecurringWindow specifies some number of recurring time periods for
 *  maintenance to occur. The time windows may be overlapping. If no
 *  maintenance windows are set, maintenance can occur at any time.
 */
@property(nonatomic, strong, nullable) GTLRContainer_RecurringTimeWindow *recurringWindow;

@end


/**
 *  Exceptions to maintenance window. Non-emergency maintenance should not
 *  occur in these windows.
 *
 *  @note This class is documented as having more properties of
 *        GTLRContainer_TimeWindow. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRContainer_MaintenanceWindow_MaintenanceExclusions : GTLRObject
@end


/**
 *  The authentication information for accessing the master endpoint.
 *  Authentication can be done using HTTP basic auth or using client
 *  certificates.
 */
@interface GTLRContainer_MasterAuth : GTLRObject

/**
 *  [Output only] Base64-encoded public certificate used by clients to
 *  authenticate to the cluster endpoint.
 */
@property(nonatomic, copy, nullable) NSString *clientCertificate;

/**
 *  Configuration for client certificate authentication on the cluster. For
 *  clusters before v1.12, if no configuration is specified, a client
 *  certificate is issued.
 */
@property(nonatomic, strong, nullable) GTLRContainer_ClientCertificateConfig *clientCertificateConfig;

/**
 *  [Output only] Base64-encoded private key used by clients to authenticate
 *  to the cluster endpoint.
 */
@property(nonatomic, copy, nullable) NSString *clientKey;

/**
 *  [Output only] Base64-encoded public certificate that is the root of
 *  trust for the cluster.
 */
@property(nonatomic, copy, nullable) NSString *clusterCaCertificate;

/**
 *  The password to use for HTTP basic authentication to the master endpoint.
 *  Because the master endpoint is open to the Internet, you should create a
 *  strong password. If a password is provided for cluster creation, username
 *  must be non-empty.
 */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  The username to use for HTTP basic authentication to the master endpoint.
 *  For clusters v1.6.0 and later, basic authentication can be disabled by
 *  leaving username unspecified (or setting it to the empty string).
 */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  Configuration options for the master authorized networks feature. Enabled
 *  master authorized networks will disallow all external traffic to access
 *  Kubernetes master through HTTPS except traffic from the given CIDR blocks,
 *  Google Compute Engine Public IPs and Google Prod IPs.
 */
@interface GTLRContainer_MasterAuthorizedNetworksConfig : GTLRObject

/**
 *  cidr_blocks define up to 50 external networks that could access
 *  Kubernetes master through HTTPS.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_CidrBlock *> *cidrBlocks;

/**
 *  Whether or not master authorized networks is enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  Constraints applied to pods.
 */
@interface GTLRContainer_MaxPodsConstraint : GTLRObject

/**
 *  Constraint enforced on the max num of pods per node.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxPodsPerNode;

@end


/**
 *  Progress metric is (string, int|float|string) pair.
 */
@interface GTLRContainer_Metric : GTLRObject

/**
 *  For metrics with floating point value.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *doubleValue;

/**
 *  For metrics with integer value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *intValue;

/** Required. Metric name, e.g., "nodes total", "percent done". */
@property(nonatomic, copy, nullable) NSString *name;

/** For metrics with custom values (ratios, visual progress, etc.). */
@property(nonatomic, copy, nullable) NSString *stringValue;

@end


/**
 *  NetworkConfig reports the relative names of network & subnetwork.
 */
@interface GTLRContainer_NetworkConfig : GTLRObject

/**
 *  Whether Intra-node visibility is enabled for this cluster.
 *  This makes same node pod to pod traffic visible for VPC network.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableIntraNodeVisibility;

/**
 *  Output only. The relative name of the Google Compute Engine
 *  network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks)
 *  to which the cluster is connected. Example:
 *  projects/my-project/global/networks/my-network
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  Output only. The relative name of the Google Compute Engine
 *  [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the
 *  cluster is connected. Example:
 *  projects/my-project/regions/us-central1/subnetworks/my-subnet
 */
@property(nonatomic, copy, nullable) NSString *subnetwork;

@end


/**
 *  Configuration options for the NetworkPolicy feature.
 *  https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
 */
@interface GTLRContainer_NetworkPolicy : GTLRObject

/**
 *  Whether network policy is enabled on the cluster.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

/**
 *  The selected network policy provider.
 *
 *  Likely values:
 *    @arg @c kGTLRContainer_NetworkPolicy_Provider_Calico Tigera (Calico
 *        Felix). (Value: "CALICO")
 *    @arg @c kGTLRContainer_NetworkPolicy_Provider_ProviderUnspecified Not set
 *        (Value: "PROVIDER_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *provider;

@end


/**
 *  Configuration for NetworkPolicy. This only tracks whether the addon
 *  is enabled or not on the Master, it does not track whether network policy
 *  is enabled for the nodes.
 */
@interface GTLRContainer_NetworkPolicyConfig : GTLRObject

/**
 *  Whether NetworkPolicy is enabled for this cluster.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

@end


/**
 *  Parameters that describe the nodes in a cluster.
 */
@interface GTLRContainer_NodeConfig : GTLRObject

/**
 *  A list of hardware accelerators to be attached to each node.
 *  See https://cloud.google.com/compute/docs/gpus for more information about
 *  support for GPUs.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_AcceleratorConfig *> *accelerators;

/**
 *  Size of the disk attached to each node, specified in GB.
 *  The smallest allowed disk size is 10GB.
 *  If unspecified, the default disk size is 100GB.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *diskSizeGb;

/**
 *  Type of the disk attached to each node (e.g. 'pd-standard' or 'pd-ssd')
 *  If unspecified, the default disk type is 'pd-standard'
 */
@property(nonatomic, copy, nullable) NSString *diskType;

/**
 *  The image type to use for this node. Note that for a given image type,
 *  the latest version of it will be used.
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/**
 *  The map of Kubernetes labels (key/value pairs) to be applied to each node.
 *  These will added in addition to any default label(s) that
 *  Kubernetes may apply to the node.
 *  In case of conflict in label keys, the applied set may differ depending on
 *  the Kubernetes version -- it's best to assume the behavior is undefined
 *  and conflicts should be avoided.
 *  For more information, including usage and the valid values, see:
 *  https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
 */
@property(nonatomic, strong, nullable) GTLRContainer_NodeConfig_Labels *labels;

/**
 *  The number of local SSD disks to be attached to the node.
 *  The limit for this value is dependent upon the maximum number of
 *  disks available on a machine per zone. See:
 *  https://cloud.google.com/compute/docs/disks/local-ssd
 *  for more information.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *localSsdCount;

/**
 *  The name of a Google Compute Engine [machine
 *  type](https://cloud.google.com/compute/docs/machine-types) (e.g.
 *  `n1-standard-1`).
 *  If unspecified, the default machine type is
 *  `n1-standard-1`.
 */
@property(nonatomic, copy, nullable) NSString *machineType;

/**
 *  The metadata key/value pairs assigned to instances in the cluster.
 *  Keys must conform to the regexp [a-zA-Z0-9-_]+ and be less than 128 bytes
 *  in length. These are reflected as part of a URL in the metadata server.
 *  Additionally, to avoid ambiguity, keys must not conflict with any other
 *  metadata keys for the project or be one of the reserved keys:
 *  "cluster-location"
 *  "cluster-name"
 *  "cluster-uid"
 *  "configure-sh"
 *  "containerd-configure-sh"
 *  "enable-os-login"
 *  "gci-ensure-gke-docker"
 *  "gci-metrics-enabled"
 *  "gci-update-strategy"
 *  "instance-template"
 *  "kube-env"
 *  "startup-script"
 *  "user-data"
 *  "disable-address-manager"
 *  "windows-startup-script-ps1"
 *  "common-psm1"
 *  "k8s-node-setup-psm1"
 *  "install-ssh-psm1"
 *  "user-profile-psm1"
 *  "serial-port-logging-enable"
 *  Values are free-form strings, and only have meaning as interpreted by
 *  the image running in the instance. The only restriction placed on them is
 *  that each value's size must be less than or equal to 32 KB.
 *  The total size of all keys and values must be less than 512 KB.
 */
@property(nonatomic, strong, nullable) GTLRContainer_NodeConfig_Metadata *metadata;

/**
 *  Minimum CPU platform to be used by this instance. The instance may be
 *  scheduled on the specified or newer CPU platform. Applicable values are the
 *  friendly names of CPU platforms, such as
 *  <code>minCpuPlatform: &quot;Intel Haswell&quot;</code> or
 *  <code>minCpuPlatform: &quot;Intel Sandy Bridge&quot;</code>. For more
 *  information, read [how to specify min CPU
 *  platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
 */
@property(nonatomic, copy, nullable) NSString *minCpuPlatform;

/**
 *  The set of Google API scopes to be made available on all of the
 *  node VMs under the "default" service account.
 *  The following scopes are recommended, but not required, and by default are
 *  not included:
 *  * `https://www.googleapis.com/auth/compute` is required for mounting
 *  persistent storage on your nodes.
 *  * `https://www.googleapis.com/auth/devstorage.read_only` is required for
 *  communicating with **gcr.io**
 *  (the [Google Container
 *  Registry](https://cloud.google.com/container-registry/)).
 *  If unspecified, no scopes are added, unless Cloud Logging or Cloud
 *  Monitoring are enabled, in which case their required scopes will be added.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *oauthScopes;

/**
 *  Whether the nodes are created as preemptible VM instances. See:
 *  https://cloud.google.com/compute/docs/instances/preemptible for more
 *  information about preemptible VM instances.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preemptible;

/**
 *  The optional reservation affinity. Setting this field will apply
 *  the specified [Zonal Compute
 *  Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources)
 *  to this node pool.
 */
@property(nonatomic, strong, nullable) GTLRContainer_ReservationAffinity *reservationAffinity;

/** Sandbox configuration for this node. */
@property(nonatomic, strong, nullable) GTLRContainer_SandboxConfig *sandboxConfig;

/**
 *  The Google Cloud Platform Service Account to be used by the node VMs.
 *  Specify the email address of the Service Account; otherwise, if no Service
 *  Account is specified, the "default" service account is used.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/** Shielded Instance options. */
@property(nonatomic, strong, nullable) GTLRContainer_ShieldedInstanceConfig *shieldedInstanceConfig;

/**
 *  The list of instance tags applied to all nodes. Tags are used to identify
 *  valid sources or targets for network firewalls and are specified by
 *  the client during cluster or node pool creation. Each tag within the list
 *  must comply with RFC1035.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

/**
 *  List of kubernetes taints to be applied to each node.
 *  For more information, including usage and the valid values, see:
 *  https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_NodeTaint *> *taints;

/** The workload metadata configuration for this node. */
@property(nonatomic, strong, nullable) GTLRContainer_WorkloadMetadataConfig *workloadMetadataConfig;

@end


/**
 *  The map of Kubernetes labels (key/value pairs) to be applied to each node.
 *  These will added in addition to any default label(s) that
 *  Kubernetes may apply to the node.
 *  In case of conflict in label keys, the applied set may differ depending on
 *  the Kubernetes version -- it's best to assume the behavior is undefined
 *  and conflicts should be avoided.
 *  For more information, including usage and the valid values, see:
 *  https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRContainer_NodeConfig_Labels : GTLRObject
@end


/**
 *  The metadata key/value pairs assigned to instances in the cluster.
 *  Keys must conform to the regexp [a-zA-Z0-9-_]+ and be less than 128 bytes
 *  in length. These are reflected as part of a URL in the metadata server.
 *  Additionally, to avoid ambiguity, keys must not conflict with any other
 *  metadata keys for the project or be one of the reserved keys:
 *  "cluster-location"
 *  "cluster-name"
 *  "cluster-uid"
 *  "configure-sh"
 *  "containerd-configure-sh"
 *  "enable-os-login"
 *  "gci-ensure-gke-docker"
 *  "gci-metrics-enabled"
 *  "gci-update-strategy"
 *  "instance-template"
 *  "kube-env"
 *  "startup-script"
 *  "user-data"
 *  "disable-address-manager"
 *  "windows-startup-script-ps1"
 *  "common-psm1"
 *  "k8s-node-setup-psm1"
 *  "install-ssh-psm1"
 *  "user-profile-psm1"
 *  "serial-port-logging-enable"
 *  Values are free-form strings, and only have meaning as interpreted by
 *  the image running in the instance. The only restriction placed on them is
 *  that each value's size must be less than or equal to 32 KB.
 *  The total size of all keys and values must be less than 512 KB.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRContainer_NodeConfig_Metadata : GTLRObject
@end


/**
 *  NodeManagement defines the set of node management services turned on for the
 *  node pool.
 */
@interface GTLRContainer_NodeManagement : GTLRObject

/**
 *  A flag that specifies whether the node auto-repair is enabled for the node
 *  pool. If enabled, the nodes in this node pool will be monitored and, if
 *  they fail health checks too many times, an automatic repair action will be
 *  triggered.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoRepair;

/**
 *  A flag that specifies whether node auto-upgrade is enabled for the node
 *  pool. If enabled, node auto-upgrade helps keep the nodes in your node pool
 *  up to date with the latest release version of Kubernetes.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoUpgrade;

/** Specifies the Auto Upgrade knobs for the node pool. */
@property(nonatomic, strong, nullable) GTLRContainer_AutoUpgradeOptions *upgradeOptions;

@end


/**
 *  NodePool contains the name and configuration for a cluster's node pool.
 *  Node pools are a set of nodes (i.e. VM's), with a common configuration and
 *  specification, under the control of the cluster master. They may have a set
 *  of Kubernetes labels applied to them, which may be used to reference them
 *  during pod scheduling. They may also be resized up or down, to accommodate
 *  the workload.
 */
@interface GTLRContainer_NodePool : GTLRObject

/**
 *  Autoscaler configuration for this NodePool. Autoscaler is enabled
 *  only if a valid configuration is present.
 */
@property(nonatomic, strong, nullable) GTLRContainer_NodePoolAutoscaling *autoscaling;

/** Which conditions caused the current node pool state. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_StatusCondition *> *conditions;

/** The node configuration of the pool. */
@property(nonatomic, strong, nullable) GTLRContainer_NodeConfig *config;

/**
 *  The initial node count for the pool. You must ensure that your
 *  Compute Engine <a href="/compute/docs/resource-quotas">resource quota</a>
 *  is sufficient for this number of instances. You must also have available
 *  firewall and routes quota.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *initialNodeCount;

/**
 *  [Output only] The resource URLs of the [managed instance
 *  groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances)
 *  associated with this node pool.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *instanceGroupUrls;

/**
 *  The list of Google Compute Engine
 *  [zones](https://cloud.google.com/compute/docs/zones#available) in which the
 *  NodePool's nodes should be located.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *locations;

/** NodeManagement configuration for this NodePool. */
@property(nonatomic, strong, nullable) GTLRContainer_NodeManagement *management;

/**
 *  The constraint on the maximum number of pods that can be run
 *  simultaneously on a node in the node pool.
 */
@property(nonatomic, strong, nullable) GTLRContainer_MaxPodsConstraint *maxPodsConstraint;

/** The name of the node pool. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  [Output only] The pod CIDR block size per node in this node pool.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *podIpv4CidrSize;

/** [Output only] Server-defined URL for the resource. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  [Output only] The status of the nodes in this pool instance.
 *
 *  Likely values:
 *    @arg @c kGTLRContainer_NodePool_Status_Error The ERROR state indicates the
 *        node pool may be unusable. Details
 *        can be found in the `statusMessage` field. (Value: "ERROR")
 *    @arg @c kGTLRContainer_NodePool_Status_Provisioning The PROVISIONING state
 *        indicates the node pool is being created. (Value: "PROVISIONING")
 *    @arg @c kGTLRContainer_NodePool_Status_Reconciling The RECONCILING state
 *        indicates that some work is actively being done on
 *        the node pool, such as upgrading node software. Details can
 *        be found in the `statusMessage` field. (Value: "RECONCILING")
 *    @arg @c kGTLRContainer_NodePool_Status_Running The RUNNING state indicates
 *        the node pool has been created
 *        and is fully usable. (Value: "RUNNING")
 *    @arg @c kGTLRContainer_NodePool_Status_RunningWithError The
 *        RUNNING_WITH_ERROR state indicates the node pool has been created
 *        and is partially usable. Some error state has occurred and some
 *        functionality may be impaired. Customer may need to reissue a request
 *        or trigger a new update. (Value: "RUNNING_WITH_ERROR")
 *    @arg @c kGTLRContainer_NodePool_Status_StatusUnspecified Not set. (Value:
 *        "STATUS_UNSPECIFIED")
 *    @arg @c kGTLRContainer_NodePool_Status_Stopping The STOPPING state
 *        indicates the node pool is being deleted. (Value: "STOPPING")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  [Output only] Additional information about the current status of this
 *  node pool instance, if available.
 */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/** Upgrade settings control disruption and speed of the upgrade. */
@property(nonatomic, strong, nullable) GTLRContainer_UpgradeSettings *upgradeSettings;

/** The version of the Kubernetes of this node. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  NodePoolAutoscaling contains information required by cluster autoscaler to
 *  adjust the size of the node pool to the current cluster usage.
 */
@interface GTLRContainer_NodePoolAutoscaling : GTLRObject

/**
 *  Can this node pool be deleted automatically.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoprovisioned;

/**
 *  Is autoscaling enabled for this node pool.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

/**
 *  Maximum number of nodes in the NodePool. Must be >= min_node_count. There
 *  has to enough quota to scale up the cluster.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxNodeCount;

/**
 *  Minimum number of nodes in the NodePool. Must be >= 1 and <=
 *  max_node_count.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minNodeCount;

@end


/**
 *  Kubernetes taint is comprised of three fields: key, value, and effect.
 *  Effect
 *  can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute.
 *  For more information, including usage and the valid values, see:
 *  https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
 */
@interface GTLRContainer_NodeTaint : GTLRObject

/**
 *  Effect for taint.
 *
 *  Likely values:
 *    @arg @c kGTLRContainer_NodeTaint_Effect_EffectUnspecified Not set (Value:
 *        "EFFECT_UNSPECIFIED")
 *    @arg @c kGTLRContainer_NodeTaint_Effect_NoExecute NoExecute (Value:
 *        "NO_EXECUTE")
 *    @arg @c kGTLRContainer_NodeTaint_Effect_NoSchedule NoSchedule (Value:
 *        "NO_SCHEDULE")
 *    @arg @c kGTLRContainer_NodeTaint_Effect_PreferNoSchedule PreferNoSchedule
 *        (Value: "PREFER_NO_SCHEDULE")
 */
@property(nonatomic, copy, nullable) NSString *effect;

/** Key for taint. */
@property(nonatomic, copy, nullable) NSString *key;

/** Value for taint. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  This operation resource represents operations that may have happened or are
 *  happening on the cluster. All fields are output only.
 */
@interface GTLRContainer_Operation : GTLRObject

/** Which conditions caused the current cluster state. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_StatusCondition *> *clusterConditions;

/** Detailed operation progress, if available. */
@property(nonatomic, copy, nullable) NSString *detail;

/**
 *  [Output only] The time the operation completed, in
 *  [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
 */
@property(nonatomic, copy, nullable) NSString *endTime;

/**
 *  [Output only] The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available)
 *  or
 *  [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available)
 *  in which the cluster resides.
 */
@property(nonatomic, copy, nullable) NSString *location;

/** The server-assigned ID for the operation. */
@property(nonatomic, copy, nullable) NSString *name;

/** Which conditions caused the current node pool state. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_StatusCondition *> *nodepoolConditions;

/**
 *  The operation type.
 *
 *  Likely values:
 *    @arg @c kGTLRContainer_Operation_OperationType_AutoRepairNodes Automatic
 *        node pool repair. (Value: "AUTO_REPAIR_NODES")
 *    @arg @c kGTLRContainer_Operation_OperationType_AutoUpgradeNodes Automatic
 *        node upgrade. (Value: "AUTO_UPGRADE_NODES")
 *    @arg @c kGTLRContainer_Operation_OperationType_CreateCluster Cluster
 *        create. (Value: "CREATE_CLUSTER")
 *    @arg @c kGTLRContainer_Operation_OperationType_CreateNodePool Node pool
 *        create. (Value: "CREATE_NODE_POOL")
 *    @arg @c kGTLRContainer_Operation_OperationType_DeleteCluster Cluster
 *        delete. (Value: "DELETE_CLUSTER")
 *    @arg @c kGTLRContainer_Operation_OperationType_DeleteNodePool Node pool
 *        delete. (Value: "DELETE_NODE_POOL")
 *    @arg @c kGTLRContainer_Operation_OperationType_RepairCluster Cluster
 *        repair. (Value: "REPAIR_CLUSTER")
 *    @arg @c kGTLRContainer_Operation_OperationType_SetLabels Set labels.
 *        (Value: "SET_LABELS")
 *    @arg @c kGTLRContainer_Operation_OperationType_SetMaintenancePolicy Set
 *        the maintenance policy. (Value: "SET_MAINTENANCE_POLICY")
 *    @arg @c kGTLRContainer_Operation_OperationType_SetMasterAuth Set/generate
 *        master auth materials (Value: "SET_MASTER_AUTH")
 *    @arg @c kGTLRContainer_Operation_OperationType_SetNetworkPolicy Updates
 *        network policy for a cluster. (Value: "SET_NETWORK_POLICY")
 *    @arg @c kGTLRContainer_Operation_OperationType_SetNodePoolManagement Set
 *        node pool management. (Value: "SET_NODE_POOL_MANAGEMENT")
 *    @arg @c kGTLRContainer_Operation_OperationType_SetNodePoolSize Set node
 *        pool size. (Value: "SET_NODE_POOL_SIZE")
 *    @arg @c kGTLRContainer_Operation_OperationType_TypeUnspecified Not set.
 *        (Value: "TYPE_UNSPECIFIED")
 *    @arg @c kGTLRContainer_Operation_OperationType_UpdateCluster Cluster
 *        update. (Value: "UPDATE_CLUSTER")
 *    @arg @c kGTLRContainer_Operation_OperationType_UpgradeMaster A master
 *        upgrade. (Value: "UPGRADE_MASTER")
 *    @arg @c kGTLRContainer_Operation_OperationType_UpgradeNodes A node
 *        upgrade. (Value: "UPGRADE_NODES")
 */
@property(nonatomic, copy, nullable) NSString *operationType;

/** Output only. [Output only] Progress information for an operation. */
@property(nonatomic, strong, nullable) GTLRContainer_OperationProgress *progress;

/** Server-defined URL for the resource. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  [Output only] The time the operation started, in
 *  [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
 */
@property(nonatomic, copy, nullable) NSString *startTime;

/**
 *  The current status of the operation.
 *
 *  Likely values:
 *    @arg @c kGTLRContainer_Operation_Status_Aborting The operation is
 *        aborting. (Value: "ABORTING")
 *    @arg @c kGTLRContainer_Operation_Status_Done The operation is done, either
 *        cancelled or completed. (Value: "DONE")
 *    @arg @c kGTLRContainer_Operation_Status_Pending The operation has been
 *        created. (Value: "PENDING")
 *    @arg @c kGTLRContainer_Operation_Status_Running The operation is currently
 *        running. (Value: "RUNNING")
 *    @arg @c kGTLRContainer_Operation_Status_StatusUnspecified Not set. (Value:
 *        "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Output only. If an error has occurred, a textual description of the error.
 */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/** Server-defined URL for the target of the operation. */
@property(nonatomic, copy, nullable) NSString *targetLink;

/**
 *  The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  operation is taking place. This field is deprecated, use location instead.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  Information about operation (or operation stage) progress.
 */
@interface GTLRContainer_OperationProgress : GTLRObject

/**
 *  Progress metric bundle, for example:
 *  metrics: [{name: "nodes done", int_value: 15},
 *  {name: "nodes total", int_value: 32}]
 *  or
 *  metrics: [{name: "progress", double_value: 0.56},
 *  {name: "progress scale", double_value: 1.0}]
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_Metric *> *metrics;

/**
 *  A non-parameterized string describing an operation stage.
 *  Unset for single-stage operations.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Substages of an operation or a stage. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_OperationProgress *> *stages;

/**
 *  Status of an operation stage.
 *  Unset for single-stage operations.
 *
 *  Likely values:
 *    @arg @c kGTLRContainer_OperationProgress_Status_Aborting The operation is
 *        aborting. (Value: "ABORTING")
 *    @arg @c kGTLRContainer_OperationProgress_Status_Done The operation is
 *        done, either cancelled or completed. (Value: "DONE")
 *    @arg @c kGTLRContainer_OperationProgress_Status_Pending The operation has
 *        been created. (Value: "PENDING")
 *    @arg @c kGTLRContainer_OperationProgress_Status_Running The operation is
 *        currently running. (Value: "RUNNING")
 *    @arg @c kGTLRContainer_OperationProgress_Status_StatusUnspecified Not set.
 *        (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  Configuration options for private clusters.
 */
@interface GTLRContainer_PrivateClusterConfig : GTLRObject

/**
 *  Whether the master's internal IP address is used as the cluster endpoint.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enablePrivateEndpoint;

/**
 *  Whether nodes have internal IP addresses only. If enabled, all nodes are
 *  given only RFC 1918 private addresses and communicate with the master via
 *  private networking.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enablePrivateNodes;

/**
 *  The IP range in CIDR notation to use for the hosted master network. This
 *  range will be used for assigning internal IP addresses to the master or
 *  set of masters, as well as the ILB VIP. This range must not overlap with
 *  any other ranges in use within the cluster's network.
 */
@property(nonatomic, copy, nullable) NSString *masterIpv4CidrBlock;

/** Output only. The peering name in the customer VPC used by this cluster. */
@property(nonatomic, copy, nullable) NSString *peeringName;

/** Output only. The internal IP address of this cluster's master endpoint. */
@property(nonatomic, copy, nullable) NSString *privateEndpoint;

/** Output only. The external IP address of this cluster's master endpoint. */
@property(nonatomic, copy, nullable) NSString *publicEndpoint;

@end


/**
 *  Represents an arbitrary window of time that recurs.
 */
@interface GTLRContainer_RecurringTimeWindow : GTLRObject

/**
 *  An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how
 *  this window reccurs. They go on for the span of time between the start and
 *  end time.
 *  For example, to have something repeat every weekday, you'd use:
 *  <code>FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR</code>
 *  To repeat some window daily (equivalent to the DailyMaintenanceWindow):
 *  <code>FREQ=DAILY</code>
 *  For the first weekend of every month:
 *  <code>FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU</code>
 *  This specifies how frequently the window starts. Eg, if you wanted to have
 *  a 9-5 UTC-4 window every weekday, you'd use something like:
 *  <code>
 *  start time = 2019-01-01T09:00:00-0400
 *  end time = 2019-01-01T17:00:00-0400
 *  recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR
 *  </code>
 *  Windows can span multiple days. Eg, to make the window encompass every
 *  weekend from midnight Saturday till the last minute of Sunday UTC:
 *  <code>
 *  start time = 2019-01-05T00:00:00Z
 *  end time = 2019-01-07T23:59:00Z
 *  recurrence = FREQ=WEEKLY;BYDAY=SA
 *  </code>
 *  Note the start and end time's specific dates are largely arbitrary except
 *  to specify duration of the window and when it first starts.
 *  The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
 */
@property(nonatomic, copy, nullable) NSString *recurrence;

/** The window of the first recurrence. */
@property(nonatomic, strong, nullable) GTLRContainer_TimeWindow *window;

@end


/**
 *  [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources)
 *  is the configuration of desired reservation which instances could take
 *  capacity from.
 */
@interface GTLRContainer_ReservationAffinity : GTLRObject

/**
 *  Corresponds to the type of reservation consumption.
 *
 *  Likely values:
 *    @arg @c kGTLRContainer_ReservationAffinity_ConsumeReservationType_AnyReservation
 *        Consume any reservation available. (Value: "ANY_RESERVATION")
 *    @arg @c kGTLRContainer_ReservationAffinity_ConsumeReservationType_NoReservation
 *        Do not consume from any reserved capacity. (Value: "NO_RESERVATION")
 *    @arg @c kGTLRContainer_ReservationAffinity_ConsumeReservationType_SpecificReservation
 *        Must consume from a specific reservation. Must specify key value
 *        fields
 *        for specifying the reservations. (Value: "SPECIFIC_RESERVATION")
 *    @arg @c kGTLRContainer_ReservationAffinity_ConsumeReservationType_Unspecified
 *        Default value. This should not be used. (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *consumeReservationType;

/**
 *  Corresponds to the label key of a reservation resource. To target a
 *  SPECIFIC_RESERVATION by name, specify "googleapis.com/reservation-name" as
 *  the key and specify the name of your reservation as its value.
 */
@property(nonatomic, copy, nullable) NSString *key;

/** Corresponds to the label value(s) of reservation resource(s). */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  Contains information about amount of some resource in the cluster.
 *  For memory, value should be in GB.
 */
@interface GTLRContainer_ResourceLimit : GTLRObject

/**
 *  Maximum amount of the resource in the cluster.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maximum;

/**
 *  Minimum amount of the resource in the cluster.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minimum;

/** Resource name "cpu", "memory" or gpu-specific string. */
@property(nonatomic, copy, nullable) NSString *resourceType;

@end


/**
 *  Configuration for exporting cluster resource usages.
 */
@interface GTLRContainer_ResourceUsageExportConfig : GTLRObject

/** Configuration to use BigQuery as usage export destination. */
@property(nonatomic, strong, nullable) GTLRContainer_BigQueryDestination *bigqueryDestination;

/** Configuration to enable resource consumption metering. */
@property(nonatomic, strong, nullable) GTLRContainer_ConsumptionMeteringConfig *consumptionMeteringConfig;

/**
 *  Whether to enable network egress metering for this cluster. If enabled, a
 *  daemonset will be created in the cluster to meter network egress traffic.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableNetworkEgressMetering;

@end


/**
 *  RollbackNodePoolUpgradeRequest rollbacks the previously Aborted or Failed
 *  NodePool upgrade. This will be an no-op if the last upgrade successfully
 *  completed.
 */
@interface GTLRContainer_RollbackNodePoolUpgradeRequest : GTLRObject

/**
 *  Deprecated. The name of the cluster to rollback.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  The name (project, location, cluster, node pool id) of the node poll to
 *  rollback upgrade.
 *  Specified in the format 'projects/ * /locations/ * /clusters/ * /nodePools/
 *  *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Deprecated. The name of the node pool to rollback.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *nodePoolId;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://support.google.com/cloud/answer/6158840).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  SandboxConfig contains configurations of the sandbox to use for the node.
 */
@interface GTLRContainer_SandboxConfig : GTLRObject

/**
 *  Type of the sandbox to use for the node.
 *
 *  Likely values:
 *    @arg @c kGTLRContainer_SandboxConfig_Type_Gvisor Run sandbox using gvisor.
 *        (Value: "GVISOR")
 *    @arg @c kGTLRContainer_SandboxConfig_Type_Unspecified Default value. This
 *        should not be used. (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Kubernetes Engine service configuration.
 */
@interface GTLRContainer_ServerConfig : GTLRObject

/** Version of Kubernetes the service deploys by default. */
@property(nonatomic, copy, nullable) NSString *defaultClusterVersion;

/** Default image type. */
@property(nonatomic, copy, nullable) NSString *defaultImageType;

/** List of valid image types. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *validImageTypes;

/** List of valid master versions. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *validMasterVersions;

/** List of valid node upgrade target versions. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *validNodeVersions;

@end


/**
 *  SetAddonsConfigRequest sets the addons associated with the cluster.
 */
@interface GTLRContainer_SetAddonsConfigRequest : GTLRObject

/**
 *  Required. The desired configurations for the various addons available to run
 *  in the
 *  cluster.
 */
@property(nonatomic, strong, nullable) GTLRContainer_AddonsConfig *addonsConfig;

/**
 *  Deprecated. The name of the cluster to upgrade.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  The name (project, location, cluster) of the cluster to set addons.
 *  Specified in the format 'projects/ * /locations/ * /clusters/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://support.google.com/cloud/answer/6158840).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  SetLabelsRequest sets the Google Cloud Platform labels on a Google Container
 *  Engine cluster, which will in turn set them for Google Compute Engine
 *  resources used by that cluster
 */
@interface GTLRContainer_SetLabelsRequest : GTLRObject

/**
 *  Deprecated. The name of the cluster.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  Required. The fingerprint of the previous set of labels for this resource,
 *  used to detect conflicts. The fingerprint is initially generated by
 *  Kubernetes Engine and changes after every request to modify or update
 *  labels. You must always provide an up-to-date fingerprint hash when
 *  updating or changing labels. Make a <code>get()</code> request to the
 *  resource to get the latest fingerprint.
 */
@property(nonatomic, copy, nullable) NSString *labelFingerprint;

/**
 *  The name (project, location, cluster id) of the cluster to set labels.
 *  Specified in the format 'projects/ * /locations/ * /clusters/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://developers.google.com/console/help/new/#projectnumber).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Required. The labels to set for that cluster. */
@property(nonatomic, strong, nullable) GTLRContainer_SetLabelsRequest_ResourceLabels *resourceLabels;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  Required. The labels to set for that cluster.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRContainer_SetLabelsRequest_ResourceLabels : GTLRObject
@end


/**
 *  SetLegacyAbacRequest enables or disables the ABAC authorization mechanism
 *  for
 *  a cluster.
 */
@interface GTLRContainer_SetLegacyAbacRequest : GTLRObject

/**
 *  Deprecated. The name of the cluster to update.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  Required. Whether ABAC authorization will be enabled in the cluster.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

/**
 *  The name (project, location, cluster id) of the cluster to set legacy abac.
 *  Specified in the format 'projects/ * /locations/ * /clusters/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://support.google.com/cloud/answer/6158840).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  SetLocationsRequest sets the locations of the cluster.
 */
@interface GTLRContainer_SetLocationsRequest : GTLRObject

/**
 *  Deprecated. The name of the cluster to upgrade.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  Required. The desired list of Google Compute Engine
 *  [zones](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster's nodes should be located. Changing the locations a cluster is in
 *  will result in nodes being either created or removed from the cluster,
 *  depending on whether locations are being added or removed.
 *  This list must always include the cluster's primary zone.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *locations;

/**
 *  The name (project, location, cluster) of the cluster to set locations.
 *  Specified in the format 'projects/ * /locations/ * /clusters/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://support.google.com/cloud/answer/6158840).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  SetLoggingServiceRequest sets the logging service of a cluster.
 */
@interface GTLRContainer_SetLoggingServiceRequest : GTLRObject

/**
 *  Deprecated. The name of the cluster to upgrade.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  Required. The logging service the cluster should use to write logs.
 *  Currently available options:
 *  * `logging.googleapis.com/kubernetes` - The Cloud Logging
 *  service with a Kubernetes-native resource model
 *  * `logging.googleapis.com` - The legacy Cloud Logging service (no longer
 *  available as of GKE 1.15).
 *  * `none` - no logs will be exported from the cluster.
 *  If left as an empty string,`logging.googleapis.com/kubernetes` will be
 *  used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.
 */
@property(nonatomic, copy, nullable) NSString *loggingService;

/**
 *  The name (project, location, cluster) of the cluster to set logging.
 *  Specified in the format 'projects/ * /locations/ * /clusters/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://support.google.com/cloud/answer/6158840).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  SetMaintenancePolicyRequest sets the maintenance policy for a cluster.
 */
@interface GTLRContainer_SetMaintenancePolicyRequest : GTLRObject

/** Required. The name of the cluster to update. */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  Required. The maintenance policy to be set for the cluster. An empty field
 *  clears the existing maintenance policy.
 */
@property(nonatomic, strong, nullable) GTLRContainer_MaintenancePolicy *maintenancePolicy;

/**
 *  The name (project, location, cluster id) of the cluster to set maintenance
 *  policy.
 *  Specified in the format 'projects/ * /locations/ * /clusters/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The Google Developers Console [project ID or project
 *  number](https://support.google.com/cloud/answer/6158840).
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Required. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  SetMasterAuthRequest updates the admin password of a cluster.
 */
@interface GTLRContainer_SetMasterAuthRequest : GTLRObject

/**
 *  Required. The exact form of action to be taken on the master auth.
 *
 *  Likely values:
 *    @arg @c kGTLRContainer_SetMasterAuthRequest_Action_GeneratePassword
 *        Generate a new password and set it to that. (Value:
 *        "GENERATE_PASSWORD")
 *    @arg @c kGTLRContainer_SetMasterAuthRequest_Action_SetPassword Set the
 *        password to a user generated value. (Value: "SET_PASSWORD")
 *    @arg @c kGTLRContainer_SetMasterAuthRequest_Action_SetUsername Set the
 *        username. If an empty username is provided, basic authentication
 *        is disabled for the cluster. If a non-empty username is provided,
 *        basic
 *        authentication is enabled, with either a provided password or a
 *        generated
 *        one. (Value: "SET_USERNAME")
 *    @arg @c kGTLRContainer_SetMasterAuthRequest_Action_Unknown Operation is
 *        unknown and will error out. (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  Deprecated. The name of the cluster to upgrade.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  The name (project, location, cluster) of the cluster to set auth.
 *  Specified in the format 'projects/ * /locations/ * /clusters/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://support.google.com/cloud/answer/6158840).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Required. A description of the update. */
@property(nonatomic, strong, nullable) GTLRContainer_MasterAuth *update;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  SetMonitoringServiceRequest sets the monitoring service of a cluster.
 */
@interface GTLRContainer_SetMonitoringServiceRequest : GTLRObject

/**
 *  Deprecated. The name of the cluster to upgrade.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  Required. The monitoring service the cluster should use to write metrics.
 *  Currently available options:
 *  * "monitoring.googleapis.com/kubernetes" - The Cloud Monitoring
 *  service with a Kubernetes-native resource model
 *  * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no
 *  longer available as of GKE 1.15).
 *  * `none` - No metrics will be exported from the cluster.
 *  If left as an empty string,`monitoring.googleapis.com/kubernetes` will be
 *  used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.
 */
@property(nonatomic, copy, nullable) NSString *monitoringService;

/**
 *  The name (project, location, cluster) of the cluster to set monitoring.
 *  Specified in the format 'projects/ * /locations/ * /clusters/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://support.google.com/cloud/answer/6158840).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  SetNetworkPolicyRequest enables/disables network policy for a cluster.
 */
@interface GTLRContainer_SetNetworkPolicyRequest : GTLRObject

/**
 *  Deprecated. The name of the cluster.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  The name (project, location, cluster id) of the cluster to set networking
 *  policy. Specified in the format 'projects/ * /locations/ * /clusters/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. Configuration options for the NetworkPolicy feature. */
@property(nonatomic, strong, nullable) GTLRContainer_NetworkPolicy *networkPolicy;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://developers.google.com/console/help/new/#projectnumber).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  SetNodePoolAutoscalingRequest sets the autoscaler settings of a node pool.
 */
@interface GTLRContainer_SetNodePoolAutoscalingRequest : GTLRObject

/** Required. Autoscaling configuration for the node pool. */
@property(nonatomic, strong, nullable) GTLRContainer_NodePoolAutoscaling *autoscaling;

/**
 *  Deprecated. The name of the cluster to upgrade.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  The name (project, location, cluster, node pool) of the node pool to set
 *  autoscaler settings. Specified in the format
 *  'projects/ * /locations/ * /clusters/ * /nodePools/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Deprecated. The name of the node pool to upgrade.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *nodePoolId;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://support.google.com/cloud/answer/6158840).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  SetNodePoolManagementRequest sets the node management properties of a node
 *  pool.
 */
@interface GTLRContainer_SetNodePoolManagementRequest : GTLRObject

/**
 *  Deprecated. The name of the cluster to update.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/** Required. NodeManagement configuration for the node pool. */
@property(nonatomic, strong, nullable) GTLRContainer_NodeManagement *management;

/**
 *  The name (project, location, cluster, node pool id) of the node pool to set
 *  management properties. Specified in the format
 *  'projects/ * /locations/ * /clusters/ * /nodePools/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Deprecated. The name of the node pool to update.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *nodePoolId;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://support.google.com/cloud/answer/6158840).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  SetNodePoolSizeRequest sets the size a node
 *  pool.
 */
@interface GTLRContainer_SetNodePoolSizeRequest : GTLRObject

/**
 *  Deprecated. The name of the cluster to update.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  The name (project, location, cluster, node pool id) of the node pool to set
 *  size.
 *  Specified in the format 'projects/ * /locations/ * /clusters/ * /nodePools/
 *  *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The desired node count for the pool.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nodeCount;

/**
 *  Deprecated. The name of the node pool to update.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *nodePoolId;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://support.google.com/cloud/answer/6158840).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  A set of Shielded Instance options.
 */
@interface GTLRContainer_ShieldedInstanceConfig : GTLRObject

/**
 *  Defines whether the instance has integrity monitoring enabled.
 *  Enables monitoring and attestation of the boot integrity of the instance.
 *  The attestation is performed against the integrity policy baseline. This
 *  baseline is initially derived from the implicitly trusted boot image when
 *  the instance is created.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableIntegrityMonitoring;

/**
 *  Defines whether the instance has Secure Boot enabled.
 *  Secure Boot helps ensure that the system only runs authentic software by
 *  verifying the digital signature of all boot components, and halting the
 *  boot process if signature verification fails.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableSecureBoot;

@end


/**
 *  Configuration of Shielded Nodes feature.
 */
@interface GTLRContainer_ShieldedNodes : GTLRObject

/**
 *  Whether Shielded Nodes features are enabled on all nodes in this cluster.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  StartIPRotationRequest creates a new IP for the cluster and then performs
 *  a node upgrade on each node pool to point to the new IP.
 */
@interface GTLRContainer_StartIPRotationRequest : GTLRObject

/**
 *  Deprecated. The name of the cluster.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  The name (project, location, cluster id) of the cluster to start IP
 *  rotation. Specified in the format 'projects/ * /locations/ * /clusters/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://developers.google.com/console/help/new/#projectnumber).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Whether to rotate credentials during IP rotation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rotateCredentials;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  StatusCondition describes why a cluster or a node pool has a certain status
 *  (e.g., ERROR or DEGRADED).
 */
@interface GTLRContainer_StatusCondition : GTLRObject

/**
 *  Machine-friendly representation of the condition
 *
 *  Likely values:
 *    @arg @c kGTLRContainer_StatusCondition_Code_CloudKmsKeyError Unable to
 *        perform an encrypt operation against the CloudKMS key used for
 *        etcd level encryption.
 *        More codes TBA (Value: "CLOUD_KMS_KEY_ERROR")
 *    @arg @c kGTLRContainer_StatusCondition_Code_GceQuotaExceeded Google
 *        Compute Engine quota was exceeded. (Value: "GCE_QUOTA_EXCEEDED")
 *    @arg @c kGTLRContainer_StatusCondition_Code_GceStockout GCE_STOCKOUT
 *        indicates that Google Compute Engine resources are
 *        temporarily unavailable. (Value: "GCE_STOCKOUT")
 *    @arg @c kGTLRContainer_StatusCondition_Code_GkeServiceAccountDeleted
 *        GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their
 *        robot
 *        service account. (Value: "GKE_SERVICE_ACCOUNT_DELETED")
 *    @arg @c kGTLRContainer_StatusCondition_Code_SetByOperator Cluster state
 *        was manually changed by an SRE due to a system logic error. (Value:
 *        "SET_BY_OPERATOR")
 *    @arg @c kGTLRContainer_StatusCondition_Code_Unknown UNKNOWN indicates a
 *        generic condition. (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *code;

/** Human-friendly representation of the condition */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  Represents an arbitrary window of time.
 */
@interface GTLRContainer_TimeWindow : GTLRObject

/**
 *  The time that the window ends. The end time should take place after the
 *  start time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** The time that the window first starts. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  UpdateClusterRequest updates the settings of a cluster.
 */
@interface GTLRContainer_UpdateClusterRequest : GTLRObject

/**
 *  Deprecated. The name of the cluster to upgrade.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  The name (project, location, cluster) of the cluster to update.
 *  Specified in the format 'projects/ * /locations/ * /clusters/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://support.google.com/cloud/answer/6158840).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Required. A description of the update. */
@property(nonatomic, strong, nullable) GTLRContainer_ClusterUpdate *update;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  UpdateMasterRequest updates the master of the cluster.
 */
@interface GTLRContainer_UpdateMasterRequest : GTLRObject

/**
 *  Deprecated. The name of the cluster to upgrade.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  Required. The Kubernetes version to change the master to.
 *  Users may specify either explicit versions offered by Kubernetes Engine or
 *  version aliases, which have the following behavior:
 *  - "latest": picks the highest valid Kubernetes version
 *  - "1.X": picks the highest valid patch+gke.N patch in the 1.X version
 *  - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version
 *  - "1.X.Y-gke.N": picks an explicit Kubernetes version
 *  - "-": picks the default Kubernetes version
 */
@property(nonatomic, copy, nullable) NSString *masterVersion;

/**
 *  The name (project, location, cluster) of the cluster to update.
 *  Specified in the format 'projects/ * /locations/ * /clusters/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://support.google.com/cloud/answer/6158840).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  UpdateNodePoolRequests update a node pool's image and/or version.
 */
@interface GTLRContainer_UpdateNodePoolRequest : GTLRObject

/**
 *  Deprecated. The name of the cluster to upgrade.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/** Required. The desired image type for the node pool. */
@property(nonatomic, copy, nullable) NSString *imageType;

/**
 *  The desired list of Google Compute Engine
 *  [zones](https://cloud.google.com/compute/docs/zones#available) in which the
 *  node pool's nodes should be located. Changing the locations for a node pool
 *  will result in nodes being either created or removed from the node pool,
 *  depending on whether locations are being added or removed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *locations;

/**
 *  The name (project, location, cluster, node pool) of the node pool to
 *  update. Specified in the format
 *  'projects/ * /locations/ * /clusters/ * /nodePools/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Deprecated. The name of the node pool to upgrade.
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *nodePoolId;

/**
 *  Required. The Kubernetes version to change the nodes to (typically an
 *  upgrade).
 *  Users may specify either explicit versions offered by Kubernetes Engine or
 *  version aliases, which have the following behavior:
 *  - "latest": picks the highest valid Kubernetes version
 *  - "1.X": picks the highest valid patch+gke.N patch in the 1.X version
 *  - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version
 *  - "1.X.Y-gke.N": picks an explicit Kubernetes version
 *  - "-": picks the Kubernetes master version
 */
@property(nonatomic, copy, nullable) NSString *nodeVersion;

/**
 *  Deprecated. The Google Developers Console [project ID or project
 *  number](https://support.google.com/cloud/answer/6158840).
 *  This field has been deprecated and replaced by the name field.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Upgrade settings control disruption and speed of the upgrade. */
@property(nonatomic, strong, nullable) GTLRContainer_UpgradeSettings *upgradeSettings;

/** The desired workload metadata config for the node pool. */
@property(nonatomic, strong, nullable) GTLRContainer_WorkloadMetadataConfig *workloadMetadataConfig;

/**
 *  Deprecated. The name of the Google Compute Engine
 *  [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *  cluster resides. This field has been deprecated and replaced by the name
 *  field.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  These upgrade settings control the level of parallelism and the level of
 *  disruption caused by an upgrade.
 *  maxUnavailable controls the number of nodes that can be simultaneously
 *  unavailable.
 *  maxSurge controls the number of additional nodes that can be added to the
 *  node pool temporarily for the time of the upgrade to increase the number of
 *  available nodes.
 *  (maxUnavailable + maxSurge) determines the level of parallelism (how many
 *  nodes are being upgraded at the same time).
 *  Note: upgrades inevitably introduce some disruption since workloads need to
 *  be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0,
 *  this holds true. (Disruption stays within the limits of
 *  PodDisruptionBudget, if it is configured.)
 *  Consider a hypothetical node pool with 5 nodes having maxSurge=2,
 *  maxUnavailable=1. This means the upgrade process upgrades 3 nodes
 *  simultaneously. It creates 2 additional (upgraded) nodes, then it brings
 *  down 3 old (not yet upgraded) nodes at the same time. This ensures that
 *  there are always at least 4 nodes available.
 */
@interface GTLRContainer_UpgradeSettings : GTLRObject

/**
 *  The maximum number of nodes that can be created beyond the current size
 *  of the node pool during the upgrade process.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxSurge;

/**
 *  The maximum number of nodes that can be simultaneously unavailable during
 *  the upgrade process. A node is considered available if its status is
 *  Ready.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxUnavailable;

@end


/**
 *  UsableSubnetwork resource returns the subnetwork name, its associated
 *  network
 *  and the primary CIDR range.
 */
@interface GTLRContainer_UsableSubnetwork : GTLRObject

/** The range of internal addresses that are owned by this subnetwork. */
@property(nonatomic, copy, nullable) NSString *ipCidrRange;

/**
 *  Network Name.
 *  Example: projects/my-project/global/networks/my-network
 */
@property(nonatomic, copy, nullable) NSString *network;

/** Secondary IP ranges. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainer_UsableSubnetworkSecondaryRange *> *secondaryIpRanges;

/**
 *  A human readable status message representing the reasons for cases where
 *  the caller cannot use the secondary ranges under the subnet. For example if
 *  the secondary_ip_ranges is empty due to a permission issue, an insufficient
 *  permission message will be given by status_message.
 */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Subnetwork Name.
 *  Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
 */
@property(nonatomic, copy, nullable) NSString *subnetwork;

@end


/**
 *  Secondary IP range of a usable subnetwork.
 */
@interface GTLRContainer_UsableSubnetworkSecondaryRange : GTLRObject

/** The range of IP addresses belonging to this subnetwork secondary range. */
@property(nonatomic, copy, nullable) NSString *ipCidrRange;

/**
 *  The name associated with this subnetwork secondary range, used when adding
 *  an alias IP range to a VM instance.
 */
@property(nonatomic, copy, nullable) NSString *rangeName;

/**
 *  This field is to determine the status of the secondary range programmably.
 *
 *  Likely values:
 *    @arg @c kGTLRContainer_UsableSubnetworkSecondaryRange_Status_InUseManagedPod
 *        IN_USE_MANAGED_POD denotes this range was created by GKE and is
 *        claimed
 *        for pods. It cannot be used for other clusters. (Value:
 *        "IN_USE_MANAGED_POD")
 *    @arg @c kGTLRContainer_UsableSubnetworkSecondaryRange_Status_InUseService
 *        IN_USE_SERVICE denotes that this range is claimed by a cluster for
 *        services. It cannot be used for other clusters. (Value:
 *        "IN_USE_SERVICE")
 *    @arg @c kGTLRContainer_UsableSubnetworkSecondaryRange_Status_InUseShareablePod
 *        IN_USE_SHAREABLE_POD denotes this range was created by the network
 *        admin
 *        and is currently claimed by a cluster for pods. It can only be used by
 *        other clusters as a pod range. (Value: "IN_USE_SHAREABLE_POD")
 *    @arg @c kGTLRContainer_UsableSubnetworkSecondaryRange_Status_Unknown
 *        UNKNOWN is the zero value of the Status enum. It's not a valid status.
 *        (Value: "UNKNOWN")
 *    @arg @c kGTLRContainer_UsableSubnetworkSecondaryRange_Status_Unused UNUSED
 *        denotes that this range is unclaimed by any cluster. (Value: "UNUSED")
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  VerticalPodAutoscaling contains global, per-cluster information
 *  required by Vertical Pod Autoscaler to automatically adjust
 *  the resources of pods controlled by it.
 */
@interface GTLRContainer_VerticalPodAutoscaling : GTLRObject

/**
 *  Enables vertical pod autoscaling.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  Configuration for the use of Kubernetes Service Accounts in GCP IAM
 *  policies.
 */
@interface GTLRContainer_WorkloadIdentityConfig : GTLRObject

/** The workload pool to attach all Kubernetes service accounts to. */
@property(nonatomic, copy, nullable) NSString *workloadPool;

@end


/**
 *  WorkloadMetadataConfig defines the metadata configuration to expose to
 *  workloads on the node pool.
 */
@interface GTLRContainer_WorkloadMetadataConfig : GTLRObject

/**
 *  Mode is the configuration for how to expose metadata to workloads running
 *  on the node pool.
 *
 *  Likely values:
 *    @arg @c kGTLRContainer_WorkloadMetadataConfig_Mode_GceMetadata Expose all
 *        Compute Engine metadata to pods. (Value: "GCE_METADATA")
 *    @arg @c kGTLRContainer_WorkloadMetadataConfig_Mode_GkeMetadata Run the GKE
 *        Metadata Server on this node. The GKE Metadata Server exposes
 *        a metadata API to workloads that is compatible with the V1 Compute
 *        Metadata APIs exposed by the Compute Engine and App Engine Metadata
 *        Servers. This feature can only be enabled if Workload Identity is
 *        enabled
 *        at the cluster level. (Value: "GKE_METADATA")
 *    @arg @c kGTLRContainer_WorkloadMetadataConfig_Mode_ModeUnspecified Not
 *        set. (Value: "MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *mode;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
