// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Pub/Sub API (pubsub/v1)
// Description:
//   Provides reliable, many-to-many, asynchronous messaging between
//   applications.
// Documentation:
//   https://cloud.google.com/pubsub/docs

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRPubsub_AcknowledgeRequest;
@class GTLRPubsub_CreateSnapshotRequest;
@class GTLRPubsub_ModifyAckDeadlineRequest;
@class GTLRPubsub_ModifyPushConfigRequest;
@class GTLRPubsub_PublishRequest;
@class GTLRPubsub_PullRequest;
@class GTLRPubsub_SeekRequest;
@class GTLRPubsub_SetIamPolicyRequest;
@class GTLRPubsub_Subscription;
@class GTLRPubsub_TestIamPermissionsRequest;
@class GTLRPubsub_Topic;
@class GTLRPubsub_UpdateSnapshotRequest;
@class GTLRPubsub_UpdateSubscriptionRequest;
@class GTLRPubsub_UpdateTopicRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Pubsub query classes.
 */
@interface GTLRPubsubQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a snapshot from the requested subscription. Snapshots are used in
 *  <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
 *  operations, which allow
 *  you to manage message acknowledgments in bulk. That is, you can set the
 *  acknowledgment state of messages in an existing subscription to the state
 *  captured by a snapshot.
 *  <br><br>
 *  <b>BETA:</b> This feature is part of a beta release. This API might be
 *  changed in backward-incompatible ways and is not recommended for production
 *  use. It is not subject to any SLA or deprecation policy.<br><br>
 *  If the snapshot already exists, returns `ALREADY_EXISTS`.
 *  If the requested subscription doesn't exist, returns `NOT_FOUND`.
 *  If the backlog in the subscription is too old -- and the resulting snapshot
 *  would expire in less than 1 hour -- then `FAILED_PRECONDITION` is returned.
 *  See also the `Snapshot.expire_time` field. If the name is not provided in
 *  the request, the server will assign a random
 *  name for this snapshot on the same project as the subscription, conforming
 *  to the
 *  [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
 *  The generated name is populated in the returned Snapshot object. Note that
 *  for REST API requests, you must specify a name in the request.
 *
 *  Method: pubsub.projects.snapshots.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSnapshotsCreate : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSnapshotsCreateWithObject:name:]

/**
 *  Optional user-provided name for this snapshot.
 *  If the name is not provided in the request, the server will assign a random
 *  name for this snapshot on the same project as the subscription.
 *  Note that for REST API requests, you must specify a name. See the
 *  <a href="https://cloud.google.com/pubsub/docs/admin#resource_names">
 *  resource name rules</a>.
 *  Format is `projects/{project}/snapshots/{snap}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRPubsub_Snapshot.
 *
 *  Creates a snapshot from the requested subscription. Snapshots are used in
 *  <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
 *  operations, which allow
 *  you to manage message acknowledgments in bulk. That is, you can set the
 *  acknowledgment state of messages in an existing subscription to the state
 *  captured by a snapshot.
 *  <br><br>
 *  <b>BETA:</b> This feature is part of a beta release. This API might be
 *  changed in backward-incompatible ways and is not recommended for production
 *  use. It is not subject to any SLA or deprecation policy.<br><br>
 *  If the snapshot already exists, returns `ALREADY_EXISTS`.
 *  If the requested subscription doesn't exist, returns `NOT_FOUND`.
 *  If the backlog in the subscription is too old -- and the resulting snapshot
 *  would expire in less than 1 hour -- then `FAILED_PRECONDITION` is returned.
 *  See also the `Snapshot.expire_time` field. If the name is not provided in
 *  the request, the server will assign a random
 *  name for this snapshot on the same project as the subscription, conforming
 *  to the
 *  [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
 *  The generated name is populated in the returned Snapshot object. Note that
 *  for REST API requests, you must specify a name in the request.
 *
 *  @param object The @c GTLRPubsub_CreateSnapshotRequest to include in the
 *    query.
 *  @param name Optional user-provided name for this snapshot.
 *    If the name is not provided in the request, the server will assign a
 *    random
 *    name for this snapshot on the same project as the subscription.
 *    Note that for REST API requests, you must specify a name. See the
 *    <a href="https://cloud.google.com/pubsub/docs/admin#resource_names">
 *    resource name rules</a>.
 *    Format is `projects/{project}/snapshots/{snap}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSnapshotsCreate
 */
+ (instancetype)queryWithObject:(GTLRPubsub_CreateSnapshotRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Removes an existing snapshot. Snapshots are used in
 *  <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
 *  operations, which allow
 *  you to manage message acknowledgments in bulk. That is, you can set the
 *  acknowledgment state of messages in an existing subscription to the state
 *  captured by a snapshot.<br><br>
 *  <b>BETA:</b> This feature is part of a beta release. This API might be
 *  changed in backward-incompatible ways and is not recommended for production
 *  use. It is not subject to any SLA or deprecation policy.
 *  When the snapshot is deleted, all messages retained in the snapshot
 *  are immediately dropped. After a snapshot is deleted, a new one may be
 *  created with the same name, but the new one has no association with the old
 *  snapshot or its subscription, unless the same subscription is specified.
 *
 *  Method: pubsub.projects.snapshots.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSnapshotsDelete : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSnapshotsDeleteWithsnapshot:]

/**
 *  The name of the snapshot to delete.
 *  Format is `projects/{project}/snapshots/{snap}`.
 */
@property(nonatomic, copy, nullable) NSString *snapshot;

/**
 *  Fetches a @c GTLRPubsub_Empty.
 *
 *  Removes an existing snapshot. Snapshots are used in
 *  <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
 *  operations, which allow
 *  you to manage message acknowledgments in bulk. That is, you can set the
 *  acknowledgment state of messages in an existing subscription to the state
 *  captured by a snapshot.<br><br>
 *  <b>BETA:</b> This feature is part of a beta release. This API might be
 *  changed in backward-incompatible ways and is not recommended for production
 *  use. It is not subject to any SLA or deprecation policy.
 *  When the snapshot is deleted, all messages retained in the snapshot
 *  are immediately dropped. After a snapshot is deleted, a new one may be
 *  created with the same name, but the new one has no association with the old
 *  snapshot or its subscription, unless the same subscription is specified.
 *
 *  @param snapshot The name of the snapshot to delete.
 *    Format is `projects/{project}/snapshots/{snap}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSnapshotsDelete
 */
+ (instancetype)queryWithSnapshot:(NSString *)snapshot;

@end

/**
 *  Gets the configuration details of a snapshot. Snapshots are used in
 *  <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
 *  operations, which allow you to manage message acknowledgments in bulk. That
 *  is, you can set the acknowledgment state of messages in an existing
 *  subscription to the state captured by a snapshot.<br><br>
 *  <b>BETA:</b> This feature is part of a beta release. This API might be
 *  changed in backward-incompatible ways and is not recommended for production
 *  use. It is not subject to any SLA or deprecation policy.
 *
 *  Method: pubsub.projects.snapshots.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSnapshotsGet : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSnapshotsGetWithsnapshot:]

/**
 *  The name of the snapshot to get.
 *  Format is `projects/{project}/snapshots/{snap}`.
 */
@property(nonatomic, copy, nullable) NSString *snapshot;

/**
 *  Fetches a @c GTLRPubsub_Snapshot.
 *
 *  Gets the configuration details of a snapshot. Snapshots are used in
 *  <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
 *  operations, which allow you to manage message acknowledgments in bulk. That
 *  is, you can set the acknowledgment state of messages in an existing
 *  subscription to the state captured by a snapshot.<br><br>
 *  <b>BETA:</b> This feature is part of a beta release. This API might be
 *  changed in backward-incompatible ways and is not recommended for production
 *  use. It is not subject to any SLA or deprecation policy.
 *
 *  @param snapshot The name of the snapshot to get.
 *    Format is `projects/{project}/snapshots/{snap}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSnapshotsGet
 */
+ (instancetype)queryWithSnapshot:(NSString *)snapshot;

@end

/**
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  Method: pubsub.projects.snapshots.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSnapshotsGetIamPolicy : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSnapshotsGetIamPolicyWithresource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_Policy.
 *
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsSnapshotsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists the existing snapshots. Snapshots are used in
 *  <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
 *  operations, which allow
 *  you to manage message acknowledgments in bulk. That is, you can set the
 *  acknowledgment state of messages in an existing subscription to the state
 *  captured by a snapshot.<br><br>
 *  <b>BETA:</b> This feature is part of a beta release. This API might be
 *  changed in backward-incompatible ways and is not recommended for production
 *  use. It is not subject to any SLA or deprecation policy.
 *
 *  Method: pubsub.projects.snapshots.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSnapshotsList : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSnapshotsListWithproject:]

/** Maximum number of snapshots to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListSnapshotsResponse`; indicates that this
 *  is a continuation of a prior `ListSnapshots` call, and that the system
 *  should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The name of the project in which to list snapshots.
 *  Format is `projects/{project-id}`.
 */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRPubsub_ListSnapshotsResponse.
 *
 *  Lists the existing snapshots. Snapshots are used in
 *  <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
 *  operations, which allow
 *  you to manage message acknowledgments in bulk. That is, you can set the
 *  acknowledgment state of messages in an existing subscription to the state
 *  captured by a snapshot.<br><br>
 *  <b>BETA:</b> This feature is part of a beta release. This API might be
 *  changed in backward-incompatible ways and is not recommended for production
 *  use. It is not subject to any SLA or deprecation policy.
 *
 *  @param project The name of the project in which to list snapshots.
 *    Format is `projects/{project-id}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSnapshotsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProject:(NSString *)project;

@end

/**
 *  Updates an existing snapshot. Snapshots are used in
 *  <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
 *  operations, which allow
 *  you to manage message acknowledgments in bulk. That is, you can set the
 *  acknowledgment state of messages in an existing subscription to the state
 *  captured by a snapshot.<br><br>
 *  <b>BETA:</b> This feature is part of a beta release. This API might be
 *  changed in backward-incompatible ways and is not recommended for production
 *  use. It is not subject to any SLA or deprecation policy.
 *  Note that certain properties of a snapshot are not modifiable.
 *
 *  Method: pubsub.projects.snapshots.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSnapshotsPatch : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSnapshotsPatchWithObject:name:]

/** The name of the snapshot. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRPubsub_Snapshot.
 *
 *  Updates an existing snapshot. Snapshots are used in
 *  <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
 *  operations, which allow
 *  you to manage message acknowledgments in bulk. That is, you can set the
 *  acknowledgment state of messages in an existing subscription to the state
 *  captured by a snapshot.<br><br>
 *  <b>BETA:</b> This feature is part of a beta release. This API might be
 *  changed in backward-incompatible ways and is not recommended for production
 *  use. It is not subject to any SLA or deprecation policy.
 *  Note that certain properties of a snapshot are not modifiable.
 *
 *  @param object The @c GTLRPubsub_UpdateSnapshotRequest to include in the
 *    query.
 *  @param name The name of the snapshot.
 *
 *  @return GTLRPubsubQuery_ProjectsSnapshotsPatch
 */
+ (instancetype)queryWithObject:(GTLRPubsub_UpdateSnapshotRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  Method: pubsub.projects.snapshots.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSnapshotsSetIamPolicy : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSnapshotsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  @param object The @c GTLRPubsub_SetIamPolicyRequest to include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsSnapshotsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRPubsub_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  Method: pubsub.projects.snapshots.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSnapshotsTestIamPermissions : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSnapshotsTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  @param object The @c GTLRPubsub_TestIamPermissionsRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsSnapshotsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRPubsub_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Acknowledges the messages associated with the `ack_ids` in the
 *  `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
 *  from the subscription.
 *  Acknowledging a message whose ack deadline has expired may succeed,
 *  but such a message may be redelivered later. Acknowledging a message more
 *  than once will not result in an error.
 *
 *  Method: pubsub.projects.subscriptions.acknowledge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsAcknowledge : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSubscriptionsAcknowledgeWithObject:subscription:]

/**
 *  The subscription whose message is being acknowledged.
 *  Format is `projects/{project}/subscriptions/{sub}`.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  Fetches a @c GTLRPubsub_Empty.
 *
 *  Acknowledges the messages associated with the `ack_ids` in the
 *  `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
 *  from the subscription.
 *  Acknowledging a message whose ack deadline has expired may succeed,
 *  but such a message may be redelivered later. Acknowledging a message more
 *  than once will not result in an error.
 *
 *  @param object The @c GTLRPubsub_AcknowledgeRequest to include in the query.
 *  @param subscription The subscription whose message is being acknowledged.
 *    Format is `projects/{project}/subscriptions/{sub}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsAcknowledge
 */
+ (instancetype)queryWithObject:(GTLRPubsub_AcknowledgeRequest *)object
                   subscription:(NSString *)subscription;

@end

/**
 *  Creates a subscription to a given topic. See the
 *  <a href="https://cloud.google.com/pubsub/docs/admin#resource_names">
 *  resource name rules</a>.
 *  If the subscription already exists, returns `ALREADY_EXISTS`.
 *  If the corresponding topic doesn't exist, returns `NOT_FOUND`.
 *  If the name is not provided in the request, the server will assign a random
 *  name for this subscription on the same project as the topic, conforming
 *  to the
 *  [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
 *  The generated name is populated in the returned Subscription object.
 *  Note that for REST API requests, you must specify a name in the request.
 *
 *  Method: pubsub.projects.subscriptions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsCreate : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSubscriptionsCreateWithObject:name:]

/**
 *  The name of the subscription. It must have the format
 *  `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
 *  start with a letter, and contain only letters (`[A-Za-z]`), numbers
 *  (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
 *  plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
 *  in length, and it must not start with `"goog"`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRPubsub_Subscription.
 *
 *  Creates a subscription to a given topic. See the
 *  <a href="https://cloud.google.com/pubsub/docs/admin#resource_names">
 *  resource name rules</a>.
 *  If the subscription already exists, returns `ALREADY_EXISTS`.
 *  If the corresponding topic doesn't exist, returns `NOT_FOUND`.
 *  If the name is not provided in the request, the server will assign a random
 *  name for this subscription on the same project as the topic, conforming
 *  to the
 *  [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
 *  The generated name is populated in the returned Subscription object.
 *  Note that for REST API requests, you must specify a name in the request.
 *
 *  @param object The @c GTLRPubsub_Subscription to include in the query.
 *  @param name The name of the subscription. It must have the format
 *    `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
 *    start with a letter, and contain only letters (`[A-Za-z]`), numbers
 *    (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
 *    plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
 *    in length, and it must not start with `"goog"`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsCreate
 */
+ (instancetype)queryWithObject:(GTLRPubsub_Subscription *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes an existing subscription. All messages retained in the subscription
 *  are immediately dropped. Calls to `Pull` after deletion will return
 *  `NOT_FOUND`. After a subscription is deleted, a new one may be created with
 *  the same name, but the new one has no association with the old
 *  subscription or its topic unless the same topic is specified.
 *
 *  Method: pubsub.projects.subscriptions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsDelete : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSubscriptionsDeleteWithsubscription:]

/**
 *  The subscription to delete.
 *  Format is `projects/{project}/subscriptions/{sub}`.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  Fetches a @c GTLRPubsub_Empty.
 *
 *  Deletes an existing subscription. All messages retained in the subscription
 *  are immediately dropped. Calls to `Pull` after deletion will return
 *  `NOT_FOUND`. After a subscription is deleted, a new one may be created with
 *  the same name, but the new one has no association with the old
 *  subscription or its topic unless the same topic is specified.
 *
 *  @param subscription The subscription to delete.
 *    Format is `projects/{project}/subscriptions/{sub}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsDelete
 */
+ (instancetype)queryWithSubscription:(NSString *)subscription;

@end

/**
 *  Gets the configuration details of a subscription.
 *
 *  Method: pubsub.projects.subscriptions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsGet : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSubscriptionsGetWithsubscription:]

/**
 *  The name of the subscription to get.
 *  Format is `projects/{project}/subscriptions/{sub}`.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  Fetches a @c GTLRPubsub_Subscription.
 *
 *  Gets the configuration details of a subscription.
 *
 *  @param subscription The name of the subscription to get.
 *    Format is `projects/{project}/subscriptions/{sub}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsGet
 */
+ (instancetype)queryWithSubscription:(NSString *)subscription;

@end

/**
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  Method: pubsub.projects.subscriptions.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsGetIamPolicy : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSubscriptionsGetIamPolicyWithresource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_Policy.
 *
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists matching subscriptions.
 *
 *  Method: pubsub.projects.subscriptions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsList : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSubscriptionsListWithproject:]

/** Maximum number of subscriptions to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListSubscriptionsResponse`; indicates that
 *  this is a continuation of a prior `ListSubscriptions` call, and that the
 *  system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The name of the project in which to list subscriptions.
 *  Format is `projects/{project-id}`.
 */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRPubsub_ListSubscriptionsResponse.
 *
 *  Lists matching subscriptions.
 *
 *  @param project The name of the project in which to list subscriptions.
 *    Format is `projects/{project-id}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProject:(NSString *)project;

@end

/**
 *  Modifies the ack deadline for a specific message. This method is useful
 *  to indicate that more time is needed to process a message by the
 *  subscriber, or to make the message available for redelivery if the
 *  processing was interrupted. Note that this does not modify the
 *  subscription-level `ackDeadlineSeconds` used for subsequent messages.
 *
 *  Method: pubsub.projects.subscriptions.modifyAckDeadline
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsModifyAckDeadline : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSubscriptionsModifyAckDeadlineWithObject:subscription:]

/**
 *  The name of the subscription.
 *  Format is `projects/{project}/subscriptions/{sub}`.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  Fetches a @c GTLRPubsub_Empty.
 *
 *  Modifies the ack deadline for a specific message. This method is useful
 *  to indicate that more time is needed to process a message by the
 *  subscriber, or to make the message available for redelivery if the
 *  processing was interrupted. Note that this does not modify the
 *  subscription-level `ackDeadlineSeconds` used for subsequent messages.
 *
 *  @param object The @c GTLRPubsub_ModifyAckDeadlineRequest to include in the
 *    query.
 *  @param subscription The name of the subscription.
 *    Format is `projects/{project}/subscriptions/{sub}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsModifyAckDeadline
 */
+ (instancetype)queryWithObject:(GTLRPubsub_ModifyAckDeadlineRequest *)object
                   subscription:(NSString *)subscription;

@end

/**
 *  Modifies the `PushConfig` for a specified subscription.
 *  This may be used to change a push subscription to a pull one (signified by
 *  an empty `PushConfig`) or vice versa, or change the endpoint URL and other
 *  attributes of a push subscription. Messages will accumulate for delivery
 *  continuously through the call regardless of changes to the `PushConfig`.
 *
 *  Method: pubsub.projects.subscriptions.modifyPushConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsModifyPushConfig : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSubscriptionsModifyPushConfigWithObject:subscription:]

/**
 *  The name of the subscription.
 *  Format is `projects/{project}/subscriptions/{sub}`.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  Fetches a @c GTLRPubsub_Empty.
 *
 *  Modifies the `PushConfig` for a specified subscription.
 *  This may be used to change a push subscription to a pull one (signified by
 *  an empty `PushConfig`) or vice versa, or change the endpoint URL and other
 *  attributes of a push subscription. Messages will accumulate for delivery
 *  continuously through the call regardless of changes to the `PushConfig`.
 *
 *  @param object The @c GTLRPubsub_ModifyPushConfigRequest to include in the
 *    query.
 *  @param subscription The name of the subscription.
 *    Format is `projects/{project}/subscriptions/{sub}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsModifyPushConfig
 */
+ (instancetype)queryWithObject:(GTLRPubsub_ModifyPushConfigRequest *)object
                   subscription:(NSString *)subscription;

@end

/**
 *  Updates an existing subscription. Note that certain properties of a
 *  subscription, such as its topic, are not modifiable.
 *
 *  Method: pubsub.projects.subscriptions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsPatch : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSubscriptionsPatchWithObject:name:]

/**
 *  The name of the subscription. It must have the format
 *  `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
 *  start with a letter, and contain only letters (`[A-Za-z]`), numbers
 *  (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
 *  plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
 *  in length, and it must not start with `"goog"`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRPubsub_Subscription.
 *
 *  Updates an existing subscription. Note that certain properties of a
 *  subscription, such as its topic, are not modifiable.
 *
 *  @param object The @c GTLRPubsub_UpdateSubscriptionRequest to include in the
 *    query.
 *  @param name The name of the subscription. It must have the format
 *    `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
 *    start with a letter, and contain only letters (`[A-Za-z]`), numbers
 *    (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
 *    plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
 *    in length, and it must not start with `"goog"`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsPatch
 */
+ (instancetype)queryWithObject:(GTLRPubsub_UpdateSubscriptionRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Pulls messages from the server. The server may return `UNAVAILABLE` if
 *  there are too many concurrent pull requests pending for the given
 *  subscription.
 *
 *  Method: pubsub.projects.subscriptions.pull
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsPull : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSubscriptionsPullWithObject:subscription:]

/**
 *  The subscription from which messages should be pulled.
 *  Format is `projects/{project}/subscriptions/{sub}`.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  Fetches a @c GTLRPubsub_PullResponse.
 *
 *  Pulls messages from the server. The server may return `UNAVAILABLE` if
 *  there are too many concurrent pull requests pending for the given
 *  subscription.
 *
 *  @param object The @c GTLRPubsub_PullRequest to include in the query.
 *  @param subscription The subscription from which messages should be pulled.
 *    Format is `projects/{project}/subscriptions/{sub}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsPull
 */
+ (instancetype)queryWithObject:(GTLRPubsub_PullRequest *)object
                   subscription:(NSString *)subscription;

@end

/**
 *  Seeks an existing subscription to a point in time or to a given snapshot,
 *  whichever is provided in the request. Snapshots are used in
 *  <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
 *  operations, which allow
 *  you to manage message acknowledgments in bulk. That is, you can set the
 *  acknowledgment state of messages in an existing subscription to the state
 *  captured by a snapshot. Note that both the subscription and the snapshot
 *  must be on the same topic.<br><br>
 *  <b>BETA:</b> This feature is part of a beta release. This API might be
 *  changed in backward-incompatible ways and is not recommended for production
 *  use. It is not subject to any SLA or deprecation policy.
 *
 *  Method: pubsub.projects.subscriptions.seek
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsSeek : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSubscriptionsSeekWithObject:subscription:]

/** The subscription to affect. */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  Fetches a @c GTLRPubsub_SeekResponse.
 *
 *  Seeks an existing subscription to a point in time or to a given snapshot,
 *  whichever is provided in the request. Snapshots are used in
 *  <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
 *  operations, which allow
 *  you to manage message acknowledgments in bulk. That is, you can set the
 *  acknowledgment state of messages in an existing subscription to the state
 *  captured by a snapshot. Note that both the subscription and the snapshot
 *  must be on the same topic.<br><br>
 *  <b>BETA:</b> This feature is part of a beta release. This API might be
 *  changed in backward-incompatible ways and is not recommended for production
 *  use. It is not subject to any SLA or deprecation policy.
 *
 *  @param object The @c GTLRPubsub_SeekRequest to include in the query.
 *  @param subscription The subscription to affect.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsSeek
 */
+ (instancetype)queryWithObject:(GTLRPubsub_SeekRequest *)object
                   subscription:(NSString *)subscription;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  Method: pubsub.projects.subscriptions.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsSetIamPolicy : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSubscriptionsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  @param object The @c GTLRPubsub_SetIamPolicyRequest to include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRPubsub_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  Method: pubsub.projects.subscriptions.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsTestIamPermissions : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsSubscriptionsTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  @param object The @c GTLRPubsub_TestIamPermissionsRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRPubsub_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Creates the given topic with the given name. See the
 *  <a href="https://cloud.google.com/pubsub/docs/admin#resource_names">
 *  resource name rules</a>.
 *
 *  Method: pubsub.projects.topics.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsCreate : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsTopicsCreateWithObject:name:]

/**
 *  The name of the topic. It must have the format
 *  `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
 *  and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
 *  underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
 *  signs (`%`). It must be between 3 and 255 characters in length, and it
 *  must not start with `"goog"`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRPubsub_Topic.
 *
 *  Creates the given topic with the given name. See the
 *  <a href="https://cloud.google.com/pubsub/docs/admin#resource_names">
 *  resource name rules</a>.
 *
 *  @param object The @c GTLRPubsub_Topic to include in the query.
 *  @param name The name of the topic. It must have the format
 *    `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
 *    and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
 *    underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
 *    signs (`%`). It must be between 3 and 255 characters in length, and it
 *    must not start with `"goog"`.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsCreate
 */
+ (instancetype)queryWithObject:(GTLRPubsub_Topic *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
 *  does not exist. After a topic is deleted, a new topic may be created with
 *  the same name; this is an entirely new topic with none of the old
 *  configuration or subscriptions. Existing subscriptions to this topic are
 *  not deleted, but their `topic` field is set to `_deleted-topic_`.
 *
 *  Method: pubsub.projects.topics.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsDelete : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsTopicsDeleteWithtopic:]

/**
 *  Name of the topic to delete.
 *  Format is `projects/{project}/topics/{topic}`.
 */
@property(nonatomic, copy, nullable) NSString *topic;

/**
 *  Fetches a @c GTLRPubsub_Empty.
 *
 *  Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
 *  does not exist. After a topic is deleted, a new topic may be created with
 *  the same name; this is an entirely new topic with none of the old
 *  configuration or subscriptions. Existing subscriptions to this topic are
 *  not deleted, but their `topic` field is set to `_deleted-topic_`.
 *
 *  @param topic Name of the topic to delete.
 *    Format is `projects/{project}/topics/{topic}`.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsDelete
 */
+ (instancetype)queryWithTopic:(NSString *)topic;

@end

/**
 *  Gets the configuration of a topic.
 *
 *  Method: pubsub.projects.topics.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsGet : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsTopicsGetWithtopic:]

/**
 *  The name of the topic to get.
 *  Format is `projects/{project}/topics/{topic}`.
 */
@property(nonatomic, copy, nullable) NSString *topic;

/**
 *  Fetches a @c GTLRPubsub_Topic.
 *
 *  Gets the configuration of a topic.
 *
 *  @param topic The name of the topic to get.
 *    Format is `projects/{project}/topics/{topic}`.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsGet
 */
+ (instancetype)queryWithTopic:(NSString *)topic;

@end

/**
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  Method: pubsub.projects.topics.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsGetIamPolicy : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsTopicsGetIamPolicyWithresource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_Policy.
 *
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists matching topics.
 *
 *  Method: pubsub.projects.topics.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsList : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsTopicsListWithproject:]

/** Maximum number of topics to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListTopicsResponse`; indicates that this is
 *  a continuation of a prior `ListTopics` call, and that the system should
 *  return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The name of the project in which to list topics.
 *  Format is `projects/{project-id}`.
 */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRPubsub_ListTopicsResponse.
 *
 *  Lists matching topics.
 *
 *  @param project The name of the project in which to list topics.
 *    Format is `projects/{project-id}`.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProject:(NSString *)project;

@end

/**
 *  Updates an existing topic. Note that certain properties of a
 *  topic are not modifiable.
 *
 *  Method: pubsub.projects.topics.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsPatch : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsTopicsPatchWithObject:name:]

/**
 *  The name of the topic. It must have the format
 *  `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
 *  and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
 *  underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
 *  signs (`%`). It must be between 3 and 255 characters in length, and it
 *  must not start with `"goog"`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRPubsub_Topic.
 *
 *  Updates an existing topic. Note that certain properties of a
 *  topic are not modifiable.
 *
 *  @param object The @c GTLRPubsub_UpdateTopicRequest to include in the query.
 *  @param name The name of the topic. It must have the format
 *    `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
 *    and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
 *    underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
 *    signs (`%`). It must be between 3 and 255 characters in length, and it
 *    must not start with `"goog"`.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsPatch
 */
+ (instancetype)queryWithObject:(GTLRPubsub_UpdateTopicRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
 *  does not exist.
 *
 *  Method: pubsub.projects.topics.publish
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsPublish : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsTopicsPublishWithObject:topic:]

/**
 *  The messages in the request will be published on this topic.
 *  Format is `projects/{project}/topics/{topic}`.
 */
@property(nonatomic, copy, nullable) NSString *topic;

/**
 *  Fetches a @c GTLRPubsub_PublishResponse.
 *
 *  Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
 *  does not exist.
 *
 *  @param object The @c GTLRPubsub_PublishRequest to include in the query.
 *  @param topic The messages in the request will be published on this topic.
 *    Format is `projects/{project}/topics/{topic}`.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsPublish
 */
+ (instancetype)queryWithObject:(GTLRPubsub_PublishRequest *)object
                          topic:(NSString *)topic;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  Method: pubsub.projects.topics.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsSetIamPolicy : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsTopicsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  @param object The @c GTLRPubsub_SetIamPolicyRequest to include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRPubsub_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists the names of the snapshots on this topic. Snapshots are used in
 *  <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
 *  operations, which allow
 *  you to manage message acknowledgments in bulk. That is, you can set the
 *  acknowledgment state of messages in an existing subscription to the state
 *  captured by a snapshot.<br><br>
 *  <b>BETA:</b> This feature is part of a beta release. This API might be
 *  changed in backward-incompatible ways and is not recommended for production
 *  use. It is not subject to any SLA or deprecation policy.
 *
 *  Method: pubsub.projects.topics.snapshots.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsSnapshotsList : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsTopicsSnapshotsListWithtopic:]

/** Maximum number of snapshot names to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListTopicSnapshotsResponse`; indicates
 *  that this is a continuation of a prior `ListTopicSnapshots` call, and
 *  that the system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The name of the topic that snapshots are attached to.
 *  Format is `projects/{project}/topics/{topic}`.
 */
@property(nonatomic, copy, nullable) NSString *topic;

/**
 *  Fetches a @c GTLRPubsub_ListTopicSnapshotsResponse.
 *
 *  Lists the names of the snapshots on this topic. Snapshots are used in
 *  <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
 *  operations, which allow
 *  you to manage message acknowledgments in bulk. That is, you can set the
 *  acknowledgment state of messages in an existing subscription to the state
 *  captured by a snapshot.<br><br>
 *  <b>BETA:</b> This feature is part of a beta release. This API might be
 *  changed in backward-incompatible ways and is not recommended for production
 *  use. It is not subject to any SLA or deprecation policy.
 *
 *  @param topic The name of the topic that snapshots are attached to.
 *    Format is `projects/{project}/topics/{topic}`.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsSnapshotsList
 */
+ (instancetype)queryWithTopic:(NSString *)topic;

@end

/**
 *  Lists the names of the subscriptions on this topic.
 *
 *  Method: pubsub.projects.topics.subscriptions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsSubscriptionsList : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsTopicsSubscriptionsListWithtopic:]

/** Maximum number of subscription names to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListTopicSubscriptionsResponse`; indicates
 *  that this is a continuation of a prior `ListTopicSubscriptions` call, and
 *  that the system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The name of the topic that subscriptions are attached to.
 *  Format is `projects/{project}/topics/{topic}`.
 */
@property(nonatomic, copy, nullable) NSString *topic;

/**
 *  Fetches a @c GTLRPubsub_ListTopicSubscriptionsResponse.
 *
 *  Lists the names of the subscriptions on this topic.
 *
 *  @param topic The name of the topic that subscriptions are attached to.
 *    Format is `projects/{project}/topics/{topic}`.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsSubscriptionsList
 */
+ (instancetype)queryWithTopic:(NSString *)topic;

@end

/**
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  Method: pubsub.projects.topics.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsTestIamPermissions : GTLRPubsubQuery
// Previous library name was
//   +[GTLQueryPubsub queryForProjectsTopicsTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  @param object The @c GTLRPubsub_TestIamPermissionsRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRPubsub_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
