// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Classroom API (classroom/v1)
// Description:
//   Manages classes, rosters, and invitations in Google Classroom.
// Documentation:
//   https://developers.google.com/classroom/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRClassroom_Announcement;
@class GTLRClassroom_Course;
@class GTLRClassroom_CourseAlias;
@class GTLRClassroom_CourseWork;
@class GTLRClassroom_GuardianInvitation;
@class GTLRClassroom_Invitation;
@class GTLRClassroom_ModifyAnnouncementAssigneesRequest;
@class GTLRClassroom_ModifyAttachmentsRequest;
@class GTLRClassroom_ModifyCourseWorkAssigneesRequest;
@class GTLRClassroom_ReclaimStudentSubmissionRequest;
@class GTLRClassroom_Registration;
@class GTLRClassroom_ReturnStudentSubmissionRequest;
@class GTLRClassroom_Student;
@class GTLRClassroom_StudentSubmission;
@class GTLRClassroom_Teacher;
@class GTLRClassroom_TurnInStudentSubmissionRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// announcementStates

/** Value: "ANNOUNCEMENT_STATE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRClassroomAnnouncementStatesAnnouncementStateUnspecified;
/** Value: "DELETED" */
GTLR_EXTERN NSString * const kGTLRClassroomAnnouncementStatesDeleted;
/** Value: "DRAFT" */
GTLR_EXTERN NSString * const kGTLRClassroomAnnouncementStatesDraft;
/** Value: "PUBLISHED" */
GTLR_EXTERN NSString * const kGTLRClassroomAnnouncementStatesPublished;

// ----------------------------------------------------------------------------
// courseStates

/** Value: "ACTIVE" */
GTLR_EXTERN NSString * const kGTLRClassroomCourseStatesActive;
/** Value: "ARCHIVED" */
GTLR_EXTERN NSString * const kGTLRClassroomCourseStatesArchived;
/** Value: "COURSE_STATE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRClassroomCourseStatesCourseStateUnspecified;
/** Value: "DECLINED" */
GTLR_EXTERN NSString * const kGTLRClassroomCourseStatesDeclined;
/** Value: "PROVISIONED" */
GTLR_EXTERN NSString * const kGTLRClassroomCourseStatesProvisioned;
/** Value: "SUSPENDED" */
GTLR_EXTERN NSString * const kGTLRClassroomCourseStatesSuspended;

// ----------------------------------------------------------------------------
// courseWorkStates

/** Value: "COURSE_WORK_STATE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRClassroomCourseWorkStatesCourseWorkStateUnspecified;
/** Value: "DELETED" */
GTLR_EXTERN NSString * const kGTLRClassroomCourseWorkStatesDeleted;
/** Value: "DRAFT" */
GTLR_EXTERN NSString * const kGTLRClassroomCourseWorkStatesDraft;
/** Value: "PUBLISHED" */
GTLR_EXTERN NSString * const kGTLRClassroomCourseWorkStatesPublished;

// ----------------------------------------------------------------------------
// late

/** Value: "LATE_ONLY" */
GTLR_EXTERN NSString * const kGTLRClassroomLateLateOnly;
/** Value: "LATE_VALUES_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRClassroomLateLateValuesUnspecified;
/** Value: "NOT_LATE_ONLY" */
GTLR_EXTERN NSString * const kGTLRClassroomLateNotLateOnly;

// ----------------------------------------------------------------------------
// states

/** Value: "COMPLETE" */
GTLR_EXTERN NSString * const kGTLRClassroomStatesComplete;
/** Value: "CREATED" */
GTLR_EXTERN NSString * const kGTLRClassroomStatesCreated;
/** Value: "GUARDIAN_INVITATION_STATE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRClassroomStatesGuardianInvitationStateUnspecified;
/** Value: "NEW" */
GTLR_EXTERN NSString * const kGTLRClassroomStatesNew;
/** Value: "PENDING" */
GTLR_EXTERN NSString * const kGTLRClassroomStatesPending;
/** Value: "RECLAIMED_BY_STUDENT" */
GTLR_EXTERN NSString * const kGTLRClassroomStatesReclaimedByStudent;
/** Value: "RETURNED" */
GTLR_EXTERN NSString * const kGTLRClassroomStatesReturned;
/** Value: "SUBMISSION_STATE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRClassroomStatesSubmissionStateUnspecified;
/** Value: "TURNED_IN" */
GTLR_EXTERN NSString * const kGTLRClassroomStatesTurnedIn;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Classroom query classes.
 */
@interface GTLRClassroomQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates an alias for a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to create the
 *  alias or for access errors.
 *  * `NOT_FOUND` if the course does not exist.
 *  * `ALREADY_EXISTS` if the alias already exists.
 *  * `FAILED_PRECONDITION` if the alias requested does not make sense for the
 *  requesting user or course (for example, if a user not in a domain
 *  attempts to access a domain-scoped alias).
 *
 *  Method: classroom.courses.aliases.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 */
@interface GTLRClassroomQuery_CoursesAliasesCreate : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesAliasesCreateWithObject:courseId:]

/**
 *  Identifier of the course to alias.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Fetches a @c GTLRClassroom_CourseAlias.
 *
 *  Creates an alias for a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to create the
 *  alias or for access errors.
 *  * `NOT_FOUND` if the course does not exist.
 *  * `ALREADY_EXISTS` if the alias already exists.
 *  * `FAILED_PRECONDITION` if the alias requested does not make sense for the
 *  requesting user or course (for example, if a user not in a domain
 *  attempts to access a domain-scoped alias).
 *
 *  @param object The @c GTLRClassroom_CourseAlias to include in the query.
 *  @param courseId Identifier of the course to alias.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *
 *  @return GTLRClassroomQuery_CoursesAliasesCreate
 */
+ (instancetype)queryWithObject:(GTLRClassroom_CourseAlias *)object
                       courseId:(NSString *)courseId;

@end

/**
 *  Deletes an alias of a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to remove the
 *  alias or for access errors.
 *  * `NOT_FOUND` if the alias does not exist.
 *  * `FAILED_PRECONDITION` if the alias requested does not make sense for the
 *  requesting user or course (for example, if a user not in a domain
 *  attempts to delete a domain-scoped alias).
 *
 *  Method: classroom.courses.aliases.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 */
@interface GTLRClassroomQuery_CoursesAliasesDelete : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesAliasesDeleteWithcourseId:alias:]

/**
 *  Alias to delete.
 *  This may not be the Classroom-assigned identifier.
 */
@property(nonatomic, copy, nullable) NSString *alias;

/**
 *  Identifier of the course whose alias should be deleted.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Deletes an alias of a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to remove the
 *  alias or for access errors.
 *  * `NOT_FOUND` if the alias does not exist.
 *  * `FAILED_PRECONDITION` if the alias requested does not make sense for the
 *  requesting user or course (for example, if a user not in a domain
 *  attempts to delete a domain-scoped alias).
 *
 *  @param courseId Identifier of the course whose alias should be deleted.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param alias Alias to delete.
 *    This may not be the Classroom-assigned identifier.
 *
 *  @return GTLRClassroomQuery_CoursesAliasesDelete
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId
                            alias:(NSString *)alias;

@end

/**
 *  Returns a list of aliases for a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  course or for access errors.
 *  * `NOT_FOUND` if the course does not exist.
 *
 *  Method: classroom.courses.aliases.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 *    @c kGTLRAuthScopeClassroomCoursesReadonly
 */
@interface GTLRClassroomQuery_CoursesAliasesList : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesAliasesListWithcourseId:]

/**
 *  The identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Maximum number of items to return. Zero or unspecified indicates that the
 *  server may assign a maximum.
 *  The server may return fewer than the specified number of results.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  nextPageToken
 *  value returned from a previous
 *  list call,
 *  indicating that the subsequent page of results should be returned.
 *  The list request
 *  must be otherwise identical to the one that resulted in this token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRClassroom_ListCourseAliasesResponse.
 *
 *  Returns a list of aliases for a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  course or for access errors.
 *  * `NOT_FOUND` if the course does not exist.
 *
 *  @param courseId The identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *
 *  @return GTLRClassroomQuery_CoursesAliasesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId;

@end

/**
 *  Creates an announcement.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course, create announcements in the requested course, share a
 *  Drive attachment, or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course does not exist.
 *  * `FAILED_PRECONDITION` for the following request error:
 *  * AttachmentNotVisible
 *
 *  Method: classroom.courses.announcements.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomAnnouncements
 */
@interface GTLRClassroomQuery_CoursesAnnouncementsCreate : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesAnnouncementsCreateWithObject:courseId:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Fetches a @c GTLRClassroom_Announcement.
 *
 *  Creates an announcement.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course, create announcements in the requested course, share a
 *  Drive attachment, or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course does not exist.
 *  * `FAILED_PRECONDITION` for the following request error:
 *  * AttachmentNotVisible
 *
 *  @param object The @c GTLRClassroom_Announcement to include in the query.
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *
 *  @return GTLRClassroomQuery_CoursesAnnouncementsCreate
 */
+ (instancetype)queryWithObject:(GTLRClassroom_Announcement *)object
                       courseId:(NSString *)courseId;

@end

/**
 *  Deletes an announcement.
 *  This request must be made by the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  create the corresponding announcement item.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting developer project did not create
 *  the corresponding announcement, if the requesting user is not permitted
 *  to delete the requested course or for access errors.
 *  * `FAILED_PRECONDITION` if the requested announcement has already been
 *  deleted.
 *  * `NOT_FOUND` if no course exists with the requested ID.
 *
 *  Method: classroom.courses.announcements.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomAnnouncements
 */
@interface GTLRClassroomQuery_CoursesAnnouncementsDelete : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesAnnouncementsDeleteWithcourseId:identifier:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Identifier of the announcement to delete.
 *  This identifier is a Classroom-assigned identifier.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Deletes an announcement.
 *  This request must be made by the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  create the corresponding announcement item.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting developer project did not create
 *  the corresponding announcement, if the requesting user is not permitted
 *  to delete the requested course or for access errors.
 *  * `FAILED_PRECONDITION` if the requested announcement has already been
 *  deleted.
 *  * `NOT_FOUND` if no course exists with the requested ID.
 *
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param identifier Identifier of the announcement to delete.
 *    This identifier is a Classroom-assigned identifier.
 *
 *  @return GTLRClassroomQuery_CoursesAnnouncementsDelete
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId
                       identifier:(NSString *)identifier;

@end

/**
 *  Returns an announcement.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or announcement, or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course or announcement does not exist.
 *
 *  Method: classroom.courses.announcements.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomAnnouncements
 *    @c kGTLRAuthScopeClassroomAnnouncementsReadonly
 */
@interface GTLRClassroomQuery_CoursesAnnouncementsGet : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesAnnouncementsGetWithcourseId:identifier:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Identifier of the announcement.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Announcement.
 *
 *  Returns an announcement.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or announcement, or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course or announcement does not exist.
 *
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param identifier Identifier of the announcement.
 *
 *  @return GTLRClassroomQuery_CoursesAnnouncementsGet
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId
                       identifier:(NSString *)identifier;

@end

/**
 *  Returns a list of announcements that the requester is permitted to view.
 *  Course students may only view `PUBLISHED` announcements. Course teachers
 *  and domain administrators may view all announcements.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access
 *  the requested course or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course does not exist.
 *
 *  Method: classroom.courses.announcements.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomAnnouncements
 *    @c kGTLRAuthScopeClassroomAnnouncementsReadonly
 */
@interface GTLRClassroomQuery_CoursesAnnouncementsList : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesAnnouncementsListWithcourseId:]

/**
 *  Restriction on the `state` of announcements returned.
 *  If this argument is left unspecified, the default value is `PUBLISHED`.
 *
 *  Likely values:
 *    @arg @c kGTLRClassroomAnnouncementStatesAnnouncementStateUnspecified Value
 *        "ANNOUNCEMENT_STATE_UNSPECIFIED"
 *    @arg @c kGTLRClassroomAnnouncementStatesPublished Value "PUBLISHED"
 *    @arg @c kGTLRClassroomAnnouncementStatesDraft Value "DRAFT"
 *    @arg @c kGTLRClassroomAnnouncementStatesDeleted Value "DELETED"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *announcementStates;

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Optional sort ordering for results. A comma-separated list of fields with
 *  an optional sort direction keyword. Supported field is `updateTime`.
 *  Supported direction keywords are `asc` and `desc`.
 *  If not specified, `updateTime desc` is the default behavior.
 *  Examples: `updateTime asc`, `updateTime`
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Maximum number of items to return. Zero or unspecified indicates that the
 *  server may assign a maximum.
 *  The server may return fewer than the specified number of results.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  nextPageToken
 *  value returned from a previous
 *  list call,
 *  indicating that the subsequent page of results should be returned.
 *  The list request
 *  must be otherwise identical to the one that resulted in this token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRClassroom_ListAnnouncementsResponse.
 *
 *  Returns a list of announcements that the requester is permitted to view.
 *  Course students may only view `PUBLISHED` announcements. Course teachers
 *  and domain administrators may view all announcements.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access
 *  the requested course or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course does not exist.
 *
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *
 *  @return GTLRClassroomQuery_CoursesAnnouncementsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId;

@end

/**
 *  Modifies assignee mode and options of an announcement.
 *  Only a teacher of the course that contains the announcement may
 *  call this method.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or course work or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course or course work does not exist.
 *
 *  Method: classroom.courses.announcements.modifyAssignees
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomAnnouncements
 */
@interface GTLRClassroomQuery_CoursesAnnouncementsModifyAssignees : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesAnnouncementsModifyAssigneesWithObject:courseId:identifier:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Identifier of the announcement.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Announcement.
 *
 *  Modifies assignee mode and options of an announcement.
 *  Only a teacher of the course that contains the announcement may
 *  call this method.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or course work or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course or course work does not exist.
 *
 *  @param object The @c GTLRClassroom_ModifyAnnouncementAssigneesRequest to
 *    include in the query.
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param identifier Identifier of the announcement.
 *
 *  @return GTLRClassroomQuery_CoursesAnnouncementsModifyAssignees
 */
+ (instancetype)queryWithObject:(GTLRClassroom_ModifyAnnouncementAssigneesRequest *)object
                       courseId:(NSString *)courseId
                     identifier:(NSString *)identifier;

@end

/**
 *  Updates one or more fields of an announcement.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting developer project did not create
 *  the corresponding announcement or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `FAILED_PRECONDITION` if the requested announcement has already been
 *  deleted.
 *  * `NOT_FOUND` if the requested course or announcement does not exist
 *
 *  Method: classroom.courses.announcements.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomAnnouncements
 */
@interface GTLRClassroomQuery_CoursesAnnouncementsPatch : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesAnnouncementsPatchWithObject:courseId:identifier:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Identifier of the announcement.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Mask that identifies which fields on the announcement to update.
 *  This field is required to do an update. The update fails if invalid
 *  fields are specified. If a field supports empty values, it can be cleared
 *  by specifying it in the update mask and not in the Announcement object. If
 *  a field that does not support empty values is included in the update mask
 *  and not set in the Announcement object, an `INVALID_ARGUMENT` error will be
 *  returned.
 *  The following fields may be specified by teachers:
 *  * `text`
 *  * `state`
 *  * `scheduled_time`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRClassroom_Announcement.
 *
 *  Updates one or more fields of an announcement.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting developer project did not create
 *  the corresponding announcement or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `FAILED_PRECONDITION` if the requested announcement has already been
 *  deleted.
 *  * `NOT_FOUND` if the requested course or announcement does not exist
 *
 *  @param object The @c GTLRClassroom_Announcement to include in the query.
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param identifier Identifier of the announcement.
 *
 *  @return GTLRClassroomQuery_CoursesAnnouncementsPatch
 */
+ (instancetype)queryWithObject:(GTLRClassroom_Announcement *)object
                       courseId:(NSString *)courseId
                     identifier:(NSString *)identifier;

@end

/**
 *  Creates course work.
 *  The resulting course work (and corresponding student submissions) are
 *  associated with the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  make the request. Classroom API requests to modify course work and student
 *  submissions must be made with an OAuth client ID from the associated
 *  Developer Console project.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course, create course work in the requested course, share a
 *  Drive attachment, or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course does not exist.
 *  * `FAILED_PRECONDITION` for the following request error:
 *  * AttachmentNotVisible
 *
 *  Method: classroom.courses.courseWork.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourseworkStudents
 */
@interface GTLRClassroomQuery_CoursesCourseWorkCreate : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesCourseWorkCreateWithObject:courseId:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Fetches a @c GTLRClassroom_CourseWork.
 *
 *  Creates course work.
 *  The resulting course work (and corresponding student submissions) are
 *  associated with the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  make the request. Classroom API requests to modify course work and student
 *  submissions must be made with an OAuth client ID from the associated
 *  Developer Console project.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course, create course work in the requested course, share a
 *  Drive attachment, or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course does not exist.
 *  * `FAILED_PRECONDITION` for the following request error:
 *  * AttachmentNotVisible
 *
 *  @param object The @c GTLRClassroom_CourseWork to include in the query.
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *
 *  @return GTLRClassroomQuery_CoursesCourseWorkCreate
 */
+ (instancetype)queryWithObject:(GTLRClassroom_CourseWork *)object
                       courseId:(NSString *)courseId;

@end

/**
 *  Deletes a course work.
 *  This request must be made by the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  create the corresponding course work item.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting developer project did not create
 *  the corresponding course work, if the requesting user is not permitted
 *  to delete the requested course or for access errors.
 *  * `FAILED_PRECONDITION` if the requested course work has already been
 *  deleted.
 *  * `NOT_FOUND` if no course exists with the requested ID.
 *
 *  Method: classroom.courses.courseWork.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourseworkStudents
 */
@interface GTLRClassroomQuery_CoursesCourseWorkDelete : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesCourseWorkDeleteWithcourseId:identifier:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Identifier of the course work to delete.
 *  This identifier is a Classroom-assigned identifier.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Deletes a course work.
 *  This request must be made by the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  create the corresponding course work item.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting developer project did not create
 *  the corresponding course work, if the requesting user is not permitted
 *  to delete the requested course or for access errors.
 *  * `FAILED_PRECONDITION` if the requested course work has already been
 *  deleted.
 *  * `NOT_FOUND` if no course exists with the requested ID.
 *
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param identifier Identifier of the course work to delete.
 *    This identifier is a Classroom-assigned identifier.
 *
 *  @return GTLRClassroomQuery_CoursesCourseWorkDelete
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId
                       identifier:(NSString *)identifier;

@end

/**
 *  Returns course work.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or course work, or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course or course work does not exist.
 *
 *  Method: classroom.courses.courseWork.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourseworkMe
 *    @c kGTLRAuthScopeClassroomCourseworkMeReadonly
 *    @c kGTLRAuthScopeClassroomCourseworkStudents
 *    @c kGTLRAuthScopeClassroomCourseworkStudentsReadonly
 */
@interface GTLRClassroomQuery_CoursesCourseWorkGet : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesCourseWorkGetWithcourseId:identifier:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Identifier of the course work.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_CourseWork.
 *
 *  Returns course work.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or course work, or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course or course work does not exist.
 *
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param identifier Identifier of the course work.
 *
 *  @return GTLRClassroomQuery_CoursesCourseWorkGet
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId
                       identifier:(NSString *)identifier;

@end

/**
 *  Returns a list of course work that the requester is permitted to view.
 *  Course students may only view `PUBLISHED` course work. Course teachers
 *  and domain administrators may view all course work.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access
 *  the requested course or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course does not exist.
 *
 *  Method: classroom.courses.courseWork.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourseworkMe
 *    @c kGTLRAuthScopeClassroomCourseworkMeReadonly
 *    @c kGTLRAuthScopeClassroomCourseworkStudents
 *    @c kGTLRAuthScopeClassroomCourseworkStudentsReadonly
 */
@interface GTLRClassroomQuery_CoursesCourseWorkList : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesCourseWorkListWithcourseId:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Restriction on the work status to return. Only courseWork that matches
 *  is returned. If unspecified, items with a work status of `PUBLISHED`
 *  is returned.
 *
 *  Likely values:
 *    @arg @c kGTLRClassroomCourseWorkStatesCourseWorkStateUnspecified Value
 *        "COURSE_WORK_STATE_UNSPECIFIED"
 *    @arg @c kGTLRClassroomCourseWorkStatesPublished Value "PUBLISHED"
 *    @arg @c kGTLRClassroomCourseWorkStatesDraft Value "DRAFT"
 *    @arg @c kGTLRClassroomCourseWorkStatesDeleted Value "DELETED"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *courseWorkStates;

/**
 *  Optional sort ordering for results. A comma-separated list of fields with
 *  an optional sort direction keyword. Supported fields are `updateTime`
 *  and `dueDate`. Supported direction keywords are `asc` and `desc`.
 *  If not specified, `updateTime desc` is the default behavior.
 *  Examples: `dueDate asc,updateTime desc`, `updateTime,dueDate desc`
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Maximum number of items to return. Zero or unspecified indicates that the
 *  server may assign a maximum.
 *  The server may return fewer than the specified number of results.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  nextPageToken
 *  value returned from a previous
 *  list call,
 *  indicating that the subsequent page of results should be returned.
 *  The list request
 *  must be otherwise identical to the one that resulted in this token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRClassroom_ListCourseWorkResponse.
 *
 *  Returns a list of course work that the requester is permitted to view.
 *  Course students may only view `PUBLISHED` course work. Course teachers
 *  and domain administrators may view all course work.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access
 *  the requested course or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course does not exist.
 *
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *
 *  @return GTLRClassroomQuery_CoursesCourseWorkList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId;

@end

/**
 *  Modifies assignee mode and options of a coursework.
 *  Only a teacher of the course that contains the coursework may
 *  call this method.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or course work or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course or course work does not exist.
 *
 *  Method: classroom.courses.courseWork.modifyAssignees
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourseworkStudents
 */
@interface GTLRClassroomQuery_CoursesCourseWorkModifyAssignees : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesCourseWorkModifyAssigneesWithObject:courseId:identifier:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Identifier of the coursework.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_CourseWork.
 *
 *  Modifies assignee mode and options of a coursework.
 *  Only a teacher of the course that contains the coursework may
 *  call this method.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or course work or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course or course work does not exist.
 *
 *  @param object The @c GTLRClassroom_ModifyCourseWorkAssigneesRequest to
 *    include in the query.
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param identifier Identifier of the coursework.
 *
 *  @return GTLRClassroomQuery_CoursesCourseWorkModifyAssignees
 */
+ (instancetype)queryWithObject:(GTLRClassroom_ModifyCourseWorkAssigneesRequest *)object
                       courseId:(NSString *)courseId
                     identifier:(NSString *)identifier;

@end

/**
 *  Updates one or more fields of a course work.
 *  See google.classroom.v1.CourseWork for details
 *  of which fields may be updated and who may change them.
 *  This request must be made by the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  create the corresponding course work item.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting developer project did not create
 *  the corresponding course work, if the user is not permitted to make the
 *  requested modification to the student submission, or for
 *  access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `FAILED_PRECONDITION` if the requested course work has already been
 *  deleted.
 *  * `NOT_FOUND` if the requested course, course work, or student submission
 *  does not exist.
 *
 *  Method: classroom.courses.courseWork.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourseworkStudents
 */
@interface GTLRClassroomQuery_CoursesCourseWorkPatch : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesCourseWorkPatchWithObject:courseId:identifier:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Identifier of the course work.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Mask that identifies which fields on the course work to update.
 *  This field is required to do an update. The update fails if invalid
 *  fields are specified. If a field supports empty values, it can be cleared
 *  by specifying it in the update mask and not in the CourseWork object. If a
 *  field that does not support empty values is included in the update mask and
 *  not set in the CourseWork object, an `INVALID_ARGUMENT` error will be
 *  returned.
 *  The following fields may be specified by teachers:
 *  * `title`
 *  * `description`
 *  * `state`
 *  * `due_date`
 *  * `due_time`
 *  * `max_points`
 *  * `scheduled_time`
 *  * `submission_modification_mode`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRClassroom_CourseWork.
 *
 *  Updates one or more fields of a course work.
 *  See google.classroom.v1.CourseWork for details
 *  of which fields may be updated and who may change them.
 *  This request must be made by the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  create the corresponding course work item.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting developer project did not create
 *  the corresponding course work, if the user is not permitted to make the
 *  requested modification to the student submission, or for
 *  access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `FAILED_PRECONDITION` if the requested course work has already been
 *  deleted.
 *  * `NOT_FOUND` if the requested course, course work, or student submission
 *  does not exist.
 *
 *  @param object The @c GTLRClassroom_CourseWork to include in the query.
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param identifier Identifier of the course work.
 *
 *  @return GTLRClassroomQuery_CoursesCourseWorkPatch
 */
+ (instancetype)queryWithObject:(GTLRClassroom_CourseWork *)object
                       courseId:(NSString *)courseId
                     identifier:(NSString *)identifier;

@end

/**
 *  Returns a student submission.
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course, course work, or student submission or for
 *  access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course, course work, or student submission
 *  does not exist.
 *
 *  Method: classroom.courses.courseWork.studentSubmissions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourseworkMe
 *    @c kGTLRAuthScopeClassroomCourseworkMeReadonly
 *    @c kGTLRAuthScopeClassroomCourseworkStudents
 *    @c kGTLRAuthScopeClassroomCourseworkStudentsReadonly
 *    @c kGTLRAuthScopeClassroomStudentSubmissionsMeReadonly
 *    @c kGTLRAuthScopeClassroomStudentSubmissionsStudentsReadonly
 */
@interface GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsGet : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesCourseWorkStudentSubmissionsGetWithcourseId:courseWorkId:identifier:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/** Identifier of the course work. */
@property(nonatomic, copy, nullable) NSString *courseWorkId;

/**
 *  Identifier of the student submission.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_StudentSubmission.
 *
 *  Returns a student submission.
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course, course work, or student submission or for
 *  access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course, course work, or student submission
 *  does not exist.
 *
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param courseWorkId Identifier of the course work.
 *  @param identifier Identifier of the student submission.
 *
 *  @return GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsGet
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId
                     courseWorkId:(NSString *)courseWorkId
                       identifier:(NSString *)identifier;

@end

/**
 *  Returns a list of student submissions that the requester is permitted to
 *  view, factoring in the OAuth scopes of the request.
 *  `-` may be specified as the `course_work_id` to include student
 *  submissions for multiple course work items.
 *  Course students may only view their own work. Course teachers
 *  and domain administrators may view all student submissions.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or course work, or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course does not exist.
 *
 *  Method: classroom.courses.courseWork.studentSubmissions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourseworkMe
 *    @c kGTLRAuthScopeClassroomCourseworkMeReadonly
 *    @c kGTLRAuthScopeClassroomCourseworkStudents
 *    @c kGTLRAuthScopeClassroomCourseworkStudentsReadonly
 *    @c kGTLRAuthScopeClassroomStudentSubmissionsMeReadonly
 *    @c kGTLRAuthScopeClassroomStudentSubmissionsStudentsReadonly
 */
@interface GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsList : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesCourseWorkStudentSubmissionsListWithcourseId:courseWorkId:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Identifier of the student work to request.
 *  This may be set to the string literal `"-"` to request student work for
 *  all course work in the specified course.
 */
@property(nonatomic, copy, nullable) NSString *courseWorkId;

/**
 *  Requested lateness value. If specified, returned student submissions are
 *  restricted by the requested value.
 *  If unspecified, submissions are returned regardless of `late` value.
 *
 *  Likely values:
 *    @arg @c kGTLRClassroomLateLateValuesUnspecified Value
 *        "LATE_VALUES_UNSPECIFIED"
 *    @arg @c kGTLRClassroomLateLateOnly Value "LATE_ONLY"
 *    @arg @c kGTLRClassroomLateNotLateOnly Value "NOT_LATE_ONLY"
 */
@property(nonatomic, copy, nullable) NSString *late;

/**
 *  Maximum number of items to return. Zero or unspecified indicates that the
 *  server may assign a maximum.
 *  The server may return fewer than the specified number of results.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  nextPageToken
 *  value returned from a previous
 *  list call,
 *  indicating that the subsequent page of results should be returned.
 *  The list request
 *  must be otherwise identical to the one that resulted in this token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Requested submission states. If specified, returned student submissions
 *  match one of the specified submission states.
 *
 *  Likely values:
 *    @arg @c kGTLRClassroomStatesSubmissionStateUnspecified Value
 *        "SUBMISSION_STATE_UNSPECIFIED"
 *    @arg @c kGTLRClassroomStatesNew Value "NEW"
 *    @arg @c kGTLRClassroomStatesCreated Value "CREATED"
 *    @arg @c kGTLRClassroomStatesTurnedIn Value "TURNED_IN"
 *    @arg @c kGTLRClassroomStatesReturned Value "RETURNED"
 *    @arg @c kGTLRClassroomStatesReclaimedByStudent Value
 *        "RECLAIMED_BY_STUDENT"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *states;

/**
 *  Optional argument to restrict returned student work to those owned by the
 *  student with the specified identifier. The identifier can be one of the
 *  following:
 *  * the numeric identifier for the user
 *  * the email address of the user
 *  * the string literal `"me"`, indicating the requesting user
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRClassroom_ListStudentSubmissionsResponse.
 *
 *  Returns a list of student submissions that the requester is permitted to
 *  view, factoring in the OAuth scopes of the request.
 *  `-` may be specified as the `course_work_id` to include student
 *  submissions for multiple course work items.
 *  Course students may only view their own work. Course teachers
 *  and domain administrators may view all student submissions.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or course work, or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course does not exist.
 *
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param courseWorkId Identifier of the student work to request.
 *    This may be set to the string literal `"-"` to request student work for
 *    all course work in the specified course.
 *
 *  @return GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId
                     courseWorkId:(NSString *)courseWorkId;

@end

/**
 *  Modifies attachments of student submission.
 *  Attachments may only be added to student submissions belonging to course
 *  work objects with a `workType` of `ASSIGNMENT`.
 *  This request must be made by the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  create the corresponding course work item.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or course work, if the user is not permitted to modify
 *  attachments on the requested student submission, or for
 *  access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course, course work, or student submission
 *  does not exist.
 *
 *  Method: classroom.courses.courseWork.studentSubmissions.modifyAttachments
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourseworkMe
 *    @c kGTLRAuthScopeClassroomCourseworkStudents
 */
@interface GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsModifyAttachments : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesCourseWorkStudentSubmissionsModifyAttachmentsWithObject:courseId:courseWorkId:identifier:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/** Identifier of the course work. */
@property(nonatomic, copy, nullable) NSString *courseWorkId;

/**
 *  Identifier of the student submission.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_StudentSubmission.
 *
 *  Modifies attachments of student submission.
 *  Attachments may only be added to student submissions belonging to course
 *  work objects with a `workType` of `ASSIGNMENT`.
 *  This request must be made by the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  create the corresponding course work item.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or course work, if the user is not permitted to modify
 *  attachments on the requested student submission, or for
 *  access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course, course work, or student submission
 *  does not exist.
 *
 *  @param object The @c GTLRClassroom_ModifyAttachmentsRequest to include in
 *    the query.
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param courseWorkId Identifier of the course work.
 *  @param identifier Identifier of the student submission.
 *
 *  @return GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsModifyAttachments
 */
+ (instancetype)queryWithObject:(GTLRClassroom_ModifyAttachmentsRequest *)object
                       courseId:(NSString *)courseId
                   courseWorkId:(NSString *)courseWorkId
                     identifier:(NSString *)identifier;

@end

/**
 *  Updates one or more fields of a student submission.
 *  See google.classroom.v1.StudentSubmission for details
 *  of which fields may be updated and who may change them.
 *  This request must be made by the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  create the corresponding course work item.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting developer project did not create
 *  the corresponding course work, if the user is not permitted to make the
 *  requested modification to the student submission, or for
 *  access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course, course work, or student submission
 *  does not exist.
 *
 *  Method: classroom.courses.courseWork.studentSubmissions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourseworkMe
 *    @c kGTLRAuthScopeClassroomCourseworkStudents
 */
@interface GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsPatch : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesCourseWorkStudentSubmissionsPatchWithObject:courseId:courseWorkId:identifier:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/** Identifier of the course work. */
@property(nonatomic, copy, nullable) NSString *courseWorkId;

/**
 *  Identifier of the student submission.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Mask that identifies which fields on the student submission to update.
 *  This field is required to do an update. The update fails if invalid
 *  fields are specified.
 *  The following fields may be specified by teachers:
 *  * `draft_grade`
 *  * `assigned_grade`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRClassroom_StudentSubmission.
 *
 *  Updates one or more fields of a student submission.
 *  See google.classroom.v1.StudentSubmission for details
 *  of which fields may be updated and who may change them.
 *  This request must be made by the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  create the corresponding course work item.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting developer project did not create
 *  the corresponding course work, if the user is not permitted to make the
 *  requested modification to the student submission, or for
 *  access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course, course work, or student submission
 *  does not exist.
 *
 *  @param object The @c GTLRClassroom_StudentSubmission to include in the
 *    query.
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param courseWorkId Identifier of the course work.
 *  @param identifier Identifier of the student submission.
 *
 *  @return GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsPatch
 */
+ (instancetype)queryWithObject:(GTLRClassroom_StudentSubmission *)object
                       courseId:(NSString *)courseId
                   courseWorkId:(NSString *)courseWorkId
                     identifier:(NSString *)identifier;

@end

/**
 *  Reclaims a student submission on behalf of the student that owns it.
 *  Reclaiming a student submission transfers ownership of attached Drive
 *  files to the student and updates the submission state.
 *  Only the student that owns the requested student submission may call this
 *  method, and only for a student submission that has been turned in.
 *  This request must be made by the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  create the corresponding course work item.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or course work, unsubmit the requested student submission,
 *  or for access errors.
 *  * `FAILED_PRECONDITION` if the student submission has not been turned in.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course, course work, or student submission
 *  does not exist.
 *
 *  Method: classroom.courses.courseWork.studentSubmissions.reclaim
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourseworkMe
 */
@interface GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsReclaim : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesCourseWorkStudentSubmissionsReclaimWithObject:courseId:courseWorkId:identifier:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/** Identifier of the course work. */
@property(nonatomic, copy, nullable) NSString *courseWorkId;

/**
 *  Identifier of the student submission.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Reclaims a student submission on behalf of the student that owns it.
 *  Reclaiming a student submission transfers ownership of attached Drive
 *  files to the student and updates the submission state.
 *  Only the student that owns the requested student submission may call this
 *  method, and only for a student submission that has been turned in.
 *  This request must be made by the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  create the corresponding course work item.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or course work, unsubmit the requested student submission,
 *  or for access errors.
 *  * `FAILED_PRECONDITION` if the student submission has not been turned in.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course, course work, or student submission
 *  does not exist.
 *
 *  @param object The @c GTLRClassroom_ReclaimStudentSubmissionRequest to
 *    include in the query.
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param courseWorkId Identifier of the course work.
 *  @param identifier Identifier of the student submission.
 *
 *  @return GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsReclaim
 */
+ (instancetype)queryWithObject:(GTLRClassroom_ReclaimStudentSubmissionRequest *)object
                       courseId:(NSString *)courseId
                   courseWorkId:(NSString *)courseWorkId
                     identifier:(NSString *)identifier;

@end

/**
 *  Returns a student submission.
 *  Returning a student submission transfers ownership of attached Drive
 *  files to the student and may also update the submission state.
 *  Unlike the Classroom application, returning a student submission does not
 *  set assignedGrade to the draftGrade value.
 *  Only a teacher of the course that contains the requested student submission
 *  may call this method.
 *  This request must be made by the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  create the corresponding course work item.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or course work, return the requested student submission,
 *  or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course, course work, or student submission
 *  does not exist.
 *
 *  Method: classroom.courses.courseWork.studentSubmissions.return
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourseworkStudents
 */
@interface GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsReturn : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesCourseWorkStudentSubmissionsReturnWithObject:courseId:courseWorkId:identifier:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/** Identifier of the course work. */
@property(nonatomic, copy, nullable) NSString *courseWorkId;

/**
 *  Identifier of the student submission.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Returns a student submission.
 *  Returning a student submission transfers ownership of attached Drive
 *  files to the student and may also update the submission state.
 *  Unlike the Classroom application, returning a student submission does not
 *  set assignedGrade to the draftGrade value.
 *  Only a teacher of the course that contains the requested student submission
 *  may call this method.
 *  This request must be made by the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  create the corresponding course work item.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or course work, return the requested student submission,
 *  or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course, course work, or student submission
 *  does not exist.
 *
 *  @param object The @c GTLRClassroom_ReturnStudentSubmissionRequest to include
 *    in the query.
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param courseWorkId Identifier of the course work.
 *  @param identifier Identifier of the student submission.
 *
 *  @return GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsReturn
 */
+ (instancetype)queryWithObject:(GTLRClassroom_ReturnStudentSubmissionRequest *)object
                       courseId:(NSString *)courseId
                   courseWorkId:(NSString *)courseWorkId
                     identifier:(NSString *)identifier;

@end

/**
 *  Turns in a student submission.
 *  Turning in a student submission transfers ownership of attached Drive
 *  files to the teacher and may also update the submission state.
 *  This may only be called by the student that owns the specified student
 *  submission.
 *  This request must be made by the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  create the corresponding course work item.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or course work, turn in the requested student submission,
 *  or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course, course work, or student submission
 *  does not exist.
 *
 *  Method: classroom.courses.courseWork.studentSubmissions.turnIn
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourseworkMe
 */
@interface GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsTurnIn : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesCourseWorkStudentSubmissionsTurnInWithObject:courseId:courseWorkId:identifier:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/** Identifier of the course work. */
@property(nonatomic, copy, nullable) NSString *courseWorkId;

/**
 *  Identifier of the student submission.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Turns in a student submission.
 *  Turning in a student submission transfers ownership of attached Drive
 *  files to the teacher and may also update the submission state.
 *  This may only be called by the student that owns the specified student
 *  submission.
 *  This request must be made by the Developer Console project of the
 *  [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to
 *  create the corresponding course work item.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or course work, turn in the requested student submission,
 *  or for access errors.
 *  * `INVALID_ARGUMENT` if the request is malformed.
 *  * `NOT_FOUND` if the requested course, course work, or student submission
 *  does not exist.
 *
 *  @param object The @c GTLRClassroom_TurnInStudentSubmissionRequest to include
 *    in the query.
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param courseWorkId Identifier of the course work.
 *  @param identifier Identifier of the student submission.
 *
 *  @return GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsTurnIn
 */
+ (instancetype)queryWithObject:(GTLRClassroom_TurnInStudentSubmissionRequest *)object
                       courseId:(NSString *)courseId
                   courseWorkId:(NSString *)courseWorkId
                     identifier:(NSString *)identifier;

@end

/**
 *  Creates a course.
 *  The user specified in `ownerId` is the owner of the created course
 *  and added as a teacher.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to create
 *  courses or for access errors.
 *  * `NOT_FOUND` if the primary teacher is not a valid user.
 *  * `FAILED_PRECONDITION` if the course owner's account is disabled or for
 *  the following request errors:
 *  * UserGroupsMembershipLimitReached
 *  * `ALREADY_EXISTS` if an alias was specified in the `id` and
 *  already exists.
 *
 *  Method: classroom.courses.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 */
@interface GTLRClassroomQuery_CoursesCreate : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesCreateWithObject:]

/**
 *  Fetches a @c GTLRClassroom_Course.
 *
 *  Creates a course.
 *  The user specified in `ownerId` is the owner of the created course
 *  and added as a teacher.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to create
 *  courses or for access errors.
 *  * `NOT_FOUND` if the primary teacher is not a valid user.
 *  * `FAILED_PRECONDITION` if the course owner's account is disabled or for
 *  the following request errors:
 *  * UserGroupsMembershipLimitReached
 *  * `ALREADY_EXISTS` if an alias was specified in the `id` and
 *  already exists.
 *
 *  @param object The @c GTLRClassroom_Course to include in the query.
 *
 *  @return GTLRClassroomQuery_CoursesCreate
 */
+ (instancetype)queryWithObject:(GTLRClassroom_Course *)object;

@end

/**
 *  Deletes a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to delete the
 *  requested course or for access errors.
 *  * `NOT_FOUND` if no course exists with the requested ID.
 *
 *  Method: classroom.courses.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 */
@interface GTLRClassroomQuery_CoursesDelete : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesDeleteWithidentifier:]

/**
 *  Identifier of the course to delete.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Deletes a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to delete the
 *  requested course or for access errors.
 *  * `NOT_FOUND` if no course exists with the requested ID.
 *
 *  @param identifier Identifier of the course to delete.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *
 *  @return GTLRClassroomQuery_CoursesDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Returns a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or for access errors.
 *  * `NOT_FOUND` if no course exists with the requested ID.
 *
 *  Method: classroom.courses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 *    @c kGTLRAuthScopeClassroomCoursesReadonly
 */
@interface GTLRClassroomQuery_CoursesGet : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesGetWithidentifier:]

/**
 *  Identifier of the course to return.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Course.
 *
 *  Returns a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access the
 *  requested course or for access errors.
 *  * `NOT_FOUND` if no course exists with the requested ID.
 *
 *  @param identifier Identifier of the course to return.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *
 *  @return GTLRClassroomQuery_CoursesGet
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Returns a list of courses that the requesting user is permitted to view,
 *  restricted to those that match the request. Returned courses are ordered by
 *  creation time, with the most recently created coming first.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` for access errors.
 *  * `INVALID_ARGUMENT` if the query argument is malformed.
 *  * `NOT_FOUND` if any users specified in the query arguments do not exist.
 *
 *  Method: classroom.courses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 *    @c kGTLRAuthScopeClassroomCoursesReadonly
 */
@interface GTLRClassroomQuery_CoursesList : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesList]

/**
 *  Restricts returned courses to those in one of the specified states
 *  The default value is ACTIVE, ARCHIVED, PROVISIONED, DECLINED.
 *
 *  Likely values:
 *    @arg @c kGTLRClassroomCourseStatesCourseStateUnspecified Value
 *        "COURSE_STATE_UNSPECIFIED"
 *    @arg @c kGTLRClassroomCourseStatesActive Value "ACTIVE"
 *    @arg @c kGTLRClassroomCourseStatesArchived Value "ARCHIVED"
 *    @arg @c kGTLRClassroomCourseStatesProvisioned Value "PROVISIONED"
 *    @arg @c kGTLRClassroomCourseStatesDeclined Value "DECLINED"
 *    @arg @c kGTLRClassroomCourseStatesSuspended Value "SUSPENDED"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *courseStates;

/**
 *  Maximum number of items to return. Zero or unspecified indicates that the
 *  server may assign a maximum.
 *  The server may return fewer than the specified number of results.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  nextPageToken
 *  value returned from a previous
 *  list call,
 *  indicating that the subsequent page of results should be returned.
 *  The list request must be
 *  otherwise identical to the one that resulted in this token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Restricts returned courses to those having a student with the specified
 *  identifier. The identifier can be one of the following:
 *  * the numeric identifier for the user
 *  * the email address of the user
 *  * the string literal `"me"`, indicating the requesting user
 */
@property(nonatomic, copy, nullable) NSString *studentId;

/**
 *  Restricts returned courses to those having a teacher with the specified
 *  identifier. The identifier can be one of the following:
 *  * the numeric identifier for the user
 *  * the email address of the user
 *  * the string literal `"me"`, indicating the requesting user
 */
@property(nonatomic, copy, nullable) NSString *teacherId;

/**
 *  Fetches a @c GTLRClassroom_ListCoursesResponse.
 *
 *  Returns a list of courses that the requesting user is permitted to view,
 *  restricted to those that match the request. Returned courses are ordered by
 *  creation time, with the most recently created coming first.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` for access errors.
 *  * `INVALID_ARGUMENT` if the query argument is malformed.
 *  * `NOT_FOUND` if any users specified in the query arguments do not exist.
 *
 *  @return GTLRClassroomQuery_CoursesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Updates one or more fields in a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to modify the
 *  requested course or for access errors.
 *  * `NOT_FOUND` if no course exists with the requested ID.
 *  * `INVALID_ARGUMENT` if invalid fields are specified in the update mask or
 *  if no update mask is supplied.
 *  * `FAILED_PRECONDITION` for the following request errors:
 *  * CourseNotModifiable
 *
 *  Method: classroom.courses.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 */
@interface GTLRClassroomQuery_CoursesPatch : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesPatchWithObject:identifier:]

/**
 *  Identifier of the course to update.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Mask that identifies which fields on the course to update.
 *  This field is required to do an update. The update will fail if invalid
 *  fields are specified. The following fields are valid:
 *  * `name`
 *  * `section`
 *  * `descriptionHeading`
 *  * `description`
 *  * `room`
 *  * `courseState`
 *  * `ownerId`
 *  Note: patches to ownerId are treated as being effective immediately, but in
 *  practice it may take some time for the ownership transfer of all affected
 *  resources to complete.
 *  When set in a query parameter, this field should be specified as
 *  `updateMask=<field1>,<field2>,...`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRClassroom_Course.
 *
 *  Updates one or more fields in a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to modify the
 *  requested course or for access errors.
 *  * `NOT_FOUND` if no course exists with the requested ID.
 *  * `INVALID_ARGUMENT` if invalid fields are specified in the update mask or
 *  if no update mask is supplied.
 *  * `FAILED_PRECONDITION` for the following request errors:
 *  * CourseNotModifiable
 *
 *  @param object The @c GTLRClassroom_Course to include in the query.
 *  @param identifier Identifier of the course to update.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *
 *  @return GTLRClassroomQuery_CoursesPatch
 */
+ (instancetype)queryWithObject:(GTLRClassroom_Course *)object
                     identifier:(NSString *)identifier;

@end

/**
 *  Adds a user as a student of a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to create
 *  students in this course or for access errors.
 *  * `NOT_FOUND` if the requested course ID does not exist.
 *  * `FAILED_PRECONDITION` if the requested user's account is disabled,
 *  for the following request errors:
 *  * CourseMemberLimitReached
 *  * CourseNotModifiable
 *  * UserGroupsMembershipLimitReached
 *  * `ALREADY_EXISTS` if the user is already a student or teacher in the
 *  course.
 *
 *  Method: classroom.courses.students.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomProfileEmails
 *    @c kGTLRAuthScopeClassroomProfilePhotos
 *    @c kGTLRAuthScopeClassroomRosters
 */
@interface GTLRClassroomQuery_CoursesStudentsCreate : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesStudentsCreateWithObject:courseId:]

/**
 *  Identifier of the course to create the student in.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Enrollment code of the course to create the student in.
 *  This code is required if userId
 *  corresponds to the requesting user; it may be omitted if the requesting
 *  user has administrative permissions to create students for any user.
 */
@property(nonatomic, copy, nullable) NSString *enrollmentCode;

/**
 *  Fetches a @c GTLRClassroom_Student.
 *
 *  Adds a user as a student of a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to create
 *  students in this course or for access errors.
 *  * `NOT_FOUND` if the requested course ID does not exist.
 *  * `FAILED_PRECONDITION` if the requested user's account is disabled,
 *  for the following request errors:
 *  * CourseMemberLimitReached
 *  * CourseNotModifiable
 *  * UserGroupsMembershipLimitReached
 *  * `ALREADY_EXISTS` if the user is already a student or teacher in the
 *  course.
 *
 *  @param object The @c GTLRClassroom_Student to include in the query.
 *  @param courseId Identifier of the course to create the student in.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *
 *  @return GTLRClassroomQuery_CoursesStudentsCreate
 */
+ (instancetype)queryWithObject:(GTLRClassroom_Student *)object
                       courseId:(NSString *)courseId;

@end

/**
 *  Deletes a student of a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to delete
 *  students of this course or for access errors.
 *  * `NOT_FOUND` if no student of this course has the requested ID or if the
 *  course does not exist.
 *
 *  Method: classroom.courses.students.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomRosters
 */
@interface GTLRClassroomQuery_CoursesStudentsDelete : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesStudentsDeleteWithcourseId:userId:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Identifier of the student to delete. The identifier can be one of the
 *  following:
 *  * the numeric identifier for the user
 *  * the email address of the user
 *  * the string literal `"me"`, indicating the requesting user
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Deletes a student of a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to delete
 *  students of this course or for access errors.
 *  * `NOT_FOUND` if no student of this course has the requested ID or if the
 *  course does not exist.
 *
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param userId Identifier of the student to delete. The identifier can be one
 *    of the
 *    following:
 *    * the numeric identifier for the user
 *    * the email address of the user
 *    * the string literal `"me"`, indicating the requesting user
 *
 *  @return GTLRClassroomQuery_CoursesStudentsDelete
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId
                           userId:(NSString *)userId;

@end

/**
 *  Returns a student of a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to view
 *  students of this course or for access errors.
 *  * `NOT_FOUND` if no student of this course has the requested ID or if the
 *  course does not exist.
 *
 *  Method: classroom.courses.students.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomProfileEmails
 *    @c kGTLRAuthScopeClassroomProfilePhotos
 *    @c kGTLRAuthScopeClassroomRosters
 *    @c kGTLRAuthScopeClassroomRostersReadonly
 */
@interface GTLRClassroomQuery_CoursesStudentsGet : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesStudentsGetWithcourseId:userId:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Identifier of the student to return. The identifier can be one of the
 *  following:
 *  * the numeric identifier for the user
 *  * the email address of the user
 *  * the string literal `"me"`, indicating the requesting user
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRClassroom_Student.
 *
 *  Returns a student of a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to view
 *  students of this course or for access errors.
 *  * `NOT_FOUND` if no student of this course has the requested ID or if the
 *  course does not exist.
 *
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param userId Identifier of the student to return. The identifier can be one
 *    of the
 *    following:
 *    * the numeric identifier for the user
 *    * the email address of the user
 *    * the string literal `"me"`, indicating the requesting user
 *
 *  @return GTLRClassroomQuery_CoursesStudentsGet
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId
                           userId:(NSString *)userId;

@end

/**
 *  Returns a list of students of this course that the requester
 *  is permitted to view.
 *  This method returns the following error codes:
 *  * `NOT_FOUND` if the course does not exist.
 *  * `PERMISSION_DENIED` for access errors.
 *
 *  Method: classroom.courses.students.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomProfileEmails
 *    @c kGTLRAuthScopeClassroomProfilePhotos
 *    @c kGTLRAuthScopeClassroomRosters
 *    @c kGTLRAuthScopeClassroomRostersReadonly
 */
@interface GTLRClassroomQuery_CoursesStudentsList : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesStudentsListWithcourseId:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Maximum number of items to return. Zero means no maximum.
 *  The server may return fewer than the specified number of results.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  nextPageToken
 *  value returned from a previous
 *  list call, indicating that
 *  the subsequent page of results should be returned.
 *  The list request must be
 *  otherwise identical to the one that resulted in this token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRClassroom_ListStudentsResponse.
 *
 *  Returns a list of students of this course that the requester
 *  is permitted to view.
 *  This method returns the following error codes:
 *  * `NOT_FOUND` if the course does not exist.
 *  * `PERMISSION_DENIED` for access errors.
 *
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *
 *  @return GTLRClassroomQuery_CoursesStudentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId;

@end

/**
 *  Creates a teacher of a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to create
 *  teachers in this course or for access errors.
 *  * `NOT_FOUND` if the requested course ID does not exist.
 *  * `FAILED_PRECONDITION` if the requested user's account is disabled,
 *  for the following request errors:
 *  * CourseMemberLimitReached
 *  * CourseNotModifiable
 *  * CourseTeacherLimitReached
 *  * UserGroupsMembershipLimitReached
 *  * `ALREADY_EXISTS` if the user is already a teacher or student in the
 *  course.
 *
 *  Method: classroom.courses.teachers.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomProfileEmails
 *    @c kGTLRAuthScopeClassroomProfilePhotos
 *    @c kGTLRAuthScopeClassroomRosters
 */
@interface GTLRClassroomQuery_CoursesTeachersCreate : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesTeachersCreateWithObject:courseId:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Fetches a @c GTLRClassroom_Teacher.
 *
 *  Creates a teacher of a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to create
 *  teachers in this course or for access errors.
 *  * `NOT_FOUND` if the requested course ID does not exist.
 *  * `FAILED_PRECONDITION` if the requested user's account is disabled,
 *  for the following request errors:
 *  * CourseMemberLimitReached
 *  * CourseNotModifiable
 *  * CourseTeacherLimitReached
 *  * UserGroupsMembershipLimitReached
 *  * `ALREADY_EXISTS` if the user is already a teacher or student in the
 *  course.
 *
 *  @param object The @c GTLRClassroom_Teacher to include in the query.
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *
 *  @return GTLRClassroomQuery_CoursesTeachersCreate
 */
+ (instancetype)queryWithObject:(GTLRClassroom_Teacher *)object
                       courseId:(NSString *)courseId;

@end

/**
 *  Deletes a teacher of a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to delete
 *  teachers of this course or for access errors.
 *  * `NOT_FOUND` if no teacher of this course has the requested ID or if the
 *  course does not exist.
 *  * `FAILED_PRECONDITION` if the requested ID belongs to the primary teacher
 *  of this course.
 *
 *  Method: classroom.courses.teachers.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomRosters
 */
@interface GTLRClassroomQuery_CoursesTeachersDelete : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesTeachersDeleteWithcourseId:userId:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Identifier of the teacher to delete. The identifier can be one of the
 *  following:
 *  * the numeric identifier for the user
 *  * the email address of the user
 *  * the string literal `"me"`, indicating the requesting user
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Deletes a teacher of a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to delete
 *  teachers of this course or for access errors.
 *  * `NOT_FOUND` if no teacher of this course has the requested ID or if the
 *  course does not exist.
 *  * `FAILED_PRECONDITION` if the requested ID belongs to the primary teacher
 *  of this course.
 *
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param userId Identifier of the teacher to delete. The identifier can be one
 *    of the
 *    following:
 *    * the numeric identifier for the user
 *    * the email address of the user
 *    * the string literal `"me"`, indicating the requesting user
 *
 *  @return GTLRClassroomQuery_CoursesTeachersDelete
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId
                           userId:(NSString *)userId;

@end

/**
 *  Returns a teacher of a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to view
 *  teachers of this course or for access errors.
 *  * `NOT_FOUND` if no teacher of this course has the requested ID or if the
 *  course does not exist.
 *
 *  Method: classroom.courses.teachers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomProfileEmails
 *    @c kGTLRAuthScopeClassroomProfilePhotos
 *    @c kGTLRAuthScopeClassroomRosters
 *    @c kGTLRAuthScopeClassroomRostersReadonly
 */
@interface GTLRClassroomQuery_CoursesTeachersGet : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesTeachersGetWithcourseId:userId:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Identifier of the teacher to return. The identifier can be one of the
 *  following:
 *  * the numeric identifier for the user
 *  * the email address of the user
 *  * the string literal `"me"`, indicating the requesting user
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRClassroom_Teacher.
 *
 *  Returns a teacher of a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to view
 *  teachers of this course or for access errors.
 *  * `NOT_FOUND` if no teacher of this course has the requested ID or if the
 *  course does not exist.
 *
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *  @param userId Identifier of the teacher to return. The identifier can be one
 *    of the
 *    following:
 *    * the numeric identifier for the user
 *    * the email address of the user
 *    * the string literal `"me"`, indicating the requesting user
 *
 *  @return GTLRClassroomQuery_CoursesTeachersGet
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId
                           userId:(NSString *)userId;

@end

/**
 *  Returns a list of teachers of this course that the requester
 *  is permitted to view.
 *  This method returns the following error codes:
 *  * `NOT_FOUND` if the course does not exist.
 *  * `PERMISSION_DENIED` for access errors.
 *
 *  Method: classroom.courses.teachers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomProfileEmails
 *    @c kGTLRAuthScopeClassroomProfilePhotos
 *    @c kGTLRAuthScopeClassroomRosters
 *    @c kGTLRAuthScopeClassroomRostersReadonly
 */
@interface GTLRClassroomQuery_CoursesTeachersList : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesTeachersListWithcourseId:]

/**
 *  Identifier of the course.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Maximum number of items to return. Zero means no maximum.
 *  The server may return fewer than the specified number of results.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  nextPageToken
 *  value returned from a previous
 *  list call, indicating that
 *  the subsequent page of results should be returned.
 *  The list request must be
 *  otherwise identical to the one that resulted in this token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRClassroom_ListTeachersResponse.
 *
 *  Returns a list of teachers of this course that the requester
 *  is permitted to view.
 *  This method returns the following error codes:
 *  * `NOT_FOUND` if the course does not exist.
 *  * `PERMISSION_DENIED` for access errors.
 *
 *  @param courseId Identifier of the course.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *
 *  @return GTLRClassroomQuery_CoursesTeachersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCourseId:(NSString *)courseId;

@end

/**
 *  Updates a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to modify the
 *  requested course or for access errors.
 *  * `NOT_FOUND` if no course exists with the requested ID.
 *  * `FAILED_PRECONDITION` for the following request errors:
 *  * CourseNotModifiable
 *
 *  Method: classroom.courses.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomCourses
 */
@interface GTLRClassroomQuery_CoursesUpdate : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForCoursesUpdateWithObject:identifier:]

/**
 *  Identifier of the course to update.
 *  This identifier can be either the Classroom-assigned identifier or an
 *  alias.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Course.
 *
 *  Updates a course.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to modify the
 *  requested course or for access errors.
 *  * `NOT_FOUND` if no course exists with the requested ID.
 *  * `FAILED_PRECONDITION` for the following request errors:
 *  * CourseNotModifiable
 *
 *  @param object The @c GTLRClassroom_Course to include in the query.
 *  @param identifier Identifier of the course to update.
 *    This identifier can be either the Classroom-assigned identifier or an
 *    alias.
 *
 *  @return GTLRClassroomQuery_CoursesUpdate
 */
+ (instancetype)queryWithObject:(GTLRClassroom_Course *)object
                     identifier:(NSString *)identifier;

@end

/**
 *  Accepts an invitation, removing it and adding the invited user to the
 *  teachers or students (as appropriate) of the specified course. Only the
 *  invited user may accept an invitation.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to accept the
 *  requested invitation or for access errors.
 *  * `FAILED_PRECONDITION` for the following request errors:
 *  * CourseMemberLimitReached
 *  * CourseNotModifiable
 *  * CourseTeacherLimitReached
 *  * UserGroupsMembershipLimitReached
 *  * `NOT_FOUND` if no invitation exists with the requested ID.
 *
 *  Method: classroom.invitations.accept
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomRosters
 */
@interface GTLRClassroomQuery_InvitationsAccept : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForInvitationsAcceptWithidentifier:]

/**
 *  Identifier of the invitation to accept.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Accepts an invitation, removing it and adding the invited user to the
 *  teachers or students (as appropriate) of the specified course. Only the
 *  invited user may accept an invitation.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to accept the
 *  requested invitation or for access errors.
 *  * `FAILED_PRECONDITION` for the following request errors:
 *  * CourseMemberLimitReached
 *  * CourseNotModifiable
 *  * CourseTeacherLimitReached
 *  * UserGroupsMembershipLimitReached
 *  * `NOT_FOUND` if no invitation exists with the requested ID.
 *
 *  @param identifier Identifier of the invitation to accept.
 *
 *  @return GTLRClassroomQuery_InvitationsAccept
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Creates an invitation. Only one invitation for a user and course may exist
 *  at a time. Delete and re-create an invitation to make changes.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to create
 *  invitations for this course or for access errors.
 *  * `NOT_FOUND` if the course or the user does not exist.
 *  * `FAILED_PRECONDITION` if the requested user's account is disabled or if
 *  the user already has this role or a role with greater permissions.
 *  * `ALREADY_EXISTS` if an invitation for the specified user and course
 *  already exists.
 *
 *  Method: classroom.invitations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomRosters
 */
@interface GTLRClassroomQuery_InvitationsCreate : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForInvitationsCreateWithObject:]

/**
 *  Fetches a @c GTLRClassroom_Invitation.
 *
 *  Creates an invitation. Only one invitation for a user and course may exist
 *  at a time. Delete and re-create an invitation to make changes.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to create
 *  invitations for this course or for access errors.
 *  * `NOT_FOUND` if the course or the user does not exist.
 *  * `FAILED_PRECONDITION` if the requested user's account is disabled or if
 *  the user already has this role or a role with greater permissions.
 *  * `ALREADY_EXISTS` if an invitation for the specified user and course
 *  already exists.
 *
 *  @param object The @c GTLRClassroom_Invitation to include in the query.
 *
 *  @return GTLRClassroomQuery_InvitationsCreate
 */
+ (instancetype)queryWithObject:(GTLRClassroom_Invitation *)object;

@end

/**
 *  Deletes an invitation.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to delete the
 *  requested invitation or for access errors.
 *  * `NOT_FOUND` if no invitation exists with the requested ID.
 *
 *  Method: classroom.invitations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomRosters
 */
@interface GTLRClassroomQuery_InvitationsDelete : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForInvitationsDeleteWithidentifier:]

/**
 *  Identifier of the invitation to delete.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Deletes an invitation.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to delete the
 *  requested invitation or for access errors.
 *  * `NOT_FOUND` if no invitation exists with the requested ID.
 *
 *  @param identifier Identifier of the invitation to delete.
 *
 *  @return GTLRClassroomQuery_InvitationsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Returns an invitation.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to view the
 *  requested invitation or for access errors.
 *  * `NOT_FOUND` if no invitation exists with the requested ID.
 *
 *  Method: classroom.invitations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomRosters
 *    @c kGTLRAuthScopeClassroomRostersReadonly
 */
@interface GTLRClassroomQuery_InvitationsGet : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForInvitationsGetWithidentifier:]

/**
 *  Identifier of the invitation to return.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRClassroom_Invitation.
 *
 *  Returns an invitation.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to view the
 *  requested invitation or for access errors.
 *  * `NOT_FOUND` if no invitation exists with the requested ID.
 *
 *  @param identifier Identifier of the invitation to return.
 *
 *  @return GTLRClassroomQuery_InvitationsGet
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Returns a list of invitations that the requesting user is permitted to
 *  view, restricted to those that match the list request.
 *  *Note:* At least one of `user_id` or `course_id` must be supplied. Both
 *  fields can be supplied.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` for access errors.
 *
 *  Method: classroom.invitations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomRosters
 *    @c kGTLRAuthScopeClassroomRostersReadonly
 */
@interface GTLRClassroomQuery_InvitationsList : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForInvitationsList]

/**
 *  Restricts returned invitations to those for a course with the specified
 *  identifier.
 */
@property(nonatomic, copy, nullable) NSString *courseId;

/**
 *  Maximum number of items to return. Zero means no maximum.
 *  The server may return fewer than the specified number of results.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  nextPageToken
 *  value returned from a previous
 *  list call, indicating
 *  that the subsequent page of results should be returned.
 *  The list request must be
 *  otherwise identical to the one that resulted in this token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Restricts returned invitations to those for a specific user. The identifier
 *  can be one of the following:
 *  * the numeric identifier for the user
 *  * the email address of the user
 *  * the string literal `"me"`, indicating the requesting user
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRClassroom_ListInvitationsResponse.
 *
 *  Returns a list of invitations that the requesting user is permitted to
 *  view, restricted to those that match the list request.
 *  *Note:* At least one of `user_id` or `course_id` must be supplied. Both
 *  fields can be supplied.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` for access errors.
 *
 *  @return GTLRClassroomQuery_InvitationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Creates a `Registration`, causing Classroom to start sending notifications
 *  from the provided `feed` to the destination provided in `cloudPubSubTopic`.
 *  Returns the created `Registration`. Currently, this will be the same as
 *  the argument, but with server-assigned fields such as `expiry_time` and
 *  `id` filled in.
 *  Note that any value specified for the `expiry_time` or `id` fields will be
 *  ignored.
 *  While Classroom may validate the `cloudPubSubTopic` and return errors on a
 *  best effort basis, it is the caller's responsibility to ensure that it
 *  exists and that Classroom has permission to publish to it.
 *  This method may return the following error codes:
 *  * `PERMISSION_DENIED` if:
 *  * the authenticated user does not have permission to receive
 *  notifications from the requested field; or
 *  * the credential provided does not include the appropriate scope for
 *  the requested feed.
 *  * another access error is encountered.
 *  * `INVALID_ARGUMENT` if:
 *  * no `cloudPubsubTopic` is specified, or the specified
 *  `cloudPubsubTopic` is not valid; or
 *  * no `feed` is specified, or the specified `feed` is not valid.
 *  * `NOT_FOUND` if:
 *  * the specified `feed` cannot be located, or the requesting user does
 *  not have permission to determine whether or not it exists; or
 *  * the specified `cloudPubsubTopic` cannot be located, or Classroom has
 *  not been granted permission to publish to it.
 *
 *  Method: classroom.registrations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomPushNotifications
 */
@interface GTLRClassroomQuery_RegistrationsCreate : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForRegistrationsCreateWithObject:]

/**
 *  Fetches a @c GTLRClassroom_Registration.
 *
 *  Creates a `Registration`, causing Classroom to start sending notifications
 *  from the provided `feed` to the destination provided in `cloudPubSubTopic`.
 *  Returns the created `Registration`. Currently, this will be the same as
 *  the argument, but with server-assigned fields such as `expiry_time` and
 *  `id` filled in.
 *  Note that any value specified for the `expiry_time` or `id` fields will be
 *  ignored.
 *  While Classroom may validate the `cloudPubSubTopic` and return errors on a
 *  best effort basis, it is the caller's responsibility to ensure that it
 *  exists and that Classroom has permission to publish to it.
 *  This method may return the following error codes:
 *  * `PERMISSION_DENIED` if:
 *  * the authenticated user does not have permission to receive
 *  notifications from the requested field; or
 *  * the credential provided does not include the appropriate scope for
 *  the requested feed.
 *  * another access error is encountered.
 *  * `INVALID_ARGUMENT` if:
 *  * no `cloudPubsubTopic` is specified, or the specified
 *  `cloudPubsubTopic` is not valid; or
 *  * no `feed` is specified, or the specified `feed` is not valid.
 *  * `NOT_FOUND` if:
 *  * the specified `feed` cannot be located, or the requesting user does
 *  not have permission to determine whether or not it exists; or
 *  * the specified `cloudPubsubTopic` cannot be located, or Classroom has
 *  not been granted permission to publish to it.
 *
 *  @param object The @c GTLRClassroom_Registration to include in the query.
 *
 *  @return GTLRClassroomQuery_RegistrationsCreate
 */
+ (instancetype)queryWithObject:(GTLRClassroom_Registration *)object;

@end

/**
 *  Deletes a `Registration`, causing Classroom to stop sending notifications
 *  for that `Registration`.
 *
 *  Method: classroom.registrations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomPushNotifications
 */
@interface GTLRClassroomQuery_RegistrationsDelete : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForRegistrationsDeleteWithregistrationId:]

/** The `registration_id` of the `Registration` to be deleted. */
@property(nonatomic, copy, nullable) NSString *registrationId;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Deletes a `Registration`, causing Classroom to stop sending notifications
 *  for that `Registration`.
 *
 *  @param registrationId The `registration_id` of the `Registration` to be
 *    deleted.
 *
 *  @return GTLRClassroomQuery_RegistrationsDelete
 */
+ (instancetype)queryWithRegistrationId:(NSString *)registrationId;

@end

/**
 *  Returns a user profile.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access
 *  this user profile, if no profile exists with the requested ID, or for
 *  access errors.
 *
 *  Method: classroom.userProfiles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomProfileEmails
 *    @c kGTLRAuthScopeClassroomProfilePhotos
 *    @c kGTLRAuthScopeClassroomRosters
 *    @c kGTLRAuthScopeClassroomRostersReadonly
 */
@interface GTLRClassroomQuery_UserProfilesGet : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForUserProfilesGetWithuserId:]

/**
 *  Identifier of the profile to return. The identifier can be one of the
 *  following:
 *  * the numeric identifier for the user
 *  * the email address of the user
 *  * the string literal `"me"`, indicating the requesting user
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRClassroom_UserProfile.
 *
 *  Returns a user profile.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to access
 *  this user profile, if no profile exists with the requested ID, or for
 *  access errors.
 *
 *  @param userId Identifier of the profile to return. The identifier can be one
 *    of the
 *    following:
 *    * the numeric identifier for the user
 *    * the email address of the user
 *    * the string literal `"me"`, indicating the requesting user
 *
 *  @return GTLRClassroomQuery_UserProfilesGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Creates a guardian invitation, and sends an email to the guardian asking
 *  them to confirm that they are the student's guardian.
 *  Once the guardian accepts the invitation, their `state` will change to
 *  `COMPLETED` and they will start receiving guardian notifications. A
 *  `Guardian` resource will also be created to represent the active guardian.
 *  The request object must have the `student_id` and
 *  `invited_email_address` fields set. Failing to set these fields, or
 *  setting any other fields in the request, will result in an error.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the current user does not have permission to
 *  manage guardians, if the guardian in question has already rejected
 *  too many requests for that student, if guardians are not enabled for the
 *  domain in question, or for other access errors.
 *  * `RESOURCE_EXHAUSTED` if the student or guardian has exceeded the guardian
 *  link limit.
 *  * `INVALID_ARGUMENT` if the guardian email address is not valid (for
 *  example, if it is too long), or if the format of the student ID provided
 *  cannot be recognized (it is not an email address, nor a `user_id` from
 *  this API). This error will also be returned if read-only fields are set,
 *  or if the `state` field is set to to a value other than `PENDING`.
 *  * `NOT_FOUND` if the student ID provided is a valid student ID, but
 *  Classroom has no record of that student.
 *  * `ALREADY_EXISTS` if there is already a pending guardian invitation for
 *  the student and `invited_email_address` provided, or if the provided
 *  `invited_email_address` matches the Google account of an existing
 *  `Guardian` for this user.
 *
 *  Method: classroom.userProfiles.guardianInvitations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomGuardianlinksStudents
 */
@interface GTLRClassroomQuery_UserProfilesGuardianInvitationsCreate : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForUserProfilesGuardianInvitationsCreateWithObject:studentId:]

/** ID of the student (in standard format) */
@property(nonatomic, copy, nullable) NSString *studentId;

/**
 *  Fetches a @c GTLRClassroom_GuardianInvitation.
 *
 *  Creates a guardian invitation, and sends an email to the guardian asking
 *  them to confirm that they are the student's guardian.
 *  Once the guardian accepts the invitation, their `state` will change to
 *  `COMPLETED` and they will start receiving guardian notifications. A
 *  `Guardian` resource will also be created to represent the active guardian.
 *  The request object must have the `student_id` and
 *  `invited_email_address` fields set. Failing to set these fields, or
 *  setting any other fields in the request, will result in an error.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the current user does not have permission to
 *  manage guardians, if the guardian in question has already rejected
 *  too many requests for that student, if guardians are not enabled for the
 *  domain in question, or for other access errors.
 *  * `RESOURCE_EXHAUSTED` if the student or guardian has exceeded the guardian
 *  link limit.
 *  * `INVALID_ARGUMENT` if the guardian email address is not valid (for
 *  example, if it is too long), or if the format of the student ID provided
 *  cannot be recognized (it is not an email address, nor a `user_id` from
 *  this API). This error will also be returned if read-only fields are set,
 *  or if the `state` field is set to to a value other than `PENDING`.
 *  * `NOT_FOUND` if the student ID provided is a valid student ID, but
 *  Classroom has no record of that student.
 *  * `ALREADY_EXISTS` if there is already a pending guardian invitation for
 *  the student and `invited_email_address` provided, or if the provided
 *  `invited_email_address` matches the Google account of an existing
 *  `Guardian` for this user.
 *
 *  @param object The @c GTLRClassroom_GuardianInvitation to include in the
 *    query.
 *  @param studentId ID of the student (in standard format)
 *
 *  @return GTLRClassroomQuery_UserProfilesGuardianInvitationsCreate
 */
+ (instancetype)queryWithObject:(GTLRClassroom_GuardianInvitation *)object
                      studentId:(NSString *)studentId;

@end

/**
 *  Returns a specific guardian invitation.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to view
 *  guardian invitations for the student identified by the `student_id`, if
 *  guardians are not enabled for the domain in question, or for other
 *  access errors.
 *  * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot
 *  be recognized (it is not an email address, nor a `student_id` from the
 *  API, nor the literal string `me`).
 *  * `NOT_FOUND` if Classroom cannot find any record of the given student or
 *  `invitation_id`. May also be returned if the student exists, but the
 *  requesting user does not have access to see that student.
 *
 *  Method: classroom.userProfiles.guardianInvitations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomGuardianlinksStudents
 *    @c kGTLRAuthScopeClassroomGuardianlinksStudentsReadonly
 */
@interface GTLRClassroomQuery_UserProfilesGuardianInvitationsGet : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForUserProfilesGuardianInvitationsGetWithstudentId:invitationId:]

/** The `id` field of the `GuardianInvitation` being requested. */
@property(nonatomic, copy, nullable) NSString *invitationId;

/** The ID of the student whose guardian invitation is being requested. */
@property(nonatomic, copy, nullable) NSString *studentId;

/**
 *  Fetches a @c GTLRClassroom_GuardianInvitation.
 *
 *  Returns a specific guardian invitation.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the requesting user is not permitted to view
 *  guardian invitations for the student identified by the `student_id`, if
 *  guardians are not enabled for the domain in question, or for other
 *  access errors.
 *  * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot
 *  be recognized (it is not an email address, nor a `student_id` from the
 *  API, nor the literal string `me`).
 *  * `NOT_FOUND` if Classroom cannot find any record of the given student or
 *  `invitation_id`. May also be returned if the student exists, but the
 *  requesting user does not have access to see that student.
 *
 *  @param studentId The ID of the student whose guardian invitation is being
 *    requested.
 *  @param invitationId The `id` field of the `GuardianInvitation` being
 *    requested.
 *
 *  @return GTLRClassroomQuery_UserProfilesGuardianInvitationsGet
 */
+ (instancetype)queryWithStudentId:(NSString *)studentId
                      invitationId:(NSString *)invitationId;

@end

/**
 *  Returns a list of guardian invitations that the requesting user is
 *  permitted to view, filtered by the parameters provided.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting
 *  user is not permitted to view guardian invitations for that student, if
 *  `"-"` is specified as the `student_id` and the user is not a domain
 *  administrator, if guardians are not enabled for the domain in question,
 *  or for other access errors.
 *  * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot
 *  be recognized (it is not an email address, nor a `student_id` from the
 *  API, nor the literal string `me`). May also be returned if an invalid
 *  `page_token` or `state` is provided.
 *  * `NOT_FOUND` if a `student_id` is specified, and its format can be
 *  recognized, but Classroom has no record of that student.
 *
 *  Method: classroom.userProfiles.guardianInvitations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomGuardianlinksStudents
 *    @c kGTLRAuthScopeClassroomGuardianlinksStudentsReadonly
 */
@interface GTLRClassroomQuery_UserProfilesGuardianInvitationsList : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForUserProfilesGuardianInvitationsListWithstudentId:]

/**
 *  If specified, only results with the specified `invited_email_address`
 *  will be returned.
 */
@property(nonatomic, copy, nullable) NSString *invitedEmailAddress;

/**
 *  Maximum number of items to return. Zero or unspecified indicates that the
 *  server may assign a maximum.
 *  The server may return fewer than the specified number of results.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  nextPageToken
 *  value returned from a previous
 *  list call,
 *  indicating that the subsequent page of results should be returned.
 *  The list request
 *  must be otherwise identical to the one that resulted in this token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  If specified, only results with the specified `state` values will be
 *  returned. Otherwise, results with a `state` of `PENDING` will be returned.
 *
 *  Likely values:
 *    @arg @c kGTLRClassroomStatesGuardianInvitationStateUnspecified Value
 *        "GUARDIAN_INVITATION_STATE_UNSPECIFIED"
 *    @arg @c kGTLRClassroomStatesPending Value "PENDING"
 *    @arg @c kGTLRClassroomStatesComplete Value "COMPLETE"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *states;

/**
 *  The ID of the student whose guardian invitations are to be returned.
 *  The identifier can be one of the following:
 *  * the numeric identifier for the user
 *  * the email address of the user
 *  * the string literal `"me"`, indicating the requesting user
 *  * the string literal `"-"`, indicating that results should be returned for
 *  all students that the requesting user is permitted to view guardian
 *  invitations.
 */
@property(nonatomic, copy, nullable) NSString *studentId;

/**
 *  Fetches a @c GTLRClassroom_ListGuardianInvitationsResponse.
 *
 *  Returns a list of guardian invitations that the requesting user is
 *  permitted to view, filtered by the parameters provided.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting
 *  user is not permitted to view guardian invitations for that student, if
 *  `"-"` is specified as the `student_id` and the user is not a domain
 *  administrator, if guardians are not enabled for the domain in question,
 *  or for other access errors.
 *  * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot
 *  be recognized (it is not an email address, nor a `student_id` from the
 *  API, nor the literal string `me`). May also be returned if an invalid
 *  `page_token` or `state` is provided.
 *  * `NOT_FOUND` if a `student_id` is specified, and its format can be
 *  recognized, but Classroom has no record of that student.
 *
 *  @param studentId The ID of the student whose guardian invitations are to be
 *    returned.
 *    The identifier can be one of the following:
 *    * the numeric identifier for the user
 *    * the email address of the user
 *    * the string literal `"me"`, indicating the requesting user
 *    * the string literal `"-"`, indicating that results should be returned for
 *    all students that the requesting user is permitted to view guardian
 *    invitations.
 *
 *  @return GTLRClassroomQuery_UserProfilesGuardianInvitationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithStudentId:(NSString *)studentId;

@end

/**
 *  Modifies a guardian invitation.
 *  Currently, the only valid modification is to change the `state` from
 *  `PENDING` to `COMPLETE`. This has the effect of withdrawing the invitation.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the current user does not have permission to
 *  manage guardians, if guardians are not enabled for the domain in question
 *  or for other access errors.
 *  * `FAILED_PRECONDITION` if the guardian link is not in the `PENDING` state.
 *  * `INVALID_ARGUMENT` if the format of the student ID provided
 *  cannot be recognized (it is not an email address, nor a `user_id` from
 *  this API), or if the passed `GuardianInvitation` has a `state` other than
 *  `COMPLETE`, or if it modifies fields other than `state`.
 *  * `NOT_FOUND` if the student ID provided is a valid student ID, but
 *  Classroom has no record of that student, or if the `id` field does not
 *  refer to a guardian invitation known to Classroom.
 *
 *  Method: classroom.userProfiles.guardianInvitations.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomGuardianlinksStudents
 */
@interface GTLRClassroomQuery_UserProfilesGuardianInvitationsPatch : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForUserProfilesGuardianInvitationsPatchWithObject:studentId:invitationId:]

/** The `id` field of the `GuardianInvitation` to be modified. */
@property(nonatomic, copy, nullable) NSString *invitationId;

/** The ID of the student whose guardian invitation is to be modified. */
@property(nonatomic, copy, nullable) NSString *studentId;

/**
 *  Mask that identifies which fields on the course to update.
 *  This field is required to do an update. The update will fail if invalid
 *  fields are specified. The following fields are valid:
 *  * `state`
 *  When set in a query parameter, this field should be specified as
 *  `updateMask=<field1>,<field2>,...`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRClassroom_GuardianInvitation.
 *
 *  Modifies a guardian invitation.
 *  Currently, the only valid modification is to change the `state` from
 *  `PENDING` to `COMPLETE`. This has the effect of withdrawing the invitation.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if the current user does not have permission to
 *  manage guardians, if guardians are not enabled for the domain in question
 *  or for other access errors.
 *  * `FAILED_PRECONDITION` if the guardian link is not in the `PENDING` state.
 *  * `INVALID_ARGUMENT` if the format of the student ID provided
 *  cannot be recognized (it is not an email address, nor a `user_id` from
 *  this API), or if the passed `GuardianInvitation` has a `state` other than
 *  `COMPLETE`, or if it modifies fields other than `state`.
 *  * `NOT_FOUND` if the student ID provided is a valid student ID, but
 *  Classroom has no record of that student, or if the `id` field does not
 *  refer to a guardian invitation known to Classroom.
 *
 *  @param object The @c GTLRClassroom_GuardianInvitation to include in the
 *    query.
 *  @param studentId The ID of the student whose guardian invitation is to be
 *    modified.
 *  @param invitationId The `id` field of the `GuardianInvitation` to be
 *    modified.
 *
 *  @return GTLRClassroomQuery_UserProfilesGuardianInvitationsPatch
 */
+ (instancetype)queryWithObject:(GTLRClassroom_GuardianInvitation *)object
                      studentId:(NSString *)studentId
                   invitationId:(NSString *)invitationId;

@end

/**
 *  Deletes a guardian.
 *  The guardian will no longer receive guardian notifications and the guardian
 *  will no longer be accessible via the API.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if no user that matches the provided `student_id`
 *  is visible to the requesting user, if the requesting user is not
 *  permitted to manage guardians for the student identified by the
 *  `student_id`, if guardians are not enabled for the domain in question,
 *  or for other access errors.
 *  * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot
 *  be recognized (it is not an email address, nor a `student_id` from the
 *  API).
 *  * `NOT_FOUND` if the requesting user is permitted to modify guardians for
 *  the requested `student_id`, but no `Guardian` record exists for that
 *  student with the provided `guardian_id`.
 *
 *  Method: classroom.userProfiles.guardians.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomGuardianlinksStudents
 */
@interface GTLRClassroomQuery_UserProfilesGuardiansDelete : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForUserProfilesGuardiansDeleteWithstudentId:guardianId:]

/** The `id` field from a `Guardian`. */
@property(nonatomic, copy, nullable) NSString *guardianId;

/**
 *  The student whose guardian is to be deleted. One of the following:
 *  * the numeric identifier for the user
 *  * the email address of the user
 *  * the string literal `"me"`, indicating the requesting user
 */
@property(nonatomic, copy, nullable) NSString *studentId;

/**
 *  Fetches a @c GTLRClassroom_Empty.
 *
 *  Deletes a guardian.
 *  The guardian will no longer receive guardian notifications and the guardian
 *  will no longer be accessible via the API.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if no user that matches the provided `student_id`
 *  is visible to the requesting user, if the requesting user is not
 *  permitted to manage guardians for the student identified by the
 *  `student_id`, if guardians are not enabled for the domain in question,
 *  or for other access errors.
 *  * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot
 *  be recognized (it is not an email address, nor a `student_id` from the
 *  API).
 *  * `NOT_FOUND` if the requesting user is permitted to modify guardians for
 *  the requested `student_id`, but no `Guardian` record exists for that
 *  student with the provided `guardian_id`.
 *
 *  @param studentId The student whose guardian is to be deleted. One of the
 *    following:
 *    * the numeric identifier for the user
 *    * the email address of the user
 *    * the string literal `"me"`, indicating the requesting user
 *  @param guardianId The `id` field from a `Guardian`.
 *
 *  @return GTLRClassroomQuery_UserProfilesGuardiansDelete
 */
+ (instancetype)queryWithStudentId:(NSString *)studentId
                        guardianId:(NSString *)guardianId;

@end

/**
 *  Returns a specific guardian.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if no user that matches the provided `student_id`
 *  is visible to the requesting user, if the requesting user is not
 *  permitted to view guardian information for the student identified by the
 *  `student_id`, if guardians are not enabled for the domain in question,
 *  or for other access errors.
 *  * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot
 *  be recognized (it is not an email address, nor a `student_id` from the
 *  API, nor the literal string `me`).
 *  * `NOT_FOUND` if the requesting user is permitted to view guardians for
 *  the requested `student_id`, but no `Guardian` record exists for that
 *  student that matches the provided `guardian_id`.
 *
 *  Method: classroom.userProfiles.guardians.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomGuardianlinksMeReadonly
 *    @c kGTLRAuthScopeClassroomGuardianlinksStudents
 *    @c kGTLRAuthScopeClassroomGuardianlinksStudentsReadonly
 */
@interface GTLRClassroomQuery_UserProfilesGuardiansGet : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForUserProfilesGuardiansGetWithstudentId:guardianId:]

/** The `id` field from a `Guardian`. */
@property(nonatomic, copy, nullable) NSString *guardianId;

/**
 *  The student whose guardian is being requested. One of the following:
 *  * the numeric identifier for the user
 *  * the email address of the user
 *  * the string literal `"me"`, indicating the requesting user
 */
@property(nonatomic, copy, nullable) NSString *studentId;

/**
 *  Fetches a @c GTLRClassroom_Guardian.
 *
 *  Returns a specific guardian.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if no user that matches the provided `student_id`
 *  is visible to the requesting user, if the requesting user is not
 *  permitted to view guardian information for the student identified by the
 *  `student_id`, if guardians are not enabled for the domain in question,
 *  or for other access errors.
 *  * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot
 *  be recognized (it is not an email address, nor a `student_id` from the
 *  API, nor the literal string `me`).
 *  * `NOT_FOUND` if the requesting user is permitted to view guardians for
 *  the requested `student_id`, but no `Guardian` record exists for that
 *  student that matches the provided `guardian_id`.
 *
 *  @param studentId The student whose guardian is being requested. One of the
 *    following:
 *    * the numeric identifier for the user
 *    * the email address of the user
 *    * the string literal `"me"`, indicating the requesting user
 *  @param guardianId The `id` field from a `Guardian`.
 *
 *  @return GTLRClassroomQuery_UserProfilesGuardiansGet
 */
+ (instancetype)queryWithStudentId:(NSString *)studentId
                        guardianId:(NSString *)guardianId;

@end

/**
 *  Returns a list of guardians that the requesting user is permitted to
 *  view, restricted to those that match the request.
 *  To list guardians for any student that the requesting user may view
 *  guardians for, use the literal character `-` for the student ID.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting
 *  user is not permitted to view guardian information for that student, if
 *  `"-"` is specified as the `student_id` and the user is not a domain
 *  administrator, if guardians are not enabled for the domain in question,
 *  if the `invited_email_address` filter is set by a user who is not a
 *  domain administrator, or for other access errors.
 *  * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot
 *  be recognized (it is not an email address, nor a `student_id` from the
 *  API, nor the literal string `me`). May also be returned if an invalid
 *  `page_token` is provided.
 *  * `NOT_FOUND` if a `student_id` is specified, and its format can be
 *  recognized, but Classroom has no record of that student.
 *
 *  Method: classroom.userProfiles.guardians.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeClassroomGuardianlinksMeReadonly
 *    @c kGTLRAuthScopeClassroomGuardianlinksStudents
 *    @c kGTLRAuthScopeClassroomGuardianlinksStudentsReadonly
 */
@interface GTLRClassroomQuery_UserProfilesGuardiansList : GTLRClassroomQuery
// Previous library name was
//   +[GTLQueryClassroom queryForUserProfilesGuardiansListWithstudentId:]

/**
 *  Filter results by the email address that the original invitation was sent
 *  to, resulting in this guardian link.
 *  This filter can only be used by domain administrators.
 */
@property(nonatomic, copy, nullable) NSString *invitedEmailAddress;

/**
 *  Maximum number of items to return. Zero or unspecified indicates that the
 *  server may assign a maximum.
 *  The server may return fewer than the specified number of results.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  nextPageToken
 *  value returned from a previous
 *  list call,
 *  indicating that the subsequent page of results should be returned.
 *  The list request
 *  must be otherwise identical to the one that resulted in this token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Filter results by the student who the guardian is linked to.
 *  The identifier can be one of the following:
 *  * the numeric identifier for the user
 *  * the email address of the user
 *  * the string literal `"me"`, indicating the requesting user
 *  * the string literal `"-"`, indicating that results should be returned for
 *  all students that the requesting user has access to view.
 */
@property(nonatomic, copy, nullable) NSString *studentId;

/**
 *  Fetches a @c GTLRClassroom_ListGuardiansResponse.
 *
 *  Returns a list of guardians that the requesting user is permitted to
 *  view, restricted to those that match the request.
 *  To list guardians for any student that the requesting user may view
 *  guardians for, use the literal character `-` for the student ID.
 *  This method returns the following error codes:
 *  * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting
 *  user is not permitted to view guardian information for that student, if
 *  `"-"` is specified as the `student_id` and the user is not a domain
 *  administrator, if guardians are not enabled for the domain in question,
 *  if the `invited_email_address` filter is set by a user who is not a
 *  domain administrator, or for other access errors.
 *  * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot
 *  be recognized (it is not an email address, nor a `student_id` from the
 *  API, nor the literal string `me`). May also be returned if an invalid
 *  `page_token` is provided.
 *  * `NOT_FOUND` if a `student_id` is specified, and its format can be
 *  recognized, but Classroom has no record of that student.
 *
 *  @param studentId Filter results by the student who the guardian is linked
 *    to.
 *    The identifier can be one of the following:
 *    * the numeric identifier for the user
 *    * the email address of the user
 *    * the string literal `"me"`, indicating the requesting user
 *    * the string literal `"-"`, indicating that results should be returned for
 *    all students that the requesting user has access to view.
 *
 *  @return GTLRClassroomQuery_UserProfilesGuardiansList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithStudentId:(NSString *)studentId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
