// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Classroom API (classroom/v1)
// Description:
//   Manages classes, rosters, and invitations in Google Classroom.
// Documentation:
//   https://developers.google.com/classroom/

#import "GTLRClassroomQuery.h"

#import "GTLRClassroomObjects.h"

// ----------------------------------------------------------------------------
// Constants

// announcementStates
NSString * const kGTLRClassroomAnnouncementStatesAnnouncementStateUnspecified = @"ANNOUNCEMENT_STATE_UNSPECIFIED";
NSString * const kGTLRClassroomAnnouncementStatesDeleted       = @"DELETED";
NSString * const kGTLRClassroomAnnouncementStatesDraft         = @"DRAFT";
NSString * const kGTLRClassroomAnnouncementStatesPublished     = @"PUBLISHED";

// courseStates
NSString * const kGTLRClassroomCourseStatesActive              = @"ACTIVE";
NSString * const kGTLRClassroomCourseStatesArchived            = @"ARCHIVED";
NSString * const kGTLRClassroomCourseStatesCourseStateUnspecified = @"COURSE_STATE_UNSPECIFIED";
NSString * const kGTLRClassroomCourseStatesDeclined            = @"DECLINED";
NSString * const kGTLRClassroomCourseStatesProvisioned         = @"PROVISIONED";
NSString * const kGTLRClassroomCourseStatesSuspended           = @"SUSPENDED";

// courseWorkStates
NSString * const kGTLRClassroomCourseWorkStatesCourseWorkStateUnspecified = @"COURSE_WORK_STATE_UNSPECIFIED";
NSString * const kGTLRClassroomCourseWorkStatesDeleted         = @"DELETED";
NSString * const kGTLRClassroomCourseWorkStatesDraft           = @"DRAFT";
NSString * const kGTLRClassroomCourseWorkStatesPublished       = @"PUBLISHED";

// late
NSString * const kGTLRClassroomLateLateOnly              = @"LATE_ONLY";
NSString * const kGTLRClassroomLateLateValuesUnspecified = @"LATE_VALUES_UNSPECIFIED";
NSString * const kGTLRClassroomLateNotLateOnly           = @"NOT_LATE_ONLY";

// states
NSString * const kGTLRClassroomStatesComplete                  = @"COMPLETE";
NSString * const kGTLRClassroomStatesCreated                   = @"CREATED";
NSString * const kGTLRClassroomStatesGuardianInvitationStateUnspecified = @"GUARDIAN_INVITATION_STATE_UNSPECIFIED";
NSString * const kGTLRClassroomStatesNew                       = @"NEW";
NSString * const kGTLRClassroomStatesPending                   = @"PENDING";
NSString * const kGTLRClassroomStatesReclaimedByStudent        = @"RECLAIMED_BY_STUDENT";
NSString * const kGTLRClassroomStatesReturned                  = @"RETURNED";
NSString * const kGTLRClassroomStatesSubmissionStateUnspecified = @"SUBMISSION_STATE_UNSPECIFIED";
NSString * const kGTLRClassroomStatesTurnedIn                  = @"TURNED_IN";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRClassroomQuery

@dynamic fields;

@end

@implementation GTLRClassroomQuery_CoursesAliasesCreate

@dynamic courseId;

+ (instancetype)queryWithObject:(GTLRClassroom_CourseAlias *)object
                       courseId:(NSString *)courseId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"courseId" ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/aliases";
  GTLRClassroomQuery_CoursesAliasesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.expectedObjectClass = [GTLRClassroom_CourseAlias class];
  query.loggingName = @"classroom.courses.aliases.create";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesAliasesDelete

@dynamic alias, courseId;

+ (instancetype)queryWithCourseId:(NSString *)courseId
                            alias:(NSString *)alias {
  NSArray *pathParams = @[
    @"alias", @"courseId"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/aliases/{alias}";
  GTLRClassroomQuery_CoursesAliasesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.alias = alias;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.courses.aliases.delete";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesAliasesList

@dynamic courseId, pageSize, pageToken;

+ (instancetype)queryWithCourseId:(NSString *)courseId {
  NSArray *pathParams = @[ @"courseId" ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/aliases";
  GTLRClassroomQuery_CoursesAliasesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.expectedObjectClass = [GTLRClassroom_ListCourseAliasesResponse class];
  query.loggingName = @"classroom.courses.aliases.list";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesAnnouncementsCreate

@dynamic courseId;

+ (instancetype)queryWithObject:(GTLRClassroom_Announcement *)object
                       courseId:(NSString *)courseId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"courseId" ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/announcements";
  GTLRClassroomQuery_CoursesAnnouncementsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.expectedObjectClass = [GTLRClassroom_Announcement class];
  query.loggingName = @"classroom.courses.announcements.create";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesAnnouncementsDelete

@dynamic courseId, identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithCourseId:(NSString *)courseId
                       identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"courseId", @"id"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/announcements/{id}";
  GTLRClassroomQuery_CoursesAnnouncementsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.courses.announcements.delete";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesAnnouncementsGet

@dynamic courseId, identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithCourseId:(NSString *)courseId
                       identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"courseId", @"id"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/announcements/{id}";
  GTLRClassroomQuery_CoursesAnnouncementsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Announcement class];
  query.loggingName = @"classroom.courses.announcements.get";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesAnnouncementsList

@dynamic announcementStates, courseId, orderBy, pageSize, pageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"announcementStates" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithCourseId:(NSString *)courseId {
  NSArray *pathParams = @[ @"courseId" ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/announcements";
  GTLRClassroomQuery_CoursesAnnouncementsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.expectedObjectClass = [GTLRClassroom_ListAnnouncementsResponse class];
  query.loggingName = @"classroom.courses.announcements.list";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesAnnouncementsModifyAssignees

@dynamic courseId, identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRClassroom_ModifyAnnouncementAssigneesRequest *)object
                       courseId:(NSString *)courseId
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"courseId", @"id"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/announcements/{id}:modifyAssignees";
  GTLRClassroomQuery_CoursesAnnouncementsModifyAssignees *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Announcement class];
  query.loggingName = @"classroom.courses.announcements.modifyAssignees";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesAnnouncementsPatch

@dynamic courseId, identifier, updateMask;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRClassroom_Announcement *)object
                       courseId:(NSString *)courseId
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"courseId", @"id"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/announcements/{id}";
  GTLRClassroomQuery_CoursesAnnouncementsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Announcement class];
  query.loggingName = @"classroom.courses.announcements.patch";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesCourseWorkCreate

@dynamic courseId;

+ (instancetype)queryWithObject:(GTLRClassroom_CourseWork *)object
                       courseId:(NSString *)courseId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"courseId" ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/courseWork";
  GTLRClassroomQuery_CoursesCourseWorkCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.expectedObjectClass = [GTLRClassroom_CourseWork class];
  query.loggingName = @"classroom.courses.courseWork.create";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesCourseWorkDelete

@dynamic courseId, identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithCourseId:(NSString *)courseId
                       identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"courseId", @"id"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/courseWork/{id}";
  GTLRClassroomQuery_CoursesCourseWorkDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.courses.courseWork.delete";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesCourseWorkGet

@dynamic courseId, identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithCourseId:(NSString *)courseId
                       identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"courseId", @"id"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/courseWork/{id}";
  GTLRClassroomQuery_CoursesCourseWorkGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_CourseWork class];
  query.loggingName = @"classroom.courses.courseWork.get";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesCourseWorkList

@dynamic courseId, courseWorkStates, orderBy, pageSize, pageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"courseWorkStates" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithCourseId:(NSString *)courseId {
  NSArray *pathParams = @[ @"courseId" ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/courseWork";
  GTLRClassroomQuery_CoursesCourseWorkList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.expectedObjectClass = [GTLRClassroom_ListCourseWorkResponse class];
  query.loggingName = @"classroom.courses.courseWork.list";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesCourseWorkModifyAssignees

@dynamic courseId, identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRClassroom_ModifyCourseWorkAssigneesRequest *)object
                       courseId:(NSString *)courseId
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"courseId", @"id"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/courseWork/{id}:modifyAssignees";
  GTLRClassroomQuery_CoursesCourseWorkModifyAssignees *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_CourseWork class];
  query.loggingName = @"classroom.courses.courseWork.modifyAssignees";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesCourseWorkPatch

@dynamic courseId, identifier, updateMask;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRClassroom_CourseWork *)object
                       courseId:(NSString *)courseId
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"courseId", @"id"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/courseWork/{id}";
  GTLRClassroomQuery_CoursesCourseWorkPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_CourseWork class];
  query.loggingName = @"classroom.courses.courseWork.patch";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsGet

@dynamic courseId, courseWorkId, identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithCourseId:(NSString *)courseId
                     courseWorkId:(NSString *)courseWorkId
                       identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"courseId", @"courseWorkId", @"id"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}";
  GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.courseWorkId = courseWorkId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_StudentSubmission class];
  query.loggingName = @"classroom.courses.courseWork.studentSubmissions.get";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsList

@dynamic courseId, courseWorkId, late, pageSize, pageToken, states, userId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"states" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithCourseId:(NSString *)courseId
                     courseWorkId:(NSString *)courseWorkId {
  NSArray *pathParams = @[
    @"courseId", @"courseWorkId"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions";
  GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.courseWorkId = courseWorkId;
  query.expectedObjectClass = [GTLRClassroom_ListStudentSubmissionsResponse class];
  query.loggingName = @"classroom.courses.courseWork.studentSubmissions.list";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsModifyAttachments

@dynamic courseId, courseWorkId, identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRClassroom_ModifyAttachmentsRequest *)object
                       courseId:(NSString *)courseId
                   courseWorkId:(NSString *)courseWorkId
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"courseId", @"courseWorkId", @"id"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:modifyAttachments";
  GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsModifyAttachments *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.courseWorkId = courseWorkId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_StudentSubmission class];
  query.loggingName = @"classroom.courses.courseWork.studentSubmissions.modifyAttachments";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsPatch

@dynamic courseId, courseWorkId, identifier, updateMask;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRClassroom_StudentSubmission *)object
                       courseId:(NSString *)courseId
                   courseWorkId:(NSString *)courseWorkId
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"courseId", @"courseWorkId", @"id"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}";
  GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.courseWorkId = courseWorkId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_StudentSubmission class];
  query.loggingName = @"classroom.courses.courseWork.studentSubmissions.patch";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsReclaim

@dynamic courseId, courseWorkId, identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRClassroom_ReclaimStudentSubmissionRequest *)object
                       courseId:(NSString *)courseId
                   courseWorkId:(NSString *)courseWorkId
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"courseId", @"courseWorkId", @"id"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:reclaim";
  GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsReclaim *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.courseWorkId = courseWorkId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.courses.courseWork.studentSubmissions.reclaim";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsReturn

@dynamic courseId, courseWorkId, identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRClassroom_ReturnStudentSubmissionRequest *)object
                       courseId:(NSString *)courseId
                   courseWorkId:(NSString *)courseWorkId
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"courseId", @"courseWorkId", @"id"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:return";
  GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsReturn *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.courseWorkId = courseWorkId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.courses.courseWork.studentSubmissions.return";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsTurnIn

@dynamic courseId, courseWorkId, identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRClassroom_TurnInStudentSubmissionRequest *)object
                       courseId:(NSString *)courseId
                   courseWorkId:(NSString *)courseWorkId
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"courseId", @"courseWorkId", @"id"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:turnIn";
  GTLRClassroomQuery_CoursesCourseWorkStudentSubmissionsTurnIn *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.courseWorkId = courseWorkId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.courses.courseWork.studentSubmissions.turnIn";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesCreate

+ (instancetype)queryWithObject:(GTLRClassroom_Course *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/courses";
  GTLRClassroomQuery_CoursesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRClassroom_Course class];
  query.loggingName = @"classroom.courses.create";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesDelete

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"v1/courses/{id}";
  GTLRClassroomQuery_CoursesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.courses.delete";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesGet

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"v1/courses/{id}";
  GTLRClassroomQuery_CoursesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Course class];
  query.loggingName = @"classroom.courses.get";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesList

@dynamic courseStates, pageSize, pageToken, studentId, teacherId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"courseStates" : [NSString class]
  };
  return map;
}

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/courses";
  GTLRClassroomQuery_CoursesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRClassroom_ListCoursesResponse class];
  query.loggingName = @"classroom.courses.list";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesPatch

@dynamic identifier, updateMask;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRClassroom_Course *)object
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"v1/courses/{id}";
  GTLRClassroomQuery_CoursesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Course class];
  query.loggingName = @"classroom.courses.patch";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesStudentsCreate

@dynamic courseId, enrollmentCode;

+ (instancetype)queryWithObject:(GTLRClassroom_Student *)object
                       courseId:(NSString *)courseId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"courseId" ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/students";
  GTLRClassroomQuery_CoursesStudentsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.expectedObjectClass = [GTLRClassroom_Student class];
  query.loggingName = @"classroom.courses.students.create";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesStudentsDelete

@dynamic courseId, userId;

+ (instancetype)queryWithCourseId:(NSString *)courseId
                           userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"courseId", @"userId"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/students/{userId}";
  GTLRClassroomQuery_CoursesStudentsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.courses.students.delete";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesStudentsGet

@dynamic courseId, userId;

+ (instancetype)queryWithCourseId:(NSString *)courseId
                           userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"courseId", @"userId"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/students/{userId}";
  GTLRClassroomQuery_CoursesStudentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRClassroom_Student class];
  query.loggingName = @"classroom.courses.students.get";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesStudentsList

@dynamic courseId, pageSize, pageToken;

+ (instancetype)queryWithCourseId:(NSString *)courseId {
  NSArray *pathParams = @[ @"courseId" ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/students";
  GTLRClassroomQuery_CoursesStudentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.expectedObjectClass = [GTLRClassroom_ListStudentsResponse class];
  query.loggingName = @"classroom.courses.students.list";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesTeachersCreate

@dynamic courseId;

+ (instancetype)queryWithObject:(GTLRClassroom_Teacher *)object
                       courseId:(NSString *)courseId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"courseId" ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/teachers";
  GTLRClassroomQuery_CoursesTeachersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.courseId = courseId;
  query.expectedObjectClass = [GTLRClassroom_Teacher class];
  query.loggingName = @"classroom.courses.teachers.create";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesTeachersDelete

@dynamic courseId, userId;

+ (instancetype)queryWithCourseId:(NSString *)courseId
                           userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"courseId", @"userId"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/teachers/{userId}";
  GTLRClassroomQuery_CoursesTeachersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.courses.teachers.delete";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesTeachersGet

@dynamic courseId, userId;

+ (instancetype)queryWithCourseId:(NSString *)courseId
                           userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"courseId", @"userId"
  ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/teachers/{userId}";
  GTLRClassroomQuery_CoursesTeachersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRClassroom_Teacher class];
  query.loggingName = @"classroom.courses.teachers.get";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesTeachersList

@dynamic courseId, pageSize, pageToken;

+ (instancetype)queryWithCourseId:(NSString *)courseId {
  NSArray *pathParams = @[ @"courseId" ];
  NSString *pathURITemplate = @"v1/courses/{courseId}/teachers";
  GTLRClassroomQuery_CoursesTeachersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.courseId = courseId;
  query.expectedObjectClass = [GTLRClassroom_ListTeachersResponse class];
  query.loggingName = @"classroom.courses.teachers.list";
  return query;
}

@end

@implementation GTLRClassroomQuery_CoursesUpdate

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRClassroom_Course *)object
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"v1/courses/{id}";
  GTLRClassroomQuery_CoursesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Course class];
  query.loggingName = @"classroom.courses.update";
  return query;
}

@end

@implementation GTLRClassroomQuery_InvitationsAccept

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"v1/invitations/{id}:accept";
  GTLRClassroomQuery_InvitationsAccept *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.invitations.accept";
  return query;
}

@end

@implementation GTLRClassroomQuery_InvitationsCreate

+ (instancetype)queryWithObject:(GTLRClassroom_Invitation *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/invitations";
  GTLRClassroomQuery_InvitationsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRClassroom_Invitation class];
  query.loggingName = @"classroom.invitations.create";
  return query;
}

@end

@implementation GTLRClassroomQuery_InvitationsDelete

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"v1/invitations/{id}";
  GTLRClassroomQuery_InvitationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.invitations.delete";
  return query;
}

@end

@implementation GTLRClassroomQuery_InvitationsGet

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"v1/invitations/{id}";
  GTLRClassroomQuery_InvitationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRClassroom_Invitation class];
  query.loggingName = @"classroom.invitations.get";
  return query;
}

@end

@implementation GTLRClassroomQuery_InvitationsList

@dynamic courseId, pageSize, pageToken, userId;

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/invitations";
  GTLRClassroomQuery_InvitationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRClassroom_ListInvitationsResponse class];
  query.loggingName = @"classroom.invitations.list";
  return query;
}

@end

@implementation GTLRClassroomQuery_RegistrationsCreate

+ (instancetype)queryWithObject:(GTLRClassroom_Registration *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/registrations";
  GTLRClassroomQuery_RegistrationsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRClassroom_Registration class];
  query.loggingName = @"classroom.registrations.create";
  return query;
}

@end

@implementation GTLRClassroomQuery_RegistrationsDelete

@dynamic registrationId;

+ (instancetype)queryWithRegistrationId:(NSString *)registrationId {
  NSArray *pathParams = @[ @"registrationId" ];
  NSString *pathURITemplate = @"v1/registrations/{registrationId}";
  GTLRClassroomQuery_RegistrationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.registrationId = registrationId;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.registrations.delete";
  return query;
}

@end

@implementation GTLRClassroomQuery_UserProfilesGet

@dynamic userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"v1/userProfiles/{userId}";
  GTLRClassroomQuery_UserProfilesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRClassroom_UserProfile class];
  query.loggingName = @"classroom.userProfiles.get";
  return query;
}

@end

@implementation GTLRClassroomQuery_UserProfilesGuardianInvitationsCreate

@dynamic studentId;

+ (instancetype)queryWithObject:(GTLRClassroom_GuardianInvitation *)object
                      studentId:(NSString *)studentId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"studentId" ];
  NSString *pathURITemplate = @"v1/userProfiles/{studentId}/guardianInvitations";
  GTLRClassroomQuery_UserProfilesGuardianInvitationsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.studentId = studentId;
  query.expectedObjectClass = [GTLRClassroom_GuardianInvitation class];
  query.loggingName = @"classroom.userProfiles.guardianInvitations.create";
  return query;
}

@end

@implementation GTLRClassroomQuery_UserProfilesGuardianInvitationsGet

@dynamic invitationId, studentId;

+ (instancetype)queryWithStudentId:(NSString *)studentId
                      invitationId:(NSString *)invitationId {
  NSArray *pathParams = @[
    @"invitationId", @"studentId"
  ];
  NSString *pathURITemplate = @"v1/userProfiles/{studentId}/guardianInvitations/{invitationId}";
  GTLRClassroomQuery_UserProfilesGuardianInvitationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.studentId = studentId;
  query.invitationId = invitationId;
  query.expectedObjectClass = [GTLRClassroom_GuardianInvitation class];
  query.loggingName = @"classroom.userProfiles.guardianInvitations.get";
  return query;
}

@end

@implementation GTLRClassroomQuery_UserProfilesGuardianInvitationsList

@dynamic invitedEmailAddress, pageSize, pageToken, states, studentId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"states" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithStudentId:(NSString *)studentId {
  NSArray *pathParams = @[ @"studentId" ];
  NSString *pathURITemplate = @"v1/userProfiles/{studentId}/guardianInvitations";
  GTLRClassroomQuery_UserProfilesGuardianInvitationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.studentId = studentId;
  query.expectedObjectClass = [GTLRClassroom_ListGuardianInvitationsResponse class];
  query.loggingName = @"classroom.userProfiles.guardianInvitations.list";
  return query;
}

@end

@implementation GTLRClassroomQuery_UserProfilesGuardianInvitationsPatch

@dynamic invitationId, studentId, updateMask;

+ (instancetype)queryWithObject:(GTLRClassroom_GuardianInvitation *)object
                      studentId:(NSString *)studentId
                   invitationId:(NSString *)invitationId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"invitationId", @"studentId"
  ];
  NSString *pathURITemplate = @"v1/userProfiles/{studentId}/guardianInvitations/{invitationId}";
  GTLRClassroomQuery_UserProfilesGuardianInvitationsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.studentId = studentId;
  query.invitationId = invitationId;
  query.expectedObjectClass = [GTLRClassroom_GuardianInvitation class];
  query.loggingName = @"classroom.userProfiles.guardianInvitations.patch";
  return query;
}

@end

@implementation GTLRClassroomQuery_UserProfilesGuardiansDelete

@dynamic guardianId, studentId;

+ (instancetype)queryWithStudentId:(NSString *)studentId
                        guardianId:(NSString *)guardianId {
  NSArray *pathParams = @[
    @"guardianId", @"studentId"
  ];
  NSString *pathURITemplate = @"v1/userProfiles/{studentId}/guardians/{guardianId}";
  GTLRClassroomQuery_UserProfilesGuardiansDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.studentId = studentId;
  query.guardianId = guardianId;
  query.expectedObjectClass = [GTLRClassroom_Empty class];
  query.loggingName = @"classroom.userProfiles.guardians.delete";
  return query;
}

@end

@implementation GTLRClassroomQuery_UserProfilesGuardiansGet

@dynamic guardianId, studentId;

+ (instancetype)queryWithStudentId:(NSString *)studentId
                        guardianId:(NSString *)guardianId {
  NSArray *pathParams = @[
    @"guardianId", @"studentId"
  ];
  NSString *pathURITemplate = @"v1/userProfiles/{studentId}/guardians/{guardianId}";
  GTLRClassroomQuery_UserProfilesGuardiansGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.studentId = studentId;
  query.guardianId = guardianId;
  query.expectedObjectClass = [GTLRClassroom_Guardian class];
  query.loggingName = @"classroom.userProfiles.guardians.get";
  return query;
}

@end

@implementation GTLRClassroomQuery_UserProfilesGuardiansList

@dynamic invitedEmailAddress, pageSize, pageToken, studentId;

+ (instancetype)queryWithStudentId:(NSString *)studentId {
  NSArray *pathParams = @[ @"studentId" ];
  NSString *pathURITemplate = @"v1/userProfiles/{studentId}/guardians";
  GTLRClassroomQuery_UserProfilesGuardiansList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.studentId = studentId;
  query.expectedObjectClass = [GTLRClassroom_ListGuardiansResponse class];
  query.loggingName = @"classroom.userProfiles.guardians.list";
  return query;
}

@end
