// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Firestore API (firestore/v1beta1)
// Documentation:
//   https://cloud.google.com/firestore

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRFirestore_BatchGetDocumentsRequest;
@class GTLRFirestore_BeginTransactionRequest;
@class GTLRFirestore_CommitRequest;
@class GTLRFirestore_Document;
@class GTLRFirestore_Index;
@class GTLRFirestore_ListCollectionIdsRequest;
@class GTLRFirestore_ListenRequest;
@class GTLRFirestore_RollbackRequest;
@class GTLRFirestore_RunQueryRequest;
@class GTLRFirestore_WriteRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Firestore query classes.
 */
@interface GTLRFirestoreQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets multiple documents.
 *  Documents returned by this method are not guaranteed to be returned in the
 *  same order that they were requested.
 *
 *  Method: firestore.projects.databases.documents.batchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsBatchGet : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesDocumentsBatchGetWithObject:database:]

/**
 *  The database name. In the format:
 *  `projects/{project_id}/databases/{database_id}`.
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRFirestore_BatchGetDocumentsResponse.
 *
 *  Gets multiple documents.
 *  Documents returned by this method are not guaranteed to be returned in the
 *  same order that they were requested.
 *
 *  @param object The @c GTLRFirestore_BatchGetDocumentsRequest to include in
 *    the query.
 *  @param database The database name. In the format:
 *    `projects/{project_id}/databases/{database_id}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsBatchGet
 */
+ (instancetype)queryWithObject:(GTLRFirestore_BatchGetDocumentsRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Starts a new transaction.
 *
 *  Method: firestore.projects.databases.documents.beginTransaction
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsBeginTransaction : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesDocumentsBeginTransactionWithObject:database:]

/**
 *  The database name. In the format:
 *  `projects/{project_id}/databases/{database_id}`.
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRFirestore_BeginTransactionResponse.
 *
 *  Starts a new transaction.
 *
 *  @param object The @c GTLRFirestore_BeginTransactionRequest to include in the
 *    query.
 *  @param database The database name. In the format:
 *    `projects/{project_id}/databases/{database_id}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsBeginTransaction
 */
+ (instancetype)queryWithObject:(GTLRFirestore_BeginTransactionRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Commits a transaction, while optionally updating documents.
 *
 *  Method: firestore.projects.databases.documents.commit
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsCommit : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesDocumentsCommitWithObject:database:]

/**
 *  The database name. In the format:
 *  `projects/{project_id}/databases/{database_id}`.
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRFirestore_CommitResponse.
 *
 *  Commits a transaction, while optionally updating documents.
 *
 *  @param object The @c GTLRFirestore_CommitRequest to include in the query.
 *  @param database The database name. In the format:
 *    `projects/{project_id}/databases/{database_id}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsCommit
 */
+ (instancetype)queryWithObject:(GTLRFirestore_CommitRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Creates a new document.
 *
 *  Method: firestore.projects.databases.documents.createDocument
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsCreateDocument : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesDocumentsCreateDocumentWithObject:parent:collectionId:]

/**
 *  The collection ID, relative to `parent`, to list. For example: `chatrooms`.
 */
@property(nonatomic, copy, nullable) NSString *collectionId;

/**
 *  The client-assigned document ID to use for this document.
 *  Optional. If not specified, an ID will be assigned by the service.
 */
@property(nonatomic, copy, nullable) NSString *documentId;

/**
 *  The list of field paths in the mask. See Document.fields for a field
 *  path syntax reference.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *maskFieldPaths;

/**
 *  The parent resource. For example:
 *  `projects/{project_id}/databases/{database_id}/documents` or
 *  `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirestore_Document.
 *
 *  Creates a new document.
 *
 *  @param object The @c GTLRFirestore_Document to include in the query.
 *  @param parent The parent resource. For example:
 *    `projects/{project_id}/databases/{database_id}/documents` or
 *    `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
 *  @param collectionId The collection ID, relative to `parent`, to list. For
 *    example: `chatrooms`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsCreateDocument
 */
+ (instancetype)queryWithObject:(GTLRFirestore_Document *)object
                         parent:(NSString *)parent
                   collectionId:(NSString *)collectionId;

@end

/**
 *  Deletes a document.
 *
 *  Method: firestore.projects.databases.documents.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsDelete : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesDocumentsDeleteWithname:]

/**
 *  When set to `true`, the target document must exist.
 *  When set to `false`, the target document must not exist.
 */
@property(nonatomic, assign) BOOL currentDocumentExists;

/**
 *  When set, the target document must exist and have been last updated at
 *  that time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *currentDocumentUpdateTime;

/**
 *  The resource name of the Document to delete. In the format:
 *  `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirestore_Empty.
 *
 *  Deletes a document.
 *
 *  @param name The resource name of the Document to delete. In the format:
 *    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a single document.
 *
 *  Method: firestore.projects.databases.documents.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsGet : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesDocumentsGetWithname:]

/**
 *  The list of field paths in the mask. See Document.fields for a field
 *  path syntax reference.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *maskFieldPaths;

/**
 *  The resource name of the Document to get. In the format:
 *  `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Reads the version of the document at the given time.
 *  This may not be older than 60 seconds.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  Reads the document in a transaction.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *transaction;

/**
 *  Fetches a @c GTLRFirestore_Document.
 *
 *  Gets a single document.
 *
 *  @param name The resource name of the Document to get. In the format:
 *    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists documents.
 *
 *  Method: firestore.projects.databases.documents.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsList : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesDocumentsListWithparent:collectionId:]

/**
 *  The collection ID, relative to `parent`, to list. For example: `chatrooms`
 *  or `messages`.
 */
@property(nonatomic, copy, nullable) NSString *collectionId;

/**
 *  The list of field paths in the mask. See Document.fields for a field
 *  path syntax reference.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *maskFieldPaths;

/** The order to sort results by. For example: `priority desc, name`. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** The maximum number of documents to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The `next_page_token` value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent resource name. In the format:
 *  `projects/{project_id}/databases/{database_id}/documents` or
 *  `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *  For example:
 *  `projects/my-project/databases/my-database/documents` or
 *  `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Reads documents as they were at the given time.
 *  This may not be older than 60 seconds.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  If the list should show missing documents. A missing document is a
 *  document that does not exist but has sub-documents. These documents will
 *  be returned with a key but will not have fields, Document.create_time,
 *  or Document.update_time set.
 *  Requests with `show_missing` may not specify `where` or
 *  `order_by`.
 */
@property(nonatomic, assign) BOOL showMissing;

/**
 *  Reads documents in a transaction.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *transaction;

/**
 *  Fetches a @c GTLRFirestore_ListDocumentsResponse.
 *
 *  Lists documents.
 *
 *  @param parent The parent resource name. In the format:
 *    `projects/{project_id}/databases/{database_id}/documents` or
 *    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *    For example:
 *    `projects/my-project/databases/my-database/documents` or
 *    `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 *  @param collectionId The collection ID, relative to `parent`, to list. For
 *    example: `chatrooms`
 *    or `messages`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   collectionId:(NSString *)collectionId;

@end

/**
 *  Lists all the collection IDs underneath a document.
 *
 *  Method: firestore.projects.databases.documents.listCollectionIds
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsListCollectionIds : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesDocumentsListCollectionIdsWithObject:parent:]

/**
 *  The parent document. In the format:
 *  `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *  For example:
 *  `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirestore_ListCollectionIdsResponse.
 *
 *  Lists all the collection IDs underneath a document.
 *
 *  @param object The @c GTLRFirestore_ListCollectionIdsRequest to include in
 *    the query.
 *  @param parent The parent document. In the format:
 *    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *    For example:
 *    `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsListCollectionIds
 */
+ (instancetype)queryWithObject:(GTLRFirestore_ListCollectionIdsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Listens to changes.
 *
 *  Method: firestore.projects.databases.documents.listen
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsListen : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesDocumentsListenWithObject:database:]

/**
 *  The database name. In the format:
 *  `projects/{project_id}/databases/{database_id}`.
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRFirestore_ListenResponse.
 *
 *  Listens to changes.
 *
 *  @param object The @c GTLRFirestore_ListenRequest to include in the query.
 *  @param database The database name. In the format:
 *    `projects/{project_id}/databases/{database_id}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsListen
 */
+ (instancetype)queryWithObject:(GTLRFirestore_ListenRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Updates or inserts a document.
 *
 *  Method: firestore.projects.databases.documents.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsPatch : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesDocumentsPatchWithObject:name:]

/**
 *  When set to `true`, the target document must exist.
 *  When set to `false`, the target document must not exist.
 */
@property(nonatomic, assign) BOOL currentDocumentExists;

/**
 *  When set, the target document must exist and have been last updated at
 *  that time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *currentDocumentUpdateTime;

/**
 *  The list of field paths in the mask. See Document.fields for a field
 *  path syntax reference.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *maskFieldPaths;

/**
 *  The resource name of the document, for example
 *  `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of field paths in the mask. See Document.fields for a field
 *  path syntax reference.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *updateMaskFieldPaths;

/**
 *  Fetches a @c GTLRFirestore_Document.
 *
 *  Updates or inserts a document.
 *
 *  @param object The @c GTLRFirestore_Document to include in the query.
 *  @param name The resource name of the document, for example
 *    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsPatch
 */
+ (instancetype)queryWithObject:(GTLRFirestore_Document *)object
                           name:(NSString *)name;

@end

/**
 *  Rolls back a transaction.
 *
 *  Method: firestore.projects.databases.documents.rollback
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsRollback : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesDocumentsRollbackWithObject:database:]

/**
 *  The database name. In the format:
 *  `projects/{project_id}/databases/{database_id}`.
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRFirestore_Empty.
 *
 *  Rolls back a transaction.
 *
 *  @param object The @c GTLRFirestore_RollbackRequest to include in the query.
 *  @param database The database name. In the format:
 *    `projects/{project_id}/databases/{database_id}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsRollback
 */
+ (instancetype)queryWithObject:(GTLRFirestore_RollbackRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Runs a query.
 *
 *  Method: firestore.projects.databases.documents.runQuery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsRunQuery : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesDocumentsRunQueryWithObject:parent:]

/**
 *  The parent resource name. In the format:
 *  `projects/{project_id}/databases/{database_id}/documents` or
 *  `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *  For example:
 *  `projects/my-project/databases/my-database/documents` or
 *  `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirestore_RunQueryResponse.
 *
 *  Runs a query.
 *
 *  @param object The @c GTLRFirestore_RunQueryRequest to include in the query.
 *  @param parent The parent resource name. In the format:
 *    `projects/{project_id}/databases/{database_id}/documents` or
 *    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *    For example:
 *    `projects/my-project/databases/my-database/documents` or
 *    `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsRunQuery
 */
+ (instancetype)queryWithObject:(GTLRFirestore_RunQueryRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Streams batches of document updates and deletes, in order.
 *
 *  Method: firestore.projects.databases.documents.write
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsWrite : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesDocumentsWriteWithObject:database:]

/**
 *  The database name. In the format:
 *  `projects/{project_id}/databases/{database_id}`.
 *  This is only required in the first message.
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRFirestore_WriteResponse.
 *
 *  Streams batches of document updates and deletes, in order.
 *
 *  @param object The @c GTLRFirestore_WriteRequest to include in the query.
 *  @param database The database name. In the format:
 *    `projects/{project_id}/databases/{database_id}`.
 *    This is only required in the first message.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsWrite
 */
+ (instancetype)queryWithObject:(GTLRFirestore_WriteRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Creates the specified index.
 *  A newly created index's initial state is `CREATING`. On completion of the
 *  returned google.longrunning.Operation, the state will be `READY`.
 *  If the index already exists, the call will return an `ALREADY_EXISTS`
 *  status.
 *  During creation, the process could result in an error, in which case the
 *  index will move to the `ERROR` state. The process can be recovered by
 *  fixing the data that caused the error, removing the index with
 *  delete, then re-creating the index with
 *  create.
 *  Indexes with a single field cannot be created.
 *
 *  Method: firestore.projects.databases.indexes.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesIndexesCreate : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesIndexesCreateWithObject:parent:]

/**
 *  The name of the database this index will apply to. For example:
 *  `projects/{project_id}/databases/{database_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirestore_Operation.
 *
 *  Creates the specified index.
 *  A newly created index's initial state is `CREATING`. On completion of the
 *  returned google.longrunning.Operation, the state will be `READY`.
 *  If the index already exists, the call will return an `ALREADY_EXISTS`
 *  status.
 *  During creation, the process could result in an error, in which case the
 *  index will move to the `ERROR` state. The process can be recovered by
 *  fixing the data that caused the error, removing the index with
 *  delete, then re-creating the index with
 *  create.
 *  Indexes with a single field cannot be created.
 *
 *  @param object The @c GTLRFirestore_Index to include in the query.
 *  @param parent The name of the database this index will apply to. For
 *    example:
 *    `projects/{project_id}/databases/{database_id}`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesIndexesCreate
 */
+ (instancetype)queryWithObject:(GTLRFirestore_Index *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an index.
 *
 *  Method: firestore.projects.databases.indexes.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesIndexesDelete : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesIndexesDeleteWithname:]

/**
 *  The index name. For example:
 *  `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirestore_Empty.
 *
 *  Deletes an index.
 *
 *  @param name The index name. For example:
 *    `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesIndexesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets an index.
 *
 *  Method: firestore.projects.databases.indexes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesIndexesGet : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesIndexesGetWithname:]

/**
 *  The name of the index. For example:
 *  `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirestore_Index.
 *
 *  Gets an index.
 *
 *  @param name The name of the index. For example:
 *    `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesIndexesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the indexes that match the specified filters.
 *
 *  Method: firestore.projects.databases.indexes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesIndexesList : GTLRFirestoreQuery
// Previous library name was
//   +[GTLQueryFirestore queryForProjectsDatabasesIndexesListWithparent:]

@property(nonatomic, copy, nullable) NSString *filter;

/** The standard List page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard List page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The database name. For example:
 *  `projects/{project_id}/databases/{database_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirestore_ListIndexesResponse.
 *
 *  Lists the indexes that match the specified filters.
 *
 *  @param parent The database name. For example:
 *    `projects/{project_id}/databases/{database_id}`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesIndexesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
