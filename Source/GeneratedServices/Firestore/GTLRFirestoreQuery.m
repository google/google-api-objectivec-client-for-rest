// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Firestore API (firestore/v1beta1)
// Documentation:
//   https://cloud.google.com/firestore

#import "GTLRFirestoreQuery.h"

#import "GTLRFirestoreObjects.h"

@implementation GTLRFirestoreQuery

@dynamic fields;

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesDocumentsBatchGet

@dynamic database;

+ (instancetype)queryWithObject:(GTLRFirestore_BatchGetDocumentsRequest *)object
                       database:(NSString *)database {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"database" ];
  NSString *pathURITemplate = @"v1beta1/{+database}/documents:batchGet";
  GTLRFirestoreQuery_ProjectsDatabasesDocumentsBatchGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.database = database;
  query.expectedObjectClass = [GTLRFirestore_BatchGetDocumentsResponse class];
  query.loggingName = @"firestore.projects.databases.documents.batchGet";
  return query;
}

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesDocumentsBeginTransaction

@dynamic database;

+ (instancetype)queryWithObject:(GTLRFirestore_BeginTransactionRequest *)object
                       database:(NSString *)database {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"database" ];
  NSString *pathURITemplate = @"v1beta1/{+database}/documents:beginTransaction";
  GTLRFirestoreQuery_ProjectsDatabasesDocumentsBeginTransaction *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.database = database;
  query.expectedObjectClass = [GTLRFirestore_BeginTransactionResponse class];
  query.loggingName = @"firestore.projects.databases.documents.beginTransaction";
  return query;
}

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesDocumentsCommit

@dynamic database;

+ (instancetype)queryWithObject:(GTLRFirestore_CommitRequest *)object
                       database:(NSString *)database {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"database" ];
  NSString *pathURITemplate = @"v1beta1/{+database}/documents:commit";
  GTLRFirestoreQuery_ProjectsDatabasesDocumentsCommit *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.database = database;
  query.expectedObjectClass = [GTLRFirestore_CommitResponse class];
  query.loggingName = @"firestore.projects.databases.documents.commit";
  return query;
}

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesDocumentsCreateDocument

@dynamic collectionId, documentId, maskFieldPaths, parent;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"maskFieldPaths" : @"mask.fieldPaths" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"mask.fieldPaths" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRFirestore_Document *)object
                         parent:(NSString *)parent
                   collectionId:(NSString *)collectionId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"collectionId", @"parent"
  ];
  NSString *pathURITemplate = @"v1beta1/{+parent}/{collectionId}";
  GTLRFirestoreQuery_ProjectsDatabasesDocumentsCreateDocument *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.collectionId = collectionId;
  query.expectedObjectClass = [GTLRFirestore_Document class];
  query.loggingName = @"firestore.projects.databases.documents.createDocument";
  return query;
}

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesDocumentsDelete

@dynamic currentDocumentExists, currentDocumentUpdateTime, name;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"currentDocumentExists" : @"currentDocument.exists",
    @"currentDocumentUpdateTime" : @"currentDocument.updateTime"
  };
  return map;
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta1/{+name}";
  GTLRFirestoreQuery_ProjectsDatabasesDocumentsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirestore_Empty class];
  query.loggingName = @"firestore.projects.databases.documents.delete";
  return query;
}

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesDocumentsGet

@dynamic maskFieldPaths, name, readTime, transaction;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"maskFieldPaths" : @"mask.fieldPaths" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"mask.fieldPaths" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta1/{+name}";
  GTLRFirestoreQuery_ProjectsDatabasesDocumentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirestore_Document class];
  query.loggingName = @"firestore.projects.databases.documents.get";
  return query;
}

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesDocumentsList

@dynamic collectionId, maskFieldPaths, orderBy, pageSize, pageToken, parent,
         readTime, showMissing, transaction;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"maskFieldPaths" : @"mask.fieldPaths" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"mask.fieldPaths" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent
                   collectionId:(NSString *)collectionId {
  NSArray *pathParams = @[
    @"collectionId", @"parent"
  ];
  NSString *pathURITemplate = @"v1beta1/{+parent}/{collectionId}";
  GTLRFirestoreQuery_ProjectsDatabasesDocumentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.collectionId = collectionId;
  query.expectedObjectClass = [GTLRFirestore_ListDocumentsResponse class];
  query.loggingName = @"firestore.projects.databases.documents.list";
  return query;
}

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesDocumentsListCollectionIds

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRFirestore_ListCollectionIdsRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta1/{+parent}:listCollectionIds";
  GTLRFirestoreQuery_ProjectsDatabasesDocumentsListCollectionIds *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirestore_ListCollectionIdsResponse class];
  query.loggingName = @"firestore.projects.databases.documents.listCollectionIds";
  return query;
}

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesDocumentsListen

@dynamic database;

+ (instancetype)queryWithObject:(GTLRFirestore_ListenRequest *)object
                       database:(NSString *)database {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"database" ];
  NSString *pathURITemplate = @"v1beta1/{+database}/documents:listen";
  GTLRFirestoreQuery_ProjectsDatabasesDocumentsListen *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.database = database;
  query.expectedObjectClass = [GTLRFirestore_ListenResponse class];
  query.loggingName = @"firestore.projects.databases.documents.listen";
  return query;
}

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesDocumentsPatch

@dynamic currentDocumentExists, currentDocumentUpdateTime, maskFieldPaths, name,
         updateMaskFieldPaths;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"currentDocumentExists" : @"currentDocument.exists",
    @"currentDocumentUpdateTime" : @"currentDocument.updateTime",
    @"maskFieldPaths" : @"mask.fieldPaths",
    @"updateMaskFieldPaths" : @"updateMask.fieldPaths"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"mask.fieldPaths" : [NSString class],
    @"updateMask.fieldPaths" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRFirestore_Document *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta1/{+name}";
  GTLRFirestoreQuery_ProjectsDatabasesDocumentsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirestore_Document class];
  query.loggingName = @"firestore.projects.databases.documents.patch";
  return query;
}

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesDocumentsRollback

@dynamic database;

+ (instancetype)queryWithObject:(GTLRFirestore_RollbackRequest *)object
                       database:(NSString *)database {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"database" ];
  NSString *pathURITemplate = @"v1beta1/{+database}/documents:rollback";
  GTLRFirestoreQuery_ProjectsDatabasesDocumentsRollback *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.database = database;
  query.expectedObjectClass = [GTLRFirestore_Empty class];
  query.loggingName = @"firestore.projects.databases.documents.rollback";
  return query;
}

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesDocumentsRunQuery

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRFirestore_RunQueryRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta1/{+parent}:runQuery";
  GTLRFirestoreQuery_ProjectsDatabasesDocumentsRunQuery *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirestore_RunQueryResponse class];
  query.loggingName = @"firestore.projects.databases.documents.runQuery";
  return query;
}

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesDocumentsWrite

@dynamic database;

+ (instancetype)queryWithObject:(GTLRFirestore_WriteRequest *)object
                       database:(NSString *)database {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"database" ];
  NSString *pathURITemplate = @"v1beta1/{+database}/documents:write";
  GTLRFirestoreQuery_ProjectsDatabasesDocumentsWrite *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.database = database;
  query.expectedObjectClass = [GTLRFirestore_WriteResponse class];
  query.loggingName = @"firestore.projects.databases.documents.write";
  return query;
}

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesIndexesCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRFirestore_Index *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta1/{+parent}/indexes";
  GTLRFirestoreQuery_ProjectsDatabasesIndexesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirestore_Operation class];
  query.loggingName = @"firestore.projects.databases.indexes.create";
  return query;
}

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesIndexesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta1/{+name}";
  GTLRFirestoreQuery_ProjectsDatabasesIndexesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirestore_Empty class];
  query.loggingName = @"firestore.projects.databases.indexes.delete";
  return query;
}

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesIndexesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta1/{+name}";
  GTLRFirestoreQuery_ProjectsDatabasesIndexesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirestore_Index class];
  query.loggingName = @"firestore.projects.databases.indexes.get";
  return query;
}

@end

@implementation GTLRFirestoreQuery_ProjectsDatabasesIndexesList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta1/{+parent}/indexes";
  GTLRFirestoreQuery_ProjectsDatabasesIndexesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirestore_ListIndexesResponse class];
  query.loggingName = @"firestore.projects.databases.indexes.list";
  return query;
}

@end
