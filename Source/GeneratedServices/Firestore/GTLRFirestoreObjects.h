// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Firestore API (firestore/v1)
// Description:
//   Accesses the NoSQL document database built for automatic scaling, high
//   performance, and ease of application development.
// Documentation:
//   https://cloud.google.com/firestore

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRFirestore_GoogleFirestoreAdminV1Field;
@class GTLRFirestore_GoogleFirestoreAdminV1Index;
@class GTLRFirestore_GoogleFirestoreAdminV1IndexConfig;
@class GTLRFirestore_GoogleFirestoreAdminV1IndexConfigDelta;
@class GTLRFirestore_GoogleFirestoreAdminV1IndexField;
@class GTLRFirestore_GoogleFirestoreAdminV1Progress;
@class GTLRFirestore_GoogleLongrunningOperation;
@class GTLRFirestore_GoogleLongrunningOperation_Metadata;
@class GTLRFirestore_GoogleLongrunningOperation_Response;
@class GTLRFirestore_Location;
@class GTLRFirestore_Location_Labels;
@class GTLRFirestore_Location_Metadata;
@class GTLRFirestore_Status;
@class GTLRFirestore_Status_Details_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata.operationState

/**
 *  Request has finished being cancelled after user called
 *  google.longrunning.Operations.CancelOperation.
 *
 *  Value: "CANCELLED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata_OperationState_Cancelled;
/**
 *  Request is in the process of being cancelled after user called
 *  google.longrunning.Operations.CancelOperation on the operation.
 *
 *  Value: "CANCELLING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata_OperationState_Cancelling;
/**
 *  Request has finished being processed, but encountered an error.
 *
 *  Value: "FAILED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata_OperationState_Failed;
/**
 *  Request has been processed and is in its finalization stage.
 *
 *  Value: "FINALIZING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata_OperationState_Finalizing;
/**
 *  Request is being prepared for processing.
 *
 *  Value: "INITIALIZING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata_OperationState_Initializing;
/**
 *  Unspecified.
 *
 *  Value: "OPERATION_STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata_OperationState_OperationStateUnspecified;
/**
 *  Request is actively being processed.
 *
 *  Value: "PROCESSING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata_OperationState_Processing;
/**
 *  Request has completed successfully.
 *
 *  Value: "SUCCESSFUL"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata_OperationState_Successful;

// ----------------------------------------------------------------------------
// GTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata.state

/**
 *  Request has finished being cancelled after user called
 *  google.longrunning.Operations.CancelOperation.
 *
 *  Value: "CANCELLED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata_State_Cancelled;
/**
 *  Request is in the process of being cancelled after user called
 *  google.longrunning.Operations.CancelOperation on the operation.
 *
 *  Value: "CANCELLING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata_State_Cancelling;
/**
 *  Request has finished being processed, but encountered an error.
 *
 *  Value: "FAILED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata_State_Failed;
/**
 *  Request has been processed and is in its finalization stage.
 *
 *  Value: "FINALIZING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata_State_Finalizing;
/**
 *  Request is being prepared for processing.
 *
 *  Value: "INITIALIZING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata_State_Initializing;
/**
 *  Unspecified.
 *
 *  Value: "OPERATION_STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata_State_OperationStateUnspecified;
/**
 *  Request is actively being processed.
 *
 *  Value: "PROCESSING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata_State_Processing;
/**
 *  Request has completed successfully.
 *
 *  Value: "SUCCESSFUL"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata_State_Successful;

// ----------------------------------------------------------------------------
// GTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata.operationState

/**
 *  Request has finished being cancelled after user called
 *  google.longrunning.Operations.CancelOperation.
 *
 *  Value: "CANCELLED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata_OperationState_Cancelled;
/**
 *  Request is in the process of being cancelled after user called
 *  google.longrunning.Operations.CancelOperation on the operation.
 *
 *  Value: "CANCELLING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata_OperationState_Cancelling;
/**
 *  Request has finished being processed, but encountered an error.
 *
 *  Value: "FAILED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata_OperationState_Failed;
/**
 *  Request has been processed and is in its finalization stage.
 *
 *  Value: "FINALIZING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata_OperationState_Finalizing;
/**
 *  Request is being prepared for processing.
 *
 *  Value: "INITIALIZING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata_OperationState_Initializing;
/**
 *  Unspecified.
 *
 *  Value: "OPERATION_STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata_OperationState_OperationStateUnspecified;
/**
 *  Request is actively being processed.
 *
 *  Value: "PROCESSING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata_OperationState_Processing;
/**
 *  Request has completed successfully.
 *
 *  Value: "SUCCESSFUL"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata_OperationState_Successful;

// ----------------------------------------------------------------------------
// GTLRFirestore_GoogleFirestoreAdminV1Index.queryScope

/**
 *  Indexes with a collection query scope specified allow queries
 *  against a collection that is the child of a specific document, specified
 *  at query time, and that has the collection id specified by the index.
 *
 *  Value: "COLLECTION"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1Index_QueryScope_Collection;
/**
 *  The query scope is unspecified. Not a valid option.
 *
 *  Value: "QUERY_SCOPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1Index_QueryScope_QueryScopeUnspecified;

// ----------------------------------------------------------------------------
// GTLRFirestore_GoogleFirestoreAdminV1Index.state

/**
 *  The index is being created.
 *  There is an active long-running operation for the index.
 *  The index is updated when writing a document.
 *  Some index data may exist.
 *
 *  Value: "CREATING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1Index_State_Creating;
/**
 *  The index was being created, but something went wrong.
 *  There is no active long-running operation for the index,
 *  and the most recently finished long-running operation failed.
 *  The index is not updated when writing a document.
 *  Some index data may exist.
 *  Use the google.longrunning.Operations API to determine why the operation
 *  that last attempted to create this index failed, then re-create the
 *  index.
 *
 *  Value: "NEEDS_REPAIR"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1Index_State_NeedsRepair;
/**
 *  The index is ready to be used.
 *  The index is updated when writing a document.
 *  The index is fully populated from all stored documents it applies to.
 *
 *  Value: "READY"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1Index_State_Ready;
/**
 *  The state is unspecified.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1Index_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRFirestore_GoogleFirestoreAdminV1IndexConfigDelta.changeType

/**
 *  The single field index is being added.
 *
 *  Value: "ADD"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1IndexConfigDelta_ChangeType_Add;
/**
 *  The type of change is not specified or known.
 *
 *  Value: "CHANGE_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1IndexConfigDelta_ChangeType_ChangeTypeUnspecified;
/**
 *  The single field index is being removed.
 *
 *  Value: "REMOVE"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1IndexConfigDelta_ChangeType_Remove;

// ----------------------------------------------------------------------------
// GTLRFirestore_GoogleFirestoreAdminV1IndexField.arrayConfig

/**
 *  The index does not support additional array queries.
 *
 *  Value: "ARRAY_CONFIG_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1IndexField_ArrayConfig_ArrayConfigUnspecified;
/**
 *  The index supports array containment queries.
 *
 *  Value: "CONTAINS"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1IndexField_ArrayConfig_Contains;

// ----------------------------------------------------------------------------
// GTLRFirestore_GoogleFirestoreAdminV1IndexField.order

/**
 *  The field is ordered by ascending field value.
 *
 *  Value: "ASCENDING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1IndexField_Order_Ascending;
/**
 *  The field is ordered by descending field value.
 *
 *  Value: "DESCENDING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1IndexField_Order_Descending;
/**
 *  The ordering is unspecified. Not a valid option.
 *
 *  Value: "ORDER_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1IndexField_Order_OrderUnspecified;

// ----------------------------------------------------------------------------
// GTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata.state

/**
 *  Request has finished being cancelled after user called
 *  google.longrunning.Operations.CancelOperation.
 *
 *  Value: "CANCELLED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata_State_Cancelled;
/**
 *  Request is in the process of being cancelled after user called
 *  google.longrunning.Operations.CancelOperation on the operation.
 *
 *  Value: "CANCELLING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata_State_Cancelling;
/**
 *  Request has finished being processed, but encountered an error.
 *
 *  Value: "FAILED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata_State_Failed;
/**
 *  Request has been processed and is in its finalization stage.
 *
 *  Value: "FINALIZING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata_State_Finalizing;
/**
 *  Request is being prepared for processing.
 *
 *  Value: "INITIALIZING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata_State_Initializing;
/**
 *  Unspecified.
 *
 *  Value: "OPERATION_STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata_State_OperationStateUnspecified;
/**
 *  Request is actively being processed.
 *
 *  Value: "PROCESSING"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata_State_Processing;
/**
 *  Request has completed successfully.
 *
 *  Value: "SUCCESSFUL"
 */
GTLR_EXTERN NSString * const kGTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata_State_Successful;

/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRFirestore_Empty : GTLRObject
@end


/**
 *  Metadata for google.longrunning.Operation results from
 *  FirestoreAdmin.ExportDocuments.
 */
@interface GTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata : GTLRObject

/** Which collection ids are being exported. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *collectionIds;

/**
 *  The time this operation completed. Will be unset if operation still in
 *  progress.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The state of the export operation.
 *
 *  Likely values:
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata_OperationState_Cancelled
 *        Request has finished being cancelled after user called
 *        google.longrunning.Operations.CancelOperation. (Value: "CANCELLED")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata_OperationState_Cancelling
 *        Request is in the process of being cancelled after user called
 *        google.longrunning.Operations.CancelOperation on the operation.
 *        (Value: "CANCELLING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata_OperationState_Failed
 *        Request has finished being processed, but encountered an error.
 *        (Value: "FAILED")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata_OperationState_Finalizing
 *        Request has been processed and is in its finalization stage. (Value:
 *        "FINALIZING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata_OperationState_Initializing
 *        Request is being prepared for processing. (Value: "INITIALIZING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata_OperationState_OperationStateUnspecified
 *        Unspecified. (Value: "OPERATION_STATE_UNSPECIFIED")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata_OperationState_Processing
 *        Request is actively being processed. (Value: "PROCESSING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsMetadata_OperationState_Successful
 *        Request has completed successfully. (Value: "SUCCESSFUL")
 */
@property(nonatomic, copy, nullable) NSString *operationState;

/** Where the entities are being exported to. */
@property(nonatomic, copy, nullable) NSString *outputUriPrefix;

/** The progress, in bytes, of this operation. */
@property(nonatomic, strong, nullable) GTLRFirestore_GoogleFirestoreAdminV1Progress *progressBytes;

/** The progress, in documents, of this operation. */
@property(nonatomic, strong, nullable) GTLRFirestore_GoogleFirestoreAdminV1Progress *progressDocuments;

/** The time this operation started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  The request for FirestoreAdmin.ExportDocuments.
 */
@interface GTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsRequest : GTLRObject

/** Which collection ids to export. Unspecified means all collections. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *collectionIds;

/**
 *  The output URI. Currently only supports Google Cloud Storage URIs of the
 *  form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name
 *  of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional
 *  Google Cloud Storage namespace path. When
 *  choosing a name, be sure to consider Google Cloud Storage naming
 *  guidelines: https://cloud.google.com/storage/docs/naming.
 *  If the URI is a bucket (without a namespace path), a prefix will be
 *  generated based on the start time.
 */
@property(nonatomic, copy, nullable) NSString *outputUriPrefix;

@end


/**
 *  Returned in the google.longrunning.Operation response field.
 */
@interface GTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsResponse : GTLRObject

/**
 *  Location of the output files. This can be used to begin an import
 *  into Cloud Firestore (this project or another project) after the operation
 *  completes successfully.
 */
@property(nonatomic, copy, nullable) NSString *outputUriPrefix;

@end


/**
 *  Represents a single field in the database.
 *  Fields are grouped by their "Collection Group", which represent all
 *  collections in the database with the same id.
 */
@interface GTLRFirestore_GoogleFirestoreAdminV1Field : GTLRObject

/**
 *  The index configuration for this field. If unset, field indexing will
 *  revert to the configuration defined by the `ancestor_field`. To
 *  explicitly remove all indexes for this field, specify an index config
 *  with an empty list of indexes.
 */
@property(nonatomic, strong, nullable) GTLRFirestore_GoogleFirestoreAdminV1IndexConfig *indexConfig;

/**
 *  A field name of the form
 *  `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`
 *  A field path may be a simple field name, e.g. `address` or a path to fields
 *  within map_value , e.g. `address.city`,
 *  or a special field path. The only valid special field is `*`, which
 *  represents any field.
 *  Field paths may be quoted using ` (backtick). The only character that needs
 *  to be escaped within a quoted field path is the backtick character itself,
 *  escaped using a backslash. Special characters in field paths that
 *  must be quoted include: `*`, `.`,
 *  ``` (backtick), `[`, `]`, as well as any ascii symbolic characters.
 *  Examples:
 *  (Note: Comments here are written in markdown syntax, so there is an
 *  additional layer of backticks to represent a code block)
 *  `\\`address.city\\`` represents a field named `address.city`, not the map
 *  key
 *  `city` in the field `address`.
 *  `\\`*\\`` represents a field named `*`, not any field.
 *  A special `Field` contains the default indexing settings for all fields.
 *  This field's resource name is:
 *  `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/
 *  *`
 *  Indexes defined on this `Field` will be applied to all fields which do not
 *  have their own `Field` index configuration.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Metadata for google.longrunning.Operation results from
 *  FirestoreAdmin.UpdateField.
 */
@interface GTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata : GTLRObject

/**
 *  The time this operation completed. Will be unset if operation still in
 *  progress.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The field resource that this operation is acting on. For example:
 *  `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`
 */
@property(nonatomic, copy, nullable) NSString *field;

/**
 *  A list of IndexConfigDelta, which describe the intent of this
 *  operation.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirestore_GoogleFirestoreAdminV1IndexConfigDelta *> *indexConfigDeltas;

/** The progress, in bytes, of this operation. */
@property(nonatomic, strong, nullable) GTLRFirestore_GoogleFirestoreAdminV1Progress *progressBytes;

/** The progress, in documents, of this operation. */
@property(nonatomic, strong, nullable) GTLRFirestore_GoogleFirestoreAdminV1Progress *progressDocuments;

/** The time this operation started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The state of the operation.
 *
 *  Likely values:
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata_State_Cancelled
 *        Request has finished being cancelled after user called
 *        google.longrunning.Operations.CancelOperation. (Value: "CANCELLED")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata_State_Cancelling
 *        Request is in the process of being cancelled after user called
 *        google.longrunning.Operations.CancelOperation on the operation.
 *        (Value: "CANCELLING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata_State_Failed
 *        Request has finished being processed, but encountered an error.
 *        (Value: "FAILED")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata_State_Finalizing
 *        Request has been processed and is in its finalization stage. (Value:
 *        "FINALIZING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata_State_Initializing
 *        Request is being prepared for processing. (Value: "INITIALIZING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata_State_OperationStateUnspecified
 *        Unspecified. (Value: "OPERATION_STATE_UNSPECIFIED")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata_State_Processing
 *        Request is actively being processed. (Value: "PROCESSING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1FieldOperationMetadata_State_Successful
 *        Request has completed successfully. (Value: "SUCCESSFUL")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Metadata for google.longrunning.Operation results from
 *  FirestoreAdmin.ImportDocuments.
 */
@interface GTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata : GTLRObject

/** Which collection ids are being imported. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *collectionIds;

/**
 *  The time this operation completed. Will be unset if operation still in
 *  progress.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** The location of the documents being imported. */
@property(nonatomic, copy, nullable) NSString *inputUriPrefix;

/**
 *  The state of the import operation.
 *
 *  Likely values:
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata_OperationState_Cancelled
 *        Request has finished being cancelled after user called
 *        google.longrunning.Operations.CancelOperation. (Value: "CANCELLED")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata_OperationState_Cancelling
 *        Request is in the process of being cancelled after user called
 *        google.longrunning.Operations.CancelOperation on the operation.
 *        (Value: "CANCELLING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata_OperationState_Failed
 *        Request has finished being processed, but encountered an error.
 *        (Value: "FAILED")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata_OperationState_Finalizing
 *        Request has been processed and is in its finalization stage. (Value:
 *        "FINALIZING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata_OperationState_Initializing
 *        Request is being prepared for processing. (Value: "INITIALIZING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata_OperationState_OperationStateUnspecified
 *        Unspecified. (Value: "OPERATION_STATE_UNSPECIFIED")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata_OperationState_Processing
 *        Request is actively being processed. (Value: "PROCESSING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsMetadata_OperationState_Successful
 *        Request has completed successfully. (Value: "SUCCESSFUL")
 */
@property(nonatomic, copy, nullable) NSString *operationState;

/** The progress, in bytes, of this operation. */
@property(nonatomic, strong, nullable) GTLRFirestore_GoogleFirestoreAdminV1Progress *progressBytes;

/** The progress, in documents, of this operation. */
@property(nonatomic, strong, nullable) GTLRFirestore_GoogleFirestoreAdminV1Progress *progressDocuments;

/** The time this operation started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  The request for FirestoreAdmin.ImportDocuments.
 */
@interface GTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsRequest : GTLRObject

/**
 *  Which collection ids to import. Unspecified means all collections included
 *  in the import.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *collectionIds;

/**
 *  Location of the exported files.
 *  This must match the output_uri_prefix of an ExportDocumentsResponse from
 *  an export that has completed successfully.
 *  See:
 *  google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix.
 */
@property(nonatomic, copy, nullable) NSString *inputUriPrefix;

@end


/**
 *  Cloud Firestore indexes enable simple and complex queries against
 *  documents in a database.
 */
@interface GTLRFirestore_GoogleFirestoreAdminV1Index : GTLRObject

/**
 *  The fields supported by this index.
 *  For composite indexes, this is always 2 or more fields.
 *  The last field entry is always for the field path `__name__`. If, on
 *  creation, `__name__` was not specified as the last field, it will be added
 *  automatically with the same direction as that of the last field defined. If
 *  the final field in a composite index is not directional, the `__name__`
 *  will be ordered ASCENDING (unless explicitly specified).
 *  For single field indexes, this will always be exactly one entry with a
 *  field path equal to the field path of the associated field.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirestore_GoogleFirestoreAdminV1IndexField *> *fields;

/**
 *  Output only.
 *  A server defined name for this index.
 *  The form of this name for composite indexes will be:
 *  `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}`
 *  For single field indexes, this field will be empty.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Indexes with a collection query scope specified allow queries
 *  against a collection that is the child of a specific document, specified at
 *  query time, and that has the same collection id.
 *  Indexes with a collection group query scope specified allow queries against
 *  all collections descended from a specific document, specified at query
 *  time, and that have the same collection id as this index.
 *
 *  Likely values:
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1Index_QueryScope_Collection
 *        Indexes with a collection query scope specified allow queries
 *        against a collection that is the child of a specific document,
 *        specified
 *        at query time, and that has the collection id specified by the index.
 *        (Value: "COLLECTION")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1Index_QueryScope_QueryScopeUnspecified
 *        The query scope is unspecified. Not a valid option. (Value:
 *        "QUERY_SCOPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *queryScope;

/**
 *  Output only.
 *  The serving state of the index.
 *
 *  Likely values:
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1Index_State_Creating The
 *        index is being created.
 *        There is an active long-running operation for the index.
 *        The index is updated when writing a document.
 *        Some index data may exist. (Value: "CREATING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1Index_State_NeedsRepair The
 *        index was being created, but something went wrong.
 *        There is no active long-running operation for the index,
 *        and the most recently finished long-running operation failed.
 *        The index is not updated when writing a document.
 *        Some index data may exist.
 *        Use the google.longrunning.Operations API to determine why the
 *        operation
 *        that last attempted to create this index failed, then re-create the
 *        index. (Value: "NEEDS_REPAIR")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1Index_State_Ready The index
 *        is ready to be used.
 *        The index is updated when writing a document.
 *        The index is fully populated from all stored documents it applies to.
 *        (Value: "READY")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1Index_State_StateUnspecified
 *        The state is unspecified. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  The index configuration for this field.
 */
@interface GTLRFirestore_GoogleFirestoreAdminV1IndexConfig : GTLRObject

/**
 *  Output only.
 *  Specifies the resource name of the `Field` from which this field's
 *  index configuration is set (when `uses_ancestor_config` is true),
 *  or from which it *would* be set if this field had no index configuration
 *  (when `uses_ancestor_config` is false).
 */
@property(nonatomic, copy, nullable) NSString *ancestorField;

/** The indexes supported for this field. */
@property(nonatomic, strong, nullable) NSArray<GTLRFirestore_GoogleFirestoreAdminV1Index *> *indexes;

/**
 *  Output only
 *  When true, the `Field`'s index configuration is in the process of being
 *  reverted. Once complete, the index config will transition to the same
 *  state as the field specified by `ancestor_field`, at which point
 *  `uses_ancestor_config` will be `true` and `reverting` will be `false`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reverting;

/**
 *  Output only.
 *  When true, the `Field`'s index configuration is set from the
 *  configuration specified by the `ancestor_field`.
 *  When false, the `Field`'s index configuration is defined explicitly.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *usesAncestorConfig;

@end


/**
 *  Information about an index configuration change.
 */
@interface GTLRFirestore_GoogleFirestoreAdminV1IndexConfigDelta : GTLRObject

/**
 *  Specifies how the index is changing.
 *
 *  Likely values:
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1IndexConfigDelta_ChangeType_Add
 *        The single field index is being added. (Value: "ADD")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1IndexConfigDelta_ChangeType_ChangeTypeUnspecified
 *        The type of change is not specified or known. (Value:
 *        "CHANGE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1IndexConfigDelta_ChangeType_Remove
 *        The single field index is being removed. (Value: "REMOVE")
 */
@property(nonatomic, copy, nullable) NSString *changeType;

/** The index being changed. */
@property(nonatomic, strong, nullable) GTLRFirestore_GoogleFirestoreAdminV1Index *index;

@end


/**
 *  A field in an index.
 *  The field_path describes which field is indexed, the value_mode describes
 *  how the field value is indexed.
 */
@interface GTLRFirestore_GoogleFirestoreAdminV1IndexField : GTLRObject

/**
 *  Indicates that this field supports operations on `array_value`s.
 *
 *  Likely values:
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1IndexField_ArrayConfig_ArrayConfigUnspecified
 *        The index does not support additional array queries. (Value:
 *        "ARRAY_CONFIG_UNSPECIFIED")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1IndexField_ArrayConfig_Contains
 *        The index supports array containment queries. (Value: "CONTAINS")
 */
@property(nonatomic, copy, nullable) NSString *arrayConfig;

/**
 *  Can be __name__.
 *  For single field indexes, this must match the name of the field or may
 *  be omitted.
 */
@property(nonatomic, copy, nullable) NSString *fieldPath;

/**
 *  Indicates that this field supports ordering by the specified order or
 *  comparing using =, <, <=, >, >=.
 *
 *  Likely values:
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1IndexField_Order_Ascending
 *        The field is ordered by ascending field value. (Value: "ASCENDING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1IndexField_Order_Descending
 *        The field is ordered by descending field value. (Value: "DESCENDING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1IndexField_Order_OrderUnspecified
 *        The ordering is unspecified. Not a valid option. (Value:
 *        "ORDER_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *order;

@end


/**
 *  Metadata for google.longrunning.Operation results from
 *  FirestoreAdmin.CreateIndex.
 */
@interface GTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata : GTLRObject

/**
 *  The time this operation completed. Will be unset if operation still in
 *  progress.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The index resource that this operation is acting on. For example:
 *  `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
 */
@property(nonatomic, copy, nullable) NSString *index;

/** The progress, in bytes, of this operation. */
@property(nonatomic, strong, nullable) GTLRFirestore_GoogleFirestoreAdminV1Progress *progressBytes;

/** The progress, in documents, of this operation. */
@property(nonatomic, strong, nullable) GTLRFirestore_GoogleFirestoreAdminV1Progress *progressDocuments;

/** The time this operation started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The state of the operation.
 *
 *  Likely values:
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata_State_Cancelled
 *        Request has finished being cancelled after user called
 *        google.longrunning.Operations.CancelOperation. (Value: "CANCELLED")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata_State_Cancelling
 *        Request is in the process of being cancelled after user called
 *        google.longrunning.Operations.CancelOperation on the operation.
 *        (Value: "CANCELLING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata_State_Failed
 *        Request has finished being processed, but encountered an error.
 *        (Value: "FAILED")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata_State_Finalizing
 *        Request has been processed and is in its finalization stage. (Value:
 *        "FINALIZING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata_State_Initializing
 *        Request is being prepared for processing. (Value: "INITIALIZING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata_State_OperationStateUnspecified
 *        Unspecified. (Value: "OPERATION_STATE_UNSPECIFIED")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata_State_Processing
 *        Request is actively being processed. (Value: "PROCESSING")
 *    @arg @c kGTLRFirestore_GoogleFirestoreAdminV1IndexOperationMetadata_State_Successful
 *        Request has completed successfully. (Value: "SUCCESSFUL")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  The response for FirestoreAdmin.ListFields.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "fields" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirestore_GoogleFirestoreAdminV1ListFieldsResponse : GTLRCollectionObject

/**
 *  The requested fields.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirestore_GoogleFirestoreAdminV1Field *> *fields;

/**
 *  A page token that may be used to request another page of results. If blank,
 *  this is the last page.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response for FirestoreAdmin.ListIndexes.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "indexes" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirestore_GoogleFirestoreAdminV1ListIndexesResponse : GTLRCollectionObject

/**
 *  The requested indexes.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirestore_GoogleFirestoreAdminV1Index *> *indexes;

/**
 *  A page token that may be used to request another page of results. If blank,
 *  this is the last page.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The metadata message for google.cloud.location.Location.metadata.
 */
@interface GTLRFirestore_GoogleFirestoreAdminV1LocationMetadata : GTLRObject
@end


/**
 *  Describes the progress of the operation.
 *  Unit of work is generic and must be interpreted based on where Progress
 *  is used.
 */
@interface GTLRFirestore_GoogleFirestoreAdminV1Progress : GTLRObject

/**
 *  The amount of work completed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *completedWork;

/**
 *  The amount of work estimated.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedWork;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRFirestore_GoogleLongrunningCancelOperationRequest : GTLRObject
@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirestore_GoogleLongrunningListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirestore_GoogleLongrunningOperation *> *operations;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRFirestore_GoogleLongrunningOperation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRFirestore_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRFirestore_GoogleLongrunningOperation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the
 *  `name` should have the format of `operations/some/unique/name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRFirestore_GoogleLongrunningOperation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirestore_GoogleLongrunningOperation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirestore_GoogleLongrunningOperation_Response : GTLRObject
@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirestore_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirestore_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRFirestore_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name.
 *  For example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRFirestore_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRFirestore_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations.
 *  For example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirestore_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirestore_Location_Metadata : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRFirestore_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirestore_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRFirestore_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirestore_Status_Details_Item : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
