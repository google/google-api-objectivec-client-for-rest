// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Scheduler API (cloudscheduler/v1beta1)
// Description:
//   Creates and manages jobs run on a regular recurring schedule.
// Documentation:
//   https://cloud.google.com/scheduler/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudScheduler_AppEngineHttpTarget;
@class GTLRCloudScheduler_AppEngineHttpTarget_Headers;
@class GTLRCloudScheduler_AppEngineRouting;
@class GTLRCloudScheduler_HttpTarget;
@class GTLRCloudScheduler_HttpTarget_Headers;
@class GTLRCloudScheduler_Job;
@class GTLRCloudScheduler_Location;
@class GTLRCloudScheduler_Location_Labels;
@class GTLRCloudScheduler_Location_Metadata;
@class GTLRCloudScheduler_PubsubMessage_Attributes;
@class GTLRCloudScheduler_PubsubTarget;
@class GTLRCloudScheduler_PubsubTarget_Attributes;
@class GTLRCloudScheduler_RetryConfig;
@class GTLRCloudScheduler_Status;
@class GTLRCloudScheduler_Status_Details_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudScheduler_AppEngineHttpTarget.httpMethod

/**
 *  HTTP DELETE
 *
 *  Value: "DELETE"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_AppEngineHttpTarget_HttpMethod_Delete;
/**
 *  HTTP GET
 *
 *  Value: "GET"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_AppEngineHttpTarget_HttpMethod_Get;
/**
 *  HTTP HEAD
 *
 *  Value: "HEAD"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_AppEngineHttpTarget_HttpMethod_Head;
/**
 *  HTTP method unspecified. Defaults to POST.
 *
 *  Value: "HTTP_METHOD_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_AppEngineHttpTarget_HttpMethod_HttpMethodUnspecified;
/**
 *  HTTP OPTIONS
 *
 *  Value: "OPTIONS"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_AppEngineHttpTarget_HttpMethod_Options;
/**
 *  HTTP PATCH
 *
 *  Value: "PATCH"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_AppEngineHttpTarget_HttpMethod_Patch;
/**
 *  HTTP POST
 *
 *  Value: "POST"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_AppEngineHttpTarget_HttpMethod_Post;
/**
 *  HTTP PUT
 *
 *  Value: "PUT"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_AppEngineHttpTarget_HttpMethod_Put;

// ----------------------------------------------------------------------------
// GTLRCloudScheduler_HttpTarget.httpMethod

/**
 *  HTTP DELETE
 *
 *  Value: "DELETE"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_HttpTarget_HttpMethod_Delete;
/**
 *  HTTP GET
 *
 *  Value: "GET"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_HttpTarget_HttpMethod_Get;
/**
 *  HTTP HEAD
 *
 *  Value: "HEAD"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_HttpTarget_HttpMethod_Head;
/**
 *  HTTP method unspecified. Defaults to POST.
 *
 *  Value: "HTTP_METHOD_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_HttpTarget_HttpMethod_HttpMethodUnspecified;
/**
 *  HTTP OPTIONS
 *
 *  Value: "OPTIONS"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_HttpTarget_HttpMethod_Options;
/**
 *  HTTP PATCH
 *
 *  Value: "PATCH"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_HttpTarget_HttpMethod_Patch;
/**
 *  HTTP POST
 *
 *  Value: "POST"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_HttpTarget_HttpMethod_Post;
/**
 *  HTTP PUT
 *
 *  Value: "PUT"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_HttpTarget_HttpMethod_Put;

// ----------------------------------------------------------------------------
// GTLRCloudScheduler_Job.state

/**
 *  The job is disabled by the system due to error. The user
 *  cannot directly set a job to be disabled.
 *
 *  Value: "DISABLED"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_Job_State_Disabled;
/**
 *  The job is executing normally.
 *
 *  Value: "ENABLED"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_Job_State_Enabled;
/**
 *  The job is paused by the user. It will not execute. A user can
 *  intentionally pause the job using
 *  PauseJobRequest.
 *
 *  Value: "PAUSED"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_Job_State_Paused;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_Job_State_StateUnspecified;
/**
 *  The job state resulting from a failed CloudScheduler.UpdateJob
 *  operation. To recover a job from this state, retry
 *  CloudScheduler.UpdateJob until a successful response is received.
 *
 *  Value: "UPDATE_FAILED"
 */
GTLR_EXTERN NSString * const kGTLRCloudScheduler_Job_State_UpdateFailed;

/**
 *  App Engine target. The job will be pushed to a job handler by means
 *  of an HTTP request via an http_method such
 *  as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an
 *  HTTP response code in the range [200 - 299]. Error 503 is
 *  considered an App Engine system error instead of an application
 *  error. Requests returning error 503 will be retried regardless of
 *  retry configuration and not counted against retry counts. Any other
 *  response code, or a failure to receive a response before the
 *  deadline, constitutes a failed attempt.
 */
@interface GTLRCloudScheduler_AppEngineHttpTarget : GTLRObject

/** App Engine Routing setting for the job. */
@property(nonatomic, strong, nullable) GTLRCloudScheduler_AppEngineRouting *appEngineRouting;

/**
 *  Body.
 *  HTTP request body. A request body is allowed only if the HTTP method is
 *  POST or PUT. It will result in invalid argument error to set a body on a
 *  job with an incompatible HttpMethod.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *body;

/**
 *  HTTP request headers.
 *  This map contains the header field names and values. Headers can be set
 *  when the job is created.
 *  Cloud Scheduler sets some headers to default values:
 *  * `User-Agent`: By default, this header is
 *  `"AppEngine-Google; (+http://code.google.com/appengine)"`.
 *  This header can be modified, but Cloud Scheduler will append
 *  `"AppEngine-Google; (+http://code.google.com/appengine)"` to the
 *  modified `User-Agent`.
 *  * `X-CloudScheduler`: This header will be set to true.
 *  If the job has an body, Cloud Scheduler sets the
 *  following headers:
 *  * `Content-Type`: By default, the `Content-Type` header is set to
 *  `"application/octet-stream"`. The default can be overridden by explictly
 *  setting `Content-Type` to a particular media type when the job is
 *  created.
 *  For example, `Content-Type` can be set to `"application/json"`.
 *  * `Content-Length`: This is computed by Cloud Scheduler. This value is
 *  output only. It cannot be changed.
 *  The headers below are output only. They cannot be set or overridden:
 *  * `X-Google-*`: For Google internal use only.
 *  * `X-AppEngine-*`: For Google internal use only.
 *  In addition, some App Engine headers, which contain
 *  job-specific information, are also be sent to the job handler.
 */
@property(nonatomic, strong, nullable) GTLRCloudScheduler_AppEngineHttpTarget_Headers *headers;

/**
 *  The HTTP method to use for the request. PATCH and OPTIONS are not
 *  permitted.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudScheduler_AppEngineHttpTarget_HttpMethod_Delete HTTP
 *        DELETE (Value: "DELETE")
 *    @arg @c kGTLRCloudScheduler_AppEngineHttpTarget_HttpMethod_Get HTTP GET
 *        (Value: "GET")
 *    @arg @c kGTLRCloudScheduler_AppEngineHttpTarget_HttpMethod_Head HTTP HEAD
 *        (Value: "HEAD")
 *    @arg @c kGTLRCloudScheduler_AppEngineHttpTarget_HttpMethod_HttpMethodUnspecified
 *        HTTP method unspecified. Defaults to POST. (Value:
 *        "HTTP_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRCloudScheduler_AppEngineHttpTarget_HttpMethod_Options HTTP
 *        OPTIONS (Value: "OPTIONS")
 *    @arg @c kGTLRCloudScheduler_AppEngineHttpTarget_HttpMethod_Patch HTTP
 *        PATCH (Value: "PATCH")
 *    @arg @c kGTLRCloudScheduler_AppEngineHttpTarget_HttpMethod_Post HTTP POST
 *        (Value: "POST")
 *    @arg @c kGTLRCloudScheduler_AppEngineHttpTarget_HttpMethod_Put HTTP PUT
 *        (Value: "PUT")
 */
@property(nonatomic, copy, nullable) NSString *httpMethod;

/**
 *  The relative URI.
 *  The relative URL must begin with "/" and must be a valid HTTP relative URL.
 *  It can contain a path, query string arguments, and `#` fragments.
 *  If the relative URL is empty, then the root path "/" will be used.
 *  No spaces are allowed, and the maximum length allowed is 2083 characters.
 */
@property(nonatomic, copy, nullable) NSString *relativeUri;

@end


/**
 *  HTTP request headers.
 *  This map contains the header field names and values. Headers can be set
 *  when the job is created.
 *  Cloud Scheduler sets some headers to default values:
 *  * `User-Agent`: By default, this header is
 *  `"AppEngine-Google; (+http://code.google.com/appengine)"`.
 *  This header can be modified, but Cloud Scheduler will append
 *  `"AppEngine-Google; (+http://code.google.com/appengine)"` to the
 *  modified `User-Agent`.
 *  * `X-CloudScheduler`: This header will be set to true.
 *  If the job has an body, Cloud Scheduler sets the
 *  following headers:
 *  * `Content-Type`: By default, the `Content-Type` header is set to
 *  `"application/octet-stream"`. The default can be overridden by explictly
 *  setting `Content-Type` to a particular media type when the job is
 *  created.
 *  For example, `Content-Type` can be set to `"application/json"`.
 *  * `Content-Length`: This is computed by Cloud Scheduler. This value is
 *  output only. It cannot be changed.
 *  The headers below are output only. They cannot be set or overridden:
 *  * `X-Google-*`: For Google internal use only.
 *  * `X-AppEngine-*`: For Google internal use only.
 *  In addition, some App Engine headers, which contain
 *  job-specific information, are also be sent to the job handler.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudScheduler_AppEngineHttpTarget_Headers : GTLRObject
@end


/**
 *  App Engine Routing.
 *  For more information about services, versions, and instances see
 *  [An Overview of App
 *  Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine),
 *  [Microservices Architecture on Google App
 *  Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine),
 *  [App Engine Standard request
 *  routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed),
 *  and
 *  [App Engine Flex request
 *  routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
 */
@interface GTLRCloudScheduler_AppEngineRouting : GTLRObject

/**
 *  Output only. The host that the job is sent to.
 *  For more information about how App Engine requests are routed, see
 *  [here](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
 *  The host is constructed as:
 *  * `host = [application_domain_name]`</br>
 *  `| [service] + '.' + [application_domain_name]`</br>
 *  `| [version] + '.' + [application_domain_name]`</br>
 *  `| [version_dot_service]+ '.' + [application_domain_name]`</br>
 *  `| [instance] + '.' + [application_domain_name]`</br>
 *  `| [instance_dot_service] + '.' + [application_domain_name]`</br>
 *  `| [instance_dot_version] + '.' + [application_domain_name]`</br>
 *  `| [instance_dot_version_dot_service] + '.' + [application_domain_name]`
 *  * `application_domain_name` = The domain name of the app, for
 *  example <app-id>.appspot.com, which is associated with the
 *  job's project ID.
 *  * `service =` service
 *  * `version =` version
 *  * `version_dot_service =`
 *  version `+ '.' +`
 *  service
 *  * `instance =` instance
 *  * `instance_dot_service =`
 *  instance `+ '.' +`
 *  service
 *  * `instance_dot_version =`
 *  instance `+ '.' +`
 *  version
 *  * `instance_dot_version_dot_service =`
 *  instance `+ '.' +`
 *  version `+ '.' +`
 *  service
 *  If service is empty, then the job will be sent
 *  to the service which is the default service when the job is attempted.
 *  If version is empty, then the job will be sent
 *  to the version which is the default version when the job is attempted.
 *  If instance is empty, then the job will be
 *  sent to an instance which is available when the job is attempted.
 *  If service,
 *  version, or
 *  instance is invalid, then the job will be sent
 *  to the default version of the default service when the job is attempted.
 */
@property(nonatomic, copy, nullable) NSString *host;

/**
 *  App instance.
 *  By default, the job is sent to an instance which is available when
 *  the job is attempted.
 *  Requests can only be sent to a specific instance if
 *  [manual scaling is used in App Engine
 *  Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes).
 *  App Engine Flex does not support instances. For more information, see
 *  [App Engine Standard request
 *  routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)
 *  and
 *  [App Engine Flex request
 *  routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
 */
@property(nonatomic, copy, nullable) NSString *instance;

/**
 *  App service.
 *  By default, the job is sent to the service which is the default
 *  service when the job is attempted.
 */
@property(nonatomic, copy, nullable) NSString *service;

/**
 *  App version.
 *  By default, the job is sent to the version which is the default
 *  version when the job is attempted.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRCloudScheduler_Empty : GTLRObject
@end


/**
 *  Http target. The job will be pushed to the job handler by means of
 *  an HTTP request via an http_method such as HTTP
 *  POST, HTTP GET, etc. The job is acknowledged by means of an HTTP
 *  response code in the range [200 - 299]. A failure to receive a response
 *  constitutes a failed execution. For a redirected request, the response
 *  returned by the redirected request is considered.
 */
@interface GTLRCloudScheduler_HttpTarget : GTLRObject

/**
 *  HTTP request body. A request body is allowed only if the HTTP
 *  method is POST, PUT, or PATCH. It is an error to set body on a job with an
 *  incompatible HttpMethod.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *body;

/**
 *  The user can specify HTTP request headers to send with the job's
 *  HTTP request. This map contains the header field names and
 *  values. Repeated headers are not supported, but a header value can
 *  contain commas. These headers represent a subset of the headers
 *  that will accompany the job's HTTP request. Some HTTP request
 *  headers will be ignored or replaced. A partial list of headers that
 *  will be ignored or replaced is below:
 *  - Host: This will be computed by Cloud Scheduler and derived from
 *  uri.
 *  * `Content-Length`: This will be computed by Cloud Scheduler.
 *  * `User-Agent`: This will be set to `"Google-Cloud-Scheduler"`.
 *  * `X-Google-*`: Google internal use only.
 *  * `X-AppEngine-*`: Google internal use only.
 *  The total size of headers must be less than 80KB.
 */
@property(nonatomic, strong, nullable) GTLRCloudScheduler_HttpTarget_Headers *headers;

/**
 *  Which HTTP method to use for the request.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudScheduler_HttpTarget_HttpMethod_Delete HTTP DELETE
 *        (Value: "DELETE")
 *    @arg @c kGTLRCloudScheduler_HttpTarget_HttpMethod_Get HTTP GET (Value:
 *        "GET")
 *    @arg @c kGTLRCloudScheduler_HttpTarget_HttpMethod_Head HTTP HEAD (Value:
 *        "HEAD")
 *    @arg @c kGTLRCloudScheduler_HttpTarget_HttpMethod_HttpMethodUnspecified
 *        HTTP method unspecified. Defaults to POST. (Value:
 *        "HTTP_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRCloudScheduler_HttpTarget_HttpMethod_Options HTTP OPTIONS
 *        (Value: "OPTIONS")
 *    @arg @c kGTLRCloudScheduler_HttpTarget_HttpMethod_Patch HTTP PATCH (Value:
 *        "PATCH")
 *    @arg @c kGTLRCloudScheduler_HttpTarget_HttpMethod_Post HTTP POST (Value:
 *        "POST")
 *    @arg @c kGTLRCloudScheduler_HttpTarget_HttpMethod_Put HTTP PUT (Value:
 *        "PUT")
 */
@property(nonatomic, copy, nullable) NSString *httpMethod;

/**
 *  Required.
 *  The full URI path that the request will be sent to. This string
 *  must begin with either "http://" or "https://". Some examples of
 *  valid values for uri are:
 *  `http://acme.com` and `https://acme.com/sales:8080`. Cloud Scheduler will
 *  encode some characters for safety and compatibility. The maximum allowed
 *  URL length is 2083 characters after encoding.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  The user can specify HTTP request headers to send with the job's
 *  HTTP request. This map contains the header field names and
 *  values. Repeated headers are not supported, but a header value can
 *  contain commas. These headers represent a subset of the headers
 *  that will accompany the job's HTTP request. Some HTTP request
 *  headers will be ignored or replaced. A partial list of headers that
 *  will be ignored or replaced is below:
 *  - Host: This will be computed by Cloud Scheduler and derived from
 *  uri.
 *  * `Content-Length`: This will be computed by Cloud Scheduler.
 *  * `User-Agent`: This will be set to `"Google-Cloud-Scheduler"`.
 *  * `X-Google-*`: Google internal use only.
 *  * `X-AppEngine-*`: Google internal use only.
 *  The total size of headers must be less than 80KB.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudScheduler_HttpTarget_Headers : GTLRObject
@end


/**
 *  Configuration for a job.
 *  The maximum allowed size for a job is 100KB.
 */
@interface GTLRCloudScheduler_Job : GTLRObject

/** App Engine HTTP target. */
@property(nonatomic, strong, nullable) GTLRCloudScheduler_AppEngineHttpTarget *appEngineHttpTarget;

/**
 *  A human-readable description for the job. This string must not contain
 *  more than 500 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** HTTP target. */
@property(nonatomic, strong, nullable) GTLRCloudScheduler_HttpTarget *httpTarget;

/** Output only. The time the last job attempt started. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastAttemptTime;

/**
 *  The job name. For example:
 *  `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`.
 *  * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]),
 *  hyphens (-), colons (:), or periods (.).
 *  For more information, see
 *  [Identifying
 *  projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects)
 *  * `LOCATION_ID` is the canonical ID for the job's location.
 *  The list of available locations can be obtained by calling
 *  ListLocations.
 *  For more information, see https://cloud.google.com/about/locations/.
 *  * `JOB_ID` can contain only letters ([A-Za-z]), numbers ([0-9]),
 *  hyphens (-), or underscores (_). The maximum length is 500 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Pub/Sub target. */
@property(nonatomic, strong, nullable) GTLRCloudScheduler_PubsubTarget *pubsubTarget;

/** Settings that determine the retry behavior. */
@property(nonatomic, strong, nullable) GTLRCloudScheduler_RetryConfig *retryConfig;

/**
 *  Required.
 *  Describes the schedule on which the job will be executed.
 *  As a general rule, execution `n + 1` of a job will not begin
 *  until execution `n` has finished. Cloud Scheduler will never
 *  allow two simultaneously outstanding executions. For example,
 *  this implies that if the `n+1`th execution is scheduled to run at
 *  16:00 but the `n`th execution takes until 16:15, the `n+1`th
 *  execution will not start until `16:15`.
 *  A scheduled start time will be delayed if the previous
 *  execution has not ended when its scheduled time occurs.
 *  If retry_count > 0 and a job attempt fails,
 *  the job will be tried a total of retry_count
 *  times, with exponential backoff, until the next scheduled start
 *  time.
 *  The schedule can be either of the following types:
 *  * [Crontab](http://en.wikipedia.org/wiki/Cron#Overview)
 *  * English-like
 *  [schedule](https://cloud.google.com/scheduler/docs/configuring/cron-job-schedules)
 */
@property(nonatomic, copy, nullable) NSString *schedule;

/**
 *  Output only. The next time the job is scheduled. Note that this may be a
 *  retry of a previously failed attempt or the next execution time
 *  according to the schedule.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleTime;

/**
 *  Output only. State of the job.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudScheduler_Job_State_Disabled The job is disabled by the
 *        system due to error. The user
 *        cannot directly set a job to be disabled. (Value: "DISABLED")
 *    @arg @c kGTLRCloudScheduler_Job_State_Enabled The job is executing
 *        normally. (Value: "ENABLED")
 *    @arg @c kGTLRCloudScheduler_Job_State_Paused The job is paused by the
 *        user. It will not execute. A user can
 *        intentionally pause the job using
 *        PauseJobRequest. (Value: "PAUSED")
 *    @arg @c kGTLRCloudScheduler_Job_State_StateUnspecified Unspecified state.
 *        (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudScheduler_Job_State_UpdateFailed The job state resulting
 *        from a failed CloudScheduler.UpdateJob
 *        operation. To recover a job from this state, retry
 *        CloudScheduler.UpdateJob until a successful response is received.
 *        (Value: "UPDATE_FAILED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. The response from the target for the last attempted execution.
 */
@property(nonatomic, strong, nullable) GTLRCloudScheduler_Status *status;

/**
 *  Specifies the time zone to be used in interpreting
 *  schedule. The value of this field must be a time
 *  zone name from the [tz database](http://en.wikipedia.org/wiki/Tz_database).
 *  Note that some time zones include a provision for
 *  daylight savings time. The rules for daylight saving time are
 *  determined by the chosen tz. For UTC use the string "utc". If a
 *  time zone is not specified, the default will be in UTC (also known
 *  as GMT).
 */
@property(nonatomic, copy, nullable) NSString *timeZone;

/** Output only. The creation time of the job. */
@property(nonatomic, strong, nullable) GTLRDateTime *userUpdateTime;

@end


/**
 *  Response message for listing jobs using ListJobs.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "jobs" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudScheduler_ListJobsResponse : GTLRCollectionObject

/**
 *  The list of jobs.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudScheduler_Job *> *jobs;

/**
 *  A token to retrieve next page of results. Pass this value in the
 *  page_token field in the subsequent call to
 *  ListJobs to retrieve the next page of results.
 *  If this is empty it indicates that there are no more results
 *  through which to paginate.
 *  The page token is valid for only 2 hours.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudScheduler_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudScheduler_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRCloudScheduler_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name.
 *  For example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCloudScheduler_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRCloudScheduler_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations.
 *  For example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudScheduler_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudScheduler_Location_Metadata : GTLRObject
@end


/**
 *  Request message for PauseJob.
 */
@interface GTLRCloudScheduler_PauseJobRequest : GTLRObject
@end


/**
 *  A message that is published by publishers and consumed by subscribers. The
 *  message must contain either a non-empty data field or at least one
 *  attribute.
 *  Note that client libraries represent this object differently
 *  depending on the language. See the corresponding
 *  <a href="https://cloud.google.com/pubsub/docs/reference/libraries">client
 *  library documentation</a> for more information. See
 *  <a href="https://cloud.google.com/pubsub/quotas">Quotas and limits</a>
 *  for more information about message limits.
 */
@interface GTLRCloudScheduler_PubsubMessage : GTLRObject

/** Optional attributes for this message. */
@property(nonatomic, strong, nullable) GTLRCloudScheduler_PubsubMessage_Attributes *attributes;

/**
 *  The message data field. If this field is empty, the message must contain
 *  at least one attribute.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  ID of this message, assigned by the server when the message is published.
 *  Guaranteed to be unique within the topic. This value may be read by a
 *  subscriber that receives a `PubsubMessage` via a `Pull` call or a push
 *  delivery. It must not be populated by the publisher in a `Publish` call.
 */
@property(nonatomic, copy, nullable) NSString *messageId;

/**
 *  The time at which the message was published, populated by the server when
 *  it receives the `Publish` call. It must not be populated by the
 *  publisher in a `Publish` call.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishTime;

@end


/**
 *  Optional attributes for this message.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudScheduler_PubsubMessage_Attributes : GTLRObject
@end


/**
 *  Pub/Sub target. The job will be delivered by publishing a message to
 *  the given Pub/Sub topic.
 */
@interface GTLRCloudScheduler_PubsubTarget : GTLRObject

/**
 *  Attributes for PubsubMessage.
 *  Pubsub message must contain either non-empty data, or at least one
 *  attribute.
 */
@property(nonatomic, strong, nullable) GTLRCloudScheduler_PubsubTarget_Attributes *attributes;

/**
 *  The message payload for PubsubMessage.
 *  Pubsub message must contain either non-empty data, or at least one
 *  attribute.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  Required.
 *  The name of the Cloud Pub/Sub topic to which messages will
 *  be published when a job is delivered. The topic name must be in the
 *  same format as required by PubSub's
 *  [PublishRequest.name](https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#publishrequest),
 *  for example `projects/PROJECT_ID/topics/TOPIC_ID`.
 *  The topic must be in the same project as the Cloud Scheduler job.
 */
@property(nonatomic, copy, nullable) NSString *topicName;

@end


/**
 *  Attributes for PubsubMessage.
 *  Pubsub message must contain either non-empty data, or at least one
 *  attribute.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudScheduler_PubsubTarget_Attributes : GTLRObject
@end


/**
 *  Request message for ResumeJob.
 */
@interface GTLRCloudScheduler_ResumeJobRequest : GTLRObject
@end


/**
 *  Settings that determine the retry behavior.
 *  By default, if a job does not complete successfully (meaning that
 *  an acknowledgement is not received from the handler, then it will be retried
 *  with exponential backoff according to the settings in RetryConfig.
 */
@interface GTLRCloudScheduler_RetryConfig : GTLRObject

/**
 *  The maximum amount of time to wait before retrying a job after
 *  it fails.
 *  The default value of this field is 1 hour.
 */
@property(nonatomic, strong, nullable) GTLRDuration *maxBackoffDuration;

/**
 *  The time between retries will double `max_doublings` times.
 *  A job's retry interval starts at
 *  min_backoff_duration, then doubles
 *  `max_doublings` times, then increases linearly, and finally
 *  retries retries at intervals of
 *  max_backoff_duration up to
 *  retry_count times.
 *  For example, if min_backoff_duration is
 *  10s, max_backoff_duration is 300s, and
 *  `max_doublings` is 3, then the a job will first be retried in 10s. The
 *  retry interval will double three times, and then increase linearly by
 *  2^3 * 10s. Finally, the job will retry at intervals of
 *  max_backoff_duration until the job has
 *  been attempted retry_count times. Thus, the
 *  requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, ....
 *  The default value of this field is 5.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxDoublings;

/**
 *  The time limit for retrying a failed job, measured from time when an
 *  execution was first attempted. If specified with
 *  retry_count, the job will be retried until both limits are
 *  reached.
 *  The default value for max_retry_duration is zero, which means retry
 *  duration is unlimited.
 */
@property(nonatomic, strong, nullable) GTLRDuration *maxRetryDuration;

/**
 *  The minimum amount of time to wait before retrying a job after
 *  it fails.
 *  The default value of this field is 5 seconds.
 */
@property(nonatomic, strong, nullable) GTLRDuration *minBackoffDuration;

/**
 *  The number of attempts that the system will make to run a job using the
 *  exponential backoff procedure described by
 *  max_doublings.
 *  The default value of retry_count is zero.
 *  If retry_count is zero, a job attempt will *not* be retried if
 *  it fails. Instead the Cloud Scheduler system will wait for the
 *  next scheduled execution time.
 *  If retry_count is set to a non-zero number then Cloud Scheduler
 *  will retry failed attempts, using exponential backoff,
 *  retry_count times, or until the next scheduled execution time,
 *  whichever comes first.
 *  Values greater than 5 and negative values are not allowed.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *retryCount;

@end


/**
 *  Request message for forcing a job to run now using
 *  RunJob.
 */
@interface GTLRCloudScheduler_RunJobRequest : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRCloudScheduler_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudScheduler_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudScheduler_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudScheduler_Status_Details_Item : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
