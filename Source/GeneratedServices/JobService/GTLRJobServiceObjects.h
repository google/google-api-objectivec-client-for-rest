// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Job Discovery (jobs/v2)
// Description:
//   Cloud Job Discovery provides the capability to create, read, update, and
//   delete job postings, as well as search jobs based on keywords and filters.
// Documentation:
//   https://cloud.google.com/job-discovery/docs

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRJobService_BucketizedCount;
@class GTLRJobService_BucketRange;
@class GTLRJobService_CommuteInfo;
@class GTLRJobService_CommutePreference;
@class GTLRJobService_Company;
@class GTLRJobService_CompanyInfoSource;
@class GTLRJobService_CompensationEntry;
@class GTLRJobService_CompensationFilter;
@class GTLRJobService_CompensationHistogramRequest;
@class GTLRJobService_CompensationHistogramResult;
@class GTLRJobService_CompensationInfo;
@class GTLRJobService_CompensationRange;
@class GTLRJobService_CompletionResult;
@class GTLRJobService_CustomAttribute;
@class GTLRJobService_CustomAttributeHistogramRequest;
@class GTLRJobService_CustomAttributeHistogramResult;
@class GTLRJobService_CustomAttributeHistogramResult_StringValueHistogramResult;
@class GTLRJobService_CustomField;
@class GTLRJobService_CustomFieldFilter;
@class GTLRJobService_Date;
@class GTLRJobService_DeviceInfo;
@class GTLRJobService_ExtendedCompensationFilter;
@class GTLRJobService_ExtendedCompensationInfo;
@class GTLRJobService_ExtendedCompensationInfoCompensationEntry;
@class GTLRJobService_ExtendedCompensationInfoCompensationRange;
@class GTLRJobService_ExtendedCompensationInfoDecimal;
@class GTLRJobService_Filter;
@class GTLRJobService_HistogramFacets;
@class GTLRJobService_HistogramResult;
@class GTLRJobService_HistogramResult_Values;
@class GTLRJobService_HistogramResults;
@class GTLRJobService_Job;
@class GTLRJobService_Job_CustomAttributes;
@class GTLRJobService_Job_FilterableCustomFields;
@class GTLRJobService_Job_UnindexedCustomFields;
@class GTLRJobService_JobFilters;
@class GTLRJobService_JobFilters_CustomFieldFilters;
@class GTLRJobService_JobLocation;
@class GTLRJobService_JobQuery;
@class GTLRJobService_LatLng;
@class GTLRJobService_LocationFilter;
@class GTLRJobService_MatchingJob;
@class GTLRJobService_Money;
@class GTLRJobService_NumericBucketingOption;
@class GTLRJobService_NumericBucketingResult;
@class GTLRJobService_PostalAddress;
@class GTLRJobService_RequestMetadata;
@class GTLRJobService_ResponseMetadata;
@class GTLRJobService_SpellingCorrection;
@class GTLRJobService_StringValues;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRJobService_CommutePreference.method

/**
 *  Commute method is not specified.
 *
 *  Value: "COMMUTE_METHOD_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CommutePreference_Method_CommuteMethodUnspecified;
/**
 *  Commute time is calculated based on driving time.
 *
 *  Value: "DRIVING"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CommutePreference_Method_Driving;
/**
 *  Commute time is calculated based on public transit including bus, metro,
 *  subway, etc.
 *
 *  Value: "TRANSIT"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CommutePreference_Method_Transit;

// ----------------------------------------------------------------------------
// GTLRJobService_CommutePreference.roadTraffic

/**
 *  Commute time calculation takes in account the peak traffic impact.
 *
 *  Value: "BUSY_HOUR"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CommutePreference_RoadTraffic_BusyHour;
/**
 *  Road traffic situation is not specified.
 *
 *  Value: "ROAD_TRAFFIC_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CommutePreference_RoadTraffic_RoadTrafficUnspecified;
/**
 *  Optimal commute time without considering any traffic impact.
 *
 *  Value: "TRAFFIC_FREE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CommutePreference_RoadTraffic_TrafficFree;

// ----------------------------------------------------------------------------
// GTLRJobService_Company.companySize

/**
 *  The company has between 1,000 and 4,999 employees.
 *
 *  Value: "BIG"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Company_CompanySize_Big;
/**
 *  The company has between 5,000 and 9,999 employees.
 *
 *  Value: "BIGGER"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Company_CompanySize_Bigger;
/**
 *  Default value if the size is not specified.
 *
 *  Value: "COMPANY_SIZE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Company_CompanySize_CompanySizeUnspecified;
/**
 *  The company has 10,000 or more employees.
 *
 *  Value: "GIANT"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Company_CompanySize_Giant;
/**
 *  The company has between 500 and 999 employees.
 *
 *  Value: "MEDIUM"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Company_CompanySize_Medium;
/**
 *  The company has less than 50 employees.
 *
 *  Value: "MINI"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Company_CompanySize_Mini;
/**
 *  The company has between 50 and 99 employees.
 *
 *  Value: "SMALL"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Company_CompanySize_Small;
/**
 *  The company has between 100 and 499 employees.
 *
 *  Value: "SMEDIUM"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Company_CompanySize_Smedium;

// ----------------------------------------------------------------------------
// GTLRJobService_CompensationEntry.type

/**
 *  Base compensation: Refers to the fixed amount of money paid to an
 *  employee by an employer in return for work performed. Base compensation
 *  does not include benefits, bonuses or any other potential compensation
 *  from an employer.
 *
 *  Value: "BASE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Type_Base;
/**
 *  Bonus.
 *
 *  Value: "BONUS"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Type_Bonus;
/**
 *  Commission.
 *
 *  Value: "COMMISSIONS"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Type_Commissions;
/**
 *  Default value. Equivalent to OTHER_COMPENSATION_TYPE.
 *
 *  Value: "COMPENSATION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Type_CompensationTypeUnspecified;
/**
 *  Equity.
 *
 *  Value: "EQUITY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Type_Equity;
/**
 *  Other compensation type.
 *
 *  Value: "OTHER_COMPENSATION_TYPE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Type_OtherCompensationType;
/**
 *  Profit sharing.
 *
 *  Value: "PROFIT_SHARING"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Type_ProfitSharing;
/**
 *  Signing bonus.
 *
 *  Value: "SIGNING_BONUS"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Type_SigningBonus;
/**
 *  Tips.
 *
 *  Value: "TIPS"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Type_Tips;

// ----------------------------------------------------------------------------
// GTLRJobService_CompensationEntry.unit

/**
 *  Default value. Equivalent to OTHER_COMPENSATION_UNIT.
 *
 *  Value: "COMPENSATION_UNIT_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Unit_CompensationUnitUnspecified;
/**
 *  Daily.
 *
 *  Value: "DAILY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Unit_Daily;
/**
 *  Hourly.
 *
 *  Value: "HOURLY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Unit_Hourly;
/**
 *  Monthly.
 *
 *  Value: "MONTHLY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Unit_Monthly;
/**
 *  One time.
 *
 *  Value: "ONE_TIME"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Unit_OneTime;
/**
 *  Other compensation units.
 *
 *  Value: "OTHER_COMPENSATION_UNIT"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Unit_OtherCompensationUnit;
/**
 *  Weekly
 *
 *  Value: "WEEKLY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Unit_Weekly;
/**
 *  Yearly.
 *
 *  Value: "YEARLY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationEntry_Unit_Yearly;

// ----------------------------------------------------------------------------
// GTLRJobService_CompensationFilter.type

/**
 *  Filter by annualized base compensation amount and ** base compensation
 *  entry's ** unit. Populate range and zero or more units.
 *
 *  Value: "ANNUALIZED_BASE_AMOUNT"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationFilter_Type_AnnualizedBaseAmount;
/**
 *  Filter by annualized total compensation amount and ** base compensation
 *  entry's ** unit . Populate range and zero or more units.
 *
 *  Value: "ANNUALIZED_TOTAL_AMOUNT"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationFilter_Type_AnnualizedTotalAmount;
/**
 *  Filter type unspecified. Position holder, INVALID, should never be used.
 *
 *  Value: "FILTER_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationFilter_Type_FilterTypeUnspecified;
/**
 *  Filter by ** base compensation entry's ** unit and amount / range. A job
 *  is a match if and only if the job contains a base CompensationEntry, and
 *  the base entry's unit matches provided compensation_units and amount
 *  or range overlaps with provided compensation_range.
 *  See CompensationInfo.CompensationEntry for definition of
 *  base compensation entry.
 *  Set exactly one units and populate range.
 *
 *  Value: "UNIT_AND_AMOUNT"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationFilter_Type_UnitAndAmount;
/**
 *  Filter by ** base compensation entry's ** unit. A job is a match if and
 *  only if the job contains a base CompensationEntry and the base
 *  CompensationEntry's unit matches provided units.
 *  Populate one or more units.
 *  See CompensationInfo.CompensationEntry for definition of
 *  base compensation entry.
 *
 *  Value: "UNIT_ONLY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationFilter_Type_UnitOnly;

// ----------------------------------------------------------------------------
// GTLRJobService_CompensationFilter.units

/** Value: "COMPENSATION_UNIT_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationFilter_Units_CompensationUnitUnspecified;
/** Value: "DAILY" */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationFilter_Units_Daily;
/** Value: "HOURLY" */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationFilter_Units_Hourly;
/** Value: "MONTHLY" */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationFilter_Units_Monthly;
/** Value: "ONE_TIME" */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationFilter_Units_OneTime;
/** Value: "OTHER_COMPENSATION_UNIT" */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationFilter_Units_OtherCompensationUnit;
/** Value: "WEEKLY" */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationFilter_Units_Weekly;
/** Value: "YEARLY" */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationFilter_Units_Yearly;

// ----------------------------------------------------------------------------
// GTLRJobService_CompensationHistogramRequest.type

/**
 *  Histogram by job's annualized base compensation. See CompensationEntry
 *  for definition of annualized base compensation.
 *
 *  Value: "ANNUALIZED_BASE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationHistogramRequest_Type_AnnualizedBase;
/**
 *  Histogram by job's annualized total compensation. See CompensationEntry
 *  for definition of annualized total compensation.
 *
 *  Value: "ANNUALIZED_TOTAL"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationHistogramRequest_Type_AnnualizedTotal;
/**
 *  Histogram by job's base compensation. See CompensationEntry for
 *  definition of base compensation.
 *
 *  Value: "BASE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationHistogramRequest_Type_Base;
/**
 *  Default value. Invalid.
 *
 *  Value: "COMPENSATION_HISTOGRAM_REQUEST_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationHistogramRequest_Type_CompensationHistogramRequestTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRJobService_CompensationHistogramResult.type

/**
 *  Histogram by job's annualized base compensation. See CompensationEntry
 *  for definition of annualized base compensation.
 *
 *  Value: "ANNUALIZED_BASE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationHistogramResult_Type_AnnualizedBase;
/**
 *  Histogram by job's annualized total compensation. See CompensationEntry
 *  for definition of annualized total compensation.
 *
 *  Value: "ANNUALIZED_TOTAL"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationHistogramResult_Type_AnnualizedTotal;
/**
 *  Histogram by job's base compensation. See CompensationEntry for
 *  definition of base compensation.
 *
 *  Value: "BASE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationHistogramResult_Type_Base;
/**
 *  Default value. Invalid.
 *
 *  Value: "COMPENSATION_HISTOGRAM_REQUEST_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationHistogramResult_Type_CompensationHistogramRequestTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRJobService_CompensationInfo.type

/**
 *  The job compensation is quoted based solely on commission.
 *
 *  Value: "COMMISSION"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationInfo_Type_Commission;
/**
 *  The job compensation is quoted by the number of hours worked.
 *
 *  Value: "HOURLY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationInfo_Type_Hourly;
/**
 *  The default value if the type is not specified.
 *
 *  Value: "JOB_COMPENSATION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationInfo_Type_JobCompensationTypeUnspecified;
/**
 *  The job compensation is not quoted according to the listed compensation
 *  options.
 *
 *  Value: "OTHER_TYPE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationInfo_Type_OtherType;
/**
 *  The job compensation is quoted by project completion.
 *
 *  Value: "PER_PROJECT"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationInfo_Type_PerProject;
/**
 *  The job compensation is quoted on an annual basis.
 *
 *  Value: "SALARY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompensationInfo_Type_Salary;

// ----------------------------------------------------------------------------
// GTLRJobService_CompletionResult.type

/**
 *  Suggest both job titles and company names.
 *
 *  Value: "COMBINED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompletionResult_Type_Combined;
/**
 *  Only suggest company names.
 *
 *  Value: "COMPANY_NAME"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompletionResult_Type_CompanyName;
/**
 *  Default value.
 *
 *  Value: "COMPLETION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompletionResult_Type_CompletionTypeUnspecified;
/**
 *  Only suggest job titles.
 *
 *  Value: "JOB_TITLE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CompletionResult_Type_JobTitle;

// ----------------------------------------------------------------------------
// GTLRJobService_CustomFieldFilter.type

/**
 *  Search for a match with all queries.
 *
 *  Value: "AND"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CustomFieldFilter_Type_And;
/**
 *  Default value.
 *
 *  Value: "FILTER_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CustomFieldFilter_Type_FilterTypeUnspecified;
/**
 *  Negate the set of filter values for the search.
 *
 *  Value: "NOT"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CustomFieldFilter_Type_Not;
/**
 *  Search for a match with any query.
 *
 *  Value: "OR"
 */
GTLR_EXTERN NSString * const kGTLRJobService_CustomFieldFilter_Type_Or;

// ----------------------------------------------------------------------------
// GTLRJobService_DeviceInfo.deviceType

/**
 *  An Android device native application.
 *
 *  Value: "ANDROID"
 */
GTLR_EXTERN NSString * const kGTLRJobService_DeviceInfo_DeviceType_Android;
/**
 *  The device type is not specified.
 *
 *  Value: "DEVICE_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_DeviceInfo_DeviceType_DeviceTypeUnspecified;
/**
 *  An iOS device native application.
 *
 *  Value: "IOS"
 */
GTLR_EXTERN NSString * const kGTLRJobService_DeviceInfo_DeviceType_Ios;
/**
 *  A mobile device web browser, such as a phone or tablet with a Chrome
 *  browser.
 *
 *  Value: "MOBILE_WEB"
 */
GTLR_EXTERN NSString * const kGTLRJobService_DeviceInfo_DeviceType_MobileWeb;
/**
 *  Other devices types.
 *
 *  Value: "OTHER"
 */
GTLR_EXTERN NSString * const kGTLRJobService_DeviceInfo_DeviceType_Other;
/**
 *  A desktop web browser, such as, Chrome, Firefox, Safari, or Internet
 *  Explorer)
 *
 *  Value: "WEB"
 */
GTLR_EXTERN NSString * const kGTLRJobService_DeviceInfo_DeviceType_Web;

// ----------------------------------------------------------------------------
// GTLRJobService_ExtendedCompensationFilter.compensationUnits

/** Value: "DAILY" */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationFilter_CompensationUnits_Daily;
/** Value: "EXTENDED_COMPENSATION_UNIT_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationFilter_CompensationUnits_ExtendedCompensationUnitUnspecified;
/** Value: "HOURLY" */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationFilter_CompensationUnits_Hourly;
/** Value: "MONTHLY" */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationFilter_CompensationUnits_Monthly;
/** Value: "ONE_TIME" */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationFilter_CompensationUnits_OneTime;
/** Value: "OTHER_COMPENSATION_UNIT" */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationFilter_CompensationUnits_OtherCompensationUnit;
/** Value: "WEEKLY" */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationFilter_CompensationUnits_Weekly;
/** Value: "YEARLY" */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationFilter_CompensationUnits_Yearly;

// ----------------------------------------------------------------------------
// GTLRJobService_ExtendedCompensationFilter.type

/**
 *  Filter by annualized base compensation amount and ** base compensation
 *  entry's ** unit. Populate compensation_range and zero or more
 *  compensation_units.
 *
 *  Value: "ANNUALIZED_BASE_AMOUNT"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationFilter_Type_AnnualizedBaseAmount;
/**
 *  Filter by annualized total compensation amount and ** base compensation
 *  entry's ** unit . Populate compensation_range and zero or more
 *  compensation_units.
 *
 *  Value: "ANNUALIZED_TOTAL_AMOUNT"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationFilter_Type_AnnualizedTotalAmount;
/**
 *  Filter type unspecified. Position holder, INVALID, should never be used.
 *
 *  Value: "FILTER_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationFilter_Type_FilterTypeUnspecified;
/**
 *  Filter by ** base compensation entry's ** unit and amount / range. A job
 *  is a match if and only if the job contains a base CompensationEntry, and
 *  the base entry's unit matches provided compensation_units and amount
 *  or range overlaps with provided compensation_range.
 *  See ExtendedCompensationInfo.CompensationEntry for definition of
 *  base compensation entry.
 *  Set exactly one
 *  compensation_units and populate
 *  compensation_range.
 *
 *  Value: "UNIT_AND_AMOUNT"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationFilter_Type_UnitAndAmount;
/**
 *  Filter by ** base compensation entry's ** unit. A job is a match if and
 *  only if the job contains a base CompensationEntry and the base
 *  CompensationEntry's unit matches provided compensation_units.
 *  Populate one or more compensation_units.
 *  See ExtendedCompensationInfo.CompensationEntry for definition of
 *  base compensation entry.
 *
 *  Value: "UNIT_ONLY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationFilter_Type_UnitOnly;

// ----------------------------------------------------------------------------
// GTLRJobService_ExtendedCompensationInfoCompensationEntry.type

/**
 *  Base compensation: Refers to the fixed amount of money paid to an
 *  employee by an employer in return for work performed. Base compensation
 *  does not include benefits, bonuses or any other potential compensation
 *  from an employer.
 *
 *  Value: "BASE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_Base;
/**
 *  Bonus.
 *
 *  Value: "BONUS"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_Bonus;
/**
 *  Commission.
 *
 *  Value: "COMMISSIONS"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_Commissions;
/**
 *  Equity.
 *
 *  Value: "EQUITY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_Equity;
/**
 *  Default value. Equivalent to OTHER_COMPENSATION_TYPE.
 *
 *  Value: "EXTENDED_COMPENSATION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_ExtendedCompensationTypeUnspecified;
/**
 *  Other compensation type.
 *
 *  Value: "OTHER_COMPENSATION_TYPE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_OtherCompensationType;
/**
 *  Profit sharing.
 *
 *  Value: "PROFIT_SHARING"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_ProfitSharing;
/**
 *  Signing bonus.
 *
 *  Value: "SIGNING_BONUS"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_SigningBonus;
/**
 *  Tips.
 *
 *  Value: "TIPS"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_Tips;

// ----------------------------------------------------------------------------
// GTLRJobService_ExtendedCompensationInfoCompensationEntry.unit

/**
 *  Daily.
 *
 *  Value: "DAILY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Unit_Daily;
/**
 *  Default value. Equivalent to OTHER_COMPENSATION_UNIT.
 *
 *  Value: "EXTENDED_COMPENSATION_UNIT_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Unit_ExtendedCompensationUnitUnspecified;
/**
 *  Hourly.
 *
 *  Value: "HOURLY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Unit_Hourly;
/**
 *  Monthly.
 *
 *  Value: "MONTHLY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Unit_Monthly;
/**
 *  One time.
 *
 *  Value: "ONE_TIME"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Unit_OneTime;
/**
 *  Other compensation units.
 *
 *  Value: "OTHER_COMPENSATION_UNIT"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Unit_OtherCompensationUnit;
/**
 *  Weekly
 *
 *  Value: "WEEKLY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Unit_Weekly;
/**
 *  Yearly.
 *
 *  Value: "YEARLY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Unit_Yearly;

// ----------------------------------------------------------------------------
// GTLRJobService_GetHistogramRequest.searchTypes

/** Value: "ADMIN1" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_Admin1;
/** Value: "ADMIN1_COUNTRY" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_Admin1Country;
/** Value: "BASE_COMPENSATION_UNIT" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_BaseCompensationUnit;
/** Value: "CATEGORY" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_Category;
/** Value: "CITY" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_City;
/** Value: "CITY_COORDINATE" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CityCoordinate;
/** Value: "COMPANY_DISPLAY_NAME" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CompanyDisplayName;
/** Value: "COMPANY_ID" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CompanyId;
/** Value: "COMPANY_SIZE" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CompanySize;
/** Value: "COMPANY_TITLE" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CompanyTitle;
/** Value: "COUNTRY" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_Country;
/** Value: "CUSTOM_FIELD_1" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField1;
/** Value: "CUSTOM_FIELD_10" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField10;
/** Value: "CUSTOM_FIELD_11" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField11;
/** Value: "CUSTOM_FIELD_12" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField12;
/** Value: "CUSTOM_FIELD_13" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField13;
/** Value: "CUSTOM_FIELD_14" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField14;
/** Value: "CUSTOM_FIELD_15" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField15;
/** Value: "CUSTOM_FIELD_16" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField16;
/** Value: "CUSTOM_FIELD_17" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField17;
/** Value: "CUSTOM_FIELD_18" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField18;
/** Value: "CUSTOM_FIELD_19" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField19;
/** Value: "CUSTOM_FIELD_2" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField2;
/** Value: "CUSTOM_FIELD_20" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField20;
/** Value: "CUSTOM_FIELD_3" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField3;
/** Value: "CUSTOM_FIELD_4" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField4;
/** Value: "CUSTOM_FIELD_5" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField5;
/** Value: "CUSTOM_FIELD_6" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField6;
/** Value: "CUSTOM_FIELD_7" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField7;
/** Value: "CUSTOM_FIELD_8" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField8;
/** Value: "CUSTOM_FIELD_9" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_CustomField9;
/** Value: "DATE_PUBLISHED" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_DatePublished;
/** Value: "EDUCATION_LEVEL" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_EducationLevel;
/** Value: "EMPLOYMENT_TYPE" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_EmploymentType;
/** Value: "EXPERIENCE_LEVEL" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_ExperienceLevel;
/** Value: "JOB_FIELD_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_JobFieldUnspecified;
/** Value: "LANGUAGE" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_Language;
/** Value: "LOCALE" */
GTLR_EXTERN NSString * const kGTLRJobService_GetHistogramRequest_SearchTypes_Locale;

// ----------------------------------------------------------------------------
// GTLRJobService_HistogramFacets.simpleHistogramFacets

/** Value: "ADMIN1" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_Admin1;
/** Value: "ADMIN1_COUNTRY" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_Admin1Country;
/** Value: "BASE_COMPENSATION_UNIT" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_BaseCompensationUnit;
/** Value: "CATEGORY" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_Category;
/** Value: "CITY" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_City;
/** Value: "CITY_COORDINATE" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CityCoordinate;
/** Value: "COMPANY_DISPLAY_NAME" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CompanyDisplayName;
/** Value: "COMPANY_ID" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CompanyId;
/** Value: "COMPANY_SIZE" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CompanySize;
/** Value: "COMPANY_TITLE" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CompanyTitle;
/** Value: "COUNTRY" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_Country;
/** Value: "CUSTOM_FIELD_1" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField1;
/** Value: "CUSTOM_FIELD_10" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField10;
/** Value: "CUSTOM_FIELD_11" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField11;
/** Value: "CUSTOM_FIELD_12" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField12;
/** Value: "CUSTOM_FIELD_13" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField13;
/** Value: "CUSTOM_FIELD_14" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField14;
/** Value: "CUSTOM_FIELD_15" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField15;
/** Value: "CUSTOM_FIELD_16" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField16;
/** Value: "CUSTOM_FIELD_17" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField17;
/** Value: "CUSTOM_FIELD_18" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField18;
/** Value: "CUSTOM_FIELD_19" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField19;
/** Value: "CUSTOM_FIELD_2" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField2;
/** Value: "CUSTOM_FIELD_20" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField20;
/** Value: "CUSTOM_FIELD_3" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField3;
/** Value: "CUSTOM_FIELD_4" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField4;
/** Value: "CUSTOM_FIELD_5" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField5;
/** Value: "CUSTOM_FIELD_6" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField6;
/** Value: "CUSTOM_FIELD_7" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField7;
/** Value: "CUSTOM_FIELD_8" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField8;
/** Value: "CUSTOM_FIELD_9" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_CustomField9;
/** Value: "DATE_PUBLISHED" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_DatePublished;
/** Value: "EDUCATION_LEVEL" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_EducationLevel;
/** Value: "EMPLOYMENT_TYPE" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_EmploymentType;
/** Value: "EXPERIENCE_LEVEL" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_ExperienceLevel;
/** Value: "JOB_FIELD_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_JobFieldUnspecified;
/** Value: "LANGUAGE" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_Language;
/** Value: "LOCALE" */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramFacets_SimpleHistogramFacets_Locale;

// ----------------------------------------------------------------------------
// GTLRJobService_HistogramResult.searchType

/**
 *  Filter by Admin1, which is a global placeholder for
 *  referring to state, province, or the particular term a country uses to
 *  define the geographic structure below the country level.
 *  Examples include states codes such as "CA", "IL", "NY", and
 *  provinces, such as "BC".
 *
 *  Value: "ADMIN1"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_Admin1;
/**
 *  A combination of state or province code with a country code. This field
 *  differs from `JOB_ADMIN1`, which can be used in multiple countries.
 *
 *  Value: "ADMIN1_COUNTRY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_Admin1Country;
/**
 *  Base compensation unit.
 *
 *  Value: "BASE_COMPENSATION_UNIT"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_BaseCompensationUnit;
/**
 *  Filter by the Category.
 *
 *  Value: "CATEGORY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_Category;
/**
 *  Filter by the "city name", "Admin1 code", for example,
 *  "Mountain View, CA" or "New York, NY".
 *
 *  Value: "CITY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_City;
/**
 *  Filter by the city center GPS coordinate (latitude and longitude), for
 *  example, 37.4038522,-122.0987765. Since the coordinates of a city center
 *  can change, clients may need to refresh them periodically.
 *
 *  Value: "CITY_COORDINATE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CityCoordinate;
/**
 *  Company display name.
 *
 *  Value: "COMPANY_DISPLAY_NAME"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CompanyDisplayName;
/**
 *  Filter by the company id field.
 *
 *  Value: "COMPANY_ID"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CompanyId;
/**
 *  Filter by the company size type field, such as `BIG`, `SMALL` or `BIGGER`.
 *
 *  Value: "COMPANY_SIZE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CompanySize;
/**
 *  Deprecated. Use COMPANY_DISPLAY_NAME instead.
 *  Company display name.
 *
 *  Value: "COMPANY_TITLE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CompanyTitle;
/**
 *  Filter by the country code of job, such as US, JP, FR.
 *
 *  Value: "COUNTRY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_Country;
/**
 *  Filter by custom field 1.
 *
 *  Value: "CUSTOM_FIELD_1"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField1;
/**
 *  Filter by custom field 10.
 *
 *  Value: "CUSTOM_FIELD_10"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField10;
/**
 *  Filter by custom field 11.
 *
 *  Value: "CUSTOM_FIELD_11"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField11;
/**
 *  Filter by custom field 12.
 *
 *  Value: "CUSTOM_FIELD_12"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField12;
/**
 *  Filter by custom field 13.
 *
 *  Value: "CUSTOM_FIELD_13"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField13;
/**
 *  Filter by custom field 14.
 *
 *  Value: "CUSTOM_FIELD_14"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField14;
/**
 *  Filter by custom field 15.
 *
 *  Value: "CUSTOM_FIELD_15"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField15;
/**
 *  Filter by custom field 16.
 *
 *  Value: "CUSTOM_FIELD_16"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField16;
/**
 *  Filter by custom field 17.
 *
 *  Value: "CUSTOM_FIELD_17"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField17;
/**
 *  Filter by custom field 18.
 *
 *  Value: "CUSTOM_FIELD_18"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField18;
/**
 *  Filter by custom field 19.
 *
 *  Value: "CUSTOM_FIELD_19"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField19;
/**
 *  Filter by custom field 2.
 *
 *  Value: "CUSTOM_FIELD_2"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField2;
/**
 *  Filter by custom field 20.
 *
 *  Value: "CUSTOM_FIELD_20"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField20;
/**
 *  Filter by custom field 3.
 *
 *  Value: "CUSTOM_FIELD_3"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField3;
/**
 *  Filter by custom field 4.
 *
 *  Value: "CUSTOM_FIELD_4"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField4;
/**
 *  Filter by custom field 5.
 *
 *  Value: "CUSTOM_FIELD_5"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField5;
/**
 *  Filter by custom field 6.
 *
 *  Value: "CUSTOM_FIELD_6"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField6;
/**
 *  Filter by custom field 7.
 *
 *  Value: "CUSTOM_FIELD_7"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField7;
/**
 *  Filter by custom field 8.
 *
 *  Value: "CUSTOM_FIELD_8"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField8;
/**
 *  Filter by custom field 9.
 *
 *  Value: "CUSTOM_FIELD_9"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_CustomField9;
/**
 *  Filter by the date published field. Values are stringified
 *  with TimeRange, for example, TimeRange.PAST_MONTH.
 *
 *  Value: "DATE_PUBLISHED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_DatePublished;
/**
 *  Filter by the required education level of the job.
 *
 *  Value: "EDUCATION_LEVEL"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_EducationLevel;
/**
 *  Filter by the employment type field, such as `FULL_TIME` or `PART_TIME`.
 *
 *  Value: "EMPLOYMENT_TYPE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_EmploymentType;
/**
 *  Filter by the required experience level of the job.
 *
 *  Value: "EXPERIENCE_LEVEL"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_ExperienceLevel;
/**
 *  The default value if search type is not specified.
 *
 *  Value: "JOB_FIELD_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_JobFieldUnspecified;
/**
 *  Filter by the language code portion of the locale field, such as "en" or
 *  "fr".
 *
 *  Value: "LANGUAGE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_Language;
/**
 *  Filter by the locale field of a job, such as "en-US", "fr-FR".
 *  This is the BCP-47 language code, such as "en-US" or "sr-Latn".
 *  For more information, see
 *  [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).
 *
 *  Value: "LOCALE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_HistogramResult_SearchType_Locale;

// ----------------------------------------------------------------------------
// GTLRJobService_Job.benefits

/** Value: "CHILD_CARE" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Benefits_ChildCare;
/** Value: "DENTAL" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Benefits_Dental;
/** Value: "DOMESTIC_PARTNER" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Benefits_DomesticPartner;
/** Value: "FLEXIBLE_HOURS" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Benefits_FlexibleHours;
/** Value: "JOB_BENEFIT_TYPE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Benefits_JobBenefitTypeUnspecified;
/** Value: "LIFE_INSURANCE" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Benefits_LifeInsurance;
/** Value: "MEDICAL" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Benefits_Medical;
/** Value: "PARENTAL_LEAVE" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Benefits_ParentalLeave;
/** Value: "RETIREMENT_PLAN" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Benefits_RetirementPlan;
/** Value: "SICK_DAYS" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Benefits_SickDays;
/** Value: "TELECOMMUTE" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Benefits_Telecommute;
/** Value: "VACATION" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Benefits_Vacation;
/** Value: "VISION" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Benefits_Vision;

// ----------------------------------------------------------------------------
// GTLRJobService_Job.educationLevels

/** Value: "ASSOCIATE" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EducationLevels_Associate;
/** Value: "BACHELORS" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EducationLevels_Bachelors;
/** Value: "DOCTORATE" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EducationLevels_Doctorate;
/** Value: "EDUCATION_LEVEL_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EducationLevels_EducationLevelUnspecified;
/** Value: "HIGH_SCHOOL" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EducationLevels_HighSchool;
/** Value: "MASTERS" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EducationLevels_Masters;
/** Value: "NO_DEGREE_REQUIRED" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EducationLevels_NoDegreeRequired;

// ----------------------------------------------------------------------------
// GTLRJobService_Job.employmentTypes

/** Value: "CONTRACTOR" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EmploymentTypes_Contractor;
/** Value: "CONTRACT_TO_HIRE" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EmploymentTypes_ContractToHire;
/** Value: "EMPLOYMENT_TYPE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EmploymentTypes_EmploymentTypeUnspecified;
/** Value: "FULL_TIME" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EmploymentTypes_FullTime;
/** Value: "INTERN" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EmploymentTypes_Intern;
/** Value: "OTHER" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EmploymentTypes_Other;
/** Value: "PART_TIME" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EmploymentTypes_PartTime;
/** Value: "PER_DIEM" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EmploymentTypes_PerDiem;
/** Value: "TEMPORARY" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EmploymentTypes_Temporary;
/** Value: "VOLUNTEER" */
GTLR_EXTERN NSString * const kGTLRJobService_Job_EmploymentTypes_Volunteer;

// ----------------------------------------------------------------------------
// GTLRJobService_Job.level

/**
 *  Senior-level managers responsible for managing teams of managers.
 *
 *  Value: "DIRECTOR"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Level_Director;
/**
 *  Entry-level individual contributors, typically with less than 2 years of
 *  experience in a similar role. Includes interns.
 *
 *  Value: "ENTRY_LEVEL"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Level_EntryLevel;
/**
 *  Executive-level managers and above, including C-level positions.
 *
 *  Value: "EXECUTIVE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Level_Executive;
/**
 *  Experienced individual contributors, typically with 2+ years of
 *  experience in a similar role.
 *
 *  Value: "EXPERIENCED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Level_Experienced;
/**
 *  The default value if the level is not specified.
 *
 *  Value: "JOB_LEVEL_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Level_JobLevelUnspecified;
/**
 *  Entry- to mid-level managers responsible for managing a team of people.
 *
 *  Value: "MANAGER"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Level_Manager;

// ----------------------------------------------------------------------------
// GTLRJobService_Job.region

/**
 *  In addition to exact location matching, job is returned when
 *  LocationFilter in search query is in the same country as this job.
 *  For example, if a `NATION_WIDE` job is posted in "USA", it is
 *  returned if LocationFilter has 'Mountain View'.
 *
 *  Value: "NATION_WIDE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Region_NationWide;
/**
 *  If the region is unspecified, the job is only returned if it
 *  matches the LocationFilter.
 *
 *  Value: "REGION_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Region_RegionUnspecified;
/**
 *  In additiona to exact location matching, job is returned when the
 *  LocationFilter in search query is in the same state as this job.
 *  For example, if a `STATE_WIDE` job is posted in "CA, USA", it is
 *  returned if LocationFilter has "Mountain View".
 *
 *  Value: "STATE_WIDE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Region_StateWide;
/**
 *  Job allows employees to work remotely (telecommute).
 *  If locations are provided with this value, the job is
 *  considered as having a location, but telecommuting is allowed.
 *
 *  Value: "TELECOMMUTE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Region_Telecommute;

// ----------------------------------------------------------------------------
// GTLRJobService_Job.visibility

/**
 *  The Job is visible to the owner and may be visible to other applications
 *  and processes at Google.
 *  Not yet supported. Use PRIVATE.
 *
 *  Value: "GOOGLE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Visibility_Google;
/**
 *  Default value.
 *
 *  Value: "JOB_VISIBILITY_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Visibility_JobVisibilityUnspecified;
/**
 *  The Job is only visible to the owner.
 *
 *  Value: "PRIVATE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Visibility_Private;
/**
 *  The Job is visible to the owner and may be visible to all other API
 *  clients.
 *  Not yet supported. Use PRIVATE.
 *
 *  Value: "PUBLIC"
 */
GTLR_EXTERN NSString * const kGTLRJobService_Job_Visibility_Public;

// ----------------------------------------------------------------------------
// GTLRJobService_JobFilters.categories

/** Value: "ACCOUNTING_AND_FINANCE" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_AccountingAndFinance;
/** Value: "ADMINISTRATIVE_AND_OFFICE" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_AdministrativeAndOffice;
/** Value: "ADVERTISING_AND_MARKETING" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_AdvertisingAndMarketing;
/** Value: "ANIMAL_CARE" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_AnimalCare;
/** Value: "ART_FASHION_AND_DESIGN" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_ArtFashionAndDesign;
/** Value: "BUSINESS_OPERATIONS" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_BusinessOperations;
/** Value: "CLEANING_AND_FACILITIES" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_CleaningAndFacilities;
/** Value: "COMPUTER_AND_IT" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_ComputerAndIt;
/** Value: "CONSTRUCTION" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_Construction;
/** Value: "CUSTOMER_SERVICE" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_CustomerService;
/** Value: "EDUCATION" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_Education;
/** Value: "ENTERTAINMENT_AND_TRAVEL" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_EntertainmentAndTravel;
/** Value: "FARMING_AND_OUTDOORS" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_FarmingAndOutdoors;
/** Value: "HEALTHCARE" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_Healthcare;
/** Value: "HUMAN_RESOURCES" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_HumanResources;
/** Value: "INSTALLATION_MAINTENANCE_AND_REPAIR" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_InstallationMaintenanceAndRepair;
/** Value: "JOB_CATEGORY_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_JobCategoryUnspecified;
/** Value: "LEGAL" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_Legal;
/** Value: "MANAGEMENT" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_Management;
/** Value: "MANUFACTURING_AND_WAREHOUSE" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_ManufacturingAndWarehouse;
/** Value: "MEDIA_COMMUNICATIONS_AND_WRITING" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_MediaCommunicationsAndWriting;
/** Value: "OIL_GAS_AND_MINING" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_OilGasAndMining;
/** Value: "PERSONAL_CARE_AND_SERVICES" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_PersonalCareAndServices;
/** Value: "PROTECTIVE_SERVICES" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_ProtectiveServices;
/** Value: "REAL_ESTATE" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_RealEstate;
/** Value: "RESTAURANT_AND_HOSPITALITY" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_RestaurantAndHospitality;
/** Value: "SALES_AND_RETAIL" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_SalesAndRetail;
/** Value: "SCIENCE_AND_ENGINEERING" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_ScienceAndEngineering;
/** Value: "SOCIAL_SERVICES_AND_NON_PROFIT" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_SocialServicesAndNonProfit;
/** Value: "SPORTS_FITNESS_AND_RECREATION" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_SportsFitnessAndRecreation;
/** Value: "TRANSPORTATION_AND_LOGISTICS" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_Categories_TransportationAndLogistics;

// ----------------------------------------------------------------------------
// GTLRJobService_JobFilters.employmentTypes

/** Value: "CONTRACTOR" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_EmploymentTypes_Contractor;
/** Value: "CONTRACT_TO_HIRE" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_EmploymentTypes_ContractToHire;
/** Value: "EMPLOYMENT_TYPE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_EmploymentTypes_EmploymentTypeUnspecified;
/** Value: "FULL_TIME" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_EmploymentTypes_FullTime;
/** Value: "INTERN" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_EmploymentTypes_Intern;
/** Value: "OTHER" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_EmploymentTypes_Other;
/** Value: "PART_TIME" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_EmploymentTypes_PartTime;
/** Value: "PER_DIEM" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_EmploymentTypes_PerDiem;
/** Value: "TEMPORARY" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_EmploymentTypes_Temporary;
/** Value: "VOLUNTEER" */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_EmploymentTypes_Volunteer;

// ----------------------------------------------------------------------------
// GTLRJobService_JobFilters.publishDateRange

/**
 *  Default value: Filtering on time is not performed.
 *
 *  Value: "DATE_RANGE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_PublishDateRange_DateRangeUnspecified;
/**
 *  The past 24 hours
 *
 *  Value: "PAST_24_HOURS"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_PublishDateRange_Past24Hours;
/**
 *  The past 3 days
 *
 *  Value: "PAST_3_DAYS"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_PublishDateRange_Past3Days;
/**
 *  The past month (30 days)
 *
 *  Value: "PAST_MONTH"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_PublishDateRange_PastMonth;
/**
 *  The past week (7 days)
 *
 *  Value: "PAST_WEEK"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_PublishDateRange_PastWeek;
/**
 *  The past year (365 days)
 *
 *  Value: "PAST_YEAR"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobFilters_PublishDateRange_PastYear;

// ----------------------------------------------------------------------------
// GTLRJobService_JobLocation.locationType

/**
 *  A state or equivalent level location.
 *
 *  Value: "ADMINISTRATIVE_AREA"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobLocation_LocationType_AdministrativeArea;
/**
 *  A country level location.
 *
 *  Value: "COUNTRY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobLocation_LocationType_Country;
/**
 *  A city or equivalent level location.
 *
 *  Value: "LOCALITY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobLocation_LocationType_Locality;
/**
 *  Default value if the type is not specified.
 *
 *  Value: "LOCATION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobLocation_LocationType_LocationTypeUnspecified;
/**
 *  A neighborhood level location.
 *
 *  Value: "NEIGHBORHOOD"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobLocation_LocationType_Neighborhood;
/**
 *  A postal code level location.
 *
 *  Value: "POSTAL_CODE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobLocation_LocationType_PostalCode;
/**
 *  A street address level location.
 *
 *  Value: "STREET_ADDRESS"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobLocation_LocationType_StreetAddress;
/**
 *  A county or equivalent level location.
 *
 *  Value: "SUB_ADMINISTRATIVE_AREA"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobLocation_LocationType_SubAdministrativeArea;
/**
 *  A sublocality is a subdivision of a locality, for example a city borough,
 *  ward, or arrondissement. Sublocalities are usually recognized by a local
 *  political authority. For example, Manhattan and Brooklyn are recognized
 *  as boroughs by the City of New York, and are therefore modeled as
 *  sublocalities.
 *
 *  Value: "SUB_LOCALITY"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobLocation_LocationType_SubLocality;
/**
 *  A district or equivalent level location.
 *
 *  Value: "SUB_LOCALITY_1"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobLocation_LocationType_SubLocality1;
/**
 *  A smaller district or equivalent level display.
 *
 *  Value: "SUB_LOCALITY_2"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobLocation_LocationType_SubLocality2;

// ----------------------------------------------------------------------------
// GTLRJobService_JobQuery.categories

/** Value: "ACCOUNTING_AND_FINANCE" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_AccountingAndFinance;
/** Value: "ADMINISTRATIVE_AND_OFFICE" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_AdministrativeAndOffice;
/** Value: "ADVERTISING_AND_MARKETING" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_AdvertisingAndMarketing;
/** Value: "ANIMAL_CARE" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_AnimalCare;
/** Value: "ART_FASHION_AND_DESIGN" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_ArtFashionAndDesign;
/** Value: "BUSINESS_OPERATIONS" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_BusinessOperations;
/** Value: "CLEANING_AND_FACILITIES" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_CleaningAndFacilities;
/** Value: "COMPUTER_AND_IT" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_ComputerAndIt;
/** Value: "CONSTRUCTION" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_Construction;
/** Value: "CUSTOMER_SERVICE" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_CustomerService;
/** Value: "EDUCATION" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_Education;
/** Value: "ENTERTAINMENT_AND_TRAVEL" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_EntertainmentAndTravel;
/** Value: "FARMING_AND_OUTDOORS" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_FarmingAndOutdoors;
/** Value: "HEALTHCARE" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_Healthcare;
/** Value: "HUMAN_RESOURCES" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_HumanResources;
/** Value: "INSTALLATION_MAINTENANCE_AND_REPAIR" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_InstallationMaintenanceAndRepair;
/** Value: "JOB_CATEGORY_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_JobCategoryUnspecified;
/** Value: "LEGAL" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_Legal;
/** Value: "MANAGEMENT" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_Management;
/** Value: "MANUFACTURING_AND_WAREHOUSE" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_ManufacturingAndWarehouse;
/** Value: "MEDIA_COMMUNICATIONS_AND_WRITING" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_MediaCommunicationsAndWriting;
/** Value: "OIL_GAS_AND_MINING" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_OilGasAndMining;
/** Value: "PERSONAL_CARE_AND_SERVICES" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_PersonalCareAndServices;
/** Value: "PROTECTIVE_SERVICES" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_ProtectiveServices;
/** Value: "REAL_ESTATE" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_RealEstate;
/** Value: "RESTAURANT_AND_HOSPITALITY" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_RestaurantAndHospitality;
/** Value: "SALES_AND_RETAIL" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_SalesAndRetail;
/** Value: "SCIENCE_AND_ENGINEERING" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_ScienceAndEngineering;
/** Value: "SOCIAL_SERVICES_AND_NON_PROFIT" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_SocialServicesAndNonProfit;
/** Value: "SPORTS_FITNESS_AND_RECREATION" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_SportsFitnessAndRecreation;
/** Value: "TRANSPORTATION_AND_LOGISTICS" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_Categories_TransportationAndLogistics;

// ----------------------------------------------------------------------------
// GTLRJobService_JobQuery.employmentTypes

/** Value: "CONTRACTOR" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_EmploymentTypes_Contractor;
/** Value: "CONTRACT_TO_HIRE" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_EmploymentTypes_ContractToHire;
/** Value: "EMPLOYMENT_TYPE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_EmploymentTypes_EmploymentTypeUnspecified;
/** Value: "FULL_TIME" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_EmploymentTypes_FullTime;
/** Value: "INTERN" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_EmploymentTypes_Intern;
/** Value: "OTHER" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_EmploymentTypes_Other;
/** Value: "PART_TIME" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_EmploymentTypes_PartTime;
/** Value: "PER_DIEM" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_EmploymentTypes_PerDiem;
/** Value: "TEMPORARY" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_EmploymentTypes_Temporary;
/** Value: "VOLUNTEER" */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_EmploymentTypes_Volunteer;

// ----------------------------------------------------------------------------
// GTLRJobService_JobQuery.publishDateRange

/**
 *  Default value: Filtering on time is not performed.
 *
 *  Value: "DATE_RANGE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_PublishDateRange_DateRangeUnspecified;
/**
 *  The past 24 hours
 *
 *  Value: "PAST_24_HOURS"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_PublishDateRange_Past24Hours;
/**
 *  The past 3 days
 *
 *  Value: "PAST_3_DAYS"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_PublishDateRange_Past3Days;
/**
 *  The past month (30 days)
 *
 *  Value: "PAST_MONTH"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_PublishDateRange_PastMonth;
/**
 *  The past week (7 days)
 *
 *  Value: "PAST_WEEK"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_PublishDateRange_PastWeek;
/**
 *  The past year (365 days)
 *
 *  Value: "PAST_YEAR"
 */
GTLR_EXTERN NSString * const kGTLRJobService_JobQuery_PublishDateRange_PastYear;

// ----------------------------------------------------------------------------
// GTLRJobService_ResponseMetadata.mode

/**
 *  Deprecated. Please use the SearchJobsForAlert API.
 *  The job search matches against jobs that are suited to email notifications.
 *
 *  Value: "EMAIL_ALERT_SEARCH"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ResponseMetadata_Mode_EmailAlertSearch;
/**
 *  The job search matches only against featured jobs (jobs with a
 *  promotionValue > 0). This method does not return any jobs that have a
 *  promotionValue <= 0. The search results order is determined by the
 *  promotionValue (jobs with a higher promotionValue are returned higher up in
 *  the search results), with relevance being used as a tiebreaker.
 *
 *  Value: "FEATURED_JOB_SEARCH"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ResponseMetadata_Mode_FeaturedJobSearch;
/**
 *  The job search doesn't include support for featured jobs.
 *
 *  Value: "JOB_SEARCH"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ResponseMetadata_Mode_JobSearch;
/**
 *  The mode of the search method is not specified.
 *
 *  Value: "SEARCH_MODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_ResponseMetadata_Mode_SearchModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRJobService_SearchJobsRequest.jobView

/**
 *  All available attributes are included in the search results.
 *  Note: [Job.description, Job.responsibilities,
 *  Job.qualifications and Job.incentives are deprecated.
 *  These fields are scheduled to be removed from MatchingJob.Job objects
 *  in the SearchJobsResponse results on 12/31/2018.
 *  See the alternative MatchingJob.search_text_snippet and
 *  MatchingJob.job_summary fields.
 *
 *  Value: "FULL"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_JobView_Full;
/**
 *  Default value.
 *
 *  Value: "JOB_VIEW_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_JobView_JobViewUnspecified;
/**
 *  A minimal view of the job, with the following attributes in the search
 *  results: Job.name, Job.requisition_id, Job.job_title,
 *  Job.company_name, Job.job_locations.
 *
 *  Value: "MINIMAL"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_JobView_Minimal;
/**
 *  A small view of the job, with the following attributes in the search
 *  results:
 *  Job.name, Job.requisition_id, Job.job_title,
 *  Job.company_name, Job.job_locations, Job.description,
 *  Job.visibility.
 *  Note: Job.description is deprecated. It is scheduled to be removed
 *  from MatchingJob.Job objects in the SearchJobsResponse results
 *  on 12/31/2018.
 *
 *  Value: "SMALL"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_JobView_Small;

// ----------------------------------------------------------------------------
// GTLRJobService_SearchJobsRequest.mode

/**
 *  Deprecated. Please use the SearchJobsForAlert API.
 *  The job search matches against jobs that are suited to email notifications.
 *
 *  Value: "EMAIL_ALERT_SEARCH"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_Mode_EmailAlertSearch;
/**
 *  The job search matches only against featured jobs (jobs with a
 *  promotionValue > 0). This method does not return any jobs that have a
 *  promotionValue <= 0. The search results order is determined by the
 *  promotionValue (jobs with a higher promotionValue are returned higher up in
 *  the search results), with relevance being used as a tiebreaker.
 *
 *  Value: "FEATURED_JOB_SEARCH"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_Mode_FeaturedJobSearch;
/**
 *  The job search doesn't include support for featured jobs.
 *
 *  Value: "JOB_SEARCH"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_Mode_JobSearch;
/**
 *  The mode of the search method is not specified.
 *
 *  Value: "SEARCH_MODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_Mode_SearchModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRJobService_SearchJobsRequest.orderBy

/**
 *  Sort by job annualized base compensation in ascending order.
 *  If job's annualized base compensation is unspecified, they are put at
 *  the end of search result.
 *
 *  Value: "ANNUALIZED_BASE_COMPENSATION"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_OrderBy_AnnualizedBaseCompensation;
/**
 *  Sort by job annualized base compensation in descending order.
 *  If job's annualized base compensation is unspecified, they are put at
 *  the end of search result.
 *
 *  Value: "ANNUALIZED_BASE_COMPENSATION_DESC"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_OrderBy_AnnualizedBaseCompensationDesc;
/**
 *  Sort by job annualized total compensation in ascending order.
 *  If job's annualized total compensation is unspecified, they are put at
 *  the end of search result.
 *
 *  Value: "ANNUALIZED_TOTAL_COMPENSATION"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_OrderBy_AnnualizedTotalCompensation;
/**
 *  Sort by job annualized total compensation in descending order.
 *  If job's annualized total compensation is unspecified, they are put at
 *  the end of search result.
 *
 *  Value: "ANNUALIZED_TOTAL_COMPENSATION_DESC"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_OrderBy_AnnualizedTotalCompensationDesc;
/**
 *  Sort by published date descending.
 *
 *  Value: "PUBLISHED_DATE_DESC"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_OrderBy_PublishedDateDesc;
/**
 *  By descending relevance, as determined by the API algorithms.
 *  Relevance thresholding of query results is only available for queries if
 *  RELEVANCE_DESC sort ordering is specified.
 *
 *  Value: "RELEVANCE_DESC"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_OrderBy_RelevanceDesc;
/**
 *  Default value.
 *
 *  Value: "SORT_BY_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_OrderBy_SortByUnspecified;
/**
 *  Sort by job title ascending.
 *
 *  Value: "TITLE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_OrderBy_Title;
/**
 *  Sort by job title descending.
 *
 *  Value: "TITLE_DESC"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_OrderBy_TitleDesc;
/**
 *  Sort by updated data descending.
 *
 *  Value: "UPDATED_DATE_DESC"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_OrderBy_UpdatedDateDesc;

// ----------------------------------------------------------------------------
// GTLRJobService_SearchJobsRequest.sortBy

/**
 *  Sort by job annualized base compensation in ascending order.
 *  If job's annualized base compensation is unspecified, they are put at
 *  the end of search result.
 *
 *  Value: "ANNUALIZED_BASE_COMPENSATION"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_SortBy_AnnualizedBaseCompensation;
/**
 *  Sort by job annualized base compensation in descending order.
 *  If job's annualized base compensation is unspecified, they are put at
 *  the end of search result.
 *
 *  Value: "ANNUALIZED_BASE_COMPENSATION_DESC"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_SortBy_AnnualizedBaseCompensationDesc;
/**
 *  Sort by job annualized total compensation in ascending order.
 *  If job's annualized total compensation is unspecified, they are put at
 *  the end of search result.
 *
 *  Value: "ANNUALIZED_TOTAL_COMPENSATION"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_SortBy_AnnualizedTotalCompensation;
/**
 *  Sort by job annualized total compensation in descending order.
 *  If job's annualized total compensation is unspecified, they are put at
 *  the end of search result.
 *
 *  Value: "ANNUALIZED_TOTAL_COMPENSATION_DESC"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_SortBy_AnnualizedTotalCompensationDesc;
/**
 *  Sort by published date descending.
 *
 *  Value: "PUBLISHED_DATE_DESC"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_SortBy_PublishedDateDesc;
/**
 *  By descending relevance, as determined by the API algorithms.
 *  Relevance thresholding of query results is only available for queries if
 *  RELEVANCE_DESC sort ordering is specified.
 *
 *  Value: "RELEVANCE_DESC"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_SortBy_RelevanceDesc;
/**
 *  Default value.
 *
 *  Value: "SORT_BY_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_SortBy_SortByUnspecified;
/**
 *  Sort by job title ascending.
 *
 *  Value: "TITLE"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_SortBy_Title;
/**
 *  Sort by job title descending.
 *
 *  Value: "TITLE_DESC"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_SortBy_TitleDesc;
/**
 *  Sort by updated data descending.
 *
 *  Value: "UPDATED_DATE_DESC"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsRequest_SortBy_UpdatedDateDesc;

// ----------------------------------------------------------------------------
// GTLRJobService_SearchJobsResponse.jobView

/**
 *  All available attributes are included in the search results.
 *  Note: [Job.description, Job.responsibilities,
 *  Job.qualifications and Job.incentives are deprecated.
 *  These fields are scheduled to be removed from MatchingJob.Job objects
 *  in the SearchJobsResponse results on 12/31/2018.
 *  See the alternative MatchingJob.search_text_snippet and
 *  MatchingJob.job_summary fields.
 *
 *  Value: "FULL"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsResponse_JobView_Full;
/**
 *  Default value.
 *
 *  Value: "JOB_VIEW_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsResponse_JobView_JobViewUnspecified;
/**
 *  A minimal view of the job, with the following attributes in the search
 *  results: Job.name, Job.requisition_id, Job.job_title,
 *  Job.company_name, Job.job_locations.
 *
 *  Value: "MINIMAL"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsResponse_JobView_Minimal;
/**
 *  A small view of the job, with the following attributes in the search
 *  results:
 *  Job.name, Job.requisition_id, Job.job_title,
 *  Job.company_name, Job.job_locations, Job.description,
 *  Job.visibility.
 *  Note: Job.description is deprecated. It is scheduled to be removed
 *  from MatchingJob.Job objects in the SearchJobsResponse results
 *  on 12/31/2018.
 *
 *  Value: "SMALL"
 */
GTLR_EXTERN NSString * const kGTLRJobService_SearchJobsResponse_JobView_Small;

/**
 *  Input only.
 *  Batch delete jobs request.
 */
@interface GTLRJobService_BatchDeleteJobsRequest : GTLRObject

/**
 *  Required.
 *  The filter string specifies the jobs to be deleted.
 *  Supported operator: =, AND
 *  The fields eligible for filtering are:
 *  * `companyName` (Required)
 *  * `requisitionId` (Required)
 *  Sample Query: companyName = "companies/123" AND requisitionId = "req-1"
 */
@property(nonatomic, copy, nullable) NSString *filter;

@end


/**
 *  Represents count of jobs within one bucket.
 */
@interface GTLRJobService_BucketizedCount : GTLRObject

/**
 *  Number of jobs whose numeric field value fall into `range`.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  Bucket range on which histogram was performed for the numeric field,
 *  that is, the count represents number of jobs in this range.
 */
@property(nonatomic, strong, nullable) GTLRJobService_BucketRange *range;

@end


/**
 *  Represents starting and ending value of a range in double.
 */
@interface GTLRJobService_BucketRange : GTLRObject

/**
 *  Starting value of the bucket range.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *from;

/**
 *  Ending value of the bucket range.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *to;

@end


/**
 *  Output only.
 *  Commute details related to this job.
 */
@interface GTLRJobService_CommuteInfo : GTLRObject

/** Location used as the destination in the commute calculation. */
@property(nonatomic, strong, nullable) GTLRJobService_JobLocation *jobLocation;

/** Travel time to reach the job. */
@property(nonatomic, strong, nullable) GTLRDuration *travelDuration;

@end


/**
 *  Input only.
 *  Parameters needed for commute search.
 */
@interface GTLRJobService_CommutePreference : GTLRObject

/**
 *  Optional.
 *  If `true`, jobs without street level addresses may also be returned.
 *  For city level addresses, the city center is used. For state and coarser
 *  level addresses, text matching is used.
 *  If this field is set to `false` or is not specified, only jobs that include
 *  street level addresses will be returned by commute search.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowNonStreetLevelAddress;

/**
 *  Optional.
 *  The departure hour to use to calculate traffic impact. Accepts an
 *  integer between 0 and 23, representing the hour in the time zone of the
 *  start_location. Must not be present if road_traffic is specified.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *departureHourLocal;

/**
 *  Required.
 *  The method of transportation for which to calculate the commute time.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_CommutePreference_Method_CommuteMethodUnspecified
 *        Commute method is not specified. (Value: "COMMUTE_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRJobService_CommutePreference_Method_Driving Commute time is
 *        calculated based on driving time. (Value: "DRIVING")
 *    @arg @c kGTLRJobService_CommutePreference_Method_Transit Commute time is
 *        calculated based on public transit including bus, metro,
 *        subway, etc. (Value: "TRANSIT")
 */
@property(nonatomic, copy, nullable) NSString *method;

/**
 *  Optional.
 *  Specifies the traffic density to use when caculating commute time.
 *  Must not be present if departure_hour_local is specified.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_CommutePreference_RoadTraffic_BusyHour Commute
 *        time calculation takes in account the peak traffic impact. (Value:
 *        "BUSY_HOUR")
 *    @arg @c kGTLRJobService_CommutePreference_RoadTraffic_RoadTrafficUnspecified
 *        Road traffic situation is not specified. (Value:
 *        "ROAD_TRAFFIC_UNSPECIFIED")
 *    @arg @c kGTLRJobService_CommutePreference_RoadTraffic_TrafficFree Optimal
 *        commute time without considering any traffic impact. (Value:
 *        "TRAFFIC_FREE")
 */
@property(nonatomic, copy, nullable) NSString *roadTraffic;

/**
 *  Required.
 *  The latitude and longitude of the location from which to calculate the
 *  commute time.
 */
@property(nonatomic, strong, nullable) GTLRJobService_LatLng *startLocation;

/**
 *  Required.
 *  The maximum travel time in seconds. The maximum allowed value is `3600s`
 *  (one hour). Format is `123s`.
 */
@property(nonatomic, strong, nullable) GTLRDuration *travelTime;

@end


/**
 *  A Company resource represents a company in the service. A company is the
 *  entity that owns job listings, that is, the hiring entity responsible for
 *  employing applicants for the job position.
 */
@interface GTLRJobService_Company : GTLRObject

/**
 *  Optional.
 *  The URL to employer's career site or careers page on the employer's web
 *  site.
 */
@property(nonatomic, copy, nullable) NSString *careerPageLink;

/**
 *  Optional.
 *  Identifiers external to the application that help to further identify
 *  the employer.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_CompanyInfoSource *> *companyInfoSources;

/**
 *  Optional.
 *  The employer's company size.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_Company_CompanySize_Big The company has between
 *        1,000 and 4,999 employees. (Value: "BIG")
 *    @arg @c kGTLRJobService_Company_CompanySize_Bigger The company has between
 *        5,000 and 9,999 employees. (Value: "BIGGER")
 *    @arg @c kGTLRJobService_Company_CompanySize_CompanySizeUnspecified Default
 *        value if the size is not specified. (Value:
 *        "COMPANY_SIZE_UNSPECIFIED")
 *    @arg @c kGTLRJobService_Company_CompanySize_Giant The company has 10,000
 *        or more employees. (Value: "GIANT")
 *    @arg @c kGTLRJobService_Company_CompanySize_Medium The company has between
 *        500 and 999 employees. (Value: "MEDIUM")
 *    @arg @c kGTLRJobService_Company_CompanySize_Mini The company has less than
 *        50 employees. (Value: "MINI")
 *    @arg @c kGTLRJobService_Company_CompanySize_Small The company has between
 *        50 and 99 employees. (Value: "SMALL")
 *    @arg @c kGTLRJobService_Company_CompanySize_Smedium The company has
 *        between 100 and 499 employees. (Value: "SMEDIUM")
 */
@property(nonatomic, copy, nullable) NSString *companySize;

/**
 *  Deprecated. Do not use this field.
 *  Optional.
 *  This field is no longer used. Any value set to it is ignored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableLocationOptimization;

/**
 *  Required.
 *  The name of the employer to be displayed with the job,
 *  for example, "Google, LLC.".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Optional.
 *  The unique company identifier provided by the client to identify an
 *  employer for billing purposes. Recommended practice is to use
 *  the distributor_company_id.
 *  Defaults to same value as distributor_company_id when a value
 *  is not provided.
 */
@property(nonatomic, copy, nullable) NSString *distributorBillingCompanyId;

/**
 *  Required.
 *  A client's company identifier, used to uniquely identify the
 *  company. If an employer has a subsidiary or sub-brand, such as "Alphabet"
 *  and "Google", which the client wishes to use as the company displayed on
 *  the job. Best practice is to create a distinct company identifier for each
 *  distinct brand displayed.
 */
@property(nonatomic, copy, nullable) NSString *distributorCompanyId;

/**
 *  Optional.
 *  Equal Employment Opportunity legal disclaimer text to be
 *  associated with all jobs, and typically to be displayed in all
 *  roles.
 *  The maximum number of allowed characters is 500.
 */
@property(nonatomic, copy, nullable) NSString *eeoText;

/**
 *  Optional.
 *  Set to true if it is the hiring agency that post jobs for other
 *  employers.
 *  Defaults to false if not provided.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hiringAgency;

/**
 *  Optional.
 *  The street address of the company's main headquarters, which may be
 *  different from the job location. The service attempts
 *  to geolocate the provided address, and populates a more specific
 *  location wherever possible in structured_company_hq_location.
 */
@property(nonatomic, copy, nullable) NSString *hqLocation;

/**
 *  Optional.
 *  A URL that hosts the employer's company logo. If provided,
 *  the logo image should be squared at 80x80 pixels.
 *  The url must be a Google Photos or Google Album url.
 *  Only images in these Google sub-domains are accepted.
 */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/**
 *  Optional.
 *  A list of keys of filterable Job.custom_attributes, whose
 *  corresponding `string_values` are used in keyword search. Jobs with
 *  `string_values` under these specified field keys are returned if any
 *  of the values matches the search keyword.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *keywordSearchableCustomAttributes;

/**
 *  Deprecated. Use keyword_searchable_custom_attributes instead.
 *  Optional.
 *  A list of filterable custom fields that should be used in keyword
 *  search. The jobs of this company are returned if any of these custom
 *  fields matches the search keyword.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *keywordSearchableCustomFields;

/**
 *  Required during company update.
 *  The resource name for a company. This is generated by the service when a
 *  company is created, for example,
 *  "companies/0000aaaa-1111-bbbb-2222-cccc3333dddd".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only.
 *  A structured headquarters location of the company,
 *  resolved from hq_location if possible.
 */
@property(nonatomic, strong, nullable) GTLRJobService_JobLocation *structuredCompanyHqLocation;

/**
 *  Output only.
 *  Indicates whether a company is flagged to be suspended from public
 *  availability by the service when job content appears suspicious,
 *  abusive, or spammy.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *suspended;

/**
 *  Deprecated. Use display_name instead.
 *  Required.
 *  The name of the employer to be displayed with the job,
 *  for example, "Google, LLC.".
 */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  Optional.
 *  The URL representing the company's primary web site or home page,
 *  such as, "www.google.com".
 */
@property(nonatomic, copy, nullable) NSString *website;

@end


/**
 *  A resource that represents an external Google identifier for a company,
 *  for example, a Google+ business page or a Google Maps business page.
 *  For unsupported types, use `unknown_type_id`.
 */
@interface GTLRJobService_CompanyInfoSource : GTLRObject

/**
 *  Optional.
 *  The Google's Knowledge Graph value for the employer's company.
 */
@property(nonatomic, copy, nullable) NSString *freebaseMid;

/**
 *  Optional.
 *  The numeric identifier for the employer's Google+ business page.
 */
@property(nonatomic, copy, nullable) NSString *gplusId;

/**
 *  Optional.
 *  The numeric identifier for the employer's headquarters on Google Maps,
 *  namely, the Google Maps CID (cell id).
 */
@property(nonatomic, copy, nullable) NSString *mapsCid;

/**
 *  Optional.
 *  A Google identifier that does not match any of the other types.
 */
@property(nonatomic, copy, nullable) NSString *unknownTypeId;

@end


/**
 *  A compensation entry that represents one component of compensation, such
 *  as base pay, bonus, or other compensation type.
 *  Annualization: One compensation entry can be annualized if
 *  - it contains valid amount or range.
 *  - and its expected_units_per_year is set or can be derived.
 *  Its annualized range is determined as (amount or range) times
 *  expected_units_per_year.
 */
@interface GTLRJobService_CompensationEntry : GTLRObject

/**
 *  Optional.
 *  Compensation amount.
 */
@property(nonatomic, strong, nullable) GTLRJobService_Money *amount;

/**
 *  Optional.
 *  Compensation description. For example, could
 *  indicate equity terms or provide additional context to an estimated
 *  bonus.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional.
 *  Expected number of units paid each year. If not specified, when
 *  Job.employment_types is FULLTIME, a default value is inferred
 *  based on unit. Default values:
 *  - HOURLY: 2080
 *  - DAILY: 260
 *  - WEEKLY: 52
 *  - MONTHLY: 12
 *  - ANNUAL: 1
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expectedUnitsPerYear;

/**
 *  Optional.
 *  Compensation range.
 */
@property(nonatomic, strong, nullable) GTLRJobService_CompensationRange *range;

/**
 *  Required.
 *  Compensation type.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_CompensationEntry_Type_Base Base compensation:
 *        Refers to the fixed amount of money paid to an
 *        employee by an employer in return for work performed. Base
 *        compensation
 *        does not include benefits, bonuses or any other potential compensation
 *        from an employer. (Value: "BASE")
 *    @arg @c kGTLRJobService_CompensationEntry_Type_Bonus Bonus. (Value:
 *        "BONUS")
 *    @arg @c kGTLRJobService_CompensationEntry_Type_Commissions Commission.
 *        (Value: "COMMISSIONS")
 *    @arg @c kGTLRJobService_CompensationEntry_Type_CompensationTypeUnspecified
 *        Default value. Equivalent to OTHER_COMPENSATION_TYPE. (Value:
 *        "COMPENSATION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRJobService_CompensationEntry_Type_Equity Equity. (Value:
 *        "EQUITY")
 *    @arg @c kGTLRJobService_CompensationEntry_Type_OtherCompensationType Other
 *        compensation type. (Value: "OTHER_COMPENSATION_TYPE")
 *    @arg @c kGTLRJobService_CompensationEntry_Type_ProfitSharing Profit
 *        sharing. (Value: "PROFIT_SHARING")
 *    @arg @c kGTLRJobService_CompensationEntry_Type_SigningBonus Signing bonus.
 *        (Value: "SIGNING_BONUS")
 *    @arg @c kGTLRJobService_CompensationEntry_Type_Tips Tips. (Value: "TIPS")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Optional.
 *  Frequency of the specified amount.
 *  Default is CompensationUnit.OTHER_COMPENSATION_UNIT.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_CompensationEntry_Unit_CompensationUnitUnspecified
 *        Default value. Equivalent to OTHER_COMPENSATION_UNIT. (Value:
 *        "COMPENSATION_UNIT_UNSPECIFIED")
 *    @arg @c kGTLRJobService_CompensationEntry_Unit_Daily Daily. (Value:
 *        "DAILY")
 *    @arg @c kGTLRJobService_CompensationEntry_Unit_Hourly Hourly. (Value:
 *        "HOURLY")
 *    @arg @c kGTLRJobService_CompensationEntry_Unit_Monthly Monthly. (Value:
 *        "MONTHLY")
 *    @arg @c kGTLRJobService_CompensationEntry_Unit_OneTime One time. (Value:
 *        "ONE_TIME")
 *    @arg @c kGTLRJobService_CompensationEntry_Unit_OtherCompensationUnit Other
 *        compensation units. (Value: "OTHER_COMPENSATION_UNIT")
 *    @arg @c kGTLRJobService_CompensationEntry_Unit_Weekly Weekly (Value:
 *        "WEEKLY")
 *    @arg @c kGTLRJobService_CompensationEntry_Unit_Yearly Yearly. (Value:
 *        "YEARLY")
 */
@property(nonatomic, copy, nullable) NSString *unit;

@end


/**
 *  Input only.
 *  Filter on job compensation type and amount.
 */
@interface GTLRJobService_CompensationFilter : GTLRObject

/**
 *  Optional.
 *  Whether to include jobs whose compensation range is unspecified.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeJobsWithUnspecifiedCompensationRange;

/**
 *  Optional.
 *  Compensation range.
 */
@property(nonatomic, strong, nullable) GTLRJobService_CompensationRange *range;

/**
 *  Required.
 *  Type of filter.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_CompensationFilter_Type_AnnualizedBaseAmount
 *        Filter by annualized base compensation amount and ** base compensation
 *        entry's ** unit. Populate range and zero or more units. (Value:
 *        "ANNUALIZED_BASE_AMOUNT")
 *    @arg @c kGTLRJobService_CompensationFilter_Type_AnnualizedTotalAmount
 *        Filter by annualized total compensation amount and ** base
 *        compensation
 *        entry's ** unit . Populate range and zero or more units. (Value:
 *        "ANNUALIZED_TOTAL_AMOUNT")
 *    @arg @c kGTLRJobService_CompensationFilter_Type_FilterTypeUnspecified
 *        Filter type unspecified. Position holder, INVALID, should never be
 *        used. (Value: "FILTER_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRJobService_CompensationFilter_Type_UnitAndAmount Filter by **
 *        base compensation entry's ** unit and amount / range. A job
 *        is a match if and only if the job contains a base CompensationEntry,
 *        and
 *        the base entry's unit matches provided compensation_units and amount
 *        or range overlaps with provided compensation_range.
 *        See CompensationInfo.CompensationEntry for definition of
 *        base compensation entry.
 *        Set exactly one units and populate range. (Value: "UNIT_AND_AMOUNT")
 *    @arg @c kGTLRJobService_CompensationFilter_Type_UnitOnly Filter by ** base
 *        compensation entry's ** unit. A job is a match if and
 *        only if the job contains a base CompensationEntry and the base
 *        CompensationEntry's unit matches provided units.
 *        Populate one or more units.
 *        See CompensationInfo.CompensationEntry for definition of
 *        base compensation entry. (Value: "UNIT_ONLY")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Required.
 *  Specify desired ** base compensation entry's **
 *  CompensationInfo.CompensationUnit.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *units;

@end


/**
 *  Input only.
 *  Compensation based histogram request.
 */
@interface GTLRJobService_CompensationHistogramRequest : GTLRObject

/**
 *  Required.
 *  Numeric histogram options, like buckets, whether include min or max value.
 */
@property(nonatomic, strong, nullable) GTLRJobService_NumericBucketingOption *bucketingOption;

/**
 *  Required.
 *  Type of the request, representing which field the histogramming should be
 *  performed over. A single request can only specify one histogram of each
 *  `CompensationHistogramRequestType`.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_CompensationHistogramRequest_Type_AnnualizedBase
 *        Histogram by job's annualized base compensation. See CompensationEntry
 *        for definition of annualized base compensation. (Value:
 *        "ANNUALIZED_BASE")
 *    @arg @c kGTLRJobService_CompensationHistogramRequest_Type_AnnualizedTotal
 *        Histogram by job's annualized total compensation. See
 *        CompensationEntry
 *        for definition of annualized total compensation. (Value:
 *        "ANNUALIZED_TOTAL")
 *    @arg @c kGTLRJobService_CompensationHistogramRequest_Type_Base Histogram
 *        by job's base compensation. See CompensationEntry for
 *        definition of base compensation. (Value: "BASE")
 *    @arg @c kGTLRJobService_CompensationHistogramRequest_Type_CompensationHistogramRequestTypeUnspecified
 *        Default value. Invalid. (Value:
 *        "COMPENSATION_HISTOGRAM_REQUEST_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Output only.
 *  Compensation based histogram result.
 */
@interface GTLRJobService_CompensationHistogramResult : GTLRObject

/** Histogram result. */
@property(nonatomic, strong, nullable) GTLRJobService_NumericBucketingResult *result;

/**
 *  Type of the request, corresponding to
 *  CompensationHistogramRequest.type.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_CompensationHistogramResult_Type_AnnualizedBase
 *        Histogram by job's annualized base compensation. See CompensationEntry
 *        for definition of annualized base compensation. (Value:
 *        "ANNUALIZED_BASE")
 *    @arg @c kGTLRJobService_CompensationHistogramResult_Type_AnnualizedTotal
 *        Histogram by job's annualized total compensation. See
 *        CompensationEntry
 *        for definition of annualized total compensation. (Value:
 *        "ANNUALIZED_TOTAL")
 *    @arg @c kGTLRJobService_CompensationHistogramResult_Type_Base Histogram by
 *        job's base compensation. See CompensationEntry for
 *        definition of base compensation. (Value: "BASE")
 *    @arg @c kGTLRJobService_CompensationHistogramResult_Type_CompensationHistogramRequestTypeUnspecified
 *        Default value. Invalid. (Value:
 *        "COMPENSATION_HISTOGRAM_REQUEST_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Job compensation details.
 */
@interface GTLRJobService_CompensationInfo : GTLRObject

/**
 *  Deprecated. Use entries instead.
 *  Optional.
 *  The amount of compensation or pay for the job.
 *  As an alternative, compensation_amount_min and
 *  compensation_amount_max may be used to define a range of
 *  compensation.
 */
@property(nonatomic, strong, nullable) GTLRJobService_Money *amount;

/**
 *  Output only.
 *  Annualized base compensation range. Computed as
 *  base compensation entry's CompensationEntry.compensation times
 *  CompensationEntry.expected_units_per_year.
 *  See CompensationEntry for explanation on compensation annualization.
 */
@property(nonatomic, strong, nullable) GTLRJobService_CompensationRange *annualizedBaseCompensationRange;

/**
 *  Output only.
 *  Annualized total compensation range. Computed as
 *  all compensation entries' CompensationEntry.compensation times
 *  CompensationEntry.expected_units_per_year.
 *  See CompensationEntry for explanation on compensation annualization.
 */
@property(nonatomic, strong, nullable) GTLRJobService_CompensationRange *annualizedTotalCompensationRange;

/**
 *  Optional.
 *  Job compensation information.
 *  At most one entry can be of type
 *  CompensationInfo.CompensationType.BASE, which is
 *  referred as ** base compensation entry ** for the job.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_CompensationEntry *> *entries;

/**
 *  Deprecated. Use entries instead.
 *  Optional.
 *  An upper bound on a range for compensation or pay for the job.
 *  The currency type is specified in compensation_amount.
 */
@property(nonatomic, strong, nullable) GTLRJobService_Money *max;

/**
 *  Deprecated. Use entries instead.
 *  Optional.
 *  A lower bound on a range for compensation or pay for the job.
 *  The currency type is specified in compensation_amount.
 */
@property(nonatomic, strong, nullable) GTLRJobService_Money *min;

/**
 *  Deprecated. Use entries instead.
 *  Optional.
 *  Type of job compensation.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_CompensationInfo_Type_Commission The job
 *        compensation is quoted based solely on commission. (Value:
 *        "COMMISSION")
 *    @arg @c kGTLRJobService_CompensationInfo_Type_Hourly The job compensation
 *        is quoted by the number of hours worked. (Value: "HOURLY")
 *    @arg @c kGTLRJobService_CompensationInfo_Type_JobCompensationTypeUnspecified
 *        The default value if the type is not specified. (Value:
 *        "JOB_COMPENSATION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRJobService_CompensationInfo_Type_OtherType The job
 *        compensation is not quoted according to the listed compensation
 *        options. (Value: "OTHER_TYPE")
 *    @arg @c kGTLRJobService_CompensationInfo_Type_PerProject The job
 *        compensation is quoted by project completion. (Value: "PER_PROJECT")
 *    @arg @c kGTLRJobService_CompensationInfo_Type_Salary The job compensation
 *        is quoted on an annual basis. (Value: "SALARY")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Compensation range.
 */
@interface GTLRJobService_CompensationRange : GTLRObject

/**
 *  Required.
 *  The maximum amount of compensation.
 */
@property(nonatomic, strong, nullable) GTLRJobService_Money *max;

/**
 *  Required.
 *  The minimum amount of compensation.
 */
@property(nonatomic, strong, nullable) GTLRJobService_Money *min;

@end


/**
 *  Output only.
 *  Response of auto-complete query.
 */
@interface GTLRJobService_CompleteQueryResponse : GTLRObject

/** Results of the matching job/company candidates. */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_CompletionResult *> *completionResults;

/**
 *  Additional information for the API invocation, such as the request
 *  tracking id.
 */
@property(nonatomic, strong, nullable) GTLRJobService_ResponseMetadata *metadata;

@end


/**
 *  Output only.
 *  Resource that represents completion results.
 */
@interface GTLRJobService_CompletionResult : GTLRObject

/** The URL for the company logo if `type=COMPANY_NAME`. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/** The suggestion for the query. */
@property(nonatomic, copy, nullable) NSString *suggestion;

/**
 *  The completion topic.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_CompletionResult_Type_Combined Suggest both job
 *        titles and company names. (Value: "COMBINED")
 *    @arg @c kGTLRJobService_CompletionResult_Type_CompanyName Only suggest
 *        company names. (Value: "COMPANY_NAME")
 *    @arg @c kGTLRJobService_CompletionResult_Type_CompletionTypeUnspecified
 *        Default value. (Value: "COMPLETION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRJobService_CompletionResult_Type_JobTitle Only suggest job
 *        titles. (Value: "JOB_TITLE")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Input only.
 *  Create job request.
 *  The job typically becomes searchable within 10 seconds, but it may take
 *  up to 5 minutes for the job to become searchable.
 */
@interface GTLRJobService_CreateJobRequest : GTLRObject

/**
 *  If set to `true`, the service will not attempt to resolve a
 *  more precise address for the job.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableStreetAddressResolution;

/**
 *  Required.
 *  The Job to be created.
 */
@property(nonatomic, strong, nullable) GTLRJobService_Job *job;

@end


/**
 *  Custom attribute values that are either filterable or non-filterable.
 */
@interface GTLRJobService_CustomAttribute : GTLRObject

/**
 *  Optional.
 *  If the `filterable` flag is true, custom field values are searchable.
 *  If false, values are not searchable.
 *  Default is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *filterable;

/**
 *  Optional but at least one of string_values or long_value must
 *  be specified.
 *  This field is used to perform number range search.
 *  (`EQ`, `GT`, `GE`, `LE`, `LT`) over filterable `long_value`. For
 *  `long_value`, a value between Long.MIN and Long.MIN is allowed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longValue;

/**
 *  Optional but at least one of string_values or long_value must
 *  be specified.
 *  This field is used to perform a string match (`CASE_SENSITIVE_MATCH` or
 *  `CASE_INSENSITIVE_MATCH`) search.
 *  For filterable `string_values`, a maximum total number of 200 values
 *  is allowed, with each `string_value` has a byte size of no more than
 *  255B. For unfilterable `string_values`, the maximum total byte size of
 *  unfilterable `string_values` is 50KB.
 *  Empty strings are not allowed.
 */
@property(nonatomic, strong, nullable) GTLRJobService_StringValues *stringValues;

@end


/**
 *  Custom attributes histogram request. An error will be thrown if neither
 *  string_value_histogram or long_value_histogram_bucketing_option has
 *  been defined.
 */
@interface GTLRJobService_CustomAttributeHistogramRequest : GTLRObject

/**
 *  Required.
 *  Specifies the custom field key to perform a histogram on. If
 *  specified without `long_value_buckets` or `long_value_min_max`, a
 *  histogram on string values of the given `key` is triggered,
 *  otherwise histogram is performed on long values.
 */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  Optional.
 *  Specifies buckets used to perform a range histogram on Job's
 *  filterable long custom field values, or min/max value requirements.
 */
@property(nonatomic, strong, nullable) GTLRJobService_NumericBucketingOption *longValueHistogramBucketingOption;

/**
 *  Optional. If set to true, the response will include the histogram value for
 *  each key as a string.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *stringValueHistogram;

@end


/**
 *  Output only.
 *  Custom attribute histogram result.
 */
@interface GTLRJobService_CustomAttributeHistogramResult : GTLRObject

/** Stores the key of custom attribute the histogram is performed on. */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  Stores bucketed histogram counting result or min/max values for
 *  custom attribute long values associated with `key`.
 */
@property(nonatomic, strong, nullable) GTLRJobService_NumericBucketingResult *longValueHistogramResult;

/**
 *  Stores a map from the values of string custom field associated
 *  with `key` to the number of jobs with that value in this histogram result.
 */
@property(nonatomic, strong, nullable) GTLRJobService_CustomAttributeHistogramResult_StringValueHistogramResult *stringValueHistogramResult;

@end


/**
 *  Stores a map from the values of string custom field associated
 *  with `key` to the number of jobs with that value in this histogram result.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of intValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRJobService_CustomAttributeHistogramResult_StringValueHistogramResult : GTLRObject
@end


/**
 *  Resource that represents the custom data not captured by the standard
 *  fields.
 */
@interface GTLRJobService_CustomField : GTLRObject

/**
 *  Optional.
 *  The values of the custom data.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  Input only.
 *  Custom field filter of the search.
 */
@interface GTLRJobService_CustomFieldFilter : GTLRObject

/**
 *  Required.
 *  The query strings for the filter.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *queries;

/**
 *  Optional.
 *  The type of filter.
 *  Defaults to FilterType.OR.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_CustomFieldFilter_Type_And Search for a match with
 *        all queries. (Value: "AND")
 *    @arg @c kGTLRJobService_CustomFieldFilter_Type_FilterTypeUnspecified
 *        Default value. (Value: "FILTER_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRJobService_CustomFieldFilter_Type_Not Negate the set of
 *        filter values for the search. (Value: "NOT")
 *    @arg @c kGTLRJobService_CustomFieldFilter_Type_Or Search for a match with
 *        any query. (Value: "OR")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents a whole calendar date, e.g. date of birth. The time of day and
 *  time zone are either specified elsewhere or are not significant. The date
 *  is relative to the Proleptic Gregorian Calendar. The day may be 0 to
 *  represent a year and month where the day is not significant, e.g. credit
 *  card
 *  expiration date. The year may be 0 to represent a month and day independent
 *  of year, e.g. anniversary date. Related types are google.type.TimeOfDay
 *  and `google.protobuf.Timestamp`.
 */
@interface GTLRJobService_Date : GTLRObject

/**
 *  Day of month. Must be from 1 to 31 and valid for the year and month, or 0
 *  if specifying a year/month where the day is not significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of year. Must be from 1 to 12, or 0 if specifying a date without a
 *  month.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of date. Must be from 1 to 9999, or 0 if specifying a date without
 *  a year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  Deprecated. Use BatchDeleteJobsRequest instead.
 *  Input only.
 *  Delete job by filter request.
 *  The job typically becomes unsearchable within 10 seconds, but it may take
 *  up to 5 minutes for the job to become unsearchable.
 */
@interface GTLRJobService_DeleteJobsByFilterRequest : GTLRObject

/**
 *  Optional.
 *  If set to true, this call waits for all processing steps to complete
 *  before the job is cleaned up. Otherwise, the call returns while some
 *  steps are still taking place asynchronously, hence faster.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableFastProcess;

/**
 *  Required.
 *  Restrictions on the scope of the delete request.
 */
@property(nonatomic, strong, nullable) GTLRJobService_Filter *filter;

@end


/**
 *  Input only.
 *  Device information collected from the job searcher, candidate, or
 *  other entity conducting the job search. Providing this information improves
 *  the quality of the search results across devices.
 */
@interface GTLRJobService_DeviceInfo : GTLRObject

/**
 *  Optional.
 *  Type of the device.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_DeviceInfo_DeviceType_Android An Android device
 *        native application. (Value: "ANDROID")
 *    @arg @c kGTLRJobService_DeviceInfo_DeviceType_DeviceTypeUnspecified The
 *        device type is not specified. (Value: "DEVICE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRJobService_DeviceInfo_DeviceType_Ios An iOS device native
 *        application. (Value: "IOS")
 *    @arg @c kGTLRJobService_DeviceInfo_DeviceType_MobileWeb A mobile device
 *        web browser, such as a phone or tablet with a Chrome
 *        browser. (Value: "MOBILE_WEB")
 *    @arg @c kGTLRJobService_DeviceInfo_DeviceType_Other Other devices types.
 *        (Value: "OTHER")
 *    @arg @c kGTLRJobService_DeviceInfo_DeviceType_Web A desktop web browser,
 *        such as, Chrome, Firefox, Safari, or Internet
 *        Explorer) (Value: "WEB")
 */
@property(nonatomic, copy, nullable) NSString *deviceType;

/**
 *  Optional.
 *  A device-specific ID. It must be a unique identifier, which distinguishes
 *  the device from other devices.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRJobService_Empty : GTLRObject
@end


/**
 *  Deprecated. Always use CompensationFilter.
 *  Input only.
 *  Filter on job compensation type and amount.
 */
@interface GTLRJobService_ExtendedCompensationFilter : GTLRObject

/**
 *  Optional.
 *  Compensation range.
 */
@property(nonatomic, strong, nullable) GTLRJobService_ExtendedCompensationInfoCompensationRange *compensationRange;

/**
 *  Required.
 *  Specify desired ** base compensation entry's **
 *  ExtendedCompensationInfo.CompensationUnit.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *compensationUnits;

/**
 *  Optional.
 *  Specify currency in 3-letter
 *  [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) format. If
 *  unspecified, jobs are returned regardless of currency.
 */
@property(nonatomic, copy, nullable) NSString *currency;

/**
 *  Optional.
 *  Whether to include jobs whose compensation range is unspecified.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeJobWithUnspecifiedCompensationRange;

/**
 *  Required.
 *  Type of filter.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_ExtendedCompensationFilter_Type_AnnualizedBaseAmount
 *        Filter by annualized base compensation amount and ** base compensation
 *        entry's ** unit. Populate compensation_range and zero or more
 *        compensation_units. (Value: "ANNUALIZED_BASE_AMOUNT")
 *    @arg @c kGTLRJobService_ExtendedCompensationFilter_Type_AnnualizedTotalAmount
 *        Filter by annualized total compensation amount and ** base
 *        compensation
 *        entry's ** unit . Populate compensation_range and zero or more
 *        compensation_units. (Value: "ANNUALIZED_TOTAL_AMOUNT")
 *    @arg @c kGTLRJobService_ExtendedCompensationFilter_Type_FilterTypeUnspecified
 *        Filter type unspecified. Position holder, INVALID, should never be
 *        used. (Value: "FILTER_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRJobService_ExtendedCompensationFilter_Type_UnitAndAmount
 *        Filter by ** base compensation entry's ** unit and amount / range. A
 *        job
 *        is a match if and only if the job contains a base CompensationEntry,
 *        and
 *        the base entry's unit matches provided compensation_units and amount
 *        or range overlaps with provided compensation_range.
 *        See ExtendedCompensationInfo.CompensationEntry for definition of
 *        base compensation entry.
 *        Set exactly one
 *        compensation_units and populate
 *        compensation_range. (Value: "UNIT_AND_AMOUNT")
 *    @arg @c kGTLRJobService_ExtendedCompensationFilter_Type_UnitOnly Filter by
 *        ** base compensation entry's ** unit. A job is a match if and
 *        only if the job contains a base CompensationEntry and the base
 *        CompensationEntry's unit matches provided compensation_units.
 *        Populate one or more compensation_units.
 *        See ExtendedCompensationInfo.CompensationEntry for definition of
 *        base compensation entry. (Value: "UNIT_ONLY")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Deprecated. Use CompensationInfo.
 *  Describes job compensation.
 */
@interface GTLRJobService_ExtendedCompensationInfo : GTLRObject

/**
 *  Output only.
 *  Annualized base compensation range.
 */
@property(nonatomic, strong, nullable) GTLRJobService_ExtendedCompensationInfoCompensationRange *annualizedBaseCompensationRange;

/**
 *  Output only.
 *  Indicates annualized base compensation range cannot be derived, due to
 *  the job's base compensation entry cannot be annualized.
 *  See CompensationEntry for explanation on annualization and base
 *  compensation entry.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *annualizedBaseCompensationUnspecified;

/**
 *  Output only.
 *  Annualized total compensation range.
 */
@property(nonatomic, strong, nullable) GTLRJobService_ExtendedCompensationInfoCompensationRange *annualizedTotalCompensationRange;

/**
 *  Output only.
 *  Indicates annualized total compensation range cannot be derived, due to
 *  the job's all CompensationEntry cannot be annualized.
 *  See CompensationEntry for explanation on annualization and base
 *  compensation entry.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *annualizedTotalCompensationUnspecified;

/**
 *  Optional.
 *  A 3-letter [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html)
 *  currency code.
 */
@property(nonatomic, copy, nullable) NSString *currency;

/**
 *  Optional.
 *  Job compensation information.
 *  At most one entry can be of type
 *  ExtendedCompensationInfo.CompensationType.BASE, which is
 *  referred as ** base compensation entry ** for the job.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_ExtendedCompensationInfoCompensationEntry *> *entries;

@end


/**
 *  Deprecated. See CompensationInfo.
 *  A compensation entry that represents one component of compensation, such
 *  as base pay, bonus, or other compensation type.
 *  Annualization: One compensation entry can be annualized if
 *  - it contains valid amount or range.
 *  - and its expected_units_per_year is set or can be derived.
 *  Its annualized range is determined as (amount or range) times
 *  expected_units_per_year.
 */
@interface GTLRJobService_ExtendedCompensationInfoCompensationEntry : GTLRObject

/**
 *  Optional.
 *  Monetary amount.
 */
@property(nonatomic, strong, nullable) GTLRJobService_ExtendedCompensationInfoDecimal *amount;

/**
 *  Optional.
 *  Compensation description.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional.
 *  Expected number of units paid each year. If not specified, when
 *  Job.employment_types is FULLTIME, a default value is inferred
 *  based on unit. Default values:
 *  - HOURLY: 2080
 *  - DAILY: 260
 *  - WEEKLY: 52
 *  - MONTHLY: 12
 *  - ANNUAL: 1
 */
@property(nonatomic, strong, nullable) GTLRJobService_ExtendedCompensationInfoDecimal *expectedUnitsPerYear;

/**
 *  Optional.
 *  Compensation range.
 */
@property(nonatomic, strong, nullable) GTLRJobService_ExtendedCompensationInfoCompensationRange *range;

/**
 *  Required.
 *  Compensation type.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_Base
 *        Base compensation: Refers to the fixed amount of money paid to an
 *        employee by an employer in return for work performed. Base
 *        compensation
 *        does not include benefits, bonuses or any other potential compensation
 *        from an employer. (Value: "BASE")
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_Bonus
 *        Bonus. (Value: "BONUS")
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_Commissions
 *        Commission. (Value: "COMMISSIONS")
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_Equity
 *        Equity. (Value: "EQUITY")
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_ExtendedCompensationTypeUnspecified
 *        Default value. Equivalent to OTHER_COMPENSATION_TYPE. (Value:
 *        "EXTENDED_COMPENSATION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_OtherCompensationType
 *        Other compensation type. (Value: "OTHER_COMPENSATION_TYPE")
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_ProfitSharing
 *        Profit sharing. (Value: "PROFIT_SHARING")
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_SigningBonus
 *        Signing bonus. (Value: "SIGNING_BONUS")
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Type_Tips
 *        Tips. (Value: "TIPS")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Optional.
 *  Frequency of the specified amount.
 *  Default is CompensationUnit.OTHER_COMPENSATION_UNIT.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Unit_Daily
 *        Daily. (Value: "DAILY")
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Unit_ExtendedCompensationUnitUnspecified
 *        Default value. Equivalent to OTHER_COMPENSATION_UNIT. (Value:
 *        "EXTENDED_COMPENSATION_UNIT_UNSPECIFIED")
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Unit_Hourly
 *        Hourly. (Value: "HOURLY")
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Unit_Monthly
 *        Monthly. (Value: "MONTHLY")
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Unit_OneTime
 *        One time. (Value: "ONE_TIME")
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Unit_OtherCompensationUnit
 *        Other compensation units. (Value: "OTHER_COMPENSATION_UNIT")
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Unit_Weekly
 *        Weekly (Value: "WEEKLY")
 *    @arg @c kGTLRJobService_ExtendedCompensationInfoCompensationEntry_Unit_Yearly
 *        Yearly. (Value: "YEARLY")
 */
@property(nonatomic, copy, nullable) NSString *unit;

/**
 *  Optional.
 *  Indicates compensation amount and range are unset.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *unspecified;

@end


/**
 *  Deprecated. See CompensationInfo.
 *  Compensation range.
 */
@interface GTLRJobService_ExtendedCompensationInfoCompensationRange : GTLRObject

/**
 *  Required.
 *  Maximum value.
 */
@property(nonatomic, strong, nullable) GTLRJobService_ExtendedCompensationInfoDecimal *max;

/**
 *  Required.
 *  Minimum value.
 */
@property(nonatomic, strong, nullable) GTLRJobService_ExtendedCompensationInfoDecimal *min;

@end


/**
 *  Deprecated. See CompensationInfo.
 *  Decimal number.
 */
@interface GTLRJobService_ExtendedCompensationInfoDecimal : GTLRObject

/**
 *  Micro (10^-6) units.
 *  The value must be between -999,999 and +999,999 inclusive.
 *  If `units` is positive, `micros` must be positive or zero.
 *  If `units` is zero, `micros` can be positive, zero, or negative.
 *  If `units` is negative, `micros` must be negative or zero.
 *  For example -1.75 is represented as `units`=-1 and `micros`=-750,000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *micros;

/**
 *  Whole units.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *units;

@end


/**
 *  Deprecated. Use BatchDeleteJobsRequest instead.
 *  Input only.
 *  Filter for jobs to be deleted.
 */
@interface GTLRJobService_Filter : GTLRObject

/**
 *  Required.
 *  The requisition ID (or posting ID) assigned by the client to identify a
 *  job. This is intended for client identification and tracking of
 *  listings.
 *  name takes precedence over this field
 *  The maximum number of allowed characters is 225.
 */
@property(nonatomic, copy, nullable) NSString *requisitionId;

@end


/**
 *  Deprecated. Use SearchJobsRequest.histogram_facets instead to make
 *  a single call with both search and histogram.
 *  Input only.
 *  A request for the `GetHistogram` method.
 */
@interface GTLRJobService_GetHistogramRequest : GTLRObject

/**
 *  Optional.
 *  Controls whether to broaden the search to avoid too few results for a
 *  given query in instances where a search has sparse results. Results from a
 *  broadened query is a superset of the results from the original query.
 *  Defaults to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowBroadening;

/**
 *  Deprecated. Use query instead.
 *  Optional.
 *  Restrictions on the scope of the histogram.
 */
@property(nonatomic, strong, nullable) GTLRJobService_JobFilters *filters;

/**
 *  Optional.
 *  Query used to search against jobs, such as keyword, location filters, etc.
 */
@property(nonatomic, strong, nullable) GTLRJobService_JobQuery *query;

/**
 *  Meta information, such as `user_id`, collected from the job searcher or
 *  other entity conducting the job search, which is used to improve the search
 *  quality of the service. Users determine identifier values, which must be
 *  unique and consist.
 */
@property(nonatomic, strong, nullable) GTLRJobService_RequestMetadata *requestMetadata;

/**
 *  Required.
 *  A list of facets that specify the histogram data to be calculated
 *  against and returned.
 *  Histogram response times can be slow, and counts
 *  can be approximations. This call may be temporarily or permanently removed
 *  prior to the production release of Cloud Job Discovery.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *searchTypes;

@end


/**
 *  Deprecated. Use SearchJobsRequest.histogram_facets instead to make
 *  a single call with both search and histogram.
 *  Output only.
 *  The response of the GetHistogram method.
 */
@interface GTLRJobService_GetHistogramResponse : GTLRObject

/**
 *  Additional information for the API invocation, such as the request
 *  tracking id.
 */
@property(nonatomic, strong, nullable) GTLRJobService_ResponseMetadata *metadata;

/** The Histogram results. */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_HistogramResult *> *results;

@end


/**
 *  Input only.
 *  Histogram facets to be specified in SearchJobsRequest.
 */
@interface GTLRJobService_HistogramFacets : GTLRObject

/**
 *  Optional.
 *  Specifies compensation field-based histogram requests.
 *  Duplicate CompensationHistogramRequest.types are not allowed.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_CompensationHistogramRequest *> *compensationHistogramFacets;

/**
 *  Optional.
 *  Specifies the custom attributes histogram requests.
 *  Duplicate CustomAttributeHistogramRequest.keys are not allowed.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_CustomAttributeHistogramRequest *> *customAttributeHistogramFacets;

/**
 *  Optional. Specifies the simple type of histogram facets, e.g,
 *  `COMPANY_SIZE`, `EMPLOYMENT_TYPE` etc. This field is equivalent to
 *  GetHistogramRequest.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *simpleHistogramFacets;

@end


/**
 *  Output only.
 *  Result of a histogram call. The response contains the histogram map for the
 *  search type specified by HistogramResult.field.
 *  The response is a map of each filter value to the corresponding count of
 *  jobs for that filter.
 */
@interface GTLRJobService_HistogramResult : GTLRObject

/**
 *  The Histogram search filters.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_Admin1 Filter by
 *        Admin1, which is a global placeholder for
 *        referring to state, province, or the particular term a country uses to
 *        define the geographic structure below the country level.
 *        Examples include states codes such as "CA", "IL", "NY", and
 *        provinces, such as "BC". (Value: "ADMIN1")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_Admin1Country A
 *        combination of state or province code with a country code. This field
 *        differs from `JOB_ADMIN1`, which can be used in multiple countries.
 *        (Value: "ADMIN1_COUNTRY")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_BaseCompensationUnit
 *        Base compensation unit. (Value: "BASE_COMPENSATION_UNIT")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_Category Filter by the
 *        Category. (Value: "CATEGORY")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_City Filter by the
 *        "city name", "Admin1 code", for example,
 *        "Mountain View, CA" or "New York, NY". (Value: "CITY")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CityCoordinate Filter
 *        by the city center GPS coordinate (latitude and longitude), for
 *        example, 37.4038522,-122.0987765. Since the coordinates of a city
 *        center
 *        can change, clients may need to refresh them periodically. (Value:
 *        "CITY_COORDINATE")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CompanyDisplayName
 *        Company display name. (Value: "COMPANY_DISPLAY_NAME")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CompanyId Filter by the
 *        company id field. (Value: "COMPANY_ID")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CompanySize Filter by
 *        the company size type field, such as `BIG`, `SMALL` or `BIGGER`.
 *        (Value: "COMPANY_SIZE")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CompanyTitle
 *        Deprecated. Use COMPANY_DISPLAY_NAME instead.
 *        Company display name. (Value: "COMPANY_TITLE")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_Country Filter by the
 *        country code of job, such as US, JP, FR. (Value: "COUNTRY")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField1 Filter by
 *        custom field 1. (Value: "CUSTOM_FIELD_1")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField10 Filter by
 *        custom field 10. (Value: "CUSTOM_FIELD_10")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField11 Filter by
 *        custom field 11. (Value: "CUSTOM_FIELD_11")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField12 Filter by
 *        custom field 12. (Value: "CUSTOM_FIELD_12")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField13 Filter by
 *        custom field 13. (Value: "CUSTOM_FIELD_13")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField14 Filter by
 *        custom field 14. (Value: "CUSTOM_FIELD_14")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField15 Filter by
 *        custom field 15. (Value: "CUSTOM_FIELD_15")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField16 Filter by
 *        custom field 16. (Value: "CUSTOM_FIELD_16")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField17 Filter by
 *        custom field 17. (Value: "CUSTOM_FIELD_17")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField18 Filter by
 *        custom field 18. (Value: "CUSTOM_FIELD_18")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField19 Filter by
 *        custom field 19. (Value: "CUSTOM_FIELD_19")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField2 Filter by
 *        custom field 2. (Value: "CUSTOM_FIELD_2")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField20 Filter by
 *        custom field 20. (Value: "CUSTOM_FIELD_20")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField3 Filter by
 *        custom field 3. (Value: "CUSTOM_FIELD_3")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField4 Filter by
 *        custom field 4. (Value: "CUSTOM_FIELD_4")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField5 Filter by
 *        custom field 5. (Value: "CUSTOM_FIELD_5")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField6 Filter by
 *        custom field 6. (Value: "CUSTOM_FIELD_6")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField7 Filter by
 *        custom field 7. (Value: "CUSTOM_FIELD_7")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField8 Filter by
 *        custom field 8. (Value: "CUSTOM_FIELD_8")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_CustomField9 Filter by
 *        custom field 9. (Value: "CUSTOM_FIELD_9")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_DatePublished Filter by
 *        the date published field. Values are stringified
 *        with TimeRange, for example, TimeRange.PAST_MONTH. (Value:
 *        "DATE_PUBLISHED")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_EducationLevel Filter
 *        by the required education level of the job. (Value: "EDUCATION_LEVEL")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_EmploymentType Filter
 *        by the employment type field, such as `FULL_TIME` or `PART_TIME`.
 *        (Value: "EMPLOYMENT_TYPE")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_ExperienceLevel Filter
 *        by the required experience level of the job. (Value:
 *        "EXPERIENCE_LEVEL")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_JobFieldUnspecified The
 *        default value if search type is not specified. (Value:
 *        "JOB_FIELD_UNSPECIFIED")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_Language Filter by the
 *        language code portion of the locale field, such as "en" or
 *        "fr". (Value: "LANGUAGE")
 *    @arg @c kGTLRJobService_HistogramResult_SearchType_Locale Filter by the
 *        locale field of a job, such as "en-US", "fr-FR".
 *        This is the BCP-47 language code, such as "en-US" or "sr-Latn".
 *        For more information, see
 *        [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).
 *        (Value: "LOCALE")
 */
@property(nonatomic, copy, nullable) NSString *searchType;

/**
 *  A map from the values of field to the number of jobs with that value
 *  in this search result.
 *  Key: search type (filter names, such as the companyName).
 *  Values: the count of jobs that match the filter for this search.
 */
@property(nonatomic, strong, nullable) GTLRJobService_HistogramResult_Values *values;

@end


/**
 *  A map from the values of field to the number of jobs with that value
 *  in this search result.
 *  Key: search type (filter names, such as the companyName).
 *  Values: the count of jobs that match the filter for this search.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of intValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRJobService_HistogramResult_Values : GTLRObject
@end


/**
 *  Output only.
 *  Histogram results that matches HistogramFacets specified in
 *  SearchJobsRequest.
 */
@interface GTLRJobService_HistogramResults : GTLRObject

/**
 *  Specifies compensation field-based histogram results that matches
 *  HistogramFacets.compensation_histogram_requests.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_CompensationHistogramResult *> *compensationHistogramResults;

/**
 *  Specifies histogram results for custom attributes that
 *  matches HistogramFacets.custom_attribute_histogram_facets.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_CustomAttributeHistogramResult *> *customAttributeHistogramResults;

/**
 *  Specifies histogram results that matches
 *  HistogramFacets.simple_histogram_facets.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_HistogramResult *> *simpleHistogramResults;

@end


/**
 *  A Job resource represents a job posting (also referred to as a "job listing"
 *  or "job requisition"). A job belongs to a Company, which is the hiring
 *  entity responsible for the job.
 */
@interface GTLRJobService_Job : GTLRObject

/**
 *  Optional but at least one of application_urls,
 *  application_email_list or application_instruction must be
 *  specified.
 *  Use this field to specify email address(es) to which resumes or
 *  applications can be sent.
 *  The maximum number of allowed characters is 255.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *applicationEmailList;

/**
 *  Optional but at least one of application_urls,
 *  application_email_list or application_instruction must be
 *  specified.
 *  Use this field to provide instructions, such as "Mail your application
 *  to ...", that a candidate can follow to apply for the job.
 *  This field accepts and sanitizes HTML input, and also accepts
 *  bold, italic, ordered list, and unordered list markup tags.
 *  The maximum number of allowed characters is 3,000.
 */
@property(nonatomic, copy, nullable) NSString *applicationInstruction;

/**
 *  Optional but at least one of application_urls,
 *  application_email_list or application_instruction must be
 *  specified.
 *  Use this URL field to direct an applicant to a website, for example to
 *  link to an online application form.
 *  The maximum number of allowed characters is 2,000.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *applicationUrls;

/**
 *  Optional.
 *  The benefits included with the job.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *benefits;

/**
 *  Output only.
 *  The name of the company listing the job.
 */
@property(nonatomic, copy, nullable) NSString *companyDisplayName;

/**
 *  Optional but one of company_name or distributor_company_id must be
 *  provided.
 *  The resource name of the company listing the job, such as
 *  /companies/foo. This field takes precedence over the
 *  distributor-assigned company identifier, distributor_company_id.
 */
@property(nonatomic, copy, nullable) NSString *companyName;

/**
 *  Deprecated. Use company_display_name instead.
 *  Output only.
 *  The name of the company listing the job.
 */
@property(nonatomic, copy, nullable) NSString *companyTitle;

/**
 *  Optional.
 *  Job compensation information.
 */
@property(nonatomic, strong, nullable) GTLRJobService_CompensationInfo *compensationInfo;

/**
 *  Output only.
 *  The timestamp when this job was created.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional.
 *  A map of fields to hold both filterable and non-filterable custom job
 *  attributes that are not covered by the provided structured fields.
 *  This field is a more general combination of the deprecated id-based
 *  filterable_custom_fields and string-based
 *  non_filterable_custom_fields.
 *  The keys of the map are strings up to 64 bytes and must match the
 *  pattern: a-zA-Z*.
 *  At most 100 filterable and at most 100 unfilterable keys are supported.
 *  For filterable `string_values`, across all keys at most 200 values are
 *  allowed, with each string no more than 255 characters. For unfilterable
 *  `string_values`, the maximum total size of `string_values` across all keys
 *  is 50KB.
 */
@property(nonatomic, strong, nullable) GTLRJobService_Job_CustomAttributes *customAttributes;

/**
 *  Optional.
 *  The department or functional area within the company with the open
 *  position.
 *  The maximum number of allowed characters is 255.
 */
@property(nonatomic, copy, nullable) NSString *department;

/**
 *  Required.
 *  The description of the job, which typically includes a multi-paragraph
 *  description of the company and related information. Separate fields are
 *  provided on the job object for responsibilities,
 *  qualifications, and other job characteristics. Use of
 *  these separate job fields is recommended.
 *  This field accepts and sanitizes HTML input, and also accepts
 *  bold, italic, ordered list, and unordered list markup tags.
 *  The maximum number of allowed characters is 100,000.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional but one of company_name or distributor_company_id must be
 *  provided.
 *  A unique company identifier that used by job distributors to identify an
 *  employer's company entity. company_name takes precedence over
 *  this field, and is the recommended field to use to identify companies.
 *  The maximum number of allowed characters is 255.
 */
@property(nonatomic, copy, nullable) NSString *distributorCompanyId;

/**
 *  Optional.
 *  The desired education level for the job, such as
 *  "Bachelors", "Masters", "Doctorate".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *educationLevels;

/**
 *  Optional.
 *  The employment type(s) of a job, for example,
 *  full time or
 *  part time.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *employmentTypes;

/**
 *  Optional.
 *  The end date of the job in UTC time zone. Typically this field
 *  is used for contracting engagements.
 *  Dates prior to 1970/1/1 and invalid date formats are ignored.
 */
@property(nonatomic, strong, nullable) GTLRJobService_Date *endDate;

/**
 *  Optional but strongly recommended to be provided for the best service
 *  experience.
 *  The expiration timestamp of the job. After this timestamp, the
 *  job is marked as expired, and it no longer appears in search results. The
 *  expired job can't be deleted or listed by the DeleteJob and
 *  ListJobs APIs, but it can be retrieved with the GetJob API or
 *  updated with the UpdateJob API. An expired job can be updated and
 *  opened again by using a future expiration timestamp. It can also remain
 *  expired. Updating an expired job to be open fails if there is another
 *  existing open job with same requisition_id, company_name and
 *  language_code.
 *  The expired jobs are retained in our system for 90 days. However, the
 *  overall expired job count cannot exceed 3 times the maximum of open jobs
 *  count over the past week, otherwise jobs with earlier expire time are
 *  cleaned first. Expired jobs are no longer accessible after they are cleaned
 *  out.
 *  The format of this field is RFC 3339 date strings. Example:
 *  2000-01-01T00:00:00.999999999Z
 *  See
 *  [https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt).
 *  A valid date range is between 1970-01-01T00:00:00.0Z and
 *  2100-12-31T23:59:59.999Z. Invalid dates are ignored and treated as expire
 *  time not provided.
 *  If this value is not provided on job creation or invalid, the job posting
 *  expires after 30 days from the job's creation time. For example, if the
 *  job was created on 2017/01/01 13:00AM UTC with an unspecified expiration
 *  date, the job expires after 2017/01/31 13:00AM UTC.
 *  If this value is not provided but expiry_date is, expiry_date is
 *  used.
 *  If this value is not provided on job update, it depends on the field masks
 *  set by UpdateJobRequest.update_job_fields. If the field masks include
 *  expiry_time, or the masks are empty meaning that every field is
 *  updated, the job posting expires after 30 days from the job's last
 *  update time. Otherwise the expiration date isn't updated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/**
 *  Deprecated. Use expire_time instead.
 *  Optional but strongly recommended to be provided for the best service
 *  experience.
 *  The expiration date of the job in UTC time. After 12 am on this date, the
 *  job is marked as expired, and it no longer appears in search results.
 *  The expired job can't be deleted or listed by the DeleteJob and
 *  ListJobs APIs, but it can be retrieved with the GetJob API or
 *  updated with the UpdateJob API. An expired job can be updated and
 *  opened again by using a future expiration date. It can also remain expired.
 *  Updating an expired job to be open fails if there is another existing open
 *  job with same requisition_id, company_name and language_code.
 *  The expired jobs are retained in our system for 90 days. However, the
 *  overall expired job count cannot exceed 3 times the maximum of open jobs
 *  count over the past week, otherwise jobs with earlier expire time are
 *  removed first. Expired jobs are no longer accessible after they are cleaned
 *  out.
 *  A valid date range is between 1970/1/1 and 2100/12/31. Invalid dates are
 *  ignored and treated as expiry date not provided.
 *  If this value is not provided on job creation or is invalid, the job
 *  posting expires after 30 days from the job's creation time. For example, if
 *  the job was created on 2017/01/01 13:00AM UTC with an unspecified
 *  expiration date, the job expires after 2017/01/31 13:00AM UTC.
 *  If this value is not provided on job update, it depends on the field masks
 *  set by UpdateJobRequest.update_job_fields. If the field masks include
 *  expiry_date, or the masks are empty meaning that every field is
 *  updated, the job expires after 30 days from the job's last update time.
 *  Otherwise the expiration date isn't updated.
 */
@property(nonatomic, strong, nullable) GTLRJobService_Date *expiryDate;

/**
 *  Deprecated. Always use compensation_info.
 *  Optional.
 *  Job compensation information.
 *  This field replaces compensation_info.
 */
@property(nonatomic, strong, nullable) GTLRJobService_ExtendedCompensationInfo *extendedCompensationInfo;

/**
 *  Deprecated. Use custom_attributes instead.
 *  Optional.
 *  A map of fields to hold filterable custom job attributes not captured by
 *  the standard fields such as job_title, company_name, or
 *  level. These custom fields store arbitrary
 *  string values, and can be used for purposes not covered by
 *  the structured fields. For the best search experience, use of the
 *  structured rather than custom fields is recommended.
 *  Data stored in these custom fields fields are indexed and
 *  searched against by keyword searches (see
 *  SearchJobsRequest.custom_field_filters][]). To list jobs by
 *  custom fields, see ListCustomFieldsRequest.field_id.
 *  The map key must be a number between 1-20. If an invalid key is
 *  provided on job create or update, an error is returned.
 */
@property(nonatomic, strong, nullable) GTLRJobService_Job_FilterableCustomFields *filterableCustomFields;

/**
 *  Optional.
 *  A description of bonus, commission, and other compensation
 *  incentives associated with the job not including salary or pay.
 *  The maximum number of allowed characters is 10,000.
 */
@property(nonatomic, copy, nullable) NSString *incentives;

/**
 *  Output only.
 *  Structured locations of the job, resolved from locations.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_JobLocation *> *jobLocations;

/**
 *  Required.
 *  The title of the job, such as "Software Engineer"
 *  The maximum number of allowed characters is 500.
 */
@property(nonatomic, copy, nullable) NSString *jobTitle;

/**
 *  Optional.
 *  The language of the posting. This field is distinct from
 *  any requirements for fluency that are associated with the job.
 *  Language codes must be in BCP-47 format, such as "en-US" or "sr-Latn".
 *  For more information, see
 *  [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).
 *  The default value is `en-US`.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Optional.
 *  The experience level associated with the job, such as "Entry Level".
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_Job_Level_Director Senior-level managers
 *        responsible for managing teams of managers. (Value: "DIRECTOR")
 *    @arg @c kGTLRJobService_Job_Level_EntryLevel Entry-level individual
 *        contributors, typically with less than 2 years of
 *        experience in a similar role. Includes interns. (Value: "ENTRY_LEVEL")
 *    @arg @c kGTLRJobService_Job_Level_Executive Executive-level managers and
 *        above, including C-level positions. (Value: "EXECUTIVE")
 *    @arg @c kGTLRJobService_Job_Level_Experienced Experienced individual
 *        contributors, typically with 2+ years of
 *        experience in a similar role. (Value: "EXPERIENCED")
 *    @arg @c kGTLRJobService_Job_Level_JobLevelUnspecified The default value if
 *        the level is not specified. (Value: "JOB_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRJobService_Job_Level_Manager Entry- to mid-level managers
 *        responsible for managing a team of people. (Value: "MANAGER")
 */
@property(nonatomic, copy, nullable) NSString *level;

/**
 *  Optional but strongly recommended to be provided for the best service
 *  experience.
 *  Location(s) where the job is hiring.
 *  Providing the full street address(es) of the hiring
 *  location is recommended to enable better API results, including
 *  job searches by commute time.
 *  At most 50 locations are allowed for best search performance. If a job has
 *  more locations, it is suggested to split it into multiple jobs with unique
 *  requisition_ids (e.g. 'ReqA' becomes 'ReqA-1', 'ReqA-2', etc.) as
 *  multiple jobs with the same requisition_id, company_name and
 *  language_code are not allowed. If the original requisition_id must
 *  be preserved, a custom field should be used for storage. It is also
 *  suggested to group the locations that close to each other in the same job
 *  for better search experience.
 *  The maximum number of allowed characters is 500.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *locations;

/**
 *  Required during job update.
 *  Resource name assigned to a job by the API, for example, "/jobs/foo". Use
 *  of this field in job queries and API calls is preferred over the use of
 *  requisition_id since this value is unique.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional.
 *  A promotion value of the job, as determined by the client.
 *  The value determines the sort order of the jobs returned when searching for
 *  jobs using the featured jobs search call, with higher promotional values
 *  being returned first and ties being resolved by relevance sort. Only the
 *  jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH.
 *  Default value is 0, and negative values are treated as 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *promotionValue;

/**
 *  Optional.
 *  The date this job was most recently published in UTC format. The default
 *  value is the time the request arrives at the server.
 */
@property(nonatomic, strong, nullable) GTLRJobService_Date *publishDate;

/**
 *  Optional.
 *  A description of the qualifications required to perform the
 *  job. The use of this field is recommended
 *  as an alternative to using the more general description field.
 *  This field accepts and sanitizes HTML input, and also accepts
 *  bold, italic, ordered list, and unordered list markup tags.
 *  The maximum number of allowed characters is 10,000.
 */
@property(nonatomic, copy, nullable) NSString *qualifications;

/**
 *  Output only.
 *  The URL of a web page that displays job details.
 */
@property(nonatomic, copy, nullable) NSString *referenceUrl;

/**
 *  Optional.
 *  The job Region (for example, state, country) throughout which the job
 *  is available. If this field is set, a
 *  LocationFilter in a search query within the job region
 *  finds this job if an exact location match is not specified.
 *  If this field is set, setting job locations
 *  to the same location level as this field is strongly recommended.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_Job_Region_NationWide In addition to exact
 *        location matching, job is returned when
 *        LocationFilter in search query is in the same country as this job.
 *        For example, if a `NATION_WIDE` job is posted in "USA", it is
 *        returned if LocationFilter has 'Mountain View'. (Value: "NATION_WIDE")
 *    @arg @c kGTLRJobService_Job_Region_RegionUnspecified If the region is
 *        unspecified, the job is only returned if it
 *        matches the LocationFilter. (Value: "REGION_UNSPECIFIED")
 *    @arg @c kGTLRJobService_Job_Region_StateWide In additiona to exact
 *        location matching, job is returned when the
 *        LocationFilter in search query is in the same state as this job.
 *        For example, if a `STATE_WIDE` job is posted in "CA, USA", it is
 *        returned if LocationFilter has "Mountain View". (Value: "STATE_WIDE")
 *    @arg @c kGTLRJobService_Job_Region_Telecommute Job allows employees to
 *        work remotely (telecommute).
 *        If locations are provided with this value, the job is
 *        considered as having a location, but telecommuting is allowed. (Value:
 *        "TELECOMMUTE")
 */
@property(nonatomic, copy, nullable) NSString *region;

/**
 *  Required.
 *  The requisition ID, also referred to as the posting ID, assigned by the
 *  client to identify a job. This field is intended to be used by clients
 *  for client identification and tracking of listings. A job is not allowed
 *  to be created if there is another job with the same requisition_id,
 *  company_name and language_code.
 *  The maximum number of allowed characters is 225.
 */
@property(nonatomic, copy, nullable) NSString *requisitionId;

/**
 *  Optional.
 *  A description of job responsibilities. The use of this field is
 *  recommended as an alternative to using the more general description
 *  field.
 *  This field accepts and sanitizes HTML input, and also accepts
 *  bold, italic, ordered list, and unordered list markup tags.
 *  The maximum number of allowed characters is 10,000.
 */
@property(nonatomic, copy, nullable) NSString *responsibilities;

/**
 *  Optional.
 *  The start date of the job in UTC time zone. Typically this field
 *  is used for contracting engagements.
 *  Dates prior to 1970/1/1 and invalid date formats are ignored.
 */
@property(nonatomic, strong, nullable) GTLRJobService_Date *startDate;

/**
 *  Deprecated. Use custom_attributes instead.
 *  Optional.
 *  A map of fields to hold non-filterable custom job attributes, similar to
 *  filterable_custom_fields. These fields are distinct in that the data
 *  in these fields are not indexed. Therefore, the client cannot search
 *  against them, nor can the client use them to list jobs.
 *  The key of the map can be any valid string.
 */
@property(nonatomic, strong, nullable) GTLRJobService_Job_UnindexedCustomFields *unindexedCustomFields;

/**
 *  Output only.
 *  The timestamp when this job was last updated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Optional.
 *  The visibility of the job.
 *  Defaults to JobVisibility.PRIVATE if not specified.
 *  Currently only JobVisibility.PRIVATE is supported.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_Job_Visibility_Google The Job is visible to the
 *        owner and may be visible to other applications
 *        and processes at Google.
 *        Not yet supported. Use PRIVATE. (Value: "GOOGLE")
 *    @arg @c kGTLRJobService_Job_Visibility_JobVisibilityUnspecified Default
 *        value. (Value: "JOB_VISIBILITY_UNSPECIFIED")
 *    @arg @c kGTLRJobService_Job_Visibility_Private The Job is only visible to
 *        the owner. (Value: "PRIVATE")
 *    @arg @c kGTLRJobService_Job_Visibility_Public The Job is visible to the
 *        owner and may be visible to all other API
 *        clients.
 *        Not yet supported. Use PRIVATE. (Value: "PUBLIC")
 */
@property(nonatomic, copy, nullable) NSString *visibility;

@end


/**
 *  Optional.
 *  A map of fields to hold both filterable and non-filterable custom job
 *  attributes that are not covered by the provided structured fields.
 *  This field is a more general combination of the deprecated id-based
 *  filterable_custom_fields and string-based
 *  non_filterable_custom_fields.
 *  The keys of the map are strings up to 64 bytes and must match the
 *  pattern: a-zA-Z*.
 *  At most 100 filterable and at most 100 unfilterable keys are supported.
 *  For filterable `string_values`, across all keys at most 200 values are
 *  allowed, with each string no more than 255 characters. For unfilterable
 *  `string_values`, the maximum total size of `string_values` across all keys
 *  is 50KB.
 *
 *  @note This class is documented as having more properties of
 *        GTLRJobService_CustomAttribute. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRJobService_Job_CustomAttributes : GTLRObject
@end


/**
 *  Deprecated. Use custom_attributes instead.
 *  Optional.
 *  A map of fields to hold filterable custom job attributes not captured by
 *  the standard fields such as job_title, company_name, or
 *  level. These custom fields store arbitrary
 *  string values, and can be used for purposes not covered by
 *  the structured fields. For the best search experience, use of the
 *  structured rather than custom fields is recommended.
 *  Data stored in these custom fields fields are indexed and
 *  searched against by keyword searches (see
 *  SearchJobsRequest.custom_field_filters][]). To list jobs by
 *  custom fields, see ListCustomFieldsRequest.field_id.
 *  The map key must be a number between 1-20. If an invalid key is
 *  provided on job create or update, an error is returned.
 *
 *  @note This class is documented as having more properties of
 *        GTLRJobService_CustomField. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRJobService_Job_FilterableCustomFields : GTLRObject
@end


/**
 *  Deprecated. Use custom_attributes instead.
 *  Optional.
 *  A map of fields to hold non-filterable custom job attributes, similar to
 *  filterable_custom_fields. These fields are distinct in that the data
 *  in these fields are not indexed. Therefore, the client cannot search
 *  against them, nor can the client use them to list jobs.
 *  The key of the map can be any valid string.
 *
 *  @note This class is documented as having more properties of
 *        GTLRJobService_CustomField. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRJobService_Job_UnindexedCustomFields : GTLRObject
@end


/**
 *  Input only.
 *  Deprecated. Use JobQuery instead.
 *  The filters required to perform a search query or histogram.
 */
@interface GTLRJobService_JobFilters : GTLRObject

/**
 *  Optional.
 *  The category filter specifies the categories of jobs to search against.
 *  See Category for more information.
 *  If a value is not specified, jobs from any category are searched against.
 *  If multiple values are specified, jobs from any of the specified
 *  categories are searched against.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *categories;

/**
 *  Optional.
 *  Allows filtering jobs by commute time with different travel methods (e.g.
 *  driving or public transit). Note: this only works with COMMUTE
 *  MODE. When specified, [JobFilters.location_filters] will be
 *  ignored.
 *  Currently we do not support sorting by commute time.
 */
@property(nonatomic, strong, nullable) GTLRJobService_CommutePreference *commuteFilter;

/**
 *  Optional.
 *  The company names filter specifies the company entities to search
 *  against.
 *  If a value is not specified, jobs are searched for against all companies.
 *  If multiple values are specified, jobs are searched against the
 *  specified companies.
 *  At most 20 company filters are allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *companyNames;

/**
 *  Optional.
 *  This filter specifies the exact company titles
 *  of jobs to search against.
 *  If a value is not specified, jobs within the search results can be
 *  associated with any company.
 *  If multiple values are specified, jobs within the search results may be
 *  associated with any of the specified companies.
 *  At most 20 company title filters are allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *companyTitles;

/**
 *  Optional.
 *  This search filter is applied only to
 *  Job.compensation_info. For example, if the filter is specified
 *  as "Hourly job with per-hour compensation > $15", only jobs that meet
 *  this criteria are searched. If a filter is not defined, all open jobs
 *  are searched.
 */
@property(nonatomic, strong, nullable) GTLRJobService_CompensationFilter *compensationFilter;

/**
 *  Optional.
 *  This filter specifies a structured syntax to match against the
 *  Job.custom_attributes that are marked as `filterable`.
 *  The syntax for this expression is a subset of Google SQL syntax.
 *  Supported operators are: =, !=, <, <=, >, >= where the left of the operator
 *  is a custom field key and the right of the operator is a number or string
 *  (surrounded by quotes) value.
 *  Supported functions are LOWER(<field_name>) to
 *  perform case insensitive match and EMPTY(<field_name>) to filter on the
 *  existence of a key.
 *  Boolean expressions (AND/OR/NOT) are supported up to 3 levels of
 *  nesting (For example, "((A AND B AND C) OR NOT D) AND E"), and there can
 *  be a maximum of 50 comparisons/functions in the expression. The expression
 *  must be < 2000 characters in length.
 *  Sample Query:
 *  (key1 = "TEST" OR LOWER(key1)="test" OR NOT EMPTY(key1)) AND key2 > 100
 */
@property(nonatomic, copy, nullable) NSString *customAttributeFilter;

/**
 *  Deprecated. Use custom_attribute_filter instead.
 *  Optional.
 *  This filter specifies searching against
 *  custom field values. See Job.filterable_custom_fields for information.
 *  The key value specifies a number between 1-20 (the service
 *  supports 20 custom fields) corresponding to the desired custom field map
 *  value. If an invalid key is provided or specified together with
 *  custom_attribute_filter, an error is thrown.
 */
@property(nonatomic, strong, nullable) GTLRJobService_JobFilters_CustomFieldFilters *customFieldFilters;

/**
 *  Optional.
 *  This flag controls the spell-check feature. If false, the
 *  service attempts to correct a misspelled query,
 *  for example, "enginee" is corrected to "engineer".
 *  Defaults to false: a spell check is performed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableSpellCheck;

/**
 *  Optional.
 *  The employment type filter specifies the employment type of jobs to
 *  search against, such as EmploymentType.FULL_TIME.
 *  If a value is not specified, jobs in the search results include any
 *  employment type.
 *  If multiple values are specified, jobs in the search results include any
 *  of the specified employment types.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *employmentTypes;

/**
 *  Deprecated. Always use compensation_filter.
 *  Optional.
 *  This search filter is applied only to
 *  Job.extended_compensation_info. For example, if the filter is specified
 *  as "Hourly job with per-hour compensation > $15", only jobs that meet
 *  these criteria are searched. If a filter is not defined, all open jobs
 *  are searched.
 */
@property(nonatomic, strong, nullable) GTLRJobService_ExtendedCompensationFilter *extendedCompensationFilter;

/**
 *  Optional.
 *  This filter specifies the locale of jobs to search against,
 *  for example, "en-US".
 *  If a value is not specified, the search results can contain jobs in any
 *  locale.
 *  Language codes should be in BCP-47 format, such as "en-US" or "sr-Latn".
 *  For more information, see
 *  [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).
 *  At most 10 language code filters are allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *languageCodes;

/**
 *  Optional.
 *  The location filter specifies geo-regions containing the jobs to
 *  search against. See LocationFilter for more information.
 *  If a location value is not specified, jobs are be retrieved
 *  from all locations.
 *  If multiple values are specified, jobs are retrieved from any of the
 *  specified locations, and, if different values are specified
 *  for the LocationFilter.distance_in_miles parameter, the maximum
 *  provided distance is used for all locations.
 *  At most 5 location filters are allowed.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_LocationFilter *> *locationFilters;

/**
 *  Optional.
 *  Jobs published within a range specified by this filter are searched
 *  against, for example, DateRange.PAST_MONTH. If a value is not
 *  specified, all open jobs are searched against regardless of the
 *  date on which they were published.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_JobFilters_PublishDateRange_DateRangeUnspecified
 *        Default value: Filtering on time is not performed. (Value:
 *        "DATE_RANGE_UNSPECIFIED")
 *    @arg @c kGTLRJobService_JobFilters_PublishDateRange_Past24Hours The past
 *        24 hours (Value: "PAST_24_HOURS")
 *    @arg @c kGTLRJobService_JobFilters_PublishDateRange_Past3Days The past 3
 *        days (Value: "PAST_3_DAYS")
 *    @arg @c kGTLRJobService_JobFilters_PublishDateRange_PastMonth The past
 *        month (30 days) (Value: "PAST_MONTH")
 *    @arg @c kGTLRJobService_JobFilters_PublishDateRange_PastWeek The past week
 *        (7 days) (Value: "PAST_WEEK")
 *    @arg @c kGTLRJobService_JobFilters_PublishDateRange_PastYear The past year
 *        (365 days) (Value: "PAST_YEAR")
 */
@property(nonatomic, copy, nullable) NSString *publishDateRange;

/**
 *  Optional.
 *  The query filter contains the keywords that match against the job
 *  title, description, and location fields.
 *  The maximum query size is 255 bytes.
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Optional.
 *  This flag controls whether the job search should be restricted to jobs
 *  owned by the current user.
 *  Defaults to false that all jobs accessible to the
 *  user are searched against.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *tenantJobOnly;

@end


/**
 *  Deprecated. Use custom_attribute_filter instead.
 *  Optional.
 *  This filter specifies searching against
 *  custom field values. See Job.filterable_custom_fields for information.
 *  The key value specifies a number between 1-20 (the service
 *  supports 20 custom fields) corresponding to the desired custom field map
 *  value. If an invalid key is provided or specified together with
 *  custom_attribute_filter, an error is thrown.
 *
 *  @note This class is documented as having more properties of
 *        GTLRJobService_CustomFieldFilter. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRJobService_JobFilters_CustomFieldFilters : GTLRObject
@end


/**
 *  Output only.
 *  A resource that represents a location with full geographic
 *  information.
 */
@interface GTLRJobService_JobLocation : GTLRObject

/** An object representing a latitude/longitude pair. */
@property(nonatomic, strong, nullable) GTLRJobService_LatLng *latLng;

/**
 *  The type of a location, which corresponds to the address lines field of
 *  PostalAddress. For example, "Downtown, Atlanta, GA, USA" has a type of
 *  LocationType#NEIGHBORHOOD, and "Kansas City, KS, USA" has a type of
 *  LocationType#LOCALITY.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_JobLocation_LocationType_AdministrativeArea A
 *        state or equivalent level location. (Value: "ADMINISTRATIVE_AREA")
 *    @arg @c kGTLRJobService_JobLocation_LocationType_Country A country level
 *        location. (Value: "COUNTRY")
 *    @arg @c kGTLRJobService_JobLocation_LocationType_Locality A city or
 *        equivalent level location. (Value: "LOCALITY")
 *    @arg @c kGTLRJobService_JobLocation_LocationType_LocationTypeUnspecified
 *        Default value if the type is not specified. (Value:
 *        "LOCATION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRJobService_JobLocation_LocationType_Neighborhood A
 *        neighborhood level location. (Value: "NEIGHBORHOOD")
 *    @arg @c kGTLRJobService_JobLocation_LocationType_PostalCode A postal code
 *        level location. (Value: "POSTAL_CODE")
 *    @arg @c kGTLRJobService_JobLocation_LocationType_StreetAddress A street
 *        address level location. (Value: "STREET_ADDRESS")
 *    @arg @c kGTLRJobService_JobLocation_LocationType_SubAdministrativeArea A
 *        county or equivalent level location. (Value:
 *        "SUB_ADMINISTRATIVE_AREA")
 *    @arg @c kGTLRJobService_JobLocation_LocationType_SubLocality A sublocality
 *        is a subdivision of a locality, for example a city borough,
 *        ward, or arrondissement. Sublocalities are usually recognized by a
 *        local
 *        political authority. For example, Manhattan and Brooklyn are
 *        recognized
 *        as boroughs by the City of New York, and are therefore modeled as
 *        sublocalities. (Value: "SUB_LOCALITY")
 *    @arg @c kGTLRJobService_JobLocation_LocationType_SubLocality1 A district
 *        or equivalent level location. (Value: "SUB_LOCALITY_1")
 *    @arg @c kGTLRJobService_JobLocation_LocationType_SubLocality2 A smaller
 *        district or equivalent level display. (Value: "SUB_LOCALITY_2")
 */
@property(nonatomic, copy, nullable) NSString *locationType;

/**
 *  Postal address of the location that includes human readable information,
 *  such as postal delivery and payments addresses. Given a postal address,
 *  a postal service can deliver items to a premises, P.O. Box, or other
 *  delivery location.
 */
@property(nonatomic, strong, nullable) GTLRJobService_PostalAddress *postalAddress;

/**
 *  Radius in meters of the job location. This value is derived from the
 *  location bounding box in which a circle with the specified radius
 *  centered from LatLng coves the area associated with the job location.
 *  For example, currently, "Mountain View, CA, USA" has a radius of
 *  7885.79 meters.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *radiusMeters;

@end


/**
 *  Input only.
 *  The query required to perform a search query or histogram.
 */
@interface GTLRJobService_JobQuery : GTLRObject

/**
 *  Optional.
 *  The category filter specifies the categories of jobs to search against.
 *  See Category for more information.
 *  If a value is not specified, jobs from any category are searched against.
 *  If multiple values are specified, jobs from any of the specified
 *  categories are searched against.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *categories;

/**
 *  Optional.
 *  Allows filtering jobs by commute time with different travel methods (e.g.
 *  driving or public transit). Note: this only works with COMMUTE
 *  MODE. When specified, [JobQuery.location_filters] will be
 *  ignored.
 *  Currently we do not support sorting by commute time.
 */
@property(nonatomic, strong, nullable) GTLRJobService_CommutePreference *commuteFilter;

/**
 *  Optional.
 *  This filter specifies the exact company display
 *  name of jobs to search against.
 *  If a value is not specified, jobs within the search results can be
 *  associated with any company.
 *  If multiple values are specified, jobs within the search results may be
 *  associated with any of the specified companies.
 *  At most 20 company display name filters are allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *companyDisplayNames;

/**
 *  Optional.
 *  The company names filter specifies the company entities to search
 *  against.
 *  If a value is not specified, jobs are searched for against all
 *  companies.
 *  If multiple values are specified, jobs are searched against the
 *  specified companies.
 *  At most 20 company filters are allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *companyNames;

/**
 *  Optional.
 *  This search filter is applied only to
 *  Job.compensation_info. For example, if the filter is specified
 *  as "Hourly job with per-hour compensation > $15", only jobs that meet
 *  these criteria are searched. If a filter is not defined, all open jobs
 *  are searched.
 */
@property(nonatomic, strong, nullable) GTLRJobService_CompensationFilter *compensationFilter;

/**
 *  Optional.
 *  This filter specifies a structured syntax to match against the
 *  Job.custom_attributes that are marked as `filterable`.
 *  The syntax for this expression is a subset of Google SQL syntax.
 *  Supported operators are: =, !=, <, <=, >, >= where the left of the operator
 *  is a custom field key and the right of the operator is a number or string
 *  (surrounded by quotes) value.
 *  Supported functions are LOWER(<field_name>) to
 *  perform case insensitive match and EMPTY(<field_name>) to filter on the
 *  existence of a key.
 *  Boolean expressions (AND/OR/NOT) are supported up to 3 levels of
 *  nesting (for example, "((A AND B AND C) OR NOT D) AND E"), and there can
 *  be a maximum of 50 comparisons/functions in the expression. The expression
 *  must be < 2000 characters in length.
 *  Sample Query:
 *  (key1 = "TEST" OR LOWER(key1)="test" OR NOT EMPTY(key1)) AND key2 > 100
 */
@property(nonatomic, copy, nullable) NSString *customAttributeFilter;

/**
 *  Optional.
 *  This flag controls the spell-check feature. If false, the
 *  service attempts to correct a misspelled query,
 *  for example, "enginee" is corrected to "engineer".
 *  Defaults to false: a spell check is performed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableSpellCheck;

/**
 *  Optional.
 *  The employment type filter specifies the employment type of jobs to
 *  search against, such as EmploymentType.FULL_TIME.
 *  If a value is not specified, jobs in the search results will include any
 *  employment type.
 *  If multiple values are specified, jobs in the search results include
 *  any of the specified employment types.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *employmentTypes;

/**
 *  Optional.
 *  This filter specifies the locale of jobs to search against,
 *  for example, "en-US".
 *  If a value is not specified, the search results can contain jobs in any
 *  locale.
 *  Language codes should be in BCP-47 format, such as "en-US" or "sr-Latn".
 *  For more information, see
 *  [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).
 *  At most 10 language code filters are allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *languageCodes;

/**
 *  Optional.
 *  The location filter specifies geo-regions containing the jobs to
 *  search against. See LocationFilter for more information.
 *  If a location value is not specified, jobs that fit the other search
 *  criteria are retrieved regardless of where they're located.
 *  If multiple values are specified, jobs are retrieved from any of the
 *  specified locations, and, if different values are specified
 *  for the LocationFilter.distance_in_miles parameter, the maximum
 *  provided distance is used for all locations.
 *  At most 5 location filters are allowed.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_LocationFilter *> *locationFilters;

/**
 *  Optional.
 *  Jobs published within a range specified by this filter are searched
 *  against, for example, DateRange.PAST_MONTH. If a value is not
 *  specified, all open jobs are searched against regardless of the
 *  date on which they were published.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_JobQuery_PublishDateRange_DateRangeUnspecified
 *        Default value: Filtering on time is not performed. (Value:
 *        "DATE_RANGE_UNSPECIFIED")
 *    @arg @c kGTLRJobService_JobQuery_PublishDateRange_Past24Hours The past 24
 *        hours (Value: "PAST_24_HOURS")
 *    @arg @c kGTLRJobService_JobQuery_PublishDateRange_Past3Days The past 3
 *        days (Value: "PAST_3_DAYS")
 *    @arg @c kGTLRJobService_JobQuery_PublishDateRange_PastMonth The past month
 *        (30 days) (Value: "PAST_MONTH")
 *    @arg @c kGTLRJobService_JobQuery_PublishDateRange_PastWeek The past week
 *        (7 days) (Value: "PAST_WEEK")
 *    @arg @c kGTLRJobService_JobQuery_PublishDateRange_PastYear The past year
 *        (365 days) (Value: "PAST_YEAR")
 */
@property(nonatomic, copy, nullable) NSString *publishDateRange;

/**
 *  Optional.
 *  The query string that matches against the job title, description, and
 *  location fields.
 *  The maximum query size is 255 bytes.
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Optional.
 *  This flag controls whether the job search should be restricted to jobs
 *  owned by the current user.
 *  Defaults to false: all jobs accessible to the
 *  user are searched against.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *tenantJobOnly;

@end


/**
 *  An object representing a latitude/longitude pair. This is expressed as a
 *  pair
 *  of doubles representing degrees latitude and degrees longitude. Unless
 *  specified otherwise, this must conform to the
 *  <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
 *  standard</a>. Values must be within normalized ranges.
 */
@interface GTLRJobService_LatLng : GTLRObject

/**
 *  The latitude in degrees. It must be in the range [-90.0, +90.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latitude;

/**
 *  The longitude in degrees. It must be in the range [-180.0, +180.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longitude;

@end


/**
 *  Output only.
 *  The List companies response object.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "companies" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRJobService_ListCompaniesResponse : GTLRCollectionObject

/**
 *  Companies for the current client.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_Company *> *companies;

/**
 *  Additional information for the API invocation, such as the request
 *  tracking id.
 */
@property(nonatomic, strong, nullable) GTLRJobService_ResponseMetadata *metadata;

/** A token to retrieve the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Deprecated. Use ListJobsResponse instead.
 *  Output only.
 *  The List jobs response object.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "jobs" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRJobService_ListCompanyJobsResponse : GTLRCollectionObject

/**
 *  The Jobs for a given company.
 *  The maximum number of items returned is based on the limit field
 *  provided in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_Job *> *jobs;

/**
 *  Additional information for the API invocation, such as the request
 *  tracking id.
 */
@property(nonatomic, strong, nullable) GTLRJobService_ResponseMetadata *metadata;

/** A token to retrieve the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The total number of open jobs. The result will be
 *  empty if ListCompanyJobsRequest.include_jobs_count is not enabled
 *  or if no open jobs are available.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Output only.
 *  List jobs response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "jobs" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRJobService_ListJobsResponse : GTLRCollectionObject

/**
 *  The Jobs for a given company.
 *  The maximum number of items returned is based on the limit field
 *  provided in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_Job *> *jobs;

/**
 *  Additional information for the API invocation, such as the request
 *  tracking id.
 */
@property(nonatomic, strong, nullable) GTLRJobService_ResponseMetadata *metadata;

/** A token to retrieve the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Input only.
 *  Geographic region of the search.
 */
@interface GTLRJobService_LocationFilter : GTLRObject

/**
 *  Optional.
 *  The distance from the address in miles to search.
 *  The default distance is 20 miles and maximum distance is 5,000 miles.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *distanceInMiles;

/**
 *  Optional.
 *  Allows the client to return jobs without a
 *  set location, specifically, telecommuting jobs (telecomuting is considered
 *  by the service as a special location.
 *  Job.allow_telecommute indicates if a job permits telecommuting.
 *  If this field is true, telecommuting jobs are searched, and
 *  name and lat_lng are
 *  ignored.
 *  This filter can be used by itself to search exclusively for telecommuting
 *  jobs, or it can be combined with another location
 *  filter to search for a combination of job locations,
 *  such as "Mountain View" or "telecommuting" jobs. However, when used in
 *  combination with other location filters, telecommuting jobs can be
 *  treated as less relevant than other jobs in the search response.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isTelecommute;

/**
 *  Optional.
 *  The latitude and longitude of the geographic center from which to
 *  search. This field is ignored if `location_name` is provided.
 */
@property(nonatomic, strong, nullable) GTLRJobService_LatLng *latLng;

/**
 *  Optional.
 *  The address name, such as "Mountain View" or "Bay Area".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional.
 *  CLDR region code of the country/region of the address. This will be used
 *  to address ambiguity of the user-input location, e.g. "Liverpool"
 *  against "Liverpool, NY, US" or "Liverpool, UK".
 *  Set this field if all the jobs to search against are from a same region,
 *  or jobs are world-wide but the job seeker is from a specific region.
 *  See http://cldr.unicode.org/ and
 *  http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html
 *  for details. Example: "CH" for Switzerland.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

@end


/**
 *  Output only.
 *  Job entry with metadata inside SearchJobsResponse.
 */
@interface GTLRJobService_MatchingJob : GTLRObject

/**
 *  Commute information which is generated based on specified
 *  CommutePreference.
 */
@property(nonatomic, strong, nullable) GTLRJobService_CommuteInfo *commuteInfo;

/** Job resource that matches the specified SearchJobsRequest. */
@property(nonatomic, strong, nullable) GTLRJobService_Job *job;

/**
 *  A summary of the job with core information that's displayed on the search
 *  results listing page.
 */
@property(nonatomic, copy, nullable) NSString *jobSummary;

/**
 *  Contains snippets of text from the Job.job_title field that most
 *  closely match a search query's keywords, if available. The matching query
 *  keywords are enclosed in HTML bold tags.
 */
@property(nonatomic, copy, nullable) NSString *jobTitleSnippet;

/**
 *  Contains snippets of text from the Job.description and similar
 *  fields that most closely match a search query's keywords, if available.
 *  All HTML tags in the original fields are stripped when returned in this
 *  field, and matching query keywords are enclosed in HTML bold tags.
 */
@property(nonatomic, copy, nullable) NSString *searchTextSnippet;

@end


/**
 *  Represents an amount of money with its currency type.
 */
@interface GTLRJobService_Money : GTLRObject

/** The 3-letter currency code defined in ISO 4217. */
@property(nonatomic, copy, nullable) NSString *currencyCode;

/**
 *  Number of nano (10^-9) units of the amount.
 *  The value must be between -999,999,999 and +999,999,999 inclusive.
 *  If `units` is positive, `nanos` must be positive or zero.
 *  If `units` is zero, `nanos` can be positive, zero, or negative.
 *  If `units` is negative, `nanos` must be negative or zero.
 *  For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  The whole units of the amount.
 *  For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *units;

@end


/**
 *  Input only.
 *  Use this field to specify bucketing option for the histogram search
 *  response.
 */
@interface GTLRJobService_NumericBucketingOption : GTLRObject

/**
 *  Required.
 *  Two adjacent values form a histogram bucket. Values should be in
 *  ascending order. For example, if [5, 10, 15] are provided, four buckets are
 *  created: (-inf, 5), 5, 10), [10, 15), [15, inf). At most 20
 *  [buckets_bound is supported.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *bucketBounds;

/**
 *  Optional.
 *  If set to true, the histogram result includes minimum/maximum
 *  value of the numeric field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requiresMinMax;

@end


/**
 *  Output only.
 *  Custom numeric bucketing result.
 */
@interface GTLRJobService_NumericBucketingResult : GTLRObject

/**
 *  Count within each bucket. Its size is the length of
 *  NumericBucketingOption.bucket_bounds plus 1.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_BucketizedCount *> *counts;

/**
 *  Stores the maximum value of the numeric field. Will be populated only if
 *  [NumericBucketingOption.requires_min_max] is set to true.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxValue;

/**
 *  Stores the minimum value of the numeric field. Will be populated only if
 *  [NumericBucketingOption.requires_min_max] is set to true.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minValue;

@end


/**
 *  Represents a postal address, e.g. for postal delivery or payments addresses.
 *  Given a postal address, a postal service can deliver items to a premise,
 *  P.O.
 *  Box or similar.
 *  It is not intended to model geographical locations (roads, towns,
 *  mountains).
 *  In typical usage an address would be created via user input or from
 *  importing
 *  existing data, depending on the type of process.
 *  Advice on address input / editing:
 *  - Use an i18n-ready address widget such as
 *  https://github.com/googlei18n/libaddressinput)
 *  - Users should not be presented with UI elements for input or editing of
 *  fields outside countries where that field is used.
 *  For more guidance on how to use this schema, please see:
 *  https://support.google.com/business/answer/6397478
 */
@interface GTLRJobService_PostalAddress : GTLRObject

/**
 *  Unstructured address lines describing the lower levels of an address.
 *  Because values in address_lines do not have type information and may
 *  sometimes contain multiple values in a single field (e.g.
 *  "Austin, TX"), it is important that the line order is clear. The order of
 *  address lines should be "envelope order" for the country/region of the
 *  address. In places where this can vary (e.g. Japan), address_language is
 *  used to make it explicit (e.g. "ja" for large-to-small ordering and
 *  "ja-Latn" or "en" for small-to-large). This way, the most specific line of
 *  an address can be selected based on the language.
 *  The minimum permitted structural representation of an address consists
 *  of a region_code with all remaining information placed in the
 *  address_lines. It would be possible to format such an address very
 *  approximately without geocoding, but no semantic reasoning could be
 *  made about any of the address components until it was at least
 *  partially resolved.
 *  Creating an address only containing a region_code and address_lines, and
 *  then geocoding is the recommended way to handle completely unstructured
 *  addresses (as opposed to guessing which parts of the address should be
 *  localities or administrative areas).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *addressLines;

/**
 *  Optional. Highest administrative subdivision which is used for postal
 *  addresses of a country or region.
 *  For example, this can be a state, a province, an oblast, or a prefecture.
 *  Specifically, for Spain this is the province and not the autonomous
 *  community (e.g. "Barcelona" and not "Catalonia").
 *  Many countries don't use an administrative area in postal addresses. E.g.
 *  in Switzerland this should be left unpopulated.
 */
@property(nonatomic, copy, nullable) NSString *administrativeArea;

/**
 *  Optional. BCP-47 language code of the contents of this address (if
 *  known). This is often the UI language of the input form or is expected
 *  to match one of the languages used in the address' country/region, or their
 *  transliterated equivalents.
 *  This can affect formatting in certain countries, but is not critical
 *  to the correctness of the data and will never affect any validation or
 *  other non-formatting related operations.
 *  If this value is not known, it should be omitted (rather than specifying a
 *  possibly incorrect default).
 *  Examples: "zh-Hant", "ja", "ja-Latn", "en".
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Optional. Generally refers to the city/town portion of the address.
 *  Examples: US city, IT comune, UK post town.
 *  In regions of the world where localities are not well defined or do not fit
 *  into this structure well, leave locality empty and use address_lines.
 */
@property(nonatomic, copy, nullable) NSString *locality;

/** Optional. The name of the organization at the address. */
@property(nonatomic, copy, nullable) NSString *organization;

/**
 *  Optional. Postal code of the address. Not all countries use or require
 *  postal codes to be present, but where they are used, they may trigger
 *  additional validation with other parts of the address (e.g. state/zip
 *  validation in the U.S.A.).
 */
@property(nonatomic, copy, nullable) NSString *postalCode;

/**
 *  Optional. The recipient at the address.
 *  This field may, under certain circumstances, contain multiline information.
 *  For example, it might contain "care of" information.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *recipients;

/**
 *  Required. CLDR region code of the country/region of the address. This
 *  is never inferred and it is up to the user to ensure the value is
 *  correct. See http://cldr.unicode.org/ and
 *  http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html
 *  for details. Example: "CH" for Switzerland.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  The schema revision of the `PostalAddress`. This must be set to 0, which is
 *  the latest revision.
 *  All new revisions **must** be backward compatible with old revisions.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *revision;

/**
 *  Optional. Additional, country-specific, sorting code. This is not used
 *  in most regions. Where it is used, the value is either a string like
 *  "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number
 *  alone, representing the "sector code" (Jamaica), "delivery area indicator"
 *  (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
 */
@property(nonatomic, copy, nullable) NSString *sortingCode;

/**
 *  Optional. Sublocality of the address.
 *  For example, this can be neighborhoods, boroughs, districts.
 */
@property(nonatomic, copy, nullable) NSString *sublocality;

@end


/**
 *  Input only.
 *  Meta information related to the job searcher or entity
 *  conducting the job search. This information is used to improve the
 *  performance of the service.
 */
@interface GTLRJobService_RequestMetadata : GTLRObject

/**
 *  Optional.
 *  The type of device used by the job seeker at the time of the call to the
 *  service.
 */
@property(nonatomic, strong, nullable) GTLRJobService_DeviceInfo *deviceInfo;

/**
 *  Required.
 *  The client-defined scope or source of the service call, which typically
 *  is the domain on
 *  which the service has been implemented and is currently being run.
 *  For example, if the service is being run by client <em>Foo, Inc.</em>, on
 *  job board www.foo.com and career site www.bar.com, then this field is
 *  set to "foo.com" for use on the job board, and "bar.com" for use on the
 *  career site.
 *  If this field is not available for some reason, please send "UNKNOWN".
 */
@property(nonatomic, copy, nullable) NSString *domain;

/**
 *  Required.
 *  A unique session identification string. A session is defined as the
 *  duration of an end user's interaction with the service over a period.
 *  Obfuscate this field for privacy concerns before
 *  providing it to the API.
 *  If this field is not available for some reason, please send "UNKNOWN".
 */
@property(nonatomic, copy, nullable) NSString *sessionId;

/**
 *  Required.
 *  A unique user identification string, as determined by the client. The
 *  client is responsible for ensuring client-level uniqueness of this value
 *  in order to have the strongest positive impact on search quality.
 *  Obfuscate this field for privacy concerns before
 *  providing it to the service.
 *  If this field is not available for some reason, please send "UNKNOWN".
 */
@property(nonatomic, copy, nullable) NSString *userId;

@end


/**
 *  Output only.
 *  Additional information returned to client, such as debugging
 *  information.
 */
@interface GTLRJobService_ResponseMetadata : GTLRObject

/**
 *  Identifiers for the versions of the search algorithm used during
 *  this API invocation if multiple algorithms are used.
 *  The default value is empty.
 *  For search response only.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *experimentIdList;

/**
 *  For search response only. Indicates the mode of a performed search.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_ResponseMetadata_Mode_EmailAlertSearch Deprecated.
 *        Please use the SearchJobsForAlert API.
 *        The job search matches against jobs that are suited to email
 *        notifications. (Value: "EMAIL_ALERT_SEARCH")
 *    @arg @c kGTLRJobService_ResponseMetadata_Mode_FeaturedJobSearch The job
 *        search matches only against featured jobs (jobs with a
 *        promotionValue > 0). This method does not return any jobs that have a
 *        promotionValue <= 0. The search results order is determined by the
 *        promotionValue (jobs with a higher promotionValue are returned higher
 *        up in
 *        the search results), with relevance being used as a tiebreaker.
 *        (Value: "FEATURED_JOB_SEARCH")
 *    @arg @c kGTLRJobService_ResponseMetadata_Mode_JobSearch The job search
 *        doesn't include support for featured jobs. (Value: "JOB_SEARCH")
 *    @arg @c kGTLRJobService_ResponseMetadata_Mode_SearchModeUnspecified The
 *        mode of the search method is not specified. (Value:
 *        "SEARCH_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  A unique id associated with this call.
 *  This id is logged for tracking purposes.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Input only.
 *  The Request body of the `SearchJobs` call.
 */
@interface GTLRJobService_SearchJobsRequest : GTLRObject

/**
 *  Deprecated. Any value provided in this field will be ignored.
 *  Optional.
 *  Controls whether to disable relevance thresholding. Relevance
 *  thresholding removes jobs that have low relevance in search results,
 *  for example, removing "Assistant to the CEO" positions from the search
 *  results of a search for "CEO".
 *  Disabling relevance thresholding improves the accuracy of subsequent
 *  search requests.
 *  Defaults to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableRelevanceThresholding;

/**
 *  Optional.
 *  Controls whether to broaden the search when it produces sparse results.
 *  Broadened queries append results to the end of the matching results
 *  list.
 *  Defaults to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableBroadening;

/**
 *  Optional.
 *  Controls if the search job request requires the return of a precise
 *  count of the first 300 results. Setting this to `true` ensures
 *  consistency in the number of results per page. Best practice is to set this
 *  value to true if a client allows users to jump directly to a
 *  non-sequential search results page.
 *  Enabling this flag may adversely impact performance.
 *  Defaults to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enablePreciseResultSize;

/**
 *  Deprecated. Use query instead.
 *  Optional.
 *  Restrictions on the scope of the search request, such as filtering
 *  by location.
 */
@property(nonatomic, strong, nullable) GTLRJobService_JobFilters *filters;

/**
 *  Optional.
 *  Restrictions on what fields to perform histogram on, such as
 *  `COMPANY_SIZE` etc.
 */
@property(nonatomic, strong, nullable) GTLRJobService_HistogramFacets *histogramFacets;

/**
 *  Optional.
 *  The number of job attributes that is returned for jobs in the
 *  search response. Defaults to JobView.SMALL if no value is specified.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_SearchJobsRequest_JobView_Full All available
 *        attributes are included in the search results.
 *        Note: [Job.description, Job.responsibilities,
 *        Job.qualifications and Job.incentives are deprecated.
 *        These fields are scheduled to be removed from MatchingJob.Job objects
 *        in the SearchJobsResponse results on 12/31/2018.
 *        See the alternative MatchingJob.search_text_snippet and
 *        MatchingJob.job_summary fields. (Value: "FULL")
 *    @arg @c kGTLRJobService_SearchJobsRequest_JobView_JobViewUnspecified
 *        Default value. (Value: "JOB_VIEW_UNSPECIFIED")
 *    @arg @c kGTLRJobService_SearchJobsRequest_JobView_Minimal A minimal view
 *        of the job, with the following attributes in the search
 *        results: Job.name, Job.requisition_id, Job.job_title,
 *        Job.company_name, Job.job_locations. (Value: "MINIMAL")
 *    @arg @c kGTLRJobService_SearchJobsRequest_JobView_Small A small view of
 *        the job, with the following attributes in the search results:
 *        Job.name, Job.requisition_id, Job.job_title,
 *        Job.company_name, Job.job_locations, Job.description,
 *        Job.visibility.
 *        Note: Job.description is deprecated. It is scheduled to be removed
 *        from MatchingJob.Job objects in the SearchJobsResponse results
 *        on 12/31/2018. (Value: "SMALL")
 */
@property(nonatomic, copy, nullable) NSString *jobView;

/**
 *  Required.
 *  Mode of a search.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_SearchJobsRequest_Mode_EmailAlertSearch
 *        Deprecated. Please use the SearchJobsForAlert API.
 *        The job search matches against jobs that are suited to email
 *        notifications. (Value: "EMAIL_ALERT_SEARCH")
 *    @arg @c kGTLRJobService_SearchJobsRequest_Mode_FeaturedJobSearch The job
 *        search matches only against featured jobs (jobs with a
 *        promotionValue > 0). This method does not return any jobs that have a
 *        promotionValue <= 0. The search results order is determined by the
 *        promotionValue (jobs with a higher promotionValue are returned higher
 *        up in
 *        the search results), with relevance being used as a tiebreaker.
 *        (Value: "FEATURED_JOB_SEARCH")
 *    @arg @c kGTLRJobService_SearchJobsRequest_Mode_JobSearch The job search
 *        doesn't include support for featured jobs. (Value: "JOB_SEARCH")
 *    @arg @c kGTLRJobService_SearchJobsRequest_Mode_SearchModeUnspecified The
 *        mode of the search method is not specified. (Value:
 *        "SEARCH_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  Optional.
 *  An integer that specifies the current offset (i.e. starting result) in
 *  search results. This field is only considered if page_token is unset.
 *  For example, 0 means to return results starting from the first matching
 *  job, and 10 means to return from the 11th job. This can be used for
 *  pagination, (for example, pageSize = 10 and offset = 10 means to return
 *  from the second page).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offset;

/**
 *  Deprecated. Use sort_by instead.
 *  Optional.
 *  The criteria that determine how search results are sorted.
 *  Defaults to SortBy.RELEVANCE_DESC if no value is specified.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_SearchJobsRequest_OrderBy_AnnualizedBaseCompensation
 *        Sort by job annualized base compensation in ascending order.
 *        If job's annualized base compensation is unspecified, they are put at
 *        the end of search result. (Value: "ANNUALIZED_BASE_COMPENSATION")
 *    @arg @c kGTLRJobService_SearchJobsRequest_OrderBy_AnnualizedBaseCompensationDesc
 *        Sort by job annualized base compensation in descending order.
 *        If job's annualized base compensation is unspecified, they are put at
 *        the end of search result. (Value: "ANNUALIZED_BASE_COMPENSATION_DESC")
 *    @arg @c kGTLRJobService_SearchJobsRequest_OrderBy_AnnualizedTotalCompensation
 *        Sort by job annualized total compensation in ascending order.
 *        If job's annualized total compensation is unspecified, they are put at
 *        the end of search result. (Value: "ANNUALIZED_TOTAL_COMPENSATION")
 *    @arg @c kGTLRJobService_SearchJobsRequest_OrderBy_AnnualizedTotalCompensationDesc
 *        Sort by job annualized total compensation in descending order.
 *        If job's annualized total compensation is unspecified, they are put at
 *        the end of search result. (Value:
 *        "ANNUALIZED_TOTAL_COMPENSATION_DESC")
 *    @arg @c kGTLRJobService_SearchJobsRequest_OrderBy_PublishedDateDesc Sort
 *        by published date descending. (Value: "PUBLISHED_DATE_DESC")
 *    @arg @c kGTLRJobService_SearchJobsRequest_OrderBy_RelevanceDesc By
 *        descending relevance, as determined by the API algorithms.
 *        Relevance thresholding of query results is only available for queries
 *        if
 *        RELEVANCE_DESC sort ordering is specified. (Value: "RELEVANCE_DESC")
 *    @arg @c kGTLRJobService_SearchJobsRequest_OrderBy_SortByUnspecified
 *        Default value. (Value: "SORT_BY_UNSPECIFIED")
 *    @arg @c kGTLRJobService_SearchJobsRequest_OrderBy_Title Sort by job title
 *        ascending. (Value: "TITLE")
 *    @arg @c kGTLRJobService_SearchJobsRequest_OrderBy_TitleDesc Sort by job
 *        title descending. (Value: "TITLE_DESC")
 *    @arg @c kGTLRJobService_SearchJobsRequest_OrderBy_UpdatedDateDesc Sort by
 *        updated data descending. (Value: "UPDATED_DATE_DESC")
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional.
 *  A limit on the number of jobs returned in the search results.
 *  Increasing this value above the default value of 10 can increase search
 *  response time. The value can be between 1 and 100.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  Optional.
 *  The token that specifies the current offset within
 *  search results. See SearchJobsResponse.next_page_token for
 *  an explanation of how to obtain the next set of query results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Optional.
 *  Query used to search against jobs, such as keyword, location filters, etc.
 */
@property(nonatomic, strong, nullable) GTLRJobService_JobQuery *query;

/**
 *  Required.
 *  The meta information collected about the job searcher, used to improve the
 *  search quality of the service.. The identifiers, (such as `user_id`) are
 *  provided by users, and must be unique and consistent.
 */
@property(nonatomic, strong, nullable) GTLRJobService_RequestMetadata *requestMetadata;

/**
 *  Optional.
 *  The criteria that determine how search results are sorted.
 *  Defaults to SortBy.RELEVANCE_DESC if no value is specified.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_SearchJobsRequest_SortBy_AnnualizedBaseCompensation
 *        Sort by job annualized base compensation in ascending order.
 *        If job's annualized base compensation is unspecified, they are put at
 *        the end of search result. (Value: "ANNUALIZED_BASE_COMPENSATION")
 *    @arg @c kGTLRJobService_SearchJobsRequest_SortBy_AnnualizedBaseCompensationDesc
 *        Sort by job annualized base compensation in descending order.
 *        If job's annualized base compensation is unspecified, they are put at
 *        the end of search result. (Value: "ANNUALIZED_BASE_COMPENSATION_DESC")
 *    @arg @c kGTLRJobService_SearchJobsRequest_SortBy_AnnualizedTotalCompensation
 *        Sort by job annualized total compensation in ascending order.
 *        If job's annualized total compensation is unspecified, they are put at
 *        the end of search result. (Value: "ANNUALIZED_TOTAL_COMPENSATION")
 *    @arg @c kGTLRJobService_SearchJobsRequest_SortBy_AnnualizedTotalCompensationDesc
 *        Sort by job annualized total compensation in descending order.
 *        If job's annualized total compensation is unspecified, they are put at
 *        the end of search result. (Value:
 *        "ANNUALIZED_TOTAL_COMPENSATION_DESC")
 *    @arg @c kGTLRJobService_SearchJobsRequest_SortBy_PublishedDateDesc Sort by
 *        published date descending. (Value: "PUBLISHED_DATE_DESC")
 *    @arg @c kGTLRJobService_SearchJobsRequest_SortBy_RelevanceDesc By
 *        descending relevance, as determined by the API algorithms.
 *        Relevance thresholding of query results is only available for queries
 *        if
 *        RELEVANCE_DESC sort ordering is specified. (Value: "RELEVANCE_DESC")
 *    @arg @c kGTLRJobService_SearchJobsRequest_SortBy_SortByUnspecified Default
 *        value. (Value: "SORT_BY_UNSPECIFIED")
 *    @arg @c kGTLRJobService_SearchJobsRequest_SortBy_Title Sort by job title
 *        ascending. (Value: "TITLE")
 *    @arg @c kGTLRJobService_SearchJobsRequest_SortBy_TitleDesc Sort by job
 *        title descending. (Value: "TITLE_DESC")
 *    @arg @c kGTLRJobService_SearchJobsRequest_SortBy_UpdatedDateDesc Sort by
 *        updated data descending. (Value: "UPDATED_DATE_DESC")
 */
@property(nonatomic, copy, nullable) NSString *sortBy;

@end


/**
 *  Output only.
 *  Response for SearchJob method.
 */
@interface GTLRJobService_SearchJobsResponse : GTLRObject

/**
 *  The commute filter that the service applied to the specified query. This
 *  information is only available when query has a valid CommutePreference.
 */
@property(nonatomic, strong, nullable) GTLRJobService_CommutePreference *appliedCommuteFilter;

/**
 *  The location filters that the service applied to the specified query. If
 *  any filters are lat-lng based, the JobLocation.location_type is
 *  JobLocation.LocationType#LOCATION_TYPE_UNSPECIFIED.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_JobLocation *> *appliedJobLocationFilters;

/**
 *  An estimation of the number of jobs that match the specified query.
 *  This number is not guaranteed to be accurate. For accurate results,
 *  seenenable_precise_result_size.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedTotalSize;

/**
 *  The histogram results that match with specified
 *  SearchJobsRequest.HistogramFacets.
 */
@property(nonatomic, strong, nullable) GTLRJobService_HistogramResults *histogramResults;

/**
 *  Corresponds to SearchJobsRequest.job_view.
 *
 *  Likely values:
 *    @arg @c kGTLRJobService_SearchJobsResponse_JobView_Full All available
 *        attributes are included in the search results.
 *        Note: [Job.description, Job.responsibilities,
 *        Job.qualifications and Job.incentives are deprecated.
 *        These fields are scheduled to be removed from MatchingJob.Job objects
 *        in the SearchJobsResponse results on 12/31/2018.
 *        See the alternative MatchingJob.search_text_snippet and
 *        MatchingJob.job_summary fields. (Value: "FULL")
 *    @arg @c kGTLRJobService_SearchJobsResponse_JobView_JobViewUnspecified
 *        Default value. (Value: "JOB_VIEW_UNSPECIFIED")
 *    @arg @c kGTLRJobService_SearchJobsResponse_JobView_Minimal A minimal view
 *        of the job, with the following attributes in the search
 *        results: Job.name, Job.requisition_id, Job.job_title,
 *        Job.company_name, Job.job_locations. (Value: "MINIMAL")
 *    @arg @c kGTLRJobService_SearchJobsResponse_JobView_Small A small view of
 *        the job, with the following attributes in the search results:
 *        Job.name, Job.requisition_id, Job.job_title,
 *        Job.company_name, Job.job_locations, Job.description,
 *        Job.visibility.
 *        Note: Job.description is deprecated. It is scheduled to be removed
 *        from MatchingJob.Job objects in the SearchJobsResponse results
 *        on 12/31/2018. (Value: "SMALL")
 */
@property(nonatomic, copy, nullable) NSString *jobView;

/** The Job entities that match the specified SearchJobsRequest. */
@property(nonatomic, strong, nullable) NSArray<GTLRJobService_MatchingJob *> *matchingJobs;

/**
 *  Additional information for the API invocation, such as the request
 *  tracking id.
 */
@property(nonatomic, strong, nullable) GTLRJobService_ResponseMetadata *metadata;

/**
 *  The token that specifies the starting position of the next page of results.
 *  This field is empty if there are no more results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  If query broadening is enabled, we may append additional results from the
 *  broadened query. This number indicates how many of the jobs returned in the
 *  jobs field are from the broadened query. These results are always at the
 *  end of the jobs list. In particular, a value of 0 means all the jobs in the
 *  jobs list are from the original (without broadening) query. If this
 *  field is non-zero, subsequent requests with offset after this result set
 *  should contain all broadened results.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numJobsFromBroadenedQuery;

/** The spell checking result, and correction. */
@property(nonatomic, strong, nullable) GTLRJobService_SpellingCorrection *spellResult;

/**
 *  The precise result count, which is available only if the client set
 *  enable_precise_result_size to `true` or if the response
 *  is the last page of results. Otherwise, the value will be `-1`.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Output only.
 *  Spell check result.
 */
@interface GTLRJobService_SpellingCorrection : GTLRObject

/**
 *  Indicates if the query was corrected by the spell checker.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *corrected;

/** Correction output consisting of the corrected keyword string. */
@property(nonatomic, copy, nullable) NSString *correctedText;

@end


/**
 *  Represents array of string values.
 */
@interface GTLRJobService_StringValues : GTLRObject

/**
 *  Required.
 *  String values.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  Input only.
 *  Update job request.
 *  The job typically becomes searchable within 10 seconds, but it may take
 *  up to 5 minutes for the job to become searchable.
 */
@interface GTLRJobService_UpdateJobRequest : GTLRObject

/**
 *  If set to `true`, the service will not attempt resolve a more precise
 *  address for the job.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableStreetAddressResolution;

/**
 *  Required.
 *  The Job to be updated.
 */
@property(nonatomic, strong, nullable) GTLRJobService_Job *job;

/**
 *  Optional but strongly recommended to be provided for the best service
 *  experience.
 *  If update_job_fields is provided, only the specified fields in
 *  job are updated. Otherwise all the fields are updated.
 *  A field mask to restrict the fields that are updated. Valid values are:
 *  * jobTitle
 *  * employmentTypes
 *  * description
 *  * applicationUrls
 *  * applicationEmailList
 *  * applicationInstruction
 *  * responsibilities
 *  * qualifications
 *  * educationLevels
 *  * level
 *  * department
 *  * startDate
 *  * endDate
 *  * compensationInfo
 *  * incentives
 *  * languageCode
 *  * benefits
 *  * expireTime
 *  * customAttributes
 *  * visibility
 *  * publishDate
 *  * promotionValue
 *  * locations
 *  * region
 *  * expiryDate (deprecated)
 *  * filterableCustomFields (deprecated)
 *  * unindexedCustomFields (deprecated)
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateJobFields;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
