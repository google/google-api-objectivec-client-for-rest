// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Cloud Machine Learning Engine (ml/v1)
// Description:
//   An API to enable creating and using machine learning models.
// Documentation:
//   https://cloud.google.com/ml/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudMachineLearningEngine_GoogleApiHttpBody;
@class GTLRCloudMachineLearningEngine_GoogleCloudMlV1beta1ManualScaling;
@class GTLRCloudMachineLearningEngine_GoogleCloudMlV1beta1Version;
@class GTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterOutput;
@class GTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterOutput_Hyperparameters;
@class GTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterOutputHyperparameterMetric;
@class GTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterSpec;
@class GTLRCloudMachineLearningEngine_GoogleCloudMlV1Job;
@class GTLRCloudMachineLearningEngine_GoogleCloudMlV1ManualScaling;
@class GTLRCloudMachineLearningEngine_GoogleCloudMlV1Model;
@class GTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec;
@class GTLRCloudMachineLearningEngine_GoogleCloudMlV1PredictionInput;
@class GTLRCloudMachineLearningEngine_GoogleCloudMlV1PredictionOutput;
@class GTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingInput;
@class GTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingOutput;
@class GTLRCloudMachineLearningEngine_GoogleCloudMlV1Version;
@class GTLRCloudMachineLearningEngine_GoogleLongrunningOperation;
@class GTLRCloudMachineLearningEngine_GoogleLongrunningOperation_Metadata;
@class GTLRCloudMachineLearningEngine_GoogleLongrunningOperation_Response;
@class GTLRCloudMachineLearningEngine_GoogleRpcStatus;
@class GTLRCloudMachineLearningEngine_GoogleRpcStatus_Details_Item;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudMachineLearningEngine_GoogleCloudMlV1beta1OperationMetadata.operationType

/**
 *  An operation to create a new version.
 *
 *  Value: "CREATE_VERSION"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1beta1OperationMetadata_OperationType_CreateVersion;
/**
 *  An operation to delete an existing model.
 *
 *  Value: "DELETE_MODEL"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1beta1OperationMetadata_OperationType_DeleteModel;
/**
 *  An operation to delete an existing version.
 *
 *  Value: "DELETE_VERSION"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1beta1OperationMetadata_OperationType_DeleteVersion;
/**
 *  Unspecified operation type.
 *
 *  Value: "OPERATION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1beta1OperationMetadata_OperationType_OperationTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterSpec.goal

/**
 *  Goal Type will default to maximize.
 *
 *  Value: "GOAL_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterSpec_Goal_GoalTypeUnspecified;
/**
 *  Maximize the goal metric.
 *
 *  Value: "MAXIMIZE"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterSpec_Goal_Maximize;
/**
 *  Minimize the goal metric.
 *
 *  Value: "MINIMIZE"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterSpec_Goal_Minimize;

// ----------------------------------------------------------------------------
// GTLRCloudMachineLearningEngine_GoogleCloudMlV1Job.state

/**
 *  The job has been cancelled.
 *  `error_message` should describe the reason for the cancellation.
 *
 *  Value: "CANCELLED"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1Job_State_Cancelled;
/**
 *  The job is being cancelled.
 *  `error_message` should describe the reason for the cancellation.
 *
 *  Value: "CANCELLING"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1Job_State_Cancelling;
/**
 *  The job failed.
 *  `error_message` should contain the details of the failure.
 *
 *  Value: "FAILED"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1Job_State_Failed;
/**
 *  The service is preparing to run the job.
 *
 *  Value: "PREPARING"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1Job_State_Preparing;
/**
 *  The job has been just created and processing has not yet begun.
 *
 *  Value: "QUEUED"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1Job_State_Queued;
/**
 *  The job is in progress.
 *
 *  Value: "RUNNING"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1Job_State_Running;
/**
 *  The job state is unspecified.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1Job_State_StateUnspecified;
/**
 *  The job completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1Job_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRCloudMachineLearningEngine_GoogleCloudMlV1OperationMetadata.operationType

/**
 *  An operation to create a new version.
 *
 *  Value: "CREATE_VERSION"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1OperationMetadata_OperationType_CreateVersion;
/**
 *  An operation to delete an existing model.
 *
 *  Value: "DELETE_MODEL"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1OperationMetadata_OperationType_DeleteModel;
/**
 *  An operation to delete an existing version.
 *
 *  Value: "DELETE_VERSION"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1OperationMetadata_OperationType_DeleteVersion;
/**
 *  Unspecified operation type.
 *
 *  Value: "OPERATION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1OperationMetadata_OperationType_OperationTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec.scaleType

/**
 *  By default, no scaling is applied.
 *
 *  Value: "NONE"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_ScaleType_None;
/**
 *  Scales the feasible space to (0, 1) linearly.
 *
 *  Value: "UNIT_LINEAR_SCALE"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_ScaleType_UnitLinearScale;
/**
 *  Scales the feasible space logarithmically to (0, 1). The entire feasible
 *  space must be strictly positive.
 *
 *  Value: "UNIT_LOG_SCALE"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_ScaleType_UnitLogScale;
/**
 *  Scales the feasible space "reverse" logarithmically to (0, 1). The result
 *  is that values close to the top of the feasible space are spread out more
 *  than points near the bottom. The entire feasible space must be strictly
 *  positive.
 *
 *  Value: "UNIT_REVERSE_LOG_SCALE"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_ScaleType_UnitReverseLogScale;

// ----------------------------------------------------------------------------
// GTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec.type

/**
 *  The parameter is categorical, with a value chosen from the categories
 *  field.
 *
 *  Value: "CATEGORICAL"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_Type_Categorical;
/**
 *  The parameter is real valued, with a fixed set of feasible points. If
 *  `type==DISCRETE`, feasible_points must be provided, and
 *  {`min_value`, `max_value`} will be ignored.
 *
 *  Value: "DISCRETE"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_Type_Discrete;
/**
 *  Type for real-valued parameters.
 *
 *  Value: "DOUBLE"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_Type_Double;
/**
 *  Type for integral parameters.
 *
 *  Value: "INTEGER"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_Type_Integer;
/**
 *  You must specify a valid type. Using this unspecified type will result in
 *  an error.
 *
 *  Value: "PARAMETER_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_Type_ParameterTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudMachineLearningEngine_GoogleCloudMlV1PredictionInput.dataFormat

/**
 *  Unspecified format.
 *
 *  Value: "DATA_FORMAT_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1PredictionInput_DataFormat_DataFormatUnspecified;
/**
 *  The source file is a text file with instances separated by the
 *  new-line character.
 *
 *  Value: "TEXT"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1PredictionInput_DataFormat_Text;
/**
 *  The source file is a TFRecord file.
 *
 *  Value: "TF_RECORD"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1PredictionInput_DataFormat_TfRecord;
/**
 *  The source file is a GZIP-compressed TFRecord file.
 *
 *  Value: "TF_RECORD_GZIP"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1PredictionInput_DataFormat_TfRecordGzip;

// ----------------------------------------------------------------------------
// GTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingInput.scaleTier

/**
 *  A single worker instance. This tier is suitable for learning how to use
 *  Cloud ML, and for experimenting with new models using small datasets.
 *
 *  Value: "BASIC"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingInput_ScaleTier_Basic;
/**
 *  A single worker instance [with a GPU](ml/docs/how-tos/using-gpus).
 *
 *  Value: "BASIC_GPU"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingInput_ScaleTier_BasicGpu;
/**
 *  The CUSTOM tier is not a set tier, but rather enables you to use your
 *  own cluster specification. When you use this tier, set values to
 *  configure your processing cluster according to these guidelines:
 *  * You _must_ set `TrainingInput.masterType` to specify the type
 *  of machine to use for your master node. This is the only required
 *  setting.
 *  * You _may_ set `TrainingInput.workerCount` to specify the number of
 *  workers to use. If you specify one or more workers, you _must_ also
 *  set `TrainingInput.workerType` to specify the type of machine to use
 *  for your worker nodes.
 *  * You _may_ set `TrainingInput.parameterServerCount` to specify the
 *  number of parameter servers to use. If you specify one or more
 *  parameter servers, you _must_ also set
 *  `TrainingInput.parameterServerType` to specify the type of machine to
 *  use for your parameter servers.
 *  Note that all of your workers must use the same machine type, which can
 *  be different from your parameter server type and master type. Your
 *  parameter servers must likewise use the same machine type, which can be
 *  different from your worker type and master type.
 *
 *  Value: "CUSTOM"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingInput_ScaleTier_Custom;
/**
 *  A large number of workers with many parameter servers.
 *
 *  Value: "PREMIUM_1"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingInput_ScaleTier_Premium1;
/**
 *  Many workers and a few parameter servers.
 *
 *  Value: "STANDARD_1"
 */
GTLR_EXTERN NSString * const kGTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingInput_ScaleTier_Standard1;

/**
 *  Message that represents an arbitrary HTTP body. It should only be used for
 *  payload formats that can't be represented as JSON, such as raw binary or
 *  an HTML page.
 *  This message can be used both in streaming and non-streaming API methods in
 *  the request as well as the response.
 *  It can be used as a top-level request field, which is convenient if one
 *  wants to extract parameters from either the URL or HTTP template into the
 *  request fields and also want access to the raw HTTP body.
 *  Example:
 *  message GetResourceRequest {
 *  // A unique request id.
 *  string request_id = 1;
 *  // The raw HTTP body is bound to this field.
 *  google.api.HttpBody http_body = 2;
 *  }
 *  service ResourceService {
 *  rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);
 *  rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty);
 *  }
 *  Example with streaming methods:
 *  service CaldavService {
 *  rpc GetCalendar(stream google.api.HttpBody)
 *  returns (stream google.api.HttpBody);
 *  rpc UpdateCalendar(stream google.api.HttpBody)
 *  returns (stream google.api.HttpBody);
 *  }
 *  Use of this type only changes how the request and response bodies are
 *  handled, all other features will continue to work unchanged.
 */
@interface GTLRCloudMachineLearningEngine_GoogleApiHttpBody : GTLRObject

/** The HTTP Content-Type string representing the content type of the body. */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  HTTP body binary data.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

@end


/**
 *  Options for manually scaling a model.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1beta1ManualScaling : GTLRObject

/**
 *  The number of nodes to allocate for this model. These nodes are always up,
 *  starting from the time the model is deployed, so the cost of operating
 *  this model will be proportional to nodes * number of hours since
 *  deployment.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nodes;

@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1beta1OperationMetadata : GTLRObject

/** The time the operation was submitted. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The time operation processing completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Indicates whether a request to cancel this operation has been made.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isCancellationRequested;

/** Contains the name of the model associated with the operation. */
@property(nonatomic, copy, nullable) NSString *modelName;

/**
 *  The operation type.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1beta1OperationMetadata_OperationType_CreateVersion
 *        An operation to create a new version. (Value: "CREATE_VERSION")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1beta1OperationMetadata_OperationType_DeleteModel
 *        An operation to delete an existing model. (Value: "DELETE_MODEL")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1beta1OperationMetadata_OperationType_DeleteVersion
 *        An operation to delete an existing version. (Value: "DELETE_VERSION")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1beta1OperationMetadata_OperationType_OperationTypeUnspecified
 *        Unspecified operation type. (Value: "OPERATION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *operationType;

/** The time operation processing started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/** Contains the version associated with the operation. */
@property(nonatomic, strong, nullable) GTLRCloudMachineLearningEngine_GoogleCloudMlV1beta1Version *version;

@end


/**
 *  Represents a version of the model.
 *  Each version is a trained model deployed in the cloud, ready to handle
 *  prediction requests. A model can have multiple versions. You can get
 *  information about all of the versions of a given model by calling
 *  [projects.models.versions.list](/ml/reference/rest/v1beta1/projects.models.versions/list).
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1beta1Version : GTLRObject

/** Output only. The time the version was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Required. The Google Cloud Storage location of the trained model used to
 *  create the version. See the
 *  [overview of model deployment](/ml/docs/concepts/deployment-overview) for
 *  more informaiton.
 *  When passing Version to
 *  [projects.models.versions.create](/ml/reference/rest/v1beta1/projects.models.versions/create)
 *  the model service uses the specified location as the source of the model.
 *  Once deployed, the model version is hosted by the prediction service, so
 *  this location is useful only as a historical record.
 */
@property(nonatomic, copy, nullable) NSString *deploymentUri;

/**
 *  Optional. The description specified for the version when it was created.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. If true, this version will be used to handle prediction
 *  requests that do not specify a version.
 *  You can change the default version by calling
 *  [projects.methods.versions.setDefault](/ml/reference/rest/v1beta1/projects.models.versions/setDefault).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDefault;

/** Output only. The time the version was last used for prediction. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastUseTime;

/**
 *  Optional. Manually select the number of nodes to use for serving the
 *  model. If unset (i.e., by default), the number of nodes used to serve
 *  the model automatically scales with traffic. However, care should be
 *  taken to ramp up traffic according to the model's ability to scale. If
 *  your model needs to handle bursts of traffic beyond it's ability to
 *  scale, it is recommended you set this field appropriately.
 */
@property(nonatomic, strong, nullable) GTLRCloudMachineLearningEngine_GoogleCloudMlV1beta1ManualScaling *manualScaling;

/**
 *  Required.The name specified for the version when it was created.
 *  The version name must be unique within the model it is created in.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The Google Cloud ML runtime version to use for this deployment.
 *  If not set, Google Cloud ML will choose a version.
 */
@property(nonatomic, copy, nullable) NSString *runtimeVersion;

@end


/**
 *  Request message for the CancelJob method.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1CancelJobRequest : GTLRObject
@end


/**
 *  Returns service account information associated with a project.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1GetConfigResponse : GTLRObject

/** The service account Cloud ML uses to access resources in the project. */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  The project number for `service_account`.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *serviceAccountProject;

@end


/**
 *  Represents the result of a single hyperparameter tuning trial from a
 *  training job. The TrainingOutput object that is returned on successful
 *  completion of a training job with hyperparameter tuning includes a list
 *  of HyperparameterOutput objects, one for each successful trial.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterOutput : GTLRObject

/** All recorded object metrics for this trial. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterOutputHyperparameterMetric *> *allMetrics;

/** The final objective metric seen for this trial. */
@property(nonatomic, strong, nullable) GTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterOutputHyperparameterMetric *finalMetric;

/** The hyperparameters given to this trial. */
@property(nonatomic, strong, nullable) GTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterOutput_Hyperparameters *hyperparameters;

/** The trial id for these results. */
@property(nonatomic, copy, nullable) NSString *trialId;

@end


/**
 *  The hyperparameters given to this trial.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterOutput_Hyperparameters : GTLRObject
@end


/**
 *  An observed value of a metric.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterOutputHyperparameterMetric : GTLRObject

/**
 *  The objective value at this training step.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectiveValue;

/**
 *  The global training step for this metric.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainingStep;

@end


/**
 *  Represents a set of hyperparameters to optimize.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterSpec : GTLRObject

/**
 *  Required. The type of goal to use for tuning. Available types are
 *  `MAXIMIZE` and `MINIMIZE`.
 *  Defaults to `MAXIMIZE`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterSpec_Goal_GoalTypeUnspecified
 *        Goal Type will default to maximize. (Value: "GOAL_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterSpec_Goal_Maximize
 *        Maximize the goal metric. (Value: "MAXIMIZE")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterSpec_Goal_Minimize
 *        Minimize the goal metric. (Value: "MINIMIZE")
 */
@property(nonatomic, copy, nullable) NSString *goal;

/**
 *  Optional. The Tensorflow summary tag name to use for optimizing trials. For
 *  current versions of Tensorflow, this tag name should exactly match what is
 *  shown in Tensorboard, including all scopes. For versions of Tensorflow
 *  prior to 0.12, this should be only the tag passed to tf.Summary.
 *  By default, "training/hptuning/metric" will be used.
 */
@property(nonatomic, copy, nullable) NSString *hyperparameterMetricTag;

/**
 *  Optional. The number of training trials to run concurrently.
 *  You can reduce the time it takes to perform hyperparameter tuning by adding
 *  trials in parallel. However, each trail only benefits from the information
 *  gained in completed trials. That means that a trial does not get access to
 *  the results of trials running at the same time, which could reduce the
 *  quality of the overall optimization.
 *  Each trial will use the same scale tier and machine types.
 *  Defaults to one.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxParallelTrials;

/**
 *  Optional. How many training trials should be attempted to optimize
 *  the specified hyperparameters.
 *  Defaults to one.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxTrials;

/** Required. The set of parameters to tune. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec *> *params;

@end


/**
 *  Represents a training or prediction job.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1Job : GTLRObject

/** Output only. When the job was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. When the job processing was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Output only. The details of a failure or a cancellation. */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/** Required. The user-specified id of the job. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** Input parameters to create a prediction job. */
@property(nonatomic, strong, nullable) GTLRCloudMachineLearningEngine_GoogleCloudMlV1PredictionInput *predictionInput;

/** The current prediction job result. */
@property(nonatomic, strong, nullable) GTLRCloudMachineLearningEngine_GoogleCloudMlV1PredictionOutput *predictionOutput;

/** Output only. When the job processing was started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. The detailed state of a job.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1Job_State_Cancelled
 *        The job has been cancelled.
 *        `error_message` should describe the reason for the cancellation.
 *        (Value: "CANCELLED")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1Job_State_Cancelling
 *        The job is being cancelled.
 *        `error_message` should describe the reason for the cancellation.
 *        (Value: "CANCELLING")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1Job_State_Failed
 *        The job failed.
 *        `error_message` should contain the details of the failure. (Value:
 *        "FAILED")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1Job_State_Preparing
 *        The service is preparing to run the job. (Value: "PREPARING")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1Job_State_Queued
 *        The job has been just created and processing has not yet begun.
 *        (Value: "QUEUED")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1Job_State_Running
 *        The job is in progress. (Value: "RUNNING")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1Job_State_StateUnspecified
 *        The job state is unspecified. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1Job_State_Succeeded
 *        The job completed successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Input parameters to create a training job. */
@property(nonatomic, strong, nullable) GTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingInput *trainingInput;

/** The current training job result. */
@property(nonatomic, strong, nullable) GTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingOutput *trainingOutput;

@end


/**
 *  Response message for the ListJobs method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "jobs" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1ListJobsResponse : GTLRCollectionObject

/**
 *  The list of jobs.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMachineLearningEngine_GoogleCloudMlV1Job *> *jobs;

/**
 *  Optional. Pass this token as the `page_token` field of the request for a
 *  subsequent call.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for the ListModels method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "models" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1ListModelsResponse : GTLRCollectionObject

/**
 *  The list of models.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMachineLearningEngine_GoogleCloudMlV1Model *> *models;

/**
 *  Optional. Pass this token as the `page_token` field of the request for a
 *  subsequent call.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for the ListVersions method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "versions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1ListVersionsResponse : GTLRCollectionObject

/**
 *  Optional. Pass this token as the `page_token` field of the request for a
 *  subsequent call.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of versions.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMachineLearningEngine_GoogleCloudMlV1Version *> *versions;

@end


/**
 *  Options for manually scaling a model.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1ManualScaling : GTLRObject

/**
 *  The number of nodes to allocate for this model. These nodes are always up,
 *  starting from the time the model is deployed, so the cost of operating
 *  this model will be proportional to nodes * number of hours since
 *  deployment.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nodes;

@end


/**
 *  Represents a machine learning solution.
 *  A model can have multiple versions, each of which is a deployed, trained
 *  model ready to receive prediction requests. The model itself is just a
 *  container.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1Model : GTLRObject

/**
 *  Output only. The default version of the model. This version will be used to
 *  handle prediction requests that do not specify a version.
 *  You can change the default version by calling
 *  [projects.methods.versions.setDefault](/ml/reference/rest/v1/projects.models.versions/setDefault).
 */
@property(nonatomic, strong, nullable) GTLRCloudMachineLearningEngine_GoogleCloudMlV1Version *defaultVersion;

/**
 *  Optional. The description specified for the model when it was created.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Required. The name specified for the model when it was created.
 *  The model name must be unique within the project it is created in.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. If true, enables StackDriver Logging for online prediction.
 *  Default is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *onlinePredictionLogging;

/**
 *  Optional. The list of regions where the model is going to be deployed.
 *  Currently only one region per model is supported.
 *  Defaults to 'us-central1' if nothing is set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *regions;

@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1OperationMetadata : GTLRObject

/** The time the operation was submitted. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The time operation processing completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Indicates whether a request to cancel this operation has been made.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isCancellationRequested;

/** Contains the name of the model associated with the operation. */
@property(nonatomic, copy, nullable) NSString *modelName;

/**
 *  The operation type.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1OperationMetadata_OperationType_CreateVersion
 *        An operation to create a new version. (Value: "CREATE_VERSION")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1OperationMetadata_OperationType_DeleteModel
 *        An operation to delete an existing model. (Value: "DELETE_MODEL")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1OperationMetadata_OperationType_DeleteVersion
 *        An operation to delete an existing version. (Value: "DELETE_VERSION")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1OperationMetadata_OperationType_OperationTypeUnspecified
 *        Unspecified operation type. (Value: "OPERATION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *operationType;

/** The time operation processing started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/** Contains the version associated with the operation. */
@property(nonatomic, strong, nullable) GTLRCloudMachineLearningEngine_GoogleCloudMlV1Version *version;

@end


/**
 *  Represents a single hyperparameter to optimize.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec : GTLRObject

/** Required if type is `CATEGORICAL`. The list of possible categories. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *categoricalValues;

/**
 *  Required if type is `DISCRETE`.
 *  A list of feasible points.
 *  The list should be in strictly increasing order. For instance, this
 *  parameter might have possible settings of 1.5, 2.5, and 4.0. This list
 *  should not contain more than 1,000 values.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *discreteValues;

/**
 *  Required if typeis `DOUBLE` or `INTEGER`. This field
 *  should be unset if type is `CATEGORICAL`. This value should be integers if
 *  type is `INTEGER`.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxValue;

/**
 *  Required if type is `DOUBLE` or `INTEGER`. This field
 *  should be unset if type is `CATEGORICAL`. This value should be integers if
 *  type is INTEGER.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minValue;

/**
 *  Required. The parameter name must be unique amongst all ParameterConfigs in
 *  a HyperparameterSpec message. E.g., "learning_rate".
 */
@property(nonatomic, copy, nullable) NSString *parameterName;

/**
 *  Optional. How the parameter should be scaled to the hypercube.
 *  Leave unset for categorical parameters.
 *  Some kind of scaling is strongly recommended for real or integral
 *  parameters (e.g., `UNIT_LINEAR_SCALE`).
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_ScaleType_None
 *        By default, no scaling is applied. (Value: "NONE")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_ScaleType_UnitLinearScale
 *        Scales the feasible space to (0, 1) linearly. (Value:
 *        "UNIT_LINEAR_SCALE")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_ScaleType_UnitLogScale
 *        Scales the feasible space logarithmically to (0, 1). The entire
 *        feasible
 *        space must be strictly positive. (Value: "UNIT_LOG_SCALE")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_ScaleType_UnitReverseLogScale
 *        Scales the feasible space "reverse" logarithmically to (0, 1). The
 *        result
 *        is that values close to the top of the feasible space are spread out
 *        more
 *        than points near the bottom. The entire feasible space must be
 *        strictly
 *        positive. (Value: "UNIT_REVERSE_LOG_SCALE")
 */
@property(nonatomic, copy, nullable) NSString *scaleType;

/**
 *  Required. The type of the parameter.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_Type_Categorical
 *        The parameter is categorical, with a value chosen from the categories
 *        field. (Value: "CATEGORICAL")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_Type_Discrete
 *        The parameter is real valued, with a fixed set of feasible points. If
 *        `type==DISCRETE`, feasible_points must be provided, and
 *        {`min_value`, `max_value`} will be ignored. (Value: "DISCRETE")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_Type_Double
 *        Type for real-valued parameters. (Value: "DOUBLE")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_Type_Integer
 *        Type for integral parameters. (Value: "INTEGER")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1ParameterSpec_Type_ParameterTypeUnspecified
 *        You must specify a valid type. Using this unspecified type will result
 *        in
 *        an error. (Value: "PARAMETER_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents input parameters for a prediction job.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1PredictionInput : GTLRObject

/**
 *  Required. The format of the input data files.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1PredictionInput_DataFormat_DataFormatUnspecified
 *        Unspecified format. (Value: "DATA_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1PredictionInput_DataFormat_Text
 *        The source file is a text file with instances separated by the
 *        new-line character. (Value: "TEXT")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1PredictionInput_DataFormat_TfRecord
 *        The source file is a TFRecord file. (Value: "TF_RECORD")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1PredictionInput_DataFormat_TfRecordGzip
 *        The source file is a GZIP-compressed TFRecord file. (Value:
 *        "TF_RECORD_GZIP")
 */
@property(nonatomic, copy, nullable) NSString *dataFormat;

/**
 *  Required. The Google Cloud Storage location of the input data files.
 *  May contain wildcards.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *inputPaths;

/**
 *  Optional. The maximum number of workers to be used for parallel processing.
 *  Defaults to 10 if not specified.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxWorkerCount;

/**
 *  Use this field if you want to use the default version for the specified
 *  model. The string must use the following format:
 *  `"projects/<var>[YOUR_PROJECT]</var>/models/<var>[YOUR_MODEL]</var>"`
 */
@property(nonatomic, copy, nullable) NSString *modelName;

/** Required. The output Google Cloud Storage location. */
@property(nonatomic, copy, nullable) NSString *outputPath;

/**
 *  Required. The Google Compute Engine region to run the prediction job in.
 */
@property(nonatomic, copy, nullable) NSString *region;

/**
 *  Optional. The Google Cloud ML runtime version to use for this batch
 *  prediction. If not set, Google Cloud ML will pick the runtime version used
 *  during the CreateVersion request for this model version, or choose the
 *  latest stable version when model version information is not available
 *  such as when the model is specified by uri.
 */
@property(nonatomic, copy, nullable) NSString *runtimeVersion;

/**
 *  Use this field if you want to specify a Google Cloud Storage path for
 *  the model to use.
 */
@property(nonatomic, copy, nullable) NSString *uri;

/**
 *  Use this field if you want to specify a version of the model to use. The
 *  string is formatted the same way as `model_version`, with the addition
 *  of the version information:
 *  `"projects/<var>[YOUR_PROJECT]</var>/models/<var>YOUR_MODEL/versions/<var>[YOUR_VERSION]</var>"`
 */
@property(nonatomic, copy, nullable) NSString *versionName;

@end


/**
 *  Represents results of a prediction job.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1PredictionOutput : GTLRObject

/**
 *  The number of data instances which resulted in errors.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *errorCount;

/**
 *  Node hours used by the batch prediction job.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nodeHours;

/**
 *  The output Google Cloud Storage location provided at the job creation time.
 */
@property(nonatomic, copy, nullable) NSString *outputPath;

/**
 *  The number of generated predictions.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *predictionCount;

@end


/**
 *  Request for predictions to be issued against a trained model.
 *  The body of the request is a single JSON object with a single top-level
 *  field:
 *  <dl>
 *  <dt>instances</dt>
 *  <dd>A JSON array containing values representing the instances to use for
 *  prediction.</dd>
 *  </dl>
 *  The structure of each element of the instances list is determined by your
 *  model's input definition. Instances can include named inputs or can contain
 *  only unlabeled values.
 *  Not all data includes named inputs. Some instances will be simple
 *  JSON values (boolean, number, or string). However, instances are often lists
 *  of simple values, or complex nested lists. Here are some examples of request
 *  bodies:
 *  CSV data with each row encoded as a string value:
 *  <pre>
 *  {"instances": ["1.0,true,\\\\"x\\\\"", "-2.0,false,\\\\"y\\\\""]}
 *  </pre>
 *  Plain text:
 *  <pre>
 *  {"instances": ["the quick brown fox", "la bruja le dio"]}
 *  </pre>
 *  Sentences encoded as lists of words (vectors of strings):
 *  <pre>
 *  {
 *  "instances": [
 *  ["the","quick","brown"],
 *  ["la","bruja","le"],
 *  ...
 *  ]
 *  }
 *  </pre>
 *  Floating point scalar values:
 *  <pre>
 *  {"instances": [0.0, 1.1, 2.2]}
 *  </pre>
 *  Vectors of integers:
 *  <pre>
 *  {
 *  "instances": [
 *  [0, 1, 2],
 *  [3, 4, 5],
 *  ...
 *  ]
 *  }
 *  </pre>
 *  Tensors (in this case, two-dimensional tensors):
 *  <pre>
 *  {
 *  "instances": [
 *  [
 *  [0, 1, 2],
 *  [3, 4, 5]
 *  ],
 *  ...
 *  ]
 *  }
 *  </pre>
 *  Images can be represented different ways. In this encoding scheme the first
 *  two dimensions represent the rows and columns of the image, and the third
 *  contains lists (vectors) of the R, G, and B values for each pixel.
 *  <pre>
 *  {
 *  "instances": [
 *  [
 *  [
 *  [138, 30, 66],
 *  [130, 20, 56],
 *  ...
 *  ],
 *  [
 *  [126, 38, 61],
 *  [122, 24, 57],
 *  ...
 *  ],
 *  ...
 *  ],
 *  ...
 *  ]
 *  }
 *  </pre>
 *  JSON strings must be encoded as UTF-8. To send binary data, you must
 *  base64-encode the data and mark it as binary. To mark a JSON string
 *  as binary, replace it with a JSON object with a single attribute named
 *  `b64`:
 *  <pre>{"b64": "..."} </pre>
 *  For example:
 *  Two Serialized tf.Examples (fake data, for illustrative purposes only):
 *  <pre>
 *  {"instances": [{"b64": "X5ad6u"}, {"b64": "IA9j4nx"}]}
 *  </pre>
 *  Two JPEG image byte strings (fake data, for illustrative purposes only):
 *  <pre>
 *  {"instances": [{"b64": "ASa8asdf"}, {"b64": "JLK7ljk3"}]}
 *  </pre>
 *  If your data includes named references, format each instance as a JSON
 *  object
 *  with the named references as the keys:
 *  JSON input data to be preprocessed:
 *  <pre>
 *  {
 *  "instances": [
 *  {
 *  "a": 1.0,
 *  "b": true,
 *  "c": "x"
 *  },
 *  {
 *  "a": -2.0,
 *  "b": false,
 *  "c": "y"
 *  }
 *  ]
 *  }
 *  </pre>
 *  Some models have an underlying TensorFlow graph that accepts multiple input
 *  tensors. In this case, you should use the names of JSON name/value pairs to
 *  identify the input tensors, as shown in the following exmaples:
 *  For a graph with input tensor aliases "tag" (string) and "image"
 *  (base64-encoded string):
 *  <pre>
 *  {
 *  "instances": [
 *  {
 *  "tag": "beach",
 *  "image": {"b64": "ASa8asdf"}
 *  },
 *  {
 *  "tag": "car",
 *  "image": {"b64": "JLK7ljk3"}
 *  }
 *  ]
 *  }
 *  </pre>
 *  For a graph with input tensor aliases "tag" (string) and "image"
 *  (3-dimensional array of 8-bit ints):
 *  <pre>
 *  {
 *  "instances": [
 *  {
 *  "tag": "beach",
 *  "image": [
 *  [
 *  [138, 30, 66],
 *  [130, 20, 56],
 *  ...
 *  ],
 *  [
 *  [126, 38, 61],
 *  [122, 24, 57],
 *  ...
 *  ],
 *  ...
 *  ]
 *  },
 *  {
 *  "tag": "car",
 *  "image": [
 *  [
 *  [255, 0, 102],
 *  [255, 0, 97],
 *  ...
 *  ],
 *  [
 *  [254, 1, 101],
 *  [254, 2, 93],
 *  ...
 *  ],
 *  ...
 *  ]
 *  },
 *  ...
 *  ]
 *  }
 *  </pre>
 *  If the call is successful, the response body will contain one prediction
 *  entry per instance in the request body. If prediction fails for any
 *  instance, the response body will contain no predictions and will contian
 *  a single error entry instead.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1PredictRequest : GTLRObject

/** Required. The prediction request body. */
@property(nonatomic, strong, nullable) GTLRCloudMachineLearningEngine_GoogleApiHttpBody *httpBody;

@end


/**
 *  Request message for the SetDefaultVersion request.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1SetDefaultVersionRequest : GTLRObject
@end


/**
 *  Represents input parameters for a training job.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingInput : GTLRObject

/** Optional. Command line arguments to pass to the program. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *args;

/** Optional. The set of Hyperparameters to tune. */
@property(nonatomic, strong, nullable) GTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterSpec *hyperparameters;

/**
 *  Optional. A Google Cloud Storage path in which to store training outputs
 *  and other data needed for training. This path is passed to your TensorFlow
 *  program as the 'job_dir' command-line argument. The benefit of specifying
 *  this field is that Cloud ML validates the path for use in training.
 */
@property(nonatomic, copy, nullable) NSString *jobDir;

/**
 *  Optional. Specifies the type of virtual machine to use for your training
 *  job's master worker.
 *  The following types are supported:
 *  <dl>
 *  <dt>standard</dt>
 *  <dd>
 *  A basic machine configuration suitable for training simple models with
 *  small to moderate datasets.
 *  </dd>
 *  <dt>large_model</dt>
 *  <dd>
 *  A machine with a lot of memory, specially suited for parameter servers
 *  when your model is large (having many hidden layers or layers with very
 *  large numbers of nodes).
 *  </dd>
 *  <dt>complex_model_s</dt>
 *  <dd>
 *  A machine suitable for the master and workers of the cluster when your
 *  model requires more computation than the standard machine can handle
 *  satisfactorily.
 *  </dd>
 *  <dt>complex_model_m</dt>
 *  <dd>
 *  A machine with roughly twice the number of cores and roughly double the
 *  memory of <code suppresswarning="true">complex_model_s</code>.
 *  </dd>
 *  <dt>complex_model_l</dt>
 *  <dd>
 *  A machine with roughly twice the number of cores and roughly double the
 *  memory of <code suppresswarning="true">complex_model_m</code>.
 *  </dd>
 *  <dt>standard_gpu</dt>
 *  <dd>
 *  A machine equivalent to <code suppresswarning="true">standard</code> that
 *  also includes a
 *  <a href="/ml-engine/docs/how-tos/using-gpus">
 *  GPU that you can use in your trainer</a>.
 *  </dd>
 *  <dt>complex_model_m_gpu</dt>
 *  <dd>
 *  A machine equivalent to
 *  <code suppresswarning="true">coplex_model_m</code> that also includes
 *  four GPUs.
 *  </dd>
 *  </dl>
 *  You must set this value when `scaleTier` is set to `CUSTOM`.
 */
@property(nonatomic, copy, nullable) NSString *masterType;

/**
 *  Required. The Google Cloud Storage location of the packages with
 *  the training program and any additional dependencies.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *packageUris;

/**
 *  Optional. The number of parameter server replicas to use for the training
 *  job. Each replica in the cluster will be of the type specified in
 *  `parameter_server_type`.
 *  This value can only be used when `scale_tier` is set to `CUSTOM`.If you
 *  set this value, you must also set `parameter_server_type`.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *parameterServerCount;

/**
 *  Optional. Specifies the type of virtual machine to use for your training
 *  job's parameter server.
 *  The supported values are the same as those described in the entry for
 *  `master_type`.
 *  This value must be present when `scaleTier` is set to `CUSTOM` and
 *  `parameter_server_count` is greater than zero.
 */
@property(nonatomic, copy, nullable) NSString *parameterServerType;

/** Required. The Python module name to run after installing the packages. */
@property(nonatomic, copy, nullable) NSString *pythonModule;

/** Required. The Google Compute Engine region to run the training job in. */
@property(nonatomic, copy, nullable) NSString *region;

/**
 *  Optional. The Google Cloud ML runtime version to use for training. If not
 *  set, Google Cloud ML will choose the latest stable version.
 */
@property(nonatomic, copy, nullable) NSString *runtimeVersion;

/**
 *  Required. Specifies the machine types, the number of replicas for workers
 *  and parameter servers.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingInput_ScaleTier_Basic
 *        A single worker instance. This tier is suitable for learning how to
 *        use
 *        Cloud ML, and for experimenting with new models using small datasets.
 *        (Value: "BASIC")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingInput_ScaleTier_BasicGpu
 *        A single worker instance [with a GPU](ml/docs/how-tos/using-gpus).
 *        (Value: "BASIC_GPU")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingInput_ScaleTier_Custom
 *        The CUSTOM tier is not a set tier, but rather enables you to use your
 *        own cluster specification. When you use this tier, set values to
 *        configure your processing cluster according to these guidelines:
 *        * You _must_ set `TrainingInput.masterType` to specify the type
 *        of machine to use for your master node. This is the only required
 *        setting.
 *        * You _may_ set `TrainingInput.workerCount` to specify the number of
 *        workers to use. If you specify one or more workers, you _must_ also
 *        set `TrainingInput.workerType` to specify the type of machine to use
 *        for your worker nodes.
 *        * You _may_ set `TrainingInput.parameterServerCount` to specify the
 *        number of parameter servers to use. If you specify one or more
 *        parameter servers, you _must_ also set
 *        `TrainingInput.parameterServerType` to specify the type of machine to
 *        use for your parameter servers.
 *        Note that all of your workers must use the same machine type, which
 *        can
 *        be different from your parameter server type and master type. Your
 *        parameter servers must likewise use the same machine type, which can
 *        be
 *        different from your worker type and master type. (Value: "CUSTOM")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingInput_ScaleTier_Premium1
 *        A large number of workers with many parameter servers. (Value:
 *        "PREMIUM_1")
 *    @arg @c kGTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingInput_ScaleTier_Standard1
 *        Many workers and a few parameter servers. (Value: "STANDARD_1")
 */
@property(nonatomic, copy, nullable) NSString *scaleTier;

/**
 *  Optional. The number of worker replicas to use for the training job. Each
 *  replica in the cluster will be of the type specified in `worker_type`.
 *  This value can only be used when `scale_tier` is set to `CUSTOM`. If you
 *  set this value, you must also set `worker_type`.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *workerCount;

/**
 *  Optional. Specifies the type of virtual machine to use for your training
 *  job's worker nodes.
 *  The supported values are the same as those described in the entry for
 *  `masterType`.
 *  This value must be present when `scaleTier` is set to `CUSTOM` and
 *  `workerCount` is greater than zero.
 */
@property(nonatomic, copy, nullable) NSString *workerType;

@end


/**
 *  Represents results of a training job. Output only.
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1TrainingOutput : GTLRObject

/**
 *  The number of hyperparameter tuning trials that completed successfully.
 *  Only set for hyperparameter tuning jobs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *completedTrialCount;

/**
 *  The amount of ML units consumed by the job.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *consumedMLUnits;

/**
 *  Whether this job is a hyperparameter tuning job.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isHyperparameterTuningJob;

/**
 *  Results for individual Hyperparameter trials.
 *  Only set for hyperparameter tuning jobs.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMachineLearningEngine_GoogleCloudMlV1HyperparameterOutput *> *trials;

@end


/**
 *  Represents a version of the model.
 *  Each version is a trained model deployed in the cloud, ready to handle
 *  prediction requests. A model can have multiple versions. You can get
 *  information about all of the versions of a given model by calling
 *  [projects.models.versions.list](/ml/reference/rest/v1/projects.models.versions/list).
 */
@interface GTLRCloudMachineLearningEngine_GoogleCloudMlV1Version : GTLRObject

/** Output only. The time the version was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Required. The Google Cloud Storage location of the trained model used to
 *  create the version. See the
 *  [overview of model deployment](/ml/docs/concepts/deployment-overview) for
 *  more informaiton.
 *  When passing Version to
 *  [projects.models.versions.create](/ml/reference/rest/v1/projects.models.versions/create)
 *  the model service uses the specified location as the source of the model.
 *  Once deployed, the model version is hosted by the prediction service, so
 *  this location is useful only as a historical record.
 */
@property(nonatomic, copy, nullable) NSString *deploymentUri;

/**
 *  Optional. The description specified for the version when it was created.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. If true, this version will be used to handle prediction
 *  requests that do not specify a version.
 *  You can change the default version by calling
 *  [projects.methods.versions.setDefault](/ml/reference/rest/v1/projects.models.versions/setDefault).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDefault;

/** Output only. The time the version was last used for prediction. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastUseTime;

/**
 *  Optional. Manually select the number of nodes to use for serving the
 *  model. If unset (i.e., by default), the number of nodes used to serve
 *  the model automatically scales with traffic. However, care should be
 *  taken to ramp up traffic according to the model's ability to scale. If
 *  your model needs to handle bursts of traffic beyond it's ability to
 *  scale, it is recommended you set this field appropriately.
 */
@property(nonatomic, strong, nullable) GTLRCloudMachineLearningEngine_GoogleCloudMlV1ManualScaling *manualScaling;

/**
 *  Required.The name specified for the version when it was created.
 *  The version name must be unique within the model it is created in.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The Google Cloud ML runtime version to use for this deployment.
 *  If not set, Google Cloud ML will choose a version.
 */
@property(nonatomic, copy, nullable) NSString *runtimeVersion;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudMachineLearningEngine_GoogleLongrunningListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMachineLearningEngine_GoogleLongrunningOperation *> *operations;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudMachineLearningEngine_GoogleLongrunningOperation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If true, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudMachineLearningEngine_GoogleRpcStatus *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudMachineLearningEngine_GoogleLongrunningOperation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the
 *  `name` should have the format of `operations/some/unique/name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudMachineLearningEngine_GoogleLongrunningOperation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudMachineLearningEngine_GoogleLongrunningOperation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudMachineLearningEngine_GoogleLongrunningOperation_Response : GTLRObject
@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRCloudMachineLearningEngine_GoogleProtobufEmpty : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` which can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting purpose.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRCloudMachineLearningEngine_GoogleRpcStatus : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There will be a
 *  common set of message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMachineLearningEngine_GoogleRpcStatus_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudMachineLearningEngine_GoogleRpcStatus_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudMachineLearningEngine_GoogleRpcStatus_Details_Item : GTLRObject
@end

NS_ASSUME_NONNULL_END
