// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Certificate Authority API (privateca/v1beta1)
// Description:
//   The Certificate Authority Service API is a highly-available, scalable
//   service that enables you to simplify and automate the management of private
//   certificate authorities (CAs) while staying in control of your private
//   keys."
// Documentation:
//   https://cloud.google.com/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCertificateAuthorityService_AccessUrls;
@class GTLRCertificateAuthorityService_AllowedConfigList;
@class GTLRCertificateAuthorityService_AllowedSubjectAltNames;
@class GTLRCertificateAuthorityService_AuditConfig;
@class GTLRCertificateAuthorityService_AuditLogConfig;
@class GTLRCertificateAuthorityService_Binding;
@class GTLRCertificateAuthorityService_CaOptions;
@class GTLRCertificateAuthorityService_Certificate;
@class GTLRCertificateAuthorityService_Certificate_Labels;
@class GTLRCertificateAuthorityService_CertificateAuthority;
@class GTLRCertificateAuthorityService_CertificateAuthority_Labels;
@class GTLRCertificateAuthorityService_CertificateAuthorityPolicy;
@class GTLRCertificateAuthorityService_CertificateConfig;
@class GTLRCertificateAuthorityService_CertificateDescription;
@class GTLRCertificateAuthorityService_CertificateFingerprint;
@class GTLRCertificateAuthorityService_CertificateRevocationList;
@class GTLRCertificateAuthorityService_CertificateRevocationList_Labels;
@class GTLRCertificateAuthorityService_Expr;
@class GTLRCertificateAuthorityService_ExtendedKeyUsageOptions;
@class GTLRCertificateAuthorityService_IssuanceModes;
@class GTLRCertificateAuthorityService_IssuingOptions;
@class GTLRCertificateAuthorityService_KeyId;
@class GTLRCertificateAuthorityService_KeyUsage;
@class GTLRCertificateAuthorityService_KeyUsageOptions;
@class GTLRCertificateAuthorityService_KeyVersionSpec;
@class GTLRCertificateAuthorityService_Location;
@class GTLRCertificateAuthorityService_Location_Labels;
@class GTLRCertificateAuthorityService_Location_Metadata;
@class GTLRCertificateAuthorityService_ObjectId;
@class GTLRCertificateAuthorityService_Operation;
@class GTLRCertificateAuthorityService_Operation_Metadata;
@class GTLRCertificateAuthorityService_Operation_Response;
@class GTLRCertificateAuthorityService_Policy;
@class GTLRCertificateAuthorityService_PublicKey;
@class GTLRCertificateAuthorityService_ReusableConfig;
@class GTLRCertificateAuthorityService_ReusableConfig_Labels;
@class GTLRCertificateAuthorityService_ReusableConfigValues;
@class GTLRCertificateAuthorityService_ReusableConfigWrapper;
@class GTLRCertificateAuthorityService_RevocationDetails;
@class GTLRCertificateAuthorityService_RevokedCertificate;
@class GTLRCertificateAuthorityService_Status;
@class GTLRCertificateAuthorityService_Status_Details_Item;
@class GTLRCertificateAuthorityService_Subject;
@class GTLRCertificateAuthorityService_SubjectAltNames;
@class GTLRCertificateAuthorityService_SubjectConfig;
@class GTLRCertificateAuthorityService_SubjectDescription;
@class GTLRCertificateAuthorityService_SubordinateConfig;
@class GTLRCertificateAuthorityService_SubordinateConfigChain;
@class GTLRCertificateAuthorityService_X509Extension;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCertificateAuthorityService_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCertificateAuthorityService_CertificateAuthority.state

/**
 *  Certificates cannot be issued from this CA. CRLs will still be generated.
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_CertificateAuthority_State_Disabled;
/**
 *  Certificates can be issued from this CA. CRLs will be generated for this CA.
 *
 *  Value: "ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_CertificateAuthority_State_Enabled;
/**
 *  Certificates cannot be issued from this CA. CRLs will not be generated.
 *
 *  Value: "PENDING_ACTIVATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_CertificateAuthority_State_PendingActivation;
/**
 *  Certificates cannot be issued from this CA. CRLs will not be generated.
 *
 *  Value: "PENDING_DELETION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_CertificateAuthority_State_PendingDeletion;
/**
 *  Not specified.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_CertificateAuthority_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCertificateAuthorityService_CertificateAuthority.tier

/**
 *  DevOps tier.
 *
 *  Value: "DEVOPS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_CertificateAuthority_Tier_Devops;
/**
 *  Enterprise tier.
 *
 *  Value: "ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_CertificateAuthority_Tier_Enterprise;
/**
 *  Not specified.
 *
 *  Value: "TIER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_CertificateAuthority_Tier_TierUnspecified;

// ----------------------------------------------------------------------------
// GTLRCertificateAuthorityService_CertificateAuthority.type

/**
 *  Self-signed CA.
 *
 *  Value: "SELF_SIGNED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_CertificateAuthority_Type_SelfSigned;
/**
 *  Subordinate CA. Could be issued by a Private CA CertificateAuthority or an
 *  unmanaged CA.
 *
 *  Value: "SUBORDINATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_CertificateAuthority_Type_Subordinate;
/**
 *  Not specified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_CertificateAuthority_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCertificateAuthorityService_CertificateRevocationList.state

/**
 *  The CertificateRevocationList is up to date.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_CertificateRevocationList_State_Active;
/**
 *  Not specified.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_CertificateRevocationList_State_StateUnspecified;
/**
 *  The CertificateRevocationList is no longer current.
 *
 *  Value: "SUPERSEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_CertificateRevocationList_State_Superseded;

// ----------------------------------------------------------------------------
// GTLRCertificateAuthorityService_KeyVersionSpec.algorithm

/**
 *  maps to CryptoKeyVersionAlgorithm.EC_SIGN_P256_SHA256
 *
 *  Value: "EC_P256_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_EcP256Sha256;
/**
 *  maps to CryptoKeyVersionAlgorithm.EC_SIGN_P384_SHA384
 *
 *  Value: "EC_P384_SHA384"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_EcP384Sha384;
/**
 *  maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PKCS1_2048_SHA256
 *
 *  Value: "RSA_PKCS1_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_RsaPkcs12048Sha256;
/**
 *  maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PKCS1_3072_SHA256
 *
 *  Value: "RSA_PKCS1_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_RsaPkcs13072Sha256;
/**
 *  maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PKCS1_4096_SHA256
 *
 *  Value: "RSA_PKCS1_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_RsaPkcs14096Sha256;
/**
 *  maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PSS_2048_SHA256
 *
 *  Value: "RSA_PSS_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_RsaPss2048Sha256;
/**
 *  maps to CryptoKeyVersionAlgorithm. RSA_SIGN_PSS_3072_SHA256
 *
 *  Value: "RSA_PSS_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_RsaPss3072Sha256;
/**
 *  maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PSS_4096_SHA256
 *
 *  Value: "RSA_PSS_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_RsaPss4096Sha256;
/**
 *  Not specified.
 *
 *  Value: "SIGN_HASH_ALGORITHM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_SignHashAlgorithmUnspecified;

// ----------------------------------------------------------------------------
// GTLRCertificateAuthorityService_PublicKey.type

/**
 *  Default unspecified value.
 *
 *  Value: "KEY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_PublicKey_Type_KeyTypeUnspecified;
/**
 *  A PEM-encoded compressed NIST P-256/secp256r1/prime256v1 or P-384 key, or an
 *  RFC 5280
 *  [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1)
 *  structure containing the former.
 *
 *  Value: "PEM_EC_KEY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_PublicKey_Type_PemEcKey;
/**
 *  A PEM-encoded PKCS#1/RFC 3447 RSAPrivateKey structure, or an RFC 5280
 *  [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1)
 *  structure containing the former.
 *
 *  Value: "PEM_RSA_KEY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_PublicKey_Type_PemRsaKey;

// ----------------------------------------------------------------------------
// GTLRCertificateAuthorityService_RevocationDetails.revocationState

/**
 *  The subject or other attributes in this Certificate have changed.
 *
 *  Value: "AFFILIATION_CHANGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_AffiliationChanged;
/**
 *  The authority which determines appropriate attributes for a Certificate may
 *  have been compromised.
 *
 *  Value: "ATTRIBUTE_AUTHORITY_COMPROMISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_AttributeAuthorityCompromise;
/**
 *  The key material for a certificate authority in the issuing path may have
 *  leaked.
 *
 *  Value: "CERTIFICATE_AUTHORITY_COMPROMISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_CertificateAuthorityCompromise;
/**
 *  This Certificate should not be considered valid, it is expected that it may
 *  become valid in the future.
 *
 *  Value: "CERTIFICATE_HOLD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_CertificateHold;
/**
 *  This Certificate or entities in the issuing path have ceased to operate.
 *
 *  Value: "CESSATION_OF_OPERATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_CessationOfOperation;
/**
 *  Key material for this Certificate may have leaked.
 *
 *  Value: "KEY_COMPROMISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_KeyCompromise;
/**
 *  This Certificate no longer has permission to assert the listed attributes.
 *
 *  Value: "PRIVILEGE_WITHDRAWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_PrivilegeWithdrawn;
/**
 *  Default unspecified value. This value does indicate that a Certificate has
 *  been revoked, but that a reason has not been recorded.
 *
 *  Value: "REVOCATION_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_RevocationReasonUnspecified;
/**
 *  This Certificate has been superseded.
 *
 *  Value: "SUPERSEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_Superseded;

// ----------------------------------------------------------------------------
// GTLRCertificateAuthorityService_RevokeCertificateRequest.reason

/**
 *  The subject or other attributes in this Certificate have changed.
 *
 *  Value: "AFFILIATION_CHANGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_AffiliationChanged;
/**
 *  The authority which determines appropriate attributes for a Certificate may
 *  have been compromised.
 *
 *  Value: "ATTRIBUTE_AUTHORITY_COMPROMISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_AttributeAuthorityCompromise;
/**
 *  The key material for a certificate authority in the issuing path may have
 *  leaked.
 *
 *  Value: "CERTIFICATE_AUTHORITY_COMPROMISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_CertificateAuthorityCompromise;
/**
 *  This Certificate should not be considered valid, it is expected that it may
 *  become valid in the future.
 *
 *  Value: "CERTIFICATE_HOLD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_CertificateHold;
/**
 *  This Certificate or entities in the issuing path have ceased to operate.
 *
 *  Value: "CESSATION_OF_OPERATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_CessationOfOperation;
/**
 *  Key material for this Certificate may have leaked.
 *
 *  Value: "KEY_COMPROMISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_KeyCompromise;
/**
 *  This Certificate no longer has permission to assert the listed attributes.
 *
 *  Value: "PRIVILEGE_WITHDRAWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_PrivilegeWithdrawn;
/**
 *  Default unspecified value. This value does indicate that a Certificate has
 *  been revoked, but that a reason has not been recorded.
 *
 *  Value: "REVOCATION_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_RevocationReasonUnspecified;
/**
 *  This Certificate has been superseded.
 *
 *  Value: "SUPERSEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_Superseded;

// ----------------------------------------------------------------------------
// GTLRCertificateAuthorityService_RevokedCertificate.revocationReason

/**
 *  The subject or other attributes in this Certificate have changed.
 *
 *  Value: "AFFILIATION_CHANGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_AffiliationChanged;
/**
 *  The authority which determines appropriate attributes for a Certificate may
 *  have been compromised.
 *
 *  Value: "ATTRIBUTE_AUTHORITY_COMPROMISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_AttributeAuthorityCompromise;
/**
 *  The key material for a certificate authority in the issuing path may have
 *  leaked.
 *
 *  Value: "CERTIFICATE_AUTHORITY_COMPROMISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_CertificateAuthorityCompromise;
/**
 *  This Certificate should not be considered valid, it is expected that it may
 *  become valid in the future.
 *
 *  Value: "CERTIFICATE_HOLD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_CertificateHold;
/**
 *  This Certificate or entities in the issuing path have ceased to operate.
 *
 *  Value: "CESSATION_OF_OPERATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_CessationOfOperation;
/**
 *  Key material for this Certificate may have leaked.
 *
 *  Value: "KEY_COMPROMISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_KeyCompromise;
/**
 *  This Certificate no longer has permission to assert the listed attributes.
 *
 *  Value: "PRIVILEGE_WITHDRAWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_PrivilegeWithdrawn;
/**
 *  Default unspecified value. This value does indicate that a Certificate has
 *  been revoked, but that a reason has not been recorded.
 *
 *  Value: "REVOCATION_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_RevocationReasonUnspecified;
/**
 *  This Certificate has been superseded.
 *
 *  Value: "SUPERSEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_Superseded;

/**
 *  URLs where a CertificateAuthority will publish content.
 */
@interface GTLRCertificateAuthorityService_AccessUrls : GTLRObject

/**
 *  The URL where this CertificateAuthority's CA certificate is published. This
 *  will only be set for CAs that have been activated.
 */
@property(nonatomic, copy, nullable) NSString *caCertificateAccessUrl;

/**
 *  The URL where this CertificateAuthority's CRLs are published. This will only
 *  be set for CAs that have been activated.
 */
@property(nonatomic, copy, nullable) NSString *crlAccessUrl;

@end


/**
 *  Request message for
 *  CertificateAuthorityService.ActivateCertificateAuthority.
 */
@interface GTLRCertificateAuthorityService_ActivateCertificateAuthorityRequest : GTLRObject

/**
 *  Required. The signed CA certificate issued from
 *  FetchCertificateAuthorityCsrResponse.pem_csr.
 */
@property(nonatomic, copy, nullable) NSString *pemCaCertificate;

/**
 *  Optional. An ID to identify requests. Specify a unique request ID so that if
 *  you must retry your request, the server will know to ignore the request if
 *  it has already been completed. The server will guarantee that for at least
 *  60 minutes since the first request. For example, consider a situation where
 *  you make an initial request and t he request times out. If you make the
 *  request again with the same request ID, the server can check if original
 *  operation with the same request ID was received, and if so, will ignore the
 *  second request. This prevents clients from accidentally creating duplicate
 *  commitments. The request ID must be a valid UUID with the exception that
 *  zero UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. Must include information about the issuer of 'pem_ca_certificate',
 *  and any further issuers until the self-signed CA.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_SubordinateConfig *subordinateConfig;

@end


/**
 *  GTLRCertificateAuthorityService_AllowedConfigList
 */
@interface GTLRCertificateAuthorityService_AllowedConfigList : GTLRObject

/**
 *  Required. All Certificates issued by the CertificateAuthority must match at
 *  least one listed ReusableConfigWrapper. If a ReusableConfigWrapper has an
 *  empty field, any value will be allowed for that field.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_ReusableConfigWrapper *> *allowedConfigValues;

@end


/**
 *  AllowedSubjectAltNames specifies the allowed values for SubjectAltNames by
 *  the CertificateAuthority when issuing Certificates.
 */
@interface GTLRCertificateAuthorityService_AllowedSubjectAltNames : GTLRObject

/**
 *  Optional. Specifies if to allow custom X509Extension values.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowCustomSans;

/**
 *  Optional. Contains valid, fully-qualified host names. Glob patterns are also
 *  supported. To allow an explicit wildcard certificate, escape with backlash
 *  (i.e. "\\*"). E.g. for globbed entries: '*bar.com' will allow 'foo.bar.com',
 *  but not '*.bar.com', unless the allow_globbing_dns_wildcards field is set.
 *  E.g. for wildcard entries: '\\*.bar.com' will allow '*.bar.com', but not
 *  'foo.bar.com'.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedDnsNames;

/**
 *  Optional. Contains valid RFC 2822 E-mail addresses. Glob patterns are also
 *  supported.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedEmailAddresses;

/**
 *  Optional. Contains valid 32-bit IPv4 addresses and subnet ranges or RFC 4291
 *  IPv6 addresses and subnet ranges. Subnet ranges are specified using the '/'
 *  notation (e.g. 10.0.0.0/8, 2001:700:300:1800::/64). Glob patterns are
 *  supported only for ip address entries (i.e. not for subnet ranges).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedIps;

/**
 *  Optional. Contains valid RFC 3986 URIs. Glob patterns are also supported. To
 *  match across path seperators (i.e. '/') use the double star glob pattern
 *  (i.e. '**').
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedUris;

/**
 *  Optional. Specifies if glob patterns used for allowed_dns_names allow
 *  wildcard certificates. If this is set, certificate requests with wildcard
 *  domains will be permitted to match a glob pattern specified in
 *  allowed_dns_names. Otherwise, certificate requests with wildcard domains
 *  will be permitted only if allowed_dns_names contains a literal wildcard.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowGlobbingDnsWildcards;

@end


/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts jose\@example.com from DATA_READ logging, and
 *  aliya\@example.com from DATA_WRITE logging.
 */
@interface GTLRCertificateAuthorityService_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRCertificateAuthorityService_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateAuthorityService_AuditLogConfig_LogType_AdminRead
 *        Admin reads. Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRCertificateAuthorityService_AuditLogConfig_LogType_DataRead
 *        Data reads. Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRCertificateAuthorityService_AuditLogConfig_LogType_DataWrite
 *        Data writes. Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRCertificateAuthorityService_AuditLogConfig_LogType_LogTypeUnspecified
 *        Default case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members` with a `role`.
 */
@interface GTLRCertificateAuthorityService_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the members in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_Expr *condition;

/**
 *  Specifies the identities requesting access for a Cloud Platform resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. *
 *  `user:{emailid}`: An email address that represents a specific Google
 *  account. For example, `alice\@example.com` . * `serviceAccount:{emailid}`:
 *  An email address that represents a service account. For example,
 *  `my-other-app\@appspot.gserviceaccount.com`. * `group:{emailid}`: An email
 *  address that represents a Google group. For example, `admins\@example.com`.
 *  * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. * `domain:{domain}`: The G Suite domain (primary) that
 *  represents all the users of that domain. For example, `google.com` or
 *  `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to `members`. For example, `roles/viewer`,
 *  `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRCertificateAuthorityService_CancelOperationRequest : GTLRObject
@end


/**
 *  Describes values that are relevant in a CA certificate.
 */
@interface GTLRCertificateAuthorityService_CaOptions : GTLRObject

/**
 *  Optional. Refers to the "CA" X.509 extension, which is a boolean value. When
 *  this value is missing, the extension will be omitted from the CA
 *  certificate.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isCa;

/**
 *  Optional. Refers to the path length restriction X.509 extension. For a CA
 *  certificate, this value describes the depth of subordinate CA certificates
 *  that are allowed. If this value is less than 0, the request will fail. If
 *  this value is missing, the max path length will be omitted from the CA
 *  certificate.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxIssuerPathLength;

@end


/**
 *  A Certificate corresponds to a signed X.509 certificate issued by a
 *  CertificateAuthority.
 */
@interface GTLRCertificateAuthorityService_Certificate : GTLRObject

/** Output only. A structured description of the issued X.509 certificate. */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_CertificateDescription *certificateDescription;

/**
 *  Immutable. A description of the certificate and key that does not require
 *  X.509 or ASN.1.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_CertificateConfig *config;

/** Output only. The time at which this Certificate was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Optional. Labels with user-defined metadata. */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_Certificate_Labels *labels;

/**
 *  Required. Immutable. The desired lifetime of a certificate. Used to create
 *  the "not_before_time" and "not_after_time" fields inside an X.509
 *  certificate. Note that the lifetime may be truncated if it would extend past
 *  the life of any certificate authority in the issuing chain.
 */
@property(nonatomic, strong, nullable) GTLRDuration *lifetime;

/**
 *  Output only. The resource path for this Certificate in the format `projects/
 *  * /locations/ * /certificateAuthorities/ * /certificates/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The pem-encoded, signed X.509 certificate. */
@property(nonatomic, copy, nullable) NSString *pemCertificate;

/**
 *  Output only. The chain that may be used to verify the X.509 certificate.
 *  Expected to be in issuer-to-root order according to RFC 5246.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *pemCertificateChain;

/** Immutable. A pem-encoded X.509 certificate signing request (CSR). */
@property(nonatomic, copy, nullable) NSString *pemCsr;

/**
 *  Output only. Details regarding the revocation of this Certificate. This
 *  Certificate is considered revoked if and only if this field is present.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_RevocationDetails *revocationDetails;

/** Output only. The time at which this Certificate was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Labels with user-defined metadata.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCertificateAuthorityService_Certificate_Labels : GTLRObject
@end


/**
 *  A CertificateAuthority represents an individual Certificate Authority. A
 *  CertificateAuthority can be used to create Certificates.
 */
@interface GTLRCertificateAuthorityService_CertificateAuthority : GTLRObject

/**
 *  Output only. URLs for accessing content published by this CA, such as the CA
 *  certificate and CRLs.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_AccessUrls *accessUrls;

/**
 *  Output only. A structured description of this CertificateAuthority's CA
 *  certificate and its issuers. Ordered as self-to-root.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_CertificateDescription *> *caCertificateDescriptions;

/**
 *  Optional. The CertificateAuthorityPolicy to enforce when issuing
 *  Certificates from this CertificateAuthority.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_CertificateAuthorityPolicy *certificatePolicy;

/**
 *  Required. Immutable. The config used to create a self-signed X.509
 *  certificate or CSR.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_CertificateConfig *config;

/** Output only. The time at which this CertificateAuthority was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The time at which this CertificateAuthority will be deleted, if
 *  scheduled for deletion.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/**
 *  Immutable. The name of a Cloud Storage bucket where this
 *  CertificateAuthority will publish content, such as the CA certificate and
 *  CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or
 *  suffixes (such as `.googleapis.com`). For example, to use a bucket named
 *  `my-bucket`, you would simply specify `my-bucket`. If not specified, a
 *  managed bucket will be created.
 */
@property(nonatomic, copy, nullable) NSString *gcsBucket;

/**
 *  Optional. The IssuingOptions to follow when issuing Certificates from this
 *  CertificateAuthority.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_IssuingOptions *issuingOptions;

/**
 *  Required. Immutable. Used when issuing certificates for this
 *  CertificateAuthority. If this CertificateAuthority is a self-signed
 *  CertificateAuthority, this key is also used to sign the self-signed CA
 *  certificate. Otherwise, it is used to sign a CSR.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_KeyVersionSpec *keySpec;

/** Optional. Labels with user-defined metadata. */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_CertificateAuthority_Labels *labels;

/**
 *  Required. The desired lifetime of the CA certificate. Used to create the
 *  "not_before_time" and "not_after_time" fields inside an X.509 certificate.
 */
@property(nonatomic, strong, nullable) GTLRDuration *lifetime;

/**
 *  Output only. The resource name for this CertificateAuthority in the format
 *  `projects/ * /locations/ * /certificateAuthorities/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. This CertificateAuthority's certificate chain, including the
 *  current CertificateAuthority's certificate. Ordered such that the root
 *  issuer is the final element (consistent with RFC 5246). For a self-signed
 *  CA, this will only list the current CertificateAuthority's certificate.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *pemCaCertificates;

/**
 *  Output only. The State for this CertificateAuthority.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateAuthorityService_CertificateAuthority_State_Disabled
 *        Certificates cannot be issued from this CA. CRLs will still be
 *        generated. (Value: "DISABLED")
 *    @arg @c kGTLRCertificateAuthorityService_CertificateAuthority_State_Enabled
 *        Certificates can be issued from this CA. CRLs will be generated for
 *        this CA. (Value: "ENABLED")
 *    @arg @c kGTLRCertificateAuthorityService_CertificateAuthority_State_PendingActivation
 *        Certificates cannot be issued from this CA. CRLs will not be
 *        generated. (Value: "PENDING_ACTIVATION")
 *    @arg @c kGTLRCertificateAuthorityService_CertificateAuthority_State_PendingDeletion
 *        Certificates cannot be issued from this CA. CRLs will not be
 *        generated. (Value: "PENDING_DELETION")
 *    @arg @c kGTLRCertificateAuthorityService_CertificateAuthority_State_StateUnspecified
 *        Not specified. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Optional. If this is a subordinate CertificateAuthority, this field will be
 *  set with the subordinate configuration, which describes its issuers. This
 *  may be updated, but this CertificateAuthority must continue to validate.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_SubordinateConfig *subordinateConfig;

/**
 *  Required. Immutable. The Tier of this CertificateAuthority.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateAuthorityService_CertificateAuthority_Tier_Devops
 *        DevOps tier. (Value: "DEVOPS")
 *    @arg @c kGTLRCertificateAuthorityService_CertificateAuthority_Tier_Enterprise
 *        Enterprise tier. (Value: "ENTERPRISE")
 *    @arg @c kGTLRCertificateAuthorityService_CertificateAuthority_Tier_TierUnspecified
 *        Not specified. (Value: "TIER_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *tier;

/**
 *  Required. Immutable. The Type of this CertificateAuthority.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateAuthorityService_CertificateAuthority_Type_SelfSigned
 *        Self-signed CA. (Value: "SELF_SIGNED")
 *    @arg @c kGTLRCertificateAuthorityService_CertificateAuthority_Type_Subordinate
 *        Subordinate CA. Could be issued by a Private CA CertificateAuthority
 *        or an unmanaged CA. (Value: "SUBORDINATE")
 *    @arg @c kGTLRCertificateAuthorityService_CertificateAuthority_Type_TypeUnspecified
 *        Not specified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Output only. The time at which this CertificateAuthority was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Labels with user-defined metadata.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCertificateAuthorityService_CertificateAuthority_Labels : GTLRObject
@end


/**
 *  The issuing policy for a CertificateAuthority. Certificates will not be
 *  successfully issued from this CertificateAuthority if they violate the
 *  policy.
 */
@interface GTLRCertificateAuthorityService_CertificateAuthorityPolicy : GTLRObject

/**
 *  Optional. If any value is specified here, then all Certificates issued by
 *  the CertificateAuthority must match at least one listed value. If no value
 *  is specified, all values will be allowed for this fied. Glob patterns are
 *  also supported.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedCommonNames;

/**
 *  Optional. All Certificates issued by the CertificateAuthority must match at
 *  least one listed ReusableConfigWrapper in the list.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_AllowedConfigList *allowedConfigList;

/**
 *  Optional. If specified, then only methods allowed in the IssuanceModes may
 *  be used to issue Certificates.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_IssuanceModes *allowedIssuanceModes;

/**
 *  Optional. If any Subject is specified here, then all Certificates issued by
 *  the CertificateAuthority must match at least one listed Subject. If a
 *  Subject has an empty field, any value will be allowed for that field.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_Subject *> *allowedLocationsAndOrganizations;

/**
 *  Optional. If a AllowedSubjectAltNames is specified here, then all
 *  Certificates issued by the CertificateAuthority must match
 *  AllowedSubjectAltNames. If no value or an empty value is specified, any
 *  value will be allowed for the SubjectAltNames field.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_AllowedSubjectAltNames *allowedSans;

/**
 *  Optional. The maximum lifetime allowed by the CertificateAuthority. Note
 *  that if the any part if the issuing chain expires before a Certificate's
 *  requested maximum_lifetime, the effective lifetime will be explicitly
 *  truncated.
 */
@property(nonatomic, strong, nullable) GTLRDuration *maximumLifetime;

/**
 *  Optional. All Certificates issued by the CertificateAuthority will use the
 *  provided configuration values, overwriting any requested configuration
 *  values.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_ReusableConfigWrapper *overwriteConfigValues;

@end


/**
 *  A CertificateConfig describes an X.509 certificate or CSR that is to be
 *  created, as an alternative to using ASN.1.
 */
@interface GTLRCertificateAuthorityService_CertificateConfig : GTLRObject

/**
 *  Optional. The public key that corresponds to this config. This is, for
 *  example, used when issuing Certificates, but not when creating a self-signed
 *  CertificateAuthority or CertificateAuthority CSR.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_PublicKey *publicKey;

/**
 *  Required. Describes how some of the technical fields in a certificate should
 *  be populated.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_ReusableConfigWrapper *reusableConfig;

/**
 *  Required. Specifies some of the values in a certificate that are related to
 *  the subject.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_SubjectConfig *subjectConfig;

@end


/**
 *  A CertificateDescription describes an X.509 certificate or CSR that has been
 *  issued, as an alternative to using ASN.1 / X.509.
 */
@interface GTLRCertificateAuthorityService_CertificateDescription : GTLRObject

/**
 *  Describes lists of issuer CA certificate URLs that appear in the "Authority
 *  Information Access" extension in the certificate.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *aiaIssuingCertificateUrls;

/**
 *  Identifies the subject_key_id of the parent certificate, per
 *  https://tools.ietf.org/html/rfc5280#section-4.2.1.1
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_KeyId *authorityKeyId;

/** The hash of the x.509 certificate. */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_CertificateFingerprint *certFingerprint;

/** Describes some of the technical fields in a certificate. */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_ReusableConfigValues *configValues;

/**
 *  Describes a list of locations to obtain CRL information, i.e. the
 *  DistributionPoint.fullName described by
 *  https://tools.ietf.org/html/rfc5280#section-4.2.1.13
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *crlDistributionPoints;

/** The public key that corresponds to an issued certificate. */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_PublicKey *publicKey;

/**
 *  Describes some of the values in a certificate that are related to the
 *  subject and lifetime.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_SubjectDescription *subjectDescription;

/**
 *  Provides a means of identifiying certificates that contain a particular
 *  public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_KeyId *subjectKeyId;

@end


/**
 *  A group of fingerprints for the x509 certificate.
 */
@interface GTLRCertificateAuthorityService_CertificateFingerprint : GTLRObject

/** The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate. */
@property(nonatomic, copy, nullable) NSString *sha256Hash;

@end


/**
 *  A CertificateRevocationList corresponds to a signed X.509 certificate
 *  Revocation List (CRL). A CRL contains the serial numbers of certificates
 *  that should no longer be trusted.
 */
@interface GTLRCertificateAuthorityService_CertificateRevocationList : GTLRObject

/** Output only. The location where 'pem_crl' can be accessed. */
@property(nonatomic, copy, nullable) NSString *accessUrl;

/**
 *  Output only. The time at which this CertificateRevocationList was created.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Optional. Labels with user-defined metadata. */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_CertificateRevocationList_Labels *labels;

/**
 *  Output only. The resource path for this CertificateRevocationList in the
 *  format `projects/ * /locations/ * /certificateAuthorities/ * /
 *  certificateRevocationLists/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The PEM-encoded X.509 CRL. */
@property(nonatomic, copy, nullable) NSString *pemCrl;

/** Output only. The revoked serial numbers that appear in pem_crl. */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_RevokedCertificate *> *revokedCertificates;

/**
 *  Output only. The CRL sequence number that appears in pem_crl.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sequenceNumber;

/**
 *  Output only. The State for this CertificateRevocationList.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateAuthorityService_CertificateRevocationList_State_Active
 *        The CertificateRevocationList is up to date. (Value: "ACTIVE")
 *    @arg @c kGTLRCertificateAuthorityService_CertificateRevocationList_State_StateUnspecified
 *        Not specified. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCertificateAuthorityService_CertificateRevocationList_State_Superseded
 *        The CertificateRevocationList is no longer current. (Value:
 *        "SUPERSEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. The time at which this CertificateRevocationList was updated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Labels with user-defined metadata.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCertificateAuthorityService_CertificateRevocationList_Labels : GTLRObject
@end


/**
 *  Request message for CertificateAuthorityService.DisableCertificateAuthority.
 */
@interface GTLRCertificateAuthorityService_DisableCertificateAuthorityRequest : GTLRObject

/**
 *  Optional. An ID to identify requests. Specify a unique request ID so that if
 *  you must retry your request, the server will know to ignore the request if
 *  it has already been completed. The server will guarantee that for at least
 *  60 minutes since the first request. For example, consider a situation where
 *  you make an initial request and t he request times out. If you make the
 *  request again with the same request ID, the server can check if original
 *  operation with the same request ID was received, and if so, will ignore the
 *  second request. This prevents clients from accidentally creating duplicate
 *  commitments. The request ID must be a valid UUID with the exception that
 *  zero UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON
 *  representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRCertificateAuthorityService_Empty : GTLRObject
@end


/**
 *  Request message for CertificateAuthorityService.EnableCertificateAuthority.
 */
@interface GTLRCertificateAuthorityService_EnableCertificateAuthorityRequest : GTLRObject

/**
 *  Optional. An ID to identify requests. Specify a unique request ID so that if
 *  you must retry your request, the server will know to ignore the request if
 *  it has already been completed. The server will guarantee that for at least
 *  60 minutes since the first request. For example, consider a situation where
 *  you make an initial request and t he request times out. If you make the
 *  request again with the same request ID, the server can check if original
 *  operation with the same request ID was received, and if so, will ignore the
 *  second request. This prevents clients from accidentally creating duplicate
 *  commitments. The request ID must be a valid UUID with the exception that
 *  zero UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRCertificateAuthorityService_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain
 *  common OIDs that could be specified as an extended key usage value.
 */
@interface GTLRCertificateAuthorityService_ExtendedKeyUsageOptions : GTLRObject

/**
 *  Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW
 *  client authentication", though regularly used for non-WWW TLS.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *clientAuth;

/**
 *  Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of
 *  downloadable executable code client authentication".
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *codeSigning;

/**
 *  Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email
 *  protection".
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *emailProtection;

/**
 *  Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP
 *  responses".
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ocspSigning;

/**
 *  Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW
 *  server authentication", though regularly used for non-WWW TLS.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *serverAuth;

/**
 *  Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the
 *  hash of an object to a time".
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timeStamping;

@end


/**
 *  Response message for
 *  CertificateAuthorityService.FetchCertificateAuthorityCsr.
 */
@interface GTLRCertificateAuthorityService_FetchCertificateAuthorityCsrResponse : GTLRObject

/** Output only. The PEM-encoded signed certificate signing request (CSR). */
@property(nonatomic, copy, nullable) NSString *pemCsr;

@end


/**
 *  IssuanceModes specifies the allowed ways in which Certificates may be
 *  requested from this CertificateAuthority.
 */
@interface GTLRCertificateAuthorityService_IssuanceModes : GTLRObject

/**
 *  Required. When true, allows callers to create Certificates by specifying a
 *  CertificateConfig.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowConfigBasedIssuance;

/**
 *  Required. When true, allows callers to create Certificates by specifying a
 *  CSR.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowCsrBasedIssuance;

@end


/**
 *  Options that affect all certificates issued by a CertificateAuthority.
 */
@interface GTLRCertificateAuthorityService_IssuingOptions : GTLRObject

/**
 *  Required. When true, includes a URL to the issuing CA certificate in the
 *  "authority information access" X.509 extension.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeCaCertUrl;

/**
 *  Required. When true, includes a URL to the CRL corresponding to certificates
 *  issued from a CertificateAuthority. CRLs will expire 7 days from their
 *  creation. However, we will rebuild daily. CRLs are also rebuilt shortly
 *  after a certificate is revoked.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeCrlAccessUrl;

@end


/**
 *  A KeyId identifies a specific public key, usually by hashing the public key.
 */
@interface GTLRCertificateAuthorityService_KeyId : GTLRObject

/**
 *  Optional. The value of this KeyId encoded in lowercase hexadecimal. This is
 *  most likely the 160 bit SHA-1 hash of the public key.
 */
@property(nonatomic, copy, nullable) NSString *keyId;

@end


/**
 *  A KeyUsage describes key usage values that may appear in an X.509
 *  certificate.
 */
@interface GTLRCertificateAuthorityService_KeyUsage : GTLRObject

/** Describes high-level ways in which a key may be used. */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_KeyUsageOptions *baseKeyUsage;

/** Detailed scenarios in which a key may be used. */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_ExtendedKeyUsageOptions *extendedKeyUsage;

/**
 *  Used to describe extended key usages that are not listed in the
 *  KeyUsage.ExtendedKeyUsageOptions message.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_ObjectId *> *unknownExtendedKeyUsages;

@end


/**
 *  KeyUsage.KeyUsageOptions corresponds to the key usage values described in
 *  https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
 */
@interface GTLRCertificateAuthorityService_KeyUsageOptions : GTLRObject

/**
 *  The key may be used to sign certificates.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *certSign;

/**
 *  The key may be used for cryptographic commitments. Note that this may also
 *  be referred to as "non-repudiation".
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *contentCommitment;

/**
 *  The key may be used sign certificate revocation lists.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *crlSign;

/**
 *  The key may be used to encipher data.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dataEncipherment;

/**
 *  The key may be used to decipher only.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *decipherOnly;

/**
 *  The key may be used for digital signatures.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *digitalSignature;

/**
 *  The key may be used to encipher only.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *encipherOnly;

/**
 *  The key may be used in a key agreement protocol.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *keyAgreement;

/**
 *  The key may be used to encipher other keys.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *keyEncipherment;

@end


/**
 *  A Cloud KMS key configuration that a CertificateAuthority will use.
 */
@interface GTLRCertificateAuthorityService_KeyVersionSpec : GTLRObject

/**
 *  Required. The algorithm to use for creating a managed Cloud KMS key for a
 *  for a simplified experience. All managed keys will be have their
 *  ProtectionLevel as `HSM`.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_EcP256Sha256
 *        maps to CryptoKeyVersionAlgorithm.EC_SIGN_P256_SHA256 (Value:
 *        "EC_P256_SHA256")
 *    @arg @c kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_EcP384Sha384
 *        maps to CryptoKeyVersionAlgorithm.EC_SIGN_P384_SHA384 (Value:
 *        "EC_P384_SHA384")
 *    @arg @c kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_RsaPkcs12048Sha256
 *        maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PKCS1_2048_SHA256 (Value:
 *        "RSA_PKCS1_2048_SHA256")
 *    @arg @c kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_RsaPkcs13072Sha256
 *        maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PKCS1_3072_SHA256 (Value:
 *        "RSA_PKCS1_3072_SHA256")
 *    @arg @c kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_RsaPkcs14096Sha256
 *        maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PKCS1_4096_SHA256 (Value:
 *        "RSA_PKCS1_4096_SHA256")
 *    @arg @c kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_RsaPss2048Sha256
 *        maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PSS_2048_SHA256 (Value:
 *        "RSA_PSS_2048_SHA256")
 *    @arg @c kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_RsaPss3072Sha256
 *        maps to CryptoKeyVersionAlgorithm. RSA_SIGN_PSS_3072_SHA256 (Value:
 *        "RSA_PSS_3072_SHA256")
 *    @arg @c kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_RsaPss4096Sha256
 *        maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PSS_4096_SHA256 (Value:
 *        "RSA_PSS_4096_SHA256")
 *    @arg @c kGTLRCertificateAuthorityService_KeyVersionSpec_Algorithm_SignHashAlgorithmUnspecified
 *        Not specified. (Value: "SIGN_HASH_ALGORITHM_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *algorithm;

/**
 *  Required. The resource name for an existing Cloud KMS CryptoKeyVersion in
 *  the format `projects/ * /locations/ * /keyRings/ * /cryptoKeys/ *
 *  /cryptoKeyVersions/ *`. This option enables full flexibility in the key's
 *  capabilities and properties.
 */
@property(nonatomic, copy, nullable) NSString *cloudKmsKeyVersion;

@end


/**
 *  Response message for CertificateAuthorityService.ListCertificateAuthorities.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "certificateAuthorities" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRCertificateAuthorityService_ListCertificateAuthoritiesResponse : GTLRCollectionObject

/**
 *  The list of CertificateAuthorities.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_CertificateAuthority *> *certificateAuthorities;

/**
 *  A token to retrieve next page of results. Pass this value in
 *  ListCertificateAuthoritiesRequest.next_page_token to retrieve the next page
 *  of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** A list of locations (e.g. "us-west1") that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for
 *  CertificateAuthorityService.ListCertificateRevocationLists.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "certificateRevocationLists" property. If returned as the result
 *        of a query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRCertificateAuthorityService_ListCertificateRevocationListsResponse : GTLRCollectionObject

/**
 *  The list of CertificateRevocationLists.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_CertificateRevocationList *> *certificateRevocationLists;

/**
 *  A token to retrieve next page of results. Pass this value in
 *  ListCertificateRevocationListsRequest.next_page_token to retrieve the next
 *  page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** A list of locations (e.g. "us-west1") that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for CertificateAuthorityService.ListCertificates.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "certificates" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCertificateAuthorityService_ListCertificatesResponse : GTLRCollectionObject

/**
 *  The list of Certificates.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_Certificate *> *certificates;

/**
 *  A token to retrieve next page of results. Pass this value in
 *  ListCertificatesRequest.next_page_token to retrieve the next page of
 *  results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** A list of locations (e.g. "us-west1") that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCertificateAuthorityService_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCertificateAuthorityService_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_Operation *> *operations;

@end


/**
 *  Response message for CertificateAuthorityService.ListReusableConfigs.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "reusableConfigs" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRCertificateAuthorityService_ListReusableConfigsResponse : GTLRCollectionObject

/**
 *  A token to retrieve next page of results. Pass this value in
 *  ListReusableConfigsRequest.next_page_token to retrieve the next page of
 *  results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of ReusableConfigs.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_ReusableConfig *> *reusableConfigs;

/** A list of locations (e.g. "us-west1") that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRCertificateAuthorityService_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCertificateAuthorityService_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCertificateAuthorityService_Location_Metadata : GTLRObject
@end


/**
 *  An ObjectId specifies an object identifier (OID). These provide context and
 *  describe types in ASN.1 messages.
 */
@interface GTLRCertificateAuthorityService_ObjectId : GTLRObject

/**
 *  Required. The parts of an OID path. The most significant parts of the path
 *  come first.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *objectIdPath;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCertificateAuthorityService_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCertificateAuthorityService_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCertificateAuthorityService_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRCertificateAuthorityService_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members` to a single `role`.
 *  Members can be user accounts, service accounts, Google groups, and domains
 *  (such as G Suite). A `role` is a named list of permissions; each `role` can
 *  be an IAM predefined role or a user-created custom role. For some types of
 *  Google Cloud resources, a `binding` can also specify a `condition`, which is
 *  a logical expression that allows access to a resource only if the expression
 *  evaluates to `true`. A condition can add constraints based on attributes of
 *  the request, the resource, or both. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= -
 *  version: 3 For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRCertificateAuthorityService_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members` to a `role`. Optionally, may specify a
 *  `condition` that determines how and when the `bindings` are applied. Each of
 *  the `bindings` must contain at least one member.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  A PublicKey describes a public key.
 */
@interface GTLRCertificateAuthorityService_PublicKey : GTLRObject

/**
 *  Required. A public key. When this is specified in a request, the padding and
 *  encoding can be any of the options described by the respective 'KeyType'
 *  value. When this is generated by the service, it will always be an RFC 5280
 *  [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1)
 *  structure containing an algorithm identifier and a key.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  Required. The type of public key.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateAuthorityService_PublicKey_Type_KeyTypeUnspecified
 *        Default unspecified value. (Value: "KEY_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCertificateAuthorityService_PublicKey_Type_PemEcKey A
 *        PEM-encoded compressed NIST P-256/secp256r1/prime256v1 or P-384 key,
 *        or an RFC 5280
 *        [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1)
 *        structure containing the former. (Value: "PEM_EC_KEY")
 *    @arg @c kGTLRCertificateAuthorityService_PublicKey_Type_PemRsaKey A
 *        PEM-encoded PKCS#1/RFC 3447 RSAPrivateKey structure, or an RFC 5280
 *        [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1)
 *        structure containing the former. (Value: "PEM_RSA_KEY")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Request message for CertificateAuthorityService.RestoreCertificateAuthority.
 */
@interface GTLRCertificateAuthorityService_RestoreCertificateAuthorityRequest : GTLRObject

/**
 *  Optional. An ID to identify requests. Specify a unique request ID so that if
 *  you must retry your request, the server will know to ignore the request if
 *  it has already been completed. The server will guarantee that for at least
 *  60 minutes since the first request. For example, consider a situation where
 *  you make an initial request and t he request times out. If you make the
 *  request again with the same request ID, the server can check if original
 *  operation with the same request ID was received, and if so, will ignore the
 *  second request. This prevents clients from accidentally creating duplicate
 *  commitments. The request ID must be a valid UUID with the exception that
 *  zero UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  A ReusableConfig refers to a managed ReusableConfigValues. Those, in turn,
 *  are used to describe certain fields of an X.509 certificate, such as the key
 *  usage fields, fields specific to CA certificates, certificate policy
 *  extensions and custom extensions.
 */
@interface GTLRCertificateAuthorityService_ReusableConfig : GTLRObject

/** Output only. The time at which this ReusableConfig was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. A human-readable description of scenarios these
 *  ReusableConfigValues may be compatible with.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Optional. Labels with user-defined metadata. */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_ReusableConfig_Labels *labels;

/**
 *  Output only. The resource path for this ReusableConfig in the format
 *  `projects/ * /locations/ * /reusableConfigs/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The time at which this ReusableConfig was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** Required. The config values. */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_ReusableConfigValues *values;

@end


/**
 *  Optional. Labels with user-defined metadata.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCertificateAuthorityService_ReusableConfig_Labels : GTLRObject
@end


/**
 *  A ReusableConfigValues is used to describe certain fields of an X.509
 *  certificate, such as the key usage fields, fields specific to CA
 *  certificates, certificate policy extensions and custom extensions.
 */
@interface GTLRCertificateAuthorityService_ReusableConfigValues : GTLRObject

/** Optional. Describes custom X.509 extensions. */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_X509Extension *> *additionalExtensions;

/**
 *  Optional. Describes Online Certificate Status Protocol (OCSP) endpoint
 *  addresses that appear in the "Authority Information Access" extension in the
 *  certificate.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *aiaOcspServers;

/**
 *  Optional. Describes options in this ReusableConfigValues that are relevant
 *  in a CA certificate.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_CaOptions *caOptions;

/**
 *  Optional. Indicates the intended use for keys that correspond to a
 *  certificate.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_KeyUsage *keyUsage;

/**
 *  Optional. Describes the X.509 certificate policy object identifiers, per
 *  https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_ObjectId *> *policyIds;

@end


/**
 *  A ReusableConfigWrapper describes values that may assist in creating an
 *  X.509 certificate, or a reference to a pre-defined set of values.
 */
@interface GTLRCertificateAuthorityService_ReusableConfigWrapper : GTLRObject

/**
 *  Required. A resource path to a ReusableConfig in the format `projects/ *
 *  /locations/ * /reusableConfigs/ *`.
 */
@property(nonatomic, copy, nullable) NSString *reusableConfig;

/** Required. A user-specified inline ReusableConfigValues. */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_ReusableConfigValues *reusableConfigValues;

@end


/**
 *  Describes fields that are relavent to the revocation of a Certificate.
 */
@interface GTLRCertificateAuthorityService_RevocationDetails : GTLRObject

/**
 *  Indicates why a Certificate was revoked.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_AffiliationChanged
 *        The subject or other attributes in this Certificate have changed.
 *        (Value: "AFFILIATION_CHANGED")
 *    @arg @c kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_AttributeAuthorityCompromise
 *        The authority which determines appropriate attributes for a
 *        Certificate may have been compromised. (Value:
 *        "ATTRIBUTE_AUTHORITY_COMPROMISE")
 *    @arg @c kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_CertificateAuthorityCompromise
 *        The key material for a certificate authority in the issuing path may
 *        have leaked. (Value: "CERTIFICATE_AUTHORITY_COMPROMISE")
 *    @arg @c kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_CertificateHold
 *        This Certificate should not be considered valid, it is expected that
 *        it may become valid in the future. (Value: "CERTIFICATE_HOLD")
 *    @arg @c kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_CessationOfOperation
 *        This Certificate or entities in the issuing path have ceased to
 *        operate. (Value: "CESSATION_OF_OPERATION")
 *    @arg @c kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_KeyCompromise
 *        Key material for this Certificate may have leaked. (Value:
 *        "KEY_COMPROMISE")
 *    @arg @c kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_PrivilegeWithdrawn
 *        This Certificate no longer has permission to assert the listed
 *        attributes. (Value: "PRIVILEGE_WITHDRAWN")
 *    @arg @c kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_RevocationReasonUnspecified
 *        Default unspecified value. This value does indicate that a Certificate
 *        has been revoked, but that a reason has not been recorded. (Value:
 *        "REVOCATION_REASON_UNSPECIFIED")
 *    @arg @c kGTLRCertificateAuthorityService_RevocationDetails_RevocationState_Superseded
 *        This Certificate has been superseded. (Value: "SUPERSEDED")
 */
@property(nonatomic, copy, nullable) NSString *revocationState;

/** The time at which this Certificate was revoked. */
@property(nonatomic, strong, nullable) GTLRDateTime *revocationTime;

@end


/**
 *  Request message for CertificateAuthorityService.RevokeCertificate.
 */
@interface GTLRCertificateAuthorityService_RevokeCertificateRequest : GTLRObject

/**
 *  Required. The RevocationReason for revoking this certificate.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_AffiliationChanged
 *        The subject or other attributes in this Certificate have changed.
 *        (Value: "AFFILIATION_CHANGED")
 *    @arg @c kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_AttributeAuthorityCompromise
 *        The authority which determines appropriate attributes for a
 *        Certificate may have been compromised. (Value:
 *        "ATTRIBUTE_AUTHORITY_COMPROMISE")
 *    @arg @c kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_CertificateAuthorityCompromise
 *        The key material for a certificate authority in the issuing path may
 *        have leaked. (Value: "CERTIFICATE_AUTHORITY_COMPROMISE")
 *    @arg @c kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_CertificateHold
 *        This Certificate should not be considered valid, it is expected that
 *        it may become valid in the future. (Value: "CERTIFICATE_HOLD")
 *    @arg @c kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_CessationOfOperation
 *        This Certificate or entities in the issuing path have ceased to
 *        operate. (Value: "CESSATION_OF_OPERATION")
 *    @arg @c kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_KeyCompromise
 *        Key material for this Certificate may have leaked. (Value:
 *        "KEY_COMPROMISE")
 *    @arg @c kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_PrivilegeWithdrawn
 *        This Certificate no longer has permission to assert the listed
 *        attributes. (Value: "PRIVILEGE_WITHDRAWN")
 *    @arg @c kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_RevocationReasonUnspecified
 *        Default unspecified value. This value does indicate that a Certificate
 *        has been revoked, but that a reason has not been recorded. (Value:
 *        "REVOCATION_REASON_UNSPECIFIED")
 *    @arg @c kGTLRCertificateAuthorityService_RevokeCertificateRequest_Reason_Superseded
 *        This Certificate has been superseded. (Value: "SUPERSEDED")
 */
@property(nonatomic, copy, nullable) NSString *reason;

/**
 *  Optional. An ID to identify requests. Specify a unique request ID so that if
 *  you must retry your request, the server will know to ignore the request if
 *  it has already been completed. The server will guarantee that for at least
 *  60 minutes since the first request. For example, consider a situation where
 *  you make an initial request and t he request times out. If you make the
 *  request again with the same request ID, the server can check if original
 *  operation with the same request ID was received, and if so, will ignore the
 *  second request. This prevents clients from accidentally creating duplicate
 *  commitments. The request ID must be a valid UUID with the exception that
 *  zero UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Describes a revoked Certificate.
 */
@interface GTLRCertificateAuthorityService_RevokedCertificate : GTLRObject

/**
 *  The resource path for the Certificate in the format `projects/ * /locations/
 *  * /certificateAuthorities/ * /certificates/ *`.
 */
@property(nonatomic, copy, nullable) NSString *certificate;

/** The serial number of the Certificate. */
@property(nonatomic, copy, nullable) NSString *hexSerialNumber;

/**
 *  The reason the Certificate was revoked.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_AffiliationChanged
 *        The subject or other attributes in this Certificate have changed.
 *        (Value: "AFFILIATION_CHANGED")
 *    @arg @c kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_AttributeAuthorityCompromise
 *        The authority which determines appropriate attributes for a
 *        Certificate may have been compromised. (Value:
 *        "ATTRIBUTE_AUTHORITY_COMPROMISE")
 *    @arg @c kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_CertificateAuthorityCompromise
 *        The key material for a certificate authority in the issuing path may
 *        have leaked. (Value: "CERTIFICATE_AUTHORITY_COMPROMISE")
 *    @arg @c kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_CertificateHold
 *        This Certificate should not be considered valid, it is expected that
 *        it may become valid in the future. (Value: "CERTIFICATE_HOLD")
 *    @arg @c kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_CessationOfOperation
 *        This Certificate or entities in the issuing path have ceased to
 *        operate. (Value: "CESSATION_OF_OPERATION")
 *    @arg @c kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_KeyCompromise
 *        Key material for this Certificate may have leaked. (Value:
 *        "KEY_COMPROMISE")
 *    @arg @c kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_PrivilegeWithdrawn
 *        This Certificate no longer has permission to assert the listed
 *        attributes. (Value: "PRIVILEGE_WITHDRAWN")
 *    @arg @c kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_RevocationReasonUnspecified
 *        Default unspecified value. This value does indicate that a Certificate
 *        has been revoked, but that a reason has not been recorded. (Value:
 *        "REVOCATION_REASON_UNSPECIFIED")
 *    @arg @c kGTLRCertificateAuthorityService_RevokedCertificate_RevocationReason_Superseded
 *        This Certificate has been superseded. (Value: "SUPERSEDED")
 */
@property(nonatomic, copy, nullable) NSString *revocationReason;

@end


/**
 *  Request message for
 *  CertificateAuthorityService.ScheduleDeleteCertificateAuthority.
 */
@interface GTLRCertificateAuthorityService_ScheduleDeleteCertificateAuthorityRequest : GTLRObject

/**
 *  Optional. An ID to identify requests. Specify a unique request ID so that if
 *  you must retry your request, the server will know to ignore the request if
 *  it has already been completed. The server will guarantee that for at least
 *  60 minutes since the first request. For example, consider a situation where
 *  you make an initial request and t he request times out. If you make the
 *  request again with the same request ID, the server can check if original
 *  operation with the same request ID was received, and if so, will ignore the
 *  second request. This prevents clients from accidentally creating duplicate
 *  commitments. The request ID must be a valid UUID with the exception that
 *  zero UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRCertificateAuthorityService_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Cloud Platform services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCertificateAuthorityService_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCertificateAuthorityService_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCertificateAuthorityService_Status_Details_Item : GTLRObject
@end


/**
 *  Subject describes parts of a distinguished name that, in turn, describes the
 *  subject of the certificate.
 */
@interface GTLRCertificateAuthorityService_Subject : GTLRObject

/** The country code of the subject. */
@property(nonatomic, copy, nullable) NSString *countryCode;

/** The locality or city of the subject. */
@property(nonatomic, copy, nullable) NSString *locality;

/** The organization of the subject. */
@property(nonatomic, copy, nullable) NSString *organization;

/** The organizational_unit of the subject. */
@property(nonatomic, copy, nullable) NSString *organizationalUnit;

/** The postal code of the subject. */
@property(nonatomic, copy, nullable) NSString *postalCode;

/** The province, territory, or regional state of the subject. */
@property(nonatomic, copy, nullable) NSString *province;

/** The street address of the subject. */
@property(nonatomic, copy, nullable) NSString *streetAddress;

@end


/**
 *  SubjectAltNames corresponds to a more modern way of listing what the
 *  asserted identity is in a certificate (i.e., compared to the "common name"
 *  in the distinguished name).
 */
@interface GTLRCertificateAuthorityService_SubjectAltNames : GTLRObject

/** Contains additional subject alternative name values. */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateAuthorityService_X509Extension *> *customSans;

/** Contains only valid, fully-qualified host names. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dnsNames;

/** Contains only valid RFC 2822 E-mail addresses. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *emailAddresses;

/** Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ipAddresses;

/** Contains only valid RFC 3986 URIs. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *uris;

@end


/**
 *  These values are used to create the distinguished name and subject
 *  alternative name fields in an X.509 certificate.
 */
@interface GTLRCertificateAuthorityService_SubjectConfig : GTLRObject

/** Optional. The "common name" of the distinguished name. */
@property(nonatomic, copy, nullable) NSString *commonName;

/**
 *  Required. Contains distinguished name fields such as the location and
 *  organization.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_Subject *subject;

/** Optional. The subject alternative name fields. */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_SubjectAltNames *subjectAltName;

@end


/**
 *  These values describe fields in an issued X.509 certificate such as the
 *  distinguished name, subject alternative names, serial number, and lifetime.
 */
@interface GTLRCertificateAuthorityService_SubjectDescription : GTLRObject

/** The "common name" of the distinguished name. */
@property(nonatomic, copy, nullable) NSString *commonName;

/** The serial number encoded in lowercase hexadecimal. */
@property(nonatomic, copy, nullable) NSString *hexSerialNumber;

/**
 *  For convenience, the actual lifetime of an issued certificate. Corresponds
 *  to 'not_after_time' - 'not_before_time'.
 */
@property(nonatomic, strong, nullable) GTLRDuration *lifetime;

/** The time at which the certificate expires. */
@property(nonatomic, strong, nullable) GTLRDateTime *notAfterTime;

/** The time at which the certificate becomes valid. */
@property(nonatomic, strong, nullable) GTLRDateTime *notBeforeTime;

/**
 *  Contains distinguished name fields such as the location and organization.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_Subject *subject;

/** The subject alternative name fields. */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_SubjectAltNames *subjectAltName;

@end


/**
 *  Describes a subordinate CA's issuers. This is either a resource path to a
 *  known issuing CertificateAuthority, or a PEM issuer certificate chain.
 */
@interface GTLRCertificateAuthorityService_SubordinateConfig : GTLRObject

/**
 *  Required. This can refer to a CertificateAuthority in the same project that
 *  was used to create a subordinate CertificateAuthority. This field is used
 *  for information and usability purposes only. The resource name is in the
 *  format `projects/ * /locations/ * /certificateAuthorities/ *`.
 */
@property(nonatomic, copy, nullable) NSString *certificateAuthority;

/**
 *  Required. Contains the PEM certificate chain for the issuers of this
 *  CertificateAuthority, but not pem certificate for this CA itself.
 */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_SubordinateConfigChain *pemIssuerChain;

@end


/**
 *  This message describes a subordinate CA's issuer certificate chain. This
 *  wrapper exists for compatibility reasons.
 */
@interface GTLRCertificateAuthorityService_SubordinateConfigChain : GTLRObject

/** Required. Expected to be in leaf-to-root order according to RFC 5246. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *pemCertificates;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRCertificateAuthorityService_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as '*' or 'storage.*') are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRCertificateAuthorityService_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  An X509Extension specifies an X.509 extension, which may be used in
 *  different parts of X.509 objects like certificates, CSRs, and CRLs.
 */
@interface GTLRCertificateAuthorityService_X509Extension : GTLRObject

/**
 *  Required. Indicates whether or not this extension is critical (i.e., if the
 *  client does not know how to handle this extension, the client should
 *  consider this to be an error).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *critical;

/** Required. The OID for this X.509 extension. */
@property(nonatomic, strong, nullable) GTLRCertificateAuthorityService_ObjectId *objectId;

/**
 *  Required. The value of this X.509 extension.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *value;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
