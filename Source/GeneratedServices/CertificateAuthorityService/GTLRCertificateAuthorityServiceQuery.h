// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Certificate Authority API (privateca/v1beta1)
// Description:
//   The Certificate Authority Service API is a highly-available, scalable
//   service that enables you to simplify and automate the management of private
//   certificate authorities (CAs) while staying in control of your private
//   keys."
// Documentation:
//   https://cloud.google.com/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCertificateAuthorityService_ActivateCertificateAuthorityRequest;
@class GTLRCertificateAuthorityService_CancelOperationRequest;
@class GTLRCertificateAuthorityService_Certificate;
@class GTLRCertificateAuthorityService_CertificateAuthority;
@class GTLRCertificateAuthorityService_CertificateRevocationList;
@class GTLRCertificateAuthorityService_DisableCertificateAuthorityRequest;
@class GTLRCertificateAuthorityService_EnableCertificateAuthorityRequest;
@class GTLRCertificateAuthorityService_RestoreCertificateAuthorityRequest;
@class GTLRCertificateAuthorityService_RevokeCertificateRequest;
@class GTLRCertificateAuthorityService_ScheduleDeleteCertificateAuthorityRequest;
@class GTLRCertificateAuthorityService_SetIamPolicyRequest;
@class GTLRCertificateAuthorityService_TestIamPermissionsRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Certificate Authority Service query classes.
 */
@interface GTLRCertificateAuthorityServiceQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Activate a CertificateAuthority that is in state PENDING_ACTIVATION and is
 *  of type SUBORDINATE. After the parent Certificate Authority signs a
 *  certificate signing request from FetchCertificateAuthorityCsr, this method
 *  can complete the activation process.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.activate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesActivate : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesActivateWithObject:name:]

/**
 *  Required. The resource name for this CertificateAuthority in the format
 *  `projects/ * /locations/ * /certificateAuthorities/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Operation.
 *
 *  Activate a CertificateAuthority that is in state PENDING_ACTIVATION and is
 *  of type SUBORDINATE. After the parent Certificate Authority signs a
 *  certificate signing request from FetchCertificateAuthorityCsr, this method
 *  can complete the activation process.
 *
 *  @param object The @c
 *    GTLRCertificateAuthorityService_ActivateCertificateAuthorityRequest to
 *    include in the query.
 *  @param name Required. The resource name for this CertificateAuthority in the
 *    format `projects/ * /locations/ * /certificateAuthorities/ *`.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesActivate
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_ActivateCertificateAuthorityRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Returns a CertificateRevocationList.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.certificateRevocationLists.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificateRevocationListsGet : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesCertificateRevocationListsGetWithname:]

/** Required. The name of the CertificateRevocationList to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_CertificateRevocationList.
 *
 *  Returns a CertificateRevocationList.
 *
 *  @param name Required. The name of the CertificateRevocationList to get.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificateRevocationListsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.certificateRevocationLists.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificateRevocationListsGetIamPolicy : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesCertificateRevocationListsGetIamPolicyWithresource:]

/**
 *  Optional. The policy format version to be returned. Valid values are 0, 1,
 *  and 3. Requests specifying an invalid value will be rejected. Requests for
 *  policies with any conditional bindings must specify version 3. Policies
 *  without any conditional bindings may specify any valid value or leave the
 *  field unset. To learn which resources support conditions in their IAM
 *  policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificateRevocationListsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists CertificateRevocationLists.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.certificateRevocationLists.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificateRevocationListsList : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesCertificateRevocationListsListWithparent:]

/** Optional. Only include resources that match the filter in the response. */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Specify how the results should be sorted. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. Limit on the number of CertificateRevocationLists to include in
 *  the response. Further CertificateRevocationLists can subsequently be
 *  obtained by including the
 *  ListCertificateRevocationListsResponse.next_page_token in a subsequent
 *  request. If unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. Pagination token, returned earlier via
 *  ListCertificateRevocationListsResponse.next_page_token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name of the location associated with the
 *  CertificateRevocationLists, in the format `projects/ * /locations/ *
 *  /certificateauthorities/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRCertificateAuthorityService_ListCertificateRevocationListsResponse.
 *
 *  Lists CertificateRevocationLists.
 *
 *  @param parent Required. The resource name of the location associated with
 *    the CertificateRevocationLists, in the format `projects/ * /locations/ *
 *    /certificateauthorities/ *`.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificateRevocationListsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update a CertificateRevocationList.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.certificateRevocationLists.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificateRevocationListsPatch : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesCertificateRevocationListsPatchWithObject:name:]

/**
 *  Output only. The resource path for this CertificateRevocationList in the
 *  format `projects/ * /locations/ * /certificateAuthorities/ * /
 *  certificateRevocationLists/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An ID to identify requests. Specify a unique request ID so that if
 *  you must retry your request, the server will know to ignore the request if
 *  it has already been completed. The server will guarantee that for at least
 *  60 minutes since the first request. For example, consider a situation where
 *  you make an initial request and t he request times out. If you make the
 *  request again with the same request ID, the server can check if original
 *  operation with the same request ID was received, and if so, will ignore the
 *  second request. This prevents clients from accidentally creating duplicate
 *  commitments. The request ID must be a valid UUID with the exception that
 *  zero UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. A list of fields to be updated in this request.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Operation.
 *
 *  Update a CertificateRevocationList.
 *
 *  @param object The @c
 *    GTLRCertificateAuthorityService_CertificateRevocationList to include in
 *    the query.
 *  @param name Output only. The resource path for this
 *    CertificateRevocationList in the format `projects/ * /locations/ *
 *    /certificateAuthorities/ * / certificateRevocationLists/ *`.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificateRevocationListsPatch
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_CertificateRevocationList *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.certificateRevocationLists.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificateRevocationListsSetIamPolicy : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesCertificateRevocationListsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRCertificateAuthorityService_SetIamPolicyRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificateRevocationListsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.certificateRevocationLists.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificateRevocationListsTestIamPermissions : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesCertificateRevocationListsTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c
 *    GTLRCertificateAuthorityService_TestIamPermissionsRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificateRevocationListsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Create a new Certificate in a given Project, Location from a particular
 *  CertificateAuthority.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.certificates.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificatesCreate : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesCertificatesCreateWithObject:parent:]

/**
 *  Optional. It must be unique within a location and match the regular
 *  expression `[a-zA-Z0-9_-]{1,63}`. This field is required when using a
 *  CertificateAuthority in the Enterprise CertificateAuthority.Tier, but is
 *  optional and its value is ignored otherwise.
 */
@property(nonatomic, copy, nullable) NSString *certificateId;

/**
 *  Required. The resource name of the location and CertificateAuthority
 *  associated with the Certificate, in the format `projects/ * /locations/ *
 *  /certificateAuthorities/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. An ID to identify requests. Specify a unique request ID so that if
 *  you must retry your request, the server will know to ignore the request if
 *  it has already been completed. The server will guarantee that for at least
 *  60 minutes since the first request. For example, consider a situation where
 *  you make an initial request and t he request times out. If you make the
 *  request again with the same request ID, the server can check if original
 *  operation with the same request ID was received, and if so, will ignore the
 *  second request. This prevents clients from accidentally creating duplicate
 *  commitments. The request ID must be a valid UUID with the exception that
 *  zero UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Certificate.
 *
 *  Create a new Certificate in a given Project, Location from a particular
 *  CertificateAuthority.
 *
 *  @param object The @c GTLRCertificateAuthorityService_Certificate to include
 *    in the query.
 *  @param parent Required. The resource name of the location and
 *    CertificateAuthority associated with the Certificate, in the format
 *    `projects/ * /locations/ * /certificateAuthorities/ *`.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificatesCreate
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_Certificate *)object
                         parent:(NSString *)parent;

@end

/**
 *  Returns a Certificate.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.certificates.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificatesGet : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesCertificatesGetWithname:]

/** Required. The name of the Certificate to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Certificate.
 *
 *  Returns a Certificate.
 *
 *  @param name Required. The name of the Certificate to get.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificatesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Certificates.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.certificates.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificatesList : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesCertificatesListWithparent:]

/**
 *  Optional. Only include resources that match the filter in the response. For
 *  details on supported filters and syntax, see [Certificates Filtering
 *  documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#filtering_support).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Specify how the results should be sorted. For details on supported
 *  fields and syntax, see [Certificates Sorting
 *  documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#sorting_support).
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. Limit on the number of Certificates to include in the response.
 *  Further Certificates can subsequently be obtained by including the
 *  ListCertificatesResponse.next_page_token in a subsequent request. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. Pagination token, returned earlier via
 *  ListCertificatesResponse.next_page_token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name of the location associated with the
 *  Certificates, in the format `projects/ * /locations/ *
 *  /certificateauthorities/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_ListCertificatesResponse.
 *
 *  Lists Certificates.
 *
 *  @param parent Required. The resource name of the location associated with
 *    the Certificates, in the format `projects/ * /locations/ *
 *    /certificateauthorities/ *`.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificatesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update a Certificate. Currently, the only field you can update is the labels
 *  field.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.certificates.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificatesPatch : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesCertificatesPatchWithObject:name:]

/**
 *  Output only. The resource path for this Certificate in the format `projects/
 *  * /locations/ * /certificateAuthorities/ * /certificates/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An ID to identify requests. Specify a unique request ID so that if
 *  you must retry your request, the server will know to ignore the request if
 *  it has already been completed. The server will guarantee that for at least
 *  60 minutes since the first request. For example, consider a situation where
 *  you make an initial request and t he request times out. If you make the
 *  request again with the same request ID, the server can check if original
 *  operation with the same request ID was received, and if so, will ignore the
 *  second request. This prevents clients from accidentally creating duplicate
 *  commitments. The request ID must be a valid UUID with the exception that
 *  zero UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. A list of fields to be updated in this request.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Certificate.
 *
 *  Update a Certificate. Currently, the only field you can update is the labels
 *  field.
 *
 *  @param object The @c GTLRCertificateAuthorityService_Certificate to include
 *    in the query.
 *  @param name Output only. The resource path for this Certificate in the
 *    format `projects/ * /locations/ * /certificateAuthorities/ *
 *    /certificates/ *`.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificatesPatch
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_Certificate *)object
                           name:(NSString *)name;

@end

/**
 *  Revoke a Certificate.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.certificates.revoke
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificatesRevoke : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesCertificatesRevokeWithObject:name:]

/**
 *  Required. The resource name for this Certificate in the format `projects/ *
 *  /locations/ * /certificateAuthorities/ * /certificates/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Certificate.
 *
 *  Revoke a Certificate.
 *
 *  @param object The @c
 *    GTLRCertificateAuthorityService_RevokeCertificateRequest to include in the
 *    query.
 *  @param name Required. The resource name for this Certificate in the format
 *    `projects/ * /locations/ * /certificateAuthorities/ * /certificates/ *`.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCertificatesRevoke
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_RevokeCertificateRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Create a new CertificateAuthority in a given Project and Location.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCreate : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesCreateWithObject:parent:]

/**
 *  Required. It must be unique within a location and match the regular
 *  expression `[a-zA-Z0-9_-]{1,63}`
 */
@property(nonatomic, copy, nullable) NSString *certificateAuthorityId;

/**
 *  Required. The resource name of the location associated with the
 *  CertificateAuthorities, in the format `projects/ * /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. An ID to identify requests. Specify a unique request ID so that if
 *  you must retry your request, the server will know to ignore the request if
 *  it has already been completed. The server will guarantee that for at least
 *  60 minutes since the first request. For example, consider a situation where
 *  you make an initial request and t he request times out. If you make the
 *  request again with the same request ID, the server can check if original
 *  operation with the same request ID was received, and if so, will ignore the
 *  second request. This prevents clients from accidentally creating duplicate
 *  commitments. The request ID must be a valid UUID with the exception that
 *  zero UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Operation.
 *
 *  Create a new CertificateAuthority in a given Project and Location.
 *
 *  @param object The @c GTLRCertificateAuthorityService_CertificateAuthority to
 *    include in the query.
 *  @param parent Required. The resource name of the location associated with
 *    the CertificateAuthorities, in the format `projects/ * /locations/ *`.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesCreate
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_CertificateAuthority *)object
                         parent:(NSString *)parent;

@end

/**
 *  Disable a CertificateAuthority.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.disable
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesDisable : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesDisableWithObject:name:]

/**
 *  Required. The resource name for this CertificateAuthority in the format
 *  `projects/ * /locations/ * /certificateAuthorities/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Operation.
 *
 *  Disable a CertificateAuthority.
 *
 *  @param object The @c
 *    GTLRCertificateAuthorityService_DisableCertificateAuthorityRequest to
 *    include in the query.
 *  @param name Required. The resource name for this CertificateAuthority in the
 *    format `projects/ * /locations/ * /certificateAuthorities/ *`.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesDisable
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_DisableCertificateAuthorityRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Enable a CertificateAuthority.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.enable
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesEnable : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesEnableWithObject:name:]

/**
 *  Required. The resource name for this CertificateAuthority in the format
 *  `projects/ * /locations/ * /certificateAuthorities/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Operation.
 *
 *  Enable a CertificateAuthority.
 *
 *  @param object The @c
 *    GTLRCertificateAuthorityService_EnableCertificateAuthorityRequest to
 *    include in the query.
 *  @param name Required. The resource name for this CertificateAuthority in the
 *    format `projects/ * /locations/ * /certificateAuthorities/ *`.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesEnable
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_EnableCertificateAuthorityRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Fetch a certificate signing request (CSR) from a CertificateAuthority that
 *  is in state PENDING_ACTIVATION and is of type SUBORDINATE. The CSR must then
 *  be signed by the desired parent Certificate Authority, which could be
 *  another CertificateAuthority resource, or could be an on-prem certificate
 *  authority. See also ActivateCertificateAuthority.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.fetch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesFetch : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesFetchWithname:]

/**
 *  Required. The resource name for this CertificateAuthority in the format
 *  `projects/ * /locations/ * /certificateAuthorities/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRCertificateAuthorityService_FetchCertificateAuthorityCsrResponse.
 *
 *  Fetch a certificate signing request (CSR) from a CertificateAuthority that
 *  is in state PENDING_ACTIVATION and is of type SUBORDINATE. The CSR must then
 *  be signed by the desired parent Certificate Authority, which could be
 *  another CertificateAuthority resource, or could be an on-prem certificate
 *  authority. See also ActivateCertificateAuthority.
 *
 *  @param name Required. The resource name for this CertificateAuthority in the
 *    format `projects/ * /locations/ * /certificateAuthorities/ *`.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesFetch
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns a CertificateAuthority.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesGet : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesGetWithname:]

/** Required. The name of the CertificateAuthority to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_CertificateAuthority.
 *
 *  Returns a CertificateAuthority.
 *
 *  @param name Required. The name of the CertificateAuthority to get.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesGetIamPolicy : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesGetIamPolicyWithresource:]

/**
 *  Optional. The policy format version to be returned. Valid values are 0, 1,
 *  and 3. Requests specifying an invalid value will be rejected. Requests for
 *  policies with any conditional bindings must specify version 3. Policies
 *  without any conditional bindings may specify any valid value or leave the
 *  field unset. To learn which resources support conditions in their IAM
 *  policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists CertificateAuthorities.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesList : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesListWithparent:]

/** Optional. Only include resources that match the filter in the response. */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Specify how the results should be sorted. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. Limit on the number of CertificateAuthorities to include in the
 *  response. Further CertificateAuthorities can subsequently be obtained by
 *  including the ListCertificateAuthoritiesResponse.next_page_token in a
 *  subsequent request. If unspecified, the server will pick an appropriate
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. Pagination token, returned earlier via
 *  ListCertificateAuthoritiesResponse.next_page_token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name of the location associated with the
 *  CertificateAuthorities, in the format `projects/ * /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRCertificateAuthorityService_ListCertificateAuthoritiesResponse.
 *
 *  Lists CertificateAuthorities.
 *
 *  @param parent Required. The resource name of the location associated with
 *    the CertificateAuthorities, in the format `projects/ * /locations/ *`.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update a CertificateAuthority.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesPatch : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesPatchWithObject:name:]

/**
 *  Output only. The resource name for this CertificateAuthority in the format
 *  `projects/ * /locations/ * /certificateAuthorities/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An ID to identify requests. Specify a unique request ID so that if
 *  you must retry your request, the server will know to ignore the request if
 *  it has already been completed. The server will guarantee that for at least
 *  60 minutes since the first request. For example, consider a situation where
 *  you make an initial request and t he request times out. If you make the
 *  request again with the same request ID, the server can check if original
 *  operation with the same request ID was received, and if so, will ignore the
 *  second request. This prevents clients from accidentally creating duplicate
 *  commitments. The request ID must be a valid UUID with the exception that
 *  zero UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. A list of fields to be updated in this request.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Operation.
 *
 *  Update a CertificateAuthority.
 *
 *  @param object The @c GTLRCertificateAuthorityService_CertificateAuthority to
 *    include in the query.
 *  @param name Output only. The resource name for this CertificateAuthority in
 *    the format `projects/ * /locations/ * /certificateAuthorities/ *`.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesPatch
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_CertificateAuthority *)object
                           name:(NSString *)name;

@end

/**
 *  Restore a CertificateAuthority that is scheduled for deletion.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.restore
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesRestore : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesRestoreWithObject:name:]

/**
 *  Required. The resource name for this CertificateAuthority in the format
 *  `projects/ * /locations/ * /certificateAuthorities/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Operation.
 *
 *  Restore a CertificateAuthority that is scheduled for deletion.
 *
 *  @param object The @c
 *    GTLRCertificateAuthorityService_RestoreCertificateAuthorityRequest to
 *    include in the query.
 *  @param name Required. The resource name for this CertificateAuthority in the
 *    format `projects/ * /locations/ * /certificateAuthorities/ *`.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesRestore
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_RestoreCertificateAuthorityRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Schedule a CertificateAuthority for deletion.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.scheduleDelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesScheduleDelete : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesScheduleDeleteWithObject:name:]

/**
 *  Required. The resource name for this CertificateAuthority in the format
 *  `projects/ * /locations/ * /certificateAuthorities/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Operation.
 *
 *  Schedule a CertificateAuthority for deletion.
 *
 *  @param object The @c
 *    GTLRCertificateAuthorityService_ScheduleDeleteCertificateAuthorityRequest
 *    to include in the query.
 *  @param name Required. The resource name for this CertificateAuthority in the
 *    format `projects/ * /locations/ * /certificateAuthorities/ *`.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesScheduleDelete
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_ScheduleDeleteCertificateAuthorityRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesSetIamPolicy : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRCertificateAuthorityService_SetIamPolicyRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: privateca.projects.locations.certificateAuthorities.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesTestIamPermissions : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsCertificateAuthoritiesTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c
 *    GTLRCertificateAuthorityService_TestIamPermissionsRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsCertificateAuthoritiesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Gets information about a location.
 *
 *  Method: privateca.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsGet : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: privateca.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsList : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: privateca.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsOperationsCancel : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsOperationsCancelWithObject:name:]

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRCertificateAuthorityService_CancelOperationRequest
 *    to include in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: privateca.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsOperationsDelete : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsOperationsDeleteWithname:]

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: privateca.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsOperationsGet : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: privateca.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsOperationsList : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsOperationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns a ReusableConfig.
 *
 *  Method: privateca.projects.locations.reusableConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsReusableConfigsGet : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsReusableConfigsGetWithname:]

/** Required. The name of the ReusableConfigs to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_ReusableConfig.
 *
 *  Returns a ReusableConfig.
 *
 *  @param name Required. The name of the ReusableConfigs to get.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsReusableConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: privateca.projects.locations.reusableConfigs.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsReusableConfigsGetIamPolicy : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsReusableConfigsGetIamPolicyWithresource:]

/**
 *  Optional. The policy format version to be returned. Valid values are 0, 1,
 *  and 3. Requests specifying an invalid value will be rejected. Requests for
 *  policies with any conditional bindings must specify version 3. Policies
 *  without any conditional bindings may specify any valid value or leave the
 *  field unset. To learn which resources support conditions in their IAM
 *  policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsReusableConfigsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists ReusableConfigs.
 *
 *  Method: privateca.projects.locations.reusableConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsReusableConfigsList : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsReusableConfigsListWithparent:]

/** Optional. Only include resources that match the filter in the response. */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Specify how the results should be sorted. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. Limit on the number of ReusableConfigs to include in the response.
 *  Further ReusableConfigs can subsequently be obtained by including the
 *  ListReusableConfigsResponse.next_page_token in a subsequent request. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. Pagination token, returned earlier via
 *  ListReusableConfigsResponse.next_page_token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name of the location associated with the
 *  ReusableConfigs, in the format `projects/ * /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_ListReusableConfigsResponse.
 *
 *  Lists ReusableConfigs.
 *
 *  @param parent Required. The resource name of the location associated with
 *    the ReusableConfigs, in the format `projects/ * /locations/ *`.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsReusableConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: privateca.projects.locations.reusableConfigs.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsReusableConfigsSetIamPolicy : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsReusableConfigsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRCertificateAuthorityService_SetIamPolicyRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsReusableConfigsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: privateca.projects.locations.reusableConfigs.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateAuthorityServiceCloudPlatform
 */
@interface GTLRCertificateAuthorityServiceQuery_ProjectsLocationsReusableConfigsTestIamPermissions : GTLRCertificateAuthorityServiceQuery
// Previous library name was
//   +[GTLQueryCertificateAuthorityService queryForProjectsLocationsReusableConfigsTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCertificateAuthorityService_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c
 *    GTLRCertificateAuthorityService_TestIamPermissionsRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCertificateAuthorityServiceQuery_ProjectsLocationsReusableConfigsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCertificateAuthorityService_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
