// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Access Approval API (accessapproval/v1)
// Description:
//   An API for controlling access to data by Google personnel.
// Documentation:
//   https://cloud.google.com/access-approval/docs

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAccessApproval_ApproveApprovalRequestMessage;
@class GTLRAccessApproval_DismissApprovalRequestMessage;
@class GTLRAccessApproval_Settings;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Access Approval query classes.
 */
@interface GTLRAccessApprovalQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Approves a request and returns the updated ApprovalRequest.
 *  Returns NOT_FOUND if the request does not exist. Returns
 *  FAILED_PRECONDITION if the request exists but is not in a pending state.
 *
 *  Method: accessapproval.folders.approvalRequests.approve
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_FoldersApprovalRequestsApprove : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForFoldersApprovalRequestsApproveWithObject:name:]

/** Name of the approval request to approve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessApproval_ApprovalRequest.
 *
 *  Approves a request and returns the updated ApprovalRequest.
 *  Returns NOT_FOUND if the request does not exist. Returns
 *  FAILED_PRECONDITION if the request exists but is not in a pending state.
 *
 *  @param object The @c GTLRAccessApproval_ApproveApprovalRequestMessage to
 *    include in the query.
 *  @param name Name of the approval request to approve.
 *
 *  @return GTLRAccessApprovalQuery_FoldersApprovalRequestsApprove
 */
+ (instancetype)queryWithObject:(GTLRAccessApproval_ApproveApprovalRequestMessage *)object
                           name:(NSString *)name;

@end

/**
 *  Dismisses a request. Returns the updated ApprovalRequest.
 *  NOTE: This does not deny access to the resource if another request has been
 *  made and approved. It is equivalent in effect to ignoring the request
 *  altogether.
 *  Returns NOT_FOUND if the request does not exist.
 *  Returns FAILED_PRECONDITION if the request exists but is not in a pending
 *  state.
 *
 *  Method: accessapproval.folders.approvalRequests.dismiss
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_FoldersApprovalRequestsDismiss : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForFoldersApprovalRequestsDismissWithObject:name:]

/** Name of the ApprovalRequest to dismiss. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessApproval_ApprovalRequest.
 *
 *  Dismisses a request. Returns the updated ApprovalRequest.
 *  NOTE: This does not deny access to the resource if another request has been
 *  made and approved. It is equivalent in effect to ignoring the request
 *  altogether.
 *  Returns NOT_FOUND if the request does not exist.
 *  Returns FAILED_PRECONDITION if the request exists but is not in a pending
 *  state.
 *
 *  @param object The @c GTLRAccessApproval_DismissApprovalRequestMessage to
 *    include in the query.
 *  @param name Name of the ApprovalRequest to dismiss.
 *
 *  @return GTLRAccessApprovalQuery_FoldersApprovalRequestsDismiss
 */
+ (instancetype)queryWithObject:(GTLRAccessApproval_DismissApprovalRequestMessage *)object
                           name:(NSString *)name;

@end

/**
 *  Gets an approval request. Returns NOT_FOUND if the request does not exist.
 *
 *  Method: accessapproval.folders.approvalRequests.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_FoldersApprovalRequestsGet : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForFoldersApprovalRequestsGetWithname:]

/** Name of the approval request to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessApproval_ApprovalRequest.
 *
 *  Gets an approval request. Returns NOT_FOUND if the request does not exist.
 *
 *  @param name Name of the approval request to retrieve.
 *
 *  @return GTLRAccessApprovalQuery_FoldersApprovalRequestsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists approval requests associated with a project, folder, or organization.
 *  Approval requests can be filtered by state (pending, active, dismissed).
 *  The order is reverse chronological.
 *
 *  Method: accessapproval.folders.approvalRequests.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_FoldersApprovalRequestsList : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForFoldersApprovalRequestsListWithparent:]

/**
 *  A filter on the type of approval requests to retrieve. Must be one of the
 *  following values:
 *  <ol>
 *  <li>[not set]: Requests that are pending or have active approvals.</li>
 *  <li>ALL: All requests.</li>
 *  <li>PENDING: Only pending requests.</li>
 *  <li>ACTIVE: Only active (i.e. currently approved) requests.</li>
 *  <li>DISMISSED: Only dismissed (including expired) requests.</li>
 *  </ol>
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Requested page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** A token identifying the page of results to return. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent resource. This may be "projects/{project_id}",
 *  "folders/{folder_id}", or "organizations/{organization_id}".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAccessApproval_ListApprovalRequestsResponse.
 *
 *  Lists approval requests associated with a project, folder, or organization.
 *  Approval requests can be filtered by state (pending, active, dismissed).
 *  The order is reverse chronological.
 *
 *  @param parent The parent resource. This may be "projects/{project_id}",
 *    "folders/{folder_id}", or "organizations/{organization_id}".
 *
 *  @return GTLRAccessApprovalQuery_FoldersApprovalRequestsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Deletes the settings associated with a project, folder, or organization.
 *  This will have the effect of disabling Access Approval for the project,
 *  folder, or organization, but only if all ancestors also have Access
 *  Approval disabled. If Access Approval is enabled at a higher level of the
 *  hierarchy, then Access Approval will still be enabled at this level as
 *  the settings are inherited.
 *
 *  Method: accessapproval.folders.deleteAccessApprovalSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_FoldersDeleteAccessApprovalSettings : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForFoldersDeleteAccessApprovalSettingsWithname:]

/** Name of the AccessApprovalSettings to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessApproval_Empty.
 *
 *  Deletes the settings associated with a project, folder, or organization.
 *  This will have the effect of disabling Access Approval for the project,
 *  folder, or organization, but only if all ancestors also have Access
 *  Approval disabled. If Access Approval is enabled at a higher level of the
 *  hierarchy, then Access Approval will still be enabled at this level as
 *  the settings are inherited.
 *
 *  @param name Name of the AccessApprovalSettings to delete.
 *
 *  @return GTLRAccessApprovalQuery_FoldersDeleteAccessApprovalSettings
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the settings associated with a project, folder, or organization.
 *
 *  Method: accessapproval.folders.getAccessApprovalSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_FoldersGetAccessApprovalSettings : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForFoldersGetAccessApprovalSettingsWithname:]

/** Name of the AccessApprovalSettings to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessApproval_Settings.
 *
 *  Gets the settings associated with a project, folder, or organization.
 *
 *  @param name Name of the AccessApprovalSettings to retrieve.
 *
 *  @return GTLRAccessApprovalQuery_FoldersGetAccessApprovalSettings
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the settings associated with a project, folder, or organization.
 *  Settings to update are determined by the value of field_mask.
 *
 *  Method: accessapproval.folders.updateAccessApprovalSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_FoldersUpdateAccessApprovalSettings : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForFoldersUpdateAccessApprovalSettingsWithObject:name:]

/**
 *  The resource name of the settings. Format is one of:
 *  <ol>
 *  <li>"projects/{project_id}/accessApprovalSettings"</li>
 *  <li>"folders/{folder_id}/accessApprovalSettings"</li>
 *  <li>"organizations/{organization_id}/accessApprovalSettings"</li>
 *  <ol>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the settings. Only the top level fields of
 *  AccessApprovalSettings (notification_emails & enrolled_services) are
 *  supported. For each field, if it is included, the currently stored value
 *  will be entirely overwritten with the value of the field passed in this
 *  request.
 *  For the `FieldMask` definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *  If this field is left unset, only the notification_emails field will be
 *  updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAccessApproval_Settings.
 *
 *  Updates the settings associated with a project, folder, or organization.
 *  Settings to update are determined by the value of field_mask.
 *
 *  @param object The @c GTLRAccessApproval_Settings to include in the query.
 *  @param name The resource name of the settings. Format is one of:
 *    <ol>
 *    <li>"projects/{project_id}/accessApprovalSettings"</li>
 *    <li>"folders/{folder_id}/accessApprovalSettings"</li>
 *    <li>"organizations/{organization_id}/accessApprovalSettings"</li>
 *    <ol>
 *
 *  @return GTLRAccessApprovalQuery_FoldersUpdateAccessApprovalSettings
 */
+ (instancetype)queryWithObject:(GTLRAccessApproval_Settings *)object
                           name:(NSString *)name;

@end

/**
 *  Approves a request and returns the updated ApprovalRequest.
 *  Returns NOT_FOUND if the request does not exist. Returns
 *  FAILED_PRECONDITION if the request exists but is not in a pending state.
 *
 *  Method: accessapproval.organizations.approvalRequests.approve
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_OrganizationsApprovalRequestsApprove : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForOrganizationsApprovalRequestsApproveWithObject:name:]

/** Name of the approval request to approve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessApproval_ApprovalRequest.
 *
 *  Approves a request and returns the updated ApprovalRequest.
 *  Returns NOT_FOUND if the request does not exist. Returns
 *  FAILED_PRECONDITION if the request exists but is not in a pending state.
 *
 *  @param object The @c GTLRAccessApproval_ApproveApprovalRequestMessage to
 *    include in the query.
 *  @param name Name of the approval request to approve.
 *
 *  @return GTLRAccessApprovalQuery_OrganizationsApprovalRequestsApprove
 */
+ (instancetype)queryWithObject:(GTLRAccessApproval_ApproveApprovalRequestMessage *)object
                           name:(NSString *)name;

@end

/**
 *  Dismisses a request. Returns the updated ApprovalRequest.
 *  NOTE: This does not deny access to the resource if another request has been
 *  made and approved. It is equivalent in effect to ignoring the request
 *  altogether.
 *  Returns NOT_FOUND if the request does not exist.
 *  Returns FAILED_PRECONDITION if the request exists but is not in a pending
 *  state.
 *
 *  Method: accessapproval.organizations.approvalRequests.dismiss
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_OrganizationsApprovalRequestsDismiss : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForOrganizationsApprovalRequestsDismissWithObject:name:]

/** Name of the ApprovalRequest to dismiss. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessApproval_ApprovalRequest.
 *
 *  Dismisses a request. Returns the updated ApprovalRequest.
 *  NOTE: This does not deny access to the resource if another request has been
 *  made and approved. It is equivalent in effect to ignoring the request
 *  altogether.
 *  Returns NOT_FOUND if the request does not exist.
 *  Returns FAILED_PRECONDITION if the request exists but is not in a pending
 *  state.
 *
 *  @param object The @c GTLRAccessApproval_DismissApprovalRequestMessage to
 *    include in the query.
 *  @param name Name of the ApprovalRequest to dismiss.
 *
 *  @return GTLRAccessApprovalQuery_OrganizationsApprovalRequestsDismiss
 */
+ (instancetype)queryWithObject:(GTLRAccessApproval_DismissApprovalRequestMessage *)object
                           name:(NSString *)name;

@end

/**
 *  Gets an approval request. Returns NOT_FOUND if the request does not exist.
 *
 *  Method: accessapproval.organizations.approvalRequests.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_OrganizationsApprovalRequestsGet : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForOrganizationsApprovalRequestsGetWithname:]

/** Name of the approval request to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessApproval_ApprovalRequest.
 *
 *  Gets an approval request. Returns NOT_FOUND if the request does not exist.
 *
 *  @param name Name of the approval request to retrieve.
 *
 *  @return GTLRAccessApprovalQuery_OrganizationsApprovalRequestsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists approval requests associated with a project, folder, or organization.
 *  Approval requests can be filtered by state (pending, active, dismissed).
 *  The order is reverse chronological.
 *
 *  Method: accessapproval.organizations.approvalRequests.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_OrganizationsApprovalRequestsList : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForOrganizationsApprovalRequestsListWithparent:]

/**
 *  A filter on the type of approval requests to retrieve. Must be one of the
 *  following values:
 *  <ol>
 *  <li>[not set]: Requests that are pending or have active approvals.</li>
 *  <li>ALL: All requests.</li>
 *  <li>PENDING: Only pending requests.</li>
 *  <li>ACTIVE: Only active (i.e. currently approved) requests.</li>
 *  <li>DISMISSED: Only dismissed (including expired) requests.</li>
 *  </ol>
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Requested page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** A token identifying the page of results to return. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent resource. This may be "projects/{project_id}",
 *  "folders/{folder_id}", or "organizations/{organization_id}".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAccessApproval_ListApprovalRequestsResponse.
 *
 *  Lists approval requests associated with a project, folder, or organization.
 *  Approval requests can be filtered by state (pending, active, dismissed).
 *  The order is reverse chronological.
 *
 *  @param parent The parent resource. This may be "projects/{project_id}",
 *    "folders/{folder_id}", or "organizations/{organization_id}".
 *
 *  @return GTLRAccessApprovalQuery_OrganizationsApprovalRequestsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Deletes the settings associated with a project, folder, or organization.
 *  This will have the effect of disabling Access Approval for the project,
 *  folder, or organization, but only if all ancestors also have Access
 *  Approval disabled. If Access Approval is enabled at a higher level of the
 *  hierarchy, then Access Approval will still be enabled at this level as
 *  the settings are inherited.
 *
 *  Method: accessapproval.organizations.deleteAccessApprovalSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_OrganizationsDeleteAccessApprovalSettings : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForOrganizationsDeleteAccessApprovalSettingsWithname:]

/** Name of the AccessApprovalSettings to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessApproval_Empty.
 *
 *  Deletes the settings associated with a project, folder, or organization.
 *  This will have the effect of disabling Access Approval for the project,
 *  folder, or organization, but only if all ancestors also have Access
 *  Approval disabled. If Access Approval is enabled at a higher level of the
 *  hierarchy, then Access Approval will still be enabled at this level as
 *  the settings are inherited.
 *
 *  @param name Name of the AccessApprovalSettings to delete.
 *
 *  @return GTLRAccessApprovalQuery_OrganizationsDeleteAccessApprovalSettings
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the settings associated with a project, folder, or organization.
 *
 *  Method: accessapproval.organizations.getAccessApprovalSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_OrganizationsGetAccessApprovalSettings : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForOrganizationsGetAccessApprovalSettingsWithname:]

/** Name of the AccessApprovalSettings to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessApproval_Settings.
 *
 *  Gets the settings associated with a project, folder, or organization.
 *
 *  @param name Name of the AccessApprovalSettings to retrieve.
 *
 *  @return GTLRAccessApprovalQuery_OrganizationsGetAccessApprovalSettings
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the settings associated with a project, folder, or organization.
 *  Settings to update are determined by the value of field_mask.
 *
 *  Method: accessapproval.organizations.updateAccessApprovalSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_OrganizationsUpdateAccessApprovalSettings : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForOrganizationsUpdateAccessApprovalSettingsWithObject:name:]

/**
 *  The resource name of the settings. Format is one of:
 *  <ol>
 *  <li>"projects/{project_id}/accessApprovalSettings"</li>
 *  <li>"folders/{folder_id}/accessApprovalSettings"</li>
 *  <li>"organizations/{organization_id}/accessApprovalSettings"</li>
 *  <ol>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the settings. Only the top level fields of
 *  AccessApprovalSettings (notification_emails & enrolled_services) are
 *  supported. For each field, if it is included, the currently stored value
 *  will be entirely overwritten with the value of the field passed in this
 *  request.
 *  For the `FieldMask` definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *  If this field is left unset, only the notification_emails field will be
 *  updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAccessApproval_Settings.
 *
 *  Updates the settings associated with a project, folder, or organization.
 *  Settings to update are determined by the value of field_mask.
 *
 *  @param object The @c GTLRAccessApproval_Settings to include in the query.
 *  @param name The resource name of the settings. Format is one of:
 *    <ol>
 *    <li>"projects/{project_id}/accessApprovalSettings"</li>
 *    <li>"folders/{folder_id}/accessApprovalSettings"</li>
 *    <li>"organizations/{organization_id}/accessApprovalSettings"</li>
 *    <ol>
 *
 *  @return GTLRAccessApprovalQuery_OrganizationsUpdateAccessApprovalSettings
 */
+ (instancetype)queryWithObject:(GTLRAccessApproval_Settings *)object
                           name:(NSString *)name;

@end

/**
 *  Approves a request and returns the updated ApprovalRequest.
 *  Returns NOT_FOUND if the request does not exist. Returns
 *  FAILED_PRECONDITION if the request exists but is not in a pending state.
 *
 *  Method: accessapproval.projects.approvalRequests.approve
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_ProjectsApprovalRequestsApprove : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForProjectsApprovalRequestsApproveWithObject:name:]

/** Name of the approval request to approve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessApproval_ApprovalRequest.
 *
 *  Approves a request and returns the updated ApprovalRequest.
 *  Returns NOT_FOUND if the request does not exist. Returns
 *  FAILED_PRECONDITION if the request exists but is not in a pending state.
 *
 *  @param object The @c GTLRAccessApproval_ApproveApprovalRequestMessage to
 *    include in the query.
 *  @param name Name of the approval request to approve.
 *
 *  @return GTLRAccessApprovalQuery_ProjectsApprovalRequestsApprove
 */
+ (instancetype)queryWithObject:(GTLRAccessApproval_ApproveApprovalRequestMessage *)object
                           name:(NSString *)name;

@end

/**
 *  Dismisses a request. Returns the updated ApprovalRequest.
 *  NOTE: This does not deny access to the resource if another request has been
 *  made and approved. It is equivalent in effect to ignoring the request
 *  altogether.
 *  Returns NOT_FOUND if the request does not exist.
 *  Returns FAILED_PRECONDITION if the request exists but is not in a pending
 *  state.
 *
 *  Method: accessapproval.projects.approvalRequests.dismiss
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_ProjectsApprovalRequestsDismiss : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForProjectsApprovalRequestsDismissWithObject:name:]

/** Name of the ApprovalRequest to dismiss. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessApproval_ApprovalRequest.
 *
 *  Dismisses a request. Returns the updated ApprovalRequest.
 *  NOTE: This does not deny access to the resource if another request has been
 *  made and approved. It is equivalent in effect to ignoring the request
 *  altogether.
 *  Returns NOT_FOUND if the request does not exist.
 *  Returns FAILED_PRECONDITION if the request exists but is not in a pending
 *  state.
 *
 *  @param object The @c GTLRAccessApproval_DismissApprovalRequestMessage to
 *    include in the query.
 *  @param name Name of the ApprovalRequest to dismiss.
 *
 *  @return GTLRAccessApprovalQuery_ProjectsApprovalRequestsDismiss
 */
+ (instancetype)queryWithObject:(GTLRAccessApproval_DismissApprovalRequestMessage *)object
                           name:(NSString *)name;

@end

/**
 *  Gets an approval request. Returns NOT_FOUND if the request does not exist.
 *
 *  Method: accessapproval.projects.approvalRequests.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_ProjectsApprovalRequestsGet : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForProjectsApprovalRequestsGetWithname:]

/** Name of the approval request to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessApproval_ApprovalRequest.
 *
 *  Gets an approval request. Returns NOT_FOUND if the request does not exist.
 *
 *  @param name Name of the approval request to retrieve.
 *
 *  @return GTLRAccessApprovalQuery_ProjectsApprovalRequestsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists approval requests associated with a project, folder, or organization.
 *  Approval requests can be filtered by state (pending, active, dismissed).
 *  The order is reverse chronological.
 *
 *  Method: accessapproval.projects.approvalRequests.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_ProjectsApprovalRequestsList : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForProjectsApprovalRequestsListWithparent:]

/**
 *  A filter on the type of approval requests to retrieve. Must be one of the
 *  following values:
 *  <ol>
 *  <li>[not set]: Requests that are pending or have active approvals.</li>
 *  <li>ALL: All requests.</li>
 *  <li>PENDING: Only pending requests.</li>
 *  <li>ACTIVE: Only active (i.e. currently approved) requests.</li>
 *  <li>DISMISSED: Only dismissed (including expired) requests.</li>
 *  </ol>
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Requested page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** A token identifying the page of results to return. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent resource. This may be "projects/{project_id}",
 *  "folders/{folder_id}", or "organizations/{organization_id}".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAccessApproval_ListApprovalRequestsResponse.
 *
 *  Lists approval requests associated with a project, folder, or organization.
 *  Approval requests can be filtered by state (pending, active, dismissed).
 *  The order is reverse chronological.
 *
 *  @param parent The parent resource. This may be "projects/{project_id}",
 *    "folders/{folder_id}", or "organizations/{organization_id}".
 *
 *  @return GTLRAccessApprovalQuery_ProjectsApprovalRequestsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Deletes the settings associated with a project, folder, or organization.
 *  This will have the effect of disabling Access Approval for the project,
 *  folder, or organization, but only if all ancestors also have Access
 *  Approval disabled. If Access Approval is enabled at a higher level of the
 *  hierarchy, then Access Approval will still be enabled at this level as
 *  the settings are inherited.
 *
 *  Method: accessapproval.projects.deleteAccessApprovalSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_ProjectsDeleteAccessApprovalSettings : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForProjectsDeleteAccessApprovalSettingsWithname:]

/** Name of the AccessApprovalSettings to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessApproval_Empty.
 *
 *  Deletes the settings associated with a project, folder, or organization.
 *  This will have the effect of disabling Access Approval for the project,
 *  folder, or organization, but only if all ancestors also have Access
 *  Approval disabled. If Access Approval is enabled at a higher level of the
 *  hierarchy, then Access Approval will still be enabled at this level as
 *  the settings are inherited.
 *
 *  @param name Name of the AccessApprovalSettings to delete.
 *
 *  @return GTLRAccessApprovalQuery_ProjectsDeleteAccessApprovalSettings
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the settings associated with a project, folder, or organization.
 *
 *  Method: accessapproval.projects.getAccessApprovalSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_ProjectsGetAccessApprovalSettings : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForProjectsGetAccessApprovalSettingsWithname:]

/** Name of the AccessApprovalSettings to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessApproval_Settings.
 *
 *  Gets the settings associated with a project, folder, or organization.
 *
 *  @param name Name of the AccessApprovalSettings to retrieve.
 *
 *  @return GTLRAccessApprovalQuery_ProjectsGetAccessApprovalSettings
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the settings associated with a project, folder, or organization.
 *  Settings to update are determined by the value of field_mask.
 *
 *  Method: accessapproval.projects.updateAccessApprovalSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessApprovalCloudPlatform
 */
@interface GTLRAccessApprovalQuery_ProjectsUpdateAccessApprovalSettings : GTLRAccessApprovalQuery
// Previous library name was
//   +[GTLQueryAccessApproval queryForProjectsUpdateAccessApprovalSettingsWithObject:name:]

/**
 *  The resource name of the settings. Format is one of:
 *  <ol>
 *  <li>"projects/{project_id}/accessApprovalSettings"</li>
 *  <li>"folders/{folder_id}/accessApprovalSettings"</li>
 *  <li>"organizations/{organization_id}/accessApprovalSettings"</li>
 *  <ol>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the settings. Only the top level fields of
 *  AccessApprovalSettings (notification_emails & enrolled_services) are
 *  supported. For each field, if it is included, the currently stored value
 *  will be entirely overwritten with the value of the field passed in this
 *  request.
 *  For the `FieldMask` definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *  If this field is left unset, only the notification_emails field will be
 *  updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAccessApproval_Settings.
 *
 *  Updates the settings associated with a project, folder, or organization.
 *  Settings to update are determined by the value of field_mask.
 *
 *  @param object The @c GTLRAccessApproval_Settings to include in the query.
 *  @param name The resource name of the settings. Format is one of:
 *    <ol>
 *    <li>"projects/{project_id}/accessApprovalSettings"</li>
 *    <li>"folders/{folder_id}/accessApprovalSettings"</li>
 *    <li>"organizations/{organization_id}/accessApprovalSettings"</li>
 *    <ol>
 *
 *  @return GTLRAccessApprovalQuery_ProjectsUpdateAccessApprovalSettings
 */
+ (instancetype)queryWithObject:(GTLRAccessApproval_Settings *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
