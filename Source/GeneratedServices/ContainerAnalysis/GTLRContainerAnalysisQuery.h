// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Container Analysis API (containeranalysis/v1alpha1)
// Description:
//   An implementation of the Grafeas API, which stores, and enables querying
//   and retrieval of critical metadata about all of your software artifacts.
// Documentation:
//   https://cloud.google.com/container-analysis/api/reference/rest/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRContainerAnalysis_CreateOperationRequest;
@class GTLRContainerAnalysis_GetIamPolicyRequest;
@class GTLRContainerAnalysis_Note;
@class GTLRContainerAnalysis_Occurrence;
@class GTLRContainerAnalysis_ScanConfig;
@class GTLRContainerAnalysis_SetIamPolicyRequest;
@class GTLRContainerAnalysis_TestIamPermissionsRequest;
@class GTLRContainerAnalysis_UpdateOperationRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// kind

/** Value: "ATTESTATION_AUTHORITY" */
GTLR_EXTERN NSString * const kGTLRContainerAnalysisKindAttestationAuthority;
/** Value: "BUILD_DETAILS" */
GTLR_EXTERN NSString * const kGTLRContainerAnalysisKindBuildDetails;
/** Value: "DEPLOYABLE" */
GTLR_EXTERN NSString * const kGTLRContainerAnalysisKindDeployable;
/** Value: "DISCOVERY" */
GTLR_EXTERN NSString * const kGTLRContainerAnalysisKindDiscovery;
/** Value: "IMAGE_BASIS" */
GTLR_EXTERN NSString * const kGTLRContainerAnalysisKindImageBasis;
/** Value: "KIND_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRContainerAnalysisKindKindUnspecified;
/** Value: "PACKAGE_MANAGER" */
GTLR_EXTERN NSString * const kGTLRContainerAnalysisKindPackageManager;
/** Value: "PACKAGE_VULNERABILITY" */
GTLR_EXTERN NSString * const kGTLRContainerAnalysisKindPackageVulnerability;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Container Analysis query classes.
 */
@interface GTLRContainerAnalysisQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new `Note`.
 *
 *  Method: containeranalysis.projects.notes.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsNotesCreate : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsNotesCreateWithObject:parent:]

/**
 *  The name of the project.
 *  Should be of the form "providers/{provider_id}".
 *  \@Deprecated
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The ID to use for this note. */
@property(nonatomic, copy, nullable) NSString *noteId;

/**
 *  This field contains the project Id for example:
 *  "projects/{project_id}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRContainerAnalysis_Note.
 *
 *  Creates a new `Note`.
 *
 *  @param object The @c GTLRContainerAnalysis_Note to include in the query.
 *  @param parent This field contains the project Id for example:
 *    "projects/{project_id}
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsNotesCreate
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_Note *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the given `Note` from the system.
 *
 *  Method: containeranalysis.projects.notes.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsNotesDelete : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsNotesDeleteWithname:]

/**
 *  The name of the note in the form of
 *  "providers/{provider_id}/notes/{NOTE_ID}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContainerAnalysis_Empty.
 *
 *  Deletes the given `Note` from the system.
 *
 *  @param name The name of the note in the form of
 *    "providers/{provider_id}/notes/{NOTE_ID}"
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsNotesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the requested `Note`.
 *
 *  Method: containeranalysis.projects.notes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsNotesGet : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsNotesGetWithname:]

/**
 *  The name of the note in the form of
 *  "providers/{provider_id}/notes/{NOTE_ID}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContainerAnalysis_Note.
 *
 *  Returns the requested `Note`.
 *
 *  @param name The name of the note in the form of
 *    "providers/{provider_id}/notes/{NOTE_ID}"
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsNotesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a note or an `Occurrence` resource.
 *  Requires `containeranalysis.notes.setIamPolicy` or
 *  `containeranalysis.occurrences.setIamPolicy` permission if the resource is
 *  a note or occurrence, respectively.
 *  Attempting to call this method on a resource without the required
 *  permission will result in a `PERMISSION_DENIED` error. Attempting to call
 *  this method on a non-existent resource will result in a `NOT_FOUND` error
 *  if the user has list permission on the project, or a `PERMISSION_DENIED`
 *  error otherwise. The resource takes the following formats:
 *  `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
 *  projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
 *
 *  Method: containeranalysis.projects.notes.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsNotesGetIamPolicy : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsNotesGetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRContainerAnalysis_Policy.
 *
 *  Gets the access control policy for a note or an `Occurrence` resource.
 *  Requires `containeranalysis.notes.setIamPolicy` or
 *  `containeranalysis.occurrences.setIamPolicy` permission if the resource is
 *  a note or occurrence, respectively.
 *  Attempting to call this method on a resource without the required
 *  permission will result in a `PERMISSION_DENIED` error. Attempting to call
 *  this method on a non-existent resource will result in a `NOT_FOUND` error
 *  if the user has list permission on the project, or a `PERMISSION_DENIED`
 *  error otherwise. The resource takes the following formats:
 *  `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
 *  projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
 *
 *  @param object The @c GTLRContainerAnalysis_GetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsNotesGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists all `Notes` for a given project.
 *
 *  Method: containeranalysis.projects.notes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsNotesList : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsNotesListWithparent:]

/** The filter expression. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The name field will contain the project Id for example:
 *  "providers/{provider_id}
 *  \@Deprecated
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Number of notes to return in the list. */
@property(nonatomic, assign) NSInteger pageSize;

/** Token to provide to skip to a particular spot in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  This field contains the project Id for example: "projects/{PROJECT_ID}".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRContainerAnalysis_ListNotesResponse.
 *
 *  Lists all `Notes` for a given project.
 *
 *  @param parent This field contains the project Id for example:
 *    "projects/{PROJECT_ID}".
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsNotesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists `Occurrences` referencing the specified `Note`. Use this method to
 *  get all occurrences referencing your `Note` across all your customer
 *  projects.
 *
 *  Method: containeranalysis.projects.notes.occurrences.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsNotesOccurrencesList : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsNotesOccurrencesListWithname:]

/** The filter expression. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The name field will contain the note name for example:
 *  "provider/{provider_id}/notes/{note_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Number of notes to return in the list. */
@property(nonatomic, assign) NSInteger pageSize;

/** Token to provide to skip to a particular spot in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRContainerAnalysis_ListNoteOccurrencesResponse.
 *
 *  Lists `Occurrences` referencing the specified `Note`. Use this method to
 *  get all occurrences referencing your `Note` across all your customer
 *  projects.
 *
 *  @param name The name field will contain the note name for example:
 *    "provider/{provider_id}/notes/{note_id}"
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsNotesOccurrencesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates an existing `Note`.
 *
 *  Method: containeranalysis.projects.notes.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsNotesPatch : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsNotesPatchWithObject:name:]

/**
 *  The name of the note.
 *  Should be of the form "projects/{provider_id}/notes/{note_id}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The fields to update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRContainerAnalysis_Note.
 *
 *  Updates an existing `Note`.
 *
 *  @param object The @c GTLRContainerAnalysis_Note to include in the query.
 *  @param name The name of the note.
 *    Should be of the form "projects/{provider_id}/notes/{note_id}".
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsNotesPatch
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_Note *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified `Note` or `Occurrence`.
 *  Requires `containeranalysis.notes.setIamPolicy` or
 *  `containeranalysis.occurrences.setIamPolicy` permission if the resource is
 *  a `Note` or an `Occurrence`, respectively.
 *  Attempting to call this method without these permissions will result in a `
 *  `PERMISSION_DENIED` error.
 *  Attempting to call this method on a non-existent resource will result in a
 *  `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission
 *  on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or
 *  a `PERMISSION_DENIED` error otherwise. The resource takes the following
 *  formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences
 *  and projects/{projectid}/notes/{noteid} for notes
 *
 *  Method: containeranalysis.projects.notes.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsNotesSetIamPolicy : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsNotesSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRContainerAnalysis_Policy.
 *
 *  Sets the access control policy on the specified `Note` or `Occurrence`.
 *  Requires `containeranalysis.notes.setIamPolicy` or
 *  `containeranalysis.occurrences.setIamPolicy` permission if the resource is
 *  a `Note` or an `Occurrence`, respectively.
 *  Attempting to call this method without these permissions will result in a `
 *  `PERMISSION_DENIED` error.
 *  Attempting to call this method on a non-existent resource will result in a
 *  `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission
 *  on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or
 *  a `PERMISSION_DENIED` error otherwise. The resource takes the following
 *  formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences
 *  and projects/{projectid}/notes/{noteid} for notes
 *
 *  @param object The @c GTLRContainerAnalysis_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsNotesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns the permissions that a caller has on the specified note or
 *  occurrence resource. Requires list permission on the project (for example,
 *  "storage.objects.list" on the containing bucket for testing permission of
 *  an object). Attempting to call this method on a non-existent resource will
 *  result in a `NOT_FOUND` error if the user has list permission on the
 *  project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
 *  following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for
 *  `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
 *
 *  Method: containeranalysis.projects.notes.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsNotesTestIamPermissions : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsNotesTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRContainerAnalysis_TestIamPermissionsResponse.
 *
 *  Returns the permissions that a caller has on the specified note or
 *  occurrence resource. Requires list permission on the project (for example,
 *  "storage.objects.list" on the containing bucket for testing permission of
 *  an object). Attempting to call this method on a non-existent resource will
 *  result in a `NOT_FOUND` error if the user has list permission on the
 *  project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
 *  following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for
 *  `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
 *
 *  @param object The @c GTLRContainerAnalysis_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsNotesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Creates a new `Occurrence`. Use this method to create `Occurrences`
 *  for a resource.
 *
 *  Method: containeranalysis.projects.occurrences.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsOccurrencesCreate : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsOccurrencesCreateWithObject:parent:]

/**
 *  The name of the project. Should be of the form "projects/{project_id}".
 *  \@Deprecated
 */
@property(nonatomic, copy, nullable) NSString *name;

/** This field contains the project Id for example: "projects/{project_id}" */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRContainerAnalysis_Occurrence.
 *
 *  Creates a new `Occurrence`. Use this method to create `Occurrences`
 *  for a resource.
 *
 *  @param object The @c GTLRContainerAnalysis_Occurrence to include in the
 *    query.
 *  @param parent This field contains the project Id for example:
 *    "projects/{project_id}"
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsOccurrencesCreate
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_Occurrence *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the given `Occurrence` from the system. Use this when
 *  an `Occurrence` is no longer applicable for the given resource.
 *
 *  Method: containeranalysis.projects.occurrences.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsOccurrencesDelete : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsOccurrencesDeleteWithname:]

/**
 *  The name of the occurrence in the form of
 *  "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContainerAnalysis_Empty.
 *
 *  Deletes the given `Occurrence` from the system. Use this when
 *  an `Occurrence` is no longer applicable for the given resource.
 *
 *  @param name The name of the occurrence in the form of
 *    "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsOccurrencesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the requested `Occurrence`.
 *
 *  Method: containeranalysis.projects.occurrences.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsOccurrencesGet : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsOccurrencesGetWithname:]

/**
 *  The name of the occurrence of the form
 *  "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContainerAnalysis_Occurrence.
 *
 *  Returns the requested `Occurrence`.
 *
 *  @param name The name of the occurrence of the form
 *    "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsOccurrencesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a note or an `Occurrence` resource.
 *  Requires `containeranalysis.notes.setIamPolicy` or
 *  `containeranalysis.occurrences.setIamPolicy` permission if the resource is
 *  a note or occurrence, respectively.
 *  Attempting to call this method on a resource without the required
 *  permission will result in a `PERMISSION_DENIED` error. Attempting to call
 *  this method on a non-existent resource will result in a `NOT_FOUND` error
 *  if the user has list permission on the project, or a `PERMISSION_DENIED`
 *  error otherwise. The resource takes the following formats:
 *  `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
 *  projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
 *
 *  Method: containeranalysis.projects.occurrences.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsOccurrencesGetIamPolicy : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsOccurrencesGetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRContainerAnalysis_Policy.
 *
 *  Gets the access control policy for a note or an `Occurrence` resource.
 *  Requires `containeranalysis.notes.setIamPolicy` or
 *  `containeranalysis.occurrences.setIamPolicy` permission if the resource is
 *  a note or occurrence, respectively.
 *  Attempting to call this method on a resource without the required
 *  permission will result in a `PERMISSION_DENIED` error. Attempting to call
 *  this method on a non-existent resource will result in a `NOT_FOUND` error
 *  if the user has list permission on the project, or a `PERMISSION_DENIED`
 *  error otherwise. The resource takes the following formats:
 *  `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
 *  projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
 *
 *  @param object The @c GTLRContainerAnalysis_GetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsOccurrencesGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Gets the `Note` attached to the given `Occurrence`.
 *
 *  Method: containeranalysis.projects.occurrences.getNotes
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsOccurrencesGetNotes : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsOccurrencesGetNotesWithname:]

/**
 *  The name of the occurrence in the form
 *  "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContainerAnalysis_Note.
 *
 *  Gets the `Note` attached to the given `Occurrence`.
 *
 *  @param name The name of the occurrence in the form
 *    "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsOccurrencesGetNotes
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a summary of the number and severity of occurrences.
 *
 *  Method: containeranalysis.projects.occurrences.getVulnerabilitySummary
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsOccurrencesGetVulnerabilitySummary : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsOccurrencesGetVulnerabilitySummaryWithparent:]

/** The filter expression. */
@property(nonatomic, copy, nullable) NSString *filter;

/** This contains the project Id for example: projects/{project_id} */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRContainerAnalysis_GetVulnzOccurrencesSummaryResponse.
 *
 *  Gets a summary of the number and severity of occurrences.
 *
 *  @param parent This contains the project Id for example:
 *    projects/{project_id}
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsOccurrencesGetVulnerabilitySummary
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists active `Occurrences` for a given project matching the filters.
 *
 *  Method: containeranalysis.projects.occurrences.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsOccurrencesList : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsOccurrencesListWithparent:]

/** The filter expression. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The kind of occurrences to filter on.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysisKindKindUnspecified Value "KIND_UNSPECIFIED"
 *    @arg @c kGTLRContainerAnalysisKindPackageVulnerability Value
 *        "PACKAGE_VULNERABILITY"
 *    @arg @c kGTLRContainerAnalysisKindBuildDetails Value "BUILD_DETAILS"
 *    @arg @c kGTLRContainerAnalysisKindImageBasis Value "IMAGE_BASIS"
 *    @arg @c kGTLRContainerAnalysisKindPackageManager Value "PACKAGE_MANAGER"
 *    @arg @c kGTLRContainerAnalysisKindDeployable Value "DEPLOYABLE"
 *    @arg @c kGTLRContainerAnalysisKindDiscovery Value "DISCOVERY"
 *    @arg @c kGTLRContainerAnalysisKindAttestationAuthority Value
 *        "ATTESTATION_AUTHORITY"
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name field contains the project Id. For example:
 *  "projects/{project_id}
 *  \@Deprecated
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Number of occurrences to return in the list. */
@property(nonatomic, assign) NSInteger pageSize;

/** Token to provide to skip to a particular spot in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** This contains the project Id for example: projects/{project_id}. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRContainerAnalysis_ListOccurrencesResponse.
 *
 *  Lists active `Occurrences` for a given project matching the filters.
 *
 *  @param parent This contains the project Id for example:
 *    projects/{project_id}.
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsOccurrencesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an existing occurrence.
 *
 *  Method: containeranalysis.projects.occurrences.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsOccurrencesPatch : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsOccurrencesPatchWithObject:name:]

/**
 *  The name of the occurrence.
 *  Should be of the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The fields to update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRContainerAnalysis_Occurrence.
 *
 *  Updates an existing occurrence.
 *
 *  @param object The @c GTLRContainerAnalysis_Occurrence to include in the
 *    query.
 *  @param name The name of the occurrence.
 *    Should be of the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}".
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsOccurrencesPatch
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_Occurrence *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified `Note` or `Occurrence`.
 *  Requires `containeranalysis.notes.setIamPolicy` or
 *  `containeranalysis.occurrences.setIamPolicy` permission if the resource is
 *  a `Note` or an `Occurrence`, respectively.
 *  Attempting to call this method without these permissions will result in a `
 *  `PERMISSION_DENIED` error.
 *  Attempting to call this method on a non-existent resource will result in a
 *  `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission
 *  on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or
 *  a `PERMISSION_DENIED` error otherwise. The resource takes the following
 *  formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences
 *  and projects/{projectid}/notes/{noteid} for notes
 *
 *  Method: containeranalysis.projects.occurrences.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsOccurrencesSetIamPolicy : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsOccurrencesSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRContainerAnalysis_Policy.
 *
 *  Sets the access control policy on the specified `Note` or `Occurrence`.
 *  Requires `containeranalysis.notes.setIamPolicy` or
 *  `containeranalysis.occurrences.setIamPolicy` permission if the resource is
 *  a `Note` or an `Occurrence`, respectively.
 *  Attempting to call this method without these permissions will result in a `
 *  `PERMISSION_DENIED` error.
 *  Attempting to call this method on a non-existent resource will result in a
 *  `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission
 *  on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or
 *  a `PERMISSION_DENIED` error otherwise. The resource takes the following
 *  formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences
 *  and projects/{projectid}/notes/{noteid} for notes
 *
 *  @param object The @c GTLRContainerAnalysis_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsOccurrencesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns the permissions that a caller has on the specified note or
 *  occurrence resource. Requires list permission on the project (for example,
 *  "storage.objects.list" on the containing bucket for testing permission of
 *  an object). Attempting to call this method on a non-existent resource will
 *  result in a `NOT_FOUND` error if the user has list permission on the
 *  project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
 *  following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for
 *  `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
 *
 *  Method: containeranalysis.projects.occurrences.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsOccurrencesTestIamPermissions : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsOccurrencesTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRContainerAnalysis_TestIamPermissionsResponse.
 *
 *  Returns the permissions that a caller has on the specified note or
 *  occurrence resource. Requires list permission on the project (for example,
 *  "storage.objects.list" on the containing bucket for testing permission of
 *  an object). Attempting to call this method on a non-existent resource will
 *  result in a `NOT_FOUND` error if the user has list permission on the
 *  project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
 *  following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for
 *  `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
 *
 *  @param object The @c GTLRContainerAnalysis_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsOccurrencesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Creates a new `Operation`.
 *
 *  Method: containeranalysis.projects.operations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsOperationsCreate : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsOperationsCreateWithObject:parent:]

/** The project Id that this operation should be created under. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRContainerAnalysis_Operation.
 *
 *  Creates a new `Operation`.
 *
 *  @param object The @c GTLRContainerAnalysis_CreateOperationRequest to include
 *    in the query.
 *  @param parent The project Id that this operation should be created under.
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsOperationsCreate
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_CreateOperationRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Updates an existing operation returns an error if operation
 *  does not exist. The only valid operations are to update mark the done bit
 *  change the result.
 *
 *  Method: containeranalysis.projects.operations.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsOperationsPatch : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsOperationsPatchWithObject:name:]

/**
 *  The name of the Operation.
 *  Should be of the form "projects/{provider_id}/operations/{operation_id}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContainerAnalysis_Operation.
 *
 *  Updates an existing operation returns an error if operation
 *  does not exist. The only valid operations are to update mark the done bit
 *  change the result.
 *
 *  @param object The @c GTLRContainerAnalysis_UpdateOperationRequest to include
 *    in the query.
 *  @param name The name of the Operation.
 *    Should be of the form "projects/{provider_id}/operations/{operation_id}".
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsOperationsPatch
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_UpdateOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets a specific scan configuration for a project.
 *
 *  Method: containeranalysis.projects.scanConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsScanConfigsGet : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsScanConfigsGetWithname:]

/**
 *  The name of the ScanConfig in the form
 *  projects/{project_id}/scanConfigs/{scan_config_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContainerAnalysis_ScanConfig.
 *
 *  Gets a specific scan configuration for a project.
 *
 *  @param name The name of the ScanConfig in the form
 *    projects/{project_id}/scanConfigs/{scan_config_id}
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsScanConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists scan configurations for a project.
 *
 *  Method: containeranalysis.projects.scanConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsScanConfigsList : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsScanConfigsListWithparent:]

/** The filter expression. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/** The page token to use for the next request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** This containers the project Id i.e.: projects/{project_id} */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRContainerAnalysis_ListScanConfigsResponse.
 *
 *  Lists scan configurations for a project.
 *
 *  @param parent This containers the project Id i.e.: projects/{project_id}
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsScanConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the scan configuration to a new value.
 *
 *  Method: containeranalysis.projects.scanConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProjectsScanConfigsPatch : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProjectsScanConfigsPatchWithObject:name:]

/**
 *  The scan config to update of the form
 *  projects/{project_id}/scanConfigs/{scan_config_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The fields to update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRContainerAnalysis_ScanConfig.
 *
 *  Updates the scan configuration to a new value.
 *
 *  @param object The @c GTLRContainerAnalysis_ScanConfig to include in the
 *    query.
 *  @param name The scan config to update of the form
 *    projects/{project_id}/scanConfigs/{scan_config_id}.
 *
 *  @return GTLRContainerAnalysisQuery_ProjectsScanConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_ScanConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new `Note`.
 *
 *  Method: containeranalysis.providers.notes.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProvidersNotesCreate : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProvidersNotesCreateWithObject:name:]

/**
 *  The name of the project.
 *  Should be of the form "providers/{provider_id}".
 *  \@Deprecated
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The ID to use for this note. */
@property(nonatomic, copy, nullable) NSString *noteId;

/**
 *  This field contains the project Id for example:
 *  "projects/{project_id}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRContainerAnalysis_Note.
 *
 *  Creates a new `Note`.
 *
 *  @param object The @c GTLRContainerAnalysis_Note to include in the query.
 *  @param name The name of the project.
 *    Should be of the form "providers/{provider_id}".
 *    \@Deprecated
 *
 *  @return GTLRContainerAnalysisQuery_ProvidersNotesCreate
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_Note *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes the given `Note` from the system.
 *
 *  Method: containeranalysis.providers.notes.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProvidersNotesDelete : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProvidersNotesDeleteWithname:]

/**
 *  The name of the note in the form of
 *  "providers/{provider_id}/notes/{NOTE_ID}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContainerAnalysis_Empty.
 *
 *  Deletes the given `Note` from the system.
 *
 *  @param name The name of the note in the form of
 *    "providers/{provider_id}/notes/{NOTE_ID}"
 *
 *  @return GTLRContainerAnalysisQuery_ProvidersNotesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the requested `Note`.
 *
 *  Method: containeranalysis.providers.notes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProvidersNotesGet : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProvidersNotesGetWithname:]

/**
 *  The name of the note in the form of
 *  "providers/{provider_id}/notes/{NOTE_ID}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContainerAnalysis_Note.
 *
 *  Returns the requested `Note`.
 *
 *  @param name The name of the note in the form of
 *    "providers/{provider_id}/notes/{NOTE_ID}"
 *
 *  @return GTLRContainerAnalysisQuery_ProvidersNotesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a note or an `Occurrence` resource.
 *  Requires `containeranalysis.notes.setIamPolicy` or
 *  `containeranalysis.occurrences.setIamPolicy` permission if the resource is
 *  a note or occurrence, respectively.
 *  Attempting to call this method on a resource without the required
 *  permission will result in a `PERMISSION_DENIED` error. Attempting to call
 *  this method on a non-existent resource will result in a `NOT_FOUND` error
 *  if the user has list permission on the project, or a `PERMISSION_DENIED`
 *  error otherwise. The resource takes the following formats:
 *  `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
 *  projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
 *
 *  Method: containeranalysis.providers.notes.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProvidersNotesGetIamPolicy : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProvidersNotesGetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRContainerAnalysis_Policy.
 *
 *  Gets the access control policy for a note or an `Occurrence` resource.
 *  Requires `containeranalysis.notes.setIamPolicy` or
 *  `containeranalysis.occurrences.setIamPolicy` permission if the resource is
 *  a note or occurrence, respectively.
 *  Attempting to call this method on a resource without the required
 *  permission will result in a `PERMISSION_DENIED` error. Attempting to call
 *  this method on a non-existent resource will result in a `NOT_FOUND` error
 *  if the user has list permission on the project, or a `PERMISSION_DENIED`
 *  error otherwise. The resource takes the following formats:
 *  `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
 *  projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
 *
 *  @param object The @c GTLRContainerAnalysis_GetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRContainerAnalysisQuery_ProvidersNotesGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists all `Notes` for a given project.
 *
 *  Method: containeranalysis.providers.notes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProvidersNotesList : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProvidersNotesListWithname:]

/** The filter expression. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The name field will contain the project Id for example:
 *  "providers/{provider_id}
 *  \@Deprecated
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Number of notes to return in the list. */
@property(nonatomic, assign) NSInteger pageSize;

/** Token to provide to skip to a particular spot in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  This field contains the project Id for example: "projects/{PROJECT_ID}".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRContainerAnalysis_ListNotesResponse.
 *
 *  Lists all `Notes` for a given project.
 *
 *  @param name The name field will contain the project Id for example:
 *    "providers/{provider_id}
 *    \@Deprecated
 *
 *  @return GTLRContainerAnalysisQuery_ProvidersNotesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists `Occurrences` referencing the specified `Note`. Use this method to
 *  get all occurrences referencing your `Note` across all your customer
 *  projects.
 *
 *  Method: containeranalysis.providers.notes.occurrences.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProvidersNotesOccurrencesList : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProvidersNotesOccurrencesListWithname:]

/** The filter expression. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The name field will contain the note name for example:
 *  "provider/{provider_id}/notes/{note_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Number of notes to return in the list. */
@property(nonatomic, assign) NSInteger pageSize;

/** Token to provide to skip to a particular spot in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRContainerAnalysis_ListNoteOccurrencesResponse.
 *
 *  Lists `Occurrences` referencing the specified `Note`. Use this method to
 *  get all occurrences referencing your `Note` across all your customer
 *  projects.
 *
 *  @param name The name field will contain the note name for example:
 *    "provider/{provider_id}/notes/{note_id}"
 *
 *  @return GTLRContainerAnalysisQuery_ProvidersNotesOccurrencesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates an existing `Note`.
 *
 *  Method: containeranalysis.providers.notes.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProvidersNotesPatch : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProvidersNotesPatchWithObject:name:]

/**
 *  The name of the note.
 *  Should be of the form "projects/{provider_id}/notes/{note_id}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The fields to update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRContainerAnalysis_Note.
 *
 *  Updates an existing `Note`.
 *
 *  @param object The @c GTLRContainerAnalysis_Note to include in the query.
 *  @param name The name of the note.
 *    Should be of the form "projects/{provider_id}/notes/{note_id}".
 *
 *  @return GTLRContainerAnalysisQuery_ProvidersNotesPatch
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_Note *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified `Note` or `Occurrence`.
 *  Requires `containeranalysis.notes.setIamPolicy` or
 *  `containeranalysis.occurrences.setIamPolicy` permission if the resource is
 *  a `Note` or an `Occurrence`, respectively.
 *  Attempting to call this method without these permissions will result in a `
 *  `PERMISSION_DENIED` error.
 *  Attempting to call this method on a non-existent resource will result in a
 *  `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission
 *  on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or
 *  a `PERMISSION_DENIED` error otherwise. The resource takes the following
 *  formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences
 *  and projects/{projectid}/notes/{noteid} for notes
 *
 *  Method: containeranalysis.providers.notes.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProvidersNotesSetIamPolicy : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProvidersNotesSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRContainerAnalysis_Policy.
 *
 *  Sets the access control policy on the specified `Note` or `Occurrence`.
 *  Requires `containeranalysis.notes.setIamPolicy` or
 *  `containeranalysis.occurrences.setIamPolicy` permission if the resource is
 *  a `Note` or an `Occurrence`, respectively.
 *  Attempting to call this method without these permissions will result in a `
 *  `PERMISSION_DENIED` error.
 *  Attempting to call this method on a non-existent resource will result in a
 *  `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission
 *  on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or
 *  a `PERMISSION_DENIED` error otherwise. The resource takes the following
 *  formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences
 *  and projects/{projectid}/notes/{noteid} for notes
 *
 *  @param object The @c GTLRContainerAnalysis_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRContainerAnalysisQuery_ProvidersNotesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns the permissions that a caller has on the specified note or
 *  occurrence resource. Requires list permission on the project (for example,
 *  "storage.objects.list" on the containing bucket for testing permission of
 *  an object). Attempting to call this method on a non-existent resource will
 *  result in a `NOT_FOUND` error if the user has list permission on the
 *  project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
 *  following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for
 *  `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
 *
 *  Method: containeranalysis.providers.notes.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContainerAnalysisCloudPlatform
 */
@interface GTLRContainerAnalysisQuery_ProvidersNotesTestIamPermissions : GTLRContainerAnalysisQuery
// Previous library name was
//   +[GTLQueryContainerAnalysis queryForProvidersNotesTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRContainerAnalysis_TestIamPermissionsResponse.
 *
 *  Returns the permissions that a caller has on the specified note or
 *  occurrence resource. Requires list permission on the project (for example,
 *  "storage.objects.list" on the containing bucket for testing permission of
 *  an object). Attempting to call this method on a non-existent resource will
 *  result in a `NOT_FOUND` error if the user has list permission on the
 *  project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
 *  following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for
 *  `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
 *
 *  @param object The @c GTLRContainerAnalysis_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRContainerAnalysisQuery_ProvidersNotesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRContainerAnalysis_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
