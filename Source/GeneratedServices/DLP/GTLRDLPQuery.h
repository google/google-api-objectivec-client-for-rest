// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Data Loss Prevention (DLP) API (dlp/v2)
// Description:
//   Provides methods for detection, risk analysis, and de-identification of
//   privacy-sensitive fragments in text, images, and Google Cloud Platform
//   storage repositories.
// Documentation:
//   https://cloud.google.com/dlp/docs/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDLP_GooglePrivacyDlpV2CancelDlpJobRequest;
@class GTLRDLP_GooglePrivacyDlpV2CreateDeidentifyTemplateRequest;
@class GTLRDLP_GooglePrivacyDlpV2CreateDlpJobRequest;
@class GTLRDLP_GooglePrivacyDlpV2CreateInspectTemplateRequest;
@class GTLRDLP_GooglePrivacyDlpV2CreateJobTriggerRequest;
@class GTLRDLP_GooglePrivacyDlpV2DeidentifyContentRequest;
@class GTLRDLP_GooglePrivacyDlpV2InspectContentRequest;
@class GTLRDLP_GooglePrivacyDlpV2RedactImageRequest;
@class GTLRDLP_GooglePrivacyDlpV2ReidentifyContentRequest;
@class GTLRDLP_GooglePrivacyDlpV2UpdateDeidentifyTemplateRequest;
@class GTLRDLP_GooglePrivacyDlpV2UpdateInspectTemplateRequest;
@class GTLRDLP_GooglePrivacyDlpV2UpdateJobTriggerRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// type

/** Value: "DLP_JOB_TYPE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRDLPTypeDlpJobTypeUnspecified;
/** Value: "INSPECT_JOB" */
GTLR_EXTERN NSString * const kGTLRDLPTypeInspectJob;
/** Value: "RISK_ANALYSIS_JOB" */
GTLR_EXTERN NSString * const kGTLRDLPTypeRiskAnalysisJob;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other DLP query classes.
 */
@interface GTLRDLPQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Returns a list of the sensitive information types that the DLP API
 *  supports. For more information, see [Listing supported predefined
 *  infoTypes](/dlp/docs/listing-infotypes).
 *
 *  Method: dlp.infoTypes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_InfoTypesList : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForInfoTypesList]

/**
 *  Optional filter to only return infoTypes supported by certain parts of the
 *  API. Defaults to supported_by=INSPECT.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional BCP-47 language code for localized infoType friendly
 *  names. If omitted, or if localized strings are not available,
 *  en-US strings will be returned.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2ListInfoTypesResponse.
 *
 *  Returns a list of the sensitive information types that the DLP API
 *  supports. For more information, see [Listing supported predefined
 *  infoTypes](/dlp/docs/listing-infotypes).
 *
 *  @return GTLRDLPQuery_InfoTypesList
 */
+ (instancetype)query;

@end

/**
 *  Creates a DeidentifyTemplate for re-using frequently used configuration
 *  for de-identifying content, images, and storage.
 *
 *  Method: dlp.organizations.deidentifyTemplates.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_OrganizationsDeidentifyTemplatesCreate : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForOrganizationsDeidentifyTemplatesCreateWithObject:parent:]

/**
 *  The parent resource name, for example projects/my-project-id or
 *  organizations/my-org-id.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2DeidentifyTemplate.
 *
 *  Creates a DeidentifyTemplate for re-using frequently used configuration
 *  for de-identifying content, images, and storage.
 *
 *  @param object The @c
 *    GTLRDLP_GooglePrivacyDlpV2CreateDeidentifyTemplateRequest to include in
 *    the query.
 *  @param parent The parent resource name, for example projects/my-project-id
 *    or
 *    organizations/my-org-id.
 *
 *  @return GTLRDLPQuery_OrganizationsDeidentifyTemplatesCreate
 */
+ (instancetype)queryWithObject:(GTLRDLP_GooglePrivacyDlpV2CreateDeidentifyTemplateRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a DeidentifyTemplate.
 *
 *  Method: dlp.organizations.deidentifyTemplates.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_OrganizationsDeidentifyTemplatesDelete : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForOrganizationsDeidentifyTemplatesDeleteWithname:]

/**
 *  Resource name of the organization and deidentify template to be deleted,
 *  for example `organizations/433245324/deidentifyTemplates/432452342` or
 *  projects/project-id/deidentifyTemplates/432452342.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GoogleProtobufEmpty.
 *
 *  Deletes a DeidentifyTemplate.
 *
 *  @param name Resource name of the organization and deidentify template to be
 *    deleted,
 *    for example `organizations/433245324/deidentifyTemplates/432452342` or
 *    projects/project-id/deidentifyTemplates/432452342.
 *
 *  @return GTLRDLPQuery_OrganizationsDeidentifyTemplatesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a DeidentifyTemplate.
 *
 *  Method: dlp.organizations.deidentifyTemplates.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_OrganizationsDeidentifyTemplatesGet : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForOrganizationsDeidentifyTemplatesGetWithname:]

/**
 *  Resource name of the organization and deidentify template to be read, for
 *  example `organizations/433245324/deidentifyTemplates/432452342` or
 *  projects/project-id/deidentifyTemplates/432452342.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2DeidentifyTemplate.
 *
 *  Gets a DeidentifyTemplate.
 *
 *  @param name Resource name of the organization and deidentify template to be
 *    read, for
 *    example `organizations/433245324/deidentifyTemplates/432452342` or
 *    projects/project-id/deidentifyTemplates/432452342.
 *
 *  @return GTLRDLPQuery_OrganizationsDeidentifyTemplatesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists DeidentifyTemplates.
 *
 *  Method: dlp.organizations.deidentifyTemplates.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_OrganizationsDeidentifyTemplatesList : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForOrganizationsDeidentifyTemplatesListWithparent:]

/**
 *  Optional size of the page, can be limited by server. If zero server returns
 *  a page of max size 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional page token to continue retrieval. Comes from previous call
 *  to `ListDeidentifyTemplates`.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent resource name, for example projects/my-project-id or
 *  organizations/my-org-id.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2ListDeidentifyTemplatesResponse.
 *
 *  Lists DeidentifyTemplates.
 *
 *  @param parent The parent resource name, for example projects/my-project-id
 *    or
 *    organizations/my-org-id.
 *
 *  @return GTLRDLPQuery_OrganizationsDeidentifyTemplatesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the DeidentifyTemplate.
 *
 *  Method: dlp.organizations.deidentifyTemplates.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_OrganizationsDeidentifyTemplatesPatch : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForOrganizationsDeidentifyTemplatesPatchWithObject:name:]

/**
 *  Resource name of organization and deidentify template to be updated, for
 *  example `organizations/433245324/deidentifyTemplates/432452342` or
 *  projects/project-id/deidentifyTemplates/432452342.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2DeidentifyTemplate.
 *
 *  Updates the DeidentifyTemplate.
 *
 *  @param object The @c
 *    GTLRDLP_GooglePrivacyDlpV2UpdateDeidentifyTemplateRequest to include in
 *    the query.
 *  @param name Resource name of organization and deidentify template to be
 *    updated, for
 *    example `organizations/433245324/deidentifyTemplates/432452342` or
 *    projects/project-id/deidentifyTemplates/432452342.
 *
 *  @return GTLRDLPQuery_OrganizationsDeidentifyTemplatesPatch
 */
+ (instancetype)queryWithObject:(GTLRDLP_GooglePrivacyDlpV2UpdateDeidentifyTemplateRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates an InspectTemplate for re-using frequently used configuration
 *  for inspecting content, images, and storage.
 *
 *  Method: dlp.organizations.inspectTemplates.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_OrganizationsInspectTemplatesCreate : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForOrganizationsInspectTemplatesCreateWithObject:parent:]

/**
 *  The parent resource name, for example projects/my-project-id or
 *  organizations/my-org-id.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2InspectTemplate.
 *
 *  Creates an InspectTemplate for re-using frequently used configuration
 *  for inspecting content, images, and storage.
 *
 *  @param object The @c GTLRDLP_GooglePrivacyDlpV2CreateInspectTemplateRequest
 *    to include in the query.
 *  @param parent The parent resource name, for example projects/my-project-id
 *    or
 *    organizations/my-org-id.
 *
 *  @return GTLRDLPQuery_OrganizationsInspectTemplatesCreate
 */
+ (instancetype)queryWithObject:(GTLRDLP_GooglePrivacyDlpV2CreateInspectTemplateRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an InspectTemplate.
 *
 *  Method: dlp.organizations.inspectTemplates.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_OrganizationsInspectTemplatesDelete : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForOrganizationsInspectTemplatesDeleteWithname:]

/**
 *  Resource name of the organization and inspectTemplate to be deleted, for
 *  example `organizations/433245324/inspectTemplates/432452342` or
 *  projects/project-id/inspectTemplates/432452342.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GoogleProtobufEmpty.
 *
 *  Deletes an InspectTemplate.
 *
 *  @param name Resource name of the organization and inspectTemplate to be
 *    deleted, for
 *    example `organizations/433245324/inspectTemplates/432452342` or
 *    projects/project-id/inspectTemplates/432452342.
 *
 *  @return GTLRDLPQuery_OrganizationsInspectTemplatesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets an InspectTemplate.
 *
 *  Method: dlp.organizations.inspectTemplates.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_OrganizationsInspectTemplatesGet : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForOrganizationsInspectTemplatesGetWithname:]

/**
 *  Resource name of the organization and inspectTemplate to be read, for
 *  example `organizations/433245324/inspectTemplates/432452342` or
 *  projects/project-id/inspectTemplates/432452342.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2InspectTemplate.
 *
 *  Gets an InspectTemplate.
 *
 *  @param name Resource name of the organization and inspectTemplate to be
 *    read, for
 *    example `organizations/433245324/inspectTemplates/432452342` or
 *    projects/project-id/inspectTemplates/432452342.
 *
 *  @return GTLRDLPQuery_OrganizationsInspectTemplatesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists InspectTemplates.
 *
 *  Method: dlp.organizations.inspectTemplates.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_OrganizationsInspectTemplatesList : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForOrganizationsInspectTemplatesListWithparent:]

/**
 *  Optional size of the page, can be limited by server. If zero server returns
 *  a page of max size 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional page token to continue retrieval. Comes from previous call
 *  to `ListInspectTemplates`.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent resource name, for example projects/my-project-id or
 *  organizations/my-org-id.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2ListInspectTemplatesResponse.
 *
 *  Lists InspectTemplates.
 *
 *  @param parent The parent resource name, for example projects/my-project-id
 *    or
 *    organizations/my-org-id.
 *
 *  @return GTLRDLPQuery_OrganizationsInspectTemplatesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the InspectTemplate.
 *
 *  Method: dlp.organizations.inspectTemplates.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_OrganizationsInspectTemplatesPatch : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForOrganizationsInspectTemplatesPatchWithObject:name:]

/**
 *  Resource name of organization and inspectTemplate to be updated, for
 *  example `organizations/433245324/inspectTemplates/432452342` or
 *  projects/project-id/inspectTemplates/432452342.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2InspectTemplate.
 *
 *  Updates the InspectTemplate.
 *
 *  @param object The @c GTLRDLP_GooglePrivacyDlpV2UpdateInspectTemplateRequest
 *    to include in the query.
 *  @param name Resource name of organization and inspectTemplate to be updated,
 *    for
 *    example `organizations/433245324/inspectTemplates/432452342` or
 *    projects/project-id/inspectTemplates/432452342.
 *
 *  @return GTLRDLPQuery_OrganizationsInspectTemplatesPatch
 */
+ (instancetype)queryWithObject:(GTLRDLP_GooglePrivacyDlpV2UpdateInspectTemplateRequest *)object
                           name:(NSString *)name;

@end

/**
 *  De-identifies potentially sensitive info from a ContentItem.
 *  This method has limits on input size and output size.
 *  [How-to guide](/dlp/docs/deidentify-sensitive-data)
 *
 *  Method: dlp.projects.content.deidentify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsContentDeidentify : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsContentDeidentifyWithObject:parent:]

/** The parent resource name, for example projects/my-project-id. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2DeidentifyContentResponse.
 *
 *  De-identifies potentially sensitive info from a ContentItem.
 *  This method has limits on input size and output size.
 *  [How-to guide](/dlp/docs/deidentify-sensitive-data)
 *
 *  @param object The @c GTLRDLP_GooglePrivacyDlpV2DeidentifyContentRequest to
 *    include in the query.
 *  @param parent The parent resource name, for example projects/my-project-id.
 *
 *  @return GTLRDLPQuery_ProjectsContentDeidentify
 */
+ (instancetype)queryWithObject:(GTLRDLP_GooglePrivacyDlpV2DeidentifyContentRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Finds potentially sensitive info in content.
 *  This method has limits on input size, processing time, and output size.
 *  [How-to guide for text](/dlp/docs/inspecting-text), [How-to guide for
 *  images](/dlp/docs/inspecting-images)
 *
 *  Method: dlp.projects.content.inspect
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsContentInspect : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsContentInspectWithObject:parent:]

/** The parent resource name, for example projects/my-project-id. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2InspectContentResponse.
 *
 *  Finds potentially sensitive info in content.
 *  This method has limits on input size, processing time, and output size.
 *  [How-to guide for text](/dlp/docs/inspecting-text), [How-to guide for
 *  images](/dlp/docs/inspecting-images)
 *
 *  @param object The @c GTLRDLP_GooglePrivacyDlpV2InspectContentRequest to
 *    include in the query.
 *  @param parent The parent resource name, for example projects/my-project-id.
 *
 *  @return GTLRDLPQuery_ProjectsContentInspect
 */
+ (instancetype)queryWithObject:(GTLRDLP_GooglePrivacyDlpV2InspectContentRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Re-identifies content that has been de-identified.
 *
 *  Method: dlp.projects.content.reidentify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsContentReidentify : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsContentReidentifyWithObject:parent:]

/** The parent resource name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2ReidentifyContentResponse.
 *
 *  Re-identifies content that has been de-identified.
 *
 *  @param object The @c GTLRDLP_GooglePrivacyDlpV2ReidentifyContentRequest to
 *    include in the query.
 *  @param parent The parent resource name.
 *
 *  @return GTLRDLPQuery_ProjectsContentReidentify
 */
+ (instancetype)queryWithObject:(GTLRDLP_GooglePrivacyDlpV2ReidentifyContentRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a DeidentifyTemplate for re-using frequently used configuration
 *  for de-identifying content, images, and storage.
 *
 *  Method: dlp.projects.deidentifyTemplates.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsDeidentifyTemplatesCreate : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsDeidentifyTemplatesCreateWithObject:parent:]

/**
 *  The parent resource name, for example projects/my-project-id or
 *  organizations/my-org-id.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2DeidentifyTemplate.
 *
 *  Creates a DeidentifyTemplate for re-using frequently used configuration
 *  for de-identifying content, images, and storage.
 *
 *  @param object The @c
 *    GTLRDLP_GooglePrivacyDlpV2CreateDeidentifyTemplateRequest to include in
 *    the query.
 *  @param parent The parent resource name, for example projects/my-project-id
 *    or
 *    organizations/my-org-id.
 *
 *  @return GTLRDLPQuery_ProjectsDeidentifyTemplatesCreate
 */
+ (instancetype)queryWithObject:(GTLRDLP_GooglePrivacyDlpV2CreateDeidentifyTemplateRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a DeidentifyTemplate.
 *
 *  Method: dlp.projects.deidentifyTemplates.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsDeidentifyTemplatesDelete : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsDeidentifyTemplatesDeleteWithname:]

/**
 *  Resource name of the organization and deidentify template to be deleted,
 *  for example `organizations/433245324/deidentifyTemplates/432452342` or
 *  projects/project-id/deidentifyTemplates/432452342.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GoogleProtobufEmpty.
 *
 *  Deletes a DeidentifyTemplate.
 *
 *  @param name Resource name of the organization and deidentify template to be
 *    deleted,
 *    for example `organizations/433245324/deidentifyTemplates/432452342` or
 *    projects/project-id/deidentifyTemplates/432452342.
 *
 *  @return GTLRDLPQuery_ProjectsDeidentifyTemplatesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a DeidentifyTemplate.
 *
 *  Method: dlp.projects.deidentifyTemplates.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsDeidentifyTemplatesGet : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsDeidentifyTemplatesGetWithname:]

/**
 *  Resource name of the organization and deidentify template to be read, for
 *  example `organizations/433245324/deidentifyTemplates/432452342` or
 *  projects/project-id/deidentifyTemplates/432452342.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2DeidentifyTemplate.
 *
 *  Gets a DeidentifyTemplate.
 *
 *  @param name Resource name of the organization and deidentify template to be
 *    read, for
 *    example `organizations/433245324/deidentifyTemplates/432452342` or
 *    projects/project-id/deidentifyTemplates/432452342.
 *
 *  @return GTLRDLPQuery_ProjectsDeidentifyTemplatesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists DeidentifyTemplates.
 *
 *  Method: dlp.projects.deidentifyTemplates.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsDeidentifyTemplatesList : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsDeidentifyTemplatesListWithparent:]

/**
 *  Optional size of the page, can be limited by server. If zero server returns
 *  a page of max size 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional page token to continue retrieval. Comes from previous call
 *  to `ListDeidentifyTemplates`.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent resource name, for example projects/my-project-id or
 *  organizations/my-org-id.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2ListDeidentifyTemplatesResponse.
 *
 *  Lists DeidentifyTemplates.
 *
 *  @param parent The parent resource name, for example projects/my-project-id
 *    or
 *    organizations/my-org-id.
 *
 *  @return GTLRDLPQuery_ProjectsDeidentifyTemplatesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the DeidentifyTemplate.
 *
 *  Method: dlp.projects.deidentifyTemplates.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsDeidentifyTemplatesPatch : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsDeidentifyTemplatesPatchWithObject:name:]

/**
 *  Resource name of organization and deidentify template to be updated, for
 *  example `organizations/433245324/deidentifyTemplates/432452342` or
 *  projects/project-id/deidentifyTemplates/432452342.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2DeidentifyTemplate.
 *
 *  Updates the DeidentifyTemplate.
 *
 *  @param object The @c
 *    GTLRDLP_GooglePrivacyDlpV2UpdateDeidentifyTemplateRequest to include in
 *    the query.
 *  @param name Resource name of organization and deidentify template to be
 *    updated, for
 *    example `organizations/433245324/deidentifyTemplates/432452342` or
 *    projects/project-id/deidentifyTemplates/432452342.
 *
 *  @return GTLRDLPQuery_ProjectsDeidentifyTemplatesPatch
 */
+ (instancetype)queryWithObject:(GTLRDLP_GooglePrivacyDlpV2UpdateDeidentifyTemplateRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running DlpJob. The server
 *  makes a best effort to cancel the DlpJob, but success is not
 *  guaranteed.
 *
 *  Method: dlp.projects.dlpJobs.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsDlpJobsCancel : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsDlpJobsCancelWithObject:name:]

/** The name of the DlpJob resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GoogleProtobufEmpty.
 *
 *  Starts asynchronous cancellation on a long-running DlpJob. The server
 *  makes a best effort to cancel the DlpJob, but success is not
 *  guaranteed.
 *
 *  @param object The @c GTLRDLP_GooglePrivacyDlpV2CancelDlpJobRequest to
 *    include in the query.
 *  @param name The name of the DlpJob resource to be cancelled.
 *
 *  @return GTLRDLPQuery_ProjectsDlpJobsCancel
 */
+ (instancetype)queryWithObject:(GTLRDLP_GooglePrivacyDlpV2CancelDlpJobRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new job to inspect storage or calculate risk metrics.
 *  [How-to guide](/dlp/docs/compute-risk-analysis).
 *
 *  Method: dlp.projects.dlpJobs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsDlpJobsCreate : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsDlpJobsCreateWithObject:parent:]

/** The parent resource name, for example projects/my-project-id. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2DlpJob.
 *
 *  Creates a new job to inspect storage or calculate risk metrics.
 *  [How-to guide](/dlp/docs/compute-risk-analysis).
 *
 *  @param object The @c GTLRDLP_GooglePrivacyDlpV2CreateDlpJobRequest to
 *    include in the query.
 *  @param parent The parent resource name, for example projects/my-project-id.
 *
 *  @return GTLRDLPQuery_ProjectsDlpJobsCreate
 */
+ (instancetype)queryWithObject:(GTLRDLP_GooglePrivacyDlpV2CreateDlpJobRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a long-running DlpJob. This method indicates that the client is
 *  no longer interested in the DlpJob result. The job will be cancelled if
 *  possible.
 *
 *  Method: dlp.projects.dlpJobs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsDlpJobsDelete : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsDlpJobsDeleteWithname:]

/** The name of the DlpJob resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GoogleProtobufEmpty.
 *
 *  Deletes a long-running DlpJob. This method indicates that the client is
 *  no longer interested in the DlpJob result. The job will be cancelled if
 *  possible.
 *
 *  @param name The name of the DlpJob resource to be deleted.
 *
 *  @return GTLRDLPQuery_ProjectsDlpJobsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running DlpJob.
 *
 *  Method: dlp.projects.dlpJobs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsDlpJobsGet : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsDlpJobsGetWithname:]

/** The name of the DlpJob resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2DlpJob.
 *
 *  Gets the latest state of a long-running DlpJob.
 *
 *  @param name The name of the DlpJob resource.
 *
 *  @return GTLRDLPQuery_ProjectsDlpJobsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists DlpJobs that match the specified filter in the request.
 *
 *  Method: dlp.projects.dlpJobs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsDlpJobsList : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsDlpJobsListWithparent:]

/**
 *  Optional. Allows filtering.
 *  Supported syntax:
 *  * Filter expressions are made up of one or more restrictions.
 *  * Restrictions can be combined by `AND` or `OR` logical operators. A
 *  sequence of restrictions implicitly uses `AND`.
 *  * A restriction has the form of `<field> <operator> <value>`.
 *  * Supported fields/values for inspect jobs:
 *  - `state` - PENDING|RUNNING|CANCELED|FINISHED|FAILED
 *  - `inspected_storage` - DATASTORE|CLOUD_STORAGE|BIGQUERY
 *  - `trigger_name` - The resource name of the trigger that created job.
 *  * Supported fields for risk analysis jobs:
 *  - `state` - RUNNING|CANCELED|FINISHED|FAILED
 *  * The operator must be `=` or `!=`.
 *  Examples:
 *  * inspected_storage = cloud_storage AND state = done
 *  * inspected_storage = cloud_storage OR inspected_storage = bigquery
 *  * inspected_storage = cloud_storage AND (state = done OR state = canceled)
 *  The length of this field should be no more than 500 characters.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The parent resource name, for example projects/my-project-id. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The type of job. Defaults to `DlpJobType.INSPECT`
 *
 *  Likely values:
 *    @arg @c kGTLRDLPTypeDlpJobTypeUnspecified Value "DLP_JOB_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRDLPTypeInspectJob Value "INSPECT_JOB"
 *    @arg @c kGTLRDLPTypeRiskAnalysisJob Value "RISK_ANALYSIS_JOB"
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2ListDlpJobsResponse.
 *
 *  Lists DlpJobs that match the specified filter in the request.
 *
 *  @param parent The parent resource name, for example projects/my-project-id.
 *
 *  @return GTLRDLPQuery_ProjectsDlpJobsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Redacts potentially sensitive info from an image.
 *  This method has limits on input size, processing time, and output size.
 *  [How-to guide](/dlp/docs/redacting-sensitive-data-images)
 *
 *  Method: dlp.projects.image.redact
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsImageRedact : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsImageRedactWithObject:parent:]

/** The parent resource name, for example projects/my-project-id. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2RedactImageResponse.
 *
 *  Redacts potentially sensitive info from an image.
 *  This method has limits on input size, processing time, and output size.
 *  [How-to guide](/dlp/docs/redacting-sensitive-data-images)
 *
 *  @param object The @c GTLRDLP_GooglePrivacyDlpV2RedactImageRequest to include
 *    in the query.
 *  @param parent The parent resource name, for example projects/my-project-id.
 *
 *  @return GTLRDLPQuery_ProjectsImageRedact
 */
+ (instancetype)queryWithObject:(GTLRDLP_GooglePrivacyDlpV2RedactImageRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates an InspectTemplate for re-using frequently used configuration
 *  for inspecting content, images, and storage.
 *
 *  Method: dlp.projects.inspectTemplates.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsInspectTemplatesCreate : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsInspectTemplatesCreateWithObject:parent:]

/**
 *  The parent resource name, for example projects/my-project-id or
 *  organizations/my-org-id.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2InspectTemplate.
 *
 *  Creates an InspectTemplate for re-using frequently used configuration
 *  for inspecting content, images, and storage.
 *
 *  @param object The @c GTLRDLP_GooglePrivacyDlpV2CreateInspectTemplateRequest
 *    to include in the query.
 *  @param parent The parent resource name, for example projects/my-project-id
 *    or
 *    organizations/my-org-id.
 *
 *  @return GTLRDLPQuery_ProjectsInspectTemplatesCreate
 */
+ (instancetype)queryWithObject:(GTLRDLP_GooglePrivacyDlpV2CreateInspectTemplateRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an InspectTemplate.
 *
 *  Method: dlp.projects.inspectTemplates.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsInspectTemplatesDelete : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsInspectTemplatesDeleteWithname:]

/**
 *  Resource name of the organization and inspectTemplate to be deleted, for
 *  example `organizations/433245324/inspectTemplates/432452342` or
 *  projects/project-id/inspectTemplates/432452342.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GoogleProtobufEmpty.
 *
 *  Deletes an InspectTemplate.
 *
 *  @param name Resource name of the organization and inspectTemplate to be
 *    deleted, for
 *    example `organizations/433245324/inspectTemplates/432452342` or
 *    projects/project-id/inspectTemplates/432452342.
 *
 *  @return GTLRDLPQuery_ProjectsInspectTemplatesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets an InspectTemplate.
 *
 *  Method: dlp.projects.inspectTemplates.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsInspectTemplatesGet : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsInspectTemplatesGetWithname:]

/**
 *  Resource name of the organization and inspectTemplate to be read, for
 *  example `organizations/433245324/inspectTemplates/432452342` or
 *  projects/project-id/inspectTemplates/432452342.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2InspectTemplate.
 *
 *  Gets an InspectTemplate.
 *
 *  @param name Resource name of the organization and inspectTemplate to be
 *    read, for
 *    example `organizations/433245324/inspectTemplates/432452342` or
 *    projects/project-id/inspectTemplates/432452342.
 *
 *  @return GTLRDLPQuery_ProjectsInspectTemplatesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists InspectTemplates.
 *
 *  Method: dlp.projects.inspectTemplates.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsInspectTemplatesList : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsInspectTemplatesListWithparent:]

/**
 *  Optional size of the page, can be limited by server. If zero server returns
 *  a page of max size 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional page token to continue retrieval. Comes from previous call
 *  to `ListInspectTemplates`.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent resource name, for example projects/my-project-id or
 *  organizations/my-org-id.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2ListInspectTemplatesResponse.
 *
 *  Lists InspectTemplates.
 *
 *  @param parent The parent resource name, for example projects/my-project-id
 *    or
 *    organizations/my-org-id.
 *
 *  @return GTLRDLPQuery_ProjectsInspectTemplatesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the InspectTemplate.
 *
 *  Method: dlp.projects.inspectTemplates.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsInspectTemplatesPatch : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsInspectTemplatesPatchWithObject:name:]

/**
 *  Resource name of organization and inspectTemplate to be updated, for
 *  example `organizations/433245324/inspectTemplates/432452342` or
 *  projects/project-id/inspectTemplates/432452342.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2InspectTemplate.
 *
 *  Updates the InspectTemplate.
 *
 *  @param object The @c GTLRDLP_GooglePrivacyDlpV2UpdateInspectTemplateRequest
 *    to include in the query.
 *  @param name Resource name of organization and inspectTemplate to be updated,
 *    for
 *    example `organizations/433245324/inspectTemplates/432452342` or
 *    projects/project-id/inspectTemplates/432452342.
 *
 *  @return GTLRDLPQuery_ProjectsInspectTemplatesPatch
 */
+ (instancetype)queryWithObject:(GTLRDLP_GooglePrivacyDlpV2UpdateInspectTemplateRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a job trigger to run DLP actions such as scanning storage for
 *  sensitive information on a set schedule.
 *
 *  Method: dlp.projects.jobTriggers.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsJobTriggersCreate : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsJobTriggersCreateWithObject:parent:]

/** The parent resource name, for example projects/my-project-id. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2JobTrigger.
 *
 *  Creates a job trigger to run DLP actions such as scanning storage for
 *  sensitive information on a set schedule.
 *
 *  @param object The @c GTLRDLP_GooglePrivacyDlpV2CreateJobTriggerRequest to
 *    include in the query.
 *  @param parent The parent resource name, for example projects/my-project-id.
 *
 *  @return GTLRDLPQuery_ProjectsJobTriggersCreate
 */
+ (instancetype)queryWithObject:(GTLRDLP_GooglePrivacyDlpV2CreateJobTriggerRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a job trigger.
 *
 *  Method: dlp.projects.jobTriggers.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsJobTriggersDelete : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsJobTriggersDeleteWithname:]

/**
 *  Resource name of the project and the triggeredJob, for example
 *  `projects/dlp-test-project/jobTriggers/53234423`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GoogleProtobufEmpty.
 *
 *  Deletes a job trigger.
 *
 *  @param name Resource name of the project and the triggeredJob, for example
 *    `projects/dlp-test-project/jobTriggers/53234423`.
 *
 *  @return GTLRDLPQuery_ProjectsJobTriggersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a job trigger.
 *
 *  Method: dlp.projects.jobTriggers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsJobTriggersGet : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsJobTriggersGetWithname:]

/**
 *  Resource name of the project and the triggeredJob, for example
 *  `projects/dlp-test-project/jobTriggers/53234423`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2JobTrigger.
 *
 *  Gets a job trigger.
 *
 *  @param name Resource name of the project and the triggeredJob, for example
 *    `projects/dlp-test-project/jobTriggers/53234423`.
 *
 *  @return GTLRDLPQuery_ProjectsJobTriggersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists job triggers.
 *
 *  Method: dlp.projects.jobTriggers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsJobTriggersList : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsJobTriggersListWithparent:]

/**
 *  Optional comma separated list of triggeredJob fields to order by,
 *  followed by 'asc/desc' postfix, i.e.
 *  `"create_time asc,name desc,schedule_mode asc"`. This list is
 *  case-insensitive.
 *  Example: `"name asc,schedule_mode desc, status desc"`
 *  Supported filters keys and values are:
 *  - `create_time`: corresponds to time the triggeredJob was created.
 *  - `update_time`: corresponds to time the triggeredJob was last updated.
 *  - `name`: corresponds to JobTrigger's display name.
 *  - `status`: corresponds to the triggeredJob status.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Optional size of the page, can be limited by a server. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional page token to continue retrieval. Comes from previous call
 *  to ListJobTriggers. `order_by` and `filter` should not change for
 *  subsequent calls, but can be omitted if token is specified.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The parent resource name, for example projects/my-project-id. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2ListJobTriggersResponse.
 *
 *  Lists job triggers.
 *
 *  @param parent The parent resource name, for example projects/my-project-id.
 *
 *  @return GTLRDLPQuery_ProjectsJobTriggersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a job trigger.
 *
 *  Method: dlp.projects.jobTriggers.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDLPCloudPlatform
 */
@interface GTLRDLPQuery_ProjectsJobTriggersPatch : GTLRDLPQuery
// Previous library name was
//   +[GTLQueryDLP queryForProjectsJobTriggersPatchWithObject:name:]

/**
 *  Resource name of the project and the triggeredJob, for example
 *  `projects/dlp-test-project/jobTriggers/53234423`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDLP_GooglePrivacyDlpV2JobTrigger.
 *
 *  Updates a job trigger.
 *
 *  @param object The @c GTLRDLP_GooglePrivacyDlpV2UpdateJobTriggerRequest to
 *    include in the query.
 *  @param name Resource name of the project and the triggeredJob, for example
 *    `projects/dlp-test-project/jobTriggers/53234423`.
 *
 *  @return GTLRDLPQuery_ProjectsJobTriggersPatch
 */
+ (instancetype)queryWithObject:(GTLRDLP_GooglePrivacyDlpV2UpdateJobTriggerRequest *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
