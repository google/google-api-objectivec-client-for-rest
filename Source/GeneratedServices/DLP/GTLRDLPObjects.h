// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   DLP API (dlp/v2beta1)
// Description:
//   The Google Data Loss Prevention API provides methods for detection of
//   privacy-sensitive fragments in text, images, and Google Cloud Platform
//   storage repositories.
// Documentation:
//   https://cloud.google.com/dlp/docs/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDLP_GoogleLongrunningOperation;
@class GTLRDLP_GoogleLongrunningOperation_Metadata;
@class GTLRDLP_GoogleLongrunningOperation_Response;
@class GTLRDLP_GooglePrivacyDlpV2beta1AuxiliaryTable;
@class GTLRDLP_GooglePrivacyDlpV2beta1BigQueryOptions;
@class GTLRDLP_GooglePrivacyDlpV2beta1BigQueryTable;
@class GTLRDLP_GooglePrivacyDlpV2beta1Bucket;
@class GTLRDLP_GooglePrivacyDlpV2beta1BucketingConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1CategoricalStatsConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1CategoricalStatsHistogramBucket;
@class GTLRDLP_GooglePrivacyDlpV2beta1CategoricalStatsResult;
@class GTLRDLP_GooglePrivacyDlpV2beta1CategoryDescription;
@class GTLRDLP_GooglePrivacyDlpV2beta1CharacterMaskConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1CharsToIgnore;
@class GTLRDLP_GooglePrivacyDlpV2beta1CloudStorageKey;
@class GTLRDLP_GooglePrivacyDlpV2beta1CloudStorageOptions;
@class GTLRDLP_GooglePrivacyDlpV2beta1CloudStoragePath;
@class GTLRDLP_GooglePrivacyDlpV2beta1Color;
@class GTLRDLP_GooglePrivacyDlpV2beta1Condition;
@class GTLRDLP_GooglePrivacyDlpV2beta1Conditions;
@class GTLRDLP_GooglePrivacyDlpV2beta1ContentItem;
@class GTLRDLP_GooglePrivacyDlpV2beta1CryptoHashConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1CryptoKey;
@class GTLRDLP_GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1CustomInfoType;
@class GTLRDLP_GooglePrivacyDlpV2beta1DatastoreKey;
@class GTLRDLP_GooglePrivacyDlpV2beta1DatastoreOptions;
@class GTLRDLP_GooglePrivacyDlpV2beta1DeidentificationSummary;
@class GTLRDLP_GooglePrivacyDlpV2beta1DeidentifyConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1Dictionary;
@class GTLRDLP_GooglePrivacyDlpV2beta1EntityId;
@class GTLRDLP_GooglePrivacyDlpV2beta1Expressions;
@class GTLRDLP_GooglePrivacyDlpV2beta1FieldId;
@class GTLRDLP_GooglePrivacyDlpV2beta1FieldTransformation;
@class GTLRDLP_GooglePrivacyDlpV2beta1FileSet;
@class GTLRDLP_GooglePrivacyDlpV2beta1Finding;
@class GTLRDLP_GooglePrivacyDlpV2beta1FixedSizeBucketingConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1ImageLocation;
@class GTLRDLP_GooglePrivacyDlpV2beta1ImageRedactionConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1InfoType;
@class GTLRDLP_GooglePrivacyDlpV2beta1InfoTypeDescription;
@class GTLRDLP_GooglePrivacyDlpV2beta1InfoTypeLimit;
@class GTLRDLP_GooglePrivacyDlpV2beta1InfoTypeStatistics;
@class GTLRDLP_GooglePrivacyDlpV2beta1InfoTypeTransformation;
@class GTLRDLP_GooglePrivacyDlpV2beta1InfoTypeTransformations;
@class GTLRDLP_GooglePrivacyDlpV2beta1InspectConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1InspectResult;
@class GTLRDLP_GooglePrivacyDlpV2beta1KAnonymityConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1KAnonymityEquivalenceClass;
@class GTLRDLP_GooglePrivacyDlpV2beta1KAnonymityHistogramBucket;
@class GTLRDLP_GooglePrivacyDlpV2beta1KAnonymityResult;
@class GTLRDLP_GooglePrivacyDlpV2beta1Key;
@class GTLRDLP_GooglePrivacyDlpV2beta1KindExpression;
@class GTLRDLP_GooglePrivacyDlpV2beta1KMapEstimationConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1KMapEstimationHistogramBucket;
@class GTLRDLP_GooglePrivacyDlpV2beta1KMapEstimationQuasiIdValues;
@class GTLRDLP_GooglePrivacyDlpV2beta1KMapEstimationResult;
@class GTLRDLP_GooglePrivacyDlpV2beta1KmsWrappedCryptoKey;
@class GTLRDLP_GooglePrivacyDlpV2beta1LDiversityConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1LDiversityEquivalenceClass;
@class GTLRDLP_GooglePrivacyDlpV2beta1LDiversityHistogramBucket;
@class GTLRDLP_GooglePrivacyDlpV2beta1LDiversityResult;
@class GTLRDLP_GooglePrivacyDlpV2beta1Location;
@class GTLRDLP_GooglePrivacyDlpV2beta1NumericalStatsConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1NumericalStatsResult;
@class GTLRDLP_GooglePrivacyDlpV2beta1OperationConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1OutputStorageConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1PartitionId;
@class GTLRDLP_GooglePrivacyDlpV2beta1PathElement;
@class GTLRDLP_GooglePrivacyDlpV2beta1PrimitiveTransformation;
@class GTLRDLP_GooglePrivacyDlpV2beta1PrivacyMetric;
@class GTLRDLP_GooglePrivacyDlpV2beta1Projection;
@class GTLRDLP_GooglePrivacyDlpV2beta1PropertyReference;
@class GTLRDLP_GooglePrivacyDlpV2beta1QuasiIdField;
@class GTLRDLP_GooglePrivacyDlpV2beta1Range;
@class GTLRDLP_GooglePrivacyDlpV2beta1RecordCondition;
@class GTLRDLP_GooglePrivacyDlpV2beta1RecordKey;
@class GTLRDLP_GooglePrivacyDlpV2beta1RecordSuppression;
@class GTLRDLP_GooglePrivacyDlpV2beta1RecordTransformations;
@class GTLRDLP_GooglePrivacyDlpV2beta1RedactConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1ReplaceConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1ReplaceValueConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1ReplaceWithInfoTypeConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1Row;
@class GTLRDLP_GooglePrivacyDlpV2beta1StorageConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1SummaryResult;
@class GTLRDLP_GooglePrivacyDlpV2beta1Table;
@class GTLRDLP_GooglePrivacyDlpV2beta1TableLocation;
@class GTLRDLP_GooglePrivacyDlpV2beta1TaggedField;
@class GTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig;
@class GTLRDLP_GooglePrivacyDlpV2beta1TransformationSummary;
@class GTLRDLP_GooglePrivacyDlpV2beta1TransientCryptoKey;
@class GTLRDLP_GooglePrivacyDlpV2beta1UnwrappedCryptoKey;
@class GTLRDLP_GooglePrivacyDlpV2beta1Value;
@class GTLRDLP_GooglePrivacyDlpV2beta1ValueFrequency;
@class GTLRDLP_GooglePrivacyDlpV2beta1WordList;
@class GTLRDLP_GoogleProtobufEmpty;
@class GTLRDLP_GoogleRpcStatus;
@class GTLRDLP_GoogleRpcStatus_Details_Item;
@class GTLRDLP_GoogleTypeDate;
@class GTLRDLP_GoogleTypeTimeOfDay;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2beta1CharsToIgnore.commonCharactersToIgnore

/**
 *  a-z
 *
 *  Value: "ALPHA_LOWER_CASE"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1CharsToIgnore_CommonCharactersToIgnore_AlphaLowerCase;
/**
 *  A-Z
 *
 *  Value: "ALPHA_UPPER_CASE"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1CharsToIgnore_CommonCharactersToIgnore_AlphaUpperCase;
/** Value: "CHARACTER_GROUP_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1CharsToIgnore_CommonCharactersToIgnore_CharacterGroupUnspecified;
/**
 *  0-9
 *
 *  Value: "NUMERIC"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1CharsToIgnore_CommonCharactersToIgnore_Numeric;
/**
 *  US Punctuation, one of !"#$%&'()*+,-./:;<=>?\@[\\]^_`{|}~
 *
 *  Value: "PUNCTUATION"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1CharsToIgnore_CommonCharactersToIgnore_Punctuation;
/**
 *  Whitespace character, one of [ \\t\\n\\x0B\\f\\r]
 *
 *  Value: "WHITESPACE"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1CharsToIgnore_CommonCharactersToIgnore_Whitespace;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2beta1Condition.operatorProperty

/**
 *  Equal.
 *
 *  Value: "EQUAL_TO"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1Condition_OperatorProperty_EqualTo;
/**
 *  Exists
 *
 *  Value: "EXISTS"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1Condition_OperatorProperty_Exists;
/**
 *  Greater than.
 *
 *  Value: "GREATER_THAN"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1Condition_OperatorProperty_GreaterThan;
/**
 *  Greater than or equals.
 *
 *  Value: "GREATER_THAN_OR_EQUALS"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1Condition_OperatorProperty_GreaterThanOrEquals;
/**
 *  Less than.
 *
 *  Value: "LESS_THAN"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1Condition_OperatorProperty_LessThan;
/**
 *  Less than or equals.
 *
 *  Value: "LESS_THAN_OR_EQUALS"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1Condition_OperatorProperty_LessThanOrEquals;
/**
 *  Not equal to.
 *
 *  Value: "NOT_EQUAL_TO"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1Condition_OperatorProperty_NotEqualTo;
/** Value: "RELATIONAL_OPERATOR_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1Condition_OperatorProperty_RelationalOperatorUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig.commonAlphabet

/**
 *  [0-9A-Za-z] (radix of 62)
 *
 *  Value: "ALPHA_NUMERIC"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig_CommonAlphabet_AlphaNumeric;
/** Value: "FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig_CommonAlphabet_FfxCommonNativeAlphabetUnspecified;
/**
 *  [0-9A-F] (radix of 16)
 *
 *  Value: "HEXADECIMAL"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig_CommonAlphabet_Hexadecimal;
/**
 *  [0-9] (radix of 10)
 *
 *  Value: "NUMERIC"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig_CommonAlphabet_Numeric;
/**
 *  [0-9A-Z] (radix of 36)
 *
 *  Value: "UPPER_CASE_ALPHA_NUMERIC"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig_CommonAlphabet_UpperCaseAlphaNumeric;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2beta1Expressions.logicalOperator

/** Value: "AND" */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1Expressions_LogicalOperator_And;
/** Value: "LOGICAL_OPERATOR_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1Expressions_LogicalOperator_LogicalOperatorUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2beta1Finding.likelihood

/**
 *  Default value; information with all likelihoods is included.
 *
 *  Value: "LIKELIHOOD_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1Finding_Likelihood_LikelihoodUnspecified;
/** Value: "LIKELY" */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1Finding_Likelihood_Likely;
/**
 *  Some matching elements.
 *
 *  Value: "POSSIBLE"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1Finding_Likelihood_Possible;
/** Value: "UNLIKELY" */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1Finding_Likelihood_Unlikely;
/**
 *  Many matching elements.
 *
 *  Value: "VERY_LIKELY"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1Finding_Likelihood_VeryLikely;
/**
 *  Few matching elements.
 *
 *  Value: "VERY_UNLIKELY"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1Finding_Likelihood_VeryUnlikely;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2beta1InspectConfig.minLikelihood

/**
 *  Default value; information with all likelihoods is included.
 *
 *  Value: "LIKELIHOOD_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1InspectConfig_MinLikelihood_LikelihoodUnspecified;
/** Value: "LIKELY" */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1InspectConfig_MinLikelihood_Likely;
/**
 *  Some matching elements.
 *
 *  Value: "POSSIBLE"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1InspectConfig_MinLikelihood_Possible;
/** Value: "UNLIKELY" */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1InspectConfig_MinLikelihood_Unlikely;
/**
 *  Many matching elements.
 *
 *  Value: "VERY_LIKELY"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1InspectConfig_MinLikelihood_VeryLikely;
/**
 *  Few matching elements.
 *
 *  Value: "VERY_UNLIKELY"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1InspectConfig_MinLikelihood_VeryUnlikely;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2beta1SummaryResult.code

/** Value: "ERROR" */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1SummaryResult_Code_Error;
/** Value: "SUCCESS" */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1SummaryResult_Code_Success;
/** Value: "TRANSFORMATION_RESULT_CODE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1SummaryResult_Code_TransformationResultCodeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig.partToExtract

/**
 *  [1-31]
 *
 *  Value: "DAY_OF_MONTH"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig_PartToExtract_DayOfMonth;
/**
 *  [1-7]
 *
 *  Value: "DAY_OF_WEEK"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig_PartToExtract_DayOfWeek;
/**
 *  [0-24]
 *
 *  Value: "HOUR_OF_DAY"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig_PartToExtract_HourOfDay;
/**
 *  [1-12]
 *
 *  Value: "MONTH"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig_PartToExtract_Month;
/** Value: "TIME_PART_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig_PartToExtract_TimePartUnspecified;
/**
 *  [1-52]
 *
 *  Value: "WEEK_OF_YEAR"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig_PartToExtract_WeekOfYear;
/**
 *  [000-9999]
 *
 *  Value: "YEAR"
 */
GTLR_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig_PartToExtract_Year;

/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRDLP_GoogleLongrunningCancelOperationRequest : GTLRObject
@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDLP_GoogleLongrunningListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GoogleLongrunningOperation *> *operations;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRDLP_GoogleLongrunningOperation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRDLP_GoogleRpcStatus *error;

/**
 *  This field will contain an InspectOperationMetadata object for
 *  `inspect.operations.create` or a RiskAnalysisOperationMetadata object for
 *  `dataSource.analyze`. This will always be returned with the Operation.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GoogleLongrunningOperation_Metadata *metadata;

/**
 *  The server-assigned name. The `name` should have the format of
 *  `inspect/operations/<identifier>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  This field will contain an InspectOperationResult object for
 *  `inspect.operations.create` or a RiskAnalysisOperationResult object for
 *  `dataSource.analyze`.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GoogleLongrunningOperation_Response *response;

@end


/**
 *  This field will contain an InspectOperationMetadata object for
 *  `inspect.operations.create` or a RiskAnalysisOperationMetadata object for
 *  `dataSource.analyze`. This will always be returned with the Operation.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDLP_GoogleLongrunningOperation_Metadata : GTLRObject
@end


/**
 *  This field will contain an InspectOperationResult object for
 *  `inspect.operations.create` or a RiskAnalysisOperationResult object for
 *  `dataSource.analyze`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDLP_GoogleLongrunningOperation_Response : GTLRObject
@end


/**
 *  Request for creating a risk analysis operation.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1AnalyzeDataSourceRiskRequest : GTLRObject

/** Privacy metric to compute. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1PrivacyMetric *privacyMetric;

/** Input dataset to compute metrics over. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1BigQueryTable *sourceTable;

@end


/**
 *  An auxiliary table contains statistical information on the relative
 *  frequency of different quasi-identifiers values. It has one or several
 *  quasi-identifiers columns, and one column that indicates the relative
 *  frequency of each quasi-identifier tuple.
 *  If a tuple is present in the data but not in the auxiliary table, the
 *  corresponding relative frequency is assumed to be zero (and thus, the
 *  tuple is highly reidentifiable).
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1AuxiliaryTable : GTLRObject

/** Quasi-identifier columns. [required] */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1QuasiIdField *> *quasiIds;

/**
 *  The relative frequency column must contain a floating-point number
 *  between 0 and 1 (inclusive). Null values are assumed to be zero.
 *  [required]
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1FieldId *relativeFrequency;

/** Auxiliary table location. [required] */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1BigQueryTable *table;

@end


/**
 *  Options defining BigQuery table and row identifiers.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1BigQueryOptions : GTLRObject

/**
 *  References to fields uniquely identifying rows within the table.
 *  Nested fields in the format, like `person.birthdate.year`, are allowed.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1FieldId *> *identifyingFields;

/** Complete BigQuery table reference. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1BigQueryTable *tableReference;

@end


/**
 *  Message defining the location of a BigQuery table. A table is uniquely
 *  identified by its project_id, dataset_id, and table_name. Within a query
 *  a table is often referenced with a string in the format of:
 *  `<project_id>:<dataset_id>.<table_id>` or
 *  `<project_id>.<dataset_id>.<table_id>`.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1BigQueryTable : GTLRObject

/** Dataset ID of the table. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  The Google Cloud Platform project ID of the project containing the table.
 *  If omitted, project ID is inferred from the API call.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Name of the table. */
@property(nonatomic, copy, nullable) NSString *tableId;

@end


/**
 *  Buckets represented as ranges, along with replacement values. Ranges must
 *  be non-overlapping.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1Bucket : GTLRObject

/** Upper bound of the range, exclusive; type must match min. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Value *max;

/**
 *  Lower bound of the range, inclusive. Type should be the same as max if
 *  used.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Value *min;

/**
 *  Replacement value for this bucket. If not provided
 *  the default behavior will be to hyphenate the min-max range.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Value *replacementValue;

@end


/**
 *  Generalization function that buckets values based on ranges. The ranges and
 *  replacement values are dynamically provided by the user for custom behavior,
 *  such as 1-30 -> LOW 31-65 -> MEDIUM 66-100 -> HIGH
 *  This can be used on
 *  data of type: number, long, string, timestamp.
 *  If the bound `Value` type differs from the type of data being transformed,
 *  we
 *  will first attempt converting the type of the data to be transformed to
 *  match
 *  the type of the bound before comparing.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1BucketingConfig : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1Bucket *> *buckets;

@end


/**
 *  Compute numerical stats over an individual column, including
 *  number of distinct values and value count distribution.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1CategoricalStatsConfig : GTLRObject

/**
 *  Field to compute categorical stats on. All column types are
 *  supported except for arrays and structs. However, it may be more
 *  informative to use NumericalStats when the field type is supported,
 *  depending on the data.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1FieldId *field;

@end


/**
 *  Histogram bucket of value frequencies in the column.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1CategoricalStatsHistogramBucket : GTLRObject

/**
 *  Total number of records in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketSize;

/**
 *  Sample of value frequencies in this bucket. The total number of
 *  values returned per bucket is capped at 20.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1ValueFrequency *> *bucketValues;

/**
 *  Lower bound on the value frequency of the values in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valueFrequencyLowerBound;

/**
 *  Upper bound on the value frequency of the values in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valueFrequencyUpperBound;

@end


/**
 *  Result of the categorical stats computation.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1CategoricalStatsResult : GTLRObject

/** Histogram of value frequencies in the column. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1CategoricalStatsHistogramBucket *> *valueFrequencyHistogramBuckets;

@end


/**
 *  Info Type Category description.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1CategoryDescription : GTLRObject

/** Human readable form of the category name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Internal name of the category. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Partially mask a string by replacing a given number of characters with a
 *  fixed character. Masking can start from the beginning or end of the string.
 *  This can be used on data of any type (numbers, longs, and so on) and when
 *  de-identifying structured data we'll attempt to preserve the original data's
 *  type. (This allows you to take a long like 123 and modify it to a string
 *  like
 *  **3.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1CharacterMaskConfig : GTLRObject

/**
 *  When masking a string, items in this list will be skipped when replacing.
 *  For example, if your string is 555-555-5555 and you ask us to skip `-` and
 *  mask 5 chars with * we would produce ***-*55-5555.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1CharsToIgnore *> *charactersToIgnore;

/**
 *  Character to mask the sensitive values&mdash;for example, "*" for an
 *  alphabetic string such as name, or "0" for a numeric string such as ZIP
 *  code or credit card number. String must have length 1. If not supplied, we
 *  will default to "*" for strings, 0 for digits.
 */
@property(nonatomic, copy, nullable) NSString *maskingCharacter;

/**
 *  Number of characters to mask. If not set, all matching chars will be
 *  masked. Skipped characters do not count towards this tally.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numberToMask;

/**
 *  Mask characters in reverse order. For example, if `masking_character` is
 *  '0', number_to_mask is 14, and `reverse_order` is false, then
 *  1234-5678-9012-3456 -> 00000000000000-3456
 *  If `masking_character` is '*', `number_to_mask` is 3, and `reverse_order`
 *  is true, then 12345 -> 12***
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reverseOrder;

@end


/**
 *  Characters to skip when doing deidentification of a value. These will be
 *  left
 *  alone and skipped.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1CharsToIgnore : GTLRObject

@property(nonatomic, copy, nullable) NSString *charactersToSkip;

/**
 *  commonCharactersToIgnore
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1CharsToIgnore_CommonCharactersToIgnore_AlphaLowerCase
 *        a-z (Value: "ALPHA_LOWER_CASE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1CharsToIgnore_CommonCharactersToIgnore_AlphaUpperCase
 *        A-Z (Value: "ALPHA_UPPER_CASE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1CharsToIgnore_CommonCharactersToIgnore_CharacterGroupUnspecified
 *        Value "CHARACTER_GROUP_UNSPECIFIED"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1CharsToIgnore_CommonCharactersToIgnore_Numeric
 *        0-9 (Value: "NUMERIC")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1CharsToIgnore_CommonCharactersToIgnore_Punctuation
 *        US Punctuation, one of !"#$%&'()*+,-./:;<=>?\@[\\]^_`{|}~ (Value:
 *        "PUNCTUATION")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1CharsToIgnore_CommonCharactersToIgnore_Whitespace
 *        Whitespace character, one of [ \\t\\n\\x0B\\f\\r] (Value:
 *        "WHITESPACE")
 */
@property(nonatomic, copy, nullable) NSString *commonCharactersToIgnore;

@end


/**
 *  Record key for a finding in a Cloud Storage file.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1CloudStorageKey : GTLRObject

/** Path to the file. */
@property(nonatomic, copy, nullable) NSString *filePath;

/**
 *  Byte offset of the referenced data in the file.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startOffset;

@end


/**
 *  Options defining a file or a set of files (path ending with *) within
 *  a Google Cloud Storage bucket.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1CloudStorageOptions : GTLRObject

@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1FileSet *fileSet;

@end


/**
 *  A location in Cloud Storage.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1CloudStoragePath : GTLRObject

/** The url, in the format of `gs://bucket/<path>`. */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  Represents a color in the RGB color space.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1Color : GTLRObject

/**
 *  The amount of blue in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blue;

/**
 *  The amount of green in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *green;

/**
 *  The amount of red in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *red;

@end


/**
 *  The field type of `value` and `field` do not need to match to be
 *  considered equal, but not all comparisons are possible.
 *  A `value` of type:
 *  - `string` can be compared against all other types
 *  - `boolean` can only be compared against other booleans
 *  - `integer` can be compared against doubles or a string if the string value
 *  can be parsed as an integer.
 *  - `double` can be compared against integers or a string if the string can
 *  be parsed as a double.
 *  - `Timestamp` can be compared against strings in RFC 3339 date string
 *  format.
 *  - `TimeOfDay` can be compared against timestamps and strings in the format
 *  of 'HH:mm:ss'.
 *  If we fail to compare do to type mismatch, a warning will be given and
 *  the condition will evaluate to false.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1Condition : GTLRObject

/** Field within the record this condition is evaluated against. [required] */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1FieldId *field;

/**
 *  Operator used to compare the field or info type to the value. [required]
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1Condition_OperatorProperty_EqualTo
 *        Equal. (Value: "EQUAL_TO")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1Condition_OperatorProperty_Exists
 *        Exists (Value: "EXISTS")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1Condition_OperatorProperty_GreaterThan
 *        Greater than. (Value: "GREATER_THAN")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1Condition_OperatorProperty_GreaterThanOrEquals
 *        Greater than or equals. (Value: "GREATER_THAN_OR_EQUALS")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1Condition_OperatorProperty_LessThan
 *        Less than. (Value: "LESS_THAN")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1Condition_OperatorProperty_LessThanOrEquals
 *        Less than or equals. (Value: "LESS_THAN_OR_EQUALS")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1Condition_OperatorProperty_NotEqualTo
 *        Not equal to. (Value: "NOT_EQUAL_TO")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1Condition_OperatorProperty_RelationalOperatorUnspecified
 *        Value "RELATIONAL_OPERATOR_UNSPECIFIED"
 *
 *  Remapped to 'operatorProperty' to avoid language reserved word 'operator'.
 */
@property(nonatomic, copy, nullable) NSString *operatorProperty;

/** Value to compare against. [Required, except for `EXISTS` tests.] */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Value *value;

@end


/**
 *  GTLRDLP_GooglePrivacyDlpV2beta1Conditions
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1Conditions : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1Condition *> *conditions;

@end


/**
 *  Container structure for the content to inspect.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1ContentItem : GTLRObject

/**
 *  Content data to inspect or redact.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/** Structured content for inspection. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Table *table;

/**
 *  Type of the content, as defined in Content-Type HTTP header.
 *  Supported types are: all "text" types, octet streams, PNG images,
 *  JPEG images.
 */
@property(nonatomic, copy, nullable) NSString *type;

/** String data to inspect or redact. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Request for scheduling a scan of a data subset from a Google Platform data
 *  repository.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1CreateInspectOperationRequest : GTLRObject

/** Configuration for the inspector. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1InspectConfig *inspectConfig;

/** Additional configuration settings for long running operations. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1OperationConfig *operationConfig;

/** Optional location to store findings. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1OutputStorageConfig *outputConfig;

/** Specification of the data set to process. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1StorageConfig *storageConfig;

@end


/**
 *  Pseudonymization method that generates surrogates via cryptographic hashing.
 *  Uses SHA-256.
 *  Outputs a 32 byte digest as an uppercase hex string
 *  (for example, 41D1567F7F99F1DC2A5FAB886DEE5BEE).
 *  Currently, only string and integer values can be hashed.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1CryptoHashConfig : GTLRObject

/** The key used by the hash function. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1CryptoKey *cryptoKey;

@end


/**
 *  This is a data encryption key (DEK) (as opposed to
 *  a key encryption key (KEK) stored by KMS).
 *  When using KMS to wrap/unwrap DEKs, be sure to set an appropriate
 *  IAM policy on the KMS CryptoKey (KEK) to ensure an attacker cannot
 *  unwrap the data crypto key.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1CryptoKey : GTLRObject

@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1KmsWrappedCryptoKey *kmsWrapped;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1TransientCryptoKey *transient;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1UnwrappedCryptoKey *unwrapped;

@end


/**
 *  Replaces an identifier with a surrogate using FPE with the FFX
 *  mode of operation.
 *  The identifier must be representable by the US-ASCII character set.
 *  For a given crypto key and context, the same identifier will be
 *  replaced with the same surrogate.
 *  Identifiers must be at least two characters long.
 *  In the case that the identifier is the empty string, it will be skipped.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig : GTLRObject

/**
 *  commonAlphabet
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig_CommonAlphabet_AlphaNumeric
 *        [0-9A-Za-z] (radix of 62) (Value: "ALPHA_NUMERIC")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig_CommonAlphabet_FfxCommonNativeAlphabetUnspecified
 *        Value "FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig_CommonAlphabet_Hexadecimal
 *        [0-9A-F] (radix of 16) (Value: "HEXADECIMAL")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig_CommonAlphabet_Numeric
 *        [0-9] (radix of 10) (Value: "NUMERIC")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig_CommonAlphabet_UpperCaseAlphaNumeric
 *        [0-9A-Z] (radix of 36) (Value: "UPPER_CASE_ALPHA_NUMERIC")
 */
@property(nonatomic, copy, nullable) NSString *commonAlphabet;

/**
 *  A context may be used for higher security since the same
 *  identifier in two different contexts likely will be given a distinct
 *  surrogate. The principle is that the likeliness is inversely related
 *  to the ratio of the number of distinct identifiers per context over the
 *  number of possible surrogates: As long as this ratio is small, the
 *  likehood is large.
 *  If the context is not set, a default tweak will be used.
 *  If the context is set but:
 *  1. there is no record present when transforming a given value or
 *  1. the field is not present when transforming a given value,
 *  a default tweak will be used.
 *  Note that case (1) is expected when an `InfoTypeTransformation` is
 *  applied to both structured and non-structured `ContentItem`s.
 *  Currently, the referenced field may be of value type integer or string.
 *  The tweak is constructed as a sequence of bytes in big endian byte order
 *  such that:
 *  - a 64 bit integer is encoded followed by a single byte of value 1
 *  - a string is encoded in UTF-8 format followed by a single byte of value 2
 *  This is also known as the 'tweak', as in tweakable encryption.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1FieldId *context;

/** The key used by the encryption algorithm. [required] */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1CryptoKey *cryptoKey;

/**
 *  This is supported by mapping these to the alphanumeric characters
 *  that the FFX mode natively supports. This happens before/after
 *  encryption/decryption.
 *  Each character listed must appear only once.
 *  Number of characters must be in the range [2, 62].
 *  This must be encoded as ASCII.
 *  The order of characters does not matter.
 */
@property(nonatomic, copy, nullable) NSString *customAlphabet;

/**
 *  The native way to select the alphabet. Must be in the range [2, 62].
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *radix;

@end


/**
 *  Custom information type provided by the user. Used to find domain-specific
 *  sensitive information configurable to the data in question.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1CustomInfoType : GTLRObject

/** Dictionary-based custom info type. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Dictionary *dictionary;

/**
 *  Info type configuration. All custom info types must have configurations
 *  that do not conflict with built-in info types or other custom info types.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1InfoType *infoType;

@end


/**
 *  Record key for a finding in Cloud Datastore.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1DatastoreKey : GTLRObject

/** Datastore entity key. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Key *entityKey;

@end


/**
 *  Options defining a data set within Google Cloud Datastore.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1DatastoreOptions : GTLRObject

/** The kind to process. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1KindExpression *kind;

/**
 *  A partition ID identifies a grouping of entities. The grouping is always
 *  by project and namespace, however the namespace ID may be empty.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1PartitionId *partitionId;

/**
 *  Properties to scan. If none are specified, all properties will be scanned
 *  by default.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1Projection *> *projection;

@end


/**
 *  High level summary of deidentification.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1DeidentificationSummary : GTLRObject

/** Transformations applied to the dataset. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1TransformationSummary *> *transformationSummaries;

/**
 *  Total size in bytes that were transformed in some way.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *transformedBytes;

@end


/**
 *  The configuration that controls how the data will change.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1DeidentifyConfig : GTLRObject

/**
 *  Treat the dataset as free-form text and apply the same free text
 *  transformation everywhere.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1InfoTypeTransformations *infoTypeTransformations;

/**
 *  Treat the dataset as structured. Transformations can be applied to
 *  specific locations within structured datasets, such as transforming
 *  a column within a table.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1RecordTransformations *recordTransformations;

@end


/**
 *  Request to de-identify a list of items.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1DeidentifyContentRequest : GTLRCollectionObject

/** Configuration for the de-identification of the list of content items. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1DeidentifyConfig *deidentifyConfig;

/** Configuration for the inspector. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1InspectConfig *inspectConfig;

/**
 *  The list of items to inspect. Up to 100 are allowed per request.
 *  All items will be treated as text/ *.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1ContentItem *> *items;

@end


/**
 *  Results of de-identifying a list of items.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1DeidentifyContentResponse : GTLRCollectionObject

/**
 *  items
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1ContentItem *> *items;

/** A review of the transformations that took place for each item. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1DeidentificationSummary *> *summaries;

@end


/**
 *  Custom information type based on a dictionary of words or phrases. This can
 *  be used to match sensitive information specific to the data, such as a list
 *  of employee IDs or job titles.
 *  Dictionary words are case-insensitive and all characters other than letters
 *  and digits in the unicode [Basic Multilingual
 *  Plane](https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane)
 *  will be replaced with whitespace when scanning for matches, so the
 *  dictionary phrase "Sam Johnson" will match all three phrases "sam johnson",
 *  "Sam, Johnson", and "Sam (Johnson)". Additionally, the characters
 *  surrounding any match must be of a different type than the adjacent
 *  characters within the word, so letters must be next to non-letters and
 *  digits next to non-digits. For example, the dictionary word "jen" will
 *  match the first three letters of the text "jen123" but will return no
 *  matches for "jennifer".
 *  Dictionary words containing a large number of characters that are not
 *  letters or digits may result in unexpected findings because such characters
 *  are treated as whitespace.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1Dictionary : GTLRObject

/** List of words or phrases to search for. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1WordList *wordList;

@end


/**
 *  An entity in a dataset is a field or set of fields that correspond to a
 *  single person. For example, in medical records the `EntityId` might be
 *  a patient identifier, or for financial records it might be an account
 *  identifier. This message is used when generalizations or analysis must be
 *  consistent across multiple rows pertaining to the same entity.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1EntityId : GTLRObject

/** Composite key indicating which field contains the entity identifier. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1FieldId *field;

@end


/**
 *  A collection of expressions
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1Expressions : GTLRObject

@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Conditions *conditions;

/**
 *  The operator to apply to the result of conditions. Default and currently
 *  only supported value is `AND`.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1Expressions_LogicalOperator_And
 *        Value "AND"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1Expressions_LogicalOperator_LogicalOperatorUnspecified
 *        Value "LOGICAL_OPERATOR_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *logicalOperator;

@end


/**
 *  General identifier of a data field in a storage service.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1FieldId : GTLRObject

/** Name describing the field. */
@property(nonatomic, copy, nullable) NSString *columnName;

@end


/**
 *  The transformation to apply to the field.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1FieldTransformation : GTLRObject

/**
 *  Only apply the transformation if the condition evaluates to true for the
 *  given `RecordCondition`. The conditions are allowed to reference fields
 *  that are not used in the actual transformation. [optional]
 *  Example Use Cases:
 *  - Apply a different bucket transformation to an age column if the zip code
 *  column for the same record is within a specific range.
 *  - Redact a field if the date of birth field is greater than 85.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1RecordCondition *condition;

/** Input field(s) to apply the transformation to. [required] */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1FieldId *> *fields;

/**
 *  Treat the contents of the field as free text, and selectively
 *  transform content that matches an `InfoType`.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1InfoTypeTransformations *infoTypeTransformations;

/** Apply the transformation to the entire field. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1PrimitiveTransformation *primitiveTransformation;

@end


/**
 *  Set of files to scan.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1FileSet : GTLRObject

/**
 *  The url, in the format `gs://<bucket>/<path>`. Trailing wildcard in the
 *  path is allowed.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Container structure describing a single finding within a string or image.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1Finding : GTLRObject

/** Timestamp when finding was detected. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The specific type of info the string might be. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1InfoType *infoType;

/**
 *  Estimate of how likely it is that the info_type is correct.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1Finding_Likelihood_LikelihoodUnspecified
 *        Default value; information with all likelihoods is included. (Value:
 *        "LIKELIHOOD_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1Finding_Likelihood_Likely Value
 *        "LIKELY"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1Finding_Likelihood_Possible Some
 *        matching elements. (Value: "POSSIBLE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1Finding_Likelihood_Unlikely Value
 *        "UNLIKELY"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1Finding_Likelihood_VeryLikely Many
 *        matching elements. (Value: "VERY_LIKELY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1Finding_Likelihood_VeryUnlikely
 *        Few matching elements. (Value: "VERY_UNLIKELY")
 */
@property(nonatomic, copy, nullable) NSString *likelihood;

/** Location of the info found. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Location *location;

/** The specific string that may be potentially sensitive info. */
@property(nonatomic, copy, nullable) NSString *quote;

@end


/**
 *  Buckets values based on fixed size ranges. The
 *  Bucketing transformation can provide all of this functionality,
 *  but requires more configuration. This message is provided as a convenience
 *  to
 *  the user for simple bucketing strategies.
 *  The resulting value will be a hyphenated string of
 *  lower_bound-upper_bound.
 *  This can be used on data of type: double, long.
 *  If the bound Value type differs from the type of data
 *  being transformed, we will first attempt converting the type of the data to
 *  be transformed to match the type of the bound before comparing.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1FixedSizeBucketingConfig : GTLRObject

/**
 *  Size of each bucket (except for minimum and maximum buckets). So if
 *  `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the
 *  following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60,
 *  60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works. [Required].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketSize;

/**
 *  Lower bound value of buckets. All values less than `lower_bound` are
 *  grouped together into a single bucket; for example if `lower_bound` = 10,
 *  then all values less than 10 are replaced with the value “-10”. [Required].
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Value *lowerBound;

/**
 *  Upper bound value of buckets. All values greater than upper_bound are
 *  grouped together into a single bucket; for example if `upper_bound` = 89,
 *  then all values greater than 89 are replaced with the value “89+”.
 *  [Required].
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Value *upperBound;

@end


/**
 *  Bounding box encompassing detected text within an image.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1ImageLocation : GTLRObject

/**
 *  Height of the bounding box in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *height;

/**
 *  Left coordinate of the bounding box. (0,0) is upper left.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *left;

/**
 *  Top coordinate of the bounding box. (0,0) is upper left.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *top;

/**
 *  Width of the bounding box in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *width;

@end


/**
 *  Configuration for determining how redaction of images should occur.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1ImageRedactionConfig : GTLRObject

/**
 *  Only one per info_type should be provided per request. If not
 *  specified, and redact_all_text is false, the DLP API will redact all
 *  text that it matches against all info_types that are found, but not
 *  specified in another ImageRedactionConfig.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1InfoType *infoType;

/**
 *  If true, all text found in the image, regardless whether it matches an
 *  info_type, is redacted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *redactAllText;

/**
 *  The color to use when redacting content from an image. If not specified,
 *  the default is black.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Color *redactionColor;

@end


/**
 *  Type of information detected by the API.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1InfoType : GTLRObject

/** Name of the information type. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Description of the information type (infoType).
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1InfoTypeDescription : GTLRObject

/** List of categories this infoType belongs to. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1CategoryDescription *> *categories;

/** Human readable form of the infoType name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Internal name of the infoType. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Max findings configuration per info type, per content item or long running
 *  operation.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1InfoTypeLimit : GTLRObject

/**
 *  Type of information the findings limit applies to. Only one limit per
 *  info_type should be provided. If InfoTypeLimit does not have an
 *  info_type, the DLP API applies the limit against all info_types that are
 *  found but not specified in another InfoTypeLimit.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1InfoType *infoType;

/**
 *  Max findings limit for the given infoType.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxFindings;

@end


/**
 *  Statistics regarding a specific InfoType.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1InfoTypeStatistics : GTLRObject

/**
 *  Number of findings for this info type.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/** The type of finding this stat is for. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1InfoType *infoType;

@end


/**
 *  A transformation to apply to text that is identified as a specific
 *  info_type.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1InfoTypeTransformation : GTLRObject

/**
 *  Info types to apply the transformation to. Empty list will match all
 *  available info types for this transformation.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1InfoType *> *infoTypes;

/** Primitive transformation to apply to the info type. [required] */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1PrimitiveTransformation *primitiveTransformation;

@end


/**
 *  A type of transformation that will scan unstructured text and
 *  apply various `PrimitiveTransformation`s to each finding, where the
 *  transformation is applied to only values that were identified as a specific
 *  info_type.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1InfoTypeTransformations : GTLRObject

/**
 *  Transformation for each info type. Cannot specify more than one
 *  for a given info type. [required]
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1InfoTypeTransformation *> *transformations;

@end


/**
 *  Configuration description of the scanning process.
 *  When used with redactContent only info_types and min_likelihood are
 *  currently
 *  used.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1InspectConfig : GTLRObject

/** Custom info types provided by the user. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1CustomInfoType *> *customInfoTypes;

/**
 *  When true, excludes type information of the findings.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *excludeTypes;

/**
 *  When true, a contextual quote from the data that triggered a finding is
 *  included in the response; see Finding.quote.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeQuote;

/** Configuration of findings limit given for specified info types. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1InfoTypeLimit *> *infoTypeLimits;

/**
 *  Restricts what info_types to look for. The values must correspond to
 *  InfoType values returned by ListInfoTypes or found in documentation.
 *  Empty info_types runs all enabled detectors.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1InfoType *> *infoTypes;

/**
 *  Limits the number of findings per content item or long running operation.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxFindings;

/**
 *  Only returns findings equal or above this threshold.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1InspectConfig_MinLikelihood_LikelihoodUnspecified
 *        Default value; information with all likelihoods is included. (Value:
 *        "LIKELIHOOD_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1InspectConfig_MinLikelihood_Likely
 *        Value "LIKELY"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1InspectConfig_MinLikelihood_Possible
 *        Some matching elements. (Value: "POSSIBLE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1InspectConfig_MinLikelihood_Unlikely
 *        Value "UNLIKELY"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1InspectConfig_MinLikelihood_VeryLikely
 *        Many matching elements. (Value: "VERY_LIKELY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1InspectConfig_MinLikelihood_VeryUnlikely
 *        Few matching elements. (Value: "VERY_UNLIKELY")
 */
@property(nonatomic, copy, nullable) NSString *minLikelihood;

@end


/**
 *  Request to search for potentially sensitive info in a list of items.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1InspectContentRequest : GTLRCollectionObject

/** Configuration for the inspector. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1InspectConfig *inspectConfig;

/**
 *  The list of items to inspect. Items in a single request are
 *  considered "related" unless inspect_config.independent_inputs is true.
 *  Up to 100 are allowed per request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1ContentItem *> *items;

@end


/**
 *  Results of inspecting a list of items.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1InspectContentResponse : GTLRObject

/**
 *  Each content_item from the request has a result in this list, in the
 *  same order as the request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1InspectResult *> *results;

@end


/**
 *  Metadata returned within GetOperation for an inspect request.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1InspectOperationMetadata : GTLRObject

/** The time which this request was started. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1InfoTypeStatistics *> *infoTypeStats;

/**
 *  Total size in bytes that were processed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *processedBytes;

/** The inspect config used to create the Operation. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1InspectConfig *requestInspectConfig;

/** Optional location to store findings. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1OutputStorageConfig *requestOutputConfig;

/** The storage config used to create the Operation. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1StorageConfig *requestStorageConfig;

/**
 *  Estimate of the number of bytes to process.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalEstimatedBytes;

@end


/**
 *  The operational data.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1InspectOperationResult : GTLRObject

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the
 *  `name` should have the format of `inspect/results/{id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  All the findings for a single scanned item.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1InspectResult : GTLRObject

/** List of findings for an item. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1Finding *> *findings;

/**
 *  If true, then this item might have more findings than were returned,
 *  and the findings returned are an arbitrary subset of all findings.
 *  The findings list might be truncated because the input items were too
 *  large, or because the server reached the maximum amount of resources
 *  allowed for a single API call. For best results, divide the input into
 *  smaller batches.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *findingsTruncated;

@end


/**
 *  k-anonymity metric, used for analysis of reidentification risk.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1KAnonymityConfig : GTLRObject

/**
 *  Optional message indicating that each distinct entity_id should not
 *  contribute to the k-anonymity count more than once per equivalence class.
 *  If an entity_id appears on several rows with different quasi-identifier
 *  tuples, it will contribute to each count exactly once.
 *  This can lead to unexpected results. Consider a table where ID 1 is
 *  associated to quasi-identifier "foo", ID 2 to "bar", and ID 3 to *both*
 *  quasi-identifiers "foo" and "bar" (on separate rows), and where this ID
 *  is used as entity_id. Then, the anonymity value associated to ID 3 will
 *  be 2, even if it is the only ID to be associated to both values "foo" and
 *  "bar".
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1EntityId *entityId;

/**
 *  Set of fields to compute k-anonymity over. When multiple fields are
 *  specified, they are considered a single composite key. Structs and
 *  repeated data types are not supported; however, nested fields are
 *  supported so long as they are not structs themselves or nested within
 *  a repeated field.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1FieldId *> *quasiIds;

@end


/**
 *  The set of columns' values that share the same k-anonymity value.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1KAnonymityEquivalenceClass : GTLRObject

/**
 *  Size of the equivalence class, for example number of rows with the
 *  above set of values.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *equivalenceClassSize;

/**
 *  Set of values defining the equivalence class. One value per
 *  quasi-identifier column in the original KAnonymity metric message.
 *  The order is always the same as the original request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1Value *> *quasiIdsValues;

@end


/**
 *  Histogram bucket of equivalence class sizes in the table.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1KAnonymityHistogramBucket : GTLRObject

/**
 *  Total number of records in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketSize;

/**
 *  Sample of equivalence classes in this bucket. The total number of
 *  classes returned per bucket is capped at 20.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1KAnonymityEquivalenceClass *> *bucketValues;

/**
 *  Lower bound on the size of the equivalence classes in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *equivalenceClassSizeLowerBound;

/**
 *  Upper bound on the size of the equivalence classes in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *equivalenceClassSizeUpperBound;

@end


/**
 *  Result of the k-anonymity computation.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1KAnonymityResult : GTLRObject

/** Histogram of k-anonymity equivalence classes. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1KAnonymityHistogramBucket *> *equivalenceClassHistogramBuckets;

@end


/**
 *  A unique identifier for a Datastore entity.
 *  If a key's partition ID or any of its path kinds or names are
 *  reserved/read-only, the key is reserved/read-only.
 *  A reserved/read-only key is forbidden in certain documented contexts.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1Key : GTLRObject

/**
 *  Entities are partitioned into subsets, currently identified by a project
 *  ID and namespace ID.
 *  Queries are scoped to a single partition.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1PartitionId *partitionId;

/**
 *  The entity path.
 *  An entity path consists of one or more elements composed of a kind and a
 *  string or numerical identifier, which identify entities. The first
 *  element identifies a _root entity_, the second element identifies
 *  a _child_ of the root entity, the third element identifies a child of the
 *  second entity, and so forth. The entities identified by all prefixes of
 *  the path are called the element's _ancestors_.
 *  A path can never be empty, and a path can have at most 100 elements.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1PathElement *> *path;

@end


/**
 *  A representation of a Datastore kind.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1KindExpression : GTLRObject

/** The name of the kind. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Reidentifiability metric. This corresponds to a risk model similar to what
 *  is called "journalist risk" in the literature, except the attack dataset is
 *  statistically modeled instead of being perfectly known. This can be done
 *  using publicly available data (like the US Census), or using a custom
 *  statistical model (indicated as one or several BigQuery tables), or by
 *  extrapolating from the distribution of values in the input dataset.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1KMapEstimationConfig : GTLRObject

/**
 *  Several auxiliary tables can be used in the analysis. Each custom_tag
 *  used to tag a quasi-identifiers column must appear in exactly one column
 *  of one auxiliary table.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1AuxiliaryTable *> *auxiliaryTables;

/**
 *  Fields considered to be quasi-identifiers. No two columns can have the
 *  same tag. [required]
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1TaggedField *> *quasiIds;

/**
 *  ISO 3166-1 alpha-2 region code to use in the statistical modeling.
 *  Required if no column is tagged with a region-specific InfoType (like
 *  US_ZIP_5) or a region code.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

@end


/**
 *  A KMapEstimationHistogramBucket message with the following values:
 *  min_anonymity: 3
 *  max_anonymity: 5
 *  frequency: 42
 *  means that there are 42 records whose quasi-identifier values correspond
 *  to 3, 4 or 5 people in the overlying population. An important particular
 *  case is when min_anonymity = max_anonymity = 1: the frequency field then
 *  corresponds to the number of uniquely identifiable records.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1KMapEstimationHistogramBucket : GTLRObject

/**
 *  Number of records within these anonymity bounds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketSize;

/**
 *  Sample of quasi-identifier tuple values in this bucket. The total
 *  number of classes returned per bucket is capped at 20.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1KMapEstimationQuasiIdValues *> *bucketValues;

/**
 *  Always greater than or equal to min_anonymity.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxAnonymity;

/**
 *  Always positive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minAnonymity;

@end


/**
 *  A tuple of values for the quasi-identifier columns.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1KMapEstimationQuasiIdValues : GTLRObject

/**
 *  The estimated anonymity for these quasi-identifier values.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedAnonymity;

/** The quasi-identifier values. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1Value *> *quasiIdsValues;

@end


/**
 *  Result of the reidentifiability analysis. Note that these results are an
 *  estimation, not exact values.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1KMapEstimationResult : GTLRObject

/**
 *  The intervals [min_anonymity, max_anonymity] do not overlap. If a value
 *  doesn't correspond to any such interval, the associated frequency is
 *  zero. For example, the following records:
 *  {min_anonymity: 1, max_anonymity: 1, frequency: 17}
 *  {min_anonymity: 2, max_anonymity: 3, frequency: 42}
 *  {min_anonymity: 5, max_anonymity: 10, frequency: 99}
 *  mean that there are no record with an estimated anonymity of 4, 5, or
 *  larger than 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1KMapEstimationHistogramBucket *> *kMapEstimationHistogram;

@end


/**
 *  Include to use an existing data crypto key wrapped by KMS.
 *  Authorization requires the following IAM permissions when sending a request
 *  to perform a crypto transformation using a kms-wrapped crypto key:
 *  dlp.kms.encrypt
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1KmsWrappedCryptoKey : GTLRObject

/**
 *  The resource name of the KMS CryptoKey to use for unwrapping. [required]
 */
@property(nonatomic, copy, nullable) NSString *cryptoKeyName;

/**
 *  The wrapped data crypto key. [required]
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *wrappedKey;

@end


/**
 *  l-diversity metric, used for analysis of reidentification risk.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1LDiversityConfig : GTLRObject

/**
 *  Set of quasi-identifiers indicating how equivalence classes are
 *  defined for the l-diversity computation. When multiple fields are
 *  specified, they are considered a single composite key.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1FieldId *> *quasiIds;

/** Sensitive field for computing the l-value. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1FieldId *sensitiveAttribute;

@end


/**
 *  The set of columns' values that share the same l-diversity value.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1LDiversityEquivalenceClass : GTLRObject

/**
 *  Size of the k-anonymity equivalence class.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *equivalenceClassSize;

/**
 *  Number of distinct sensitive values in this equivalence class.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numDistinctSensitiveValues;

/**
 *  Quasi-identifier values defining the k-anonymity equivalence
 *  class. The order is always the same as the original request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1Value *> *quasiIdsValues;

/** Estimated frequencies of top sensitive values. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1ValueFrequency *> *topSensitiveValues;

@end


/**
 *  Histogram bucket of sensitive value frequencies in the table.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1LDiversityHistogramBucket : GTLRObject

/**
 *  Total number of records in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketSize;

/**
 *  Sample of equivalence classes in this bucket. The total number of
 *  classes returned per bucket is capped at 20.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1LDiversityEquivalenceClass *> *bucketValues;

/**
 *  Lower bound on the sensitive value frequencies of the equivalence
 *  classes in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sensitiveValueFrequencyLowerBound;

/**
 *  Upper bound on the sensitive value frequencies of the equivalence
 *  classes in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sensitiveValueFrequencyUpperBound;

@end


/**
 *  Result of the l-diversity computation.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1LDiversityResult : GTLRObject

/** Histogram of l-diversity equivalence class sensitive value frequencies. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1LDiversityHistogramBucket *> *sensitiveValueFrequencyHistogramBuckets;

@end


/**
 *  Response to the ListInfoTypes request.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1ListInfoTypesResponse : GTLRObject

/** Set of sensitive info types belonging to a category. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1InfoTypeDescription *> *infoTypes;

@end


/**
 *  Response to the ListInspectFindings request.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1ListInspectFindingsResponse : GTLRObject

/**
 *  If not empty, indicates that there may be more results that match the
 *  request; this value should be passed in a new `ListInspectFindingsRequest`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** The results. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1InspectResult *result;

@end


/**
 *  Response for ListRootCategories request.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1ListRootCategoriesResponse : GTLRObject

/** List of all into type categories supported by the API. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1CategoryDescription *> *categories;

@end


/**
 *  Specifies the location of a finding within its source item.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1Location : GTLRObject

/** Zero-based byte offsets within a content item. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Range *byteRange;

/**
 *  Character offsets within a content item, included when content type
 *  is a text. Default charset assumed to be UTF-8.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Range *codepointRange;

/** Field id of the field containing the finding. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1FieldId *fieldId;

/** Location within an image's pixels. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1ImageLocation *> *imageBoxes;

/** Key of the finding. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1RecordKey *recordKey;

/** Location within a `ContentItem.Table`. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1TableLocation *tableLocation;

@end


/**
 *  Compute numerical stats over an individual column, including
 *  min, max, and quantiles.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1NumericalStatsConfig : GTLRObject

/**
 *  Field to compute numerical stats on. Supported types are
 *  integer, float, date, datetime, timestamp, time.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1FieldId *field;

@end


/**
 *  Result of the numerical stats computation.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1NumericalStatsResult : GTLRObject

/** Maximum value appearing in the column. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Value *maxValue;

/** Minimum value appearing in the column. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Value *minValue;

/**
 *  List of 99 values that partition the set of field values into 100 equal
 *  sized buckets.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1Value *> *quantileValues;

@end


/**
 *  Additional configuration for inspect long running operations.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1OperationConfig : GTLRObject

/**
 *  Max number of findings per file, Datastore entity, or database row.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxItemFindings;

@end


/**
 *  Cloud repository for storing output.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1OutputStorageConfig : GTLRObject

/**
 *  The path to a Google Cloud Storage location to store output.
 *  The bucket must already exist and
 *  the Google APIs service account for DLP must have write permission to
 *  write to the given bucket.
 *  Results are split over multiple csv files with each file name matching
 *  the pattern "[operation_id]_[count].csv", for example
 *  `3094877188788974909_1.csv`. The `operation_id` matches the
 *  identifier for the Operation, and the `count` is a counter used for
 *  tracking the number of files written.
 *  The CSV file(s) contain the following columns regardless of storage type
 *  scanned:
 *  - id
 *  - info_type
 *  - likelihood
 *  - byte size of finding
 *  - quote
 *  - timestamp
 *  For Cloud Storage the next columns are:
 *  - file_path
 *  - start_offset
 *  For Cloud Datastore the next columns are:
 *  - project_id
 *  - namespace_id
 *  - path
 *  - column_name
 *  - offset
 *  For BigQuery the next columns are:
 *  - row_number
 *  - project_id
 *  - dataset_id
 *  - table_id
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1CloudStoragePath *storagePath;

/** Store findings in a new table in the dataset. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1BigQueryTable *table;

@end


/**
 *  Datastore partition ID.
 *  A partition ID identifies a grouping of entities. The grouping is always
 *  by project and namespace, however the namespace ID may be empty.
 *  A partition ID contains several dimensions:
 *  project ID and namespace ID.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1PartitionId : GTLRObject

/** If not empty, the ID of the namespace to which the entities belong. */
@property(nonatomic, copy, nullable) NSString *namespaceId;

/** The ID of the project to which the entities belong. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  A (kind, ID/name) pair used to construct a key path.
 *  If either name or ID is set, the element is complete.
 *  If neither is set, the element is incomplete.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1PathElement : GTLRObject

/**
 *  The auto-allocated ID of the entity.
 *  Never equal to zero. Values less than zero are discouraged and may not
 *  be supported in the future.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

/**
 *  The kind of the entity.
 *  A kind matching regex `__.*__` is reserved/read-only.
 *  A kind must not contain more than 1500 bytes when UTF-8 encoded.
 *  Cannot be `""`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the entity.
 *  A name matching regex `__.*__` is reserved/read-only.
 *  A name must not be more than 1500 bytes when UTF-8 encoded.
 *  Cannot be `""`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A rule for transforming a value.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1PrimitiveTransformation : GTLRObject

@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1BucketingConfig *bucketingConfig;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1CharacterMaskConfig *characterMaskConfig;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1CryptoHashConfig *cryptoHashConfig;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1CryptoReplaceFfxFpeConfig *cryptoReplaceFfxFpeConfig;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1FixedSizeBucketingConfig *fixedSizeBucketingConfig;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1RedactConfig *redactConfig;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1ReplaceValueConfig *replaceConfig;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1ReplaceWithInfoTypeConfig *replaceWithInfoTypeConfig;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig *timePartConfig;

@end


/**
 *  Privacy metric to compute for reidentification risk analysis.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1PrivacyMetric : GTLRObject

@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1CategoricalStatsConfig *categoricalStatsConfig;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1KAnonymityConfig *kAnonymityConfig;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1KMapEstimationConfig *kMapEstimationConfig;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1LDiversityConfig *lDiversityConfig;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1NumericalStatsConfig *numericalStatsConfig;

@end


/**
 *  A representation of a Datastore property in a projection.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1Projection : GTLRObject

/** The property to project. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1PropertyReference *property;

@end


/**
 *  A reference to a property relative to the Datastore kind expressions.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1PropertyReference : GTLRObject

/**
 *  The name of the property.
 *  If name includes "."s, it may be interpreted as a property name path.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A quasi-identifier column has a custom_tag, used to know which column
 *  in the data corresponds to which column in the statistical model.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1QuasiIdField : GTLRObject

@property(nonatomic, copy, nullable) NSString *customTag;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1FieldId *field;

@end


/**
 *  Generic half-open interval [start, end)
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1Range : GTLRObject

/**
 *  Index of the last character of the range (exclusive).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  Index of the first character of the range (inclusive).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  A condition for determining whether a transformation should be applied to
 *  a field.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1RecordCondition : GTLRObject

@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Expressions *expressions;

@end


/**
 *  Message for a unique key indicating a record that contains a finding.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1RecordKey : GTLRObject

@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1CloudStorageKey *cloudStorageKey;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1DatastoreKey *datastoreKey;

@end


/**
 *  Configuration to suppress records whose suppression conditions evaluate to
 *  true.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1RecordSuppression : GTLRObject

@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1RecordCondition *condition;

@end


/**
 *  A type of transformation that is applied over structured data such as a
 *  table.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1RecordTransformations : GTLRObject

/** Transform the record by applying various field transformations. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1FieldTransformation *> *fieldTransformations;

/**
 *  Configuration defining which records get suppressed entirely. Records that
 *  match any suppression rule are omitted from the output [optional].
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1RecordSuppression *> *recordSuppressions;

@end


/**
 *  Redact a given value. For example, if used with an `InfoTypeTransformation`
 *  transforming PHONE_NUMBER, and input 'My phone number is 206-555-0123', the
 *  output would be 'My phone number is '.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1RedactConfig : GTLRObject
@end


/**
 *  Request to search for potentially sensitive info in a list of items
 *  and replace it with a default or provided content.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1RedactContentRequest : GTLRCollectionObject

/** The configuration for specifying what content to redact from images. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1ImageRedactionConfig *> *imageRedactionConfigs;

/** Configuration for the inspector. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1InspectConfig *inspectConfig;

/**
 *  The list of items to inspect. Up to 100 are allowed per request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1ContentItem *> *items;

/**
 *  The strings to replace findings text findings with. Must specify at least
 *  one of these or one ImageRedactionConfig if redacting images.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1ReplaceConfig *> *replaceConfigs;

@end


/**
 *  Results of redacting a list of items.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1RedactContentResponse : GTLRCollectionObject

/**
 *  The redacted content.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1ContentItem *> *items;

@end


/**
 *  GTLRDLP_GooglePrivacyDlpV2beta1ReplaceConfig
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1ReplaceConfig : GTLRObject

/**
 *  Type of information to replace. Only one ReplaceConfig per info_type
 *  should be provided. If ReplaceConfig does not have an info_type, the DLP
 *  API matches it against all info_types that are found but not specified in
 *  another ReplaceConfig.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1InfoType *infoType;

/** Content replacing sensitive information of given type. Max 256 chars. */
@property(nonatomic, copy, nullable) NSString *replaceWith;

@end


/**
 *  Replace each input value with a given `Value`.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1ReplaceValueConfig : GTLRObject

/** Value to replace it with. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Value *newValue NS_RETURNS_NOT_RETAINED;

@end


/**
 *  Replace each matching finding with the name of the info_type.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1ReplaceWithInfoTypeConfig : GTLRObject
@end


/**
 *  Metadata returned within the
 *  [`riskAnalysis.operations.get`](/dlp/docs/reference/rest/v2beta1/riskAnalysis.operations/get)
 *  for risk analysis.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1RiskAnalysisOperationMetadata : GTLRObject

/** The time which this request was started. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Privacy metric to compute. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1PrivacyMetric *requestedPrivacyMetric;

/** Input dataset to compute metrics over. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1BigQueryTable *requestedSourceTable;

@end


/**
 *  Result of a risk analysis
 *  [`Operation`](/dlp/docs/reference/rest/v2beta1/inspect.operations)
 *  request.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1RiskAnalysisOperationResult : GTLRObject

@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1CategoricalStatsResult *categoricalStatsResult;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1KAnonymityResult *kAnonymityResult;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1KMapEstimationResult *kMapEstimationResult;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1LDiversityResult *lDiversityResult;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1NumericalStatsResult *numericalStatsResult;

@end


/**
 *  GTLRDLP_GooglePrivacyDlpV2beta1Row
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1Row : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1Value *> *values;

@end


/**
 *  Shared message indicating Cloud storage type.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1StorageConfig : GTLRObject

/** BigQuery options specification. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1BigQueryOptions *bigQueryOptions;

/** Google Cloud Storage options specification. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1CloudStorageOptions *cloudStorageOptions;

/** Google Cloud Datastore options specification. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1DatastoreOptions *datastoreOptions;

@end


/**
 *  A collection that informs the user the number of times a particular
 *  `TransformationResultCode` and error details occurred.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1SummaryResult : GTLRObject

/**
 *  code
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1SummaryResult_Code_Error Value
 *        "ERROR"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1SummaryResult_Code_Success Value
 *        "SUCCESS"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1SummaryResult_Code_TransformationResultCodeUnspecified
 *        Value "TRANSFORMATION_RESULT_CODE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *code;

/**
 *  count
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  A place for warnings or errors to show up if a transformation didn't
 *  work as expected.
 */
@property(nonatomic, copy, nullable) NSString *details;

@end


/**
 *  Structured content to inspect. Up to 50,000 `Value`s per request allowed.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1Table : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1FieldId *> *headers;
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1Row *> *rows;

@end


/**
 *  Location of a finding within a `ContentItem.Table`.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1TableLocation : GTLRObject

/**
 *  The zero-based index of the row where the finding is located.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowIndex;

@end


/**
 *  A column with a semantic tag attached.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1TaggedField : GTLRObject

/**
 *  A column can be tagged with a custom tag. In this case, the user must
 *  indicate an auxiliary table that contains statistical information on
 *  the possible values of this column (below).
 */
@property(nonatomic, copy, nullable) NSString *customTag;

/** Identifies the column. [required] */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1FieldId *field;

/**
 *  If no semantic tag is indicated, we infer the statistical model from
 *  the distribution of values in the input data
 */
@property(nonatomic, strong, nullable) GTLRDLP_GoogleProtobufEmpty *inferred;

/**
 *  A column can be tagged with a InfoType to use the relevant public
 *  dataset as a statistical model of population, if available. We
 *  currently support US ZIP codes, region codes, ages and genders.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1InfoType *infoType;

@end


/**
 *  For use with `Date`, `Timestamp`, and `TimeOfDay`, extract or preserve a
 *  portion of the value.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig : GTLRObject

/**
 *  partToExtract
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig_PartToExtract_DayOfMonth
 *        [1-31] (Value: "DAY_OF_MONTH")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig_PartToExtract_DayOfWeek
 *        [1-7] (Value: "DAY_OF_WEEK")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig_PartToExtract_HourOfDay
 *        [0-24] (Value: "HOUR_OF_DAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig_PartToExtract_Month
 *        [1-12] (Value: "MONTH")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig_PartToExtract_TimePartUnspecified
 *        Value "TIME_PART_UNSPECIFIED"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig_PartToExtract_WeekOfYear
 *        [1-52] (Value: "WEEK_OF_YEAR")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2beta1TimePartConfig_PartToExtract_Year
 *        [000-9999] (Value: "YEAR")
 */
@property(nonatomic, copy, nullable) NSString *partToExtract;

@end


/**
 *  Summary of a single tranformation.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1TransformationSummary : GTLRObject

/** Set if the transformation was limited to a specific FieldId. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1FieldId *field;

/**
 *  The field transformation that was applied. This list will contain
 *  multiple only in the case of errors.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1FieldTransformation *> *fieldTransformations;

/** Set if the transformation was limited to a specific info_type. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1InfoType *infoType;

/** The specific suppression option these stats apply to. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1RecordSuppression *recordSuppress;

@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2beta1SummaryResult *> *results;

/** The specific transformation these stats apply to. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1PrimitiveTransformation *transformation;

@end


/**
 *  Use this to have a random data crypto key generated.
 *  It will be discarded after the operation/request finishes.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1TransientCryptoKey : GTLRObject

/**
 *  Name of the key. [required]
 *  This is an arbitrary string used to differentiate different keys.
 *  A unique key is generated per name: two separate `TransientCryptoKey`
 *  protos share the same generated key if their names are the same.
 *  When the data crypto key is generated, this name is not used in any way
 *  (repeating the api call will result in a different key being generated).
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Using raw keys is prone to security risks due to accidentally
 *  leaking the key. Choose another type of key if possible.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1UnwrappedCryptoKey : GTLRObject

/**
 *  The AES 128/192/256 bit key. [required]
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *key;

@end


/**
 *  Set of primitive values supported by the system.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1Value : GTLRObject

/**
 *  booleanValue
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *booleanValue;

@property(nonatomic, strong, nullable) GTLRDLP_GoogleTypeDate *dateValue;

/**
 *  floatValue
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *floatValue;

/**
 *  integerValue
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *integerValue;

@property(nonatomic, copy, nullable) NSString *stringValue;
@property(nonatomic, strong, nullable) GTLRDateTime *timestampValue;
@property(nonatomic, strong, nullable) GTLRDLP_GoogleTypeTimeOfDay *timeValue;

@end


/**
 *  A value of a field, including its frequency.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1ValueFrequency : GTLRObject

/**
 *  How many times the value is contained in the field.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/** A value contained in the field in question. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2beta1Value *value;

@end


/**
 *  Message defining a list of words or phrases to search for in the data.
 */
@interface GTLRDLP_GooglePrivacyDlpV2beta1WordList : GTLRObject

/**
 *  Words or phrases defining the dictionary. The dictionary must contain
 *  at least one phrase and every phrase must contain at least 2 characters
 *  that are letters or digits. [required]
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *words;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRDLP_GoogleProtobufEmpty : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRDLP_GoogleRpcStatus : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GoogleRpcStatus_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRDLP_GoogleRpcStatus_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDLP_GoogleRpcStatus_Details_Item : GTLRObject
@end


/**
 *  Represents a whole calendar date, e.g. date of birth. The time of day and
 *  time zone are either specified elsewhere or are not significant. The date
 *  is relative to the Proleptic Gregorian Calendar. The day may be 0 to
 *  represent a year and month where the day is not significant, e.g. credit
 *  card
 *  expiration date. The year may be 0 to represent a month and day independent
 *  of year, e.g. anniversary date. Related types are google.type.TimeOfDay
 *  and `google.protobuf.Timestamp`.
 */
@interface GTLRDLP_GoogleTypeDate : GTLRObject

/**
 *  Day of month. Must be from 1 to 31 and valid for the year and month, or 0
 *  if specifying a year/month where the day is not significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of year. Must be from 1 to 12.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of date. Must be from 1 to 9999, or 0 if specifying a date without
 *  a year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  Represents a time of day. The date and time zone are either not significant
 *  or are specified elsewhere. An API may choose to allow leap seconds. Related
 *  types are google.type.Date and `google.protobuf.Timestamp`.
 */
@interface GTLRDLP_GoogleTypeTimeOfDay : GTLRObject

/**
 *  Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
 *  to allow the value "24:00:00" for scenarios like business closing time.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hours;

/**
 *  Minutes of hour of day. Must be from 0 to 59.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minutes;

/**
 *  Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Seconds of minutes of the time. Must normally be from 0 to 59. An API may
 *  allow the value 60 if it allows leap-seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
