// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   DLP API (dlp/v2beta1)
// Description:
//   The Google Data Loss Prevention API provides methods for detection of
//   privacy-sensitive fragments in text, images, and Google Cloud Platform
//   storage repositories.
// Documentation:
//   https://cloud.google.com/dlp/docs/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDLP_CategoryDescription;
@class GTLRDLP_CloudStorageKey;
@class GTLRDLP_CloudStorageOptions;
@class GTLRDLP_ContentItem;
@class GTLRDLP_DatastoreKey;
@class GTLRDLP_DatastoreOptions;
@class GTLRDLP_FieldId;
@class GTLRDLP_FileSet;
@class GTLRDLP_Finding;
@class GTLRDLP_ImageLocation;
@class GTLRDLP_InfoType;
@class GTLRDLP_InfoTypeDescription;
@class GTLRDLP_InspectConfig;
@class GTLRDLP_InspectResult;
@class GTLRDLP_Key;
@class GTLRDLP_KindExpression;
@class GTLRDLP_Location;
@class GTLRDLP_Operation;
@class GTLRDLP_Operation_Metadata;
@class GTLRDLP_Operation_Response;
@class GTLRDLP_PartitionId;
@class GTLRDLP_PathElement;
@class GTLRDLP_Projection;
@class GTLRDLP_PropertyReference;
@class GTLRDLP_Range;
@class GTLRDLP_RecordKey;
@class GTLRDLP_ReplaceConfig;
@class GTLRDLP_Status;
@class GTLRDLP_Status_Details_Item;
@class GTLRDLP_StorageConfig;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRDLP_Finding.likelihood

/**
 *  Default value; information with all likelihoods will be included.
 *
 *  Value: "LIKELIHOOD_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDLP_Finding_Likelihood_LikelihoodUnspecified;
/** Value: "LIKELY" */
GTLR_EXTERN NSString * const kGTLRDLP_Finding_Likelihood_Likely;
/**
 *  Some matching elements.
 *
 *  Value: "POSSIBLE"
 */
GTLR_EXTERN NSString * const kGTLRDLP_Finding_Likelihood_Possible;
/** Value: "UNLIKELY" */
GTLR_EXTERN NSString * const kGTLRDLP_Finding_Likelihood_Unlikely;
/**
 *  Many matching elements.
 *
 *  Value: "VERY_LIKELY"
 */
GTLR_EXTERN NSString * const kGTLRDLP_Finding_Likelihood_VeryLikely;
/**
 *  Few matching elements.
 *
 *  Value: "VERY_UNLIKELY"
 */
GTLR_EXTERN NSString * const kGTLRDLP_Finding_Likelihood_VeryUnlikely;

// ----------------------------------------------------------------------------
// GTLRDLP_InspectConfig.minLikelihood

/**
 *  Default value; information with all likelihoods will be included.
 *
 *  Value: "LIKELIHOOD_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDLP_InspectConfig_MinLikelihood_LikelihoodUnspecified;
/** Value: "LIKELY" */
GTLR_EXTERN NSString * const kGTLRDLP_InspectConfig_MinLikelihood_Likely;
/**
 *  Some matching elements.
 *
 *  Value: "POSSIBLE"
 */
GTLR_EXTERN NSString * const kGTLRDLP_InspectConfig_MinLikelihood_Possible;
/** Value: "UNLIKELY" */
GTLR_EXTERN NSString * const kGTLRDLP_InspectConfig_MinLikelihood_Unlikely;
/**
 *  Many matching elements.
 *
 *  Value: "VERY_LIKELY"
 */
GTLR_EXTERN NSString * const kGTLRDLP_InspectConfig_MinLikelihood_VeryLikely;
/**
 *  Few matching elements.
 *
 *  Value: "VERY_UNLIKELY"
 */
GTLR_EXTERN NSString * const kGTLRDLP_InspectConfig_MinLikelihood_VeryUnlikely;

/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRDLP_CancelOperationRequest : GTLRObject
@end


/**
 *  Info Type Category description.
 */
@interface GTLRDLP_CategoryDescription : GTLRObject

/** Human readable form of the category name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Internal name of the category. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Record key for a finding in a Cloud Storage file.
 */
@interface GTLRDLP_CloudStorageKey : GTLRObject

/** Path to the file. */
@property(nonatomic, copy, nullable) NSString *filePath;

/**
 *  Byte offset of the referenced data in the file.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startOffset;

@end


/**
 *  Options defining a file or a set of files (path ending with *) within
 *  a Google Cloud Storage bucket.
 */
@interface GTLRDLP_CloudStorageOptions : GTLRObject

@property(nonatomic, strong, nullable) GTLRDLP_FileSet *fileSet;

@end


/**
 *  Container structure for the content to inspect.
 */
@interface GTLRDLP_ContentItem : GTLRObject

/**
 *  Content data to inspect or redact.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  Type of the content, as defined in Content-Type HTTP header.
 *  Supported types are: all "text" types, octet streams, PNG images,
 *  JPEG images.
 */
@property(nonatomic, copy, nullable) NSString *type;

/** String data to inspect or redact. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Request for scheduling a scan of a data subset from a Google Platform data
 *  repository.
 */
@interface GTLRDLP_CreateInspectOperationRequest : GTLRObject

/** Configuration for the inspector. */
@property(nonatomic, strong, nullable) GTLRDLP_InspectConfig *inspectConfig;

/** Specification of the data set to process. */
@property(nonatomic, strong, nullable) GTLRDLP_StorageConfig *storageConfig;

@end


/**
 *  Record key for a finding in Cloud Datastore.
 */
@interface GTLRDLP_DatastoreKey : GTLRObject

/** Datastore entity key. */
@property(nonatomic, strong, nullable) GTLRDLP_Key *entityKey;

@end


/**
 *  Options defining a data set within Google Cloud Datastore.
 */
@interface GTLRDLP_DatastoreOptions : GTLRObject

/** The kind to process. */
@property(nonatomic, strong, nullable) GTLRDLP_KindExpression *kind;

/**
 *  A partition ID identifies a grouping of entities. The grouping is always
 *  by project and namespace, however the namespace ID may be empty.
 */
@property(nonatomic, strong, nullable) GTLRDLP_PartitionId *partitionId;

/**
 *  Properties to scan. If none are specified, all properties will be scanned
 *  by default.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_Projection *> *projection;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRDLP_Empty : GTLRObject
@end


/**
 *  General identifier of a data field in a storage service.
 */
@interface GTLRDLP_FieldId : GTLRObject

/** Column name describing the field. */
@property(nonatomic, copy, nullable) NSString *columnName;

@end


/**
 *  Set of files to scan.
 */
@interface GTLRDLP_FileSet : GTLRObject

/**
 *  The url, in the format gs://<bucket>/<path>. Trailing wildcard in the
 *  path is allowed.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Container structure describing a single finding within a string or image.
 */
@interface GTLRDLP_Finding : GTLRObject

/** Timestamp when finding was detected. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The specific type of info the string might be. */
@property(nonatomic, strong, nullable) GTLRDLP_InfoType *infoType;

/**
 *  Estimate of how likely it is that the info_type is correct.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_Finding_Likelihood_LikelihoodUnspecified Default value;
 *        information with all likelihoods will be included. (Value:
 *        "LIKELIHOOD_UNSPECIFIED")
 *    @arg @c kGTLRDLP_Finding_Likelihood_Likely Value "LIKELY"
 *    @arg @c kGTLRDLP_Finding_Likelihood_Possible Some matching elements.
 *        (Value: "POSSIBLE")
 *    @arg @c kGTLRDLP_Finding_Likelihood_Unlikely Value "UNLIKELY"
 *    @arg @c kGTLRDLP_Finding_Likelihood_VeryLikely Many matching elements.
 *        (Value: "VERY_LIKELY")
 *    @arg @c kGTLRDLP_Finding_Likelihood_VeryUnlikely Few matching elements.
 *        (Value: "VERY_UNLIKELY")
 */
@property(nonatomic, copy, nullable) NSString *likelihood;

/** Location of the info found. */
@property(nonatomic, strong, nullable) GTLRDLP_Location *location;

/** The specific string that may be potentially sensitive info. */
@property(nonatomic, copy, nullable) NSString *quote;

@end


/**
 *  Bounding box encompassing detected text within an image.
 */
@interface GTLRDLP_ImageLocation : GTLRObject

/**
 *  Height of the bounding box in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *height;

/**
 *  Left coordinate of the bounding box. (0,0) is upper left.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *left;

/**
 *  Top coordinate of the bounding box. (0,0) is upper left.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *top;

/**
 *  Width of the bounding box in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *width;

@end


/**
 *  Type of information detected by the API.
 */
@interface GTLRDLP_InfoType : GTLRObject

/** Name of the information type, provided by the API call ListInfoTypes. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Info type description.
 */
@interface GTLRDLP_InfoTypeDescription : GTLRObject

/** List of categories this info type belongs to. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_CategoryDescription *> *categories;

/** Human readable form of the info type name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Internal name of the info type. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Configuration description of the scanning process.
 *  When used with redactContent only info_types and min_likelihood are
 *  currently
 *  used.
 */
@interface GTLRDLP_InspectConfig : GTLRObject

/**
 *  When true, exclude type information of the findings.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *excludeTypes;

/**
 *  When true, a contextual quote from the data that triggered a finding will
 *  be included in the response; see Finding.quote.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeQuote;

/**
 *  Restrict what info_types to look for. The values must correspond to
 *  InfoType values returned by ListInfoTypes or found in documentation.
 *  Empty info_types runs all enabled detectors.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_InfoType *> *infoTypes;

/**
 *  Limit the number of findings per content item.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxFindings;

/**
 *  Only return findings equal or above this threshold.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_InspectConfig_MinLikelihood_LikelihoodUnspecified Default
 *        value; information with all likelihoods will be included. (Value:
 *        "LIKELIHOOD_UNSPECIFIED")
 *    @arg @c kGTLRDLP_InspectConfig_MinLikelihood_Likely Value "LIKELY"
 *    @arg @c kGTLRDLP_InspectConfig_MinLikelihood_Possible Some matching
 *        elements. (Value: "POSSIBLE")
 *    @arg @c kGTLRDLP_InspectConfig_MinLikelihood_Unlikely Value "UNLIKELY"
 *    @arg @c kGTLRDLP_InspectConfig_MinLikelihood_VeryLikely Many matching
 *        elements. (Value: "VERY_LIKELY")
 *    @arg @c kGTLRDLP_InspectConfig_MinLikelihood_VeryUnlikely Few matching
 *        elements. (Value: "VERY_UNLIKELY")
 */
@property(nonatomic, copy, nullable) NSString *minLikelihood;

@end


/**
 *  Request to search for potentially sensitive info in a list of items.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRDLP_InspectContentRequest : GTLRCollectionObject

/** Configuration for the inspector. */
@property(nonatomic, strong, nullable) GTLRDLP_InspectConfig *inspectConfig;

/**
 *  The list of items to inspect. Items in a single request are
 *  considered "related" unless inspect_config.independent_inputs is true.
 *  Up to 100 are allowed per request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_ContentItem *> *items;

@end


/**
 *  Results of inspecting a list of items.
 */
@interface GTLRDLP_InspectContentResponse : GTLRObject

/**
 *  Each content_item from the request will have a result in this list, in the
 *  same order as the request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_InspectResult *> *results;

@end


/**
 *  All the findings for a single scanned item.
 */
@interface GTLRDLP_InspectResult : GTLRObject

/** List of findings for an item. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_Finding *> *findings;

/**
 *  If true, then this item might have more findings than were returned,
 *  and the findings returned are an arbitrary subset of all findings.
 *  The findings list might be truncated because the input items were too
 *  large, or because the server reached the maximum amount of resources
 *  allowed for a single API call. For best results, divide the input into
 *  smaller batches.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *findingsTruncated;

@end


/**
 *  A unique identifier for a Datastore entity.
 *  If a key's partition ID or any of its path kinds or names are
 *  reserved/read-only, the key is reserved/read-only.
 *  A reserved/read-only key is forbidden in certain documented contexts.
 */
@interface GTLRDLP_Key : GTLRObject

/**
 *  Entities are partitioned into subsets, currently identified by a project
 *  ID and namespace ID.
 *  Queries are scoped to a single partition.
 */
@property(nonatomic, strong, nullable) GTLRDLP_PartitionId *partitionId;

/**
 *  The entity path.
 *  An entity path consists of one or more elements composed of a kind and a
 *  string or numerical identifier, which identify entities. The first
 *  element identifies a _root entity_, the second element identifies
 *  a _child_ of the root entity, the third element identifies a child of the
 *  second entity, and so forth. The entities identified by all prefixes of
 *  the path are called the element's _ancestors_.
 *  A path can never be empty, and a path can have at most 100 elements.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_PathElement *> *path;

@end


/**
 *  A representation of a Datastore kind.
 */
@interface GTLRDLP_KindExpression : GTLRObject

/** The name of the kind. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Response to the ListInfoTypes request.
 */
@interface GTLRDLP_ListInfoTypesResponse : GTLRObject

/** Set of sensitive info types belonging to a category. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_InfoTypeDescription *> *infoTypes;

@end


/**
 *  Response to the ListInspectFindings request.
 */
@interface GTLRDLP_ListInspectFindingsResponse : GTLRObject

/**
 *  If not empty, indicates that there may be more results that match the
 *  request; this value should be passed in a new `ListInspectFindingsRequest`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** The results. */
@property(nonatomic, strong, nullable) GTLRDLP_InspectResult *result;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDLP_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_Operation *> *operations;

@end


/**
 *  Response for ListRootCategories request.
 */
@interface GTLRDLP_ListRootCategoriesResponse : GTLRObject

/** List of all into type categories supported by the API. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_CategoryDescription *> *categories;

@end


/**
 *  Specifies the location of a finding within its source item.
 */
@interface GTLRDLP_Location : GTLRObject

/** Zero-based byte offsets within a content item. */
@property(nonatomic, strong, nullable) GTLRDLP_Range *byteRange;

/**
 *  Character offsets within a content item, included when content type
 *  is a text. Default charset assumed to be UTF-8.
 */
@property(nonatomic, strong, nullable) GTLRDLP_Range *codepointRange;

/** Field id of the field containing the finding. */
@property(nonatomic, strong, nullable) GTLRDLP_FieldId *fieldId;

/** Location within an image's pixels. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_ImageLocation *> *imageBoxes;

/** Key of the finding. */
@property(nonatomic, strong, nullable) GTLRDLP_RecordKey *recordKey;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRDLP_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If true, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRDLP_Status *error;

/** This field will contain an `InspectOperationMetdata` object. */
@property(nonatomic, strong, nullable) GTLRDLP_Operation_Metadata *metadata;

/**
 *  The server-assigned name, The `name` should have the format of
 *  `inspect/operations/<identifier>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** This field will contain an `InspectOperationResult` object. */
@property(nonatomic, strong, nullable) GTLRDLP_Operation_Response *response;

@end


/**
 *  This field will contain an `InspectOperationMetdata` object.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDLP_Operation_Metadata : GTLRObject
@end


/**
 *  This field will contain an `InspectOperationResult` object.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDLP_Operation_Response : GTLRObject
@end


/**
 *  Datastore partition ID.
 *  A partition ID identifies a grouping of entities. The grouping is always
 *  by project and namespace, however the namespace ID may be empty.
 *  A partition ID contains several dimensions:
 *  project ID and namespace ID.
 */
@interface GTLRDLP_PartitionId : GTLRObject

/**
 *  If not empty, the ID of the database to which the entities
 *  belong.
 */
@property(nonatomic, copy, nullable) NSString *databaseId;

/** If not empty, the ID of the namespace to which the entities belong. */
@property(nonatomic, copy, nullable) NSString *namespaceId;

/** The ID of the project to which the entities belong. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  A (kind, ID/name) pair used to construct a key path.
 *  If either name or ID is set, the element is complete.
 *  If neither is set, the element is incomplete.
 */
@interface GTLRDLP_PathElement : GTLRObject

/**
 *  The auto-allocated ID of the entity.
 *  Never equal to zero. Values less than zero are discouraged and may not
 *  be supported in the future.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

/**
 *  The kind of the entity.
 *  A kind matching regex `__.*__` is reserved/read-only.
 *  A kind must not contain more than 1500 bytes when UTF-8 encoded.
 *  Cannot be `""`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the entity.
 *  A name matching regex `__.*__` is reserved/read-only.
 *  A name must not be more than 1500 bytes when UTF-8 encoded.
 *  Cannot be `""`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A representation of a Datastore property in a projection.
 */
@interface GTLRDLP_Projection : GTLRObject

/** The property to project. */
@property(nonatomic, strong, nullable) GTLRDLP_PropertyReference *property;

@end


/**
 *  A reference to a property relative to the Datastore kind expressions.
 */
@interface GTLRDLP_PropertyReference : GTLRObject

/**
 *  The name of the property.
 *  If name includes "."s, it may be interpreted as a property name path.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Generic half-open interval [start, end)
 */
@interface GTLRDLP_Range : GTLRObject

/**
 *  Index of the last character of the range (exclusive).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  Index of the first character of the range (inclusive).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  Message for a unique key indicating a record that contains a finding.
 */
@interface GTLRDLP_RecordKey : GTLRObject

@property(nonatomic, strong, nullable) GTLRDLP_CloudStorageKey *cloudStorageKey;
@property(nonatomic, strong, nullable) GTLRDLP_DatastoreKey *datastoreKey;

@end


/**
 *  Request to search for potentially sensitive info in a list of items
 *  and replace it with a default or provided content.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRDLP_RedactContentRequest : GTLRCollectionObject

/** Configuration for the inspector. */
@property(nonatomic, strong, nullable) GTLRDLP_InspectConfig *inspectConfig;

/**
 *  The list of items to inspect. Up to 100 are allowed per request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_ContentItem *> *items;

/** The strings to replace findings with. Must specify at least one. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_ReplaceConfig *> *replaceConfigs;

@end


/**
 *  Results of deidentifying a list of items.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRDLP_RedactContentResponse : GTLRCollectionObject

/**
 *  The redacted content.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_ContentItem *> *items;

@end


/**
 *  GTLRDLP_ReplaceConfig
 */
@interface GTLRDLP_ReplaceConfig : GTLRObject

/**
 *  Type of information to replace. Only one ReplaceConfig per info_type
 *  should be provided. If ReplaceConfig does not have an info_type, we'll
 *  match it against all info_types that are found but not specified in
 *  another ReplaceConfig.
 */
@property(nonatomic, strong, nullable) GTLRDLP_InfoType *infoType;

/** Content replacing sensitive information of given type. Max 256 chars. */
@property(nonatomic, copy, nullable) NSString *replaceWith;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` which can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting purpose.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRDLP_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There will be a
 *  common set of message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRDLP_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDLP_Status_Details_Item : GTLRObject
@end


/**
 *  Shared message indicating Cloud storage type.
 */
@interface GTLRDLP_StorageConfig : GTLRObject

/** Google Cloud Storage options specification. */
@property(nonatomic, strong, nullable) GTLRDLP_CloudStorageOptions *cloudStorageOptions;

/** Google Cloud Datastore options specification. */
@property(nonatomic, strong, nullable) GTLRDLP_DatastoreOptions *datastoreOptions;

@end

NS_ASSUME_NONNULL_END
