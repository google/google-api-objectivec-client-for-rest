// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Billing Budget API (billingbudgets/v1beta1)
// Description:
//   The Cloud Billing Budget API stores Cloud Billing budgets, which define a
//   budget plan and the rules to execute as spend is tracked against that plan.
// Documentation:
//   https://cloud.google.com/billing/docs/how-to/budget-api-overview

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1AllUpdatesRule;
@class GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1Budget;
@class GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1BudgetAmount;
@class GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1Filter;
@class GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1LastPeriodAmount;
@class GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1ThresholdRule;
@class GTLRCloudBillingBudget_GoogleTypeMoney;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1Filter.creditTypesTreatment

/** Value: "CREDIT_TYPES_TREATMENT_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1Filter_CreditTypesTreatment_CreditTypesTreatmentUnspecified;
/**
 *  All types of credit are added to the net cost to determine the spend for
 *  threshold calculations.
 *
 *  Value: "EXCLUDE_ALL_CREDITS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1Filter_CreditTypesTreatment_ExcludeAllCredits;
/**
 *  All types of credit are subtracted from the gross cost to determine the
 *  spend for threshold calculations.
 *
 *  Value: "INCLUDE_ALL_CREDITS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1Filter_CreditTypesTreatment_IncludeAllCredits;

// ----------------------------------------------------------------------------
// GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1ThresholdRule.spendBasis

/**
 *  Unspecified threshold basis.
 *
 *  Value: "BASIS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1ThresholdRule_SpendBasis_BasisUnspecified;
/**
 *  Use current spend as the basis for comparison against the threshold.
 *
 *  Value: "CURRENT_SPEND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1ThresholdRule_SpendBasis_CurrentSpend;
/**
 *  Use forecasted spend for the period as the basis for comparison against
 *  the threshold.
 *
 *  Value: "FORECASTED_SPEND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1ThresholdRule_SpendBasis_ForecastedSpend;

/**
 *  AllUpdatesRule defines notifications that are sent on every update to the
 *  billing account's spend, regardless of the thresholds defined using
 *  threshold rules.
 */
@interface GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1AllUpdatesRule : GTLRObject

/**
 *  Required. The name of the Cloud Pub/Sub topic where budget related messages
 *  will be
 *  published, in the form `projects/{project_id}/topics/{topic_id}`. Updates
 *  are sent at regular intervals to the topic.
 *  The topic needs to be created before the budget is created; see
 *  https://cloud.google.com/billing/docs/how-to/budgets#manage-notifications
 *  for more details.
 *  Caller is expected to have
 *  `pubsub.topics.setIamPolicy` permission on the topic when it's set for a
 *  budget, otherwise, the API call will fail with PERMISSION_DENIED. See
 *  https://cloud.google.com/pubsub/docs/access-control for more details on
 *  Pub/Sub roles and permissions.
 */
@property(nonatomic, copy, nullable) NSString *pubsubTopic;

/**
 *  Required. The schema version of the notification.
 *  Only "1.0" is accepted. It represents the JSON schema as defined in
 *  https://cloud.google.com/billing/docs/how-to/budgets#notification_format
 */
@property(nonatomic, copy, nullable) NSString *schemaVersion;

@end


/**
 *  A budget is a plan that describes what you expect to spend on Cloud
 *  projects, plus the rules to execute as spend is tracked against that plan,
 *  (for example, send an alert when 90% of the target spend is met).
 *  Currently all plans are monthly budgets so the usage period(s) tracked are
 *  implied (calendar months of usage back-to-back).
 */
@interface GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1Budget : GTLRObject

/**
 *  Optional. Rules to apply to all updates to the actual spend, regardless
 *  of the thresholds set in `threshold_rules`.
 */
@property(nonatomic, strong, nullable) GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1AllUpdatesRule *allUpdatesRule;

/** Required. Budgeted amount. */
@property(nonatomic, strong, nullable) GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1BudgetAmount *amount;

/**
 *  Optional. Filters that define which resources are used to compute
 *  the actual spend against the budget.
 */
@property(nonatomic, strong, nullable) GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1Filter *budgetFilter;

/**
 *  User data for display name in UI.
 *  Validation: <= 60 chars.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Optional. Etag to validate that the object is unchanged for a
 *  read-modify-write operation.
 *  An empty etag will cause an update to overwrite other changes.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. Resource name of the budget.
 *  The resource name implies the scope of a budget. Values are of the form
 *  `billingAccounts/{billingAccountId}/budgets/{budgetId}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Rules that trigger alerts (notifications of thresholds
 *  being crossed) when spend exceeds the specified percentages of the budget.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1ThresholdRule *> *thresholdRules;

@end


/**
 *  The budgeted amount for each usage period.
 */
@interface GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1BudgetAmount : GTLRObject

/**
 *  Use the last period's actual spend as the budget for the present period.
 */
@property(nonatomic, strong, nullable) GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1LastPeriodAmount *lastPeriodAmount;

/**
 *  A specified amount to use as the budget.
 *  `currency_code` is optional. If specified, it must match the
 *  currency of the billing account. The `currency_code` is provided on
 *  output.
 */
@property(nonatomic, strong, nullable) GTLRCloudBillingBudget_GoogleTypeMoney *specifiedAmount;

@end


/**
 *  Request for CreateBudget
 */
@interface GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1CreateBudgetRequest : GTLRObject

/** Required. Budget to create. */
@property(nonatomic, strong, nullable) GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1Budget *budget;

@end


/**
 *  A filter for a budget, limiting the scope of the cost to calculate.
 */
@interface GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1Filter : GTLRObject

/**
 *  Optional. If not set, default behavior is `INCLUDE_ALL_CREDITS`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1Filter_CreditTypesTreatment_CreditTypesTreatmentUnspecified
 *        Value "CREDIT_TYPES_TREATMENT_UNSPECIFIED"
 *    @arg @c kGTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1Filter_CreditTypesTreatment_ExcludeAllCredits
 *        All types of credit are added to the net cost to determine the spend
 *        for
 *        threshold calculations. (Value: "EXCLUDE_ALL_CREDITS")
 *    @arg @c kGTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1Filter_CreditTypesTreatment_IncludeAllCredits
 *        All types of credit are subtracted from the gross cost to determine
 *        the
 *        spend for threshold calculations. (Value: "INCLUDE_ALL_CREDITS")
 */
@property(nonatomic, copy, nullable) NSString *creditTypesTreatment;

/**
 *  Optional. A set of projects of the form `projects/{project}`,
 *  specifying that usage from only this set of projects should be
 *  included in the budget. If omitted, the report will include all usage for
 *  the billing account, regardless of which project the usage occurred on.
 *  Only zero or one project can be specified currently.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *projects;

/**
 *  Optional. A set of services of the form `services/{service_id}`,
 *  specifying that usage from only this set of services should be
 *  included in the budget. If omitted, the report will include usage for
 *  all the services.
 *  The service names are available through the Catalog API:
 *  https://cloud.google.com/billing/v1/how-tos/catalog-api.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *services;

@end


/**
 *  Describes a budget amount targeted to last period's spend.
 *  At this time, the amount is automatically 100% of last period's spend;
 *  that is, there are no other options yet.
 *  Future configuration will be described here (for example, configuring a
 *  percentage of last period's spend).
 */
@interface GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1LastPeriodAmount : GTLRObject
@end


/**
 *  Response for ListBudgets
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "budgets" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1ListBudgetsResponse : GTLRCollectionObject

/**
 *  List of the budgets owned by the requested billing account.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1Budget *> *budgets;

/**
 *  If not empty, indicates that there may be more budgets that match the
 *  request; this value should be passed in a new `ListBudgetsRequest`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  ThresholdRule contains a definition of a threshold which triggers
 *  an alert (a notification of a threshold being crossed) to be sent when
 *  spend goes above the specified amount.
 *  Alerts are automatically e-mailed to users with the Billing Account
 *  Administrator role or the Billing Account User role.
 *  The thresholds here have no effect on notifications sent to anything
 *  configured under `Budget.all_updates_rule`.
 */
@interface GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1ThresholdRule : GTLRObject

/**
 *  Optional. The type of basis used to determine if spend has passed the
 *  threshold. Behavior defaults to CURRENT_SPEND if not set.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1ThresholdRule_SpendBasis_BasisUnspecified
 *        Unspecified threshold basis. (Value: "BASIS_UNSPECIFIED")
 *    @arg @c kGTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1ThresholdRule_SpendBasis_CurrentSpend
 *        Use current spend as the basis for comparison against the threshold.
 *        (Value: "CURRENT_SPEND")
 *    @arg @c kGTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1ThresholdRule_SpendBasis_ForecastedSpend
 *        Use forecasted spend for the period as the basis for comparison
 *        against
 *        the threshold. (Value: "FORECASTED_SPEND")
 */
@property(nonatomic, copy, nullable) NSString *spendBasis;

/**
 *  Required. Send an alert when this threshold is exceeded.
 *  This is a 1.0-based percentage, so 0.5 = 50%.
 *  Validation: non-negative number.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *thresholdPercent;

@end


/**
 *  Request for UpdateBudget
 */
@interface GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1UpdateBudgetRequest : GTLRObject

/**
 *  Required. The updated budget object.
 *  The budget to update is specified by the budget name in the budget.
 */
@property(nonatomic, strong, nullable) GTLRCloudBillingBudget_GoogleCloudBillingBudgetsV1beta1Budget *budget;

/**
 *  Optional. Indicates which fields in the provided budget to update.
 *  Read-only fields (such as `name`) cannot be changed. If this is not
 *  provided, then only fields with non-default values from the request are
 *  updated. See
 *  https://developers.google.com/protocol-buffers/docs/proto3#default for more
 *  details about default values.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRCloudBillingBudget_GoogleProtobufEmpty : GTLRObject
@end


/**
 *  Represents an amount of money with its currency type.
 */
@interface GTLRCloudBillingBudget_GoogleTypeMoney : GTLRObject

/** The 3-letter currency code defined in ISO 4217. */
@property(nonatomic, copy, nullable) NSString *currencyCode;

/**
 *  Number of nano (10^-9) units of the amount.
 *  The value must be between -999,999,999 and +999,999,999 inclusive.
 *  If `units` is positive, `nanos` must be positive or zero.
 *  If `units` is zero, `nanos` can be positive, zero, or negative.
 *  If `units` is negative, `nanos` must be negative or zero.
 *  For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  The whole units of the amount.
 *  For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *units;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
