// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Source Repositories API (sourcerepo/v1)
// Description:
//   Access source code repositories hosted by Google.
// Documentation:
//   https://cloud.google.com/source-repositories/docs/apis

#import "GTLRCloudSourceRepositoriesObjects.h"

// ----------------------------------------------------------------------------
// Constants

// GTLRCloudSourceRepositories_AuditLogConfig.logType
NSString * const kGTLRCloudSourceRepositories_AuditLogConfig_LogType_AdminRead = @"ADMIN_READ";
NSString * const kGTLRCloudSourceRepositories_AuditLogConfig_LogType_DataRead = @"DATA_READ";
NSString * const kGTLRCloudSourceRepositories_AuditLogConfig_LogType_DataWrite = @"DATA_WRITE";
NSString * const kGTLRCloudSourceRepositories_AuditLogConfig_LogType_LogTypeUnspecified = @"LOG_TYPE_UNSPECIFIED";

// GTLRCloudSourceRepositories_CloudAuditOptions.logName
NSString * const kGTLRCloudSourceRepositories_CloudAuditOptions_LogName_AdminActivity = @"ADMIN_ACTIVITY";
NSString * const kGTLRCloudSourceRepositories_CloudAuditOptions_LogName_DataAccess = @"DATA_ACCESS";
NSString * const kGTLRCloudSourceRepositories_CloudAuditOptions_LogName_UnspecifiedLogName = @"UNSPECIFIED_LOG_NAME";

// GTLRCloudSourceRepositories_Condition.iam
NSString * const kGTLRCloudSourceRepositories_Condition_Iam_Approver = @"APPROVER";
NSString * const kGTLRCloudSourceRepositories_Condition_Iam_Attribution = @"ATTRIBUTION";
NSString * const kGTLRCloudSourceRepositories_Condition_Iam_Authority = @"AUTHORITY";
NSString * const kGTLRCloudSourceRepositories_Condition_Iam_JustificationType = @"JUSTIFICATION_TYPE";
NSString * const kGTLRCloudSourceRepositories_Condition_Iam_NoAttr = @"NO_ATTR";

// GTLRCloudSourceRepositories_Condition.op
NSString * const kGTLRCloudSourceRepositories_Condition_Op_Discharged = @"DISCHARGED";
NSString * const kGTLRCloudSourceRepositories_Condition_Op_Equals = @"EQUALS";
NSString * const kGTLRCloudSourceRepositories_Condition_Op_In  = @"IN";
NSString * const kGTLRCloudSourceRepositories_Condition_Op_NoOp = @"NO_OP";
NSString * const kGTLRCloudSourceRepositories_Condition_Op_NotEquals = @"NOT_EQUALS";
NSString * const kGTLRCloudSourceRepositories_Condition_Op_NotIn = @"NOT_IN";

// GTLRCloudSourceRepositories_Condition.sys
NSString * const kGTLRCloudSourceRepositories_Condition_Sys_Ip = @"IP";
NSString * const kGTLRCloudSourceRepositories_Condition_Sys_Name = @"NAME";
NSString * const kGTLRCloudSourceRepositories_Condition_Sys_NoAttr = @"NO_ATTR";
NSString * const kGTLRCloudSourceRepositories_Condition_Sys_Region = @"REGION";
NSString * const kGTLRCloudSourceRepositories_Condition_Sys_Service = @"SERVICE";

// GTLRCloudSourceRepositories_Rule.action
NSString * const kGTLRCloudSourceRepositories_Rule_Action_Allow = @"ALLOW";
NSString * const kGTLRCloudSourceRepositories_Rule_Action_AllowWithLog = @"ALLOW_WITH_LOG";
NSString * const kGTLRCloudSourceRepositories_Rule_Action_Deny = @"DENY";
NSString * const kGTLRCloudSourceRepositories_Rule_Action_DenyWithLog = @"DENY_WITH_LOG";
NSString * const kGTLRCloudSourceRepositories_Rule_Action_Log  = @"LOG";
NSString * const kGTLRCloudSourceRepositories_Rule_Action_NoAction = @"NO_ACTION";

// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_AuditConfig
//

@implementation GTLRCloudSourceRepositories_AuditConfig
@dynamic auditLogConfigs, exemptedMembers, service;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditLogConfigs" : [GTLRCloudSourceRepositories_AuditLogConfig class],
    @"exemptedMembers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_AuditLogConfig
//

@implementation GTLRCloudSourceRepositories_AuditLogConfig
@dynamic exemptedMembers, logType;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"exemptedMembers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_Binding
//

@implementation GTLRCloudSourceRepositories_Binding
@dynamic members, role;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"members" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_CloudAuditOptions
//

@implementation GTLRCloudSourceRepositories_CloudAuditOptions
@dynamic logName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_Condition
//

@implementation GTLRCloudSourceRepositories_Condition
@dynamic iam, op, svc, sys, value, values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"values" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_CounterOptions
//

@implementation GTLRCloudSourceRepositories_CounterOptions
@dynamic field, metric;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_DataAccessOptions
//

@implementation GTLRCloudSourceRepositories_DataAccessOptions
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_Empty
//

@implementation GTLRCloudSourceRepositories_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_ListReposResponse
//

@implementation GTLRCloudSourceRepositories_ListReposResponse
@dynamic nextPageToken, repos;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"repos" : [GTLRCloudSourceRepositories_Repo class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"repos";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_LogConfig
//

@implementation GTLRCloudSourceRepositories_LogConfig
@dynamic cloudAudit, counter, dataAccess;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_MirrorConfig
//

@implementation GTLRCloudSourceRepositories_MirrorConfig
@dynamic deployKeyId, url, webhookId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_Policy
//

@implementation GTLRCloudSourceRepositories_Policy
@dynamic auditConfigs, bindings, ETag, iamOwned, rules, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditConfigs" : [GTLRCloudSourceRepositories_AuditConfig class],
    @"bindings" : [GTLRCloudSourceRepositories_Binding class],
    @"rules" : [GTLRCloudSourceRepositories_Rule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_Repo
//

@implementation GTLRCloudSourceRepositories_Repo
@dynamic mirrorConfig, name, size, url;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_Rule
//

@implementation GTLRCloudSourceRepositories_Rule
@dynamic action, conditions, descriptionProperty, inProperty, logConfig, notIn,
         permissions;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"inProperty" : @"in"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"conditions" : [GTLRCloudSourceRepositories_Condition class],
    @"in" : [NSString class],
    @"logConfig" : [GTLRCloudSourceRepositories_LogConfig class],
    @"notIn" : [NSString class],
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_SetIamPolicyRequest
//

@implementation GTLRCloudSourceRepositories_SetIamPolicyRequest
@dynamic policy, updateMask;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_TestIamPermissionsRequest
//

@implementation GTLRCloudSourceRepositories_TestIamPermissionsRequest
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudSourceRepositories_TestIamPermissionsResponse
//

@implementation GTLRCloudSourceRepositories_TestIamPermissionsResponse
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end
