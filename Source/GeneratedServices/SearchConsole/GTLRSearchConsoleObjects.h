// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Search Console API (searchconsole/v1)
// Description:
//   The Search Console API provides access to both Search Console data
//   (verified users only) and to public information on an URL basis (anyone)
// Documentation:
//   https://developers.google.com/webmaster-tools/search-console-api/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRSearchConsole_ApiDataRow;
@class GTLRSearchConsole_ApiDimensionFilter;
@class GTLRSearchConsole_ApiDimensionFilterGroup;
@class GTLRSearchConsole_BlockedResource;
@class GTLRSearchConsole_Image;
@class GTLRSearchConsole_MobileFriendlyIssue;
@class GTLRSearchConsole_ResourceIssue;
@class GTLRSearchConsole_TestStatus;
@class GTLRSearchConsole_WmxSite;
@class GTLRSearchConsole_WmxSitemap;
@class GTLRSearchConsole_WmxSitemapContent;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRSearchConsole_ApiDimensionFilter.dimension

/** Value: "COUNTRY" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_Dimension_Country;
/** Value: "DEVICE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_Dimension_Device;
/** Value: "PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_Dimension_Page;
/** Value: "QUERY" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_Dimension_Query;
/** Value: "SEARCH_APPEARANCE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_Dimension_SearchAppearance;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_ApiDimensionFilter.operatorProperty

/** Value: "CONTAINS" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_Contains;
/** Value: "EQUALS" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_Equals;
/** Value: "NOT_CONTAINS" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_NotContains;
/** Value: "NOT_EQUALS" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_NotEquals;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_ApiDimensionFilterGroup.groupType

/** Value: "AND" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilterGroup_GroupType_And;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_MobileFriendlyIssue.rule

/**
 *  Viewsport is not specified using the meta viewport tag. [Learn more]
 *  (https://support.google.com/webmasters/answer/6352293#viewport_not_configured).
 *
 *  Value: "CONFIGURE_VIEWPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileFriendlyIssue_Rule_ConfigureViewport;
/**
 *  Viewport defined to a fixed width. [Learn more]
 *  (https://support.google.com/webmasters/answer/6352293#fixed-width_viewport).
 *
 *  Value: "FIXED_WIDTH_VIEWPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileFriendlyIssue_Rule_FixedWidthViewport;
/**
 *  Unknown rule. Sorry, we don't have any description for the rule that was
 *  broken.
 *
 *  Value: "MOBILE_FRIENDLY_RULE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileFriendlyIssue_Rule_MobileFriendlyRuleUnspecified;
/**
 *  Content not sized to viewport. [Learn more]
 *  (https://support.google.com/webmasters/answer/6352293#content_not_sized_to_viewport).
 *
 *  Value: "SIZE_CONTENT_TO_VIEWPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileFriendlyIssue_Rule_SizeContentToViewport;
/**
 *  Touch elements are too close to each other. [Learn more]
 *  (https://support.google.com/webmasters/answer/6352293#touch_elements_too_close).
 *
 *  Value: "TAP_TARGETS_TOO_CLOSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileFriendlyIssue_Rule_TapTargetsTooClose;
/**
 *  Font size is too small for easy reading on a small screen. [Learn More]
 *  (https://support.google.com/webmasters/answer/6352293#small_font_size).
 *
 *  Value: "USE_LEGIBLE_FONT_SIZES"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileFriendlyIssue_Rule_UseLegibleFontSizes;
/**
 *  Plugins incompatible with mobile devices are being used. [Learn more]
 *  (https://support.google.com/webmasters/answer/6352293#flash_usage).
 *
 *  Value: "USES_INCOMPATIBLE_PLUGINS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileFriendlyIssue_Rule_UsesIncompatiblePlugins;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_RunMobileFriendlyTestResponse.mobileFriendliness

/**
 *  The page is mobile friendly.
 *
 *  Value: "MOBILE_FRIENDLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_RunMobileFriendlyTestResponse_MobileFriendliness_MobileFriendly;
/**
 *  Internal error when running this test. Please try running the test again.
 *
 *  Value: "MOBILE_FRIENDLY_TEST_RESULT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_RunMobileFriendlyTestResponse_MobileFriendliness_MobileFriendlyTestResultUnspecified;
/**
 *  The page is not mobile friendly.
 *
 *  Value: "NOT_MOBILE_FRIENDLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_RunMobileFriendlyTestResponse_MobileFriendliness_NotMobileFriendly;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_SearchAnalyticsQueryRequest.aggregationType

/** Value: "AUTO" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_AggregationType_Auto;
/** Value: "BY_PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_AggregationType_ByPage;
/** Value: "BY_PROPERTY" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_AggregationType_ByProperty;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_SearchAnalyticsQueryRequest.dataState

/**
 *  Include all data, full and partial.
 *
 *  Value: "ALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_DataState_All;
/**
 *  Default value, should not be used.
 *
 *  Value: "DATA_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_DataState_DataStateUnspecified;
/**
 *  Include full final data only, without partial.
 *
 *  Value: "FINAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_DataState_Final;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_SearchAnalyticsQueryRequest.dimensions

/** Value: "COUNTRY" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Dimensions_Country;
/** Value: "DATE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Dimensions_Date;
/** Value: "DEVICE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Dimensions_Device;
/** Value: "PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Dimensions_Page;
/** Value: "QUERY" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Dimensions_Query;
/** Value: "SEARCH_APPEARANCE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Dimensions_SearchAppearance;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_SearchAnalyticsQueryRequest.searchType

/** Value: "IMAGE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_Image;
/** Value: "NEWS" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_News;
/** Value: "VIDEO" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_Video;
/** Value: "WEB" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_Web;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_SearchAnalyticsQueryResponse.responseAggregationType

/** Value: "AUTO" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryResponse_ResponseAggregationType_Auto;
/** Value: "BY_PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryResponse_ResponseAggregationType_ByPage;
/** Value: "BY_PROPERTY" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryResponse_ResponseAggregationType_ByProperty;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_TestStatus.status

/**
 *  Inspection has completed without errors.
 *
 *  Value: "COMPLETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_TestStatus_Status_Complete;
/**
 *  Inspection terminated in an error state. This indicates a problem in
 *  Google's infrastructure, not a user error. Please try again later.
 *
 *  Value: "INTERNAL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_TestStatus_Status_InternalError;
/**
 *  Google can not access the URL because of a user error such as a robots.txt
 *  blockage, a 403 or 500 code etc. Please make sure that the URL provided is
 *  accessible by Googlebot and is not password protected.
 *
 *  Value: "PAGE_UNREACHABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_TestStatus_Status_PageUnreachable;
/**
 *  Internal error when running this test. Please try running the test again.
 *
 *  Value: "TEST_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_TestStatus_Status_TestStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_WmxSite.permissionLevel

/**
 *  Full users can access all data, and perform most of the operations.
 *
 *  Value: "SITE_FULL_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSite_PermissionLevel_SiteFullUser;
/**
 *  Owner has complete access to the site.
 *
 *  Value: "SITE_OWNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSite_PermissionLevel_SiteOwner;
/** Value: "SITE_PERMISSION_LEVEL_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSite_PermissionLevel_SitePermissionLevelUnspecified;
/**
 *  Restricted users can access most of the data, and perform some operations.
 *
 *  Value: "SITE_RESTRICTED_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSite_PermissionLevel_SiteRestrictedUser;
/**
 *  Unverified user has no access to site's data.
 *
 *  Value: "SITE_UNVERIFIED_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSite_PermissionLevel_SiteUnverifiedUser;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_WmxSitemap.type

/** Value: "ATOM_FEED" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemap_Type_AtomFeed;
/** Value: "NOT_SITEMAP" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemap_Type_NotSitemap;
/** Value: "OCEANFRONT" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemap_Type_Oceanfront;
/**
 *  Unsupported sitemap types.
 *
 *  Value: "PATTERN_SITEMAP"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemap_Type_PatternSitemap;
/** Value: "RSS_FEED" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemap_Type_RssFeed;
/** Value: "SITEMAP" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemap_Type_Sitemap;
/** Value: "URL_LIST" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemap_Type_UrlList;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_WmxSitemapContent.type

/** Value: "ANDROID_APP" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_AndroidApp;
/**
 *  Unsupported content type.
 *
 *  Value: "DATA_FEED_ELEMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_DataFeedElement;
/** Value: "IMAGE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_Image;
/** Value: "IOS_APP" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_IosApp;
/** Value: "MOBILE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_Mobile;
/** Value: "NEWS" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_News;
/**
 *  Unsupported content type.
 *
 *  Value: "PATTERN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_Pattern;
/** Value: "VIDEO" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_Video;
/** Value: "WEB" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_Web;

/**
 *  GTLRSearchConsole_ApiDataRow
 */
@interface GTLRSearchConsole_ApiDataRow : GTLRObject

/**
 *  clicks
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *clicks;

/**
 *  ctr
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ctr;

/**
 *  impressions
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *impressions;

@property(nonatomic, strong, nullable) NSArray<NSString *> *keys;

/**
 *  position
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *position;

@end


/**
 *  A filter test to be applied to each row in the data set, where a match can
 *  return the row. Filters are string comparisons, and values and dimension
 *  names are not case-sensitive. Individual filters are either AND'ed or OR'ed
 *  within their parent filter group, according to the group's group type. You
 *  do not need to group by a specified dimension to filter against it.
 */
@interface GTLRSearchConsole_ApiDimensionFilter : GTLRObject

/**
 *  dimension
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_Dimension_Country Value
 *        "COUNTRY"
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_Dimension_Device Value
 *        "DEVICE"
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_Dimension_Page Value "PAGE"
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_Dimension_Query Value
 *        "QUERY"
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_Dimension_SearchAppearance
 *        Value "SEARCH_APPEARANCE"
 */
@property(nonatomic, copy, nullable) NSString *dimension;

@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  operatorProperty
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_Contains
 *        Value "CONTAINS"
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_Equals
 *        Value "EQUALS"
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_NotContains
 *        Value "NOT_CONTAINS"
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_NotEquals
 *        Value "NOT_EQUALS"
 *
 *  Remapped to 'operatorProperty' to avoid language reserved word 'operator'.
 */
@property(nonatomic, copy, nullable) NSString *operatorProperty;

@end


/**
 *  A set of dimension value filters to test against each row. Only rows that
 *  pass all filter groups will be returned. All results within a filter group
 *  are either AND'ed or OR'ed together, depending on the group type selected.
 *  All filter groups are AND'ed together.
 */
@interface GTLRSearchConsole_ApiDimensionFilterGroup : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_ApiDimensionFilter *> *filters;

/**
 *  groupType
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilterGroup_GroupType_And Value
 *        "AND"
 */
@property(nonatomic, copy, nullable) NSString *groupType;

@end


/**
 *  Blocked resource.
 */
@interface GTLRSearchConsole_BlockedResource : GTLRObject

/** URL of the blocked resource. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Describe image data.
 */
@interface GTLRSearchConsole_Image : GTLRObject

/**
 *  Image data in format determined by the mime type. Currently, the format will
 *  always be "image/png", but this might change in the future.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/** The mime-type of the image data. */
@property(nonatomic, copy, nullable) NSString *mimeType;

@end


/**
 *  Mobile-friendly issue.
 */
@interface GTLRSearchConsole_MobileFriendlyIssue : GTLRObject

/**
 *  Rule violated.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_MobileFriendlyIssue_Rule_ConfigureViewport
 *        Viewsport is not specified using the meta viewport tag. [Learn more]
 *        (https://support.google.com/webmasters/answer/6352293#viewport_not_configured).
 *        (Value: "CONFIGURE_VIEWPORT")
 *    @arg @c kGTLRSearchConsole_MobileFriendlyIssue_Rule_FixedWidthViewport
 *        Viewport defined to a fixed width. [Learn more]
 *        (https://support.google.com/webmasters/answer/6352293#fixed-width_viewport).
 *        (Value: "FIXED_WIDTH_VIEWPORT")
 *    @arg @c kGTLRSearchConsole_MobileFriendlyIssue_Rule_MobileFriendlyRuleUnspecified
 *        Unknown rule. Sorry, we don't have any description for the rule that
 *        was broken. (Value: "MOBILE_FRIENDLY_RULE_UNSPECIFIED")
 *    @arg @c kGTLRSearchConsole_MobileFriendlyIssue_Rule_SizeContentToViewport
 *        Content not sized to viewport. [Learn more]
 *        (https://support.google.com/webmasters/answer/6352293#content_not_sized_to_viewport).
 *        (Value: "SIZE_CONTENT_TO_VIEWPORT")
 *    @arg @c kGTLRSearchConsole_MobileFriendlyIssue_Rule_TapTargetsTooClose
 *        Touch elements are too close to each other. [Learn more]
 *        (https://support.google.com/webmasters/answer/6352293#touch_elements_too_close).
 *        (Value: "TAP_TARGETS_TOO_CLOSE")
 *    @arg @c kGTLRSearchConsole_MobileFriendlyIssue_Rule_UseLegibleFontSizes
 *        Font size is too small for easy reading on a small screen. [Learn
 *        More]
 *        (https://support.google.com/webmasters/answer/6352293#small_font_size).
 *        (Value: "USE_LEGIBLE_FONT_SIZES")
 *    @arg @c kGTLRSearchConsole_MobileFriendlyIssue_Rule_UsesIncompatiblePlugins
 *        Plugins incompatible with mobile devices are being used. [Learn more]
 *        (https://support.google.com/webmasters/answer/6352293#flash_usage).
 *        (Value: "USES_INCOMPATIBLE_PLUGINS")
 */
@property(nonatomic, copy, nullable) NSString *rule;

@end


/**
 *  Information about a resource with issue.
 */
@interface GTLRSearchConsole_ResourceIssue : GTLRObject

/** Describes a blocked resource issue. */
@property(nonatomic, strong, nullable) GTLRSearchConsole_BlockedResource *blockedResource;

@end


/**
 *  Mobile-friendly test request.
 */
@interface GTLRSearchConsole_RunMobileFriendlyTestRequest : GTLRObject

/**
 *  Whether or not screenshot is requested. Default is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestScreenshot;

/** URL for inspection. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Mobile-friendly test response, including mobile-friendly issues and resource
 *  issues.
 */
@interface GTLRSearchConsole_RunMobileFriendlyTestResponse : GTLRObject

/**
 *  Test verdict, whether the page is mobile friendly or not.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_RunMobileFriendlyTestResponse_MobileFriendliness_MobileFriendly
 *        The page is mobile friendly. (Value: "MOBILE_FRIENDLY")
 *    @arg @c kGTLRSearchConsole_RunMobileFriendlyTestResponse_MobileFriendliness_MobileFriendlyTestResultUnspecified
 *        Internal error when running this test. Please try running the test
 *        again. (Value: "MOBILE_FRIENDLY_TEST_RESULT_UNSPECIFIED")
 *    @arg @c kGTLRSearchConsole_RunMobileFriendlyTestResponse_MobileFriendliness_NotMobileFriendly
 *        The page is not mobile friendly. (Value: "NOT_MOBILE_FRIENDLY")
 */
@property(nonatomic, copy, nullable) NSString *mobileFriendliness;

/** List of mobile-usability issues. */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_MobileFriendlyIssue *> *mobileFriendlyIssues;

/** Information about embedded resources issues. */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_ResourceIssue *> *resourceIssues;

/** Screenshot of the requested URL. */
@property(nonatomic, strong, nullable) GTLRSearchConsole_Image *screenshot;

/** Final state of the test, can be either complete or an error. */
@property(nonatomic, strong, nullable) GTLRSearchConsole_TestStatus *testStatus;

@end


/**
 *  GTLRSearchConsole_SearchAnalyticsQueryRequest
 */
@interface GTLRSearchConsole_SearchAnalyticsQueryRequest : GTLRObject

/**
 *  [Optional; Default is \\"auto\\"] How data is aggregated. If aggregated by
 *  property, all data for the same property is aggregated; if aggregated by
 *  page, all data is aggregated by canonical URI. If you filter or group by
 *  page, choose AUTO; otherwise you can aggregate either by property or by
 *  page, depending on how you want your data calculated; see the help
 *  documentation to learn how data is calculated differently by site versus by
 *  page. **Note:** If you group or filter by page, you cannot aggregate by
 *  property. If you specify any value other than AUTO, the aggregation type in
 *  the result will match the requested type, or if you request an invalid type,
 *  you will get an error. The API will never change your aggregation type if
 *  the requested type is invalid.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_AggregationType_Auto
 *        Value "AUTO"
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_AggregationType_ByPage
 *        Value "BY_PAGE"
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_AggregationType_ByProperty
 *        Value "BY_PROPERTY"
 */
@property(nonatomic, copy, nullable) NSString *aggregationType;

/**
 *  The data state to be fetched, can be full or all, the latter including full
 *  and partial data.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_DataState_All
 *        Include all data, full and partial. (Value: "ALL")
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_DataState_DataStateUnspecified
 *        Default value, should not be used. (Value: "DATA_STATE_UNSPECIFIED")
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_DataState_Final
 *        Include full final data only, without partial. (Value: "FINAL")
 */
@property(nonatomic, copy, nullable) NSString *dataState;

/**
 *  [Optional] Zero or more filters to apply to the dimension grouping values;
 *  for example, 'query contains \\"buy\\"' to see only data where the query
 *  string contains the substring \\"buy\\" (not case-sensitive). You can filter
 *  by a dimension without grouping by it.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_ApiDimensionFilterGroup *> *dimensionFilterGroups;

/**
 *  [Optional] Zero or more dimensions to group results by. Dimensions are the
 *  group-by values in the Search Analytics page. Dimensions are combined to
 *  create a unique row key for each row. Results are grouped in the order that
 *  you supply these dimensions.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dimensions;

/**
 *  [Required] End date of the requested date range, in YYYY-MM-DD format, in
 *  PST (UTC - 8:00). Must be greater than or equal to the start date. This
 *  value is included in the range.
 */
@property(nonatomic, copy, nullable) NSString *endDate;

/**
 *  [Optional; Default is 1000] The maximum number of rows to return. Must be a
 *  number from 1 to 25,000 (inclusive).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowLimit;

/**
 *  [Optional; Default is \\"web\\"] The search type to filter for.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_Image
 *        Value "IMAGE"
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_News
 *        Value "NEWS"
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_Video
 *        Value "VIDEO"
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_Web
 *        Value "WEB"
 */
@property(nonatomic, copy, nullable) NSString *searchType;

/**
 *  [Required] Start date of the requested date range, in YYYY-MM-DD format, in
 *  PST time (UTC - 8:00). Must be less than or equal to the end date. This
 *  value is included in the range.
 */
@property(nonatomic, copy, nullable) NSString *startDate;

/**
 *  [Optional; Default is 0] Zero-based index of the first row in the response.
 *  Must be a non-negative number.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startRow;

@end


/**
 *  A list of rows, one per result, grouped by key. Metrics in each row are
 *  aggregated for all data grouped by that key either by page or property, as
 *  specified by the aggregation type parameter.
 */
@interface GTLRSearchConsole_SearchAnalyticsQueryResponse : GTLRObject

/**
 *  How the results were aggregated.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryResponse_ResponseAggregationType_Auto
 *        Value "AUTO"
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryResponse_ResponseAggregationType_ByPage
 *        Value "BY_PAGE"
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryResponse_ResponseAggregationType_ByProperty
 *        Value "BY_PROPERTY"
 */
@property(nonatomic, copy, nullable) NSString *responseAggregationType;

/**
 *  A list of rows grouped by the key values in the order given in the query.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_ApiDataRow *> *rows;

@end


/**
 *  List of sitemaps.
 */
@interface GTLRSearchConsole_SitemapsListResponse : GTLRObject

/**
 *  Contains detailed information about a specific URL submitted as a
 *  [sitemap](https://support.google.com/webmasters/answer/156184).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_WmxSitemap *> *sitemap;

@end


/**
 *  List of sites with access level information.
 */
@interface GTLRSearchConsole_SitesListResponse : GTLRObject

/**
 *  Contains permission level information about a Search Console site. For more
 *  information, see [Permissions in Search
 *  Console](https://support.google.com/webmasters/answer/2451999).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_WmxSite *> *siteEntry;

@end


/**
 *  Final state of the test, including error details if necessary.
 */
@interface GTLRSearchConsole_TestStatus : GTLRObject

/** Error details if applicable. */
@property(nonatomic, copy, nullable) NSString *details;

/**
 *  Status of the test.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_TestStatus_Status_Complete Inspection has
 *        completed without errors. (Value: "COMPLETE")
 *    @arg @c kGTLRSearchConsole_TestStatus_Status_InternalError Inspection
 *        terminated in an error state. This indicates a problem in Google's
 *        infrastructure, not a user error. Please try again later. (Value:
 *        "INTERNAL_ERROR")
 *    @arg @c kGTLRSearchConsole_TestStatus_Status_PageUnreachable Google can
 *        not access the URL because of a user error such as a robots.txt
 *        blockage, a 403 or 500 code etc. Please make sure that the URL
 *        provided is accessible by Googlebot and is not password protected.
 *        (Value: "PAGE_UNREACHABLE")
 *    @arg @c kGTLRSearchConsole_TestStatus_Status_TestStatusUnspecified
 *        Internal error when running this test. Please try running the test
 *        again. (Value: "TEST_STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  Contains permission level information about a Search Console site. For more
 *  information, see [Permissions in Search
 *  Console](https://support.google.com/webmasters/answer/2451999).
 */
@interface GTLRSearchConsole_WmxSite : GTLRObject

/**
 *  The user's permission level for the site.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_WmxSite_PermissionLevel_SiteFullUser Full users
 *        can access all data, and perform most of the operations. (Value:
 *        "SITE_FULL_USER")
 *    @arg @c kGTLRSearchConsole_WmxSite_PermissionLevel_SiteOwner Owner has
 *        complete access to the site. (Value: "SITE_OWNER")
 *    @arg @c kGTLRSearchConsole_WmxSite_PermissionLevel_SitePermissionLevelUnspecified
 *        Value "SITE_PERMISSION_LEVEL_UNSPECIFIED"
 *    @arg @c kGTLRSearchConsole_WmxSite_PermissionLevel_SiteRestrictedUser
 *        Restricted users can access most of the data, and perform some
 *        operations. (Value: "SITE_RESTRICTED_USER")
 *    @arg @c kGTLRSearchConsole_WmxSite_PermissionLevel_SiteUnverifiedUser
 *        Unverified user has no access to site's data. (Value:
 *        "SITE_UNVERIFIED_USER")
 */
@property(nonatomic, copy, nullable) NSString *permissionLevel;

/** The URL of the site. */
@property(nonatomic, copy, nullable) NSString *siteUrl;

@end


/**
 *  Contains detailed information about a specific URL submitted as a
 *  [sitemap](https://support.google.com/webmasters/answer/156184).
 */
@interface GTLRSearchConsole_WmxSitemap : GTLRObject

/** The various content types in the sitemap. */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_WmxSitemapContent *> *contents;

/**
 *  Number of errors in the sitemap. These are issues with the sitemap itself
 *  that need to be fixed before it can be processed correctly.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *errors;

/**
 *  If true, the sitemap has not been processed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isPending;

/**
 *  If true, the sitemap is a collection of sitemaps.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isSitemapsIndex;

/**
 *  Date & time in which this sitemap was last downloaded. Date format is in RFC
 *  3339 format (yyyy-mm-dd).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastDownloaded;

/**
 *  Date & time in which this sitemap was submitted. Date format is in RFC 3339
 *  format (yyyy-mm-dd).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastSubmitted;

/** The url of the sitemap. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  The type of the sitemap. For example: `rssFeed`.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_WmxSitemap_Type_AtomFeed Value "ATOM_FEED"
 *    @arg @c kGTLRSearchConsole_WmxSitemap_Type_NotSitemap Value "NOT_SITEMAP"
 *    @arg @c kGTLRSearchConsole_WmxSitemap_Type_Oceanfront Value "OCEANFRONT"
 *    @arg @c kGTLRSearchConsole_WmxSitemap_Type_PatternSitemap Unsupported
 *        sitemap types. (Value: "PATTERN_SITEMAP")
 *    @arg @c kGTLRSearchConsole_WmxSitemap_Type_RssFeed Value "RSS_FEED"
 *    @arg @c kGTLRSearchConsole_WmxSitemap_Type_Sitemap Value "SITEMAP"
 *    @arg @c kGTLRSearchConsole_WmxSitemap_Type_UrlList Value "URL_LIST"
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Number of warnings for the sitemap. These are generally non-critical issues
 *  with URLs in the sitemaps.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *warnings;

@end


/**
 *  Information about the various content types in the sitemap.
 */
@interface GTLRSearchConsole_WmxSitemapContent : GTLRObject

/**
 *  The number of URLs from the sitemap that were indexed (of the content type).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *indexed;

/**
 *  The number of URLs in the sitemap (of the content type).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *submitted;

/**
 *  The specific type of content in this sitemap. For example: `web`.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_AndroidApp Value
 *        "ANDROID_APP"
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_DataFeedElement
 *        Unsupported content type. (Value: "DATA_FEED_ELEMENT")
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_Image Value "IMAGE"
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_IosApp Value "IOS_APP"
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_Mobile Value "MOBILE"
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_News Value "NEWS"
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_Pattern Unsupported
 *        content type. (Value: "PATTERN")
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_Video Value "VIDEO"
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_Web Value "WEB"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
