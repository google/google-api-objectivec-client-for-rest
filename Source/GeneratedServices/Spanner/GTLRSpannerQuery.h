// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Spanner API (spanner/v1)
// Description:
//   Cloud Spanner is a managed, mission-critical, globally consistent and
//   scalable relational database service.
// Documentation:
//   https://cloud.google.com/spanner/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRSpanner_BeginTransactionRequest;
@class GTLRSpanner_CommitRequest;
@class GTLRSpanner_CreateDatabaseRequest;
@class GTLRSpanner_CreateInstanceRequest;
@class GTLRSpanner_CreateSessionRequest;
@class GTLRSpanner_ExecuteSqlRequest;
@class GTLRSpanner_GetIamPolicyRequest;
@class GTLRSpanner_PartitionQueryRequest;
@class GTLRSpanner_PartitionReadRequest;
@class GTLRSpanner_ReadRequest;
@class GTLRSpanner_RollbackRequest;
@class GTLRSpanner_SetIamPolicyRequest;
@class GTLRSpanner_TestIamPermissionsRequest;
@class GTLRSpanner_UpdateDatabaseDdlRequest;
@class GTLRSpanner_UpdateInstanceRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Spanner query classes.
 */
@interface GTLRSpannerQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets information about a particular instance configuration.
 *
 *  Method: spanner.projects.instanceConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstanceConfigsGet : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstanceConfigsGetWithname:]

/**
 *  Required. The name of the requested instance configuration. Values are of
 *  the form `projects/<project>/instanceConfigs/<config>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_InstanceConfig.
 *
 *  Gets information about a particular instance configuration.
 *
 *  @param name Required. The name of the requested instance configuration.
 *    Values are of
 *    the form `projects/<project>/instanceConfigs/<config>`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstanceConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the supported instance configurations for a given project.
 *
 *  Method: spanner.projects.instanceConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstanceConfigsList : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstanceConfigsListWithparent:]

/**
 *  Number of instance configurations to be returned in the response. If 0 or
 *  less, defaults to the server's maximum allowed page size.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  If non-empty, `page_token` should contain a
 *  next_page_token
 *  from a previous ListInstanceConfigsResponse.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the project for which a list of supported instance
 *  configurations is requested. Values are of the form
 *  `projects/<project>`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_ListInstanceConfigsResponse.
 *
 *  Lists the supported instance configurations for a given project.
 *
 *  @param parent Required. The name of the project for which a list of
 *    supported instance
 *    configurations is requested. Values are of the form
 *    `projects/<project>`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstanceConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates an instance and begins preparing it to begin serving. The
 *  returned long-running operation
 *  can be used to track the progress of preparing the new
 *  instance. The instance name is assigned by the caller. If the
 *  named instance already exists, `CreateInstance` returns
 *  `ALREADY_EXISTS`.
 *  Immediately upon completion of this request:
 *  * The instance is readable via the API, with all requested attributes
 *  but no allocated resources. Its state is `CREATING`.
 *  Until completion of the returned operation:
 *  * Cancelling the operation renders the instance immediately unreadable
 *  via the API.
 *  * The instance can be deleted.
 *  * All other attempts to modify the instance are rejected.
 *  Upon completion of the returned operation:
 *  * Billing for all successfully-allocated resources begins (some types
 *  may have lower than the requested levels).
 *  * Databases can be created in the instance.
 *  * The instance's allocated resource levels are readable via the API.
 *  * The instance's state becomes `READY`.
 *  The returned long-running operation will
 *  have a name of the format `<instance_name>/operations/<operation_id>` and
 *  can be used to track creation of the instance. The
 *  metadata field type is
 *  CreateInstanceMetadata.
 *  The response field type is
 *  Instance, if successful.
 *
 *  Method: spanner.projects.instances.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesCreate : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesCreateWithObject:parent:]

/**
 *  Required. The name of the project in which to create the instance. Values
 *  are of the form `projects/<project>`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Creates an instance and begins preparing it to begin serving. The
 *  returned long-running operation
 *  can be used to track the progress of preparing the new
 *  instance. The instance name is assigned by the caller. If the
 *  named instance already exists, `CreateInstance` returns
 *  `ALREADY_EXISTS`.
 *  Immediately upon completion of this request:
 *  * The instance is readable via the API, with all requested attributes
 *  but no allocated resources. Its state is `CREATING`.
 *  Until completion of the returned operation:
 *  * Cancelling the operation renders the instance immediately unreadable
 *  via the API.
 *  * The instance can be deleted.
 *  * All other attempts to modify the instance are rejected.
 *  Upon completion of the returned operation:
 *  * Billing for all successfully-allocated resources begins (some types
 *  may have lower than the requested levels).
 *  * Databases can be created in the instance.
 *  * The instance's allocated resource levels are readable via the API.
 *  * The instance's state becomes `READY`.
 *  The returned long-running operation will
 *  have a name of the format `<instance_name>/operations/<operation_id>` and
 *  can be used to track creation of the instance. The
 *  metadata field type is
 *  CreateInstanceMetadata.
 *  The response field type is
 *  Instance, if successful.
 *
 *  @param object The @c GTLRSpanner_CreateInstanceRequest to include in the
 *    query.
 *  @param parent Required. The name of the project in which to create the
 *    instance. Values
 *    are of the form `projects/<project>`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesCreate
 */
+ (instancetype)queryWithObject:(GTLRSpanner_CreateInstanceRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a new Cloud Spanner database and starts to prepare it for serving.
 *  The returned long-running operation will
 *  have a name of the format `<database_name>/operations/<operation_id>` and
 *  can be used to track preparation of the database. The
 *  metadata field type is
 *  CreateDatabaseMetadata. The
 *  response field type is
 *  Database, if successful.
 *
 *  Method: spanner.projects.instances.databases.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesCreate : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesCreateWithObject:parent:]

/**
 *  Required. The name of the instance that will serve the new database.
 *  Values are of the form `projects/<project>/instances/<instance>`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Creates a new Cloud Spanner database and starts to prepare it for serving.
 *  The returned long-running operation will
 *  have a name of the format `<database_name>/operations/<operation_id>` and
 *  can be used to track preparation of the database. The
 *  metadata field type is
 *  CreateDatabaseMetadata. The
 *  response field type is
 *  Database, if successful.
 *
 *  @param object The @c GTLRSpanner_CreateDatabaseRequest to include in the
 *    query.
 *  @param parent Required. The name of the instance that will serve the new
 *    database.
 *    Values are of the form `projects/<project>/instances/<instance>`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesCreate
 */
+ (instancetype)queryWithObject:(GTLRSpanner_CreateDatabaseRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Drops (aka deletes) a Cloud Spanner database.
 *
 *  Method: spanner.projects.instances.databases.dropDatabase
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesDropDatabase : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesDropDatabaseWithdatabase:]

/** Required. The database to be dropped. */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Drops (aka deletes) a Cloud Spanner database.
 *
 *  @param database Required. The database to be dropped.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesDropDatabase
 */
+ (instancetype)queryWithDatabase:(NSString *)database;

@end

/**
 *  Gets the state of a Cloud Spanner database.
 *
 *  Method: spanner.projects.instances.databases.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesGet : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesGetWithname:]

/**
 *  Required. The name of the requested database. Values are of the form
 *  `projects/<project>/instances/<instance>/databases/<database>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Database.
 *
 *  Gets the state of a Cloud Spanner database.
 *
 *  @param name Required. The name of the requested database. Values are of the
 *    form
 *    `projects/<project>/instances/<instance>/databases/<database>`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the schema of a Cloud Spanner database as a list of formatted
 *  DDL statements. This method does not show pending schema updates, those may
 *  be queried using the Operations API.
 *
 *  Method: spanner.projects.instances.databases.getDdl
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesGetDdl : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesGetDdlWithdatabase:]

/** Required. The database whose schema we wish to get. */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRSpanner_GetDatabaseDdlResponse.
 *
 *  Returns the schema of a Cloud Spanner database as a list of formatted
 *  DDL statements. This method does not show pending schema updates, those may
 *  be queried using the Operations API.
 *
 *  @param database Required. The database whose schema we wish to get.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesGetDdl
 */
+ (instancetype)queryWithDatabase:(NSString *)database;

@end

/**
 *  Gets the access control policy for a database resource.
 *  Returns an empty policy if a database exists but does
 *  not have a policy set.
 *  Authorization requires `spanner.databases.getIamPolicy` permission on
 *  resource.
 *
 *  Method: spanner.projects.instances.databases.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesGetIamPolicy : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesGetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The Cloud Spanner resource for which the policy is being
 *  retrieved. The format is `projects/<project ID>/instances/<instance ID>` for
 *  instance resources and `projects/<project ID>/instances/<instance
 *  ID>/databases/<database ID>` for database resources.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSpanner_Policy.
 *
 *  Gets the access control policy for a database resource.
 *  Returns an empty policy if a database exists but does
 *  not have a policy set.
 *  Authorization requires `spanner.databases.getIamPolicy` permission on
 *  resource.
 *
 *  @param object The @c GTLRSpanner_GetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The Cloud Spanner resource for which the policy is
 *    being retrieved. The format is `projects/<project ID>/instances/<instance
 *    ID>` for instance resources and `projects/<project ID>/instances/<instance
 *    ID>/databases/<database ID>` for database resources.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRSpanner_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists Cloud Spanner databases.
 *
 *  Method: spanner.projects.instances.databases.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesList : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesListWithparent:]

/**
 *  Number of databases to be returned in the response. If 0 or less,
 *  defaults to the server's maximum allowed page size.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  If non-empty, `page_token` should contain a
 *  next_page_token from a
 *  previous ListDatabasesResponse.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The instance whose databases should be listed.
 *  Values are of the form `projects/<project>/instances/<instance>`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_ListDatabasesResponse.
 *
 *  Lists Cloud Spanner databases.
 *
 *  @param parent Required. The instance whose databases should be listed.
 *    Values are of the form `projects/<project>/instances/<instance>`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not
 *  guaranteed. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use
 *  Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation,
 *  the operation is not deleted; instead, it becomes an operation with
 *  an Operation.error value with a google.rpc.Status.code of 1,
 *  corresponding to `Code.CANCELLED`.
 *
 *  Method: spanner.projects.instances.databases.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesOperationsCancel : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesOperationsCancelWithname:]

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not
 *  guaranteed. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use
 *  Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation,
 *  the operation is not deleted; instead, it becomes an operation with
 *  an Operation.error value with a google.rpc.Status.code of 1,
 *  corresponding to `Code.CANCELLED`.
 *
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesOperationsCancel
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: spanner.projects.instances.databases.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesOperationsDelete : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesOperationsDeleteWithname:]

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: spanner.projects.instances.databases.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesOperationsGet : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *  NOTE: the `name` binding allows API services to override the binding
 *  to use different resource name schemes, such as `users/ * /operations`. To
 *  override the binding, API services can add a binding such as
 *  `"/v1/{name=users/ *}/operations"` to their service configuration.
 *  For backwards compatibility, the default name includes the operations
 *  collection id, however overriding users must ensure the name binding
 *  is the parent resource, without the operations collection id.
 *
 *  Method: spanner.projects.instances.databases.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesOperationsList : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesOperationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRSpanner_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *  NOTE: the `name` binding allows API services to override the binding
 *  to use different resource name schemes, such as `users/ * /operations`. To
 *  override the binding, API services can add a binding such as
 *  `"/v1/{name=users/ *}/operations"` to their service configuration.
 *  For backwards compatibility, the default name includes the operations
 *  collection id, however overriding users must ensure the name binding
 *  is the parent resource, without the operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Begins a new transaction. This step can often be skipped:
 *  Read, ExecuteSql and
 *  Commit can begin a new transaction as a
 *  side-effect.
 *
 *  Method: spanner.projects.instances.databases.sessions.beginTransaction
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsBeginTransaction : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesSessionsBeginTransactionWithObject:session:]

/** Required. The session in which the transaction runs. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_Transaction.
 *
 *  Begins a new transaction. This step can often be skipped:
 *  Read, ExecuteSql and
 *  Commit can begin a new transaction as a
 *  side-effect.
 *
 *  @param object The @c GTLRSpanner_BeginTransactionRequest to include in the
 *    query.
 *  @param session Required. The session in which the transaction runs.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsBeginTransaction
 */
+ (instancetype)queryWithObject:(GTLRSpanner_BeginTransactionRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Commits a transaction. The request includes the mutations to be
 *  applied to rows in the database.
 *  `Commit` might return an `ABORTED` error. This can occur at any time;
 *  commonly, the cause is conflicts with concurrent
 *  transactions. However, it can also happen for a variety of other
 *  reasons. If `Commit` returns `ABORTED`, the caller should re-attempt
 *  the transaction from the beginning, re-using the same session.
 *
 *  Method: spanner.projects.instances.databases.sessions.commit
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsCommit : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesSessionsCommitWithObject:session:]

/**
 *  Required. The session in which the transaction to be committed is running.
 */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_CommitResponse.
 *
 *  Commits a transaction. The request includes the mutations to be
 *  applied to rows in the database.
 *  `Commit` might return an `ABORTED` error. This can occur at any time;
 *  commonly, the cause is conflicts with concurrent
 *  transactions. However, it can also happen for a variety of other
 *  reasons. If `Commit` returns `ABORTED`, the caller should re-attempt
 *  the transaction from the beginning, re-using the same session.
 *
 *  @param object The @c GTLRSpanner_CommitRequest to include in the query.
 *  @param session Required. The session in which the transaction to be
 *    committed is running.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsCommit
 */
+ (instancetype)queryWithObject:(GTLRSpanner_CommitRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Creates a new session. A session can be used to perform
 *  transactions that read and/or modify data in a Cloud Spanner database.
 *  Sessions are meant to be reused for many consecutive
 *  transactions.
 *  Sessions can only execute one transaction at a time. To execute
 *  multiple concurrent read-write/write-only transactions, create
 *  multiple sessions. Note that standalone reads and queries use a
 *  transaction internally, and count toward the one transaction
 *  limit.
 *  Cloud Spanner limits the number of sessions that can exist at any given
 *  time; thus, it is a good idea to delete idle and/or unneeded sessions.
 *  Aside from explicit deletes, Cloud Spanner can delete sessions for which no
 *  operations are sent for more than an hour. If a session is deleted,
 *  requests to it return `NOT_FOUND`.
 *  Idle sessions can be kept alive by sending a trivial SQL query
 *  periodically, e.g., `"SELECT 1"`.
 *
 *  Method: spanner.projects.instances.databases.sessions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsCreate : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesSessionsCreateWithObject:database:]

/** Required. The database in which the new session is created. */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRSpanner_Session.
 *
 *  Creates a new session. A session can be used to perform
 *  transactions that read and/or modify data in a Cloud Spanner database.
 *  Sessions are meant to be reused for many consecutive
 *  transactions.
 *  Sessions can only execute one transaction at a time. To execute
 *  multiple concurrent read-write/write-only transactions, create
 *  multiple sessions. Note that standalone reads and queries use a
 *  transaction internally, and count toward the one transaction
 *  limit.
 *  Cloud Spanner limits the number of sessions that can exist at any given
 *  time; thus, it is a good idea to delete idle and/or unneeded sessions.
 *  Aside from explicit deletes, Cloud Spanner can delete sessions for which no
 *  operations are sent for more than an hour. If a session is deleted,
 *  requests to it return `NOT_FOUND`.
 *  Idle sessions can be kept alive by sending a trivial SQL query
 *  periodically, e.g., `"SELECT 1"`.
 *
 *  @param object The @c GTLRSpanner_CreateSessionRequest to include in the
 *    query.
 *  @param database Required. The database in which the new session is created.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsCreate
 */
+ (instancetype)queryWithObject:(GTLRSpanner_CreateSessionRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Ends a session, releasing server resources associated with it.
 *
 *  Method: spanner.projects.instances.databases.sessions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsDelete : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesSessionsDeleteWithname:]

/** Required. The name of the session to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Ends a session, releasing server resources associated with it.
 *
 *  @param name Required. The name of the session to delete.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Executes an SQL statement, returning all results in a single reply. This
 *  method cannot be used to return a result set larger than 10 MiB;
 *  if the query yields more data than that, the query fails with
 *  a `FAILED_PRECONDITION` error.
 *  Operations inside read-write transactions might return `ABORTED`. If
 *  this occurs, the application should restart the transaction from
 *  the beginning. See Transaction for more details.
 *  Larger result sets can be fetched in streaming fashion by calling
 *  ExecuteStreamingSql instead.
 *
 *  Method: spanner.projects.instances.databases.sessions.executeSql
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsExecuteSql : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesSessionsExecuteSqlWithObject:session:]

/** Required. The session in which the SQL query should be performed. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_ResultSet.
 *
 *  Executes an SQL statement, returning all results in a single reply. This
 *  method cannot be used to return a result set larger than 10 MiB;
 *  if the query yields more data than that, the query fails with
 *  a `FAILED_PRECONDITION` error.
 *  Operations inside read-write transactions might return `ABORTED`. If
 *  this occurs, the application should restart the transaction from
 *  the beginning. See Transaction for more details.
 *  Larger result sets can be fetched in streaming fashion by calling
 *  ExecuteStreamingSql instead.
 *
 *  @param object The @c GTLRSpanner_ExecuteSqlRequest to include in the query.
 *  @param session Required. The session in which the SQL query should be
 *    performed.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsExecuteSql
 */
+ (instancetype)queryWithObject:(GTLRSpanner_ExecuteSqlRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Like ExecuteSql, except returns the result
 *  set as a stream. Unlike ExecuteSql, there
 *  is no limit on the size of the returned result set. However, no
 *  individual row in the result set can exceed 100 MiB, and no
 *  column value can exceed 10 MiB.
 *
 *  Method: spanner.projects.instances.databases.sessions.executeStreamingSql
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsExecuteStreamingSql : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesSessionsExecuteStreamingSqlWithObject:session:]

/** Required. The session in which the SQL query should be performed. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_PartialResultSet.
 *
 *  Like ExecuteSql, except returns the result
 *  set as a stream. Unlike ExecuteSql, there
 *  is no limit on the size of the returned result set. However, no
 *  individual row in the result set can exceed 100 MiB, and no
 *  column value can exceed 10 MiB.
 *
 *  @param object The @c GTLRSpanner_ExecuteSqlRequest to include in the query.
 *  @param session Required. The session in which the SQL query should be
 *    performed.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsExecuteStreamingSql
 */
+ (instancetype)queryWithObject:(GTLRSpanner_ExecuteSqlRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Gets a session. Returns `NOT_FOUND` if the session does not exist.
 *  This is mainly useful for determining whether a session is still
 *  alive.
 *
 *  Method: spanner.projects.instances.databases.sessions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsGet : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesSessionsGetWithname:]

/** Required. The name of the session to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Session.
 *
 *  Gets a session. Returns `NOT_FOUND` if the session does not exist.
 *  This is mainly useful for determining whether a session is still
 *  alive.
 *
 *  @param name Required. The name of the session to retrieve.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all sessions in a given database.
 *
 *  Method: spanner.projects.instances.databases.sessions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsList : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesSessionsListWithdatabase:]

/** Required. The database in which to list sessions. */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  An expression for filtering the results of the request. Filter rules are
 *  case insensitive. The fields eligible for filtering are:
 *  * `labels.key` where key is the name of a label
 *  Some examples of using filters are:
 *  * `labels.env:*` --> The session has the label "env".
 *  * `labels.env:dev` --> The session has the label "env" and the value of
 *  the label contains the string "dev".
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Number of sessions to be returned in the response. If 0 or less, defaults
 *  to the server's maximum allowed page size.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  If non-empty, `page_token` should contain a
 *  next_page_token from a previous
 *  ListSessionsResponse.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRSpanner_ListSessionsResponse.
 *
 *  Lists all sessions in a given database.
 *
 *  @param database Required. The database in which to list sessions.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithDatabase:(NSString *)database;

@end

/**
 *  Creates a set of partition tokens that can be used to execute a query
 *  operation in parallel. Each of the returned partition tokens can be used
 *  by ExecuteStreamingSql to specify a subset
 *  of the query result to read. The same session and read-only transaction
 *  must be used by the PartitionQueryRequest used to create the
 *  partition tokens and the ExecuteSqlRequests that use the partition tokens.
 *  Partition tokens become invalid when the session used to create them
 *  is deleted, is idle for too long, begins a new transaction, or becomes too
 *  old. When any of these happen, it is not possible to resume the query, and
 *  the whole operation must be restarted from the beginning.
 *
 *  Method: spanner.projects.instances.databases.sessions.partitionQuery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsPartitionQuery : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesSessionsPartitionQueryWithObject:session:]

/** Required. The session used to create the partitions. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_PartitionResponse.
 *
 *  Creates a set of partition tokens that can be used to execute a query
 *  operation in parallel. Each of the returned partition tokens can be used
 *  by ExecuteStreamingSql to specify a subset
 *  of the query result to read. The same session and read-only transaction
 *  must be used by the PartitionQueryRequest used to create the
 *  partition tokens and the ExecuteSqlRequests that use the partition tokens.
 *  Partition tokens become invalid when the session used to create them
 *  is deleted, is idle for too long, begins a new transaction, or becomes too
 *  old. When any of these happen, it is not possible to resume the query, and
 *  the whole operation must be restarted from the beginning.
 *
 *  @param object The @c GTLRSpanner_PartitionQueryRequest to include in the
 *    query.
 *  @param session Required. The session used to create the partitions.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsPartitionQuery
 */
+ (instancetype)queryWithObject:(GTLRSpanner_PartitionQueryRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Creates a set of partition tokens that can be used to execute a read
 *  operation in parallel. Each of the returned partition tokens can be used
 *  by StreamingRead to specify a subset of the read
 *  result to read. The same session and read-only transaction must be used by
 *  the PartitionReadRequest used to create the partition tokens and the
 *  ReadRequests that use the partition tokens. There are no ordering
 *  guarantees on rows returned among the returned partition tokens, or even
 *  within each individual StreamingRead call issued with a partition_token.
 *  Partition tokens become invalid when the session used to create them
 *  is deleted, is idle for too long, begins a new transaction, or becomes too
 *  old. When any of these happen, it is not possible to resume the read, and
 *  the whole operation must be restarted from the beginning.
 *
 *  Method: spanner.projects.instances.databases.sessions.partitionRead
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsPartitionRead : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesSessionsPartitionReadWithObject:session:]

/** Required. The session used to create the partitions. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_PartitionResponse.
 *
 *  Creates a set of partition tokens that can be used to execute a read
 *  operation in parallel. Each of the returned partition tokens can be used
 *  by StreamingRead to specify a subset of the read
 *  result to read. The same session and read-only transaction must be used by
 *  the PartitionReadRequest used to create the partition tokens and the
 *  ReadRequests that use the partition tokens. There are no ordering
 *  guarantees on rows returned among the returned partition tokens, or even
 *  within each individual StreamingRead call issued with a partition_token.
 *  Partition tokens become invalid when the session used to create them
 *  is deleted, is idle for too long, begins a new transaction, or becomes too
 *  old. When any of these happen, it is not possible to resume the read, and
 *  the whole operation must be restarted from the beginning.
 *
 *  @param object The @c GTLRSpanner_PartitionReadRequest to include in the
 *    query.
 *  @param session Required. The session used to create the partitions.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsPartitionRead
 */
+ (instancetype)queryWithObject:(GTLRSpanner_PartitionReadRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Reads rows from the database using key lookups and scans, as a
 *  simple key/value style alternative to
 *  ExecuteSql. This method cannot be used to
 *  return a result set larger than 10 MiB; if the read matches more
 *  data than that, the read fails with a `FAILED_PRECONDITION`
 *  error.
 *  Reads inside read-write transactions might return `ABORTED`. If
 *  this occurs, the application should restart the transaction from
 *  the beginning. See Transaction for more details.
 *  Larger result sets can be yielded in streaming fashion by calling
 *  StreamingRead instead.
 *
 *  Method: spanner.projects.instances.databases.sessions.read
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsRead : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesSessionsReadWithObject:session:]

/** Required. The session in which the read should be performed. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_ResultSet.
 *
 *  Reads rows from the database using key lookups and scans, as a
 *  simple key/value style alternative to
 *  ExecuteSql. This method cannot be used to
 *  return a result set larger than 10 MiB; if the read matches more
 *  data than that, the read fails with a `FAILED_PRECONDITION`
 *  error.
 *  Reads inside read-write transactions might return `ABORTED`. If
 *  this occurs, the application should restart the transaction from
 *  the beginning. See Transaction for more details.
 *  Larger result sets can be yielded in streaming fashion by calling
 *  StreamingRead instead.
 *
 *  @param object The @c GTLRSpanner_ReadRequest to include in the query.
 *  @param session Required. The session in which the read should be performed.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsRead
 */
+ (instancetype)queryWithObject:(GTLRSpanner_ReadRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Rolls back a transaction, releasing any locks it holds. It is a good
 *  idea to call this for any transaction that includes one or more
 *  Read or ExecuteSql requests and
 *  ultimately decides not to commit.
 *  `Rollback` returns `OK` if it successfully aborts the transaction, the
 *  transaction was already aborted, or the transaction is not
 *  found. `Rollback` never returns `ABORTED`.
 *
 *  Method: spanner.projects.instances.databases.sessions.rollback
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsRollback : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesSessionsRollbackWithObject:session:]

/** Required. The session in which the transaction to roll back is running. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Rolls back a transaction, releasing any locks it holds. It is a good
 *  idea to call this for any transaction that includes one or more
 *  Read or ExecuteSql requests and
 *  ultimately decides not to commit.
 *  `Rollback` returns `OK` if it successfully aborts the transaction, the
 *  transaction was already aborted, or the transaction is not
 *  found. `Rollback` never returns `ABORTED`.
 *
 *  @param object The @c GTLRSpanner_RollbackRequest to include in the query.
 *  @param session Required. The session in which the transaction to roll back
 *    is running.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsRollback
 */
+ (instancetype)queryWithObject:(GTLRSpanner_RollbackRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Like Read, except returns the result set as a
 *  stream. Unlike Read, there is no limit on the
 *  size of the returned result set. However, no individual row in
 *  the result set can exceed 100 MiB, and no column value can exceed
 *  10 MiB.
 *
 *  Method: spanner.projects.instances.databases.sessions.streamingRead
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsStreamingRead : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesSessionsStreamingReadWithObject:session:]

/** Required. The session in which the read should be performed. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_PartialResultSet.
 *
 *  Like Read, except returns the result set as a
 *  stream. Unlike Read, there is no limit on the
 *  size of the returned result set. However, no individual row in
 *  the result set can exceed 100 MiB, and no column value can exceed
 *  10 MiB.
 *
 *  @param object The @c GTLRSpanner_ReadRequest to include in the query.
 *  @param session Required. The session in which the read should be performed.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsStreamingRead
 */
+ (instancetype)queryWithObject:(GTLRSpanner_ReadRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Sets the access control policy on a database resource.
 *  Replaces any existing policy.
 *  Authorization requires `spanner.databases.setIamPolicy`
 *  permission on resource.
 *
 *  Method: spanner.projects.instances.databases.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSetIamPolicy : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The Cloud Spanner resource for which the policy is being set. The
 *  format is `projects/<project ID>/instances/<instance ID>` for instance
 *  resources and `projects/<project ID>/instances/<instance
 *  ID>/databases/<database ID>` for databases resources.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSpanner_Policy.
 *
 *  Sets the access control policy on a database resource.
 *  Replaces any existing policy.
 *  Authorization requires `spanner.databases.setIamPolicy`
 *  permission on resource.
 *
 *  @param object The @c GTLRSpanner_SetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The Cloud Spanner resource for which the policy is
 *    being set. The format is `projects/<project ID>/instances/<instance ID>`
 *    for instance resources and `projects/<project ID>/instances/<instance
 *    ID>/databases/<database ID>` for databases resources.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRSpanner_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that the caller has on the specified database resource.
 *  Attempting this RPC on a non-existent Cloud Spanner database will
 *  result in a NOT_FOUND error if the user has
 *  `spanner.databases.list` permission on the containing Cloud
 *  Spanner instance. Otherwise returns an empty set of permissions.
 *
 *  Method: spanner.projects.instances.databases.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesTestIamPermissions : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The Cloud Spanner resource for which permissions are being tested.
 *  The format is `projects/<project ID>/instances/<instance ID>` for instance
 *  resources and `projects/<project ID>/instances/<instance
 *  ID>/databases/<database ID>` for database resources.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSpanner_TestIamPermissionsResponse.
 *
 *  Returns permissions that the caller has on the specified database resource.
 *  Attempting this RPC on a non-existent Cloud Spanner database will
 *  result in a NOT_FOUND error if the user has
 *  `spanner.databases.list` permission on the containing Cloud
 *  Spanner instance. Otherwise returns an empty set of permissions.
 *
 *  @param object The @c GTLRSpanner_TestIamPermissionsRequest to include in the
 *    query.
 *  @param resource REQUIRED: The Cloud Spanner resource for which permissions
 *    are being tested. The format is `projects/<project ID>/instances/<instance
 *    ID>` for instance resources and `projects/<project ID>/instances/<instance
 *    ID>/databases/<database ID>` for database resources.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRSpanner_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Updates the schema of a Cloud Spanner database by
 *  creating/altering/dropping tables, columns, indexes, etc. The returned
 *  long-running operation will have a name of
 *  the format `<database_name>/operations/<operation_id>` and can be used to
 *  track execution of the schema change(s). The
 *  metadata field type is
 *  UpdateDatabaseDdlMetadata. The operation has no response.
 *
 *  Method: spanner.projects.instances.databases.updateDdl
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesUpdateDdl : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDatabasesUpdateDdlWithObject:database:]

/** Required. The database to update. */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Updates the schema of a Cloud Spanner database by
 *  creating/altering/dropping tables, columns, indexes, etc. The returned
 *  long-running operation will have a name of
 *  the format `<database_name>/operations/<operation_id>` and can be used to
 *  track execution of the schema change(s). The
 *  metadata field type is
 *  UpdateDatabaseDdlMetadata. The operation has no response.
 *
 *  @param object The @c GTLRSpanner_UpdateDatabaseDdlRequest to include in the
 *    query.
 *  @param database Required. The database to update.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesUpdateDdl
 */
+ (instancetype)queryWithObject:(GTLRSpanner_UpdateDatabaseDdlRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Deletes an instance.
 *  Immediately upon completion of the request:
 *  * Billing ceases for all of the instance's reserved resources.
 *  Soon afterward:
 *  * The instance and *all of its databases* immediately and
 *  irrevocably disappear from the API. All data in the databases
 *  is permanently deleted.
 *
 *  Method: spanner.projects.instances.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDelete : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesDeleteWithname:]

/**
 *  Required. The name of the instance to be deleted. Values are of the form
 *  `projects/<project>/instances/<instance>`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Deletes an instance.
 *  Immediately upon completion of the request:
 *  * Billing ceases for all of the instance's reserved resources.
 *  Soon afterward:
 *  * The instance and *all of its databases* immediately and
 *  irrevocably disappear from the API. All data in the databases
 *  is permanently deleted.
 *
 *  @param name Required. The name of the instance to be deleted. Values are of
 *    the form
 *    `projects/<project>/instances/<instance>`
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets information about a particular instance.
 *
 *  Method: spanner.projects.instances.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesGet : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesGetWithname:]

/**
 *  Required. The name of the requested instance. Values are of the form
 *  `projects/<project>/instances/<instance>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Instance.
 *
 *  Gets information about a particular instance.
 *
 *  @param name Required. The name of the requested instance. Values are of the
 *    form
 *    `projects/<project>/instances/<instance>`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for an instance resource. Returns an empty
 *  policy if an instance exists but does not have a policy set.
 *  Authorization requires `spanner.instances.getIamPolicy` on
 *  resource.
 *
 *  Method: spanner.projects.instances.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesGetIamPolicy : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesGetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The Cloud Spanner resource for which the policy is being
 *  retrieved. The format is `projects/<project ID>/instances/<instance ID>` for
 *  instance resources and `projects/<project ID>/instances/<instance
 *  ID>/databases/<database ID>` for database resources.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSpanner_Policy.
 *
 *  Gets the access control policy for an instance resource. Returns an empty
 *  policy if an instance exists but does not have a policy set.
 *  Authorization requires `spanner.instances.getIamPolicy` on
 *  resource.
 *
 *  @param object The @c GTLRSpanner_GetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The Cloud Spanner resource for which the policy is
 *    being retrieved. The format is `projects/<project ID>/instances/<instance
 *    ID>` for instance resources and `projects/<project ID>/instances/<instance
 *    ID>/databases/<database ID>` for database resources.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRSpanner_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists all instances in the given project.
 *
 *  Method: spanner.projects.instances.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesList : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesListWithparent:]

/**
 *  An expression for filtering the results of the request. Filter rules are
 *  case insensitive. The fields eligible for filtering are:
 *  * `name`
 *  * `display_name`
 *  * `labels.key` where key is the name of a label
 *  Some examples of using filters are:
 *  * `name:*` --> The instance has a name.
 *  * `name:Howl` --> The instance's name contains the string "howl".
 *  * `name:HOWL` --> Equivalent to above.
 *  * `NAME:howl` --> Equivalent to above.
 *  * `labels.env:*` --> The instance has the label "env".
 *  * `labels.env:dev` --> The instance has the label "env" and the value of
 *  the label contains the string "dev".
 *  * `name:howl labels.env:dev` --> The instance's name contains "howl" and
 *  it has the label "env" with its value
 *  containing "dev".
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Number of instances to be returned in the response. If 0 or less, defaults
 *  to the server's maximum allowed page size.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  If non-empty, `page_token` should contain a
 *  next_page_token from a
 *  previous ListInstancesResponse.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the project for which a list of instances is
 *  requested. Values are of the form `projects/<project>`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_ListInstancesResponse.
 *
 *  Lists all instances in the given project.
 *
 *  @param parent Required. The name of the project for which a list of
 *    instances is
 *    requested. Values are of the form `projects/<project>`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not
 *  guaranteed. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use
 *  Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation,
 *  the operation is not deleted; instead, it becomes an operation with
 *  an Operation.error value with a google.rpc.Status.code of 1,
 *  corresponding to `Code.CANCELLED`.
 *
 *  Method: spanner.projects.instances.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesOperationsCancel : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesOperationsCancelWithname:]

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not
 *  guaranteed. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use
 *  Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation,
 *  the operation is not deleted; instead, it becomes an operation with
 *  an Operation.error value with a google.rpc.Status.code of 1,
 *  corresponding to `Code.CANCELLED`.
 *
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesOperationsCancel
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: spanner.projects.instances.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesOperationsDelete : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesOperationsDeleteWithname:]

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: spanner.projects.instances.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesOperationsGet : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *  NOTE: the `name` binding allows API services to override the binding
 *  to use different resource name schemes, such as `users/ * /operations`. To
 *  override the binding, API services can add a binding such as
 *  `"/v1/{name=users/ *}/operations"` to their service configuration.
 *  For backwards compatibility, the default name includes the operations
 *  collection id, however overriding users must ensure the name binding
 *  is the parent resource, without the operations collection id.
 *
 *  Method: spanner.projects.instances.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesOperationsList : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesOperationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRSpanner_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *  NOTE: the `name` binding allows API services to override the binding
 *  to use different resource name schemes, such as `users/ * /operations`. To
 *  override the binding, API services can add a binding such as
 *  `"/v1/{name=users/ *}/operations"` to their service configuration.
 *  For backwards compatibility, the default name includes the operations
 *  collection id, however overriding users must ensure the name binding
 *  is the parent resource, without the operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates an instance, and begins allocating or releasing resources
 *  as requested. The returned long-running
 *  operation can be used to track the
 *  progress of updating the instance. If the named instance does not
 *  exist, returns `NOT_FOUND`.
 *  Immediately upon completion of this request:
 *  * For resource types for which a decrease in the instance's allocation
 *  has been requested, billing is based on the newly-requested level.
 *  Until completion of the returned operation:
 *  * Cancelling the operation sets its metadata's
 *  cancel_time, and begins
 *  restoring resources to their pre-request values. The operation
 *  is guaranteed to succeed at undoing all resource changes,
 *  after which point it terminates with a `CANCELLED` status.
 *  * All other attempts to modify the instance are rejected.
 *  * Reading the instance via the API continues to give the pre-request
 *  resource levels.
 *  Upon completion of the returned operation:
 *  * Billing begins for all successfully-allocated resources (some types
 *  may have lower than the requested levels).
 *  * All newly-reserved resources are available for serving the instance's
 *  tables.
 *  * The instance's new resource levels are readable via the API.
 *  The returned long-running operation will
 *  have a name of the format `<instance_name>/operations/<operation_id>` and
 *  can be used to track the instance modification. The
 *  metadata field type is
 *  UpdateInstanceMetadata.
 *  The response field type is
 *  Instance, if successful.
 *  Authorization requires `spanner.instances.update` permission on
 *  resource name.
 *
 *  Method: spanner.projects.instances.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesPatch : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesPatchWithObject:name:]

/**
 *  Required. A unique identifier for the instance, which cannot be changed
 *  after the instance is created. Values are of the form
 *  `projects/<project>/instances/a-z*[a-z0-9]`. The final
 *  segment of the name must be between 6 and 30 characters in length.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Updates an instance, and begins allocating or releasing resources
 *  as requested. The returned long-running
 *  operation can be used to track the
 *  progress of updating the instance. If the named instance does not
 *  exist, returns `NOT_FOUND`.
 *  Immediately upon completion of this request:
 *  * For resource types for which a decrease in the instance's allocation
 *  has been requested, billing is based on the newly-requested level.
 *  Until completion of the returned operation:
 *  * Cancelling the operation sets its metadata's
 *  cancel_time, and begins
 *  restoring resources to their pre-request values. The operation
 *  is guaranteed to succeed at undoing all resource changes,
 *  after which point it terminates with a `CANCELLED` status.
 *  * All other attempts to modify the instance are rejected.
 *  * Reading the instance via the API continues to give the pre-request
 *  resource levels.
 *  Upon completion of the returned operation:
 *  * Billing begins for all successfully-allocated resources (some types
 *  may have lower than the requested levels).
 *  * All newly-reserved resources are available for serving the instance's
 *  tables.
 *  * The instance's new resource levels are readable via the API.
 *  The returned long-running operation will
 *  have a name of the format `<instance_name>/operations/<operation_id>` and
 *  can be used to track the instance modification. The
 *  metadata field type is
 *  UpdateInstanceMetadata.
 *  The response field type is
 *  Instance, if successful.
 *  Authorization requires `spanner.instances.update` permission on
 *  resource name.
 *
 *  @param object The @c GTLRSpanner_UpdateInstanceRequest to include in the
 *    query.
 *  @param name Required. A unique identifier for the instance, which cannot be
 *    changed
 *    after the instance is created. Values are of the form
 *    `projects/<project>/instances/a-z*[a-z0-9]`. The final
 *    segment of the name must be between 6 and 30 characters in length.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesPatch
 */
+ (instancetype)queryWithObject:(GTLRSpanner_UpdateInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on an instance resource. Replaces any
 *  existing policy.
 *  Authorization requires `spanner.instances.setIamPolicy` on
 *  resource.
 *
 *  Method: spanner.projects.instances.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesSetIamPolicy : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The Cloud Spanner resource for which the policy is being set. The
 *  format is `projects/<project ID>/instances/<instance ID>` for instance
 *  resources and `projects/<project ID>/instances/<instance
 *  ID>/databases/<database ID>` for databases resources.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSpanner_Policy.
 *
 *  Sets the access control policy on an instance resource. Replaces any
 *  existing policy.
 *  Authorization requires `spanner.instances.setIamPolicy` on
 *  resource.
 *
 *  @param object The @c GTLRSpanner_SetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The Cloud Spanner resource for which the policy is
 *    being set. The format is `projects/<project ID>/instances/<instance ID>`
 *    for instance resources and `projects/<project ID>/instances/<instance
 *    ID>/databases/<database ID>` for databases resources.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRSpanner_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that the caller has on the specified instance resource.
 *  Attempting this RPC on a non-existent Cloud Spanner instance resource will
 *  result in a NOT_FOUND error if the user has `spanner.instances.list`
 *  permission on the containing Google Cloud Project. Otherwise returns an
 *  empty set of permissions.
 *
 *  Method: spanner.projects.instances.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesTestIamPermissions : GTLRSpannerQuery
// Previous library name was
//   +[GTLQuerySpanner queryForProjectsInstancesTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The Cloud Spanner resource for which permissions are being tested.
 *  The format is `projects/<project ID>/instances/<instance ID>` for instance
 *  resources and `projects/<project ID>/instances/<instance
 *  ID>/databases/<database ID>` for database resources.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSpanner_TestIamPermissionsResponse.
 *
 *  Returns permissions that the caller has on the specified instance resource.
 *  Attempting this RPC on a non-existent Cloud Spanner instance resource will
 *  result in a NOT_FOUND error if the user has `spanner.instances.list`
 *  permission on the containing Google Cloud Project. Otherwise returns an
 *  empty set of permissions.
 *
 *  @param object The @c GTLRSpanner_TestIamPermissionsRequest to include in the
 *    query.
 *  @param resource REQUIRED: The Cloud Spanner resource for which permissions
 *    are being tested. The format is `projects/<project ID>/instances/<instance
 *    ID>` for instance resources and `projects/<project ID>/instances/<instance
 *    ID>/databases/<database ID>` for database resources.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRSpanner_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
