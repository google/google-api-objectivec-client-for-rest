// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Spanner API (spanner/v1)
// Description:
//   Cloud Spanner is a managed, mission-critical, globally consistent and
//   scalable relational database service.
// Documentation:
//   https://cloud.google.com/spanner/

#import "GTLRSpannerObjects.h"

// ----------------------------------------------------------------------------
// Constants

// GTLRSpanner_AuditLogConfig.logType
NSString * const kGTLRSpanner_AuditLogConfig_LogType_AdminRead = @"ADMIN_READ";
NSString * const kGTLRSpanner_AuditLogConfig_LogType_DataRead  = @"DATA_READ";
NSString * const kGTLRSpanner_AuditLogConfig_LogType_DataWrite = @"DATA_WRITE";
NSString * const kGTLRSpanner_AuditLogConfig_LogType_LogTypeUnspecified = @"LOG_TYPE_UNSPECIFIED";

// GTLRSpanner_CloudAuditOptions.logName
NSString * const kGTLRSpanner_CloudAuditOptions_LogName_AdminActivity = @"ADMIN_ACTIVITY";
NSString * const kGTLRSpanner_CloudAuditOptions_LogName_DataAccess = @"DATA_ACCESS";
NSString * const kGTLRSpanner_CloudAuditOptions_LogName_UnspecifiedLogName = @"UNSPECIFIED_LOG_NAME";

// GTLRSpanner_Condition.iam
NSString * const kGTLRSpanner_Condition_Iam_Approver          = @"APPROVER";
NSString * const kGTLRSpanner_Condition_Iam_Attribution       = @"ATTRIBUTION";
NSString * const kGTLRSpanner_Condition_Iam_Authority         = @"AUTHORITY";
NSString * const kGTLRSpanner_Condition_Iam_JustificationType = @"JUSTIFICATION_TYPE";
NSString * const kGTLRSpanner_Condition_Iam_NoAttr            = @"NO_ATTR";
NSString * const kGTLRSpanner_Condition_Iam_SecurityRealm     = @"SECURITY_REALM";

// GTLRSpanner_Condition.op
NSString * const kGTLRSpanner_Condition_Op_Discharged = @"DISCHARGED";
NSString * const kGTLRSpanner_Condition_Op_Equals     = @"EQUALS";
NSString * const kGTLRSpanner_Condition_Op_In         = @"IN";
NSString * const kGTLRSpanner_Condition_Op_NoOp       = @"NO_OP";
NSString * const kGTLRSpanner_Condition_Op_NotEquals  = @"NOT_EQUALS";
NSString * const kGTLRSpanner_Condition_Op_NotIn      = @"NOT_IN";

// GTLRSpanner_Condition.sys
NSString * const kGTLRSpanner_Condition_Sys_Ip      = @"IP";
NSString * const kGTLRSpanner_Condition_Sys_Name    = @"NAME";
NSString * const kGTLRSpanner_Condition_Sys_NoAttr  = @"NO_ATTR";
NSString * const kGTLRSpanner_Condition_Sys_Region  = @"REGION";
NSString * const kGTLRSpanner_Condition_Sys_Service = @"SERVICE";

// GTLRSpanner_Database.state
NSString * const kGTLRSpanner_Database_State_Creating         = @"CREATING";
NSString * const kGTLRSpanner_Database_State_Ready            = @"READY";
NSString * const kGTLRSpanner_Database_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRSpanner_ExecuteSqlRequest.queryMode
NSString * const kGTLRSpanner_ExecuteSqlRequest_QueryMode_Normal = @"NORMAL";
NSString * const kGTLRSpanner_ExecuteSqlRequest_QueryMode_Plan = @"PLAN";
NSString * const kGTLRSpanner_ExecuteSqlRequest_QueryMode_Profile = @"PROFILE";

// GTLRSpanner_Instance.state
NSString * const kGTLRSpanner_Instance_State_Creating         = @"CREATING";
NSString * const kGTLRSpanner_Instance_State_Ready            = @"READY";
NSString * const kGTLRSpanner_Instance_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRSpanner_PlanNode.kind
NSString * const kGTLRSpanner_PlanNode_Kind_KindUnspecified = @"KIND_UNSPECIFIED";
NSString * const kGTLRSpanner_PlanNode_Kind_Relational      = @"RELATIONAL";
NSString * const kGTLRSpanner_PlanNode_Kind_Scalar          = @"SCALAR";

// GTLRSpanner_Rule.action
NSString * const kGTLRSpanner_Rule_Action_Allow        = @"ALLOW";
NSString * const kGTLRSpanner_Rule_Action_AllowWithLog = @"ALLOW_WITH_LOG";
NSString * const kGTLRSpanner_Rule_Action_Deny         = @"DENY";
NSString * const kGTLRSpanner_Rule_Action_DenyWithLog  = @"DENY_WITH_LOG";
NSString * const kGTLRSpanner_Rule_Action_Log          = @"LOG";
NSString * const kGTLRSpanner_Rule_Action_NoAction     = @"NO_ACTION";

// GTLRSpanner_Type.code
NSString * const kGTLRSpanner_Type_Code_Array               = @"ARRAY";
NSString * const kGTLRSpanner_Type_Code_Bool                = @"BOOL";
NSString * const kGTLRSpanner_Type_Code_Bytes               = @"BYTES";
NSString * const kGTLRSpanner_Type_Code_Date                = @"DATE";
NSString * const kGTLRSpanner_Type_Code_Float64             = @"FLOAT64";
NSString * const kGTLRSpanner_Type_Code_Int64               = @"INT64";
NSString * const kGTLRSpanner_Type_Code_String              = @"STRING";
NSString * const kGTLRSpanner_Type_Code_Struct              = @"STRUCT";
NSString * const kGTLRSpanner_Type_Code_Timestamp           = @"TIMESTAMP";
NSString * const kGTLRSpanner_Type_Code_TypeCodeUnspecified = @"TYPE_CODE_UNSPECIFIED";

// ----------------------------------------------------------------------------
//
//   GTLRSpanner_AuditConfig
//

@implementation GTLRSpanner_AuditConfig
@dynamic auditLogConfigs, exemptedMembers, service;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditLogConfigs" : [GTLRSpanner_AuditLogConfig class],
    @"exemptedMembers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_AuditLogConfig
//

@implementation GTLRSpanner_AuditLogConfig
@dynamic exemptedMembers, logType;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"exemptedMembers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_BeginTransactionRequest
//

@implementation GTLRSpanner_BeginTransactionRequest
@dynamic options;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Binding
//

@implementation GTLRSpanner_Binding
@dynamic condition, members, role;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"members" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ChildLink
//

@implementation GTLRSpanner_ChildLink
@dynamic childIndex, type, variable;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CloudAuditOptions
//

@implementation GTLRSpanner_CloudAuditOptions
@dynamic logName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CommitRequest
//

@implementation GTLRSpanner_CommitRequest
@dynamic mutations, singleUseTransaction, transactionId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"mutations" : [GTLRSpanner_Mutation class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CommitResponse
//

@implementation GTLRSpanner_CommitResponse
@dynamic commitTimestamp;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Condition
//

@implementation GTLRSpanner_Condition
@dynamic iam, op, svc, sys, value, values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"values" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CounterOptions
//

@implementation GTLRSpanner_CounterOptions
@dynamic field, metric;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CreateDatabaseMetadata
//

@implementation GTLRSpanner_CreateDatabaseMetadata
@dynamic database;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CreateDatabaseRequest
//

@implementation GTLRSpanner_CreateDatabaseRequest
@dynamic createStatement, extraStatements;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"extraStatements" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CreateInstanceMetadata
//

@implementation GTLRSpanner_CreateInstanceMetadata
@dynamic cancelTime, endTime, instance, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CreateInstanceRequest
//

@implementation GTLRSpanner_CreateInstanceRequest
@dynamic instance, instanceId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_DataAccessOptions
//

@implementation GTLRSpanner_DataAccessOptions
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Database
//

@implementation GTLRSpanner_Database
@dynamic name, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Delete
//

@implementation GTLRSpanner_Delete
@dynamic keySet, table;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Empty
//

@implementation GTLRSpanner_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ExecuteSqlRequest
//

@implementation GTLRSpanner_ExecuteSqlRequest
@dynamic params, paramTypes, queryMode, resumeToken, sql, transaction;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ExecuteSqlRequest_Params
//

@implementation GTLRSpanner_ExecuteSqlRequest_Params

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ExecuteSqlRequest_ParamTypes
//

@implementation GTLRSpanner_ExecuteSqlRequest_ParamTypes

+ (Class)classForAdditionalProperties {
  return [GTLRSpanner_Type class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Expr
//

@implementation GTLRSpanner_Expr
@dynamic descriptionProperty, expression, location, title;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Field
//

@implementation GTLRSpanner_Field
@dynamic name, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_GetDatabaseDdlResponse
//

@implementation GTLRSpanner_GetDatabaseDdlResponse
@dynamic statements;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statements" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_GetIamPolicyRequest
//

@implementation GTLRSpanner_GetIamPolicyRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Instance
//

@implementation GTLRSpanner_Instance
@dynamic config, displayName, labels, name, nodeCount, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Instance_Labels
//

@implementation GTLRSpanner_Instance_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_InstanceConfig
//

@implementation GTLRSpanner_InstanceConfig
@dynamic displayName, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_KeyRange
//

@implementation GTLRSpanner_KeyRange
@dynamic endClosed, endOpen, startClosed, startOpen;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"endClosed" : [NSObject class],
    @"endOpen" : [NSObject class],
    @"startClosed" : [NSObject class],
    @"startOpen" : [NSObject class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_KeySet
//

@implementation GTLRSpanner_KeySet
@dynamic all, keys, ranges;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"keys" : [NSObject class],
    @"ranges" : [GTLRSpanner_KeyRange class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ListDatabasesResponse
//

@implementation GTLRSpanner_ListDatabasesResponse
@dynamic databases, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"databases" : [GTLRSpanner_Database class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"databases";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ListInstanceConfigsResponse
//

@implementation GTLRSpanner_ListInstanceConfigsResponse
@dynamic instanceConfigs, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"instanceConfigs" : [GTLRSpanner_InstanceConfig class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"instanceConfigs";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ListInstancesResponse
//

@implementation GTLRSpanner_ListInstancesResponse
@dynamic instances, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"instances" : [GTLRSpanner_Instance class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"instances";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ListOperationsResponse
//

@implementation GTLRSpanner_ListOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRSpanner_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_LogConfig
//

@implementation GTLRSpanner_LogConfig
@dynamic cloudAudit, counter, dataAccess;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Mutation
//

@implementation GTLRSpanner_Mutation
@dynamic deleteProperty, insert, insertOrUpdate, replace, update;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"deleteProperty" : @"delete" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Operation
//

@implementation GTLRSpanner_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Operation_Metadata
//

@implementation GTLRSpanner_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Operation_Response
//

@implementation GTLRSpanner_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_PartialResultSet
//

@implementation GTLRSpanner_PartialResultSet
@dynamic chunkedValue, metadata, resumeToken, stats, values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"values" : [NSObject class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_PlanNode
//

@implementation GTLRSpanner_PlanNode
@dynamic childLinks, displayName, executionStats, index, kind, metadata,
         shortRepresentation;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"childLinks" : [GTLRSpanner_ChildLink class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_PlanNode_ExecutionStats
//

@implementation GTLRSpanner_PlanNode_ExecutionStats

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_PlanNode_Metadata
//

@implementation GTLRSpanner_PlanNode_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Policy
//

@implementation GTLRSpanner_Policy
@dynamic auditConfigs, bindings, ETag, iamOwned, rules, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditConfigs" : [GTLRSpanner_AuditConfig class],
    @"bindings" : [GTLRSpanner_Binding class],
    @"rules" : [GTLRSpanner_Rule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_QueryPlan
//

@implementation GTLRSpanner_QueryPlan
@dynamic planNodes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"planNodes" : [GTLRSpanner_PlanNode class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ReadOnly
//

@implementation GTLRSpanner_ReadOnly
@dynamic exactStaleness, maxStaleness, minReadTimestamp, readTimestamp,
         returnReadTimestamp, strong;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ReadRequest
//

@implementation GTLRSpanner_ReadRequest
@dynamic columns, index, keySet, limit, resumeToken, table, transaction;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"columns" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ReadWrite
//

@implementation GTLRSpanner_ReadWrite
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ResultSet
//

@implementation GTLRSpanner_ResultSet
@dynamic metadata, rows, stats;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rows" : [NSObject class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ResultSetMetadata
//

@implementation GTLRSpanner_ResultSetMetadata
@dynamic rowType, transaction;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ResultSetStats
//

@implementation GTLRSpanner_ResultSetStats
@dynamic queryPlan, queryStats;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ResultSetStats_QueryStats
//

@implementation GTLRSpanner_ResultSetStats_QueryStats

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_RollbackRequest
//

@implementation GTLRSpanner_RollbackRequest
@dynamic transactionId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Rule
//

@implementation GTLRSpanner_Rule
@dynamic action, conditions, descriptionProperty, inProperty, logConfig, notIn,
         permissions;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"inProperty" : @"in"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"conditions" : [GTLRSpanner_Condition class],
    @"in" : [NSString class],
    @"logConfig" : [GTLRSpanner_LogConfig class],
    @"notIn" : [NSString class],
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Session
//

@implementation GTLRSpanner_Session
@dynamic name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_SetIamPolicyRequest
//

@implementation GTLRSpanner_SetIamPolicyRequest
@dynamic policy, updateMask;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ShortRepresentation
//

@implementation GTLRSpanner_ShortRepresentation
@dynamic descriptionProperty, subqueries;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ShortRepresentation_Subqueries
//

@implementation GTLRSpanner_ShortRepresentation_Subqueries

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Status
//

@implementation GTLRSpanner_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRSpanner_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Status_Details_Item
//

@implementation GTLRSpanner_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_StructType
//

@implementation GTLRSpanner_StructType
@dynamic fields;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fields" : [GTLRSpanner_Field class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_TestIamPermissionsRequest
//

@implementation GTLRSpanner_TestIamPermissionsRequest
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_TestIamPermissionsResponse
//

@implementation GTLRSpanner_TestIamPermissionsResponse
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Transaction
//

@implementation GTLRSpanner_Transaction
@dynamic identifier, readTimestamp;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_TransactionOptions
//

@implementation GTLRSpanner_TransactionOptions
@dynamic readOnly, readWrite;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_TransactionSelector
//

@implementation GTLRSpanner_TransactionSelector
@dynamic begin, identifier, singleUse;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Type
//

@implementation GTLRSpanner_Type
@dynamic arrayElementType, code, structType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_UpdateDatabaseDdlMetadata
//

@implementation GTLRSpanner_UpdateDatabaseDdlMetadata
@dynamic commitTimestamps, database, statements;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"commitTimestamps" : [GTLRDateTime class],
    @"statements" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_UpdateDatabaseDdlRequest
//

@implementation GTLRSpanner_UpdateDatabaseDdlRequest
@dynamic operationId, statements;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statements" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_UpdateInstanceMetadata
//

@implementation GTLRSpanner_UpdateInstanceMetadata
@dynamic cancelTime, endTime, instance, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_UpdateInstanceRequest
//

@implementation GTLRSpanner_UpdateInstanceRequest
@dynamic fieldMask, instance;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Write
//

@implementation GTLRSpanner_Write
@dynamic columns, table, values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"columns" : [NSString class],
    @"values" : [NSObject class]
  };
  return map;
}

@end
