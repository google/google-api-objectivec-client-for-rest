// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Slides API (slides/v1)
// Description:
//   Reads and writes Google Slides presentations.
// Documentation:
//   https://developers.google.com/slides/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRSlides_AffineTransform;
@class GTLRSlides_AutoText;
@class GTLRSlides_Bullet;
@class GTLRSlides_ColorScheme;
@class GTLRSlides_ColorStop;
@class GTLRSlides_CreateImageRequest;
@class GTLRSlides_CreateImageResponse;
@class GTLRSlides_CreateLineRequest;
@class GTLRSlides_CreateLineResponse;
@class GTLRSlides_CreateParagraphBulletsRequest;
@class GTLRSlides_CreateShapeRequest;
@class GTLRSlides_CreateShapeResponse;
@class GTLRSlides_CreateSheetsChartRequest;
@class GTLRSlides_CreateSheetsChartResponse;
@class GTLRSlides_CreateSlideRequest;
@class GTLRSlides_CreateSlideResponse;
@class GTLRSlides_CreateTableRequest;
@class GTLRSlides_CreateTableResponse;
@class GTLRSlides_CreateVideoRequest;
@class GTLRSlides_CreateVideoResponse;
@class GTLRSlides_CropProperties;
@class GTLRSlides_DeleteObjectRequest;
@class GTLRSlides_DeleteParagraphBulletsRequest;
@class GTLRSlides_DeleteTableColumnRequest;
@class GTLRSlides_DeleteTableRowRequest;
@class GTLRSlides_DeleteTextRequest;
@class GTLRSlides_Dimension;
@class GTLRSlides_DuplicateObjectRequest;
@class GTLRSlides_DuplicateObjectRequest_ObjectIds;
@class GTLRSlides_DuplicateObjectResponse;
@class GTLRSlides_Group;
@class GTLRSlides_GroupObjectsRequest;
@class GTLRSlides_GroupObjectsResponse;
@class GTLRSlides_Image;
@class GTLRSlides_ImageProperties;
@class GTLRSlides_InsertTableColumnsRequest;
@class GTLRSlides_InsertTableRowsRequest;
@class GTLRSlides_InsertTextRequest;
@class GTLRSlides_LayoutPlaceholderIdMapping;
@class GTLRSlides_LayoutProperties;
@class GTLRSlides_LayoutReference;
@class GTLRSlides_Line;
@class GTLRSlides_LineConnection;
@class GTLRSlides_LineFill;
@class GTLRSlides_LineProperties;
@class GTLRSlides_Link;
@class GTLRSlides_List;
@class GTLRSlides_List_NestingLevel;
@class GTLRSlides_MasterProperties;
@class GTLRSlides_MergeTableCellsRequest;
@class GTLRSlides_NestingLevel;
@class GTLRSlides_NotesProperties;
@class GTLRSlides_OpaqueColor;
@class GTLRSlides_OptionalColor;
@class GTLRSlides_Outline;
@class GTLRSlides_OutlineFill;
@class GTLRSlides_Page;
@class GTLRSlides_PageBackgroundFill;
@class GTLRSlides_PageElement;
@class GTLRSlides_PageElementProperties;
@class GTLRSlides_PageProperties;
@class GTLRSlides_ParagraphMarker;
@class GTLRSlides_ParagraphStyle;
@class GTLRSlides_Placeholder;
@class GTLRSlides_Range;
@class GTLRSlides_Recolor;
@class GTLRSlides_RefreshSheetsChartRequest;
@class GTLRSlides_ReplaceAllShapesWithImageRequest;
@class GTLRSlides_ReplaceAllShapesWithImageResponse;
@class GTLRSlides_ReplaceAllShapesWithSheetsChartRequest;
@class GTLRSlides_ReplaceAllShapesWithSheetsChartResponse;
@class GTLRSlides_ReplaceAllTextRequest;
@class GTLRSlides_ReplaceAllTextResponse;
@class GTLRSlides_ReplaceImageRequest;
@class GTLRSlides_Request;
@class GTLRSlides_RerouteLineRequest;
@class GTLRSlides_Response;
@class GTLRSlides_RgbColor;
@class GTLRSlides_Shadow;
@class GTLRSlides_Shape;
@class GTLRSlides_ShapeBackgroundFill;
@class GTLRSlides_ShapeProperties;
@class GTLRSlides_SheetsChart;
@class GTLRSlides_SheetsChartProperties;
@class GTLRSlides_Size;
@class GTLRSlides_SlideProperties;
@class GTLRSlides_SolidFill;
@class GTLRSlides_StretchedPictureFill;
@class GTLRSlides_SubstringMatchCriteria;
@class GTLRSlides_Table;
@class GTLRSlides_TableBorderCell;
@class GTLRSlides_TableBorderFill;
@class GTLRSlides_TableBorderProperties;
@class GTLRSlides_TableBorderRow;
@class GTLRSlides_TableCell;
@class GTLRSlides_TableCellBackgroundFill;
@class GTLRSlides_TableCellLocation;
@class GTLRSlides_TableCellProperties;
@class GTLRSlides_TableColumnProperties;
@class GTLRSlides_TableRange;
@class GTLRSlides_TableRow;
@class GTLRSlides_TableRowProperties;
@class GTLRSlides_TextContent;
@class GTLRSlides_TextContent_Lists;
@class GTLRSlides_TextElement;
@class GTLRSlides_TextRun;
@class GTLRSlides_TextStyle;
@class GTLRSlides_ThemeColorPair;
@class GTLRSlides_UngroupObjectsRequest;
@class GTLRSlides_UnmergeTableCellsRequest;
@class GTLRSlides_UpdateImagePropertiesRequest;
@class GTLRSlides_UpdateLineCategoryRequest;
@class GTLRSlides_UpdateLinePropertiesRequest;
@class GTLRSlides_UpdatePageElementAltTextRequest;
@class GTLRSlides_UpdatePageElementsZOrderRequest;
@class GTLRSlides_UpdatePageElementTransformRequest;
@class GTLRSlides_UpdatePagePropertiesRequest;
@class GTLRSlides_UpdateParagraphStyleRequest;
@class GTLRSlides_UpdateShapePropertiesRequest;
@class GTLRSlides_UpdateSlidesPositionRequest;
@class GTLRSlides_UpdateTableBorderPropertiesRequest;
@class GTLRSlides_UpdateTableCellPropertiesRequest;
@class GTLRSlides_UpdateTableColumnPropertiesRequest;
@class GTLRSlides_UpdateTableRowPropertiesRequest;
@class GTLRSlides_UpdateTextStyleRequest;
@class GTLRSlides_UpdateVideoPropertiesRequest;
@class GTLRSlides_Video;
@class GTLRSlides_VideoProperties;
@class GTLRSlides_WeightedFontFamily;
@class GTLRSlides_WordArt;
@class GTLRSlides_WriteControl;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRSlides_AffineTransform.unit

/**
 *  An English Metric Unit (EMU) is defined as 1/360,000 of a centimeter
 *  and thus there are 914,400 EMUs per inch, and 12,700 EMUs per point.
 *
 *  Value: "EMU"
 */
GTLR_EXTERN NSString * const kGTLRSlides_AffineTransform_Unit_Emu;
/**
 *  A point, 1/72 of an inch.
 *
 *  Value: "PT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_AffineTransform_Unit_Pt;
/**
 *  The units are unknown.
 *
 *  Value: "UNIT_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_AffineTransform_Unit_UnitUnspecified;

// ----------------------------------------------------------------------------
// GTLRSlides_AutoText.type

/**
 *  Type for autotext that represents the current slide number.
 *
 *  Value: "SLIDE_NUMBER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_AutoText_Type_SlideNumber;
/**
 *  An unspecified autotext type.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_AutoText_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSlides_CreateLineRequest.category

/**
 *  Bent connectors, including bent connector 2 to 5.
 *
 *  Value: "BENT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateLineRequest_Category_Bent;
/**
 *  Curved connectors, including curved connector 2 to 5.
 *
 *  Value: "CURVED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateLineRequest_Category_Curved;
/**
 *  Unspecified line category.
 *
 *  Value: "LINE_CATEGORY_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateLineRequest_Category_LineCategoryUnspecified;
/**
 *  Straight connectors, including straight connector 1.
 *
 *  Value: "STRAIGHT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateLineRequest_Category_Straight;

// ----------------------------------------------------------------------------
// GTLRSlides_CreateLineRequest.lineCategory

/**
 *  Bent connectors, including bent connector 2 to 5.
 *
 *  Value: "BENT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateLineRequest_LineCategory_Bent;
/**
 *  Curved connectors, including curved connector 2 to 5.
 *
 *  Value: "CURVED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateLineRequest_LineCategory_Curved;
/**
 *  Straight connectors, including straight connector 1. The is the default
 *  category when one is not specified.
 *
 *  Value: "STRAIGHT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateLineRequest_LineCategory_Straight;

// ----------------------------------------------------------------------------
// GTLRSlides_CreateParagraphBulletsRequest.bulletPreset

/**
 *  A bulleted list with a `ARROW3D`, `CIRCLE` and `SQUARE` bullet glyph for
 *  the first 3 list nesting levels.
 *
 *  Value: "BULLET_ARROW3D_CIRCLE_SQUARE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletArrow3dCircleSquare;
/**
 *  A bulleted list with a `ARROW`, `DIAMOND` and `DISC` bullet glyph for
 *  the first 3 list nesting levels.
 *
 *  Value: "BULLET_ARROW_DIAMOND_DISC"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletArrowDiamondDisc;
/**
 *  A bulleted list with `CHECKBOX` bullet glyphs for all list nesting levels.
 *
 *  Value: "BULLET_CHECKBOX"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletCheckbox;
/**
 *  A bulleted list with a `DIAMOND`, `CIRCLE` and `SQUARE` bullet glyph
 *  for the first 3 list nesting levels.
 *
 *  Value: "BULLET_DIAMOND_CIRCLE_SQUARE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletDiamondCircleSquare;
/**
 *  A bulleted list with a `DIAMONDX`, `ARROW3D` and `SQUARE` bullet glyph for
 *  the first 3 list nesting levels.
 *
 *  Value: "BULLET_DIAMONDX_ARROW3D_SQUARE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletDiamondxArrow3dSquare;
/**
 *  A bulleted list with a `DIAMONDX`, `HOLLOWDIAMOND` and `SQUARE` bullet
 *  glyph for the first 3 list nesting levels.
 *
 *  Value: "BULLET_DIAMONDX_HOLLOWDIAMOND_SQUARE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletDiamondxHollowdiamondSquare;
/**
 *  A bulleted list with a `DISC`, `CIRCLE` and `SQUARE` bullet glyph for the
 *  first 3 list nesting levels.
 *
 *  Value: "BULLET_DISC_CIRCLE_SQUARE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletDiscCircleSquare;
/**
 *  A bulleted list with a `LEFTTRIANGLE`, `DIAMOND` and `DISC` bullet glyph
 *  for the first 3 list nesting levels.
 *
 *  Value: "BULLET_LEFTTRIANGLE_DIAMOND_DISC"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletLefttriangleDiamondDisc;
/**
 *  A bulleted list with a `STAR`, `CIRCLE` and `SQUARE` bullet glyph for
 *  the first 3 list nesting levels.
 *
 *  Value: "BULLET_STAR_CIRCLE_SQUARE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletStarCircleSquare;
/**
 *  A numbered list with `DIGIT`, `ALPHA` and `ROMAN` numeric glyphs for
 *  the first 3 list nesting levels, followed by periods.
 *
 *  Value: "NUMBERED_DIGIT_ALPHA_ROMAN"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_NumberedDigitAlphaRoman;
/**
 *  A numbered list with `DIGIT`, `ALPHA` and `ROMAN` numeric glyphs for
 *  the first 3 list nesting levels, followed by parenthesis.
 *
 *  Value: "NUMBERED_DIGIT_ALPHA_ROMAN_PARENS"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_NumberedDigitAlphaRomanParens;
/**
 *  A numbered list with `DIGIT` numeric glyphs separated by periods, where
 *  each nesting level uses the previous nesting level's glyph as a prefix.
 *  For example: '1.', '1.1.', '2.', '2.2.'.
 *
 *  Value: "NUMBERED_DIGIT_NESTED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_NumberedDigitNested;
/**
 *  A numbered list with `UPPERALPHA`, `ALPHA` and `ROMAN` numeric glyphs for
 *  the first 3 list nesting levels, followed by periods.
 *
 *  Value: "NUMBERED_UPPERALPHA_ALPHA_ROMAN"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_NumberedUpperalphaAlphaRoman;
/**
 *  A numbered list with `UPPERROMAN`, `UPPERALPHA` and `DIGIT` numeric glyphs
 *  for the first 3 list nesting levels, followed by periods.
 *
 *  Value: "NUMBERED_UPPERROMAN_UPPERALPHA_DIGIT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_NumberedUpperromanUpperalphaDigit;
/**
 *  A numbered list with `ZERODIGIT`, `ALPHA` and `ROMAN` numeric glyphs for
 *  the first 3 list nesting levels, followed by periods.
 *
 *  Value: "NUMBERED_ZERODIGIT_ALPHA_ROMAN"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_NumberedZerodigitAlphaRoman;

// ----------------------------------------------------------------------------
// GTLRSlides_CreateShapeRequest.shapeType

/**
 *  Curved arc shape. Corresponds to ECMA-376 ST_ShapeType 'arc'
 *
 *  Value: "ARC"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Arc;
/**
 *  East arrow shape.
 *
 *  Value: "ARROW_EAST"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_ArrowEast;
/**
 *  North arrow shape.
 *
 *  Value: "ARROW_NORTH"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_ArrowNorth;
/**
 *  Northeast arrow shape.
 *
 *  Value: "ARROW_NORTH_EAST"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_ArrowNorthEast;
/**
 *  Bent arrow shape. Corresponds to ECMA-376 ST_ShapeType 'bentArrow'
 *
 *  Value: "BENT_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_BentArrow;
/**
 *  Bent up arrow shape. Corresponds to ECMA-376 ST_ShapeType 'bentUpArrow'
 *
 *  Value: "BENT_UP_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_BentUpArrow;
/**
 *  Bevel shape. Corresponds to ECMA-376 ST_ShapeType 'bevel'
 *
 *  Value: "BEVEL"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Bevel;
/**
 *  Block arc shape. Corresponds to ECMA-376 ST_ShapeType 'blockArc'
 *
 *  Value: "BLOCK_ARC"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_BlockArc;
/**
 *  Brace pair shape. Corresponds to ECMA-376 ST_ShapeType 'bracePair'
 *
 *  Value: "BRACE_PAIR"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_BracePair;
/**
 *  Bracket pair shape. Corresponds to ECMA-376 ST_ShapeType 'bracketPair'
 *
 *  Value: "BRACKET_PAIR"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_BracketPair;
/**
 *  Can shape. Corresponds to ECMA-376 ST_ShapeType 'can'
 *
 *  Value: "CAN"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Can;
/**
 *  Chevron shape. Corresponds to ECMA-376 ST_ShapeType 'chevron'
 *
 *  Value: "CHEVRON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Chevron;
/**
 *  Chord shape. Corresponds to ECMA-376 ST_ShapeType 'chord'
 *
 *  Value: "CHORD"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Chord;
/**
 *  Cloud shape. Corresponds to ECMA-376 ST_ShapeType 'cloud'
 *
 *  Value: "CLOUD"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Cloud;
/**
 *  Callout cloud shape. Corresponds to ECMA-376 ST_ShapeType 'cloudCallout'
 *
 *  Value: "CLOUD_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_CloudCallout;
/**
 *  Corner shape. Corresponds to ECMA-376 ST_ShapeType 'corner'
 *
 *  Value: "CORNER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Corner;
/**
 *  Cube shape. Corresponds to ECMA-376 ST_ShapeType 'cube'
 *
 *  Value: "CUBE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Cube;
/**
 *  Curved down arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'curvedDownArrow'
 *
 *  Value: "CURVED_DOWN_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_CurvedDownArrow;
/**
 *  Curved left arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'curvedLeftArrow'
 *
 *  Value: "CURVED_LEFT_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_CurvedLeftArrow;
/**
 *  Curved right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'curvedRightArrow'
 *
 *  Value: "CURVED_RIGHT_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_CurvedRightArrow;
/**
 *  Curved up arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'curvedUpArrow'
 *
 *  Value: "CURVED_UP_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_CurvedUpArrow;
/**
 *  Custom shape.
 *
 *  Value: "CUSTOM"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Custom;
/**
 *  Decagon shape. Corresponds to ECMA-376 ST_ShapeType 'decagon'
 *
 *  Value: "DECAGON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Decagon;
/**
 *  Diagonal stripe shape. Corresponds to ECMA-376 ST_ShapeType 'diagStripe'
 *
 *  Value: "DIAGONAL_STRIPE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_DiagonalStripe;
/**
 *  Diamond shape. Corresponds to ECMA-376 ST_ShapeType 'diamond'
 *
 *  Value: "DIAMOND"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Diamond;
/**
 *  Dodecagon shape. Corresponds to ECMA-376 ST_ShapeType 'dodecagon'
 *
 *  Value: "DODECAGON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Dodecagon;
/**
 *  Donut shape. Corresponds to ECMA-376 ST_ShapeType 'donut'
 *
 *  Value: "DONUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Donut;
/**
 *  Double wave shape. Corresponds to ECMA-376 ST_ShapeType 'doubleWave'
 *
 *  Value: "DOUBLE_WAVE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_DoubleWave;
/**
 *  Down arrow shape. Corresponds to ECMA-376 ST_ShapeType 'downArrow'
 *
 *  Value: "DOWN_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_DownArrow;
/**
 *  Callout down arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'downArrowCallout'
 *
 *  Value: "DOWN_ARROW_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_DownArrowCallout;
/**
 *  Ellipse shape. Corresponds to ECMA-376 ST_ShapeType 'ellipse'
 *
 *  Value: "ELLIPSE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Ellipse;
/**
 *  Ellipse ribbon shape. Corresponds to ECMA-376 ST_ShapeType
 *  'ellipseRibbon'
 *
 *  Value: "ELLIPSE_RIBBON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_EllipseRibbon;
/**
 *  Ellipse ribbon 2 shape. Corresponds to ECMA-376 ST_ShapeType
 *  'ellipseRibbon2'
 *
 *  Value: "ELLIPSE_RIBBON_2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_EllipseRibbon2;
/**
 *  Alternate process flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartAlternateProcess'
 *
 *  Value: "FLOW_CHART_ALTERNATE_PROCESS"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartAlternateProcess;
/**
 *  Collate flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartCollate'
 *
 *  Value: "FLOW_CHART_COLLATE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartCollate;
/**
 *  Connector flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartConnector'
 *
 *  Value: "FLOW_CHART_CONNECTOR"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartConnector;
/**
 *  Decision flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartDecision'
 *
 *  Value: "FLOW_CHART_DECISION"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartDecision;
/**
 *  Delay flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartDelay'
 *
 *  Value: "FLOW_CHART_DELAY"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartDelay;
/**
 *  Display flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartDisplay'
 *
 *  Value: "FLOW_CHART_DISPLAY"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartDisplay;
/**
 *  Document flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartDocument'
 *
 *  Value: "FLOW_CHART_DOCUMENT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartDocument;
/**
 *  Extract flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartExtract'
 *
 *  Value: "FLOW_CHART_EXTRACT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartExtract;
/**
 *  Input output flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartInputOutput'
 *
 *  Value: "FLOW_CHART_INPUT_OUTPUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartInputOutput;
/**
 *  Internal storage flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartInternalStorage'
 *
 *  Value: "FLOW_CHART_INTERNAL_STORAGE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartInternalStorage;
/**
 *  Magnetic disk flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartMagneticDisk'
 *
 *  Value: "FLOW_CHART_MAGNETIC_DISK"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartMagneticDisk;
/**
 *  Magnetic drum flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartMagneticDrum'
 *
 *  Value: "FLOW_CHART_MAGNETIC_DRUM"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartMagneticDrum;
/**
 *  Magnetic tape flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartMagneticTape'
 *
 *  Value: "FLOW_CHART_MAGNETIC_TAPE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartMagneticTape;
/**
 *  Manual input flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartManualInput'
 *
 *  Value: "FLOW_CHART_MANUAL_INPUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartManualInput;
/**
 *  Manual operation flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartManualOperation'
 *
 *  Value: "FLOW_CHART_MANUAL_OPERATION"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartManualOperation;
/**
 *  Merge flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartMerge'
 *
 *  Value: "FLOW_CHART_MERGE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartMerge;
/**
 *  Multi-document flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartMultidocument'
 *
 *  Value: "FLOW_CHART_MULTIDOCUMENT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartMultidocument;
/**
 *  Offline storage flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartOfflineStorage'
 *
 *  Value: "FLOW_CHART_OFFLINE_STORAGE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartOfflineStorage;
/**
 *  Off-page connector flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartOffpageConnector'
 *
 *  Value: "FLOW_CHART_OFFPAGE_CONNECTOR"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartOffpageConnector;
/**
 *  Online storage flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartOnlineStorage'
 *
 *  Value: "FLOW_CHART_ONLINE_STORAGE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartOnlineStorage;
/**
 *  Or flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartOr'
 *
 *  Value: "FLOW_CHART_OR"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartOr;
/**
 *  Predefined process flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartPredefinedProcess'
 *
 *  Value: "FLOW_CHART_PREDEFINED_PROCESS"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartPredefinedProcess;
/**
 *  Preparation flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartPreparation'
 *
 *  Value: "FLOW_CHART_PREPARATION"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartPreparation;
/**
 *  Process flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartProcess'
 *
 *  Value: "FLOW_CHART_PROCESS"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartProcess;
/**
 *  Punched card flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartPunchedCard'
 *
 *  Value: "FLOW_CHART_PUNCHED_CARD"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartPunchedCard;
/**
 *  Punched tape flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartPunchedTape'
 *
 *  Value: "FLOW_CHART_PUNCHED_TAPE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartPunchedTape;
/**
 *  Sort flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartSort'
 *
 *  Value: "FLOW_CHART_SORT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartSort;
/**
 *  Summing junction flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartSummingJunction'
 *
 *  Value: "FLOW_CHART_SUMMING_JUNCTION"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartSummingJunction;
/**
 *  Terminator flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartTerminator'
 *
 *  Value: "FLOW_CHART_TERMINATOR"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartTerminator;
/**
 *  Folded corner shape. Corresponds to ECMA-376 ST_ShapeType 'foldedCorner'
 *
 *  Value: "FOLDED_CORNER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_FoldedCorner;
/**
 *  Frame shape. Corresponds to ECMA-376 ST_ShapeType 'frame'
 *
 *  Value: "FRAME"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Frame;
/**
 *  Half frame shape. Corresponds to ECMA-376 ST_ShapeType 'halfFrame'
 *
 *  Value: "HALF_FRAME"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_HalfFrame;
/**
 *  Heart shape. Corresponds to ECMA-376 ST_ShapeType 'heart'
 *
 *  Value: "HEART"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Heart;
/**
 *  Heptagon shape. Corresponds to ECMA-376 ST_ShapeType 'heptagon'
 *
 *  Value: "HEPTAGON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Heptagon;
/**
 *  Hexagon shape. Corresponds to ECMA-376 ST_ShapeType 'hexagon'
 *
 *  Value: "HEXAGON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Hexagon;
/**
 *  Home plate shape. Corresponds to ECMA-376 ST_ShapeType 'homePlate'
 *
 *  Value: "HOME_PLATE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_HomePlate;
/**
 *  Horizontal scroll shape. Corresponds to ECMA-376 ST_ShapeType
 *  'horizontalScroll'
 *
 *  Value: "HORIZONTAL_SCROLL"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_HorizontalScroll;
/**
 *  Irregular seal 1 shape. Corresponds to ECMA-376 ST_ShapeType
 *  'irregularSeal1'
 *
 *  Value: "IRREGULAR_SEAL_1"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_IrregularSeal1;
/**
 *  Irregular seal 2 shape. Corresponds to ECMA-376 ST_ShapeType
 *  'irregularSeal2'
 *
 *  Value: "IRREGULAR_SEAL_2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_IrregularSeal2;
/**
 *  Left arrow shape. Corresponds to ECMA-376 ST_ShapeType 'leftArrow'
 *
 *  Value: "LEFT_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_LeftArrow;
/**
 *  Callout left arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'leftArrowCallout'
 *
 *  Value: "LEFT_ARROW_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_LeftArrowCallout;
/**
 *  Left brace shape. Corresponds to ECMA-376 ST_ShapeType 'leftBrace'
 *
 *  Value: "LEFT_BRACE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_LeftBrace;
/**
 *  Left bracket shape. Corresponds to ECMA-376 ST_ShapeType 'leftBracket'
 *
 *  Value: "LEFT_BRACKET"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_LeftBracket;
/**
 *  Left right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'leftRightArrow'
 *
 *  Value: "LEFT_RIGHT_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_LeftRightArrow;
/**
 *  Callout left right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'leftRightArrowCallout'
 *
 *  Value: "LEFT_RIGHT_ARROW_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_LeftRightArrowCallout;
/**
 *  Left right up arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'leftRightUpArrow'
 *
 *  Value: "LEFT_RIGHT_UP_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_LeftRightUpArrow;
/**
 *  Left up arrow shape. Corresponds to ECMA-376 ST_ShapeType 'leftUpArrow'
 *
 *  Value: "LEFT_UP_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_LeftUpArrow;
/**
 *  Lightning bolt shape. Corresponds to ECMA-376 ST_ShapeType
 *  'lightningBolt'
 *
 *  Value: "LIGHTNING_BOLT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_LightningBolt;
/**
 *  Divide math shape. Corresponds to ECMA-376 ST_ShapeType 'mathDivide'
 *
 *  Value: "MATH_DIVIDE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_MathDivide;
/**
 *  Equal math shape. Corresponds to ECMA-376 ST_ShapeType 'mathEqual'
 *
 *  Value: "MATH_EQUAL"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_MathEqual;
/**
 *  Minus math shape. Corresponds to ECMA-376 ST_ShapeType 'mathMinus'
 *
 *  Value: "MATH_MINUS"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_MathMinus;
/**
 *  Multiply math shape. Corresponds to ECMA-376 ST_ShapeType 'mathMultiply'
 *
 *  Value: "MATH_MULTIPLY"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_MathMultiply;
/**
 *  Not equal math shape. Corresponds to ECMA-376 ST_ShapeType 'mathNotEqual'
 *
 *  Value: "MATH_NOT_EQUAL"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_MathNotEqual;
/**
 *  Plus math shape. Corresponds to ECMA-376 ST_ShapeType 'mathPlus'
 *
 *  Value: "MATH_PLUS"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_MathPlus;
/**
 *  Moon shape. Corresponds to ECMA-376 ST_ShapeType 'moon'
 *
 *  Value: "MOON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Moon;
/**
 *  No smoking shape. Corresponds to ECMA-376 ST_ShapeType 'noSmoking'
 *
 *  Value: "NO_SMOKING"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_NoSmoking;
/**
 *  Notched right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'notchedRightArrow'
 *
 *  Value: "NOTCHED_RIGHT_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_NotchedRightArrow;
/**
 *  Octagon shape. Corresponds to ECMA-376 ST_ShapeType 'octagon'
 *
 *  Value: "OCTAGON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Octagon;
/**
 *  Parallelogram shape. Corresponds to ECMA-376 ST_ShapeType 'parallelogram'
 *
 *  Value: "PARALLELOGRAM"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Parallelogram;
/**
 *  Pentagon shape. Corresponds to ECMA-376 ST_ShapeType 'pentagon'
 *
 *  Value: "PENTAGON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Pentagon;
/**
 *  Pie shape. Corresponds to ECMA-376 ST_ShapeType 'pie'
 *
 *  Value: "PIE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Pie;
/**
 *  Plaque shape. Corresponds to ECMA-376 ST_ShapeType 'plaque'
 *
 *  Value: "PLAQUE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Plaque;
/**
 *  Plus shape. Corresponds to ECMA-376 ST_ShapeType 'plus'
 *
 *  Value: "PLUS"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Plus;
/**
 *  Quad-arrow shape. Corresponds to ECMA-376 ST_ShapeType 'quadArrow'
 *
 *  Value: "QUAD_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_QuadArrow;
/**
 *  Callout quad-arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'quadArrowCallout'
 *
 *  Value: "QUAD_ARROW_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_QuadArrowCallout;
/**
 *  Rectangle shape. Corresponds to ECMA-376 ST_ShapeType 'rect'.
 *
 *  Value: "RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Rectangle;
/**
 *  Ribbon shape. Corresponds to ECMA-376 ST_ShapeType 'ribbon'
 *
 *  Value: "RIBBON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Ribbon;
/**
 *  Ribbon 2 shape. Corresponds to ECMA-376 ST_ShapeType 'ribbon2'
 *
 *  Value: "RIBBON_2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Ribbon2;
/**
 *  Right arrow shape. Corresponds to ECMA-376 ST_ShapeType 'rightArrow'
 *
 *  Value: "RIGHT_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_RightArrow;
/**
 *  Callout right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'rightArrowCallout'
 *
 *  Value: "RIGHT_ARROW_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_RightArrowCallout;
/**
 *  Right brace shape. Corresponds to ECMA-376 ST_ShapeType 'rightBrace'
 *
 *  Value: "RIGHT_BRACE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_RightBrace;
/**
 *  Right bracket shape. Corresponds to ECMA-376 ST_ShapeType 'rightBracket'
 *
 *  Value: "RIGHT_BRACKET"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_RightBracket;
/**
 *  Right triangle shape. Corresponds to ECMA-376 ST_ShapeType 'rtTriangle'
 *
 *  Value: "RIGHT_TRIANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_RightTriangle;
/**
 *  One round corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *  'round1Rect'
 *
 *  Value: "ROUND_1_RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Round1Rectangle;
/**
 *  Two diagonal round corner rectangle shape. Corresponds to ECMA-376
 *  ST_ShapeType 'round2DiagRect'
 *
 *  Value: "ROUND_2_DIAGONAL_RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Round2DiagonalRectangle;
/**
 *  Two same-side round corner rectangle shape. Corresponds to ECMA-376
 *  ST_ShapeType 'round2SameRect'
 *
 *  Value: "ROUND_2_SAME_RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Round2SameRectangle;
/**
 *  Round corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *  'roundRect'
 *
 *  Value: "ROUND_RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_RoundRectangle;
/**
 *  Smiley face shape. Corresponds to ECMA-376 ST_ShapeType 'smileyFace'
 *
 *  Value: "SMILEY_FACE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_SmileyFace;
/**
 *  One snip corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *  'snip1Rect'
 *
 *  Value: "SNIP_1_RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Snip1Rectangle;
/**
 *  Two diagonal snip corner rectangle shape. Corresponds to ECMA-376
 *  ST_ShapeType 'snip2DiagRect'
 *
 *  Value: "SNIP_2_DIAGONAL_RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Snip2DiagonalRectangle;
/**
 *  Two same-side snip corner rectangle shape. Corresponds to ECMA-376
 *  ST_ShapeType 'snip2SameRect'
 *
 *  Value: "SNIP_2_SAME_RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Snip2SameRectangle;
/**
 *  One snip one round corner rectangle shape. Corresponds to ECMA-376
 *  ST_ShapeType 'snipRoundRect'
 *
 *  Value: "SNIP_ROUND_RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_SnipRoundRectangle;
/**
 *  Speech shape.
 *
 *  Value: "SPEECH"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Speech;
/**
 *  Ten pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star10'
 *
 *  Value: "STAR_10"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Star10;
/**
 *  Twelve pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star12'
 *
 *  Value: "STAR_12"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Star12;
/**
 *  Sixteen pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star16'
 *
 *  Value: "STAR_16"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Star16;
/**
 *  Twenty four pointed star shape. Corresponds to ECMA-376 ST_ShapeType
 *  'star24'
 *
 *  Value: "STAR_24"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Star24;
/**
 *  Thirty two pointed star shape. Corresponds to ECMA-376 ST_ShapeType
 *  'star32'
 *
 *  Value: "STAR_32"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Star32;
/**
 *  Four pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star4'
 *
 *  Value: "STAR_4"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Star4;
/**
 *  Five pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star5'
 *
 *  Value: "STAR_5"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Star5;
/**
 *  Six pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star6'
 *
 *  Value: "STAR_6"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Star6;
/**
 *  Seven pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star7'
 *
 *  Value: "STAR_7"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Star7;
/**
 *  Eight pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star8'
 *
 *  Value: "STAR_8"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Star8;
/**
 *  Star burst shape.
 *
 *  Value: "STARBURST"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Starburst;
/**
 *  Striped right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'stripedRightArrow'
 *
 *  Value: "STRIPED_RIGHT_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_StripedRightArrow;
/**
 *  Sun shape. Corresponds to ECMA-376 ST_ShapeType 'sun'
 *
 *  Value: "SUN"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Sun;
/**
 *  Teardrop shape. Corresponds to ECMA-376 ST_ShapeType 'teardrop'
 *
 *  Value: "TEARDROP"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Teardrop;
/**
 *  Text box shape.
 *
 *  Value: "TEXT_BOX"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_TextBox;
/**
 *  Trapezoid shape. Corresponds to ECMA-376 ST_ShapeType 'trapezoid'
 *
 *  Value: "TRAPEZOID"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Trapezoid;
/**
 *  Triangle shape. Corresponds to ECMA-376 ST_ShapeType 'triangle'
 *
 *  Value: "TRIANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Triangle;
/**
 *  The shape type that is not predefined.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_TypeUnspecified;
/**
 *  Up arrow shape. Corresponds to ECMA-376 ST_ShapeType 'upArrow'
 *
 *  Value: "UP_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_UpArrow;
/**
 *  Callout up arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'upArrowCallout'
 *
 *  Value: "UP_ARROW_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_UpArrowCallout;
/**
 *  Up down arrow shape. Corresponds to ECMA-376 ST_ShapeType 'upDownArrow'
 *
 *  Value: "UP_DOWN_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_UpDownArrow;
/**
 *  U-turn arrow shape. Corresponds to ECMA-376 ST_ShapeType 'uturnArrow'
 *
 *  Value: "UTURN_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_UturnArrow;
/**
 *  Vertical scroll shape. Corresponds to ECMA-376 ST_ShapeType
 *  'verticalScroll'
 *
 *  Value: "VERTICAL_SCROLL"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_VerticalScroll;
/**
 *  Wave shape. Corresponds to ECMA-376 ST_ShapeType 'wave'
 *
 *  Value: "WAVE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_Wave;
/**
 *  Callout wedge ellipse shape. Corresponds to ECMA-376 ST_ShapeType
 *  'wedgeEllipseCallout'
 *
 *  Value: "WEDGE_ELLIPSE_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_WedgeEllipseCallout;
/**
 *  Callout wedge rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *  'wedgeRectCallout'
 *
 *  Value: "WEDGE_RECTANGLE_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_WedgeRectangleCallout;
/**
 *  Callout wedge round rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *  'wedgeRoundRectCallout'
 *
 *  Value: "WEDGE_ROUND_RECTANGLE_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateShapeRequest_ShapeType_WedgeRoundRectangleCallout;

// ----------------------------------------------------------------------------
// GTLRSlides_CreateSheetsChartRequest.linkingMode

/**
 *  Linking the chart allows it to be updated, and other collaborators will
 *  see a link to the spreadsheet.
 *
 *  Value: "LINKED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateSheetsChartRequest_LinkingMode_Linked;
/**
 *  The chart is not associated with the source spreadsheet and cannot be
 *  updated. A chart that is not linked will be inserted as an image.
 *
 *  Value: "NOT_LINKED_IMAGE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateSheetsChartRequest_LinkingMode_NotLinkedImage;

// ----------------------------------------------------------------------------
// GTLRSlides_CreateVideoRequest.source

/**
 *  The video source is Google Drive.
 *
 *  Value: "DRIVE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateVideoRequest_Source_Drive;
/**
 *  The video source is unspecified.
 *
 *  Value: "SOURCE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateVideoRequest_Source_SourceUnspecified;
/**
 *  The video source is YouTube.
 *
 *  Value: "YOUTUBE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_CreateVideoRequest_Source_Youtube;

// ----------------------------------------------------------------------------
// GTLRSlides_Dimension.unit

/**
 *  An English Metric Unit (EMU) is defined as 1/360,000 of a centimeter
 *  and thus there are 914,400 EMUs per inch, and 12,700 EMUs per point.
 *
 *  Value: "EMU"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Dimension_Unit_Emu;
/**
 *  A point, 1/72 of an inch.
 *
 *  Value: "PT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Dimension_Unit_Pt;
/**
 *  The units are unknown.
 *
 *  Value: "UNIT_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Dimension_Unit_UnitUnspecified;

// ----------------------------------------------------------------------------
// GTLRSlides_LayoutReference.predefinedLayout

/**
 *  Layout with a big number heading.
 *
 *  Value: "BIG_NUMBER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LayoutReference_PredefinedLayout_BigNumber;
/**
 *  Blank layout, with no placeholders.
 *
 *  Value: "BLANK"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LayoutReference_PredefinedLayout_Blank;
/**
 *  Layout with a caption at the bottom.
 *
 *  Value: "CAPTION_ONLY"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LayoutReference_PredefinedLayout_CaptionOnly;
/**
 *  Layout with a main point.
 *
 *  Value: "MAIN_POINT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LayoutReference_PredefinedLayout_MainPoint;
/**
 *  Layout with one title and one body, arranged in a single column.
 *
 *  Value: "ONE_COLUMN_TEXT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LayoutReference_PredefinedLayout_OneColumnText;
/**
 *  Unspecified layout.
 *
 *  Value: "PREDEFINED_LAYOUT_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LayoutReference_PredefinedLayout_PredefinedLayoutUnspecified;
/**
 *  Layout with a section title.
 *
 *  Value: "SECTION_HEADER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LayoutReference_PredefinedLayout_SectionHeader;
/**
 *  Layout with a title and subtitle on one side and description on the other.
 *
 *  Value: "SECTION_TITLE_AND_DESCRIPTION"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LayoutReference_PredefinedLayout_SectionTitleAndDescription;
/**
 *  Layout with a title and a subtitle.
 *
 *  Value: "TITLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LayoutReference_PredefinedLayout_Title;
/**
 *  Layout with a title and body.
 *
 *  Value: "TITLE_AND_BODY"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LayoutReference_PredefinedLayout_TitleAndBody;
/**
 *  Layout with a title and two columns.
 *
 *  Value: "TITLE_AND_TWO_COLUMNS"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LayoutReference_PredefinedLayout_TitleAndTwoColumns;
/**
 *  Layout with only a title.
 *
 *  Value: "TITLE_ONLY"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LayoutReference_PredefinedLayout_TitleOnly;

// ----------------------------------------------------------------------------
// GTLRSlides_Line.lineCategory

/**
 *  Bent connectors, including bent connector 2 to 5.
 *
 *  Value: "BENT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Line_LineCategory_Bent;
/**
 *  Curved connectors, including curved connector 2 to 5.
 *
 *  Value: "CURVED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Line_LineCategory_Curved;
/**
 *  Unspecified line category.
 *
 *  Value: "LINE_CATEGORY_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Line_LineCategory_LineCategoryUnspecified;
/**
 *  Straight connectors, including straight connector 1.
 *
 *  Value: "STRAIGHT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Line_LineCategory_Straight;

// ----------------------------------------------------------------------------
// GTLRSlides_Line.lineType

/**
 *  Bent connector 2 form. Corresponds to ECMA-376 ST_ShapeType
 *  'bentConnector2'.
 *
 *  Value: "BENT_CONNECTOR_2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Line_LineType_BentConnector2;
/**
 *  Bent connector 3 form. Corresponds to ECMA-376 ST_ShapeType
 *  'bentConnector3'.
 *
 *  Value: "BENT_CONNECTOR_3"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Line_LineType_BentConnector3;
/**
 *  Bent connector 4 form. Corresponds to ECMA-376 ST_ShapeType
 *  'bentConnector4'.
 *
 *  Value: "BENT_CONNECTOR_4"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Line_LineType_BentConnector4;
/**
 *  Bent connector 5 form. Corresponds to ECMA-376 ST_ShapeType
 *  'bentConnector5'.
 *
 *  Value: "BENT_CONNECTOR_5"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Line_LineType_BentConnector5;
/**
 *  Curved connector 2 form. Corresponds to ECMA-376 ST_ShapeType
 *  'curvedConnector2'.
 *
 *  Value: "CURVED_CONNECTOR_2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Line_LineType_CurvedConnector2;
/**
 *  Curved connector 3 form. Corresponds to ECMA-376 ST_ShapeType
 *  'curvedConnector3'.
 *
 *  Value: "CURVED_CONNECTOR_3"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Line_LineType_CurvedConnector3;
/**
 *  Curved connector 4 form. Corresponds to ECMA-376 ST_ShapeType
 *  'curvedConnector4'.
 *
 *  Value: "CURVED_CONNECTOR_4"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Line_LineType_CurvedConnector4;
/**
 *  Curved connector 5 form. Corresponds to ECMA-376 ST_ShapeType
 *  'curvedConnector5'.
 *
 *  Value: "CURVED_CONNECTOR_5"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Line_LineType_CurvedConnector5;
/**
 *  Straight connector 1 form. Corresponds to ECMA-376 ST_ShapeType
 *  'straightConnector1'.
 *
 *  Value: "STRAIGHT_CONNECTOR_1"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Line_LineType_StraightConnector1;
/**
 *  Straight line. Corresponds to ECMA-376 ST_ShapeType 'line'. This line
 *  type is not a connector.
 *
 *  Value: "STRAIGHT_LINE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Line_LineType_StraightLine;
/**
 *  An unspecified line type.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Line_LineType_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSlides_LineProperties.dashStyle

/**
 *  Dashed line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dash'.
 *
 *  Value: "DASH"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_DashStyle_Dash;
/**
 *  Alternating dashes and dots. Corresponds to ECMA-376 ST_PresetLineDashVal
 *  value 'dashDot'.
 *
 *  Value: "DASH_DOT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_DashStyle_DashDot;
/**
 *  Unspecified dash style.
 *
 *  Value: "DASH_STYLE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_DashStyle_DashStyleUnspecified;
/**
 *  Dotted line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dot'.
 *
 *  Value: "DOT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_DashStyle_Dot;
/**
 *  Line with large dashes. Corresponds to ECMA-376 ST_PresetLineDashVal
 *  value 'lgDash'.
 *
 *  Value: "LONG_DASH"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_DashStyle_LongDash;
/**
 *  Alternating large dashes and dots. Corresponds to ECMA-376
 *  ST_PresetLineDashVal value 'lgDashDot'.
 *
 *  Value: "LONG_DASH_DOT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_DashStyle_LongDashDot;
/**
 *  Solid line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'solid'.
 *  This is the default dash style.
 *
 *  Value: "SOLID"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_DashStyle_Solid;

// ----------------------------------------------------------------------------
// GTLRSlides_LineProperties.endArrow

/**
 *  An unspecified arrow style.
 *
 *  Value: "ARROW_STYLE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_EndArrow_ArrowStyleUnspecified;
/**
 *  Filled arrow. Corresponds to ECMA-376 ST_LineEndType value 'triangle'.
 *
 *  Value: "FILL_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_EndArrow_FillArrow;
/**
 *  Filled circle. Corresponds to ECMA-376 ST_LineEndType value 'oval'.
 *
 *  Value: "FILL_CIRCLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_EndArrow_FillCircle;
/**
 *  Filled diamond. Corresponds to ECMA-376 ST_LineEndType value 'diamond'.
 *
 *  Value: "FILL_DIAMOND"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_EndArrow_FillDiamond;
/**
 *  Filled square.
 *
 *  Value: "FILL_SQUARE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_EndArrow_FillSquare;
/**
 *  No arrow.
 *
 *  Value: "NONE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_EndArrow_None;
/**
 *  Hollow arrow.
 *
 *  Value: "OPEN_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_EndArrow_OpenArrow;
/**
 *  Hollow circle.
 *
 *  Value: "OPEN_CIRCLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_EndArrow_OpenCircle;
/**
 *  Hollow diamond.
 *
 *  Value: "OPEN_DIAMOND"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_EndArrow_OpenDiamond;
/**
 *  Hollow square.
 *
 *  Value: "OPEN_SQUARE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_EndArrow_OpenSquare;
/**
 *  Arrow with notched back. Corresponds to ECMA-376 ST_LineEndType value
 *  'stealth'.
 *
 *  Value: "STEALTH_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_EndArrow_StealthArrow;

// ----------------------------------------------------------------------------
// GTLRSlides_LineProperties.startArrow

/**
 *  An unspecified arrow style.
 *
 *  Value: "ARROW_STYLE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_StartArrow_ArrowStyleUnspecified;
/**
 *  Filled arrow. Corresponds to ECMA-376 ST_LineEndType value 'triangle'.
 *
 *  Value: "FILL_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_StartArrow_FillArrow;
/**
 *  Filled circle. Corresponds to ECMA-376 ST_LineEndType value 'oval'.
 *
 *  Value: "FILL_CIRCLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_StartArrow_FillCircle;
/**
 *  Filled diamond. Corresponds to ECMA-376 ST_LineEndType value 'diamond'.
 *
 *  Value: "FILL_DIAMOND"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_StartArrow_FillDiamond;
/**
 *  Filled square.
 *
 *  Value: "FILL_SQUARE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_StartArrow_FillSquare;
/**
 *  No arrow.
 *
 *  Value: "NONE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_StartArrow_None;
/**
 *  Hollow arrow.
 *
 *  Value: "OPEN_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_StartArrow_OpenArrow;
/**
 *  Hollow circle.
 *
 *  Value: "OPEN_CIRCLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_StartArrow_OpenCircle;
/**
 *  Hollow diamond.
 *
 *  Value: "OPEN_DIAMOND"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_StartArrow_OpenDiamond;
/**
 *  Hollow square.
 *
 *  Value: "OPEN_SQUARE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_StartArrow_OpenSquare;
/**
 *  Arrow with notched back. Corresponds to ECMA-376 ST_LineEndType value
 *  'stealth'.
 *
 *  Value: "STEALTH_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_LineProperties_StartArrow_StealthArrow;

// ----------------------------------------------------------------------------
// GTLRSlides_Link.relativeLink

/**
 *  A link to the first slide in the presentation.
 *
 *  Value: "FIRST_SLIDE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Link_RelativeLink_FirstSlide;
/**
 *  A link to the last slide in the presentation.
 *
 *  Value: "LAST_SLIDE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Link_RelativeLink_LastSlide;
/**
 *  A link to the next slide.
 *
 *  Value: "NEXT_SLIDE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Link_RelativeLink_NextSlide;
/**
 *  A link to the previous slide.
 *
 *  Value: "PREVIOUS_SLIDE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Link_RelativeLink_PreviousSlide;
/**
 *  An unspecified relative slide link.
 *
 *  Value: "RELATIVE_SLIDE_LINK_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Link_RelativeLink_RelativeSlideLinkUnspecified;

// ----------------------------------------------------------------------------
// GTLRSlides_OpaqueColor.themeColor

/**
 *  Represents the first accent color.
 *
 *  Value: "ACCENT1"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_Accent1;
/**
 *  Represents the second accent color.
 *
 *  Value: "ACCENT2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_Accent2;
/**
 *  Represents the third accent color.
 *
 *  Value: "ACCENT3"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_Accent3;
/**
 *  Represents the fourth accent color.
 *
 *  Value: "ACCENT4"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_Accent4;
/**
 *  Represents the fifth accent color.
 *
 *  Value: "ACCENT5"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_Accent5;
/**
 *  Represents the sixth accent color.
 *
 *  Value: "ACCENT6"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_Accent6;
/**
 *  Represents the first background color.
 *
 *  Value: "BACKGROUND1"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_Background1;
/**
 *  Represents the second background color.
 *
 *  Value: "BACKGROUND2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_Background2;
/**
 *  Represents the first dark color.
 *
 *  Value: "DARK1"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_Dark1;
/**
 *  Represents the second dark color.
 *
 *  Value: "DARK2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_Dark2;
/**
 *  Represents the color to use for visited hyperlinks.
 *
 *  Value: "FOLLOWED_HYPERLINK"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_FollowedHyperlink;
/**
 *  Represents the color to use for hyperlinks.
 *
 *  Value: "HYPERLINK"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_Hyperlink;
/**
 *  Represents the first light color.
 *
 *  Value: "LIGHT1"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_Light1;
/**
 *  Represents the second light color.
 *
 *  Value: "LIGHT2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_Light2;
/**
 *  Represents the first text color.
 *
 *  Value: "TEXT1"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_Text1;
/**
 *  Represents the second text color.
 *
 *  Value: "TEXT2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_Text2;
/**
 *  Unspecified theme color. This value should not be used.
 *
 *  Value: "THEME_COLOR_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_OpaqueColor_ThemeColor_ThemeColorTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSlides_Outline.dashStyle

/**
 *  Dashed line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dash'.
 *
 *  Value: "DASH"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Outline_DashStyle_Dash;
/**
 *  Alternating dashes and dots. Corresponds to ECMA-376 ST_PresetLineDashVal
 *  value 'dashDot'.
 *
 *  Value: "DASH_DOT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Outline_DashStyle_DashDot;
/**
 *  Unspecified dash style.
 *
 *  Value: "DASH_STYLE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Outline_DashStyle_DashStyleUnspecified;
/**
 *  Dotted line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dot'.
 *
 *  Value: "DOT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Outline_DashStyle_Dot;
/**
 *  Line with large dashes. Corresponds to ECMA-376 ST_PresetLineDashVal
 *  value 'lgDash'.
 *
 *  Value: "LONG_DASH"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Outline_DashStyle_LongDash;
/**
 *  Alternating large dashes and dots. Corresponds to ECMA-376
 *  ST_PresetLineDashVal value 'lgDashDot'.
 *
 *  Value: "LONG_DASH_DOT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Outline_DashStyle_LongDashDot;
/**
 *  Solid line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'solid'.
 *  This is the default dash style.
 *
 *  Value: "SOLID"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Outline_DashStyle_Solid;

// ----------------------------------------------------------------------------
// GTLRSlides_Outline.propertyState

/**
 *  If a property's state is INHERIT, then the property state uses the value of
 *  corresponding `property_state` field on the parent shape. Elements that do
 *  not inherit will never have an INHERIT property state.
 *
 *  Value: "INHERIT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Outline_PropertyState_Inherit;
/**
 *  If a property's state is NOT_RENDERED, then the element does not have the
 *  corresponding property when rendered on a page. However, the field may
 *  still be set so it can be inherited by child shapes. To remove a property
 *  from a rendered element, set its property_state to NOT_RENDERED.
 *
 *  Value: "NOT_RENDERED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Outline_PropertyState_NotRendered;
/**
 *  If a property's state is RENDERED, then the element has the corresponding
 *  property when rendered on a page. If the element is a placeholder shape as
 *  determined by the placeholder
 *  field, and it inherits from a placeholder shape, the corresponding field
 *  may be unset, meaning that the property value is inherited from a parent
 *  placeholder. If the element does not inherit, then the field will contain
 *  the rendered value. This is the default value.
 *
 *  Value: "RENDERED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Outline_PropertyState_Rendered;

// ----------------------------------------------------------------------------
// GTLRSlides_Page.pageType

/**
 *  A layout page.
 *
 *  Value: "LAYOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Page_PageType_Layout;
/**
 *  A master slide page.
 *
 *  Value: "MASTER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Page_PageType_Master;
/**
 *  A notes page.
 *
 *  Value: "NOTES"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Page_PageType_Notes;
/**
 *  A notes master page.
 *
 *  Value: "NOTES_MASTER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Page_PageType_NotesMaster;
/**
 *  A slide page.
 *
 *  Value: "SLIDE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Page_PageType_Slide;

// ----------------------------------------------------------------------------
// GTLRSlides_PageBackgroundFill.propertyState

/**
 *  If a property's state is INHERIT, then the property state uses the value of
 *  corresponding `property_state` field on the parent shape. Elements that do
 *  not inherit will never have an INHERIT property state.
 *
 *  Value: "INHERIT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_PageBackgroundFill_PropertyState_Inherit;
/**
 *  If a property's state is NOT_RENDERED, then the element does not have the
 *  corresponding property when rendered on a page. However, the field may
 *  still be set so it can be inherited by child shapes. To remove a property
 *  from a rendered element, set its property_state to NOT_RENDERED.
 *
 *  Value: "NOT_RENDERED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_PageBackgroundFill_PropertyState_NotRendered;
/**
 *  If a property's state is RENDERED, then the element has the corresponding
 *  property when rendered on a page. If the element is a placeholder shape as
 *  determined by the placeholder
 *  field, and it inherits from a placeholder shape, the corresponding field
 *  may be unset, meaning that the property value is inherited from a parent
 *  placeholder. If the element does not inherit, then the field will contain
 *  the rendered value. This is the default value.
 *
 *  Value: "RENDERED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_PageBackgroundFill_PropertyState_Rendered;

// ----------------------------------------------------------------------------
// GTLRSlides_ParagraphStyle.alignment

/**
 *  The paragraph alignment is inherited from the parent.
 *
 *  Value: "ALIGNMENT_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ParagraphStyle_Alignment_AlignmentUnspecified;
/**
 *  The paragraph is centered.
 *
 *  Value: "CENTER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ParagraphStyle_Alignment_Center;
/**
 *  The paragraph is aligned to the end of the line. Right-aligned for
 *  LTR text, left-aligned otherwise.
 *
 *  Value: "END"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ParagraphStyle_Alignment_End;
/**
 *  The paragraph is justified.
 *
 *  Value: "JUSTIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ParagraphStyle_Alignment_Justified;
/**
 *  The paragraph is aligned to the start of the line. Left-aligned for
 *  LTR text, right-aligned otherwise.
 *
 *  Value: "START"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ParagraphStyle_Alignment_Start;

// ----------------------------------------------------------------------------
// GTLRSlides_ParagraphStyle.direction

/**
 *  The text goes from left to right.
 *
 *  Value: "LEFT_TO_RIGHT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ParagraphStyle_Direction_LeftToRight;
/**
 *  The text goes from right to left.
 *
 *  Value: "RIGHT_TO_LEFT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ParagraphStyle_Direction_RightToLeft;
/**
 *  The text direction is inherited from the parent.
 *
 *  Value: "TEXT_DIRECTION_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ParagraphStyle_Direction_TextDirectionUnspecified;

// ----------------------------------------------------------------------------
// GTLRSlides_ParagraphStyle.spacingMode

/**
 *  Paragraph spacing is skipped between list elements.
 *
 *  Value: "COLLAPSE_LISTS"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ParagraphStyle_SpacingMode_CollapseLists;
/**
 *  Paragraph spacing is always rendered.
 *
 *  Value: "NEVER_COLLAPSE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ParagraphStyle_SpacingMode_NeverCollapse;
/**
 *  The spacing mode is inherited from the parent.
 *
 *  Value: "SPACING_MODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ParagraphStyle_SpacingMode_SpacingModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSlides_Placeholder.type

/**
 *  Body text.
 *
 *  Value: "BODY"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_Body;
/**
 *  Title centered.
 *
 *  Value: "CENTERED_TITLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_CenteredTitle;
/**
 *  Chart or graph.
 *
 *  Value: "CHART"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_Chart;
/**
 *  Clip art image.
 *
 *  Value: "CLIP_ART"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_ClipArt;
/**
 *  Date and time.
 *
 *  Value: "DATE_AND_TIME"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_DateAndTime;
/**
 *  Diagram.
 *
 *  Value: "DIAGRAM"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_Diagram;
/**
 *  Footer text.
 *
 *  Value: "FOOTER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_Footer;
/**
 *  Header text.
 *
 *  Value: "HEADER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_Header;
/**
 *  Multimedia.
 *
 *  Value: "MEDIA"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_Media;
/**
 *  Default value, signifies it is not a placeholder.
 *
 *  Value: "NONE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_None;
/**
 *  Any content type.
 *
 *  Value: "OBJECT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_Object;
/**
 *  Picture.
 *
 *  Value: "PICTURE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_Picture;
/**
 *  Slide image.
 *
 *  Value: "SLIDE_IMAGE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_SlideImage;
/**
 *  Number of a slide.
 *
 *  Value: "SLIDE_NUMBER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_SlideNumber;
/**
 *  Subtitle.
 *
 *  Value: "SUBTITLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_Subtitle;
/**
 *  Table.
 *
 *  Value: "TABLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_Table;
/**
 *  Slide title.
 *
 *  Value: "TITLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Placeholder_Type_Title;

// ----------------------------------------------------------------------------
// GTLRSlides_Range.type

/**
 *  Sets the range to be the whole length of the collection. Both the
 *  `start_index` and the `end_index` must not be
 *  specified.
 *
 *  Value: "ALL"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Range_Type_All;
/**
 *  A fixed range. Both the `start_index` and
 *  `end_index` must be specified.
 *
 *  Value: "FIXED_RANGE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Range_Type_FixedRange;
/**
 *  Starts the range at `start_index` and continues until the
 *  end of the collection. The `end_index` must not be specified.
 *
 *  Value: "FROM_START_INDEX"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Range_Type_FromStartIndex;
/**
 *  Unspecified range type. This value must not be used.
 *
 *  Value: "RANGE_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Range_Type_RangeTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSlides_Recolor.name

/**
 *  Custom recolor effect. Refer to `recolor_stops` for the concrete
 *  gradient.
 *
 *  Value: "CUSTOM"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Custom;
/**
 *  A recolor effect that darkens the image using the page's first available
 *  color from its color scheme.
 *
 *  Value: "DARK1"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Dark1;
/**
 *  A recolor effect that darkens the image using the page's tenth available
 *  color from its color scheme.
 *
 *  Value: "DARK10"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Dark10;
/**
 *  A recolor effect that darkens the image using the page's second available
 *  color from its color scheme.
 *
 *  Value: "DARK2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Dark2;
/**
 *  A recolor effect that darkens the image using the page's third available
 *  color from its color scheme.
 *
 *  Value: "DARK3"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Dark3;
/**
 *  A recolor effect that darkens the image using the page's fourth available
 *  color from its color scheme.
 *
 *  Value: "DARK4"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Dark4;
/**
 *  A recolor effect that darkens the image using the page's fifth available
 *  color from its color scheme.
 *
 *  Value: "DARK5"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Dark5;
/**
 *  A recolor effect that darkens the image using the page's sixth available
 *  color from its color scheme.
 *
 *  Value: "DARK6"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Dark6;
/**
 *  A recolor effect that darkens the image using the page's seventh
 *  available color from its color scheme.
 *
 *  Value: "DARK7"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Dark7;
/**
 *  A recolor effect that darkens the image using the page's eighth available
 *  color from its color scheme.
 *
 *  Value: "DARK8"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Dark8;
/**
 *  A recolor effect that darkens the image using the page's ninth available
 *  color from its color scheme.
 *
 *  Value: "DARK9"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Dark9;
/**
 *  A recolor effect that recolors the image to grayscale.
 *
 *  Value: "GRAYSCALE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Grayscale;
/**
 *  A recolor effect that lightens the image using the page's first available
 *  color from its color scheme.
 *
 *  Value: "LIGHT1"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Light1;
/**
 *  A recolor effect that lightens the image using the page's tenth available
 *  color from its color scheme.
 *
 *  Value: "LIGHT10"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Light10;
/**
 *  A recolor effect that lightens the image using the page's second
 *  available color from its color scheme.
 *
 *  Value: "LIGHT2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Light2;
/**
 *  A recolor effect that lightens the image using the page's third available
 *  color from its color scheme.
 *
 *  Value: "LIGHT3"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Light3;
/**
 *  A recolor effect that lightens the image using the page's forth available
 *  color from its color scheme.
 *
 *  Value: "LIGHT4"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Light4;
/**
 *  A recolor effect that lightens the image using the page's fifth available
 *  color from its color scheme.
 *
 *  Value: "LIGHT5"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Light5;
/**
 *  A recolor effect that lightens the image using the page's sixth available
 *  color from its color scheme.
 *
 *  Value: "LIGHT6"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Light6;
/**
 *  A recolor effect that lightens the image using the page's seventh
 *  available color from its color scheme.
 *
 *  Value: "LIGHT7"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Light7;
/**
 *  A recolor effect that lightens the image using the page's eighth
 *  available color from its color scheme.
 *
 *  Value: "LIGHT8"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Light8;
/**
 *  A recolor effect that lightens the image using the page's ninth available
 *  color from its color scheme.
 *
 *  Value: "LIGHT9"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Light9;
/**
 *  A recolor effect that recolors the image to negative grayscale.
 *
 *  Value: "NEGATIVE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Negative;
/**
 *  No recolor effect. The default value.
 *
 *  Value: "NONE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_None;
/**
 *  A recolor effect that recolors the image using the sepia color.
 *
 *  Value: "SEPIA"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Recolor_Name_Sepia;

// ----------------------------------------------------------------------------
// GTLRSlides_ReplaceAllShapesWithImageRequest.imageReplaceMethod

/**
 *  Scales and centers the image to fill the bounds of the original shape.
 *  The image may be cropped in order to fill the shape. The rendered size of
 *  the image will be the same as that of the original shape.
 *
 *  Value: "CENTER_CROP"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ReplaceAllShapesWithImageRequest_ImageReplaceMethod_CenterCrop;
/**
 *  Scales and centers the image to fit within the bounds of the original
 *  shape and maintains the image's aspect ratio. The rendered size of the
 *  image may be smaller than the size of the shape. This is the default
 *  method when one is not specified.
 *
 *  Value: "CENTER_INSIDE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ReplaceAllShapesWithImageRequest_ImageReplaceMethod_CenterInside;
/**
 *  Unspecified image replace method. This value must not be used.
 *
 *  Value: "IMAGE_REPLACE_METHOD_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ReplaceAllShapesWithImageRequest_ImageReplaceMethod_ImageReplaceMethodUnspecified;

// ----------------------------------------------------------------------------
// GTLRSlides_ReplaceAllShapesWithImageRequest.replaceMethod

/**
 *  Scales and centers the image to fill the bounds of the original shape.
 *  The image may be cropped in order to fill the shape. The rendered size of
 *  the image will be the same as that of the original shape.
 *
 *  Value: "CENTER_CROP"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ReplaceAllShapesWithImageRequest_ReplaceMethod_CenterCrop;
/**
 *  Scales and centers the image to fit within the bounds of the original
 *  shape and maintains the image's aspect ratio. The rendered size of the
 *  image may be smaller than the size of the shape. This is the default
 *  method when one is not specified.
 *
 *  Value: "CENTER_INSIDE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ReplaceAllShapesWithImageRequest_ReplaceMethod_CenterInside;

// ----------------------------------------------------------------------------
// GTLRSlides_ReplaceAllShapesWithSheetsChartRequest.linkingMode

/**
 *  Linking the chart allows it to be updated, and other collaborators will
 *  see a link to the spreadsheet.
 *
 *  Value: "LINKED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ReplaceAllShapesWithSheetsChartRequest_LinkingMode_Linked;
/**
 *  The chart is not associated with the source spreadsheet and cannot be
 *  updated. A chart that is not linked will be inserted as an image.
 *
 *  Value: "NOT_LINKED_IMAGE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ReplaceAllShapesWithSheetsChartRequest_LinkingMode_NotLinkedImage;

// ----------------------------------------------------------------------------
// GTLRSlides_ReplaceImageRequest.imageReplaceMethod

/**
 *  Scales and centers the image to fill the bounds of the original shape.
 *  The image may be cropped in order to fill the shape. The rendered size of
 *  the image will be the same as that of the original shape.
 *
 *  Value: "CENTER_CROP"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ReplaceImageRequest_ImageReplaceMethod_CenterCrop;
/**
 *  Scales and centers the image to fit within the bounds of the original
 *  shape and maintains the image's aspect ratio. The rendered size of the
 *  image may be smaller than the size of the shape. This is the default
 *  method when one is not specified.
 *
 *  Value: "CENTER_INSIDE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ReplaceImageRequest_ImageReplaceMethod_CenterInside;
/**
 *  Unspecified image replace method. This value must not be used.
 *
 *  Value: "IMAGE_REPLACE_METHOD_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ReplaceImageRequest_ImageReplaceMethod_ImageReplaceMethodUnspecified;

// ----------------------------------------------------------------------------
// GTLRSlides_Shadow.alignment

/**
 *  Bottom center.
 *
 *  Value: "BOTTOM_CENTER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shadow_Alignment_BottomCenter;
/**
 *  Bottom left.
 *
 *  Value: "BOTTOM_LEFT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shadow_Alignment_BottomLeft;
/**
 *  Bottom right.
 *
 *  Value: "BOTTOM_RIGHT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shadow_Alignment_BottomRight;
/**
 *  Center.
 *
 *  Value: "CENTER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shadow_Alignment_Center;
/**
 *  Left center.
 *
 *  Value: "LEFT_CENTER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shadow_Alignment_LeftCenter;
/**
 *  Unspecified.
 *
 *  Value: "RECTANGLE_POSITION_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shadow_Alignment_RectanglePositionUnspecified;
/**
 *  Right center.
 *
 *  Value: "RIGHT_CENTER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shadow_Alignment_RightCenter;
/**
 *  Top center.
 *
 *  Value: "TOP_CENTER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shadow_Alignment_TopCenter;
/**
 *  Top left.
 *
 *  Value: "TOP_LEFT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shadow_Alignment_TopLeft;
/**
 *  Top right.
 *
 *  Value: "TOP_RIGHT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shadow_Alignment_TopRight;

// ----------------------------------------------------------------------------
// GTLRSlides_Shadow.propertyState

/**
 *  If a property's state is INHERIT, then the property state uses the value of
 *  corresponding `property_state` field on the parent shape. Elements that do
 *  not inherit will never have an INHERIT property state.
 *
 *  Value: "INHERIT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shadow_PropertyState_Inherit;
/**
 *  If a property's state is NOT_RENDERED, then the element does not have the
 *  corresponding property when rendered on a page. However, the field may
 *  still be set so it can be inherited by child shapes. To remove a property
 *  from a rendered element, set its property_state to NOT_RENDERED.
 *
 *  Value: "NOT_RENDERED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shadow_PropertyState_NotRendered;
/**
 *  If a property's state is RENDERED, then the element has the corresponding
 *  property when rendered on a page. If the element is a placeholder shape as
 *  determined by the placeholder
 *  field, and it inherits from a placeholder shape, the corresponding field
 *  may be unset, meaning that the property value is inherited from a parent
 *  placeholder. If the element does not inherit, then the field will contain
 *  the rendered value. This is the default value.
 *
 *  Value: "RENDERED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shadow_PropertyState_Rendered;

// ----------------------------------------------------------------------------
// GTLRSlides_Shadow.type

/**
 *  Outer shadow.
 *
 *  Value: "OUTER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shadow_Type_Outer;
/**
 *  Unspecified shadow type.
 *
 *  Value: "SHADOW_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shadow_Type_ShadowTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSlides_Shape.shapeType

/**
 *  Curved arc shape. Corresponds to ECMA-376 ST_ShapeType 'arc'
 *
 *  Value: "ARC"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Arc;
/**
 *  East arrow shape.
 *
 *  Value: "ARROW_EAST"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_ArrowEast;
/**
 *  North arrow shape.
 *
 *  Value: "ARROW_NORTH"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_ArrowNorth;
/**
 *  Northeast arrow shape.
 *
 *  Value: "ARROW_NORTH_EAST"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_ArrowNorthEast;
/**
 *  Bent arrow shape. Corresponds to ECMA-376 ST_ShapeType 'bentArrow'
 *
 *  Value: "BENT_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_BentArrow;
/**
 *  Bent up arrow shape. Corresponds to ECMA-376 ST_ShapeType 'bentUpArrow'
 *
 *  Value: "BENT_UP_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_BentUpArrow;
/**
 *  Bevel shape. Corresponds to ECMA-376 ST_ShapeType 'bevel'
 *
 *  Value: "BEVEL"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Bevel;
/**
 *  Block arc shape. Corresponds to ECMA-376 ST_ShapeType 'blockArc'
 *
 *  Value: "BLOCK_ARC"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_BlockArc;
/**
 *  Brace pair shape. Corresponds to ECMA-376 ST_ShapeType 'bracePair'
 *
 *  Value: "BRACE_PAIR"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_BracePair;
/**
 *  Bracket pair shape. Corresponds to ECMA-376 ST_ShapeType 'bracketPair'
 *
 *  Value: "BRACKET_PAIR"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_BracketPair;
/**
 *  Can shape. Corresponds to ECMA-376 ST_ShapeType 'can'
 *
 *  Value: "CAN"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Can;
/**
 *  Chevron shape. Corresponds to ECMA-376 ST_ShapeType 'chevron'
 *
 *  Value: "CHEVRON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Chevron;
/**
 *  Chord shape. Corresponds to ECMA-376 ST_ShapeType 'chord'
 *
 *  Value: "CHORD"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Chord;
/**
 *  Cloud shape. Corresponds to ECMA-376 ST_ShapeType 'cloud'
 *
 *  Value: "CLOUD"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Cloud;
/**
 *  Callout cloud shape. Corresponds to ECMA-376 ST_ShapeType 'cloudCallout'
 *
 *  Value: "CLOUD_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_CloudCallout;
/**
 *  Corner shape. Corresponds to ECMA-376 ST_ShapeType 'corner'
 *
 *  Value: "CORNER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Corner;
/**
 *  Cube shape. Corresponds to ECMA-376 ST_ShapeType 'cube'
 *
 *  Value: "CUBE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Cube;
/**
 *  Curved down arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'curvedDownArrow'
 *
 *  Value: "CURVED_DOWN_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_CurvedDownArrow;
/**
 *  Curved left arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'curvedLeftArrow'
 *
 *  Value: "CURVED_LEFT_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_CurvedLeftArrow;
/**
 *  Curved right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'curvedRightArrow'
 *
 *  Value: "CURVED_RIGHT_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_CurvedRightArrow;
/**
 *  Curved up arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'curvedUpArrow'
 *
 *  Value: "CURVED_UP_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_CurvedUpArrow;
/**
 *  Custom shape.
 *
 *  Value: "CUSTOM"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Custom;
/**
 *  Decagon shape. Corresponds to ECMA-376 ST_ShapeType 'decagon'
 *
 *  Value: "DECAGON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Decagon;
/**
 *  Diagonal stripe shape. Corresponds to ECMA-376 ST_ShapeType 'diagStripe'
 *
 *  Value: "DIAGONAL_STRIPE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_DiagonalStripe;
/**
 *  Diamond shape. Corresponds to ECMA-376 ST_ShapeType 'diamond'
 *
 *  Value: "DIAMOND"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Diamond;
/**
 *  Dodecagon shape. Corresponds to ECMA-376 ST_ShapeType 'dodecagon'
 *
 *  Value: "DODECAGON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Dodecagon;
/**
 *  Donut shape. Corresponds to ECMA-376 ST_ShapeType 'donut'
 *
 *  Value: "DONUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Donut;
/**
 *  Double wave shape. Corresponds to ECMA-376 ST_ShapeType 'doubleWave'
 *
 *  Value: "DOUBLE_WAVE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_DoubleWave;
/**
 *  Down arrow shape. Corresponds to ECMA-376 ST_ShapeType 'downArrow'
 *
 *  Value: "DOWN_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_DownArrow;
/**
 *  Callout down arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'downArrowCallout'
 *
 *  Value: "DOWN_ARROW_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_DownArrowCallout;
/**
 *  Ellipse shape. Corresponds to ECMA-376 ST_ShapeType 'ellipse'
 *
 *  Value: "ELLIPSE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Ellipse;
/**
 *  Ellipse ribbon shape. Corresponds to ECMA-376 ST_ShapeType
 *  'ellipseRibbon'
 *
 *  Value: "ELLIPSE_RIBBON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_EllipseRibbon;
/**
 *  Ellipse ribbon 2 shape. Corresponds to ECMA-376 ST_ShapeType
 *  'ellipseRibbon2'
 *
 *  Value: "ELLIPSE_RIBBON_2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_EllipseRibbon2;
/**
 *  Alternate process flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartAlternateProcess'
 *
 *  Value: "FLOW_CHART_ALTERNATE_PROCESS"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartAlternateProcess;
/**
 *  Collate flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartCollate'
 *
 *  Value: "FLOW_CHART_COLLATE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartCollate;
/**
 *  Connector flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartConnector'
 *
 *  Value: "FLOW_CHART_CONNECTOR"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartConnector;
/**
 *  Decision flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartDecision'
 *
 *  Value: "FLOW_CHART_DECISION"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartDecision;
/**
 *  Delay flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartDelay'
 *
 *  Value: "FLOW_CHART_DELAY"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartDelay;
/**
 *  Display flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartDisplay'
 *
 *  Value: "FLOW_CHART_DISPLAY"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartDisplay;
/**
 *  Document flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartDocument'
 *
 *  Value: "FLOW_CHART_DOCUMENT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartDocument;
/**
 *  Extract flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartExtract'
 *
 *  Value: "FLOW_CHART_EXTRACT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartExtract;
/**
 *  Input output flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartInputOutput'
 *
 *  Value: "FLOW_CHART_INPUT_OUTPUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartInputOutput;
/**
 *  Internal storage flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartInternalStorage'
 *
 *  Value: "FLOW_CHART_INTERNAL_STORAGE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartInternalStorage;
/**
 *  Magnetic disk flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartMagneticDisk'
 *
 *  Value: "FLOW_CHART_MAGNETIC_DISK"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartMagneticDisk;
/**
 *  Magnetic drum flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartMagneticDrum'
 *
 *  Value: "FLOW_CHART_MAGNETIC_DRUM"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartMagneticDrum;
/**
 *  Magnetic tape flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartMagneticTape'
 *
 *  Value: "FLOW_CHART_MAGNETIC_TAPE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartMagneticTape;
/**
 *  Manual input flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartManualInput'
 *
 *  Value: "FLOW_CHART_MANUAL_INPUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartManualInput;
/**
 *  Manual operation flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartManualOperation'
 *
 *  Value: "FLOW_CHART_MANUAL_OPERATION"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartManualOperation;
/**
 *  Merge flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartMerge'
 *
 *  Value: "FLOW_CHART_MERGE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartMerge;
/**
 *  Multi-document flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartMultidocument'
 *
 *  Value: "FLOW_CHART_MULTIDOCUMENT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartMultidocument;
/**
 *  Offline storage flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartOfflineStorage'
 *
 *  Value: "FLOW_CHART_OFFLINE_STORAGE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartOfflineStorage;
/**
 *  Off-page connector flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartOffpageConnector'
 *
 *  Value: "FLOW_CHART_OFFPAGE_CONNECTOR"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartOffpageConnector;
/**
 *  Online storage flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartOnlineStorage'
 *
 *  Value: "FLOW_CHART_ONLINE_STORAGE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartOnlineStorage;
/**
 *  Or flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartOr'
 *
 *  Value: "FLOW_CHART_OR"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartOr;
/**
 *  Predefined process flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartPredefinedProcess'
 *
 *  Value: "FLOW_CHART_PREDEFINED_PROCESS"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartPredefinedProcess;
/**
 *  Preparation flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartPreparation'
 *
 *  Value: "FLOW_CHART_PREPARATION"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartPreparation;
/**
 *  Process flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartProcess'
 *
 *  Value: "FLOW_CHART_PROCESS"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartProcess;
/**
 *  Punched card flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartPunchedCard'
 *
 *  Value: "FLOW_CHART_PUNCHED_CARD"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartPunchedCard;
/**
 *  Punched tape flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartPunchedTape'
 *
 *  Value: "FLOW_CHART_PUNCHED_TAPE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartPunchedTape;
/**
 *  Sort flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartSort'
 *
 *  Value: "FLOW_CHART_SORT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartSort;
/**
 *  Summing junction flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartSummingJunction'
 *
 *  Value: "FLOW_CHART_SUMMING_JUNCTION"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartSummingJunction;
/**
 *  Terminator flow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'flowChartTerminator'
 *
 *  Value: "FLOW_CHART_TERMINATOR"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FlowChartTerminator;
/**
 *  Folded corner shape. Corresponds to ECMA-376 ST_ShapeType 'foldedCorner'
 *
 *  Value: "FOLDED_CORNER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_FoldedCorner;
/**
 *  Frame shape. Corresponds to ECMA-376 ST_ShapeType 'frame'
 *
 *  Value: "FRAME"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Frame;
/**
 *  Half frame shape. Corresponds to ECMA-376 ST_ShapeType 'halfFrame'
 *
 *  Value: "HALF_FRAME"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_HalfFrame;
/**
 *  Heart shape. Corresponds to ECMA-376 ST_ShapeType 'heart'
 *
 *  Value: "HEART"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Heart;
/**
 *  Heptagon shape. Corresponds to ECMA-376 ST_ShapeType 'heptagon'
 *
 *  Value: "HEPTAGON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Heptagon;
/**
 *  Hexagon shape. Corresponds to ECMA-376 ST_ShapeType 'hexagon'
 *
 *  Value: "HEXAGON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Hexagon;
/**
 *  Home plate shape. Corresponds to ECMA-376 ST_ShapeType 'homePlate'
 *
 *  Value: "HOME_PLATE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_HomePlate;
/**
 *  Horizontal scroll shape. Corresponds to ECMA-376 ST_ShapeType
 *  'horizontalScroll'
 *
 *  Value: "HORIZONTAL_SCROLL"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_HorizontalScroll;
/**
 *  Irregular seal 1 shape. Corresponds to ECMA-376 ST_ShapeType
 *  'irregularSeal1'
 *
 *  Value: "IRREGULAR_SEAL_1"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_IrregularSeal1;
/**
 *  Irregular seal 2 shape. Corresponds to ECMA-376 ST_ShapeType
 *  'irregularSeal2'
 *
 *  Value: "IRREGULAR_SEAL_2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_IrregularSeal2;
/**
 *  Left arrow shape. Corresponds to ECMA-376 ST_ShapeType 'leftArrow'
 *
 *  Value: "LEFT_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_LeftArrow;
/**
 *  Callout left arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'leftArrowCallout'
 *
 *  Value: "LEFT_ARROW_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_LeftArrowCallout;
/**
 *  Left brace shape. Corresponds to ECMA-376 ST_ShapeType 'leftBrace'
 *
 *  Value: "LEFT_BRACE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_LeftBrace;
/**
 *  Left bracket shape. Corresponds to ECMA-376 ST_ShapeType 'leftBracket'
 *
 *  Value: "LEFT_BRACKET"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_LeftBracket;
/**
 *  Left right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'leftRightArrow'
 *
 *  Value: "LEFT_RIGHT_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_LeftRightArrow;
/**
 *  Callout left right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'leftRightArrowCallout'
 *
 *  Value: "LEFT_RIGHT_ARROW_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_LeftRightArrowCallout;
/**
 *  Left right up arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'leftRightUpArrow'
 *
 *  Value: "LEFT_RIGHT_UP_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_LeftRightUpArrow;
/**
 *  Left up arrow shape. Corresponds to ECMA-376 ST_ShapeType 'leftUpArrow'
 *
 *  Value: "LEFT_UP_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_LeftUpArrow;
/**
 *  Lightning bolt shape. Corresponds to ECMA-376 ST_ShapeType
 *  'lightningBolt'
 *
 *  Value: "LIGHTNING_BOLT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_LightningBolt;
/**
 *  Divide math shape. Corresponds to ECMA-376 ST_ShapeType 'mathDivide'
 *
 *  Value: "MATH_DIVIDE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_MathDivide;
/**
 *  Equal math shape. Corresponds to ECMA-376 ST_ShapeType 'mathEqual'
 *
 *  Value: "MATH_EQUAL"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_MathEqual;
/**
 *  Minus math shape. Corresponds to ECMA-376 ST_ShapeType 'mathMinus'
 *
 *  Value: "MATH_MINUS"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_MathMinus;
/**
 *  Multiply math shape. Corresponds to ECMA-376 ST_ShapeType 'mathMultiply'
 *
 *  Value: "MATH_MULTIPLY"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_MathMultiply;
/**
 *  Not equal math shape. Corresponds to ECMA-376 ST_ShapeType 'mathNotEqual'
 *
 *  Value: "MATH_NOT_EQUAL"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_MathNotEqual;
/**
 *  Plus math shape. Corresponds to ECMA-376 ST_ShapeType 'mathPlus'
 *
 *  Value: "MATH_PLUS"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_MathPlus;
/**
 *  Moon shape. Corresponds to ECMA-376 ST_ShapeType 'moon'
 *
 *  Value: "MOON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Moon;
/**
 *  No smoking shape. Corresponds to ECMA-376 ST_ShapeType 'noSmoking'
 *
 *  Value: "NO_SMOKING"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_NoSmoking;
/**
 *  Notched right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'notchedRightArrow'
 *
 *  Value: "NOTCHED_RIGHT_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_NotchedRightArrow;
/**
 *  Octagon shape. Corresponds to ECMA-376 ST_ShapeType 'octagon'
 *
 *  Value: "OCTAGON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Octagon;
/**
 *  Parallelogram shape. Corresponds to ECMA-376 ST_ShapeType 'parallelogram'
 *
 *  Value: "PARALLELOGRAM"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Parallelogram;
/**
 *  Pentagon shape. Corresponds to ECMA-376 ST_ShapeType 'pentagon'
 *
 *  Value: "PENTAGON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Pentagon;
/**
 *  Pie shape. Corresponds to ECMA-376 ST_ShapeType 'pie'
 *
 *  Value: "PIE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Pie;
/**
 *  Plaque shape. Corresponds to ECMA-376 ST_ShapeType 'plaque'
 *
 *  Value: "PLAQUE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Plaque;
/**
 *  Plus shape. Corresponds to ECMA-376 ST_ShapeType 'plus'
 *
 *  Value: "PLUS"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Plus;
/**
 *  Quad-arrow shape. Corresponds to ECMA-376 ST_ShapeType 'quadArrow'
 *
 *  Value: "QUAD_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_QuadArrow;
/**
 *  Callout quad-arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'quadArrowCallout'
 *
 *  Value: "QUAD_ARROW_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_QuadArrowCallout;
/**
 *  Rectangle shape. Corresponds to ECMA-376 ST_ShapeType 'rect'.
 *
 *  Value: "RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Rectangle;
/**
 *  Ribbon shape. Corresponds to ECMA-376 ST_ShapeType 'ribbon'
 *
 *  Value: "RIBBON"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Ribbon;
/**
 *  Ribbon 2 shape. Corresponds to ECMA-376 ST_ShapeType 'ribbon2'
 *
 *  Value: "RIBBON_2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Ribbon2;
/**
 *  Right arrow shape. Corresponds to ECMA-376 ST_ShapeType 'rightArrow'
 *
 *  Value: "RIGHT_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_RightArrow;
/**
 *  Callout right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'rightArrowCallout'
 *
 *  Value: "RIGHT_ARROW_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_RightArrowCallout;
/**
 *  Right brace shape. Corresponds to ECMA-376 ST_ShapeType 'rightBrace'
 *
 *  Value: "RIGHT_BRACE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_RightBrace;
/**
 *  Right bracket shape. Corresponds to ECMA-376 ST_ShapeType 'rightBracket'
 *
 *  Value: "RIGHT_BRACKET"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_RightBracket;
/**
 *  Right triangle shape. Corresponds to ECMA-376 ST_ShapeType 'rtTriangle'
 *
 *  Value: "RIGHT_TRIANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_RightTriangle;
/**
 *  One round corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *  'round1Rect'
 *
 *  Value: "ROUND_1_RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Round1Rectangle;
/**
 *  Two diagonal round corner rectangle shape. Corresponds to ECMA-376
 *  ST_ShapeType 'round2DiagRect'
 *
 *  Value: "ROUND_2_DIAGONAL_RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Round2DiagonalRectangle;
/**
 *  Two same-side round corner rectangle shape. Corresponds to ECMA-376
 *  ST_ShapeType 'round2SameRect'
 *
 *  Value: "ROUND_2_SAME_RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Round2SameRectangle;
/**
 *  Round corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *  'roundRect'
 *
 *  Value: "ROUND_RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_RoundRectangle;
/**
 *  Smiley face shape. Corresponds to ECMA-376 ST_ShapeType 'smileyFace'
 *
 *  Value: "SMILEY_FACE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_SmileyFace;
/**
 *  One snip corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *  'snip1Rect'
 *
 *  Value: "SNIP_1_RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Snip1Rectangle;
/**
 *  Two diagonal snip corner rectangle shape. Corresponds to ECMA-376
 *  ST_ShapeType 'snip2DiagRect'
 *
 *  Value: "SNIP_2_DIAGONAL_RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Snip2DiagonalRectangle;
/**
 *  Two same-side snip corner rectangle shape. Corresponds to ECMA-376
 *  ST_ShapeType 'snip2SameRect'
 *
 *  Value: "SNIP_2_SAME_RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Snip2SameRectangle;
/**
 *  One snip one round corner rectangle shape. Corresponds to ECMA-376
 *  ST_ShapeType 'snipRoundRect'
 *
 *  Value: "SNIP_ROUND_RECTANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_SnipRoundRectangle;
/**
 *  Speech shape.
 *
 *  Value: "SPEECH"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Speech;
/**
 *  Ten pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star10'
 *
 *  Value: "STAR_10"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Star10;
/**
 *  Twelve pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star12'
 *
 *  Value: "STAR_12"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Star12;
/**
 *  Sixteen pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star16'
 *
 *  Value: "STAR_16"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Star16;
/**
 *  Twenty four pointed star shape. Corresponds to ECMA-376 ST_ShapeType
 *  'star24'
 *
 *  Value: "STAR_24"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Star24;
/**
 *  Thirty two pointed star shape. Corresponds to ECMA-376 ST_ShapeType
 *  'star32'
 *
 *  Value: "STAR_32"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Star32;
/**
 *  Four pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star4'
 *
 *  Value: "STAR_4"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Star4;
/**
 *  Five pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star5'
 *
 *  Value: "STAR_5"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Star5;
/**
 *  Six pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star6'
 *
 *  Value: "STAR_6"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Star6;
/**
 *  Seven pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star7'
 *
 *  Value: "STAR_7"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Star7;
/**
 *  Eight pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star8'
 *
 *  Value: "STAR_8"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Star8;
/**
 *  Star burst shape.
 *
 *  Value: "STARBURST"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Starburst;
/**
 *  Striped right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'stripedRightArrow'
 *
 *  Value: "STRIPED_RIGHT_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_StripedRightArrow;
/**
 *  Sun shape. Corresponds to ECMA-376 ST_ShapeType 'sun'
 *
 *  Value: "SUN"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Sun;
/**
 *  Teardrop shape. Corresponds to ECMA-376 ST_ShapeType 'teardrop'
 *
 *  Value: "TEARDROP"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Teardrop;
/**
 *  Text box shape.
 *
 *  Value: "TEXT_BOX"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_TextBox;
/**
 *  Trapezoid shape. Corresponds to ECMA-376 ST_ShapeType 'trapezoid'
 *
 *  Value: "TRAPEZOID"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Trapezoid;
/**
 *  Triangle shape. Corresponds to ECMA-376 ST_ShapeType 'triangle'
 *
 *  Value: "TRIANGLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Triangle;
/**
 *  The shape type that is not predefined.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_TypeUnspecified;
/**
 *  Up arrow shape. Corresponds to ECMA-376 ST_ShapeType 'upArrow'
 *
 *  Value: "UP_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_UpArrow;
/**
 *  Callout up arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *  'upArrowCallout'
 *
 *  Value: "UP_ARROW_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_UpArrowCallout;
/**
 *  Up down arrow shape. Corresponds to ECMA-376 ST_ShapeType 'upDownArrow'
 *
 *  Value: "UP_DOWN_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_UpDownArrow;
/**
 *  U-turn arrow shape. Corresponds to ECMA-376 ST_ShapeType 'uturnArrow'
 *
 *  Value: "UTURN_ARROW"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_UturnArrow;
/**
 *  Vertical scroll shape. Corresponds to ECMA-376 ST_ShapeType
 *  'verticalScroll'
 *
 *  Value: "VERTICAL_SCROLL"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_VerticalScroll;
/**
 *  Wave shape. Corresponds to ECMA-376 ST_ShapeType 'wave'
 *
 *  Value: "WAVE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_Wave;
/**
 *  Callout wedge ellipse shape. Corresponds to ECMA-376 ST_ShapeType
 *  'wedgeEllipseCallout'
 *
 *  Value: "WEDGE_ELLIPSE_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_WedgeEllipseCallout;
/**
 *  Callout wedge rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *  'wedgeRectCallout'
 *
 *  Value: "WEDGE_RECTANGLE_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_WedgeRectangleCallout;
/**
 *  Callout wedge round rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *  'wedgeRoundRectCallout'
 *
 *  Value: "WEDGE_ROUND_RECTANGLE_CALLOUT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Shape_ShapeType_WedgeRoundRectangleCallout;

// ----------------------------------------------------------------------------
// GTLRSlides_ShapeBackgroundFill.propertyState

/**
 *  If a property's state is INHERIT, then the property state uses the value of
 *  corresponding `property_state` field on the parent shape. Elements that do
 *  not inherit will never have an INHERIT property state.
 *
 *  Value: "INHERIT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ShapeBackgroundFill_PropertyState_Inherit;
/**
 *  If a property's state is NOT_RENDERED, then the element does not have the
 *  corresponding property when rendered on a page. However, the field may
 *  still be set so it can be inherited by child shapes. To remove a property
 *  from a rendered element, set its property_state to NOT_RENDERED.
 *
 *  Value: "NOT_RENDERED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ShapeBackgroundFill_PropertyState_NotRendered;
/**
 *  If a property's state is RENDERED, then the element has the corresponding
 *  property when rendered on a page. If the element is a placeholder shape as
 *  determined by the placeholder
 *  field, and it inherits from a placeholder shape, the corresponding field
 *  may be unset, meaning that the property value is inherited from a parent
 *  placeholder. If the element does not inherit, then the field will contain
 *  the rendered value. This is the default value.
 *
 *  Value: "RENDERED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ShapeBackgroundFill_PropertyState_Rendered;

// ----------------------------------------------------------------------------
// GTLRSlides_ShapeProperties.contentAlignment

/**
 *  An alignment that aligns the content to the bottom of the content
 *  holder. Corresponds to ECMA-376 ST_TextAnchoringType 'b'.
 *
 *  Value: "BOTTOM"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ShapeProperties_ContentAlignment_Bottom;
/**
 *  An unspecified content alignment. The content alignment is inherited from
 *  the parent if it exists.
 *
 *  Value: "CONTENT_ALIGNMENT_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ShapeProperties_ContentAlignment_ContentAlignmentUnspecified;
/**
 *  An unsupported content alignment.
 *
 *  Value: "CONTENT_ALIGNMENT_UNSUPPORTED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ShapeProperties_ContentAlignment_ContentAlignmentUnsupported;
/**
 *  An alignment that aligns the content to the middle of the content
 *  holder. Corresponds to ECMA-376 ST_TextAnchoringType 'ctr'.
 *
 *  Value: "MIDDLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ShapeProperties_ContentAlignment_Middle;
/**
 *  An alignment that aligns the content to the top of the content holder.
 *  Corresponds to ECMA-376 ST_TextAnchoringType 't'.
 *
 *  Value: "TOP"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ShapeProperties_ContentAlignment_Top;

// ----------------------------------------------------------------------------
// GTLRSlides_TableBorderProperties.dashStyle

/**
 *  Dashed line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dash'.
 *
 *  Value: "DASH"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TableBorderProperties_DashStyle_Dash;
/**
 *  Alternating dashes and dots. Corresponds to ECMA-376 ST_PresetLineDashVal
 *  value 'dashDot'.
 *
 *  Value: "DASH_DOT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TableBorderProperties_DashStyle_DashDot;
/**
 *  Unspecified dash style.
 *
 *  Value: "DASH_STYLE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TableBorderProperties_DashStyle_DashStyleUnspecified;
/**
 *  Dotted line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dot'.
 *
 *  Value: "DOT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TableBorderProperties_DashStyle_Dot;
/**
 *  Line with large dashes. Corresponds to ECMA-376 ST_PresetLineDashVal
 *  value 'lgDash'.
 *
 *  Value: "LONG_DASH"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TableBorderProperties_DashStyle_LongDash;
/**
 *  Alternating large dashes and dots. Corresponds to ECMA-376
 *  ST_PresetLineDashVal value 'lgDashDot'.
 *
 *  Value: "LONG_DASH_DOT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TableBorderProperties_DashStyle_LongDashDot;
/**
 *  Solid line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'solid'.
 *  This is the default dash style.
 *
 *  Value: "SOLID"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TableBorderProperties_DashStyle_Solid;

// ----------------------------------------------------------------------------
// GTLRSlides_TableCellBackgroundFill.propertyState

/**
 *  If a property's state is INHERIT, then the property state uses the value of
 *  corresponding `property_state` field on the parent shape. Elements that do
 *  not inherit will never have an INHERIT property state.
 *
 *  Value: "INHERIT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TableCellBackgroundFill_PropertyState_Inherit;
/**
 *  If a property's state is NOT_RENDERED, then the element does not have the
 *  corresponding property when rendered on a page. However, the field may
 *  still be set so it can be inherited by child shapes. To remove a property
 *  from a rendered element, set its property_state to NOT_RENDERED.
 *
 *  Value: "NOT_RENDERED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TableCellBackgroundFill_PropertyState_NotRendered;
/**
 *  If a property's state is RENDERED, then the element has the corresponding
 *  property when rendered on a page. If the element is a placeholder shape as
 *  determined by the placeholder
 *  field, and it inherits from a placeholder shape, the corresponding field
 *  may be unset, meaning that the property value is inherited from a parent
 *  placeholder. If the element does not inherit, then the field will contain
 *  the rendered value. This is the default value.
 *
 *  Value: "RENDERED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TableCellBackgroundFill_PropertyState_Rendered;

// ----------------------------------------------------------------------------
// GTLRSlides_TableCellProperties.contentAlignment

/**
 *  An alignment that aligns the content to the bottom of the content
 *  holder. Corresponds to ECMA-376 ST_TextAnchoringType 'b'.
 *
 *  Value: "BOTTOM"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TableCellProperties_ContentAlignment_Bottom;
/**
 *  An unspecified content alignment. The content alignment is inherited from
 *  the parent if it exists.
 *
 *  Value: "CONTENT_ALIGNMENT_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TableCellProperties_ContentAlignment_ContentAlignmentUnspecified;
/**
 *  An unsupported content alignment.
 *
 *  Value: "CONTENT_ALIGNMENT_UNSUPPORTED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TableCellProperties_ContentAlignment_ContentAlignmentUnsupported;
/**
 *  An alignment that aligns the content to the middle of the content
 *  holder. Corresponds to ECMA-376 ST_TextAnchoringType 'ctr'.
 *
 *  Value: "MIDDLE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TableCellProperties_ContentAlignment_Middle;
/**
 *  An alignment that aligns the content to the top of the content holder.
 *  Corresponds to ECMA-376 ST_TextAnchoringType 't'.
 *
 *  Value: "TOP"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TableCellProperties_ContentAlignment_Top;

// ----------------------------------------------------------------------------
// GTLRSlides_TextStyle.baselineOffset

/**
 *  The text's baseline offset is inherited from the parent.
 *
 *  Value: "BASELINE_OFFSET_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TextStyle_BaselineOffset_BaselineOffsetUnspecified;
/**
 *  The text is not vertically offset.
 *
 *  Value: "NONE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TextStyle_BaselineOffset_None;
/**
 *  The text is vertically offset downwards (subscript).
 *
 *  Value: "SUBSCRIPT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TextStyle_BaselineOffset_Subscript;
/**
 *  The text is vertically offset upwards (superscript).
 *
 *  Value: "SUPERSCRIPT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_TextStyle_BaselineOffset_Superscript;

// ----------------------------------------------------------------------------
// GTLRSlides_ThemeColorPair.type

/**
 *  Represents the first accent color.
 *
 *  Value: "ACCENT1"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_Accent1;
/**
 *  Represents the second accent color.
 *
 *  Value: "ACCENT2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_Accent2;
/**
 *  Represents the third accent color.
 *
 *  Value: "ACCENT3"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_Accent3;
/**
 *  Represents the fourth accent color.
 *
 *  Value: "ACCENT4"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_Accent4;
/**
 *  Represents the fifth accent color.
 *
 *  Value: "ACCENT5"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_Accent5;
/**
 *  Represents the sixth accent color.
 *
 *  Value: "ACCENT6"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_Accent6;
/**
 *  Represents the first background color.
 *
 *  Value: "BACKGROUND1"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_Background1;
/**
 *  Represents the second background color.
 *
 *  Value: "BACKGROUND2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_Background2;
/**
 *  Represents the first dark color.
 *
 *  Value: "DARK1"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_Dark1;
/**
 *  Represents the second dark color.
 *
 *  Value: "DARK2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_Dark2;
/**
 *  Represents the color to use for visited hyperlinks.
 *
 *  Value: "FOLLOWED_HYPERLINK"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_FollowedHyperlink;
/**
 *  Represents the color to use for hyperlinks.
 *
 *  Value: "HYPERLINK"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_Hyperlink;
/**
 *  Represents the first light color.
 *
 *  Value: "LIGHT1"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_Light1;
/**
 *  Represents the second light color.
 *
 *  Value: "LIGHT2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_Light2;
/**
 *  Represents the first text color.
 *
 *  Value: "TEXT1"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_Text1;
/**
 *  Represents the second text color.
 *
 *  Value: "TEXT2"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_Text2;
/**
 *  Unspecified theme color. This value should not be used.
 *
 *  Value: "THEME_COLOR_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_ThemeColorPair_Type_ThemeColorTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSlides_UpdateLineCategoryRequest.lineCategory

/**
 *  Bent connectors, including bent connector 2 to 5.
 *
 *  Value: "BENT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdateLineCategoryRequest_LineCategory_Bent;
/**
 *  Curved connectors, including curved connector 2 to 5.
 *
 *  Value: "CURVED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdateLineCategoryRequest_LineCategory_Curved;
/**
 *  Unspecified line category.
 *
 *  Value: "LINE_CATEGORY_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdateLineCategoryRequest_LineCategory_LineCategoryUnspecified;
/**
 *  Straight connectors, including straight connector 1.
 *
 *  Value: "STRAIGHT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdateLineCategoryRequest_LineCategory_Straight;

// ----------------------------------------------------------------------------
// GTLRSlides_UpdatePageElementsZOrderRequest.operation

/**
 *  Brings the page elements forward on the page by one element relative to the
 *  forwardmost one in the specified page elements.
 *
 *  Value: "BRING_FORWARD"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdatePageElementsZOrderRequest_Operation_BringForward;
/**
 *  Brings the page elements to the front of the page.
 *
 *  Value: "BRING_TO_FRONT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdatePageElementsZOrderRequest_Operation_BringToFront;
/**
 *  Sends the page elements backward on the page by one element relative to the
 *  furthest behind one in the specified page elements.
 *
 *  Value: "SEND_BACKWARD"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdatePageElementsZOrderRequest_Operation_SendBackward;
/**
 *  Sends the page elements to the back of the page.
 *
 *  Value: "SEND_TO_BACK"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdatePageElementsZOrderRequest_Operation_SendToBack;
/**
 *  Unspecified operation.
 *
 *  Value: "Z_ORDER_OPERATION_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdatePageElementsZOrderRequest_Operation_ZOrderOperationUnspecified;

// ----------------------------------------------------------------------------
// GTLRSlides_UpdatePageElementTransformRequest.applyMode

/**
 *  Replaces the existing AffineTransform matrix with the new one.
 *
 *  Value: "ABSOLUTE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdatePageElementTransformRequest_ApplyMode_Absolute;
/**
 *  Unspecified mode.
 *
 *  Value: "APPLY_MODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdatePageElementTransformRequest_ApplyMode_ApplyModeUnspecified;
/**
 *  Applies the new AffineTransform matrix to the existing one, and
 *  replaces the existing one with the resulting concatenation.
 *
 *  Value: "RELATIVE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdatePageElementTransformRequest_ApplyMode_Relative;

// ----------------------------------------------------------------------------
// GTLRSlides_UpdateTableBorderPropertiesRequest.borderPosition

/**
 *  All borders in the range.
 *
 *  Value: "ALL"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_All;
/**
 *  Borders at the bottom of the range.
 *
 *  Value: "BOTTOM"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_Bottom;
/**
 *  Borders on the inside of the range.
 *
 *  Value: "INNER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_Inner;
/**
 *  Horizontal borders on the inside of the range.
 *
 *  Value: "INNER_HORIZONTAL"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_InnerHorizontal;
/**
 *  Vertical borders on the inside of the range.
 *
 *  Value: "INNER_VERTICAL"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_InnerVertical;
/**
 *  Borders at the left of the range.
 *
 *  Value: "LEFT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_Left;
/**
 *  Borders along the outside of the range.
 *
 *  Value: "OUTER"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_Outer;
/**
 *  Borders at the right of the range.
 *
 *  Value: "RIGHT"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_Right;
/**
 *  Borders at the top of the range.
 *
 *  Value: "TOP"
 */
GTLR_EXTERN NSString * const kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_Top;

// ----------------------------------------------------------------------------
// GTLRSlides_Video.source

/**
 *  The video source is Google Drive.
 *
 *  Value: "DRIVE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Video_Source_Drive;
/**
 *  The video source is unspecified.
 *
 *  Value: "SOURCE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Video_Source_SourceUnspecified;
/**
 *  The video source is YouTube.
 *
 *  Value: "YOUTUBE"
 */
GTLR_EXTERN NSString * const kGTLRSlides_Video_Source_Youtube;

/**
 *  AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ]
 *  to transform source coordinates (x,y) into destination coordinates (x', y')
 *  according to:
 *  x' x = shear_y scale_y translate_y
 *  1 [ 1 ]
 *  After transformation,
 *  x' = scale_x * x + shear_x * y + translate_x;
 *  y' = scale_y * y + shear_y * x + translate_y;
 *  This message is therefore composed of these six matrix elements.
 */
@interface GTLRSlides_AffineTransform : GTLRObject

/**
 *  The X coordinate scaling element.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scaleX;

/**
 *  The Y coordinate scaling element.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scaleY;

/**
 *  The X coordinate shearing element.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shearX;

/**
 *  The Y coordinate shearing element.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shearY;

/**
 *  The X coordinate translation element.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *translateX;

/**
 *  The Y coordinate translation element.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *translateY;

/**
 *  The units for translate elements.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_AffineTransform_Unit_Emu An English Metric Unit (EMU)
 *        is defined as 1/360,000 of a centimeter
 *        and thus there are 914,400 EMUs per inch, and 12,700 EMUs per point.
 *        (Value: "EMU")
 *    @arg @c kGTLRSlides_AffineTransform_Unit_Pt A point, 1/72 of an inch.
 *        (Value: "PT")
 *    @arg @c kGTLRSlides_AffineTransform_Unit_UnitUnspecified The units are
 *        unknown. (Value: "UNIT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *unit;

@end


/**
 *  A TextElement kind that represents auto text.
 */
@interface GTLRSlides_AutoText : GTLRObject

/** The rendered content of this auto text, if available. */
@property(nonatomic, copy, nullable) NSString *content;

/** The styling applied to this auto text. */
@property(nonatomic, strong, nullable) GTLRSlides_TextStyle *style;

/**
 *  The type of this auto text.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_AutoText_Type_SlideNumber Type for autotext that
 *        represents the current slide number. (Value: "SLIDE_NUMBER")
 *    @arg @c kGTLRSlides_AutoText_Type_TypeUnspecified An unspecified autotext
 *        type. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Request message for PresentationsService.BatchUpdatePresentation.
 */
@interface GTLRSlides_BatchUpdatePresentationRequest : GTLRObject

/** A list of updates to apply to the presentation. */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_Request *> *requests;

/** Provides control over how write requests are executed. */
@property(nonatomic, strong, nullable) GTLRSlides_WriteControl *writeControl;

@end


/**
 *  Response message from a batch update.
 */
@interface GTLRSlides_BatchUpdatePresentationResponse : GTLRObject

/** The presentation the updates were applied to. */
@property(nonatomic, copy, nullable) NSString *presentationId;

/**
 *  The reply of the updates. This maps 1:1 with the updates, although
 *  replies to some requests may be empty.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_Response *> *replies;

/** The updated write control after applying the request. */
@property(nonatomic, strong, nullable) GTLRSlides_WriteControl *writeControl;

@end


/**
 *  Describes the bullet of a paragraph.
 */
@interface GTLRSlides_Bullet : GTLRObject

/** The paragraph specific text style applied to this bullet. */
@property(nonatomic, strong, nullable) GTLRSlides_TextStyle *bulletStyle;

/** The rendered bullet glyph for this paragraph. */
@property(nonatomic, copy, nullable) NSString *glyph;

/** The ID of the list this paragraph belongs to. */
@property(nonatomic, copy, nullable) NSString *listId;

/**
 *  The nesting level of this paragraph in the list.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nestingLevel;

@end


/**
 *  The palette of predefined colors for a page.
 */
@interface GTLRSlides_ColorScheme : GTLRObject

/** The ThemeColorType and corresponding concrete color pairs. */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_ThemeColorPair *> *colors;

@end


/**
 *  A color and position in a gradient band.
 */
@interface GTLRSlides_ColorStop : GTLRObject

/**
 *  The alpha value of this color in the gradient band. Defaults to 1.0,
 *  fully opaque.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *alpha;

/** The color of the gradient stop. */
@property(nonatomic, strong, nullable) GTLRSlides_OpaqueColor *color;

/**
 *  The relative position of the color stop in the gradient band measured
 *  in percentage. The value should be in the interval [0.0, 1.0].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *position;

@end


/**
 *  Creates an image.
 */
@interface GTLRSlides_CreateImageRequest : GTLRObject

/**
 *  The element properties for the image.
 *  When the aspect ratio of the provided size does not match the image aspect
 *  ratio, the image is scaled and centered with respect to the size in order
 *  to maintain aspect ratio. The provided transform is applied after this
 *  operation.
 *  The PageElementProperties.size property is
 *  optional. If you don't specify the size, the default size of the image is
 *  used.
 *  The PageElementProperties.transform property is
 *  optional. If you don't specify a transform, the image will be placed at the
 *  top left corner of the page.
 */
@property(nonatomic, strong, nullable) GTLRSlides_PageElementProperties *elementProperties;

/**
 *  A user-supplied object ID.
 *  If you specify an ID, it must be unique among all pages and page elements
 *  in the presentation. The ID must start with an alphanumeric character or an
 *  underscore (matches regex `[a-zA-Z0-9_]`); remaining characters
 *  may include those as well as a hyphen or colon (matches regex
 *  `[a-zA-Z0-9_-:]`).
 *  The length of the ID must not be less than 5 or greater than 50.
 *  If you don't specify an ID, a unique one is generated.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

/**
 *  The image URL.
 *  The image is fetched once at insertion time and a copy is stored for
 *  display inside the presentation. Images must be less than 50MB in size,
 *  cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF
 *  format.
 *  The provided URL can be at most 2 kB in length. The URL itself is saved
 *  with the image, and exposed via the Image.source_url field.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  The result of creating an image.
 */
@interface GTLRSlides_CreateImageResponse : GTLRObject

/** The object ID of the created image. */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  Creates a line.
 */
@interface GTLRSlides_CreateLineRequest : GTLRObject

/**
 *  The category of the line to be created.
 *  The exact line type created is
 *  determined based on the category and how it's routed to connect to other
 *  page elements.
 *  If you specify both a `category` and a `line_category`, the `category`
 *  takes precedence.
 *  If you do not specify a value for `category`, but specify a value for
 *  `line_category`, then the specified `line_category` value is used.
 *  If you do not specify either, then STRAIGHT is used.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_CreateLineRequest_Category_Bent Bent connectors,
 *        including bent connector 2 to 5. (Value: "BENT")
 *    @arg @c kGTLRSlides_CreateLineRequest_Category_Curved Curved connectors,
 *        including curved connector 2 to 5. (Value: "CURVED")
 *    @arg @c kGTLRSlides_CreateLineRequest_Category_LineCategoryUnspecified
 *        Unspecified line category. (Value: "LINE_CATEGORY_UNSPECIFIED")
 *    @arg @c kGTLRSlides_CreateLineRequest_Category_Straight Straight
 *        connectors, including straight connector 1. (Value: "STRAIGHT")
 */
@property(nonatomic, copy, nullable) NSString *category;

/** The element properties for the line. */
@property(nonatomic, strong, nullable) GTLRSlides_PageElementProperties *elementProperties;

/**
 *  The category of the line to be created.
 *  <b>Deprecated</b>: use `category` instead.
 *  The exact line type created is
 *  determined based on the category and how it's routed to connect to other
 *  page elements.
 *  If you specify both a `category` and a `line_category`, the `category`
 *  takes precedence.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_CreateLineRequest_LineCategory_Bent Bent connectors,
 *        including bent connector 2 to 5. (Value: "BENT")
 *    @arg @c kGTLRSlides_CreateLineRequest_LineCategory_Curved Curved
 *        connectors, including curved connector 2 to 5. (Value: "CURVED")
 *    @arg @c kGTLRSlides_CreateLineRequest_LineCategory_Straight Straight
 *        connectors, including straight connector 1. The is the default
 *        category when one is not specified. (Value: "STRAIGHT")
 */
@property(nonatomic, copy, nullable) NSString *lineCategory;

/**
 *  A user-supplied object ID.
 *  If you specify an ID, it must be unique among all pages and page elements
 *  in the presentation. The ID must start with an alphanumeric character or an
 *  underscore (matches regex `[a-zA-Z0-9_]`); remaining characters
 *  may include those as well as a hyphen or colon (matches regex
 *  `[a-zA-Z0-9_-:]`).
 *  The length of the ID must not be less than 5 or greater than 50.
 *  If you don't specify an ID, a unique one is generated.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  The result of creating a line.
 */
@interface GTLRSlides_CreateLineResponse : GTLRObject

/** The object ID of the created line. */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  Creates bullets for all of the paragraphs that overlap with the given
 *  text index range.
 *  The nesting level of each paragraph will be determined by counting leading
 *  tabs in front of each paragraph. To avoid excess space between the bullet
 *  and
 *  the corresponding paragraph, these leading tabs are removed by this request.
 *  This may change the indices of parts of the text.
 *  If the paragraph immediately before paragraphs being updated is in a list
 *  with a matching preset, the paragraphs being updated are added to that
 *  preceding list.
 */
@interface GTLRSlides_CreateParagraphBulletsRequest : GTLRObject

/**
 *  The kinds of bullet glyphs to be used. Defaults to the
 *  `BULLET_DISC_CIRCLE_SQUARE` preset.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletArrow3dCircleSquare
 *        A bulleted list with a `ARROW3D`, `CIRCLE` and `SQUARE` bullet glyph
 *        for
 *        the first 3 list nesting levels. (Value:
 *        "BULLET_ARROW3D_CIRCLE_SQUARE")
 *    @arg @c kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletArrowDiamondDisc
 *        A bulleted list with a `ARROW`, `DIAMOND` and `DISC` bullet glyph for
 *        the first 3 list nesting levels. (Value: "BULLET_ARROW_DIAMOND_DISC")
 *    @arg @c kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletCheckbox
 *        A bulleted list with `CHECKBOX` bullet glyphs for all list nesting
 *        levels. (Value: "BULLET_CHECKBOX")
 *    @arg @c kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletDiamondCircleSquare
 *        A bulleted list with a `DIAMOND`, `CIRCLE` and `SQUARE` bullet glyph
 *        for the first 3 list nesting levels. (Value:
 *        "BULLET_DIAMOND_CIRCLE_SQUARE")
 *    @arg @c kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletDiamondxArrow3dSquare
 *        A bulleted list with a `DIAMONDX`, `ARROW3D` and `SQUARE` bullet glyph
 *        for
 *        the first 3 list nesting levels. (Value:
 *        "BULLET_DIAMONDX_ARROW3D_SQUARE")
 *    @arg @c kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletDiamondxHollowdiamondSquare
 *        A bulleted list with a `DIAMONDX`, `HOLLOWDIAMOND` and `SQUARE` bullet
 *        glyph for the first 3 list nesting levels. (Value:
 *        "BULLET_DIAMONDX_HOLLOWDIAMOND_SQUARE")
 *    @arg @c kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletDiscCircleSquare
 *        A bulleted list with a `DISC`, `CIRCLE` and `SQUARE` bullet glyph for
 *        the
 *        first 3 list nesting levels. (Value: "BULLET_DISC_CIRCLE_SQUARE")
 *    @arg @c kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletLefttriangleDiamondDisc
 *        A bulleted list with a `LEFTTRIANGLE`, `DIAMOND` and `DISC` bullet
 *        glyph
 *        for the first 3 list nesting levels. (Value:
 *        "BULLET_LEFTTRIANGLE_DIAMOND_DISC")
 *    @arg @c kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_BulletStarCircleSquare
 *        A bulleted list with a `STAR`, `CIRCLE` and `SQUARE` bullet glyph for
 *        the first 3 list nesting levels. (Value: "BULLET_STAR_CIRCLE_SQUARE")
 *    @arg @c kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_NumberedDigitAlphaRoman
 *        A numbered list with `DIGIT`, `ALPHA` and `ROMAN` numeric glyphs for
 *        the first 3 list nesting levels, followed by periods. (Value:
 *        "NUMBERED_DIGIT_ALPHA_ROMAN")
 *    @arg @c kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_NumberedDigitAlphaRomanParens
 *        A numbered list with `DIGIT`, `ALPHA` and `ROMAN` numeric glyphs for
 *        the first 3 list nesting levels, followed by parenthesis. (Value:
 *        "NUMBERED_DIGIT_ALPHA_ROMAN_PARENS")
 *    @arg @c kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_NumberedDigitNested
 *        A numbered list with `DIGIT` numeric glyphs separated by periods,
 *        where
 *        each nesting level uses the previous nesting level's glyph as a
 *        prefix.
 *        For example: '1.', '1.1.', '2.', '2.2.'. (Value:
 *        "NUMBERED_DIGIT_NESTED")
 *    @arg @c kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_NumberedUpperalphaAlphaRoman
 *        A numbered list with `UPPERALPHA`, `ALPHA` and `ROMAN` numeric glyphs
 *        for
 *        the first 3 list nesting levels, followed by periods. (Value:
 *        "NUMBERED_UPPERALPHA_ALPHA_ROMAN")
 *    @arg @c kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_NumberedUpperromanUpperalphaDigit
 *        A numbered list with `UPPERROMAN`, `UPPERALPHA` and `DIGIT` numeric
 *        glyphs
 *        for the first 3 list nesting levels, followed by periods. (Value:
 *        "NUMBERED_UPPERROMAN_UPPERALPHA_DIGIT")
 *    @arg @c kGTLRSlides_CreateParagraphBulletsRequest_BulletPreset_NumberedZerodigitAlphaRoman
 *        A numbered list with `ZERODIGIT`, `ALPHA` and `ROMAN` numeric glyphs
 *        for
 *        the first 3 list nesting levels, followed by periods. (Value:
 *        "NUMBERED_ZERODIGIT_ALPHA_ROMAN")
 */
@property(nonatomic, copy, nullable) NSString *bulletPreset;

/**
 *  The optional table cell location if the text to be modified is in a table
 *  cell. If present, the object_id must refer to a table.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TableCellLocation *cellLocation;

/**
 *  The object ID of the shape or table containing the text to add bullets to.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

/**
 *  The range of text to apply the bullet presets to, based on TextElement
 *  indexes.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Range *textRange;

@end


/**
 *  Creates a new shape.
 */
@interface GTLRSlides_CreateShapeRequest : GTLRObject

/** The element properties for the shape. */
@property(nonatomic, strong, nullable) GTLRSlides_PageElementProperties *elementProperties;

/**
 *  A user-supplied object ID.
 *  If you specify an ID, it must be unique among all pages and page elements
 *  in the presentation. The ID must start with an alphanumeric character or an
 *  underscore (matches regex `[a-zA-Z0-9_]`); remaining characters
 *  may include those as well as a hyphen or colon (matches regex
 *  `[a-zA-Z0-9_-:]`).
 *  The length of the ID must not be less than 5 or greater than 50.
 *  If empty, a unique identifier will be generated.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

/**
 *  The shape type.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Arc Curved arc shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'arc' (Value: "ARC")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_ArrowEast East arrow
 *        shape. (Value: "ARROW_EAST")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_ArrowNorth North arrow
 *        shape. (Value: "ARROW_NORTH")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_ArrowNorthEast Northeast
 *        arrow shape. (Value: "ARROW_NORTH_EAST")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_BentArrow Bent arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'bentArrow' (Value:
 *        "BENT_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_BentUpArrow Bent up arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'bentUpArrow' (Value:
 *        "BENT_UP_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Bevel Bevel shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'bevel' (Value: "BEVEL")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_BlockArc Block arc shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'blockArc' (Value: "BLOCK_ARC")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_BracePair Brace pair
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'bracePair' (Value:
 *        "BRACE_PAIR")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_BracketPair Bracket pair
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'bracketPair' (Value:
 *        "BRACKET_PAIR")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Can Can shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'can' (Value: "CAN")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Chevron Chevron shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'chevron' (Value: "CHEVRON")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Chord Chord shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'chord' (Value: "CHORD")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Cloud Cloud shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'cloud' (Value: "CLOUD")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_CloudCallout Callout
 *        cloud shape. Corresponds to ECMA-376 ST_ShapeType 'cloudCallout'
 *        (Value: "CLOUD_CALLOUT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Corner Corner shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'corner' (Value: "CORNER")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Cube Cube shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'cube' (Value: "CUBE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_CurvedDownArrow Curved
 *        down arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'curvedDownArrow' (Value: "CURVED_DOWN_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_CurvedLeftArrow Curved
 *        left arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'curvedLeftArrow' (Value: "CURVED_LEFT_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_CurvedRightArrow Curved
 *        right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'curvedRightArrow' (Value: "CURVED_RIGHT_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_CurvedUpArrow Curved up
 *        arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'curvedUpArrow' (Value: "CURVED_UP_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Custom Custom shape.
 *        (Value: "CUSTOM")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Decagon Decagon shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'decagon' (Value: "DECAGON")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_DiagonalStripe Diagonal
 *        stripe shape. Corresponds to ECMA-376 ST_ShapeType 'diagStripe'
 *        (Value: "DIAGONAL_STRIPE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Diamond Diamond shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'diamond' (Value: "DIAMOND")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Dodecagon Dodecagon
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'dodecagon' (Value:
 *        "DODECAGON")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Donut Donut shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'donut' (Value: "DONUT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_DoubleWave Double wave
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'doubleWave' (Value:
 *        "DOUBLE_WAVE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_DownArrow Down arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'downArrow' (Value:
 *        "DOWN_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_DownArrowCallout Callout
 *        down arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'downArrowCallout' (Value: "DOWN_ARROW_CALLOUT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Ellipse Ellipse shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'ellipse' (Value: "ELLIPSE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_EllipseRibbon Ellipse
 *        ribbon shape. Corresponds to ECMA-376 ST_ShapeType
 *        'ellipseRibbon' (Value: "ELLIPSE_RIBBON")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_EllipseRibbon2 Ellipse
 *        ribbon 2 shape. Corresponds to ECMA-376 ST_ShapeType
 *        'ellipseRibbon2' (Value: "ELLIPSE_RIBBON_2")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartAlternateProcess
 *        Alternate process flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartAlternateProcess' (Value: "FLOW_CHART_ALTERNATE_PROCESS")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartCollate Collate
 *        flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartCollate' (Value: "FLOW_CHART_COLLATE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartConnector
 *        Connector flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartConnector' (Value: "FLOW_CHART_CONNECTOR")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartDecision
 *        Decision flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartDecision' (Value: "FLOW_CHART_DECISION")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartDelay Delay flow
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartDelay' (Value:
 *        "FLOW_CHART_DELAY")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartDisplay Display
 *        flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartDisplay' (Value: "FLOW_CHART_DISPLAY")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartDocument
 *        Document flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartDocument' (Value: "FLOW_CHART_DOCUMENT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartExtract Extract
 *        flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartExtract' (Value: "FLOW_CHART_EXTRACT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartInputOutput
 *        Input output flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartInputOutput' (Value: "FLOW_CHART_INPUT_OUTPUT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartInternalStorage
 *        Internal storage flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartInternalStorage' (Value: "FLOW_CHART_INTERNAL_STORAGE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartMagneticDisk
 *        Magnetic disk flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartMagneticDisk' (Value: "FLOW_CHART_MAGNETIC_DISK")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartMagneticDrum
 *        Magnetic drum flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartMagneticDrum' (Value: "FLOW_CHART_MAGNETIC_DRUM")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartMagneticTape
 *        Magnetic tape flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartMagneticTape' (Value: "FLOW_CHART_MAGNETIC_TAPE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartManualInput
 *        Manual input flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartManualInput' (Value: "FLOW_CHART_MANUAL_INPUT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartManualOperation
 *        Manual operation flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartManualOperation' (Value: "FLOW_CHART_MANUAL_OPERATION")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartMerge Merge flow
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartMerge' (Value:
 *        "FLOW_CHART_MERGE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartMultidocument
 *        Multi-document flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartMultidocument' (Value: "FLOW_CHART_MULTIDOCUMENT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartOfflineStorage
 *        Offline storage flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartOfflineStorage' (Value: "FLOW_CHART_OFFLINE_STORAGE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartOffpageConnector
 *        Off-page connector flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartOffpageConnector' (Value: "FLOW_CHART_OFFPAGE_CONNECTOR")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartOnlineStorage
 *        Online storage flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartOnlineStorage' (Value: "FLOW_CHART_ONLINE_STORAGE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartOr Or flow
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartOr' (Value:
 *        "FLOW_CHART_OR")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartPredefinedProcess
 *        Predefined process flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartPredefinedProcess' (Value: "FLOW_CHART_PREDEFINED_PROCESS")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartPreparation
 *        Preparation flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartPreparation' (Value: "FLOW_CHART_PREPARATION")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartProcess Process
 *        flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartProcess' (Value: "FLOW_CHART_PROCESS")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartPunchedCard
 *        Punched card flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartPunchedCard' (Value: "FLOW_CHART_PUNCHED_CARD")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartPunchedTape
 *        Punched tape flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartPunchedTape' (Value: "FLOW_CHART_PUNCHED_TAPE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartSort Sort flow
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartSort' (Value:
 *        "FLOW_CHART_SORT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartSummingJunction
 *        Summing junction flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartSummingJunction' (Value: "FLOW_CHART_SUMMING_JUNCTION")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FlowChartTerminator
 *        Terminator flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartTerminator' (Value: "FLOW_CHART_TERMINATOR")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_FoldedCorner Folded
 *        corner shape. Corresponds to ECMA-376 ST_ShapeType 'foldedCorner'
 *        (Value: "FOLDED_CORNER")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Frame Frame shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'frame' (Value: "FRAME")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_HalfFrame Half frame
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'halfFrame' (Value:
 *        "HALF_FRAME")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Heart Heart shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'heart' (Value: "HEART")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Heptagon Heptagon shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'heptagon' (Value: "HEPTAGON")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Hexagon Hexagon shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'hexagon' (Value: "HEXAGON")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_HomePlate Home plate
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'homePlate' (Value:
 *        "HOME_PLATE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_HorizontalScroll
 *        Horizontal scroll shape. Corresponds to ECMA-376 ST_ShapeType
 *        'horizontalScroll' (Value: "HORIZONTAL_SCROLL")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_IrregularSeal1 Irregular
 *        seal 1 shape. Corresponds to ECMA-376 ST_ShapeType
 *        'irregularSeal1' (Value: "IRREGULAR_SEAL_1")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_IrregularSeal2 Irregular
 *        seal 2 shape. Corresponds to ECMA-376 ST_ShapeType
 *        'irregularSeal2' (Value: "IRREGULAR_SEAL_2")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_LeftArrow Left arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'leftArrow' (Value:
 *        "LEFT_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_LeftArrowCallout Callout
 *        left arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'leftArrowCallout' (Value: "LEFT_ARROW_CALLOUT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_LeftBrace Left brace
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'leftBrace' (Value:
 *        "LEFT_BRACE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_LeftBracket Left bracket
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'leftBracket' (Value:
 *        "LEFT_BRACKET")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_LeftRightArrow Left right
 *        arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'leftRightArrow' (Value: "LEFT_RIGHT_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_LeftRightArrowCallout
 *        Callout left right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'leftRightArrowCallout' (Value: "LEFT_RIGHT_ARROW_CALLOUT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_LeftRightUpArrow Left
 *        right up arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'leftRightUpArrow' (Value: "LEFT_RIGHT_UP_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_LeftUpArrow Left up arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'leftUpArrow' (Value:
 *        "LEFT_UP_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_LightningBolt Lightning
 *        bolt shape. Corresponds to ECMA-376 ST_ShapeType
 *        'lightningBolt' (Value: "LIGHTNING_BOLT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_MathDivide Divide math
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'mathDivide' (Value:
 *        "MATH_DIVIDE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_MathEqual Equal math
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'mathEqual' (Value:
 *        "MATH_EQUAL")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_MathMinus Minus math
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'mathMinus' (Value:
 *        "MATH_MINUS")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_MathMultiply Multiply
 *        math shape. Corresponds to ECMA-376 ST_ShapeType 'mathMultiply'
 *        (Value: "MATH_MULTIPLY")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_MathNotEqual Not equal
 *        math shape. Corresponds to ECMA-376 ST_ShapeType 'mathNotEqual'
 *        (Value: "MATH_NOT_EQUAL")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_MathPlus Plus math shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'mathPlus' (Value: "MATH_PLUS")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Moon Moon shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'moon' (Value: "MOON")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_NoSmoking No smoking
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'noSmoking' (Value:
 *        "NO_SMOKING")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_NotchedRightArrow Notched
 *        right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'notchedRightArrow' (Value: "NOTCHED_RIGHT_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Octagon Octagon shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'octagon' (Value: "OCTAGON")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Parallelogram
 *        Parallelogram shape. Corresponds to ECMA-376 ST_ShapeType
 *        'parallelogram' (Value: "PARALLELOGRAM")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Pentagon Pentagon shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'pentagon' (Value: "PENTAGON")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Pie Pie shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'pie' (Value: "PIE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Plaque Plaque shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'plaque' (Value: "PLAQUE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Plus Plus shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'plus' (Value: "PLUS")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_QuadArrow Quad-arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'quadArrow' (Value:
 *        "QUAD_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_QuadArrowCallout Callout
 *        quad-arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'quadArrowCallout' (Value: "QUAD_ARROW_CALLOUT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Rectangle Rectangle
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'rect'. (Value:
 *        "RECTANGLE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Ribbon Ribbon shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'ribbon' (Value: "RIBBON")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Ribbon2 Ribbon 2 shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'ribbon2' (Value: "RIBBON_2")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_RightArrow Right arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'rightArrow' (Value:
 *        "RIGHT_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_RightArrowCallout Callout
 *        right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'rightArrowCallout' (Value: "RIGHT_ARROW_CALLOUT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_RightBrace Right brace
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'rightBrace' (Value:
 *        "RIGHT_BRACE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_RightBracket Right
 *        bracket shape. Corresponds to ECMA-376 ST_ShapeType 'rightBracket'
 *        (Value: "RIGHT_BRACKET")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_RightTriangle Right
 *        triangle shape. Corresponds to ECMA-376 ST_ShapeType 'rtTriangle'
 *        (Value: "RIGHT_TRIANGLE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Round1Rectangle One round
 *        corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *        'round1Rect' (Value: "ROUND_1_RECTANGLE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Round2DiagonalRectangle
 *        Two diagonal round corner rectangle shape. Corresponds to ECMA-376
 *        ST_ShapeType 'round2DiagRect' (Value: "ROUND_2_DIAGONAL_RECTANGLE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Round2SameRectangle Two
 *        same-side round corner rectangle shape. Corresponds to ECMA-376
 *        ST_ShapeType 'round2SameRect' (Value: "ROUND_2_SAME_RECTANGLE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_RoundRectangle Round
 *        corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *        'roundRect' (Value: "ROUND_RECTANGLE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_SmileyFace Smiley face
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'smileyFace' (Value:
 *        "SMILEY_FACE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Snip1Rectangle One snip
 *        corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *        'snip1Rect' (Value: "SNIP_1_RECTANGLE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Snip2DiagonalRectangle
 *        Two diagonal snip corner rectangle shape. Corresponds to ECMA-376
 *        ST_ShapeType 'snip2DiagRect' (Value: "SNIP_2_DIAGONAL_RECTANGLE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Snip2SameRectangle Two
 *        same-side snip corner rectangle shape. Corresponds to ECMA-376
 *        ST_ShapeType 'snip2SameRect' (Value: "SNIP_2_SAME_RECTANGLE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_SnipRoundRectangle One
 *        snip one round corner rectangle shape. Corresponds to ECMA-376
 *        ST_ShapeType 'snipRoundRect' (Value: "SNIP_ROUND_RECTANGLE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Speech Speech shape.
 *        (Value: "SPEECH")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Star10 Ten pointed star
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'star10' (Value:
 *        "STAR_10")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Star12 Twelve pointed
 *        star shape. Corresponds to ECMA-376 ST_ShapeType 'star12' (Value:
 *        "STAR_12")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Star16 Sixteen pointed
 *        star shape. Corresponds to ECMA-376 ST_ShapeType 'star16' (Value:
 *        "STAR_16")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Star24 Twenty four
 *        pointed star shape. Corresponds to ECMA-376 ST_ShapeType
 *        'star24' (Value: "STAR_24")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Star32 Thirty two pointed
 *        star shape. Corresponds to ECMA-376 ST_ShapeType
 *        'star32' (Value: "STAR_32")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Star4 Four pointed star
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'star4' (Value: "STAR_4")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Star5 Five pointed star
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'star5' (Value: "STAR_5")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Star6 Six pointed star
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'star6' (Value: "STAR_6")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Star7 Seven pointed star
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'star7' (Value: "STAR_7")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Star8 Eight pointed star
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'star8' (Value: "STAR_8")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Starburst Star burst
 *        shape. (Value: "STARBURST")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_StripedRightArrow Striped
 *        right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'stripedRightArrow' (Value: "STRIPED_RIGHT_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Sun Sun shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'sun' (Value: "SUN")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Teardrop Teardrop shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'teardrop' (Value: "TEARDROP")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_TextBox Text box shape.
 *        (Value: "TEXT_BOX")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Trapezoid Trapezoid
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'trapezoid' (Value:
 *        "TRAPEZOID")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Triangle Triangle shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'triangle' (Value: "TRIANGLE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_TypeUnspecified The shape
 *        type that is not predefined. (Value: "TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_UpArrow Up arrow shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'upArrow' (Value: "UP_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_UpArrowCallout Callout up
 *        arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'upArrowCallout' (Value: "UP_ARROW_CALLOUT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_UpDownArrow Up down arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'upDownArrow' (Value:
 *        "UP_DOWN_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_UturnArrow U-turn arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType 'uturnArrow' (Value:
 *        "UTURN_ARROW")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_VerticalScroll Vertical
 *        scroll shape. Corresponds to ECMA-376 ST_ShapeType
 *        'verticalScroll' (Value: "VERTICAL_SCROLL")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_Wave Wave shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'wave' (Value: "WAVE")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_WedgeEllipseCallout
 *        Callout wedge ellipse shape. Corresponds to ECMA-376 ST_ShapeType
 *        'wedgeEllipseCallout' (Value: "WEDGE_ELLIPSE_CALLOUT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_WedgeRectangleCallout
 *        Callout wedge rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *        'wedgeRectCallout' (Value: "WEDGE_RECTANGLE_CALLOUT")
 *    @arg @c kGTLRSlides_CreateShapeRequest_ShapeType_WedgeRoundRectangleCallout
 *        Callout wedge round rectangle shape. Corresponds to ECMA-376
 *        ST_ShapeType
 *        'wedgeRoundRectCallout' (Value: "WEDGE_ROUND_RECTANGLE_CALLOUT")
 */
@property(nonatomic, copy, nullable) NSString *shapeType;

@end


/**
 *  The result of creating a shape.
 */
@interface GTLRSlides_CreateShapeResponse : GTLRObject

/** The object ID of the created shape. */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  Creates an embedded Google Sheets chart.
 *  NOTE: Chart creation requires at least one of the spreadsheets.readonly,
 *  spreadsheets, drive.readonly, drive.file, or drive OAuth scopes.
 */
@interface GTLRSlides_CreateSheetsChartRequest : GTLRObject

/**
 *  The ID of the specific chart in the Google Sheets spreadsheet.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *chartId;

/**
 *  The element properties for the chart.
 *  When the aspect ratio of the provided size does not match the chart aspect
 *  ratio, the chart is scaled and centered with respect to the size in order
 *  to maintain aspect ratio. The provided transform is applied after this
 *  operation.
 */
@property(nonatomic, strong, nullable) GTLRSlides_PageElementProperties *elementProperties;

/**
 *  The mode with which the chart is linked to the source spreadsheet. When
 *  not specified, the chart will be an image that is not linked.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_CreateSheetsChartRequest_LinkingMode_Linked Linking
 *        the chart allows it to be updated, and other collaborators will
 *        see a link to the spreadsheet. (Value: "LINKED")
 *    @arg @c kGTLRSlides_CreateSheetsChartRequest_LinkingMode_NotLinkedImage
 *        The chart is not associated with the source spreadsheet and cannot be
 *        updated. A chart that is not linked will be inserted as an image.
 *        (Value: "NOT_LINKED_IMAGE")
 */
@property(nonatomic, copy, nullable) NSString *linkingMode;

/**
 *  A user-supplied object ID.
 *  If specified, the ID must be unique among all pages and page elements in
 *  the presentation. The ID should start with a word character [a-zA-Z0-9_]
 *  and then followed by any number of the following characters [a-zA-Z0-9_-:].
 *  The length of the ID should not be less than 5 or greater than 50.
 *  If empty, a unique identifier will be generated.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

/** The ID of the Google Sheets spreadsheet that contains the chart. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

@end


/**
 *  The result of creating an embedded Google Sheets chart.
 */
@interface GTLRSlides_CreateSheetsChartResponse : GTLRObject

/** The object ID of the created chart. */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  Creates a new slide.
 */
@interface GTLRSlides_CreateSlideRequest : GTLRObject

/**
 *  The optional zero-based index indicating where to insert the slides.
 *  If you don't specify an index, the new slide is created at the end.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *insertionIndex;

/**
 *  A user-supplied object ID.
 *  If you specify an ID, it must be unique among all pages and page elements
 *  in the presentation. The ID must start with an alphanumeric character or an
 *  underscore (matches regex `[a-zA-Z0-9_]`); remaining characters
 *  may include those as well as a hyphen or colon (matches regex
 *  `[a-zA-Z0-9_-:]`).
 *  The length of the ID must not be less than 5 or greater than 50.
 *  If you don't specify an ID, a unique one is generated.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

/**
 *  An optional list of object ID mappings from the placeholder(s) on the layout
 *  to the placeholder(s)
 *  that will be created on the new slide from that specified layout. Can only
 *  be used when `slide_layout_reference` is specified.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_LayoutPlaceholderIdMapping *> *placeholderIdMappings;

/**
 *  Layout reference of the slide to be inserted, based on the *current
 *  master*, which is one of the following:
 *  - The master of the previous slide index.
 *  - The master of the first slide, if the insertion_index is zero.
 *  - The first master in the presentation, if there are no slides.
 *  If the LayoutReference is not found in the current master, a 400 bad
 *  request error is returned.
 *  If you don't specify a layout reference, then the new slide will use the
 *  predefined layout `BLANK`.
 */
@property(nonatomic, strong, nullable) GTLRSlides_LayoutReference *slideLayoutReference;

@end


/**
 *  The result of creating a slide.
 */
@interface GTLRSlides_CreateSlideResponse : GTLRObject

/** The object ID of the created slide. */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  Creates a new table.
 */
@interface GTLRSlides_CreateTableRequest : GTLRObject

/**
 *  Number of columns in the table.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columns;

/**
 *  The element properties for the table.
 *  The table will be created at the provided size, subject to a minimum size.
 *  If no size is provided, the table will be automatically sized.
 *  Table transforms must have a scale of 1 and no shear components. If no
 *  transform is provided, the table will be centered on the page.
 */
@property(nonatomic, strong, nullable) GTLRSlides_PageElementProperties *elementProperties;

/**
 *  A user-supplied object ID.
 *  If you specify an ID, it must be unique among all pages and page elements
 *  in the presentation. The ID must start with an alphanumeric character or an
 *  underscore (matches regex `[a-zA-Z0-9_]`); remaining characters
 *  may include those as well as a hyphen or colon (matches regex
 *  `[a-zA-Z0-9_-:]`).
 *  The length of the ID must not be less than 5 or greater than 50.
 *  If you don't specify an ID, a unique one is generated.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

/**
 *  Number of rows in the table.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rows;

@end


/**
 *  The result of creating a table.
 */
@interface GTLRSlides_CreateTableResponse : GTLRObject

/** The object ID of the created table. */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  Creates a video.
 *  NOTE: Creating a video from Google Drive requires that the requesting app
 *  have at least one of the drive, drive.readonly, or drive.file OAuth scopes.
 */
@interface GTLRSlides_CreateVideoRequest : GTLRObject

/**
 *  The element properties for the video.
 *  The PageElementProperties.size property is
 *  optional. If you don't specify a size, a default size is chosen by the
 *  server.
 *  The PageElementProperties.transform property is
 *  optional. The transform must not have shear components.
 *  If you don't specify a transform, the video will be placed at the top left
 *  corner of the page.
 */
@property(nonatomic, strong, nullable) GTLRSlides_PageElementProperties *elementProperties;

/**
 *  The video source's unique identifier for this video.
 *  e.g. For YouTube video https://www.youtube.com/watch?v=7U3axjORYZ0,
 *  the ID is 7U3axjORYZ0. For a Google Drive video
 *  https://drive.google.com/file/d/1xCgQLFTJi5_Xl8DgW_lcUYq5e-q6Hi5Q the ID
 *  is 1xCgQLFTJi5_Xl8DgW_lcUYq5e-q6Hi5Q.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  A user-supplied object ID.
 *  If you specify an ID, it must be unique among all pages and page elements
 *  in the presentation. The ID must start with an alphanumeric character or an
 *  underscore (matches regex `[a-zA-Z0-9_]`); remaining characters
 *  may include those as well as a hyphen or colon (matches regex
 *  `[a-zA-Z0-9_-:]`).
 *  The length of the ID must not be less than 5 or greater than 50.
 *  If you don't specify an ID, a unique one is generated.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

/**
 *  The video source.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_CreateVideoRequest_Source_Drive The video source is
 *        Google Drive. (Value: "DRIVE")
 *    @arg @c kGTLRSlides_CreateVideoRequest_Source_SourceUnspecified The video
 *        source is unspecified. (Value: "SOURCE_UNSPECIFIED")
 *    @arg @c kGTLRSlides_CreateVideoRequest_Source_Youtube The video source is
 *        YouTube. (Value: "YOUTUBE")
 */
@property(nonatomic, copy, nullable) NSString *source;

@end


/**
 *  The result of creating a video.
 */
@interface GTLRSlides_CreateVideoResponse : GTLRObject

/** The object ID of the created video. */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  The crop properties of an object enclosed in a container. For example, an
 *  Image.
 *  The crop properties is represented by the offsets of four edges which define
 *  a crop rectangle. The offsets are measured in percentage from the
 *  corresponding edges of the object's original bounding rectangle towards
 *  inside, relative to the object's original dimensions.
 *  - If the offset is in the interval (0, 1), the corresponding edge of crop
 *  rectangle is positioned inside of the object's original bounding rectangle.
 *  - If the offset is negative or greater than 1, the corresponding edge of
 *  crop
 *  rectangle is positioned outside of the object's original bounding rectangle.
 *  - If the left edge of the crop rectangle is on the right side of its right
 *  edge, the object will be flipped horizontally.
 *  - If the top edge of the crop rectangle is below its bottom edge, the object
 *  will be flipped vertically.
 *  - If all offsets and rotation angle is 0, the object is not cropped.
 *  After cropping, the content in the crop rectangle will be stretched to fit
 *  its container.
 */
@interface GTLRSlides_CropProperties : GTLRObject

/**
 *  The rotation angle of the crop window around its center, in radians.
 *  Rotation angle is applied after the offset.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *angle;

/**
 *  The offset specifies the bottom edge of the crop rectangle that is located
 *  above the original bounding rectangle bottom edge, relative to the object's
 *  original height.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bottomOffset;

/**
 *  The offset specifies the left edge of the crop rectangle that is located to
 *  the right of the original bounding rectangle left edge, relative to the
 *  object's original width.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *leftOffset;

/**
 *  The offset specifies the right edge of the crop rectangle that is located
 *  to the left of the original bounding rectangle right edge, relative to the
 *  object's original width.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rightOffset;

/**
 *  The offset specifies the top edge of the crop rectangle that is located
 *  below the original bounding rectangle top edge, relative to the object's
 *  original height.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *topOffset;

@end


/**
 *  Deletes an object, either pages or
 *  page elements, from the
 *  presentation.
 */
@interface GTLRSlides_DeleteObjectRequest : GTLRObject

/**
 *  The object ID of the page or page element to delete.
 *  If after a delete operation a group contains
 *  only 1 or no page elements, the group is also deleted.
 *  If a placeholder is deleted on a layout, any empty inheriting shapes are
 *  also deleted.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  Deletes bullets from all of the paragraphs that overlap with the given text
 *  index range.
 *  The nesting level of each paragraph will be visually preserved by adding
 *  indent to the start of the corresponding paragraph.
 */
@interface GTLRSlides_DeleteParagraphBulletsRequest : GTLRObject

/**
 *  The optional table cell location if the text to be modified is in a table
 *  cell. If present, the object_id must refer to a table.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TableCellLocation *cellLocation;

/**
 *  The object ID of the shape or table containing the text to delete bullets
 *  from.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

/** The range of text to delete bullets from, based on TextElement indexes. */
@property(nonatomic, strong, nullable) GTLRSlides_Range *textRange;

@end


/**
 *  Deletes a column from a table.
 */
@interface GTLRSlides_DeleteTableColumnRequest : GTLRObject

/**
 *  The reference table cell location from which a column will be deleted.
 *  The column this cell spans will be deleted. If this is a merged cell,
 *  multiple columns will be deleted. If no columns remain in the table after
 *  this deletion, the whole table is deleted.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TableCellLocation *cellLocation;

/** The table to delete columns from. */
@property(nonatomic, copy, nullable) NSString *tableObjectId;

@end


/**
 *  Deletes a row from a table.
 */
@interface GTLRSlides_DeleteTableRowRequest : GTLRObject

/**
 *  The reference table cell location from which a row will be deleted.
 *  The row this cell spans will be deleted. If this is a merged cell, multiple
 *  rows will be deleted. If no rows remain in the table after this deletion,
 *  the whole table is deleted.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TableCellLocation *cellLocation;

/** The table to delete rows from. */
@property(nonatomic, copy, nullable) NSString *tableObjectId;

@end


/**
 *  Deletes text from a shape or a table cell.
 */
@interface GTLRSlides_DeleteTextRequest : GTLRObject

/**
 *  The optional table cell location if the text is to be deleted from a table
 *  cell. If present, the object_id must refer to a table.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TableCellLocation *cellLocation;

/**
 *  The object ID of the shape or table from which the text will be deleted.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

/**
 *  The range of text to delete, based on TextElement indexes.
 *  There is always an implicit newline character at the end of a shape's or
 *  table cell's text that cannot be deleted. `Range.Type.ALL` will use the
 *  correct bounds, but care must be taken when specifying explicit bounds for
 *  range types `FROM_START_INDEX` and `FIXED_RANGE`. For example, if the text
 *  is "ABC", followed by an implicit newline, then the maximum value is 2 for
 *  `text_range.start_index` and 3 for `text_range.end_index`.
 *  Deleting text that crosses a paragraph boundary may result in changes
 *  to paragraph styles and lists as the two paragraphs are merged.
 *  Ranges that include only one code unit of a surrogate pair are expanded to
 *  include both code units.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Range *textRange;

@end


/**
 *  A magnitude in a single direction in the specified units.
 */
@interface GTLRSlides_Dimension : GTLRObject

/**
 *  The magnitude.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *magnitude;

/**
 *  The units for magnitude.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_Dimension_Unit_Emu An English Metric Unit (EMU) is
 *        defined as 1/360,000 of a centimeter
 *        and thus there are 914,400 EMUs per inch, and 12,700 EMUs per point.
 *        (Value: "EMU")
 *    @arg @c kGTLRSlides_Dimension_Unit_Pt A point, 1/72 of an inch. (Value:
 *        "PT")
 *    @arg @c kGTLRSlides_Dimension_Unit_UnitUnspecified The units are unknown.
 *        (Value: "UNIT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *unit;

@end


/**
 *  Duplicates a slide or page element.
 *  When duplicating a slide, the duplicate slide will be created immediately
 *  following the specified slide. When duplicating a page element, the
 *  duplicate
 *  will be placed on the same page at the same position as the original.
 */
@interface GTLRSlides_DuplicateObjectRequest : GTLRObject

/** The ID of the object to duplicate. */
@property(nonatomic, copy, nullable) NSString *objectId;

/**
 *  The object being duplicated may contain other objects, for example when
 *  duplicating a slide or a group page element. This map defines how the IDs
 *  of duplicated objects are generated: the keys are the IDs of the original
 *  objects and its values are the IDs that will be assigned to the
 *  corresponding duplicate object. The ID of the source object's duplicate
 *  may be specified in this map as well, using the same value of the
 *  `object_id` field as a key and the newly desired ID as the value.
 *  All keys must correspond to existing IDs in the presentation. All values
 *  must be unique in the presentation and must start with an alphanumeric
 *  character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining
 *  characters may include those as well as a hyphen or colon (matches regex
 *  `[a-zA-Z0-9_-:]`). The length of the new ID must not be less than 5 or
 *  greater than 50.
 *  If any IDs of source objects are omitted from the map, a new random ID will
 *  be assigned. If the map is empty or unset, all duplicate objects will
 *  receive a new random ID.
 */
@property(nonatomic, strong, nullable) GTLRSlides_DuplicateObjectRequest_ObjectIds *objectIds;

@end


/**
 *  The object being duplicated may contain other objects, for example when
 *  duplicating a slide or a group page element. This map defines how the IDs
 *  of duplicated objects are generated: the keys are the IDs of the original
 *  objects and its values are the IDs that will be assigned to the
 *  corresponding duplicate object. The ID of the source object's duplicate
 *  may be specified in this map as well, using the same value of the
 *  `object_id` field as a key and the newly desired ID as the value.
 *  All keys must correspond to existing IDs in the presentation. All values
 *  must be unique in the presentation and must start with an alphanumeric
 *  character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining
 *  characters may include those as well as a hyphen or colon (matches regex
 *  `[a-zA-Z0-9_-:]`). The length of the new ID must not be less than 5 or
 *  greater than 50.
 *  If any IDs of source objects are omitted from the map, a new random ID will
 *  be assigned. If the map is empty or unset, all duplicate objects will
 *  receive a new random ID.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSlides_DuplicateObjectRequest_ObjectIds : GTLRObject
@end


/**
 *  The response of duplicating an object.
 */
@interface GTLRSlides_DuplicateObjectResponse : GTLRObject

/** The ID of the new duplicate object. */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  A PageElement kind representing a
 *  joined collection of PageElements.
 */
@interface GTLRSlides_Group : GTLRObject

/**
 *  The collection of elements in the group. The minimum size of a group is 2.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_PageElement *> *children;

@end


/**
 *  Groups objects to create an object group. For example, groups PageElements
 *  to create a Group on the same page as all the children.
 */
@interface GTLRSlides_GroupObjectsRequest : GTLRObject

/**
 *  The object IDs of the objects to group.
 *  Only page elements can be grouped. There should be at least two page
 *  elements on the same page that are not already in another group. Some page
 *  elements, such as videos, tables and placeholder shapes cannot be grouped.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *childrenObjectIds;

/**
 *  A user-supplied object ID for the group to be created.
 *  If you specify an ID, it must be unique among all pages and page elements
 *  in the presentation. The ID must start with an alphanumeric character or an
 *  underscore (matches regex `[a-zA-Z0-9_]`); remaining characters
 *  may include those as well as a hyphen or colon (matches regex
 *  `[a-zA-Z0-9_-:]`).
 *  The length of the ID must not be less than 5 or greater than 50.
 *  If you don't specify an ID, a unique one is generated.
 */
@property(nonatomic, copy, nullable) NSString *groupObjectId;

@end


/**
 *  The result of grouping objects.
 */
@interface GTLRSlides_GroupObjectsResponse : GTLRObject

/** The object ID of the created group. */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  A PageElement kind representing an
 *  image.
 */
@interface GTLRSlides_Image : GTLRObject

/**
 *  An URL to an image with a default lifetime of 30 minutes.
 *  This URL is tagged with the account of the requester. Anyone with the URL
 *  effectively accesses the image as the original requester. Access to the
 *  image may be lost if the presentation's sharing settings change.
 */
@property(nonatomic, copy, nullable) NSString *contentUrl;

/** The properties of the image. */
@property(nonatomic, strong, nullable) GTLRSlides_ImageProperties *imageProperties;

/**
 *  The source URL is the URL used to insert the image. The source URL can be
 *  empty.
 */
@property(nonatomic, copy, nullable) NSString *sourceUrl;

@end


/**
 *  The properties of the Image.
 */
@interface GTLRSlides_ImageProperties : GTLRObject

/**
 *  The brightness effect of the image. The value should be in the interval
 *  [-1.0, 1.0], where 0 means no effect. This property is read-only.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *brightness;

/**
 *  The contrast effect of the image. The value should be in the interval
 *  [-1.0, 1.0], where 0 means no effect. This property is read-only.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *contrast;

/**
 *  The crop properties of the image. If not set, the image is not cropped.
 *  This property is read-only.
 */
@property(nonatomic, strong, nullable) GTLRSlides_CropProperties *cropProperties;

/** The hyperlink destination of the image. If unset, there is no link. */
@property(nonatomic, strong, nullable) GTLRSlides_Link *link;

/** The outline of the image. If not set, the image has no outline. */
@property(nonatomic, strong, nullable) GTLRSlides_Outline *outline;

/**
 *  The recolor effect of the image. If not set, the image is not recolored.
 *  This property is read-only.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Recolor *recolor;

/**
 *  The shadow of the image. If not set, the image has no shadow. This property
 *  is read-only.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Shadow *shadow;

/**
 *  The transparency effect of the image. The value should be in the interval
 *  [0.0, 1.0], where 0 means no effect and 1 means completely transparent.
 *  This property is read-only.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *transparency;

@end


/**
 *  Inserts columns into a table.
 *  Other columns in the table will be resized to fit the new column.
 */
@interface GTLRSlides_InsertTableColumnsRequest : GTLRObject

/**
 *  The reference table cell location from which columns will be inserted.
 *  A new column will be inserted to the left (or right) of the column where
 *  the reference cell is. If the reference cell is a merged cell, a new
 *  column will be inserted to the left (or right) of the merged cell.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TableCellLocation *cellLocation;

/**
 *  Whether to insert new columns to the right of the reference cell location.
 *  - `True`: insert to the right.
 *  - `False`: insert to the left.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *insertRight;

/**
 *  The number of columns to be inserted. Maximum 20 per request.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *number;

/** The table to insert columns into. */
@property(nonatomic, copy, nullable) NSString *tableObjectId;

@end


/**
 *  Inserts rows into a table.
 */
@interface GTLRSlides_InsertTableRowsRequest : GTLRObject

/**
 *  The reference table cell location from which rows will be inserted.
 *  A new row will be inserted above (or below) the row where the reference
 *  cell is. If the reference cell is a merged cell, a new row will be
 *  inserted above (or below) the merged cell.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TableCellLocation *cellLocation;

/**
 *  Whether to insert new rows below the reference cell location.
 *  - `True`: insert below the cell.
 *  - `False`: insert above the cell.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *insertBelow;

/**
 *  The number of rows to be inserted. Maximum 20 per request.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *number;

/** The table to insert rows into. */
@property(nonatomic, copy, nullable) NSString *tableObjectId;

@end


/**
 *  Inserts text into a shape or a table cell.
 */
@interface GTLRSlides_InsertTextRequest : GTLRObject

/**
 *  The optional table cell location if the text is to be inserted into a table
 *  cell. If present, the object_id must refer to a table.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TableCellLocation *cellLocation;

/**
 *  The index where the text will be inserted, in Unicode code units, based
 *  on TextElement indexes.
 *  The index is zero-based and is computed from the start of the string.
 *  The index may be adjusted to prevent insertions inside Unicode grapheme
 *  clusters. In these cases, the text will be inserted immediately after the
 *  grapheme cluster.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *insertionIndex;

/** The object ID of the shape or table where the text will be inserted. */
@property(nonatomic, copy, nullable) NSString *objectId;

/**
 *  The text to be inserted.
 *  Inserting a newline character will implicitly create a new
 *  ParagraphMarker at that index.
 *  The paragraph style of the new paragraph will be copied from the paragraph
 *  at the current insertion index, including lists and bullets.
 *  Text styles for inserted text will be determined automatically, generally
 *  preserving the styling of neighboring text. In most cases, the text will be
 *  added to the TextRun that exists at the
 *  insertion index.
 *  Some control characters (U+0000-U+0008, U+000C-U+001F) and characters
 *  from the Unicode Basic Multilingual Plane Private Use Area (U+E000-U+F8FF)
 *  will be stripped out of the inserted text.
 */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  The user-specified ID mapping for a placeholder that will be created on a
 *  slide from a specified layout.
 */
@interface GTLRSlides_LayoutPlaceholderIdMapping : GTLRObject

/**
 *  The placeholder on a layout that will be applied to a slide. Only type and
 *  index are needed. For example, a
 *  predefined `TITLE_AND_BODY` layout may usually have a TITLE placeholder
 *  with index 0 and a BODY placeholder with index 0.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Placeholder *layoutPlaceholder;

/**
 *  The object ID of the placeholder on a layout that will be applied
 *  to a slide.
 */
@property(nonatomic, copy, nullable) NSString *layoutPlaceholderObjectId;

/**
 *  A user-supplied object ID for the placeholder identified above that to be
 *  created onto a slide.
 *  If you specify an ID, it must be unique among all pages and page elements
 *  in the presentation. The ID must start with an alphanumeric character or an
 *  underscore (matches regex `[a-zA-Z0-9_]`); remaining characters
 *  may include those as well as a hyphen or colon (matches regex
 *  `[a-zA-Z0-9_-:]`).
 *  The length of the ID must not be less than 5 or greater than 50.
 *  If you don't specify an ID, a unique one is generated.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  The properties of Page are only
 *  relevant for pages with page_type LAYOUT.
 */
@interface GTLRSlides_LayoutProperties : GTLRObject

/** The human-readable name of the layout. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** The object ID of the master that this layout is based on. */
@property(nonatomic, copy, nullable) NSString *masterObjectId;

/** The name of the layout. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Slide layout reference. This may reference either:
 *  - A predefined layout
 *  - One of the layouts in the presentation.
 */
@interface GTLRSlides_LayoutReference : GTLRObject

/** Layout ID: the object ID of one of the layouts in the presentation. */
@property(nonatomic, copy, nullable) NSString *layoutId;

/**
 *  Predefined layout.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_LayoutReference_PredefinedLayout_BigNumber Layout with
 *        a big number heading. (Value: "BIG_NUMBER")
 *    @arg @c kGTLRSlides_LayoutReference_PredefinedLayout_Blank Blank layout,
 *        with no placeholders. (Value: "BLANK")
 *    @arg @c kGTLRSlides_LayoutReference_PredefinedLayout_CaptionOnly Layout
 *        with a caption at the bottom. (Value: "CAPTION_ONLY")
 *    @arg @c kGTLRSlides_LayoutReference_PredefinedLayout_MainPoint Layout with
 *        a main point. (Value: "MAIN_POINT")
 *    @arg @c kGTLRSlides_LayoutReference_PredefinedLayout_OneColumnText Layout
 *        with one title and one body, arranged in a single column. (Value:
 *        "ONE_COLUMN_TEXT")
 *    @arg @c kGTLRSlides_LayoutReference_PredefinedLayout_PredefinedLayoutUnspecified
 *        Unspecified layout. (Value: "PREDEFINED_LAYOUT_UNSPECIFIED")
 *    @arg @c kGTLRSlides_LayoutReference_PredefinedLayout_SectionHeader Layout
 *        with a section title. (Value: "SECTION_HEADER")
 *    @arg @c kGTLRSlides_LayoutReference_PredefinedLayout_SectionTitleAndDescription
 *        Layout with a title and subtitle on one side and description on the
 *        other. (Value: "SECTION_TITLE_AND_DESCRIPTION")
 *    @arg @c kGTLRSlides_LayoutReference_PredefinedLayout_Title Layout with a
 *        title and a subtitle. (Value: "TITLE")
 *    @arg @c kGTLRSlides_LayoutReference_PredefinedLayout_TitleAndBody Layout
 *        with a title and body. (Value: "TITLE_AND_BODY")
 *    @arg @c kGTLRSlides_LayoutReference_PredefinedLayout_TitleAndTwoColumns
 *        Layout with a title and two columns. (Value: "TITLE_AND_TWO_COLUMNS")
 *    @arg @c kGTLRSlides_LayoutReference_PredefinedLayout_TitleOnly Layout with
 *        only a title. (Value: "TITLE_ONLY")
 */
@property(nonatomic, copy, nullable) NSString *predefinedLayout;

@end


/**
 *  A PageElement kind representing a
 *  non-connector line, straight connector, curved connector, or bent connector.
 */
@interface GTLRSlides_Line : GTLRObject

/**
 *  The category of the line.
 *  It matches the `category` specified in CreateLineRequest, and can be updated
 *  with
 *  UpdateLineCategoryRequest.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_Line_LineCategory_Bent Bent connectors, including bent
 *        connector 2 to 5. (Value: "BENT")
 *    @arg @c kGTLRSlides_Line_LineCategory_Curved Curved connectors, including
 *        curved connector 2 to 5. (Value: "CURVED")
 *    @arg @c kGTLRSlides_Line_LineCategory_LineCategoryUnspecified Unspecified
 *        line category. (Value: "LINE_CATEGORY_UNSPECIFIED")
 *    @arg @c kGTLRSlides_Line_LineCategory_Straight Straight connectors,
 *        including straight connector 1. (Value: "STRAIGHT")
 */
@property(nonatomic, copy, nullable) NSString *lineCategory;

/** The properties of the line. */
@property(nonatomic, strong, nullable) GTLRSlides_LineProperties *lineProperties;

/**
 *  The type of the line.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_Line_LineType_BentConnector2 Bent connector 2 form.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'bentConnector2'. (Value: "BENT_CONNECTOR_2")
 *    @arg @c kGTLRSlides_Line_LineType_BentConnector3 Bent connector 3 form.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'bentConnector3'. (Value: "BENT_CONNECTOR_3")
 *    @arg @c kGTLRSlides_Line_LineType_BentConnector4 Bent connector 4 form.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'bentConnector4'. (Value: "BENT_CONNECTOR_4")
 *    @arg @c kGTLRSlides_Line_LineType_BentConnector5 Bent connector 5 form.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'bentConnector5'. (Value: "BENT_CONNECTOR_5")
 *    @arg @c kGTLRSlides_Line_LineType_CurvedConnector2 Curved connector 2
 *        form. Corresponds to ECMA-376 ST_ShapeType
 *        'curvedConnector2'. (Value: "CURVED_CONNECTOR_2")
 *    @arg @c kGTLRSlides_Line_LineType_CurvedConnector3 Curved connector 3
 *        form. Corresponds to ECMA-376 ST_ShapeType
 *        'curvedConnector3'. (Value: "CURVED_CONNECTOR_3")
 *    @arg @c kGTLRSlides_Line_LineType_CurvedConnector4 Curved connector 4
 *        form. Corresponds to ECMA-376 ST_ShapeType
 *        'curvedConnector4'. (Value: "CURVED_CONNECTOR_4")
 *    @arg @c kGTLRSlides_Line_LineType_CurvedConnector5 Curved connector 5
 *        form. Corresponds to ECMA-376 ST_ShapeType
 *        'curvedConnector5'. (Value: "CURVED_CONNECTOR_5")
 *    @arg @c kGTLRSlides_Line_LineType_StraightConnector1 Straight connector 1
 *        form. Corresponds to ECMA-376 ST_ShapeType
 *        'straightConnector1'. (Value: "STRAIGHT_CONNECTOR_1")
 *    @arg @c kGTLRSlides_Line_LineType_StraightLine Straight line. Corresponds
 *        to ECMA-376 ST_ShapeType 'line'. This line
 *        type is not a connector. (Value: "STRAIGHT_LINE")
 *    @arg @c kGTLRSlides_Line_LineType_TypeUnspecified An unspecified line
 *        type. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *lineType;

@end


/**
 *  The properties for one end of a Line
 *  connection.
 */
@interface GTLRSlides_LineConnection : GTLRObject

/**
 *  The object ID of the connected page element.
 *  Some page elements, such as groups, tables, and lines
 *  do not have connection sites and therefore cannot be connected to a
 *  connector line.
 */
@property(nonatomic, copy, nullable) NSString *connectedObjectId;

/**
 *  The index of the connection site on the connected page element.
 *  In most cases, it corresponds to the predefined connection site index from
 *  the ECMA-376 standard. More information on those connection sites can be
 *  found in the description of the "cnx" attribute in section 20.1.9.9 and
 *  Annex H. "Predefined DrawingML Shape and Text Geometries" of "Office Open
 *  XML File Formats-Fundamentals and Markup Language Reference", part 1 of
 *  [ECMA-376 5th edition]
 *  (http://www.ecma-international.org/publications/standards/Ecma-376.htm).
 *  The position of each connection site can also be viewed from Slides editor.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *connectionSiteIndex;

@end


/**
 *  The fill of the line.
 */
@interface GTLRSlides_LineFill : GTLRObject

/** Solid color fill. */
@property(nonatomic, strong, nullable) GTLRSlides_SolidFill *solidFill;

@end


/**
 *  The properties of the Line.
 *  When unset, these fields default to values that match the appearance of
 *  new lines created in the Slides editor.
 */
@interface GTLRSlides_LineProperties : GTLRObject

/**
 *  The dash style of the line.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_LineProperties_DashStyle_Dash Dashed line. Corresponds
 *        to ECMA-376 ST_PresetLineDashVal value 'dash'. (Value: "DASH")
 *    @arg @c kGTLRSlides_LineProperties_DashStyle_DashDot Alternating dashes
 *        and dots. Corresponds to ECMA-376 ST_PresetLineDashVal
 *        value 'dashDot'. (Value: "DASH_DOT")
 *    @arg @c kGTLRSlides_LineProperties_DashStyle_DashStyleUnspecified
 *        Unspecified dash style. (Value: "DASH_STYLE_UNSPECIFIED")
 *    @arg @c kGTLRSlides_LineProperties_DashStyle_Dot Dotted line. Corresponds
 *        to ECMA-376 ST_PresetLineDashVal value 'dot'. (Value: "DOT")
 *    @arg @c kGTLRSlides_LineProperties_DashStyle_LongDash Line with large
 *        dashes. Corresponds to ECMA-376 ST_PresetLineDashVal
 *        value 'lgDash'. (Value: "LONG_DASH")
 *    @arg @c kGTLRSlides_LineProperties_DashStyle_LongDashDot Alternating large
 *        dashes and dots. Corresponds to ECMA-376
 *        ST_PresetLineDashVal value 'lgDashDot'. (Value: "LONG_DASH_DOT")
 *    @arg @c kGTLRSlides_LineProperties_DashStyle_Solid Solid line. Corresponds
 *        to ECMA-376 ST_PresetLineDashVal value 'solid'.
 *        This is the default dash style. (Value: "SOLID")
 */
@property(nonatomic, copy, nullable) NSString *dashStyle;

/**
 *  The style of the arrow at the end of the line.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_LineProperties_EndArrow_ArrowStyleUnspecified An
 *        unspecified arrow style. (Value: "ARROW_STYLE_UNSPECIFIED")
 *    @arg @c kGTLRSlides_LineProperties_EndArrow_FillArrow Filled arrow.
 *        Corresponds to ECMA-376 ST_LineEndType value 'triangle'. (Value:
 *        "FILL_ARROW")
 *    @arg @c kGTLRSlides_LineProperties_EndArrow_FillCircle Filled circle.
 *        Corresponds to ECMA-376 ST_LineEndType value 'oval'. (Value:
 *        "FILL_CIRCLE")
 *    @arg @c kGTLRSlides_LineProperties_EndArrow_FillDiamond Filled diamond.
 *        Corresponds to ECMA-376 ST_LineEndType value 'diamond'. (Value:
 *        "FILL_DIAMOND")
 *    @arg @c kGTLRSlides_LineProperties_EndArrow_FillSquare Filled square.
 *        (Value: "FILL_SQUARE")
 *    @arg @c kGTLRSlides_LineProperties_EndArrow_None No arrow. (Value: "NONE")
 *    @arg @c kGTLRSlides_LineProperties_EndArrow_OpenArrow Hollow arrow.
 *        (Value: "OPEN_ARROW")
 *    @arg @c kGTLRSlides_LineProperties_EndArrow_OpenCircle Hollow circle.
 *        (Value: "OPEN_CIRCLE")
 *    @arg @c kGTLRSlides_LineProperties_EndArrow_OpenDiamond Hollow diamond.
 *        (Value: "OPEN_DIAMOND")
 *    @arg @c kGTLRSlides_LineProperties_EndArrow_OpenSquare Hollow square.
 *        (Value: "OPEN_SQUARE")
 *    @arg @c kGTLRSlides_LineProperties_EndArrow_StealthArrow Arrow with
 *        notched back. Corresponds to ECMA-376 ST_LineEndType value
 *        'stealth'. (Value: "STEALTH_ARROW")
 */
@property(nonatomic, copy, nullable) NSString *endArrow;

/**
 *  The connection at the end of the line. If unset, there is no connection.
 *  Only lines with a Type indicating it is
 *  a "connector" can have an `end_connection`.
 */
@property(nonatomic, strong, nullable) GTLRSlides_LineConnection *endConnection;

/**
 *  The fill of the line. The default line fill matches the defaults for new
 *  lines created in the Slides editor.
 */
@property(nonatomic, strong, nullable) GTLRSlides_LineFill *lineFill;

/** The hyperlink destination of the line. If unset, there is no link. */
@property(nonatomic, strong, nullable) GTLRSlides_Link *link;

/**
 *  The style of the arrow at the beginning of the line.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_LineProperties_StartArrow_ArrowStyleUnspecified An
 *        unspecified arrow style. (Value: "ARROW_STYLE_UNSPECIFIED")
 *    @arg @c kGTLRSlides_LineProperties_StartArrow_FillArrow Filled arrow.
 *        Corresponds to ECMA-376 ST_LineEndType value 'triangle'. (Value:
 *        "FILL_ARROW")
 *    @arg @c kGTLRSlides_LineProperties_StartArrow_FillCircle Filled circle.
 *        Corresponds to ECMA-376 ST_LineEndType value 'oval'. (Value:
 *        "FILL_CIRCLE")
 *    @arg @c kGTLRSlides_LineProperties_StartArrow_FillDiamond Filled diamond.
 *        Corresponds to ECMA-376 ST_LineEndType value 'diamond'. (Value:
 *        "FILL_DIAMOND")
 *    @arg @c kGTLRSlides_LineProperties_StartArrow_FillSquare Filled square.
 *        (Value: "FILL_SQUARE")
 *    @arg @c kGTLRSlides_LineProperties_StartArrow_None No arrow. (Value:
 *        "NONE")
 *    @arg @c kGTLRSlides_LineProperties_StartArrow_OpenArrow Hollow arrow.
 *        (Value: "OPEN_ARROW")
 *    @arg @c kGTLRSlides_LineProperties_StartArrow_OpenCircle Hollow circle.
 *        (Value: "OPEN_CIRCLE")
 *    @arg @c kGTLRSlides_LineProperties_StartArrow_OpenDiamond Hollow diamond.
 *        (Value: "OPEN_DIAMOND")
 *    @arg @c kGTLRSlides_LineProperties_StartArrow_OpenSquare Hollow square.
 *        (Value: "OPEN_SQUARE")
 *    @arg @c kGTLRSlides_LineProperties_StartArrow_StealthArrow Arrow with
 *        notched back. Corresponds to ECMA-376 ST_LineEndType value
 *        'stealth'. (Value: "STEALTH_ARROW")
 */
@property(nonatomic, copy, nullable) NSString *startArrow;

/**
 *  The connection at the beginning of the line. If unset, there is no
 *  connection.
 *  Only lines with a Type indicating it is
 *  a "connector" can have a `start_connection`.
 */
@property(nonatomic, strong, nullable) GTLRSlides_LineConnection *startConnection;

/** The thickness of the line. */
@property(nonatomic, strong, nullable) GTLRSlides_Dimension *weight;

@end


/**
 *  A hypertext link.
 */
@interface GTLRSlides_Link : GTLRObject

/**
 *  If set, indicates this is a link to the specific page in this
 *  presentation with this ID. A page with this ID may not exist.
 */
@property(nonatomic, copy, nullable) NSString *pageObjectId;

/**
 *  If set, indicates this is a link to a slide in this presentation,
 *  addressed by its position.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_Link_RelativeLink_FirstSlide A link to the first slide
 *        in the presentation. (Value: "FIRST_SLIDE")
 *    @arg @c kGTLRSlides_Link_RelativeLink_LastSlide A link to the last slide
 *        in the presentation. (Value: "LAST_SLIDE")
 *    @arg @c kGTLRSlides_Link_RelativeLink_NextSlide A link to the next slide.
 *        (Value: "NEXT_SLIDE")
 *    @arg @c kGTLRSlides_Link_RelativeLink_PreviousSlide A link to the previous
 *        slide. (Value: "PREVIOUS_SLIDE")
 *    @arg @c kGTLRSlides_Link_RelativeLink_RelativeSlideLinkUnspecified An
 *        unspecified relative slide link. (Value:
 *        "RELATIVE_SLIDE_LINK_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *relativeLink;

/**
 *  If set, indicates this is a link to the slide at this zero-based index
 *  in the presentation. There may not be a slide at this index.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slideIndex;

/** If set, indicates this is a link to the external web page at this URL. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  A List describes the look and feel of bullets belonging to paragraphs
 *  associated with a list. A paragraph that is part of a list has an implicit
 *  reference to that list's ID.
 */
@interface GTLRSlides_List : GTLRObject

/** The ID of the list. */
@property(nonatomic, copy, nullable) NSString *listId;

/**
 *  A map of nesting levels to the properties of bullets at the associated
 *  level. A list has at most nine levels of nesting, so the possible values
 *  for the keys of this map are 0 through 8, inclusive.
 */
@property(nonatomic, strong, nullable) GTLRSlides_List_NestingLevel *nestingLevel;

@end


/**
 *  A map of nesting levels to the properties of bullets at the associated
 *  level. A list has at most nine levels of nesting, so the possible values
 *  for the keys of this map are 0 through 8, inclusive.
 *
 *  @note This class is documented as having more properties of
 *        GTLRSlides_NestingLevel. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRSlides_List_NestingLevel : GTLRObject
@end


/**
 *  The properties of Page that are only
 *  relevant for pages with page_type MASTER.
 */
@interface GTLRSlides_MasterProperties : GTLRObject

/** The human-readable name of the master. */
@property(nonatomic, copy, nullable) NSString *displayName;

@end


/**
 *  Merges cells in a Table.
 */
@interface GTLRSlides_MergeTableCellsRequest : GTLRObject

/** The object ID of the table. */
@property(nonatomic, copy, nullable) NSString *objectId;

/**
 *  The table range specifying which cells of the table to merge.
 *  Any text in the cells being merged will be concatenated and stored in the
 *  upper-left ("head") cell of the range. If the range is non-rectangular
 *  (which can occur in some cases where the range covers cells that are
 *  already merged), a 400 bad request error is returned.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TableRange *tableRange;

@end


/**
 *  Contains properties describing the look and feel of a list bullet at a given
 *  level of nesting.
 */
@interface GTLRSlides_NestingLevel : GTLRObject

/** The style of a bullet at this level of nesting. */
@property(nonatomic, strong, nullable) GTLRSlides_TextStyle *bulletStyle;

@end


/**
 *  The properties of Page that are only
 *  relevant for pages with page_type NOTES.
 */
@interface GTLRSlides_NotesProperties : GTLRObject

/**
 *  The object ID of the shape on this notes page that contains the speaker
 *  notes for the corresponding slide.
 *  The actual shape may not always exist on the notes page. Inserting text
 *  using this object ID will automatically create the shape. In this case, the
 *  actual shape may have different object ID. The `GetPresentation` or
 *  `GetPage` action will always return the latest object ID.
 */
@property(nonatomic, copy, nullable) NSString *speakerNotesObjectId;

@end


/**
 *  A themeable solid color value.
 */
@interface GTLRSlides_OpaqueColor : GTLRObject

/** An opaque RGB color. */
@property(nonatomic, strong, nullable) GTLRSlides_RgbColor *rgbColor;

/**
 *  An opaque theme color.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_Accent1 Represents the first
 *        accent color. (Value: "ACCENT1")
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_Accent2 Represents the second
 *        accent color. (Value: "ACCENT2")
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_Accent3 Represents the third
 *        accent color. (Value: "ACCENT3")
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_Accent4 Represents the fourth
 *        accent color. (Value: "ACCENT4")
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_Accent5 Represents the fifth
 *        accent color. (Value: "ACCENT5")
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_Accent6 Represents the sixth
 *        accent color. (Value: "ACCENT6")
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_Background1 Represents the
 *        first background color. (Value: "BACKGROUND1")
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_Background2 Represents the
 *        second background color. (Value: "BACKGROUND2")
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_Dark1 Represents the first dark
 *        color. (Value: "DARK1")
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_Dark2 Represents the second
 *        dark color. (Value: "DARK2")
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_FollowedHyperlink Represents
 *        the color to use for visited hyperlinks. (Value: "FOLLOWED_HYPERLINK")
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_Hyperlink Represents the color
 *        to use for hyperlinks. (Value: "HYPERLINK")
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_Light1 Represents the first
 *        light color. (Value: "LIGHT1")
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_Light2 Represents the second
 *        light color. (Value: "LIGHT2")
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_Text1 Represents the first text
 *        color. (Value: "TEXT1")
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_Text2 Represents the second
 *        text color. (Value: "TEXT2")
 *    @arg @c kGTLRSlides_OpaqueColor_ThemeColor_ThemeColorTypeUnspecified
 *        Unspecified theme color. This value should not be used. (Value:
 *        "THEME_COLOR_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *themeColor;

@end


/**
 *  A color that can either be fully opaque or fully transparent.
 */
@interface GTLRSlides_OptionalColor : GTLRObject

/**
 *  If set, this will be used as an opaque color. If unset, this represents
 *  a transparent color.
 */
@property(nonatomic, strong, nullable) GTLRSlides_OpaqueColor *opaqueColor;

@end


/**
 *  The outline of a PageElement.
 *  If these fields are unset, they may be inherited from a parent placeholder
 *  if it exists. If there is no parent, the fields will default to the value
 *  used for new page elements created in the Slides editor, which may depend on
 *  the page element kind.
 */
@interface GTLRSlides_Outline : GTLRObject

/**
 *  The dash style of the outline.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_Outline_DashStyle_Dash Dashed line. Corresponds to
 *        ECMA-376 ST_PresetLineDashVal value 'dash'. (Value: "DASH")
 *    @arg @c kGTLRSlides_Outline_DashStyle_DashDot Alternating dashes and dots.
 *        Corresponds to ECMA-376 ST_PresetLineDashVal
 *        value 'dashDot'. (Value: "DASH_DOT")
 *    @arg @c kGTLRSlides_Outline_DashStyle_DashStyleUnspecified Unspecified
 *        dash style. (Value: "DASH_STYLE_UNSPECIFIED")
 *    @arg @c kGTLRSlides_Outline_DashStyle_Dot Dotted line. Corresponds to
 *        ECMA-376 ST_PresetLineDashVal value 'dot'. (Value: "DOT")
 *    @arg @c kGTLRSlides_Outline_DashStyle_LongDash Line with large dashes.
 *        Corresponds to ECMA-376 ST_PresetLineDashVal
 *        value 'lgDash'. (Value: "LONG_DASH")
 *    @arg @c kGTLRSlides_Outline_DashStyle_LongDashDot Alternating large dashes
 *        and dots. Corresponds to ECMA-376
 *        ST_PresetLineDashVal value 'lgDashDot'. (Value: "LONG_DASH_DOT")
 *    @arg @c kGTLRSlides_Outline_DashStyle_Solid Solid line. Corresponds to
 *        ECMA-376 ST_PresetLineDashVal value 'solid'.
 *        This is the default dash style. (Value: "SOLID")
 */
@property(nonatomic, copy, nullable) NSString *dashStyle;

/** The fill of the outline. */
@property(nonatomic, strong, nullable) GTLRSlides_OutlineFill *outlineFill;

/**
 *  The outline property state.
 *  Updating the outline on a page element will implicitly update this field
 *  to `RENDERED`, unless another value is specified in the same request. To
 *  have no outline on a page element, set this field to `NOT_RENDERED`. In
 *  this case, any other outline fields set in the same request will be
 *  ignored.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_Outline_PropertyState_Inherit If a property's state is
 *        INHERIT, then the property state uses the value of
 *        corresponding `property_state` field on the parent shape. Elements
 *        that do
 *        not inherit will never have an INHERIT property state. (Value:
 *        "INHERIT")
 *    @arg @c kGTLRSlides_Outline_PropertyState_NotRendered If a property's
 *        state is NOT_RENDERED, then the element does not have the
 *        corresponding property when rendered on a page. However, the field may
 *        still be set so it can be inherited by child shapes. To remove a
 *        property
 *        from a rendered element, set its property_state to NOT_RENDERED.
 *        (Value: "NOT_RENDERED")
 *    @arg @c kGTLRSlides_Outline_PropertyState_Rendered If a property's state
 *        is RENDERED, then the element has the corresponding
 *        property when rendered on a page. If the element is a placeholder
 *        shape as
 *        determined by the placeholder
 *        field, and it inherits from a placeholder shape, the corresponding
 *        field
 *        may be unset, meaning that the property value is inherited from a
 *        parent
 *        placeholder. If the element does not inherit, then the field will
 *        contain
 *        the rendered value. This is the default value. (Value: "RENDERED")
 */
@property(nonatomic, copy, nullable) NSString *propertyState;

/** The thickness of the outline. */
@property(nonatomic, strong, nullable) GTLRSlides_Dimension *weight;

@end


/**
 *  The fill of the outline.
 */
@interface GTLRSlides_OutlineFill : GTLRObject

/** Solid color fill. */
@property(nonatomic, strong, nullable) GTLRSlides_SolidFill *solidFill;

@end


/**
 *  A page in a presentation.
 */
@interface GTLRSlides_Page : GTLRObject

/** Layout specific properties. Only set if page_type = LAYOUT. */
@property(nonatomic, strong, nullable) GTLRSlides_LayoutProperties *layoutProperties;

/** Master specific properties. Only set if page_type = MASTER. */
@property(nonatomic, strong, nullable) GTLRSlides_MasterProperties *masterProperties;

/** Notes specific properties. Only set if page_type = NOTES. */
@property(nonatomic, strong, nullable) GTLRSlides_NotesProperties *notesProperties;

/**
 *  The object ID for this page. Object IDs used by
 *  Page and
 *  PageElement share the same namespace.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

/** The page elements rendered on the page. */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_PageElement *> *pageElements;

/** The properties of the page. */
@property(nonatomic, strong, nullable) GTLRSlides_PageProperties *pageProperties;

/**
 *  The type of the page.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_Page_PageType_Layout A layout page. (Value: "LAYOUT")
 *    @arg @c kGTLRSlides_Page_PageType_Master A master slide page. (Value:
 *        "MASTER")
 *    @arg @c kGTLRSlides_Page_PageType_Notes A notes page. (Value: "NOTES")
 *    @arg @c kGTLRSlides_Page_PageType_NotesMaster A notes master page. (Value:
 *        "NOTES_MASTER")
 *    @arg @c kGTLRSlides_Page_PageType_Slide A slide page. (Value: "SLIDE")
 */
@property(nonatomic, copy, nullable) NSString *pageType;

/**
 *  The revision ID of the presentation containing this page. Can be used in
 *  update requests to assert that the presentation revision hasn't changed
 *  since the last read operation. Only populated if the user has edit access
 *  to the presentation.
 *  The format of the revision ID may change over time, so it should be treated
 *  opaquely. A returned revision ID is only guaranteed to be valid for 24
 *  hours after it has been returned and cannot be shared across users. If the
 *  revision ID is unchanged between calls, then the presentation has not
 *  changed. Conversely, a changed ID (for the same presentation and user)
 *  usually means the presentation has been updated; however, a changed ID can
 *  also be due to internal factors such as ID format changes.
 */
@property(nonatomic, copy, nullable) NSString *revisionId;

/** Slide specific properties. Only set if page_type = SLIDE. */
@property(nonatomic, strong, nullable) GTLRSlides_SlideProperties *slideProperties;

@end


/**
 *  The page background fill.
 */
@interface GTLRSlides_PageBackgroundFill : GTLRObject

/**
 *  The background fill property state.
 *  Updating the fill on a page will implicitly update this field to
 *  `RENDERED`, unless another value is specified in the same request. To
 *  have no fill on a page, set this field to `NOT_RENDERED`. In this case,
 *  any other fill fields set in the same request will be ignored.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_PageBackgroundFill_PropertyState_Inherit If a
 *        property's state is INHERIT, then the property state uses the value of
 *        corresponding `property_state` field on the parent shape. Elements
 *        that do
 *        not inherit will never have an INHERIT property state. (Value:
 *        "INHERIT")
 *    @arg @c kGTLRSlides_PageBackgroundFill_PropertyState_NotRendered If a
 *        property's state is NOT_RENDERED, then the element does not have the
 *        corresponding property when rendered on a page. However, the field may
 *        still be set so it can be inherited by child shapes. To remove a
 *        property
 *        from a rendered element, set its property_state to NOT_RENDERED.
 *        (Value: "NOT_RENDERED")
 *    @arg @c kGTLRSlides_PageBackgroundFill_PropertyState_Rendered If a
 *        property's state is RENDERED, then the element has the corresponding
 *        property when rendered on a page. If the element is a placeholder
 *        shape as
 *        determined by the placeholder
 *        field, and it inherits from a placeholder shape, the corresponding
 *        field
 *        may be unset, meaning that the property value is inherited from a
 *        parent
 *        placeholder. If the element does not inherit, then the field will
 *        contain
 *        the rendered value. This is the default value. (Value: "RENDERED")
 */
@property(nonatomic, copy, nullable) NSString *propertyState;

/** Solid color fill. */
@property(nonatomic, strong, nullable) GTLRSlides_SolidFill *solidFill;

/** Stretched picture fill. */
@property(nonatomic, strong, nullable) GTLRSlides_StretchedPictureFill *stretchedPictureFill;

@end


/**
 *  A visual element rendered on a page.
 */
@interface GTLRSlides_PageElement : GTLRObject

/**
 *  The description of the page element. Combined with title to display alt
 *  text.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** A collection of page elements joined as a single unit. */
@property(nonatomic, strong, nullable) GTLRSlides_Group *elementGroup;

/** An image page element. */
@property(nonatomic, strong, nullable) GTLRSlides_Image *image;

/** A line page element. */
@property(nonatomic, strong, nullable) GTLRSlides_Line *line;

/**
 *  The object ID for this page element. Object IDs used by
 *  google.apps.slides.v1.Page and
 *  google.apps.slides.v1.PageElement share the same namespace.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

/** A generic shape. */
@property(nonatomic, strong, nullable) GTLRSlides_Shape *shape;

/**
 *  A linked chart embedded from Google Sheets. Unlinked charts are
 *  represented as images.
 */
@property(nonatomic, strong, nullable) GTLRSlides_SheetsChart *sheetsChart;

/** The size of the page element. */
@property(nonatomic, strong, nullable) GTLRSlides_Size *size;

/** A table page element. */
@property(nonatomic, strong, nullable) GTLRSlides_Table *table;

/**
 *  The title of the page element. Combined with description to display alt
 *  text.
 */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  The transform of the page element.
 *  The visual appearance of the page element is determined by its absolute
 *  transform. To compute the absolute transform, preconcatenate a page
 *  element's transform with the transforms of all of its parent groups. If the
 *  page element is not in a group, its absolute transform is the same as the
 *  value in this field.
 *  The initial transform for the newly created Group is always the identity
 *  transform.
 */
@property(nonatomic, strong, nullable) GTLRSlides_AffineTransform *transform;

/** A video page element. */
@property(nonatomic, strong, nullable) GTLRSlides_Video *video;

/** A word art page element. */
@property(nonatomic, strong, nullable) GTLRSlides_WordArt *wordArt;

@end


/**
 *  Common properties for a page element.
 *  Note: When you initially create a
 *  PageElement, the API may modify
 *  the values of both `size` and `transform`, but the
 *  visual size will be unchanged.
 */
@interface GTLRSlides_PageElementProperties : GTLRObject

/** The object ID of the page where the element is located. */
@property(nonatomic, copy, nullable) NSString *pageObjectId;

/** The size of the element. */
@property(nonatomic, strong, nullable) GTLRSlides_Size *size;

/** The transform for the element. */
@property(nonatomic, strong, nullable) GTLRSlides_AffineTransform *transform;

@end


/**
 *  The properties of the Page.
 *  The page will inherit properties from the parent page. Depending on the page
 *  type the hierarchy is defined in either
 *  SlideProperties or
 *  LayoutProperties.
 */
@interface GTLRSlides_PageProperties : GTLRObject

/**
 *  The color scheme of the page. If unset, the color scheme is inherited from
 *  a parent page. If the page has no parent, the color scheme uses a default
 *  Slides color scheme. This field is read-only.
 */
@property(nonatomic, strong, nullable) GTLRSlides_ColorScheme *colorScheme;

/**
 *  The background fill of the page. If unset, the background fill is inherited
 *  from a parent page if it exists. If the page has no parent, then the
 *  background fill defaults to the corresponding fill in the Slides editor.
 */
@property(nonatomic, strong, nullable) GTLRSlides_PageBackgroundFill *pageBackgroundFill;

@end


/**
 *  A TextElement kind that represents the beginning of a new paragraph.
 */
@interface GTLRSlides_ParagraphMarker : GTLRObject

/**
 *  The bullet for this paragraph. If not present, the paragraph does not
 *  belong to a list.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Bullet *bullet;

/** The paragraph's style */
@property(nonatomic, strong, nullable) GTLRSlides_ParagraphStyle *style;

@end


/**
 *  Styles that apply to a whole paragraph.
 *  If this text is contained in a shape with a parent placeholder, then these
 *  paragraph styles may be
 *  inherited from the parent. Which paragraph styles are inherited depend on
 *  the
 *  nesting level of lists:
 *  * A paragraph not in a list will inherit its paragraph style from the
 *  paragraph at the 0 nesting level of the list inside the parent placeholder.
 *  * A paragraph in a list will inherit its paragraph style from the paragraph
 *  at its corresponding nesting level of the list inside the parent
 *  placeholder.
 *  Inherited paragraph styles are represented as unset fields in this message.
 */
@interface GTLRSlides_ParagraphStyle : GTLRObject

/**
 *  The text alignment for this paragraph.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_ParagraphStyle_Alignment_AlignmentUnspecified The
 *        paragraph alignment is inherited from the parent. (Value:
 *        "ALIGNMENT_UNSPECIFIED")
 *    @arg @c kGTLRSlides_ParagraphStyle_Alignment_Center The paragraph is
 *        centered. (Value: "CENTER")
 *    @arg @c kGTLRSlides_ParagraphStyle_Alignment_End The paragraph is aligned
 *        to the end of the line. Right-aligned for
 *        LTR text, left-aligned otherwise. (Value: "END")
 *    @arg @c kGTLRSlides_ParagraphStyle_Alignment_Justified The paragraph is
 *        justified. (Value: "JUSTIFIED")
 *    @arg @c kGTLRSlides_ParagraphStyle_Alignment_Start The paragraph is
 *        aligned to the start of the line. Left-aligned for
 *        LTR text, right-aligned otherwise. (Value: "START")
 */
@property(nonatomic, copy, nullable) NSString *alignment;

/**
 *  The text direction of this paragraph. If unset, the value defaults to
 *  LEFT_TO_RIGHT since
 *  text direction is not inherited.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_ParagraphStyle_Direction_LeftToRight The text goes
 *        from left to right. (Value: "LEFT_TO_RIGHT")
 *    @arg @c kGTLRSlides_ParagraphStyle_Direction_RightToLeft The text goes
 *        from right to left. (Value: "RIGHT_TO_LEFT")
 *    @arg @c kGTLRSlides_ParagraphStyle_Direction_TextDirectionUnspecified The
 *        text direction is inherited from the parent. (Value:
 *        "TEXT_DIRECTION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *direction;

/**
 *  The amount indentation for the paragraph on the side that corresponds to
 *  the end of the text, based on the current text direction. If unset, the
 *  value is inherited from the parent.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Dimension *indentEnd;

/**
 *  The amount of indentation for the start of the first line of the paragraph.
 *  If unset, the value is inherited from the parent.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Dimension *indentFirstLine;

/**
 *  The amount indentation for the paragraph on the side that corresponds to
 *  the start of the text, based on the current text direction. If unset, the
 *  value is inherited from the parent.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Dimension *indentStart;

/**
 *  The amount of space between lines, as a percentage of normal, where normal
 *  is represented as 100.0. If unset, the value is inherited from the parent.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lineSpacing;

/**
 *  The amount of extra space above the paragraph. If unset, the value is
 *  inherited from the parent.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Dimension *spaceAbove;

/**
 *  The amount of extra space below the paragraph. If unset, the value is
 *  inherited from the parent.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Dimension *spaceBelow;

/**
 *  The spacing mode for the paragraph.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_ParagraphStyle_SpacingMode_CollapseLists Paragraph
 *        spacing is skipped between list elements. (Value: "COLLAPSE_LISTS")
 *    @arg @c kGTLRSlides_ParagraphStyle_SpacingMode_NeverCollapse Paragraph
 *        spacing is always rendered. (Value: "NEVER_COLLAPSE")
 *    @arg @c kGTLRSlides_ParagraphStyle_SpacingMode_SpacingModeUnspecified The
 *        spacing mode is inherited from the parent. (Value:
 *        "SPACING_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *spacingMode;

@end


/**
 *  The placeholder information that uniquely identifies a placeholder shape.
 */
@interface GTLRSlides_Placeholder : GTLRObject

/**
 *  The index of the placeholder. If the same placeholder types are present in
 *  the same page, they would have different index values.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *index;

/**
 *  The object ID of this shape's parent placeholder.
 *  If unset, the parent placeholder shape does not exist, so the shape does
 *  not inherit properties from any other shape.
 */
@property(nonatomic, copy, nullable) NSString *parentObjectId;

/**
 *  The type of the placeholder.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_Placeholder_Type_Body Body text. (Value: "BODY")
 *    @arg @c kGTLRSlides_Placeholder_Type_CenteredTitle Title centered. (Value:
 *        "CENTERED_TITLE")
 *    @arg @c kGTLRSlides_Placeholder_Type_Chart Chart or graph. (Value:
 *        "CHART")
 *    @arg @c kGTLRSlides_Placeholder_Type_ClipArt Clip art image. (Value:
 *        "CLIP_ART")
 *    @arg @c kGTLRSlides_Placeholder_Type_DateAndTime Date and time. (Value:
 *        "DATE_AND_TIME")
 *    @arg @c kGTLRSlides_Placeholder_Type_Diagram Diagram. (Value: "DIAGRAM")
 *    @arg @c kGTLRSlides_Placeholder_Type_Footer Footer text. (Value: "FOOTER")
 *    @arg @c kGTLRSlides_Placeholder_Type_Header Header text. (Value: "HEADER")
 *    @arg @c kGTLRSlides_Placeholder_Type_Media Multimedia. (Value: "MEDIA")
 *    @arg @c kGTLRSlides_Placeholder_Type_None Default value, signifies it is
 *        not a placeholder. (Value: "NONE")
 *    @arg @c kGTLRSlides_Placeholder_Type_Object Any content type. (Value:
 *        "OBJECT")
 *    @arg @c kGTLRSlides_Placeholder_Type_Picture Picture. (Value: "PICTURE")
 *    @arg @c kGTLRSlides_Placeholder_Type_SlideImage Slide image. (Value:
 *        "SLIDE_IMAGE")
 *    @arg @c kGTLRSlides_Placeholder_Type_SlideNumber Number of a slide.
 *        (Value: "SLIDE_NUMBER")
 *    @arg @c kGTLRSlides_Placeholder_Type_Subtitle Subtitle. (Value:
 *        "SUBTITLE")
 *    @arg @c kGTLRSlides_Placeholder_Type_Table Table. (Value: "TABLE")
 *    @arg @c kGTLRSlides_Placeholder_Type_Title Slide title. (Value: "TITLE")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A Google Slides presentation.
 */
@interface GTLRSlides_Presentation : GTLRObject

/**
 *  The layouts in the presentation. A layout is a template that determines
 *  how content is arranged and styled on the slides that inherit from that
 *  layout.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_Page *> *layouts;

/** The locale of the presentation, as an IETF BCP 47 language tag. */
@property(nonatomic, copy, nullable) NSString *locale;

/**
 *  The slide masters in the presentation. A slide master contains all common
 *  page elements and the common properties for a set of layouts. They serve
 *  three purposes:
 *  - Placeholder shapes on a master contain the default text styles and shape
 *  properties of all placeholder shapes on pages that use that master.
 *  - The master page properties define the common page properties inherited by
 *  its layouts.
 *  - Any other shapes on the master slide will appear on all slides using that
 *  master, regardless of their layout.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_Page *> *masters;

/**
 *  The notes master in the presentation. It serves three purposes:
 *  - Placeholder shapes on a notes master contain the default text styles and
 *  shape properties of all placeholder shapes on notes pages. Specifically,
 *  a `SLIDE_IMAGE` placeholder shape contains the slide thumbnail, and a
 *  `BODY` placeholder shape contains the speaker notes.
 *  - The notes master page properties define the common page properties
 *  inherited by all notes pages.
 *  - Any other shapes on the notes master will appear on all notes pages.
 *  The notes master is read-only.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Page *notesMaster;

/** The size of pages in the presentation. */
@property(nonatomic, strong, nullable) GTLRSlides_Size *pageSize;

/** The ID of the presentation. */
@property(nonatomic, copy, nullable) NSString *presentationId;

/**
 *  The revision ID of the presentation. Can be used in update requests
 *  to assert that the presentation revision hasn't changed since the last
 *  read operation. Only populated if the user has edit access to the
 *  presentation.
 *  The format of the revision ID may change over time, so it should be treated
 *  opaquely. A returned revision ID is only guaranteed to be valid for 24
 *  hours after it has been returned and cannot be shared across users. If the
 *  revision ID is unchanged between calls, then the presentation has not
 *  changed. Conversely, a changed ID (for the same presentation and user)
 *  usually means the presentation has been updated; however, a changed ID can
 *  also be due to internal factors such as ID format changes.
 */
@property(nonatomic, copy, nullable) NSString *revisionId;

/**
 *  The slides in the presentation.
 *  A slide inherits properties from a slide layout.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_Page *> *slides;

/** The title of the presentation. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Specifies a contiguous range of an indexed collection, such as characters in
 *  text.
 */
@interface GTLRSlides_Range : GTLRObject

/**
 *  The optional zero-based index of the end of the collection.
 *  Required for `FIXED_RANGE` ranges.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endIndex;

/**
 *  The optional zero-based index of the beginning of the collection.
 *  Required for `FIXED_RANGE` and `FROM_START_INDEX` ranges.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startIndex;

/**
 *  The type of range.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_Range_Type_All Sets the range to be the whole length
 *        of the collection. Both the
 *        `start_index` and the `end_index` must not be
 *        specified. (Value: "ALL")
 *    @arg @c kGTLRSlides_Range_Type_FixedRange A fixed range. Both the
 *        `start_index` and
 *        `end_index` must be specified. (Value: "FIXED_RANGE")
 *    @arg @c kGTLRSlides_Range_Type_FromStartIndex Starts the range at
 *        `start_index` and continues until the
 *        end of the collection. The `end_index` must not be specified. (Value:
 *        "FROM_START_INDEX")
 *    @arg @c kGTLRSlides_Range_Type_RangeTypeUnspecified Unspecified range
 *        type. This value must not be used. (Value: "RANGE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A recolor effect applied on an image.
 */
@interface GTLRSlides_Recolor : GTLRObject

/**
 *  The name of the recolor effect.
 *  The name is determined from the `recolor_stops` by matching the gradient
 *  against the colors in the page's current color scheme. This property is
 *  read-only.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_Recolor_Name_Custom Custom recolor effect. Refer to
 *        `recolor_stops` for the concrete
 *        gradient. (Value: "CUSTOM")
 *    @arg @c kGTLRSlides_Recolor_Name_Dark1 A recolor effect that darkens the
 *        image using the page's first available
 *        color from its color scheme. (Value: "DARK1")
 *    @arg @c kGTLRSlides_Recolor_Name_Dark10 A recolor effect that darkens the
 *        image using the page's tenth available
 *        color from its color scheme. (Value: "DARK10")
 *    @arg @c kGTLRSlides_Recolor_Name_Dark2 A recolor effect that darkens the
 *        image using the page's second available
 *        color from its color scheme. (Value: "DARK2")
 *    @arg @c kGTLRSlides_Recolor_Name_Dark3 A recolor effect that darkens the
 *        image using the page's third available
 *        color from its color scheme. (Value: "DARK3")
 *    @arg @c kGTLRSlides_Recolor_Name_Dark4 A recolor effect that darkens the
 *        image using the page's fourth available
 *        color from its color scheme. (Value: "DARK4")
 *    @arg @c kGTLRSlides_Recolor_Name_Dark5 A recolor effect that darkens the
 *        image using the page's fifth available
 *        color from its color scheme. (Value: "DARK5")
 *    @arg @c kGTLRSlides_Recolor_Name_Dark6 A recolor effect that darkens the
 *        image using the page's sixth available
 *        color from its color scheme. (Value: "DARK6")
 *    @arg @c kGTLRSlides_Recolor_Name_Dark7 A recolor effect that darkens the
 *        image using the page's seventh
 *        available color from its color scheme. (Value: "DARK7")
 *    @arg @c kGTLRSlides_Recolor_Name_Dark8 A recolor effect that darkens the
 *        image using the page's eighth available
 *        color from its color scheme. (Value: "DARK8")
 *    @arg @c kGTLRSlides_Recolor_Name_Dark9 A recolor effect that darkens the
 *        image using the page's ninth available
 *        color from its color scheme. (Value: "DARK9")
 *    @arg @c kGTLRSlides_Recolor_Name_Grayscale A recolor effect that recolors
 *        the image to grayscale. (Value: "GRAYSCALE")
 *    @arg @c kGTLRSlides_Recolor_Name_Light1 A recolor effect that lightens the
 *        image using the page's first available
 *        color from its color scheme. (Value: "LIGHT1")
 *    @arg @c kGTLRSlides_Recolor_Name_Light10 A recolor effect that lightens
 *        the image using the page's tenth available
 *        color from its color scheme. (Value: "LIGHT10")
 *    @arg @c kGTLRSlides_Recolor_Name_Light2 A recolor effect that lightens the
 *        image using the page's second
 *        available color from its color scheme. (Value: "LIGHT2")
 *    @arg @c kGTLRSlides_Recolor_Name_Light3 A recolor effect that lightens the
 *        image using the page's third available
 *        color from its color scheme. (Value: "LIGHT3")
 *    @arg @c kGTLRSlides_Recolor_Name_Light4 A recolor effect that lightens the
 *        image using the page's forth available
 *        color from its color scheme. (Value: "LIGHT4")
 *    @arg @c kGTLRSlides_Recolor_Name_Light5 A recolor effect that lightens the
 *        image using the page's fifth available
 *        color from its color scheme. (Value: "LIGHT5")
 *    @arg @c kGTLRSlides_Recolor_Name_Light6 A recolor effect that lightens the
 *        image using the page's sixth available
 *        color from its color scheme. (Value: "LIGHT6")
 *    @arg @c kGTLRSlides_Recolor_Name_Light7 A recolor effect that lightens the
 *        image using the page's seventh
 *        available color from its color scheme. (Value: "LIGHT7")
 *    @arg @c kGTLRSlides_Recolor_Name_Light8 A recolor effect that lightens the
 *        image using the page's eighth
 *        available color from its color scheme. (Value: "LIGHT8")
 *    @arg @c kGTLRSlides_Recolor_Name_Light9 A recolor effect that lightens the
 *        image using the page's ninth available
 *        color from its color scheme. (Value: "LIGHT9")
 *    @arg @c kGTLRSlides_Recolor_Name_Negative A recolor effect that recolors
 *        the image to negative grayscale. (Value: "NEGATIVE")
 *    @arg @c kGTLRSlides_Recolor_Name_None No recolor effect. The default
 *        value. (Value: "NONE")
 *    @arg @c kGTLRSlides_Recolor_Name_Sepia A recolor effect that recolors the
 *        image using the sepia color. (Value: "SEPIA")
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The recolor effect is represented by a gradient, which is a list of color
 *  stops.
 *  The colors in the gradient will replace the corresponding colors at
 *  the same position in the color palette and apply to the image. This
 *  property is read-only.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_ColorStop *> *recolorStops;

@end


/**
 *  Refreshes an embedded Google Sheets chart by replacing it with the latest
 *  version of the chart from Google Sheets.
 *  NOTE: Refreshing charts requires at least one of the spreadsheets.readonly,
 *  spreadsheets, drive.readonly, or drive OAuth scopes.
 */
@interface GTLRSlides_RefreshSheetsChartRequest : GTLRObject

/** The object ID of the chart to refresh. */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  Replaces all shapes that match the given criteria with the provided image.
 *  The images replacing the shapes are rectangular after being inserted into
 *  the presentation and do not take on the forms of the shapes.
 */
@interface GTLRSlides_ReplaceAllShapesWithImageRequest : GTLRObject

/**
 *  If set, this request will replace all of the shapes that contain the
 *  given text.
 */
@property(nonatomic, strong, nullable) GTLRSlides_SubstringMatchCriteria *containsText;

/**
 *  The image replace method.
 *  If you specify both a `replace_method` and an `image_replace_method`, the
 *  `image_replace_method` takes precedence.
 *  If you do not specify a value for `image_replace_method`, but specify a
 *  value for `replace_method`, then the specified `replace_method` value is
 *  used.
 *  If you do not specify either, then CENTER_INSIDE is used.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_ReplaceAllShapesWithImageRequest_ImageReplaceMethod_CenterCrop
 *        Scales and centers the image to fill the bounds of the original shape.
 *        The image may be cropped in order to fill the shape. The rendered size
 *        of
 *        the image will be the same as that of the original shape. (Value:
 *        "CENTER_CROP")
 *    @arg @c kGTLRSlides_ReplaceAllShapesWithImageRequest_ImageReplaceMethod_CenterInside
 *        Scales and centers the image to fit within the bounds of the original
 *        shape and maintains the image's aspect ratio. The rendered size of the
 *        image may be smaller than the size of the shape. This is the default
 *        method when one is not specified. (Value: "CENTER_INSIDE")
 *    @arg @c kGTLRSlides_ReplaceAllShapesWithImageRequest_ImageReplaceMethod_ImageReplaceMethodUnspecified
 *        Unspecified image replace method. This value must not be used. (Value:
 *        "IMAGE_REPLACE_METHOD_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *imageReplaceMethod;

/**
 *  The image URL.
 *  The image is fetched once at insertion time and a copy is stored for
 *  display inside the presentation. Images must be less than 50MB in size,
 *  cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF
 *  format.
 *  The provided URL can be at most 2 kB in length. The URL itself is saved
 *  with the image, and exposed via the Image.source_url field.
 */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/**
 *  If non-empty, limits the matches to page elements only on the given pages.
 *  Returns a 400 bad request error if given the page object ID of a
 *  notes page or a
 *  notes master, or if a
 *  page with that object ID doesn't exist in the presentation.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *pageObjectIds;

/**
 *  The replace method.
 *  <b>Deprecated</b>: use `image_replace_method` instead.
 *  If you specify both a `replace_method` and an `image_replace_method`, the
 *  `image_replace_method` takes precedence.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_ReplaceAllShapesWithImageRequest_ReplaceMethod_CenterCrop
 *        Scales and centers the image to fill the bounds of the original shape.
 *        The image may be cropped in order to fill the shape. The rendered size
 *        of
 *        the image will be the same as that of the original shape. (Value:
 *        "CENTER_CROP")
 *    @arg @c kGTLRSlides_ReplaceAllShapesWithImageRequest_ReplaceMethod_CenterInside
 *        Scales and centers the image to fit within the bounds of the original
 *        shape and maintains the image's aspect ratio. The rendered size of the
 *        image may be smaller than the size of the shape. This is the default
 *        method when one is not specified. (Value: "CENTER_INSIDE")
 */
@property(nonatomic, copy, nullable) NSString *replaceMethod;

@end


/**
 *  The result of replacing shapes with an image.
 */
@interface GTLRSlides_ReplaceAllShapesWithImageResponse : GTLRObject

/**
 *  The number of shapes replaced with images.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *occurrencesChanged;

@end


/**
 *  Replaces all shapes that match the given criteria with the provided Google
 *  Sheets chart. The chart will be scaled and centered to fit within the bounds
 *  of the original shape.
 *  NOTE: Replacing shapes with a chart requires at least one of the
 *  spreadsheets.readonly, spreadsheets, drive.readonly, or drive OAuth scopes.
 */
@interface GTLRSlides_ReplaceAllShapesWithSheetsChartRequest : GTLRObject

/**
 *  The ID of the specific chart in the Google Sheets spreadsheet.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *chartId;

/**
 *  The criteria that the shapes must match in order to be replaced. The
 *  request will replace all of the shapes that contain the given text.
 */
@property(nonatomic, strong, nullable) GTLRSlides_SubstringMatchCriteria *containsText;

/**
 *  The mode with which the chart is linked to the source spreadsheet. When
 *  not specified, the chart will be an image that is not linked.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_ReplaceAllShapesWithSheetsChartRequest_LinkingMode_Linked
 *        Linking the chart allows it to be updated, and other collaborators
 *        will
 *        see a link to the spreadsheet. (Value: "LINKED")
 *    @arg @c kGTLRSlides_ReplaceAllShapesWithSheetsChartRequest_LinkingMode_NotLinkedImage
 *        The chart is not associated with the source spreadsheet and cannot be
 *        updated. A chart that is not linked will be inserted as an image.
 *        (Value: "NOT_LINKED_IMAGE")
 */
@property(nonatomic, copy, nullable) NSString *linkingMode;

/**
 *  If non-empty, limits the matches to page elements only on the given pages.
 *  Returns a 400 bad request error if given the page object ID of a
 *  notes page or a
 *  notes master, or if a
 *  page with that object ID doesn't exist in the presentation.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *pageObjectIds;

/** The ID of the Google Sheets spreadsheet that contains the chart. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

@end


/**
 *  The result of replacing shapes with a Google Sheets chart.
 */
@interface GTLRSlides_ReplaceAllShapesWithSheetsChartResponse : GTLRObject

/**
 *  The number of shapes replaced with charts.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *occurrencesChanged;

@end


/**
 *  Replaces all instances of text matching a criteria with replace text.
 */
@interface GTLRSlides_ReplaceAllTextRequest : GTLRObject

/** Finds text in a shape matching this substring. */
@property(nonatomic, strong, nullable) GTLRSlides_SubstringMatchCriteria *containsText;

/**
 *  If non-empty, limits the matches to page elements only on the given pages.
 *  Returns a 400 bad request error if given the page object ID of a
 *  notes master,
 *  or if a page with that object ID doesn't exist in the presentation.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *pageObjectIds;

/** The text that will replace the matched text. */
@property(nonatomic, copy, nullable) NSString *replaceText;

@end


/**
 *  The result of replacing text.
 */
@interface GTLRSlides_ReplaceAllTextResponse : GTLRObject

/**
 *  The number of occurrences changed by replacing all text.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *occurrencesChanged;

@end


/**
 *  Replaces an existing image with a new image.
 *  Replacing an image removes some image effects from the existing image.
 */
@interface GTLRSlides_ReplaceImageRequest : GTLRObject

/** The ID of the existing image that will be replaced. */
@property(nonatomic, copy, nullable) NSString *imageObjectId;

/**
 *  The replacement method.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_ReplaceImageRequest_ImageReplaceMethod_CenterCrop
 *        Scales and centers the image to fill the bounds of the original shape.
 *        The image may be cropped in order to fill the shape. The rendered size
 *        of
 *        the image will be the same as that of the original shape. (Value:
 *        "CENTER_CROP")
 *    @arg @c kGTLRSlides_ReplaceImageRequest_ImageReplaceMethod_CenterInside
 *        Scales and centers the image to fit within the bounds of the original
 *        shape and maintains the image's aspect ratio. The rendered size of the
 *        image may be smaller than the size of the shape. This is the default
 *        method when one is not specified. (Value: "CENTER_INSIDE")
 *    @arg @c kGTLRSlides_ReplaceImageRequest_ImageReplaceMethod_ImageReplaceMethodUnspecified
 *        Unspecified image replace method. This value must not be used. (Value:
 *        "IMAGE_REPLACE_METHOD_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *imageReplaceMethod;

/**
 *  The URL of the new image.
 *  The image is fetched once at insertion time and a copy is stored for
 *  display inside the presentation. Images must be less than 50MB in size,
 *  cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF
 *  format.
 *  The provided URL can be at most 2 kB in length. The URL itself is saved
 *  with the image, and exposed via the Image.source_url field.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  A single kind of update to apply to a presentation.
 */
@interface GTLRSlides_Request : GTLRObject

/** Creates an image. */
@property(nonatomic, strong, nullable) GTLRSlides_CreateImageRequest *createImage;

/** Creates a line. */
@property(nonatomic, strong, nullable) GTLRSlides_CreateLineRequest *createLine;

/** Creates bullets for paragraphs. */
@property(nonatomic, strong, nullable) GTLRSlides_CreateParagraphBulletsRequest *createParagraphBullets;

/** Creates a new shape. */
@property(nonatomic, strong, nullable) GTLRSlides_CreateShapeRequest *createShape;

/** Creates an embedded Google Sheets chart. */
@property(nonatomic, strong, nullable) GTLRSlides_CreateSheetsChartRequest *createSheetsChart;

/** Creates a new slide. */
@property(nonatomic, strong, nullable) GTLRSlides_CreateSlideRequest *createSlide;

/** Creates a new table. */
@property(nonatomic, strong, nullable) GTLRSlides_CreateTableRequest *createTable;

/** Creates a video. */
@property(nonatomic, strong, nullable) GTLRSlides_CreateVideoRequest *createVideo;

/** Deletes a page or page element from the presentation. */
@property(nonatomic, strong, nullable) GTLRSlides_DeleteObjectRequest *deleteObject;

/** Deletes bullets from paragraphs. */
@property(nonatomic, strong, nullable) GTLRSlides_DeleteParagraphBulletsRequest *deleteParagraphBullets;

/** Deletes a column from a table. */
@property(nonatomic, strong, nullable) GTLRSlides_DeleteTableColumnRequest *deleteTableColumn;

/** Deletes a row from a table. */
@property(nonatomic, strong, nullable) GTLRSlides_DeleteTableRowRequest *deleteTableRow;

/** Deletes text from a shape or a table cell. */
@property(nonatomic, strong, nullable) GTLRSlides_DeleteTextRequest *deleteText;

/** Duplicates a slide or page element. */
@property(nonatomic, strong, nullable) GTLRSlides_DuplicateObjectRequest *duplicateObject;

/** Groups objects, such as page elements. */
@property(nonatomic, strong, nullable) GTLRSlides_GroupObjectsRequest *groupObjects;

/** Inserts columns into a table. */
@property(nonatomic, strong, nullable) GTLRSlides_InsertTableColumnsRequest *insertTableColumns;

/** Inserts rows into a table. */
@property(nonatomic, strong, nullable) GTLRSlides_InsertTableRowsRequest *insertTableRows;

/** Inserts text into a shape or table cell. */
@property(nonatomic, strong, nullable) GTLRSlides_InsertTextRequest *insertText;

/** Merges cells in a Table. */
@property(nonatomic, strong, nullable) GTLRSlides_MergeTableCellsRequest *mergeTableCells;

/** Refreshes a Google Sheets chart. */
@property(nonatomic, strong, nullable) GTLRSlides_RefreshSheetsChartRequest *refreshSheetsChart;

/** Replaces all shapes matching some criteria with an image. */
@property(nonatomic, strong, nullable) GTLRSlides_ReplaceAllShapesWithImageRequest *replaceAllShapesWithImage;

/** Replaces all shapes matching some criteria with a Google Sheets chart. */
@property(nonatomic, strong, nullable) GTLRSlides_ReplaceAllShapesWithSheetsChartRequest *replaceAllShapesWithSheetsChart;

/** Replaces all instances of specified text. */
@property(nonatomic, strong, nullable) GTLRSlides_ReplaceAllTextRequest *replaceAllText;

/** Replaces an existing image with a new image. */
@property(nonatomic, strong, nullable) GTLRSlides_ReplaceImageRequest *replaceImage;

/**
 *  Reroutes a line such that it's connected
 *  at the two closest connection sites on the connected page elements.
 */
@property(nonatomic, strong, nullable) GTLRSlides_RerouteLineRequest *rerouteLine;

/** Ungroups objects, such as groups. */
@property(nonatomic, strong, nullable) GTLRSlides_UngroupObjectsRequest *ungroupObjects;

/** Unmerges cells in a Table. */
@property(nonatomic, strong, nullable) GTLRSlides_UnmergeTableCellsRequest *unmergeTableCells;

/** Updates the properties of an Image. */
@property(nonatomic, strong, nullable) GTLRSlides_UpdateImagePropertiesRequest *updateImageProperties;

/** Updates the category of a line. */
@property(nonatomic, strong, nullable) GTLRSlides_UpdateLineCategoryRequest *updateLineCategory;

/** Updates the properties of a Line. */
@property(nonatomic, strong, nullable) GTLRSlides_UpdateLinePropertiesRequest *updateLineProperties;

/**
 *  Updates the alt text title and/or description of a
 *  page element.
 */
@property(nonatomic, strong, nullable) GTLRSlides_UpdatePageElementAltTextRequest *updatePageElementAltText;

/** Updates the Z-order of page elements. */
@property(nonatomic, strong, nullable) GTLRSlides_UpdatePageElementsZOrderRequest *updatePageElementsZOrder;

/** Updates the transform of a page element. */
@property(nonatomic, strong, nullable) GTLRSlides_UpdatePageElementTransformRequest *updatePageElementTransform;

/** Updates the properties of a Page. */
@property(nonatomic, strong, nullable) GTLRSlides_UpdatePagePropertiesRequest *updatePageProperties;

/** Updates the styling of paragraphs within a Shape or Table. */
@property(nonatomic, strong, nullable) GTLRSlides_UpdateParagraphStyleRequest *updateParagraphStyle;

/** Updates the properties of a Shape. */
@property(nonatomic, strong, nullable) GTLRSlides_UpdateShapePropertiesRequest *updateShapeProperties;

/** Updates the position of a set of slides in the presentation. */
@property(nonatomic, strong, nullable) GTLRSlides_UpdateSlidesPositionRequest *updateSlidesPosition;

/** Updates the properties of the table borders in a Table. */
@property(nonatomic, strong, nullable) GTLRSlides_UpdateTableBorderPropertiesRequest *updateTableBorderProperties;

/** Updates the properties of a TableCell. */
@property(nonatomic, strong, nullable) GTLRSlides_UpdateTableCellPropertiesRequest *updateTableCellProperties;

/**
 *  Updates the properties of a Table
 *  column.
 */
@property(nonatomic, strong, nullable) GTLRSlides_UpdateTableColumnPropertiesRequest *updateTableColumnProperties;

/** Updates the properties of a Table row. */
@property(nonatomic, strong, nullable) GTLRSlides_UpdateTableRowPropertiesRequest *updateTableRowProperties;

/** Updates the styling of text within a Shape or Table. */
@property(nonatomic, strong, nullable) GTLRSlides_UpdateTextStyleRequest *updateTextStyle;

/** Updates the properties of a Video. */
@property(nonatomic, strong, nullable) GTLRSlides_UpdateVideoPropertiesRequest *updateVideoProperties;

@end


/**
 *  Reroutes a line such that it's connected at the
 *  two closest connection sites on the connected page elements.
 */
@interface GTLRSlides_RerouteLineRequest : GTLRObject

/**
 *  The object ID of the line to reroute.
 *  Only a line with a category
 *  indicating it is a "connector" can be rerouted. The start and end
 *  connections of the line must be on different page elements.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  A single response from an update.
 */
@interface GTLRSlides_Response : GTLRObject

/** The result of creating an image. */
@property(nonatomic, strong, nullable) GTLRSlides_CreateImageResponse *createImage;

/** The result of creating a line. */
@property(nonatomic, strong, nullable) GTLRSlides_CreateLineResponse *createLine;

/** The result of creating a shape. */
@property(nonatomic, strong, nullable) GTLRSlides_CreateShapeResponse *createShape;

/** The result of creating a Google Sheets chart. */
@property(nonatomic, strong, nullable) GTLRSlides_CreateSheetsChartResponse *createSheetsChart;

/** The result of creating a slide. */
@property(nonatomic, strong, nullable) GTLRSlides_CreateSlideResponse *createSlide;

/** The result of creating a table. */
@property(nonatomic, strong, nullable) GTLRSlides_CreateTableResponse *createTable;

/** The result of creating a video. */
@property(nonatomic, strong, nullable) GTLRSlides_CreateVideoResponse *createVideo;

/** The result of duplicating an object. */
@property(nonatomic, strong, nullable) GTLRSlides_DuplicateObjectResponse *duplicateObject;

/** The result of grouping objects. */
@property(nonatomic, strong, nullable) GTLRSlides_GroupObjectsResponse *groupObjects;

/**
 *  The result of replacing all shapes matching some criteria with an
 *  image.
 */
@property(nonatomic, strong, nullable) GTLRSlides_ReplaceAllShapesWithImageResponse *replaceAllShapesWithImage;

/**
 *  The result of replacing all shapes matching some criteria with a Google
 *  Sheets chart.
 */
@property(nonatomic, strong, nullable) GTLRSlides_ReplaceAllShapesWithSheetsChartResponse *replaceAllShapesWithSheetsChart;

/** The result of replacing text. */
@property(nonatomic, strong, nullable) GTLRSlides_ReplaceAllTextResponse *replaceAllText;

@end


/**
 *  An RGB color.
 */
@interface GTLRSlides_RgbColor : GTLRObject

/**
 *  The blue component of the color, from 0.0 to 1.0.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blue;

/**
 *  The green component of the color, from 0.0 to 1.0.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *green;

/**
 *  The red component of the color, from 0.0 to 1.0.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *red;

@end


/**
 *  The shadow properties of a page element.
 *  If these fields are unset, they may be inherited from a parent placeholder
 *  if it exists. If there is no parent, the fields will default to the value
 *  used for new page elements created in the Slides editor, which may depend on
 *  the page element kind.
 */
@interface GTLRSlides_Shadow : GTLRObject

/**
 *  The alignment point of the shadow, that sets the origin for translate,
 *  scale and skew of the shadow. This property is read-only.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_Shadow_Alignment_BottomCenter Bottom center. (Value:
 *        "BOTTOM_CENTER")
 *    @arg @c kGTLRSlides_Shadow_Alignment_BottomLeft Bottom left. (Value:
 *        "BOTTOM_LEFT")
 *    @arg @c kGTLRSlides_Shadow_Alignment_BottomRight Bottom right. (Value:
 *        "BOTTOM_RIGHT")
 *    @arg @c kGTLRSlides_Shadow_Alignment_Center Center. (Value: "CENTER")
 *    @arg @c kGTLRSlides_Shadow_Alignment_LeftCenter Left center. (Value:
 *        "LEFT_CENTER")
 *    @arg @c kGTLRSlides_Shadow_Alignment_RectanglePositionUnspecified
 *        Unspecified. (Value: "RECTANGLE_POSITION_UNSPECIFIED")
 *    @arg @c kGTLRSlides_Shadow_Alignment_RightCenter Right center. (Value:
 *        "RIGHT_CENTER")
 *    @arg @c kGTLRSlides_Shadow_Alignment_TopCenter Top center. (Value:
 *        "TOP_CENTER")
 *    @arg @c kGTLRSlides_Shadow_Alignment_TopLeft Top left. (Value: "TOP_LEFT")
 *    @arg @c kGTLRSlides_Shadow_Alignment_TopRight Top right. (Value:
 *        "TOP_RIGHT")
 */
@property(nonatomic, copy, nullable) NSString *alignment;

/**
 *  The alpha of the shadow's color, from 0.0 to 1.0.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *alpha;

/**
 *  The radius of the shadow blur. The larger the radius, the more diffuse the
 *  shadow becomes.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Dimension *blurRadius;

/** The shadow color value. */
@property(nonatomic, strong, nullable) GTLRSlides_OpaqueColor *color;

/**
 *  The shadow property state.
 *  Updating the shadow on a page element will implicitly update this field to
 *  `RENDERED`, unless another value is specified in the same request. To have
 *  no shadow on a page element, set this field to `NOT_RENDERED`. In this
 *  case, any other shadow fields set in the same request will be ignored.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_Shadow_PropertyState_Inherit If a property's state is
 *        INHERIT, then the property state uses the value of
 *        corresponding `property_state` field on the parent shape. Elements
 *        that do
 *        not inherit will never have an INHERIT property state. (Value:
 *        "INHERIT")
 *    @arg @c kGTLRSlides_Shadow_PropertyState_NotRendered If a property's state
 *        is NOT_RENDERED, then the element does not have the
 *        corresponding property when rendered on a page. However, the field may
 *        still be set so it can be inherited by child shapes. To remove a
 *        property
 *        from a rendered element, set its property_state to NOT_RENDERED.
 *        (Value: "NOT_RENDERED")
 *    @arg @c kGTLRSlides_Shadow_PropertyState_Rendered If a property's state is
 *        RENDERED, then the element has the corresponding
 *        property when rendered on a page. If the element is a placeholder
 *        shape as
 *        determined by the placeholder
 *        field, and it inherits from a placeholder shape, the corresponding
 *        field
 *        may be unset, meaning that the property value is inherited from a
 *        parent
 *        placeholder. If the element does not inherit, then the field will
 *        contain
 *        the rendered value. This is the default value. (Value: "RENDERED")
 */
@property(nonatomic, copy, nullable) NSString *propertyState;

/**
 *  Whether the shadow should rotate with the shape. This property is
 *  read-only.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rotateWithShape;

/**
 *  Transform that encodes the translate, scale, and skew of the shadow,
 *  relative to the alignment position.
 */
@property(nonatomic, strong, nullable) GTLRSlides_AffineTransform *transform;

/**
 *  The type of the shadow. This property is read-only.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_Shadow_Type_Outer Outer shadow. (Value: "OUTER")
 *    @arg @c kGTLRSlides_Shadow_Type_ShadowTypeUnspecified Unspecified shadow
 *        type. (Value: "SHADOW_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A PageElement kind representing a
 *  generic shape that does not have a more specific classification.
 */
@interface GTLRSlides_Shape : GTLRObject

/**
 *  Placeholders are shapes that are inherit from corresponding placeholders on
 *  layouts and masters.
 *  If set, the shape is a placeholder shape and any inherited properties
 *  can be resolved by looking at the parent placeholder identified by the
 *  Placeholder.parent_object_id field.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Placeholder *placeholder;

/** The properties of the shape. */
@property(nonatomic, strong, nullable) GTLRSlides_ShapeProperties *shapeProperties;

/**
 *  The type of the shape.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_Shape_ShapeType_Arc Curved arc shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'arc' (Value: "ARC")
 *    @arg @c kGTLRSlides_Shape_ShapeType_ArrowEast East arrow shape. (Value:
 *        "ARROW_EAST")
 *    @arg @c kGTLRSlides_Shape_ShapeType_ArrowNorth North arrow shape. (Value:
 *        "ARROW_NORTH")
 *    @arg @c kGTLRSlides_Shape_ShapeType_ArrowNorthEast Northeast arrow shape.
 *        (Value: "ARROW_NORTH_EAST")
 *    @arg @c kGTLRSlides_Shape_ShapeType_BentArrow Bent arrow shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'bentArrow' (Value: "BENT_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_BentUpArrow Bent up arrow shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'bentUpArrow' (Value:
 *        "BENT_UP_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Bevel Bevel shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'bevel' (Value: "BEVEL")
 *    @arg @c kGTLRSlides_Shape_ShapeType_BlockArc Block arc shape. Corresponds
 *        to ECMA-376 ST_ShapeType 'blockArc' (Value: "BLOCK_ARC")
 *    @arg @c kGTLRSlides_Shape_ShapeType_BracePair Brace pair shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'bracePair' (Value: "BRACE_PAIR")
 *    @arg @c kGTLRSlides_Shape_ShapeType_BracketPair Bracket pair shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'bracketPair' (Value:
 *        "BRACKET_PAIR")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Can Can shape. Corresponds to ECMA-376
 *        ST_ShapeType 'can' (Value: "CAN")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Chevron Chevron shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'chevron' (Value: "CHEVRON")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Chord Chord shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'chord' (Value: "CHORD")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Cloud Cloud shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'cloud' (Value: "CLOUD")
 *    @arg @c kGTLRSlides_Shape_ShapeType_CloudCallout Callout cloud shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'cloudCallout' (Value:
 *        "CLOUD_CALLOUT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Corner Corner shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'corner' (Value: "CORNER")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Cube Cube shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'cube' (Value: "CUBE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_CurvedDownArrow Curved down arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'curvedDownArrow' (Value: "CURVED_DOWN_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_CurvedLeftArrow Curved left arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'curvedLeftArrow' (Value: "CURVED_LEFT_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_CurvedRightArrow Curved right arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'curvedRightArrow' (Value: "CURVED_RIGHT_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_CurvedUpArrow Curved up arrow shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'curvedUpArrow' (Value: "CURVED_UP_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Custom Custom shape. (Value: "CUSTOM")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Decagon Decagon shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'decagon' (Value: "DECAGON")
 *    @arg @c kGTLRSlides_Shape_ShapeType_DiagonalStripe Diagonal stripe shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'diagStripe' (Value:
 *        "DIAGONAL_STRIPE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Diamond Diamond shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'diamond' (Value: "DIAMOND")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Dodecagon Dodecagon shape. Corresponds
 *        to ECMA-376 ST_ShapeType 'dodecagon' (Value: "DODECAGON")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Donut Donut shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'donut' (Value: "DONUT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_DoubleWave Double wave shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'doubleWave' (Value:
 *        "DOUBLE_WAVE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_DownArrow Down arrow shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'downArrow' (Value: "DOWN_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_DownArrowCallout Callout down arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'downArrowCallout' (Value: "DOWN_ARROW_CALLOUT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Ellipse Ellipse shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'ellipse' (Value: "ELLIPSE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_EllipseRibbon Ellipse ribbon shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'ellipseRibbon' (Value: "ELLIPSE_RIBBON")
 *    @arg @c kGTLRSlides_Shape_ShapeType_EllipseRibbon2 Ellipse ribbon 2 shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'ellipseRibbon2' (Value: "ELLIPSE_RIBBON_2")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartAlternateProcess Alternate
 *        process flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartAlternateProcess' (Value: "FLOW_CHART_ALTERNATE_PROCESS")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartCollate Collate flow shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartCollate' (Value: "FLOW_CHART_COLLATE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartConnector Connector flow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartConnector' (Value: "FLOW_CHART_CONNECTOR")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartDecision Decision flow shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartDecision' (Value: "FLOW_CHART_DECISION")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartDelay Delay flow shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'flowChartDelay' (Value:
 *        "FLOW_CHART_DELAY")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartDisplay Display flow shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartDisplay' (Value: "FLOW_CHART_DISPLAY")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartDocument Document flow shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartDocument' (Value: "FLOW_CHART_DOCUMENT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartExtract Extract flow shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartExtract' (Value: "FLOW_CHART_EXTRACT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartInputOutput Input output flow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartInputOutput' (Value: "FLOW_CHART_INPUT_OUTPUT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartInternalStorage Internal
 *        storage flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartInternalStorage' (Value: "FLOW_CHART_INTERNAL_STORAGE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartMagneticDisk Magnetic disk
 *        flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartMagneticDisk' (Value: "FLOW_CHART_MAGNETIC_DISK")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartMagneticDrum Magnetic drum
 *        flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartMagneticDrum' (Value: "FLOW_CHART_MAGNETIC_DRUM")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartMagneticTape Magnetic tape
 *        flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartMagneticTape' (Value: "FLOW_CHART_MAGNETIC_TAPE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartManualInput Manual input flow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartManualInput' (Value: "FLOW_CHART_MANUAL_INPUT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartManualOperation Manual
 *        operation flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartManualOperation' (Value: "FLOW_CHART_MANUAL_OPERATION")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartMerge Merge flow shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'flowChartMerge' (Value:
 *        "FLOW_CHART_MERGE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartMultidocument Multi-document
 *        flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartMultidocument' (Value: "FLOW_CHART_MULTIDOCUMENT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartOfflineStorage Offline
 *        storage flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartOfflineStorage' (Value: "FLOW_CHART_OFFLINE_STORAGE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartOffpageConnector Off-page
 *        connector flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartOffpageConnector' (Value: "FLOW_CHART_OFFPAGE_CONNECTOR")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartOnlineStorage Online storage
 *        flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartOnlineStorage' (Value: "FLOW_CHART_ONLINE_STORAGE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartOr Or flow shape. Corresponds
 *        to ECMA-376 ST_ShapeType 'flowChartOr' (Value: "FLOW_CHART_OR")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartPredefinedProcess Predefined
 *        process flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartPredefinedProcess' (Value: "FLOW_CHART_PREDEFINED_PROCESS")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartPreparation Preparation flow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartPreparation' (Value: "FLOW_CHART_PREPARATION")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartProcess Process flow shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartProcess' (Value: "FLOW_CHART_PROCESS")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartPunchedCard Punched card flow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartPunchedCard' (Value: "FLOW_CHART_PUNCHED_CARD")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartPunchedTape Punched tape flow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartPunchedTape' (Value: "FLOW_CHART_PUNCHED_TAPE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartSort Sort flow shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'flowChartSort' (Value:
 *        "FLOW_CHART_SORT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartSummingJunction Summing
 *        junction flow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartSummingJunction' (Value: "FLOW_CHART_SUMMING_JUNCTION")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FlowChartTerminator Terminator flow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'flowChartTerminator' (Value: "FLOW_CHART_TERMINATOR")
 *    @arg @c kGTLRSlides_Shape_ShapeType_FoldedCorner Folded corner shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'foldedCorner' (Value:
 *        "FOLDED_CORNER")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Frame Frame shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'frame' (Value: "FRAME")
 *    @arg @c kGTLRSlides_Shape_ShapeType_HalfFrame Half frame shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'halfFrame' (Value: "HALF_FRAME")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Heart Heart shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'heart' (Value: "HEART")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Heptagon Heptagon shape. Corresponds
 *        to ECMA-376 ST_ShapeType 'heptagon' (Value: "HEPTAGON")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Hexagon Hexagon shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'hexagon' (Value: "HEXAGON")
 *    @arg @c kGTLRSlides_Shape_ShapeType_HomePlate Home plate shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'homePlate' (Value: "HOME_PLATE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_HorizontalScroll Horizontal scroll
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'horizontalScroll' (Value: "HORIZONTAL_SCROLL")
 *    @arg @c kGTLRSlides_Shape_ShapeType_IrregularSeal1 Irregular seal 1 shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'irregularSeal1' (Value: "IRREGULAR_SEAL_1")
 *    @arg @c kGTLRSlides_Shape_ShapeType_IrregularSeal2 Irregular seal 2 shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'irregularSeal2' (Value: "IRREGULAR_SEAL_2")
 *    @arg @c kGTLRSlides_Shape_ShapeType_LeftArrow Left arrow shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'leftArrow' (Value: "LEFT_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_LeftArrowCallout Callout left arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'leftArrowCallout' (Value: "LEFT_ARROW_CALLOUT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_LeftBrace Left brace shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'leftBrace' (Value: "LEFT_BRACE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_LeftBracket Left bracket shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'leftBracket' (Value:
 *        "LEFT_BRACKET")
 *    @arg @c kGTLRSlides_Shape_ShapeType_LeftRightArrow Left right arrow shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'leftRightArrow' (Value: "LEFT_RIGHT_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_LeftRightArrowCallout Callout left
 *        right arrow shape. Corresponds to ECMA-376 ST_ShapeType
 *        'leftRightArrowCallout' (Value: "LEFT_RIGHT_ARROW_CALLOUT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_LeftRightUpArrow Left right up arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'leftRightUpArrow' (Value: "LEFT_RIGHT_UP_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_LeftUpArrow Left up arrow shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'leftUpArrow' (Value:
 *        "LEFT_UP_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_LightningBolt Lightning bolt shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'lightningBolt' (Value: "LIGHTNING_BOLT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_MathDivide Divide math shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'mathDivide' (Value:
 *        "MATH_DIVIDE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_MathEqual Equal math shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'mathEqual' (Value: "MATH_EQUAL")
 *    @arg @c kGTLRSlides_Shape_ShapeType_MathMinus Minus math shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'mathMinus' (Value: "MATH_MINUS")
 *    @arg @c kGTLRSlides_Shape_ShapeType_MathMultiply Multiply math shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'mathMultiply' (Value:
 *        "MATH_MULTIPLY")
 *    @arg @c kGTLRSlides_Shape_ShapeType_MathNotEqual Not equal math shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'mathNotEqual' (Value:
 *        "MATH_NOT_EQUAL")
 *    @arg @c kGTLRSlides_Shape_ShapeType_MathPlus Plus math shape. Corresponds
 *        to ECMA-376 ST_ShapeType 'mathPlus' (Value: "MATH_PLUS")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Moon Moon shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'moon' (Value: "MOON")
 *    @arg @c kGTLRSlides_Shape_ShapeType_NoSmoking No smoking shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'noSmoking' (Value: "NO_SMOKING")
 *    @arg @c kGTLRSlides_Shape_ShapeType_NotchedRightArrow Notched right arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'notchedRightArrow' (Value: "NOTCHED_RIGHT_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Octagon Octagon shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'octagon' (Value: "OCTAGON")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Parallelogram Parallelogram shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'parallelogram' (Value:
 *        "PARALLELOGRAM")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Pentagon Pentagon shape. Corresponds
 *        to ECMA-376 ST_ShapeType 'pentagon' (Value: "PENTAGON")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Pie Pie shape. Corresponds to ECMA-376
 *        ST_ShapeType 'pie' (Value: "PIE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Plaque Plaque shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'plaque' (Value: "PLAQUE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Plus Plus shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'plus' (Value: "PLUS")
 *    @arg @c kGTLRSlides_Shape_ShapeType_QuadArrow Quad-arrow shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'quadArrow' (Value: "QUAD_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_QuadArrowCallout Callout quad-arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'quadArrowCallout' (Value: "QUAD_ARROW_CALLOUT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Rectangle Rectangle shape. Corresponds
 *        to ECMA-376 ST_ShapeType 'rect'. (Value: "RECTANGLE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Ribbon Ribbon shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'ribbon' (Value: "RIBBON")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Ribbon2 Ribbon 2 shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'ribbon2' (Value: "RIBBON_2")
 *    @arg @c kGTLRSlides_Shape_ShapeType_RightArrow Right arrow shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'rightArrow' (Value:
 *        "RIGHT_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_RightArrowCallout Callout right arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'rightArrowCallout' (Value: "RIGHT_ARROW_CALLOUT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_RightBrace Right brace shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'rightBrace' (Value:
 *        "RIGHT_BRACE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_RightBracket Right bracket shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'rightBracket' (Value:
 *        "RIGHT_BRACKET")
 *    @arg @c kGTLRSlides_Shape_ShapeType_RightTriangle Right triangle shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'rtTriangle' (Value:
 *        "RIGHT_TRIANGLE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Round1Rectangle One round corner
 *        rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *        'round1Rect' (Value: "ROUND_1_RECTANGLE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Round2DiagonalRectangle Two diagonal
 *        round corner rectangle shape. Corresponds to ECMA-376
 *        ST_ShapeType 'round2DiagRect' (Value: "ROUND_2_DIAGONAL_RECTANGLE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Round2SameRectangle Two same-side
 *        round corner rectangle shape. Corresponds to ECMA-376
 *        ST_ShapeType 'round2SameRect' (Value: "ROUND_2_SAME_RECTANGLE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_RoundRectangle Round corner rectangle
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'roundRect' (Value: "ROUND_RECTANGLE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_SmileyFace Smiley face shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'smileyFace' (Value:
 *        "SMILEY_FACE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Snip1Rectangle One snip corner
 *        rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *        'snip1Rect' (Value: "SNIP_1_RECTANGLE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Snip2DiagonalRectangle Two diagonal
 *        snip corner rectangle shape. Corresponds to ECMA-376
 *        ST_ShapeType 'snip2DiagRect' (Value: "SNIP_2_DIAGONAL_RECTANGLE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Snip2SameRectangle Two same-side snip
 *        corner rectangle shape. Corresponds to ECMA-376
 *        ST_ShapeType 'snip2SameRect' (Value: "SNIP_2_SAME_RECTANGLE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_SnipRoundRectangle One snip one round
 *        corner rectangle shape. Corresponds to ECMA-376
 *        ST_ShapeType 'snipRoundRect' (Value: "SNIP_ROUND_RECTANGLE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Speech Speech shape. (Value: "SPEECH")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Star10 Ten pointed star shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'star10' (Value: "STAR_10")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Star12 Twelve pointed star shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'star12' (Value: "STAR_12")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Star16 Sixteen pointed star shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'star16' (Value: "STAR_16")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Star24 Twenty four pointed star shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'star24' (Value: "STAR_24")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Star32 Thirty two pointed star shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'star32' (Value: "STAR_32")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Star4 Four pointed star shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'star4' (Value: "STAR_4")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Star5 Five pointed star shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'star5' (Value: "STAR_5")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Star6 Six pointed star shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'star6' (Value: "STAR_6")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Star7 Seven pointed star shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'star7' (Value: "STAR_7")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Star8 Eight pointed star shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'star8' (Value: "STAR_8")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Starburst Star burst shape. (Value:
 *        "STARBURST")
 *    @arg @c kGTLRSlides_Shape_ShapeType_StripedRightArrow Striped right arrow
 *        shape. Corresponds to ECMA-376 ST_ShapeType
 *        'stripedRightArrow' (Value: "STRIPED_RIGHT_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Sun Sun shape. Corresponds to ECMA-376
 *        ST_ShapeType 'sun' (Value: "SUN")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Teardrop Teardrop shape. Corresponds
 *        to ECMA-376 ST_ShapeType 'teardrop' (Value: "TEARDROP")
 *    @arg @c kGTLRSlides_Shape_ShapeType_TextBox Text box shape. (Value:
 *        "TEXT_BOX")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Trapezoid Trapezoid shape. Corresponds
 *        to ECMA-376 ST_ShapeType 'trapezoid' (Value: "TRAPEZOID")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Triangle Triangle shape. Corresponds
 *        to ECMA-376 ST_ShapeType 'triangle' (Value: "TRIANGLE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_TypeUnspecified The shape type that is
 *        not predefined. (Value: "TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSlides_Shape_ShapeType_UpArrow Up arrow shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'upArrow' (Value: "UP_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_UpArrowCallout Callout up arrow shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'upArrowCallout' (Value: "UP_ARROW_CALLOUT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_UpDownArrow Up down arrow shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'upDownArrow' (Value:
 *        "UP_DOWN_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_UturnArrow U-turn arrow shape.
 *        Corresponds to ECMA-376 ST_ShapeType 'uturnArrow' (Value:
 *        "UTURN_ARROW")
 *    @arg @c kGTLRSlides_Shape_ShapeType_VerticalScroll Vertical scroll shape.
 *        Corresponds to ECMA-376 ST_ShapeType
 *        'verticalScroll' (Value: "VERTICAL_SCROLL")
 *    @arg @c kGTLRSlides_Shape_ShapeType_Wave Wave shape. Corresponds to
 *        ECMA-376 ST_ShapeType 'wave' (Value: "WAVE")
 *    @arg @c kGTLRSlides_Shape_ShapeType_WedgeEllipseCallout Callout wedge
 *        ellipse shape. Corresponds to ECMA-376 ST_ShapeType
 *        'wedgeEllipseCallout' (Value: "WEDGE_ELLIPSE_CALLOUT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_WedgeRectangleCallout Callout wedge
 *        rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *        'wedgeRectCallout' (Value: "WEDGE_RECTANGLE_CALLOUT")
 *    @arg @c kGTLRSlides_Shape_ShapeType_WedgeRoundRectangleCallout Callout
 *        wedge round rectangle shape. Corresponds to ECMA-376 ST_ShapeType
 *        'wedgeRoundRectCallout' (Value: "WEDGE_ROUND_RECTANGLE_CALLOUT")
 */
@property(nonatomic, copy, nullable) NSString *shapeType;

/** The text content of the shape. */
@property(nonatomic, strong, nullable) GTLRSlides_TextContent *text;

@end


/**
 *  The shape background fill.
 */
@interface GTLRSlides_ShapeBackgroundFill : GTLRObject

/**
 *  The background fill property state.
 *  Updating the fill on a shape will implicitly update this field to
 *  `RENDERED`, unless another value is specified in the same request. To
 *  have no fill on a shape, set this field to `NOT_RENDERED`. In this case,
 *  any other fill fields set in the same request will be ignored.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_ShapeBackgroundFill_PropertyState_Inherit If a
 *        property's state is INHERIT, then the property state uses the value of
 *        corresponding `property_state` field on the parent shape. Elements
 *        that do
 *        not inherit will never have an INHERIT property state. (Value:
 *        "INHERIT")
 *    @arg @c kGTLRSlides_ShapeBackgroundFill_PropertyState_NotRendered If a
 *        property's state is NOT_RENDERED, then the element does not have the
 *        corresponding property when rendered on a page. However, the field may
 *        still be set so it can be inherited by child shapes. To remove a
 *        property
 *        from a rendered element, set its property_state to NOT_RENDERED.
 *        (Value: "NOT_RENDERED")
 *    @arg @c kGTLRSlides_ShapeBackgroundFill_PropertyState_Rendered If a
 *        property's state is RENDERED, then the element has the corresponding
 *        property when rendered on a page. If the element is a placeholder
 *        shape as
 *        determined by the placeholder
 *        field, and it inherits from a placeholder shape, the corresponding
 *        field
 *        may be unset, meaning that the property value is inherited from a
 *        parent
 *        placeholder. If the element does not inherit, then the field will
 *        contain
 *        the rendered value. This is the default value. (Value: "RENDERED")
 */
@property(nonatomic, copy, nullable) NSString *propertyState;

/** Solid color fill. */
@property(nonatomic, strong, nullable) GTLRSlides_SolidFill *solidFill;

@end


/**
 *  The properties of a Shape.
 *  If the shape is a placeholder shape as determined by the
 *  placeholder field, then these
 *  properties may be inherited from a parent placeholder shape.
 *  Determining the rendered value of the property depends on the corresponding
 *  property_state field value.
 */
@interface GTLRSlides_ShapeProperties : GTLRObject

/**
 *  The alignment of the content in the shape. If unspecified,
 *  the alignment is inherited from a parent placeholder if it exists. If the
 *  shape has no parent, the default alignment matches the alignment for new
 *  shapes created in the Slides editor.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_ShapeProperties_ContentAlignment_Bottom An alignment
 *        that aligns the content to the bottom of the content
 *        holder. Corresponds to ECMA-376 ST_TextAnchoringType 'b'. (Value:
 *        "BOTTOM")
 *    @arg @c kGTLRSlides_ShapeProperties_ContentAlignment_ContentAlignmentUnspecified
 *        An unspecified content alignment. The content alignment is inherited
 *        from
 *        the parent if it exists. (Value: "CONTENT_ALIGNMENT_UNSPECIFIED")
 *    @arg @c kGTLRSlides_ShapeProperties_ContentAlignment_ContentAlignmentUnsupported
 *        An unsupported content alignment. (Value:
 *        "CONTENT_ALIGNMENT_UNSUPPORTED")
 *    @arg @c kGTLRSlides_ShapeProperties_ContentAlignment_Middle An alignment
 *        that aligns the content to the middle of the content
 *        holder. Corresponds to ECMA-376 ST_TextAnchoringType 'ctr'. (Value:
 *        "MIDDLE")
 *    @arg @c kGTLRSlides_ShapeProperties_ContentAlignment_Top An alignment that
 *        aligns the content to the top of the content holder.
 *        Corresponds to ECMA-376 ST_TextAnchoringType 't'. (Value: "TOP")
 */
@property(nonatomic, copy, nullable) NSString *contentAlignment;

/**
 *  The hyperlink destination of the shape. If unset, there is no link. Links
 *  are not inherited from parent placeholders.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Link *link;

/**
 *  The outline of the shape. If unset, the outline is inherited from a
 *  parent placeholder if it exists. If the shape has no parent, then the
 *  default outline depends on the shape type, matching the defaults for
 *  new shapes created in the Slides editor.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Outline *outline;

/**
 *  The shadow properties of the shape. If unset, the shadow is inherited from
 *  a parent placeholder if it exists. If the shape has no parent, then the
 *  default shadow matches the defaults for new shapes created in the Slides
 *  editor. This property is read-only.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Shadow *shadow;

/**
 *  The background fill of the shape. If unset, the background fill is
 *  inherited from a parent placeholder if it exists. If the shape has no
 *  parent, then the default background fill depends on the shape type,
 *  matching the defaults for new shapes created in the Slides editor.
 */
@property(nonatomic, strong, nullable) GTLRSlides_ShapeBackgroundFill *shapeBackgroundFill;

@end


/**
 *  A PageElement kind representing
 *  a linked chart embedded from Google Sheets.
 */
@interface GTLRSlides_SheetsChart : GTLRObject

/**
 *  The ID of the specific chart in the Google Sheets spreadsheet that is
 *  embedded.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *chartId;

/**
 *  The URL of an image of the embedded chart, with a default lifetime of 30
 *  minutes. This URL is tagged with the account of the requester. Anyone with
 *  the URL effectively accesses the image as the original requester. Access to
 *  the image may be lost if the presentation's sharing settings change.
 */
@property(nonatomic, copy, nullable) NSString *contentUrl;

/** The properties of the Sheets chart. */
@property(nonatomic, strong, nullable) GTLRSlides_SheetsChartProperties *sheetsChartProperties;

/** The ID of the Google Sheets spreadsheet that contains the source chart. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

@end


/**
 *  The properties of the SheetsChart.
 */
@interface GTLRSlides_SheetsChartProperties : GTLRObject

/** The properties of the embedded chart image. */
@property(nonatomic, strong, nullable) GTLRSlides_ImageProperties *chartImageProperties;

@end


/**
 *  A width and height.
 */
@interface GTLRSlides_Size : GTLRObject

/** The height of the object. */
@property(nonatomic, strong, nullable) GTLRSlides_Dimension *height;

/** The width of the object. */
@property(nonatomic, strong, nullable) GTLRSlides_Dimension *width;

@end


/**
 *  The properties of Page that are only
 *  relevant for pages with page_type SLIDE.
 */
@interface GTLRSlides_SlideProperties : GTLRObject

/**
 *  The object ID of the layout that this slide is based on. This property is
 *  read-only.
 */
@property(nonatomic, copy, nullable) NSString *layoutObjectId;

/**
 *  The object ID of the master that this slide is based on. This property is
 *  read-only.
 */
@property(nonatomic, copy, nullable) NSString *masterObjectId;

/**
 *  The notes page that this slide is associated with. It defines the visual
 *  appearance of a notes page when printing or exporting slides with speaker
 *  notes. A notes page inherits properties from the
 *  notes master.
 *  The placeholder shape with type BODY on the notes page contains the speaker
 *  notes for this slide. The ID of this shape is identified by the
 *  speakerNotesObjectId field.
 *  The notes page is read-only except for the text content and styles of the
 *  speaker notes shape. This property is read-only.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Page *notesPage;

@end


/**
 *  A solid color fill. The page or page element is filled entirely with the
 *  specified color value.
 *  If any field is unset, its value may be inherited from a parent placeholder
 *  if it exists.
 */
@interface GTLRSlides_SolidFill : GTLRObject

/**
 *  The fraction of this `color` that should be applied to the pixel.
 *  That is, the final pixel color is defined by the equation:
 *  pixel color = alpha * (color) + (1.0 - alpha) * (background color)
 *  This means that a value of 1.0 corresponds to a solid color, whereas
 *  a value of 0.0 corresponds to a completely transparent color.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *alpha;

/** The color value of the solid fill. */
@property(nonatomic, strong, nullable) GTLRSlides_OpaqueColor *color;

@end


/**
 *  The stretched picture fill. The page or page element is filled entirely with
 *  the specified picture. The picture is stretched to fit its container.
 */
@interface GTLRSlides_StretchedPictureFill : GTLRObject

/**
 *  Reading the content_url:
 *  An URL to a picture with a default lifetime of 30 minutes.
 *  This URL is tagged with the account of the requester. Anyone with the URL
 *  effectively accesses the picture as the original requester. Access to the
 *  picture may be lost if the presentation's sharing settings change.
 *  Writing the content_url:
 *  The picture is fetched once at insertion time and a copy is stored for
 *  display inside the presentation. Pictures must be less than 50MB in size,
 *  cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF
 *  format.
 *  The provided URL can be at most 2 kB in length.
 */
@property(nonatomic, copy, nullable) NSString *contentUrl;

/** The original size of the picture fill. This field is read-only. */
@property(nonatomic, strong, nullable) GTLRSlides_Size *size;

@end


/**
 *  A criteria that matches a specific string of text in a shape or table.
 */
@interface GTLRSlides_SubstringMatchCriteria : GTLRObject

/**
 *  Indicates whether the search should respect case:
 *  - `True`: the search is case sensitive.
 *  - `False`: the search is case insensitive.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *matchCase;

/** The text to search for in the shape or table. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A PageElement kind representing a
 *  table.
 */
@interface GTLRSlides_Table : GTLRObject

/**
 *  Number of columns in the table.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columns;

/**
 *  Properties of horizontal cell borders.
 *  A table's horizontal cell borders are represented as a grid. The grid has
 *  one more row than the number of rows in the table and the same number of
 *  columns as the table. For example, if the table is 3 x 3, its horizontal
 *  borders will be represented as a grid with 4 rows and 3 columns.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_TableBorderRow *> *horizontalBorderRows;

/**
 *  Number of rows in the table.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rows;

/** Properties of each column. */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_TableColumnProperties *> *tableColumns;

/**
 *  Properties and contents of each row.
 *  Cells that span multiple rows are contained in only one of these rows and
 *  have a row_span greater
 *  than 1.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_TableRow *> *tableRows;

/**
 *  Properties of vertical cell borders.
 *  A table's vertical cell borders are represented as a grid. The grid has the
 *  same number of rows as the table and one more column than the number of
 *  columns in the table. For example, if the table is 3 x 3, its vertical
 *  borders will be represented as a grid with 3 rows and 4 columns.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_TableBorderRow *> *verticalBorderRows;

@end


/**
 *  The properties of each border cell.
 */
@interface GTLRSlides_TableBorderCell : GTLRObject

/** The location of the border within the border table. */
@property(nonatomic, strong, nullable) GTLRSlides_TableCellLocation *location;

/** The border properties. */
@property(nonatomic, strong, nullable) GTLRSlides_TableBorderProperties *tableBorderProperties;

@end


/**
 *  The fill of the border.
 */
@interface GTLRSlides_TableBorderFill : GTLRObject

/** Solid fill. */
@property(nonatomic, strong, nullable) GTLRSlides_SolidFill *solidFill;

@end


/**
 *  The border styling properties of the
 *  TableBorderCell.
 */
@interface GTLRSlides_TableBorderProperties : GTLRObject

/**
 *  The dash style of the border.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_TableBorderProperties_DashStyle_Dash Dashed line.
 *        Corresponds to ECMA-376 ST_PresetLineDashVal value 'dash'. (Value:
 *        "DASH")
 *    @arg @c kGTLRSlides_TableBorderProperties_DashStyle_DashDot Alternating
 *        dashes and dots. Corresponds to ECMA-376 ST_PresetLineDashVal
 *        value 'dashDot'. (Value: "DASH_DOT")
 *    @arg @c kGTLRSlides_TableBorderProperties_DashStyle_DashStyleUnspecified
 *        Unspecified dash style. (Value: "DASH_STYLE_UNSPECIFIED")
 *    @arg @c kGTLRSlides_TableBorderProperties_DashStyle_Dot Dotted line.
 *        Corresponds to ECMA-376 ST_PresetLineDashVal value 'dot'. (Value:
 *        "DOT")
 *    @arg @c kGTLRSlides_TableBorderProperties_DashStyle_LongDash Line with
 *        large dashes. Corresponds to ECMA-376 ST_PresetLineDashVal
 *        value 'lgDash'. (Value: "LONG_DASH")
 *    @arg @c kGTLRSlides_TableBorderProperties_DashStyle_LongDashDot
 *        Alternating large dashes and dots. Corresponds to ECMA-376
 *        ST_PresetLineDashVal value 'lgDashDot'. (Value: "LONG_DASH_DOT")
 *    @arg @c kGTLRSlides_TableBorderProperties_DashStyle_Solid Solid line.
 *        Corresponds to ECMA-376 ST_PresetLineDashVal value 'solid'.
 *        This is the default dash style. (Value: "SOLID")
 */
@property(nonatomic, copy, nullable) NSString *dashStyle;

/** The fill of the table border. */
@property(nonatomic, strong, nullable) GTLRSlides_TableBorderFill *tableBorderFill;

/** The thickness of the border. */
@property(nonatomic, strong, nullable) GTLRSlides_Dimension *weight;

@end


/**
 *  Contents of each border row in a table.
 */
@interface GTLRSlides_TableBorderRow : GTLRObject

/**
 *  Properties of each border cell. When a border's adjacent table cells are
 *  merged, it is not included in the response.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_TableBorderCell *> *tableBorderCells;

@end


/**
 *  Properties and contents of each table cell.
 */
@interface GTLRSlides_TableCell : GTLRObject

/**
 *  Column span of the cell.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columnSpan;

/** The location of the cell within the table. */
@property(nonatomic, strong, nullable) GTLRSlides_TableCellLocation *location;

/**
 *  Row span of the cell.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowSpan;

/** The properties of the table cell. */
@property(nonatomic, strong, nullable) GTLRSlides_TableCellProperties *tableCellProperties;

/** The text content of the cell. */
@property(nonatomic, strong, nullable) GTLRSlides_TextContent *text;

@end


/**
 *  The table cell background fill.
 */
@interface GTLRSlides_TableCellBackgroundFill : GTLRObject

/**
 *  The background fill property state.
 *  Updating the fill on a table cell will implicitly update this field
 *  to `RENDERED`, unless another value is specified in the same request. To
 *  have no fill on a table cell, set this field to `NOT_RENDERED`. In this
 *  case, any other fill fields set in the same request will be ignored.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_TableCellBackgroundFill_PropertyState_Inherit If a
 *        property's state is INHERIT, then the property state uses the value of
 *        corresponding `property_state` field on the parent shape. Elements
 *        that do
 *        not inherit will never have an INHERIT property state. (Value:
 *        "INHERIT")
 *    @arg @c kGTLRSlides_TableCellBackgroundFill_PropertyState_NotRendered If a
 *        property's state is NOT_RENDERED, then the element does not have the
 *        corresponding property when rendered on a page. However, the field may
 *        still be set so it can be inherited by child shapes. To remove a
 *        property
 *        from a rendered element, set its property_state to NOT_RENDERED.
 *        (Value: "NOT_RENDERED")
 *    @arg @c kGTLRSlides_TableCellBackgroundFill_PropertyState_Rendered If a
 *        property's state is RENDERED, then the element has the corresponding
 *        property when rendered on a page. If the element is a placeholder
 *        shape as
 *        determined by the placeholder
 *        field, and it inherits from a placeholder shape, the corresponding
 *        field
 *        may be unset, meaning that the property value is inherited from a
 *        parent
 *        placeholder. If the element does not inherit, then the field will
 *        contain
 *        the rendered value. This is the default value. (Value: "RENDERED")
 */
@property(nonatomic, copy, nullable) NSString *propertyState;

/** Solid color fill. */
@property(nonatomic, strong, nullable) GTLRSlides_SolidFill *solidFill;

@end


/**
 *  A location of a single table cell within a table.
 */
@interface GTLRSlides_TableCellLocation : GTLRObject

/**
 *  The 0-based column index.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columnIndex;

/**
 *  The 0-based row index.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowIndex;

@end


/**
 *  The properties of the TableCell.
 */
@interface GTLRSlides_TableCellProperties : GTLRObject

/**
 *  The alignment of the content in the table cell. The default alignment
 *  matches the alignment for newly created table cells in the Slides editor.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_TableCellProperties_ContentAlignment_Bottom An
 *        alignment that aligns the content to the bottom of the content
 *        holder. Corresponds to ECMA-376 ST_TextAnchoringType 'b'. (Value:
 *        "BOTTOM")
 *    @arg @c kGTLRSlides_TableCellProperties_ContentAlignment_ContentAlignmentUnspecified
 *        An unspecified content alignment. The content alignment is inherited
 *        from
 *        the parent if it exists. (Value: "CONTENT_ALIGNMENT_UNSPECIFIED")
 *    @arg @c kGTLRSlides_TableCellProperties_ContentAlignment_ContentAlignmentUnsupported
 *        An unsupported content alignment. (Value:
 *        "CONTENT_ALIGNMENT_UNSUPPORTED")
 *    @arg @c kGTLRSlides_TableCellProperties_ContentAlignment_Middle An
 *        alignment that aligns the content to the middle of the content
 *        holder. Corresponds to ECMA-376 ST_TextAnchoringType 'ctr'. (Value:
 *        "MIDDLE")
 *    @arg @c kGTLRSlides_TableCellProperties_ContentAlignment_Top An alignment
 *        that aligns the content to the top of the content holder.
 *        Corresponds to ECMA-376 ST_TextAnchoringType 't'. (Value: "TOP")
 */
@property(nonatomic, copy, nullable) NSString *contentAlignment;

/**
 *  The background fill of the table cell. The default fill matches the fill
 *  for newly created table cells in the Slides editor.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TableCellBackgroundFill *tableCellBackgroundFill;

@end


/**
 *  Properties of each column in a table.
 */
@interface GTLRSlides_TableColumnProperties : GTLRObject

/** Width of a column. */
@property(nonatomic, strong, nullable) GTLRSlides_Dimension *columnWidth;

@end


/**
 *  A table range represents a reference to a subset of a table.
 *  It's important to note that the cells specified by a table range do not
 *  necessarily form a rectangle. For example, let's say we have a 3 x 3 table
 *  where all the cells of the last row are merged together. The table looks
 *  like this:
 *  [ ]
 *  A table range with location = (0, 0), row span = 3 and column span = 2
 *  specifies the following cells:
 *  x x
 *  [ x x x ]
 */
@interface GTLRSlides_TableRange : GTLRObject

/**
 *  The column span of the table range.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columnSpan;

/** The starting location of the table range. */
@property(nonatomic, strong, nullable) GTLRSlides_TableCellLocation *location;

/**
 *  The row span of the table range.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowSpan;

@end


/**
 *  Properties and contents of each row in a table.
 */
@interface GTLRSlides_TableRow : GTLRObject

/** Height of a row. */
@property(nonatomic, strong, nullable) GTLRSlides_Dimension *rowHeight;

/**
 *  Properties and contents of each cell.
 *  Cells that span multiple columns are represented only once with a
 *  column_span greater
 *  than 1. As a result, the length of this collection does not always match
 *  the number of columns of the entire table.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_TableCell *> *tableCells;

/** Properties of the row. */
@property(nonatomic, strong, nullable) GTLRSlides_TableRowProperties *tableRowProperties;

@end


/**
 *  Properties of each row in a table.
 */
@interface GTLRSlides_TableRowProperties : GTLRObject

/**
 *  Minimum height of the row. The row will be rendered in the Slides editor at
 *  a height equal to or greater than this value in order to show all the text
 *  in the row's cell(s).
 */
@property(nonatomic, strong, nullable) GTLRSlides_Dimension *minRowHeight;

@end


/**
 *  The general text content. The text must reside in a compatible shape (e.g.
 *  text box or rectangle) or a table cell in a page.
 */
@interface GTLRSlides_TextContent : GTLRObject

/** The bulleted lists contained in this text, keyed by list ID. */
@property(nonatomic, strong, nullable) GTLRSlides_TextContent_Lists *lists;

/**
 *  The text contents broken down into its component parts, including styling
 *  information. This property is read-only.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSlides_TextElement *> *textElements;

@end


/**
 *  The bulleted lists contained in this text, keyed by list ID.
 *
 *  @note This class is documented as having more properties of GTLRSlides_List.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRSlides_TextContent_Lists : GTLRObject
@end


/**
 *  A TextElement describes the content of a range of indices in the text
 *  content
 *  of a Shape or TableCell.
 */
@interface GTLRSlides_TextElement : GTLRObject

/**
 *  A TextElement representing a spot in the text that is dynamically
 *  replaced with content that can change over time.
 */
@property(nonatomic, strong, nullable) GTLRSlides_AutoText *autoText;

/**
 *  The zero-based end index of this text element, exclusive, in Unicode code
 *  units.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endIndex;

/**
 *  A marker representing the beginning of a new paragraph.
 *  The `start_index` and `end_index` of this TextElement represent the
 *  range of the paragraph. Other TextElements with an index range contained
 *  inside this paragraph's range are considered to be part of this
 *  paragraph. The range of indices of two separate paragraphs will never
 *  overlap.
 */
@property(nonatomic, strong, nullable) GTLRSlides_ParagraphMarker *paragraphMarker;

/**
 *  The zero-based start index of this text element, in Unicode code units.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startIndex;

/**
 *  A TextElement representing a run of text where all of the characters
 *  in the run have the same TextStyle.
 *  The `start_index` and `end_index` of TextRuns will always be fully
 *  contained in the index range of a single `paragraph_marker` TextElement.
 *  In other words, a TextRun will never span multiple paragraphs.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TextRun *textRun;

@end


/**
 *  A TextElement kind that represents a run of text that all has the same
 *  styling.
 */
@interface GTLRSlides_TextRun : GTLRObject

/** The text of this run. */
@property(nonatomic, copy, nullable) NSString *content;

/** The styling applied to this run. */
@property(nonatomic, strong, nullable) GTLRSlides_TextStyle *style;

@end


/**
 *  Represents the styling that can be applied to a TextRun.
 *  If this text is contained in a shape with a parent placeholder, then these
 *  text styles may be
 *  inherited from the parent. Which text styles are inherited depend on the
 *  nesting level of lists:
 *  * A text run in a paragraph that is not in a list will inherit its text
 *  style
 *  from the the newline character in the paragraph at the 0 nesting level of
 *  the list inside the parent placeholder.
 *  * A text run in a paragraph that is in a list will inherit its text style
 *  from the newline character in the paragraph at its corresponding nesting
 *  level of the list inside the parent placeholder.
 *  Inherited text styles are represented as unset fields in this message. If
 *  text is contained in a shape without a parent placeholder, unsetting these
 *  fields will revert the style to a value matching the defaults in the Slides
 *  editor.
 */
@interface GTLRSlides_TextStyle : GTLRObject

/**
 *  The background color of the text. If set, the color is either opaque or
 *  transparent, depending on if the `opaque_color` field in it is set.
 */
@property(nonatomic, strong, nullable) GTLRSlides_OptionalColor *backgroundColor;

/**
 *  The text's vertical offset from its normal position.
 *  Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically
 *  rendered in a smaller font size, computed based on the `font_size` field.
 *  The `font_size` itself is not affected by changes in this field.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_TextStyle_BaselineOffset_BaselineOffsetUnspecified The
 *        text's baseline offset is inherited from the parent. (Value:
 *        "BASELINE_OFFSET_UNSPECIFIED")
 *    @arg @c kGTLRSlides_TextStyle_BaselineOffset_None The text is not
 *        vertically offset. (Value: "NONE")
 *    @arg @c kGTLRSlides_TextStyle_BaselineOffset_Subscript The text is
 *        vertically offset downwards (subscript). (Value: "SUBSCRIPT")
 *    @arg @c kGTLRSlides_TextStyle_BaselineOffset_Superscript The text is
 *        vertically offset upwards (superscript). (Value: "SUPERSCRIPT")
 */
@property(nonatomic, copy, nullable) NSString *baselineOffset;

/**
 *  Whether or not the text is rendered as bold.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bold;

/**
 *  The font family of the text.
 *  The font family can be any font from the Font menu in Slides or from
 *  [Google Fonts] (https://fonts.google.com/). If the font name is
 *  unrecognized, the text is rendered in `Arial`.
 *  Some fonts can affect the weight of the text. If an update request
 *  specifies values for both `font_family` and `bold`, the explicitly-set
 *  `bold` value is used.
 */
@property(nonatomic, copy, nullable) NSString *fontFamily;

/**
 *  The size of the text's font. When read, the `font_size` will specified in
 *  points.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Dimension *fontSize;

/**
 *  The color of the text itself. If set, the color is either opaque or
 *  transparent, depending on if the `opaque_color` field in it is set.
 */
@property(nonatomic, strong, nullable) GTLRSlides_OptionalColor *foregroundColor;

/**
 *  Whether or not the text is italicized.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *italic;

/**
 *  The hyperlink destination of the text. If unset, there is no link. Links
 *  are not inherited from parent text.
 *  Changing the link in an update request causes some other changes to the
 *  text style of the range:
 *  * When setting a link, the text foreground color will be set to
 *  ThemeColorType.HYPERLINK and the text will
 *  be underlined. If these fields are modified in the same
 *  request, those values will be used instead of the link defaults.
 *  * Setting a link on a text range that overlaps with an existing link will
 *  also update the existing link to point to the new URL.
 *  * Links are not settable on newline characters. As a result, setting a link
 *  on a text range that crosses a paragraph boundary, such as `"ABC\\n123"`,
 *  will separate the newline character(s) into their own text runs. The
 *  link will be applied separately to the runs before and after the newline.
 *  * Removing a link will update the text style of the range to match the
 *  style of the preceding text (or the default text styles if the preceding
 *  text is another link) unless different styles are being set in the same
 *  request.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Link *link;

/**
 *  Whether or not the text is in small capital letters.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *smallCaps;

/**
 *  Whether or not the text is struck through.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *strikethrough;

/**
 *  Whether or not the text is underlined.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *underline;

/**
 *  The font family and rendered weight of the text.
 *  This field is an extension of `font_family` meant to support explicit font
 *  weights without breaking backwards compatibility. As such, when reading the
 *  style of a range of text, the value of `weighted_font_family#font_family`
 *  will always be equal to that of `font_family`. However, when writing, if
 *  both fields are included in the field mask (either explicitly or through
 *  the wildcard `"*"`), their values are reconciled as follows:
 *  * If `font_family` is set and `weighted_font_family` is not, the value of
 *  `font_family` is applied with weight `400` ("normal").
 *  * If both fields are set, the value of `font_family` must match that of
 *  `weighted_font_family#font_family`. If so, the font family and weight of
 *  `weighted_font_family` is applied. Otherwise, a 400 bad request error is
 *  returned.
 *  * If `weighted_font_family` is set and `font_family` is not, the font
 *  family and weight of `weighted_font_family` is applied.
 *  * If neither field is set, the font family and weight of the text inherit
 *  from the parent. Note that these properties cannot inherit separately
 *  from each other.
 *  If an update request specifies values for both `weighted_font_family` and
 *  `bold`, the `weighted_font_family` is applied first, then `bold`.
 *  If `weighted_font_family#weight` is not set, it defaults to `400`.
 *  If `weighted_font_family` is set, then `weighted_font_family#font_family`
 *  must also be set with a non-empty value. Otherwise, a 400 bad request error
 *  is returned.
 */
@property(nonatomic, strong, nullable) GTLRSlides_WeightedFontFamily *weightedFontFamily;

@end


/**
 *  A pair mapping a theme color type to the concrete color it represents.
 */
@interface GTLRSlides_ThemeColorPair : GTLRObject

/** The concrete color corresponding to the theme color type above. */
@property(nonatomic, strong, nullable) GTLRSlides_RgbColor *color;

/**
 *  The type of the theme color.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_Accent1 Represents the first
 *        accent color. (Value: "ACCENT1")
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_Accent2 Represents the second
 *        accent color. (Value: "ACCENT2")
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_Accent3 Represents the third
 *        accent color. (Value: "ACCENT3")
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_Accent4 Represents the fourth
 *        accent color. (Value: "ACCENT4")
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_Accent5 Represents the fifth
 *        accent color. (Value: "ACCENT5")
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_Accent6 Represents the sixth
 *        accent color. (Value: "ACCENT6")
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_Background1 Represents the first
 *        background color. (Value: "BACKGROUND1")
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_Background2 Represents the second
 *        background color. (Value: "BACKGROUND2")
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_Dark1 Represents the first dark
 *        color. (Value: "DARK1")
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_Dark2 Represents the second dark
 *        color. (Value: "DARK2")
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_FollowedHyperlink Represents the
 *        color to use for visited hyperlinks. (Value: "FOLLOWED_HYPERLINK")
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_Hyperlink Represents the color to
 *        use for hyperlinks. (Value: "HYPERLINK")
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_Light1 Represents the first light
 *        color. (Value: "LIGHT1")
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_Light2 Represents the second light
 *        color. (Value: "LIGHT2")
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_Text1 Represents the first text
 *        color. (Value: "TEXT1")
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_Text2 Represents the second text
 *        color. (Value: "TEXT2")
 *    @arg @c kGTLRSlides_ThemeColorPair_Type_ThemeColorTypeUnspecified
 *        Unspecified theme color. This value should not be used. (Value:
 *        "THEME_COLOR_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The thumbnail of a page.
 */
@interface GTLRSlides_Thumbnail : GTLRObject

/**
 *  The content URL of the thumbnail image.
 *  The URL to the image has a default lifetime of 30 minutes.
 *  This URL is tagged with the account of the requester. Anyone with the URL
 *  effectively accesses the image as the original requester. Access to the
 *  image may be lost if the presentation's sharing settings change.
 *  The mime type of the thumbnail image is the same as specified in the
 *  `GetPageThumbnailRequest`.
 */
@property(nonatomic, copy, nullable) NSString *contentUrl;

/**
 *  The positive height in pixels of the thumbnail image.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *height;

/**
 *  The positive width in pixels of the thumbnail image.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *width;

@end


/**
 *  Ungroups objects, such as groups.
 */
@interface GTLRSlides_UngroupObjectsRequest : GTLRObject

/**
 *  The object IDs of the objects to ungroup.
 *  Only groups that are not inside other
 *  groups can be ungrouped. All the groups
 *  should be on the same page. The group itself is deleted. The visual sizes
 *  and positions of all the children are preserved.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *objectIds;

@end


/**
 *  Unmerges cells in a Table.
 */
@interface GTLRSlides_UnmergeTableCellsRequest : GTLRObject

/** The object ID of the table. */
@property(nonatomic, copy, nullable) NSString *objectId;

/**
 *  The table range specifying which cells of the table to unmerge.
 *  All merged cells in this range will be unmerged, and cells that are already
 *  unmerged will not be affected. If the range has no merged cells, the
 *  request will do nothing. If there is text in any of the merged cells, the
 *  text will remain in the upper-left ("head") cell of the resulting block of
 *  unmerged cells.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TableRange *tableRange;

@end


/**
 *  Update the properties of an Image.
 */
@interface GTLRSlides_UpdateImagePropertiesRequest : GTLRObject

/**
 *  The fields that should be updated.
 *  At least one field must be specified. The root `imageProperties` is
 *  implied and should not be specified. A single `"*"` can be used as
 *  short-hand for listing every field.
 *  For example to update the image outline color, set `fields` to
 *  `"outline.outlineFill.solidFill.color"`.
 *  To reset a property to its default value, include its field name in the
 *  field mask but leave the field itself unset.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/** The image properties to update. */
@property(nonatomic, strong, nullable) GTLRSlides_ImageProperties *imageProperties;

/** The object ID of the image the updates are applied to. */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  Updates the category of a line.
 */
@interface GTLRSlides_UpdateLineCategoryRequest : GTLRObject

/**
 *  The line category to update to.
 *  The exact line type is determined based
 *  on the category to update to and how it's routed to connect to other page
 *  elements.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_UpdateLineCategoryRequest_LineCategory_Bent Bent
 *        connectors, including bent connector 2 to 5. (Value: "BENT")
 *    @arg @c kGTLRSlides_UpdateLineCategoryRequest_LineCategory_Curved Curved
 *        connectors, including curved connector 2 to 5. (Value: "CURVED")
 *    @arg @c kGTLRSlides_UpdateLineCategoryRequest_LineCategory_LineCategoryUnspecified
 *        Unspecified line category. (Value: "LINE_CATEGORY_UNSPECIFIED")
 *    @arg @c kGTLRSlides_UpdateLineCategoryRequest_LineCategory_Straight
 *        Straight connectors, including straight connector 1. (Value:
 *        "STRAIGHT")
 */
@property(nonatomic, copy, nullable) NSString *lineCategory;

/**
 *  The object ID of the line the update is applied to.
 *  Only a line with a category
 *  indicating it is a "connector" can be updated.
 *  The line may be rerouted after updating its category.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  Updates the properties of a Line.
 */
@interface GTLRSlides_UpdateLinePropertiesRequest : GTLRObject

/**
 *  The fields that should be updated.
 *  At least one field must be specified. The root `lineProperties` is
 *  implied and should not be specified. A single `"*"` can be used as
 *  short-hand for listing every field.
 *  For example to update the line solid fill color, set `fields` to
 *  `"lineFill.solidFill.color"`.
 *  To reset a property to its default value, include its field name in the
 *  field mask but leave the field itself unset.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/** The line properties to update. */
@property(nonatomic, strong, nullable) GTLRSlides_LineProperties *lineProperties;

/** The object ID of the line the update is applied to. */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  Updates the alt text title and/or description of a
 *  page element.
 */
@interface GTLRSlides_UpdatePageElementAltTextRequest : GTLRObject

/**
 *  The updated alt text description of the page element. If unset the existing
 *  value will be maintained. The description is exposed to screen readers
 *  and other accessibility interfaces. Only use human readable values related
 *  to the content of the page element.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The object ID of the page element the updates are applied to. */
@property(nonatomic, copy, nullable) NSString *objectId;

/**
 *  The updated alt text title of the page element. If unset the
 *  existing value will be maintained. The title is exposed to screen readers
 *  and other accessibility interfaces. Only use human readable values related
 *  to the content of the page element.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Updates the Z-order of page elements. Z-order is an ordering of the elements
 *  on the page from back to front. The page element in the front may cover the
 *  elements that are behind it.
 */
@interface GTLRSlides_UpdatePageElementsZOrderRequest : GTLRObject

/**
 *  The Z-order operation to apply on the page elements.
 *  When applying the operation on multiple page elements, the relative
 *  Z-orders within these page elements before the operation is maintained.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_UpdatePageElementsZOrderRequest_Operation_BringForward
 *        Brings the page elements forward on the page by one element relative
 *        to the
 *        forwardmost one in the specified page elements. (Value:
 *        "BRING_FORWARD")
 *    @arg @c kGTLRSlides_UpdatePageElementsZOrderRequest_Operation_BringToFront
 *        Brings the page elements to the front of the page. (Value:
 *        "BRING_TO_FRONT")
 *    @arg @c kGTLRSlides_UpdatePageElementsZOrderRequest_Operation_SendBackward
 *        Sends the page elements backward on the page by one element relative
 *        to the
 *        furthest behind one in the specified page elements. (Value:
 *        "SEND_BACKWARD")
 *    @arg @c kGTLRSlides_UpdatePageElementsZOrderRequest_Operation_SendToBack
 *        Sends the page elements to the back of the page. (Value:
 *        "SEND_TO_BACK")
 *    @arg @c kGTLRSlides_UpdatePageElementsZOrderRequest_Operation_ZOrderOperationUnspecified
 *        Unspecified operation. (Value: "Z_ORDER_OPERATION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *operation;

/**
 *  The object IDs of the page elements to update.
 *  All the page elements must be on the same page and must not be grouped.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *pageElementObjectIds;

@end


/**
 *  Updates the transform of a page element.
 *  Updating the transform of a group will change the absolute transform of the
 *  page elements in that group, which can change their visual appearance. See
 *  the documentation for PageElement.transform for more details.
 */
@interface GTLRSlides_UpdatePageElementTransformRequest : GTLRObject

/**
 *  The apply mode of the transform update.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_UpdatePageElementTransformRequest_ApplyMode_Absolute
 *        Replaces the existing AffineTransform matrix with the new one. (Value:
 *        "ABSOLUTE")
 *    @arg @c kGTLRSlides_UpdatePageElementTransformRequest_ApplyMode_ApplyModeUnspecified
 *        Unspecified mode. (Value: "APPLY_MODE_UNSPECIFIED")
 *    @arg @c kGTLRSlides_UpdatePageElementTransformRequest_ApplyMode_Relative
 *        Applies the new AffineTransform matrix to the existing one, and
 *        replaces the existing one with the resulting concatenation. (Value:
 *        "RELATIVE")
 */
@property(nonatomic, copy, nullable) NSString *applyMode;

/** The object ID of the page element to update. */
@property(nonatomic, copy, nullable) NSString *objectId;

/** The input transform matrix used to update the page element. */
@property(nonatomic, strong, nullable) GTLRSlides_AffineTransform *transform;

@end


/**
 *  Updates the properties of a Page.
 */
@interface GTLRSlides_UpdatePagePropertiesRequest : GTLRObject

/**
 *  The fields that should be updated.
 *  At least one field must be specified. The root `pageProperties` is
 *  implied and should not be specified. A single `"*"` can be used as
 *  short-hand for listing every field.
 *  For example to update the page background solid fill color, set `fields`
 *  to `"pageBackgroundFill.solidFill.color"`.
 *  To reset a property to its default value, include its field name in the
 *  field mask but leave the field itself unset.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/** The object ID of the page the update is applied to. */
@property(nonatomic, copy, nullable) NSString *objectId;

/** The page properties to update. */
@property(nonatomic, strong, nullable) GTLRSlides_PageProperties *pageProperties;

@end


/**
 *  Updates the styling for all of the paragraphs within a Shape or Table that
 *  overlap with the given text index range.
 */
@interface GTLRSlides_UpdateParagraphStyleRequest : GTLRObject

/**
 *  The location of the cell in the table containing the paragraph(s) to
 *  style. If `object_id` refers to a table, `cell_location` must have a value.
 *  Otherwise, it must not.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TableCellLocation *cellLocation;

/**
 *  The fields that should be updated.
 *  At least one field must be specified. The root `style` is implied and
 *  should not be specified. A single `"*"` can be used as short-hand for
 *  listing every field.
 *  For example, to update the paragraph alignment, set `fields` to
 *  `"alignment"`.
 *  To reset a property to its default value, include its field name in the
 *  field mask but leave the field itself unset.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/** The object ID of the shape or table with the text to be styled. */
@property(nonatomic, copy, nullable) NSString *objectId;

/** The paragraph's style. */
@property(nonatomic, strong, nullable) GTLRSlides_ParagraphStyle *style;

/** The range of text containing the paragraph(s) to style. */
@property(nonatomic, strong, nullable) GTLRSlides_Range *textRange;

@end


/**
 *  Update the properties of a Shape.
 */
@interface GTLRSlides_UpdateShapePropertiesRequest : GTLRObject

/**
 *  The fields that should be updated.
 *  At least one field must be specified. The root `shapeProperties` is
 *  implied and should not be specified. A single `"*"` can be used as
 *  short-hand for listing every field.
 *  For example to update the shape background solid fill color, set `fields`
 *  to `"shapeBackgroundFill.solidFill.color"`.
 *  To reset a property to its default value, include its field name in the
 *  field mask but leave the field itself unset.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/** The object ID of the shape the updates are applied to. */
@property(nonatomic, copy, nullable) NSString *objectId;

/** The shape properties to update. */
@property(nonatomic, strong, nullable) GTLRSlides_ShapeProperties *shapeProperties;

@end


/**
 *  Updates the position of slides in the presentation.
 */
@interface GTLRSlides_UpdateSlidesPositionRequest : GTLRObject

/**
 *  The index where the slides should be inserted, based on the slide
 *  arrangement before the move takes place. Must be between zero and the
 *  number of slides in the presentation, inclusive.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *insertionIndex;

/**
 *  The IDs of the slides in the presentation that should be moved.
 *  The slides in this list must be in existing presentation order, without
 *  duplicates.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *slideObjectIds;

@end


/**
 *  Updates the properties of the table borders in a Table.
 */
@interface GTLRSlides_UpdateTableBorderPropertiesRequest : GTLRObject

/**
 *  The border position in the table range the updates should apply to. If a
 *  border position is not specified, the updates will apply to all borders in
 *  the table range.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_All
 *        All borders in the range. (Value: "ALL")
 *    @arg @c kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_Bottom
 *        Borders at the bottom of the range. (Value: "BOTTOM")
 *    @arg @c kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_Inner
 *        Borders on the inside of the range. (Value: "INNER")
 *    @arg @c kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_InnerHorizontal
 *        Horizontal borders on the inside of the range. (Value:
 *        "INNER_HORIZONTAL")
 *    @arg @c kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_InnerVertical
 *        Vertical borders on the inside of the range. (Value: "INNER_VERTICAL")
 *    @arg @c kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_Left
 *        Borders at the left of the range. (Value: "LEFT")
 *    @arg @c kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_Outer
 *        Borders along the outside of the range. (Value: "OUTER")
 *    @arg @c kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_Right
 *        Borders at the right of the range. (Value: "RIGHT")
 *    @arg @c kGTLRSlides_UpdateTableBorderPropertiesRequest_BorderPosition_Top
 *        Borders at the top of the range. (Value: "TOP")
 */
@property(nonatomic, copy, nullable) NSString *borderPosition;

/**
 *  The fields that should be updated.
 *  At least one field must be specified. The root `tableBorderProperties` is
 *  implied and should not be specified. A single `"*"` can be used as
 *  short-hand for listing every field.
 *  For example to update the table border solid fill color, set
 *  `fields` to `"tableBorderFill.solidFill.color"`.
 *  To reset a property to its default value, include its field name in the
 *  field mask but leave the field itself unset.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/** The object ID of the table. */
@property(nonatomic, copy, nullable) NSString *objectId;

/** The table border properties to update. */
@property(nonatomic, strong, nullable) GTLRSlides_TableBorderProperties *tableBorderProperties;

/**
 *  The table range representing the subset of the table to which the updates
 *  are applied. If a table range is not specified, the updates will apply to
 *  the entire table.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TableRange *tableRange;

@end


/**
 *  Update the properties of a TableCell.
 */
@interface GTLRSlides_UpdateTableCellPropertiesRequest : GTLRObject

/**
 *  The fields that should be updated.
 *  At least one field must be specified. The root `tableCellProperties` is
 *  implied and should not be specified. A single `"*"` can be used as
 *  short-hand for listing every field.
 *  For example to update the table cell background solid fill color, set
 *  `fields` to `"tableCellBackgroundFill.solidFill.color"`.
 *  To reset a property to its default value, include its field name in the
 *  field mask but leave the field itself unset.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/** The object ID of the table. */
@property(nonatomic, copy, nullable) NSString *objectId;

/** The table cell properties to update. */
@property(nonatomic, strong, nullable) GTLRSlides_TableCellProperties *tableCellProperties;

/**
 *  The table range representing the subset of the table to which the updates
 *  are applied. If a table range is not specified, the updates will apply to
 *  the entire table.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TableRange *tableRange;

@end


/**
 *  Updates the properties of a Table column.
 */
@interface GTLRSlides_UpdateTableColumnPropertiesRequest : GTLRObject

/**
 *  The list of zero-based indices specifying which columns to update. If no
 *  indices are provided, all columns in the table will be updated.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *columnIndices;

/**
 *  The fields that should be updated.
 *  At least one field must be specified. The root `tableColumnProperties` is
 *  implied and should not be specified. A single `"*"` can be used as
 *  short-hand for listing every field.
 *  For example to update the column width, set `fields` to `"column_width"`.
 *  If '"column_width"' is included in the field mask but the property is left
 *  unset, the column width will default to 406,400 EMU (32 points).
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/** The object ID of the table. */
@property(nonatomic, copy, nullable) NSString *objectId;

/**
 *  The table column properties to update.
 *  If the value of `table_column_properties#column_width` in the request is
 *  less than 406,400 EMU (32 points), a 400 bad request error is returned.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TableColumnProperties *tableColumnProperties;

@end


/**
 *  Updates the properties of a Table row.
 */
@interface GTLRSlides_UpdateTableRowPropertiesRequest : GTLRObject

/**
 *  The fields that should be updated.
 *  At least one field must be specified. The root `tableRowProperties` is
 *  implied and should not be specified. A single `"*"` can be used as
 *  short-hand for listing every field.
 *  For example to update the minimum row height, set `fields` to
 *  `"min_row_height"`.
 *  If '"min_row_height"' is included in the field mask but the property is
 *  left unset, the minimum row height will default to 0.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/** The object ID of the table. */
@property(nonatomic, copy, nullable) NSString *objectId;

/**
 *  The list of zero-based indices specifying which rows to update. If no
 *  indices are provided, all rows in the table will be updated.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *rowIndices;

/** The table row properties to update. */
@property(nonatomic, strong, nullable) GTLRSlides_TableRowProperties *tableRowProperties;

@end


/**
 *  Update the styling of text in a Shape or
 *  Table.
 */
@interface GTLRSlides_UpdateTextStyleRequest : GTLRObject

/**
 *  The location of the cell in the table containing the text to style. If
 *  `object_id` refers to a table, `cell_location` must have a value.
 *  Otherwise, it must not.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TableCellLocation *cellLocation;

/**
 *  The fields that should be updated.
 *  At least one field must be specified. The root `style` is implied and
 *  should not be specified. A single `"*"` can be used as short-hand for
 *  listing every field.
 *  For example, to update the text style to bold, set `fields` to `"bold"`.
 *  To reset a property to its default value, include its field name in the
 *  field mask but leave the field itself unset.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/** The object ID of the shape or table with the text to be styled. */
@property(nonatomic, copy, nullable) NSString *objectId;

/**
 *  The style(s) to set on the text.
 *  If the value for a particular style matches that of the parent, that style
 *  will be set to inherit.
 *  Certain text style changes may cause other changes meant to mirror the
 *  behavior of the Slides editor. See the documentation of
 *  TextStyle for more information.
 */
@property(nonatomic, strong, nullable) GTLRSlides_TextStyle *style;

/**
 *  The range of text to style.
 *  The range may be extended to include adjacent newlines.
 *  If the range fully contains a paragraph belonging to a list, the
 *  paragraph's bullet is also updated with the matching text style.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Range *textRange;

@end


/**
 *  Update the properties of a Video.
 */
@interface GTLRSlides_UpdateVideoPropertiesRequest : GTLRObject

/**
 *  The fields that should be updated.
 *  At least one field must be specified. The root `videoProperties` is
 *  implied and should not be specified. A single `"*"` can be used as
 *  short-hand for listing every field.
 *  For example to update the video outline color, set `fields` to
 *  `"outline.outlineFill.solidFill.color"`.
 *  To reset a property to its default value, include its field name in the
 *  field mask but leave the field itself unset.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/** The object ID of the video the updates are applied to. */
@property(nonatomic, copy, nullable) NSString *objectId;

/** The video properties to update. */
@property(nonatomic, strong, nullable) GTLRSlides_VideoProperties *videoProperties;

@end


/**
 *  A PageElement kind representing a
 *  video.
 */
@interface GTLRSlides_Video : GTLRObject

/**
 *  The video source's unique identifier for this video.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The video source.
 *
 *  Likely values:
 *    @arg @c kGTLRSlides_Video_Source_Drive The video source is Google Drive.
 *        (Value: "DRIVE")
 *    @arg @c kGTLRSlides_Video_Source_SourceUnspecified The video source is
 *        unspecified. (Value: "SOURCE_UNSPECIFIED")
 *    @arg @c kGTLRSlides_Video_Source_Youtube The video source is YouTube.
 *        (Value: "YOUTUBE")
 */
@property(nonatomic, copy, nullable) NSString *source;

/**
 *  An URL to a video. The URL is valid as long as the source video exists and
 *  sharing settings do not change.
 */
@property(nonatomic, copy, nullable) NSString *url;

/** The properties of the video. */
@property(nonatomic, strong, nullable) GTLRSlides_VideoProperties *videoProperties;

@end


/**
 *  The properties of the Video.
 */
@interface GTLRSlides_VideoProperties : GTLRObject

/**
 *  Whether to enable video autoplay when the page is displayed in present
 *  mode. Defaults to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoPlay;

/**
 *  The time at which to end playback, measured in seconds from the beginning
 *  of the video.
 *  If set, the end time should be after the start time.
 *  If not set or if you set this to a value that exceeds the video's length,
 *  the video will be played until its end.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  Whether to mute the audio during video playback. Defaults to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *mute;

/**
 *  The outline of the video. The default outline matches the defaults for new
 *  videos created in the Slides editor.
 */
@property(nonatomic, strong, nullable) GTLRSlides_Outline *outline;

/**
 *  The time at which to start playback, measured in seconds from the beginning
 *  of the video.
 *  If set, the start time should be before the end time.
 *  If you set this to a value that exceeds the video's length in seconds, the
 *  video will be played from the last second.
 *  If not set, the video will be played from the beginning.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  Represents a font family and weight used to style a TextRun.
 */
@interface GTLRSlides_WeightedFontFamily : GTLRObject

/**
 *  The font family of the text.
 *  The font family can be any font from the Font menu in Slides or from
 *  [Google Fonts] (https://fonts.google.com/). If the font name is
 *  unrecognized, the text is rendered in `Arial`.
 */
@property(nonatomic, copy, nullable) NSString *fontFamily;

/**
 *  The rendered weight of the text. This field can have any value that is a
 *  multiple of `100` between `100` and `900`, inclusive. This range
 *  corresponds to the numerical values described in the CSS 2.1
 *  Specification, [section
 *  15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness),
 *  with non-numerical values disallowed. Weights greater than or equal to
 *  `700` are considered bold, and weights less than `700`are not bold. The
 *  default value is `400` ("normal").
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *weight;

@end


/**
 *  A PageElement kind representing
 *  word art.
 */
@interface GTLRSlides_WordArt : GTLRObject

/** The text rendered as word art. */
@property(nonatomic, copy, nullable) NSString *renderedText;

@end


/**
 *  Provides control over how write requests are executed.
 */
@interface GTLRSlides_WriteControl : GTLRObject

/**
 *  The revision ID of the presentation required for the write request. If
 *  specified and the `required_revision_id` doesn't exactly match the
 *  presentation's current `revision_id`, the request will not be processed and
 *  will return a 400 bad request error.
 */
@property(nonatomic, copy, nullable) NSString *requiredRevisionId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
