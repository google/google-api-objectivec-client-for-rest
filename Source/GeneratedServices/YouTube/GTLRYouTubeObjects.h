// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   YouTube Data API (youtube/v3)
// Description:
//   Supports core YouTube features, such as uploading videos, creating and
//   managing playlists, searching for content, and much more.
// Documentation:
//   https://developers.google.com/youtube/v3

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRYouTube_AccessPolicy;
@class GTLRYouTube_Activity;
@class GTLRYouTube_ActivityContentDetails;
@class GTLRYouTube_ActivityContentDetailsBulletin;
@class GTLRYouTube_ActivityContentDetailsChannelItem;
@class GTLRYouTube_ActivityContentDetailsComment;
@class GTLRYouTube_ActivityContentDetailsFavorite;
@class GTLRYouTube_ActivityContentDetailsLike;
@class GTLRYouTube_ActivityContentDetailsPlaylistItem;
@class GTLRYouTube_ActivityContentDetailsPromotedItem;
@class GTLRYouTube_ActivityContentDetailsRecommendation;
@class GTLRYouTube_ActivityContentDetailsSocial;
@class GTLRYouTube_ActivityContentDetailsSubscription;
@class GTLRYouTube_ActivityContentDetailsUpload;
@class GTLRYouTube_ActivitySnippet;
@class GTLRYouTube_Caption;
@class GTLRYouTube_CaptionSnippet;
@class GTLRYouTube_CdnSettings;
@class GTLRYouTube_Channel;
@class GTLRYouTube_Channel_Localizations;
@class GTLRYouTube_ChannelAuditDetails;
@class GTLRYouTube_ChannelBrandingSettings;
@class GTLRYouTube_ChannelContentDetails;
@class GTLRYouTube_ChannelContentDetails_RelatedPlaylists;
@class GTLRYouTube_ChannelContentOwnerDetails;
@class GTLRYouTube_ChannelConversionPing;
@class GTLRYouTube_ChannelConversionPings;
@class GTLRYouTube_ChannelLocalization;
@class GTLRYouTube_ChannelProfileDetails;
@class GTLRYouTube_ChannelSection;
@class GTLRYouTube_ChannelSection_Localizations;
@class GTLRYouTube_ChannelSectionContentDetails;
@class GTLRYouTube_ChannelSectionLocalization;
@class GTLRYouTube_ChannelSectionSnippet;
@class GTLRYouTube_ChannelSectionTargeting;
@class GTLRYouTube_ChannelSettings;
@class GTLRYouTube_ChannelSnippet;
@class GTLRYouTube_ChannelStatistics;
@class GTLRYouTube_ChannelStatus;
@class GTLRYouTube_ChannelTopicDetails;
@class GTLRYouTube_Comment;
@class GTLRYouTube_CommentSnippet;
@class GTLRYouTube_CommentThread;
@class GTLRYouTube_CommentThreadReplies;
@class GTLRYouTube_CommentThreadSnippet;
@class GTLRYouTube_ContentRating;
@class GTLRYouTube_FanFundingEvent;
@class GTLRYouTube_FanFundingEventSnippet;
@class GTLRYouTube_GeoPoint;
@class GTLRYouTube_GuideCategory;
@class GTLRYouTube_GuideCategorySnippet;
@class GTLRYouTube_I18nLanguage;
@class GTLRYouTube_I18nLanguageSnippet;
@class GTLRYouTube_I18nRegion;
@class GTLRYouTube_I18nRegionSnippet;
@class GTLRYouTube_ImageSettings;
@class GTLRYouTube_IngestionInfo;
@class GTLRYouTube_InvideoPosition;
@class GTLRYouTube_InvideoPromotion;
@class GTLRYouTube_InvideoTiming;
@class GTLRYouTube_LanguageTag;
@class GTLRYouTube_LiveBroadcast;
@class GTLRYouTube_LiveBroadcastContentDetails;
@class GTLRYouTube_LiveBroadcastSnippet;
@class GTLRYouTube_LiveBroadcastStatistics;
@class GTLRYouTube_LiveBroadcastStatus;
@class GTLRYouTube_LiveChatBanSnippet;
@class GTLRYouTube_LiveChatFanFundingEventDetails;
@class GTLRYouTube_LiveChatMessage;
@class GTLRYouTube_LiveChatMessageAuthorDetails;
@class GTLRYouTube_LiveChatMessageDeletedDetails;
@class GTLRYouTube_LiveChatMessageRetractedDetails;
@class GTLRYouTube_LiveChatMessageSnippet;
@class GTLRYouTube_LiveChatModerator;
@class GTLRYouTube_LiveChatModeratorSnippet;
@class GTLRYouTube_LiveChatPollClosedDetails;
@class GTLRYouTube_LiveChatPollEditedDetails;
@class GTLRYouTube_LiveChatPollItem;
@class GTLRYouTube_LiveChatPollOpenedDetails;
@class GTLRYouTube_LiveChatPollVotedDetails;
@class GTLRYouTube_LiveChatSuperChatDetails;
@class GTLRYouTube_LiveChatTextMessageDetails;
@class GTLRYouTube_LiveChatUserBannedMessageDetails;
@class GTLRYouTube_LiveStream;
@class GTLRYouTube_LiveStreamConfigurationIssue;
@class GTLRYouTube_LiveStreamContentDetails;
@class GTLRYouTube_LiveStreamHealthStatus;
@class GTLRYouTube_LiveStreamSnippet;
@class GTLRYouTube_LiveStreamStatus;
@class GTLRYouTube_LocalizedProperty;
@class GTLRYouTube_LocalizedString;
@class GTLRYouTube_MonitorStreamInfo;
@class GTLRYouTube_Nonprofit;
@class GTLRYouTube_NonprofitId;
@class GTLRYouTube_PageInfo;
@class GTLRYouTube_Playlist;
@class GTLRYouTube_Playlist_Localizations;
@class GTLRYouTube_PlaylistContentDetails;
@class GTLRYouTube_PlaylistItem;
@class GTLRYouTube_PlaylistItemContentDetails;
@class GTLRYouTube_PlaylistItemSnippet;
@class GTLRYouTube_PlaylistItemStatus;
@class GTLRYouTube_PlaylistLocalization;
@class GTLRYouTube_PlaylistPlayer;
@class GTLRYouTube_PlaylistSnippet;
@class GTLRYouTube_PlaylistStatus;
@class GTLRYouTube_PromotedItem;
@class GTLRYouTube_PromotedItemId;
@class GTLRYouTube_PropertyValue;
@class GTLRYouTube_ResourceId;
@class GTLRYouTube_SearchResult;
@class GTLRYouTube_SearchResultSnippet;
@class GTLRYouTube_Sponsor;
@class GTLRYouTube_SponsorSnippet;
@class GTLRYouTube_Subscription;
@class GTLRYouTube_SubscriptionContentDetails;
@class GTLRYouTube_SubscriptionSnippet;
@class GTLRYouTube_SubscriptionSubscriberSnippet;
@class GTLRYouTube_SuperChatEvent;
@class GTLRYouTube_SuperChatEventSnippet;
@class GTLRYouTube_Thumbnail;
@class GTLRYouTube_ThumbnailDetails;
@class GTLRYouTube_TokenPagination;
@class GTLRYouTube_Video;
@class GTLRYouTube_Video_Localizations;
@class GTLRYouTube_VideoAbuseReportReason;
@class GTLRYouTube_VideoAbuseReportReasonSnippet;
@class GTLRYouTube_VideoAbuseReportSecondaryReason;
@class GTLRYouTube_VideoAgeGating;
@class GTLRYouTube_VideoCategory;
@class GTLRYouTube_VideoCategorySnippet;
@class GTLRYouTube_VideoContentDetails;
@class GTLRYouTube_VideoContentDetailsRegionRestriction;
@class GTLRYouTube_VideoFileDetails;
@class GTLRYouTube_VideoFileDetailsAudioStream;
@class GTLRYouTube_VideoFileDetailsVideoStream;
@class GTLRYouTube_VideoLiveStreamingDetails;
@class GTLRYouTube_VideoLocalization;
@class GTLRYouTube_VideoMonetizationDetails;
@class GTLRYouTube_VideoPlayer;
@class GTLRYouTube_VideoProcessingDetails;
@class GTLRYouTube_VideoProcessingDetailsProcessingProgress;
@class GTLRYouTube_VideoProjectDetails;
@class GTLRYouTube_VideoRating;
@class GTLRYouTube_VideoRecordingDetails;
@class GTLRYouTube_VideoSnippet;
@class GTLRYouTube_VideoStatistics;
@class GTLRYouTube_VideoStatus;
@class GTLRYouTube_VideoSuggestions;
@class GTLRYouTube_VideoSuggestionsTagSuggestion;
@class GTLRYouTube_VideoTopicDetails;
@class GTLRYouTube_WatchSettings;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRYouTube_ActivityContentDetailsPromotedItem.ctaType

/** Value: "unspecified" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivityContentDetailsPromotedItem_CtaType_Unspecified;
/** Value: "visitAdvertiserSite" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivityContentDetailsPromotedItem_CtaType_VisitAdvertiserSite;

// ----------------------------------------------------------------------------
// GTLRYouTube_ActivityContentDetailsRecommendation.reason

/** Value: "unspecified" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivityContentDetailsRecommendation_Reason_Unspecified;
/** Value: "videoFavorited" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivityContentDetailsRecommendation_Reason_VideoFavorited;
/** Value: "videoLiked" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivityContentDetailsRecommendation_Reason_VideoLiked;
/** Value: "videoWatched" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivityContentDetailsRecommendation_Reason_VideoWatched;

// ----------------------------------------------------------------------------
// GTLRYouTube_ActivityContentDetailsSocial.type

/** Value: "facebook" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivityContentDetailsSocial_Type_Facebook;
/** Value: "googlePlus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivityContentDetailsSocial_Type_GooglePlus;
/** Value: "twitter" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivityContentDetailsSocial_Type_Twitter;
/** Value: "unspecified" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivityContentDetailsSocial_Type_Unspecified;

// ----------------------------------------------------------------------------
// GTLRYouTube_ActivitySnippet.type

/** Value: "bulletin" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivitySnippet_Type_Bulletin;
/** Value: "channelItem" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivitySnippet_Type_ChannelItem;
/** Value: "comment" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivitySnippet_Type_Comment;
/** Value: "favorite" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivitySnippet_Type_Favorite;
/** Value: "like" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivitySnippet_Type_Like;
/** Value: "playlistItem" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivitySnippet_Type_PlaylistItem;
/** Value: "promotedItem" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivitySnippet_Type_PromotedItem;
/** Value: "recommendation" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivitySnippet_Type_Recommendation;
/** Value: "social" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivitySnippet_Type_Social;
/** Value: "subscription" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivitySnippet_Type_Subscription;
/** Value: "upload" */
GTLR_EXTERN NSString * const kGTLRYouTube_ActivitySnippet_Type_Upload;

// ----------------------------------------------------------------------------
// GTLRYouTube_CaptionSnippet.audioTrackType

/** Value: "commentary" */
GTLR_EXTERN NSString * const kGTLRYouTube_CaptionSnippet_AudioTrackType_Commentary;
/** Value: "descriptive" */
GTLR_EXTERN NSString * const kGTLRYouTube_CaptionSnippet_AudioTrackType_Descriptive;
/** Value: "primary" */
GTLR_EXTERN NSString * const kGTLRYouTube_CaptionSnippet_AudioTrackType_Primary;
/** Value: "unknown" */
GTLR_EXTERN NSString * const kGTLRYouTube_CaptionSnippet_AudioTrackType_Unknown;

// ----------------------------------------------------------------------------
// GTLRYouTube_CaptionSnippet.failureReason

/** Value: "processingFailed" */
GTLR_EXTERN NSString * const kGTLRYouTube_CaptionSnippet_FailureReason_ProcessingFailed;
/** Value: "unknownFormat" */
GTLR_EXTERN NSString * const kGTLRYouTube_CaptionSnippet_FailureReason_UnknownFormat;
/** Value: "unsupportedFormat" */
GTLR_EXTERN NSString * const kGTLRYouTube_CaptionSnippet_FailureReason_UnsupportedFormat;

// ----------------------------------------------------------------------------
// GTLRYouTube_CaptionSnippet.status

/** Value: "failed" */
GTLR_EXTERN NSString * const kGTLRYouTube_CaptionSnippet_Status_Failed;
/** Value: "serving" */
GTLR_EXTERN NSString * const kGTLRYouTube_CaptionSnippet_Status_Serving;
/** Value: "syncing" */
GTLR_EXTERN NSString * const kGTLRYouTube_CaptionSnippet_Status_Syncing;

// ----------------------------------------------------------------------------
// GTLRYouTube_CaptionSnippet.trackKind

/** Value: "ASR" */
GTLR_EXTERN NSString * const kGTLRYouTube_CaptionSnippet_TrackKind_Asr;
/** Value: "forced" */
GTLR_EXTERN NSString * const kGTLRYouTube_CaptionSnippet_TrackKind_Forced;
/** Value: "standard" */
GTLR_EXTERN NSString * const kGTLRYouTube_CaptionSnippet_TrackKind_Standard;

// ----------------------------------------------------------------------------
// GTLRYouTube_CdnSettings.frameRate

/** Value: "variable" */
GTLR_EXTERN NSString * const kGTLRYouTube_CdnSettings_FrameRate_Variable;
/** Value: "30fps" */
GTLR_EXTERN NSString * const kGTLRYouTube_CdnSettings_FrameRate_X30fps;
/** Value: "60fps" */
GTLR_EXTERN NSString * const kGTLRYouTube_CdnSettings_FrameRate_X60fps;

// ----------------------------------------------------------------------------
// GTLRYouTube_CdnSettings.ingestionType

/** Value: "dash" */
GTLR_EXTERN NSString * const kGTLRYouTube_CdnSettings_IngestionType_Dash;
/** Value: "rtmp" */
GTLR_EXTERN NSString * const kGTLRYouTube_CdnSettings_IngestionType_Rtmp;

// ----------------------------------------------------------------------------
// GTLRYouTube_CdnSettings.resolution

/** Value: "variable" */
GTLR_EXTERN NSString * const kGTLRYouTube_CdnSettings_Resolution_Variable;
/** Value: "1080p" */
GTLR_EXTERN NSString * const kGTLRYouTube_CdnSettings_Resolution_X1080p;
/** Value: "1440p" */
GTLR_EXTERN NSString * const kGTLRYouTube_CdnSettings_Resolution_X1440p;
/** Value: "2160p" */
GTLR_EXTERN NSString * const kGTLRYouTube_CdnSettings_Resolution_X2160p;
/** Value: "240p" */
GTLR_EXTERN NSString * const kGTLRYouTube_CdnSettings_Resolution_X240p;
/** Value: "360p" */
GTLR_EXTERN NSString * const kGTLRYouTube_CdnSettings_Resolution_X360p;
/** Value: "480p" */
GTLR_EXTERN NSString * const kGTLRYouTube_CdnSettings_Resolution_X480p;
/** Value: "720p" */
GTLR_EXTERN NSString * const kGTLRYouTube_CdnSettings_Resolution_X720p;

// ----------------------------------------------------------------------------
// GTLRYouTube_ChannelConversionPing.context

/** Value: "cview" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelConversionPing_Context_Cview;
/** Value: "subscribe" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelConversionPing_Context_Subscribe;
/** Value: "unsubscribe" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelConversionPing_Context_Unsubscribe;

// ----------------------------------------------------------------------------
// GTLRYouTube_ChannelSectionSnippet.style

/** Value: "channelsectionStyleUndefined" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Style_ChannelsectionStyleUndefined;
/** Value: "horizontalRow" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Style_HorizontalRow;
/** Value: "verticalList" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Style_VerticalList;

// ----------------------------------------------------------------------------
// GTLRYouTube_ChannelSectionSnippet.type

/** Value: "allPlaylists" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_AllPlaylists;
/** Value: "channelsectionTypeUndefined" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_ChannelsectionTypeUndefined;
/** Value: "completedEvents" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_CompletedEvents;
/** Value: "likedPlaylists" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_LikedPlaylists;
/** Value: "likes" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_Likes;
/** Value: "liveEvents" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_LiveEvents;
/** Value: "multipleChannels" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_MultipleChannels;
/** Value: "multiplePlaylists" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_MultiplePlaylists;
/** Value: "popularUploads" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_PopularUploads;
/** Value: "postedPlaylists" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_PostedPlaylists;
/** Value: "postedVideos" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_PostedVideos;
/** Value: "recentActivity" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_RecentActivity;
/** Value: "recentPosts" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_RecentPosts;
/** Value: "recentUploads" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_RecentUploads;
/** Value: "singlePlaylist" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_SinglePlaylist;
/** Value: "subscriptions" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_Subscriptions;
/** Value: "upcomingEvents" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelSectionSnippet_Type_UpcomingEvents;

// ----------------------------------------------------------------------------
// GTLRYouTube_ChannelStatus.longUploadsStatus

/** Value: "allowed" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelStatus_LongUploadsStatus_Allowed;
/** Value: "disallowed" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelStatus_LongUploadsStatus_Disallowed;
/** Value: "eligible" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelStatus_LongUploadsStatus_Eligible;
/** Value: "longUploadsUnspecified" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelStatus_LongUploadsStatus_LongUploadsUnspecified;

// ----------------------------------------------------------------------------
// GTLRYouTube_ChannelStatus.privacyStatus

/** Value: "private" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelStatus_PrivacyStatus_Private;
/** Value: "public" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelStatus_PrivacyStatus_Public;
/** Value: "unlisted" */
GTLR_EXTERN NSString * const kGTLRYouTube_ChannelStatus_PrivacyStatus_Unlisted;

// ----------------------------------------------------------------------------
// GTLRYouTube_CommentSnippet.moderationStatus

/** Value: "heldForReview" */
GTLR_EXTERN NSString * const kGTLRYouTube_CommentSnippet_ModerationStatus_HeldForReview;
/** Value: "likelySpam" */
GTLR_EXTERN NSString * const kGTLRYouTube_CommentSnippet_ModerationStatus_LikelySpam;
/** Value: "published" */
GTLR_EXTERN NSString * const kGTLRYouTube_CommentSnippet_ModerationStatus_Published;
/** Value: "rejected" */
GTLR_EXTERN NSString * const kGTLRYouTube_CommentSnippet_ModerationStatus_Rejected;

// ----------------------------------------------------------------------------
// GTLRYouTube_CommentSnippet.viewerRating

/** Value: "dislike" */
GTLR_EXTERN NSString * const kGTLRYouTube_CommentSnippet_ViewerRating_Dislike;
/** Value: "like" */
GTLR_EXTERN NSString * const kGTLRYouTube_CommentSnippet_ViewerRating_Like;
/** Value: "none" */
GTLR_EXTERN NSString * const kGTLRYouTube_CommentSnippet_ViewerRating_None;
/** Value: "unspecified" */
GTLR_EXTERN NSString * const kGTLRYouTube_CommentSnippet_ViewerRating_Unspecified;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.acbRating

/** Value: "acbC" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AcbRating_AcbC;
/** Value: "acbE" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AcbRating_AcbE;
/** Value: "acbG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AcbRating_AcbG;
/** Value: "acbM" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AcbRating_AcbM;
/** Value: "acbMa15plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AcbRating_AcbMa15plus;
/** Value: "acbP" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AcbRating_AcbP;
/** Value: "acbPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AcbRating_AcbPg;
/** Value: "acbR18plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AcbRating_AcbR18plus;
/** Value: "acbUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AcbRating_AcbUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.agcomRating

/** Value: "agcomT" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AgcomRating_AgcomT;
/** Value: "agcomUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AgcomRating_AgcomUnrated;
/** Value: "agcomVm14" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AgcomRating_AgcomVm14;
/** Value: "agcomVm18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AgcomRating_AgcomVm18;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.anatelRating

/** Value: "anatelA" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AnatelRating_AnatelA;
/** Value: "anatelF" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AnatelRating_AnatelF;
/** Value: "anatelI" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AnatelRating_AnatelI;
/** Value: "anatelI10" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AnatelRating_AnatelI10;
/** Value: "anatelI12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AnatelRating_AnatelI12;
/** Value: "anatelI7" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AnatelRating_AnatelI7;
/** Value: "anatelR" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AnatelRating_AnatelR;
/** Value: "anatelUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_AnatelRating_AnatelUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.bbfcRating

/** Value: "bbfc12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BbfcRating_Bbfc12;
/** Value: "bbfc12a" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BbfcRating_Bbfc12a;
/** Value: "bbfc15" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BbfcRating_Bbfc15;
/** Value: "bbfc18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BbfcRating_Bbfc18;
/** Value: "bbfcPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BbfcRating_BbfcPg;
/** Value: "bbfcR18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BbfcRating_BbfcR18;
/** Value: "bbfcU" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BbfcRating_BbfcU;
/** Value: "bbfcUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BbfcRating_BbfcUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.bfvcRating

/** Value: "bfvc13" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BfvcRating_Bfvc13;
/** Value: "bfvc15" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BfvcRating_Bfvc15;
/** Value: "bfvc18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BfvcRating_Bfvc18;
/** Value: "bfvc20" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BfvcRating_Bfvc20;
/** Value: "bfvcB" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BfvcRating_BfvcB;
/** Value: "bfvcE" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BfvcRating_BfvcE;
/** Value: "bfvcG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BfvcRating_BfvcG;
/** Value: "bfvcUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BfvcRating_BfvcUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.bmukkRating

/** Value: "bmukk10" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BmukkRating_Bmukk10;
/** Value: "bmukk12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BmukkRating_Bmukk12;
/** Value: "bmukk14" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BmukkRating_Bmukk14;
/** Value: "bmukk16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BmukkRating_Bmukk16;
/** Value: "bmukk6" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BmukkRating_Bmukk6;
/** Value: "bmukk8" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BmukkRating_Bmukk8;
/** Value: "bmukkAa" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BmukkRating_BmukkAa;
/** Value: "bmukkUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_BmukkRating_BmukkUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.catvfrRating

/** Value: "catvfr13plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CatvfrRating_Catvfr13plus;
/** Value: "catvfr16plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CatvfrRating_Catvfr16plus;
/** Value: "catvfr18plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CatvfrRating_Catvfr18plus;
/** Value: "catvfr8plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CatvfrRating_Catvfr8plus;
/** Value: "catvfrG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CatvfrRating_CatvfrG;
/** Value: "catvfrUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CatvfrRating_CatvfrUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.catvRating

/** Value: "catv14plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CatvRating_Catv14plus;
/** Value: "catv18plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CatvRating_Catv18plus;
/** Value: "catvC" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CatvRating_CatvC;
/** Value: "catvC8" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CatvRating_CatvC8;
/** Value: "catvG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CatvRating_CatvG;
/** Value: "catvPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CatvRating_CatvPg;
/** Value: "catvUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CatvRating_CatvUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.cbfcRating

/** Value: "cbfcA" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CbfcRating_CbfcA;
/** Value: "cbfcS" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CbfcRating_CbfcS;
/** Value: "cbfcU" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CbfcRating_CbfcU;
/** Value: "cbfcUA" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CbfcRating_CbfcUA;
/** Value: "cbfcUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CbfcRating_CbfcUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.cccRating

/** Value: "ccc14" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CccRating_Ccc14;
/** Value: "ccc18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CccRating_Ccc18;
/** Value: "ccc18s" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CccRating_Ccc18s;
/** Value: "ccc18v" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CccRating_Ccc18v;
/** Value: "ccc6" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CccRating_Ccc6;
/** Value: "cccTe" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CccRating_CccTe;
/** Value: "cccUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CccRating_CccUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.cceRating

/** Value: "cceM12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CceRating_CceM12;
/** Value: "cceM14" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CceRating_CceM14;
/** Value: "cceM16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CceRating_CceM16;
/** Value: "cceM18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CceRating_CceM18;
/** Value: "cceM4" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CceRating_CceM4;
/** Value: "cceM6" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CceRating_CceM6;
/** Value: "cceUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CceRating_CceUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.chfilmRating

/** Value: "chfilm0" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ChfilmRating_Chfilm0;
/** Value: "chfilm12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ChfilmRating_Chfilm12;
/** Value: "chfilm16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ChfilmRating_Chfilm16;
/** Value: "chfilm18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ChfilmRating_Chfilm18;
/** Value: "chfilm6" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ChfilmRating_Chfilm6;
/** Value: "chfilmUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ChfilmRating_ChfilmUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.chvrsRating

/** Value: "chvrs14a" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ChvrsRating_Chvrs14a;
/** Value: "chvrs18a" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ChvrsRating_Chvrs18a;
/** Value: "chvrsE" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ChvrsRating_ChvrsE;
/** Value: "chvrsG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ChvrsRating_ChvrsG;
/** Value: "chvrsPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ChvrsRating_ChvrsPg;
/** Value: "chvrsR" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ChvrsRating_ChvrsR;
/** Value: "chvrsUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ChvrsRating_ChvrsUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.cicfRating

/** Value: "cicfE" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CicfRating_CicfE;
/** Value: "cicfKntEna" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CicfRating_CicfKntEna;
/** Value: "cicfKtEa" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CicfRating_CicfKtEa;
/** Value: "cicfUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CicfRating_CicfUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.cnaRating

/** Value: "cna12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CnaRating_Cna12;
/** Value: "cna15" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CnaRating_Cna15;
/** Value: "cna18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CnaRating_Cna18;
/** Value: "cna18plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CnaRating_Cna18plus;
/** Value: "cnaAp" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CnaRating_CnaAp;
/** Value: "cnaUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CnaRating_CnaUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.cncRating

/** Value: "cnc10" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CncRating_Cnc10;
/** Value: "cnc12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CncRating_Cnc12;
/** Value: "cnc16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CncRating_Cnc16;
/** Value: "cnc18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CncRating_Cnc18;
/** Value: "cncE" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CncRating_CncE;
/** Value: "cncT" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CncRating_CncT;
/** Value: "cncUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CncRating_CncUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.csaRating

/** Value: "csa10" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CsaRating_Csa10;
/** Value: "csa12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CsaRating_Csa12;
/** Value: "csa16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CsaRating_Csa16;
/** Value: "csa18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CsaRating_Csa18;
/** Value: "csaInterdiction" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CsaRating_CsaInterdiction;
/** Value: "csaT" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CsaRating_CsaT;
/** Value: "csaUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CsaRating_CsaUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.cscfRating

/** Value: "cscf12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CscfRating_Cscf12;
/** Value: "cscf16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CscfRating_Cscf16;
/** Value: "cscf18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CscfRating_Cscf18;
/** Value: "cscf6" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CscfRating_Cscf6;
/** Value: "cscf9" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CscfRating_Cscf9;
/** Value: "cscfA" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CscfRating_CscfA;
/** Value: "cscfAl" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CscfRating_CscfAl;
/** Value: "cscfUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CscfRating_CscfUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.czfilmRating

/** Value: "czfilm12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CzfilmRating_Czfilm12;
/** Value: "czfilm14" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CzfilmRating_Czfilm14;
/** Value: "czfilm18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CzfilmRating_Czfilm18;
/** Value: "czfilmU" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CzfilmRating_CzfilmU;
/** Value: "czfilmUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_CzfilmRating_CzfilmUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.djctqRating

/** Value: "djctq10" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRating_Djctq10;
/** Value: "djctq12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRating_Djctq12;
/** Value: "djctq14" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRating_Djctq14;
/** Value: "djctq16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRating_Djctq16;
/** Value: "djctq18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRating_Djctq18;
/** Value: "djctqL" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRating_DjctqL;
/** Value: "djctqUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRating_DjctqUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.djctqRatingReasons

/** Value: "djctqCriminalActs" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRatingReasons_DjctqCriminalActs;
/** Value: "djctqDrugs" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRatingReasons_DjctqDrugs;
/** Value: "djctqExplicitSex" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRatingReasons_DjctqExplicitSex;
/** Value: "djctqExtremeViolence" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRatingReasons_DjctqExtremeViolence;
/** Value: "djctqIllegalDrugs" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRatingReasons_DjctqIllegalDrugs;
/** Value: "djctqImpactingContent" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRatingReasons_DjctqImpactingContent;
/** Value: "djctqInappropriateLanguage" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRatingReasons_DjctqInappropriateLanguage;
/** Value: "djctqLegalDrugs" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRatingReasons_DjctqLegalDrugs;
/** Value: "djctqNudity" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRatingReasons_DjctqNudity;
/** Value: "djctqSex" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRatingReasons_DjctqSex;
/** Value: "djctqSexualContent" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRatingReasons_DjctqSexualContent;
/** Value: "djctqViolence" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_DjctqRatingReasons_DjctqViolence;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.ecbmctRating

/** Value: "ecbmct13a" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EcbmctRating_Ecbmct13a;
/** Value: "ecbmct13plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EcbmctRating_Ecbmct13plus;
/** Value: "ecbmct15a" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EcbmctRating_Ecbmct15a;
/** Value: "ecbmct15plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EcbmctRating_Ecbmct15plus;
/** Value: "ecbmct18plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EcbmctRating_Ecbmct18plus;
/** Value: "ecbmct7a" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EcbmctRating_Ecbmct7a;
/** Value: "ecbmct7plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EcbmctRating_Ecbmct7plus;
/** Value: "ecbmctG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EcbmctRating_EcbmctG;
/** Value: "ecbmctUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EcbmctRating_EcbmctUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.eefilmRating

/** Value: "eefilmK12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EefilmRating_EefilmK12;
/** Value: "eefilmK14" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EefilmRating_EefilmK14;
/** Value: "eefilmK16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EefilmRating_EefilmK16;
/** Value: "eefilmK6" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EefilmRating_EefilmK6;
/** Value: "eefilmL" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EefilmRating_EefilmL;
/** Value: "eefilmMs12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EefilmRating_EefilmMs12;
/** Value: "eefilmMs6" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EefilmRating_EefilmMs6;
/** Value: "eefilmPere" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EefilmRating_EefilmPere;
/** Value: "eefilmUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EefilmRating_EefilmUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.egfilmRating

/** Value: "egfilm18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EgfilmRating_Egfilm18;
/** Value: "egfilmBn" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EgfilmRating_EgfilmBn;
/** Value: "egfilmGn" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EgfilmRating_EgfilmGn;
/** Value: "egfilmUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EgfilmRating_EgfilmUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.eirinRating

/** Value: "eirinG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EirinRating_EirinG;
/** Value: "eirinPg12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EirinRating_EirinPg12;
/** Value: "eirinR15plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EirinRating_EirinR15plus;
/** Value: "eirinR18plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EirinRating_EirinR18plus;
/** Value: "eirinUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_EirinRating_EirinUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.fcbmRating

/** Value: "fcbm18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FcbmRating_Fcbm18;
/** Value: "fcbm18pa" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FcbmRating_Fcbm18pa;
/** Value: "fcbm18pl" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FcbmRating_Fcbm18pl;
/** Value: "fcbm18sg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FcbmRating_Fcbm18sg;
/** Value: "fcbm18sx" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FcbmRating_Fcbm18sx;
/** Value: "fcbmP13" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FcbmRating_FcbmP13;
/** Value: "fcbmPg13" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FcbmRating_FcbmPg13;
/** Value: "fcbmU" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FcbmRating_FcbmU;
/** Value: "fcbmUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FcbmRating_FcbmUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.fcoRating

/** Value: "fcoI" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FcoRating_FcoI;
/** Value: "fcoIi" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FcoRating_FcoIi;
/** Value: "fcoIia" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FcoRating_FcoIia;
/** Value: "fcoIib" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FcoRating_FcoIib;
/** Value: "fcoIii" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FcoRating_FcoIii;
/** Value: "fcoUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FcoRating_FcoUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.fmocRating

/** Value: "fmoc10" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FmocRating_Fmoc10;
/** Value: "fmoc12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FmocRating_Fmoc12;
/** Value: "fmoc16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FmocRating_Fmoc16;
/** Value: "fmoc18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FmocRating_Fmoc18;
/** Value: "fmocE" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FmocRating_FmocE;
/** Value: "fmocU" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FmocRating_FmocU;
/** Value: "fmocUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FmocRating_FmocUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.fpbRating

/** Value: "fpb10" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRating_Fpb10;
/** Value: "fpb1012Pg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRating_Fpb1012Pg;
/** Value: "fpb13" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRating_Fpb13;
/** Value: "fpb16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRating_Fpb16;
/** Value: "fpb18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRating_Fpb18;
/** Value: "fpb79Pg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRating_Fpb79Pg;
/** Value: "fpbA" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRating_FpbA;
/** Value: "fpbPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRating_FpbPg;
/** Value: "fpbUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRating_FpbUnrated;
/** Value: "fpbX18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRating_FpbX18;
/** Value: "fpbXx" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRating_FpbXx;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.fpbRatingReasons

/** Value: "fpbBlasphemy" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRatingReasons_FpbBlasphemy;
/** Value: "fpbCriminalTechniques" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRatingReasons_FpbCriminalTechniques;
/** Value: "fpbDrugs" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRatingReasons_FpbDrugs;
/** Value: "fpbHorror" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRatingReasons_FpbHorror;
/** Value: "fpbImitativeActsTechniques" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRatingReasons_FpbImitativeActsTechniques;
/** Value: "fpbLanguage" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRatingReasons_FpbLanguage;
/** Value: "fpbNudity" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRatingReasons_FpbNudity;
/** Value: "fpbPrejudice" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRatingReasons_FpbPrejudice;
/** Value: "fpbSex" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRatingReasons_FpbSex;
/** Value: "fpbSexualViolence" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRatingReasons_FpbSexualViolence;
/** Value: "fpbViolence" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FpbRatingReasons_FpbViolence;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.fskRating

/** Value: "fsk0" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FskRating_Fsk0;
/** Value: "fsk12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FskRating_Fsk12;
/** Value: "fsk16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FskRating_Fsk16;
/** Value: "fsk18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FskRating_Fsk18;
/** Value: "fsk6" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FskRating_Fsk6;
/** Value: "fskUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_FskRating_FskUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.grfilmRating

/** Value: "grfilmE" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_GrfilmRating_GrfilmE;
/** Value: "grfilmK" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_GrfilmRating_GrfilmK;
/** Value: "grfilmK12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_GrfilmRating_GrfilmK12;
/** Value: "grfilmK13" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_GrfilmRating_GrfilmK13;
/** Value: "grfilmK15" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_GrfilmRating_GrfilmK15;
/** Value: "grfilmK17" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_GrfilmRating_GrfilmK17;
/** Value: "grfilmK18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_GrfilmRating_GrfilmK18;
/** Value: "grfilmUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_GrfilmRating_GrfilmUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.icaaRating

/** Value: "icaa12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IcaaRating_Icaa12;
/** Value: "icaa13" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IcaaRating_Icaa13;
/** Value: "icaa16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IcaaRating_Icaa16;
/** Value: "icaa18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IcaaRating_Icaa18;
/** Value: "icaa7" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IcaaRating_Icaa7;
/** Value: "icaaApta" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IcaaRating_IcaaApta;
/** Value: "icaaUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IcaaRating_IcaaUnrated;
/** Value: "icaaX" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IcaaRating_IcaaX;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.ifcoRating

/** Value: "ifco12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IfcoRating_Ifco12;
/** Value: "ifco12a" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IfcoRating_Ifco12a;
/** Value: "ifco15" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IfcoRating_Ifco15;
/** Value: "ifco15a" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IfcoRating_Ifco15a;
/** Value: "ifco16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IfcoRating_Ifco16;
/** Value: "ifco18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IfcoRating_Ifco18;
/** Value: "ifcoG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IfcoRating_IfcoG;
/** Value: "ifcoPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IfcoRating_IfcoPg;
/** Value: "ifcoUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IfcoRating_IfcoUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.ilfilmRating

/** Value: "ilfilm12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IlfilmRating_Ilfilm12;
/** Value: "ilfilm16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IlfilmRating_Ilfilm16;
/** Value: "ilfilm18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IlfilmRating_Ilfilm18;
/** Value: "ilfilmAa" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IlfilmRating_IlfilmAa;
/** Value: "ilfilmUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IlfilmRating_IlfilmUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.incaaRating

/** Value: "incaaAtp" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IncaaRating_IncaaAtp;
/** Value: "incaaC" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IncaaRating_IncaaC;
/** Value: "incaaSam13" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IncaaRating_IncaaSam13;
/** Value: "incaaSam16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IncaaRating_IncaaSam16;
/** Value: "incaaSam18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IncaaRating_IncaaSam18;
/** Value: "incaaUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_IncaaRating_IncaaUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.kfcbRating

/** Value: "kfcb16plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KfcbRating_Kfcb16plus;
/** Value: "kfcbG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KfcbRating_KfcbG;
/** Value: "kfcbPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KfcbRating_KfcbPg;
/** Value: "kfcbR" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KfcbRating_KfcbR;
/** Value: "kfcbUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KfcbRating_KfcbUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.kijkwijzerRating

/** Value: "kijkwijzer12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KijkwijzerRating_Kijkwijzer12;
/** Value: "kijkwijzer16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KijkwijzerRating_Kijkwijzer16;
/** Value: "kijkwijzer18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KijkwijzerRating_Kijkwijzer18;
/** Value: "kijkwijzer6" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KijkwijzerRating_Kijkwijzer6;
/** Value: "kijkwijzer9" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KijkwijzerRating_Kijkwijzer9;
/** Value: "kijkwijzerAl" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KijkwijzerRating_KijkwijzerAl;
/** Value: "kijkwijzerUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KijkwijzerRating_KijkwijzerUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.kmrbRating

/** Value: "kmrb12plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KmrbRating_Kmrb12plus;
/** Value: "kmrb15plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KmrbRating_Kmrb15plus;
/** Value: "kmrbAll" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KmrbRating_KmrbAll;
/** Value: "kmrbR" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KmrbRating_KmrbR;
/** Value: "kmrbTeenr" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KmrbRating_KmrbTeenr;
/** Value: "kmrbUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_KmrbRating_KmrbUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.lsfRating

/** Value: "lsf13" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_LsfRating_Lsf13;
/** Value: "lsf17" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_LsfRating_Lsf17;
/** Value: "lsf21" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_LsfRating_Lsf21;
/** Value: "lsfA" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_LsfRating_LsfA;
/** Value: "lsfBo" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_LsfRating_LsfBo;
/** Value: "lsfD" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_LsfRating_LsfD;
/** Value: "lsfR" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_LsfRating_LsfR;
/** Value: "lsfSu" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_LsfRating_LsfSu;
/** Value: "lsfUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_LsfRating_LsfUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.mccaaRating

/** Value: "mccaa12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MccaaRating_Mccaa12;
/** Value: "mccaa12a" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MccaaRating_Mccaa12a;
/** Value: "mccaa14" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MccaaRating_Mccaa14;
/** Value: "mccaa15" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MccaaRating_Mccaa15;
/** Value: "mccaa16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MccaaRating_Mccaa16;
/** Value: "mccaa18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MccaaRating_Mccaa18;
/** Value: "mccaaPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MccaaRating_MccaaPg;
/** Value: "mccaaU" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MccaaRating_MccaaU;
/** Value: "mccaaUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MccaaRating_MccaaUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.mccypRating

/** Value: "mccyp11" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MccypRating_Mccyp11;
/** Value: "mccyp15" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MccypRating_Mccyp15;
/** Value: "mccyp7" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MccypRating_Mccyp7;
/** Value: "mccypA" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MccypRating_MccypA;
/** Value: "mccypUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MccypRating_MccypUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.mcstRating

/** Value: "mcst0" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_McstRating_Mcst0;
/** Value: "mcst16plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_McstRating_Mcst16plus;
/** Value: "mcstC13" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_McstRating_McstC13;
/** Value: "mcstC16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_McstRating_McstC16;
/** Value: "mcstC18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_McstRating_McstC18;
/** Value: "mcstGPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_McstRating_McstGPg;
/** Value: "mcstP" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_McstRating_McstP;
/** Value: "mcstUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_McstRating_McstUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.mdaRating

/** Value: "mdaG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MdaRating_MdaG;
/** Value: "mdaM18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MdaRating_MdaM18;
/** Value: "mdaNc16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MdaRating_MdaNc16;
/** Value: "mdaPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MdaRating_MdaPg;
/** Value: "mdaPg13" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MdaRating_MdaPg13;
/** Value: "mdaR21" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MdaRating_MdaR21;
/** Value: "mdaUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MdaRating_MdaUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.medietilsynetRating

/** Value: "medietilsynet11" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MedietilsynetRating_Medietilsynet11;
/** Value: "medietilsynet12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MedietilsynetRating_Medietilsynet12;
/** Value: "medietilsynet15" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MedietilsynetRating_Medietilsynet15;
/** Value: "medietilsynet18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MedietilsynetRating_Medietilsynet18;
/** Value: "medietilsynet6" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MedietilsynetRating_Medietilsynet6;
/** Value: "medietilsynet7" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MedietilsynetRating_Medietilsynet7;
/** Value: "medietilsynet9" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MedietilsynetRating_Medietilsynet9;
/** Value: "medietilsynetA" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MedietilsynetRating_MedietilsynetA;
/** Value: "medietilsynetUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MedietilsynetRating_MedietilsynetUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.mekuRating

/** Value: "meku12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MekuRating_Meku12;
/** Value: "meku16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MekuRating_Meku16;
/** Value: "meku18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MekuRating_Meku18;
/** Value: "meku7" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MekuRating_Meku7;
/** Value: "mekuS" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MekuRating_MekuS;
/** Value: "mekuUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MekuRating_MekuUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.menaMpaaRating

/** Value: "menaMpaaG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MenaMpaaRating_MenaMpaaG;
/** Value: "menaMpaaPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MenaMpaaRating_MenaMpaaPg;
/** Value: "menaMpaaPg13" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MenaMpaaRating_MenaMpaaPg13;
/** Value: "menaMpaaR" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MenaMpaaRating_MenaMpaaR;
/** Value: "menaMpaaUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MenaMpaaRating_MenaMpaaUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.mibacRating

/** Value: "mibacT" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MibacRating_MibacT;
/** Value: "mibacUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MibacRating_MibacUnrated;
/** Value: "mibacVap" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MibacRating_MibacVap;
/** Value: "mibacVm12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MibacRating_MibacVm12;
/** Value: "mibacVm14" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MibacRating_MibacVm14;
/** Value: "mibacVm18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MibacRating_MibacVm18;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.mocRating

/** Value: "moc12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MocRating_Moc12;
/** Value: "moc15" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MocRating_Moc15;
/** Value: "moc18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MocRating_Moc18;
/** Value: "moc7" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MocRating_Moc7;
/** Value: "mocBanned" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MocRating_MocBanned;
/** Value: "mocE" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MocRating_MocE;
/** Value: "mocT" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MocRating_MocT;
/** Value: "mocUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MocRating_MocUnrated;
/** Value: "mocX" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MocRating_MocX;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.moctwRating

/** Value: "moctwG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MoctwRating_MoctwG;
/** Value: "moctwP" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MoctwRating_MoctwP;
/** Value: "moctwPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MoctwRating_MoctwPg;
/** Value: "moctwR" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MoctwRating_MoctwR;
/** Value: "moctwR12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MoctwRating_MoctwR12;
/** Value: "moctwR15" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MoctwRating_MoctwR15;
/** Value: "moctwUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MoctwRating_MoctwUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.mpaaRating

/** Value: "mpaaG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MpaaRating_MpaaG;
/** Value: "mpaaNc17" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MpaaRating_MpaaNc17;
/** Value: "mpaaPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MpaaRating_MpaaPg;
/** Value: "mpaaPg13" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MpaaRating_MpaaPg13;
/** Value: "mpaaR" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MpaaRating_MpaaR;
/** Value: "mpaaUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MpaaRating_MpaaUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.mpaatRating

/** Value: "mpaatGb" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MpaatRating_MpaatGb;
/** Value: "mpaatRb" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MpaatRating_MpaatRb;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.mtrcbRating

/** Value: "mtrcbG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MtrcbRating_MtrcbG;
/** Value: "mtrcbPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MtrcbRating_MtrcbPg;
/** Value: "mtrcbR13" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MtrcbRating_MtrcbR13;
/** Value: "mtrcbR16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MtrcbRating_MtrcbR16;
/** Value: "mtrcbR18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MtrcbRating_MtrcbR18;
/** Value: "mtrcbUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MtrcbRating_MtrcbUnrated;
/** Value: "mtrcbX" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_MtrcbRating_MtrcbX;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.nbcplRating

/** Value: "nbcpl18plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NbcplRating_Nbcpl18plus;
/** Value: "nbcplI" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NbcplRating_NbcplI;
/** Value: "nbcplIi" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NbcplRating_NbcplIi;
/** Value: "nbcplIii" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NbcplRating_NbcplIii;
/** Value: "nbcplIv" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NbcplRating_NbcplIv;
/** Value: "nbcplUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NbcplRating_NbcplUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.nbcRating

/** Value: "nbc12plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NbcRating_Nbc12plus;
/** Value: "nbc15plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NbcRating_Nbc15plus;
/** Value: "nbc18plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NbcRating_Nbc18plus;
/** Value: "nbc18plusr" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NbcRating_Nbc18plusr;
/** Value: "nbcG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NbcRating_NbcG;
/** Value: "nbcPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NbcRating_NbcPg;
/** Value: "nbcPu" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NbcRating_NbcPu;
/** Value: "nbcUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NbcRating_NbcUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.nfrcRating

/** Value: "nfrcA" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NfrcRating_NfrcA;
/** Value: "nfrcB" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NfrcRating_NfrcB;
/** Value: "nfrcC" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NfrcRating_NfrcC;
/** Value: "nfrcD" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NfrcRating_NfrcD;
/** Value: "nfrcUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NfrcRating_NfrcUnrated;
/** Value: "nfrcX" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NfrcRating_NfrcX;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.nfvcbRating

/** Value: "nfvcb12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NfvcbRating_Nfvcb12;
/** Value: "nfvcb12a" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NfvcbRating_Nfvcb12a;
/** Value: "nfvcb15" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NfvcbRating_Nfvcb15;
/** Value: "nfvcb18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NfvcbRating_Nfvcb18;
/** Value: "nfvcbG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NfvcbRating_NfvcbG;
/** Value: "nfvcbPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NfvcbRating_NfvcbPg;
/** Value: "nfvcbRe" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NfvcbRating_NfvcbRe;
/** Value: "nfvcbUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NfvcbRating_NfvcbUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.nkclvRating

/** Value: "nkclv12plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NkclvRating_Nkclv12plus;
/** Value: "nkclv18plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NkclvRating_Nkclv18plus;
/** Value: "nkclv7plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NkclvRating_Nkclv7plus;
/** Value: "nkclvU" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NkclvRating_NkclvU;
/** Value: "nkclvUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_NkclvRating_NkclvUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.oflcRating

/** Value: "oflcG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_OflcRating_OflcG;
/** Value: "oflcM" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_OflcRating_OflcM;
/** Value: "oflcPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_OflcRating_OflcPg;
/** Value: "oflcR13" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_OflcRating_OflcR13;
/** Value: "oflcR15" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_OflcRating_OflcR15;
/** Value: "oflcR16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_OflcRating_OflcR16;
/** Value: "oflcR18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_OflcRating_OflcR18;
/** Value: "oflcRp13" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_OflcRating_OflcRp13;
/** Value: "oflcRp16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_OflcRating_OflcRp16;
/** Value: "oflcRp18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_OflcRating_OflcRp18;
/** Value: "oflcUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_OflcRating_OflcUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.pefilmRating

/** Value: "pefilm14" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_PefilmRating_Pefilm14;
/** Value: "pefilm18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_PefilmRating_Pefilm18;
/** Value: "pefilmPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_PefilmRating_PefilmPg;
/** Value: "pefilmPt" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_PefilmRating_PefilmPt;
/** Value: "pefilmUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_PefilmRating_PefilmUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.rcnofRating

/** Value: "rcnofI" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RcnofRating_RcnofI;
/** Value: "rcnofIi" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RcnofRating_RcnofIi;
/** Value: "rcnofIii" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RcnofRating_RcnofIii;
/** Value: "rcnofIv" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RcnofRating_RcnofIv;
/** Value: "rcnofUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RcnofRating_RcnofUnrated;
/** Value: "rcnofV" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RcnofRating_RcnofV;
/** Value: "rcnofVi" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RcnofRating_RcnofVi;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.resorteviolenciaRating

/** Value: "resorteviolenciaA" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ResorteviolenciaRating_ResorteviolenciaA;
/** Value: "resorteviolenciaB" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ResorteviolenciaRating_ResorteviolenciaB;
/** Value: "resorteviolenciaC" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ResorteviolenciaRating_ResorteviolenciaC;
/** Value: "resorteviolenciaD" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ResorteviolenciaRating_ResorteviolenciaD;
/** Value: "resorteviolenciaE" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ResorteviolenciaRating_ResorteviolenciaE;
/** Value: "resorteviolenciaUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_ResorteviolenciaRating_ResorteviolenciaUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.rtcRating

/** Value: "rtcA" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RtcRating_RtcA;
/** Value: "rtcAa" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RtcRating_RtcAa;
/** Value: "rtcB" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RtcRating_RtcB;
/** Value: "rtcB15" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RtcRating_RtcB15;
/** Value: "rtcC" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RtcRating_RtcC;
/** Value: "rtcD" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RtcRating_RtcD;
/** Value: "rtcUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RtcRating_RtcUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.rteRating

/** Value: "rteCh" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RteRating_RteCh;
/** Value: "rteGa" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RteRating_RteGa;
/** Value: "rteMa" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RteRating_RteMa;
/** Value: "rtePs" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RteRating_RtePs;
/** Value: "rteUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RteRating_RteUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.russiaRating

/** Value: "russia0" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RussiaRating_Russia0;
/** Value: "russia12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RussiaRating_Russia12;
/** Value: "russia16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RussiaRating_Russia16;
/** Value: "russia18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RussiaRating_Russia18;
/** Value: "russia6" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RussiaRating_Russia6;
/** Value: "russiaUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_RussiaRating_RussiaUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.skfilmRating

/** Value: "skfilmG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SkfilmRating_SkfilmG;
/** Value: "skfilmP2" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SkfilmRating_SkfilmP2;
/** Value: "skfilmP5" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SkfilmRating_SkfilmP5;
/** Value: "skfilmP8" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SkfilmRating_SkfilmP8;
/** Value: "skfilmUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SkfilmRating_SkfilmUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.smaisRating

/** Value: "smais12" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SmaisRating_Smais12;
/** Value: "smais14" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SmaisRating_Smais14;
/** Value: "smais16" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SmaisRating_Smais16;
/** Value: "smais18" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SmaisRating_Smais18;
/** Value: "smais7" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SmaisRating_Smais7;
/** Value: "smaisL" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SmaisRating_SmaisL;
/** Value: "smaisUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SmaisRating_SmaisUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.smsaRating

/** Value: "smsa11" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SmsaRating_Smsa11;
/** Value: "smsa15" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SmsaRating_Smsa15;
/** Value: "smsa7" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SmsaRating_Smsa7;
/** Value: "smsaA" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SmsaRating_SmsaA;
/** Value: "smsaUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_SmsaRating_SmsaUnrated;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.tvpgRating

/** Value: "pg14" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_TvpgRating_Pg14;
/** Value: "tvpgG" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_TvpgRating_TvpgG;
/** Value: "tvpgMa" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_TvpgRating_TvpgMa;
/** Value: "tvpgPg" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_TvpgRating_TvpgPg;
/** Value: "tvpgUnrated" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_TvpgRating_TvpgUnrated;
/** Value: "tvpgY" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_TvpgRating_TvpgY;
/** Value: "tvpgY7" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_TvpgRating_TvpgY7;
/** Value: "tvpgY7Fv" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_TvpgRating_TvpgY7Fv;

// ----------------------------------------------------------------------------
// GTLRYouTube_ContentRating.ytRating

/** Value: "ytAgeRestricted" */
GTLR_EXTERN NSString * const kGTLRYouTube_ContentRating_YtRating_YtAgeRestricted;

// ----------------------------------------------------------------------------
// GTLRYouTube_InvideoPosition.cornerPosition

/** Value: "bottomLeft" */
GTLR_EXTERN NSString * const kGTLRYouTube_InvideoPosition_CornerPosition_BottomLeft;
/** Value: "bottomRight" */
GTLR_EXTERN NSString * const kGTLRYouTube_InvideoPosition_CornerPosition_BottomRight;
/** Value: "topLeft" */
GTLR_EXTERN NSString * const kGTLRYouTube_InvideoPosition_CornerPosition_TopLeft;
/** Value: "topRight" */
GTLR_EXTERN NSString * const kGTLRYouTube_InvideoPosition_CornerPosition_TopRight;

// ----------------------------------------------------------------------------
// GTLRYouTube_InvideoPosition.type

/** Value: "corner" */
GTLR_EXTERN NSString * const kGTLRYouTube_InvideoPosition_Type_Corner;

// ----------------------------------------------------------------------------
// GTLRYouTube_InvideoTiming.type

/** Value: "offsetFromEnd" */
GTLR_EXTERN NSString * const kGTLRYouTube_InvideoTiming_Type_OffsetFromEnd;
/** Value: "offsetFromStart" */
GTLR_EXTERN NSString * const kGTLRYouTube_InvideoTiming_Type_OffsetFromStart;

// ----------------------------------------------------------------------------
// GTLRYouTube_LiveBroadcastContentDetails.closedCaptionsType

/** Value: "closedCaptionsDisabled" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastContentDetails_ClosedCaptionsType_ClosedCaptionsDisabled;
/** Value: "closedCaptionsEmbedded" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastContentDetails_ClosedCaptionsType_ClosedCaptionsEmbedded;
/** Value: "closedCaptionsHttpPost" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastContentDetails_ClosedCaptionsType_ClosedCaptionsHttpPost;

// ----------------------------------------------------------------------------
// GTLRYouTube_LiveBroadcastContentDetails.latencyPreference

/** Value: "low" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastContentDetails_LatencyPreference_Low;
/** Value: "normal" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastContentDetails_LatencyPreference_Normal;
/** Value: "ultraLow" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastContentDetails_LatencyPreference_UltraLow;

// ----------------------------------------------------------------------------
// GTLRYouTube_LiveBroadcastContentDetails.projection

/** Value: "mesh" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastContentDetails_Projection_Mesh;
/** Value: "rectangular" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastContentDetails_Projection_Rectangular;
/** Value: "360" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastContentDetails_Projection_X360;

// ----------------------------------------------------------------------------
// GTLRYouTube_LiveBroadcastContentDetails.stereoLayout

/** Value: "left_right" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastContentDetails_StereoLayout_LeftRight;
/** Value: "mono" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastContentDetails_StereoLayout_Mono;
/** Value: "top_bottom" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastContentDetails_StereoLayout_TopBottom;

// ----------------------------------------------------------------------------
// GTLRYouTube_LiveBroadcastStatus.lifeCycleStatus

/** Value: "abandoned" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_Abandoned;
/** Value: "complete" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_Complete;
/** Value: "completeStarting" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_CompleteStarting;
/** Value: "created" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_Created;
/** Value: "live" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_Live;
/** Value: "liveStarting" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_LiveStarting;
/** Value: "ready" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_Ready;
/** Value: "reclaimed" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_Reclaimed;
/** Value: "revoked" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_Revoked;
/** Value: "testing" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_Testing;
/** Value: "testStarting" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_TestStarting;

// ----------------------------------------------------------------------------
// GTLRYouTube_LiveBroadcastStatus.liveBroadcastPriority

/** Value: "high" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_LiveBroadcastPriority_High;
/** Value: "low" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_LiveBroadcastPriority_Low;
/** Value: "normal" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_LiveBroadcastPriority_Normal;

// ----------------------------------------------------------------------------
// GTLRYouTube_LiveBroadcastStatus.privacyStatus

/** Value: "private" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_PrivacyStatus_Private;
/** Value: "public" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_PrivacyStatus_Public;
/** Value: "unlisted" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_PrivacyStatus_Unlisted;

// ----------------------------------------------------------------------------
// GTLRYouTube_LiveBroadcastStatus.recordingStatus

/** Value: "notRecording" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_RecordingStatus_NotRecording;
/** Value: "recorded" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_RecordingStatus_Recorded;
/** Value: "recording" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveBroadcastStatus_RecordingStatus_Recording;

// ----------------------------------------------------------------------------
// GTLRYouTube_LiveChatBanSnippet.type

/** Value: "permanent" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatBanSnippet_Type_Permanent;
/** Value: "temporary" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatBanSnippet_Type_Temporary;

// ----------------------------------------------------------------------------
// GTLRYouTube_LiveChatMessageSnippet.type

/** Value: "chatEndedEvent" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatMessageSnippet_Type_ChatEndedEvent;
/** Value: "fanFundingEvent" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatMessageSnippet_Type_FanFundingEvent;
/** Value: "messageDeletedEvent" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatMessageSnippet_Type_MessageDeletedEvent;
/** Value: "messageRetractedEvent" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatMessageSnippet_Type_MessageRetractedEvent;
/** Value: "newSponsorEvent" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatMessageSnippet_Type_NewSponsorEvent;
/** Value: "pollClosedEvent" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatMessageSnippet_Type_PollClosedEvent;
/** Value: "pollEditedEvent" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatMessageSnippet_Type_PollEditedEvent;
/** Value: "pollOpenedEvent" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatMessageSnippet_Type_PollOpenedEvent;
/** Value: "pollVotedEvent" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatMessageSnippet_Type_PollVotedEvent;
/** Value: "sponsorOnlyModeEndedEvent" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatMessageSnippet_Type_SponsorOnlyModeEndedEvent;
/** Value: "sponsorOnlyModeStartedEvent" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatMessageSnippet_Type_SponsorOnlyModeStartedEvent;
/** Value: "superChatEvent" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatMessageSnippet_Type_SuperChatEvent;
/** Value: "textMessageEvent" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatMessageSnippet_Type_TextMessageEvent;
/** Value: "tombstone" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatMessageSnippet_Type_Tombstone;
/** Value: "userBannedEvent" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatMessageSnippet_Type_UserBannedEvent;

// ----------------------------------------------------------------------------
// GTLRYouTube_LiveChatUserBannedMessageDetails.banType

/** Value: "permanent" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatUserBannedMessageDetails_BanType_Permanent;
/** Value: "temporary" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveChatUserBannedMessageDetails_BanType_Temporary;

// ----------------------------------------------------------------------------
// GTLRYouTube_LiveStreamConfigurationIssue.severity

/** Value: "error" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Severity_Error;
/** Value: "info" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Severity_Info;
/** Value: "warning" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Severity_Warning;

// ----------------------------------------------------------------------------
// GTLRYouTube_LiveStreamConfigurationIssue.type

/** Value: "audioBitrateHigh" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioBitrateHigh;
/** Value: "audioBitrateLow" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioBitrateLow;
/** Value: "audioBitrateMismatch" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioBitrateMismatch;
/** Value: "audioCodec" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioCodec;
/** Value: "audioCodecMismatch" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioCodecMismatch;
/** Value: "audioSampleRate" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioSampleRate;
/** Value: "audioSampleRateMismatch" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioSampleRateMismatch;
/** Value: "audioStereoMismatch" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioStereoMismatch;
/** Value: "audioTooManyChannels" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioTooManyChannels;
/** Value: "badContainer" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_BadContainer;
/** Value: "bitrateHigh" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_BitrateHigh;
/** Value: "bitrateLow" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_BitrateLow;
/** Value: "frameRateHigh" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_FrameRateHigh;
/** Value: "framerateMismatch" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_FramerateMismatch;
/** Value: "gopMismatch" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_GopMismatch;
/** Value: "gopSizeLong" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_GopSizeLong;
/** Value: "gopSizeOver" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_GopSizeOver;
/** Value: "gopSizeShort" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_GopSizeShort;
/** Value: "interlacedVideo" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_InterlacedVideo;
/** Value: "multipleAudioStreams" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_MultipleAudioStreams;
/** Value: "multipleVideoStreams" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_MultipleVideoStreams;
/** Value: "noAudioStream" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_NoAudioStream;
/** Value: "noVideoStream" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_NoVideoStream;
/** Value: "openGop" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_OpenGop;
/** Value: "resolutionMismatch" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_ResolutionMismatch;
/** Value: "videoBitrateMismatch" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoBitrateMismatch;
/** Value: "videoCodec" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoCodec;
/** Value: "videoCodecMismatch" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoCodecMismatch;
/** Value: "videoIngestionFasterThanRealtime" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoIngestionFasterThanRealtime;
/** Value: "videoIngestionStarved" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoIngestionStarved;
/** Value: "videoInterlaceMismatch" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoInterlaceMismatch;
/** Value: "videoProfileMismatch" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoProfileMismatch;
/** Value: "videoResolutionSuboptimal" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoResolutionSuboptimal;
/** Value: "videoResolutionUnsupported" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoResolutionUnsupported;

// ----------------------------------------------------------------------------
// GTLRYouTube_LiveStreamHealthStatus.status

/** Value: "bad" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamHealthStatus_Status_Bad;
/** Value: "good" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamHealthStatus_Status_Good;
/** Value: "noData" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamHealthStatus_Status_NoData;
/** Value: "ok" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamHealthStatus_Status_Ok;
/** Value: "revoked" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamHealthStatus_Status_Revoked;

// ----------------------------------------------------------------------------
// GTLRYouTube_LiveStreamStatus.streamStatus

/** Value: "active" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamStatus_StreamStatus_Active;
/** Value: "created" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamStatus_StreamStatus_Created;
/** Value: "error" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamStatus_StreamStatus_Error;
/** Value: "inactive" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamStatus_StreamStatus_Inactive;
/** Value: "ready" */
GTLR_EXTERN NSString * const kGTLRYouTube_LiveStreamStatus_StreamStatus_Ready;

// ----------------------------------------------------------------------------
// GTLRYouTube_PlaylistItemStatus.privacyStatus

/** Value: "private" */
GTLR_EXTERN NSString * const kGTLRYouTube_PlaylistItemStatus_PrivacyStatus_Private;
/** Value: "public" */
GTLR_EXTERN NSString * const kGTLRYouTube_PlaylistItemStatus_PrivacyStatus_Public;
/** Value: "unlisted" */
GTLR_EXTERN NSString * const kGTLRYouTube_PlaylistItemStatus_PrivacyStatus_Unlisted;

// ----------------------------------------------------------------------------
// GTLRYouTube_PlaylistStatus.privacyStatus

/** Value: "private" */
GTLR_EXTERN NSString * const kGTLRYouTube_PlaylistStatus_PrivacyStatus_Private;
/** Value: "public" */
GTLR_EXTERN NSString * const kGTLRYouTube_PlaylistStatus_PrivacyStatus_Public;
/** Value: "unlisted" */
GTLR_EXTERN NSString * const kGTLRYouTube_PlaylistStatus_PrivacyStatus_Unlisted;

// ----------------------------------------------------------------------------
// GTLRYouTube_PromotedItemId.type

/** Value: "recentUpload" */
GTLR_EXTERN NSString * const kGTLRYouTube_PromotedItemId_Type_RecentUpload;
/** Value: "video" */
GTLR_EXTERN NSString * const kGTLRYouTube_PromotedItemId_Type_Video;
/** Value: "website" */
GTLR_EXTERN NSString * const kGTLRYouTube_PromotedItemId_Type_Website;

// ----------------------------------------------------------------------------
// GTLRYouTube_SearchResultSnippet.liveBroadcastContent

/** Value: "live" */
GTLR_EXTERN NSString * const kGTLRYouTube_SearchResultSnippet_LiveBroadcastContent_Live;
/** Value: "none" */
GTLR_EXTERN NSString * const kGTLRYouTube_SearchResultSnippet_LiveBroadcastContent_None;
/** Value: "upcoming" */
GTLR_EXTERN NSString * const kGTLRYouTube_SearchResultSnippet_LiveBroadcastContent_Upcoming;

// ----------------------------------------------------------------------------
// GTLRYouTube_SubscriptionContentDetails.activityType

/** Value: "all" */
GTLR_EXTERN NSString * const kGTLRYouTube_SubscriptionContentDetails_ActivityType_All;
/** Value: "uploads" */
GTLR_EXTERN NSString * const kGTLRYouTube_SubscriptionContentDetails_ActivityType_Uploads;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoAgeGating.videoGameRating

/** Value: "anyone" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoAgeGating_VideoGameRating_Anyone;
/** Value: "m15Plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoAgeGating_VideoGameRating_M15Plus;
/** Value: "m16Plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoAgeGating_VideoGameRating_M16Plus;
/** Value: "m17Plus" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoAgeGating_VideoGameRating_M17Plus;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoContentDetails.caption

/** Value: "false" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoContentDetails_Caption_False;
/** Value: "true" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoContentDetails_Caption_True;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoContentDetails.definition

/** Value: "hd" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoContentDetails_Definition_Hd;
/** Value: "sd" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoContentDetails_Definition_Sd;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoContentDetails.projection

/** Value: "rectangular" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoContentDetails_Projection_Rectangular;
/** Value: "360" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoContentDetails_Projection_X360;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoFileDetails.fileType

/** Value: "archive" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoFileDetails_FileType_Archive;
/** Value: "audio" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoFileDetails_FileType_Audio;
/** Value: "document" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoFileDetails_FileType_Document;
/** Value: "image" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoFileDetails_FileType_Image;
/** Value: "other" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoFileDetails_FileType_Other;
/** Value: "project" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoFileDetails_FileType_Project;
/** Value: "video" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoFileDetails_FileType_Video;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoFileDetailsVideoStream.rotation

/** Value: "clockwise" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoFileDetailsVideoStream_Rotation_Clockwise;
/** Value: "counterClockwise" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoFileDetailsVideoStream_Rotation_CounterClockwise;
/** Value: "none" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoFileDetailsVideoStream_Rotation_None;
/** Value: "other" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoFileDetailsVideoStream_Rotation_Other;
/** Value: "upsideDown" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoFileDetailsVideoStream_Rotation_UpsideDown;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoProcessingDetails.processingFailureReason

/** Value: "other" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoProcessingDetails_ProcessingFailureReason_Other;
/** Value: "streamingFailed" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoProcessingDetails_ProcessingFailureReason_StreamingFailed;
/** Value: "transcodeFailed" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoProcessingDetails_ProcessingFailureReason_TranscodeFailed;
/** Value: "uploadFailed" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoProcessingDetails_ProcessingFailureReason_UploadFailed;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoProcessingDetails.processingStatus

/** Value: "failed" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoProcessingDetails_ProcessingStatus_Failed;
/** Value: "processing" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoProcessingDetails_ProcessingStatus_Processing;
/** Value: "succeeded" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoProcessingDetails_ProcessingStatus_Succeeded;
/** Value: "terminated" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoProcessingDetails_ProcessingStatus_Terminated;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoRating.rating

/** Value: "dislike" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoRating_Rating_Dislike;
/** Value: "like" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoRating_Rating_Like;
/** Value: "none" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoRating_Rating_None;
/** Value: "unspecified" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoRating_Rating_Unspecified;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoSnippet.liveBroadcastContent

/** Value: "live" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSnippet_LiveBroadcastContent_Live;
/** Value: "none" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSnippet_LiveBroadcastContent_None;
/** Value: "upcoming" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSnippet_LiveBroadcastContent_Upcoming;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoStatus.failureReason

/** Value: "codec" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_FailureReason_Codec;
/** Value: "conversion" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_FailureReason_Conversion;
/** Value: "emptyFile" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_FailureReason_EmptyFile;
/** Value: "invalidFile" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_FailureReason_InvalidFile;
/** Value: "tooSmall" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_FailureReason_TooSmall;
/** Value: "uploadAborted" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_FailureReason_UploadAborted;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoStatus.license

/** Value: "creativeCommon" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_License_CreativeCommon;
/** Value: "youtube" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_License_Youtube;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoStatus.privacyStatus

/** Value: "private" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_PrivacyStatus_Private;
/** Value: "public" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_PrivacyStatus_Public;
/** Value: "unlisted" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_PrivacyStatus_Unlisted;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoStatus.rejectionReason

/** Value: "claim" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_RejectionReason_Claim;
/** Value: "copyright" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_RejectionReason_Copyright;
/** Value: "duplicate" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_RejectionReason_Duplicate;
/** Value: "inappropriate" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_RejectionReason_Inappropriate;
/** Value: "legal" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_RejectionReason_Legal;
/** Value: "length" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_RejectionReason_Length;
/** Value: "termsOfUse" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_RejectionReason_TermsOfUse;
/** Value: "trademark" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_RejectionReason_Trademark;
/** Value: "uploaderAccountClosed" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_RejectionReason_UploaderAccountClosed;
/** Value: "uploaderAccountSuspended" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_RejectionReason_UploaderAccountSuspended;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoStatus.uploadStatus

/** Value: "deleted" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_UploadStatus_Deleted;
/** Value: "failed" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_UploadStatus_Failed;
/** Value: "processed" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_UploadStatus_Processed;
/** Value: "rejected" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_UploadStatus_Rejected;
/** Value: "uploaded" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoStatus_UploadStatus_Uploaded;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoSuggestions.editorSuggestions

/** Value: "audioQuietAudioSwap" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_EditorSuggestions_AudioQuietAudioSwap;
/** Value: "videoAutoLevels" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_EditorSuggestions_VideoAutoLevels;
/** Value: "videoCrop" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_EditorSuggestions_VideoCrop;
/** Value: "videoStabilize" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_EditorSuggestions_VideoStabilize;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoSuggestions.processingErrors

/** Value: "archiveFile" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingErrors_ArchiveFile;
/** Value: "audioFile" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingErrors_AudioFile;
/** Value: "docFile" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingErrors_DocFile;
/** Value: "imageFile" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingErrors_ImageFile;
/** Value: "notAVideoFile" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingErrors_NotAVideoFile;
/** Value: "projectFile" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingErrors_ProjectFile;
/** Value: "unsupportedSpatialAudioLayout" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingErrors_UnsupportedSpatialAudioLayout;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoSuggestions.processingHints

/** Value: "hdrVideo" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingHints_HdrVideo;
/** Value: "nonStreamableMov" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingHints_NonStreamableMov;
/** Value: "sendBestQualityVideo" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingHints_SendBestQualityVideo;
/** Value: "spatialAudio" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingHints_SpatialAudio;
/** Value: "sphericalVideo" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingHints_SphericalVideo;
/** Value: "vrVideo" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingHints_VrVideo;

// ----------------------------------------------------------------------------
// GTLRYouTube_VideoSuggestions.processingWarnings

/** Value: "hasEditlist" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingWarnings_HasEditlist;
/** Value: "inconsistentResolution" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingWarnings_InconsistentResolution;
/** Value: "problematicAudioCodec" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingWarnings_ProblematicAudioCodec;
/** Value: "problematicHdrLookupTable" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingWarnings_ProblematicHdrLookupTable;
/** Value: "problematicVideoCodec" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingWarnings_ProblematicVideoCodec;
/** Value: "unknownAudioCodec" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingWarnings_UnknownAudioCodec;
/** Value: "unknownContainer" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingWarnings_UnknownContainer;
/** Value: "unknownVideoCodec" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingWarnings_UnknownVideoCodec;
/** Value: "unsupportedHdrColorMetadata" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingWarnings_UnsupportedHdrColorMetadata;
/** Value: "unsupportedHdrPixelFormat" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingWarnings_UnsupportedHdrPixelFormat;
/** Value: "unsupportedSphericalProjectionType" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingWarnings_UnsupportedSphericalProjectionType;
/** Value: "unsupportedVrStereoMode" */
GTLR_EXTERN NSString * const kGTLRYouTube_VideoSuggestions_ProcessingWarnings_UnsupportedVrStereoMode;

/**
 *  Rights management policy for YouTube resources.
 */
@interface GTLRYouTube_AccessPolicy : GTLRObject

/**
 *  The value of allowed indicates whether the access to the policy is allowed
 *  or denied by default.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowed;

/**
 *  A list of region codes that identify countries where the default policy do
 *  not apply.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exception;

@end


/**
 *  An activity resource contains information about an action that a particular
 *  channel, or user, has taken on YouTube.The actions reported in activity
 *  feeds include rating a video, sharing a video, marking a video as a
 *  favorite, commenting on a video, uploading a video, and so forth. Each
 *  activity resource identifies the type of action, the channel associated with
 *  the action, and the resource(s) associated with the action, such as the
 *  video that was rated or uploaded.
 */
@interface GTLRYouTube_Activity : GTLRObject

/**
 *  The contentDetails object contains information about the content associated
 *  with the activity. For example, if the snippet.type value is videoRated,
 *  then the contentDetails object's content identifies the rated video.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ActivityContentDetails *contentDetails;

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube uses to uniquely identify the activity.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#activity".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The snippet object contains basic details about the activity, including the
 *  activity's type and group ID.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ActivitySnippet *snippet;

@end


/**
 *  Details about the content of an activity: the video that was shared, the
 *  channel that was subscribed to, etc.
 */
@interface GTLRYouTube_ActivityContentDetails : GTLRObject

/**
 *  The bulletin object contains details about a channel bulletin post. This
 *  object is only present if the snippet.type is bulletin.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ActivityContentDetailsBulletin *bulletin;

/**
 *  The channelItem object contains details about a resource which was added to
 *  a channel. This property is only present if the snippet.type is channelItem.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ActivityContentDetailsChannelItem *channelItem;

/**
 *  The comment object contains information about a resource that received a
 *  comment. This property is only present if the snippet.type is comment.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ActivityContentDetailsComment *comment;

/**
 *  The favorite object contains information about a video that was marked as a
 *  favorite video. This property is only present if the snippet.type is
 *  favorite.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ActivityContentDetailsFavorite *favorite;

/**
 *  The like object contains information about a resource that received a
 *  positive (like) rating. This property is only present if the snippet.type is
 *  like.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ActivityContentDetailsLike *like;

/**
 *  The playlistItem object contains information about a new playlist item. This
 *  property is only present if the snippet.type is playlistItem.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ActivityContentDetailsPlaylistItem *playlistItem;

/**
 *  The promotedItem object contains details about a resource which is being
 *  promoted. This property is only present if the snippet.type is promotedItem.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ActivityContentDetailsPromotedItem *promotedItem;

/**
 *  The recommendation object contains information about a recommended resource.
 *  This property is only present if the snippet.type is recommendation.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ActivityContentDetailsRecommendation *recommendation;

/**
 *  The social object contains details about a social network post. This
 *  property is only present if the snippet.type is social.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ActivityContentDetailsSocial *social;

/**
 *  The subscription object contains information about a channel that a user
 *  subscribed to. This property is only present if the snippet.type is
 *  subscription.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ActivityContentDetailsSubscription *subscription;

/**
 *  The upload object contains information about the uploaded video. This
 *  property is only present if the snippet.type is upload.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ActivityContentDetailsUpload *upload;

@end


/**
 *  Details about a channel bulletin post.
 */
@interface GTLRYouTube_ActivityContentDetailsBulletin : GTLRObject

/**
 *  The resourceId object contains information that identifies the resource
 *  associated with a bulletin post.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ResourceId *resourceId;

@end


/**
 *  Details about a resource which was added to a channel.
 */
@interface GTLRYouTube_ActivityContentDetailsChannelItem : GTLRObject

/**
 *  The resourceId object contains information that identifies the resource that
 *  was added to the channel.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ResourceId *resourceId;

@end


/**
 *  Information about a resource that received a comment.
 */
@interface GTLRYouTube_ActivityContentDetailsComment : GTLRObject

/**
 *  The resourceId object contains information that identifies the resource
 *  associated with the comment.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ResourceId *resourceId;

@end


/**
 *  Information about a video that was marked as a favorite video.
 */
@interface GTLRYouTube_ActivityContentDetailsFavorite : GTLRObject

/**
 *  The resourceId object contains information that identifies the resource that
 *  was marked as a favorite.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ResourceId *resourceId;

@end


/**
 *  Information about a resource that received a positive (like) rating.
 */
@interface GTLRYouTube_ActivityContentDetailsLike : GTLRObject

/**
 *  The resourceId object contains information that identifies the rated
 *  resource.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ResourceId *resourceId;

@end


/**
 *  Information about a new playlist item.
 */
@interface GTLRYouTube_ActivityContentDetailsPlaylistItem : GTLRObject

/** The value that YouTube uses to uniquely identify the playlist. */
@property(nonatomic, copy, nullable) NSString *playlistId;

/** ID of the item within the playlist. */
@property(nonatomic, copy, nullable) NSString *playlistItemId;

/**
 *  The resourceId object contains information about the resource that was added
 *  to the playlist.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ResourceId *resourceId;

@end


/**
 *  Details about a resource which is being promoted.
 */
@interface GTLRYouTube_ActivityContentDetailsPromotedItem : GTLRObject

/** The URL the client should fetch to request a promoted item. */
@property(nonatomic, copy, nullable) NSString *adTag;

/**
 *  The URL the client should ping to indicate that the user clicked through on
 *  this promoted item.
 */
@property(nonatomic, copy, nullable) NSString *clickTrackingUrl;

/**
 *  The URL the client should ping to indicate that the user was shown this
 *  promoted item.
 */
@property(nonatomic, copy, nullable) NSString *creativeViewUrl;

/**
 *  The type of call-to-action, a message to the user indicating action that can
 *  be taken.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ActivityContentDetailsPromotedItem_CtaType_Unspecified
 *        Value "unspecified"
 *    @arg @c kGTLRYouTube_ActivityContentDetailsPromotedItem_CtaType_VisitAdvertiserSite
 *        Value "visitAdvertiserSite"
 */
@property(nonatomic, copy, nullable) NSString *ctaType;

/**
 *  The custom call-to-action button text. If specified, it will override the
 *  default button text for the cta_type.
 */
@property(nonatomic, copy, nullable) NSString *customCtaButtonText;

/** The text description to accompany the promoted item. */
@property(nonatomic, copy, nullable) NSString *descriptionText;

/**
 *  The URL the client should direct the user to, if the user chooses to visit
 *  the advertiser's website.
 */
@property(nonatomic, copy, nullable) NSString *destinationUrl;

/**
 *  The list of forecasting URLs. The client should ping all of these URLs when
 *  a promoted item is not available, to indicate that a promoted item could
 *  have been shown.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *forecastingUrl;

/**
 *  The list of impression URLs. The client should ping all of these URLs to
 *  indicate that the user was shown this promoted item.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *impressionUrl;

/** The ID that YouTube uses to uniquely identify the promoted video. */
@property(nonatomic, copy, nullable) NSString *videoId;

@end


/**
 *  Information that identifies the recommended resource.
 */
@interface GTLRYouTube_ActivityContentDetailsRecommendation : GTLRObject

/**
 *  The reason that the resource is recommended to the user.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ActivityContentDetailsRecommendation_Reason_Unspecified
 *        Value "unspecified"
 *    @arg @c kGTLRYouTube_ActivityContentDetailsRecommendation_Reason_VideoFavorited
 *        Value "videoFavorited"
 *    @arg @c kGTLRYouTube_ActivityContentDetailsRecommendation_Reason_VideoLiked
 *        Value "videoLiked"
 *    @arg @c kGTLRYouTube_ActivityContentDetailsRecommendation_Reason_VideoWatched
 *        Value "videoWatched"
 */
@property(nonatomic, copy, nullable) NSString *reason;

/**
 *  The resourceId object contains information that identifies the recommended
 *  resource.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ResourceId *resourceId;

/**
 *  The seedResourceId object contains information about the resource that
 *  caused the recommendation.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ResourceId *seedResourceId;

@end


/**
 *  Details about a social network post.
 */
@interface GTLRYouTube_ActivityContentDetailsSocial : GTLRObject

/** The author of the social network post. */
@property(nonatomic, copy, nullable) NSString *author;

/** An image of the post's author. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/** The URL of the social network post. */
@property(nonatomic, copy, nullable) NSString *referenceUrl;

/**
 *  The resourceId object encapsulates information that identifies the resource
 *  associated with a social network post.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ResourceId *resourceId;

/**
 *  The name of the social network.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ActivityContentDetailsSocial_Type_Facebook Value
 *        "facebook"
 *    @arg @c kGTLRYouTube_ActivityContentDetailsSocial_Type_GooglePlus Value
 *        "googlePlus"
 *    @arg @c kGTLRYouTube_ActivityContentDetailsSocial_Type_Twitter Value
 *        "twitter"
 *    @arg @c kGTLRYouTube_ActivityContentDetailsSocial_Type_Unspecified Value
 *        "unspecified"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Information about a channel that a user subscribed to.
 */
@interface GTLRYouTube_ActivityContentDetailsSubscription : GTLRObject

/**
 *  The resourceId object contains information that identifies the resource that
 *  the user subscribed to.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ResourceId *resourceId;

@end


/**
 *  Information about the uploaded video.
 */
@interface GTLRYouTube_ActivityContentDetailsUpload : GTLRObject

/** The ID that YouTube uses to uniquely identify the uploaded video. */
@property(nonatomic, copy, nullable) NSString *videoId;

@end


/**
 *  GTLRYouTube_ActivityListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_ActivityListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of activities, or events, that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_Activity *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#activityListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the previous page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *prevPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  Basic details about an activity, including title, description, thumbnails,
 *  activity type and group.
 */
@interface GTLRYouTube_ActivitySnippet : GTLRObject

/**
 *  The ID that YouTube uses to uniquely identify the channel associated with
 *  the activity.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/** Channel title for the channel responsible for this activity */
@property(nonatomic, copy, nullable) NSString *channelTitle;

/**
 *  The description of the resource primarily associated with the activity.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The group ID associated with the activity. A group ID identifies user events
 *  that are associated with the same user and resource. For example, if a user
 *  rates a video and marks the same video as a favorite, the entries for those
 *  events would have the same group ID in the user's activity feed. In your
 *  user interface, you can avoid repetition by grouping events with the same
 *  groupId value.
 */
@property(nonatomic, copy, nullable) NSString *groupId;

/**
 *  The date and time that the video was uploaded. The value is specified in ISO
 *  8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedAt;

/**
 *  A map of thumbnail images associated with the resource that is primarily
 *  associated with the activity. For each object in the map, the key is the
 *  name of the thumbnail image, and the value is an object that contains other
 *  information about the thumbnail.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ThumbnailDetails *thumbnails;

/** The title of the resource primarily associated with the activity. */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  The type of activity that the resource describes.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ActivitySnippet_Type_Bulletin Value "bulletin"
 *    @arg @c kGTLRYouTube_ActivitySnippet_Type_ChannelItem Value "channelItem"
 *    @arg @c kGTLRYouTube_ActivitySnippet_Type_Comment Value "comment"
 *    @arg @c kGTLRYouTube_ActivitySnippet_Type_Favorite Value "favorite"
 *    @arg @c kGTLRYouTube_ActivitySnippet_Type_Like Value "like"
 *    @arg @c kGTLRYouTube_ActivitySnippet_Type_PlaylistItem Value
 *        "playlistItem"
 *    @arg @c kGTLRYouTube_ActivitySnippet_Type_PromotedItem Value
 *        "promotedItem"
 *    @arg @c kGTLRYouTube_ActivitySnippet_Type_Recommendation Value
 *        "recommendation"
 *    @arg @c kGTLRYouTube_ActivitySnippet_Type_Social Value "social"
 *    @arg @c kGTLRYouTube_ActivitySnippet_Type_Subscription Value
 *        "subscription"
 *    @arg @c kGTLRYouTube_ActivitySnippet_Type_Upload Value "upload"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A caption resource represents a YouTube caption track. A caption track is
 *  associated with exactly one YouTube video.
 */
@interface GTLRYouTube_Caption : GTLRObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube uses to uniquely identify the caption track.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#caption".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The snippet object contains basic details about the caption. */
@property(nonatomic, strong, nullable) GTLRYouTube_CaptionSnippet *snippet;

@end


/**
 *  GTLRYouTube_CaptionListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRYouTube_CaptionListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of captions that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_Caption *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#captionListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  Basic details about a caption track, such as its language and name.
 */
@interface GTLRYouTube_CaptionSnippet : GTLRObject

/**
 *  The type of audio track associated with the caption track.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_CaptionSnippet_AudioTrackType_Commentary Value
 *        "commentary"
 *    @arg @c kGTLRYouTube_CaptionSnippet_AudioTrackType_Descriptive Value
 *        "descriptive"
 *    @arg @c kGTLRYouTube_CaptionSnippet_AudioTrackType_Primary Value "primary"
 *    @arg @c kGTLRYouTube_CaptionSnippet_AudioTrackType_Unknown Value "unknown"
 */
@property(nonatomic, copy, nullable) NSString *audioTrackType;

/**
 *  The reason that YouTube failed to process the caption track. This property
 *  is only present if the state property's value is failed.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_CaptionSnippet_FailureReason_ProcessingFailed Value
 *        "processingFailed"
 *    @arg @c kGTLRYouTube_CaptionSnippet_FailureReason_UnknownFormat Value
 *        "unknownFormat"
 *    @arg @c kGTLRYouTube_CaptionSnippet_FailureReason_UnsupportedFormat Value
 *        "unsupportedFormat"
 */
@property(nonatomic, copy, nullable) NSString *failureReason;

/**
 *  Indicates whether YouTube synchronized the caption track to the audio track
 *  in the video. The value will be true if a sync was explicitly requested when
 *  the caption track was uploaded. For example, when calling the
 *  captions.insert or captions.update methods, you can set the sync parameter
 *  to true to instruct YouTube to sync the uploaded track to the video. If the
 *  value is false, YouTube uses the time codes in the uploaded caption track to
 *  determine when to display captions.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isAutoSynced;

/**
 *  Indicates whether the track contains closed captions for the deaf and hard
 *  of hearing. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isCC;

/**
 *  Indicates whether the caption track is a draft. If the value is true, then
 *  the track is not publicly visible. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDraft;

/**
 *  Indicates whether caption track is formatted for "easy reader," meaning it
 *  is at a third-grade level for language learners. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isEasyReader;

/**
 *  Indicates whether the caption track uses large text for the vision-impaired.
 *  The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isLarge;

/**
 *  The language of the caption track. The property value is a BCP-47 language
 *  tag.
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The date and time when the caption track was last updated. The value is
 *  specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastUpdated;

/**
 *  The name of the caption track. The name is intended to be visible to the
 *  user as an option during playback.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The caption track's status.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_CaptionSnippet_Status_Failed Value "failed"
 *    @arg @c kGTLRYouTube_CaptionSnippet_Status_Serving Value "serving"
 *    @arg @c kGTLRYouTube_CaptionSnippet_Status_Syncing Value "syncing"
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  The caption track's type.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_CaptionSnippet_TrackKind_Asr Value "ASR"
 *    @arg @c kGTLRYouTube_CaptionSnippet_TrackKind_Forced Value "forced"
 *    @arg @c kGTLRYouTube_CaptionSnippet_TrackKind_Standard Value "standard"
 */
@property(nonatomic, copy, nullable) NSString *trackKind;

/**
 *  The ID that YouTube uses to uniquely identify the video associated with the
 *  caption track.
 */
@property(nonatomic, copy, nullable) NSString *videoId;

@end


/**
 *  Brief description of the live stream cdn settings.
 */
@interface GTLRYouTube_CdnSettings : GTLRObject

/** The format of the video stream that you are sending to Youtube. */
@property(nonatomic, copy, nullable) NSString *format;

/**
 *  The frame rate of the inbound video data.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_CdnSettings_FrameRate_Variable Value "variable"
 *    @arg @c kGTLRYouTube_CdnSettings_FrameRate_X30fps Value "30fps"
 *    @arg @c kGTLRYouTube_CdnSettings_FrameRate_X60fps Value "60fps"
 */
@property(nonatomic, copy, nullable) NSString *frameRate;

/**
 *  The ingestionInfo object contains information that YouTube provides that you
 *  need to transmit your RTMP or HTTP stream to YouTube.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_IngestionInfo *ingestionInfo;

/**
 *  The method or protocol used to transmit the video stream.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_CdnSettings_IngestionType_Dash Value "dash"
 *    @arg @c kGTLRYouTube_CdnSettings_IngestionType_Rtmp Value "rtmp"
 */
@property(nonatomic, copy, nullable) NSString *ingestionType;

/**
 *  The resolution of the inbound video data.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_CdnSettings_Resolution_Variable Value "variable"
 *    @arg @c kGTLRYouTube_CdnSettings_Resolution_X1080p Value "1080p"
 *    @arg @c kGTLRYouTube_CdnSettings_Resolution_X1440p Value "1440p"
 *    @arg @c kGTLRYouTube_CdnSettings_Resolution_X2160p Value "2160p"
 *    @arg @c kGTLRYouTube_CdnSettings_Resolution_X240p Value "240p"
 *    @arg @c kGTLRYouTube_CdnSettings_Resolution_X360p Value "360p"
 *    @arg @c kGTLRYouTube_CdnSettings_Resolution_X480p Value "480p"
 *    @arg @c kGTLRYouTube_CdnSettings_Resolution_X720p Value "720p"
 */
@property(nonatomic, copy, nullable) NSString *resolution;

@end


/**
 *  A channel resource contains information about a YouTube channel.
 */
@interface GTLRYouTube_Channel : GTLRObject

/**
 *  The auditionDetails object encapsulates channel data that is relevant for
 *  YouTube Partners during the audition process.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelAuditDetails *auditDetails;

/**
 *  The brandingSettings object encapsulates information about the branding of
 *  the channel.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelBrandingSettings *brandingSettings;

/**
 *  The contentDetails object encapsulates information about the channel's
 *  content.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelContentDetails *contentDetails;

/**
 *  The contentOwnerDetails object encapsulates channel data that is relevant
 *  for YouTube Partners linked with the channel.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelContentOwnerDetails *contentOwnerDetails;

/**
 *  The conversionPings object encapsulates information about conversion pings
 *  that need to be respected by the channel.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelConversionPings *conversionPings;

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube uses to uniquely identify the channel.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The invideoPromotion object encapsulates information about promotion
 *  campaign associated with the channel.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_InvideoPromotion *invideoPromotion;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#channel".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Localizations for different languages */
@property(nonatomic, strong, nullable) GTLRYouTube_Channel_Localizations *localizations;

/**
 *  The snippet object contains basic details about the channel, such as its
 *  title, description, and thumbnail images.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelSnippet *snippet;

/** The statistics object encapsulates statistics for the channel. */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelStatistics *statistics;

/**
 *  The status object encapsulates information about the privacy status of the
 *  channel.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelStatus *status;

/**
 *  The topicDetails object encapsulates information about Freebase topics
 *  associated with the channel.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelTopicDetails *topicDetails;

@end


/**
 *  Localizations for different languages
 *
 *  @note This class is documented as having more properties of
 *        GTLRYouTube_ChannelLocalization. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRYouTube_Channel_Localizations : GTLRObject
@end


/**
 *  The auditDetails object encapsulates channel data that is relevant for
 *  YouTube Partners during the audit process.
 */
@interface GTLRYouTube_ChannelAuditDetails : GTLRObject

/**
 *  Whether or not the channel respects the community guidelines.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *communityGuidelinesGoodStanding;

/**
 *  Whether or not the channel has any unresolved claims.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *contentIdClaimsGoodStanding;

/**
 *  Whether or not the channel has any copyright strikes.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *copyrightStrikesGoodStanding;

/**
 *  Describes the general state of the channel. This field will always show if
 *  there are any issues whatsoever with the channel. Currently this field
 *  represents the result of the logical and operation over the community
 *  guidelines good standing, the copyright strikes good standing and the
 *  content ID claims good standing, but this may change in the future.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *overallGoodStanding;

@end


/**
 *  A channel banner returned as the response to a channel_banner.insert call.
 */
@interface GTLRYouTube_ChannelBannerResource : GTLRObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#channelBannerResource".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The URL of this banner image. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Branding properties of a YouTube channel.
 */
@interface GTLRYouTube_ChannelBrandingSettings : GTLRObject

/** Branding properties for the channel view. */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelSettings *channel;

/** Additional experimental branding properties. */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_PropertyValue *> *hints;

/** Branding properties for branding images. */
@property(nonatomic, strong, nullable) GTLRYouTube_ImageSettings *image;

/** Branding properties for the watch page. */
@property(nonatomic, strong, nullable) GTLRYouTube_WatchSettings *watch;

@end


/**
 *  Details about the content of a channel.
 */
@interface GTLRYouTube_ChannelContentDetails : GTLRObject

@property(nonatomic, strong, nullable) GTLRYouTube_ChannelContentDetails_RelatedPlaylists *relatedPlaylists;

@end


/**
 *  GTLRYouTube_ChannelContentDetails_RelatedPlaylists
 */
@interface GTLRYouTube_ChannelContentDetails_RelatedPlaylists : GTLRObject

/**
 *  The ID of the playlist that contains the channel"s favorite videos. Use the
 *  playlistItems.insert and playlistItems.delete to add or remove items from
 *  that list.
 */
@property(nonatomic, copy, nullable) NSString *favorites;

/**
 *  The ID of the playlist that contains the channel"s liked videos. Use the
 *  playlistItems.insert and playlistItems.delete to add or remove items from
 *  that list.
 */
@property(nonatomic, copy, nullable) NSString *likes;

/**
 *  The ID of the playlist that contains the channel"s uploaded videos. Use the
 *  videos.insert method to upload new videos and the videos.delete method to
 *  delete previously uploaded videos.
 */
@property(nonatomic, copy, nullable) NSString *uploads;

/**
 *  The ID of the playlist that contains the channel"s watch history. Use the
 *  playlistItems.insert and playlistItems.delete to add or remove items from
 *  that list.
 */
@property(nonatomic, copy, nullable) NSString *watchHistory;

/**
 *  The ID of the playlist that contains the channel"s watch later playlist. Use
 *  the playlistItems.insert and playlistItems.delete to add or remove items
 *  from that list.
 */
@property(nonatomic, copy, nullable) NSString *watchLater;

@end


/**
 *  The contentOwnerDetails object encapsulates channel data that is relevant
 *  for YouTube Partners linked with the channel.
 */
@interface GTLRYouTube_ChannelContentOwnerDetails : GTLRObject

/** The ID of the content owner linked to the channel. */
@property(nonatomic, copy, nullable) NSString *contentOwner;

/**
 *  The date and time of when the channel was linked to the content owner. The
 *  value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *timeLinked;

@end


/**
 *  Pings that the app shall fire (authenticated by biscotti cookie). Each ping
 *  has a context, in which the app must fire the ping, and a url identifying
 *  the ping.
 */
@interface GTLRYouTube_ChannelConversionPing : GTLRObject

/**
 *  Defines the context of the ping.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ChannelConversionPing_Context_Cview Value "cview"
 *    @arg @c kGTLRYouTube_ChannelConversionPing_Context_Subscribe Value
 *        "subscribe"
 *    @arg @c kGTLRYouTube_ChannelConversionPing_Context_Unsubscribe Value
 *        "unsubscribe"
 */
@property(nonatomic, copy, nullable) NSString *context;

/**
 *  The url (without the schema) that the player shall send the ping to. It's at
 *  caller's descretion to decide which schema to use (http vs https) Example of
 *  a returned url: //googleads.g.doubleclick.net/pagead/
 *  viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D
 *  cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default The caller must append
 *  biscotti authentication (ms param in case of mobile, for example) to this
 *  ping.
 */
@property(nonatomic, copy, nullable) NSString *conversionUrl;

@end


/**
 *  The conversionPings object encapsulates information about conversion pings
 *  that need to be respected by the channel.
 */
@interface GTLRYouTube_ChannelConversionPings : GTLRObject

/**
 *  Pings that the app shall fire (authenticated by biscotti cookie). Each ping
 *  has a context, in which the app must fire the ping, and a url identifying
 *  the ping.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_ChannelConversionPing *> *pings;

@end


/**
 *  GTLRYouTube_ChannelListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_ChannelListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of channels that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_Channel *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#channelListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the previous page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *prevPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  Channel localization setting
 */
@interface GTLRYouTube_ChannelLocalization : GTLRObject

/**
 *  The localized strings for channel's description.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The localized strings for channel's title. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  GTLRYouTube_ChannelProfileDetails
 */
@interface GTLRYouTube_ChannelProfileDetails : GTLRObject

/** The YouTube channel ID. */
@property(nonatomic, copy, nullable) NSString *channelId;

/** The channel's URL. */
@property(nonatomic, copy, nullable) NSString *channelUrl;

/** The channel's display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** The channels's avatar URL. */
@property(nonatomic, copy, nullable) NSString *profileImageUrl;

@end


/**
 *  GTLRYouTube_ChannelSection
 */
@interface GTLRYouTube_ChannelSection : GTLRObject

/**
 *  The contentDetails object contains details about the channel section
 *  content, such as a list of playlists or channels featured in the section.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelSectionContentDetails *contentDetails;

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube uses to uniquely identify the channel section.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#channelSection".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Localizations for different languages */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelSection_Localizations *localizations;

/**
 *  The snippet object contains basic details about the channel section, such as
 *  its type, style and title.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelSectionSnippet *snippet;

/**
 *  The targeting object contains basic targeting settings about the channel
 *  section.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelSectionTargeting *targeting;

@end


/**
 *  Localizations for different languages
 *
 *  @note This class is documented as having more properties of
 *        GTLRYouTube_ChannelSectionLocalization. Use @c -additionalJSONKeys and
 *        @c -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRYouTube_ChannelSection_Localizations : GTLRObject
@end


/**
 *  Details about a channelsection, including playlists and channels.
 */
@interface GTLRYouTube_ChannelSectionContentDetails : GTLRObject

/** The channel ids for type multiple_channels. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *channels;

/**
 *  The playlist ids for type single_playlist and multiple_playlists. For
 *  singlePlaylist, only one playlistId is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *playlists;

@end


/**
 *  GTLRYouTube_ChannelSectionListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRYouTube_ChannelSectionListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of ChannelSections that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_ChannelSection *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#channelSectionListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  ChannelSection localization setting
 */
@interface GTLRYouTube_ChannelSectionLocalization : GTLRObject

/** The localized strings for channel section's title. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Basic details about a channel section, including title, style and position.
 */
@interface GTLRYouTube_ChannelSectionSnippet : GTLRObject

/**
 *  The ID that YouTube uses to uniquely identify the channel that published the
 *  channel section.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/** The language of the channel section's default title and description. */
@property(nonatomic, copy, nullable) NSString *defaultLanguage;

/** Localized title, read-only. */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelSectionLocalization *localized;

/**
 *  The position of the channel section in the channel.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *position;

/**
 *  The style of the channel section.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Style_ChannelsectionStyleUndefined
 *        Value "channelsectionStyleUndefined"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Style_HorizontalRow Value
 *        "horizontalRow"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Style_VerticalList Value
 *        "verticalList"
 */
@property(nonatomic, copy, nullable) NSString *style;

/**
 *  The channel section's title for multiple_playlists and multiple_channels.
 */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  The type of the channel section.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_AllPlaylists Value
 *        "allPlaylists"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_ChannelsectionTypeUndefined
 *        Value "channelsectionTypeUndefined"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_CompletedEvents Value
 *        "completedEvents"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_LikedPlaylists Value
 *        "likedPlaylists"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_Likes Value "likes"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_LiveEvents Value
 *        "liveEvents"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_MultipleChannels Value
 *        "multipleChannels"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_MultiplePlaylists Value
 *        "multiplePlaylists"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_PopularUploads Value
 *        "popularUploads"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_PostedPlaylists Value
 *        "postedPlaylists"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_PostedVideos Value
 *        "postedVideos"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_RecentActivity Value
 *        "recentActivity"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_RecentPosts Value
 *        "recentPosts"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_RecentUploads Value
 *        "recentUploads"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_SinglePlaylist Value
 *        "singlePlaylist"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_Subscriptions Value
 *        "subscriptions"
 *    @arg @c kGTLRYouTube_ChannelSectionSnippet_Type_UpcomingEvents Value
 *        "upcomingEvents"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  ChannelSection targeting setting.
 */
@interface GTLRYouTube_ChannelSectionTargeting : GTLRObject

/** The country the channel section is targeting. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *countries;

/** The language the channel section is targeting. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *languages;

/** The region the channel section is targeting. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *regions;

@end


/**
 *  Branding properties for the channel view.
 */
@interface GTLRYouTube_ChannelSettings : GTLRObject

/** The country of the channel. */
@property(nonatomic, copy, nullable) NSString *country;

@property(nonatomic, copy, nullable) NSString *defaultLanguage;

/** Which content tab users should see when viewing the channel. */
@property(nonatomic, copy, nullable) NSString *defaultTab;

/**
 *  Specifies the channel description.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Title for the featured channels tab. */
@property(nonatomic, copy, nullable) NSString *featuredChannelsTitle;

/** The list of featured channels. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *featuredChannelsUrls;

/** Lists keywords associated with the channel, comma-separated. */
@property(nonatomic, copy, nullable) NSString *keywords;

/**
 *  Whether user-submitted comments left on the channel page need to be approved
 *  by the channel owner to be publicly visible.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *moderateComments;

/** A prominent color that can be rendered on this channel page. */
@property(nonatomic, copy, nullable) NSString *profileColor;

/**
 *  Whether the tab to browse the videos should be displayed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *showBrowseView;

/**
 *  Whether related channels should be proposed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *showRelatedChannels;

/** Specifies the channel title. */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  The ID for a Google Analytics account to track and measure traffic to the
 *  channels.
 */
@property(nonatomic, copy, nullable) NSString *trackingAnalyticsAccountId;

/** The trailer of the channel, for users that are not subscribers. */
@property(nonatomic, copy, nullable) NSString *unsubscribedTrailer;

@end


/**
 *  Basic details about a channel, including title, description and thumbnails.
 */
@interface GTLRYouTube_ChannelSnippet : GTLRObject

/** The country of the channel. */
@property(nonatomic, copy, nullable) NSString *country;

/** The custom url of the channel. */
@property(nonatomic, copy, nullable) NSString *customUrl;

/** The language of the channel's default title and description. */
@property(nonatomic, copy, nullable) NSString *defaultLanguage;

/**
 *  The description of the channel.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Localized title and description, read-only. */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelLocalization *localized;

/**
 *  The date and time that the channel was created. The value is specified in
 *  ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedAt;

/**
 *  A map of thumbnail images associated with the channel. For each object in
 *  the map, the key is the name of the thumbnail image, and the value is an
 *  object that contains other information about the thumbnail.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ThumbnailDetails *thumbnails;

/** The channel's title. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Statistics about a channel: number of subscribers, number of videos in the
 *  channel, etc.
 */
@interface GTLRYouTube_ChannelStatistics : GTLRObject

/**
 *  The number of comments for the channel.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *commentCount;

/**
 *  Whether or not the number of subscribers is shown for this user.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hiddenSubscriberCount;

/**
 *  The number of subscribers that the channel has.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *subscriberCount;

/**
 *  The number of videos uploaded to the channel.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *videoCount;

/**
 *  The number of times the channel has been viewed.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *viewCount;

@end


/**
 *  JSON template for the status part of a channel.
 */
@interface GTLRYouTube_ChannelStatus : GTLRObject

/**
 *  If true, then the user is linked to either a YouTube username or G+ account.
 *  Otherwise, the user doesn't have a public YouTube identity.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isLinked;

/**
 *  The long uploads status of this channel. See
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ChannelStatus_LongUploadsStatus_Allowed Value
 *        "allowed"
 *    @arg @c kGTLRYouTube_ChannelStatus_LongUploadsStatus_Disallowed Value
 *        "disallowed"
 *    @arg @c kGTLRYouTube_ChannelStatus_LongUploadsStatus_Eligible Value
 *        "eligible"
 *    @arg @c kGTLRYouTube_ChannelStatus_LongUploadsStatus_LongUploadsUnspecified
 *        Value "longUploadsUnspecified"
 */
@property(nonatomic, copy, nullable) NSString *longUploadsStatus;

/**
 *  Privacy status of the channel.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ChannelStatus_PrivacyStatus_Private Value "private"
 *    @arg @c kGTLRYouTube_ChannelStatus_PrivacyStatus_Public Value "public"
 *    @arg @c kGTLRYouTube_ChannelStatus_PrivacyStatus_Unlisted Value "unlisted"
 */
@property(nonatomic, copy, nullable) NSString *privacyStatus;

@end


/**
 *  Freebase topic information related to the channel.
 */
@interface GTLRYouTube_ChannelTopicDetails : GTLRObject

/** A list of Wikipedia URLs that describe the channel's content. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *topicCategories;

/**
 *  A list of Freebase topic IDs associated with the channel. You can retrieve
 *  information about each topic using the Freebase Topic API.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *topicIds;

@end


/**
 *  A comment represents a single YouTube comment.
 */
@interface GTLRYouTube_Comment : GTLRObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube uses to uniquely identify the comment.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#comment".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The snippet object contains basic details about the comment. */
@property(nonatomic, strong, nullable) GTLRYouTube_CommentSnippet *snippet;

@end


/**
 *  GTLRYouTube_CommentListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_CommentListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of comments that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_Comment *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#commentListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;
@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  Basic details about a comment, such as its author and text.
 */
@interface GTLRYouTube_CommentSnippet : GTLRObject

/**
 *  The id of the author's YouTube channel, if any.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id authorChannelId;

/** Link to the author's YouTube channel, if any. */
@property(nonatomic, copy, nullable) NSString *authorChannelUrl;

/** The name of the user who posted the comment. */
@property(nonatomic, copy, nullable) NSString *authorDisplayName;

/** The URL for the avatar of the user who posted the comment. */
@property(nonatomic, copy, nullable) NSString *authorProfileImageUrl;

/**
 *  Whether the current viewer can rate this comment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canRate;

/**
 *  The id of the corresponding YouTube channel. In case of a channel comment
 *  this is the channel the comment refers to. In case of a video comment it's
 *  the video's channel.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  The total number of likes this comment has received.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *likeCount;

/**
 *  The comment's moderation status. Will not be set if the comments were
 *  requested through the id filter.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_CommentSnippet_ModerationStatus_HeldForReview Value
 *        "heldForReview"
 *    @arg @c kGTLRYouTube_CommentSnippet_ModerationStatus_LikelySpam Value
 *        "likelySpam"
 *    @arg @c kGTLRYouTube_CommentSnippet_ModerationStatus_Published Value
 *        "published"
 *    @arg @c kGTLRYouTube_CommentSnippet_ModerationStatus_Rejected Value
 *        "rejected"
 */
@property(nonatomic, copy, nullable) NSString *moderationStatus;

/** The unique id of the parent comment, only set for replies. */
@property(nonatomic, copy, nullable) NSString *parentId;

/**
 *  The date and time when the comment was orignally published. The value is
 *  specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedAt;

/**
 *  The comment's text. The format is either plain text or HTML dependent on
 *  what has been requested. Even the plain text representation may differ from
 *  the text originally posted in that it may replace video links with video
 *  titles etc.
 */
@property(nonatomic, copy, nullable) NSString *textDisplay;

/**
 *  The comment's original raw text as initially posted or last updated. The
 *  original text will only be returned if it is accessible to the viewer, which
 *  is only guaranteed if the viewer is the comment's author.
 */
@property(nonatomic, copy, nullable) NSString *textOriginal;

/**
 *  The date and time when was last updated . The value is specified in ISO 8601
 *  (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updatedAt;

/** The ID of the video the comment refers to, if any. */
@property(nonatomic, copy, nullable) NSString *videoId;

/**
 *  The rating the viewer has given to this comment. For the time being this
 *  will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This
 *  may change in the future.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_CommentSnippet_ViewerRating_Dislike Value "dislike"
 *    @arg @c kGTLRYouTube_CommentSnippet_ViewerRating_Like Value "like"
 *    @arg @c kGTLRYouTube_CommentSnippet_ViewerRating_None Value "none"
 *    @arg @c kGTLRYouTube_CommentSnippet_ViewerRating_Unspecified Value
 *        "unspecified"
 */
@property(nonatomic, copy, nullable) NSString *viewerRating;

@end


/**
 *  A comment thread represents information that applies to a top level comment
 *  and all its replies. It can also include the top level comment itself and
 *  some of the replies.
 */
@interface GTLRYouTube_CommentThread : GTLRObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube uses to uniquely identify the comment thread.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#commentThread".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The replies object contains a limited number of replies (if any) to the top
 *  level comment found in the snippet.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_CommentThreadReplies *replies;

/**
 *  The snippet object contains basic details about the comment thread and also
 *  the top level comment.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_CommentThreadSnippet *snippet;

@end


/**
 *  GTLRYouTube_CommentThreadListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_CommentThreadListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of comment threads that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_CommentThread *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#commentThreadListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;
@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  Comments written in (direct or indirect) reply to the top level comment.
 */
@interface GTLRYouTube_CommentThreadReplies : GTLRObject

/**
 *  A limited number of replies. Unless the number of replies returned equals
 *  total_reply_count in the snippet the returned replies are only a subset of
 *  the total number of replies.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_Comment *> *comments;

@end


/**
 *  Basic details about a comment thread.
 */
@interface GTLRYouTube_CommentThreadSnippet : GTLRObject

/**
 *  Whether the current viewer of the thread can reply to it. This is viewer
 *  specific - other viewers may see a different value for this field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canReply;

/**
 *  The YouTube channel the comments in the thread refer to or the channel with
 *  the video the comments refer to. If video_id isn't set the comments refer to
 *  the channel itself.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  Whether the thread (and therefore all its comments) is visible to all
 *  YouTube users.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isPublic;

/** The top level comment of this thread. */
@property(nonatomic, strong, nullable) GTLRYouTube_Comment *topLevelComment;

/**
 *  The total number of replies (not including the top level comment).
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalReplyCount;

/**
 *  The ID of the video the comments refer to, if any. No video_id implies a
 *  channel discussion comment.
 */
@property(nonatomic, copy, nullable) NSString *videoId;

@end


/**
 *  Ratings schemes. The country-specific ratings are mostly for movies and
 *  shows. NEXT_ID: 71
 */
@interface GTLRYouTube_ContentRating : GTLRObject

/**
 *  The video's Australian Classification Board (ACB) or Australian
 *  Communications and Media Authority (ACMA) rating. ACMA ratings are used to
 *  classify children's television programming.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_AcbRating_AcbC Value "acbC"
 *    @arg @c kGTLRYouTube_ContentRating_AcbRating_AcbE Value "acbE"
 *    @arg @c kGTLRYouTube_ContentRating_AcbRating_AcbG Value "acbG"
 *    @arg @c kGTLRYouTube_ContentRating_AcbRating_AcbM Value "acbM"
 *    @arg @c kGTLRYouTube_ContentRating_AcbRating_AcbMa15plus Value
 *        "acbMa15plus"
 *    @arg @c kGTLRYouTube_ContentRating_AcbRating_AcbP Value "acbP"
 *    @arg @c kGTLRYouTube_ContentRating_AcbRating_AcbPg Value "acbPg"
 *    @arg @c kGTLRYouTube_ContentRating_AcbRating_AcbR18plus Value "acbR18plus"
 *    @arg @c kGTLRYouTube_ContentRating_AcbRating_AcbUnrated Value "acbUnrated"
 */
@property(nonatomic, copy, nullable) NSString *acbRating;

/**
 *  The video's rating from Italy's Autorità per le Garanzie nelle Comunicazioni
 *  (AGCOM).
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_AgcomRating_AgcomT Value "agcomT"
 *    @arg @c kGTLRYouTube_ContentRating_AgcomRating_AgcomUnrated Value
 *        "agcomUnrated"
 *    @arg @c kGTLRYouTube_ContentRating_AgcomRating_AgcomVm14 Value "agcomVm14"
 *    @arg @c kGTLRYouTube_ContentRating_AgcomRating_AgcomVm18 Value "agcomVm18"
 */
@property(nonatomic, copy, nullable) NSString *agcomRating;

/**
 *  The video's Anatel (Asociación Nacional de Televisión) rating for Chilean
 *  television.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_AnatelRating_AnatelA Value "anatelA"
 *    @arg @c kGTLRYouTube_ContentRating_AnatelRating_AnatelF Value "anatelF"
 *    @arg @c kGTLRYouTube_ContentRating_AnatelRating_AnatelI Value "anatelI"
 *    @arg @c kGTLRYouTube_ContentRating_AnatelRating_AnatelI10 Value
 *        "anatelI10"
 *    @arg @c kGTLRYouTube_ContentRating_AnatelRating_AnatelI12 Value
 *        "anatelI12"
 *    @arg @c kGTLRYouTube_ContentRating_AnatelRating_AnatelI7 Value "anatelI7"
 *    @arg @c kGTLRYouTube_ContentRating_AnatelRating_AnatelR Value "anatelR"
 *    @arg @c kGTLRYouTube_ContentRating_AnatelRating_AnatelUnrated Value
 *        "anatelUnrated"
 */
@property(nonatomic, copy, nullable) NSString *anatelRating;

/**
 *  The video's British Board of Film Classification (BBFC) rating.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_BbfcRating_Bbfc12 Value "bbfc12"
 *    @arg @c kGTLRYouTube_ContentRating_BbfcRating_Bbfc12a Value "bbfc12a"
 *    @arg @c kGTLRYouTube_ContentRating_BbfcRating_Bbfc15 Value "bbfc15"
 *    @arg @c kGTLRYouTube_ContentRating_BbfcRating_Bbfc18 Value "bbfc18"
 *    @arg @c kGTLRYouTube_ContentRating_BbfcRating_BbfcPg Value "bbfcPg"
 *    @arg @c kGTLRYouTube_ContentRating_BbfcRating_BbfcR18 Value "bbfcR18"
 *    @arg @c kGTLRYouTube_ContentRating_BbfcRating_BbfcU Value "bbfcU"
 *    @arg @c kGTLRYouTube_ContentRating_BbfcRating_BbfcUnrated Value
 *        "bbfcUnrated"
 */
@property(nonatomic, copy, nullable) NSString *bbfcRating;

/**
 *  The video's rating from Thailand's Board of Film and Video Censors.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_BfvcRating_Bfvc13 Value "bfvc13"
 *    @arg @c kGTLRYouTube_ContentRating_BfvcRating_Bfvc15 Value "bfvc15"
 *    @arg @c kGTLRYouTube_ContentRating_BfvcRating_Bfvc18 Value "bfvc18"
 *    @arg @c kGTLRYouTube_ContentRating_BfvcRating_Bfvc20 Value "bfvc20"
 *    @arg @c kGTLRYouTube_ContentRating_BfvcRating_BfvcB Value "bfvcB"
 *    @arg @c kGTLRYouTube_ContentRating_BfvcRating_BfvcE Value "bfvcE"
 *    @arg @c kGTLRYouTube_ContentRating_BfvcRating_BfvcG Value "bfvcG"
 *    @arg @c kGTLRYouTube_ContentRating_BfvcRating_BfvcUnrated Value
 *        "bfvcUnrated"
 */
@property(nonatomic, copy, nullable) NSString *bfvcRating;

/**
 *  The video's rating from the Austrian Board of Media Classification
 *  (Bundesministerium für Unterricht, Kunst und Kultur).
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_BmukkRating_Bmukk10 Value "bmukk10"
 *    @arg @c kGTLRYouTube_ContentRating_BmukkRating_Bmukk12 Value "bmukk12"
 *    @arg @c kGTLRYouTube_ContentRating_BmukkRating_Bmukk14 Value "bmukk14"
 *    @arg @c kGTLRYouTube_ContentRating_BmukkRating_Bmukk16 Value "bmukk16"
 *    @arg @c kGTLRYouTube_ContentRating_BmukkRating_Bmukk6 Value "bmukk6"
 *    @arg @c kGTLRYouTube_ContentRating_BmukkRating_Bmukk8 Value "bmukk8"
 *    @arg @c kGTLRYouTube_ContentRating_BmukkRating_BmukkAa Value "bmukkAa"
 *    @arg @c kGTLRYouTube_ContentRating_BmukkRating_BmukkUnrated Value
 *        "bmukkUnrated"
 */
@property(nonatomic, copy, nullable) NSString *bmukkRating;

/**
 *  The video's rating from the Canadian Radio-Television and Telecommunications
 *  Commission (CRTC) for Canadian French-language broadcasts. For more
 *  information, see the Canadian Broadcast Standards Council website.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_CatvfrRating_Catvfr13plus Value
 *        "catvfr13plus"
 *    @arg @c kGTLRYouTube_ContentRating_CatvfrRating_Catvfr16plus Value
 *        "catvfr16plus"
 *    @arg @c kGTLRYouTube_ContentRating_CatvfrRating_Catvfr18plus Value
 *        "catvfr18plus"
 *    @arg @c kGTLRYouTube_ContentRating_CatvfrRating_Catvfr8plus Value
 *        "catvfr8plus"
 *    @arg @c kGTLRYouTube_ContentRating_CatvfrRating_CatvfrG Value "catvfrG"
 *    @arg @c kGTLRYouTube_ContentRating_CatvfrRating_CatvfrUnrated Value
 *        "catvfrUnrated"
 */
@property(nonatomic, copy, nullable) NSString *catvfrRating;

/**
 *  Rating system for Canadian TV - Canadian TV Classification System The
 *  video's rating from the Canadian Radio-Television and Telecommunications
 *  Commission (CRTC) for Canadian English-language broadcasts. For more
 *  information, see the Canadian Broadcast Standards Council website.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_CatvRating_Catv14plus Value
 *        "catv14plus"
 *    @arg @c kGTLRYouTube_ContentRating_CatvRating_Catv18plus Value
 *        "catv18plus"
 *    @arg @c kGTLRYouTube_ContentRating_CatvRating_CatvC Value "catvC"
 *    @arg @c kGTLRYouTube_ContentRating_CatvRating_CatvC8 Value "catvC8"
 *    @arg @c kGTLRYouTube_ContentRating_CatvRating_CatvG Value "catvG"
 *    @arg @c kGTLRYouTube_ContentRating_CatvRating_CatvPg Value "catvPg"
 *    @arg @c kGTLRYouTube_ContentRating_CatvRating_CatvUnrated Value
 *        "catvUnrated"
 */
@property(nonatomic, copy, nullable) NSString *catvRating;

/**
 *  The video's Central Board of Film Certification (CBFC - India) rating.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_CbfcRating_CbfcA Value "cbfcA"
 *    @arg @c kGTLRYouTube_ContentRating_CbfcRating_CbfcS Value "cbfcS"
 *    @arg @c kGTLRYouTube_ContentRating_CbfcRating_CbfcU Value "cbfcU"
 *    @arg @c kGTLRYouTube_ContentRating_CbfcRating_CbfcUA Value "cbfcUA"
 *    @arg @c kGTLRYouTube_ContentRating_CbfcRating_CbfcUnrated Value
 *        "cbfcUnrated"
 */
@property(nonatomic, copy, nullable) NSString *cbfcRating;

/**
 *  The video's Consejo de Calificación Cinematográfica (Chile) rating.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_CccRating_Ccc14 Value "ccc14"
 *    @arg @c kGTLRYouTube_ContentRating_CccRating_Ccc18 Value "ccc18"
 *    @arg @c kGTLRYouTube_ContentRating_CccRating_Ccc18s Value "ccc18s"
 *    @arg @c kGTLRYouTube_ContentRating_CccRating_Ccc18v Value "ccc18v"
 *    @arg @c kGTLRYouTube_ContentRating_CccRating_Ccc6 Value "ccc6"
 *    @arg @c kGTLRYouTube_ContentRating_CccRating_CccTe Value "cccTe"
 *    @arg @c kGTLRYouTube_ContentRating_CccRating_CccUnrated Value "cccUnrated"
 */
@property(nonatomic, copy, nullable) NSString *cccRating;

/**
 *  The video's rating from Portugal's Comissão de Classificação de
 *  Espect´culos.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_CceRating_CceM12 Value "cceM12"
 *    @arg @c kGTLRYouTube_ContentRating_CceRating_CceM14 Value "cceM14"
 *    @arg @c kGTLRYouTube_ContentRating_CceRating_CceM16 Value "cceM16"
 *    @arg @c kGTLRYouTube_ContentRating_CceRating_CceM18 Value "cceM18"
 *    @arg @c kGTLRYouTube_ContentRating_CceRating_CceM4 Value "cceM4"
 *    @arg @c kGTLRYouTube_ContentRating_CceRating_CceM6 Value "cceM6"
 *    @arg @c kGTLRYouTube_ContentRating_CceRating_CceUnrated Value "cceUnrated"
 */
@property(nonatomic, copy, nullable) NSString *cceRating;

/**
 *  The video's rating in Switzerland.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_ChfilmRating_Chfilm0 Value "chfilm0"
 *    @arg @c kGTLRYouTube_ContentRating_ChfilmRating_Chfilm12 Value "chfilm12"
 *    @arg @c kGTLRYouTube_ContentRating_ChfilmRating_Chfilm16 Value "chfilm16"
 *    @arg @c kGTLRYouTube_ContentRating_ChfilmRating_Chfilm18 Value "chfilm18"
 *    @arg @c kGTLRYouTube_ContentRating_ChfilmRating_Chfilm6 Value "chfilm6"
 *    @arg @c kGTLRYouTube_ContentRating_ChfilmRating_ChfilmUnrated Value
 *        "chfilmUnrated"
 */
@property(nonatomic, copy, nullable) NSString *chfilmRating;

/**
 *  The video's Canadian Home Video Rating System (CHVRS) rating.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_ChvrsRating_Chvrs14a Value "chvrs14a"
 *    @arg @c kGTLRYouTube_ContentRating_ChvrsRating_Chvrs18a Value "chvrs18a"
 *    @arg @c kGTLRYouTube_ContentRating_ChvrsRating_ChvrsE Value "chvrsE"
 *    @arg @c kGTLRYouTube_ContentRating_ChvrsRating_ChvrsG Value "chvrsG"
 *    @arg @c kGTLRYouTube_ContentRating_ChvrsRating_ChvrsPg Value "chvrsPg"
 *    @arg @c kGTLRYouTube_ContentRating_ChvrsRating_ChvrsR Value "chvrsR"
 *    @arg @c kGTLRYouTube_ContentRating_ChvrsRating_ChvrsUnrated Value
 *        "chvrsUnrated"
 */
@property(nonatomic, copy, nullable) NSString *chvrsRating;

/**
 *  The video's rating from the Commission de Contrôle des Films (Belgium).
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_CicfRating_CicfE Value "cicfE"
 *    @arg @c kGTLRYouTube_ContentRating_CicfRating_CicfKntEna Value
 *        "cicfKntEna"
 *    @arg @c kGTLRYouTube_ContentRating_CicfRating_CicfKtEa Value "cicfKtEa"
 *    @arg @c kGTLRYouTube_ContentRating_CicfRating_CicfUnrated Value
 *        "cicfUnrated"
 */
@property(nonatomic, copy, nullable) NSString *cicfRating;

/**
 *  The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI
 *  (CNA).
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_CnaRating_Cna12 Value "cna12"
 *    @arg @c kGTLRYouTube_ContentRating_CnaRating_Cna15 Value "cna15"
 *    @arg @c kGTLRYouTube_ContentRating_CnaRating_Cna18 Value "cna18"
 *    @arg @c kGTLRYouTube_ContentRating_CnaRating_Cna18plus Value "cna18plus"
 *    @arg @c kGTLRYouTube_ContentRating_CnaRating_CnaAp Value "cnaAp"
 *    @arg @c kGTLRYouTube_ContentRating_CnaRating_CnaUnrated Value "cnaUnrated"
 */
@property(nonatomic, copy, nullable) NSString *cnaRating;

/**
 *  Rating system in France - Commission de classification cinematographique
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_CncRating_Cnc10 Value "cnc10"
 *    @arg @c kGTLRYouTube_ContentRating_CncRating_Cnc12 Value "cnc12"
 *    @arg @c kGTLRYouTube_ContentRating_CncRating_Cnc16 Value "cnc16"
 *    @arg @c kGTLRYouTube_ContentRating_CncRating_Cnc18 Value "cnc18"
 *    @arg @c kGTLRYouTube_ContentRating_CncRating_CncE Value "cncE"
 *    @arg @c kGTLRYouTube_ContentRating_CncRating_CncT Value "cncT"
 *    @arg @c kGTLRYouTube_ContentRating_CncRating_CncUnrated Value "cncUnrated"
 */
@property(nonatomic, copy, nullable) NSString *cncRating;

/**
 *  The video's rating from France's Conseil supérieur de l?audiovisuel, which
 *  rates broadcast content.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_CsaRating_Csa10 Value "csa10"
 *    @arg @c kGTLRYouTube_ContentRating_CsaRating_Csa12 Value "csa12"
 *    @arg @c kGTLRYouTube_ContentRating_CsaRating_Csa16 Value "csa16"
 *    @arg @c kGTLRYouTube_ContentRating_CsaRating_Csa18 Value "csa18"
 *    @arg @c kGTLRYouTube_ContentRating_CsaRating_CsaInterdiction Value
 *        "csaInterdiction"
 *    @arg @c kGTLRYouTube_ContentRating_CsaRating_CsaT Value "csaT"
 *    @arg @c kGTLRYouTube_ContentRating_CsaRating_CsaUnrated Value "csaUnrated"
 */
@property(nonatomic, copy, nullable) NSString *csaRating;

/**
 *  The video's rating from Luxembourg's Commission de surveillance de la
 *  classification des films (CSCF).
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_CscfRating_Cscf12 Value "cscf12"
 *    @arg @c kGTLRYouTube_ContentRating_CscfRating_Cscf16 Value "cscf16"
 *    @arg @c kGTLRYouTube_ContentRating_CscfRating_Cscf18 Value "cscf18"
 *    @arg @c kGTLRYouTube_ContentRating_CscfRating_Cscf6 Value "cscf6"
 *    @arg @c kGTLRYouTube_ContentRating_CscfRating_Cscf9 Value "cscf9"
 *    @arg @c kGTLRYouTube_ContentRating_CscfRating_CscfA Value "cscfA"
 *    @arg @c kGTLRYouTube_ContentRating_CscfRating_CscfAl Value "cscfAl"
 *    @arg @c kGTLRYouTube_ContentRating_CscfRating_CscfUnrated Value
 *        "cscfUnrated"
 */
@property(nonatomic, copy, nullable) NSString *cscfRating;

/**
 *  The video's rating in the Czech Republic.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_CzfilmRating_Czfilm12 Value "czfilm12"
 *    @arg @c kGTLRYouTube_ContentRating_CzfilmRating_Czfilm14 Value "czfilm14"
 *    @arg @c kGTLRYouTube_ContentRating_CzfilmRating_Czfilm18 Value "czfilm18"
 *    @arg @c kGTLRYouTube_ContentRating_CzfilmRating_CzfilmU Value "czfilmU"
 *    @arg @c kGTLRYouTube_ContentRating_CzfilmRating_CzfilmUnrated Value
 *        "czfilmUnrated"
 */
@property(nonatomic, copy, nullable) NSString *czfilmRating;

/**
 *  The video's Departamento de Justiça, Classificação, Qualificação e Títulos
 *  (DJCQT - Brazil) rating.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_DjctqRating_Djctq10 Value "djctq10"
 *    @arg @c kGTLRYouTube_ContentRating_DjctqRating_Djctq12 Value "djctq12"
 *    @arg @c kGTLRYouTube_ContentRating_DjctqRating_Djctq14 Value "djctq14"
 *    @arg @c kGTLRYouTube_ContentRating_DjctqRating_Djctq16 Value "djctq16"
 *    @arg @c kGTLRYouTube_ContentRating_DjctqRating_Djctq18 Value "djctq18"
 *    @arg @c kGTLRYouTube_ContentRating_DjctqRating_DjctqL Value "djctqL"
 *    @arg @c kGTLRYouTube_ContentRating_DjctqRating_DjctqUnrated Value
 *        "djctqUnrated"
 */
@property(nonatomic, copy, nullable) NSString *djctqRating;

/** Reasons that explain why the video received its DJCQT (Brazil) rating. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *djctqRatingReasons;

/**
 *  Rating system in Turkey - Evaluation and Classification Board of the
 *  Ministry of Culture and Tourism
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_EcbmctRating_Ecbmct13a Value
 *        "ecbmct13a"
 *    @arg @c kGTLRYouTube_ContentRating_EcbmctRating_Ecbmct13plus Value
 *        "ecbmct13plus"
 *    @arg @c kGTLRYouTube_ContentRating_EcbmctRating_Ecbmct15a Value
 *        "ecbmct15a"
 *    @arg @c kGTLRYouTube_ContentRating_EcbmctRating_Ecbmct15plus Value
 *        "ecbmct15plus"
 *    @arg @c kGTLRYouTube_ContentRating_EcbmctRating_Ecbmct18plus Value
 *        "ecbmct18plus"
 *    @arg @c kGTLRYouTube_ContentRating_EcbmctRating_Ecbmct7a Value "ecbmct7a"
 *    @arg @c kGTLRYouTube_ContentRating_EcbmctRating_Ecbmct7plus Value
 *        "ecbmct7plus"
 *    @arg @c kGTLRYouTube_ContentRating_EcbmctRating_EcbmctG Value "ecbmctG"
 *    @arg @c kGTLRYouTube_ContentRating_EcbmctRating_EcbmctUnrated Value
 *        "ecbmctUnrated"
 */
@property(nonatomic, copy, nullable) NSString *ecbmctRating;

/**
 *  The video's rating in Estonia.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_EefilmRating_EefilmK12 Value
 *        "eefilmK12"
 *    @arg @c kGTLRYouTube_ContentRating_EefilmRating_EefilmK14 Value
 *        "eefilmK14"
 *    @arg @c kGTLRYouTube_ContentRating_EefilmRating_EefilmK16 Value
 *        "eefilmK16"
 *    @arg @c kGTLRYouTube_ContentRating_EefilmRating_EefilmK6 Value "eefilmK6"
 *    @arg @c kGTLRYouTube_ContentRating_EefilmRating_EefilmL Value "eefilmL"
 *    @arg @c kGTLRYouTube_ContentRating_EefilmRating_EefilmMs12 Value
 *        "eefilmMs12"
 *    @arg @c kGTLRYouTube_ContentRating_EefilmRating_EefilmMs6 Value
 *        "eefilmMs6"
 *    @arg @c kGTLRYouTube_ContentRating_EefilmRating_EefilmPere Value
 *        "eefilmPere"
 *    @arg @c kGTLRYouTube_ContentRating_EefilmRating_EefilmUnrated Value
 *        "eefilmUnrated"
 */
@property(nonatomic, copy, nullable) NSString *eefilmRating;

/**
 *  The video's rating in Egypt.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_EgfilmRating_Egfilm18 Value "egfilm18"
 *    @arg @c kGTLRYouTube_ContentRating_EgfilmRating_EgfilmBn Value "egfilmBn"
 *    @arg @c kGTLRYouTube_ContentRating_EgfilmRating_EgfilmGn Value "egfilmGn"
 *    @arg @c kGTLRYouTube_ContentRating_EgfilmRating_EgfilmUnrated Value
 *        "egfilmUnrated"
 */
@property(nonatomic, copy, nullable) NSString *egfilmRating;

/**
 *  The video's Eirin (映倫) rating. Eirin is the Japanese rating system.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_EirinRating_EirinG Value "eirinG"
 *    @arg @c kGTLRYouTube_ContentRating_EirinRating_EirinPg12 Value "eirinPg12"
 *    @arg @c kGTLRYouTube_ContentRating_EirinRating_EirinR15plus Value
 *        "eirinR15plus"
 *    @arg @c kGTLRYouTube_ContentRating_EirinRating_EirinR18plus Value
 *        "eirinR18plus"
 *    @arg @c kGTLRYouTube_ContentRating_EirinRating_EirinUnrated Value
 *        "eirinUnrated"
 */
@property(nonatomic, copy, nullable) NSString *eirinRating;

/**
 *  The video's rating from Malaysia's Film Censorship Board.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_FcbmRating_Fcbm18 Value "fcbm18"
 *    @arg @c kGTLRYouTube_ContentRating_FcbmRating_Fcbm18pa Value "fcbm18pa"
 *    @arg @c kGTLRYouTube_ContentRating_FcbmRating_Fcbm18pl Value "fcbm18pl"
 *    @arg @c kGTLRYouTube_ContentRating_FcbmRating_Fcbm18sg Value "fcbm18sg"
 *    @arg @c kGTLRYouTube_ContentRating_FcbmRating_Fcbm18sx Value "fcbm18sx"
 *    @arg @c kGTLRYouTube_ContentRating_FcbmRating_FcbmP13 Value "fcbmP13"
 *    @arg @c kGTLRYouTube_ContentRating_FcbmRating_FcbmPg13 Value "fcbmPg13"
 *    @arg @c kGTLRYouTube_ContentRating_FcbmRating_FcbmU Value "fcbmU"
 *    @arg @c kGTLRYouTube_ContentRating_FcbmRating_FcbmUnrated Value
 *        "fcbmUnrated"
 */
@property(nonatomic, copy, nullable) NSString *fcbmRating;

/**
 *  The video's rating from Hong Kong's Office for Film, Newspaper and Article
 *  Administration.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_FcoRating_FcoI Value "fcoI"
 *    @arg @c kGTLRYouTube_ContentRating_FcoRating_FcoIi Value "fcoIi"
 *    @arg @c kGTLRYouTube_ContentRating_FcoRating_FcoIia Value "fcoIia"
 *    @arg @c kGTLRYouTube_ContentRating_FcoRating_FcoIib Value "fcoIib"
 *    @arg @c kGTLRYouTube_ContentRating_FcoRating_FcoIii Value "fcoIii"
 *    @arg @c kGTLRYouTube_ContentRating_FcoRating_FcoUnrated Value "fcoUnrated"
 */
@property(nonatomic, copy, nullable) NSString *fcoRating;

/**
 *  This property has been deprecated. Use the
 *  contentDetails.contentRating.cncRating instead.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_FmocRating_Fmoc10 Value "fmoc10"
 *    @arg @c kGTLRYouTube_ContentRating_FmocRating_Fmoc12 Value "fmoc12"
 *    @arg @c kGTLRYouTube_ContentRating_FmocRating_Fmoc16 Value "fmoc16"
 *    @arg @c kGTLRYouTube_ContentRating_FmocRating_Fmoc18 Value "fmoc18"
 *    @arg @c kGTLRYouTube_ContentRating_FmocRating_FmocE Value "fmocE"
 *    @arg @c kGTLRYouTube_ContentRating_FmocRating_FmocU Value "fmocU"
 *    @arg @c kGTLRYouTube_ContentRating_FmocRating_FmocUnrated Value
 *        "fmocUnrated"
 */
@property(nonatomic, copy, nullable) NSString *fmocRating;

/**
 *  The video's rating from South Africa's Film and Publication Board.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_FpbRating_Fpb10 Value "fpb10"
 *    @arg @c kGTLRYouTube_ContentRating_FpbRating_Fpb1012Pg Value "fpb1012Pg"
 *    @arg @c kGTLRYouTube_ContentRating_FpbRating_Fpb13 Value "fpb13"
 *    @arg @c kGTLRYouTube_ContentRating_FpbRating_Fpb16 Value "fpb16"
 *    @arg @c kGTLRYouTube_ContentRating_FpbRating_Fpb18 Value "fpb18"
 *    @arg @c kGTLRYouTube_ContentRating_FpbRating_Fpb79Pg Value "fpb79Pg"
 *    @arg @c kGTLRYouTube_ContentRating_FpbRating_FpbA Value "fpbA"
 *    @arg @c kGTLRYouTube_ContentRating_FpbRating_FpbPg Value "fpbPg"
 *    @arg @c kGTLRYouTube_ContentRating_FpbRating_FpbUnrated Value "fpbUnrated"
 *    @arg @c kGTLRYouTube_ContentRating_FpbRating_FpbX18 Value "fpbX18"
 *    @arg @c kGTLRYouTube_ContentRating_FpbRating_FpbXx Value "fpbXx"
 */
@property(nonatomic, copy, nullable) NSString *fpbRating;

/**
 *  Reasons that explain why the video received its FPB (South Africa) rating.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *fpbRatingReasons;

/**
 *  The video's Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany)
 *  rating.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_FskRating_Fsk0 Value "fsk0"
 *    @arg @c kGTLRYouTube_ContentRating_FskRating_Fsk12 Value "fsk12"
 *    @arg @c kGTLRYouTube_ContentRating_FskRating_Fsk16 Value "fsk16"
 *    @arg @c kGTLRYouTube_ContentRating_FskRating_Fsk18 Value "fsk18"
 *    @arg @c kGTLRYouTube_ContentRating_FskRating_Fsk6 Value "fsk6"
 *    @arg @c kGTLRYouTube_ContentRating_FskRating_FskUnrated Value "fskUnrated"
 */
@property(nonatomic, copy, nullable) NSString *fskRating;

/**
 *  The video's rating in Greece.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_GrfilmRating_GrfilmE Value "grfilmE"
 *    @arg @c kGTLRYouTube_ContentRating_GrfilmRating_GrfilmK Value "grfilmK"
 *    @arg @c kGTLRYouTube_ContentRating_GrfilmRating_GrfilmK12 Value
 *        "grfilmK12"
 *    @arg @c kGTLRYouTube_ContentRating_GrfilmRating_GrfilmK13 Value
 *        "grfilmK13"
 *    @arg @c kGTLRYouTube_ContentRating_GrfilmRating_GrfilmK15 Value
 *        "grfilmK15"
 *    @arg @c kGTLRYouTube_ContentRating_GrfilmRating_GrfilmK17 Value
 *        "grfilmK17"
 *    @arg @c kGTLRYouTube_ContentRating_GrfilmRating_GrfilmK18 Value
 *        "grfilmK18"
 *    @arg @c kGTLRYouTube_ContentRating_GrfilmRating_GrfilmUnrated Value
 *        "grfilmUnrated"
 */
@property(nonatomic, copy, nullable) NSString *grfilmRating;

/**
 *  The video's Instituto de la Cinematografía y de las Artes Audiovisuales
 *  (ICAA - Spain) rating.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_IcaaRating_Icaa12 Value "icaa12"
 *    @arg @c kGTLRYouTube_ContentRating_IcaaRating_Icaa13 Value "icaa13"
 *    @arg @c kGTLRYouTube_ContentRating_IcaaRating_Icaa16 Value "icaa16"
 *    @arg @c kGTLRYouTube_ContentRating_IcaaRating_Icaa18 Value "icaa18"
 *    @arg @c kGTLRYouTube_ContentRating_IcaaRating_Icaa7 Value "icaa7"
 *    @arg @c kGTLRYouTube_ContentRating_IcaaRating_IcaaApta Value "icaaApta"
 *    @arg @c kGTLRYouTube_ContentRating_IcaaRating_IcaaUnrated Value
 *        "icaaUnrated"
 *    @arg @c kGTLRYouTube_ContentRating_IcaaRating_IcaaX Value "icaaX"
 */
@property(nonatomic, copy, nullable) NSString *icaaRating;

/**
 *  The video's Irish Film Classification Office (IFCO - Ireland) rating. See
 *  the IFCO website for more information.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_IfcoRating_Ifco12 Value "ifco12"
 *    @arg @c kGTLRYouTube_ContentRating_IfcoRating_Ifco12a Value "ifco12a"
 *    @arg @c kGTLRYouTube_ContentRating_IfcoRating_Ifco15 Value "ifco15"
 *    @arg @c kGTLRYouTube_ContentRating_IfcoRating_Ifco15a Value "ifco15a"
 *    @arg @c kGTLRYouTube_ContentRating_IfcoRating_Ifco16 Value "ifco16"
 *    @arg @c kGTLRYouTube_ContentRating_IfcoRating_Ifco18 Value "ifco18"
 *    @arg @c kGTLRYouTube_ContentRating_IfcoRating_IfcoG Value "ifcoG"
 *    @arg @c kGTLRYouTube_ContentRating_IfcoRating_IfcoPg Value "ifcoPg"
 *    @arg @c kGTLRYouTube_ContentRating_IfcoRating_IfcoUnrated Value
 *        "ifcoUnrated"
 */
@property(nonatomic, copy, nullable) NSString *ifcoRating;

/**
 *  The video's rating in Israel.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_IlfilmRating_Ilfilm12 Value "ilfilm12"
 *    @arg @c kGTLRYouTube_ContentRating_IlfilmRating_Ilfilm16 Value "ilfilm16"
 *    @arg @c kGTLRYouTube_ContentRating_IlfilmRating_Ilfilm18 Value "ilfilm18"
 *    @arg @c kGTLRYouTube_ContentRating_IlfilmRating_IlfilmAa Value "ilfilmAa"
 *    @arg @c kGTLRYouTube_ContentRating_IlfilmRating_IlfilmUnrated Value
 *        "ilfilmUnrated"
 */
@property(nonatomic, copy, nullable) NSString *ilfilmRating;

/**
 *  The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales -
 *  Argentina) rating.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_IncaaRating_IncaaAtp Value "incaaAtp"
 *    @arg @c kGTLRYouTube_ContentRating_IncaaRating_IncaaC Value "incaaC"
 *    @arg @c kGTLRYouTube_ContentRating_IncaaRating_IncaaSam13 Value
 *        "incaaSam13"
 *    @arg @c kGTLRYouTube_ContentRating_IncaaRating_IncaaSam16 Value
 *        "incaaSam16"
 *    @arg @c kGTLRYouTube_ContentRating_IncaaRating_IncaaSam18 Value
 *        "incaaSam18"
 *    @arg @c kGTLRYouTube_ContentRating_IncaaRating_IncaaUnrated Value
 *        "incaaUnrated"
 */
@property(nonatomic, copy, nullable) NSString *incaaRating;

/**
 *  The video's rating from the Kenya Film Classification Board.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_KfcbRating_Kfcb16plus Value
 *        "kfcb16plus"
 *    @arg @c kGTLRYouTube_ContentRating_KfcbRating_KfcbG Value "kfcbG"
 *    @arg @c kGTLRYouTube_ContentRating_KfcbRating_KfcbPg Value "kfcbPg"
 *    @arg @c kGTLRYouTube_ContentRating_KfcbRating_KfcbR Value "kfcbR"
 *    @arg @c kGTLRYouTube_ContentRating_KfcbRating_KfcbUnrated Value
 *        "kfcbUnrated"
 */
@property(nonatomic, copy, nullable) NSString *kfcbRating;

/**
 *  voor de Classificatie van Audiovisuele Media (Netherlands).
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_KijkwijzerRating_Kijkwijzer12 Value
 *        "kijkwijzer12"
 *    @arg @c kGTLRYouTube_ContentRating_KijkwijzerRating_Kijkwijzer16 Value
 *        "kijkwijzer16"
 *    @arg @c kGTLRYouTube_ContentRating_KijkwijzerRating_Kijkwijzer18 Value
 *        "kijkwijzer18"
 *    @arg @c kGTLRYouTube_ContentRating_KijkwijzerRating_Kijkwijzer6 Value
 *        "kijkwijzer6"
 *    @arg @c kGTLRYouTube_ContentRating_KijkwijzerRating_Kijkwijzer9 Value
 *        "kijkwijzer9"
 *    @arg @c kGTLRYouTube_ContentRating_KijkwijzerRating_KijkwijzerAl Value
 *        "kijkwijzerAl"
 *    @arg @c kGTLRYouTube_ContentRating_KijkwijzerRating_KijkwijzerUnrated
 *        Value "kijkwijzerUnrated"
 */
@property(nonatomic, copy, nullable) NSString *kijkwijzerRating;

/**
 *  The video's Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates
 *  videos in South Korea.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_KmrbRating_Kmrb12plus Value
 *        "kmrb12plus"
 *    @arg @c kGTLRYouTube_ContentRating_KmrbRating_Kmrb15plus Value
 *        "kmrb15plus"
 *    @arg @c kGTLRYouTube_ContentRating_KmrbRating_KmrbAll Value "kmrbAll"
 *    @arg @c kGTLRYouTube_ContentRating_KmrbRating_KmrbR Value "kmrbR"
 *    @arg @c kGTLRYouTube_ContentRating_KmrbRating_KmrbTeenr Value "kmrbTeenr"
 *    @arg @c kGTLRYouTube_ContentRating_KmrbRating_KmrbUnrated Value
 *        "kmrbUnrated"
 */
@property(nonatomic, copy, nullable) NSString *kmrbRating;

/**
 *  The video's rating from Indonesia's Lembaga Sensor Film.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_LsfRating_Lsf13 Value "lsf13"
 *    @arg @c kGTLRYouTube_ContentRating_LsfRating_Lsf17 Value "lsf17"
 *    @arg @c kGTLRYouTube_ContentRating_LsfRating_Lsf21 Value "lsf21"
 *    @arg @c kGTLRYouTube_ContentRating_LsfRating_LsfA Value "lsfA"
 *    @arg @c kGTLRYouTube_ContentRating_LsfRating_LsfBo Value "lsfBo"
 *    @arg @c kGTLRYouTube_ContentRating_LsfRating_LsfD Value "lsfD"
 *    @arg @c kGTLRYouTube_ContentRating_LsfRating_LsfR Value "lsfR"
 *    @arg @c kGTLRYouTube_ContentRating_LsfRating_LsfSu Value "lsfSu"
 *    @arg @c kGTLRYouTube_ContentRating_LsfRating_LsfUnrated Value "lsfUnrated"
 */
@property(nonatomic, copy, nullable) NSString *lsfRating;

/**
 *  The video's rating from Malta's Film Age-Classification Board.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_MccaaRating_Mccaa12 Value "mccaa12"
 *    @arg @c kGTLRYouTube_ContentRating_MccaaRating_Mccaa12a Value "mccaa12a"
 *    @arg @c kGTLRYouTube_ContentRating_MccaaRating_Mccaa14 Value "mccaa14"
 *    @arg @c kGTLRYouTube_ContentRating_MccaaRating_Mccaa15 Value "mccaa15"
 *    @arg @c kGTLRYouTube_ContentRating_MccaaRating_Mccaa16 Value "mccaa16"
 *    @arg @c kGTLRYouTube_ContentRating_MccaaRating_Mccaa18 Value "mccaa18"
 *    @arg @c kGTLRYouTube_ContentRating_MccaaRating_MccaaPg Value "mccaaPg"
 *    @arg @c kGTLRYouTube_ContentRating_MccaaRating_MccaaU Value "mccaaU"
 *    @arg @c kGTLRYouTube_ContentRating_MccaaRating_MccaaUnrated Value
 *        "mccaaUnrated"
 */
@property(nonatomic, copy, nullable) NSString *mccaaRating;

/**
 *  The video's rating from the Danish Film Institute's (Det Danske
 *  Filminstitut) Media Council for Children and Young People.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_MccypRating_Mccyp11 Value "mccyp11"
 *    @arg @c kGTLRYouTube_ContentRating_MccypRating_Mccyp15 Value "mccyp15"
 *    @arg @c kGTLRYouTube_ContentRating_MccypRating_Mccyp7 Value "mccyp7"
 *    @arg @c kGTLRYouTube_ContentRating_MccypRating_MccypA Value "mccypA"
 *    @arg @c kGTLRYouTube_ContentRating_MccypRating_MccypUnrated Value
 *        "mccypUnrated"
 */
@property(nonatomic, copy, nullable) NSString *mccypRating;

/**
 *  The video's rating system for Vietnam - MCST
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_McstRating_Mcst0 Value "mcst0"
 *    @arg @c kGTLRYouTube_ContentRating_McstRating_Mcst16plus Value
 *        "mcst16plus"
 *    @arg @c kGTLRYouTube_ContentRating_McstRating_McstC13 Value "mcstC13"
 *    @arg @c kGTLRYouTube_ContentRating_McstRating_McstC16 Value "mcstC16"
 *    @arg @c kGTLRYouTube_ContentRating_McstRating_McstC18 Value "mcstC18"
 *    @arg @c kGTLRYouTube_ContentRating_McstRating_McstGPg Value "mcstGPg"
 *    @arg @c kGTLRYouTube_ContentRating_McstRating_McstP Value "mcstP"
 *    @arg @c kGTLRYouTube_ContentRating_McstRating_McstUnrated Value
 *        "mcstUnrated"
 */
@property(nonatomic, copy, nullable) NSString *mcstRating;

/**
 *  The video's rating from Singapore's Media Development Authority (MDA) and,
 *  specifically, it's Board of Film Censors (BFC).
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_MdaRating_MdaG Value "mdaG"
 *    @arg @c kGTLRYouTube_ContentRating_MdaRating_MdaM18 Value "mdaM18"
 *    @arg @c kGTLRYouTube_ContentRating_MdaRating_MdaNc16 Value "mdaNc16"
 *    @arg @c kGTLRYouTube_ContentRating_MdaRating_MdaPg Value "mdaPg"
 *    @arg @c kGTLRYouTube_ContentRating_MdaRating_MdaPg13 Value "mdaPg13"
 *    @arg @c kGTLRYouTube_ContentRating_MdaRating_MdaR21 Value "mdaR21"
 *    @arg @c kGTLRYouTube_ContentRating_MdaRating_MdaUnrated Value "mdaUnrated"
 */
@property(nonatomic, copy, nullable) NSString *mdaRating;

/**
 *  The video's rating from Medietilsynet, the Norwegian Media Authority.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_MedietilsynetRating_Medietilsynet11
 *        Value "medietilsynet11"
 *    @arg @c kGTLRYouTube_ContentRating_MedietilsynetRating_Medietilsynet12
 *        Value "medietilsynet12"
 *    @arg @c kGTLRYouTube_ContentRating_MedietilsynetRating_Medietilsynet15
 *        Value "medietilsynet15"
 *    @arg @c kGTLRYouTube_ContentRating_MedietilsynetRating_Medietilsynet18
 *        Value "medietilsynet18"
 *    @arg @c kGTLRYouTube_ContentRating_MedietilsynetRating_Medietilsynet6
 *        Value "medietilsynet6"
 *    @arg @c kGTLRYouTube_ContentRating_MedietilsynetRating_Medietilsynet7
 *        Value "medietilsynet7"
 *    @arg @c kGTLRYouTube_ContentRating_MedietilsynetRating_Medietilsynet9
 *        Value "medietilsynet9"
 *    @arg @c kGTLRYouTube_ContentRating_MedietilsynetRating_MedietilsynetA
 *        Value "medietilsynetA"
 *    @arg @c kGTLRYouTube_ContentRating_MedietilsynetRating_MedietilsynetUnrated
 *        Value "medietilsynetUnrated"
 */
@property(nonatomic, copy, nullable) NSString *medietilsynetRating;

/**
 *  The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti
 *  (National Audiovisual Institute).
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_MekuRating_Meku12 Value "meku12"
 *    @arg @c kGTLRYouTube_ContentRating_MekuRating_Meku16 Value "meku16"
 *    @arg @c kGTLRYouTube_ContentRating_MekuRating_Meku18 Value "meku18"
 *    @arg @c kGTLRYouTube_ContentRating_MekuRating_Meku7 Value "meku7"
 *    @arg @c kGTLRYouTube_ContentRating_MekuRating_MekuS Value "mekuS"
 *    @arg @c kGTLRYouTube_ContentRating_MekuRating_MekuUnrated Value
 *        "mekuUnrated"
 */
@property(nonatomic, copy, nullable) NSString *mekuRating;

/**
 *  The rating system for MENA countries, a clone of MPAA. It is needed to
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_MenaMpaaRating_MenaMpaaG Value
 *        "menaMpaaG"
 *    @arg @c kGTLRYouTube_ContentRating_MenaMpaaRating_MenaMpaaPg Value
 *        "menaMpaaPg"
 *    @arg @c kGTLRYouTube_ContentRating_MenaMpaaRating_MenaMpaaPg13 Value
 *        "menaMpaaPg13"
 *    @arg @c kGTLRYouTube_ContentRating_MenaMpaaRating_MenaMpaaR Value
 *        "menaMpaaR"
 *    @arg @c kGTLRYouTube_ContentRating_MenaMpaaRating_MenaMpaaUnrated Value
 *        "menaMpaaUnrated"
 */
@property(nonatomic, copy, nullable) NSString *menaMpaaRating;

/**
 *  The video's rating from the Ministero dei Beni e delle Attività Culturali e
 *  del Turismo (Italy).
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_MibacRating_MibacT Value "mibacT"
 *    @arg @c kGTLRYouTube_ContentRating_MibacRating_MibacUnrated Value
 *        "mibacUnrated"
 *    @arg @c kGTLRYouTube_ContentRating_MibacRating_MibacVap Value "mibacVap"
 *    @arg @c kGTLRYouTube_ContentRating_MibacRating_MibacVm12 Value "mibacVm12"
 *    @arg @c kGTLRYouTube_ContentRating_MibacRating_MibacVm14 Value "mibacVm14"
 *    @arg @c kGTLRYouTube_ContentRating_MibacRating_MibacVm18 Value "mibacVm18"
 */
@property(nonatomic, copy, nullable) NSString *mibacRating;

/**
 *  The video's Ministerio de Cultura (Colombia) rating.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_MocRating_Moc12 Value "moc12"
 *    @arg @c kGTLRYouTube_ContentRating_MocRating_Moc15 Value "moc15"
 *    @arg @c kGTLRYouTube_ContentRating_MocRating_Moc18 Value "moc18"
 *    @arg @c kGTLRYouTube_ContentRating_MocRating_Moc7 Value "moc7"
 *    @arg @c kGTLRYouTube_ContentRating_MocRating_MocBanned Value "mocBanned"
 *    @arg @c kGTLRYouTube_ContentRating_MocRating_MocE Value "mocE"
 *    @arg @c kGTLRYouTube_ContentRating_MocRating_MocT Value "mocT"
 *    @arg @c kGTLRYouTube_ContentRating_MocRating_MocUnrated Value "mocUnrated"
 *    @arg @c kGTLRYouTube_ContentRating_MocRating_MocX Value "mocX"
 */
@property(nonatomic, copy, nullable) NSString *mocRating;

/**
 *  The video's rating from Taiwan's Ministry of Culture (文化部).
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_MoctwRating_MoctwG Value "moctwG"
 *    @arg @c kGTLRYouTube_ContentRating_MoctwRating_MoctwP Value "moctwP"
 *    @arg @c kGTLRYouTube_ContentRating_MoctwRating_MoctwPg Value "moctwPg"
 *    @arg @c kGTLRYouTube_ContentRating_MoctwRating_MoctwR Value "moctwR"
 *    @arg @c kGTLRYouTube_ContentRating_MoctwRating_MoctwR12 Value "moctwR12"
 *    @arg @c kGTLRYouTube_ContentRating_MoctwRating_MoctwR15 Value "moctwR15"
 *    @arg @c kGTLRYouTube_ContentRating_MoctwRating_MoctwUnrated Value
 *        "moctwUnrated"
 */
@property(nonatomic, copy, nullable) NSString *moctwRating;

/**
 *  The video's Motion Picture Association of America (MPAA) rating.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_MpaaRating_MpaaG Value "mpaaG"
 *    @arg @c kGTLRYouTube_ContentRating_MpaaRating_MpaaNc17 Value "mpaaNc17"
 *    @arg @c kGTLRYouTube_ContentRating_MpaaRating_MpaaPg Value "mpaaPg"
 *    @arg @c kGTLRYouTube_ContentRating_MpaaRating_MpaaPg13 Value "mpaaPg13"
 *    @arg @c kGTLRYouTube_ContentRating_MpaaRating_MpaaR Value "mpaaR"
 *    @arg @c kGTLRYouTube_ContentRating_MpaaRating_MpaaUnrated Value
 *        "mpaaUnrated"
 */
@property(nonatomic, copy, nullable) NSString *mpaaRating;

/**
 *  The rating system for trailer, DVD, and Ad in the US. See
 *  http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_MpaatRating_MpaatGb Value "mpaatGb"
 *    @arg @c kGTLRYouTube_ContentRating_MpaatRating_MpaatRb Value "mpaatRb"
 */
@property(nonatomic, copy, nullable) NSString *mpaatRating;

/**
 *  The video's rating from the Movie and Television Review and Classification
 *  Board (Philippines).
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_MtrcbRating_MtrcbG Value "mtrcbG"
 *    @arg @c kGTLRYouTube_ContentRating_MtrcbRating_MtrcbPg Value "mtrcbPg"
 *    @arg @c kGTLRYouTube_ContentRating_MtrcbRating_MtrcbR13 Value "mtrcbR13"
 *    @arg @c kGTLRYouTube_ContentRating_MtrcbRating_MtrcbR16 Value "mtrcbR16"
 *    @arg @c kGTLRYouTube_ContentRating_MtrcbRating_MtrcbR18 Value "mtrcbR18"
 *    @arg @c kGTLRYouTube_ContentRating_MtrcbRating_MtrcbUnrated Value
 *        "mtrcbUnrated"
 *    @arg @c kGTLRYouTube_ContentRating_MtrcbRating_MtrcbX Value "mtrcbX"
 */
@property(nonatomic, copy, nullable) NSString *mtrcbRating;

/**
 *  The video's rating in Poland.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_NbcplRating_Nbcpl18plus Value
 *        "nbcpl18plus"
 *    @arg @c kGTLRYouTube_ContentRating_NbcplRating_NbcplI Value "nbcplI"
 *    @arg @c kGTLRYouTube_ContentRating_NbcplRating_NbcplIi Value "nbcplIi"
 *    @arg @c kGTLRYouTube_ContentRating_NbcplRating_NbcplIii Value "nbcplIii"
 *    @arg @c kGTLRYouTube_ContentRating_NbcplRating_NbcplIv Value "nbcplIv"
 *    @arg @c kGTLRYouTube_ContentRating_NbcplRating_NbcplUnrated Value
 *        "nbcplUnrated"
 */
@property(nonatomic, copy, nullable) NSString *nbcplRating;

/**
 *  The video's rating from the Maldives National Bureau of Classification.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_NbcRating_Nbc12plus Value "nbc12plus"
 *    @arg @c kGTLRYouTube_ContentRating_NbcRating_Nbc15plus Value "nbc15plus"
 *    @arg @c kGTLRYouTube_ContentRating_NbcRating_Nbc18plus Value "nbc18plus"
 *    @arg @c kGTLRYouTube_ContentRating_NbcRating_Nbc18plusr Value "nbc18plusr"
 *    @arg @c kGTLRYouTube_ContentRating_NbcRating_NbcG Value "nbcG"
 *    @arg @c kGTLRYouTube_ContentRating_NbcRating_NbcPg Value "nbcPg"
 *    @arg @c kGTLRYouTube_ContentRating_NbcRating_NbcPu Value "nbcPu"
 *    @arg @c kGTLRYouTube_ContentRating_NbcRating_NbcUnrated Value "nbcUnrated"
 */
@property(nonatomic, copy, nullable) NSString *nbcRating;

/**
 *  The video's rating from the Bulgarian National Film Center.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_NfrcRating_NfrcA Value "nfrcA"
 *    @arg @c kGTLRYouTube_ContentRating_NfrcRating_NfrcB Value "nfrcB"
 *    @arg @c kGTLRYouTube_ContentRating_NfrcRating_NfrcC Value "nfrcC"
 *    @arg @c kGTLRYouTube_ContentRating_NfrcRating_NfrcD Value "nfrcD"
 *    @arg @c kGTLRYouTube_ContentRating_NfrcRating_NfrcUnrated Value
 *        "nfrcUnrated"
 *    @arg @c kGTLRYouTube_ContentRating_NfrcRating_NfrcX Value "nfrcX"
 */
@property(nonatomic, copy, nullable) NSString *nfrcRating;

/**
 *  The video's rating from Nigeria's National Film and Video Censors Board.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_NfvcbRating_Nfvcb12 Value "nfvcb12"
 *    @arg @c kGTLRYouTube_ContentRating_NfvcbRating_Nfvcb12a Value "nfvcb12a"
 *    @arg @c kGTLRYouTube_ContentRating_NfvcbRating_Nfvcb15 Value "nfvcb15"
 *    @arg @c kGTLRYouTube_ContentRating_NfvcbRating_Nfvcb18 Value "nfvcb18"
 *    @arg @c kGTLRYouTube_ContentRating_NfvcbRating_NfvcbG Value "nfvcbG"
 *    @arg @c kGTLRYouTube_ContentRating_NfvcbRating_NfvcbPg Value "nfvcbPg"
 *    @arg @c kGTLRYouTube_ContentRating_NfvcbRating_NfvcbRe Value "nfvcbRe"
 *    @arg @c kGTLRYouTube_ContentRating_NfvcbRating_NfvcbUnrated Value
 *        "nfvcbUnrated"
 */
@property(nonatomic, copy, nullable) NSString *nfvcbRating;

/**
 *  The video's rating from the Nacionãlais Kino centrs (National Film Centre of
 *  Latvia).
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_NkclvRating_Nkclv12plus Value
 *        "nkclv12plus"
 *    @arg @c kGTLRYouTube_ContentRating_NkclvRating_Nkclv18plus Value
 *        "nkclv18plus"
 *    @arg @c kGTLRYouTube_ContentRating_NkclvRating_Nkclv7plus Value
 *        "nkclv7plus"
 *    @arg @c kGTLRYouTube_ContentRating_NkclvRating_NkclvU Value "nkclvU"
 *    @arg @c kGTLRYouTube_ContentRating_NkclvRating_NkclvUnrated Value
 *        "nkclvUnrated"
 */
@property(nonatomic, copy, nullable) NSString *nkclvRating;

/**
 *  The video's Office of Film and Literature Classification (OFLC - New
 *  Zealand) rating.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_OflcRating_OflcG Value "oflcG"
 *    @arg @c kGTLRYouTube_ContentRating_OflcRating_OflcM Value "oflcM"
 *    @arg @c kGTLRYouTube_ContentRating_OflcRating_OflcPg Value "oflcPg"
 *    @arg @c kGTLRYouTube_ContentRating_OflcRating_OflcR13 Value "oflcR13"
 *    @arg @c kGTLRYouTube_ContentRating_OflcRating_OflcR15 Value "oflcR15"
 *    @arg @c kGTLRYouTube_ContentRating_OflcRating_OflcR16 Value "oflcR16"
 *    @arg @c kGTLRYouTube_ContentRating_OflcRating_OflcR18 Value "oflcR18"
 *    @arg @c kGTLRYouTube_ContentRating_OflcRating_OflcRp13 Value "oflcRp13"
 *    @arg @c kGTLRYouTube_ContentRating_OflcRating_OflcRp16 Value "oflcRp16"
 *    @arg @c kGTLRYouTube_ContentRating_OflcRating_OflcRp18 Value "oflcRp18"
 *    @arg @c kGTLRYouTube_ContentRating_OflcRating_OflcUnrated Value
 *        "oflcUnrated"
 */
@property(nonatomic, copy, nullable) NSString *oflcRating;

/**
 *  The video's rating in Peru.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_PefilmRating_Pefilm14 Value "pefilm14"
 *    @arg @c kGTLRYouTube_ContentRating_PefilmRating_Pefilm18 Value "pefilm18"
 *    @arg @c kGTLRYouTube_ContentRating_PefilmRating_PefilmPg Value "pefilmPg"
 *    @arg @c kGTLRYouTube_ContentRating_PefilmRating_PefilmPt Value "pefilmPt"
 *    @arg @c kGTLRYouTube_ContentRating_PefilmRating_PefilmUnrated Value
 *        "pefilmUnrated"
 */
@property(nonatomic, copy, nullable) NSString *pefilmRating;

/**
 *  The video's rating from the Hungarian Nemzeti Filmiroda, the Rating
 *  Committee of the National Office of Film.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_RcnofRating_RcnofI Value "rcnofI"
 *    @arg @c kGTLRYouTube_ContentRating_RcnofRating_RcnofIi Value "rcnofIi"
 *    @arg @c kGTLRYouTube_ContentRating_RcnofRating_RcnofIii Value "rcnofIii"
 *    @arg @c kGTLRYouTube_ContentRating_RcnofRating_RcnofIv Value "rcnofIv"
 *    @arg @c kGTLRYouTube_ContentRating_RcnofRating_RcnofUnrated Value
 *        "rcnofUnrated"
 *    @arg @c kGTLRYouTube_ContentRating_RcnofRating_RcnofV Value "rcnofV"
 *    @arg @c kGTLRYouTube_ContentRating_RcnofRating_RcnofVi Value "rcnofVi"
 */
@property(nonatomic, copy, nullable) NSString *rcnofRating;

/**
 *  The video's rating in Venezuela.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_ResorteviolenciaRating_ResorteviolenciaA
 *        Value "resorteviolenciaA"
 *    @arg @c kGTLRYouTube_ContentRating_ResorteviolenciaRating_ResorteviolenciaB
 *        Value "resorteviolenciaB"
 *    @arg @c kGTLRYouTube_ContentRating_ResorteviolenciaRating_ResorteviolenciaC
 *        Value "resorteviolenciaC"
 *    @arg @c kGTLRYouTube_ContentRating_ResorteviolenciaRating_ResorteviolenciaD
 *        Value "resorteviolenciaD"
 *    @arg @c kGTLRYouTube_ContentRating_ResorteviolenciaRating_ResorteviolenciaE
 *        Value "resorteviolenciaE"
 *    @arg @c kGTLRYouTube_ContentRating_ResorteviolenciaRating_ResorteviolenciaUnrated
 *        Value "resorteviolenciaUnrated"
 */
@property(nonatomic, copy, nullable) NSString *resorteviolenciaRating;

/**
 *  The video's General Directorate of Radio, Television and Cinematography
 *  (Mexico) rating.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_RtcRating_RtcA Value "rtcA"
 *    @arg @c kGTLRYouTube_ContentRating_RtcRating_RtcAa Value "rtcAa"
 *    @arg @c kGTLRYouTube_ContentRating_RtcRating_RtcB Value "rtcB"
 *    @arg @c kGTLRYouTube_ContentRating_RtcRating_RtcB15 Value "rtcB15"
 *    @arg @c kGTLRYouTube_ContentRating_RtcRating_RtcC Value "rtcC"
 *    @arg @c kGTLRYouTube_ContentRating_RtcRating_RtcD Value "rtcD"
 *    @arg @c kGTLRYouTube_ContentRating_RtcRating_RtcUnrated Value "rtcUnrated"
 */
@property(nonatomic, copy, nullable) NSString *rtcRating;

/**
 *  The video's rating from Ireland's Raidió Teilifís Éireann.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_RteRating_RteCh Value "rteCh"
 *    @arg @c kGTLRYouTube_ContentRating_RteRating_RteGa Value "rteGa"
 *    @arg @c kGTLRYouTube_ContentRating_RteRating_RteMa Value "rteMa"
 *    @arg @c kGTLRYouTube_ContentRating_RteRating_RtePs Value "rtePs"
 *    @arg @c kGTLRYouTube_ContentRating_RteRating_RteUnrated Value "rteUnrated"
 */
@property(nonatomic, copy, nullable) NSString *rteRating;

/**
 *  The video's National Film Registry of the Russian Federation (MKRF - Russia)
 *  rating.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_RussiaRating_Russia0 Value "russia0"
 *    @arg @c kGTLRYouTube_ContentRating_RussiaRating_Russia12 Value "russia12"
 *    @arg @c kGTLRYouTube_ContentRating_RussiaRating_Russia16 Value "russia16"
 *    @arg @c kGTLRYouTube_ContentRating_RussiaRating_Russia18 Value "russia18"
 *    @arg @c kGTLRYouTube_ContentRating_RussiaRating_Russia6 Value "russia6"
 *    @arg @c kGTLRYouTube_ContentRating_RussiaRating_RussiaUnrated Value
 *        "russiaUnrated"
 */
@property(nonatomic, copy, nullable) NSString *russiaRating;

/**
 *  The video's rating in Slovakia.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_SkfilmRating_SkfilmG Value "skfilmG"
 *    @arg @c kGTLRYouTube_ContentRating_SkfilmRating_SkfilmP2 Value "skfilmP2"
 *    @arg @c kGTLRYouTube_ContentRating_SkfilmRating_SkfilmP5 Value "skfilmP5"
 *    @arg @c kGTLRYouTube_ContentRating_SkfilmRating_SkfilmP8 Value "skfilmP8"
 *    @arg @c kGTLRYouTube_ContentRating_SkfilmRating_SkfilmUnrated Value
 *        "skfilmUnrated"
 */
@property(nonatomic, copy, nullable) NSString *skfilmRating;

/**
 *  The video's rating in Iceland.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_SmaisRating_Smais12 Value "smais12"
 *    @arg @c kGTLRYouTube_ContentRating_SmaisRating_Smais14 Value "smais14"
 *    @arg @c kGTLRYouTube_ContentRating_SmaisRating_Smais16 Value "smais16"
 *    @arg @c kGTLRYouTube_ContentRating_SmaisRating_Smais18 Value "smais18"
 *    @arg @c kGTLRYouTube_ContentRating_SmaisRating_Smais7 Value "smais7"
 *    @arg @c kGTLRYouTube_ContentRating_SmaisRating_SmaisL Value "smaisL"
 *    @arg @c kGTLRYouTube_ContentRating_SmaisRating_SmaisUnrated Value
 *        "smaisUnrated"
 */
@property(nonatomic, copy, nullable) NSString *smaisRating;

/**
 *  The video's rating from Statens medieråd (Sweden's National Media Council).
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_SmsaRating_Smsa11 Value "smsa11"
 *    @arg @c kGTLRYouTube_ContentRating_SmsaRating_Smsa15 Value "smsa15"
 *    @arg @c kGTLRYouTube_ContentRating_SmsaRating_Smsa7 Value "smsa7"
 *    @arg @c kGTLRYouTube_ContentRating_SmsaRating_SmsaA Value "smsaA"
 *    @arg @c kGTLRYouTube_ContentRating_SmsaRating_SmsaUnrated Value
 *        "smsaUnrated"
 */
@property(nonatomic, copy, nullable) NSString *smsaRating;

/**
 *  The video's TV Parental Guidelines (TVPG) rating.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_TvpgRating_Pg14 Value "pg14"
 *    @arg @c kGTLRYouTube_ContentRating_TvpgRating_TvpgG Value "tvpgG"
 *    @arg @c kGTLRYouTube_ContentRating_TvpgRating_TvpgMa Value "tvpgMa"
 *    @arg @c kGTLRYouTube_ContentRating_TvpgRating_TvpgPg Value "tvpgPg"
 *    @arg @c kGTLRYouTube_ContentRating_TvpgRating_TvpgUnrated Value
 *        "tvpgUnrated"
 *    @arg @c kGTLRYouTube_ContentRating_TvpgRating_TvpgY Value "tvpgY"
 *    @arg @c kGTLRYouTube_ContentRating_TvpgRating_TvpgY7 Value "tvpgY7"
 *    @arg @c kGTLRYouTube_ContentRating_TvpgRating_TvpgY7Fv Value "tvpgY7Fv"
 */
@property(nonatomic, copy, nullable) NSString *tvpgRating;

/**
 *  A rating that YouTube uses to identify age-restricted content.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_ContentRating_YtRating_YtAgeRestricted Value
 *        "ytAgeRestricted"
 */
@property(nonatomic, copy, nullable) NSString *ytRating;

@end


/**
 *  A fanFundingEvent resource represents a fan funding event on a YouTube
 *  channel. Fan funding events occur when a user gives one-time monetary
 *  support to the channel owner.
 */
@interface GTLRYouTube_FanFundingEvent : GTLRObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube assigns to uniquely identify the fan funding event.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#fanFundingEvent".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The snippet object contains basic details about the fan funding event. */
@property(nonatomic, strong, nullable) GTLRYouTube_FanFundingEventSnippet *snippet;

@end


/**
 *  GTLRYouTube_FanFundingEventListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_FanFundingEventListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of fan funding events that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_FanFundingEvent *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#fanFundingEventListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;
@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  GTLRYouTube_FanFundingEventSnippet
 */
@interface GTLRYouTube_FanFundingEventSnippet : GTLRObject

/**
 *  The amount of funding in micros of fund_currency. e.g., 1 is represented
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *amountMicros;

/** Channel id where the funding event occurred. */
@property(nonatomic, copy, nullable) NSString *channelId;

/** The text contents of the comment left by the user. */
@property(nonatomic, copy, nullable) NSString *commentText;

/**
 *  The date and time when the funding occurred. The value is specified in ISO
 *  8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createdAt;

/** The currency in which the fund was made. ISO 4217. */
@property(nonatomic, copy, nullable) NSString *currency;

/**
 *  A rendered string that displays the fund amount and currency (e.g.,
 *  "$1.00"). The string is rendered for the given language.
 */
@property(nonatomic, copy, nullable) NSString *displayString;

/**
 *  Details about the supporter. Only filled if the event was made public by the
 *  user.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelProfileDetails *supporterDetails;

@end


/**
 *  Geographical coordinates of a point, in WGS84.
 */
@interface GTLRYouTube_GeoPoint : GTLRObject

/**
 *  Altitude above the reference ellipsoid, in meters.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *altitude;

/**
 *  Latitude in degrees.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latitude;

/**
 *  Longitude in degrees.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longitude;

@end


/**
 *  A guideCategory resource identifies a category that YouTube algorithmically
 *  assigns based on a channel's content or other indicators, such as the
 *  channel's popularity. The list is similar to video categories, with the
 *  difference being that a video's uploader can assign a video category but
 *  only YouTube can assign a channel category.
 */
@interface GTLRYouTube_GuideCategory : GTLRObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube uses to uniquely identify the guide category.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#guideCategory".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The snippet object contains basic details about the category, such as its
 *  title.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_GuideCategorySnippet *snippet;

@end


/**
 *  GTLRYouTube_GuideCategoryListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_GuideCategoryListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of categories that can be associated with YouTube channels. In this
 *  map, the category ID is the map key, and its value is the corresponding
 *  guideCategory resource.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_GuideCategory *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#guideCategoryListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the previous page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *prevPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  Basic details about a guide category.
 */
@interface GTLRYouTube_GuideCategorySnippet : GTLRObject

@property(nonatomic, copy, nullable) NSString *channelId;

/** Description of the guide category. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  An i18nLanguage resource identifies a UI language currently supported by
 *  YouTube.
 */
@interface GTLRYouTube_I18nLanguage : GTLRObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube uses to uniquely identify the i18n language.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#i18nLanguage".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The snippet object contains basic details about the i18n language, such as
 *  language code and human-readable name.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_I18nLanguageSnippet *snippet;

@end


/**
 *  GTLRYouTube_I18nLanguageListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRYouTube_I18nLanguageListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of supported i18n languages. In this map, the i18n language ID is the
 *  map key, and its value is the corresponding i18nLanguage resource.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_I18nLanguage *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#i18nLanguageListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  Basic details about an i18n language, such as language code and
 *  human-readable name.
 */
@interface GTLRYouTube_I18nLanguageSnippet : GTLRObject

/** A short BCP-47 code that uniquely identifies a language. */
@property(nonatomic, copy, nullable) NSString *hl;

/** The human-readable name of the language in the language itself. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A i18nRegion resource identifies a region where YouTube is available.
 */
@interface GTLRYouTube_I18nRegion : GTLRObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube uses to uniquely identify the i18n region.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#i18nRegion".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The snippet object contains basic details about the i18n region, such as
 *  region code and human-readable name.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_I18nRegionSnippet *snippet;

@end


/**
 *  GTLRYouTube_I18nRegionListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRYouTube_I18nRegionListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of regions where YouTube is available. In this map, the i18n region
 *  ID is the map key, and its value is the corresponding i18nRegion resource.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_I18nRegion *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#i18nRegionListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  Basic details about an i18n region, such as region code and human-readable
 *  name.
 */
@interface GTLRYouTube_I18nRegionSnippet : GTLRObject

/** The region code as a 2-letter ISO country code. */
@property(nonatomic, copy, nullable) NSString *gl;

/** The human-readable name of the region. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Branding properties for images associated with the channel.
 */
@interface GTLRYouTube_ImageSettings : GTLRObject

/**
 *  The URL for the background image shown on the video watch page. The image
 *  should be 1200px by 615px, with a maximum file size of 128k.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_LocalizedProperty *backgroundImageUrl;

/**
 *  This is used only in update requests; if it's set, we use this URL to
 *  generate all of the above banner URLs.
 */
@property(nonatomic, copy, nullable) NSString *bannerExternalUrl;

/** Banner image. Desktop size (1060x175). */
@property(nonatomic, copy, nullable) NSString *bannerImageUrl;

/** Banner image. Mobile size high resolution (1440x395). */
@property(nonatomic, copy, nullable) NSString *bannerMobileExtraHdImageUrl;

/** Banner image. Mobile size high resolution (1280x360). */
@property(nonatomic, copy, nullable) NSString *bannerMobileHdImageUrl;

/** Banner image. Mobile size (640x175). */
@property(nonatomic, copy, nullable) NSString *bannerMobileImageUrl;

/** Banner image. Mobile size low resolution (320x88). */
@property(nonatomic, copy, nullable) NSString *bannerMobileLowImageUrl;

/** Banner image. Mobile size medium/high resolution (960x263). */
@property(nonatomic, copy, nullable) NSString *bannerMobileMediumHdImageUrl;

/** Banner image. Tablet size extra high resolution (2560x424). */
@property(nonatomic, copy, nullable) NSString *bannerTabletExtraHdImageUrl;

/** Banner image. Tablet size high resolution (2276x377). */
@property(nonatomic, copy, nullable) NSString *bannerTabletHdImageUrl;

/** Banner image. Tablet size (1707x283). */
@property(nonatomic, copy, nullable) NSString *bannerTabletImageUrl;

/** Banner image. Tablet size low resolution (1138x188). */
@property(nonatomic, copy, nullable) NSString *bannerTabletLowImageUrl;

/** Banner image. TV size high resolution (1920x1080). */
@property(nonatomic, copy, nullable) NSString *bannerTvHighImageUrl;

/** Banner image. TV size extra high resolution (2120x1192). */
@property(nonatomic, copy, nullable) NSString *bannerTvImageUrl;

/** Banner image. TV size low resolution (854x480). */
@property(nonatomic, copy, nullable) NSString *bannerTvLowImageUrl;

/** Banner image. TV size medium resolution (1280x720). */
@property(nonatomic, copy, nullable) NSString *bannerTvMediumImageUrl;

/** The image map script for the large banner image. */
@property(nonatomic, strong, nullable) GTLRYouTube_LocalizedProperty *largeBrandedBannerImageImapScript;

/**
 *  The URL for the 854px by 70px image that appears below the video player in
 *  the expanded video view of the video watch page.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_LocalizedProperty *largeBrandedBannerImageUrl;

/** The image map script for the small banner image. */
@property(nonatomic, strong, nullable) GTLRYouTube_LocalizedProperty *smallBrandedBannerImageImapScript;

/**
 *  The URL for the 640px by 70px banner image that appears below the video
 *  player in the default view of the video watch page.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_LocalizedProperty *smallBrandedBannerImageUrl;

/**
 *  The URL for a 1px by 1px tracking pixel that can be used to collect
 *  statistics for views of the channel or video pages.
 */
@property(nonatomic, copy, nullable) NSString *trackingImageUrl;

/**
 *  The URL for the image that appears above the top-left corner of the video
 *  player. This is a 25-pixel-high image with a flexible width that cannot
 *  exceed 170 pixels.
 */
@property(nonatomic, copy, nullable) NSString *watchIconImageUrl;

@end


/**
 *  Describes information necessary for ingesting an RTMP or an HTTP stream.
 */
@interface GTLRYouTube_IngestionInfo : GTLRObject

/**
 *  The backup ingestion URL that you should use to stream video to YouTube. You
 *  have the option of simultaneously streaming the content that you are sending
 *  to the ingestionAddress to this URL.
 */
@property(nonatomic, copy, nullable) NSString *backupIngestionAddress;

/**
 *  The primary ingestion URL that you should use to stream video to YouTube.
 *  You must stream video to this URL.
 *  Depending on which application or tool you use to encode your video stream,
 *  you may need to enter the stream URL and stream name separately or you may
 *  need to concatenate them in the following format:
 *  STREAM_URL/STREAM_NAME
 */
@property(nonatomic, copy, nullable) NSString *ingestionAddress;

/** The HTTP or RTMP stream name that YouTube assigns to the video stream. */
@property(nonatomic, copy, nullable) NSString *streamName;

@end


/**
 *  GTLRYouTube_InvideoBranding
 */
@interface GTLRYouTube_InvideoBranding : GTLRObject

/**
 *  imageBytes
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *imageBytes;

@property(nonatomic, copy, nullable) NSString *imageUrl;
@property(nonatomic, strong, nullable) GTLRYouTube_InvideoPosition *position;
@property(nonatomic, copy, nullable) NSString *targetChannelId;
@property(nonatomic, strong, nullable) GTLRYouTube_InvideoTiming *timing;

@end


/**
 *  Describes the spatial position of a visual widget inside a video. It is a
 *  union of various position types, out of which only will be set one.
 */
@interface GTLRYouTube_InvideoPosition : GTLRObject

/**
 *  Describes in which corner of the video the visual widget will appear.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_InvideoPosition_CornerPosition_BottomLeft Value
 *        "bottomLeft"
 *    @arg @c kGTLRYouTube_InvideoPosition_CornerPosition_BottomRight Value
 *        "bottomRight"
 *    @arg @c kGTLRYouTube_InvideoPosition_CornerPosition_TopLeft Value
 *        "topLeft"
 *    @arg @c kGTLRYouTube_InvideoPosition_CornerPosition_TopRight Value
 *        "topRight"
 */
@property(nonatomic, copy, nullable) NSString *cornerPosition;

/**
 *  Defines the position type.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_InvideoPosition_Type_Corner Value "corner"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Describes an invideo promotion campaign consisting of multiple promoted
 *  items. A campaign belongs to a single channel_id.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRYouTube_InvideoPromotion : GTLRCollectionObject

/**
 *  The default temporal position within the video where the promoted item will
 *  be displayed. Can be overriden by more specific timing in the item.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_InvideoTiming *defaultTiming;

/**
 *  List of promoted items in decreasing priority.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_PromotedItem *> *items;

/**
 *  The spatial position within the video where the promoted item will be
 *  displayed.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_InvideoPosition *position;

/**
 *  Indicates whether the channel's promotional campaign uses "smart timing."
 *  This feature attempts to show promotions at a point in the video when they
 *  are more likely to be clicked and less likely to disrupt the viewing
 *  experience. This feature also picks up a single promotion to show on each
 *  video.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useSmartTiming;

@end


/**
 *  Describes a temporal position of a visual widget inside a video.
 */
@interface GTLRYouTube_InvideoTiming : GTLRObject

/**
 *  Defines the duration in milliseconds for which the promotion should be
 *  displayed. If missing, the client should use the default.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *durationMs;

/**
 *  Defines the time at which the promotion will appear. Depending on the value
 *  of type the value of the offsetMs field will represent a time offset from
 *  the start or from the end of the video, expressed in milliseconds.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offsetMs;

/**
 *  Describes a timing type. If the value is offsetFromStart, then the offsetMs
 *  field represents an offset from the start of the video. If the value is
 *  offsetFromEnd, then the offsetMs field represents an offset from the end of
 *  the video.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_InvideoTiming_Type_OffsetFromEnd Value
 *        "offsetFromEnd"
 *    @arg @c kGTLRYouTube_InvideoTiming_Type_OffsetFromStart Value
 *        "offsetFromStart"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRYouTube_LanguageTag
 */
@interface GTLRYouTube_LanguageTag : GTLRObject

@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A liveBroadcast resource represents an event that will be streamed, via live
 *  video, on YouTube.
 */
@interface GTLRYouTube_LiveBroadcast : GTLRObject

/**
 *  The contentDetails object contains information about the event's video
 *  content, such as whether the content can be shown in an embedded video
 *  player or if it will be archived and therefore available for viewing after
 *  the event has concluded.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_LiveBroadcastContentDetails *contentDetails;

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube assigns to uniquely identify the broadcast.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#liveBroadcast".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The snippet object contains basic details about the event, including its
 *  title, description, start time, and end time.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_LiveBroadcastSnippet *snippet;

/**
 *  The statistics object contains info about the event's current stats. These
 *  include concurrent viewers and total chat count. Statistics can change (in
 *  either direction) during the lifetime of an event. Statistics are only
 *  returned while the event is live.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_LiveBroadcastStatistics *statistics;

/** The status object contains information about the event's status. */
@property(nonatomic, strong, nullable) GTLRYouTube_LiveBroadcastStatus *status;

@end


/**
 *  Detailed settings of a broadcast.
 */
@interface GTLRYouTube_LiveBroadcastContentDetails : GTLRObject

/** This value uniquely identifies the live stream bound to the broadcast. */
@property(nonatomic, copy, nullable) NSString *boundStreamId;

/**
 *  The date and time that the live stream referenced by boundStreamId was last
 *  updated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *boundStreamLastUpdateTimeMs;

/**
 *  closedCaptionsType
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_LiveBroadcastContentDetails_ClosedCaptionsType_ClosedCaptionsDisabled
 *        Value "closedCaptionsDisabled"
 *    @arg @c kGTLRYouTube_LiveBroadcastContentDetails_ClosedCaptionsType_ClosedCaptionsEmbedded
 *        Value "closedCaptionsEmbedded"
 *    @arg @c kGTLRYouTube_LiveBroadcastContentDetails_ClosedCaptionsType_ClosedCaptionsHttpPost
 *        Value "closedCaptionsHttpPost"
 */
@property(nonatomic, copy, nullable) NSString *closedCaptionsType;

/**
 *  This setting indicates whether auto start is enabled for this broadcast.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableAutoStart;

/**
 *  This setting indicates whether HTTP POST closed captioning is enabled for
 *  this broadcast. The ingestion URL of the closed captions is returned through
 *  the liveStreams API. This is mutually exclusive with using the
 *  closed_captions_type property, and is equivalent to setting
 *  closed_captions_type to CLOSED_CAPTIONS_HTTP_POST.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableClosedCaptions;

/**
 *  This setting indicates whether YouTube should enable content encryption for
 *  the broadcast.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableContentEncryption;

/**
 *  This setting determines whether viewers can access DVR controls while
 *  watching the video. DVR controls enable the viewer to control the video
 *  playback experience by pausing, rewinding, or fast forwarding content. The
 *  default value for this property is true.
 *  Important: You must set the value to true and also set the enableArchive
 *  property's value to true if you want to make playback available immediately
 *  after the broadcast ends.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableDvr;

/**
 *  This setting indicates whether the broadcast video can be played in an
 *  embedded player. If you choose to archive the video (using the enableArchive
 *  property), this setting will also apply to the archived video.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableEmbed;

/**
 *  Indicates whether this broadcast has low latency enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableLowLatency;

/**
 *  If both this and enable_low_latency are set, they must match. LATENCY_NORMAL
 *  should match enable_low_latency=false LATENCY_LOW should match
 *  enable_low_latency=true LATENCY_ULTRA_LOW should have enable_low_latency
 *  omitted.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_LiveBroadcastContentDetails_LatencyPreference_Low
 *        Value "low"
 *    @arg @c kGTLRYouTube_LiveBroadcastContentDetails_LatencyPreference_Normal
 *        Value "normal"
 *    @arg @c kGTLRYouTube_LiveBroadcastContentDetails_LatencyPreference_UltraLow
 *        Value "ultraLow"
 */
@property(nonatomic, copy, nullable) NSString *latencyPreference;

/**
 *  mesh
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *mesh;

/**
 *  The monitorStream object contains information about the monitor stream,
 *  which the broadcaster can use to review the event content before the
 *  broadcast stream is shown publicly.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_MonitorStreamInfo *monitorStream;

/**
 *  The projection format of this broadcast. This defaults to rectangular.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_LiveBroadcastContentDetails_Projection_Mesh Value
 *        "mesh"
 *    @arg @c kGTLRYouTube_LiveBroadcastContentDetails_Projection_Rectangular
 *        Value "rectangular"
 *    @arg @c kGTLRYouTube_LiveBroadcastContentDetails_Projection_X360 Value
 *        "360"
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  Automatically start recording after the event goes live. The default value
 *  for this property is true.
 *  Important: You must also set the enableDvr property's value to true if you
 *  want the playback to be available immediately after the broadcast ends. If
 *  you set this property's value to true but do not also set the enableDvr
 *  property to true, there may be a delay of around one day before the archived
 *  video will be available for playback.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recordFromStart;

/**
 *  This setting indicates whether the broadcast should automatically begin with
 *  an in-stream slate when you update the broadcast's status to live. After
 *  updating the status, you then need to send a liveCuepoints.insert request
 *  that sets the cuepoint's eventState to end to remove the in-stream slate and
 *  make your broadcast stream visible to viewers.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startWithSlate;

/**
 *  stereoLayout
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_LiveBroadcastContentDetails_StereoLayout_LeftRight
 *        Value "left_right"
 *    @arg @c kGTLRYouTube_LiveBroadcastContentDetails_StereoLayout_Mono Value
 *        "mono"
 *    @arg @c kGTLRYouTube_LiveBroadcastContentDetails_StereoLayout_TopBottom
 *        Value "top_bottom"
 */
@property(nonatomic, copy, nullable) NSString *stereoLayout;

@end


/**
 *  GTLRYouTube_LiveBroadcastListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_LiveBroadcastListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of broadcasts that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_LiveBroadcast *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#liveBroadcastListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the previous page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *prevPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  GTLRYouTube_LiveBroadcastSnippet
 */
@interface GTLRYouTube_LiveBroadcastSnippet : GTLRObject

/**
 *  The date and time that the broadcast actually ended. This information is
 *  only available once the broadcast's state is complete. The value is
 *  specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *actualEndTime;

/**
 *  The date and time that the broadcast actually started. This information is
 *  only available once the broadcast's state is live. The value is specified in
 *  ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *actualStartTime;

/**
 *  The ID that YouTube uses to uniquely identify the channel that is publishing
 *  the broadcast.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  The broadcast's description. As with the title, you can set this field by
 *  modifying the broadcast resource or by setting the description field of the
 *  corresponding video resource.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  isDefaultBroadcast
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDefaultBroadcast;

/** The id of the live chat for this broadcast. */
@property(nonatomic, copy, nullable) NSString *liveChatId;

/**
 *  The date and time that the broadcast was added to YouTube's live broadcast
 *  schedule. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ)
 *  format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedAt;

/**
 *  The date and time that the broadcast is scheduled to end. The value is
 *  specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduledEndTime;

/**
 *  The date and time that the broadcast is scheduled to start. The value is
 *  specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduledStartTime;

/**
 *  A map of thumbnail images associated with the broadcast. For each nested
 *  object in this object, the key is the name of the thumbnail image, and the
 *  value is an object that contains other information about the thumbnail.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ThumbnailDetails *thumbnails;

/**
 *  The broadcast's title. Note that the broadcast represents exactly one
 *  YouTube video. You can set this field by modifying the broadcast resource or
 *  by setting the title field of the corresponding video resource.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Statistics about the live broadcast. These represent a snapshot of the
 *  values at the time of the request. Statistics are only returned for live
 *  broadcasts.
 */
@interface GTLRYouTube_LiveBroadcastStatistics : GTLRObject

/**
 *  The number of viewers currently watching the broadcast. The property and its
 *  value will be present if the broadcast has current viewers and the broadcast
 *  owner has not hidden the viewcount for the video. Note that YouTube stops
 *  tracking the number of concurrent viewers for a broadcast when the broadcast
 *  ends. So, this property would not identify the number of viewers watching an
 *  archived video of a live broadcast that already ended.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *concurrentViewers;

/**
 *  The total number of live chat messages currently on the broadcast. The
 *  property and its value will be present if the broadcast is public, has the
 *  live chat feature enabled, and has at least one message. Note that this
 *  field will not be filled after the broadcast ends. So this property would
 *  not identify the number of chat messages for an archived video of a
 *  completed live broadcast.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalChatCount;

@end


/**
 *  GTLRYouTube_LiveBroadcastStatus
 */
@interface GTLRYouTube_LiveBroadcastStatus : GTLRObject

/**
 *  The broadcast's status. The status can be updated using the API's
 *  liveBroadcasts.transition method.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_Abandoned Value
 *        "abandoned"
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_Complete Value
 *        "complete"
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_CompleteStarting
 *        Value "completeStarting"
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_Created Value
 *        "created"
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_Live Value "live"
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_LiveStarting
 *        Value "liveStarting"
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_Ready Value
 *        "ready"
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_Reclaimed Value
 *        "reclaimed"
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_Revoked Value
 *        "revoked"
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_Testing Value
 *        "testing"
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_LifeCycleStatus_TestStarting
 *        Value "testStarting"
 */
@property(nonatomic, copy, nullable) NSString *lifeCycleStatus;

/**
 *  Priority of the live broadcast event (internal state).
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_LiveBroadcastPriority_High Value
 *        "high"
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_LiveBroadcastPriority_Low Value
 *        "low"
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_LiveBroadcastPriority_Normal
 *        Value "normal"
 */
@property(nonatomic, copy, nullable) NSString *liveBroadcastPriority;

/**
 *  The broadcast's privacy status. Note that the broadcast represents exactly
 *  one YouTube video, so the privacy settings are identical to those supported
 *  for videos. In addition, you can set this field by modifying the broadcast
 *  resource or by setting the privacyStatus field of the corresponding video
 *  resource.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_PrivacyStatus_Private Value
 *        "private"
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_PrivacyStatus_Public Value
 *        "public"
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_PrivacyStatus_Unlisted Value
 *        "unlisted"
 */
@property(nonatomic, copy, nullable) NSString *privacyStatus;

/**
 *  The broadcast's recording status.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_RecordingStatus_NotRecording
 *        Value "notRecording"
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_RecordingStatus_Recorded Value
 *        "recorded"
 *    @arg @c kGTLRYouTube_LiveBroadcastStatus_RecordingStatus_Recording Value
 *        "recording"
 */
@property(nonatomic, copy, nullable) NSString *recordingStatus;

@end


/**
 *  A liveChatBan resource represents a ban for a YouTube live chat.
 */
@interface GTLRYouTube_LiveChatBan : GTLRObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube assigns to uniquely identify the ban.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#liveChatBan".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The snippet object contains basic details about the ban. */
@property(nonatomic, strong, nullable) GTLRYouTube_LiveChatBanSnippet *snippet;

@end


/**
 *  GTLRYouTube_LiveChatBanSnippet
 */
@interface GTLRYouTube_LiveChatBanSnippet : GTLRObject

/**
 *  The duration of a ban, only filled if the ban has type TEMPORARY.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *banDurationSeconds;

@property(nonatomic, strong, nullable) GTLRYouTube_ChannelProfileDetails *bannedUserDetails;

/** The chat this ban is pertinent to. */
@property(nonatomic, copy, nullable) NSString *liveChatId;

/**
 *  The type of ban.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_LiveChatBanSnippet_Type_Permanent Value "permanent"
 *    @arg @c kGTLRYouTube_LiveChatBanSnippet_Type_Temporary Value "temporary"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRYouTube_LiveChatFanFundingEventDetails
 */
@interface GTLRYouTube_LiveChatFanFundingEventDetails : GTLRObject

/**
 *  A rendered string that displays the fund amount and currency to the user.
 */
@property(nonatomic, copy, nullable) NSString *amountDisplayString;

/**
 *  The amount of the fund.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *amountMicros;

/** The currency in which the fund was made. */
@property(nonatomic, copy, nullable) NSString *currency;

/** The comment added by the user to this fan funding event. */
@property(nonatomic, copy, nullable) NSString *userComment;

@end


/**
 *  A liveChatMessage resource represents a chat message in a YouTube Live Chat.
 */
@interface GTLRYouTube_LiveChatMessage : GTLRObject

/**
 *  The authorDetails object contains basic details about the user that posted
 *  this message.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_LiveChatMessageAuthorDetails *authorDetails;

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube assigns to uniquely identify the message.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#liveChatMessage".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The snippet object contains basic details about the message. */
@property(nonatomic, strong, nullable) GTLRYouTube_LiveChatMessageSnippet *snippet;

@end


/**
 *  GTLRYouTube_LiveChatMessageAuthorDetails
 */
@interface GTLRYouTube_LiveChatMessageAuthorDetails : GTLRObject

/** The YouTube channel ID. */
@property(nonatomic, copy, nullable) NSString *channelId;

/** The channel's URL. */
@property(nonatomic, copy, nullable) NSString *channelUrl;

/** The channel's display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Whether the author is a moderator of the live chat.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isChatModerator;

/**
 *  Whether the author is the owner of the live chat.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isChatOwner;

/**
 *  Whether the author is a sponsor of the live chat.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isChatSponsor;

/**
 *  Whether the author's identity has been verified by YouTube.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isVerified;

/** The channels's avatar URL. */
@property(nonatomic, copy, nullable) NSString *profileImageUrl;

@end


/**
 *  GTLRYouTube_LiveChatMessageDeletedDetails
 */
@interface GTLRYouTube_LiveChatMessageDeletedDetails : GTLRObject

@property(nonatomic, copy, nullable) NSString *deletedMessageId;

@end


/**
 *  GTLRYouTube_LiveChatMessageListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_LiveChatMessageListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of live chat messages.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_LiveChatMessage *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#liveChatMessageListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The date and time when the underlying stream went offline. The value is
 *  specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *offlineAt;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;

/**
 *  The amount of time the client should wait before polling again.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pollingIntervalMillis;

@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  GTLRYouTube_LiveChatMessageRetractedDetails
 */
@interface GTLRYouTube_LiveChatMessageRetractedDetails : GTLRObject

@property(nonatomic, copy, nullable) NSString *retractedMessageId;

@end


/**
 *  GTLRYouTube_LiveChatMessageSnippet
 */
@interface GTLRYouTube_LiveChatMessageSnippet : GTLRObject

/**
 *  The ID of the user that authored this message, this field is not always
 *  filled. textMessageEvent - the user that wrote the message fanFundingEvent -
 *  the user that funded the broadcast newSponsorEvent - the user that just
 *  became a sponsor messageDeletedEvent - the moderator that took the action
 *  messageRetractedEvent - the author that retracted their message
 *  userBannedEvent - the moderator that took the action superChatEvent - the
 *  user that made the purchase
 */
@property(nonatomic, copy, nullable) NSString *authorChannelId;

/**
 *  Contains a string that can be displayed to the user. If this field is not
 *  present the message is silent, at the moment only messages of type TOMBSTONE
 *  and CHAT_ENDED_EVENT are silent.
 */
@property(nonatomic, copy, nullable) NSString *displayMessage;

/**
 *  Details about the funding event, this is only set if the type is
 *  'fanFundingEvent'.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_LiveChatFanFundingEventDetails *fanFundingEventDetails;

/**
 *  Whether the message has display content that should be displayed to users.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasDisplayContent;

@property(nonatomic, copy, nullable) NSString *liveChatId;
@property(nonatomic, strong, nullable) GTLRYouTube_LiveChatMessageDeletedDetails *messageDeletedDetails;
@property(nonatomic, strong, nullable) GTLRYouTube_LiveChatMessageRetractedDetails *messageRetractedDetails;
@property(nonatomic, strong, nullable) GTLRYouTube_LiveChatPollClosedDetails *pollClosedDetails;
@property(nonatomic, strong, nullable) GTLRYouTube_LiveChatPollEditedDetails *pollEditedDetails;
@property(nonatomic, strong, nullable) GTLRYouTube_LiveChatPollOpenedDetails *pollOpenedDetails;
@property(nonatomic, strong, nullable) GTLRYouTube_LiveChatPollVotedDetails *pollVotedDetails;

/**
 *  The date and time when the message was orignally published. The value is
 *  specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedAt;

/**
 *  Details about the Super Chat event, this is only set if the type is
 *  'superChatEvent'.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_LiveChatSuperChatDetails *superChatDetails;

/**
 *  Details about the text message, this is only set if the type is
 *  'textMessageEvent'.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_LiveChatTextMessageDetails *textMessageDetails;

/**
 *  The type of message, this will always be present, it determines the contents
 *  of the message as well as which fields will be present.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_LiveChatMessageSnippet_Type_ChatEndedEvent Value
 *        "chatEndedEvent"
 *    @arg @c kGTLRYouTube_LiveChatMessageSnippet_Type_FanFundingEvent Value
 *        "fanFundingEvent"
 *    @arg @c kGTLRYouTube_LiveChatMessageSnippet_Type_MessageDeletedEvent Value
 *        "messageDeletedEvent"
 *    @arg @c kGTLRYouTube_LiveChatMessageSnippet_Type_MessageRetractedEvent
 *        Value "messageRetractedEvent"
 *    @arg @c kGTLRYouTube_LiveChatMessageSnippet_Type_NewSponsorEvent Value
 *        "newSponsorEvent"
 *    @arg @c kGTLRYouTube_LiveChatMessageSnippet_Type_PollClosedEvent Value
 *        "pollClosedEvent"
 *    @arg @c kGTLRYouTube_LiveChatMessageSnippet_Type_PollEditedEvent Value
 *        "pollEditedEvent"
 *    @arg @c kGTLRYouTube_LiveChatMessageSnippet_Type_PollOpenedEvent Value
 *        "pollOpenedEvent"
 *    @arg @c kGTLRYouTube_LiveChatMessageSnippet_Type_PollVotedEvent Value
 *        "pollVotedEvent"
 *    @arg @c kGTLRYouTube_LiveChatMessageSnippet_Type_SponsorOnlyModeEndedEvent
 *        Value "sponsorOnlyModeEndedEvent"
 *    @arg @c kGTLRYouTube_LiveChatMessageSnippet_Type_SponsorOnlyModeStartedEvent
 *        Value "sponsorOnlyModeStartedEvent"
 *    @arg @c kGTLRYouTube_LiveChatMessageSnippet_Type_SuperChatEvent Value
 *        "superChatEvent"
 *    @arg @c kGTLRYouTube_LiveChatMessageSnippet_Type_TextMessageEvent Value
 *        "textMessageEvent"
 *    @arg @c kGTLRYouTube_LiveChatMessageSnippet_Type_Tombstone Value
 *        "tombstone"
 *    @arg @c kGTLRYouTube_LiveChatMessageSnippet_Type_UserBannedEvent Value
 *        "userBannedEvent"
 */
@property(nonatomic, copy, nullable) NSString *type;

@property(nonatomic, strong, nullable) GTLRYouTube_LiveChatUserBannedMessageDetails *userBannedDetails;

@end


/**
 *  A liveChatModerator resource represents a moderator for a YouTube live chat.
 *  A chat moderator has the ability to ban/unban users from a chat, remove
 *  message, etc.
 */
@interface GTLRYouTube_LiveChatModerator : GTLRObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube assigns to uniquely identify the moderator.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#liveChatModerator".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The snippet object contains basic details about the moderator. */
@property(nonatomic, strong, nullable) GTLRYouTube_LiveChatModeratorSnippet *snippet;

@end


/**
 *  GTLRYouTube_LiveChatModeratorListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_LiveChatModeratorListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of moderators that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_LiveChatModerator *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#liveChatModeratorListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the previous page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *prevPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  GTLRYouTube_LiveChatModeratorSnippet
 */
@interface GTLRYouTube_LiveChatModeratorSnippet : GTLRObject

/** The ID of the live chat this moderator can act on. */
@property(nonatomic, copy, nullable) NSString *liveChatId;

/** Details about the moderator. */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelProfileDetails *moderatorDetails;

@end


/**
 *  GTLRYouTube_LiveChatPollClosedDetails
 */
@interface GTLRYouTube_LiveChatPollClosedDetails : GTLRObject

/** The id of the poll that was closed. */
@property(nonatomic, copy, nullable) NSString *pollId;

@end


/**
 *  GTLRYouTube_LiveChatPollEditedDetails
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRYouTube_LiveChatPollEditedDetails : GTLRCollectionObject

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  items
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_LiveChatPollItem *> *items;

@property(nonatomic, copy, nullable) NSString *prompt;

@end


/**
 *  GTLRYouTube_LiveChatPollItem
 */
@interface GTLRYouTube_LiveChatPollItem : GTLRObject

/**
 *  Plain text description of the item.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

@property(nonatomic, copy, nullable) NSString *itemId;

@end


/**
 *  GTLRYouTube_LiveChatPollOpenedDetails
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRYouTube_LiveChatPollOpenedDetails : GTLRCollectionObject

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  items
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_LiveChatPollItem *> *items;

@property(nonatomic, copy, nullable) NSString *prompt;

@end


/**
 *  GTLRYouTube_LiveChatPollVotedDetails
 */
@interface GTLRYouTube_LiveChatPollVotedDetails : GTLRObject

/** The poll item the user chose. */
@property(nonatomic, copy, nullable) NSString *itemId;

/** The poll the user voted on. */
@property(nonatomic, copy, nullable) NSString *pollId;

@end


/**
 *  GTLRYouTube_LiveChatSuperChatDetails
 */
@interface GTLRYouTube_LiveChatSuperChatDetails : GTLRObject

/**
 *  A rendered string that displays the fund amount and currency to the user.
 */
@property(nonatomic, copy, nullable) NSString *amountDisplayString;

/**
 *  The amount purchased by the user, in micros (1,750,000 micros = 1.75).
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *amountMicros;

/** The currency in which the purchase was made. */
@property(nonatomic, copy, nullable) NSString *currency;

/**
 *  The tier in which the amount belongs to. Lower amounts belong to lower
 *  tiers. Starts at 1.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *tier;

/** The comment added by the user to this Super Chat event. */
@property(nonatomic, copy, nullable) NSString *userComment;

@end


/**
 *  GTLRYouTube_LiveChatTextMessageDetails
 */
@interface GTLRYouTube_LiveChatTextMessageDetails : GTLRObject

/** The user's message. */
@property(nonatomic, copy, nullable) NSString *messageText;

@end


/**
 *  GTLRYouTube_LiveChatUserBannedMessageDetails
 */
@interface GTLRYouTube_LiveChatUserBannedMessageDetails : GTLRObject

/**
 *  The duration of the ban. This property is only present if the banType is
 *  temporary.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *banDurationSeconds;

/** The details of the user that was banned. */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelProfileDetails *bannedUserDetails;

/**
 *  The type of ban.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_LiveChatUserBannedMessageDetails_BanType_Permanent
 *        Value "permanent"
 *    @arg @c kGTLRYouTube_LiveChatUserBannedMessageDetails_BanType_Temporary
 *        Value "temporary"
 */
@property(nonatomic, copy, nullable) NSString *banType;

@end


/**
 *  A live stream describes a live ingestion point.
 */
@interface GTLRYouTube_LiveStream : GTLRObject

/**
 *  The cdn object defines the live stream's content delivery network (CDN)
 *  settings. These settings provide details about the manner in which you
 *  stream your content to YouTube.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_CdnSettings *cdn;

/**
 *  The content_details object contains information about the stream, including
 *  the closed captions ingestion URL.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_LiveStreamContentDetails *contentDetails;

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube assigns to uniquely identify the stream.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#liveStream".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The snippet object contains basic details about the stream, including its
 *  channel, title, and description.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_LiveStreamSnippet *snippet;

/** The status object contains information about live stream's status. */
@property(nonatomic, strong, nullable) GTLRYouTube_LiveStreamStatus *status;

@end


/**
 *  GTLRYouTube_LiveStreamConfigurationIssue
 */
@interface GTLRYouTube_LiveStreamConfigurationIssue : GTLRObject

/**
 *  The long-form description of the issue and how to resolve it.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The short-form reason for this issue. */
@property(nonatomic, copy, nullable) NSString *reason;

/**
 *  How severe this issue is to the stream.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Severity_Error Value
 *        "error"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Severity_Info Value
 *        "info"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Severity_Warning Value
 *        "warning"
 */
@property(nonatomic, copy, nullable) NSString *severity;

/**
 *  The kind of error happening.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioBitrateHigh
 *        Value "audioBitrateHigh"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioBitrateLow
 *        Value "audioBitrateLow"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioBitrateMismatch
 *        Value "audioBitrateMismatch"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioCodec Value
 *        "audioCodec"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioCodecMismatch
 *        Value "audioCodecMismatch"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioSampleRate
 *        Value "audioSampleRate"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioSampleRateMismatch
 *        Value "audioSampleRateMismatch"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioStereoMismatch
 *        Value "audioStereoMismatch"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_AudioTooManyChannels
 *        Value "audioTooManyChannels"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_BadContainer Value
 *        "badContainer"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_BitrateHigh Value
 *        "bitrateHigh"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_BitrateLow Value
 *        "bitrateLow"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_FrameRateHigh Value
 *        "frameRateHigh"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_FramerateMismatch
 *        Value "framerateMismatch"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_GopMismatch Value
 *        "gopMismatch"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_GopSizeLong Value
 *        "gopSizeLong"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_GopSizeOver Value
 *        "gopSizeOver"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_GopSizeShort Value
 *        "gopSizeShort"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_InterlacedVideo
 *        Value "interlacedVideo"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_MultipleAudioStreams
 *        Value "multipleAudioStreams"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_MultipleVideoStreams
 *        Value "multipleVideoStreams"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_NoAudioStream Value
 *        "noAudioStream"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_NoVideoStream Value
 *        "noVideoStream"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_OpenGop Value
 *        "openGop"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_ResolutionMismatch
 *        Value "resolutionMismatch"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoBitrateMismatch
 *        Value "videoBitrateMismatch"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoCodec Value
 *        "videoCodec"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoCodecMismatch
 *        Value "videoCodecMismatch"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoIngestionFasterThanRealtime
 *        Value "videoIngestionFasterThanRealtime"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoIngestionStarved
 *        Value "videoIngestionStarved"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoInterlaceMismatch
 *        Value "videoInterlaceMismatch"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoProfileMismatch
 *        Value "videoProfileMismatch"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoResolutionSuboptimal
 *        Value "videoResolutionSuboptimal"
 *    @arg @c kGTLRYouTube_LiveStreamConfigurationIssue_Type_VideoResolutionUnsupported
 *        Value "videoResolutionUnsupported"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Detailed settings of a stream.
 */
@interface GTLRYouTube_LiveStreamContentDetails : GTLRObject

/** The ingestion URL where the closed captions of this stream are sent. */
@property(nonatomic, copy, nullable) NSString *closedCaptionsIngestionUrl;

/**
 *  Indicates whether the stream is reusable, which means that it can be bound
 *  to multiple broadcasts. It is common for broadcasters to reuse the same
 *  stream for many different broadcasts if those broadcasts occur at different
 *  times.
 *  If you set this value to false, then the stream will not be reusable, which
 *  means that it can only be bound to one broadcast. Non-reusable streams
 *  differ from reusable streams in the following ways:
 *  - A non-reusable stream can only be bound to one broadcast.
 *  - A non-reusable stream might be deleted by an automated process after the
 *  broadcast ends.
 *  - The liveStreams.list method does not list non-reusable streams if you call
 *  the method and set the mine parameter to true. The only way to use that
 *  method to retrieve the resource for a non-reusable stream is to use the id
 *  parameter to identify the stream.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isReusable;

@end


/**
 *  GTLRYouTube_LiveStreamHealthStatus
 */
@interface GTLRYouTube_LiveStreamHealthStatus : GTLRObject

/** The configurations issues on this stream */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_LiveStreamConfigurationIssue *> *configurationIssues;

/**
 *  The last time this status was updated (in seconds)
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastUpdateTimeSeconds;

/**
 *  The status code of this stream
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_LiveStreamHealthStatus_Status_Bad Value "bad"
 *    @arg @c kGTLRYouTube_LiveStreamHealthStatus_Status_Good Value "good"
 *    @arg @c kGTLRYouTube_LiveStreamHealthStatus_Status_NoData Value "noData"
 *    @arg @c kGTLRYouTube_LiveStreamHealthStatus_Status_Ok Value "ok"
 *    @arg @c kGTLRYouTube_LiveStreamHealthStatus_Status_Revoked Value "revoked"
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  GTLRYouTube_LiveStreamListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_LiveStreamListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of live streams that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_LiveStream *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#liveStreamListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the previous page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *prevPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  GTLRYouTube_LiveStreamSnippet
 */
@interface GTLRYouTube_LiveStreamSnippet : GTLRObject

/**
 *  The ID that YouTube uses to uniquely identify the channel that is
 *  transmitting the stream.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  The stream's description. The value cannot be longer than 10000 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  isDefaultStream
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDefaultStream;

/**
 *  The date and time that the stream was created. The value is specified in ISO
 *  8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedAt;

/**
 *  The stream's title. The value must be between 1 and 128 characters long.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Brief description of the live stream status.
 */
@interface GTLRYouTube_LiveStreamStatus : GTLRObject

/** The health status of the stream. */
@property(nonatomic, strong, nullable) GTLRYouTube_LiveStreamHealthStatus *healthStatus;

/**
 *  streamStatus
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_LiveStreamStatus_StreamStatus_Active Value "active"
 *    @arg @c kGTLRYouTube_LiveStreamStatus_StreamStatus_Created Value "created"
 *    @arg @c kGTLRYouTube_LiveStreamStatus_StreamStatus_Error Value "error"
 *    @arg @c kGTLRYouTube_LiveStreamStatus_StreamStatus_Inactive Value
 *        "inactive"
 *    @arg @c kGTLRYouTube_LiveStreamStatus_StreamStatus_Ready Value "ready"
 */
@property(nonatomic, copy, nullable) NSString *streamStatus;

@end


/**
 *  GTLRYouTube_LocalizedProperty
 */
@interface GTLRYouTube_LocalizedProperty : GTLRObject

/**
 *  defaultProperty
 *
 *  Remapped to 'defaultProperty' to avoid language reserved word 'default'.
 */
@property(nonatomic, copy, nullable) NSString *defaultProperty;

/** The language of the default property. */
@property(nonatomic, strong, nullable) GTLRYouTube_LanguageTag *defaultLanguage;

@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_LocalizedString *> *localized;

@end


/**
 *  GTLRYouTube_LocalizedString
 */
@interface GTLRYouTube_LocalizedString : GTLRObject

@property(nonatomic, copy, nullable) NSString *language;
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Settings and Info of the monitor stream
 */
@interface GTLRYouTube_MonitorStreamInfo : GTLRObject

/**
 *  If you have set the enableMonitorStream property to true, then this property
 *  determines the length of the live broadcast delay.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *broadcastStreamDelayMs;

/** HTML code that embeds a player that plays the monitor stream. */
@property(nonatomic, copy, nullable) NSString *embedHtml;

/**
 *  This value determines whether the monitor stream is enabled for the
 *  broadcast. If the monitor stream is enabled, then YouTube will broadcast the
 *  event content on a special stream intended only for the broadcaster's
 *  consumption. The broadcaster can use the stream to review the event content
 *  and also to identify the optimal times to insert cuepoints.
 *  You need to set this value to true if you intend to have a broadcast delay
 *  for your event.
 *  Note: This property cannot be updated once the broadcast is in the testing
 *  or live state.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableMonitorStream;

@end


/**
 *  Nonprofit information.
 */
@interface GTLRYouTube_Nonprofit : GTLRObject

/** Id of the nonprofit. */
@property(nonatomic, strong, nullable) GTLRYouTube_NonprofitId *nonprofitId;

/** Legal name of the nonprofit. */
@property(nonatomic, copy, nullable) NSString *nonprofitLegalName;

@end


/**
 *  GTLRYouTube_NonprofitId
 */
@interface GTLRYouTube_NonprofitId : GTLRObject

@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Paging details for lists of resources, including total number of items
 *  available and number of resources returned in a single page.
 */
@interface GTLRYouTube_PageInfo : GTLRObject

/**
 *  The number of results included in the API response.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resultsPerPage;

/**
 *  The total number of results in the result set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalResults;

@end


/**
 *  A playlist resource represents a YouTube playlist. A playlist is a
 *  collection of videos that can be viewed sequentially and shared with other
 *  users. A playlist can contain up to 200 videos, and YouTube does not limit
 *  the number of playlists that each user creates. By default, playlists are
 *  publicly visible to other users, but playlists can be public or private.
 *  YouTube also uses playlists to identify special collections of videos for a
 *  channel, such as:
 *  - uploaded videos
 *  - favorite videos
 *  - positively rated (liked) videos
 *  - watch history
 *  - watch later To be more specific, these lists are associated with a
 *  channel, which is a collection of a person, group, or company's videos,
 *  playlists, and other YouTube information. You can retrieve the playlist IDs
 *  for each of these lists from the channel resource for a given channel.
 *  You can then use the playlistItems.list method to retrieve any of those
 *  lists. You can also add or remove items from those lists by calling the
 *  playlistItems.insert and playlistItems.delete methods.
 */
@interface GTLRYouTube_Playlist : GTLRObject

/** The contentDetails object contains information like video count. */
@property(nonatomic, strong, nullable) GTLRYouTube_PlaylistContentDetails *contentDetails;

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube uses to uniquely identify the playlist.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#playlist".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Localizations for different languages */
@property(nonatomic, strong, nullable) GTLRYouTube_Playlist_Localizations *localizations;

/**
 *  The player object contains information that you would use to play the
 *  playlist in an embedded player.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_PlaylistPlayer *player;

/**
 *  The snippet object contains basic details about the playlist, such as its
 *  title and description.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_PlaylistSnippet *snippet;

/** The status object contains status information for the playlist. */
@property(nonatomic, strong, nullable) GTLRYouTube_PlaylistStatus *status;

@end


/**
 *  Localizations for different languages
 *
 *  @note This class is documented as having more properties of
 *        GTLRYouTube_PlaylistLocalization. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRYouTube_Playlist_Localizations : GTLRObject
@end


/**
 *  GTLRYouTube_PlaylistContentDetails
 */
@interface GTLRYouTube_PlaylistContentDetails : GTLRObject

/**
 *  The number of videos in the playlist.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *itemCount;

@end


/**
 *  A playlistItem resource identifies another resource, such as a video, that
 *  is included in a playlist. In addition, the playlistItem resource contains
 *  details about the included resource that pertain specifically to how that
 *  resource is used in that playlist.
 *  YouTube uses playlists to identify special collections of videos for a
 *  channel, such as:
 *  - uploaded videos
 *  - favorite videos
 *  - positively rated (liked) videos
 *  - watch history
 *  - watch later To be more specific, these lists are associated with a
 *  channel, which is a collection of a person, group, or company's videos,
 *  playlists, and other YouTube information.
 *  You can retrieve the playlist IDs for each of these lists from the channel
 *  resource for a given channel. You can then use the playlistItems.list method
 *  to retrieve any of those lists. You can also add or remove items from those
 *  lists by calling the playlistItems.insert and playlistItems.delete methods.
 *  For example, if a user gives a positive rating to a video, you would insert
 *  that video into the liked videos playlist for that user's channel.
 */
@interface GTLRYouTube_PlaylistItem : GTLRObject

/**
 *  The contentDetails object is included in the resource if the included item
 *  is a YouTube video. The object contains additional information about the
 *  video.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_PlaylistItemContentDetails *contentDetails;

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube uses to uniquely identify the playlist item.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#playlistItem".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The snippet object contains basic details about the playlist item, such as
 *  its title and position in the playlist.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_PlaylistItemSnippet *snippet;

/**
 *  The status object contains information about the playlist item's privacy
 *  status.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_PlaylistItemStatus *status;

@end


/**
 *  GTLRYouTube_PlaylistItemContentDetails
 */
@interface GTLRYouTube_PlaylistItemContentDetails : GTLRObject

/**
 *  The time, measured in seconds from the start of the video, when the video
 *  should stop playing. (The playlist owner can specify the times when the
 *  video should start and stop playing when the video is played in the context
 *  of the playlist.) By default, assume that the video.endTime is the end of
 *  the video.
 */
@property(nonatomic, copy, nullable) NSString *endAt;

/** A user-generated note for this item. */
@property(nonatomic, copy, nullable) NSString *note;

/**
 *  The time, measured in seconds from the start of the video, when the video
 *  should start playing. (The playlist owner can specify the times when the
 *  video should start and stop playing when the video is played in the context
 *  of the playlist.) The default value is 0.
 */
@property(nonatomic, copy, nullable) NSString *startAt;

/**
 *  The ID that YouTube uses to uniquely identify a video. To retrieve the video
 *  resource, set the id query parameter to this value in your API request.
 */
@property(nonatomic, copy, nullable) NSString *videoId;

/**
 *  The date and time that the video was published to YouTube. The value is
 *  specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *videoPublishedAt;

@end


/**
 *  GTLRYouTube_PlaylistItemListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_PlaylistItemListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of playlist items that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_PlaylistItem *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#playlistItemListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the previous page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *prevPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  Basic details about a playlist, including title, description and thumbnails.
 */
@interface GTLRYouTube_PlaylistItemSnippet : GTLRObject

/**
 *  The ID that YouTube uses to uniquely identify the user that added the item
 *  to the playlist.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/** Channel title for the channel that the playlist item belongs to. */
@property(nonatomic, copy, nullable) NSString *channelTitle;

/**
 *  The item's description.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The ID that YouTube uses to uniquely identify the playlist that the playlist
 *  item is in.
 */
@property(nonatomic, copy, nullable) NSString *playlistId;

/**
 *  The order in which the item appears in the playlist. The value uses a
 *  zero-based index, so the first item has a position of 0, the second item has
 *  a position of 1, and so forth.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *position;

/**
 *  The date and time that the item was added to the playlist. The value is
 *  specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedAt;

/**
 *  The id object contains information that can be used to uniquely identify the
 *  resource that is included in the playlist as the playlist item.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ResourceId *resourceId;

/**
 *  A map of thumbnail images associated with the playlist item. For each object
 *  in the map, the key is the name of the thumbnail image, and the value is an
 *  object that contains other information about the thumbnail.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ThumbnailDetails *thumbnails;

/** The item's title. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Information about the playlist item's privacy status.
 */
@interface GTLRYouTube_PlaylistItemStatus : GTLRObject

/**
 *  This resource's privacy status.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_PlaylistItemStatus_PrivacyStatus_Private Value
 *        "private"
 *    @arg @c kGTLRYouTube_PlaylistItemStatus_PrivacyStatus_Public Value
 *        "public"
 *    @arg @c kGTLRYouTube_PlaylistItemStatus_PrivacyStatus_Unlisted Value
 *        "unlisted"
 */
@property(nonatomic, copy, nullable) NSString *privacyStatus;

@end


/**
 *  GTLRYouTube_PlaylistListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_PlaylistListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of playlists that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_Playlist *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#playlistListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the previous page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *prevPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  Playlist localization setting
 */
@interface GTLRYouTube_PlaylistLocalization : GTLRObject

/**
 *  The localized strings for playlist's description.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The localized strings for playlist's title. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  GTLRYouTube_PlaylistPlayer
 */
@interface GTLRYouTube_PlaylistPlayer : GTLRObject

/** An <iframe> tag that embeds a player that will play the playlist. */
@property(nonatomic, copy, nullable) NSString *embedHtml;

@end


/**
 *  Basic details about a playlist, including title, description and thumbnails.
 */
@interface GTLRYouTube_PlaylistSnippet : GTLRObject

/**
 *  The ID that YouTube uses to uniquely identify the channel that published the
 *  playlist.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/** The channel title of the channel that the video belongs to. */
@property(nonatomic, copy, nullable) NSString *channelTitle;

/** The language of the playlist's default title and description. */
@property(nonatomic, copy, nullable) NSString *defaultLanguage;

/**
 *  The playlist's description.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Localized title and description, read-only. */
@property(nonatomic, strong, nullable) GTLRYouTube_PlaylistLocalization *localized;

/**
 *  The date and time that the playlist was created. The value is specified in
 *  ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedAt;

/** Keyword tags associated with the playlist. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

/**
 *  A map of thumbnail images associated with the playlist. For each object in
 *  the map, the key is the name of the thumbnail image, and the value is an
 *  object that contains other information about the thumbnail.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ThumbnailDetails *thumbnails;

/** The playlist's title. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  GTLRYouTube_PlaylistStatus
 */
@interface GTLRYouTube_PlaylistStatus : GTLRObject

/**
 *  The playlist's privacy status.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_PlaylistStatus_PrivacyStatus_Private Value "private"
 *    @arg @c kGTLRYouTube_PlaylistStatus_PrivacyStatus_Public Value "public"
 *    @arg @c kGTLRYouTube_PlaylistStatus_PrivacyStatus_Unlisted Value
 *        "unlisted"
 */
@property(nonatomic, copy, nullable) NSString *privacyStatus;

@end


/**
 *  Describes a single promoted item.
 */
@interface GTLRYouTube_PromotedItem : GTLRObject

/**
 *  A custom message to display for this promotion. This field is currently
 *  ignored unless the promoted item is a website.
 */
@property(nonatomic, copy, nullable) NSString *customMessage;

/**
 *  Identifies the promoted item.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) GTLRYouTube_PromotedItemId *identifier;

/**
 *  If true, the content owner's name will be used when displaying the
 *  promotion. This field can only be set when the update is made on behalf of
 *  the content owner.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *promotedByContentOwner;

/**
 *  The temporal position within the video where the promoted item will be
 *  displayed. If present, it overrides the default timing.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_InvideoTiming *timing;

@end


/**
 *  Describes a single promoted item id. It is a union of various possible
 *  types.
 */
@interface GTLRYouTube_PromotedItemId : GTLRObject

/**
 *  If type is recentUpload, this field identifies the channel from which to
 *  take the recent upload. If missing, the channel is assumed to be the same
 *  channel for which the invideoPromotion is set.
 */
@property(nonatomic, copy, nullable) NSString *recentlyUploadedBy;

/**
 *  Describes the type of the promoted item.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_PromotedItemId_Type_RecentUpload Value "recentUpload"
 *    @arg @c kGTLRYouTube_PromotedItemId_Type_Video Value "video"
 *    @arg @c kGTLRYouTube_PromotedItemId_Type_Website Value "website"
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  If the promoted item represents a video, this field represents the unique
 *  YouTube ID identifying it. This field will be present only if type has the
 *  value video.
 */
@property(nonatomic, copy, nullable) NSString *videoId;

/**
 *  If the promoted item represents a website, this field represents the url
 *  pointing to the website. This field will be present only if type has the
 *  value website.
 */
@property(nonatomic, copy, nullable) NSString *websiteUrl;

@end


/**
 *  A pair Property / Value.
 */
@interface GTLRYouTube_PropertyValue : GTLRObject

/** A property. */
@property(nonatomic, copy, nullable) NSString *property;

/** The property's value. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A resource id is a generic reference that points to another YouTube
 *  resource.
 */
@interface GTLRYouTube_ResourceId : GTLRObject

/**
 *  The ID that YouTube uses to uniquely identify the referred resource, if that
 *  resource is a channel. This property is only present if the resourceId.kind
 *  value is youtube#channel.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/** The type of the API resource. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The ID that YouTube uses to uniquely identify the referred resource, if that
 *  resource is a playlist. This property is only present if the resourceId.kind
 *  value is youtube#playlist.
 */
@property(nonatomic, copy, nullable) NSString *playlistId;

/**
 *  The ID that YouTube uses to uniquely identify the referred resource, if that
 *  resource is a video. This property is only present if the resourceId.kind
 *  value is youtube#video.
 */
@property(nonatomic, copy, nullable) NSString *videoId;

@end


/**
 *  GTLRYouTube_SearchListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_SearchListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of results that match the search criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_SearchResult *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#searchListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the previous page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *prevPageToken;

@property(nonatomic, copy, nullable) NSString *regionCode;
@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  A search result contains information about a YouTube video, channel, or
 *  playlist that matches the search parameters specified in an API request.
 *  While a search result points to a uniquely identifiable resource, like a
 *  video, it does not have its own persistent data.
 */
@interface GTLRYouTube_SearchResult : GTLRObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The id object contains information that can be used to uniquely identify the
 *  resource that matches the search request.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ResourceId *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#searchResult".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The snippet object contains basic details about a search result, such as its
 *  title or description. For example, if the search result is a video, then the
 *  title will be the video's title and the description will be the video's
 *  description.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_SearchResultSnippet *snippet;

@end


/**
 *  Basic details about a search result, including title, description and
 *  thumbnails of the item referenced by the search result.
 */
@interface GTLRYouTube_SearchResultSnippet : GTLRObject

/**
 *  The value that YouTube uses to uniquely identify the channel that published
 *  the resource that the search result identifies.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  The title of the channel that published the resource that the search result
 *  identifies.
 */
@property(nonatomic, copy, nullable) NSString *channelTitle;

/**
 *  A description of the search result.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  It indicates if the resource (video or channel) has upcoming/active live
 *  broadcast content. Or it's "none" if there is not any upcoming/active live
 *  broadcasts.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_SearchResultSnippet_LiveBroadcastContent_Live Value
 *        "live"
 *    @arg @c kGTLRYouTube_SearchResultSnippet_LiveBroadcastContent_None Value
 *        "none"
 *    @arg @c kGTLRYouTube_SearchResultSnippet_LiveBroadcastContent_Upcoming
 *        Value "upcoming"
 */
@property(nonatomic, copy, nullable) NSString *liveBroadcastContent;

/**
 *  The creation date and time of the resource that the search result
 *  identifies. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ)
 *  format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedAt;

/**
 *  A map of thumbnail images associated with the search result. For each object
 *  in the map, the key is the name of the thumbnail image, and the value is an
 *  object that contains other information about the thumbnail.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ThumbnailDetails *thumbnails;

/** The title of the search result. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  A sponsor resource represents a sponsor for a YouTube channel. A sponsor
 *  provides recurring monetary support to a creator and receives special
 *  benefits.
 */
@interface GTLRYouTube_Sponsor : GTLRObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube assigns to uniquely identify the sponsor.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#sponsor".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The snippet object contains basic details about the sponsor. */
@property(nonatomic, strong, nullable) GTLRYouTube_SponsorSnippet *snippet;

@end


/**
 *  GTLRYouTube_SponsorListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_SponsorListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of sponsors that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_Sponsor *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#sponsorListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;
@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  GTLRYouTube_SponsorSnippet
 */
@interface GTLRYouTube_SponsorSnippet : GTLRObject

/** The id of the channel being sponsored. */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  The cumulative time a user has been a sponsor in months.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cumulativeDurationMonths;

/** Details about the sponsor. */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelProfileDetails *sponsorDetails;

/**
 *  The date and time when the user became a sponsor. The value is specified in
 *  ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *sponsorSince;

@end


/**
 *  A subscription resource contains information about a YouTube user
 *  subscription. A subscription notifies a user when new videos are added to a
 *  channel or when another user takes one of several actions on YouTube, such
 *  as uploading a video, rating a video, or commenting on a video.
 */
@interface GTLRYouTube_Subscription : GTLRObject

/**
 *  The contentDetails object contains basic statistics about the subscription.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_SubscriptionContentDetails *contentDetails;

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube uses to uniquely identify the subscription.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#subscription".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The snippet object contains basic details about the subscription, including
 *  its title and the channel that the user subscribed to.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_SubscriptionSnippet *snippet;

/**
 *  The subscriberSnippet object contains basic details about the sbuscriber.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_SubscriptionSubscriberSnippet *subscriberSnippet;

@end


/**
 *  Details about the content to witch a subscription refers.
 */
@interface GTLRYouTube_SubscriptionContentDetails : GTLRObject

/**
 *  The type of activity this subscription is for (only uploads, everything).
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_SubscriptionContentDetails_ActivityType_All Value
 *        "all"
 *    @arg @c kGTLRYouTube_SubscriptionContentDetails_ActivityType_Uploads Value
 *        "uploads"
 */
@property(nonatomic, copy, nullable) NSString *activityType;

/**
 *  The number of new items in the subscription since its content was last read.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *newItemCount NS_RETURNS_NOT_RETAINED;

/**
 *  The approximate number of items that the subscription points to.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalItemCount;

@end


/**
 *  GTLRYouTube_SubscriptionListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_SubscriptionListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of subscriptions that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_Subscription *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#subscriptionListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the previous page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *prevPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  Basic details about a subscription, including title, description and
 *  thumbnails of the subscribed item.
 */
@interface GTLRYouTube_SubscriptionSnippet : GTLRObject

/** The ID that YouTube uses to uniquely identify the subscriber's channel. */
@property(nonatomic, copy, nullable) NSString *channelId;

/** Channel title for the channel that the subscription belongs to. */
@property(nonatomic, copy, nullable) NSString *channelTitle;

/**
 *  The subscription's details.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The date and time that the subscription was created. The value is specified
 *  in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedAt;

/**
 *  The id object contains information about the channel that the user
 *  subscribed to.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ResourceId *resourceId;

/**
 *  A map of thumbnail images associated with the video. For each object in the
 *  map, the key is the name of the thumbnail image, and the value is an object
 *  that contains other information about the thumbnail.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ThumbnailDetails *thumbnails;

/** The subscription's title. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Basic details about a subscription's subscriber including title,
 *  description, channel ID and thumbnails.
 */
@interface GTLRYouTube_SubscriptionSubscriberSnippet : GTLRObject

/** The channel ID of the subscriber. */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  The description of the subscriber.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Thumbnails for this subscriber. */
@property(nonatomic, strong, nullable) GTLRYouTube_ThumbnailDetails *thumbnails;

/** The title of the subscriber. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  A superChatEvent resource represents a Super Chat purchase on a YouTube
 *  channel.
 */
@interface GTLRYouTube_SuperChatEvent : GTLRObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube assigns to uniquely identify the Super Chat event.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#superChatEvent".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The snippet object contains basic details about the Super Chat event. */
@property(nonatomic, strong, nullable) GTLRYouTube_SuperChatEventSnippet *snippet;

@end


/**
 *  GTLRYouTube_SuperChatEventListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_SuperChatEventListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of Super Chat purchases that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_SuperChatEvent *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#superChatEventListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;
@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  GTLRYouTube_SuperChatEventSnippet
 */
@interface GTLRYouTube_SuperChatEventSnippet : GTLRObject

/**
 *  The purchase amount, in micros of the purchase currency. e.g., 1 is
 *  represented as 1000000.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *amountMicros;

/** Channel id where the event occurred. */
@property(nonatomic, copy, nullable) NSString *channelId;

/** The text contents of the comment left by the user. */
@property(nonatomic, copy, nullable) NSString *commentText;

/**
 *  The date and time when the event occurred. The value is specified in ISO
 *  8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createdAt;

/** The currency in which the purchase was made. ISO 4217. */
@property(nonatomic, copy, nullable) NSString *currency;

/**
 *  A rendered string that displays the purchase amount and currency (e.g.,
 *  "$1.00"). The string is rendered for the given language.
 */
@property(nonatomic, copy, nullable) NSString *displayString;

/**
 *  True if this event is a Super Chat for Good purchase.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isSuperChatForGood;

/**
 *  The tier for the paid message, which is based on the amount of money spent
 *  to purchase the message.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *messageType;

/**
 *  If this event is a Super Chat for Good purchase, this field will contain
 *  information about the charity the purchase is donated to.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_Nonprofit *nonprofit;

/** Details about the supporter. */
@property(nonatomic, strong, nullable) GTLRYouTube_ChannelProfileDetails *supporterDetails;

@end


/**
 *  A thumbnail is an image representing a YouTube resource.
 */
@interface GTLRYouTube_Thumbnail : GTLRObject

/**
 *  (Optional) Height of the thumbnail image.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *height;

/** The thumbnail image's URL. */
@property(nonatomic, copy, nullable) NSString *url;

/**
 *  (Optional) Width of the thumbnail image.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *width;

@end


/**
 *  Internal representation of thumbnails for a YouTube resource.
 */
@interface GTLRYouTube_ThumbnailDetails : GTLRObject

/**
 *  The default image for this resource.
 *
 *  Remapped to 'defaultProperty' to avoid language reserved word 'default'.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_Thumbnail *defaultProperty;

/** The high quality image for this resource. */
@property(nonatomic, strong, nullable) GTLRYouTube_Thumbnail *high;

/** The maximum resolution quality image for this resource. */
@property(nonatomic, strong, nullable) GTLRYouTube_Thumbnail *maxres;

/** The medium quality image for this resource. */
@property(nonatomic, strong, nullable) GTLRYouTube_Thumbnail *medium;

/** The standard quality image for this resource. */
@property(nonatomic, strong, nullable) GTLRYouTube_Thumbnail *standard;

@end


/**
 *  GTLRYouTube_ThumbnailSetResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRYouTube_ThumbnailSetResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of thumbnails.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_ThumbnailDetails *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#thumbnailSetResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  Stub token pagination template to suppress results.
 */
@interface GTLRYouTube_TokenPagination : GTLRObject
@end


/**
 *  A video resource represents a YouTube video.
 */
@interface GTLRYouTube_Video : GTLRObject

/**
 *  Age restriction details related to a video. This data can only be retrieved
 *  by the video owner.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoAgeGating *ageGating;

/**
 *  The contentDetails object contains information about the video content,
 *  including the length of the video and its aspect ratio.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoContentDetails *contentDetails;

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The fileDetails object encapsulates information about the video file that
 *  was uploaded to YouTube, including the file's resolution, duration, audio
 *  and video codecs, stream bitrates, and more. This data can only be retrieved
 *  by the video owner.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoFileDetails *fileDetails;

/**
 *  The ID that YouTube uses to uniquely identify the video.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#video".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The liveStreamingDetails object contains metadata about a live video
 *  broadcast. The object will only be present in a video resource if the video
 *  is an upcoming, live, or completed live broadcast.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoLiveStreamingDetails *liveStreamingDetails;

/** List with all localizations. */
@property(nonatomic, strong, nullable) GTLRYouTube_Video_Localizations *localizations;

/**
 *  The monetizationDetails object encapsulates information about the
 *  monetization status of the video.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoMonetizationDetails *monetizationDetails;

/**
 *  The player object contains information that you would use to play the video
 *  in an embedded player.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoPlayer *player;

/**
 *  The processingDetails object encapsulates information about YouTube's
 *  progress in processing the uploaded video file. The properties in the object
 *  identify the current processing status and an estimate of the time remaining
 *  until YouTube finishes processing the video. This part also indicates
 *  whether different types of data or content, such as file details or
 *  thumbnail images, are available for the video.
 *  The processingProgress object is designed to be polled so that the video
 *  uploaded can track the progress that YouTube has made in processing the
 *  uploaded video file. This data can only be retrieved by the video owner.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoProcessingDetails *processingDetails;

/**
 *  The projectDetails object contains information about the project specific
 *  video metadata.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoProjectDetails *projectDetails;

/**
 *  The recordingDetails object encapsulates information about the location,
 *  date and address where the video was recorded.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoRecordingDetails *recordingDetails;

/**
 *  The snippet object contains basic details about the video, such as its
 *  title, description, and category.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoSnippet *snippet;

/** The statistics object contains statistics about the video. */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoStatistics *statistics;

/**
 *  The status object contains information about the video's uploading,
 *  processing, and privacy statuses.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoStatus *status;

/**
 *  The suggestions object encapsulates suggestions that identify opportunities
 *  to improve the video quality or the metadata for the uploaded video. This
 *  data can only be retrieved by the video owner.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoSuggestions *suggestions;

/**
 *  The topicDetails object encapsulates information about Freebase topics
 *  associated with the video.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoTopicDetails *topicDetails;

@end


/**
 *  List with all localizations.
 *
 *  @note This class is documented as having more properties of
 *        GTLRYouTube_VideoLocalization. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRYouTube_Video_Localizations : GTLRObject
@end


/**
 *  GTLRYouTube_VideoAbuseReport
 */
@interface GTLRYouTube_VideoAbuseReport : GTLRObject

/** Additional comments regarding the abuse report. */
@property(nonatomic, copy, nullable) NSString *comments;

/** The language that the content was viewed in. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The high-level, or primary, reason that the content is abusive. The value is
 *  an abuse report reason ID.
 */
@property(nonatomic, copy, nullable) NSString *reasonId;

/**
 *  The specific, or secondary, reason that this content is abusive (if
 *  available). The value is an abuse report reason ID that is a valid secondary
 *  reason for the primary reason.
 */
@property(nonatomic, copy, nullable) NSString *secondaryReasonId;

/** The ID that YouTube uses to uniquely identify the video. */
@property(nonatomic, copy, nullable) NSString *videoId;

@end


/**
 *  A videoAbuseReportReason resource identifies a reason that a video could be
 *  reported as abusive. Video abuse report reasons are used with
 *  video.ReportAbuse.
 */
@interface GTLRYouTube_VideoAbuseReportReason : GTLRObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID of this abuse report reason.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#videoAbuseReportReason".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The snippet object contains basic details about the abuse report reason.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoAbuseReportReasonSnippet *snippet;

@end


/**
 *  GTLRYouTube_VideoAbuseReportReasonListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRYouTube_VideoAbuseReportReasonListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of valid abuse reasons that are used with video.ReportAbuse.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_VideoAbuseReportReason *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#videoAbuseReportReasonListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  Basic details about a video category, such as its localized title.
 */
@interface GTLRYouTube_VideoAbuseReportReasonSnippet : GTLRObject

/** The localized label belonging to this abuse report reason. */
@property(nonatomic, copy, nullable) NSString *label;

/**
 *  The secondary reasons associated with this reason, if any are available.
 *  (There might be 0 or more.)
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_VideoAbuseReportSecondaryReason *> *secondaryReasons;

@end


/**
 *  GTLRYouTube_VideoAbuseReportSecondaryReason
 */
@interface GTLRYouTube_VideoAbuseReportSecondaryReason : GTLRObject

/**
 *  The ID of this abuse report secondary reason.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The localized label for this abuse report secondary reason. */
@property(nonatomic, copy, nullable) NSString *label;

@end


/**
 *  GTLRYouTube_VideoAgeGating
 */
@interface GTLRYouTube_VideoAgeGating : GTLRObject

/**
 *  Indicates whether or not the video has alcoholic beverage content. Only
 *  users of legal purchasing age in a particular country, as identified by
 *  ICAP, can view the content.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *alcoholContent;

/**
 *  Age-restricted trailers. For redband trailers and adult-rated video-games.
 *  Only users aged 18+ can view the content. The the field is true the content
 *  is restricted to viewers aged 18+. Otherwise The field won't be present.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *restricted;

/**
 *  Video game rating, if any.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_VideoAgeGating_VideoGameRating_Anyone Value "anyone"
 *    @arg @c kGTLRYouTube_VideoAgeGating_VideoGameRating_M15Plus Value
 *        "m15Plus"
 *    @arg @c kGTLRYouTube_VideoAgeGating_VideoGameRating_M16Plus Value
 *        "m16Plus"
 *    @arg @c kGTLRYouTube_VideoAgeGating_VideoGameRating_M17Plus Value
 *        "m17Plus"
 */
@property(nonatomic, copy, nullable) NSString *videoGameRating;

@end


/**
 *  A videoCategory resource identifies a category that has been or could be
 *  associated with uploaded videos.
 */
@interface GTLRYouTube_VideoCategory : GTLRObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID that YouTube uses to uniquely identify the video category.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#videoCategory".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The snippet object contains basic details about the video category,
 *  including its title.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoCategorySnippet *snippet;

@end


/**
 *  GTLRYouTube_VideoCategoryListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_VideoCategoryListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of video categories that can be associated with YouTube videos. In
 *  this map, the video category ID is the map key, and its value is the
 *  corresponding videoCategory resource.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_VideoCategory *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#videoCategoryListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the previous page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *prevPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  Basic details about a video category, such as its localized title.
 */
@interface GTLRYouTube_VideoCategorySnippet : GTLRObject

/**
 *  assignable
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *assignable;

/** The YouTube channel that created the video category. */
@property(nonatomic, copy, nullable) NSString *channelId;

/** The video category's title. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Details about the content of a YouTube Video.
 */
@interface GTLRYouTube_VideoContentDetails : GTLRObject

/**
 *  The value of captions indicates whether the video has captions or not.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_VideoContentDetails_Caption_False Value "false"
 *    @arg @c kGTLRYouTube_VideoContentDetails_Caption_True Value "true"
 */
@property(nonatomic, copy, nullable) NSString *caption;

/**
 *  Specifies the ratings that the video received under various rating schemes.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ContentRating *contentRating;

/**
 *  The countryRestriction object contains information about the countries where
 *  a video is (or is not) viewable.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_AccessPolicy *countryRestriction;

/**
 *  The value of definition indicates whether the video is available in high
 *  definition or only in standard definition.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_VideoContentDetails_Definition_Hd Value "hd"
 *    @arg @c kGTLRYouTube_VideoContentDetails_Definition_Sd Value "sd"
 */
@property(nonatomic, copy, nullable) NSString *definition;

/**
 *  The value of dimension indicates whether the video is available in 3D or in
 *  2D.
 */
@property(nonatomic, copy, nullable) NSString *dimension;

/**
 *  The length of the video. The tag value is an ISO 8601 duration in the format
 *  PT#M#S, in which the letters PT indicate that the value specifies a period
 *  of time, and the letters M and S refer to length in minutes and seconds,
 *  respectively. The # characters preceding the M and S letters are both
 *  integers that specify the number of minutes (or seconds) of the video. For
 *  example, a value of PT15M51S indicates that the video is 15 minutes and 51
 *  seconds long.
 */
@property(nonatomic, copy, nullable) NSString *duration;

/**
 *  Indicates whether the video uploader has provided a custom thumbnail image
 *  for the video. This property is only visible to the video uploader.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasCustomThumbnail;

/**
 *  The value of is_license_content indicates whether the video is licensed
 *  content.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *licensedContent;

/**
 *  Specifies the projection format of the video.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_VideoContentDetails_Projection_Rectangular Value
 *        "rectangular"
 *    @arg @c kGTLRYouTube_VideoContentDetails_Projection_X360 Value "360"
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  The regionRestriction object contains information about the countries where
 *  a video is (or is not) viewable. The object will contain either the
 *  contentDetails.regionRestriction.allowed property or the
 *  contentDetails.regionRestriction.blocked property.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoContentDetailsRegionRestriction *regionRestriction;

@end


/**
 *  DEPRECATED Region restriction of the video.
 */
@interface GTLRYouTube_VideoContentDetailsRegionRestriction : GTLRObject

/**
 *  A list of region codes that identify countries where the video is viewable.
 *  If this property is present and a country is not listed in its value, then
 *  the video is blocked from appearing in that country. If this property is
 *  present and contains an empty list, the video is blocked in all countries.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowed;

/**
 *  A list of region codes that identify countries where the video is blocked.
 *  If this property is present and a country is not listed in its value, then
 *  the video is viewable in that country. If this property is present and
 *  contains an empty list, the video is viewable in all countries.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *blocked;

@end


/**
 *  Describes original video file properties, including technical details about
 *  audio and video streams, but also metadata information like content length,
 *  digitization time, or geotagging information.
 */
@interface GTLRYouTube_VideoFileDetails : GTLRObject

/**
 *  A list of audio streams contained in the uploaded video file. Each item in
 *  the list contains detailed metadata about an audio stream.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_VideoFileDetailsAudioStream *> *audioStreams;

/**
 *  The uploaded video file's combined (video and audio) bitrate in bits per
 *  second.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bitrateBps;

/** The uploaded video file's container format. */
@property(nonatomic, copy, nullable) NSString *container;

/**
 *  The date and time when the uploaded video file was created. The value is
 *  specified in ISO 8601 format. Currently, the following ISO 8601 formats are
 *  supported:
 *  - Date only: YYYY-MM-DD
 *  - Naive time: YYYY-MM-DDTHH:MM:SS
 *  - Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM
 */
@property(nonatomic, copy, nullable) NSString *creationTime;

/**
 *  The length of the uploaded video in milliseconds.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *durationMs;

/**
 *  The uploaded file's name. This field is present whether a video file or
 *  another type of file was uploaded.
 */
@property(nonatomic, copy, nullable) NSString *fileName;

/**
 *  The uploaded file's size in bytes. This field is present whether a video
 *  file or another type of file was uploaded.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fileSize;

/**
 *  The uploaded file's type as detected by YouTube's video processing engine.
 *  Currently, YouTube only processes video files, but this field is present
 *  whether a video file or another type of file was uploaded.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_VideoFileDetails_FileType_Archive Value "archive"
 *    @arg @c kGTLRYouTube_VideoFileDetails_FileType_Audio Value "audio"
 *    @arg @c kGTLRYouTube_VideoFileDetails_FileType_Document Value "document"
 *    @arg @c kGTLRYouTube_VideoFileDetails_FileType_Image Value "image"
 *    @arg @c kGTLRYouTube_VideoFileDetails_FileType_Other Value "other"
 *    @arg @c kGTLRYouTube_VideoFileDetails_FileType_Project Value "project"
 *    @arg @c kGTLRYouTube_VideoFileDetails_FileType_Video Value "video"
 */
@property(nonatomic, copy, nullable) NSString *fileType;

/**
 *  A list of video streams contained in the uploaded video file. Each item in
 *  the list contains detailed metadata about a video stream.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_VideoFileDetailsVideoStream *> *videoStreams;

@end


/**
 *  Information about an audio stream.
 */
@interface GTLRYouTube_VideoFileDetailsAudioStream : GTLRObject

/**
 *  The audio stream's bitrate, in bits per second.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bitrateBps;

/**
 *  The number of audio channels that the stream contains.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *channelCount;

/** The audio codec that the stream uses. */
@property(nonatomic, copy, nullable) NSString *codec;

/**
 *  A value that uniquely identifies a video vendor. Typically, the value is a
 *  four-letter vendor code.
 */
@property(nonatomic, copy, nullable) NSString *vendor;

@end


/**
 *  Information about a video stream.
 */
@interface GTLRYouTube_VideoFileDetailsVideoStream : GTLRObject

/**
 *  The video content's display aspect ratio, which specifies the aspect ratio
 *  in which the video should be displayed.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aspectRatio;

/**
 *  The video stream's bitrate, in bits per second.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bitrateBps;

/** The video codec that the stream uses. */
@property(nonatomic, copy, nullable) NSString *codec;

/**
 *  The video stream's frame rate, in frames per second.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *frameRateFps;

/**
 *  The encoded video content's height in pixels.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *heightPixels;

/**
 *  The amount that YouTube needs to rotate the original source content to
 *  properly display the video.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_VideoFileDetailsVideoStream_Rotation_Clockwise Value
 *        "clockwise"
 *    @arg @c kGTLRYouTube_VideoFileDetailsVideoStream_Rotation_CounterClockwise
 *        Value "counterClockwise"
 *    @arg @c kGTLRYouTube_VideoFileDetailsVideoStream_Rotation_None Value
 *        "none"
 *    @arg @c kGTLRYouTube_VideoFileDetailsVideoStream_Rotation_Other Value
 *        "other"
 *    @arg @c kGTLRYouTube_VideoFileDetailsVideoStream_Rotation_UpsideDown Value
 *        "upsideDown"
 */
@property(nonatomic, copy, nullable) NSString *rotation;

/**
 *  A value that uniquely identifies a video vendor. Typically, the value is a
 *  four-letter vendor code.
 */
@property(nonatomic, copy, nullable) NSString *vendor;

/**
 *  The encoded video content's width in pixels. You can calculate the video's
 *  encoding aspect ratio as width_pixels / height_pixels.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *widthPixels;

@end


/**
 *  GTLRYouTube_VideoGetRatingResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRYouTube_VideoGetRatingResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of ratings that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_VideoRating *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#videoGetRatingResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  GTLRYouTube_VideoListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRYouTube_VideoListResponse : GTLRCollectionObject

/** Etag of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Serialized EventId of the request which produced this response. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  A list of videos that match the request criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_Video *> *items;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "youtube#videoListResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the next page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_PageInfo *pageInfo;

/**
 *  The token that can be used as the value of the pageToken parameter to
 *  retrieve the previous page in the result set.
 */
@property(nonatomic, copy, nullable) NSString *prevPageToken;

@property(nonatomic, strong, nullable) GTLRYouTube_TokenPagination *tokenPagination;

/** The visitorId identifies the visitor. */
@property(nonatomic, copy, nullable) NSString *visitorId;

@end


/**
 *  Details about the live streaming metadata.
 */
@interface GTLRYouTube_VideoLiveStreamingDetails : GTLRObject

/**
 *  The ID of the currently active live chat attached to this video. This field
 *  is filled only if the video is a currently live broadcast that has live
 *  chat. Once the broadcast transitions to complete this field will be removed
 *  and the live chat closed down. For persistent broadcasts that live chat id
 *  will no longer be tied to this video but rather to the new video being
 *  displayed at the persistent page.
 */
@property(nonatomic, copy, nullable) NSString *activeLiveChatId;

/**
 *  The time that the broadcast actually ended. The value is specified in ISO
 *  8601 (YYYY-MM-DDThh:mm:ss.sZ) format. This value will not be available until
 *  the broadcast is over.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *actualEndTime;

/**
 *  The time that the broadcast actually started. The value is specified in ISO
 *  8601 (YYYY-MM-DDThh:mm:ss.sZ) format. This value will not be available until
 *  the broadcast begins.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *actualStartTime;

/**
 *  The number of viewers currently watching the broadcast. The property and its
 *  value will be present if the broadcast has current viewers and the broadcast
 *  owner has not hidden the viewcount for the video. Note that YouTube stops
 *  tracking the number of concurrent viewers for a broadcast when the broadcast
 *  ends. So, this property would not identify the number of viewers watching an
 *  archived video of a live broadcast that already ended.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *concurrentViewers;

/**
 *  The time that the broadcast is scheduled to end. The value is specified in
 *  ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. If the value is empty or the
 *  property is not present, then the broadcast is scheduled to continue
 *  indefinitely.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduledEndTime;

/**
 *  The time that the broadcast is scheduled to begin. The value is specified in
 *  ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduledStartTime;

@end


/**
 *  Localized versions of certain video properties (e.g. title).
 */
@interface GTLRYouTube_VideoLocalization : GTLRObject

/**
 *  Localized version of the video's description.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Localized version of the video's title. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Details about monetization of a YouTube Video.
 */
@interface GTLRYouTube_VideoMonetizationDetails : GTLRObject

/**
 *  The value of access indicates whether the video can be monetized or not.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_AccessPolicy *access;

@end


/**
 *  Player to be used for a video playback.
 */
@interface GTLRYouTube_VideoPlayer : GTLRObject

/**
 *  embedHeight
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *embedHeight;

/** An <iframe> tag that embeds a player that will play the video. */
@property(nonatomic, copy, nullable) NSString *embedHtml;

/**
 *  The embed width
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *embedWidth;

@end


/**
 *  Describes processing status and progress and availability of some other
 *  Video resource parts.
 */
@interface GTLRYouTube_VideoProcessingDetails : GTLRObject

/**
 *  This value indicates whether video editing suggestions, which might improve
 *  video quality or the playback experience, are available for the video. You
 *  can retrieve these suggestions by requesting the suggestions part in your
 *  videos.list() request.
 */
@property(nonatomic, copy, nullable) NSString *editorSuggestionsAvailability;

/**
 *  This value indicates whether file details are available for the uploaded
 *  video. You can retrieve a video's file details by requesting the fileDetails
 *  part in your videos.list() request.
 */
@property(nonatomic, copy, nullable) NSString *fileDetailsAvailability;

/**
 *  The reason that YouTube failed to process the video. This property will only
 *  have a value if the processingStatus property's value is failed.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_VideoProcessingDetails_ProcessingFailureReason_Other
 *        Value "other"
 *    @arg @c kGTLRYouTube_VideoProcessingDetails_ProcessingFailureReason_StreamingFailed
 *        Value "streamingFailed"
 *    @arg @c kGTLRYouTube_VideoProcessingDetails_ProcessingFailureReason_TranscodeFailed
 *        Value "transcodeFailed"
 *    @arg @c kGTLRYouTube_VideoProcessingDetails_ProcessingFailureReason_UploadFailed
 *        Value "uploadFailed"
 */
@property(nonatomic, copy, nullable) NSString *processingFailureReason;

/**
 *  This value indicates whether the video processing engine has generated
 *  suggestions that might improve YouTube's ability to process the the video,
 *  warnings that explain video processing problems, or errors that cause video
 *  processing problems. You can retrieve these suggestions by requesting the
 *  suggestions part in your videos.list() request.
 */
@property(nonatomic, copy, nullable) NSString *processingIssuesAvailability;

/**
 *  The processingProgress object contains information about the progress
 *  YouTube has made in processing the video. The values are really only
 *  relevant if the video's processing status is processing.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoProcessingDetailsProcessingProgress *processingProgress;

/**
 *  The video's processing status. This value indicates whether YouTube was able
 *  to process the video or if the video is still being processed.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_VideoProcessingDetails_ProcessingStatus_Failed Value
 *        "failed"
 *    @arg @c kGTLRYouTube_VideoProcessingDetails_ProcessingStatus_Processing
 *        Value "processing"
 *    @arg @c kGTLRYouTube_VideoProcessingDetails_ProcessingStatus_Succeeded
 *        Value "succeeded"
 *    @arg @c kGTLRYouTube_VideoProcessingDetails_ProcessingStatus_Terminated
 *        Value "terminated"
 */
@property(nonatomic, copy, nullable) NSString *processingStatus;

/**
 *  This value indicates whether keyword (tag) suggestions are available for the
 *  video. Tags can be added to a video's metadata to make it easier for other
 *  users to find the video. You can retrieve these suggestions by requesting
 *  the suggestions part in your videos.list() request.
 */
@property(nonatomic, copy, nullable) NSString *tagSuggestionsAvailability;

/**
 *  This value indicates whether thumbnail images have been generated for the
 *  video.
 */
@property(nonatomic, copy, nullable) NSString *thumbnailsAvailability;

@end


/**
 *  Video processing progress and completion time estimate.
 */
@interface GTLRYouTube_VideoProcessingDetailsProcessingProgress : GTLRObject

/**
 *  The number of parts of the video that YouTube has already processed. You can
 *  estimate the percentage of the video that YouTube has already processed by
 *  calculating:
 *  100 * parts_processed / parts_total
 *  Note that since the estimated number of parts could increase without a
 *  corresponding increase in the number of parts that have already been
 *  processed, it is possible that the calculated progress could periodically
 *  decrease while YouTube processes a video.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *partsProcessed;

/**
 *  An estimate of the total number of parts that need to be processed for the
 *  video. The number may be updated with more precise estimates while YouTube
 *  processes the video.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *partsTotal;

/**
 *  An estimate of the amount of time, in millseconds, that YouTube needs to
 *  finish processing the video.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timeLeftMs;

@end


/**
 *  Project specific details about the content of a YouTube Video.
 */
@interface GTLRYouTube_VideoProjectDetails : GTLRObject

/** A list of project tags associated with the video during the upload. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

@end


/**
 *  GTLRYouTube_VideoRating
 */
@interface GTLRYouTube_VideoRating : GTLRObject

/**
 *  rating
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_VideoRating_Rating_Dislike Value "dislike"
 *    @arg @c kGTLRYouTube_VideoRating_Rating_Like Value "like"
 *    @arg @c kGTLRYouTube_VideoRating_Rating_None Value "none"
 *    @arg @c kGTLRYouTube_VideoRating_Rating_Unspecified Value "unspecified"
 */
@property(nonatomic, copy, nullable) NSString *rating;

@property(nonatomic, copy, nullable) NSString *videoId;

@end


/**
 *  Recording information associated with the video.
 */
@interface GTLRYouTube_VideoRecordingDetails : GTLRObject

/** The geolocation information associated with the video. */
@property(nonatomic, strong, nullable) GTLRYouTube_GeoPoint *location;

/** The text description of the location where the video was recorded. */
@property(nonatomic, copy, nullable) NSString *locationDescription;

/**
 *  The date and time when the video was recorded. The value is specified in ISO
 *  8601 (YYYY-MM-DDThh:mm:ss.sssZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *recordingDate;

@end


/**
 *  Basic details about a video, including title, description, uploader,
 *  thumbnails and category.
 */
@interface GTLRYouTube_VideoSnippet : GTLRObject

/** The YouTube video category associated with the video. */
@property(nonatomic, copy, nullable) NSString *categoryId;

/**
 *  The ID that YouTube uses to uniquely identify the channel that the video was
 *  uploaded to.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/** Channel title for the channel that the video belongs to. */
@property(nonatomic, copy, nullable) NSString *channelTitle;

/**
 *  The default_audio_language property specifies the language spoken in the
 *  video's default audio track.
 */
@property(nonatomic, copy, nullable) NSString *defaultAudioLanguage;

/** The language of the videos's default snippet. */
@property(nonatomic, copy, nullable) NSString *defaultLanguage;

/**
 *  The video's description.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Indicates if the video is an upcoming/active live broadcast. Or it's "none"
 *  if the video is not an upcoming/active live broadcast.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_VideoSnippet_LiveBroadcastContent_Live Value "live"
 *    @arg @c kGTLRYouTube_VideoSnippet_LiveBroadcastContent_None Value "none"
 *    @arg @c kGTLRYouTube_VideoSnippet_LiveBroadcastContent_Upcoming Value
 *        "upcoming"
 */
@property(nonatomic, copy, nullable) NSString *liveBroadcastContent;

/**
 *  Localized snippet selected with the hl parameter. If no such localization
 *  exists, this field is populated with the default snippet. (Read-only)
 */
@property(nonatomic, strong, nullable) GTLRYouTube_VideoLocalization *localized;

/**
 *  The date and time that the video was uploaded. The value is specified in ISO
 *  8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedAt;

/**
 *  A list of keyword tags associated with the video. Tags may contain spaces.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

/**
 *  A map of thumbnail images associated with the video. For each object in the
 *  map, the key is the name of the thumbnail image, and the value is an object
 *  that contains other information about the thumbnail.
 */
@property(nonatomic, strong, nullable) GTLRYouTube_ThumbnailDetails *thumbnails;

/** The video's title. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Statistics about the video, such as the number of times the video was viewed
 *  or liked.
 */
@interface GTLRYouTube_VideoStatistics : GTLRObject

/**
 *  The number of comments for the video.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *commentCount;

/**
 *  The number of users who have indicated that they disliked the video by
 *  giving it a negative rating.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dislikeCount;

/**
 *  The number of users who currently have the video marked as a favorite video.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *favoriteCount;

/**
 *  The number of users who have indicated that they liked the video by giving
 *  it a positive rating.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *likeCount;

/**
 *  The number of times the video has been viewed.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *viewCount;

@end


/**
 *  Basic details about a video category, such as its localized title.
 */
@interface GTLRYouTube_VideoStatus : GTLRObject

/**
 *  This value indicates if the video can be embedded on another website.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *embeddable;

/**
 *  This value explains why a video failed to upload. This property is only
 *  present if the uploadStatus property indicates that the upload failed.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_VideoStatus_FailureReason_Codec Value "codec"
 *    @arg @c kGTLRYouTube_VideoStatus_FailureReason_Conversion Value
 *        "conversion"
 *    @arg @c kGTLRYouTube_VideoStatus_FailureReason_EmptyFile Value "emptyFile"
 *    @arg @c kGTLRYouTube_VideoStatus_FailureReason_InvalidFile Value
 *        "invalidFile"
 *    @arg @c kGTLRYouTube_VideoStatus_FailureReason_TooSmall Value "tooSmall"
 *    @arg @c kGTLRYouTube_VideoStatus_FailureReason_UploadAborted Value
 *        "uploadAborted"
 */
@property(nonatomic, copy, nullable) NSString *failureReason;

/**
 *  The video's license.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_VideoStatus_License_CreativeCommon Value
 *        "creativeCommon"
 *    @arg @c kGTLRYouTube_VideoStatus_License_Youtube Value "youtube"
 */
@property(nonatomic, copy, nullable) NSString *license;

/**
 *  The video's privacy status.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_VideoStatus_PrivacyStatus_Private Value "private"
 *    @arg @c kGTLRYouTube_VideoStatus_PrivacyStatus_Public Value "public"
 *    @arg @c kGTLRYouTube_VideoStatus_PrivacyStatus_Unlisted Value "unlisted"
 */
@property(nonatomic, copy, nullable) NSString *privacyStatus;

/**
 *  This value indicates if the extended video statistics on the watch page can
 *  be viewed by everyone. Note that the view count, likes, etc will still be
 *  visible if this is disabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *publicStatsViewable;

/**
 *  The date and time when the video is scheduled to publish. It can be set only
 *  if the privacy status of the video is private. The value is specified in ISO
 *  8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishAt;

/**
 *  This value explains why YouTube rejected an uploaded video. This property is
 *  only present if the uploadStatus property indicates that the upload was
 *  rejected.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_VideoStatus_RejectionReason_Claim Value "claim"
 *    @arg @c kGTLRYouTube_VideoStatus_RejectionReason_Copyright Value
 *        "copyright"
 *    @arg @c kGTLRYouTube_VideoStatus_RejectionReason_Duplicate Value
 *        "duplicate"
 *    @arg @c kGTLRYouTube_VideoStatus_RejectionReason_Inappropriate Value
 *        "inappropriate"
 *    @arg @c kGTLRYouTube_VideoStatus_RejectionReason_Legal Value "legal"
 *    @arg @c kGTLRYouTube_VideoStatus_RejectionReason_Length Value "length"
 *    @arg @c kGTLRYouTube_VideoStatus_RejectionReason_TermsOfUse Value
 *        "termsOfUse"
 *    @arg @c kGTLRYouTube_VideoStatus_RejectionReason_Trademark Value
 *        "trademark"
 *    @arg @c kGTLRYouTube_VideoStatus_RejectionReason_UploaderAccountClosed
 *        Value "uploaderAccountClosed"
 *    @arg @c kGTLRYouTube_VideoStatus_RejectionReason_UploaderAccountSuspended
 *        Value "uploaderAccountSuspended"
 */
@property(nonatomic, copy, nullable) NSString *rejectionReason;

/**
 *  The status of the uploaded video.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTube_VideoStatus_UploadStatus_Deleted Value "deleted"
 *    @arg @c kGTLRYouTube_VideoStatus_UploadStatus_Failed Value "failed"
 *    @arg @c kGTLRYouTube_VideoStatus_UploadStatus_Processed Value "processed"
 *    @arg @c kGTLRYouTube_VideoStatus_UploadStatus_Rejected Value "rejected"
 *    @arg @c kGTLRYouTube_VideoStatus_UploadStatus_Uploaded Value "uploaded"
 */
@property(nonatomic, copy, nullable) NSString *uploadStatus;

@end


/**
 *  Specifies suggestions on how to improve video content, including encoding
 *  hints, tag suggestions, and editor suggestions.
 */
@interface GTLRYouTube_VideoSuggestions : GTLRObject

/**
 *  A list of video editing operations that might improve the video quality or
 *  playback experience of the uploaded video.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *editorSuggestions;

/**
 *  A list of errors that will prevent YouTube from successfully processing the
 *  uploaded video video. These errors indicate that, regardless of the video's
 *  current processing status, eventually, that status will almost certainly be
 *  failed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *processingErrors;

/**
 *  A list of suggestions that may improve YouTube's ability to process the
 *  video.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *processingHints;

/**
 *  A list of reasons why YouTube may have difficulty transcoding the uploaded
 *  video or that might result in an erroneous transcoding. These warnings are
 *  generated before YouTube actually processes the uploaded video file. In
 *  addition, they identify issues that are unlikely to cause the video
 *  processing to fail but that might cause problems such as sync issues, video
 *  artifacts, or a missing audio track.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *processingWarnings;

/**
 *  A list of keyword tags that could be added to the video's metadata to
 *  increase the likelihood that users will locate your video when searching or
 *  browsing on YouTube.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRYouTube_VideoSuggestionsTagSuggestion *> *tagSuggestions;

@end


/**
 *  A single tag suggestion with it's relevance information.
 */
@interface GTLRYouTube_VideoSuggestionsTagSuggestion : GTLRObject

/**
 *  A set of video categories for which the tag is relevant. You can use this
 *  information to display appropriate tag suggestions based on the video
 *  category that the video uploader associates with the video. By default, tag
 *  suggestions are relevant for all categories if there are no restricts
 *  defined for the keyword.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *categoryRestricts;

/** The keyword tag suggested for the video. */
@property(nonatomic, copy, nullable) NSString *tag;

@end


/**
 *  Freebase topic information related to the video.
 */
@interface GTLRYouTube_VideoTopicDetails : GTLRObject

/**
 *  Similar to topic_id, except that these topics are merely relevant to the
 *  video. These are topics that may be mentioned in, or appear in the video.
 *  You can retrieve information about each topic using Freebase Topic API.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *relevantTopicIds;

/**
 *  A list of Wikipedia URLs that provide a high-level description of the
 *  video's content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *topicCategories;

/**
 *  A list of Freebase topic IDs that are centrally associated with the video.
 *  These are topics that are centrally featured in the video, and it can be
 *  said that the video is mainly about each of these. You can retrieve
 *  information about each topic using the Freebase Topic API.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *topicIds;

@end


/**
 *  Branding properties for the watch. All deprecated.
 */
@interface GTLRYouTube_WatchSettings : GTLRObject

/** The text color for the video watch page's branded area. */
@property(nonatomic, copy, nullable) NSString *backgroundColor;

/**
 *  An ID that uniquely identifies a playlist that displays next to the video
 *  player.
 */
@property(nonatomic, copy, nullable) NSString *featuredPlaylistId;

/** The background color for the video watch page's branded area. */
@property(nonatomic, copy, nullable) NSString *textColor;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
