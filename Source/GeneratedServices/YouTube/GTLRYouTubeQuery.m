// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   YouTube Data API (youtube/v3)
// Description:
//   Supports core YouTube features, such as uploading videos, creating and
//   managing playlists, searching for content, and much more.
// Documentation:
//   https://developers.google.com/youtube/v3

#import "GTLRYouTubeQuery.h"

#import "GTLRYouTubeObjects.h"

// ----------------------------------------------------------------------------
// Constants

// broadcastStatus
NSString * const kGTLRYouTubeBroadcastStatusActive    = @"active";
NSString * const kGTLRYouTubeBroadcastStatusAll       = @"all";
NSString * const kGTLRYouTubeBroadcastStatusComplete  = @"complete";
NSString * const kGTLRYouTubeBroadcastStatusCompleted = @"completed";
NSString * const kGTLRYouTubeBroadcastStatusLive      = @"live";
NSString * const kGTLRYouTubeBroadcastStatusTesting   = @"testing";
NSString * const kGTLRYouTubeBroadcastStatusUpcoming  = @"upcoming";

// broadcastType
NSString * const kGTLRYouTubeBroadcastTypeAll        = @"all";
NSString * const kGTLRYouTubeBroadcastTypeEvent      = @"event";
NSString * const kGTLRYouTubeBroadcastTypePersistent = @"persistent";

// channelType
NSString * const kGTLRYouTubeChannelTypeAny  = @"any";
NSString * const kGTLRYouTubeChannelTypeShow = @"show";

// chart
NSString * const kGTLRYouTubeChartMostPopular = @"mostPopular";

// eventType
NSString * const kGTLRYouTubeEventTypeCompleted = @"completed";
NSString * const kGTLRYouTubeEventTypeLive      = @"live";
NSString * const kGTLRYouTubeEventTypeUpcoming  = @"upcoming";

// filter
NSString * const kGTLRYouTubeFilterAll    = @"all";
NSString * const kGTLRYouTubeFilterNewest = @"newest";

// moderationStatus
NSString * const kGTLRYouTubeModerationStatusHeldForReview = @"heldForReview";
NSString * const kGTLRYouTubeModerationStatusLikelySpam    = @"likelySpam";
NSString * const kGTLRYouTubeModerationStatusPublished     = @"published";
NSString * const kGTLRYouTubeModerationStatusRejected      = @"rejected";

// myRating
NSString * const kGTLRYouTubeMyRatingDislike = @"dislike";
NSString * const kGTLRYouTubeMyRatingLike    = @"like";

// order
NSString * const kGTLRYouTubeOrderAlphabetical = @"alphabetical";
NSString * const kGTLRYouTubeOrderDate         = @"date";
NSString * const kGTLRYouTubeOrderRating       = @"rating";
NSString * const kGTLRYouTubeOrderRelevance    = @"relevance";
NSString * const kGTLRYouTubeOrderTime         = @"time";
NSString * const kGTLRYouTubeOrderTitle        = @"title";
NSString * const kGTLRYouTubeOrderUnread       = @"unread";
NSString * const kGTLRYouTubeOrderVideoCount   = @"videoCount";
NSString * const kGTLRYouTubeOrderViewCount    = @"viewCount";

// rating
NSString * const kGTLRYouTubeRatingDislike = @"dislike";
NSString * const kGTLRYouTubeRatingLike    = @"like";
NSString * const kGTLRYouTubeRatingNone    = @"none";

// safeSearch
NSString * const kGTLRYouTubeSafeSearchModerate = @"moderate";
NSString * const kGTLRYouTubeSafeSearchNone     = @"none";
NSString * const kGTLRYouTubeSafeSearchStrict   = @"strict";

// textFormat
NSString * const kGTLRYouTubeTextFormatHtml      = @"html";
NSString * const kGTLRYouTubeTextFormatPlainText = @"plainText";

// tfmt
NSString * const kGTLRYouTubeTfmtSbv  = @"sbv";
NSString * const kGTLRYouTubeTfmtScc  = @"scc";
NSString * const kGTLRYouTubeTfmtSrt  = @"srt";
NSString * const kGTLRYouTubeTfmtTtml = @"ttml";
NSString * const kGTLRYouTubeTfmtVtt  = @"vtt";

// videoCaption
NSString * const kGTLRYouTubeVideoCaptionAny           = @"any";
NSString * const kGTLRYouTubeVideoCaptionClosedCaption = @"closedCaption";
NSString * const kGTLRYouTubeVideoCaptionNone          = @"none";

// videoDefinition
NSString * const kGTLRYouTubeVideoDefinitionAny      = @"any";
NSString * const kGTLRYouTubeVideoDefinitionHigh     = @"high";
NSString * const kGTLRYouTubeVideoDefinitionStandard = @"standard";

// videoDimension
NSString * const kGTLRYouTubeVideoDimensionAny = @"any";
NSString * const kGTLRYouTubeVideoDimensionX2d = @"2d";
NSString * const kGTLRYouTubeVideoDimensionX3d = @"3d";

// videoDuration
NSString * const kGTLRYouTubeVideoDurationAny    = @"any";
NSString * const kGTLRYouTubeVideoDurationLong   = @"long";
NSString * const kGTLRYouTubeVideoDurationMedium = @"medium";
NSString * const kGTLRYouTubeVideoDurationShort  = @"short";

// videoEmbeddable
NSString * const kGTLRYouTubeVideoEmbeddableAny  = @"any";
NSString * const kGTLRYouTubeVideoEmbeddableTrue = @"true";

// videoLicense
NSString * const kGTLRYouTubeVideoLicenseAny            = @"any";
NSString * const kGTLRYouTubeVideoLicenseCreativeCommon = @"creativeCommon";
NSString * const kGTLRYouTubeVideoLicenseYoutube        = @"youtube";

// videoSyndicated
NSString * const kGTLRYouTubeVideoSyndicatedAny  = @"any";
NSString * const kGTLRYouTubeVideoSyndicatedTrue = @"true";

// videoType
NSString * const kGTLRYouTubeVideoTypeAny     = @"any";
NSString * const kGTLRYouTubeVideoTypeEpisode = @"episode";
NSString * const kGTLRYouTubeVideoTypeMovie   = @"movie";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRYouTubeQuery

@dynamic fields;

@end

@implementation GTLRYouTubeQuery_ActivitiesInsert

@dynamic part;

+ (instancetype)queryWithObject:(GTLRYouTube_Activity *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"activities";
  GTLRYouTubeQuery_ActivitiesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_Activity class];
  query.loggingName = @"youtube.activities.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ActivitiesList

@dynamic channelId, home, maxResults, mine, pageToken, part, publishedAfter,
         publishedBefore, regionCode;

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"activities";
  GTLRYouTubeQuery_ActivitiesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_ActivityListResponse class];
  query.loggingName = @"youtube.activities.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CaptionsDelete

@dynamic identifier, onBehalfOf, onBehalfOfContentOwner;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"captions";
  GTLRYouTubeQuery_CaptionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.captions.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CaptionsDownload

@dynamic identifier, onBehalfOf, onBehalfOfContentOwner, tfmt, tlang;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"captions/{id}";
  GTLRYouTubeQuery_CaptionsDownload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.identifier = identifier;
  query.loggingName = @"youtube.captions.download";
  return query;
}

+ (instancetype)queryForMediaWithIdentifier:(NSString *)identifier {
  GTLRYouTubeQuery_CaptionsDownload *query =
    [self queryWithIdentifier:identifier];
  query.downloadAsDataObjectType = @"media";
  query.loggingName = @"Download youtube.captions.download";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CaptionsInsert

@dynamic onBehalfOf, onBehalfOfContentOwner, part, sync;

+ (instancetype)queryWithObject:(GTLRYouTube_Caption *)object
                           part:(NSString *)part
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"captions";
  GTLRYouTubeQuery_CaptionsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRYouTube_Caption class];
  query.loggingName = @"youtube.captions.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CaptionsList

@dynamic identifier, onBehalfOf, onBehalfOfContentOwner, part, videoId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithPart:(NSString *)part
                      videoId:(NSString *)videoId {
  NSString *pathURITemplate = @"captions";
  GTLRYouTubeQuery_CaptionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.videoId = videoId;
  query.expectedObjectClass = [GTLRYouTube_CaptionListResponse class];
  query.loggingName = @"youtube.captions.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CaptionsUpdate

@dynamic onBehalfOf, onBehalfOfContentOwner, part, sync;

+ (instancetype)queryWithObject:(GTLRYouTube_Caption *)object
                           part:(NSString *)part
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"captions";
  GTLRYouTubeQuery_CaptionsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRYouTube_Caption class];
  query.loggingName = @"youtube.captions.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ChannelBannersInsert

@dynamic channelId, onBehalfOfContentOwner;

+ (instancetype)queryWithObject:(GTLRYouTube_ChannelBannerResource *)object
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"channelBanners/insert";
  GTLRYouTubeQuery_ChannelBannersInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRYouTube_ChannelBannerResource class];
  query.loggingName = @"youtube.channelBanners.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ChannelSectionsDelete

@dynamic identifier, onBehalfOfContentOwner;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"channelSections";
  GTLRYouTubeQuery_ChannelSectionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.channelSections.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ChannelSectionsInsert

@dynamic onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, part;

+ (instancetype)queryWithObject:(GTLRYouTube_ChannelSection *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"channelSections";
  GTLRYouTubeQuery_ChannelSectionsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_ChannelSection class];
  query.loggingName = @"youtube.channelSections.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ChannelSectionsList

@dynamic channelId, hl, identifier, mine, onBehalfOfContentOwner, part;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"channelSections";
  GTLRYouTubeQuery_ChannelSectionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_ChannelSectionListResponse class];
  query.loggingName = @"youtube.channelSections.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ChannelSectionsUpdate

@dynamic onBehalfOfContentOwner, part;

+ (instancetype)queryWithObject:(GTLRYouTube_ChannelSection *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"channelSections";
  GTLRYouTubeQuery_ChannelSectionsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_ChannelSection class];
  query.loggingName = @"youtube.channelSections.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ChannelsList

@dynamic categoryId, forUsername, hl, identifier, managedByMe, maxResults, mine,
         mySubscribers, onBehalfOfContentOwner, pageToken, part;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"channels";
  GTLRYouTubeQuery_ChannelsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_ChannelListResponse class];
  query.loggingName = @"youtube.channels.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ChannelsUpdate

@dynamic onBehalfOfContentOwner, part;

+ (instancetype)queryWithObject:(GTLRYouTube_Channel *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"channels";
  GTLRYouTubeQuery_ChannelsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_Channel class];
  query.loggingName = @"youtube.channels.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentsDelete

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"comments";
  GTLRYouTubeQuery_CommentsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.comments.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentsInsert

@dynamic part;

+ (instancetype)queryWithObject:(GTLRYouTube_Comment *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"comments";
  GTLRYouTubeQuery_CommentsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_Comment class];
  query.loggingName = @"youtube.comments.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentsList

@dynamic identifier, maxResults, pageToken, parentId, part, textFormat;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"comments";
  GTLRYouTubeQuery_CommentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_CommentListResponse class];
  query.loggingName = @"youtube.comments.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentsMarkAsSpam

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"comments/markAsSpam";
  GTLRYouTubeQuery_CommentsMarkAsSpam *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.comments.markAsSpam";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentsSetModerationStatus

@dynamic banAuthor, identifier, moderationStatus;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier
                   moderationStatus:(NSString *)moderationStatus {
  NSString *pathURITemplate = @"comments/setModerationStatus";
  GTLRYouTubeQuery_CommentsSetModerationStatus *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.moderationStatus = moderationStatus;
  query.loggingName = @"youtube.comments.setModerationStatus";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentsUpdate

@dynamic part;

+ (instancetype)queryWithObject:(GTLRYouTube_Comment *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"comments";
  GTLRYouTubeQuery_CommentsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_Comment class];
  query.loggingName = @"youtube.comments.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentThreadsInsert

@dynamic part;

+ (instancetype)queryWithObject:(GTLRYouTube_CommentThread *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"commentThreads";
  GTLRYouTubeQuery_CommentThreadsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_CommentThread class];
  query.loggingName = @"youtube.commentThreads.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentThreadsList

@dynamic allThreadsRelatedToChannelId, channelId, identifier, maxResults,
         moderationStatus, order, pageToken, part, searchTerms, textFormat,
         videoId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"commentThreads";
  GTLRYouTubeQuery_CommentThreadsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_CommentThreadListResponse class];
  query.loggingName = @"youtube.commentThreads.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentThreadsUpdate

@dynamic part;

+ (instancetype)queryWithObject:(GTLRYouTube_CommentThread *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"commentThreads";
  GTLRYouTubeQuery_CommentThreadsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_CommentThread class];
  query.loggingName = @"youtube.commentThreads.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_FanFundingEventsList

@dynamic hl, maxResults, pageToken, part;

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"fanFundingEvents";
  GTLRYouTubeQuery_FanFundingEventsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_FanFundingEventListResponse class];
  query.loggingName = @"youtube.fanFundingEvents.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_GuideCategoriesList

@dynamic hl, identifier, part, regionCode;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"guideCategories";
  GTLRYouTubeQuery_GuideCategoriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_GuideCategoryListResponse class];
  query.loggingName = @"youtube.guideCategories.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_I18nLanguagesList

@dynamic hl, part;

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"i18nLanguages";
  GTLRYouTubeQuery_I18nLanguagesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_I18nLanguageListResponse class];
  query.loggingName = @"youtube.i18nLanguages.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_I18nRegionsList

@dynamic hl, part;

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"i18nRegions";
  GTLRYouTubeQuery_I18nRegionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_I18nRegionListResponse class];
  query.loggingName = @"youtube.i18nRegions.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveBroadcastsBind

@dynamic identifier, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel,
         part, streamId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier
                               part:(NSString *)part {
  NSString *pathURITemplate = @"liveBroadcasts/bind";
  GTLRYouTubeQuery_LiveBroadcastsBind *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveBroadcast class];
  query.loggingName = @"youtube.liveBroadcasts.bind";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveBroadcastsControl

@dynamic displaySlate, identifier, offsetTimeMs, onBehalfOfContentOwner,
         onBehalfOfContentOwnerChannel, part, walltime;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier
                               part:(NSString *)part {
  NSString *pathURITemplate = @"liveBroadcasts/control";
  GTLRYouTubeQuery_LiveBroadcastsControl *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveBroadcast class];
  query.loggingName = @"youtube.liveBroadcasts.control";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveBroadcastsDelete

@dynamic identifier, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"liveBroadcasts";
  GTLRYouTubeQuery_LiveBroadcastsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.liveBroadcasts.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveBroadcastsInsert

@dynamic onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, part;

+ (instancetype)queryWithObject:(GTLRYouTube_LiveBroadcast *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"liveBroadcasts";
  GTLRYouTubeQuery_LiveBroadcastsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveBroadcast class];
  query.loggingName = @"youtube.liveBroadcasts.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveBroadcastsList

@dynamic broadcastStatus, broadcastType, identifier, maxResults, mine,
         onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, pageToken, part;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"liveBroadcasts";
  GTLRYouTubeQuery_LiveBroadcastsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveBroadcastListResponse class];
  query.loggingName = @"youtube.liveBroadcasts.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveBroadcastsTransition

@dynamic broadcastStatus, identifier, onBehalfOfContentOwner,
         onBehalfOfContentOwnerChannel, part;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithBroadcastStatus:(NSString *)broadcastStatus
                              identifier:(NSString *)identifier
                                    part:(NSString *)part {
  NSString *pathURITemplate = @"liveBroadcasts/transition";
  GTLRYouTubeQuery_LiveBroadcastsTransition *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.broadcastStatus = broadcastStatus;
  query.identifier = identifier;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveBroadcast class];
  query.loggingName = @"youtube.liveBroadcasts.transition";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveBroadcastsUpdate

@dynamic onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, part;

+ (instancetype)queryWithObject:(GTLRYouTube_LiveBroadcast *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"liveBroadcasts";
  GTLRYouTubeQuery_LiveBroadcastsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveBroadcast class];
  query.loggingName = @"youtube.liveBroadcasts.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveChatBansDelete

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"liveChat/bans";
  GTLRYouTubeQuery_LiveChatBansDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.liveChatBans.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveChatBansInsert

@dynamic part;

+ (instancetype)queryWithObject:(GTLRYouTube_LiveChatBan *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"liveChat/bans";
  GTLRYouTubeQuery_LiveChatBansInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveChatBan class];
  query.loggingName = @"youtube.liveChatBans.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveChatMessagesDelete

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"liveChat/messages";
  GTLRYouTubeQuery_LiveChatMessagesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.liveChatMessages.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveChatMessagesInsert

@dynamic part;

+ (instancetype)queryWithObject:(GTLRYouTube_LiveChatMessage *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"liveChat/messages";
  GTLRYouTubeQuery_LiveChatMessagesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveChatMessage class];
  query.loggingName = @"youtube.liveChatMessages.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveChatMessagesList

@dynamic hl, liveChatId, maxResults, pageToken, part, profileImageSize;

+ (instancetype)queryWithLiveChatId:(NSString *)liveChatId
                               part:(NSString *)part {
  NSString *pathURITemplate = @"liveChat/messages";
  GTLRYouTubeQuery_LiveChatMessagesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.liveChatId = liveChatId;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveChatMessageListResponse class];
  query.loggingName = @"youtube.liveChatMessages.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveChatModeratorsDelete

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"liveChat/moderators";
  GTLRYouTubeQuery_LiveChatModeratorsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.liveChatModerators.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveChatModeratorsInsert

@dynamic part;

+ (instancetype)queryWithObject:(GTLRYouTube_LiveChatModerator *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"liveChat/moderators";
  GTLRYouTubeQuery_LiveChatModeratorsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveChatModerator class];
  query.loggingName = @"youtube.liveChatModerators.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveChatModeratorsList

@dynamic liveChatId, maxResults, pageToken, part;

+ (instancetype)queryWithLiveChatId:(NSString *)liveChatId
                               part:(NSString *)part {
  NSString *pathURITemplate = @"liveChat/moderators";
  GTLRYouTubeQuery_LiveChatModeratorsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.liveChatId = liveChatId;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveChatModeratorListResponse class];
  query.loggingName = @"youtube.liveChatModerators.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveStreamsDelete

@dynamic identifier, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"liveStreams";
  GTLRYouTubeQuery_LiveStreamsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.liveStreams.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveStreamsInsert

@dynamic onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, part;

+ (instancetype)queryWithObject:(GTLRYouTube_LiveStream *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"liveStreams";
  GTLRYouTubeQuery_LiveStreamsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveStream class];
  query.loggingName = @"youtube.liveStreams.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveStreamsList

@dynamic identifier, maxResults, mine, onBehalfOfContentOwner,
         onBehalfOfContentOwnerChannel, pageToken, part;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"liveStreams";
  GTLRYouTubeQuery_LiveStreamsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveStreamListResponse class];
  query.loggingName = @"youtube.liveStreams.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveStreamsUpdate

@dynamic onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, part;

+ (instancetype)queryWithObject:(GTLRYouTube_LiveStream *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"liveStreams";
  GTLRYouTubeQuery_LiveStreamsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveStream class];
  query.loggingName = @"youtube.liveStreams.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_PlaylistItemsDelete

@dynamic identifier, onBehalfOfContentOwner;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"playlistItems";
  GTLRYouTubeQuery_PlaylistItemsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.playlistItems.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_PlaylistItemsInsert

@dynamic onBehalfOfContentOwner, part;

+ (instancetype)queryWithObject:(GTLRYouTube_PlaylistItem *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"playlistItems";
  GTLRYouTubeQuery_PlaylistItemsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_PlaylistItem class];
  query.loggingName = @"youtube.playlistItems.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_PlaylistItemsList

@dynamic identifier, maxResults, onBehalfOfContentOwner, pageToken, part,
         playlistId, videoId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"playlistItems";
  GTLRYouTubeQuery_PlaylistItemsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_PlaylistItemListResponse class];
  query.loggingName = @"youtube.playlistItems.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_PlaylistItemsUpdate

@dynamic onBehalfOfContentOwner, part;

+ (instancetype)queryWithObject:(GTLRYouTube_PlaylistItem *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"playlistItems";
  GTLRYouTubeQuery_PlaylistItemsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_PlaylistItem class];
  query.loggingName = @"youtube.playlistItems.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_PlaylistsDelete

@dynamic identifier, onBehalfOfContentOwner;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"playlists";
  GTLRYouTubeQuery_PlaylistsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.playlists.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_PlaylistsInsert

@dynamic onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, part;

+ (instancetype)queryWithObject:(GTLRYouTube_Playlist *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"playlists";
  GTLRYouTubeQuery_PlaylistsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_Playlist class];
  query.loggingName = @"youtube.playlists.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_PlaylistsList

@dynamic channelId, hl, identifier, maxResults, mine, onBehalfOfContentOwner,
         onBehalfOfContentOwnerChannel, pageToken, part;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"playlists";
  GTLRYouTubeQuery_PlaylistsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_PlaylistListResponse class];
  query.loggingName = @"youtube.playlists.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_PlaylistsUpdate

@dynamic onBehalfOfContentOwner, part;

+ (instancetype)queryWithObject:(GTLRYouTube_Playlist *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"playlists";
  GTLRYouTubeQuery_PlaylistsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_Playlist class];
  query.loggingName = @"youtube.playlists.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_SearchList

@dynamic channelId, channelType, eventType, forContentOwner, forDeveloper,
         forMine, location, locationRadius, maxResults, onBehalfOfContentOwner,
         order, pageToken, part, publishedAfter, publishedBefore, q, regionCode,
         relatedToVideoId, relevanceLanguage, safeSearch, topicId, type,
         videoCaption, videoCategoryId, videoDefinition, videoDimension,
         videoDuration, videoEmbeddable, videoLicense, videoSyndicated,
         videoType;

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"search";
  GTLRYouTubeQuery_SearchList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_SearchListResponse class];
  query.loggingName = @"youtube.search.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_SponsorsList

@dynamic filter, maxResults, pageToken, part;

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"sponsors";
  GTLRYouTubeQuery_SponsorsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_SponsorListResponse class];
  query.loggingName = @"youtube.sponsors.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_SubscriptionsDelete

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"subscriptions";
  GTLRYouTubeQuery_SubscriptionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.subscriptions.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_SubscriptionsInsert

@dynamic part;

+ (instancetype)queryWithObject:(GTLRYouTube_Subscription *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"subscriptions";
  GTLRYouTubeQuery_SubscriptionsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_Subscription class];
  query.loggingName = @"youtube.subscriptions.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_SubscriptionsList

@dynamic channelId, forChannelId, identifier, maxResults, mine,
         myRecentSubscribers, mySubscribers, onBehalfOfContentOwner,
         onBehalfOfContentOwnerChannel, order, pageToken, part;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"subscriptions";
  GTLRYouTubeQuery_SubscriptionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_SubscriptionListResponse class];
  query.loggingName = @"youtube.subscriptions.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_SuperChatEventsList

@dynamic hl, maxResults, pageToken, part;

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"superChatEvents";
  GTLRYouTubeQuery_SuperChatEventsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_SuperChatEventListResponse class];
  query.loggingName = @"youtube.superChatEvents.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ThumbnailsSet

@dynamic onBehalfOfContentOwner, videoId;

+ (instancetype)queryWithVideoId:(NSString *)videoId
                uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSString *pathURITemplate = @"thumbnails/set";
  GTLRYouTubeQuery_ThumbnailsSet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.videoId = videoId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRYouTube_ThumbnailSetResponse class];
  query.loggingName = @"youtube.thumbnails.set";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideoAbuseReportReasonsList

@dynamic hl, part;

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"videoAbuseReportReasons";
  GTLRYouTubeQuery_VideoAbuseReportReasonsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_VideoAbuseReportReasonListResponse class];
  query.loggingName = @"youtube.videoAbuseReportReasons.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideoCategoriesList

@dynamic hl, identifier, part, regionCode;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"videoCategories";
  GTLRYouTubeQuery_VideoCategoriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_VideoCategoryListResponse class];
  query.loggingName = @"youtube.videoCategories.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideosDelete

@dynamic identifier, onBehalfOfContentOwner;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"videos";
  GTLRYouTubeQuery_VideosDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.videos.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideosGetRating

@dynamic identifier, onBehalfOfContentOwner;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"videos/getRating";
  GTLRYouTubeQuery_VideosGetRating *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRYouTube_VideoGetRatingResponse class];
  query.loggingName = @"youtube.videos.getRating";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideosInsert

@dynamic autoLevels, notifySubscribers, onBehalfOfContentOwner,
         onBehalfOfContentOwnerChannel, part, stabilize;

+ (instancetype)queryWithObject:(GTLRYouTube_Video *)object
                           part:(NSString *)part
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"videos";
  GTLRYouTubeQuery_VideosInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRYouTube_Video class];
  query.loggingName = @"youtube.videos.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideosList

@dynamic chart, hl, identifier, locale, maxHeight, maxResults, maxWidth,
         myRating, onBehalfOfContentOwner, pageToken, part, regionCode,
         videoCategoryId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithPart:(NSString *)part {
  NSString *pathURITemplate = @"videos";
  GTLRYouTubeQuery_VideosList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_VideoListResponse class];
  query.loggingName = @"youtube.videos.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideosRate

@dynamic identifier, rating;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier
                             rating:(NSString *)rating {
  NSString *pathURITemplate = @"videos/rate";
  GTLRYouTubeQuery_VideosRate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.rating = rating;
  query.loggingName = @"youtube.videos.rate";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideosReportAbuse

@dynamic onBehalfOfContentOwner;

+ (instancetype)queryWithObject:(GTLRYouTube_VideoAbuseReport *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"videos/reportAbuse";
  GTLRYouTubeQuery_VideosReportAbuse *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.loggingName = @"youtube.videos.reportAbuse";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideosUpdate

@dynamic onBehalfOfContentOwner, part;

+ (instancetype)queryWithObject:(GTLRYouTube_Video *)object
                           part:(NSString *)part {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"videos";
  GTLRYouTubeQuery_VideosUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_Video class];
  query.loggingName = @"youtube.videos.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_WatermarksSet

@dynamic channelId, onBehalfOfContentOwner;

+ (instancetype)queryWithObject:(GTLRYouTube_InvideoBranding *)object
                      channelId:(NSString *)channelId
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"watermarks/set";
  GTLRYouTubeQuery_WatermarksSet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.channelId = channelId;
  query.uploadParameters = uploadParameters;
  query.loggingName = @"youtube.watermarks.set";
  return query;
}

@end

@implementation GTLRYouTubeQuery_WatermarksUnset

@dynamic channelId, onBehalfOfContentOwner;

+ (instancetype)queryWithChannelId:(NSString *)channelId {
  NSString *pathURITemplate = @"watermarks/unset";
  GTLRYouTubeQuery_WatermarksUnset *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.channelId = channelId;
  query.loggingName = @"youtube.watermarks.unset";
  return query;
}

@end
