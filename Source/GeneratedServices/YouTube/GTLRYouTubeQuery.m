// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   YouTube Data API v3 (youtube/v3)
// Description:
//   The YouTube Data API v3 is an API that provides access to YouTube data,
//   such as videos, playlists, and channels.
// Documentation:
//   https://developers.google.com/youtube/

#import "GTLRYouTubeQuery.h"

#import "GTLRYouTubeObjects.h"

// ----------------------------------------------------------------------------
// Constants

// broadcastStatus
NSString * const kGTLRYouTubeBroadcastStatusActive             = @"active";
NSString * const kGTLRYouTubeBroadcastStatusAll                = @"all";
NSString * const kGTLRYouTubeBroadcastStatusBroadcastStatusFilterUnspecified = @"broadcastStatusFilterUnspecified";
NSString * const kGTLRYouTubeBroadcastStatusComplete           = @"complete";
NSString * const kGTLRYouTubeBroadcastStatusCompleted          = @"completed";
NSString * const kGTLRYouTubeBroadcastStatusLive               = @"live";
NSString * const kGTLRYouTubeBroadcastStatusStatusUnspecified  = @"statusUnspecified";
NSString * const kGTLRYouTubeBroadcastStatusTesting            = @"testing";
NSString * const kGTLRYouTubeBroadcastStatusUpcoming           = @"upcoming";

// broadcastType
NSString * const kGTLRYouTubeBroadcastTypeAll                  = @"all";
NSString * const kGTLRYouTubeBroadcastTypeBroadcastTypeFilterUnspecified = @"broadcastTypeFilterUnspecified";
NSString * const kGTLRYouTubeBroadcastTypeEvent                = @"event";
NSString * const kGTLRYouTubeBroadcastTypePersistent           = @"persistent";

// channelType
NSString * const kGTLRYouTubeChannelTypeAny                    = @"any";
NSString * const kGTLRYouTubeChannelTypeChannelTypeUnspecified = @"channelTypeUnspecified";
NSString * const kGTLRYouTubeChannelTypeShow                   = @"show";

// chart
NSString * const kGTLRYouTubeChartChartUnspecified = @"chartUnspecified";
NSString * const kGTLRYouTubeChartMostPopular      = @"mostPopular";

// eventType
NSString * const kGTLRYouTubeEventTypeCompleted = @"completed";
NSString * const kGTLRYouTubeEventTypeLive      = @"live";
NSString * const kGTLRYouTubeEventTypeNone      = @"none";
NSString * const kGTLRYouTubeEventTypeUpcoming  = @"upcoming";

// filter
NSString * const kGTLRYouTubeFilterAll                  = @"all";
NSString * const kGTLRYouTubeFilterNewest               = @"newest";
NSString * const kGTLRYouTubeFilterSponsorFilterUnknown = @"sponsorFilterUnknown";

// mode
NSString * const kGTLRYouTubeModeAllCurrent             = @"all_current";
NSString * const kGTLRYouTubeModeListMembersModeUnknown = @"listMembersModeUnknown";
NSString * const kGTLRYouTubeModeUpdates                = @"updates";

// moderationStatus
NSString * const kGTLRYouTubeModerationStatusHeldForReview = @"heldForReview";
NSString * const kGTLRYouTubeModerationStatusLikelySpam    = @"likelySpam";
NSString * const kGTLRYouTubeModerationStatusPublished     = @"published";
NSString * const kGTLRYouTubeModerationStatusRejected      = @"rejected";

// myRating
NSString * const kGTLRYouTubeMyRatingDislike = @"dislike";
NSString * const kGTLRYouTubeMyRatingLike    = @"like";
NSString * const kGTLRYouTubeMyRatingNone    = @"none";

// order
NSString * const kGTLRYouTubeOrderAlphabetical                 = @"alphabetical";
NSString * const kGTLRYouTubeOrderDate                         = @"date";
NSString * const kGTLRYouTubeOrderOrderUnspecified             = @"orderUnspecified";
NSString * const kGTLRYouTubeOrderRating                       = @"rating";
NSString * const kGTLRYouTubeOrderRelevance                    = @"relevance";
NSString * const kGTLRYouTubeOrderSearchSortUnspecified        = @"searchSortUnspecified";
NSString * const kGTLRYouTubeOrderSubscriptionOrderUnspecified = @"subscriptionOrderUnspecified";
NSString * const kGTLRYouTubeOrderTime                         = @"time";
NSString * const kGTLRYouTubeOrderTitle                        = @"title";
NSString * const kGTLRYouTubeOrderUnread                       = @"unread";
NSString * const kGTLRYouTubeOrderVideoCount                   = @"videoCount";
NSString * const kGTLRYouTubeOrderViewCount                    = @"viewCount";

// rating
NSString * const kGTLRYouTubeRatingDislike = @"dislike";
NSString * const kGTLRYouTubeRatingLike    = @"like";
NSString * const kGTLRYouTubeRatingNone    = @"none";

// safeSearch
NSString * const kGTLRYouTubeSafeSearchModerate                = @"moderate";
NSString * const kGTLRYouTubeSafeSearchNone                    = @"none";
NSString * const kGTLRYouTubeSafeSearchSafeSearchSettingUnspecified = @"safeSearchSettingUnspecified";
NSString * const kGTLRYouTubeSafeSearchStrict                  = @"strict";

// textFormat
NSString * const kGTLRYouTubeTextFormatHtml                  = @"html";
NSString * const kGTLRYouTubeTextFormatPlainText             = @"plainText";
NSString * const kGTLRYouTubeTextFormatTextFormatUnspecified = @"textFormatUnspecified";

// type
NSString * const kGTLRYouTubeTypeChannelToStoreLink = @"channelToStoreLink";
NSString * const kGTLRYouTubeTypeLinkUnspecified    = @"linkUnspecified";

// videoCaption
NSString * const kGTLRYouTubeVideoCaptionAny                   = @"any";
NSString * const kGTLRYouTubeVideoCaptionClosedCaption         = @"closedCaption";
NSString * const kGTLRYouTubeVideoCaptionNone                  = @"none";
NSString * const kGTLRYouTubeVideoCaptionVideoCaptionUnspecified = @"videoCaptionUnspecified";

// videoDefinition
NSString * const kGTLRYouTubeVideoDefinitionAny      = @"any";
NSString * const kGTLRYouTubeVideoDefinitionHigh     = @"high";
NSString * const kGTLRYouTubeVideoDefinitionStandard = @"standard";

// videoDimension
NSString * const kGTLRYouTubeVideoDimensionAny = @"any";
NSString * const kGTLRYouTubeVideoDimensionX2d = @"2d";
NSString * const kGTLRYouTubeVideoDimensionX3d = @"3d";

// videoDuration
NSString * const kGTLRYouTubeVideoDurationAny                  = @"any";
NSString * const kGTLRYouTubeVideoDurationLong                 = @"long";
NSString * const kGTLRYouTubeVideoDurationMedium               = @"medium";
NSString * const kGTLRYouTubeVideoDurationShort                = @"short";
NSString * const kGTLRYouTubeVideoDurationVideoDurationUnspecified = @"videoDurationUnspecified";

// videoEmbeddable
NSString * const kGTLRYouTubeVideoEmbeddableAny                = @"any";
NSString * const kGTLRYouTubeVideoEmbeddableTrue               = @"true";
NSString * const kGTLRYouTubeVideoEmbeddableVideoEmbeddableUnspecified = @"videoEmbeddableUnspecified";

// videoLicense
NSString * const kGTLRYouTubeVideoLicenseAny            = @"any";
NSString * const kGTLRYouTubeVideoLicenseCreativeCommon = @"creativeCommon";
NSString * const kGTLRYouTubeVideoLicenseYoutube        = @"youtube";

// videoSyndicated
NSString * const kGTLRYouTubeVideoSyndicatedAny                = @"any";
NSString * const kGTLRYouTubeVideoSyndicatedTrue               = @"true";
NSString * const kGTLRYouTubeVideoSyndicatedVideoSyndicatedUnspecified = @"videoSyndicatedUnspecified";

// videoType
NSString * const kGTLRYouTubeVideoTypeAny                  = @"any";
NSString * const kGTLRYouTubeVideoTypeEpisode              = @"episode";
NSString * const kGTLRYouTubeVideoTypeMovie                = @"movie";
NSString * const kGTLRYouTubeVideoTypeVideoTypeUnspecified = @"videoTypeUnspecified";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRYouTubeQuery

@dynamic fields;

@end

@implementation GTLRYouTubeQuery_AbuseReportsInsert

@dynamic part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_AbuseReport *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/abuseReports";
  GTLRYouTubeQuery_AbuseReportsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_AbuseReport class];
  query.loggingName = @"youtube.abuseReports.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ActivitiesList

@dynamic channelId, home, maxResults, mine, pageToken, part, publishedAfter,
         publishedBefore, regionCode;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/activities";
  GTLRYouTubeQuery_ActivitiesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_ActivityListResponse class];
  query.loggingName = @"youtube.activities.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CaptionsDelete

@dynamic identifier, onBehalfOf, onBehalfOfContentOwner;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"youtube/v3/captions";
  GTLRYouTubeQuery_CaptionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.captions.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CaptionsDownload

@dynamic identifier, onBehalfOf, onBehalfOfContentOwner, tfmt, tlang;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"youtube/v3/captions/{id}";
  GTLRYouTubeQuery_CaptionsDownload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.identifier = identifier;
  query.loggingName = @"youtube.captions.download";
  return query;
}

+ (instancetype)queryForMediaWithIdentifier:(NSString *)identifier {
  GTLRYouTubeQuery_CaptionsDownload *query =
    [self queryWithIdentifier:identifier];
  query.downloadAsDataObjectType = @"media";
  query.useMediaDownloadService = YES;
  query.loggingName = @"Download youtube.captions.download";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CaptionsInsert

@dynamic onBehalfOf, onBehalfOfContentOwner, part, sync;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_Caption *)object
                           part:(NSArray<NSString *> *)part
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/captions";
  GTLRYouTubeQuery_CaptionsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRYouTube_Caption class];
  query.loggingName = @"youtube.captions.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CaptionsList

@dynamic identifier, onBehalfOf, onBehalfOfContentOwner, part, videoId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"id" : [NSString class],
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithVideoId:(NSString *)videoId
                            part:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/captions";
  GTLRYouTubeQuery_CaptionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.videoId = videoId;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_CaptionListResponse class];
  query.loggingName = @"youtube.captions.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CaptionsUpdate

@dynamic onBehalfOf, onBehalfOfContentOwner, part, sync;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_Caption *)object
                           part:(NSArray<NSString *> *)part
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/captions";
  GTLRYouTubeQuery_CaptionsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRYouTube_Caption class];
  query.loggingName = @"youtube.captions.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ChannelBannersInsert

@dynamic channelId, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel;

+ (instancetype)queryWithObject:(GTLRYouTube_ChannelBannerResource *)object
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/channelBanners/insert";
  GTLRYouTubeQuery_ChannelBannersInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRYouTube_ChannelBannerResource class];
  query.loggingName = @"youtube.channelBanners.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ChannelSectionsDelete

@dynamic identifier, onBehalfOfContentOwner;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"youtube/v3/channelSections";
  GTLRYouTubeQuery_ChannelSectionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.channelSections.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ChannelSectionsInsert

@dynamic onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_ChannelSection *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/channelSections";
  GTLRYouTubeQuery_ChannelSectionsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_ChannelSection class];
  query.loggingName = @"youtube.channelSections.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ChannelSectionsList

@dynamic channelId, hl, identifier, mine, onBehalfOfContentOwner, part;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"id" : [NSString class],
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/channelSections";
  GTLRYouTubeQuery_ChannelSectionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_ChannelSectionListResponse class];
  query.loggingName = @"youtube.channelSections.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ChannelSectionsUpdate

@dynamic onBehalfOfContentOwner, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_ChannelSection *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/channelSections";
  GTLRYouTubeQuery_ChannelSectionsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_ChannelSection class];
  query.loggingName = @"youtube.channelSections.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ChannelsList

@dynamic categoryId, forUsername, hl, identifier, managedByMe, maxResults, mine,
         mySubscribers, onBehalfOfContentOwner, pageToken, part;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"id" : [NSString class],
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/channels";
  GTLRYouTubeQuery_ChannelsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_ChannelListResponse class];
  query.loggingName = @"youtube.channels.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ChannelsUpdate

@dynamic onBehalfOfContentOwner, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_Channel *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/channels";
  GTLRYouTubeQuery_ChannelsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_Channel class];
  query.loggingName = @"youtube.channels.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentsDelete

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"youtube/v3/comments";
  GTLRYouTubeQuery_CommentsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.comments.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentsInsert

@dynamic part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_Comment *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/comments";
  GTLRYouTubeQuery_CommentsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_Comment class];
  query.loggingName = @"youtube.comments.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentsList

@dynamic identifier, maxResults, pageToken, parentId, part, textFormat;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"id" : [NSString class],
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/comments";
  GTLRYouTubeQuery_CommentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_CommentListResponse class];
  query.loggingName = @"youtube.comments.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentsMarkAsSpam

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"id" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithIdentifier:(NSArray<NSString *> *)identifier {
  NSString *pathURITemplate = @"youtube/v3/comments/markAsSpam";
  GTLRYouTubeQuery_CommentsMarkAsSpam *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.comments.markAsSpam";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentsSetModerationStatus

@dynamic banAuthor, identifier, moderationStatus;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"id" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithIdentifier:(NSArray<NSString *> *)identifier
                   moderationStatus:(NSString *)moderationStatus {
  NSString *pathURITemplate = @"youtube/v3/comments/setModerationStatus";
  GTLRYouTubeQuery_CommentsSetModerationStatus *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.moderationStatus = moderationStatus;
  query.loggingName = @"youtube.comments.setModerationStatus";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentsUpdate

@dynamic part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_Comment *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/comments";
  GTLRYouTubeQuery_CommentsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_Comment class];
  query.loggingName = @"youtube.comments.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentThreadsInsert

@dynamic part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_CommentThread *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/commentThreads";
  GTLRYouTubeQuery_CommentThreadsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_CommentThread class];
  query.loggingName = @"youtube.commentThreads.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentThreadsList

@dynamic allThreadsRelatedToChannelId, channelId, identifier, maxResults,
         moderationStatus, order, pageToken, part, searchTerms, textFormat,
         videoId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"id" : [NSString class],
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/commentThreads";
  GTLRYouTubeQuery_CommentThreadsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_CommentThreadListResponse class];
  query.loggingName = @"youtube.commentThreads.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_CommentThreadsUpdate

@dynamic part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_CommentThread *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/commentThreads";
  GTLRYouTubeQuery_CommentThreadsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_CommentThread class];
  query.loggingName = @"youtube.commentThreads.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_I18nLanguagesList

@dynamic hl, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/i18nLanguages";
  GTLRYouTubeQuery_I18nLanguagesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_I18nLanguageListResponse class];
  query.loggingName = @"youtube.i18nLanguages.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_I18nRegionsList

@dynamic hl, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/i18nRegions";
  GTLRYouTubeQuery_I18nRegionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_I18nRegionListResponse class];
  query.loggingName = @"youtube.i18nRegions.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveBroadcastsBind

@dynamic identifier, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel,
         part, streamId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier
                               part:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/liveBroadcasts/bind";
  GTLRYouTubeQuery_LiveBroadcastsBind *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveBroadcast class];
  query.loggingName = @"youtube.liveBroadcasts.bind";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveBroadcastsControl

@dynamic displaySlate, identifier, offsetTimeMs, onBehalfOfContentOwner,
         onBehalfOfContentOwnerChannel, part, walltime;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier
                               part:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/liveBroadcasts/control";
  GTLRYouTubeQuery_LiveBroadcastsControl *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveBroadcast class];
  query.loggingName = @"youtube.liveBroadcasts.control";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveBroadcastsDelete

@dynamic identifier, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"youtube/v3/liveBroadcasts";
  GTLRYouTubeQuery_LiveBroadcastsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.liveBroadcasts.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveBroadcastsInsert

@dynamic onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_LiveBroadcast *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/liveBroadcasts";
  GTLRYouTubeQuery_LiveBroadcastsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveBroadcast class];
  query.loggingName = @"youtube.liveBroadcasts.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveBroadcastsList

@dynamic broadcastStatus, broadcastType, identifier, maxResults, mine,
         onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, pageToken, part;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"id" : [NSString class],
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/liveBroadcasts";
  GTLRYouTubeQuery_LiveBroadcastsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveBroadcastListResponse class];
  query.loggingName = @"youtube.liveBroadcasts.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveBroadcastsTransition

@dynamic broadcastStatus, identifier, onBehalfOfContentOwner,
         onBehalfOfContentOwnerChannel, part;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier
                    broadcastStatus:(NSString *)broadcastStatus
                               part:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/liveBroadcasts/transition";
  GTLRYouTubeQuery_LiveBroadcastsTransition *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.broadcastStatus = broadcastStatus;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveBroadcast class];
  query.loggingName = @"youtube.liveBroadcasts.transition";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveBroadcastsUpdate

@dynamic onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_LiveBroadcast *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/liveBroadcasts";
  GTLRYouTubeQuery_LiveBroadcastsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveBroadcast class];
  query.loggingName = @"youtube.liveBroadcasts.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveChatBansDelete

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"youtube/v3/liveChat/bans";
  GTLRYouTubeQuery_LiveChatBansDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.liveChatBans.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveChatBansInsert

@dynamic part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_LiveChatBan *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/liveChat/bans";
  GTLRYouTubeQuery_LiveChatBansInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveChatBan class];
  query.loggingName = @"youtube.liveChatBans.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveChatMessagesDelete

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"youtube/v3/liveChat/messages";
  GTLRYouTubeQuery_LiveChatMessagesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.liveChatMessages.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveChatMessagesInsert

@dynamic part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_LiveChatMessage *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/liveChat/messages";
  GTLRYouTubeQuery_LiveChatMessagesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveChatMessage class];
  query.loggingName = @"youtube.liveChatMessages.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveChatMessagesList

@dynamic hl, liveChatId, maxResults, pageToken, part, profileImageSize;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithLiveChatId:(NSString *)liveChatId
                               part:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/liveChat/messages";
  GTLRYouTubeQuery_LiveChatMessagesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.liveChatId = liveChatId;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveChatMessageListResponse class];
  query.loggingName = @"youtube.liveChatMessages.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveChatModeratorsDelete

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"youtube/v3/liveChat/moderators";
  GTLRYouTubeQuery_LiveChatModeratorsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.liveChatModerators.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveChatModeratorsInsert

@dynamic part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_LiveChatModerator *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/liveChat/moderators";
  GTLRYouTubeQuery_LiveChatModeratorsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveChatModerator class];
  query.loggingName = @"youtube.liveChatModerators.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveChatModeratorsList

@dynamic liveChatId, maxResults, pageToken, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithLiveChatId:(NSString *)liveChatId
                               part:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/liveChat/moderators";
  GTLRYouTubeQuery_LiveChatModeratorsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.liveChatId = liveChatId;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveChatModeratorListResponse class];
  query.loggingName = @"youtube.liveChatModerators.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveStreamsDelete

@dynamic identifier, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"youtube/v3/liveStreams";
  GTLRYouTubeQuery_LiveStreamsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.liveStreams.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveStreamsInsert

@dynamic onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_LiveStream *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/liveStreams";
  GTLRYouTubeQuery_LiveStreamsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveStream class];
  query.loggingName = @"youtube.liveStreams.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveStreamsList

@dynamic identifier, maxResults, mine, onBehalfOfContentOwner,
         onBehalfOfContentOwnerChannel, pageToken, part;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"id" : [NSString class],
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/liveStreams";
  GTLRYouTubeQuery_LiveStreamsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveStreamListResponse class];
  query.loggingName = @"youtube.liveStreams.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_LiveStreamsUpdate

@dynamic onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_LiveStream *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/liveStreams";
  GTLRYouTubeQuery_LiveStreamsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_LiveStream class];
  query.loggingName = @"youtube.liveStreams.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_MembershipsLevelsList

@dynamic part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/membershipsLevels";
  GTLRYouTubeQuery_MembershipsLevelsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_MembershipsLevelListResponse class];
  query.loggingName = @"youtube.membershipsLevels.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_MembersList

@dynamic filterByMemberChannelId, hasAccessToLevel, maxResults, mode, pageToken,
         part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/members";
  GTLRYouTubeQuery_MembersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_MemberListResponse class];
  query.loggingName = @"youtube.members.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_PlaylistItemsDelete

@dynamic identifier, onBehalfOfContentOwner;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"youtube/v3/playlistItems";
  GTLRYouTubeQuery_PlaylistItemsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.playlistItems.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_PlaylistItemsInsert

@dynamic onBehalfOfContentOwner, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_PlaylistItem *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/playlistItems";
  GTLRYouTubeQuery_PlaylistItemsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_PlaylistItem class];
  query.loggingName = @"youtube.playlistItems.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_PlaylistItemsList

@dynamic identifier, maxResults, onBehalfOfContentOwner, pageToken, part,
         playlistId, videoId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"id" : [NSString class],
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/playlistItems";
  GTLRYouTubeQuery_PlaylistItemsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_PlaylistItemListResponse class];
  query.loggingName = @"youtube.playlistItems.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_PlaylistItemsUpdate

@dynamic onBehalfOfContentOwner, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_PlaylistItem *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/playlistItems";
  GTLRYouTubeQuery_PlaylistItemsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_PlaylistItem class];
  query.loggingName = @"youtube.playlistItems.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_PlaylistsDelete

@dynamic identifier, onBehalfOfContentOwner;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"youtube/v3/playlists";
  GTLRYouTubeQuery_PlaylistsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.playlists.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_PlaylistsInsert

@dynamic onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_Playlist *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/playlists";
  GTLRYouTubeQuery_PlaylistsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_Playlist class];
  query.loggingName = @"youtube.playlists.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_PlaylistsList

@dynamic channelId, hl, identifier, maxResults, mine, onBehalfOfContentOwner,
         onBehalfOfContentOwnerChannel, pageToken, part;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"id" : [NSString class],
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/playlists";
  GTLRYouTubeQuery_PlaylistsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_PlaylistListResponse class];
  query.loggingName = @"youtube.playlists.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_PlaylistsUpdate

@dynamic onBehalfOfContentOwner, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_Playlist *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/playlists";
  GTLRYouTubeQuery_PlaylistsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_Playlist class];
  query.loggingName = @"youtube.playlists.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_SearchList

@dynamic channelId, channelType, eventType, forContentOwner, forDeveloper,
         forMine, location, locationRadius, maxResults, onBehalfOfContentOwner,
         order, pageToken, part, publishedAfter, publishedBefore, q, regionCode,
         relatedToVideoId, relevanceLanguage, safeSearch, topicId, type,
         videoCaption, videoCategoryId, videoDefinition, videoDimension,
         videoDuration, videoEmbeddable, videoLicense, videoSyndicated,
         videoType;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class],
    @"type" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/search";
  GTLRYouTubeQuery_SearchList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_SearchListResponse class];
  query.loggingName = @"youtube.search.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_SponsorsList

@dynamic filter, maxResults, pageToken, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/sponsors";
  GTLRYouTubeQuery_SponsorsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_SponsorListResponse class];
  query.loggingName = @"youtube.sponsors.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_SubscriptionsDelete

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"youtube/v3/subscriptions";
  GTLRYouTubeQuery_SubscriptionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.subscriptions.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_SubscriptionsInsert

@dynamic part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_Subscription *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/subscriptions";
  GTLRYouTubeQuery_SubscriptionsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_Subscription class];
  query.loggingName = @"youtube.subscriptions.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_SubscriptionsList

@dynamic channelId, forChannelId, identifier, maxResults, mine,
         myRecentSubscribers, mySubscribers, onBehalfOfContentOwner,
         onBehalfOfContentOwnerChannel, order, pageToken, part;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"id" : [NSString class],
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/subscriptions";
  GTLRYouTubeQuery_SubscriptionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_SubscriptionListResponse class];
  query.loggingName = @"youtube.subscriptions.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_SuperChatEventsList

@dynamic hl, maxResults, pageToken, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/superChatEvents";
  GTLRYouTubeQuery_SuperChatEventsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_SuperChatEventListResponse class];
  query.loggingName = @"youtube.superChatEvents.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_TestsInsert

@dynamic part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_TestItem *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/tests";
  GTLRYouTubeQuery_TestsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_TestItem class];
  query.loggingName = @"youtube.tests.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ThirdPartyLinksDelete

@dynamic linkingToken, part, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithLinkingToken:(NSString *)linkingToken
                                 type:(NSString *)type {
  NSString *pathURITemplate = @"youtube/v3/thirdPartyLinks";
  GTLRYouTubeQuery_ThirdPartyLinksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.linkingToken = linkingToken;
  query.type = type;
  query.loggingName = @"youtube.thirdPartyLinks.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ThirdPartyLinksInsert

@dynamic part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_ThirdPartyLink *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/thirdPartyLinks";
  GTLRYouTubeQuery_ThirdPartyLinksInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_ThirdPartyLink class];
  query.loggingName = @"youtube.thirdPartyLinks.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ThirdPartyLinksList

@dynamic linkingToken, part, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/thirdPartyLinks";
  GTLRYouTubeQuery_ThirdPartyLinksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_ThirdPartyLink class];
  query.loggingName = @"youtube.thirdPartyLinks.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ThirdPartyLinksUpdate

@dynamic part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_ThirdPartyLink *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/thirdPartyLinks";
  GTLRYouTubeQuery_ThirdPartyLinksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_ThirdPartyLink class];
  query.loggingName = @"youtube.thirdPartyLinks.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_ThumbnailsSet

@dynamic onBehalfOfContentOwner, videoId;

+ (instancetype)queryWithVideoId:(NSString *)videoId
                uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSString *pathURITemplate = @"youtube/v3/thumbnails/set";
  GTLRYouTubeQuery_ThumbnailsSet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.videoId = videoId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRYouTube_ThumbnailSetResponse class];
  query.loggingName = @"youtube.thumbnails.set";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideoAbuseReportReasonsList

@dynamic hl, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/videoAbuseReportReasons";
  GTLRYouTubeQuery_VideoAbuseReportReasonsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_VideoAbuseReportReasonListResponse class];
  query.loggingName = @"youtube.videoAbuseReportReasons.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideoCategoriesList

@dynamic hl, identifier, part, regionCode;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"id" : [NSString class],
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/videoCategories";
  GTLRYouTubeQuery_VideoCategoriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_VideoCategoryListResponse class];
  query.loggingName = @"youtube.videoCategories.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideosDelete

@dynamic identifier, onBehalfOfContentOwner;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier {
  NSString *pathURITemplate = @"youtube/v3/videos";
  GTLRYouTubeQuery_VideosDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.loggingName = @"youtube.videos.delete";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideosGetRating

@dynamic identifier, onBehalfOfContentOwner;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"id" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithIdentifier:(NSArray<NSString *> *)identifier {
  NSString *pathURITemplate = @"youtube/v3/videos/getRating";
  GTLRYouTubeQuery_VideosGetRating *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRYouTube_VideoRatingListResponse class];
  query.loggingName = @"youtube.videos.getRating";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideosInsert

@dynamic autoLevels, notifySubscribers, onBehalfOfContentOwner,
         onBehalfOfContentOwnerChannel, part, stabilize;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_Video *)object
                           part:(NSArray<NSString *> *)part
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/videos";
  GTLRYouTubeQuery_VideosInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRYouTube_Video class];
  query.loggingName = @"youtube.videos.insert";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideosList

@dynamic chart, hl, identifier, locale, maxHeight, maxResults, maxWidth,
         myRating, onBehalfOfContentOwner, pageToken, part, regionCode,
         videoCategoryId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"id" : [NSString class],
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPart:(NSArray<NSString *> *)part {
  NSString *pathURITemplate = @"youtube/v3/videos";
  GTLRYouTubeQuery_VideosList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_VideoListResponse class];
  query.loggingName = @"youtube.videos.list";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideosRate

@dynamic identifier, rating;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithIdentifier:(NSString *)identifier
                             rating:(NSString *)rating {
  NSString *pathURITemplate = @"youtube/v3/videos/rate";
  GTLRYouTubeQuery_VideosRate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.identifier = identifier;
  query.rating = rating;
  query.loggingName = @"youtube.videos.rate";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideosReportAbuse

@dynamic onBehalfOfContentOwner;

+ (instancetype)queryWithObject:(GTLRYouTube_VideoAbuseReport *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/videos/reportAbuse";
  GTLRYouTubeQuery_VideosReportAbuse *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.loggingName = @"youtube.videos.reportAbuse";
  return query;
}

@end

@implementation GTLRYouTubeQuery_VideosUpdate

@dynamic onBehalfOfContentOwner, part;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"part" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRYouTube_Video *)object
                           part:(NSArray<NSString *> *)part {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/videos";
  GTLRYouTubeQuery_VideosUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.part = part;
  query.expectedObjectClass = [GTLRYouTube_Video class];
  query.loggingName = @"youtube.videos.update";
  return query;
}

@end

@implementation GTLRYouTubeQuery_WatermarksSet

@dynamic channelId, onBehalfOfContentOwner;

+ (instancetype)queryWithObject:(GTLRYouTube_InvideoBranding *)object
                      channelId:(NSString *)channelId
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"youtube/v3/watermarks/set";
  GTLRYouTubeQuery_WatermarksSet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.channelId = channelId;
  query.uploadParameters = uploadParameters;
  query.loggingName = @"youtube.watermarks.set";
  return query;
}

@end

@implementation GTLRYouTubeQuery_WatermarksUnset

@dynamic channelId, onBehalfOfContentOwner;

+ (instancetype)queryWithChannelId:(NSString *)channelId {
  NSString *pathURITemplate = @"youtube/v3/watermarks/unset";
  GTLRYouTubeQuery_WatermarksUnset *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.channelId = channelId;
  query.loggingName = @"youtube.watermarks.unset";
  return query;
}

@end
