// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   YouTube Data API v3 (youtube/v3)
// Description:
//   The YouTube Data API v3 is an API that provides access to YouTube data,
//   such as videos, playlists, and channels.
// Documentation:
//   https://developers.google.com/youtube/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRYouTube_AbuseReport;
@class GTLRYouTube_Caption;
@class GTLRYouTube_Channel;
@class GTLRYouTube_ChannelBannerResource;
@class GTLRYouTube_ChannelSection;
@class GTLRYouTube_Comment;
@class GTLRYouTube_CommentThread;
@class GTLRYouTube_InvideoBranding;
@class GTLRYouTube_LiveBroadcast;
@class GTLRYouTube_LiveChatBan;
@class GTLRYouTube_LiveChatMessage;
@class GTLRYouTube_LiveChatModerator;
@class GTLRYouTube_LiveStream;
@class GTLRYouTube_Playlist;
@class GTLRYouTube_PlaylistItem;
@class GTLRYouTube_Subscription;
@class GTLRYouTube_TestItem;
@class GTLRYouTube_ThirdPartyLink;
@class GTLRYouTube_Video;
@class GTLRYouTube_VideoAbuseReport;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// broadcastStatus

/**
 *  Return current live broadcasts.
 *
 *  Value: "active"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeBroadcastStatusActive;
/**
 *  Return all broadcasts.
 *
 *  Value: "all"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeBroadcastStatusAll;
/** Value: "broadcastStatusFilterUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeBroadcastStatusBroadcastStatusFilterUnspecified;
/**
 *  The broadcast is over. YouTube stops transmitting video.
 *
 *  Value: "complete"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeBroadcastStatusComplete;
/**
 *  Return broadcasts that have already ended.
 *
 *  Value: "completed"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeBroadcastStatusCompleted;
/**
 *  Return only persistent broadcasts.
 *
 *  Value: "live"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeBroadcastStatusLive;
/** Value: "statusUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeBroadcastStatusStatusUnspecified;
/**
 *  Start testing the broadcast. YouTube transmits video to the broadcast's
 *  monitor stream. Note that you can only transition a broadcast to the testing
 *  state if its contentDetails.monitorStream.enableMonitorStream property is
 *  set to true.",
 *
 *  Value: "testing"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeBroadcastStatusTesting;
/**
 *  Return broadcasts that have not yet started.
 *
 *  Value: "upcoming"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeBroadcastStatusUpcoming;

// ----------------------------------------------------------------------------
// broadcastType

/**
 *  Return all broadcasts.
 *
 *  Value: "all"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeBroadcastTypeAll;
/** Value: "broadcastTypeFilterUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeBroadcastTypeBroadcastTypeFilterUnspecified;
/**
 *  Return only scheduled event broadcasts.
 *
 *  Value: "event"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeBroadcastTypeEvent;
/**
 *  Return only persistent broadcasts.
 *
 *  Value: "persistent"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeBroadcastTypePersistent;

// ----------------------------------------------------------------------------
// channelType

/**
 *  Return all channels.
 *
 *  Value: "any"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeChannelTypeAny;
/** Value: "channelTypeUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeChannelTypeChannelTypeUnspecified;
/**
 *  Only retrieve shows.
 *
 *  Value: "show"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeChannelTypeShow;

// ----------------------------------------------------------------------------
// chart

/** Value: "chartUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeChartChartUnspecified;
/**
 *  Return the most popular videos for the specified content region and video
 *  category.
 *
 *  Value: "mostPopular"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeChartMostPopular;

// ----------------------------------------------------------------------------
// eventType

/**
 *  The live broadcast has been completed.
 *
 *  Value: "completed"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeEventTypeCompleted;
/**
 *  The live broadcast is active.
 *
 *  Value: "live"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeEventTypeLive;
/** Value: "none" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeEventTypeNone;
/**
 *  The live broadcast is upcoming.
 *
 *  Value: "upcoming"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeEventTypeUpcoming;

// ----------------------------------------------------------------------------
// filter

/**
 *  Return all sponsors, from newest to oldest.
 *
 *  Value: "all"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeFilterAll;
/**
 *  Return the most recent sponsors, from newest to oldest.
 *
 *  Value: "newest"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeFilterNewest;
/** Value: "sponsorFilterUnknown" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeFilterSponsorFilterUnknown;

// ----------------------------------------------------------------------------
// mode

/**
 *  Return all current members, from newest to oldest.
 *
 *  Value: "all_current"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeModeAllCurrent;
/** Value: "listMembersModeUnknown" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeModeListMembersModeUnknown;
/**
 *  Return only members that joined after the first call with this mode was
 *  made.
 *
 *  Value: "updates"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeModeUpdates;

// ----------------------------------------------------------------------------
// moderationStatus

/**
 *  The comment is awaiting review by a moderator.
 *
 *  Value: "heldForReview"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeModerationStatusHeldForReview;
/** Value: "likelySpam" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeModerationStatusLikelySpam;
/**
 *  The comment is available for public display.
 *
 *  Value: "published"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeModerationStatusPublished;
/**
 *  The comment is unfit for display.
 *
 *  Value: "rejected"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeModerationStatusRejected;

// ----------------------------------------------------------------------------
// myRating

/**
 *  The entity is disliked.
 *
 *  Value: "dislike"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeMyRatingDislike;
/**
 *  The entity is liked.
 *
 *  Value: "like"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeMyRatingLike;
/** Value: "none" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeMyRatingNone;

// ----------------------------------------------------------------------------
// order

/**
 *  Sort alphabetically.
 *
 *  Value: "alphabetical"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeOrderAlphabetical;
/**
 *  Resources are sorted in reverse chronological order based on the date they
 *  were created.
 *
 *  Value: "date"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeOrderDate;
/** Value: "orderUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeOrderOrderUnspecified;
/**
 *  Resources are sorted from highest to lowest rating.
 *
 *  Value: "rating"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeOrderRating;
/** Value: "relevance" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeOrderRelevance;
/** Value: "searchSortUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeOrderSearchSortUnspecified;
/** Value: "subscriptionOrderUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeOrderSubscriptionOrderUnspecified;
/**
 *  Order by time.
 *
 *  Value: "time"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeOrderTime;
/**
 *  Resources are sorted alphabetically by title.
 *
 *  Value: "title"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeOrderTitle;
/**
 *  Sort by order of activity.
 *
 *  Value: "unread"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeOrderUnread;
/**
 *  Channels are sorted in descending order of their number of uploaded videos.
 *
 *  Value: "videoCount"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeOrderVideoCount;
/**
 *  Resources are sorted from highest to lowest number of views.
 *
 *  Value: "viewCount"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeOrderViewCount;

// ----------------------------------------------------------------------------
// rating

/**
 *  The entity is disliked.
 *
 *  Value: "dislike"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeRatingDislike;
/**
 *  The entity is liked.
 *
 *  Value: "like"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeRatingLike;
/** Value: "none" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeRatingNone;

// ----------------------------------------------------------------------------
// safeSearch

/**
 *  YouTube will filter some content from search results and, at the least, will
 *  filter content that is restricted in your locale. Based on their content,
 *  search results could be removed from search results or demoted in search
 *  results. This is the default parameter value.
 *
 *  Value: "moderate"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeSafeSearchModerate;
/**
 *  YouTube will not filter the search result set.
 *
 *  Value: "none"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeSafeSearchNone;
/** Value: "safeSearchSettingUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeSafeSearchSafeSearchSettingUnspecified;
/**
 *  YouTube will try to exclude all restricted content from the search result
 *  set. Based on their content, search results could be removed from search
 *  results or demoted in search results.
 *
 *  Value: "strict"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeSafeSearchStrict;

// ----------------------------------------------------------------------------
// textFormat

/**
 *  Returns the comments in HTML format. This is the default value.
 *
 *  Value: "html"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeTextFormatHtml;
/**
 *  Returns the comments in plain text format.
 *
 *  Value: "plainText"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeTextFormatPlainText;
/** Value: "textFormatUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeTextFormatTextFormatUnspecified;

// ----------------------------------------------------------------------------
// type

/**
 *  A link that is connecting (or about to connect) a channel with a store on a
 *  merchandising platform in order to enable retail commerce capabilities for
 *  that channel on YouTube.
 *
 *  Value: "channelToStoreLink"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeTypeChannelToStoreLink;
/** Value: "linkUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeTypeLinkUnspecified;

// ----------------------------------------------------------------------------
// videoCaption

/**
 *  Do not filter results based on caption availability.
 *
 *  Value: "any"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoCaptionAny;
/**
 *  Only include videos that have captions.
 *
 *  Value: "closedCaption"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoCaptionClosedCaption;
/**
 *  Only include videos that do not have captions.
 *
 *  Value: "none"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoCaptionNone;
/** Value: "videoCaptionUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoCaptionVideoCaptionUnspecified;

// ----------------------------------------------------------------------------
// videoDefinition

/**
 *  Return all videos, regardless of their resolution.
 *
 *  Value: "any"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoDefinitionAny;
/**
 *  Only retrieve HD videos.
 *
 *  Value: "high"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoDefinitionHigh;
/**
 *  Only retrieve videos in standard definition.
 *
 *  Value: "standard"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoDefinitionStandard;

// ----------------------------------------------------------------------------
// videoDimension

/** Value: "any" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoDimensionAny;
/**
 *  Restrict search results to exclude 3D videos.
 *
 *  Value: "2d"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoDimensionX2d;
/**
 *  Restrict search results to only include 3D videos.
 *
 *  Value: "3d"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoDimensionX3d;

// ----------------------------------------------------------------------------
// videoDuration

/**
 *  Do not filter video search results based on their duration. This is the
 *  default value.
 *
 *  Value: "any"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoDurationAny;
/**
 *  Only include videos longer than 20 minutes.
 *
 *  Value: "long"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoDurationLong;
/**
 *  Only include videos that are between four and 20 minutes long (inclusive).
 *
 *  Value: "medium"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoDurationMedium;
/**
 *  Only include videos that are less than four minutes long.
 *
 *  Value: "short"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoDurationShort;
/** Value: "videoDurationUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoDurationVideoDurationUnspecified;

// ----------------------------------------------------------------------------
// videoEmbeddable

/**
 *  Return all videos, embeddable or not.
 *
 *  Value: "any"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoEmbeddableAny;
/**
 *  Only retrieve embeddable videos.
 *
 *  Value: "true"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoEmbeddableTrue;
/** Value: "videoEmbeddableUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoEmbeddableVideoEmbeddableUnspecified;

// ----------------------------------------------------------------------------
// videoLicense

/**
 *  Return all videos, regardless of which license they have, that match the
 *  query parameters.
 *
 *  Value: "any"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoLicenseAny;
/**
 *  Only return videos that have a Creative Commons license. Users can reuse
 *  videos with this license in other videos that they create. Learn more.
 *
 *  Value: "creativeCommon"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoLicenseCreativeCommon;
/**
 *  Only return videos that have the standard YouTube license.
 *
 *  Value: "youtube"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoLicenseYoutube;

// ----------------------------------------------------------------------------
// videoSyndicated

/**
 *  Return all videos, syndicated or not.
 *
 *  Value: "any"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoSyndicatedAny;
/**
 *  Only retrieve syndicated videos.
 *
 *  Value: "true"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoSyndicatedTrue;
/** Value: "videoSyndicatedUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoSyndicatedVideoSyndicatedUnspecified;

// ----------------------------------------------------------------------------
// videoType

/**
 *  Return all videos.
 *
 *  Value: "any"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoTypeAny;
/**
 *  Only retrieve episodes of shows.
 *
 *  Value: "episode"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoTypeEpisode;
/**
 *  Only retrieve movies.
 *
 *  Value: "movie"
 */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoTypeMovie;
/** Value: "videoTypeUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRYouTubeVideoTypeVideoTypeUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other YouTube query classes.
 */
@interface GTLRYouTubeQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Inserts a new resource into this collection.
 *
 *  Method: youtube.abuseReports.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_AbuseReportsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForAbuseReportsInsertWithObject:part:]

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response will include.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_AbuseReport.
 *
 *  Inserts a new resource into this collection.
 *
 *  @param object The @c GTLRYouTube_AbuseReport to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *
 *  @return GTLRYouTubeQuery_AbuseReportsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_AbuseReport *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.activities.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_ActivitiesList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForActivitiesListWithpart:]

@property(nonatomic, copy, nullable) NSString *channelId;

@property(nonatomic, assign) BOOL home;

/**
 *  The *maxResults* parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5.
 */
@property(nonatomic, assign) NSUInteger maxResults;

@property(nonatomic, assign) BOOL mine;

/**
 *  The *pageToken* parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The *part* parameter specifies a comma-separated list of one or more
 *  activity resource properties that the API response will include. If the
 *  parameter identifies a property that contains child properties, the child
 *  properties will be included in the response. For example, in an activity
 *  resource, the snippet property contains other properties that identify the
 *  type of activity, a display title for the activity, and so forth. If you set
 *  *part=snippet*, the API response will also contain all of those nested
 *  properties.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

@property(nonatomic, strong, nullable) GTLRDateTime *publishedAfter;

@property(nonatomic, strong, nullable) GTLRDateTime *publishedBefore;

@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  Fetches a @c GTLRYouTube_ActivityListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more activity resource properties that the API response will include. If
 *    the parameter identifies a property that contains child properties, the
 *    child properties will be included in the response. For example, in an
 *    activity resource, the snippet property contains other properties that
 *    identify the type of activity, a display title for the activity, and so
 *    forth. If you set *part=snippet*, the API response will also contain all
 *    of those nested properties.
 *
 *  @return GTLRYouTubeQuery_ActivitiesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Deletes a resource.
 *
 *  Method: youtube.captions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_CaptionsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCaptionsDeleteWithidentifier:]

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  ID of the Google+ Page for the channel that the request is be on behalf of
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOf;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a resource.
 *
 *  @param identifier NSString
 *
 *  @return GTLRYouTubeQuery_CaptionsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Downloads a caption track.
 *
 *  Method: youtube.captions.download
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_CaptionsDownload : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCaptionsDownloadWithidentifier:]

/**
 *  The ID of the caption track to download, required for One Platform.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  ID of the Google+ Page for the channel that the request is be on behalf of
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOf;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Convert the captions into this format. Supported options are sbv, srt, and
 *  vtt.
 */
@property(nonatomic, copy, nullable) NSString *tfmt;

/**
 *  tlang is the language code; machine translate the captions into this
 *  language.
 */
@property(nonatomic, copy, nullable) NSString *tlang;

/**
 *  Fetches the requested resource data as a @c GTLRDataObject.
 *
 *  Downloads a caption track.
 *
 *  @param identifier The ID of the caption track to download, required for One
 *    Platform.
 *
 *  @return GTLRYouTubeQuery_CaptionsDownload
 */
+ (instancetype)queryForMediaWithIdentifier:(NSString *)identifier;

@end

/**
 *  Inserts a new resource into this collection.
 *
 *  Method: youtube.captions.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_CaptionsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCaptionsInsertWithObject:part:]

/**
 *  ID of the Google+ Page for the channel that the request is be on behalf of
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOf;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The *part* parameter specifies the caption resource parts that the API
 *  response will include. Set the parameter value to snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Extra parameter to allow automatically syncing the uploaded
 *  caption/transcript with the audio.
 */
@property(nonatomic, assign) BOOL sync;

/**
 *  Fetches a @c GTLRYouTube_Caption.
 *
 *  Inserts a new resource into this collection.
 *
 *  @param object The @c GTLRYouTube_Caption to include in the query.
 *  @param part The *part* parameter specifies the caption resource parts that
 *    the API response will include. Set the parameter value to snippet.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    104857600. Accepted MIME types: text/xml, application/octet-stream, * / *
 *
 *  @return GTLRYouTubeQuery_CaptionsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Caption *)object
                           part:(NSArray<NSString *> *)part
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.captions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_CaptionsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCaptionsListWithvideoId:part:]

/**
 *  Returns the captions with the given IDs for Stubby or Apiary.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identifier;

/**
 *  ID of the Google+ Page for the channel that the request is on behalf of.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOf;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The *part* parameter specifies a comma-separated list of one or more caption
 *  resource parts that the API response will include. The part names that you
 *  can include in the parameter value are id and snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/** Returns the captions for the specified video. */
@property(nonatomic, copy, nullable) NSString *videoId;

/**
 *  Fetches a @c GTLRYouTube_CaptionListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param videoId Returns the captions for the specified video.
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more caption resource parts that the API response will include. The part
 *    names that you can include in the parameter value are id and snippet.
 *
 *  @return GTLRYouTubeQuery_CaptionsList
 */
+ (instancetype)queryWithVideoId:(NSString *)videoId
                            part:(NSArray<NSString *> *)part;

@end

/**
 *  Updates an existing resource.
 *
 *  Method: youtube.captions.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_CaptionsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCaptionsUpdateWithObject:part:]

/**
 *  ID of the Google+ Page for the channel that the request is on behalf of.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOf;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The *part* parameter specifies a comma-separated list of one or more caption
 *  resource parts that the API response will include. The part names that you
 *  can include in the parameter value are id and snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Extra parameter to allow automatically syncing the uploaded
 *  caption/transcript with the audio.
 */
@property(nonatomic, assign) BOOL sync;

/**
 *  Fetches a @c GTLRYouTube_Caption.
 *
 *  Updates an existing resource.
 *
 *  @param object The @c GTLRYouTube_Caption to include in the query.
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more caption resource parts that the API response will include. The part
 *    names that you can include in the parameter value are id and snippet.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    104857600. Accepted MIME types: text/xml, application/octet-stream, * / *
 *
 *  @return GTLRYouTubeQuery_CaptionsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Caption *)object
                           part:(NSArray<NSString *> *)part
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Inserts a new resource into this collection.
 *
 *  Method: youtube.channelBanners.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeUpload
 */
@interface GTLRYouTubeQuery_ChannelBannersInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForChannelBannersInsertWithObject:]

/**
 *  Unused, channel_id is currently derived from the security context of the
 *  requestor.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  Fetches a @c GTLRYouTube_ChannelBannerResource.
 *
 *  Inserts a new resource into this collection.
 *
 *  @param object The @c GTLRYouTube_ChannelBannerResource to include in the
 *    query.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    6291456. Accepted MIME types: image/jpeg, image/png,
 *    application/octet-stream
 *
 *  @return GTLRYouTubeQuery_ChannelBannersInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_ChannelBannerResource *)object
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Deletes a resource.
 *
 *  Method: youtube.channelSections.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_ChannelSectionsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForChannelSectionsDeleteWithidentifier:]

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a resource.
 *
 *  @param identifier NSString
 *
 *  @return GTLRYouTubeQuery_ChannelSectionsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Inserts a new resource into this collection.
 *
 *  Method: youtube.channelSections.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_ChannelSectionsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForChannelSectionsInsertWithObject:part:]

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response will include. The part names that you can include in
 *  the parameter value are snippet and contentDetails.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_ChannelSection.
 *
 *  Inserts a new resource into this collection.
 *
 *  @param object The @c GTLRYouTube_ChannelSection to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include. The part names that you can
 *    include in the parameter value are snippet and contentDetails.
 *
 *  @return GTLRYouTubeQuery_ChannelSectionsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_ChannelSection *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.channelSections.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_ChannelSectionsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForChannelSectionsListWithpart:]

/** Return the ChannelSections owned by the specified channel ID. */
@property(nonatomic, copy, nullable) NSString *channelId;

/** Return content in specified language */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  Return the ChannelSections with the given IDs for Stubby or Apiary.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identifier;

/** Return the ChannelSections owned by the authenticated user. */
@property(nonatomic, assign) BOOL mine;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The *part* parameter specifies a comma-separated list of one or more
 *  channelSection resource properties that the API response will include. The
 *  part names that you can include in the parameter value are id, snippet, and
 *  contentDetails. If the parameter identifies a property that contains child
 *  properties, the child properties will be included in the response. For
 *  example, in a channelSection resource, the snippet property contains other
 *  properties, such as a display title for the channelSection. If you set
 *  *part=snippet*, the API response will also contain all of those nested
 *  properties.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_ChannelSectionListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more channelSection resource properties that the API response will
 *    include. The part names that you can include in the parameter value are
 *    id, snippet, and contentDetails. If the parameter identifies a property
 *    that contains child properties, the child properties will be included in
 *    the response. For example, in a channelSection resource, the snippet
 *    property contains other properties, such as a display title for the
 *    channelSection. If you set *part=snippet*, the API response will also
 *    contain all of those nested properties.
 *
 *  @return GTLRYouTubeQuery_ChannelSectionsList
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Updates an existing resource.
 *
 *  Method: youtube.channelSections.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_ChannelSectionsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForChannelSectionsUpdateWithObject:part:]

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response will include. The part names that you can include in
 *  the parameter value are snippet and contentDetails.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_ChannelSection.
 *
 *  Updates an existing resource.
 *
 *  @param object The @c GTLRYouTube_ChannelSection to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include. The part names that you can
 *    include in the parameter value are snippet and contentDetails.
 *
 *  @return GTLRYouTubeQuery_ChannelSectionsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_ChannelSection *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.channels.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 *    @c kGTLRAuthScopeYouTubeYoutubepartnerChannelAudit
 */
@interface GTLRYouTubeQuery_ChannelsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForChannelsListWithpart:]

/** Return the channels within the specified guide category ID. */
@property(nonatomic, copy, nullable) NSString *categoryId;

/** Return the channel associated with a YouTube username. */
@property(nonatomic, copy, nullable) NSString *forUsername;

/**
 *  Stands for "host language". Specifies the localization language of the
 *  metadata to be filled into snippet.localized. The field is filled with the
 *  default metadata if there is no localization in the specified language. The
 *  parameter value must be a language code included in the list returned by the
 *  i18nLanguages.list method (e.g. en_US, es_MX).
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  Return the channels with the specified IDs.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identifier;

/** Return the channels managed by the authenticated user. */
@property(nonatomic, assign) BOOL managedByMe;

/**
 *  The *maxResults* parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** Return the ids of channels owned by the authenticated user. */
@property(nonatomic, assign) BOOL mine;

/** Return the channels subscribed to the authenticated user */
@property(nonatomic, assign) BOOL mySubscribers;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The *pageToken* parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The *part* parameter specifies a comma-separated list of one or more channel
 *  resource properties that the API response will include. If the parameter
 *  identifies a property that contains child properties, the child properties
 *  will be included in the response. For example, in a channel resource, the
 *  contentDetails property contains other properties, such as the uploads
 *  properties. As such, if you set *part=contentDetails*, the API response will
 *  also contain all of those nested properties.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_ChannelListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more channel resource properties that the API response will include. If
 *    the parameter identifies a property that contains child properties, the
 *    child properties will be included in the response. For example, in a
 *    channel resource, the contentDetails property contains other properties,
 *    such as the uploads properties. As such, if you set *part=contentDetails*,
 *    the API response will also contain all of those nested properties.
 *
 *  @return GTLRYouTubeQuery_ChannelsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Updates an existing resource.
 *
 *  Method: youtube.channels.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_ChannelsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForChannelsUpdateWithObject:part:]

/**
 *  The *onBehalfOfContentOwner* parameter indicates that the authenticated user
 *  is acting on behalf of the content owner specified in the parameter value.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and get access to all their video and channel data, without having to
 *  provide authentication credentials for each individual channel. The actual
 *  CMS account that the user authenticates with needs to be linked to the
 *  specified YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response will include. The API currently only allows the
 *  parameter value to be set to either brandingSettings or invideoPromotion.
 *  (You cannot update both of those parts with a single request.) Note that
 *  this method overrides the existing values for all of the mutable properties
 *  that are contained in any parts that the parameter value specifies.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_Channel.
 *
 *  Updates an existing resource.
 *
 *  @param object The @c GTLRYouTube_Channel to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include. The API currently only
 *    allows the parameter value to be set to either brandingSettings or
 *    invideoPromotion. (You cannot update both of those parts with a single
 *    request.) Note that this method overrides the existing values for all of
 *    the mutable properties that are contained in any parts that the parameter
 *    value specifies.
 *
 *  @return GTLRYouTubeQuery_ChannelsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Channel *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Deletes a resource.
 *
 *  Method: youtube.comments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentsDeleteWithidentifier:]

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a resource.
 *
 *  @param identifier NSString
 *
 *  @return GTLRYouTubeQuery_CommentsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Inserts a new resource into this collection.
 *
 *  Method: youtube.comments.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentsInsertWithObject:part:]

/**
 *  The *part* parameter identifies the properties that the API response will
 *  include. Set the parameter value to snippet. The snippet part has a quota
 *  cost of 2 units.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_Comment.
 *
 *  Inserts a new resource into this collection.
 *
 *  @param object The @c GTLRYouTube_Comment to include in the query.
 *  @param part The *part* parameter identifies the properties that the API
 *    response will include. Set the parameter value to snippet. The snippet
 *    part has a quota cost of 2 units.
 *
 *  @return GTLRYouTubeQuery_CommentsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Comment *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.comments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentsListWithpart:]

/**
 *  Returns the comments with the given IDs for One Platform.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identifier;

/**
 *  The *maxResults* parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 20.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The *pageToken* parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Returns replies to the specified comment. Note, currently YouTube features
 *  only one level of replies (ie replies to top level comments). However
 *  replies to replies may be supported in the future.
 */
@property(nonatomic, copy, nullable) NSString *parentId;

/**
 *  The *part* parameter specifies a comma-separated list of one or more comment
 *  resource properties that the API response will include.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  The requested text format for the returned comments.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeTextFormatTextFormatUnspecified Value
 *        "textFormatUnspecified"
 *    @arg @c kGTLRYouTubeTextFormatHtml Returns the comments in HTML format.
 *        This is the default value. (Value: "html")
 *    @arg @c kGTLRYouTubeTextFormatPlainText Returns the comments in plain text
 *        format. (Value: "plainText")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRYouTubeTextFormatHtml.
 */
@property(nonatomic, copy, nullable) NSString *textFormat;

/**
 *  Fetches a @c GTLRYouTube_CommentListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more comment resource properties that the API response will include.
 *
 *  @return GTLRYouTubeQuery_CommentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Expresses the caller's opinion that one or more comments should be flagged
 *  as spam.
 *
 *  Method: youtube.comments.markAsSpam
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentsMarkAsSpam : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentsMarkAsSpamWithidentifier:]

/**
 *  Flags the comments with the given IDs as spam in the caller's opinion.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identifier;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Expresses the caller's opinion that one or more comments should be flagged
 *  as spam.
 *
 *  @param identifier Flags the comments with the given IDs as spam in the
 *    caller's opinion.
 *
 *  @return GTLRYouTubeQuery_CommentsMarkAsSpam
 */
+ (instancetype)queryWithIdentifier:(NSArray<NSString *> *)identifier;

@end

/**
 *  Sets the moderation status of one or more comments.
 *
 *  Method: youtube.comments.setModerationStatus
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentsSetModerationStatus : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentsSetModerationStatusWithidentifier:moderationStatus:]

/**
 *  If set to true the author of the comment gets added to the ban list. This
 *  means all future comments of the author will autmomatically be rejected.
 *  Only valid in combination with STATUS_REJECTED.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL banAuthor;

/**
 *  Modifies the moderation status of the comments with the given IDs
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identifier;

/**
 *  Specifies the requested moderation status. Note, comments can be in
 *  statuses, which are not available through this call. For example, this call
 *  does not allow to mark a comment as 'likely spam'. Valid values:
 *  MODERATION_STATUS_PUBLISHED, MODERATION_STATUS_HELD_FOR_REVIEW,
 *  MODERATION_STATUS_REJECTED.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeModerationStatusPublished The comment is available for
 *        public display. (Value: "published")
 *    @arg @c kGTLRYouTubeModerationStatusHeldForReview The comment is awaiting
 *        review by a moderator. (Value: "heldForReview")
 *    @arg @c kGTLRYouTubeModerationStatusLikelySpam Value "likelySpam"
 *    @arg @c kGTLRYouTubeModerationStatusRejected The comment is unfit for
 *        display. (Value: "rejected")
 */
@property(nonatomic, copy, nullable) NSString *moderationStatus;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Sets the moderation status of one or more comments.
 *
 *  @param identifier Modifies the moderation status of the comments with the
 *    given IDs
 *  @param moderationStatus Specifies the requested moderation status. Note,
 *    comments can be in statuses, which are not available through this call.
 *    For example, this call does not allow to mark a comment as 'likely spam'.
 *    Valid values: MODERATION_STATUS_PUBLISHED,
 *    MODERATION_STATUS_HELD_FOR_REVIEW, MODERATION_STATUS_REJECTED.
 *
 *  Likely values for @c moderationStatus:
 *    @arg @c kGTLRYouTubeModerationStatusPublished The comment is available for
 *        public display. (Value: "published")
 *    @arg @c kGTLRYouTubeModerationStatusHeldForReview The comment is awaiting
 *        review by a moderator. (Value: "heldForReview")
 *    @arg @c kGTLRYouTubeModerationStatusLikelySpam Value "likelySpam"
 *    @arg @c kGTLRYouTubeModerationStatusRejected The comment is unfit for
 *        display. (Value: "rejected")
 *
 *  @return GTLRYouTubeQuery_CommentsSetModerationStatus
 */
+ (instancetype)queryWithIdentifier:(NSArray<NSString *> *)identifier
                   moderationStatus:(NSString *)moderationStatus;

@end

/**
 *  Updates an existing resource.
 *
 *  Method: youtube.comments.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentsUpdateWithObject:part:]

/**
 *  The *part* parameter identifies the properties that the API response will
 *  include. You must at least include the snippet part in the parameter value
 *  since that part contains all of the properties that the API request can
 *  update.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_Comment.
 *
 *  Updates an existing resource.
 *
 *  @param object The @c GTLRYouTube_Comment to include in the query.
 *  @param part The *part* parameter identifies the properties that the API
 *    response will include. You must at least include the snippet part in the
 *    parameter value since that part contains all of the properties that the
 *    API request can update.
 *
 *  @return GTLRYouTubeQuery_CommentsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Comment *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Inserts a new resource into this collection.
 *
 *  Method: youtube.commentThreads.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentThreadsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentThreadsInsertWithObject:part:]

/**
 *  The *part* parameter identifies the properties that the API response will
 *  include. Set the parameter value to snippet. The snippet part has a quota
 *  cost of 2 units.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_CommentThread.
 *
 *  Inserts a new resource into this collection.
 *
 *  @param object The @c GTLRYouTube_CommentThread to include in the query.
 *  @param part The *part* parameter identifies the properties that the API
 *    response will include. Set the parameter value to snippet. The snippet
 *    part has a quota cost of 2 units.
 *
 *  @return GTLRYouTubeQuery_CommentThreadsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_CommentThread *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.commentThreads.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentThreadsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentThreadsListWithpart:]

/**
 *  Returns the comment threads of all videos of the channel and the channel
 *  comments as well.
 */
@property(nonatomic, copy, nullable) NSString *allThreadsRelatedToChannelId;

/**
 *  Returns the comment threads for all the channel comments (ie does not
 *  include comments left on videos).
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  Returns the comment threads with the given IDs for Stubby or Apiary.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identifier;

/**
 *  The *maxResults* parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 20.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Limits the returned comment threads to those with the specified moderation
 *  status. Not compatible with the 'id' filter. Valid values: published,
 *  heldForReview, likelySpam.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeModerationStatusPublished The comment is available for
 *        public display. (Value: "published")
 *    @arg @c kGTLRYouTubeModerationStatusHeldForReview The comment is awaiting
 *        review by a moderator. (Value: "heldForReview")
 *    @arg @c kGTLRYouTubeModerationStatusLikelySpam Value "likelySpam"
 *    @arg @c kGTLRYouTubeModerationStatusRejected The comment is unfit for
 *        display. (Value: "rejected")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRYouTubeModerationStatusPublished.
 */
@property(nonatomic, copy, nullable) NSString *moderationStatus;

/**
 *  order
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeOrderOrderUnspecified Value "orderUnspecified"
 *    @arg @c kGTLRYouTubeOrderTime Order by time. (Value: "time")
 *    @arg @c kGTLRYouTubeOrderRelevance Order by relevance. (Value:
 *        "relevance")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRYouTubeOrderTime.
 */
@property(nonatomic, copy, nullable) NSString *order;

/**
 *  The *pageToken* parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The *part* parameter specifies a comma-separated list of one or more
 *  commentThread resource properties that the API response will include.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Limits the returned comment threads to those matching the specified key
 *  words. Not compatible with the 'id' filter.
 */
@property(nonatomic, copy, nullable) NSString *searchTerms;

/**
 *  The requested text format for the returned comments.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeTextFormatTextFormatUnspecified Value
 *        "textFormatUnspecified"
 *    @arg @c kGTLRYouTubeTextFormatHtml Returns the comments in HTML format.
 *        This is the default value. (Value: "html")
 *    @arg @c kGTLRYouTubeTextFormatPlainText Returns the comments in plain text
 *        format. (Value: "plainText")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRYouTubeTextFormatHtml.
 */
@property(nonatomic, copy, nullable) NSString *textFormat;

/** Returns the comment threads of the specified video. */
@property(nonatomic, copy, nullable) NSString *videoId;

/**
 *  Fetches a @c GTLRYouTube_CommentThreadListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more commentThread resource properties that the API response will include.
 *
 *  @return GTLRYouTubeQuery_CommentThreadsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Updates an existing resource.
 *
 *  Method: youtube.commentThreads.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentThreadsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentThreadsUpdateWithObject:part:]

/**
 *  The *part* parameter specifies a comma-separated list of commentThread
 *  resource properties that the API response will include. You must at least
 *  include the snippet part in the parameter value since that part contains all
 *  of the properties that the API request can update.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_CommentThread.
 *
 *  Updates an existing resource.
 *
 *  @param object The @c GTLRYouTube_CommentThread to include in the query.
 *  @param part The *part* parameter specifies a comma-separated list of
 *    commentThread resource properties that the API response will include. You
 *    must at least include the snippet part in the parameter value since that
 *    part contains all of the properties that the API request can update.
 *
 *  @return GTLRYouTubeQuery_CommentThreadsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_CommentThread *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.i18nLanguages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_I18nLanguagesList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForI18nLanguagesListWithpart:]

/**
 *  hl
 *
 *  @note If not set, the documented server-side default will be en_US.
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  The *part* parameter specifies the i18nLanguage resource properties that the
 *  API response will include. Set the parameter value to snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_I18nLanguageListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param part The *part* parameter specifies the i18nLanguage resource
 *    properties that the API response will include. Set the parameter value to
 *    snippet.
 *
 *  @return GTLRYouTubeQuery_I18nLanguagesList
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.i18nRegions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_I18nRegionsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForI18nRegionsListWithpart:]

/**
 *  hl
 *
 *  @note If not set, the documented server-side default will be en_US.
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  The *part* parameter specifies the i18nRegion resource properties that the
 *  API response will include. Set the parameter value to snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_I18nRegionListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param part The *part* parameter specifies the i18nRegion resource
 *    properties that the API response will include. Set the parameter value to
 *    snippet.
 *
 *  @return GTLRYouTubeQuery_I18nRegionsList
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Bind a broadcast to a stream.
 *
 *  Method: youtube.liveBroadcasts.bind
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveBroadcastsBind : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveBroadcastsBindWithidentifier:part:]

/**
 *  Broadcast to bind to the stream
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The *part* parameter specifies a comma-separated list of one or more
 *  liveBroadcast resource properties that the API response will include. The
 *  part names that you can include in the parameter value are id, snippet,
 *  contentDetails, and status.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/** Stream to bind, if not set unbind the current one. */
@property(nonatomic, copy, nullable) NSString *streamId;

/**
 *  Fetches a @c GTLRYouTube_LiveBroadcast.
 *
 *  Bind a broadcast to a stream.
 *
 *  @param identifier Broadcast to bind to the stream
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more liveBroadcast resource properties that the API response will include.
 *    The part names that you can include in the parameter value are id,
 *    snippet, contentDetails, and status.
 *
 *  @return GTLRYouTubeQuery_LiveBroadcastsBind
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier
                               part:(NSArray<NSString *> *)part;

@end

/**
 *  Slate and recording control of the live broadcast. Support actions: slate
 *  on/off, recording start/stop/pause/resume. Design doc:
 *  goto/yt-api-liveBroadcast-control
 *
 *  Method: youtube.liveBroadcasts.control
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveBroadcastsControl : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveBroadcastsControlWithidentifier:part:]

/** Whether display or hide slate. */
@property(nonatomic, assign) BOOL displaySlate;

/**
 *  Broadcast to operate.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The exact time when the actions (e.g. slate on) are executed. It is an
 *  offset from the first frame of the monitor stream. If not set, it means
 *  "now" or ASAP. This field should not be set if the monitor stream is
 *  disabled, otherwise an error will be returned.
 */
@property(nonatomic, assign) unsigned long long offsetTimeMs;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The *part* parameter specifies a comma-separated list of one or more
 *  liveBroadcast resource properties that the API response will include. The
 *  part names that you can include in the parameter value are id, snippet,
 *  contentDetails, and status.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  The wall clock time at which the action should be executed. Only one of
 *  offset_time_ms and walltime may be set at a time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *walltime;

/**
 *  Fetches a @c GTLRYouTube_LiveBroadcast.
 *
 *  Slate and recording control of the live broadcast. Support actions: slate
 *  on/off, recording start/stop/pause/resume. Design doc:
 *  goto/yt-api-liveBroadcast-control
 *
 *  @param identifier Broadcast to operate.
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more liveBroadcast resource properties that the API response will include.
 *    The part names that you can include in the parameter value are id,
 *    snippet, contentDetails, and status.
 *
 *  @return GTLRYouTubeQuery_LiveBroadcastsControl
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier
                               part:(NSArray<NSString *> *)part;

@end

/**
 *  Delete a given broadcast.
 *
 *  Method: youtube.liveBroadcasts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveBroadcastsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveBroadcastsDeleteWithidentifier:]

/**
 *  Broadcast to delete.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Delete a given broadcast.
 *
 *  @param identifier Broadcast to delete.
 *
 *  @return GTLRYouTubeQuery_LiveBroadcastsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Inserts a new stream for the authenticated user.
 *
 *  Method: youtube.liveBroadcasts.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveBroadcastsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveBroadcastsInsertWithObject:part:]

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response will include. The part properties that you can include
 *  in the parameter value are id, snippet, contentDetails, and status.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_LiveBroadcast.
 *
 *  Inserts a new stream for the authenticated user.
 *
 *  @param object The @c GTLRYouTube_LiveBroadcast to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include. The part properties that
 *    you can include in the parameter value are id, snippet, contentDetails,
 *    and status.
 *
 *  @return GTLRYouTubeQuery_LiveBroadcastsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_LiveBroadcast *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieve the list of broadcasts associated with the given channel.
 *
 *  Method: youtube.liveBroadcasts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_LiveBroadcastsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveBroadcastsListWithpart:]

/**
 *  Return broadcasts with a certain status, e.g. active broadcasts.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeBroadcastStatusBroadcastStatusFilterUnspecified Value
 *        "broadcastStatusFilterUnspecified"
 *    @arg @c kGTLRYouTubeBroadcastStatusAll Return all broadcasts. (Value:
 *        "all")
 *    @arg @c kGTLRYouTubeBroadcastStatusActive Return current live broadcasts.
 *        (Value: "active")
 *    @arg @c kGTLRYouTubeBroadcastStatusUpcoming Return broadcasts that have
 *        not yet started. (Value: "upcoming")
 *    @arg @c kGTLRYouTubeBroadcastStatusCompleted Return broadcasts that have
 *        already ended. (Value: "completed")
 */
@property(nonatomic, copy, nullable) NSString *broadcastStatus;

/**
 *  Return only broadcasts with the selected type.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeBroadcastTypeBroadcastTypeFilterUnspecified Value
 *        "broadcastTypeFilterUnspecified"
 *    @arg @c kGTLRYouTubeBroadcastTypeAll Return all broadcasts. (Value: "all")
 *    @arg @c kGTLRYouTubeBroadcastTypeEvent Return only scheduled event
 *        broadcasts. (Value: "event")
 *    @arg @c kGTLRYouTubeBroadcastTypePersistent Return only persistent
 *        broadcasts. (Value: "persistent")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRYouTubeBroadcastTypeEvent.
 */
@property(nonatomic, copy, nullable) NSString *broadcastType;

/**
 *  Return broadcasts with the given ids from Stubby or Apiary.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identifier;

/**
 *  The *maxResults* parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5.
 */
@property(nonatomic, assign) NSUInteger maxResults;

@property(nonatomic, assign) BOOL mine;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The *pageToken* parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The *part* parameter specifies a comma-separated list of one or more
 *  liveBroadcast resource properties that the API response will include. The
 *  part names that you can include in the parameter value are id, snippet,
 *  contentDetails, status and statistics.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_LiveBroadcastListResponse.
 *
 *  Retrieve the list of broadcasts associated with the given channel.
 *
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more liveBroadcast resource properties that the API response will include.
 *    The part names that you can include in the parameter value are id,
 *    snippet, contentDetails, status and statistics.
 *
 *  @return GTLRYouTubeQuery_LiveBroadcastsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Transition a broadcast to a given status.
 *
 *  Method: youtube.liveBroadcasts.transition
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveBroadcastsTransition : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveBroadcastsTransitionWithidentifier:broadcastStatus:part:]

/**
 *  The status to which the broadcast is going to transition.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeBroadcastStatusStatusUnspecified Value
 *        "statusUnspecified"
 *    @arg @c kGTLRYouTubeBroadcastStatusTesting Start testing the broadcast.
 *        YouTube transmits video to the broadcast's monitor stream. Note that
 *        you can only transition a broadcast to the testing state if its
 *        contentDetails.monitorStream.enableMonitorStream property is set to
 *        true.", (Value: "testing")
 *    @arg @c kGTLRYouTubeBroadcastStatusLive Return only persistent broadcasts.
 *        (Value: "live")
 *    @arg @c kGTLRYouTubeBroadcastStatusComplete The broadcast is over. YouTube
 *        stops transmitting video. (Value: "complete")
 */
@property(nonatomic, copy, nullable) NSString *broadcastStatus;

/**
 *  Broadcast to transition.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The *part* parameter specifies a comma-separated list of one or more
 *  liveBroadcast resource properties that the API response will include. The
 *  part names that you can include in the parameter value are id, snippet,
 *  contentDetails, and status.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_LiveBroadcast.
 *
 *  Transition a broadcast to a given status.
 *
 *  @param identifier Broadcast to transition.
 *  @param broadcastStatus The status to which the broadcast is going to
 *    transition.
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more liveBroadcast resource properties that the API response will include.
 *    The part names that you can include in the parameter value are id,
 *    snippet, contentDetails, and status.
 *
 *  Likely values for @c broadcastStatus:
 *    @arg @c kGTLRYouTubeBroadcastStatusStatusUnspecified Value
 *        "statusUnspecified"
 *    @arg @c kGTLRYouTubeBroadcastStatusTesting Start testing the broadcast.
 *        YouTube transmits video to the broadcast's monitor stream. Note that
 *        you can only transition a broadcast to the testing state if its
 *        contentDetails.monitorStream.enableMonitorStream property is set to
 *        true.", (Value: "testing")
 *    @arg @c kGTLRYouTubeBroadcastStatusLive Return only persistent broadcasts.
 *        (Value: "live")
 *    @arg @c kGTLRYouTubeBroadcastStatusComplete The broadcast is over. YouTube
 *        stops transmitting video. (Value: "complete")
 *
 *  @return GTLRYouTubeQuery_LiveBroadcastsTransition
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier
                    broadcastStatus:(NSString *)broadcastStatus
                               part:(NSArray<NSString *> *)part;

@end

/**
 *  Updates an existing broadcast for the authenticated user.
 *
 *  Method: youtube.liveBroadcasts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveBroadcastsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveBroadcastsUpdateWithObject:part:]

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response will include. The part properties that you can include
 *  in the parameter value are id, snippet, contentDetails, and status. Note
 *  that this method will override the existing values for all of the mutable
 *  properties that are contained in any parts that the parameter value
 *  specifies. For example, a broadcast's privacy status is defined in the
 *  status part. As such, if your request is updating a private or unlisted
 *  broadcast, and the request's part parameter value includes the status part,
 *  the broadcast's privacy setting will be updated to whatever value the
 *  request body specifies. If the request body does not specify a value, the
 *  existing privacy setting will be removed and the broadcast will revert to
 *  the default privacy setting.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_LiveBroadcast.
 *
 *  Updates an existing broadcast for the authenticated user.
 *
 *  @param object The @c GTLRYouTube_LiveBroadcast to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include. The part properties that
 *    you can include in the parameter value are id, snippet, contentDetails,
 *    and status. Note that this method will override the existing values for
 *    all of the mutable properties that are contained in any parts that the
 *    parameter value specifies. For example, a broadcast's privacy status is
 *    defined in the status part. As such, if your request is updating a private
 *    or unlisted broadcast, and the request's part parameter value includes the
 *    status part, the broadcast's privacy setting will be updated to whatever
 *    value the request body specifies. If the request body does not specify a
 *    value, the existing privacy setting will be removed and the broadcast will
 *    revert to the default privacy setting.
 *
 *  @return GTLRYouTubeQuery_LiveBroadcastsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_LiveBroadcast *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Deletes a chat ban.
 *
 *  Method: youtube.liveChatBans.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveChatBansDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveChatBansDeleteWithidentifier:]

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a chat ban.
 *
 *  @param identifier NSString
 *
 *  @return GTLRYouTubeQuery_LiveChatBansDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Inserts a new resource into this collection.
 *
 *  Method: youtube.liveChatBans.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveChatBansInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveChatBansInsertWithObject:part:]

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response returns. Set the parameter value to snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_LiveChatBan.
 *
 *  Inserts a new resource into this collection.
 *
 *  @param object The @c GTLRYouTube_LiveChatBan to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response returns. Set the parameter value to
 *    snippet.
 *
 *  @return GTLRYouTubeQuery_LiveChatBansInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_LiveChatBan *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Deletes a chat message.
 *
 *  Method: youtube.liveChatMessages.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveChatMessagesDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveChatMessagesDeleteWithidentifier:]

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a chat message.
 *
 *  @param identifier NSString
 *
 *  @return GTLRYouTubeQuery_LiveChatMessagesDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Inserts a new resource into this collection.
 *
 *  Method: youtube.liveChatMessages.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveChatMessagesInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveChatMessagesInsertWithObject:part:]

/**
 *  The *part* parameter serves two purposes. It identifies the properties that
 *  the write operation will set as well as the properties that the API response
 *  will include. Set the parameter value to snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_LiveChatMessage.
 *
 *  Inserts a new resource into this collection.
 *
 *  @param object The @c GTLRYouTube_LiveChatMessage to include in the query.
 *  @param part The *part* parameter serves two purposes. It identifies the
 *    properties that the write operation will set as well as the properties
 *    that the API response will include. Set the parameter value to snippet.
 *
 *  @return GTLRYouTubeQuery_LiveChatMessagesInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_LiveChatMessage *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.liveChatMessages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_LiveChatMessagesList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveChatMessagesListWithliveChatId:part:]

/**
 *  Specifies the localization language in which the system messages should be
 *  returned.
 */
@property(nonatomic, copy, nullable) NSString *hl;

/** The id of the live chat for which comments should be returned. */
@property(nonatomic, copy, nullable) NSString *liveChatId;

/**
 *  The *maxResults* parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 500.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The *pageToken* parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken property identify
 *  other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The *part* parameter specifies the liveChatComment resource parts that the
 *  API response will include. Supported values are id and snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Specifies the size of the profile image that should be returned for each
 *  user.
 */
@property(nonatomic, assign) NSUInteger profileImageSize;

/**
 *  Fetches a @c GTLRYouTube_LiveChatMessageListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param liveChatId The id of the live chat for which comments should be
 *    returned.
 *  @param part The *part* parameter specifies the liveChatComment resource
 *    parts that the API response will include. Supported values are id and
 *    snippet.
 *
 *  @return GTLRYouTubeQuery_LiveChatMessagesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithLiveChatId:(NSString *)liveChatId
                               part:(NSArray<NSString *> *)part;

@end

/**
 *  Deletes a chat moderator.
 *
 *  Method: youtube.liveChatModerators.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveChatModeratorsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveChatModeratorsDeleteWithidentifier:]

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a chat moderator.
 *
 *  @param identifier NSString
 *
 *  @return GTLRYouTubeQuery_LiveChatModeratorsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Inserts a new resource into this collection.
 *
 *  Method: youtube.liveChatModerators.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveChatModeratorsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveChatModeratorsInsertWithObject:part:]

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response returns. Set the parameter value to snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_LiveChatModerator.
 *
 *  Inserts a new resource into this collection.
 *
 *  @param object The @c GTLRYouTube_LiveChatModerator to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response returns. Set the parameter value to
 *    snippet.
 *
 *  @return GTLRYouTubeQuery_LiveChatModeratorsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_LiveChatModerator *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.liveChatModerators.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_LiveChatModeratorsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveChatModeratorsListWithliveChatId:part:]

/** The id of the live chat for which moderators should be returned. */
@property(nonatomic, copy, nullable) NSString *liveChatId;

/**
 *  The *maxResults* parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The *pageToken* parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The *part* parameter specifies the liveChatModerator resource parts that the
 *  API response will include. Supported values are id and snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_LiveChatModeratorListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param liveChatId The id of the live chat for which moderators should be
 *    returned.
 *  @param part The *part* parameter specifies the liveChatModerator resource
 *    parts that the API response will include. Supported values are id and
 *    snippet.
 *
 *  @return GTLRYouTubeQuery_LiveChatModeratorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithLiveChatId:(NSString *)liveChatId
                               part:(NSArray<NSString *> *)part;

@end

/**
 *  Deletes an existing stream for the authenticated user.
 *
 *  Method: youtube.liveStreams.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveStreamsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveStreamsDeleteWithidentifier:]

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an existing stream for the authenticated user.
 *
 *  @param identifier NSString
 *
 *  @return GTLRYouTubeQuery_LiveStreamsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Inserts a new stream for the authenticated user.
 *
 *  Method: youtube.liveStreams.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveStreamsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveStreamsInsertWithObject:part:]

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response will include. The part properties that you can include
 *  in the parameter value are id, snippet, cdn, and status.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_LiveStream.
 *
 *  Inserts a new stream for the authenticated user.
 *
 *  @param object The @c GTLRYouTube_LiveStream to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include. The part properties that
 *    you can include in the parameter value are id, snippet, cdn, and status.
 *
 *  @return GTLRYouTubeQuery_LiveStreamsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_LiveStream *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieve the list of streams associated with the given channel. --
 *
 *  Method: youtube.liveStreams.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_LiveStreamsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveStreamsListWithpart:]

/**
 *  Return LiveStreams with the given ids from Stubby or Apiary.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identifier;

/**
 *  The *maxResults* parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5.
 */
@property(nonatomic, assign) NSUInteger maxResults;

@property(nonatomic, assign) BOOL mine;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The *pageToken* parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The *part* parameter specifies a comma-separated list of one or more
 *  liveStream resource properties that the API response will include. The part
 *  names that you can include in the parameter value are id, snippet, cdn, and
 *  status.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_LiveStreamListResponse.
 *
 *  Retrieve the list of streams associated with the given channel. --
 *
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more liveStream resource properties that the API response will include.
 *    The part names that you can include in the parameter value are id,
 *    snippet, cdn, and status.
 *
 *  @return GTLRYouTubeQuery_LiveStreamsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Updates an existing stream for the authenticated user.
 *
 *  Method: youtube.liveStreams.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveStreamsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveStreamsUpdateWithObject:part:]

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response will include. The part properties that you can include
 *  in the parameter value are id, snippet, cdn, and status. Note that this
 *  method will override the existing values for all of the mutable properties
 *  that are contained in any parts that the parameter value specifies. If the
 *  request body does not specify a value for a mutable property, the existing
 *  value for that property will be removed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_LiveStream.
 *
 *  Updates an existing stream for the authenticated user.
 *
 *  @param object The @c GTLRYouTube_LiveStream to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include. The part properties that
 *    you can include in the parameter value are id, snippet, cdn, and status.
 *    Note that this method will override the existing values for all of the
 *    mutable properties that are contained in any parts that the parameter
 *    value specifies. If the request body does not specify a value for a
 *    mutable property, the existing value for that property will be removed.
 *
 *  @return GTLRYouTubeQuery_LiveStreamsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_LiveStream *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of all pricing levels offered by a creator to the fans.
 *
 *  Method: youtube.membershipsLevels.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeChannelMembershipsCreator
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_MembershipsLevelsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForMembershipsLevelsListWithpart:]

/**
 *  The *part* parameter specifies the membershipsLevel resource parts that the
 *  API response will include. Supported values are id and snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_MembershipsLevelListResponse.
 *
 *  Retrieves a list of all pricing levels offered by a creator to the fans.
 *
 *  @param part The *part* parameter specifies the membershipsLevel resource
 *    parts that the API response will include. Supported values are id and
 *    snippet.
 *
 *  @return GTLRYouTubeQuery_MembershipsLevelsList
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of members that match the request criteria for a channel.
 *
 *  Method: youtube.members.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeChannelMembershipsCreator
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_MembersList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForMembersListWithpart:]

/**
 *  Comma separated list of channel IDs. Only data about members that are part
 *  of this list will be included in the response.
 */
@property(nonatomic, copy, nullable) NSString *filterByMemberChannelId;

/**
 *  Filter members in the results set to the ones that have access to a level.
 */
@property(nonatomic, copy, nullable) NSString *hasAccessToLevel;

/**
 *  The *maxResults* parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Parameter that specifies which channel members to return.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeModeListMembersModeUnknown Value
 *        "listMembersModeUnknown"
 *    @arg @c kGTLRYouTubeModeUpdates Return only members that joined after the
 *        first call with this mode was made. (Value: "updates")
 *    @arg @c kGTLRYouTubeModeAllCurrent Return all current members, from newest
 *        to oldest. (Value: "all_current")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRYouTubeModeAllCurrent.
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  The *pageToken* parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The *part* parameter specifies the member resource parts that the API
 *  response will include. Set the parameter value to snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_MemberListResponse.
 *
 *  Retrieves a list of members that match the request criteria for a channel.
 *
 *  @param part The *part* parameter specifies the member resource parts that
 *    the API response will include. Set the parameter value to snippet.
 *
 *  @return GTLRYouTubeQuery_MembersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Deletes a resource.
 *
 *  Method: youtube.playlistItems.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_PlaylistItemsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForPlaylistItemsDeleteWithidentifier:]

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a resource.
 *
 *  @param identifier NSString
 *
 *  @return GTLRYouTubeQuery_PlaylistItemsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Inserts a new resource into this collection.
 *
 *  Method: youtube.playlistItems.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_PlaylistItemsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForPlaylistItemsInsertWithObject:part:]

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response will include.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_PlaylistItem.
 *
 *  Inserts a new resource into this collection.
 *
 *  @param object The @c GTLRYouTube_PlaylistItem to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *
 *  @return GTLRYouTubeQuery_PlaylistItemsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_PlaylistItem *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.playlistItems.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_PlaylistItemsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForPlaylistItemsListWithpart:]

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identifier;

/**
 *  The *maxResults* parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The *pageToken* parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The *part* parameter specifies a comma-separated list of one or more
 *  playlistItem resource properties that the API response will include. If the
 *  parameter identifies a property that contains child properties, the child
 *  properties will be included in the response. For example, in a playlistItem
 *  resource, the snippet property contains numerous fields, including the
 *  title, description, position, and resourceId properties. As such, if you set
 *  *part=snippet*, the API response will contain all of those properties.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/** Return the playlist items within the given playlist. */
@property(nonatomic, copy, nullable) NSString *playlistId;

/** Return the playlist items associated with the given video ID. */
@property(nonatomic, copy, nullable) NSString *videoId;

/**
 *  Fetches a @c GTLRYouTube_PlaylistItemListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more playlistItem resource properties that the API response will include.
 *    If the parameter identifies a property that contains child properties, the
 *    child properties will be included in the response. For example, in a
 *    playlistItem resource, the snippet property contains numerous fields,
 *    including the title, description, position, and resourceId properties. As
 *    such, if you set *part=snippet*, the API response will contain all of
 *    those properties.
 *
 *  @return GTLRYouTubeQuery_PlaylistItemsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Updates an existing resource.
 *
 *  Method: youtube.playlistItems.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_PlaylistItemsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForPlaylistItemsUpdateWithObject:part:]

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response will include. Note that this method will override the
 *  existing values for all of the mutable properties that are contained in any
 *  parts that the parameter value specifies. For example, a playlist item can
 *  specify a start time and end time, which identify the times portion of the
 *  video that should play when users watch the video in the playlist. If your
 *  request is updating a playlist item that sets these values, and the
 *  request's part parameter value includes the contentDetails part, the
 *  playlist item's start and end times will be updated to whatever value the
 *  request body specifies. If the request body does not specify values, the
 *  existing start and end times will be removed and replaced with the default
 *  settings.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_PlaylistItem.
 *
 *  Updates an existing resource.
 *
 *  @param object The @c GTLRYouTube_PlaylistItem to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include. Note that this method will
 *    override the existing values for all of the mutable properties that are
 *    contained in any parts that the parameter value specifies. For example, a
 *    playlist item can specify a start time and end time, which identify the
 *    times portion of the video that should play when users watch the video in
 *    the playlist. If your request is updating a playlist item that sets these
 *    values, and the request's part parameter value includes the contentDetails
 *    part, the playlist item's start and end times will be updated to whatever
 *    value the request body specifies. If the request body does not specify
 *    values, the existing start and end times will be removed and replaced with
 *    the default settings.
 *
 *  @return GTLRYouTubeQuery_PlaylistItemsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_PlaylistItem *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Deletes a resource.
 *
 *  Method: youtube.playlists.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_PlaylistsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForPlaylistsDeleteWithidentifier:]

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a resource.
 *
 *  @param identifier NSString
 *
 *  @return GTLRYouTubeQuery_PlaylistsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Inserts a new resource into this collection.
 *
 *  Method: youtube.playlists.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_PlaylistsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForPlaylistsInsertWithObject:part:]

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response will include.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_Playlist.
 *
 *  Inserts a new resource into this collection.
 *
 *  @param object The @c GTLRYouTube_Playlist to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *
 *  @return GTLRYouTubeQuery_PlaylistsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Playlist *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.playlists.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_PlaylistsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForPlaylistsListWithpart:]

/** Return the playlists owned by the specified channel ID. */
@property(nonatomic, copy, nullable) NSString *channelId;

/** Returen content in specified language */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  Return the playlists with the given IDs for Stubby or Apiary.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identifier;

/**
 *  The *maxResults* parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** Return the playlists owned by the authenticated user. */
@property(nonatomic, assign) BOOL mine;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The *pageToken* parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The *part* parameter specifies a comma-separated list of one or more
 *  playlist resource properties that the API response will include. If the
 *  parameter identifies a property that contains child properties, the child
 *  properties will be included in the response. For example, in a playlist
 *  resource, the snippet property contains properties like author, title,
 *  description, tags, and timeCreated. As such, if you set *part=snippet*, the
 *  API response will contain all of those properties.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_PlaylistListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more playlist resource properties that the API response will include. If
 *    the parameter identifies a property that contains child properties, the
 *    child properties will be included in the response. For example, in a
 *    playlist resource, the snippet property contains properties like author,
 *    title, description, tags, and timeCreated. As such, if you set
 *    *part=snippet*, the API response will contain all of those properties.
 *
 *  @return GTLRYouTubeQuery_PlaylistsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Updates an existing resource.
 *
 *  Method: youtube.playlists.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_PlaylistsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForPlaylistsUpdateWithObject:part:]

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response will include. Note that this method will override the
 *  existing values for mutable properties that are contained in any parts that
 *  the request body specifies. For example, a playlist's description is
 *  contained in the snippet part, which must be included in the request body.
 *  If the request does not specify a value for the snippet.description
 *  property, the playlist's existing description will be deleted.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_Playlist.
 *
 *  Updates an existing resource.
 *
 *  @param object The @c GTLRYouTube_Playlist to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include. Note that this method will
 *    override the existing values for mutable properties that are contained in
 *    any parts that the request body specifies. For example, a playlist's
 *    description is contained in the snippet part, which must be included in
 *    the request body. If the request does not specify a value for the
 *    snippet.description property, the playlist's existing description will be
 *    deleted.
 *
 *  @return GTLRYouTubeQuery_PlaylistsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Playlist *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of search resources
 *
 *  Method: youtube.search.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_SearchList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForSearchListWithpart:]

/** Filter on resources belonging to this channelId. */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  Add a filter on the channel search.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeChannelTypeChannelTypeUnspecified Value
 *        "channelTypeUnspecified"
 *    @arg @c kGTLRYouTubeChannelTypeAny Return all channels. (Value: "any")
 *    @arg @c kGTLRYouTubeChannelTypeShow Only retrieve shows. (Value: "show")
 */
@property(nonatomic, copy, nullable) NSString *channelType;

/**
 *  Filter on the livestream status of the videos.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeEventTypeNone Value "none"
 *    @arg @c kGTLRYouTubeEventTypeUpcoming The live broadcast is upcoming.
 *        (Value: "upcoming")
 *    @arg @c kGTLRYouTubeEventTypeLive The live broadcast is active. (Value:
 *        "live")
 *    @arg @c kGTLRYouTubeEventTypeCompleted The live broadcast has been
 *        completed. (Value: "completed")
 */
@property(nonatomic, copy, nullable) NSString *eventType;

/** Search owned by a content owner. */
@property(nonatomic, assign) BOOL forContentOwner;

/**
 *  Restrict the search to only retrieve videos uploaded using the project id of
 *  the authenticated user.
 */
@property(nonatomic, assign) BOOL forDeveloper;

/** Search for the private videos of the authenticated user. */
@property(nonatomic, assign) BOOL forMine;

/** Filter on location of the video */
@property(nonatomic, copy, nullable) NSString *location;

/** Filter on distance from the location (specified above). */
@property(nonatomic, copy, nullable) NSString *locationRadius;

/**
 *  The *maxResults* parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Sort order of the results.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeOrderSearchSortUnspecified Value
 *        "searchSortUnspecified"
 *    @arg @c kGTLRYouTubeOrderDate Resources are sorted in reverse
 *        chronological order based on the date they were created. (Value:
 *        "date")
 *    @arg @c kGTLRYouTubeOrderRating Resources are sorted from highest to
 *        lowest rating. (Value: "rating")
 *    @arg @c kGTLRYouTubeOrderViewCount Resources are sorted from highest to
 *        lowest number of views. (Value: "viewCount")
 *    @arg @c kGTLRYouTubeOrderRelevance Resources are sorted based on their
 *        relevance to the search query. This is the default value for this
 *        parameter. (Value: "relevance")
 *    @arg @c kGTLRYouTubeOrderTitle Resources are sorted alphabetically by
 *        title. (Value: "title")
 *    @arg @c kGTLRYouTubeOrderVideoCount Channels are sorted in descending
 *        order of their number of uploaded videos. (Value: "videoCount")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRYouTubeOrderRelevance.
 */
@property(nonatomic, copy, nullable) NSString *order;

/**
 *  The *pageToken* parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The *part* parameter specifies a comma-separated list of one or more search
 *  resource properties that the API response will include. Set the parameter
 *  value to snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/** Filter on resources published after this date. */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedAfter;

/** Filter on resources published before this date. */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedBefore;

/** Textual search terms to match. */
@property(nonatomic, copy, nullable) NSString *q;

/** Display the content as seen by viewers in this country. */
@property(nonatomic, copy, nullable) NSString *regionCode;

/** Search related to a resource. */
@property(nonatomic, copy, nullable) NSString *relatedToVideoId;

/** Return results relevant to this language. */
@property(nonatomic, copy, nullable) NSString *relevanceLanguage;

/**
 *  Indicates whether the search results should include restricted content as
 *  well as standard content.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeSafeSearchSafeSearchSettingUnspecified Value
 *        "safeSearchSettingUnspecified"
 *    @arg @c kGTLRYouTubeSafeSearchNone YouTube will not filter the search
 *        result set. (Value: "none")
 *    @arg @c kGTLRYouTubeSafeSearchModerate YouTube will filter some content
 *        from search results and, at the least, will filter content that is
 *        restricted in your locale. Based on their content, search results
 *        could be removed from search results or demoted in search results.
 *        This is the default parameter value. (Value: "moderate")
 *    @arg @c kGTLRYouTubeSafeSearchStrict YouTube will try to exclude all
 *        restricted content from the search result set. Based on their content,
 *        search results could be removed from search results or demoted in
 *        search results. (Value: "strict")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRYouTubeSafeSearchModerate.
 */
@property(nonatomic, copy, nullable) NSString *safeSearch;

/** Restrict results to a particular topic. */
@property(nonatomic, copy, nullable) NSString *topicId;

/**
 *  Restrict results to a particular set of resource types from One Platform.
 *
 *  @note If not set, the documented server-side default will be
 *        video,channel,playlist.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *type;

/**
 *  Filter on the presence of captions on the videos.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeVideoCaptionVideoCaptionUnspecified Value
 *        "videoCaptionUnspecified"
 *    @arg @c kGTLRYouTubeVideoCaptionAny Do not filter results based on caption
 *        availability. (Value: "any")
 *    @arg @c kGTLRYouTubeVideoCaptionClosedCaption Only include videos that
 *        have captions. (Value: "closedCaption")
 *    @arg @c kGTLRYouTubeVideoCaptionNone Only include videos that do not have
 *        captions. (Value: "none")
 */
@property(nonatomic, copy, nullable) NSString *videoCaption;

/** Filter on videos in a specific category. */
@property(nonatomic, copy, nullable) NSString *videoCategoryId;

/**
 *  Filter on the definition of the videos.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeVideoDefinitionAny Return all videos, regardless of
 *        their resolution. (Value: "any")
 *    @arg @c kGTLRYouTubeVideoDefinitionStandard Only retrieve videos in
 *        standard definition. (Value: "standard")
 *    @arg @c kGTLRYouTubeVideoDefinitionHigh Only retrieve HD videos. (Value:
 *        "high")
 */
@property(nonatomic, copy, nullable) NSString *videoDefinition;

/**
 *  Filter on 3d videos.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeVideoDimensionAny Value "any"
 *    @arg @c kGTLRYouTubeVideoDimensionX2d Restrict search results to exclude
 *        3D videos. (Value: "2d")
 *    @arg @c kGTLRYouTubeVideoDimensionX3d Restrict search results to only
 *        include 3D videos. (Value: "3d")
 */
@property(nonatomic, copy, nullable) NSString *videoDimension;

/**
 *  Filter on the duration of the videos.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeVideoDurationVideoDurationUnspecified Value
 *        "videoDurationUnspecified"
 *    @arg @c kGTLRYouTubeVideoDurationAny Do not filter video search results
 *        based on their duration. This is the default value. (Value: "any")
 *    @arg @c kGTLRYouTubeVideoDurationShort Only include videos that are less
 *        than four minutes long. (Value: "short")
 *    @arg @c kGTLRYouTubeVideoDurationMedium Only include videos that are
 *        between four and 20 minutes long (inclusive). (Value: "medium")
 *    @arg @c kGTLRYouTubeVideoDurationLong Only include videos longer than 20
 *        minutes. (Value: "long")
 */
@property(nonatomic, copy, nullable) NSString *videoDuration;

/**
 *  Filter on embeddable videos.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeVideoEmbeddableVideoEmbeddableUnspecified Value
 *        "videoEmbeddableUnspecified"
 *    @arg @c kGTLRYouTubeVideoEmbeddableAny Return all videos, embeddable or
 *        not. (Value: "any")
 *    @arg @c kGTLRYouTubeVideoEmbeddableTrue Only retrieve embeddable videos.
 *        (Value: "true")
 */
@property(nonatomic, copy, nullable) NSString *videoEmbeddable;

/**
 *  Filter on the license of the videos.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeVideoLicenseAny Return all videos, regardless of which
 *        license they have, that match the query parameters. (Value: "any")
 *    @arg @c kGTLRYouTubeVideoLicenseYoutube Only return videos that have the
 *        standard YouTube license. (Value: "youtube")
 *    @arg @c kGTLRYouTubeVideoLicenseCreativeCommon Only return videos that
 *        have a Creative Commons license. Users can reuse videos with this
 *        license in other videos that they create. Learn more. (Value:
 *        "creativeCommon")
 */
@property(nonatomic, copy, nullable) NSString *videoLicense;

/**
 *  Filter on syndicated videos.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeVideoSyndicatedVideoSyndicatedUnspecified Value
 *        "videoSyndicatedUnspecified"
 *    @arg @c kGTLRYouTubeVideoSyndicatedAny Return all videos, syndicated or
 *        not. (Value: "any")
 *    @arg @c kGTLRYouTubeVideoSyndicatedTrue Only retrieve syndicated videos.
 *        (Value: "true")
 */
@property(nonatomic, copy, nullable) NSString *videoSyndicated;

/**
 *  Filter on videos of a specific type.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeVideoTypeVideoTypeUnspecified Value
 *        "videoTypeUnspecified"
 *    @arg @c kGTLRYouTubeVideoTypeAny Return all videos. (Value: "any")
 *    @arg @c kGTLRYouTubeVideoTypeMovie Only retrieve movies. (Value: "movie")
 *    @arg @c kGTLRYouTubeVideoTypeEpisode Only retrieve episodes of shows.
 *        (Value: "episode")
 */
@property(nonatomic, copy, nullable) NSString *videoType;

/**
 *  Fetches a @c GTLRYouTube_SearchListResponse.
 *
 *  Retrieves a list of search resources
 *
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more search resource properties that the API response will include. Set
 *    the parameter value to snippet.
 *
 *  @return GTLRYouTubeQuery_SearchList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of sponsors that match the request criteria for a channel.
 *
 *  Method: youtube.sponsors.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_SponsorsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForSponsorsListWithpart:]

/**
 *  Parameter that specifies which channel sponsors to return.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeFilterSponsorFilterUnknown Value
 *        "sponsorFilterUnknown"
 *    @arg @c kGTLRYouTubeFilterNewest Return the most recent sponsors, from
 *        newest to oldest. (Value: "newest")
 *    @arg @c kGTLRYouTubeFilterAll Return all sponsors, from newest to oldest.
 *        (Value: "all")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRYouTubeFilterNewest.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The *maxResults* parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The *pageToken* parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The *part* parameter specifies the sponsor resource parts that the API
 *  response will include. Supported values are id and snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_SponsorListResponse.
 *
 *  Retrieves a list of sponsors that match the request criteria for a channel.
 *
 *  @param part The *part* parameter specifies the sponsor resource parts that
 *    the API response will include. Supported values are id and snippet.
 *
 *  @return GTLRYouTubeQuery_SponsorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Deletes a resource.
 *
 *  Method: youtube.subscriptions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_SubscriptionsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForSubscriptionsDeleteWithidentifier:]

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a resource.
 *
 *  @param identifier NSString
 *
 *  @return GTLRYouTubeQuery_SubscriptionsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Inserts a new resource into this collection.
 *
 *  Method: youtube.subscriptions.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_SubscriptionsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForSubscriptionsInsertWithObject:part:]

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response will include.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_Subscription.
 *
 *  Inserts a new resource into this collection.
 *
 *  @param object The @c GTLRYouTube_Subscription to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *
 *  @return GTLRYouTubeQuery_SubscriptionsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Subscription *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.subscriptions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_SubscriptionsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForSubscriptionsListWithpart:]

/** Return the subscriptions of the given channel owner. */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  Return the subscriptions to the subset of these channels that the
 *  authenticated user is subscribed to.
 */
@property(nonatomic, copy, nullable) NSString *forChannelId;

/**
 *  Return the subscriptions with the given IDs for Stubby or Apiary.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identifier;

/**
 *  The *maxResults* parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** Flag for returning the subscriptions of the authenticated user. */
@property(nonatomic, assign) BOOL mine;

@property(nonatomic, assign) BOOL myRecentSubscribers;

/** Return the subscribers of the given channel owner. */
@property(nonatomic, assign) BOOL mySubscribers;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The order of the returned subscriptions
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeOrderSubscriptionOrderUnspecified Value
 *        "subscriptionOrderUnspecified"
 *    @arg @c kGTLRYouTubeOrderRelevance Sort by relevance. (Value: "relevance")
 *    @arg @c kGTLRYouTubeOrderUnread Sort by order of activity. (Value:
 *        "unread")
 *    @arg @c kGTLRYouTubeOrderAlphabetical Sort alphabetically. (Value:
 *        "alphabetical")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRYouTubeOrderRelevance.
 */
@property(nonatomic, copy, nullable) NSString *order;

/**
 *  The *pageToken* parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The *part* parameter specifies a comma-separated list of one or more
 *  subscription resource properties that the API response will include. If the
 *  parameter identifies a property that contains child properties, the child
 *  properties will be included in the response. For example, in a subscription
 *  resource, the snippet property contains other properties, such as a display
 *  title for the subscription. If you set *part=snippet*, the API response will
 *  also contain all of those nested properties.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_SubscriptionListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more subscription resource properties that the API response will include.
 *    If the parameter identifies a property that contains child properties, the
 *    child properties will be included in the response. For example, in a
 *    subscription resource, the snippet property contains other properties,
 *    such as a display title for the subscription. If you set *part=snippet*,
 *    the API response will also contain all of those nested properties.
 *
 *  @return GTLRYouTubeQuery_SubscriptionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.superChatEvents.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_SuperChatEventsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForSuperChatEventsListWithpart:]

/** Return rendered funding amounts in specified language. */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  The *maxResults* parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The *pageToken* parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The *part* parameter specifies the superChatEvent resource parts that the
 *  API response will include. Supported values are id and snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_SuperChatEventListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param part The *part* parameter specifies the superChatEvent resource parts
 *    that the API response will include. Supported values are id and snippet.
 *
 *  @return GTLRYouTubeQuery_SuperChatEventsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  POST method.
 *
 *  Method: youtube.tests.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_TestsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForTestsInsertWithObject:part:]

@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_TestItem.
 *
 *  POST method.
 *
 *  @param object The @c GTLRYouTube_TestItem to include in the query.
 *  @param part NSArray<NSString *>
 *
 *  @return GTLRYouTubeQuery_TestsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_TestItem *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Deletes a resource.
 *
 *  Method: youtube.thirdPartyLinks.delete
 */
@interface GTLRYouTubeQuery_ThirdPartyLinksDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForThirdPartyLinksDeleteWithlinkingToken:type:]

/** Delete the partner links with the given linking token. */
@property(nonatomic, copy, nullable) NSString *linkingToken;

/** Do not use. Required for compatibility. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Type of the link to be deleted.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeTypeLinkUnspecified Value "linkUnspecified"
 *    @arg @c kGTLRYouTubeTypeChannelToStoreLink A link that is connecting (or
 *        about to connect) a channel with a store on a merchandising platform
 *        in order to enable retail commerce capabilities for that channel on
 *        YouTube. (Value: "channelToStoreLink")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a resource.
 *
 *  @param linkingToken Delete the partner links with the given linking token.
 *  @param type Type of the link to be deleted.
 *
 *  Likely values for @c type:
 *    @arg @c kGTLRYouTubeTypeLinkUnspecified Value "linkUnspecified"
 *    @arg @c kGTLRYouTubeTypeChannelToStoreLink A link that is connecting (or
 *        about to connect) a channel with a store on a merchandising platform
 *        in order to enable retail commerce capabilities for that channel on
 *        YouTube. (Value: "channelToStoreLink")
 *
 *  @return GTLRYouTubeQuery_ThirdPartyLinksDelete
 */
+ (instancetype)queryWithLinkingToken:(NSString *)linkingToken
                                 type:(NSString *)type;

@end

/**
 *  Inserts a new resource into this collection.
 *
 *  Method: youtube.thirdPartyLinks.insert
 */
@interface GTLRYouTubeQuery_ThirdPartyLinksInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForThirdPartyLinksInsertWithObject:part:]

/**
 *  The *part* parameter specifies the thirdPartyLink resource parts that the
 *  API request and response will include. Supported values are linkingToken,
 *  status, and snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_ThirdPartyLink.
 *
 *  Inserts a new resource into this collection.
 *
 *  @param object The @c GTLRYouTube_ThirdPartyLink to include in the query.
 *  @param part The *part* parameter specifies the thirdPartyLink resource parts
 *    that the API request and response will include. Supported values are
 *    linkingToken, status, and snippet.
 *
 *  @return GTLRYouTubeQuery_ThirdPartyLinksInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_ThirdPartyLink *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.thirdPartyLinks.list
 */
@interface GTLRYouTubeQuery_ThirdPartyLinksList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForThirdPartyLinksListWithpart:]

/** Get a third party link with the given linking token. */
@property(nonatomic, copy, nullable) NSString *linkingToken;

/**
 *  The *part* parameter specifies the thirdPartyLink resource parts that the
 *  API response will include. Supported values are linkingToken, status, and
 *  snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Get a third party link of the given type.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeTypeLinkUnspecified Value "linkUnspecified"
 *    @arg @c kGTLRYouTubeTypeChannelToStoreLink A link that is connecting (or
 *        about to connect) a channel with a store on a merchandising platform
 *        in order to enable retail commerce capabilities for that channel on
 *        YouTube. (Value: "channelToStoreLink")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRYouTube_ThirdPartyLink.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param part The *part* parameter specifies the thirdPartyLink resource parts
 *    that the API response will include. Supported values are linkingToken,
 *    status, and snippet.
 *
 *  @return GTLRYouTubeQuery_ThirdPartyLinksList
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Updates an existing resource.
 *
 *  Method: youtube.thirdPartyLinks.update
 */
@interface GTLRYouTubeQuery_ThirdPartyLinksUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForThirdPartyLinksUpdateWithObject:part:]

/**
 *  The *part* parameter specifies the thirdPartyLink resource parts that the
 *  API request and response will include. Supported values are linkingToken,
 *  status, and snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_ThirdPartyLink.
 *
 *  Updates an existing resource.
 *
 *  @param object The @c GTLRYouTube_ThirdPartyLink to include in the query.
 *  @param part The *part* parameter specifies the thirdPartyLink resource parts
 *    that the API request and response will include. Supported values are
 *    linkingToken, status, and snippet.
 *
 *  @return GTLRYouTubeQuery_ThirdPartyLinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_ThirdPartyLink *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  As this is not an insert in a strict sense (it supports uploading/setting of
 *  a thumbnail for multiple videos, which doesn't result in creation of a
 *  single resource), I use a custom verb here.
 *
 *  Method: youtube.thumbnails.set
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeUpload
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_ThumbnailsSet : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForThumbnailsSetWithvideoId:]

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/** Returns the Thumbnail with the given video IDs for Stubby or Apiary. */
@property(nonatomic, copy, nullable) NSString *videoId;

/**
 *  Fetches a @c GTLRYouTube_ThumbnailSetResponse.
 *
 *  As this is not an insert in a strict sense (it supports uploading/setting of
 *  a thumbnail for multiple videos, which doesn't result in creation of a
 *  single resource), I use a custom verb here.
 *
 *  @param videoId Returns the Thumbnail with the given video IDs for Stubby or
 *    Apiary.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    2097152. Accepted MIME types: image/jpeg, image/png,
 *    application/octet-stream
 *
 *  @return GTLRYouTubeQuery_ThumbnailsSet
 */
+ (instancetype)queryWithVideoId:(NSString *)videoId
                uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.videoAbuseReportReasons.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_VideoAbuseReportReasonsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideoAbuseReportReasonsListWithpart:]

/**
 *  hl
 *
 *  @note If not set, the documented server-side default will be en_US.
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  The *part* parameter specifies the videoCategory resource parts that the API
 *  response will include. Supported values are id and snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_VideoAbuseReportReasonListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param part The *part* parameter specifies the videoCategory resource parts
 *    that the API response will include. Supported values are id and snippet.
 *
 *  @return GTLRYouTubeQuery_VideoAbuseReportReasonsList
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.videoCategories.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_VideoCategoriesList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideoCategoriesListWithpart:]

/**
 *  hl
 *
 *  @note If not set, the documented server-side default will be en-US.
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  Returns the video categories with the given IDs for Stubby or Apiary.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identifier;

/**
 *  The *part* parameter specifies the videoCategory resource properties that
 *  the API response will include. Set the parameter value to snippet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  Fetches a @c GTLRYouTube_VideoCategoryListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param part The *part* parameter specifies the videoCategory resource
 *    properties that the API response will include. Set the parameter value to
 *    snippet.
 *
 *  @return GTLRYouTubeQuery_VideoCategoriesList
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Deletes a resource.
 *
 *  Method: youtube.videos.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_VideosDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideosDeleteWithidentifier:]

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a resource.
 *
 *  @param identifier NSString
 *
 *  @return GTLRYouTubeQuery_VideosDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Retrieves the ratings that the authorized user gave to a list of specified
 *  videos.
 *
 *  Method: youtube.videos.getRating
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_VideosGetRating : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideosGetRatingWithidentifier:]

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identifier;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Fetches a @c GTLRYouTube_VideoRatingListResponse.
 *
 *  Retrieves the ratings that the authorized user gave to a list of specified
 *  videos.
 *
 *  @param identifier NSArray<NSString *>
 *
 *  @return GTLRYouTubeQuery_VideosGetRating
 */
+ (instancetype)queryWithIdentifier:(NSArray<NSString *> *)identifier;

@end

/**
 *  Inserts a new resource into this collection.
 *
 *  Method: youtube.videos.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeUpload
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_VideosInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideosInsertWithObject:part:]

/** Should auto-levels be applied to the upload. */
@property(nonatomic, assign) BOOL autoLevels;

/**
 *  Notify the channel subscribers about the new video. As default, the
 *  notification is enabled.
 *
 *  @note If not set, the documented server-side default will be true.
 */
@property(nonatomic, assign) BOOL notifySubscribers;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. *Note:*
 *  This parameter is intended exclusively for YouTube content partners. The
 *  *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies. This parameter is intended for YouTube content partners
 *  that own and manage many different YouTube channels. It allows content
 *  owners to authenticate once and perform actions on behalf of the channel
 *  specified in the parameter value, without having to provide authentication
 *  credentials for each separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response will include. Note that not all parts contain
 *  properties that can be set when inserting or updating a video. For example,
 *  the statistics object encapsulates statistics that YouTube calculates for a
 *  video and does not contain values that you can set or modify. If the
 *  parameter value specifies a part that does not contain mutable values, that
 *  part will still be included in the API response.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/** Should stabilize be applied to the upload. */
@property(nonatomic, assign) BOOL stabilize;

/**
 *  Fetches a @c GTLRYouTube_Video.
 *
 *  Inserts a new resource into this collection.
 *
 *  @param object The @c GTLRYouTube_Video to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include. Note that not all parts
 *    contain properties that can be set when inserting or updating a video. For
 *    example, the statistics object encapsulates statistics that YouTube
 *    calculates for a video and does not contain values that you can set or
 *    modify. If the parameter value specifies a part that does not contain
 *    mutable values, that part will still be included in the API response.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    137438953472. Accepted MIME types: video/ *, application/octet-stream
 *
 *  @return GTLRYouTubeQuery_VideosInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Video *)object
                           part:(NSArray<NSString *> *)part
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Retrieves a list of resources, possibly filtered.
 *
 *  Method: youtube.videos.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_VideosList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideosListWithpart:]

/**
 *  Return the videos that are in the specified chart.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeChartChartUnspecified Value "chartUnspecified"
 *    @arg @c kGTLRYouTubeChartMostPopular Return the most popular videos for
 *        the specified content region and video category. (Value:
 *        "mostPopular")
 */
@property(nonatomic, copy, nullable) NSString *chart;

/**
 *  Stands for "host language". Specifies the localization language of the
 *  metadata to be filled into snippet.localized. The field is filled with the
 *  default metadata if there is no localization in the specified language. The
 *  parameter value must be a language code included in the list returned by the
 *  i18nLanguages.list method (e.g. en_US, es_MX).
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  Return videos with the given ids.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identifier;

@property(nonatomic, copy, nullable) NSString *locale;

@property(nonatomic, assign) NSInteger maxHeight;

/**
 *  The *maxResults* parameter specifies the maximum number of items that should
 *  be returned in the result set. *Note:* This parameter is supported for use
 *  in conjunction with the myRating and chart parameters, but it is not
 *  supported for use in conjunction with the id parameter.
 *
 *  @note If not set, the documented server-side default will be 5.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** Return the player with maximum height specified in */
@property(nonatomic, assign) NSInteger maxWidth;

/**
 *  Return videos liked/disliked by the authenticated user. Does not support
 *  RateType.RATED_TYPE_NONE.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeMyRatingNone Value "none"
 *    @arg @c kGTLRYouTubeMyRatingLike The entity is liked. (Value: "like")
 *    @arg @c kGTLRYouTubeMyRatingDislike The entity is disliked. (Value:
 *        "dislike")
 */
@property(nonatomic, copy, nullable) NSString *myRating;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The *pageToken* parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved. *Note:* This
 *  parameter is supported for use in conjunction with the myRating and chart
 *  parameters, but it is not supported for use in conjunction with the id
 *  parameter.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The *part* parameter specifies a comma-separated list of one or more video
 *  resource properties that the API response will include. If the parameter
 *  identifies a property that contains child properties, the child properties
 *  will be included in the response. For example, in a video resource, the
 *  snippet property contains the channelId, title, description, tags, and
 *  categoryId properties. As such, if you set *part=snippet*, the API response
 *  will contain all of those properties.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/** Use a chart that is specific to the specified region */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  Use chart that is specific to the specified video category
 *
 *  @note If not set, the documented server-side default will be 0.
 */
@property(nonatomic, copy, nullable) NSString *videoCategoryId;

/**
 *  Fetches a @c GTLRYouTube_VideoListResponse.
 *
 *  Retrieves a list of resources, possibly filtered.
 *
 *  @param part The *part* parameter specifies a comma-separated list of one or
 *    more video resource properties that the API response will include. If the
 *    parameter identifies a property that contains child properties, the child
 *    properties will be included in the response. For example, in a video
 *    resource, the snippet property contains the channelId, title, description,
 *    tags, and categoryId properties. As such, if you set *part=snippet*, the
 *    API response will contain all of those properties.
 *
 *  @return GTLRYouTubeQuery_VideosList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSArray<NSString *> *)part;

@end

/**
 *  Adds a like or dislike rating to a video or removes a rating from a video.
 *
 *  Method: youtube.videos.rate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_VideosRate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideosRateWithidentifier:rating:]

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  rating
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeRatingNone Value "none"
 *    @arg @c kGTLRYouTubeRatingLike The entity is liked. (Value: "like")
 *    @arg @c kGTLRYouTubeRatingDislike The entity is disliked. (Value:
 *        "dislike")
 */
@property(nonatomic, copy, nullable) NSString *rating;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Adds a like or dislike rating to a video or removes a rating from a video.
 *
 *  @param identifier NSString
 *  @param rating NSString
 *
 *  Likely values for @c rating:
 *    @arg @c kGTLRYouTubeRatingNone Value "none"
 *    @arg @c kGTLRYouTubeRatingLike The entity is liked. (Value: "like")
 *    @arg @c kGTLRYouTubeRatingDislike The entity is disliked. (Value:
 *        "dislike")
 *
 *  @return GTLRYouTubeQuery_VideosRate
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier
                             rating:(NSString *)rating;

@end

/**
 *  Report abuse for a video.
 *
 *  Method: youtube.videos.reportAbuse
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_VideosReportAbuse : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideosReportAbuseWithObject:]

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Report abuse for a video.
 *
 *  @param object The @c GTLRYouTube_VideoAbuseReport to include in the query.
 *
 *  @return GTLRYouTubeQuery_VideosReportAbuse
 */
+ (instancetype)queryWithObject:(GTLRYouTube_VideoAbuseReport *)object;

@end

/**
 *  Updates an existing resource.
 *
 *  Method: youtube.videos.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_VideosUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideosUpdateWithObject:part:]

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The *part* parameter serves two purposes in this operation. It identifies
 *  the properties that the write operation will set as well as the properties
 *  that the API response will include. Note that this method will override the
 *  existing values for all of the mutable properties that are contained in any
 *  parts that the parameter value specifies. For example, a video's privacy
 *  setting is contained in the status part. As such, if your request is
 *  updating a private video, and the request's part parameter value includes
 *  the status part, the video's privacy setting will be updated to whatever
 *  value the request body specifies. If the request body does not specify a
 *  value, the existing privacy setting will be removed and the video will
 *  revert to the default privacy setting. In addition, not all parts contain
 *  properties that can be set when inserting or updating a video. For example,
 *  the statistics object encapsulates statistics that YouTube calculates for a
 *  video and does not contain values that you can set or modify. If the
 *  parameter value specifies a part that does not contain mutable values, that
 *  part will still be included in the API response.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *part;

/**
 *  Fetches a @c GTLRYouTube_Video.
 *
 *  Updates an existing resource.
 *
 *  @param object The @c GTLRYouTube_Video to include in the query.
 *  @param part The *part* parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include. Note that this method will
 *    override the existing values for all of the mutable properties that are
 *    contained in any parts that the parameter value specifies. For example, a
 *    video's privacy setting is contained in the status part. As such, if your
 *    request is updating a private video, and the request's part parameter
 *    value includes the status part, the video's privacy setting will be
 *    updated to whatever value the request body specifies. If the request body
 *    does not specify a value, the existing privacy setting will be removed and
 *    the video will revert to the default privacy setting. In addition, not all
 *    parts contain properties that can be set when inserting or updating a
 *    video. For example, the statistics object encapsulates statistics that
 *    YouTube calculates for a video and does not contain values that you can
 *    set or modify. If the parameter value specifies a part that does not
 *    contain mutable values, that part will still be included in the API
 *    response.
 *
 *  @return GTLRYouTubeQuery_VideosUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Video *)object
                           part:(NSArray<NSString *> *)part;

@end

/**
 *  Allows upload of watermark image and setting it for a channel.
 *
 *  Method: youtube.watermarks.set
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeUpload
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_WatermarksSet : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForWatermarksSetWithObject:channelId:]

@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Allows upload of watermark image and setting it for a channel.
 *
 *  @param object The @c GTLRYouTube_InvideoBranding to include in the query.
 *  @param channelId NSString
 *  @param uploadParameters The media to include in this query. Maximum size
 *    10485760. Accepted MIME types: image/jpeg, image/png,
 *    application/octet-stream
 *
 *  @return GTLRYouTubeQuery_WatermarksSet
 */
+ (instancetype)queryWithObject:(GTLRYouTube_InvideoBranding *)object
                      channelId:(NSString *)channelId
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Allows removal of channel watermark.
 *
 *  Method: youtube.watermarks.unset
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_WatermarksUnset : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForWatermarksUnsetWithchannelId:]

@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  *Note:* This parameter is intended exclusively for YouTube content partners.
 *  The *onBehalfOfContentOwner* parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Allows removal of channel watermark.
 *
 *  @param channelId NSString
 *
 *  @return GTLRYouTubeQuery_WatermarksUnset
 */
+ (instancetype)queryWithChannelId:(NSString *)channelId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
