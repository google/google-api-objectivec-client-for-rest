// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   YouTube Data API (youtube/v3)
// Description:
//   Supports core YouTube features, such as uploading videos, creating and
//   managing playlists, searching for content, and much more.
// Documentation:
//   https://developers.google.com/youtube/v3

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRYouTube_Activity;
@class GTLRYouTube_Caption;
@class GTLRYouTube_Channel;
@class GTLRYouTube_ChannelBannerResource;
@class GTLRYouTube_ChannelSection;
@class GTLRYouTube_Comment;
@class GTLRYouTube_CommentThread;
@class GTLRYouTube_InvideoBranding;
@class GTLRYouTube_LiveBroadcast;
@class GTLRYouTube_LiveChatBan;
@class GTLRYouTube_LiveChatMessage;
@class GTLRYouTube_LiveChatModerator;
@class GTLRYouTube_LiveStream;
@class GTLRYouTube_Playlist;
@class GTLRYouTube_PlaylistItem;
@class GTLRYouTube_Subscription;
@class GTLRYouTube_Video;
@class GTLRYouTube_VideoAbuseReport;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// broadcastStatus

/**
 *  Return current live broadcasts.
 *
 *  Value: "active"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeBroadcastStatusActive;
/**
 *  Return all broadcasts.
 *
 *  Value: "all"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeBroadcastStatusAll;
/**
 *  The broadcast is over. YouTube stops transmitting video.
 *
 *  Value: "complete"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeBroadcastStatusComplete;
/**
 *  Return broadcasts that have already ended.
 *
 *  Value: "completed"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeBroadcastStatusCompleted;
/**
 *  The broadcast is visible to its audience. YouTube transmits video to the
 *  broadcast's monitor stream and its broadcast stream.
 *
 *  Value: "live"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeBroadcastStatusLive;
/**
 *  Start testing the broadcast. YouTube transmits video to the broadcast's
 *  monitor stream. Note that you can only transition a broadcast to the testing
 *  state if its contentDetails.monitorStream.enableMonitorStream property is
 *  set to true.
 *
 *  Value: "testing"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeBroadcastStatusTesting;
/**
 *  Return broadcasts that have not yet started.
 *
 *  Value: "upcoming"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeBroadcastStatusUpcoming;

// ----------------------------------------------------------------------------
// broadcastType

/**
 *  Return all broadcasts.
 *
 *  Value: "all"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeBroadcastTypeAll;
/**
 *  Return only scheduled event broadcasts.
 *
 *  Value: "event"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeBroadcastTypeEvent;
/**
 *  Return only persistent broadcasts.
 *
 *  Value: "persistent"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeBroadcastTypePersistent;

// ----------------------------------------------------------------------------
// channelType

/**
 *  Return all channels.
 *
 *  Value: "any"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeChannelTypeAny;
/**
 *  Only retrieve shows.
 *
 *  Value: "show"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeChannelTypeShow;

// ----------------------------------------------------------------------------
// chart

/**
 *  Return the most popular videos for the specified content region and video
 *  category.
 *
 *  Value: "mostPopular"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeChartMostPopular;

// ----------------------------------------------------------------------------
// eventType

/**
 *  Only include completed broadcasts.
 *
 *  Value: "completed"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeEventTypeCompleted;
/**
 *  Only include active broadcasts.
 *
 *  Value: "live"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeEventTypeLive;
/**
 *  Only include upcoming broadcasts.
 *
 *  Value: "upcoming"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeEventTypeUpcoming;

// ----------------------------------------------------------------------------
// filter

/**
 *  Return all sponsors, from newest to oldest.
 *
 *  Value: "all"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeFilterAll;
/**
 *  Return the most recent sponsors, from newest to oldest.
 *
 *  Value: "newest"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeFilterNewest;

// ----------------------------------------------------------------------------
// moderationStatus

/** Value: "heldForReview" */
GTLR_EXTERN NSString * const kGTLRYouTubeModerationStatusHeldForReview;
/**
 *  Retrieve comment threads classified as likely to be spam. A comment thread
 *  can be included in the response if the top-level comment or at least one of
 *  the replies to that comment is considered likely to be spam.
 *
 *  Value: "likelySpam"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeModerationStatusLikelySpam;
/** Value: "published" */
GTLR_EXTERN NSString * const kGTLRYouTubeModerationStatusPublished;
/**
 *  Rejects a comment as being unfit for display. This action also effectively
 *  hides all replies to the rejected comment.
 *  Note: The API does not currently provide a way to list or otherwise discover
 *  rejected comments. However, you can change the moderation status of a
 *  rejected comment if you still know its ID. If you were to change the
 *  moderation status of a rejected comment, the comment replies would
 *  subsequently be discoverable again as well.
 *
 *  Value: "rejected"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeModerationStatusRejected;

// ----------------------------------------------------------------------------
// myRating

/**
 *  Returns only videos disliked by the authenticated user.
 *
 *  Value: "dislike"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeMyRatingDislike;
/**
 *  Returns only video liked by the authenticated user.
 *
 *  Value: "like"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeMyRatingLike;

// ----------------------------------------------------------------------------
// order

/**
 *  Sort alphabetically.
 *
 *  Value: "alphabetical"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeOrderAlphabetical;
/**
 *  Resources are sorted in reverse chronological order based on the date they
 *  were created.
 *
 *  Value: "date"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeOrderDate;
/**
 *  Resources are sorted from highest to lowest rating.
 *
 *  Value: "rating"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeOrderRating;
/** Value: "relevance" */
GTLR_EXTERN NSString * const kGTLRYouTubeOrderRelevance;
/**
 *  Order by time.
 *
 *  Value: "time"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeOrderTime;
/**
 *  Resources are sorted alphabetically by title.
 *
 *  Value: "title"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeOrderTitle;
/**
 *  Sort by order of activity.
 *
 *  Value: "unread"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeOrderUnread;
/**
 *  Channels are sorted in descending order of their number of uploaded videos.
 *
 *  Value: "videoCount"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeOrderVideoCount;
/**
 *  Resources are sorted from highest to lowest number of views.
 *
 *  Value: "viewCount"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeOrderViewCount;

// ----------------------------------------------------------------------------
// rating

/**
 *  Records that the authenticated user disliked the video.
 *
 *  Value: "dislike"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeRatingDislike;
/**
 *  Records that the authenticated user liked the video.
 *
 *  Value: "like"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeRatingLike;
/**
 *  Removes any rating that the authenticated user had previously set for the
 *  video.
 *
 *  Value: "none"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeRatingNone;

// ----------------------------------------------------------------------------
// safeSearch

/**
 *  YouTube will filter some content from search results and, at the least, will
 *  filter content that is restricted in your locale. Based on their content,
 *  search results could be removed from search results or demoted in search
 *  results. This is the default parameter value.
 *
 *  Value: "moderate"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeSafeSearchModerate;
/**
 *  YouTube will not filter the search result set.
 *
 *  Value: "none"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeSafeSearchNone;
/**
 *  YouTube will try to exclude all restricted content from the search result
 *  set. Based on their content, search results could be removed from search
 *  results or demoted in search results.
 *
 *  Value: "strict"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeSafeSearchStrict;

// ----------------------------------------------------------------------------
// textFormat

/**
 *  Returns the comments in HTML format. This is the default value.
 *
 *  Value: "html"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeTextFormatHtml;
/**
 *  Returns the comments in plain text format.
 *
 *  Value: "plainText"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeTextFormatPlainText;

// ----------------------------------------------------------------------------
// tfmt

/**
 *  SubViewer subtitle.
 *
 *  Value: "sbv"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeTfmtSbv;
/**
 *  Scenarist Closed Caption format.
 *
 *  Value: "scc"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeTfmtScc;
/**
 *  SubRip subtitle.
 *
 *  Value: "srt"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeTfmtSrt;
/**
 *  Timed Text Markup Language caption.
 *
 *  Value: "ttml"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeTfmtTtml;
/**
 *  Web Video Text Tracks caption.
 *
 *  Value: "vtt"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeTfmtVtt;

// ----------------------------------------------------------------------------
// videoCaption

/**
 *  Do not filter results based on caption availability.
 *
 *  Value: "any"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoCaptionAny;
/**
 *  Only include videos that have captions.
 *
 *  Value: "closedCaption"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoCaptionClosedCaption;
/**
 *  Only include videos that do not have captions.
 *
 *  Value: "none"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoCaptionNone;

// ----------------------------------------------------------------------------
// videoDefinition

/**
 *  Return all videos, regardless of their resolution.
 *
 *  Value: "any"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoDefinitionAny;
/**
 *  Only retrieve HD videos.
 *
 *  Value: "high"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoDefinitionHigh;
/**
 *  Only retrieve videos in standard definition.
 *
 *  Value: "standard"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoDefinitionStandard;

// ----------------------------------------------------------------------------
// videoDimension

/**
 *  Include both 3D and non-3D videos in returned results. This is the default
 *  value.
 *
 *  Value: "any"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoDimensionAny;
/**
 *  Restrict search results to exclude 3D videos.
 *
 *  Value: "2d"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoDimensionX2d;
/**
 *  Restrict search results to only include 3D videos.
 *
 *  Value: "3d"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoDimensionX3d;

// ----------------------------------------------------------------------------
// videoDuration

/**
 *  Do not filter video search results based on their duration. This is the
 *  default value.
 *
 *  Value: "any"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoDurationAny;
/**
 *  Only include videos longer than 20 minutes.
 *
 *  Value: "long"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoDurationLong;
/**
 *  Only include videos that are between four and 20 minutes long (inclusive).
 *
 *  Value: "medium"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoDurationMedium;
/**
 *  Only include videos that are less than four minutes long.
 *
 *  Value: "short"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoDurationShort;

// ----------------------------------------------------------------------------
// videoEmbeddable

/**
 *  Return all videos, embeddable or not.
 *
 *  Value: "any"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoEmbeddableAny;
/**
 *  Only retrieve embeddable videos.
 *
 *  Value: "true"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoEmbeddableTrue;

// ----------------------------------------------------------------------------
// videoLicense

/**
 *  Return all videos, regardless of which license they have, that match the
 *  query parameters.
 *
 *  Value: "any"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoLicenseAny;
/**
 *  Only return videos that have a Creative Commons license. Users can reuse
 *  videos with this license in other videos that they create. Learn more.
 *
 *  Value: "creativeCommon"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoLicenseCreativeCommon;
/**
 *  Only return videos that have the standard YouTube license.
 *
 *  Value: "youtube"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoLicenseYoutube;

// ----------------------------------------------------------------------------
// videoSyndicated

/**
 *  Return all videos, syndicated or not.
 *
 *  Value: "any"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoSyndicatedAny;
/**
 *  Only retrieve syndicated videos.
 *
 *  Value: "true"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoSyndicatedTrue;

// ----------------------------------------------------------------------------
// videoType

/**
 *  Return all videos.
 *
 *  Value: "any"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoTypeAny;
/**
 *  Only retrieve episodes of shows.
 *
 *  Value: "episode"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoTypeEpisode;
/**
 *  Only retrieve movies.
 *
 *  Value: "movie"
 */
GTLR_EXTERN NSString * const kGTLRYouTubeVideoTypeMovie;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other YouTube query classes.
 */
@interface GTLRYouTubeQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Posts a bulletin for a specific channel. (The user submitting the request
 *  must be authorized to act on the channel's behalf.)
 *  Note: Even though an activity resource can contain information about actions
 *  like a user rating a video or marking a video as a favorite, you need to use
 *  other API methods to generate those activity resources. For example, you
 *  would use the API's videos.rate() method to rate a video and the
 *  playlistItems.insert() method to mark a video as a favorite.
 *
 *  Method: youtube.activities.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_ActivitiesInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForActivitiesInsertWithObject:part:]

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response will include.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_Activity.
 *
 *  Posts a bulletin for a specific channel. (The user submitting the request
 *  must be authorized to act on the channel's behalf.)
 *  Note: Even though an activity resource can contain information about actions
 *  like a user rating a video or marking a video as a favorite, you need to use
 *  other API methods to generate those activity resources. For example, you
 *  would use the API's videos.rate() method to rate a video and the
 *  playlistItems.insert() method to mark a video as a favorite.
 *
 *  @param object The @c GTLRYouTube_Activity to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *
 *  @return GTLRYouTubeQuery_ActivitiesInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Activity *)object
                           part:(NSString *)part;

@end

/**
 *  Returns a list of channel activity events that match the request criteria.
 *  For example, you can retrieve events associated with a particular channel,
 *  events associated with the user's subscriptions and Google+ friends, or the
 *  YouTube home page feed, which is customized for each user.
 *
 *  Method: youtube.activities.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_ActivitiesList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForActivitiesListWithpart:]

/**
 *  The channelId parameter specifies a unique YouTube channel ID. The API will
 *  then return a list of that channel's activities.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  Set this parameter's value to true to retrieve the activity feed that
 *  displays on the YouTube home page for the currently authenticated user.
 */
@property(nonatomic, assign) BOOL home;

/**
 *  The maxResults parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5 (from the
 *        range 0..50).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Set this parameter's value to true to retrieve a feed of the authenticated
 *  user's activities.
 */
@property(nonatomic, assign) BOOL mine;

/**
 *  The pageToken parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The part parameter specifies a comma-separated list of one or more activity
 *  resource properties that the API response will include.
 *  If the parameter identifies a property that contains child properties, the
 *  child properties will be included in the response. For example, in an
 *  activity resource, the snippet property contains other properties that
 *  identify the type of activity, a display title for the activity, and so
 *  forth. If you set part=snippet, the API response will also contain all of
 *  those nested properties.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  The publishedAfter parameter specifies the earliest date and time that an
 *  activity could have occurred for that activity to be included in the API
 *  response. If the parameter value specifies a day, but not a time, then any
 *  activities that occurred that day will be included in the result set. The
 *  value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedAfter;

/**
 *  The publishedBefore parameter specifies the date and time before which an
 *  activity must have occurred for that activity to be included in the API
 *  response. If the parameter value specifies a day, but not a time, then any
 *  activities that occurred that day will be excluded from the result set. The
 *  value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedBefore;

/**
 *  The regionCode parameter instructs the API to return results for the
 *  specified country. The parameter value is an ISO 3166-1 alpha-2 country
 *  code. YouTube uses this value when the authorized user's previous activity
 *  on YouTube does not provide enough information to generate the activity
 *  feed.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  Fetches a @c GTLRYouTube_ActivityListResponse.
 *
 *  Returns a list of channel activity events that match the request criteria.
 *  For example, you can retrieve events associated with a particular channel,
 *  events associated with the user's subscriptions and Google+ friends, or the
 *  YouTube home page feed, which is customized for each user.
 *
 *  @param part The part parameter specifies a comma-separated list of one or
 *    more activity resource properties that the API response will include.
 *    If the parameter identifies a property that contains child properties, the
 *    child properties will be included in the response. For example, in an
 *    activity resource, the snippet property contains other properties that
 *    identify the type of activity, a display title for the activity, and so
 *    forth. If you set part=snippet, the API response will also contain all of
 *    those nested properties.
 *
 *  @return GTLRYouTubeQuery_ActivitiesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Deletes a specified caption track.
 *
 *  Method: youtube.captions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_CaptionsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCaptionsDeleteWithidentifier:]

/**
 *  The id parameter identifies the caption track that is being deleted. The
 *  value is a caption track ID as identified by the id property in a caption
 *  resource.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  ID of the Google+ Page for the channel that the request is be on behalf of
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOf;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a specified caption track.
 *
 *  @param identifier The id parameter identifies the caption track that is
 *    being deleted. The value is a caption track ID as identified by the id
 *    property in a caption resource.
 *
 *  @return GTLRYouTubeQuery_CaptionsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Downloads a caption track. The caption track is returned in its original
 *  format unless the request specifies a value for the tfmt parameter and in
 *  its original language unless the request specifies a value for the tlang
 *  parameter.
 *
 *  Method: youtube.captions.download
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_CaptionsDownload : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCaptionsDownloadWithidentifier:]

/**
 *  The id parameter identifies the caption track that is being retrieved. The
 *  value is a caption track ID as identified by the id property in a caption
 *  resource.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  ID of the Google+ Page for the channel that the request is be on behalf of
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOf;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The tfmt parameter specifies that the caption track should be returned in a
 *  specific format. If the parameter is not included in the request, the track
 *  is returned in its original format.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeTfmtSbv SubViewer subtitle. (Value: "sbv")
 *    @arg @c kGTLRYouTubeTfmtScc Scenarist Closed Caption format. (Value:
 *        "scc")
 *    @arg @c kGTLRYouTubeTfmtSrt SubRip subtitle. (Value: "srt")
 *    @arg @c kGTLRYouTubeTfmtTtml Timed Text Markup Language caption. (Value:
 *        "ttml")
 *    @arg @c kGTLRYouTubeTfmtVtt Web Video Text Tracks caption. (Value: "vtt")
 */
@property(nonatomic, copy, nullable) NSString *tfmt;

/**
 *  The tlang parameter specifies that the API response should return a
 *  translation of the specified caption track. The parameter value is an ISO
 *  639-1 two-letter language code that identifies the desired caption language.
 *  The translation is generated by using machine translation, such as Google
 *  Translate.
 */
@property(nonatomic, copy, nullable) NSString *tlang;

/**
 *  Fetches the requested resource data as a @c GTLRDataObject.
 *
 *  Downloads a caption track. The caption track is returned in its original
 *  format unless the request specifies a value for the tfmt parameter and in
 *  its original language unless the request specifies a value for the tlang
 *  parameter.
 *
 *  @param identifier The id parameter identifies the caption track that is
 *    being retrieved. The value is a caption track ID as identified by the id
 *    property in a caption resource.
 *
 *  @return GTLRYouTubeQuery_CaptionsDownload
 */
+ (instancetype)queryForMediaWithIdentifier:(NSString *)identifier;

@end

/**
 *  Uploads a caption track.
 *
 *  Method: youtube.captions.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_CaptionsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCaptionsInsertWithObject:part:]

/**
 *  ID of the Google+ Page for the channel that the request is be on behalf of
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOf;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The part parameter specifies the caption resource parts that the API
 *  response will include. Set the parameter value to snippet.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  The sync parameter indicates whether YouTube should automatically
 *  synchronize the caption file with the audio track of the video. If you set
 *  the value to true, YouTube will disregard any time codes that are in the
 *  uploaded caption file and generate new time codes for the captions.
 *  You should set the sync parameter to true if you are uploading a transcript,
 *  which has no time codes, or if you suspect the time codes in your file are
 *  incorrect and want YouTube to try to fix them.
 */
@property(nonatomic, assign) BOOL sync;

/**
 *  Fetches a @c GTLRYouTube_Caption.
 *
 *  Uploads a caption track.
 *
 *  @param object The @c GTLRYouTube_Caption to include in the query.
 *  @param part The part parameter specifies the caption resource parts that the
 *    API response will include. Set the parameter value to snippet.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    100MB. Accepted MIME types: * / *, application/octet-stream, text/xml
 *
 *  @return GTLRYouTubeQuery_CaptionsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Caption *)object
                           part:(NSString *)part
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Returns a list of caption tracks that are associated with a specified video.
 *  Note that the API response does not contain the actual captions and that the
 *  captions.download method provides the ability to retrieve a caption track.
 *
 *  Method: youtube.captions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_CaptionsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCaptionsListWithpart:videoId:]

/**
 *  The id parameter specifies a comma-separated list of IDs that identify the
 *  caption resources that should be retrieved. Each ID must identify a caption
 *  track associated with the specified video.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  ID of the Google+ Page for the channel that the request is on behalf of.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOf;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The part parameter specifies a comma-separated list of one or more caption
 *  resource parts that the API response will include. The part names that you
 *  can include in the parameter value are id and snippet.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  The videoId parameter specifies the YouTube video ID of the video for which
 *  the API should return caption tracks.
 */
@property(nonatomic, copy, nullable) NSString *videoId;

/**
 *  Fetches a @c GTLRYouTube_CaptionListResponse.
 *
 *  Returns a list of caption tracks that are associated with a specified video.
 *  Note that the API response does not contain the actual captions and that the
 *  captions.download method provides the ability to retrieve a caption track.
 *
 *  @param part The part parameter specifies a comma-separated list of one or
 *    more caption resource parts that the API response will include. The part
 *    names that you can include in the parameter value are id and snippet.
 *  @param videoId The videoId parameter specifies the YouTube video ID of the
 *    video for which the API should return caption tracks.
 *
 *  @return GTLRYouTubeQuery_CaptionsList
 */
+ (instancetype)queryWithPart:(NSString *)part
                      videoId:(NSString *)videoId;

@end

/**
 *  Updates a caption track. When updating a caption track, you can change the
 *  track's draft status, upload a new caption file for the track, or both.
 *
 *  Method: youtube.captions.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_CaptionsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCaptionsUpdateWithObject:part:]

/**
 *  ID of the Google+ Page for the channel that the request is be on behalf of
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOf;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response will include. Set the property value to snippet if you are
 *  updating the track's draft status. Otherwise, set the property value to id.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Note: The API server only processes the parameter value if the request
 *  contains an updated caption file.
 *  The sync parameter indicates whether YouTube should automatically
 *  synchronize the caption file with the audio track of the video. If you set
 *  the value to true, YouTube will automatically synchronize the caption track
 *  with the audio track.
 */
@property(nonatomic, assign) BOOL sync;

/**
 *  Fetches a @c GTLRYouTube_Caption.
 *
 *  Updates a caption track. When updating a caption track, you can change the
 *  track's draft status, upload a new caption file for the track, or both.
 *
 *  @param object The @c GTLRYouTube_Caption to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include. Set the property value to
 *    snippet if you are updating the track's draft status. Otherwise, set the
 *    property value to id.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    100MB. Accepted MIME types: * / *, application/octet-stream, text/xml
 *
 *  @return GTLRYouTubeQuery_CaptionsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Caption *)object
                           part:(NSString *)part
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Uploads a channel banner image to YouTube. This method represents the first
 *  two steps in a three-step process to update the banner image for a channel:
 *  - Call the channelBanners.insert method to upload the binary image data to
 *  YouTube. The image must have a 16:9 aspect ratio and be at least 2120x1192
 *  pixels.
 *  - Extract the url property's value from the response that the API returns
 *  for step 1.
 *  - Call the channels.update method to update the channel's branding settings.
 *  Set the brandingSettings.image.bannerExternalUrl property's value to the URL
 *  obtained in step 2.
 *
 *  Method: youtube.channelBanners.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeUpload
 */
@interface GTLRYouTubeQuery_ChannelBannersInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForChannelBannersInsertWithObject:]

/**
 *  The channelId parameter identifies the YouTube channel to which the banner
 *  is uploaded. The channelId parameter was introduced as a required parameter
 *  in May 2017. As this was a backward-incompatible change,
 *  channelBanners.insert requests that do not specify this parameter will not
 *  return an error until six months have passed from the time that the
 *  parameter was introduced. Please see the API Terms of Service for the
 *  official policy regarding backward incompatible changes and the API revision
 *  history for the exact date that the parameter was introduced.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Fetches a @c GTLRYouTube_ChannelBannerResource.
 *
 *  Uploads a channel banner image to YouTube. This method represents the first
 *  two steps in a three-step process to update the banner image for a channel:
 *  - Call the channelBanners.insert method to upload the binary image data to
 *  YouTube. The image must have a 16:9 aspect ratio and be at least 2120x1192
 *  pixels.
 *  - Extract the url property's value from the response that the API returns
 *  for step 1.
 *  - Call the channels.update method to update the channel's branding settings.
 *  Set the brandingSettings.image.bannerExternalUrl property's value to the URL
 *  obtained in step 2.
 *
 *  @param object The @c GTLRYouTube_ChannelBannerResource to include in the
 *    query.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    6MB. Accepted MIME types: application/octet-stream, image/jpeg, image/png
 *
 *  @return GTLRYouTubeQuery_ChannelBannersInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_ChannelBannerResource *)object
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Deletes a channelSection.
 *
 *  Method: youtube.channelSections.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_ChannelSectionsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForChannelSectionsDeleteWithidentifier:]

/**
 *  The id parameter specifies the YouTube channelSection ID for the resource
 *  that is being deleted. In a channelSection resource, the id property
 *  specifies the YouTube channelSection ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a channelSection.
 *
 *  @param identifier The id parameter specifies the YouTube channelSection ID
 *    for the resource that is being deleted. In a channelSection resource, the
 *    id property specifies the YouTube channelSection ID.
 *
 *  @return GTLRYouTubeQuery_ChannelSectionsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Adds a channelSection for the authenticated user's channel.
 *
 *  Method: youtube.channelSections.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_ChannelSectionsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForChannelSectionsInsertWithObject:part:]

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. Note: This
 *  parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and perform actions on behalf of the channel specified in the parameter
 *  value, without having to provide authentication credentials for each
 *  separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response will include.
 *  The part names that you can include in the parameter value are snippet and
 *  contentDetails.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_ChannelSection.
 *
 *  Adds a channelSection for the authenticated user's channel.
 *
 *  @param object The @c GTLRYouTube_ChannelSection to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *    The part names that you can include in the parameter value are snippet and
 *    contentDetails.
 *
 *  @return GTLRYouTubeQuery_ChannelSectionsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_ChannelSection *)object
                           part:(NSString *)part;

@end

/**
 *  Returns channelSection resources that match the API request criteria.
 *
 *  Method: youtube.channelSections.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_ChannelSectionsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForChannelSectionsListWithpart:]

/**
 *  The channelId parameter specifies a YouTube channel ID. The API will only
 *  return that channel's channelSections.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  The hl parameter indicates that the snippet.localized property values in the
 *  returned channelSection resources should be in the specified language if
 *  localized values for that language are available. For example, if the API
 *  request specifies hl=de, the snippet.localized properties in the API
 *  response will contain German titles if German titles are available. Channel
 *  owners can provide localized channel section titles using either the
 *  channelSections.insert or channelSections.update method.
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  The id parameter specifies a comma-separated list of the YouTube
 *  channelSection ID(s) for the resource(s) that are being retrieved. In a
 *  channelSection resource, the id property specifies the YouTube
 *  channelSection ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Set this parameter's value to true to retrieve a feed of the authenticated
 *  user's channelSections.
 */
@property(nonatomic, assign) BOOL mine;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The part parameter specifies a comma-separated list of one or more
 *  channelSection resource properties that the API response will include. The
 *  part names that you can include in the parameter value are id, snippet, and
 *  contentDetails.
 *  If the parameter identifies a property that contains child properties, the
 *  child properties will be included in the response. For example, in a
 *  channelSection resource, the snippet property contains other properties,
 *  such as a display title for the channelSection. If you set part=snippet, the
 *  API response will also contain all of those nested properties.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_ChannelSectionListResponse.
 *
 *  Returns channelSection resources that match the API request criteria.
 *
 *  @param part The part parameter specifies a comma-separated list of one or
 *    more channelSection resource properties that the API response will
 *    include. The part names that you can include in the parameter value are
 *    id, snippet, and contentDetails.
 *    If the parameter identifies a property that contains child properties, the
 *    child properties will be included in the response. For example, in a
 *    channelSection resource, the snippet property contains other properties,
 *    such as a display title for the channelSection. If you set part=snippet,
 *    the API response will also contain all of those nested properties.
 *
 *  @return GTLRYouTubeQuery_ChannelSectionsList
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Update a channelSection.
 *
 *  Method: youtube.channelSections.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_ChannelSectionsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForChannelSectionsUpdateWithObject:part:]

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response will include.
 *  The part names that you can include in the parameter value are snippet and
 *  contentDetails.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_ChannelSection.
 *
 *  Update a channelSection.
 *
 *  @param object The @c GTLRYouTube_ChannelSection to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *    The part names that you can include in the parameter value are snippet and
 *    contentDetails.
 *
 *  @return GTLRYouTubeQuery_ChannelSectionsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_ChannelSection *)object
                           part:(NSString *)part;

@end

/**
 *  Returns a collection of zero or more channel resources that match the
 *  request criteria.
 *
 *  Method: youtube.channels.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 *    @c kGTLRAuthScopeYouTubeYoutubepartnerChannelAudit
 */
@interface GTLRYouTubeQuery_ChannelsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForChannelsListWithpart:]

/**
 *  The categoryId parameter specifies a YouTube guide category, thereby
 *  requesting YouTube channels associated with that category.
 */
@property(nonatomic, copy, nullable) NSString *categoryId;

/**
 *  The forUsername parameter specifies a YouTube username, thereby requesting
 *  the channel associated with that username.
 */
@property(nonatomic, copy, nullable) NSString *forUsername;

/**
 *  The hl parameter should be used for filter out the properties that are not
 *  in the given language. Used for the brandingSettings part.
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  The id parameter specifies a comma-separated list of the YouTube channel
 *  ID(s) for the resource(s) that are being retrieved. In a channel resource,
 *  the id property specifies the channel's YouTube channel ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  Set this parameter's value to true to instruct the API to only return
 *  channels managed by the content owner that the onBehalfOfContentOwner
 *  parameter specifies. The user must be authenticated as a CMS account linked
 *  to the specified content owner and onBehalfOfContentOwner must be provided.
 */
@property(nonatomic, assign) BOOL managedByMe;

/**
 *  The maxResults parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5 (from the
 *        range 0..50).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Set this parameter's value to true to instruct the API to only return
 *  channels owned by the authenticated user.
 */
@property(nonatomic, assign) BOOL mine;

/**
 *  Use the subscriptions.list method and its mySubscribers parameter to
 *  retrieve a list of subscribers to the authenticated user's channel.
 */
@property(nonatomic, assign) BOOL mySubscribers;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The pageToken parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The part parameter specifies a comma-separated list of one or more channel
 *  resource properties that the API response will include.
 *  If the parameter identifies a property that contains child properties, the
 *  child properties will be included in the response. For example, in a channel
 *  resource, the contentDetails property contains other properties, such as the
 *  uploads properties. As such, if you set part=contentDetails, the API
 *  response will also contain all of those nested properties.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_ChannelListResponse.
 *
 *  Returns a collection of zero or more channel resources that match the
 *  request criteria.
 *
 *  @param part The part parameter specifies a comma-separated list of one or
 *    more channel resource properties that the API response will include.
 *    If the parameter identifies a property that contains child properties, the
 *    child properties will be included in the response. For example, in a
 *    channel resource, the contentDetails property contains other properties,
 *    such as the uploads properties. As such, if you set part=contentDetails,
 *    the API response will also contain all of those nested properties.
 *
 *  @return GTLRYouTubeQuery_ChannelsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Updates a channel's metadata. Note that this method currently only supports
 *  updates to the channel resource's brandingSettings and invideoPromotion
 *  objects and their child properties.
 *
 *  Method: youtube.channels.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_ChannelsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForChannelsUpdateWithObject:part:]

/**
 *  The onBehalfOfContentOwner parameter indicates that the authenticated user
 *  is acting on behalf of the content owner specified in the parameter value.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and get access to all their video and channel data, without having to
 *  provide authentication credentials for each individual channel. The actual
 *  CMS account that the user authenticates with needs to be linked to the
 *  specified YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response will include.
 *  The API currently only allows the parameter value to be set to either
 *  brandingSettings or invideoPromotion. (You cannot update both of those parts
 *  with a single request.)
 *  Note that this method overrides the existing values for all of the mutable
 *  properties that are contained in any parts that the parameter value
 *  specifies.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_Channel.
 *
 *  Updates a channel's metadata. Note that this method currently only supports
 *  updates to the channel resource's brandingSettings and invideoPromotion
 *  objects and their child properties.
 *
 *  @param object The @c GTLRYouTube_Channel to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *    The API currently only allows the parameter value to be set to either
 *    brandingSettings or invideoPromotion. (You cannot update both of those
 *    parts with a single request.)
 *    Note that this method overrides the existing values for all of the mutable
 *    properties that are contained in any parts that the parameter value
 *    specifies.
 *
 *  @return GTLRYouTubeQuery_ChannelsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Channel *)object
                           part:(NSString *)part;

@end

/**
 *  Deletes a comment.
 *
 *  Method: youtube.comments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentsDeleteWithidentifier:]

/**
 *  The id parameter specifies the comment ID for the resource that is being
 *  deleted.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a comment.
 *
 *  @param identifier The id parameter specifies the comment ID for the resource
 *    that is being deleted.
 *
 *  @return GTLRYouTubeQuery_CommentsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Creates a reply to an existing comment. Note: To create a top-level comment,
 *  use the commentThreads.insert method.
 *
 *  Method: youtube.comments.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentsInsertWithObject:part:]

/**
 *  The part parameter identifies the properties that the API response will
 *  include. Set the parameter value to snippet. The snippet part has a quota
 *  cost of 2 units.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_Comment.
 *
 *  Creates a reply to an existing comment. Note: To create a top-level comment,
 *  use the commentThreads.insert method.
 *
 *  @param object The @c GTLRYouTube_Comment to include in the query.
 *  @param part The part parameter identifies the properties that the API
 *    response will include. Set the parameter value to snippet. The snippet
 *    part has a quota cost of 2 units.
 *
 *  @return GTLRYouTubeQuery_CommentsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Comment *)object
                           part:(NSString *)part;

@end

/**
 *  Returns a list of comments that match the API request parameters.
 *
 *  Method: youtube.comments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentsListWithpart:]

/**
 *  The id parameter specifies a comma-separated list of comment IDs for the
 *  resources that are being retrieved. In a comment resource, the id property
 *  specifies the comment's ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The maxResults parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *  Note: This parameter is not supported for use in conjunction with the id
 *  parameter.
 *
 *  @note If not set, the documented server-side default will be 20 (from the
 *        range 1..100).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The pageToken parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken property
 *  identifies the next page of the result that can be retrieved.
 *  Note: This parameter is not supported for use in conjunction with the id
 *  parameter.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parentId parameter specifies the ID of the comment for which replies
 *  should be retrieved.
 *  Note: YouTube currently supports replies only for top-level comments.
 *  However, replies to replies may be supported in the future.
 */
@property(nonatomic, copy, nullable) NSString *parentId;

/**
 *  The part parameter specifies a comma-separated list of one or more comment
 *  resource properties that the API response will include.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  This parameter indicates whether the API should return comments formatted as
 *  HTML or as plain text.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeTextFormatHtml Returns the comments in HTML format.
 *        This is the default value. (Value: "html")
 *    @arg @c kGTLRYouTubeTextFormatPlainText Returns the comments in plain text
 *        format. (Value: "plainText")
 *
 *  @note If not set, the documented server-side default will be "FORMAT_HTML".
 */
@property(nonatomic, copy, nullable) NSString *textFormat;

/**
 *  Fetches a @c GTLRYouTube_CommentListResponse.
 *
 *  Returns a list of comments that match the API request parameters.
 *
 *  @param part The part parameter specifies a comma-separated list of one or
 *    more comment resource properties that the API response will include.
 *
 *  @return GTLRYouTubeQuery_CommentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Expresses the caller's opinion that one or more comments should be flagged
 *  as spam.
 *
 *  Method: youtube.comments.markAsSpam
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentsMarkAsSpam : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentsMarkAsSpamWithidentifier:]

/**
 *  The id parameter specifies a comma-separated list of IDs of comments that
 *  the caller believes should be classified as spam.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Expresses the caller's opinion that one or more comments should be flagged
 *  as spam.
 *
 *  @param identifier The id parameter specifies a comma-separated list of IDs
 *    of comments that the caller believes should be classified as spam.
 *
 *  @return GTLRYouTubeQuery_CommentsMarkAsSpam
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Sets the moderation status of one or more comments. The API request must be
 *  authorized by the owner of the channel or video associated with the
 *  comments.
 *
 *  Method: youtube.comments.setModerationStatus
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentsSetModerationStatus : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentsSetModerationStatusWithidentifier:moderationStatus:]

/**
 *  The banAuthor parameter lets you indicate that you want to automatically
 *  reject any additional comments written by the comment's author. Set the
 *  parameter value to true to ban the author.
 *  Note: This parameter is only valid if the moderationStatus parameter is also
 *  set to rejected.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL banAuthor;

/**
 *  The id parameter specifies a comma-separated list of IDs that identify the
 *  comments for which you are updating the moderation status.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies the new moderation status of the specified comments.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeModerationStatusHeldForReview Marks a comment as
 *        awaiting review by a moderator. (Value: "heldForReview")
 *    @arg @c kGTLRYouTubeModerationStatusPublished Clears a comment for public
 *        display. (Value: "published")
 *    @arg @c kGTLRYouTubeModerationStatusRejected Rejects a comment as being
 *        unfit for display. This action also effectively hides all replies to
 *        the rejected comment.
 *        Note: The API does not currently provide a way to list or otherwise
 *        discover rejected comments. However, you can change the moderation
 *        status of a rejected comment if you still know its ID. If you were to
 *        change the moderation status of a rejected comment, the comment
 *        replies would subsequently be discoverable again as well. (Value:
 *        "rejected")
 */
@property(nonatomic, copy, nullable) NSString *moderationStatus;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Sets the moderation status of one or more comments. The API request must be
 *  authorized by the owner of the channel or video associated with the
 *  comments.
 *
 *  @param identifier The id parameter specifies a comma-separated list of IDs
 *    that identify the comments for which you are updating the moderation
 *    status.
 *  @param moderationStatus Identifies the new moderation status of the
 *    specified comments.
 *
 *  Likely values for @c moderationStatus:
 *    @arg @c kGTLRYouTubeModerationStatusHeldForReview Marks a comment as
 *        awaiting review by a moderator. (Value: "heldForReview")
 *    @arg @c kGTLRYouTubeModerationStatusPublished Clears a comment for public
 *        display. (Value: "published")
 *    @arg @c kGTLRYouTubeModerationStatusRejected Rejects a comment as being
 *        unfit for display. This action also effectively hides all replies to
 *        the rejected comment.
 *        Note: The API does not currently provide a way to list or otherwise
 *        discover rejected comments. However, you can change the moderation
 *        status of a rejected comment if you still know its ID. If you were to
 *        change the moderation status of a rejected comment, the comment
 *        replies would subsequently be discoverable again as well. (Value:
 *        "rejected")
 *
 *  @return GTLRYouTubeQuery_CommentsSetModerationStatus
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier
                   moderationStatus:(NSString *)moderationStatus;

@end

/**
 *  Modifies a comment.
 *
 *  Method: youtube.comments.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentsUpdateWithObject:part:]

/**
 *  The part parameter identifies the properties that the API response will
 *  include. You must at least include the snippet part in the parameter value
 *  since that part contains all of the properties that the API request can
 *  update.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_Comment.
 *
 *  Modifies a comment.
 *
 *  @param object The @c GTLRYouTube_Comment to include in the query.
 *  @param part The part parameter identifies the properties that the API
 *    response will include. You must at least include the snippet part in the
 *    parameter value since that part contains all of the properties that the
 *    API request can update.
 *
 *  @return GTLRYouTubeQuery_CommentsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Comment *)object
                           part:(NSString *)part;

@end

/**
 *  Creates a new top-level comment. To add a reply to an existing comment, use
 *  the comments.insert method instead.
 *
 *  Method: youtube.commentThreads.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentThreadsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentThreadsInsertWithObject:part:]

/**
 *  The part parameter identifies the properties that the API response will
 *  include. Set the parameter value to snippet. The snippet part has a quota
 *  cost of 2 units.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_CommentThread.
 *
 *  Creates a new top-level comment. To add a reply to an existing comment, use
 *  the comments.insert method instead.
 *
 *  @param object The @c GTLRYouTube_CommentThread to include in the query.
 *  @param part The part parameter identifies the properties that the API
 *    response will include. Set the parameter value to snippet. The snippet
 *    part has a quota cost of 2 units.
 *
 *  @return GTLRYouTubeQuery_CommentThreadsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_CommentThread *)object
                           part:(NSString *)part;

@end

/**
 *  Returns a list of comment threads that match the API request parameters.
 *
 *  Method: youtube.commentThreads.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentThreadsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentThreadsListWithpart:]

/**
 *  The allThreadsRelatedToChannelId parameter instructs the API to return all
 *  comment threads associated with the specified channel. The response can
 *  include comments about the channel or about the channel's videos.
 */
@property(nonatomic, copy, nullable) NSString *allThreadsRelatedToChannelId;

/**
 *  The channelId parameter instructs the API to return comment threads
 *  containing comments about the specified channel. (The response will not
 *  include comments left on videos that the channel uploaded.)
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  The id parameter specifies a comma-separated list of comment thread IDs for
 *  the resources that should be retrieved.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The maxResults parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *  Note: This parameter is not supported for use in conjunction with the id
 *  parameter.
 *
 *  @note If not set, the documented server-side default will be 20 (from the
 *        range 1..100).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Set this parameter to limit the returned comment threads to a particular
 *  moderation state.
 *  Note: This parameter is not supported for use in conjunction with the id
 *  parameter.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeModerationStatusHeldForReview Retrieve comment threads
 *        that are awaiting review by a moderator. A comment thread can be
 *        included in the response if the top-level comment or at least one of
 *        the replies to that comment are awaiting review. (Value:
 *        "heldForReview")
 *    @arg @c kGTLRYouTubeModerationStatusLikelySpam Retrieve comment threads
 *        classified as likely to be spam. A comment thread can be included in
 *        the response if the top-level comment or at least one of the replies
 *        to that comment is considered likely to be spam. (Value: "likelySpam")
 *    @arg @c kGTLRYouTubeModerationStatusPublished Retrieve threads of
 *        published comments. This is the default value. A comment thread can be
 *        included in the response if its top-level comment has been published.
 *        (Value: "published")
 *
 *  @note If not set, the documented server-side default will be
 *        "MODERATION_STATUS_PUBLISHED".
 */
@property(nonatomic, copy, nullable) NSString *moderationStatus;

/**
 *  The order parameter specifies the order in which the API response should
 *  list comment threads. Valid values are:
 *  - time - Comment threads are ordered by time. This is the default behavior.
 *  - relevance - Comment threads are ordered by relevance.Note: This parameter
 *  is not supported for use in conjunction with the id parameter.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeOrderRelevance Order by relevance. (Value:
 *        "relevance")
 *    @arg @c kGTLRYouTubeOrderTime Order by time. (Value: "time")
 *
 *  @note If not set, the documented server-side default will be "true".
 */
@property(nonatomic, copy, nullable) NSString *order;

/**
 *  The pageToken parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken property
 *  identifies the next page of the result that can be retrieved.
 *  Note: This parameter is not supported for use in conjunction with the id
 *  parameter.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The part parameter specifies a comma-separated list of one or more
 *  commentThread resource properties that the API response will include.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  The searchTerms parameter instructs the API to limit the API response to
 *  only contain comments that contain the specified search terms.
 *  Note: This parameter is not supported for use in conjunction with the id
 *  parameter.
 */
@property(nonatomic, copy, nullable) NSString *searchTerms;

/**
 *  Set this parameter's value to html or plainText to instruct the API to
 *  return the comments left by users in html formatted or in plain text.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeTextFormatHtml Returns the comments in HTML format.
 *        This is the default value. (Value: "html")
 *    @arg @c kGTLRYouTubeTextFormatPlainText Returns the comments in plain text
 *        format. (Value: "plainText")
 *
 *  @note If not set, the documented server-side default will be "FORMAT_HTML".
 */
@property(nonatomic, copy, nullable) NSString *textFormat;

/**
 *  The videoId parameter instructs the API to return comment threads associated
 *  with the specified video ID.
 */
@property(nonatomic, copy, nullable) NSString *videoId;

/**
 *  Fetches a @c GTLRYouTube_CommentThreadListResponse.
 *
 *  Returns a list of comment threads that match the API request parameters.
 *
 *  @param part The part parameter specifies a comma-separated list of one or
 *    more commentThread resource properties that the API response will include.
 *
 *  @return GTLRYouTubeQuery_CommentThreadsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Modifies the top-level comment in a comment thread.
 *
 *  Method: youtube.commentThreads.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_CommentThreadsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForCommentThreadsUpdateWithObject:part:]

/**
 *  The part parameter specifies a comma-separated list of commentThread
 *  resource properties that the API response will include. You must at least
 *  include the snippet part in the parameter value since that part contains all
 *  of the properties that the API request can update.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_CommentThread.
 *
 *  Modifies the top-level comment in a comment thread.
 *
 *  @param object The @c GTLRYouTube_CommentThread to include in the query.
 *  @param part The part parameter specifies a comma-separated list of
 *    commentThread resource properties that the API response will include. You
 *    must at least include the snippet part in the parameter value since that
 *    part contains all of the properties that the API request can update.
 *
 *  @return GTLRYouTubeQuery_CommentThreadsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_CommentThread *)object
                           part:(NSString *)part;

@end

/**
 *  Returns a list of categories that can be associated with YouTube channels.
 *
 *  Method: youtube.guideCategories.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_GuideCategoriesList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForGuideCategoriesListWithpart:]

/**
 *  The hl parameter specifies the language that will be used for text values in
 *  the API response.
 *
 *  @note If not set, the documented server-side default will be en-US.
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  The id parameter specifies a comma-separated list of the YouTube channel
 *  category ID(s) for the resource(s) that are being retrieved. In a
 *  guideCategory resource, the id property specifies the YouTube channel
 *  category ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The part parameter specifies the guideCategory resource properties that the
 *  API response will include. Set the parameter value to snippet.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  The regionCode parameter instructs the API to return the list of guide
 *  categories available in the specified country. The parameter value is an ISO
 *  3166-1 alpha-2 country code.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  Fetches a @c GTLRYouTube_GuideCategoryListResponse.
 *
 *  Returns a list of categories that can be associated with YouTube channels.
 *
 *  @param part The part parameter specifies the guideCategory resource
 *    properties that the API response will include. Set the parameter value to
 *    snippet.
 *
 *  @return GTLRYouTubeQuery_GuideCategoriesList
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Returns a list of application languages that the YouTube website supports.
 *
 *  Method: youtube.i18nLanguages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_I18nLanguagesList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForI18nLanguagesListWithpart:]

/**
 *  The hl parameter specifies the language that should be used for text values
 *  in the API response.
 *
 *  @note If not set, the documented server-side default will be en_US.
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  The part parameter specifies the i18nLanguage resource properties that the
 *  API response will include. Set the parameter value to snippet.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_I18nLanguageListResponse.
 *
 *  Returns a list of application languages that the YouTube website supports.
 *
 *  @param part The part parameter specifies the i18nLanguage resource
 *    properties that the API response will include. Set the parameter value to
 *    snippet.
 *
 *  @return GTLRYouTubeQuery_I18nLanguagesList
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Returns a list of content regions that the YouTube website supports.
 *
 *  Method: youtube.i18nRegions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_I18nRegionsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForI18nRegionsListWithpart:]

/**
 *  The hl parameter specifies the language that should be used for text values
 *  in the API response.
 *
 *  @note If not set, the documented server-side default will be en_US.
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  The part parameter specifies the i18nRegion resource properties that the API
 *  response will include. Set the parameter value to snippet.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_I18nRegionListResponse.
 *
 *  Returns a list of content regions that the YouTube website supports.
 *
 *  @param part The part parameter specifies the i18nRegion resource properties
 *    that the API response will include. Set the parameter value to snippet.
 *
 *  @return GTLRYouTubeQuery_I18nRegionsList
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Binds a YouTube broadcast to a stream or removes an existing binding between
 *  a broadcast and a stream. A broadcast can only be bound to one video stream,
 *  though a video stream may be bound to more than one broadcast.
 *
 *  Method: youtube.liveBroadcasts.bind
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveBroadcastsBind : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveBroadcastsBindWithidentifier:part:]

/**
 *  The id parameter specifies the unique ID of the broadcast that is being
 *  bound to a video stream.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. Note: This
 *  parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and perform actions on behalf of the channel specified in the parameter
 *  value, without having to provide authentication credentials for each
 *  separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The part parameter specifies a comma-separated list of one or more
 *  liveBroadcast resource properties that the API response will include. The
 *  part names that you can include in the parameter value are id, snippet,
 *  contentDetails, and status.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  The streamId parameter specifies the unique ID of the video stream that is
 *  being bound to a broadcast. If this parameter is omitted, the API will
 *  remove any existing binding between the broadcast and a video stream.
 */
@property(nonatomic, copy, nullable) NSString *streamId;

/**
 *  Fetches a @c GTLRYouTube_LiveBroadcast.
 *
 *  Binds a YouTube broadcast to a stream or removes an existing binding between
 *  a broadcast and a stream. A broadcast can only be bound to one video stream,
 *  though a video stream may be bound to more than one broadcast.
 *
 *  @param identifier The id parameter specifies the unique ID of the broadcast
 *    that is being bound to a video stream.
 *  @param part The part parameter specifies a comma-separated list of one or
 *    more liveBroadcast resource properties that the API response will include.
 *    The part names that you can include in the parameter value are id,
 *    snippet, contentDetails, and status.
 *
 *  @return GTLRYouTubeQuery_LiveBroadcastsBind
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier
                               part:(NSString *)part;

@end

/**
 *  Controls the settings for a slate that can be displayed in the broadcast
 *  stream.
 *
 *  Method: youtube.liveBroadcasts.control
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveBroadcastsControl : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveBroadcastsControlWithidentifier:part:]

/**
 *  The displaySlate parameter specifies whether the slate is being enabled or
 *  disabled.
 */
@property(nonatomic, assign) BOOL displaySlate;

/**
 *  The id parameter specifies the YouTube live broadcast ID that uniquely
 *  identifies the broadcast in which the slate is being updated.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The offsetTimeMs parameter specifies a positive time offset when the
 *  specified slate change will occur. The value is measured in milliseconds
 *  from the beginning of the broadcast's monitor stream, which is the time that
 *  the testing phase for the broadcast began. Even though it is specified in
 *  milliseconds, the value is actually an approximation, and YouTube completes
 *  the requested action as closely as possible to that time.
 *  If you do not specify a value for this parameter, then YouTube performs the
 *  action as soon as possible. See the Getting started guide for more details.
 *  Important: You should only specify a value for this parameter if your
 *  broadcast stream is delayed.
 */
@property(nonatomic, assign) unsigned long long offsetTimeMs;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. Note: This
 *  parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and perform actions on behalf of the channel specified in the parameter
 *  value, without having to provide authentication credentials for each
 *  separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The part parameter specifies a comma-separated list of one or more
 *  liveBroadcast resource properties that the API response will include. The
 *  part names that you can include in the parameter value are id, snippet,
 *  contentDetails, and status.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  The walltime parameter specifies the wall clock time at which the specified
 *  slate change will occur. The value is specified in ISO 8601
 *  (YYYY-MM-DDThh:mm:ss.sssZ) format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *walltime;

/**
 *  Fetches a @c GTLRYouTube_LiveBroadcast.
 *
 *  Controls the settings for a slate that can be displayed in the broadcast
 *  stream.
 *
 *  @param identifier The id parameter specifies the YouTube live broadcast ID
 *    that uniquely identifies the broadcast in which the slate is being
 *    updated.
 *  @param part The part parameter specifies a comma-separated list of one or
 *    more liveBroadcast resource properties that the API response will include.
 *    The part names that you can include in the parameter value are id,
 *    snippet, contentDetails, and status.
 *
 *  @return GTLRYouTubeQuery_LiveBroadcastsControl
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier
                               part:(NSString *)part;

@end

/**
 *  Deletes a broadcast.
 *
 *  Method: youtube.liveBroadcasts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveBroadcastsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveBroadcastsDeleteWithidentifier:]

/**
 *  The id parameter specifies the YouTube live broadcast ID for the resource
 *  that is being deleted.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. Note: This
 *  parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and perform actions on behalf of the channel specified in the parameter
 *  value, without having to provide authentication credentials for each
 *  separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a broadcast.
 *
 *  @param identifier The id parameter specifies the YouTube live broadcast ID
 *    for the resource that is being deleted.
 *
 *  @return GTLRYouTubeQuery_LiveBroadcastsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Creates a broadcast.
 *
 *  Method: youtube.liveBroadcasts.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveBroadcastsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveBroadcastsInsertWithObject:part:]

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. Note: This
 *  parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and perform actions on behalf of the channel specified in the parameter
 *  value, without having to provide authentication credentials for each
 *  separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response will include.
 *  The part properties that you can include in the parameter value are id,
 *  snippet, contentDetails, and status.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_LiveBroadcast.
 *
 *  Creates a broadcast.
 *
 *  @param object The @c GTLRYouTube_LiveBroadcast to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *    The part properties that you can include in the parameter value are id,
 *    snippet, contentDetails, and status.
 *
 *  @return GTLRYouTubeQuery_LiveBroadcastsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_LiveBroadcast *)object
                           part:(NSString *)part;

@end

/**
 *  Returns a list of YouTube broadcasts that match the API request parameters.
 *
 *  Method: youtube.liveBroadcasts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_LiveBroadcastsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveBroadcastsListWithpart:]

/**
 *  The broadcastStatus parameter filters the API response to only include
 *  broadcasts with the specified status.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeBroadcastStatusActive Return current live broadcasts.
 *        (Value: "active")
 *    @arg @c kGTLRYouTubeBroadcastStatusAll Return all broadcasts. (Value:
 *        "all")
 *    @arg @c kGTLRYouTubeBroadcastStatusCompleted Return broadcasts that have
 *        already ended. (Value: "completed")
 *    @arg @c kGTLRYouTubeBroadcastStatusUpcoming Return broadcasts that have
 *        not yet started. (Value: "upcoming")
 */
@property(nonatomic, copy, nullable) NSString *broadcastStatus;

/**
 *  The broadcastType parameter filters the API response to only include
 *  broadcasts with the specified type. This is only compatible with the mine
 *  filter for now.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeBroadcastTypeAll Return all broadcasts. (Value: "all")
 *    @arg @c kGTLRYouTubeBroadcastTypeEvent Return only scheduled event
 *        broadcasts. (Value: "event")
 *    @arg @c kGTLRYouTubeBroadcastTypePersistent Return only persistent
 *        broadcasts. (Value: "persistent")
 *
 *  @note If not set, the documented server-side default will be
 *        "BROADCAST_TYPE_FILTER_EVENT".
 */
@property(nonatomic, copy, nullable) NSString *broadcastType;

/**
 *  The id parameter specifies a comma-separated list of YouTube broadcast IDs
 *  that identify the broadcasts being retrieved. In a liveBroadcast resource,
 *  the id property specifies the broadcast's ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The maxResults parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5 (from the
 *        range 0..50).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The mine parameter can be used to instruct the API to only return broadcasts
 *  owned by the authenticated user. Set the parameter value to true to only
 *  retrieve your own broadcasts.
 */
@property(nonatomic, assign) BOOL mine;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. Note: This
 *  parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and perform actions on behalf of the channel specified in the parameter
 *  value, without having to provide authentication credentials for each
 *  separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The pageToken parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The part parameter specifies a comma-separated list of one or more
 *  liveBroadcast resource properties that the API response will include. The
 *  part names that you can include in the parameter value are id, snippet,
 *  contentDetails, and status.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_LiveBroadcastListResponse.
 *
 *  Returns a list of YouTube broadcasts that match the API request parameters.
 *
 *  @param part The part parameter specifies a comma-separated list of one or
 *    more liveBroadcast resource properties that the API response will include.
 *    The part names that you can include in the parameter value are id,
 *    snippet, contentDetails, and status.
 *
 *  @return GTLRYouTubeQuery_LiveBroadcastsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Changes the status of a YouTube live broadcast and initiates any processes
 *  associated with the new status. For example, when you transition a
 *  broadcast's status to testing, YouTube starts to transmit video to that
 *  broadcast's monitor stream. Before calling this method, you should confirm
 *  that the value of the status.streamStatus property for the stream bound to
 *  your broadcast is active.
 *
 *  Method: youtube.liveBroadcasts.transition
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveBroadcastsTransition : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveBroadcastsTransitionWithbroadcastStatus:identifier:part:]

/**
 *  The broadcastStatus parameter identifies the state to which the broadcast is
 *  changing. Note that to transition a broadcast to either the testing or live
 *  state, the status.streamStatus must be active for the stream that the
 *  broadcast is bound to.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeBroadcastStatusComplete The broadcast is over. YouTube
 *        stops transmitting video. (Value: "complete")
 *    @arg @c kGTLRYouTubeBroadcastStatusLive The broadcast is visible to its
 *        audience. YouTube transmits video to the broadcast's monitor stream
 *        and its broadcast stream. (Value: "live")
 *    @arg @c kGTLRYouTubeBroadcastStatusTesting Start testing the broadcast.
 *        YouTube transmits video to the broadcast's monitor stream. Note that
 *        you can only transition a broadcast to the testing state if its
 *        contentDetails.monitorStream.enableMonitorStream property is set to
 *        true. (Value: "testing")
 */
@property(nonatomic, copy, nullable) NSString *broadcastStatus;

/**
 *  The id parameter specifies the unique ID of the broadcast that is
 *  transitioning to another status.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. Note: This
 *  parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and perform actions on behalf of the channel specified in the parameter
 *  value, without having to provide authentication credentials for each
 *  separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The part parameter specifies a comma-separated list of one or more
 *  liveBroadcast resource properties that the API response will include. The
 *  part names that you can include in the parameter value are id, snippet,
 *  contentDetails, and status.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_LiveBroadcast.
 *
 *  Changes the status of a YouTube live broadcast and initiates any processes
 *  associated with the new status. For example, when you transition a
 *  broadcast's status to testing, YouTube starts to transmit video to that
 *  broadcast's monitor stream. Before calling this method, you should confirm
 *  that the value of the status.streamStatus property for the stream bound to
 *  your broadcast is active.
 *
 *  @param broadcastStatus The broadcastStatus parameter identifies the state to
 *    which the broadcast is changing. Note that to transition a broadcast to
 *    either the testing or live state, the status.streamStatus must be active
 *    for the stream that the broadcast is bound to.
 *  @param identifier The id parameter specifies the unique ID of the broadcast
 *    that is transitioning to another status.
 *  @param part The part parameter specifies a comma-separated list of one or
 *    more liveBroadcast resource properties that the API response will include.
 *    The part names that you can include in the parameter value are id,
 *    snippet, contentDetails, and status.
 *
 *  Likely values for @c broadcastStatus:
 *    @arg @c kGTLRYouTubeBroadcastStatusComplete The broadcast is over. YouTube
 *        stops transmitting video. (Value: "complete")
 *    @arg @c kGTLRYouTubeBroadcastStatusLive The broadcast is visible to its
 *        audience. YouTube transmits video to the broadcast's monitor stream
 *        and its broadcast stream. (Value: "live")
 *    @arg @c kGTLRYouTubeBroadcastStatusTesting Start testing the broadcast.
 *        YouTube transmits video to the broadcast's monitor stream. Note that
 *        you can only transition a broadcast to the testing state if its
 *        contentDetails.monitorStream.enableMonitorStream property is set to
 *        true. (Value: "testing")
 *
 *  @return GTLRYouTubeQuery_LiveBroadcastsTransition
 */
+ (instancetype)queryWithBroadcastStatus:(NSString *)broadcastStatus
                              identifier:(NSString *)identifier
                                    part:(NSString *)part;

@end

/**
 *  Updates a broadcast. For example, you could modify the broadcast settings
 *  defined in the liveBroadcast resource's contentDetails object.
 *
 *  Method: youtube.liveBroadcasts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveBroadcastsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveBroadcastsUpdateWithObject:part:]

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. Note: This
 *  parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and perform actions on behalf of the channel specified in the parameter
 *  value, without having to provide authentication credentials for each
 *  separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response will include.
 *  The part properties that you can include in the parameter value are id,
 *  snippet, contentDetails, and status.
 *  Note that this method will override the existing values for all of the
 *  mutable properties that are contained in any parts that the parameter value
 *  specifies. For example, a broadcast's privacy status is defined in the
 *  status part. As such, if your request is updating a private or unlisted
 *  broadcast, and the request's part parameter value includes the status part,
 *  the broadcast's privacy setting will be updated to whatever value the
 *  request body specifies. If the request body does not specify a value, the
 *  existing privacy setting will be removed and the broadcast will revert to
 *  the default privacy setting.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_LiveBroadcast.
 *
 *  Updates a broadcast. For example, you could modify the broadcast settings
 *  defined in the liveBroadcast resource's contentDetails object.
 *
 *  @param object The @c GTLRYouTube_LiveBroadcast to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *    The part properties that you can include in the parameter value are id,
 *    snippet, contentDetails, and status.
 *    Note that this method will override the existing values for all of the
 *    mutable properties that are contained in any parts that the parameter
 *    value specifies. For example, a broadcast's privacy status is defined in
 *    the status part. As such, if your request is updating a private or
 *    unlisted broadcast, and the request's part parameter value includes the
 *    status part, the broadcast's privacy setting will be updated to whatever
 *    value the request body specifies. If the request body does not specify a
 *    value, the existing privacy setting will be removed and the broadcast will
 *    revert to the default privacy setting.
 *
 *  @return GTLRYouTubeQuery_LiveBroadcastsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_LiveBroadcast *)object
                           part:(NSString *)part;

@end

/**
 *  Removes a chat ban.
 *
 *  Method: youtube.liveChatBans.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveChatBansDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveChatBansDeleteWithidentifier:]

/**
 *  The id parameter identifies the chat ban to remove. The value uniquely
 *  identifies both the ban and the chat.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes a chat ban.
 *
 *  @param identifier The id parameter identifies the chat ban to remove. The
 *    value uniquely identifies both the ban and the chat.
 *
 *  @return GTLRYouTubeQuery_LiveChatBansDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Adds a new ban to the chat.
 *
 *  Method: youtube.liveChatBans.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveChatBansInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveChatBansInsertWithObject:part:]

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response returns. Set the parameter value to snippet.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_LiveChatBan.
 *
 *  Adds a new ban to the chat.
 *
 *  @param object The @c GTLRYouTube_LiveChatBan to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response returns. Set the parameter value to
 *    snippet.
 *
 *  @return GTLRYouTubeQuery_LiveChatBansInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_LiveChatBan *)object
                           part:(NSString *)part;

@end

/**
 *  Deletes a chat message.
 *
 *  Method: youtube.liveChatMessages.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveChatMessagesDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveChatMessagesDeleteWithidentifier:]

/**
 *  The id parameter specifies the YouTube chat message ID of the resource that
 *  is being deleted.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a chat message.
 *
 *  @param identifier The id parameter specifies the YouTube chat message ID of
 *    the resource that is being deleted.
 *
 *  @return GTLRYouTubeQuery_LiveChatMessagesDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Adds a message to a live chat.
 *
 *  Method: youtube.liveChatMessages.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveChatMessagesInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveChatMessagesInsertWithObject:part:]

/**
 *  The part parameter serves two purposes. It identifies the properties that
 *  the write operation will set as well as the properties that the API response
 *  will include. Set the parameter value to snippet.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_LiveChatMessage.
 *
 *  Adds a message to a live chat.
 *
 *  @param object The @c GTLRYouTube_LiveChatMessage to include in the query.
 *  @param part The part parameter serves two purposes. It identifies the
 *    properties that the write operation will set as well as the properties
 *    that the API response will include. Set the parameter value to snippet.
 *
 *  @return GTLRYouTubeQuery_LiveChatMessagesInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_LiveChatMessage *)object
                           part:(NSString *)part;

@end

/**
 *  Lists live chat messages for a specific chat.
 *
 *  Method: youtube.liveChatMessages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_LiveChatMessagesList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveChatMessagesListWithliveChatId:part:]

/**
 *  The hl parameter instructs the API to retrieve localized resource metadata
 *  for a specific application language that the YouTube website supports. The
 *  parameter value must be a language code included in the list returned by the
 *  i18nLanguages.list method.
 *  If localized resource details are available in that language, the resource's
 *  snippet.localized object will contain the localized values. However, if
 *  localized details are not available, the snippet.localized object will
 *  contain resource details in the resource's default language.
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  The liveChatId parameter specifies the ID of the chat whose messages will be
 *  returned.
 */
@property(nonatomic, copy, nullable) NSString *liveChatId;

/**
 *  The maxResults parameter specifies the maximum number of messages that
 *  should be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 500 (from the
 *        range 200..2000).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The pageToken parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken property identify
 *  other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The part parameter specifies the liveChatComment resource parts that the API
 *  response will include. Supported values are id and snippet.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  The profileImageSize parameter specifies the size of the user profile
 *  pictures that should be returned in the result set. Default: 88.
 *
 *  @note The documented range is 16..720.
 */
@property(nonatomic, assign) NSUInteger profileImageSize;

/**
 *  Fetches a @c GTLRYouTube_LiveChatMessageListResponse.
 *
 *  Lists live chat messages for a specific chat.
 *
 *  @param liveChatId The liveChatId parameter specifies the ID of the chat
 *    whose messages will be returned.
 *  @param part The part parameter specifies the liveChatComment resource parts
 *    that the API response will include. Supported values are id and snippet.
 *
 *  @return GTLRYouTubeQuery_LiveChatMessagesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithLiveChatId:(NSString *)liveChatId
                               part:(NSString *)part;

@end

/**
 *  Removes a chat moderator.
 *
 *  Method: youtube.liveChatModerators.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveChatModeratorsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveChatModeratorsDeleteWithidentifier:]

/**
 *  The id parameter identifies the chat moderator to remove. The value uniquely
 *  identifies both the moderator and the chat.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes a chat moderator.
 *
 *  @param identifier The id parameter identifies the chat moderator to remove.
 *    The value uniquely identifies both the moderator and the chat.
 *
 *  @return GTLRYouTubeQuery_LiveChatModeratorsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Adds a new moderator for the chat.
 *
 *  Method: youtube.liveChatModerators.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveChatModeratorsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveChatModeratorsInsertWithObject:part:]

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response returns. Set the parameter value to snippet.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_LiveChatModerator.
 *
 *  Adds a new moderator for the chat.
 *
 *  @param object The @c GTLRYouTube_LiveChatModerator to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response returns. Set the parameter value to
 *    snippet.
 *
 *  @return GTLRYouTubeQuery_LiveChatModeratorsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_LiveChatModerator *)object
                           part:(NSString *)part;

@end

/**
 *  Lists moderators for a live chat.
 *
 *  Method: youtube.liveChatModerators.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_LiveChatModeratorsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveChatModeratorsListWithliveChatId:part:]

/**
 *  The liveChatId parameter specifies the YouTube live chat for which the API
 *  should return moderators.
 */
@property(nonatomic, copy, nullable) NSString *liveChatId;

/**
 *  The maxResults parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5 (from the
 *        range 0..50).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The pageToken parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The part parameter specifies the liveChatModerator resource parts that the
 *  API response will include. Supported values are id and snippet.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_LiveChatModeratorListResponse.
 *
 *  Lists moderators for a live chat.
 *
 *  @param liveChatId The liveChatId parameter specifies the YouTube live chat
 *    for which the API should return moderators.
 *  @param part The part parameter specifies the liveChatModerator resource
 *    parts that the API response will include. Supported values are id and
 *    snippet.
 *
 *  @return GTLRYouTubeQuery_LiveChatModeratorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithLiveChatId:(NSString *)liveChatId
                               part:(NSString *)part;

@end

/**
 *  Deletes a video stream.
 *
 *  Method: youtube.liveStreams.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveStreamsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveStreamsDeleteWithidentifier:]

/**
 *  The id parameter specifies the YouTube live stream ID for the resource that
 *  is being deleted.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. Note: This
 *  parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and perform actions on behalf of the channel specified in the parameter
 *  value, without having to provide authentication credentials for each
 *  separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a video stream.
 *
 *  @param identifier The id parameter specifies the YouTube live stream ID for
 *    the resource that is being deleted.
 *
 *  @return GTLRYouTubeQuery_LiveStreamsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Creates a video stream. The stream enables you to send your video to
 *  YouTube, which can then broadcast the video to your audience.
 *
 *  Method: youtube.liveStreams.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveStreamsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveStreamsInsertWithObject:part:]

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. Note: This
 *  parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and perform actions on behalf of the channel specified in the parameter
 *  value, without having to provide authentication credentials for each
 *  separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response will include.
 *  The part properties that you can include in the parameter value are id,
 *  snippet, cdn, and status.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_LiveStream.
 *
 *  Creates a video stream. The stream enables you to send your video to
 *  YouTube, which can then broadcast the video to your audience.
 *
 *  @param object The @c GTLRYouTube_LiveStream to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *    The part properties that you can include in the parameter value are id,
 *    snippet, cdn, and status.
 *
 *  @return GTLRYouTubeQuery_LiveStreamsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_LiveStream *)object
                           part:(NSString *)part;

@end

/**
 *  Returns a list of video streams that match the API request parameters.
 *
 *  Method: youtube.liveStreams.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_LiveStreamsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveStreamsListWithpart:]

/**
 *  The id parameter specifies a comma-separated list of YouTube stream IDs that
 *  identify the streams being retrieved. In a liveStream resource, the id
 *  property specifies the stream's ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The maxResults parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5 (from the
 *        range 0..50).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The mine parameter can be used to instruct the API to only return streams
 *  owned by the authenticated user. Set the parameter value to true to only
 *  retrieve your own streams.
 */
@property(nonatomic, assign) BOOL mine;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. Note: This
 *  parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and perform actions on behalf of the channel specified in the parameter
 *  value, without having to provide authentication credentials for each
 *  separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The pageToken parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The part parameter specifies a comma-separated list of one or more
 *  liveStream resource properties that the API response will include. The part
 *  names that you can include in the parameter value are id, snippet, cdn, and
 *  status.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_LiveStreamListResponse.
 *
 *  Returns a list of video streams that match the API request parameters.
 *
 *  @param part The part parameter specifies a comma-separated list of one or
 *    more liveStream resource properties that the API response will include.
 *    The part names that you can include in the parameter value are id,
 *    snippet, cdn, and status.
 *
 *  @return GTLRYouTubeQuery_LiveStreamsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Updates a video stream. If the properties that you want to change cannot be
 *  updated, then you need to create a new stream with the proper settings.
 *
 *  Method: youtube.liveStreams.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 */
@interface GTLRYouTubeQuery_LiveStreamsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForLiveStreamsUpdateWithObject:part:]

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. Note: This
 *  parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and perform actions on behalf of the channel specified in the parameter
 *  value, without having to provide authentication credentials for each
 *  separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response will include.
 *  The part properties that you can include in the parameter value are id,
 *  snippet, cdn, and status.
 *  Note that this method will override the existing values for all of the
 *  mutable properties that are contained in any parts that the parameter value
 *  specifies. If the request body does not specify a value for a mutable
 *  property, the existing value for that property will be removed.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_LiveStream.
 *
 *  Updates a video stream. If the properties that you want to change cannot be
 *  updated, then you need to create a new stream with the proper settings.
 *
 *  @param object The @c GTLRYouTube_LiveStream to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *    The part properties that you can include in the parameter value are id,
 *    snippet, cdn, and status.
 *    Note that this method will override the existing values for all of the
 *    mutable properties that are contained in any parts that the parameter
 *    value specifies. If the request body does not specify a value for a
 *    mutable property, the existing value for that property will be removed.
 *
 *  @return GTLRYouTubeQuery_LiveStreamsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_LiveStream *)object
                           part:(NSString *)part;

@end

/**
 *  Deletes a playlist item.
 *
 *  Method: youtube.playlistItems.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_PlaylistItemsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForPlaylistItemsDeleteWithidentifier:]

/**
 *  The id parameter specifies the YouTube playlist item ID for the playlist
 *  item that is being deleted. In a playlistItem resource, the id property
 *  specifies the playlist item's ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a playlist item.
 *
 *  @param identifier The id parameter specifies the YouTube playlist item ID
 *    for the playlist item that is being deleted. In a playlistItem resource,
 *    the id property specifies the playlist item's ID.
 *
 *  @return GTLRYouTubeQuery_PlaylistItemsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Adds a resource to a playlist.
 *
 *  Method: youtube.playlistItems.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_PlaylistItemsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForPlaylistItemsInsertWithObject:part:]

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response will include.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_PlaylistItem.
 *
 *  Adds a resource to a playlist.
 *
 *  @param object The @c GTLRYouTube_PlaylistItem to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *
 *  @return GTLRYouTubeQuery_PlaylistItemsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_PlaylistItem *)object
                           part:(NSString *)part;

@end

/**
 *  Returns a collection of playlist items that match the API request
 *  parameters. You can retrieve all of the playlist items in a specified
 *  playlist or retrieve one or more playlist items by their unique IDs.
 *
 *  Method: youtube.playlistItems.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_PlaylistItemsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForPlaylistItemsListWithpart:]

/**
 *  The id parameter specifies a comma-separated list of one or more unique
 *  playlist item IDs.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The maxResults parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5 (from the
 *        range 0..50).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The pageToken parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The part parameter specifies a comma-separated list of one or more
 *  playlistItem resource properties that the API response will include.
 *  If the parameter identifies a property that contains child properties, the
 *  child properties will be included in the response. For example, in a
 *  playlistItem resource, the snippet property contains numerous fields,
 *  including the title, description, position, and resourceId properties. As
 *  such, if you set part=snippet, the API response will contain all of those
 *  properties.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  The playlistId parameter specifies the unique ID of the playlist for which
 *  you want to retrieve playlist items. Note that even though this is an
 *  optional parameter, every request to retrieve playlist items must specify a
 *  value for either the id parameter or the playlistId parameter.
 */
@property(nonatomic, copy, nullable) NSString *playlistId;

/**
 *  The videoId parameter specifies that the request should return only the
 *  playlist items that contain the specified video.
 */
@property(nonatomic, copy, nullable) NSString *videoId;

/**
 *  Fetches a @c GTLRYouTube_PlaylistItemListResponse.
 *
 *  Returns a collection of playlist items that match the API request
 *  parameters. You can retrieve all of the playlist items in a specified
 *  playlist or retrieve one or more playlist items by their unique IDs.
 *
 *  @param part The part parameter specifies a comma-separated list of one or
 *    more playlistItem resource properties that the API response will include.
 *    If the parameter identifies a property that contains child properties, the
 *    child properties will be included in the response. For example, in a
 *    playlistItem resource, the snippet property contains numerous fields,
 *    including the title, description, position, and resourceId properties. As
 *    such, if you set part=snippet, the API response will contain all of those
 *    properties.
 *
 *  @return GTLRYouTubeQuery_PlaylistItemsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Modifies a playlist item. For example, you could update the item's position
 *  in the playlist.
 *
 *  Method: youtube.playlistItems.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_PlaylistItemsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForPlaylistItemsUpdateWithObject:part:]

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response will include.
 *  Note that this method will override the existing values for all of the
 *  mutable properties that are contained in any parts that the parameter value
 *  specifies. For example, a playlist item can specify a start time and end
 *  time, which identify the times portion of the video that should play when
 *  users watch the video in the playlist. If your request is updating a
 *  playlist item that sets these values, and the request's part parameter value
 *  includes the contentDetails part, the playlist item's start and end times
 *  will be updated to whatever value the request body specifies. If the request
 *  body does not specify values, the existing start and end times will be
 *  removed and replaced with the default settings.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_PlaylistItem.
 *
 *  Modifies a playlist item. For example, you could update the item's position
 *  in the playlist.
 *
 *  @param object The @c GTLRYouTube_PlaylistItem to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *    Note that this method will override the existing values for all of the
 *    mutable properties that are contained in any parts that the parameter
 *    value specifies. For example, a playlist item can specify a start time and
 *    end time, which identify the times portion of the video that should play
 *    when users watch the video in the playlist. If your request is updating a
 *    playlist item that sets these values, and the request's part parameter
 *    value includes the contentDetails part, the playlist item's start and end
 *    times will be updated to whatever value the request body specifies. If the
 *    request body does not specify values, the existing start and end times
 *    will be removed and replaced with the default settings.
 *
 *  @return GTLRYouTubeQuery_PlaylistItemsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_PlaylistItem *)object
                           part:(NSString *)part;

@end

/**
 *  Deletes a playlist.
 *
 *  Method: youtube.playlists.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_PlaylistsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForPlaylistsDeleteWithidentifier:]

/**
 *  The id parameter specifies the YouTube playlist ID for the playlist that is
 *  being deleted. In a playlist resource, the id property specifies the
 *  playlist's ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a playlist.
 *
 *  @param identifier The id parameter specifies the YouTube playlist ID for the
 *    playlist that is being deleted. In a playlist resource, the id property
 *    specifies the playlist's ID.
 *
 *  @return GTLRYouTubeQuery_PlaylistsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Creates a playlist.
 *
 *  Method: youtube.playlists.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_PlaylistsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForPlaylistsInsertWithObject:part:]

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. Note: This
 *  parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and perform actions on behalf of the channel specified in the parameter
 *  value, without having to provide authentication credentials for each
 *  separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response will include.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_Playlist.
 *
 *  Creates a playlist.
 *
 *  @param object The @c GTLRYouTube_Playlist to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *
 *  @return GTLRYouTubeQuery_PlaylistsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Playlist *)object
                           part:(NSString *)part;

@end

/**
 *  Returns a collection of playlists that match the API request parameters. For
 *  example, you can retrieve all playlists that the authenticated user owns, or
 *  you can retrieve one or more playlists by their unique IDs.
 *
 *  Method: youtube.playlists.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_PlaylistsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForPlaylistsListWithpart:]

/**
 *  This value indicates that the API should only return the specified channel's
 *  playlists.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  The hl parameter should be used for filter out the properties that are not
 *  in the given language. Used for the snippet part.
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  The id parameter specifies a comma-separated list of the YouTube playlist
 *  ID(s) for the resource(s) that are being retrieved. In a playlist resource,
 *  the id property specifies the playlist's YouTube playlist ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The maxResults parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5 (from the
 *        range 0..50).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Set this parameter's value to true to instruct the API to only return
 *  playlists owned by the authenticated user.
 */
@property(nonatomic, assign) BOOL mine;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. Note: This
 *  parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and perform actions on behalf of the channel specified in the parameter
 *  value, without having to provide authentication credentials for each
 *  separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The pageToken parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The part parameter specifies a comma-separated list of one or more playlist
 *  resource properties that the API response will include.
 *  If the parameter identifies a property that contains child properties, the
 *  child properties will be included in the response. For example, in a
 *  playlist resource, the snippet property contains properties like author,
 *  title, description, tags, and timeCreated. As such, if you set part=snippet,
 *  the API response will contain all of those properties.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_PlaylistListResponse.
 *
 *  Returns a collection of playlists that match the API request parameters. For
 *  example, you can retrieve all playlists that the authenticated user owns, or
 *  you can retrieve one or more playlists by their unique IDs.
 *
 *  @param part The part parameter specifies a comma-separated list of one or
 *    more playlist resource properties that the API response will include.
 *    If the parameter identifies a property that contains child properties, the
 *    child properties will be included in the response. For example, in a
 *    playlist resource, the snippet property contains properties like author,
 *    title, description, tags, and timeCreated. As such, if you set
 *    part=snippet, the API response will contain all of those properties.
 *
 *  @return GTLRYouTubeQuery_PlaylistsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Modifies a playlist. For example, you could change a playlist's title,
 *  description, or privacy status.
 *
 *  Method: youtube.playlists.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_PlaylistsUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForPlaylistsUpdateWithObject:part:]

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response will include.
 *  Note that this method will override the existing values for mutable
 *  properties that are contained in any parts that the request body specifies.
 *  For example, a playlist's description is contained in the snippet part,
 *  which must be included in the request body. If the request does not specify
 *  a value for the snippet.description property, the playlist's existing
 *  description will be deleted.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_Playlist.
 *
 *  Modifies a playlist. For example, you could change a playlist's title,
 *  description, or privacy status.
 *
 *  @param object The @c GTLRYouTube_Playlist to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *    Note that this method will override the existing values for mutable
 *    properties that are contained in any parts that the request body
 *    specifies. For example, a playlist's description is contained in the
 *    snippet part, which must be included in the request body. If the request
 *    does not specify a value for the snippet.description property, the
 *    playlist's existing description will be deleted.
 *
 *  @return GTLRYouTubeQuery_PlaylistsUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Playlist *)object
                           part:(NSString *)part;

@end

/**
 *  Returns a collection of search results that match the query parameters
 *  specified in the API request. By default, a search result set identifies
 *  matching video, channel, and playlist resources, but you can also configure
 *  queries to only retrieve a specific type of resource.
 *
 *  Method: youtube.search.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_SearchList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForSearchListWithpart:]

/**
 *  The channelId parameter indicates that the API response should only contain
 *  resources created by the channel
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  The channelType parameter lets you restrict a search to a particular type of
 *  channel.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeChannelTypeAny Return all channels. (Value: "any")
 *    @arg @c kGTLRYouTubeChannelTypeShow Only retrieve shows. (Value: "show")
 */
@property(nonatomic, copy, nullable) NSString *channelType;

/**
 *  The eventType parameter restricts a search to broadcast events. If you
 *  specify a value for this parameter, you must also set the type parameter's
 *  value to video.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeEventTypeCompleted Only include completed broadcasts.
 *        (Value: "completed")
 *    @arg @c kGTLRYouTubeEventTypeLive Only include active broadcasts. (Value:
 *        "live")
 *    @arg @c kGTLRYouTubeEventTypeUpcoming Only include upcoming broadcasts.
 *        (Value: "upcoming")
 */
@property(nonatomic, copy, nullable) NSString *eventType;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The forContentOwner parameter restricts the search to only retrieve
 *  resources owned by the content owner specified by the onBehalfOfContentOwner
 *  parameter. The user must be authenticated using a CMS account linked to the
 *  specified content owner and onBehalfOfContentOwner must be provided.
 */
@property(nonatomic, assign) BOOL forContentOwner;

/**
 *  The forDeveloper parameter restricts the search to only retrieve videos
 *  uploaded via the developer's application or website. The API server uses the
 *  request's authorization credentials to identify the developer. Therefore, a
 *  developer can restrict results to videos uploaded through the developer's
 *  own app or website but not to videos uploaded through other apps or sites.
 */
@property(nonatomic, assign) BOOL forDeveloper;

/**
 *  The forMine parameter restricts the search to only retrieve videos owned by
 *  the authenticated user. If you set this parameter to true, then the type
 *  parameter's value must also be set to video.
 */
@property(nonatomic, assign) BOOL forMine;

/**
 *  The location parameter, in conjunction with the locationRadius parameter,
 *  defines a circular geographic area and also restricts a search to videos
 *  that specify, in their metadata, a geographic location that falls within
 *  that area. The parameter value is a string that specifies latitude/longitude
 *  coordinates e.g. (37.42307,-122.08427).
 *  - The location parameter value identifies the point at the center of the
 *  area.
 *  - The locationRadius parameter specifies the maximum distance that the
 *  location associated with a video can be from that point for the video to
 *  still be included in the search results.The API returns an error if your
 *  request specifies a value for the location parameter but does not also
 *  specify a value for the locationRadius parameter.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  The locationRadius parameter, in conjunction with the location parameter,
 *  defines a circular geographic area.
 *  The parameter value must be a floating point number followed by a
 *  measurement unit. Valid measurement units are m, km, ft, and mi. For
 *  example, valid parameter values include 1500m, 5km, 10000ft, and 0.75mi. The
 *  API does not support locationRadius parameter values larger than 1000
 *  kilometers.
 *  Note: See the definition of the location parameter for more information.
 */
@property(nonatomic, copy, nullable) NSString *locationRadius;

/**
 *  The maxResults parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5 (from the
 *        range 0..50).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The order parameter specifies the method that will be used to order
 *  resources in the API response.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeOrderDate Resources are sorted in reverse
 *        chronological order based on the date they were created. (Value:
 *        "date")
 *    @arg @c kGTLRYouTubeOrderRating Resources are sorted from highest to
 *        lowest rating. (Value: "rating")
 *    @arg @c kGTLRYouTubeOrderRelevance Resources are sorted based on their
 *        relevance to the search query. This is the default value for this
 *        parameter. (Value: "relevance")
 *    @arg @c kGTLRYouTubeOrderTitle Resources are sorted alphabetically by
 *        title. (Value: "title")
 *    @arg @c kGTLRYouTubeOrderVideoCount Channels are sorted in descending
 *        order of their number of uploaded videos. (Value: "videoCount")
 *    @arg @c kGTLRYouTubeOrderViewCount Resources are sorted from highest to
 *        lowest number of views. (Value: "viewCount")
 *
 *  @note If not set, the documented server-side default will be
 *        "SEARCH_SORT_RELEVANCE".
 */
@property(nonatomic, copy, nullable) NSString *order;

/**
 *  The pageToken parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The part parameter specifies a comma-separated list of one or more search
 *  resource properties that the API response will include. Set the parameter
 *  value to snippet.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  The publishedAfter parameter indicates that the API response should only
 *  contain resources created after the specified time. The value is an RFC 3339
 *  formatted date-time value (1970-01-01T00:00:00Z).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedAfter;

/**
 *  The publishedBefore parameter indicates that the API response should only
 *  contain resources created before the specified time. The value is an RFC
 *  3339 formatted date-time value (1970-01-01T00:00:00Z).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishedBefore;

/**
 *  The q parameter specifies the query term to search for.
 *  Your request can also use the Boolean NOT (-) and OR (|) operators to
 *  exclude videos or to find videos that are associated with one of several
 *  search terms. For example, to search for videos matching either "boating" or
 *  "sailing", set the q parameter value to boating|sailing. Similarly, to
 *  search for videos matching either "boating" or "sailing" but not "fishing",
 *  set the q parameter value to boating|sailing -fishing. Note that the pipe
 *  character must be URL-escaped when it is sent in your API request. The
 *  URL-escaped value for the pipe character is %7C.
 */
@property(nonatomic, copy, nullable) NSString *q;

/**
 *  The regionCode parameter instructs the API to return search results for the
 *  specified country. The parameter value is an ISO 3166-1 alpha-2 country
 *  code.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  The relatedToVideoId parameter retrieves a list of videos that are related
 *  to the video that the parameter value identifies. The parameter value must
 *  be set to a YouTube video ID and, if you are using this parameter, the type
 *  parameter must be set to video.
 */
@property(nonatomic, copy, nullable) NSString *relatedToVideoId;

/**
 *  The relevanceLanguage parameter instructs the API to return search results
 *  that are most relevant to the specified language. The parameter value is
 *  typically an ISO 639-1 two-letter language code. However, you should use the
 *  values zh-Hans for simplified Chinese and zh-Hant for traditional Chinese.
 *  Please note that results in other languages will still be returned if they
 *  are highly relevant to the search query term.
 */
@property(nonatomic, copy, nullable) NSString *relevanceLanguage;

/**
 *  The safeSearch parameter indicates whether the search results should include
 *  restricted content as well as standard content.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeSafeSearchModerate YouTube will filter some content
 *        from search results and, at the least, will filter content that is
 *        restricted in your locale. Based on their content, search results
 *        could be removed from search results or demoted in search results.
 *        This is the default parameter value. (Value: "moderate")
 *    @arg @c kGTLRYouTubeSafeSearchNone YouTube will not filter the search
 *        result set. (Value: "none")
 *    @arg @c kGTLRYouTubeSafeSearchStrict YouTube will try to exclude all
 *        restricted content from the search result set. Based on their content,
 *        search results could be removed from search results or demoted in
 *        search results. (Value: "strict")
 */
@property(nonatomic, copy, nullable) NSString *safeSearch;

/**
 *  The topicId parameter indicates that the API response should only contain
 *  resources associated with the specified topic. The value identifies a
 *  Freebase topic ID.
 */
@property(nonatomic, copy, nullable) NSString *topicId;

/**
 *  The type parameter restricts a search query to only retrieve a particular
 *  type of resource. The value is a comma-separated list of resource types.
 *
 *  @note If not set, the documented server-side default will be
 *        video,channel,playlist.
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The videoCaption parameter indicates whether the API should filter video
 *  search results based on whether they have captions. If you specify a value
 *  for this parameter, you must also set the type parameter's value to video.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeVideoCaptionAny Do not filter results based on caption
 *        availability. (Value: "any")
 *    @arg @c kGTLRYouTubeVideoCaptionClosedCaption Only include videos that
 *        have captions. (Value: "closedCaption")
 *    @arg @c kGTLRYouTubeVideoCaptionNone Only include videos that do not have
 *        captions. (Value: "none")
 */
@property(nonatomic, copy, nullable) NSString *videoCaption;

/**
 *  The videoCategoryId parameter filters video search results based on their
 *  category. If you specify a value for this parameter, you must also set the
 *  type parameter's value to video.
 */
@property(nonatomic, copy, nullable) NSString *videoCategoryId;

/**
 *  The videoDefinition parameter lets you restrict a search to only include
 *  either high definition (HD) or standard definition (SD) videos. HD videos
 *  are available for playback in at least 720p, though higher resolutions, like
 *  1080p, might also be available. If you specify a value for this parameter,
 *  you must also set the type parameter's value to video.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeVideoDefinitionAny Return all videos, regardless of
 *        their resolution. (Value: "any")
 *    @arg @c kGTLRYouTubeVideoDefinitionHigh Only retrieve HD videos. (Value:
 *        "high")
 *    @arg @c kGTLRYouTubeVideoDefinitionStandard Only retrieve videos in
 *        standard definition. (Value: "standard")
 */
@property(nonatomic, copy, nullable) NSString *videoDefinition;

/**
 *  The videoDimension parameter lets you restrict a search to only retrieve 2D
 *  or 3D videos. If you specify a value for this parameter, you must also set
 *  the type parameter's value to video.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeVideoDimensionX2d Restrict search results to exclude
 *        3D videos. (Value: "2d")
 *    @arg @c kGTLRYouTubeVideoDimensionX3d Restrict search results to only
 *        include 3D videos. (Value: "3d")
 *    @arg @c kGTLRYouTubeVideoDimensionAny Include both 3D and non-3D videos in
 *        returned results. This is the default value. (Value: "any")
 */
@property(nonatomic, copy, nullable) NSString *videoDimension;

/**
 *  The videoDuration parameter filters video search results based on their
 *  duration. If you specify a value for this parameter, you must also set the
 *  type parameter's value to video.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeVideoDurationAny Do not filter video search results
 *        based on their duration. This is the default value. (Value: "any")
 *    @arg @c kGTLRYouTubeVideoDurationLong Only include videos longer than 20
 *        minutes. (Value: "long")
 *    @arg @c kGTLRYouTubeVideoDurationMedium Only include videos that are
 *        between four and 20 minutes long (inclusive). (Value: "medium")
 *    @arg @c kGTLRYouTubeVideoDurationShort Only include videos that are less
 *        than four minutes long. (Value: "short")
 */
@property(nonatomic, copy, nullable) NSString *videoDuration;

/**
 *  The videoEmbeddable parameter lets you to restrict a search to only videos
 *  that can be embedded into a webpage. If you specify a value for this
 *  parameter, you must also set the type parameter's value to video.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeVideoEmbeddableAny Return all videos, embeddable or
 *        not. (Value: "any")
 *    @arg @c kGTLRYouTubeVideoEmbeddableTrue Only retrieve embeddable videos.
 *        (Value: "true")
 */
@property(nonatomic, copy, nullable) NSString *videoEmbeddable;

/**
 *  The videoLicense parameter filters search results to only include videos
 *  with a particular license. YouTube lets video uploaders choose to attach
 *  either the Creative Commons license or the standard YouTube license to each
 *  of their videos. If you specify a value for this parameter, you must also
 *  set the type parameter's value to video.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeVideoLicenseAny Return all videos, regardless of which
 *        license they have, that match the query parameters. (Value: "any")
 *    @arg @c kGTLRYouTubeVideoLicenseCreativeCommon Only return videos that
 *        have a Creative Commons license. Users can reuse videos with this
 *        license in other videos that they create. Learn more. (Value:
 *        "creativeCommon")
 *    @arg @c kGTLRYouTubeVideoLicenseYoutube Only return videos that have the
 *        standard YouTube license. (Value: "youtube")
 */
@property(nonatomic, copy, nullable) NSString *videoLicense;

/**
 *  The videoSyndicated parameter lets you to restrict a search to only videos
 *  that can be played outside youtube.com. If you specify a value for this
 *  parameter, you must also set the type parameter's value to video.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeVideoSyndicatedAny Return all videos, syndicated or
 *        not. (Value: "any")
 *    @arg @c kGTLRYouTubeVideoSyndicatedTrue Only retrieve syndicated videos.
 *        (Value: "true")
 */
@property(nonatomic, copy, nullable) NSString *videoSyndicated;

/**
 *  The videoType parameter lets you restrict a search to a particular type of
 *  videos. If you specify a value for this parameter, you must also set the
 *  type parameter's value to video.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeVideoTypeAny Return all videos. (Value: "any")
 *    @arg @c kGTLRYouTubeVideoTypeEpisode Only retrieve episodes of shows.
 *        (Value: "episode")
 *    @arg @c kGTLRYouTubeVideoTypeMovie Only retrieve movies. (Value: "movie")
 */
@property(nonatomic, copy, nullable) NSString *videoType;

/**
 *  Fetches a @c GTLRYouTube_SearchListResponse.
 *
 *  Returns a collection of search results that match the query parameters
 *  specified in the API request. By default, a search result set identifies
 *  matching video, channel, and playlist resources, but you can also configure
 *  queries to only retrieve a specific type of resource.
 *
 *  @param part The part parameter specifies a comma-separated list of one or
 *    more search resource properties that the API response will include. Set
 *    the parameter value to snippet.
 *
 *  @return GTLRYouTubeQuery_SearchList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Lists sponsors for a channel.
 *
 *  Method: youtube.sponsors.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_SponsorsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForSponsorsListWithpart:]

/**
 *  The filter parameter specifies which channel sponsors to return.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeFilterAll Return all sponsors, from newest to oldest.
 *        (Value: "all")
 *    @arg @c kGTLRYouTubeFilterNewest Return the most recent sponsors, from
 *        newest to oldest. (Value: "newest")
 *
 *  @note If not set, the documented server-side default will be "POLL_NEWEST".
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The maxResults parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5 (from the
 *        range 0..50).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The pageToken parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The part parameter specifies the sponsor resource parts that the API
 *  response will include. Supported values are id and snippet.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_SponsorListResponse.
 *
 *  Lists sponsors for a channel.
 *
 *  @param part The part parameter specifies the sponsor resource parts that the
 *    API response will include. Supported values are id and snippet.
 *
 *  @return GTLRYouTubeQuery_SponsorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Deletes a subscription.
 *
 *  Method: youtube.subscriptions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_SubscriptionsDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForSubscriptionsDeleteWithidentifier:]

/**
 *  The id parameter specifies the YouTube subscription ID for the resource that
 *  is being deleted. In a subscription resource, the id property specifies the
 *  YouTube subscription ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a subscription.
 *
 *  @param identifier The id parameter specifies the YouTube subscription ID for
 *    the resource that is being deleted. In a subscription resource, the id
 *    property specifies the YouTube subscription ID.
 *
 *  @return GTLRYouTubeQuery_SubscriptionsDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Adds a subscription for the authenticated user's channel.
 *
 *  Method: youtube.subscriptions.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_SubscriptionsInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForSubscriptionsInsertWithObject:part:]

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response will include.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_Subscription.
 *
 *  Adds a subscription for the authenticated user's channel.
 *
 *  @param object The @c GTLRYouTube_Subscription to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *
 *  @return GTLRYouTubeQuery_SubscriptionsInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Subscription *)object
                           part:(NSString *)part;

@end

/**
 *  Returns subscription resources that match the API request criteria.
 *
 *  Method: youtube.subscriptions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_SubscriptionsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForSubscriptionsListWithpart:]

/**
 *  The channelId parameter specifies a YouTube channel ID. The API will only
 *  return that channel's subscriptions.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  The forChannelId parameter specifies a comma-separated list of channel IDs.
 *  The API response will then only contain subscriptions matching those
 *  channels.
 */
@property(nonatomic, copy, nullable) NSString *forChannelId;

/**
 *  The id parameter specifies a comma-separated list of the YouTube
 *  subscription ID(s) for the resource(s) that are being retrieved. In a
 *  subscription resource, the id property specifies the YouTube subscription
 *  ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The maxResults parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5 (from the
 *        range 0..50).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Set this parameter's value to true to retrieve a feed of the authenticated
 *  user's subscriptions.
 */
@property(nonatomic, assign) BOOL mine;

/**
 *  Set this parameter's value to true to retrieve a feed of the subscribers of
 *  the authenticated user in reverse chronological order (newest first).
 */
@property(nonatomic, assign) BOOL myRecentSubscribers;

/**
 *  Set this parameter's value to true to retrieve a feed of the subscribers of
 *  the authenticated user in no particular order.
 */
@property(nonatomic, assign) BOOL mySubscribers;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. Note: This
 *  parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and perform actions on behalf of the channel specified in the parameter
 *  value, without having to provide authentication credentials for each
 *  separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The order parameter specifies the method that will be used to sort resources
 *  in the API response.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeOrderAlphabetical Sort alphabetically. (Value:
 *        "alphabetical")
 *    @arg @c kGTLRYouTubeOrderRelevance Sort by relevance. (Value: "relevance")
 *    @arg @c kGTLRYouTubeOrderUnread Sort by order of activity. (Value:
 *        "unread")
 *
 *  @note If not set, the documented server-side default will be
 *        "SUBSCRIPTION_ORDER_RELEVANCE".
 */
@property(nonatomic, copy, nullable) NSString *order;

/**
 *  The pageToken parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The part parameter specifies a comma-separated list of one or more
 *  subscription resource properties that the API response will include.
 *  If the parameter identifies a property that contains child properties, the
 *  child properties will be included in the response. For example, in a
 *  subscription resource, the snippet property contains other properties, such
 *  as a display title for the subscription. If you set part=snippet, the API
 *  response will also contain all of those nested properties.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_SubscriptionListResponse.
 *
 *  Returns subscription resources that match the API request criteria.
 *
 *  @param part The part parameter specifies a comma-separated list of one or
 *    more subscription resource properties that the API response will include.
 *    If the parameter identifies a property that contains child properties, the
 *    child properties will be included in the response. For example, in a
 *    subscription resource, the snippet property contains other properties,
 *    such as a display title for the subscription. If you set part=snippet, the
 *    API response will also contain all of those nested properties.
 *
 *  @return GTLRYouTubeQuery_SubscriptionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Lists Super Chat events for a channel.
 *
 *  Method: youtube.superChatEvents.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_SuperChatEventsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForSuperChatEventsListWithpart:]

/**
 *  The hl parameter instructs the API to retrieve localized resource metadata
 *  for a specific application language that the YouTube website supports. The
 *  parameter value must be a language code included in the list returned by the
 *  i18nLanguages.list method.
 *  If localized resource details are available in that language, the resource's
 *  snippet.localized object will contain the localized values. However, if
 *  localized details are not available, the snippet.localized object will
 *  contain resource details in the resource's default language.
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  The maxResults parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *
 *  @note If not set, the documented server-side default will be 5 (from the
 *        range 1..50).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The pageToken parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The part parameter specifies the superChatEvent resource parts that the API
 *  response will include. Supported values are id and snippet.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_SuperChatEventListResponse.
 *
 *  Lists Super Chat events for a channel.
 *
 *  @param part The part parameter specifies the superChatEvent resource parts
 *    that the API response will include. Supported values are id and snippet.
 *
 *  @return GTLRYouTubeQuery_SuperChatEventsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Uploads a custom video thumbnail to YouTube and sets it for a video.
 *
 *  Method: youtube.thumbnails.set
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeUpload
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_ThumbnailsSet : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForThumbnailsSetWithvideoId:]

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The videoId parameter specifies a YouTube video ID for which the custom
 *  video thumbnail is being provided.
 */
@property(nonatomic, copy, nullable) NSString *videoId;

/**
 *  Fetches a @c GTLRYouTube_ThumbnailSetResponse.
 *
 *  Uploads a custom video thumbnail to YouTube and sets it for a video.
 *
 *  @param videoId The videoId parameter specifies a YouTube video ID for which
 *    the custom video thumbnail is being provided.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    2MB. Accepted MIME types: application/octet-stream, image/jpeg, image/png
 *
 *  @return GTLRYouTubeQuery_ThumbnailsSet
 */
+ (instancetype)queryWithVideoId:(NSString *)videoId
                uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Returns a list of abuse reasons that can be used for reporting abusive
 *  videos.
 *
 *  Method: youtube.videoAbuseReportReasons.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 */
@interface GTLRYouTubeQuery_VideoAbuseReportReasonsList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideoAbuseReportReasonsListWithpart:]

/**
 *  The hl parameter specifies the language that should be used for text values
 *  in the API response.
 *
 *  @note If not set, the documented server-side default will be en_US.
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  The part parameter specifies the videoCategory resource parts that the API
 *  response will include. Supported values are id and snippet.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_VideoAbuseReportReasonListResponse.
 *
 *  Returns a list of abuse reasons that can be used for reporting abusive
 *  videos.
 *
 *  @param part The part parameter specifies the videoCategory resource parts
 *    that the API response will include. Supported values are id and snippet.
 *
 *  @return GTLRYouTubeQuery_VideoAbuseReportReasonsList
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Returns a list of categories that can be associated with YouTube videos.
 *
 *  Method: youtube.videoCategories.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_VideoCategoriesList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideoCategoriesListWithpart:]

/**
 *  The hl parameter specifies the language that should be used for text values
 *  in the API response.
 *
 *  @note If not set, the documented server-side default will be en_US.
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  The id parameter specifies a comma-separated list of video category IDs for
 *  the resources that you are retrieving.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The part parameter specifies the videoCategory resource properties that the
 *  API response will include. Set the parameter value to snippet.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  The regionCode parameter instructs the API to return the list of video
 *  categories available in the specified country. The parameter value is an ISO
 *  3166-1 alpha-2 country code.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  Fetches a @c GTLRYouTube_VideoCategoryListResponse.
 *
 *  Returns a list of categories that can be associated with YouTube videos.
 *
 *  @param part The part parameter specifies the videoCategory resource
 *    properties that the API response will include. Set the parameter value to
 *    snippet.
 *
 *  @return GTLRYouTubeQuery_VideoCategoriesList
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Deletes a YouTube video.
 *
 *  Method: youtube.videos.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_VideosDelete : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideosDeleteWithidentifier:]

/**
 *  The id parameter specifies the YouTube video ID for the resource that is
 *  being deleted. In a video resource, the id property specifies the video's
 *  ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a YouTube video.
 *
 *  @param identifier The id parameter specifies the YouTube video ID for the
 *    resource that is being deleted. In a video resource, the id property
 *    specifies the video's ID.
 *
 *  @return GTLRYouTubeQuery_VideosDelete
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Retrieves the ratings that the authorized user gave to a list of specified
 *  videos.
 *
 *  Method: youtube.videos.getRating
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_VideosGetRating : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideosGetRatingWithidentifier:]

/**
 *  The id parameter specifies a comma-separated list of the YouTube video ID(s)
 *  for the resource(s) for which you are retrieving rating data. In a video
 *  resource, the id property specifies the video's ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Fetches a @c GTLRYouTube_VideoGetRatingResponse.
 *
 *  Retrieves the ratings that the authorized user gave to a list of specified
 *  videos.
 *
 *  @param identifier The id parameter specifies a comma-separated list of the
 *    YouTube video ID(s) for the resource(s) for which you are retrieving
 *    rating data. In a video resource, the id property specifies the video's
 *    ID.
 *
 *  @return GTLRYouTubeQuery_VideosGetRating
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier;

@end

/**
 *  Uploads a video to YouTube and optionally sets the video's metadata.
 *
 *  Method: youtube.videos.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeUpload
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_VideosInsert : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideosInsertWithObject:part:]

/**
 *  The autoLevels parameter indicates whether YouTube should automatically
 *  enhance the video's lighting and color.
 */
@property(nonatomic, assign) BOOL autoLevels;

/**
 *  The notifySubscribers parameter indicates whether YouTube should send a
 *  notification about the new video to users who subscribe to the video's
 *  channel. A parameter value of True indicates that subscribers will be
 *  notified of newly uploaded videos. However, a channel owner who is uploading
 *  many videos might prefer to set the value to False to avoid sending a
 *  notification about each new video to the channel's subscribers.
 *
 *  @note If not set, the documented server-side default will be true.
 */
@property(nonatomic, assign) BOOL notifySubscribers;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  This parameter can only be used in a properly authorized request. Note: This
 *  parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID
 *  of the channel to which a video is being added. This parameter is required
 *  when a request specifies a value for the onBehalfOfContentOwner parameter,
 *  and it can only be used in conjunction with that parameter. In addition, the
 *  request must be authorized using a CMS account that is linked to the content
 *  owner that the onBehalfOfContentOwner parameter specifies. Finally, the
 *  channel that the onBehalfOfContentOwnerChannel parameter value specifies
 *  must be linked to the content owner that the onBehalfOfContentOwner
 *  parameter specifies.
 *  This parameter is intended for YouTube content partners that own and manage
 *  many different YouTube channels. It allows content owners to authenticate
 *  once and perform actions on behalf of the channel specified in the parameter
 *  value, without having to provide authentication credentials for each
 *  separate channel.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwnerChannel;

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response will include.
 *  Note that not all parts contain properties that can be set when inserting or
 *  updating a video. For example, the statistics object encapsulates statistics
 *  that YouTube calculates for a video and does not contain values that you can
 *  set or modify. If the parameter value specifies a part that does not contain
 *  mutable values, that part will still be included in the API response.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  The stabilize parameter indicates whether YouTube should adjust the video to
 *  remove shaky camera motions.
 */
@property(nonatomic, assign) BOOL stabilize;

/**
 *  Fetches a @c GTLRYouTube_Video.
 *
 *  Uploads a video to YouTube and optionally sets the video's metadata.
 *
 *  @param object The @c GTLRYouTube_Video to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *    Note that not all parts contain properties that can be set when inserting
 *    or updating a video. For example, the statistics object encapsulates
 *    statistics that YouTube calculates for a video and does not contain values
 *    that you can set or modify. If the parameter value specifies a part that
 *    does not contain mutable values, that part will still be included in the
 *    API response.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    64GB. Accepted MIME types: application/octet-stream, video/ *
 *
 *  @return GTLRYouTubeQuery_VideosInsert
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Video *)object
                           part:(NSString *)part
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Returns a list of videos that match the API request parameters.
 *
 *  Method: youtube.videos.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeReadonly
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_VideosList : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideosListWithpart:]

/**
 *  The chart parameter identifies the chart that you want to retrieve.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeChartMostPopular Return the most popular videos for
 *        the specified content region and video category. (Value:
 *        "mostPopular")
 */
@property(nonatomic, copy, nullable) NSString *chart;

/**
 *  The hl parameter instructs the API to retrieve localized resource metadata
 *  for a specific application language that the YouTube website supports. The
 *  parameter value must be a language code included in the list returned by the
 *  i18nLanguages.list method.
 *  If localized resource details are available in that language, the resource's
 *  snippet.localized object will contain the localized values. However, if
 *  localized details are not available, the snippet.localized object will
 *  contain resource details in the resource's default language.
 */
@property(nonatomic, copy, nullable) NSString *hl;

/**
 *  The id parameter specifies a comma-separated list of the YouTube video ID(s)
 *  for the resource(s) that are being retrieved. In a video resource, the id
 *  property specifies the video's ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** DEPRECATED */
@property(nonatomic, copy, nullable) NSString *locale;

/**
 *  The maxHeight parameter specifies a maximum height of the embedded player.
 *  If maxWidth is provided, maxHeight may not be reached in order to not
 *  violate the width request.
 *
 *  @note The documented range is 72..8192.
 */
@property(nonatomic, assign) NSUInteger maxHeight;

/**
 *  The maxResults parameter specifies the maximum number of items that should
 *  be returned in the result set.
 *  Note: This parameter is supported for use in conjunction with the myRating
 *  and chart parameters, but it is not supported for use in conjunction with
 *  the id parameter.
 *
 *  @note If not set, the documented server-side default will be 5 (from the
 *        range 1..50).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The maxWidth parameter specifies a maximum width of the embedded player. If
 *  maxHeight is provided, maxWidth may not be reached in order to not violate
 *  the height request.
 *
 *  @note The documented range is 72..8192.
 */
@property(nonatomic, assign) NSUInteger maxWidth;

/**
 *  Set this parameter's value to like or dislike to instruct the API to only
 *  return videos liked or disliked by the authenticated user.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeMyRatingDislike Returns only videos disliked by the
 *        authenticated user. (Value: "dislike")
 *    @arg @c kGTLRYouTubeMyRatingLike Returns only video liked by the
 *        authenticated user. (Value: "like")
 */
@property(nonatomic, copy, nullable) NSString *myRating;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The pageToken parameter identifies a specific page in the result set that
 *  should be returned. In an API response, the nextPageToken and prevPageToken
 *  properties identify other pages that could be retrieved.
 *  Note: This parameter is supported for use in conjunction with the myRating
 *  and chart parameters, but it is not supported for use in conjunction with
 *  the id parameter.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The part parameter specifies a comma-separated list of one or more video
 *  resource properties that the API response will include.
 *  If the parameter identifies a property that contains child properties, the
 *  child properties will be included in the response. For example, in a video
 *  resource, the snippet property contains the channelId, title, description,
 *  tags, and categoryId properties. As such, if you set part=snippet, the API
 *  response will contain all of those properties.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  The regionCode parameter instructs the API to select a video chart available
 *  in the specified region. This parameter can only be used in conjunction with
 *  the chart parameter. The parameter value is an ISO 3166-1 alpha-2 country
 *  code.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  The videoCategoryId parameter identifies the video category for which the
 *  chart should be retrieved. This parameter can only be used in conjunction
 *  with the chart parameter. By default, charts are not restricted to a
 *  particular category.
 *
 *  @note If not set, the documented server-side default will be 0.
 */
@property(nonatomic, copy, nullable) NSString *videoCategoryId;

/**
 *  Fetches a @c GTLRYouTube_VideoListResponse.
 *
 *  Returns a list of videos that match the API request parameters.
 *
 *  @param part The part parameter specifies a comma-separated list of one or
 *    more video resource properties that the API response will include.
 *    If the parameter identifies a property that contains child properties, the
 *    child properties will be included in the response. For example, in a video
 *    resource, the snippet property contains the channelId, title, description,
 *    tags, and categoryId properties. As such, if you set part=snippet, the API
 *    response will contain all of those properties.
 *
 *  @return GTLRYouTubeQuery_VideosList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPart:(NSString *)part;

@end

/**
 *  Add a like or dislike rating to a video or remove a rating from a video.
 *
 *  Method: youtube.videos.rate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_VideosRate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideosRateWithidentifier:rating:]

/**
 *  The id parameter specifies the YouTube video ID of the video that is being
 *  rated or having its rating removed.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Specifies the rating to record.
 *
 *  Likely values:
 *    @arg @c kGTLRYouTubeRatingDislike Records that the authenticated user
 *        disliked the video. (Value: "dislike")
 *    @arg @c kGTLRYouTubeRatingLike Records that the authenticated user liked
 *        the video. (Value: "like")
 *    @arg @c kGTLRYouTubeRatingNone Removes any rating that the authenticated
 *        user had previously set for the video. (Value: "none")
 */
@property(nonatomic, copy, nullable) NSString *rating;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Add a like or dislike rating to a video or remove a rating from a video.
 *
 *  @param identifier The id parameter specifies the YouTube video ID of the
 *    video that is being rated or having its rating removed.
 *  @param rating Specifies the rating to record.
 *
 *  Likely values for @c rating:
 *    @arg @c kGTLRYouTubeRatingDislike Records that the authenticated user
 *        disliked the video. (Value: "dislike")
 *    @arg @c kGTLRYouTubeRatingLike Records that the authenticated user liked
 *        the video. (Value: "like")
 *    @arg @c kGTLRYouTubeRatingNone Removes any rating that the authenticated
 *        user had previously set for the video. (Value: "none")
 *
 *  @return GTLRYouTubeQuery_VideosRate
 */
+ (instancetype)queryWithIdentifier:(NSString *)identifier
                             rating:(NSString *)rating;

@end

/**
 *  Report abuse for a video.
 *
 *  Method: youtube.videos.reportAbuse
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_VideosReportAbuse : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideosReportAbuseWithObject:]

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Report abuse for a video.
 *
 *  @param object The @c GTLRYouTube_VideoAbuseReport to include in the query.
 *
 *  @return GTLRYouTubeQuery_VideosReportAbuse
 */
+ (instancetype)queryWithObject:(GTLRYouTube_VideoAbuseReport *)object;

@end

/**
 *  Updates a video's metadata.
 *
 *  Method: youtube.videos.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_VideosUpdate : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForVideosUpdateWithObject:part:]

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The actual CMS
 *  account that the user authenticates with must be linked to the specified
 *  YouTube content owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  The part parameter serves two purposes in this operation. It identifies the
 *  properties that the write operation will set as well as the properties that
 *  the API response will include.
 *  Note that this method will override the existing values for all of the
 *  mutable properties that are contained in any parts that the parameter value
 *  specifies. For example, a video's privacy setting is contained in the status
 *  part. As such, if your request is updating a private video, and the
 *  request's part parameter value includes the status part, the video's privacy
 *  setting will be updated to whatever value the request body specifies. If the
 *  request body does not specify a value, the existing privacy setting will be
 *  removed and the video will revert to the default privacy setting.
 *  In addition, not all parts contain properties that can be set when inserting
 *  or updating a video. For example, the statistics object encapsulates
 *  statistics that YouTube calculates for a video and does not contain values
 *  that you can set or modify. If the parameter value specifies a part that
 *  does not contain mutable values, that part will still be included in the API
 *  response.
 */
@property(nonatomic, copy, nullable) NSString *part;

/**
 *  Fetches a @c GTLRYouTube_Video.
 *
 *  Updates a video's metadata.
 *
 *  @param object The @c GTLRYouTube_Video to include in the query.
 *  @param part The part parameter serves two purposes in this operation. It
 *    identifies the properties that the write operation will set as well as the
 *    properties that the API response will include.
 *    Note that this method will override the existing values for all of the
 *    mutable properties that are contained in any parts that the parameter
 *    value specifies. For example, a video's privacy setting is contained in
 *    the status part. As such, if your request is updating a private video, and
 *    the request's part parameter value includes the status part, the video's
 *    privacy setting will be updated to whatever value the request body
 *    specifies. If the request body does not specify a value, the existing
 *    privacy setting will be removed and the video will revert to the default
 *    privacy setting.
 *    In addition, not all parts contain properties that can be set when
 *    inserting or updating a video. For example, the statistics object
 *    encapsulates statistics that YouTube calculates for a video and does not
 *    contain values that you can set or modify. If the parameter value
 *    specifies a part that does not contain mutable values, that part will
 *    still be included in the API response.
 *
 *  @return GTLRYouTubeQuery_VideosUpdate
 */
+ (instancetype)queryWithObject:(GTLRYouTube_Video *)object
                           part:(NSString *)part;

@end

/**
 *  Uploads a watermark image to YouTube and sets it for a channel.
 *
 *  Method: youtube.watermarks.set
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeUpload
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_WatermarksSet : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForWatermarksSetWithObject:channelId:]

/**
 *  The channelId parameter specifies the YouTube channel ID for which the
 *  watermark is being provided.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Uploads a watermark image to YouTube and sets it for a channel.
 *
 *  @param object The @c GTLRYouTube_InvideoBranding to include in the query.
 *  @param channelId The channelId parameter specifies the YouTube channel ID
 *    for which the watermark is being provided.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    10MB. Accepted MIME types: application/octet-stream, image/jpeg, image/png
 *
 *  @return GTLRYouTubeQuery_WatermarksSet
 */
+ (instancetype)queryWithObject:(GTLRYouTube_InvideoBranding *)object
                      channelId:(NSString *)channelId
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Deletes a channel's watermark image.
 *
 *  Method: youtube.watermarks.unset
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeYouTube
 *    @c kGTLRAuthScopeYouTubeForceSsl
 *    @c kGTLRAuthScopeYouTubeYoutubepartner
 */
@interface GTLRYouTubeQuery_WatermarksUnset : GTLRYouTubeQuery
// Previous library name was
//   +[GTLQueryYouTube queryForWatermarksUnsetWithchannelId:]

/**
 *  The channelId parameter specifies the YouTube channel ID for which the
 *  watermark is being unset.
 */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  Note: This parameter is intended exclusively for YouTube content partners.
 *  The onBehalfOfContentOwner parameter indicates that the request's
 *  authorization credentials identify a YouTube CMS user who is acting on
 *  behalf of the content owner specified in the parameter value. This parameter
 *  is intended for YouTube content partners that own and manage many different
 *  YouTube channels. It allows content owners to authenticate once and get
 *  access to all their video and channel data, without having to provide
 *  authentication credentials for each individual channel. The CMS account that
 *  the user authenticates with must be linked to the specified YouTube content
 *  owner.
 */
@property(nonatomic, copy, nullable) NSString *onBehalfOfContentOwner;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a channel's watermark image.
 *
 *  @param channelId The channelId parameter specifies the YouTube channel ID
 *    for which the watermark is being unset.
 *
 *  @return GTLRYouTubeQuery_WatermarksUnset
 */
+ (instancetype)queryWithChannelId:(NSString *)channelId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
