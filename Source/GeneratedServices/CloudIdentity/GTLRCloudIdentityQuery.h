// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Identity API (cloudidentity/v1)
// Description:
//   API for provisioning and managing identity resources.
// Documentation:
//   https://cloud.google.com/identity/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ApproveDeviceUserRequest;
@class GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1BlockDeviceUserRequest;
@class GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1CancelWipeDeviceRequest;
@class GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserRequest;
@class GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ClientState;
@class GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1Device;
@class GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1WipeDeviceRequest;
@class GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1WipeDeviceUserRequest;
@class GTLRCloudIdentity_Group;
@class GTLRCloudIdentity_Membership;
@class GTLRCloudIdentity_ModifyMembershipRolesRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// initialGroupConfig

/**
 *  An empty group is created without any initial owners. This can only be used
 *  by admins of the domain.
 *
 *  Value: "EMPTY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIdentityInitialGroupConfigEmpty;
/**
 *  Default. Should not be used.
 *
 *  Value: "INITIAL_GROUP_CONFIG_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIdentityInitialGroupConfigInitialGroupConfigUnspecified;
/**
 *  The end user making the request will be added as the initial owner of the
 *  `Group`.
 *
 *  Value: "WITH_INITIAL_OWNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIdentityInitialGroupConfigWithInitialOwner;

// ----------------------------------------------------------------------------
// view

/**
 *  Server responses only include basic information.
 *
 *  Value: "BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIdentityViewBasic;
/**
 *  This view contains all devices imported by the company admin. Each device in
 *  the response contains all information specified by the company admin when
 *  importing the device (i.e. asset tags). This includes devices that may be
 *  unaassigned or assigned to users.
 *
 *  Value: "COMPANY_INVENTORY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIdentityViewCompanyInventory;
/**
 *  Full representation of the resource.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIdentityViewFull;
/**
 *  This view contains all devices with at least one user registered on the
 *  device. Each device in the response contains all device information, except
 *  for asset tags.
 *
 *  Value: "USER_ASSIGNED_DEVICES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIdentityViewUserAssignedDevices;
/** Value: "VIEW_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudIdentityViewViewUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Cloud Identity query classes.
 */
@interface GTLRCloudIdentityQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Cancels an unfinished device wipe. This operation can be used to cancel
 *  device wipe in the gap between the wipe operation returning success and the
 *  device being wiped. This operation is possible when the device is in a
 *  "pending wipe" state. The device enters the "pending wipe" state when a wipe
 *  device command is issued, but has not yet been sent to the device. The
 *  cancel wipe will fail if the wipe command has already been issued to the
 *  device.
 *
 *  Method: cloudidentity.devices.cancelWipe
 */
@interface GTLRCloudIdentityQuery_DevicesCancelWipe : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesCancelWipeWithObject:name:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device_id}`, where device_id is the unique ID assigned to
 *  the Device, and device_user_id is the unique ID assigned to the User.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Cancels an unfinished device wipe. This operation can be used to cancel
 *  device wipe in the gap between the wipe operation returning success and the
 *  device being wiped. This operation is possible when the device is in a
 *  "pending wipe" state. The device enters the "pending wipe" state when a wipe
 *  device command is issued, but has not yet been sent to the device. The
 *  cancel wipe will fail if the wipe command has already been issued to the
 *  device.
 *
 *  @param object The @c
 *    GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1CancelWipeDeviceRequest
 *    to include in the query.
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device_id}`, where device_id is the unique ID
 *    assigned to the Device, and device_user_id is the unique ID assigned to
 *    the User.
 *
 *  @return GTLRCloudIdentityQuery_DevicesCancelWipe
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1CancelWipeDeviceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a device. Only company-owned device may be created.
 *
 *  Method: cloudidentity.devices.create
 */
@interface GTLRCloudIdentityQuery_DevicesCreate : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesCreateWithObject:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer.
 *  If you're using this API for your own organization, use
 *  `customers/my_customer` If you're using this API to manage another
 *  organization, use `customers/{customer_id}`, where customer_id is the
 *  customer to whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Creates a device. Only company-owned device may be created.
 *
 *  @param object The @c
 *    GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1Device to include in the
 *    query.
 *
 *  @return GTLRCloudIdentityQuery_DevicesCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1Device *)object;

@end

/**
 *  Deletes the specified device.
 *
 *  Method: cloudidentity.devices.delete
 */
@interface GTLRCloudIdentityQuery_DevicesDelete : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesDeleteWithname:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer.
 *  If you're using this API for your own organization, use
 *  `customers/my_customer` If you're using this API to manage another
 *  organization, use `customers/{customer_id}`, where customer_id is the
 *  customer to whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device_id}`, where device_id is the unique ID assigned to
 *  the Device.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Deletes the specified device.
 *
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device_id}`, where device_id is the unique ID
 *    assigned to the Device.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Approves device to access user data.
 *
 *  Method: cloudidentity.devices.deviceUsers.approve
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersApprove : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesDeviceUsersApproveWithObject:name:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device_id}/deviceUsers/{device_user_id}`, where device_id
 *  is the unique ID assigned to the Device, and device_user_id is the unique ID
 *  assigned to the User.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Approves device to access user data.
 *
 *  @param object The @c
 *    GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ApproveDeviceUserRequest
 *    to include in the query.
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where
 *    device_id is the unique ID assigned to the Device, and device_user_id is
 *    the unique ID assigned to the User.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersApprove
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ApproveDeviceUserRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Blocks device from accessing user data
 *
 *  Method: cloudidentity.devices.deviceUsers.block
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersBlock : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesDeviceUsersBlockWithObject:name:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device_id}/deviceUsers/{device_user_id}`, where device_id
 *  is the unique ID assigned to the Device, and device_user_id is the unique ID
 *  assigned to the User.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Blocks device from accessing user data
 *
 *  @param object The @c
 *    GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1BlockDeviceUserRequest
 *    to include in the query.
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where
 *    device_id is the unique ID assigned to the Device, and device_user_id is
 *    the unique ID assigned to the User.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersBlock
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1BlockDeviceUserRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Cancels an unfinished user account wipe. This operation can be used to
 *  cancel device wipe in the gap between the wipe operation returning success
 *  and the device being wiped.
 *
 *  Method: cloudidentity.devices.deviceUsers.cancelWipe
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersCancelWipe : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesDeviceUsersCancelWipeWithObject:name:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device_id}/deviceUsers/{device_user_id}`, where device_id
 *  is the unique ID assigned to the Device, and device_user_id is the unique ID
 *  assigned to the User.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Cancels an unfinished user account wipe. This operation can be used to
 *  cancel device wipe in the gap between the wipe operation returning success
 *  and the device being wiped.
 *
 *  @param object The @c
 *    GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserRequest
 *    to include in the query.
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where
 *    device_id is the unique ID assigned to the Device, and device_user_id is
 *    the unique ID assigned to the User.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersCancelWipe
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the client state for the device user
 *
 *  Method: cloudidentity.devices.deviceUsers.clientStates.get
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersClientStatesGet : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesDeviceUsersClientStatesGetWithname:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer.
 *  If you're using this API for your own organization, use
 *  `customers/my_customer` If you're using this API to manage another
 *  organization, use `customers/{customer_id}`, where customer_id is the
 *  customer to whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the
 *  ClientState in format:
 *  `devices/{device_id}/deviceUsers/{device_user_id}/clientStates/{partner_id}`,
 *  where device_id is the unique ID assigned to the Device, device_user_id is
 *  the unique ID assigned to the User and partner_id identifies the partner
 *  storing the data.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ClientState.
 *
 *  Gets the client state for the device user
 *
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the
 *    ClientState in format:
 *    `devices/{device_id}/deviceUsers/{device_user_id}/clientStates/{partner_id}`,
 *    where device_id is the unique ID assigned to the Device, device_user_id is
 *    the unique ID assigned to the User and partner_id identifies the partner
 *    storing the data.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersClientStatesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the client states for the given search query.
 *
 *  Method: cloudidentity.devices.deviceUsers.clientStates.list
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersClientStatesList : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesDeviceUsersClientStatesListWithparent:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer.
 *  If you're using this API for your own organization, use
 *  `customers/my_customer` If you're using this API to manage another
 *  organization, use `customers/{customer_id}`, where customer_id is the
 *  customer to whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/** Optional. Additional restrictions when fetching list of client states. */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Order specification for client states in the response. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. A page token, received from a previous `ListClientStates` call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to `ListClientStates` must match the call that provided
 *  the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. To list all ClientStates, set this to "devices/-/deviceUsers/-".
 *  To list all ClientStates owned by a DeviceUser, set this to the resource
 *  name of the DeviceUser. Format: devices/{device}/deviceUsers/{deviceUser}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ListClientStatesResponse.
 *
 *  Lists the client states for the given search query.
 *
 *  @param parent Required. To list all ClientStates, set this to
 *    "devices/-/deviceUsers/-". To list all ClientStates owned by a DeviceUser,
 *    set this to the resource name of the DeviceUser. Format:
 *    devices/{device}/deviceUsers/{deviceUser}
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersClientStatesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the client state for the device user
 *
 *  Method: cloudidentity.devices.deviceUsers.clientStates.patch
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersClientStatesPatch : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesDeviceUsersClientStatesPatchWithObject:name:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer.
 *  If you're using this API for your own organization, use
 *  `customers/my_customer` If you're using this API to manage another
 *  organization, use `customers/{customer_id}`, where customer_id is the
 *  customer to whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Output only. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the
 *  ClientState in format:
 *  `devices/{device_id}/deviceUsers/{device_user_id}/clientState/{partner_id}`,
 *  where partner_id corresponds to the partner storing the data. For partners
 *  belonging to the "BeyondCorp Alliance", this is the partner ID specified to
 *  you by Google. For all other callers, this is a string of the form:
 *  `{customer_id}-suffix`, where `customer_id` is your customer ID. The
 *  *suffix* is any string the caller specifies. This string will be displayed
 *  verbatim in the administration console. This suffix is used in setting up
 *  Custom Access Levels in Context-Aware Access. Your organization's customer
 *  ID can be obtained from the URL: `GET
 *  https://www.googleapis.com/admin/directory/v1/customers/my_customer` The
 *  `id` field in the response contains the customer ID starting with the letter
 *  'C'. The customer ID to be used in this API is the string after the letter
 *  'C' (not including 'C')
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Comma-separated list of fully qualified names of fields to be
 *  updated. If not specified, all updatable fields in ClientState are updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Updates the client state for the device user
 *
 *  @param object The @c
 *    GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ClientState to include
 *    in the query.
 *  @param name Output only. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the
 *    ClientState in format:
 *    `devices/{device_id}/deviceUsers/{device_user_id}/clientState/{partner_id}`,
 *    where partner_id corresponds to the partner storing the data. For partners
 *    belonging to the "BeyondCorp Alliance", this is the partner ID specified
 *    to you by Google. For all other callers, this is a string of the form:
 *    `{customer_id}-suffix`, where `customer_id` is your customer ID. The
 *    *suffix* is any string the caller specifies. This string will be displayed
 *    verbatim in the administration console. This suffix is used in setting up
 *    Custom Access Levels in Context-Aware Access. Your organization's customer
 *    ID can be obtained from the URL: `GET
 *    https://www.googleapis.com/admin/directory/v1/customers/my_customer` The
 *    `id` field in the response contains the customer ID starting with the
 *    letter 'C'. The customer ID to be used in this API is the string after the
 *    letter 'C' (not including 'C')
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersClientStatesPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ClientState *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes the specified DeviceUser. This also revokes the user's access to
 *  device data.
 *
 *  Method: cloudidentity.devices.deviceUsers.delete
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersDelete : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesDeviceUsersDeleteWithname:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer.
 *  If you're using this API for your own organization, use
 *  `customers/my_customer` If you're using this API to manage another
 *  organization, use `customers/{customer_id}`, where customer_id is the
 *  customer to whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device_id}/deviceUsers/{device_user_id}`, where device_id
 *  is the unique ID assigned to the Device, and device_user_id is the unique ID
 *  assigned to the User.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Deletes the specified DeviceUser. This also revokes the user's access to
 *  device data.
 *
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where
 *    device_id is the unique ID assigned to the Device, and device_user_id is
 *    the unique ID assigned to the User.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieves the specified DeviceUser
 *
 *  Method: cloudidentity.devices.deviceUsers.get
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersGet : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesDeviceUsersGetWithname:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer.
 *  If you're using this API for your own organization, use
 *  `customers/my_customer` If you're using this API to manage another
 *  organization, use `customers/{customer_id}`, where customer_id is the
 *  customer to whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device_id}/deviceUsers/{device_user_id}`, where device_id
 *  is the unique ID assigned to the Device, and device_user_id is the unique ID
 *  assigned to the User.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1DeviceUser.
 *
 *  Retrieves the specified DeviceUser
 *
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where
 *    device_id is the unique ID assigned to the Device, and device_user_id is
 *    the unique ID assigned to the User.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists/Searches DeviceUsers.
 *
 *  Method: cloudidentity.devices.deviceUsers.list
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersList : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesDeviceUsersListWithparent:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer.
 *  If you're using this API for your own organization, use
 *  `customers/my_customer` If you're using this API to manage another
 *  organization, use `customers/{customer_id}`, where customer_id is the
 *  customer to whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Optional. Additional restrictions when fetching list of devices. [HC
 *  article](https://support.google.com/a/answer/7549103)
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Order specification for devices in the response. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of DeviceUsers to return. If unspecified, at
 *  most 5 DeviceUsers will be returned. The maximum value is 20; values above
 *  20 will be coerced to 20.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListDeviceUsers` call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to `ListBooks` must match the call that provided the
 *  page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. To list all DeviceUsers, set this to "devices/-". To list all
 *  DeviceUsers owned by a device, set this to the resource name of the device.
 *  Format: devices/{device}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ListDeviceUsersResponse.
 *
 *  Lists/Searches DeviceUsers.
 *
 *  @param parent Required. To list all DeviceUsers, set this to "devices/-". To
 *    list all DeviceUsers owned by a device, set this to the resource name of
 *    the device. Format: devices/{device}
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Looks up resource names of the DeviceUsers associated with the caller's
 *  credentials, as well as the properties provided in the request. This method
 *  must be called with end-user credentials with the scope:
 *  https://www.googleapis.com/auth/cloud-identity.devices.lookup If multiple
 *  properties are provided, only DeviceUsers having all of these properties are
 *  considered as matches - i.e. the query behaves like an AND. Different
 *  platforms require different amounts of information from the caller to ensure
 *  that the DeviceUser is uniquely identified. - iOS: No properties need to be
 *  passed, the caller's credentials are sufficient to identify the
 *  corresponding DeviceUser. - Android: Specifying the 'android_id' field is
 *  required. - Desktop: Specifying the 'raw_resource_id' field is required.
 *
 *  Method: cloudidentity.devices.deviceUsers.lookup
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevicesLookup
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersLookup : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesDeviceUsersLookupWithparent:]

/**
 *  Android Id returned by
 *  [Settings.Secure#ANDROID_ID](https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID).
 */
@property(nonatomic, copy, nullable) NSString *androidId;

/**
 *  The maximum number of DeviceUsers to return. If unspecified, at most 20
 *  DeviceUsers will be returned. The maximum value is 20; values above 20 will
 *  be coerced to 20.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `LookupDeviceUsers` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `LookupDeviceUsers` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Must be set to "devices/-/deviceUsers" to search across all DeviceUser
 *  belonging to the user.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Raw Resource Id used by Google Endpoint Verification. If the user is
 *  enrolled into Google Endpoint Verification, this id will be saved as the
 *  'device_resource_id' field in the following platform dependent files. Mac:
 *  ~/.secureConnect/context_aware_config.json Windows:
 *  C:\\Users\\%USERPROFILE%\\.secureConnect\\context_aware_config.json Linux:
 *  ~/.secureConnect/context_aware_config.json
 */
@property(nonatomic, copy, nullable) NSString *rawResourceId;

/**
 *  The user whose DeviceUser's resource name will be fetched. Must be set to
 *  'me' to fetch the DeviceUser's resource name for the calling user.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c
 *  GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1LookupSelfDeviceUsersResponse.
 *
 *  Looks up resource names of the DeviceUsers associated with the caller's
 *  credentials, as well as the properties provided in the request. This method
 *  must be called with end-user credentials with the scope:
 *  https://www.googleapis.com/auth/cloud-identity.devices.lookup If multiple
 *  properties are provided, only DeviceUsers having all of these properties are
 *  considered as matches - i.e. the query behaves like an AND. Different
 *  platforms require different amounts of information from the caller to ensure
 *  that the DeviceUser is uniquely identified. - iOS: No properties need to be
 *  passed, the caller's credentials are sufficient to identify the
 *  corresponding DeviceUser. - Android: Specifying the 'android_id' field is
 *  required. - Desktop: Specifying the 'raw_resource_id' field is required.
 *
 *  @param parent Must be set to "devices/-/deviceUsers" to search across all
 *    DeviceUser belonging to the user.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersLookup
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Wipes the user's account on a device. Other data on the device that is not
 *  associated with the user's work account is not affected. For example, if a
 *  Gmail app is installed on a device that is used for personal and work
 *  purposes, and the user is logged in to the Gmail app with their personal
 *  account as well as their work account, wiping the "deviceUser" by their work
 *  administrator will not affect their personal account within Gmail or other
 *  apps such as Photos.
 *
 *  Method: cloudidentity.devices.deviceUsers.wipe
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersWipe : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesDeviceUsersWipeWithObject:name:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device_id}/deviceUsers/{device_user_id}`, where device_id
 *  is the unique ID assigned to the Device, and device_user_id is the unique ID
 *  assigned to the User.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Wipes the user's account on a device. Other data on the device that is not
 *  associated with the user's work account is not affected. For example, if a
 *  Gmail app is installed on a device that is used for personal and work
 *  purposes, and the user is logged in to the Gmail app with their personal
 *  account as well as their work account, wiping the "deviceUser" by their work
 *  administrator will not affect their personal account within Gmail or other
 *  apps such as Photos.
 *
 *  @param object The @c
 *    GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1WipeDeviceUserRequest to
 *    include in the query.
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where
 *    device_id is the unique ID assigned to the Device, and device_user_id is
 *    the unique ID assigned to the User.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersWipe
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1WipeDeviceUserRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Retrieves the specified device.
 *
 *  Method: cloudidentity.devices.get
 */
@interface GTLRCloudIdentityQuery_DevicesGet : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesGetWithname:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Customer
 *  in the format: `customers/{customer_id}`, where customer_id is the customer
 *  to whom the device belongs. If you're using this API for your own
 *  organization, use `customers/my_customer`. If you're using this API to
 *  manage another organization, use `customers/{customer_id}`, where
 *  customer_id is the customer to whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  the format: `devices/{device_id}`, where device_id is the unique ID assigned
 *  to the Device.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1Device.
 *
 *  Retrieves the specified device.
 *
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in the format: `devices/{device_id}`, where device_id is the unique ID
 *    assigned to the Device.
 *
 *  @return GTLRCloudIdentityQuery_DevicesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists/Searches devices.
 *
 *  Method: cloudidentity.devices.list
 */
@interface GTLRCloudIdentityQuery_DevicesList : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesList]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer
 *  in the format: `customers/{customer_id}`, where customer_id is the customer
 *  to whom the device belongs. If you're using this API for your own
 *  organization, use `customers/my_customer`. If you're using this API to
 *  manage another organization, use `customers/{customer_id}`, where
 *  customer_id is the customer to whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Optional. Additional restrictions when fetching list of devices. [Help
 *  Center article link](https://support.google.com/a/answer/7549103)
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Order specification for devices in the response. Only one of the
 *  following field names may be used to specify the order: `create_time`,
 *  `last_sync_time`, `model`, `os_version`, `device_type` and `serial_number`.
 *  `desc` may be specified optionally at the end to specify results to be
 *  sorted in descending order. Default order is ascending.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of Devices to return. If unspecified, at most
 *  20 Devices will be returned. The maximum value is 100; values above 100 will
 *  be coerced to 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListDevices` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListDevices` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Optional. The view to use for the List request.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIdentityViewViewUnspecified Default value. The value is
 *        unused. (Value: "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRCloudIdentityViewCompanyInventory This view contains all
 *        devices imported by the company admin. Each device in the response
 *        contains all information specified by the company admin when importing
 *        the device (i.e. asset tags). This includes devices that may be
 *        unaassigned or assigned to users. (Value: "COMPANY_INVENTORY")
 *    @arg @c kGTLRCloudIdentityViewUserAssignedDevices This view contains all
 *        devices with at least one user registered on the device. Each device
 *        in the response contains all device information, except for asset
 *        tags. (Value: "USER_ASSIGNED_DEVICES")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c
 *  GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ListDevicesResponse.
 *
 *  Lists/Searches devices.
 *
 *  @return GTLRCloudIdentityQuery_DevicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Wipes all data on the specified device.
 *
 *  Method: cloudidentity.devices.wipe
 */
@interface GTLRCloudIdentityQuery_DevicesWipe : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForDevicesWipeWithObject:name:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device_id}/deviceUsers/{device_user_id}`, where device_id
 *  is the unique ID assigned to the Device, and device_user_id is the unique ID
 *  assigned to the User.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Wipes all data on the specified device.
 *
 *  @param object The @c
 *    GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1WipeDeviceRequest to
 *    include in the query.
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where
 *    device_id is the unique ID assigned to the Device, and device_user_id is
 *    the unique ID assigned to the User.
 *
 *  @return GTLRCloudIdentityQuery_DevicesWipe
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1WipeDeviceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a Group.
 *
 *  Method: cloudidentity.groups.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsCreate : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForGroupsCreateWithObject:]

/**
 *  Optional. The initial configuration option for the `Group`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIdentityInitialGroupConfigInitialGroupConfigUnspecified
 *        Default. Should not be used. (Value:
 *        "INITIAL_GROUP_CONFIG_UNSPECIFIED")
 *    @arg @c kGTLRCloudIdentityInitialGroupConfigWithInitialOwner The end user
 *        making the request will be added as the initial owner of the `Group`.
 *        (Value: "WITH_INITIAL_OWNER")
 *    @arg @c kGTLRCloudIdentityInitialGroupConfigEmpty An empty group is
 *        created without any initial owners. This can only be used by admins of
 *        the domain. (Value: "EMPTY")
 */
@property(nonatomic, copy, nullable) NSString *initialGroupConfig;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Creates a Group.
 *
 *  @param object The @c GTLRCloudIdentity_Group to include in the query.
 *
 *  @return GTLRCloudIdentityQuery_GroupsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_Group *)object;

@end

/**
 *  Deletes a Group.
 *
 *  Method: cloudidentity.groups.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsDelete : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForGroupsDeleteWithname:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Group in
 *  the format: `groups/{group_id}`, where `group_id` is the unique ID assigned
 *  to the Group.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Deletes a Group.
 *
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Group in
 *    the format: `groups/{group_id}`, where `group_id` is the unique ID
 *    assigned to the Group.
 *
 *  @return GTLRCloudIdentityQuery_GroupsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieves a Group.
 *
 *  Method: cloudidentity.groups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsGet : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForGroupsGetWithname:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Group in
 *  the format: `groups/{group_id}`, where `group_id` is the unique ID assigned
 *  to the Group.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Group.
 *
 *  Retrieves a Group.
 *
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Group in
 *    the format: `groups/{group_id}`, where `group_id` is the unique ID
 *    assigned to the Group.
 *
 *  @return GTLRCloudIdentityQuery_GroupsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists groups within a customer or a domain.
 *
 *  Method: cloudidentity.groups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsList : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForGroupsList]

/**
 *  The default page size is 200 (max 1000) for the BASIC view, and 50 (max 500)
 *  for the FULL view.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous list request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Customer ID to list all groups from. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Group resource view to be returned. Defaults to [View.BASIC]().
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIdentityViewViewUnspecified Default. Should not be used.
 *        (Value: "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRCloudIdentityViewBasic Server responses only include basic
 *        information. (Value: "BASIC")
 *    @arg @c kGTLRCloudIdentityViewFull Full representation of the resource.
 *        (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRCloudIdentity_ListGroupsResponse.
 *
 *  Lists groups within a customer or a domain.
 *
 *  @return GTLRCloudIdentityQuery_GroupsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Looks up [resource
 *  name](https://cloud.google.com/apis/design/resource_names) of a Group by its
 *  EntityKey.
 *
 *  Method: cloudidentity.groups.lookup
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsLookup : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForGroupsLookup]

/**
 *  The ID of the entity within the given namespace. The ID must be unique
 *  within its namespace.
 */
@property(nonatomic, copy, nullable) NSString *groupKeyId;

/**
 *  Namespaces provide isolation for IDs, so an ID only needs to be unique
 *  within its namespace. Namespaces are currently only created as part of
 *  IdentitySource creation from Admin Console. A namespace
 *  `"identitysources/{identity_source_id}"` is created corresponding to every
 *  Identity Source `identity_source_id`.
 */
@property(nonatomic, copy, nullable) NSString *groupKeyNamespace;

/**
 *  Fetches a @c GTLRCloudIdentity_LookupGroupNameResponse.
 *
 *  Looks up [resource
 *  name](https://cloud.google.com/apis/design/resource_names) of a Group by its
 *  EntityKey.
 *
 *  @return GTLRCloudIdentityQuery_GroupsLookup
 */
+ (instancetype)query;

@end

/**
 *  Creates a Membership.
 *
 *  Method: cloudidentity.groups.memberships.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsMembershipsCreate : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForGroupsMembershipsCreateWithObject:parent:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Group to
 *  create Membership within. Format: `groups/{group_id}`, where `group_id` is
 *  the unique ID assigned to the Group.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Creates a Membership.
 *
 *  @param object The @c GTLRCloudIdentity_Membership to include in the query.
 *  @param parent Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Group to
 *    create Membership within. Format: `groups/{group_id}`, where `group_id` is
 *    the unique ID assigned to the Group.
 *
 *  @return GTLRCloudIdentityQuery_GroupsMembershipsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_Membership *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Membership.
 *
 *  Method: cloudidentity.groups.memberships.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsMembershipsDelete : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForGroupsMembershipsDeleteWithname:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Membership
 *  to be deleted. Format: `groups/{group_id}/memberships/{member_id}`, where
 *  `group_id` is the unique ID assigned to the Group to which Membership
 *  belongs to, and member_id is the unique ID assigned to the member.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Deletes a Membership.
 *
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the
 *    Membership to be deleted. Format:
 *    `groups/{group_id}/memberships/{member_id}`, where `group_id` is the
 *    unique ID assigned to the Group to which Membership belongs to, and
 *    member_id is the unique ID assigned to the member.
 *
 *  @return GTLRCloudIdentityQuery_GroupsMembershipsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieves a Membership.
 *
 *  Method: cloudidentity.groups.memberships.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsMembershipsGet : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForGroupsMembershipsGetWithname:]

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Membership
 *  to be retrieved. Format: `groups/{group_id}/memberships/{member_id}`, where
 *  `group_id` is the unique id assigned to the Group to which Membership
 *  belongs to, and `member_id` is the unique ID assigned to the member.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Membership.
 *
 *  Retrieves a Membership.
 *
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the
 *    Membership to be retrieved. Format:
 *    `groups/{group_id}/memberships/{member_id}`, where `group_id` is the
 *    unique id assigned to the Group to which Membership belongs to, and
 *    `member_id` is the unique ID assigned to the member.
 *
 *  @return GTLRCloudIdentityQuery_GroupsMembershipsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Memberships within a Group.
 *
 *  Method: cloudidentity.groups.memberships.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsMembershipsList : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForGroupsMembershipsListWithparent:]

/**
 *  The default page size is 200 (max 1000) for the BASIC view, and 50 (max 500)
 *  for the FULL view.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous list request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Group to
 *  list Memberships within. Format: `groups/{group_id}`, where `group_id` is
 *  the unique ID assigned to the Group.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Membership resource view to be returned. Defaults to View.BASIC.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIdentityViewViewUnspecified Default. Should not be used.
 *        (Value: "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRCloudIdentityViewBasic Server responses only include basic
 *        information. (Value: "BASIC")
 *    @arg @c kGTLRCloudIdentityViewFull Full representation of the resource.
 *        (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRCloudIdentity_ListMembershipsResponse.
 *
 *  Lists Memberships within a Group.
 *
 *  @param parent Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Group to
 *    list Memberships within. Format: `groups/{group_id}`, where `group_id` is
 *    the unique ID assigned to the Group.
 *
 *  @return GTLRCloudIdentityQuery_GroupsMembershipsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Looks up [resource
 *  name](https://cloud.google.com/apis/design/resource_names) of a Membership
 *  within a Group by member's EntityKey.
 *
 *  Method: cloudidentity.groups.memberships.lookup
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsMembershipsLookup : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForGroupsMembershipsLookupWithparent:]

/**
 *  The ID of the entity within the given namespace. The ID must be unique
 *  within its namespace.
 */
@property(nonatomic, copy, nullable) NSString *memberKeyId;

/**
 *  Namespaces provide isolation for IDs, so an ID only needs to be unique
 *  within its namespace. Namespaces are currently only created as part of
 *  IdentitySource creation from Admin Console. A namespace
 *  `"identitysources/{identity_source_id}"` is created corresponding to every
 *  Identity Source `identity_source_id`.
 */
@property(nonatomic, copy, nullable) NSString *memberKeyNamespace;

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Group to
 *  lookup Membership within. Format: `groups/{group_id}`, where `group_id` is
 *  the unique ID assigned to the Group.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudIdentity_LookupMembershipNameResponse.
 *
 *  Looks up [resource
 *  name](https://cloud.google.com/apis/design/resource_names) of a Membership
 *  within a Group by member's EntityKey.
 *
 *  @param parent Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Group to
 *    lookup Membership within. Format: `groups/{group_id}`, where `group_id` is
 *    the unique ID assigned to the Group.
 *
 *  @return GTLRCloudIdentityQuery_GroupsMembershipsLookup
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Modifies the `MembershipRole`s of a `Membership`.
 *
 *  Method: cloudidentity.groups.memberships.modifyMembershipRoles
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsMembershipsModifyMembershipRoles : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForGroupsMembershipsModifyMembershipRolesWithObject:name:]

/**
 *  Required. The [resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the
 *  `Membership` whose roles are to be modified. Must be of the form
 *  `groups/{group_id}/memberships/{membership_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_ModifyMembershipRolesResponse.
 *
 *  Modifies the `MembershipRole`s of a `Membership`.
 *
 *  @param object The @c GTLRCloudIdentity_ModifyMembershipRolesRequest to
 *    include in the query.
 *  @param name Required. The [resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the
 *    `Membership` whose roles are to be modified. Must be of the form
 *    `groups/{group_id}/memberships/{membership_id}`.
 *
 *  @return GTLRCloudIdentityQuery_GroupsMembershipsModifyMembershipRoles
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_ModifyMembershipRolesRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a Group.
 *
 *  Method: cloudidentity.groups.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsPatch : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForGroupsPatchWithObject:name:]

/**
 *  Output only. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Group in
 *  the format: `groups/{group_id}`, where group_id is the unique ID assigned to
 *  the Group. Must be left blank while creating a Group.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Editable fields: `display_name`, `description`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Updates a Group.
 *
 *  @param object The @c GTLRCloudIdentity_Group to include in the query.
 *  @param name Output only. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Group in
 *    the format: `groups/{group_id}`, where group_id is the unique ID assigned
 *    to the Group. Must be left blank while creating a Group.
 *
 *  @return GTLRCloudIdentityQuery_GroupsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_Group *)object
                           name:(NSString *)name;

@end

/**
 *  Searches for Groups.
 *
 *  Method: cloudidentity.groups.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsSearch : GTLRCloudIdentityQuery
// Previous library name was
//   +[GTLQueryCloudIdentity queryForGroupsSearch]

/**
 *  The default page size is 200 (max 1000) for the BASIC view, and 50 (max 500)
 *  for the FULL view.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous search request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. `Required`. Query string for performing search on groups. Users
 *  can search on parent and label attributes of groups. EXACT match ('==') is
 *  supported on parent, and CONTAINS match ('in') is supported on labels.
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Group resource view to be returned. Defaults to [View.BASIC]().
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIdentityViewViewUnspecified Default. Should not be used.
 *        (Value: "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRCloudIdentityViewBasic Server responses only include basic
 *        information. (Value: "BASIC")
 *    @arg @c kGTLRCloudIdentityViewFull Full representation of the resource.
 *        (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRCloudIdentity_SearchGroupsResponse.
 *
 *  Searches for Groups.
 *
 *  @return GTLRCloudIdentityQuery_GroupsSearch
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
