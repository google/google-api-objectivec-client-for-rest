// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Search Console API (webmasters/v3)
// Description:
//   View Google Search Console data for your verified sites.
// Documentation:
//   https://developers.google.com/webmaster-tools/

#import "GTLRWebmastersQuery.h"

#import "GTLRWebmastersObjects.h"

@implementation GTLRWebmastersQuery

@dynamic fields;

@end

@implementation GTLRWebmastersQuery_SearchanalyticsQuery

@dynamic siteUrl;

+ (instancetype)queryWithObject:(GTLRWebmasters_SearchAnalyticsQueryRequest *)object
                        siteUrl:(NSString *)siteUrl {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"siteUrl" ];
  NSString *pathURITemplate = @"sites/{siteUrl}/searchAnalytics/query";
  GTLRWebmastersQuery_SearchanalyticsQuery *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.siteUrl = siteUrl;
  query.expectedObjectClass = [GTLRWebmasters_SearchAnalyticsQueryResponse class];
  query.loggingName = @"webmasters.searchanalytics.query";
  return query;
}

@end

@implementation GTLRWebmastersQuery_SitemapsDelete

@dynamic feedpath, siteUrl;

+ (instancetype)queryWithSiteUrl:(NSString *)siteUrl
                        feedpath:(NSString *)feedpath {
  NSArray *pathParams = @[
    @"feedpath", @"siteUrl"
  ];
  NSString *pathURITemplate = @"sites/{siteUrl}/sitemaps/{feedpath}";
  GTLRWebmastersQuery_SitemapsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.siteUrl = siteUrl;
  query.feedpath = feedpath;
  query.loggingName = @"webmasters.sitemaps.delete";
  return query;
}

@end

@implementation GTLRWebmastersQuery_SitemapsGet

@dynamic feedpath, siteUrl;

+ (instancetype)queryWithSiteUrl:(NSString *)siteUrl
                        feedpath:(NSString *)feedpath {
  NSArray *pathParams = @[
    @"feedpath", @"siteUrl"
  ];
  NSString *pathURITemplate = @"sites/{siteUrl}/sitemaps/{feedpath}";
  GTLRWebmastersQuery_SitemapsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.siteUrl = siteUrl;
  query.feedpath = feedpath;
  query.expectedObjectClass = [GTLRWebmasters_WmxSitemap class];
  query.loggingName = @"webmasters.sitemaps.get";
  return query;
}

@end

@implementation GTLRWebmastersQuery_SitemapsList

@dynamic sitemapIndex, siteUrl;

+ (instancetype)queryWithSiteUrl:(NSString *)siteUrl {
  NSArray *pathParams = @[ @"siteUrl" ];
  NSString *pathURITemplate = @"sites/{siteUrl}/sitemaps";
  GTLRWebmastersQuery_SitemapsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.siteUrl = siteUrl;
  query.expectedObjectClass = [GTLRWebmasters_SitemapsListResponse class];
  query.loggingName = @"webmasters.sitemaps.list";
  return query;
}

@end

@implementation GTLRWebmastersQuery_SitemapsSubmit

@dynamic feedpath, siteUrl;

+ (instancetype)queryWithSiteUrl:(NSString *)siteUrl
                        feedpath:(NSString *)feedpath {
  NSArray *pathParams = @[
    @"feedpath", @"siteUrl"
  ];
  NSString *pathURITemplate = @"sites/{siteUrl}/sitemaps/{feedpath}";
  GTLRWebmastersQuery_SitemapsSubmit *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.siteUrl = siteUrl;
  query.feedpath = feedpath;
  query.loggingName = @"webmasters.sitemaps.submit";
  return query;
}

@end

@implementation GTLRWebmastersQuery_SitesAdd

@dynamic siteUrl;

+ (instancetype)queryWithSiteUrl:(NSString *)siteUrl {
  NSArray *pathParams = @[ @"siteUrl" ];
  NSString *pathURITemplate = @"sites/{siteUrl}";
  GTLRWebmastersQuery_SitesAdd *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.siteUrl = siteUrl;
  query.loggingName = @"webmasters.sites.add";
  return query;
}

@end

@implementation GTLRWebmastersQuery_SitesDelete

@dynamic siteUrl;

+ (instancetype)queryWithSiteUrl:(NSString *)siteUrl {
  NSArray *pathParams = @[ @"siteUrl" ];
  NSString *pathURITemplate = @"sites/{siteUrl}";
  GTLRWebmastersQuery_SitesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.siteUrl = siteUrl;
  query.loggingName = @"webmasters.sites.delete";
  return query;
}

@end

@implementation GTLRWebmastersQuery_SitesGet

@dynamic siteUrl;

+ (instancetype)queryWithSiteUrl:(NSString *)siteUrl {
  NSArray *pathParams = @[ @"siteUrl" ];
  NSString *pathURITemplate = @"sites/{siteUrl}";
  GTLRWebmastersQuery_SitesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.siteUrl = siteUrl;
  query.expectedObjectClass = [GTLRWebmasters_WmxSite class];
  query.loggingName = @"webmasters.sites.get";
  return query;
}

@end

@implementation GTLRWebmastersQuery_SitesList

+ (instancetype)query {
  NSString *pathURITemplate = @"sites";
  GTLRWebmastersQuery_SitesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRWebmasters_SitesListResponse class];
  query.loggingName = @"webmasters.sites.list";
  return query;
}

@end
