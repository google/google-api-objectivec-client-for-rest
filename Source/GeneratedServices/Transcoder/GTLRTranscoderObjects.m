// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Transcoder API (transcoder/v1beta1)
// Description:
//   This API converts video files into formats suitable for consumer
//   distribution.
// Documentation:
//   https://cloud.google.com/transcoder/docs/

#import "GTLRTranscoderObjects.h"

// ----------------------------------------------------------------------------
// Constants

// GTLRTranscoder_AnimationFade.fadeType
NSString * const kGTLRTranscoder_AnimationFade_FadeType_FadeIn = @"FADE_IN";
NSString * const kGTLRTranscoder_AnimationFade_FadeType_FadeOut = @"FADE_OUT";
NSString * const kGTLRTranscoder_AnimationFade_FadeType_FadeTypeUnspecified = @"FADE_TYPE_UNSPECIFIED";

// GTLRTranscoder_Job.state
NSString * const kGTLRTranscoder_Job_State_Failed              = @"FAILED";
NSString * const kGTLRTranscoder_Job_State_Pending             = @"PENDING";
NSString * const kGTLRTranscoder_Job_State_ProcessingStateUnspecified = @"PROCESSING_STATE_UNSPECIFIED";
NSString * const kGTLRTranscoder_Job_State_Running             = @"RUNNING";
NSString * const kGTLRTranscoder_Job_State_Succeeded           = @"SUCCEEDED";

// GTLRTranscoder_Manifest.type
NSString * const kGTLRTranscoder_Manifest_Type_Dash            = @"DASH";
NSString * const kGTLRTranscoder_Manifest_Type_Hls             = @"HLS";
NSString * const kGTLRTranscoder_Manifest_Type_ManifestTypeUnspecified = @"MANIFEST_TYPE_UNSPECIFIED";

// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_AdBreak
//

@implementation GTLRTranscoder_AdBreak
@dynamic startTimeOffset;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Aes128Encryption
//

@implementation GTLRTranscoder_Aes128Encryption
@dynamic keyUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Animation
//

@implementation GTLRTranscoder_Animation
@dynamic animationEnd, animationFade, animationStatic;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_AnimationEnd
//

@implementation GTLRTranscoder_AnimationEnd
@dynamic startTimeOffset;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_AnimationFade
//

@implementation GTLRTranscoder_AnimationFade
@dynamic endTimeOffset, fadeType, startTimeOffset, xy;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_AnimationStatic
//

@implementation GTLRTranscoder_AnimationStatic
@dynamic startTimeOffset, xy;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Audio
//

@implementation GTLRTranscoder_Audio
@dynamic highBoost, lowBoost, lufs;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_AudioAtom
//

@implementation GTLRTranscoder_AudioAtom
@dynamic channels, key;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"channels" : [GTLRTranscoder_AudioChannel class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_AudioChannel
//

@implementation GTLRTranscoder_AudioChannel
@dynamic inputs;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"inputs" : [GTLRTranscoder_AudioChannelInput class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_AudioChannelInput
//

@implementation GTLRTranscoder_AudioChannelInput
@dynamic channel, gainDb, key, track;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_AudioStream
//

@implementation GTLRTranscoder_AudioStream
@dynamic bitrateBps, channelCount, channelLayout, codec, mapping,
         sampleRateHertz;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"channelLayout" : [NSString class],
    @"mapping" : [GTLRTranscoder_AudioAtom class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Color
//

@implementation GTLRTranscoder_Color
@dynamic brightness, contrast, saturation;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Crop
//

@implementation GTLRTranscoder_Crop
@dynamic bottomPixels, leftPixels, rightPixels, topPixels;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Deblock
//

@implementation GTLRTranscoder_Deblock
@dynamic enabled, strength;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Denoise
//

@implementation GTLRTranscoder_Denoise
@dynamic strength, tune;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_EditAtom
//

@implementation GTLRTranscoder_EditAtom
@dynamic endTimeOffset, inputs, key, startTimeOffset;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"inputs" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_ElementaryStream
//

@implementation GTLRTranscoder_ElementaryStream
@dynamic audioStream, key, textStream, videoStream;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Empty
//

@implementation GTLRTranscoder_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Encryption
//

@implementation GTLRTranscoder_Encryption
@dynamic aes128, iv, key, mpegCenc, sampleAes;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_FailureDetail
//

@implementation GTLRTranscoder_FailureDetail
@dynamic descriptionProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Image
//

@implementation GTLRTranscoder_Image
@dynamic alpha, resolution, uri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Input
//

@implementation GTLRTranscoder_Input
@dynamic key, preprocessingConfig, uri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Job
//

@implementation GTLRTranscoder_Job
@dynamic config, createTime, endTime, failureDetails, failureReason, inputUri,
         name, originUri, outputUri, priority, progress, startTime, state,
         templateId, ttlAfterCompletionDays;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"failureDetails" : [GTLRTranscoder_FailureDetail class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_JobConfig
//

@implementation GTLRTranscoder_JobConfig
@dynamic adBreaks, editList, elementaryStreams, inputs, manifests, muxStreams,
         output, overlays, pubsubDestination, spriteSheets;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"adBreaks" : [GTLRTranscoder_AdBreak class],
    @"editList" : [GTLRTranscoder_EditAtom class],
    @"elementaryStreams" : [GTLRTranscoder_ElementaryStream class],
    @"inputs" : [GTLRTranscoder_Input class],
    @"manifests" : [GTLRTranscoder_Manifest class],
    @"muxStreams" : [GTLRTranscoder_MuxStream class],
    @"overlays" : [GTLRTranscoder_Overlay class],
    @"spriteSheets" : [GTLRTranscoder_SpriteSheet class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_JobTemplate
//

@implementation GTLRTranscoder_JobTemplate
@dynamic config, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_ListJobsResponse
//

@implementation GTLRTranscoder_ListJobsResponse
@dynamic jobs, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jobs" : [GTLRTranscoder_Job class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"jobs";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_ListJobTemplatesResponse
//

@implementation GTLRTranscoder_ListJobTemplatesResponse
@dynamic jobTemplates, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jobTemplates" : [GTLRTranscoder_JobTemplate class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"jobTemplates";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Manifest
//

@implementation GTLRTranscoder_Manifest
@dynamic fileName, muxStreams, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"muxStreams" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_MpegCommonEncryption
//

@implementation GTLRTranscoder_MpegCommonEncryption
@dynamic keyId, scheme;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_MuxStream
//

@implementation GTLRTranscoder_MuxStream
@dynamic container, elementaryStreams, encryption, fileName, key,
         segmentSettings;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"elementaryStreams" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_NormalizedCoordinate
//

@implementation GTLRTranscoder_NormalizedCoordinate
@dynamic x, y;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_OperationMetadata
//

@implementation GTLRTranscoder_OperationMetadata
@dynamic apiVersion, cancelRequested, createTime, endTime, statusDetail, target,
         verb;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_OriginUri
//

@implementation GTLRTranscoder_OriginUri
@dynamic dash, hls;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Output
//

@implementation GTLRTranscoder_Output
@dynamic uri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Overlay
//

@implementation GTLRTranscoder_Overlay
@dynamic animations, image;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"animations" : [GTLRTranscoder_Animation class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Pad
//

@implementation GTLRTranscoder_Pad
@dynamic bottomPixels, leftPixels, rightPixels, topPixels;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_PreprocessingConfig
//

@implementation GTLRTranscoder_PreprocessingConfig
@dynamic audio, color, crop, deblock, denoise, pad;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_Progress
//

@implementation GTLRTranscoder_Progress
@dynamic analyzed, encoded, notified, uploaded;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_PubsubDestination
//

@implementation GTLRTranscoder_PubsubDestination
@dynamic topic;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_SampleAesEncryption
//

@implementation GTLRTranscoder_SampleAesEncryption
@dynamic keyUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_SegmentSettings
//

@implementation GTLRTranscoder_SegmentSettings
@dynamic individualSegments, segmentDuration;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_SpriteSheet
//

@implementation GTLRTranscoder_SpriteSheet
@dynamic columnCount, endTimeOffset, filePrefix, format, interval, quality,
         rowCount, spriteHeightPixels, spriteWidthPixels, startTimeOffset,
         totalCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_TextAtom
//

@implementation GTLRTranscoder_TextAtom
@dynamic inputs, key;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"inputs" : [GTLRTranscoder_TextInput class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_TextInput
//

@implementation GTLRTranscoder_TextInput
@dynamic key, track;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_TextStream
//

@implementation GTLRTranscoder_TextStream
@dynamic codec, languageCode, mapping;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"mapping" : [GTLRTranscoder_TextAtom class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTranscoder_VideoStream
//

@implementation GTLRTranscoder_VideoStream
@dynamic allowOpenGop, aqStrength, bFrameCount, bitrateBps, bPyramid, codec,
         crfLevel, enableTwoPass, entropyCoder, frameRate, gopDuration,
         gopFrameCount, heightPixels, pixelFormat, preset, profile,
         rateControlMode, tune, vbvFullnessBits, vbvSizeBits, widthPixels;
@end
