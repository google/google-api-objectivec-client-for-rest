// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Gmail API (gmail/v1)
// Description:
//   Access Gmail mailboxes including sending user email.
// Documentation:
//   https://developers.google.com/gmail/api/

#import "GTLRGmailQuery.h"

#import "GTLRGmailObjects.h"

// ----------------------------------------------------------------------------
// Constants

// format
NSString * const kGTLRGmailFormatFull     = @"full";
NSString * const kGTLRGmailFormatMetadata = @"metadata";
NSString * const kGTLRGmailFormatMinimal  = @"minimal";
NSString * const kGTLRGmailFormatRaw      = @"raw";

// historyTypes
NSString * const kGTLRGmailHistoryTypesLabelAdded     = @"labelAdded";
NSString * const kGTLRGmailHistoryTypesLabelRemoved   = @"labelRemoved";
NSString * const kGTLRGmailHistoryTypesMessageAdded   = @"messageAdded";
NSString * const kGTLRGmailHistoryTypesMessageDeleted = @"messageDeleted";

// internalDateSource
NSString * const kGTLRGmailInternalDateSourceDateHeader   = @"dateHeader";
NSString * const kGTLRGmailInternalDateSourceReceivedTime = @"receivedTime";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRGmailQuery

@dynamic fields;

@end

@implementation GTLRGmailQuery_UsersDraftsCreate

@dynamic userId;

+ (instancetype)queryWithObject:(GTLRGmail_Draft *)object
                         userId:(NSString *)userId
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/drafts";
  GTLRGmailQuery_UsersDraftsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRGmail_Draft class];
  query.loggingName = @"gmail.users.drafts.create";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersDraftsDelete

@dynamic identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/drafts/{id}";
  GTLRGmailQuery_UsersDraftsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.identifier = identifier;
  query.loggingName = @"gmail.users.drafts.delete";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersDraftsGet

@dynamic format, identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/drafts/{id}";
  GTLRGmailQuery_UsersDraftsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRGmail_Draft class];
  query.loggingName = @"gmail.users.drafts.get";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersDraftsList

@dynamic includeSpamTrash, maxResults, pageToken, q, userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/drafts";
  GTLRGmailQuery_UsersDraftsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_ListDraftsResponse class];
  query.loggingName = @"gmail.users.drafts.list";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersDraftsSend

@dynamic userId;

+ (instancetype)queryWithObject:(GTLRGmail_Draft *)object
                         userId:(NSString *)userId
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/drafts/send";
  GTLRGmailQuery_UsersDraftsSend *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRGmail_Message class];
  query.loggingName = @"gmail.users.drafts.send";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersDraftsUpdate

@dynamic identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRGmail_Draft *)object
                         userId:(NSString *)userId
                     identifier:(NSString *)identifier
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/drafts/{id}";
  GTLRGmailQuery_UsersDraftsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.identifier = identifier;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRGmail_Draft class];
  query.loggingName = @"gmail.users.drafts.update";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersGetProfile

@dynamic userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/profile";
  GTLRGmailQuery_UsersGetProfile *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_Profile class];
  query.loggingName = @"gmail.users.getProfile";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersHistoryList

@dynamic historyTypes, labelId, maxResults, pageToken, startHistoryId, userId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"historyTypes" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/history";
  GTLRGmailQuery_UsersHistoryList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_ListHistoryResponse class];
  query.loggingName = @"gmail.users.history.list";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersLabelsCreate

@dynamic userId;

+ (instancetype)queryWithObject:(GTLRGmail_Label *)object
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/labels";
  GTLRGmailQuery_UsersLabelsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_Label class];
  query.loggingName = @"gmail.users.labels.create";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersLabelsDelete

@dynamic identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/labels/{id}";
  GTLRGmailQuery_UsersLabelsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.identifier = identifier;
  query.loggingName = @"gmail.users.labels.delete";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersLabelsGet

@dynamic identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/labels/{id}";
  GTLRGmailQuery_UsersLabelsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRGmail_Label class];
  query.loggingName = @"gmail.users.labels.get";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersLabelsList

@dynamic userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/labels";
  GTLRGmailQuery_UsersLabelsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_ListLabelsResponse class];
  query.loggingName = @"gmail.users.labels.list";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersLabelsPatch

@dynamic identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRGmail_Label *)object
                         userId:(NSString *)userId
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/labels/{id}";
  GTLRGmailQuery_UsersLabelsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRGmail_Label class];
  query.loggingName = @"gmail.users.labels.patch";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersLabelsUpdate

@dynamic identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRGmail_Label *)object
                         userId:(NSString *)userId
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/labels/{id}";
  GTLRGmailQuery_UsersLabelsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRGmail_Label class];
  query.loggingName = @"gmail.users.labels.update";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersMessagesAttachmentsGet

@dynamic identifier, messageId, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithUserId:(NSString *)userId
                      messageId:(NSString *)messageId
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"messageId", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/messages/{messageId}/attachments/{id}";
  GTLRGmailQuery_UsersMessagesAttachmentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.messageId = messageId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRGmail_MessagePartBody class];
  query.loggingName = @"gmail.users.messages.attachments.get";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersMessagesBatchDelete

@dynamic userId;

+ (instancetype)queryWithObject:(GTLRGmail_BatchDeleteMessagesRequest *)object
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/messages/batchDelete";
  GTLRGmailQuery_UsersMessagesBatchDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.loggingName = @"gmail.users.messages.batchDelete";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersMessagesBatchModify

@dynamic userId;

+ (instancetype)queryWithObject:(GTLRGmail_BatchModifyMessagesRequest *)object
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/messages/batchModify";
  GTLRGmailQuery_UsersMessagesBatchModify *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.loggingName = @"gmail.users.messages.batchModify";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersMessagesDelete

@dynamic identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/messages/{id}";
  GTLRGmailQuery_UsersMessagesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.identifier = identifier;
  query.loggingName = @"gmail.users.messages.delete";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersMessagesGet

@dynamic format, identifier, metadataHeaders, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metadataHeaders" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/messages/{id}";
  GTLRGmailQuery_UsersMessagesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRGmail_Message class];
  query.loggingName = @"gmail.users.messages.get";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersMessagesImport

@dynamic deleted, internalDateSource, neverMarkSpam, processForCalendar, userId;

+ (instancetype)queryWithObject:(GTLRGmail_Message *)object
                         userId:(NSString *)userId
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/messages/import";
  GTLRGmailQuery_UsersMessagesImport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRGmail_Message class];
  query.loggingName = @"gmail.users.messages.import";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersMessagesInsert

@dynamic deleted, internalDateSource, userId;

+ (instancetype)queryWithObject:(GTLRGmail_Message *)object
                         userId:(NSString *)userId
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/messages";
  GTLRGmailQuery_UsersMessagesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRGmail_Message class];
  query.loggingName = @"gmail.users.messages.insert";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersMessagesList

@dynamic includeSpamTrash, labelIds, maxResults, pageToken, q, userId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labelIds" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/messages";
  GTLRGmailQuery_UsersMessagesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_ListMessagesResponse class];
  query.loggingName = @"gmail.users.messages.list";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersMessagesModify

@dynamic identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRGmail_ModifyMessageRequest *)object
                         userId:(NSString *)userId
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/messages/{id}/modify";
  GTLRGmailQuery_UsersMessagesModify *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRGmail_Message class];
  query.loggingName = @"gmail.users.messages.modify";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersMessagesSend

@dynamic userId;

+ (instancetype)queryWithObject:(GTLRGmail_Message *)object
                         userId:(NSString *)userId
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/messages/send";
  GTLRGmailQuery_UsersMessagesSend *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRGmail_Message class];
  query.loggingName = @"gmail.users.messages.send";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersMessagesTrash

@dynamic identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/messages/{id}/trash";
  GTLRGmailQuery_UsersMessagesTrash *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRGmail_Message class];
  query.loggingName = @"gmail.users.messages.trash";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersMessagesUntrash

@dynamic identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/messages/{id}/untrash";
  GTLRGmailQuery_UsersMessagesUntrash *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRGmail_Message class];
  query.loggingName = @"gmail.users.messages.untrash";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsDelegatesCreate

@dynamic userId;

+ (instancetype)queryWithObject:(GTLRGmail_Delegate *)object
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/settings/delegates";
  GTLRGmailQuery_UsersSettingsDelegatesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_Delegate class];
  query.loggingName = @"gmail.users.settings.delegates.create";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsDelegatesDelete

@dynamic delegateEmail, userId;

+ (instancetype)queryWithUserId:(NSString *)userId
                  delegateEmail:(NSString *)delegateEmail {
  NSArray *pathParams = @[
    @"delegateEmail", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/settings/delegates/{delegateEmail}";
  GTLRGmailQuery_UsersSettingsDelegatesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.delegateEmail = delegateEmail;
  query.loggingName = @"gmail.users.settings.delegates.delete";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsDelegatesGet

@dynamic delegateEmail, userId;

+ (instancetype)queryWithUserId:(NSString *)userId
                  delegateEmail:(NSString *)delegateEmail {
  NSArray *pathParams = @[
    @"delegateEmail", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/settings/delegates/{delegateEmail}";
  GTLRGmailQuery_UsersSettingsDelegatesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.delegateEmail = delegateEmail;
  query.expectedObjectClass = [GTLRGmail_Delegate class];
  query.loggingName = @"gmail.users.settings.delegates.get";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsDelegatesList

@dynamic userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/settings/delegates";
  GTLRGmailQuery_UsersSettingsDelegatesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_ListDelegatesResponse class];
  query.loggingName = @"gmail.users.settings.delegates.list";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsFiltersCreate

@dynamic userId;

+ (instancetype)queryWithObject:(GTLRGmail_Filter *)object
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/settings/filters";
  GTLRGmailQuery_UsersSettingsFiltersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_Filter class];
  query.loggingName = @"gmail.users.settings.filters.create";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsFiltersDelete

@dynamic identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/settings/filters/{id}";
  GTLRGmailQuery_UsersSettingsFiltersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.identifier = identifier;
  query.loggingName = @"gmail.users.settings.filters.delete";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsFiltersGet

@dynamic identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/settings/filters/{id}";
  GTLRGmailQuery_UsersSettingsFiltersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRGmail_Filter class];
  query.loggingName = @"gmail.users.settings.filters.get";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsFiltersList

@dynamic userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/settings/filters";
  GTLRGmailQuery_UsersSettingsFiltersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_ListFiltersResponse class];
  query.loggingName = @"gmail.users.settings.filters.list";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsForwardingAddressesCreate

@dynamic userId;

+ (instancetype)queryWithObject:(GTLRGmail_ForwardingAddress *)object
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/settings/forwardingAddresses";
  GTLRGmailQuery_UsersSettingsForwardingAddressesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_ForwardingAddress class];
  query.loggingName = @"gmail.users.settings.forwardingAddresses.create";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsForwardingAddressesDelete

@dynamic forwardingEmail, userId;

+ (instancetype)queryWithUserId:(NSString *)userId
                forwardingEmail:(NSString *)forwardingEmail {
  NSArray *pathParams = @[
    @"forwardingEmail", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/settings/forwardingAddresses/{forwardingEmail}";
  GTLRGmailQuery_UsersSettingsForwardingAddressesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.forwardingEmail = forwardingEmail;
  query.loggingName = @"gmail.users.settings.forwardingAddresses.delete";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsForwardingAddressesGet

@dynamic forwardingEmail, userId;

+ (instancetype)queryWithUserId:(NSString *)userId
                forwardingEmail:(NSString *)forwardingEmail {
  NSArray *pathParams = @[
    @"forwardingEmail", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/settings/forwardingAddresses/{forwardingEmail}";
  GTLRGmailQuery_UsersSettingsForwardingAddressesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.forwardingEmail = forwardingEmail;
  query.expectedObjectClass = [GTLRGmail_ForwardingAddress class];
  query.loggingName = @"gmail.users.settings.forwardingAddresses.get";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsForwardingAddressesList

@dynamic userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/settings/forwardingAddresses";
  GTLRGmailQuery_UsersSettingsForwardingAddressesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_ListForwardingAddressesResponse class];
  query.loggingName = @"gmail.users.settings.forwardingAddresses.list";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsGetAutoForwarding

@dynamic userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/settings/autoForwarding";
  GTLRGmailQuery_UsersSettingsGetAutoForwarding *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_AutoForwarding class];
  query.loggingName = @"gmail.users.settings.getAutoForwarding";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsGetImap

@dynamic userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/settings/imap";
  GTLRGmailQuery_UsersSettingsGetImap *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_ImapSettings class];
  query.loggingName = @"gmail.users.settings.getImap";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsGetPop

@dynamic userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/settings/pop";
  GTLRGmailQuery_UsersSettingsGetPop *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_PopSettings class];
  query.loggingName = @"gmail.users.settings.getPop";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsGetVacation

@dynamic userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/settings/vacation";
  GTLRGmailQuery_UsersSettingsGetVacation *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_VacationSettings class];
  query.loggingName = @"gmail.users.settings.getVacation";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsSendAsCreate

@dynamic userId;

+ (instancetype)queryWithObject:(GTLRGmail_SendAs *)object
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/settings/sendAs";
  GTLRGmailQuery_UsersSettingsSendAsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_SendAs class];
  query.loggingName = @"gmail.users.settings.sendAs.create";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsSendAsDelete

@dynamic sendAsEmail, userId;

+ (instancetype)queryWithUserId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail {
  NSArray *pathParams = @[
    @"sendAsEmail", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/settings/sendAs/{sendAsEmail}";
  GTLRGmailQuery_UsersSettingsSendAsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.sendAsEmail = sendAsEmail;
  query.loggingName = @"gmail.users.settings.sendAs.delete";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsSendAsGet

@dynamic sendAsEmail, userId;

+ (instancetype)queryWithUserId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail {
  NSArray *pathParams = @[
    @"sendAsEmail", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/settings/sendAs/{sendAsEmail}";
  GTLRGmailQuery_UsersSettingsSendAsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.sendAsEmail = sendAsEmail;
  query.expectedObjectClass = [GTLRGmail_SendAs class];
  query.loggingName = @"gmail.users.settings.sendAs.get";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsSendAsList

@dynamic userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/settings/sendAs";
  GTLRGmailQuery_UsersSettingsSendAsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_ListSendAsResponse class];
  query.loggingName = @"gmail.users.settings.sendAs.list";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsSendAsPatch

@dynamic sendAsEmail, userId;

+ (instancetype)queryWithObject:(GTLRGmail_SendAs *)object
                         userId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"sendAsEmail", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/settings/sendAs/{sendAsEmail}";
  GTLRGmailQuery_UsersSettingsSendAsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.sendAsEmail = sendAsEmail;
  query.expectedObjectClass = [GTLRGmail_SendAs class];
  query.loggingName = @"gmail.users.settings.sendAs.patch";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsSendAsSmimeInfoDelete

@dynamic identifier, sendAsEmail, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithUserId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"sendAsEmail", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}";
  GTLRGmailQuery_UsersSettingsSendAsSmimeInfoDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.sendAsEmail = sendAsEmail;
  query.identifier = identifier;
  query.loggingName = @"gmail.users.settings.sendAs.smimeInfo.delete";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsSendAsSmimeInfoGet

@dynamic identifier, sendAsEmail, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithUserId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"sendAsEmail", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}";
  GTLRGmailQuery_UsersSettingsSendAsSmimeInfoGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.sendAsEmail = sendAsEmail;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRGmail_SmimeInfo class];
  query.loggingName = @"gmail.users.settings.sendAs.smimeInfo.get";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsSendAsSmimeInfoInsert

@dynamic sendAsEmail, userId;

+ (instancetype)queryWithObject:(GTLRGmail_SmimeInfo *)object
                         userId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"sendAsEmail", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/settings/sendAs/{sendAsEmail}/smimeInfo";
  GTLRGmailQuery_UsersSettingsSendAsSmimeInfoInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.sendAsEmail = sendAsEmail;
  query.expectedObjectClass = [GTLRGmail_SmimeInfo class];
  query.loggingName = @"gmail.users.settings.sendAs.smimeInfo.insert";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsSendAsSmimeInfoList

@dynamic sendAsEmail, userId;

+ (instancetype)queryWithUserId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail {
  NSArray *pathParams = @[
    @"sendAsEmail", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/settings/sendAs/{sendAsEmail}/smimeInfo";
  GTLRGmailQuery_UsersSettingsSendAsSmimeInfoList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.sendAsEmail = sendAsEmail;
  query.expectedObjectClass = [GTLRGmail_ListSmimeInfoResponse class];
  query.loggingName = @"gmail.users.settings.sendAs.smimeInfo.list";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsSendAsSmimeInfoSetDefault

@dynamic identifier, sendAsEmail, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithUserId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"sendAsEmail", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault";
  GTLRGmailQuery_UsersSettingsSendAsSmimeInfoSetDefault *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.sendAsEmail = sendAsEmail;
  query.identifier = identifier;
  query.loggingName = @"gmail.users.settings.sendAs.smimeInfo.setDefault";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsSendAsUpdate

@dynamic sendAsEmail, userId;

+ (instancetype)queryWithObject:(GTLRGmail_SendAs *)object
                         userId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"sendAsEmail", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/settings/sendAs/{sendAsEmail}";
  GTLRGmailQuery_UsersSettingsSendAsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.sendAsEmail = sendAsEmail;
  query.expectedObjectClass = [GTLRGmail_SendAs class];
  query.loggingName = @"gmail.users.settings.sendAs.update";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsSendAsVerify

@dynamic sendAsEmail, userId;

+ (instancetype)queryWithUserId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail {
  NSArray *pathParams = @[
    @"sendAsEmail", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/settings/sendAs/{sendAsEmail}/verify";
  GTLRGmailQuery_UsersSettingsSendAsVerify *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.sendAsEmail = sendAsEmail;
  query.loggingName = @"gmail.users.settings.sendAs.verify";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsUpdateAutoForwarding

@dynamic userId;

+ (instancetype)queryWithObject:(GTLRGmail_AutoForwarding *)object
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/settings/autoForwarding";
  GTLRGmailQuery_UsersSettingsUpdateAutoForwarding *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_AutoForwarding class];
  query.loggingName = @"gmail.users.settings.updateAutoForwarding";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsUpdateImap

@dynamic userId;

+ (instancetype)queryWithObject:(GTLRGmail_ImapSettings *)object
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/settings/imap";
  GTLRGmailQuery_UsersSettingsUpdateImap *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_ImapSettings class];
  query.loggingName = @"gmail.users.settings.updateImap";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsUpdatePop

@dynamic userId;

+ (instancetype)queryWithObject:(GTLRGmail_PopSettings *)object
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/settings/pop";
  GTLRGmailQuery_UsersSettingsUpdatePop *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_PopSettings class];
  query.loggingName = @"gmail.users.settings.updatePop";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersSettingsUpdateVacation

@dynamic userId;

+ (instancetype)queryWithObject:(GTLRGmail_VacationSettings *)object
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/settings/vacation";
  GTLRGmailQuery_UsersSettingsUpdateVacation *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_VacationSettings class];
  query.loggingName = @"gmail.users.settings.updateVacation";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersStop

@dynamic userId;

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/stop";
  GTLRGmailQuery_UsersStop *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.loggingName = @"gmail.users.stop";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersThreadsDelete

@dynamic identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/threads/{id}";
  GTLRGmailQuery_UsersThreadsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.identifier = identifier;
  query.loggingName = @"gmail.users.threads.delete";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersThreadsGet

@dynamic format, identifier, metadataHeaders, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metadataHeaders" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/threads/{id}";
  GTLRGmailQuery_UsersThreadsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRGmail_Thread class];
  query.loggingName = @"gmail.users.threads.get";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersThreadsList

@dynamic includeSpamTrash, labelIds, maxResults, pageToken, q, userId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labelIds" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithUserId:(NSString *)userId {
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/threads";
  GTLRGmailQuery_UsersThreadsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_ListThreadsResponse class];
  query.loggingName = @"gmail.users.threads.list";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersThreadsModify

@dynamic identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRGmail_ModifyThreadRequest *)object
                         userId:(NSString *)userId
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/threads/{id}/modify";
  GTLRGmailQuery_UsersThreadsModify *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRGmail_Thread class];
  query.loggingName = @"gmail.users.threads.modify";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersThreadsTrash

@dynamic identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/threads/{id}/trash";
  GTLRGmailQuery_UsersThreadsTrash *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRGmail_Thread class];
  query.loggingName = @"gmail.users.threads.trash";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersThreadsUntrash

@dynamic identifier, userId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"userId"
  ];
  NSString *pathURITemplate = @"{userId}/threads/{id}/untrash";
  GTLRGmailQuery_UsersThreadsUntrash *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.userId = userId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRGmail_Thread class];
  query.loggingName = @"gmail.users.threads.untrash";
  return query;
}

@end

@implementation GTLRGmailQuery_UsersWatch

@dynamic userId;

+ (instancetype)queryWithObject:(GTLRGmail_WatchRequest *)object
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userId" ];
  NSString *pathURITemplate = @"{userId}/watch";
  GTLRGmailQuery_UsersWatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userId = userId;
  query.expectedObjectClass = [GTLRGmail_WatchResponse class];
  query.loggingName = @"gmail.users.watch";
  return query;
}

@end
