// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Gmail API (gmail/v1)
// Description:
//   Access Gmail mailboxes including sending user email.
// Documentation:
//   https://developers.google.com/gmail/api/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRGmail_AutoForwarding;
@class GTLRGmail_BatchDeleteMessagesRequest;
@class GTLRGmail_BatchModifyMessagesRequest;
@class GTLRGmail_Delegate;
@class GTLRGmail_Draft;
@class GTLRGmail_Filter;
@class GTLRGmail_ForwardingAddress;
@class GTLRGmail_ImapSettings;
@class GTLRGmail_Label;
@class GTLRGmail_Message;
@class GTLRGmail_ModifyMessageRequest;
@class GTLRGmail_ModifyThreadRequest;
@class GTLRGmail_PopSettings;
@class GTLRGmail_SendAs;
@class GTLRGmail_SmimeInfo;
@class GTLRGmail_VacationSettings;
@class GTLRGmail_WatchRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// format

/** Value: "full" */
GTLR_EXTERN NSString * const kGTLRGmailFormatFull;
/** Value: "metadata" */
GTLR_EXTERN NSString * const kGTLRGmailFormatMetadata;
/** Value: "minimal" */
GTLR_EXTERN NSString * const kGTLRGmailFormatMinimal;
/** Value: "raw" */
GTLR_EXTERN NSString * const kGTLRGmailFormatRaw;

// ----------------------------------------------------------------------------
// historyTypes

/** Value: "labelAdded" */
GTLR_EXTERN NSString * const kGTLRGmailHistoryTypesLabelAdded;
/** Value: "labelRemoved" */
GTLR_EXTERN NSString * const kGTLRGmailHistoryTypesLabelRemoved;
/** Value: "messageAdded" */
GTLR_EXTERN NSString * const kGTLRGmailHistoryTypesMessageAdded;
/** Value: "messageDeleted" */
GTLR_EXTERN NSString * const kGTLRGmailHistoryTypesMessageDeleted;

// ----------------------------------------------------------------------------
// internalDateSource

/** Value: "dateHeader" */
GTLR_EXTERN NSString * const kGTLRGmailInternalDateSourceDateHeader;
/** Value: "receivedTime" */
GTLR_EXTERN NSString * const kGTLRGmailInternalDateSourceReceivedTime;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Gmail query classes.
 */
@interface GTLRGmailQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new draft with the DRAFT label.
 *
 *  Method: gmail.users.drafts.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailCompose
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersDraftsCreate : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersDraftsCreateWithObject:userId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Draft.
 *
 *  Creates a new draft with the DRAFT label.
 *
 *  @param object The @c GTLRGmail_Draft to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param uploadParameters The media to include in this query. Maximum size
 *    35MB. Accepted MIME type: message/rfc822
 *
 *  @return GTLRGmailQuery_UsersDraftsCreate
 */
+ (instancetype)queryWithObject:(GTLRGmail_Draft *)object
                         userId:(NSString *)userId
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Immediately and permanently deletes the specified draft. Does not simply
 *  trash it.
 *
 *  Method: gmail.users.drafts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailCompose
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersDraftsDelete : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersDraftsDeleteWithuserId:identifier:]

/**
 *  The ID of the draft to delete.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Immediately and permanently deletes the specified draft. Does not simply
 *  trash it.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the draft to delete.
 *
 *  @return GTLRGmailQuery_UsersDraftsDelete
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Gets the specified draft.
 *
 *  Method: gmail.users.drafts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailCompose
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersDraftsGet : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersDraftsGetWithuserId:identifier:]

/**
 *  The format to return the draft in.
 *
 *  Likely values:
 *    @arg @c kGTLRGmailFormatFull Value "full"
 *    @arg @c kGTLRGmailFormatMetadata Value "metadata"
 *    @arg @c kGTLRGmailFormatMinimal Value "minimal"
 *    @arg @c kGTLRGmailFormatRaw Value "raw"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRGmailFormatFull.
 */
@property(nonatomic, copy, nullable) NSString *format;

/**
 *  The ID of the draft to retrieve.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Draft.
 *
 *  Gets the specified draft.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the draft to retrieve.
 *
 *  @return GTLRGmailQuery_UsersDraftsGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Lists the drafts in the user's mailbox.
 *
 *  Method: gmail.users.drafts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailCompose
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersDraftsList : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersDraftsListWithuserId:]

/**
 *  Include drafts from SPAM and TRASH in the results.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL includeSpamTrash;

/**
 *  Maximum number of drafts to return.
 *
 *  @note If not set, the documented server-side default will be 100.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** Page token to retrieve a specific page of results in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Only return draft messages matching the specified query. Supports the same
 *  query format as the Gmail search box. For example,
 *  "from:someuser\@example.com rfc822msgid: is:unread".
 */
@property(nonatomic, copy, nullable) NSString *q;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ListDraftsResponse.
 *
 *  Lists the drafts in the user's mailbox.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersDraftsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Sends the specified, existing draft to the recipients in the To, Cc, and Bcc
 *  headers.
 *
 *  Method: gmail.users.drafts.send
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailCompose
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersDraftsSend : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersDraftsSendWithObject:userId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Message.
 *
 *  Sends the specified, existing draft to the recipients in the To, Cc, and Bcc
 *  headers.
 *
 *  @param object The @c GTLRGmail_Draft to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param uploadParameters The media to include in this query. Maximum size
 *    35MB. Accepted MIME type: message/rfc822
 *
 *  @return GTLRGmailQuery_UsersDraftsSend
 */
+ (instancetype)queryWithObject:(GTLRGmail_Draft *)object
                         userId:(NSString *)userId
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Replaces a draft's content.
 *
 *  Method: gmail.users.drafts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailCompose
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersDraftsUpdate : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersDraftsUpdateWithObject:userId:identifier:]

/**
 *  The ID of the draft to update.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Draft.
 *
 *  Replaces a draft's content.
 *
 *  @param object The @c GTLRGmail_Draft to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the draft to update.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    35MB. Accepted MIME type: message/rfc822
 *
 *  @return GTLRGmailQuery_UsersDraftsUpdate
 */
+ (instancetype)queryWithObject:(GTLRGmail_Draft *)object
                         userId:(NSString *)userId
                     identifier:(NSString *)identifier
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Gets the current user's Gmail profile.
 *
 *  Method: gmail.users.getProfile
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailCompose
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailMetadata
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersGetProfile : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersGetProfileWithuserId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Profile.
 *
 *  Gets the current user's Gmail profile.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersGetProfile
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Lists the history of all changes to the given mailbox. History results are
 *  returned in chronological order (increasing historyId).
 *
 *  Method: gmail.users.history.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailMetadata
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersHistoryList : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersHistoryListWithuserId:]

/**
 *  History types to be returned by the function
 *
 *  Likely values:
 *    @arg @c kGTLRGmailHistoryTypesLabelAdded Value "labelAdded"
 *    @arg @c kGTLRGmailHistoryTypesLabelRemoved Value "labelRemoved"
 *    @arg @c kGTLRGmailHistoryTypesMessageAdded Value "messageAdded"
 *    @arg @c kGTLRGmailHistoryTypesMessageDeleted Value "messageDeleted"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *historyTypes;

/** Only return messages with a label matching the ID. */
@property(nonatomic, copy, nullable) NSString *labelId;

/**
 *  The maximum number of history records to return.
 *
 *  @note If not set, the documented server-side default will be 100.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** Page token to retrieve a specific page of results in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Returns history records after the specified startHistoryId. The
 *  supplied startHistoryId should be obtained from the historyId of a message,
 *  thread, or previous list response. History IDs increase chronologically but
 *  are not contiguous with random gaps in between valid IDs. Supplying an
 *  invalid or out of date startHistoryId typically returns an HTTP 404 error
 *  code. A historyId is typically valid for at least a week, but in some rare
 *  circumstances may be valid for only a few hours. If you receive an HTTP 404
 *  error response, your application should perform a full sync. If you receive
 *  no nextPageToken in the response, there are no updates to retrieve and you
 *  can store the returned historyId for a future request.
 */
@property(nonatomic, assign) unsigned long long startHistoryId;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ListHistoryResponse.
 *
 *  Lists the history of all changes to the given mailbox. History results are
 *  returned in chronological order (increasing historyId).
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersHistoryList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Creates a new label.
 *
 *  Method: gmail.users.labels.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailLabels
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersLabelsCreate : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersLabelsCreateWithObject:userId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Label.
 *
 *  Creates a new label.
 *
 *  @param object The @c GTLRGmail_Label to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersLabelsCreate
 */
+ (instancetype)queryWithObject:(GTLRGmail_Label *)object
                         userId:(NSString *)userId;

@end

/**
 *  Immediately and permanently deletes the specified label and removes it from
 *  any messages and threads that it is applied to.
 *
 *  Method: gmail.users.labels.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailLabels
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersLabelsDelete : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersLabelsDeleteWithuserId:identifier:]

/**
 *  The ID of the label to delete.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Immediately and permanently deletes the specified label and removes it from
 *  any messages and threads that it is applied to.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the label to delete.
 *
 *  @return GTLRGmailQuery_UsersLabelsDelete
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Gets the specified label.
 *
 *  Method: gmail.users.labels.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailLabels
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailMetadata
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersLabelsGet : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersLabelsGetWithuserId:identifier:]

/**
 *  The ID of the label to retrieve.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Label.
 *
 *  Gets the specified label.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the label to retrieve.
 *
 *  @return GTLRGmailQuery_UsersLabelsGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Lists all labels in the user's mailbox.
 *
 *  Method: gmail.users.labels.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailLabels
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailMetadata
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersLabelsList : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersLabelsListWithuserId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ListLabelsResponse.
 *
 *  Lists all labels in the user's mailbox.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersLabelsList
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Updates the specified label. This method supports patch semantics.
 *
 *  Method: gmail.users.labels.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailLabels
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersLabelsPatch : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersLabelsPatchWithObject:userId:identifier:]

/**
 *  The ID of the label to update.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Label.
 *
 *  Updates the specified label. This method supports patch semantics.
 *
 *  @param object The @c GTLRGmail_Label to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the label to update.
 *
 *  @return GTLRGmailQuery_UsersLabelsPatch
 */
+ (instancetype)queryWithObject:(GTLRGmail_Label *)object
                         userId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Updates the specified label.
 *
 *  Method: gmail.users.labels.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailLabels
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersLabelsUpdate : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersLabelsUpdateWithObject:userId:identifier:]

/**
 *  The ID of the label to update.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Label.
 *
 *  Updates the specified label.
 *
 *  @param object The @c GTLRGmail_Label to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the label to update.
 *
 *  @return GTLRGmailQuery_UsersLabelsUpdate
 */
+ (instancetype)queryWithObject:(GTLRGmail_Label *)object
                         userId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Gets the specified message attachment.
 *
 *  Method: gmail.users.messages.attachments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersMessagesAttachmentsGet : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesAttachmentsGetWithuserId:messageId:identifier:]

/**
 *  The ID of the attachment.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The ID of the message containing the attachment. */
@property(nonatomic, copy, nullable) NSString *messageId;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_MessagePartBody.
 *
 *  Gets the specified message attachment.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param messageId The ID of the message containing the attachment.
 *  @param identifier The ID of the attachment.
 *
 *  @return GTLRGmailQuery_UsersMessagesAttachmentsGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                      messageId:(NSString *)messageId
                     identifier:(NSString *)identifier;

@end

/**
 *  Deletes many messages by message ID. Provides no guarantees that messages
 *  were not already deleted or even existed at all.
 *
 *  Method: gmail.users.messages.batchDelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 */
@interface GTLRGmailQuery_UsersMessagesBatchDelete : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesBatchDeleteWithObject:userId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes many messages by message ID. Provides no guarantees that messages
 *  were not already deleted or even existed at all.
 *
 *  @param object The @c GTLRGmail_BatchDeleteMessagesRequest to include in the
 *    query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersMessagesBatchDelete
 */
+ (instancetype)queryWithObject:(GTLRGmail_BatchDeleteMessagesRequest *)object
                         userId:(NSString *)userId;

@end

/**
 *  Modifies the labels on the specified messages.
 *
 *  Method: gmail.users.messages.batchModify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersMessagesBatchModify : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesBatchModifyWithObject:userId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Modifies the labels on the specified messages.
 *
 *  @param object The @c GTLRGmail_BatchModifyMessagesRequest to include in the
 *    query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersMessagesBatchModify
 */
+ (instancetype)queryWithObject:(GTLRGmail_BatchModifyMessagesRequest *)object
                         userId:(NSString *)userId;

@end

/**
 *  Immediately and permanently deletes the specified message. This operation
 *  cannot be undone. Prefer messages.trash instead.
 *
 *  Method: gmail.users.messages.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 */
@interface GTLRGmailQuery_UsersMessagesDelete : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesDeleteWithuserId:identifier:]

/**
 *  The ID of the message to delete.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Immediately and permanently deletes the specified message. This operation
 *  cannot be undone. Prefer messages.trash instead.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the message to delete.
 *
 *  @return GTLRGmailQuery_UsersMessagesDelete
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Gets the specified message.
 *
 *  Method: gmail.users.messages.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailMetadata
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersMessagesGet : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesGetWithuserId:identifier:]

/**
 *  The format to return the message in.
 *
 *  Likely values:
 *    @arg @c kGTLRGmailFormatFull Value "full"
 *    @arg @c kGTLRGmailFormatMetadata Value "metadata"
 *    @arg @c kGTLRGmailFormatMinimal Value "minimal"
 *    @arg @c kGTLRGmailFormatRaw Value "raw"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRGmailFormatFull.
 */
@property(nonatomic, copy, nullable) NSString *format;

/**
 *  The ID of the message to retrieve.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** When given and format is METADATA, only include headers specified. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metadataHeaders;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Message.
 *
 *  Gets the specified message.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the message to retrieve.
 *
 *  @return GTLRGmailQuery_UsersMessagesGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Imports a message into only this user's mailbox, with standard email
 *  delivery scanning and classification similar to receiving via SMTP. Does not
 *  send a message.
 *
 *  Method: gmail.users.messages.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailInsert
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersMessagesImport : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesImportWithObject:userId:]

/**
 *  Mark the email as permanently deleted (not TRASH) and only visible in Google
 *  Vault to a Vault administrator. Only used for G Suite accounts.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL deleted;

/**
 *  Source for Gmail's internal date of the message.
 *
 *  Likely values:
 *    @arg @c kGTLRGmailInternalDateSourceDateHeader Value "dateHeader"
 *    @arg @c kGTLRGmailInternalDateSourceReceivedTime Value "receivedTime"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRGmailInternalDateSourceDateHeader.
 */
@property(nonatomic, copy, nullable) NSString *internalDateSource;

/**
 *  Ignore the Gmail spam classifier decision and never mark this email as SPAM
 *  in the mailbox.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL neverMarkSpam;

/**
 *  Process calendar invites in the email and add any extracted meetings to the
 *  Google Calendar for this user.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL processForCalendar;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Message.
 *
 *  Imports a message into only this user's mailbox, with standard email
 *  delivery scanning and classification similar to receiving via SMTP. Does not
 *  send a message.
 *
 *  @param object The @c GTLRGmail_Message to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param uploadParameters The media to include in this query. Maximum size
 *    50MB. Accepted MIME type: message/rfc822
 *
 *  @return GTLRGmailQuery_UsersMessagesImport
 */
+ (instancetype)queryWithObject:(GTLRGmail_Message *)object
                         userId:(NSString *)userId
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Directly inserts a message into only this user's mailbox similar to IMAP
 *  APPEND, bypassing most scanning and classification. Does not send a message.
 *
 *  Method: gmail.users.messages.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailInsert
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersMessagesInsert : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesInsertWithObject:userId:]

/**
 *  Mark the email as permanently deleted (not TRASH) and only visible in Google
 *  Vault to a Vault administrator. Only used for G Suite accounts.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL deleted;

/**
 *  Source for Gmail's internal date of the message.
 *
 *  Likely values:
 *    @arg @c kGTLRGmailInternalDateSourceDateHeader Value "dateHeader"
 *    @arg @c kGTLRGmailInternalDateSourceReceivedTime Value "receivedTime"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRGmailInternalDateSourceReceivedTime.
 */
@property(nonatomic, copy, nullable) NSString *internalDateSource;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Message.
 *
 *  Directly inserts a message into only this user's mailbox similar to IMAP
 *  APPEND, bypassing most scanning and classification. Does not send a message.
 *
 *  @param object The @c GTLRGmail_Message to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param uploadParameters The media to include in this query. Maximum size
 *    50MB. Accepted MIME type: message/rfc822
 *
 *  @return GTLRGmailQuery_UsersMessagesInsert
 */
+ (instancetype)queryWithObject:(GTLRGmail_Message *)object
                         userId:(NSString *)userId
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Lists the messages in the user's mailbox.
 *
 *  Method: gmail.users.messages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailMetadata
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersMessagesList : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesListWithuserId:]

/**
 *  Include messages from SPAM and TRASH in the results.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL includeSpamTrash;

/**
 *  Only return messages with labels that match all of the specified label IDs.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *labelIds;

/**
 *  Maximum number of messages to return.
 *
 *  @note If not set, the documented server-side default will be 100.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** Page token to retrieve a specific page of results in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Only return messages matching the specified query. Supports the same query
 *  format as the Gmail search box. For example, "from:someuser\@example.com
 *  rfc822msgid:<somemsgid\@example.com> is:unread". Parameter cannot be used
 *  when accessing the api using the gmail.metadata scope.
 */
@property(nonatomic, copy, nullable) NSString *q;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ListMessagesResponse.
 *
 *  Lists the messages in the user's mailbox.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersMessagesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Modifies the labels on the specified message.
 *
 *  Method: gmail.users.messages.modify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersMessagesModify : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesModifyWithObject:userId:identifier:]

/**
 *  The ID of the message to modify.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Message.
 *
 *  Modifies the labels on the specified message.
 *
 *  @param object The @c GTLRGmail_ModifyMessageRequest to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the message to modify.
 *
 *  @return GTLRGmailQuery_UsersMessagesModify
 */
+ (instancetype)queryWithObject:(GTLRGmail_ModifyMessageRequest *)object
                         userId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Sends the specified message to the recipients in the To, Cc, and Bcc
 *  headers.
 *
 *  Method: gmail.users.messages.send
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailCompose
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailSend
 */
@interface GTLRGmailQuery_UsersMessagesSend : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesSendWithObject:userId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Message.
 *
 *  Sends the specified message to the recipients in the To, Cc, and Bcc
 *  headers.
 *
 *  @param object The @c GTLRGmail_Message to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param uploadParameters The media to include in this query. Maximum size
 *    35MB. Accepted MIME type: message/rfc822
 *
 *  @return GTLRGmailQuery_UsersMessagesSend
 */
+ (instancetype)queryWithObject:(GTLRGmail_Message *)object
                         userId:(NSString *)userId
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Moves the specified message to the trash.
 *
 *  Method: gmail.users.messages.trash
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersMessagesTrash : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesTrashWithuserId:identifier:]

/**
 *  The ID of the message to Trash.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Message.
 *
 *  Moves the specified message to the trash.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the message to Trash.
 *
 *  @return GTLRGmailQuery_UsersMessagesTrash
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Removes the specified message from the trash.
 *
 *  Method: gmail.users.messages.untrash
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersMessagesUntrash : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersMessagesUntrashWithuserId:identifier:]

/**
 *  The ID of the message to remove from Trash.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Message.
 *
 *  Removes the specified message from the trash.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the message to remove from Trash.
 *
 *  @return GTLRGmailQuery_UsersMessagesUntrash
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Adds a delegate with its verification status set directly to accepted,
 *  without sending any verification email. The delegate user must be a member
 *  of the same G Suite organization as the delegator user.
 *  Gmail imposes limtations on the number of delegates and delegators each user
 *  in a G Suite organization can have. These limits depend on your
 *  organization, but in general each user can have up to 25 delegates and up to
 *  10 delegators.
 *  Note that a delegate user must be referred to by their primary email
 *  address, and not an email alias.
 *  Also note that when a new delegate is created, there may be up to a one
 *  minute delay before the new delegate is available for use.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  Method: gmail.users.settings.delegates.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsSharing
 */
@interface GTLRGmailQuery_UsersSettingsDelegatesCreate : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsDelegatesCreateWithObject:userId:]

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Delegate.
 *
 *  Adds a delegate with its verification status set directly to accepted,
 *  without sending any verification email. The delegate user must be a member
 *  of the same G Suite organization as the delegator user.
 *  Gmail imposes limtations on the number of delegates and delegators each user
 *  in a G Suite organization can have. These limits depend on your
 *  organization, but in general each user can have up to 25 delegates and up to
 *  10 delegators.
 *  Note that a delegate user must be referred to by their primary email
 *  address, and not an email alias.
 *  Also note that when a new delegate is created, there may be up to a one
 *  minute delay before the new delegate is available for use.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  @param object The @c GTLRGmail_Delegate to include in the query.
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersSettingsDelegatesCreate
 */
+ (instancetype)queryWithObject:(GTLRGmail_Delegate *)object
                         userId:(NSString *)userId;

@end

/**
 *  Removes the specified delegate (which can be of any verification status),
 *  and revokes any verification that may have been required for using it.
 *  Note that a delegate user must be referred to by their primary email
 *  address, and not an email alias.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  Method: gmail.users.settings.delegates.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsSharing
 */
@interface GTLRGmailQuery_UsersSettingsDelegatesDelete : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsDelegatesDeleteWithuserId:delegateEmail:]

/** The email address of the user to be removed as a delegate. */
@property(nonatomic, copy, nullable) NSString *delegateEmail;

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes the specified delegate (which can be of any verification status),
 *  and revokes any verification that may have been required for using it.
 *  Note that a delegate user must be referred to by their primary email
 *  address, and not an email alias.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *  @param delegateEmail The email address of the user to be removed as a
 *    delegate.
 *
 *  @return GTLRGmailQuery_UsersSettingsDelegatesDelete
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                  delegateEmail:(NSString *)delegateEmail;

@end

/**
 *  Gets the specified delegate.
 *  Note that a delegate user must be referred to by their primary email
 *  address, and not an email alias.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  Method: gmail.users.settings.delegates.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsDelegatesGet : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsDelegatesGetWithuserId:delegateEmail:]

/**
 *  The email address of the user whose delegate relationship is to be
 *  retrieved.
 */
@property(nonatomic, copy, nullable) NSString *delegateEmail;

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Delegate.
 *
 *  Gets the specified delegate.
 *  Note that a delegate user must be referred to by their primary email
 *  address, and not an email alias.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *  @param delegateEmail The email address of the user whose delegate
 *    relationship is to be retrieved.
 *
 *  @return GTLRGmailQuery_UsersSettingsDelegatesGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                  delegateEmail:(NSString *)delegateEmail;

@end

/**
 *  Lists the delegates for the specified account.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  Method: gmail.users.settings.delegates.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsDelegatesList : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsDelegatesListWithuserId:]

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ListDelegatesResponse.
 *
 *  Lists the delegates for the specified account.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersSettingsDelegatesList
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Creates a filter.
 *
 *  Method: gmail.users.settings.filters.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsFiltersCreate : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsFiltersCreateWithObject:userId:]

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Filter.
 *
 *  Creates a filter.
 *
 *  @param object The @c GTLRGmail_Filter to include in the query.
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersSettingsFiltersCreate
 */
+ (instancetype)queryWithObject:(GTLRGmail_Filter *)object
                         userId:(NSString *)userId;

@end

/**
 *  Deletes a filter.
 *
 *  Method: gmail.users.settings.filters.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsFiltersDelete : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsFiltersDeleteWithuserId:identifier:]

/**
 *  The ID of the filter to be deleted.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a filter.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the filter to be deleted.
 *
 *  @return GTLRGmailQuery_UsersSettingsFiltersDelete
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Gets a filter.
 *
 *  Method: gmail.users.settings.filters.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsFiltersGet : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsFiltersGetWithuserId:identifier:]

/**
 *  The ID of the filter to be fetched.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Filter.
 *
 *  Gets a filter.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the filter to be fetched.
 *
 *  @return GTLRGmailQuery_UsersSettingsFiltersGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Lists the message filters of a Gmail user.
 *
 *  Method: gmail.users.settings.filters.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsFiltersList : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsFiltersListWithuserId:]

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ListFiltersResponse.
 *
 *  Lists the message filters of a Gmail user.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersSettingsFiltersList
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Creates a forwarding address. If ownership verification is required, a
 *  message will be sent to the recipient and the resource's verification status
 *  will be set to pending; otherwise, the resource will be created with
 *  verification status set to accepted.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  Method: gmail.users.settings.forwardingAddresses.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsSharing
 */
@interface GTLRGmailQuery_UsersSettingsForwardingAddressesCreate : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsForwardingAddressesCreateWithObject:userId:]

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ForwardingAddress.
 *
 *  Creates a forwarding address. If ownership verification is required, a
 *  message will be sent to the recipient and the resource's verification status
 *  will be set to pending; otherwise, the resource will be created with
 *  verification status set to accepted.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  @param object The @c GTLRGmail_ForwardingAddress to include in the query.
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersSettingsForwardingAddressesCreate
 */
+ (instancetype)queryWithObject:(GTLRGmail_ForwardingAddress *)object
                         userId:(NSString *)userId;

@end

/**
 *  Deletes the specified forwarding address and revokes any verification that
 *  may have been required.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  Method: gmail.users.settings.forwardingAddresses.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsSharing
 */
@interface GTLRGmailQuery_UsersSettingsForwardingAddressesDelete : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsForwardingAddressesDeleteWithuserId:forwardingEmail:]

/** The forwarding address to be deleted. */
@property(nonatomic, copy, nullable) NSString *forwardingEmail;

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes the specified forwarding address and revokes any verification that
 *  may have been required.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *  @param forwardingEmail The forwarding address to be deleted.
 *
 *  @return GTLRGmailQuery_UsersSettingsForwardingAddressesDelete
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                forwardingEmail:(NSString *)forwardingEmail;

@end

/**
 *  Gets the specified forwarding address.
 *
 *  Method: gmail.users.settings.forwardingAddresses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsForwardingAddressesGet : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsForwardingAddressesGetWithuserId:forwardingEmail:]

/** The forwarding address to be retrieved. */
@property(nonatomic, copy, nullable) NSString *forwardingEmail;

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ForwardingAddress.
 *
 *  Gets the specified forwarding address.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *  @param forwardingEmail The forwarding address to be retrieved.
 *
 *  @return GTLRGmailQuery_UsersSettingsForwardingAddressesGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                forwardingEmail:(NSString *)forwardingEmail;

@end

/**
 *  Lists the forwarding addresses for the specified account.
 *
 *  Method: gmail.users.settings.forwardingAddresses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsForwardingAddressesList : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsForwardingAddressesListWithuserId:]

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ListForwardingAddressesResponse.
 *
 *  Lists the forwarding addresses for the specified account.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersSettingsForwardingAddressesList
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Gets the auto-forwarding setting for the specified account.
 *
 *  Method: gmail.users.settings.getAutoForwarding
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsGetAutoForwarding : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsGetAutoForwardingWithuserId:]

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_AutoForwarding.
 *
 *  Gets the auto-forwarding setting for the specified account.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersSettingsGetAutoForwarding
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Gets IMAP settings.
 *
 *  Method: gmail.users.settings.getImap
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsGetImap : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsGetImapWithuserId:]

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ImapSettings.
 *
 *  Gets IMAP settings.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersSettingsGetImap
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Gets POP settings.
 *
 *  Method: gmail.users.settings.getPop
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsGetPop : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsGetPopWithuserId:]

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_PopSettings.
 *
 *  Gets POP settings.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersSettingsGetPop
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Gets vacation responder settings.
 *
 *  Method: gmail.users.settings.getVacation
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsGetVacation : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsGetVacationWithuserId:]

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_VacationSettings.
 *
 *  Gets vacation responder settings.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersSettingsGetVacation
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Creates a custom "from" send-as alias. If an SMTP MSA is specified, Gmail
 *  will attempt to connect to the SMTP service to validate the configuration
 *  before creating the alias. If ownership verification is required for the
 *  alias, a message will be sent to the email address and the resource's
 *  verification status will be set to pending; otherwise, the resource will be
 *  created with verification status set to accepted. If a signature is
 *  provided, Gmail will sanitize the HTML before saving it with the alias.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  Method: gmail.users.settings.sendAs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsSharing
 */
@interface GTLRGmailQuery_UsersSettingsSendAsCreate : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsSendAsCreateWithObject:userId:]

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_SendAs.
 *
 *  Creates a custom "from" send-as alias. If an SMTP MSA is specified, Gmail
 *  will attempt to connect to the SMTP service to validate the configuration
 *  before creating the alias. If ownership verification is required for the
 *  alias, a message will be sent to the email address and the resource's
 *  verification status will be set to pending; otherwise, the resource will be
 *  created with verification status set to accepted. If a signature is
 *  provided, Gmail will sanitize the HTML before saving it with the alias.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  @param object The @c GTLRGmail_SendAs to include in the query.
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersSettingsSendAsCreate
 */
+ (instancetype)queryWithObject:(GTLRGmail_SendAs *)object
                         userId:(NSString *)userId;

@end

/**
 *  Deletes the specified send-as alias. Revokes any verification that may have
 *  been required for using it.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  Method: gmail.users.settings.sendAs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsSharing
 */
@interface GTLRGmailQuery_UsersSettingsSendAsDelete : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsSendAsDeleteWithuserId:sendAsEmail:]

/** The send-as alias to be deleted. */
@property(nonatomic, copy, nullable) NSString *sendAsEmail;

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes the specified send-as alias. Revokes any verification that may have
 *  been required for using it.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *  @param sendAsEmail The send-as alias to be deleted.
 *
 *  @return GTLRGmailQuery_UsersSettingsSendAsDelete
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail;

@end

/**
 *  Gets the specified send-as alias. Fails with an HTTP 404 error if the
 *  specified address is not a member of the collection.
 *
 *  Method: gmail.users.settings.sendAs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsSendAsGet : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsSendAsGetWithuserId:sendAsEmail:]

/** The send-as alias to be retrieved. */
@property(nonatomic, copy, nullable) NSString *sendAsEmail;

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_SendAs.
 *
 *  Gets the specified send-as alias. Fails with an HTTP 404 error if the
 *  specified address is not a member of the collection.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *  @param sendAsEmail The send-as alias to be retrieved.
 *
 *  @return GTLRGmailQuery_UsersSettingsSendAsGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail;

@end

/**
 *  Lists the send-as aliases for the specified account. The result includes the
 *  primary send-as address associated with the account as well as any custom
 *  "from" aliases.
 *
 *  Method: gmail.users.settings.sendAs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsSendAsList : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsSendAsListWithuserId:]

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ListSendAsResponse.
 *
 *  Lists the send-as aliases for the specified account. The result includes the
 *  primary send-as address associated with the account as well as any custom
 *  "from" aliases.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersSettingsSendAsList
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Updates a send-as alias. If a signature is provided, Gmail will sanitize the
 *  HTML before saving it with the alias.
 *  Addresses other than the primary address for the account can only be updated
 *  by service account clients that have been delegated domain-wide authority.
 *  This method supports patch semantics.
 *
 *  Method: gmail.users.settings.sendAs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsBasic
 *    @c kGTLRAuthScopeGmailSettingsSharing
 */
@interface GTLRGmailQuery_UsersSettingsSendAsPatch : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsSendAsPatchWithObject:userId:sendAsEmail:]

/** The send-as alias to be updated. */
@property(nonatomic, copy, nullable) NSString *sendAsEmail;

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_SendAs.
 *
 *  Updates a send-as alias. If a signature is provided, Gmail will sanitize the
 *  HTML before saving it with the alias.
 *  Addresses other than the primary address for the account can only be updated
 *  by service account clients that have been delegated domain-wide authority.
 *  This method supports patch semantics.
 *
 *  @param object The @c GTLRGmail_SendAs to include in the query.
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *  @param sendAsEmail The send-as alias to be updated.
 *
 *  @return GTLRGmailQuery_UsersSettingsSendAsPatch
 */
+ (instancetype)queryWithObject:(GTLRGmail_SendAs *)object
                         userId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail;

@end

/**
 *  Deletes the specified S/MIME config for the specified send-as alias.
 *
 *  Method: gmail.users.settings.sendAs.smimeInfo.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsBasic
 *    @c kGTLRAuthScopeGmailSettingsSharing
 */
@interface GTLRGmailQuery_UsersSettingsSendAsSmimeInfoDelete : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsSendAsSmimeInfoDeleteWithuserId:sendAsEmail:identifier:]

/**
 *  The immutable ID for the SmimeInfo.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The email address that appears in the "From:" header for mail sent using
 *  this alias.
 */
@property(nonatomic, copy, nullable) NSString *sendAsEmail;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes the specified S/MIME config for the specified send-as alias.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param sendAsEmail The email address that appears in the "From:" header for
 *    mail sent using this alias.
 *  @param identifier The immutable ID for the SmimeInfo.
 *
 *  @return GTLRGmailQuery_UsersSettingsSendAsSmimeInfoDelete
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail
                     identifier:(NSString *)identifier;

@end

/**
 *  Gets the specified S/MIME config for the specified send-as alias.
 *
 *  Method: gmail.users.settings.sendAs.smimeInfo.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 *    @c kGTLRAuthScopeGmailSettingsBasic
 *    @c kGTLRAuthScopeGmailSettingsSharing
 */
@interface GTLRGmailQuery_UsersSettingsSendAsSmimeInfoGet : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsSendAsSmimeInfoGetWithuserId:sendAsEmail:identifier:]

/**
 *  The immutable ID for the SmimeInfo.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The email address that appears in the "From:" header for mail sent using
 *  this alias.
 */
@property(nonatomic, copy, nullable) NSString *sendAsEmail;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_SmimeInfo.
 *
 *  Gets the specified S/MIME config for the specified send-as alias.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param sendAsEmail The email address that appears in the "From:" header for
 *    mail sent using this alias.
 *  @param identifier The immutable ID for the SmimeInfo.
 *
 *  @return GTLRGmailQuery_UsersSettingsSendAsSmimeInfoGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail
                     identifier:(NSString *)identifier;

@end

/**
 *  Insert (upload) the given S/MIME config for the specified send-as alias.
 *  Note that pkcs12 format is required for the key.
 *
 *  Method: gmail.users.settings.sendAs.smimeInfo.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsBasic
 *    @c kGTLRAuthScopeGmailSettingsSharing
 */
@interface GTLRGmailQuery_UsersSettingsSendAsSmimeInfoInsert : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsSendAsSmimeInfoInsertWithObject:userId:sendAsEmail:]

/**
 *  The email address that appears in the "From:" header for mail sent using
 *  this alias.
 */
@property(nonatomic, copy, nullable) NSString *sendAsEmail;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_SmimeInfo.
 *
 *  Insert (upload) the given S/MIME config for the specified send-as alias.
 *  Note that pkcs12 format is required for the key.
 *
 *  @param object The @c GTLRGmail_SmimeInfo to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param sendAsEmail The email address that appears in the "From:" header for
 *    mail sent using this alias.
 *
 *  @return GTLRGmailQuery_UsersSettingsSendAsSmimeInfoInsert
 */
+ (instancetype)queryWithObject:(GTLRGmail_SmimeInfo *)object
                         userId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail;

@end

/**
 *  Lists S/MIME configs for the specified send-as alias.
 *
 *  Method: gmail.users.settings.sendAs.smimeInfo.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 *    @c kGTLRAuthScopeGmailSettingsBasic
 *    @c kGTLRAuthScopeGmailSettingsSharing
 */
@interface GTLRGmailQuery_UsersSettingsSendAsSmimeInfoList : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsSendAsSmimeInfoListWithuserId:sendAsEmail:]

/**
 *  The email address that appears in the "From:" header for mail sent using
 *  this alias.
 */
@property(nonatomic, copy, nullable) NSString *sendAsEmail;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ListSmimeInfoResponse.
 *
 *  Lists S/MIME configs for the specified send-as alias.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param sendAsEmail The email address that appears in the "From:" header for
 *    mail sent using this alias.
 *
 *  @return GTLRGmailQuery_UsersSettingsSendAsSmimeInfoList
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail;

@end

/**
 *  Sets the default S/MIME config for the specified send-as alias.
 *
 *  Method: gmail.users.settings.sendAs.smimeInfo.setDefault
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsBasic
 *    @c kGTLRAuthScopeGmailSettingsSharing
 */
@interface GTLRGmailQuery_UsersSettingsSendAsSmimeInfoSetDefault : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsSendAsSmimeInfoSetDefaultWithuserId:sendAsEmail:identifier:]

/**
 *  The immutable ID for the SmimeInfo.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The email address that appears in the "From:" header for mail sent using
 *  this alias.
 */
@property(nonatomic, copy, nullable) NSString *sendAsEmail;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Sets the default S/MIME config for the specified send-as alias.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param sendAsEmail The email address that appears in the "From:" header for
 *    mail sent using this alias.
 *  @param identifier The immutable ID for the SmimeInfo.
 *
 *  @return GTLRGmailQuery_UsersSettingsSendAsSmimeInfoSetDefault
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail
                     identifier:(NSString *)identifier;

@end

/**
 *  Updates a send-as alias. If a signature is provided, Gmail will sanitize the
 *  HTML before saving it with the alias.
 *  Addresses other than the primary address for the account can only be updated
 *  by service account clients that have been delegated domain-wide authority.
 *
 *  Method: gmail.users.settings.sendAs.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsBasic
 *    @c kGTLRAuthScopeGmailSettingsSharing
 */
@interface GTLRGmailQuery_UsersSettingsSendAsUpdate : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsSendAsUpdateWithObject:userId:sendAsEmail:]

/** The send-as alias to be updated. */
@property(nonatomic, copy, nullable) NSString *sendAsEmail;

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_SendAs.
 *
 *  Updates a send-as alias. If a signature is provided, Gmail will sanitize the
 *  HTML before saving it with the alias.
 *  Addresses other than the primary address for the account can only be updated
 *  by service account clients that have been delegated domain-wide authority.
 *
 *  @param object The @c GTLRGmail_SendAs to include in the query.
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *  @param sendAsEmail The send-as alias to be updated.
 *
 *  @return GTLRGmailQuery_UsersSettingsSendAsUpdate
 */
+ (instancetype)queryWithObject:(GTLRGmail_SendAs *)object
                         userId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail;

@end

/**
 *  Sends a verification email to the specified send-as alias address. The
 *  verification status must be pending.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  Method: gmail.users.settings.sendAs.verify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsSharing
 */
@interface GTLRGmailQuery_UsersSettingsSendAsVerify : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsSendAsVerifyWithuserId:sendAsEmail:]

/** The send-as alias to be verified. */
@property(nonatomic, copy, nullable) NSString *sendAsEmail;

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Sends a verification email to the specified send-as alias address. The
 *  verification status must be pending.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *  @param sendAsEmail The send-as alias to be verified.
 *
 *  @return GTLRGmailQuery_UsersSettingsSendAsVerify
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                    sendAsEmail:(NSString *)sendAsEmail;

@end

/**
 *  Updates the auto-forwarding setting for the specified account. A verified
 *  forwarding address must be specified when auto-forwarding is enabled.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  Method: gmail.users.settings.updateAutoForwarding
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsSharing
 */
@interface GTLRGmailQuery_UsersSettingsUpdateAutoForwarding : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsUpdateAutoForwardingWithObject:userId:]

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_AutoForwarding.
 *
 *  Updates the auto-forwarding setting for the specified account. A verified
 *  forwarding address must be specified when auto-forwarding is enabled.
 *  This method is only available to service account clients that have been
 *  delegated domain-wide authority.
 *
 *  @param object The @c GTLRGmail_AutoForwarding to include in the query.
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersSettingsUpdateAutoForwarding
 */
+ (instancetype)queryWithObject:(GTLRGmail_AutoForwarding *)object
                         userId:(NSString *)userId;

@end

/**
 *  Updates IMAP settings.
 *
 *  Method: gmail.users.settings.updateImap
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsUpdateImap : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsUpdateImapWithObject:userId:]

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ImapSettings.
 *
 *  Updates IMAP settings.
 *
 *  @param object The @c GTLRGmail_ImapSettings to include in the query.
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersSettingsUpdateImap
 */
+ (instancetype)queryWithObject:(GTLRGmail_ImapSettings *)object
                         userId:(NSString *)userId;

@end

/**
 *  Updates POP settings.
 *
 *  Method: gmail.users.settings.updatePop
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsUpdatePop : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsUpdatePopWithObject:userId:]

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_PopSettings.
 *
 *  Updates POP settings.
 *
 *  @param object The @c GTLRGmail_PopSettings to include in the query.
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersSettingsUpdatePop
 */
+ (instancetype)queryWithObject:(GTLRGmail_PopSettings *)object
                         userId:(NSString *)userId;

@end

/**
 *  Updates vacation responder settings.
 *
 *  Method: gmail.users.settings.updateVacation
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailSettingsBasic
 */
@interface GTLRGmailQuery_UsersSettingsUpdateVacation : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersSettingsUpdateVacationWithObject:userId:]

/**
 *  User's email address. The special value "me" can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_VacationSettings.
 *
 *  Updates vacation responder settings.
 *
 *  @param object The @c GTLRGmail_VacationSettings to include in the query.
 *  @param userId User's email address. The special value "me" can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersSettingsUpdateVacation
 */
+ (instancetype)queryWithObject:(GTLRGmail_VacationSettings *)object
                         userId:(NSString *)userId;

@end

/**
 *  Stop receiving push notifications for the given user mailbox.
 *
 *  Method: gmail.users.stop
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailMetadata
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersStop : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersStopWithuserId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Stop receiving push notifications for the given user mailbox.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersStop
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Immediately and permanently deletes the specified thread. This operation
 *  cannot be undone. Prefer threads.trash instead.
 *
 *  Method: gmail.users.threads.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 */
@interface GTLRGmailQuery_UsersThreadsDelete : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersThreadsDeleteWithuserId:identifier:]

/**
 *  ID of the Thread to delete.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Immediately and permanently deletes the specified thread. This operation
 *  cannot be undone. Prefer threads.trash instead.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier ID of the Thread to delete.
 *
 *  @return GTLRGmailQuery_UsersThreadsDelete
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Gets the specified thread.
 *
 *  Method: gmail.users.threads.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailMetadata
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersThreadsGet : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersThreadsGetWithuserId:identifier:]

/**
 *  The format to return the messages in.
 *
 *  Likely values:
 *    @arg @c kGTLRGmailFormatFull Value "full"
 *    @arg @c kGTLRGmailFormatMetadata Value "metadata"
 *    @arg @c kGTLRGmailFormatMinimal Value "minimal"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRGmailFormatFull.
 */
@property(nonatomic, copy, nullable) NSString *format;

/**
 *  The ID of the thread to retrieve.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** When given and format is METADATA, only include headers specified. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metadataHeaders;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Thread.
 *
 *  Gets the specified thread.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the thread to retrieve.
 *
 *  @return GTLRGmailQuery_UsersThreadsGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Lists the threads in the user's mailbox.
 *
 *  Method: gmail.users.threads.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailMetadata
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersThreadsList : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersThreadsListWithuserId:]

/**
 *  Include threads from SPAM and TRASH in the results.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL includeSpamTrash;

/**
 *  Only return threads with labels that match all of the specified label IDs.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *labelIds;

/**
 *  Maximum number of threads to return.
 *
 *  @note If not set, the documented server-side default will be 100.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** Page token to retrieve a specific page of results in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Only return threads matching the specified query. Supports the same query
 *  format as the Gmail search box. For example, "from:someuser\@example.com
 *  rfc822msgid: is:unread". Parameter cannot be used when accessing the api
 *  using the gmail.metadata scope.
 */
@property(nonatomic, copy, nullable) NSString *q;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_ListThreadsResponse.
 *
 *  Lists the threads in the user's mailbox.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersThreadsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Modifies the labels applied to the thread. This applies to all messages in
 *  the thread.
 *
 *  Method: gmail.users.threads.modify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersThreadsModify : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersThreadsModifyWithObject:userId:identifier:]

/**
 *  The ID of the thread to modify.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Thread.
 *
 *  Modifies the labels applied to the thread. This applies to all messages in
 *  the thread.
 *
 *  @param object The @c GTLRGmail_ModifyThreadRequest to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the thread to modify.
 *
 *  @return GTLRGmailQuery_UsersThreadsModify
 */
+ (instancetype)queryWithObject:(GTLRGmail_ModifyThreadRequest *)object
                         userId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Moves the specified thread to the trash.
 *
 *  Method: gmail.users.threads.trash
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersThreadsTrash : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersThreadsTrashWithuserId:identifier:]

/**
 *  The ID of the thread to Trash.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Thread.
 *
 *  Moves the specified thread to the trash.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the thread to Trash.
 *
 *  @return GTLRGmailQuery_UsersThreadsTrash
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Removes the specified thread from the trash.
 *
 *  Method: gmail.users.threads.untrash
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailModify
 */
@interface GTLRGmailQuery_UsersThreadsUntrash : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersThreadsUntrashWithuserId:identifier:]

/**
 *  The ID of the thread to remove from Trash.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_Thread.
 *
 *  Removes the specified thread from the trash.
 *
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *  @param identifier The ID of the thread to remove from Trash.
 *
 *  @return GTLRGmailQuery_UsersThreadsUntrash
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     identifier:(NSString *)identifier;

@end

/**
 *  Set up or update a push notification watch on the given user mailbox.
 *
 *  Method: gmail.users.watch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGmailMailGoogleCom
 *    @c kGTLRAuthScopeGmailMetadata
 *    @c kGTLRAuthScopeGmailModify
 *    @c kGTLRAuthScopeGmailReadonly
 */
@interface GTLRGmailQuery_UsersWatch : GTLRGmailQuery
// Previous library name was
//   +[GTLQueryGmail queryForUsersWatchWithObject:userId:]

/**
 *  The user's email address. The special value me can be used to indicate the
 *  authenticated user.
 *
 *  @note If not set, the documented server-side default will be me.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRGmail_WatchResponse.
 *
 *  Set up or update a push notification watch on the given user mailbox.
 *
 *  @param object The @c GTLRGmail_WatchRequest to include in the query.
 *  @param userId The user's email address. The special value me can be used to
 *    indicate the authenticated user. (Default me)
 *
 *  @return GTLRGmailQuery_UsersWatch
 */
+ (instancetype)queryWithObject:(GTLRGmail_WatchRequest *)object
                         userId:(NSString *)userId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
