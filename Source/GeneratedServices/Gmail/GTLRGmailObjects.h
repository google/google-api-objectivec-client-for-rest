// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Gmail API (gmail/v1)
// Description:
//   The Gmail API lets you view and manage Gmail mailbox data like
//   threads, messages, and labels.
// Documentation:
//   https://developers.google.com/gmail/api/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRGmail_Delegate;
@class GTLRGmail_Draft;
@class GTLRGmail_Filter;
@class GTLRGmail_FilterAction;
@class GTLRGmail_FilterCriteria;
@class GTLRGmail_ForwardingAddress;
@class GTLRGmail_History;
@class GTLRGmail_HistoryLabelAdded;
@class GTLRGmail_HistoryLabelRemoved;
@class GTLRGmail_HistoryMessageAdded;
@class GTLRGmail_HistoryMessageDeleted;
@class GTLRGmail_Label;
@class GTLRGmail_LabelColor;
@class GTLRGmail_Message;
@class GTLRGmail_MessagePart;
@class GTLRGmail_MessagePartBody;
@class GTLRGmail_MessagePartHeader;
@class GTLRGmail_SendAs;
@class GTLRGmail_SmimeInfo;
@class GTLRGmail_SmtpMsa;
@class GTLRGmail_Thread;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRGmail_AutoForwarding.disposition

/**
 *  Archive the message.
 *
 *  Value: "archive"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_AutoForwarding_Disposition_Archive;
/**
 *  Unspecified disposition.
 *
 *  Value: "dispositionUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_AutoForwarding_Disposition_DispositionUnspecified;
/**
 *  Leave the message in the `INBOX`.
 *
 *  Value: "leaveInInbox"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_AutoForwarding_Disposition_LeaveInInbox;
/**
 *  Leave the message in the `INBOX` and mark it as read.
 *
 *  Value: "markRead"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_AutoForwarding_Disposition_MarkRead;
/**
 *  Move the message to the `TRASH`.
 *
 *  Value: "trash"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_AutoForwarding_Disposition_Trash;

// ----------------------------------------------------------------------------
// GTLRGmail_Delegate.verificationStatus

/**
 *  The address can act a delegate for the account.
 *
 *  Value: "accepted"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_Delegate_VerificationStatus_Accepted;
/**
 *  A verification request was mailed to the address, and it expired without
 *  verification.
 *
 *  Value: "expired"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_Delegate_VerificationStatus_Expired;
/**
 *  A verification request was mailed to the address, and the owner has not
 *  yet accepted it.
 *
 *  Value: "pending"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_Delegate_VerificationStatus_Pending;
/**
 *  A verification request was mailed to the address, and the owner rejected
 *  it.
 *
 *  Value: "rejected"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_Delegate_VerificationStatus_Rejected;
/**
 *  Unspecified verification status.
 *
 *  Value: "verificationStatusUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_Delegate_VerificationStatus_VerificationStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRGmail_FilterCriteria.sizeComparison

/**
 *  Find messages larger than the given size.
 *
 *  Value: "larger"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_FilterCriteria_SizeComparison_Larger;
/**
 *  Find messages smaller than the given size.
 *
 *  Value: "smaller"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_FilterCriteria_SizeComparison_Smaller;
/** Value: "unspecified" */
FOUNDATION_EXTERN NSString * const kGTLRGmail_FilterCriteria_SizeComparison_Unspecified;

// ----------------------------------------------------------------------------
// GTLRGmail_ForwardingAddress.verificationStatus

/**
 *  The address is ready to use for forwarding.
 *
 *  Value: "accepted"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_ForwardingAddress_VerificationStatus_Accepted;
/**
 *  The address is awaiting verification by the owner.
 *
 *  Value: "pending"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_ForwardingAddress_VerificationStatus_Pending;
/**
 *  Unspecified verification status.
 *
 *  Value: "verificationStatusUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_ForwardingAddress_VerificationStatus_VerificationStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRGmail_ImapSettings.expungeBehavior

/**
 *  Archive messages marked as deleted.
 *
 *  Value: "archive"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_ImapSettings_ExpungeBehavior_Archive;
/**
 *  Immediately and permanently delete messages marked as deleted. The
 *  expunged messages cannot be recovered.
 *
 *  Value: "deleteForever"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_ImapSettings_ExpungeBehavior_DeleteForever;
/**
 *  Unspecified behavior.
 *
 *  Value: "expungeBehaviorUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_ImapSettings_ExpungeBehavior_ExpungeBehaviorUnspecified;
/**
 *  Move messages marked as deleted to the trash.
 *
 *  Value: "trash"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_ImapSettings_ExpungeBehavior_Trash;

// ----------------------------------------------------------------------------
// GTLRGmail_Label.labelListVisibility

/** Value: "labelHide" */
FOUNDATION_EXTERN NSString * const kGTLRGmail_Label_LabelListVisibility_LabelHide;
/** Value: "labelShow" */
FOUNDATION_EXTERN NSString * const kGTLRGmail_Label_LabelListVisibility_LabelShow;
/** Value: "labelShowIfUnread" */
FOUNDATION_EXTERN NSString * const kGTLRGmail_Label_LabelListVisibility_LabelShowIfUnread;

// ----------------------------------------------------------------------------
// GTLRGmail_Label.messageListVisibility

/** Value: "hide" */
FOUNDATION_EXTERN NSString * const kGTLRGmail_Label_MessageListVisibility_Hide;
/** Value: "show" */
FOUNDATION_EXTERN NSString * const kGTLRGmail_Label_MessageListVisibility_Show;

// ----------------------------------------------------------------------------
// GTLRGmail_Label.type

/** Value: "system" */
FOUNDATION_EXTERN NSString * const kGTLRGmail_Label_Type_System;
/** Value: "user" */
FOUNDATION_EXTERN NSString * const kGTLRGmail_Label_Type_User;

// ----------------------------------------------------------------------------
// GTLRGmail_PopSettings.accessWindow

/**
 *  Unspecified range.
 *
 *  Value: "accessWindowUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_PopSettings_AccessWindow_AccessWindowUnspecified;
/**
 *  Indicates that all unfetched messages are accessible via POP.
 *
 *  Value: "allMail"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_PopSettings_AccessWindow_AllMail;
/**
 *  Indicates that no messages are accessible via POP.
 *
 *  Value: "disabled"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_PopSettings_AccessWindow_Disabled;
/**
 *  Indicates that unfetched messages received after some past point in
 *  time are accessible via POP.
 *
 *  Value: "fromNowOn"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_PopSettings_AccessWindow_FromNowOn;

// ----------------------------------------------------------------------------
// GTLRGmail_PopSettings.disposition

/**
 *  Archive the message.
 *
 *  Value: "archive"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_PopSettings_Disposition_Archive;
/**
 *  Unspecified disposition.
 *
 *  Value: "dispositionUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_PopSettings_Disposition_DispositionUnspecified;
/**
 *  Leave the message in the <code>INBOX</code>.
 *
 *  Value: "leaveInInbox"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_PopSettings_Disposition_LeaveInInbox;
/**
 *  Leave the message in the <code>INBOX</code> and mark it as read.
 *
 *  Value: "markRead"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_PopSettings_Disposition_MarkRead;
/**
 *  Move the message to the <code>TRASH</code>.
 *
 *  Value: "trash"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_PopSettings_Disposition_Trash;

// ----------------------------------------------------------------------------
// GTLRGmail_SendAs.verificationStatus

/**
 *  The address is ready to use as a send-as alias.
 *
 *  Value: "accepted"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_SendAs_VerificationStatus_Accepted;
/**
 *  The address is awaiting verification by the owner.
 *
 *  Value: "pending"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_SendAs_VerificationStatus_Pending;
/**
 *  Unspecified verification status.
 *
 *  Value: "verificationStatusUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_SendAs_VerificationStatus_VerificationStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRGmail_SmtpMsa.securityMode

/**
 *  Communication with the remote SMTP service is unsecured. Requires port
 *  25.
 *
 *  Value: "none"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_SmtpMsa_SecurityMode_None;
/**
 *  Unspecified security mode.
 *
 *  Value: "securityModeUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_SmtpMsa_SecurityMode_SecurityModeUnspecified;
/**
 *  Communication with the remote SMTP service is secured using SSL.
 *
 *  Value: "ssl"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_SmtpMsa_SecurityMode_Ssl;
/**
 *  Communication with the remote SMTP service is secured using STARTTLS.
 *
 *  Value: "starttls"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_SmtpMsa_SecurityMode_Starttls;

// ----------------------------------------------------------------------------
// GTLRGmail_WatchRequest.labelFilterAction

/**
 *  Get push notifications for all message changes except those relating
 *  to labelIds specified.
 *
 *  Value: "exclude"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_WatchRequest_LabelFilterAction_Exclude;
/**
 *  Only get push notifications for message changes relating to labelIds
 *  specified.
 *
 *  Value: "include"
 */
FOUNDATION_EXTERN NSString * const kGTLRGmail_WatchRequest_LabelFilterAction_Include;

/**
 *  Auto-forwarding settings for an account.
 */
@interface GTLRGmail_AutoForwarding : GTLRObject

/**
 *  The state that a message should be left in after it has been forwarded.
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_AutoForwarding_Disposition_Archive Archive the message.
 *        (Value: "archive")
 *    @arg @c kGTLRGmail_AutoForwarding_Disposition_DispositionUnspecified
 *        Unspecified disposition. (Value: "dispositionUnspecified")
 *    @arg @c kGTLRGmail_AutoForwarding_Disposition_LeaveInInbox Leave the
 *        message in the `INBOX`. (Value: "leaveInInbox")
 *    @arg @c kGTLRGmail_AutoForwarding_Disposition_MarkRead Leave the message
 *        in the `INBOX` and mark it as read. (Value: "markRead")
 *    @arg @c kGTLRGmail_AutoForwarding_Disposition_Trash Move the message to
 *        the `TRASH`. (Value: "trash")
 */
@property(nonatomic, copy, nullable) NSString *disposition;

/**
 *  Email address to which all incoming messages are forwarded. This email
 *  address must be a verified member of the forwarding addresses.
 */
@property(nonatomic, copy, nullable) NSString *emailAddress;

/**
 *  Whether all incoming mail is automatically forwarded to another address.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  GTLRGmail_BatchDeleteMessagesRequest
 */
@interface GTLRGmail_BatchDeleteMessagesRequest : GTLRObject

/** The IDs of the messages to delete. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ids;

@end


/**
 *  GTLRGmail_BatchModifyMessagesRequest
 */
@interface GTLRGmail_BatchModifyMessagesRequest : GTLRObject

/** A list of label IDs to add to messages. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *addLabelIds;

/**
 *  The IDs of the messages to modify. There is a limit of 1000 ids per
 *  request.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ids;

/** A list of label IDs to remove from messages. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *removeLabelIds;

@end


/**
 *  Settings for a delegate. Delegates can read, send, and delete messages, as
 *  well as view and add contacts, for the delegator's account. See
 *  <a href="https://support.google.com/mail/answer/138350">"Set up
 *  mail delegation"</a> for more information about delegates.
 */
@interface GTLRGmail_Delegate : GTLRObject

/** The email address of the delegate. */
@property(nonatomic, copy, nullable) NSString *delegateEmail;

/**
 *  Indicates whether this address has been verified and can act as a delegate
 *  for the account. Read-only.
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_Delegate_VerificationStatus_Accepted The address can
 *        act a delegate for the account. (Value: "accepted")
 *    @arg @c kGTLRGmail_Delegate_VerificationStatus_Expired A verification
 *        request was mailed to the address, and it expired without
 *        verification. (Value: "expired")
 *    @arg @c kGTLRGmail_Delegate_VerificationStatus_Pending A verification
 *        request was mailed to the address, and the owner has not
 *        yet accepted it. (Value: "pending")
 *    @arg @c kGTLRGmail_Delegate_VerificationStatus_Rejected A verification
 *        request was mailed to the address, and the owner rejected
 *        it. (Value: "rejected")
 *    @arg @c kGTLRGmail_Delegate_VerificationStatus_VerificationStatusUnspecified
 *        Unspecified verification status. (Value:
 *        "verificationStatusUnspecified")
 */
@property(nonatomic, copy, nullable) NSString *verificationStatus;

@end


/**
 *  A draft email in the user's mailbox.
 */
@interface GTLRGmail_Draft : GTLRObject

/**
 *  The immutable ID of the draft.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The message content of the draft. */
@property(nonatomic, strong, nullable) GTLRGmail_Message *message;

@end


/**
 *  Resource definition for Gmail filters. Filters apply to specific messages
 *  instead of an entire email thread.
 */
@interface GTLRGmail_Filter : GTLRObject

/** Action that the filter performs. */
@property(nonatomic, strong, nullable) GTLRGmail_FilterAction *action;

/** Matching criteria for the filter. */
@property(nonatomic, strong, nullable) GTLRGmail_FilterCriteria *criteria;

/**
 *  The server assigned ID of the filter.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  A set of actions to perform on a message.
 */
@interface GTLRGmail_FilterAction : GTLRObject

/** List of labels to add to the message. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *addLabelIds;

/** Email address that the message should be forwarded to. */
@property(nonatomic, copy, nullable) NSString *forward;

/** List of labels to remove from the message. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *removeLabelIds;

@end


/**
 *  Message matching criteria.
 */
@interface GTLRGmail_FilterCriteria : GTLRObject

/**
 *  Whether the response should exclude chats.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *excludeChats;

/** The sender's display name or email address. */
@property(nonatomic, copy, nullable) NSString *from;

/**
 *  Whether the message has any attachment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasAttachment;

/**
 *  Only return messages not matching the specified query. Supports the same
 *  query format as the Gmail search box. For example,
 *  <code>"from:someuser\@example.com rfc822msgid:<somemsgid\@example.com>
 *  is:unread"</code>.
 */
@property(nonatomic, copy, nullable) NSString *negatedQuery;

/**
 *  Only return messages matching the specified query. Supports the same
 *  query format as the Gmail search box. For example,
 *  <code>"from:someuser\@example.com rfc822msgid:<somemsgid\@example.com>
 *  is:unread"</code>.
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  The size of the entire RFC822 message in bytes, including all headers and
 *  attachments.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *size;

/**
 *  How the message size in bytes should be in relation to the size field.
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_FilterCriteria_SizeComparison_Larger Find messages
 *        larger than the given size. (Value: "larger")
 *    @arg @c kGTLRGmail_FilterCriteria_SizeComparison_Smaller Find messages
 *        smaller than the given size. (Value: "smaller")
 *    @arg @c kGTLRGmail_FilterCriteria_SizeComparison_Unspecified Value
 *        "unspecified"
 */
@property(nonatomic, copy, nullable) NSString *sizeComparison;

/**
 *  Case-insensitive phrase found in the message's subject. Trailing and
 *  leading whitespace are be trimmed and adjacent spaces are collapsed.
 */
@property(nonatomic, copy, nullable) NSString *subject;

/**
 *  The recipient's display name or email address. Includes recipients in the
 *  "to", "cc", and "bcc" header fields. You can use simply the local part of
 *  the email address. For example, "example" and "example\@" both match
 *  "example\@gmail.com". This field is case-insensitive.
 */
@property(nonatomic, copy, nullable) NSString *to;

@end


/**
 *  Settings for a forwarding address.
 */
@interface GTLRGmail_ForwardingAddress : GTLRObject

/** An email address to which messages can be forwarded. */
@property(nonatomic, copy, nullable) NSString *forwardingEmail;

/**
 *  Indicates whether this address has been verified and is usable for
 *  forwarding. Read-only.
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_ForwardingAddress_VerificationStatus_Accepted The
 *        address is ready to use for forwarding. (Value: "accepted")
 *    @arg @c kGTLRGmail_ForwardingAddress_VerificationStatus_Pending The
 *        address is awaiting verification by the owner. (Value: "pending")
 *    @arg @c kGTLRGmail_ForwardingAddress_VerificationStatus_VerificationStatusUnspecified
 *        Unspecified verification status. (Value:
 *        "verificationStatusUnspecified")
 */
@property(nonatomic, copy, nullable) NSString *verificationStatus;

@end


/**
 *  A record of a change to the user's mailbox. Each history change may affect
 *  multiple messages in multiple ways.
 */
@interface GTLRGmail_History : GTLRObject

/**
 *  The mailbox sequence ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

/** Labels added to messages in this history record. */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_HistoryLabelAdded *> *labelsAdded;

/** Labels removed from messages in this history record. */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_HistoryLabelRemoved *> *labelsRemoved;

/**
 *  List of messages changed in this history record. The fields for specific
 *  change types, such as <code>messagesAdded</code> may duplicate messages in
 *  this field. We recommend using the specific change-type fields instead
 *  of this.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_Message *> *messages;

/** Messages added to the mailbox in this history record. */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_HistoryMessageAdded *> *messagesAdded;

/** Messages deleted (not Trashed) from the mailbox in this history record. */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_HistoryMessageDeleted *> *messagesDeleted;

@end


/**
 *  GTLRGmail_HistoryLabelAdded
 */
@interface GTLRGmail_HistoryLabelAdded : GTLRObject

/** Label IDs added to the message. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *labelIds;

@property(nonatomic, strong, nullable) GTLRGmail_Message *message;

@end


/**
 *  GTLRGmail_HistoryLabelRemoved
 */
@interface GTLRGmail_HistoryLabelRemoved : GTLRObject

/** Label IDs removed from the message. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *labelIds;

@property(nonatomic, strong, nullable) GTLRGmail_Message *message;

@end


/**
 *  GTLRGmail_HistoryMessageAdded
 */
@interface GTLRGmail_HistoryMessageAdded : GTLRObject

@property(nonatomic, strong, nullable) GTLRGmail_Message *message;

@end


/**
 *  GTLRGmail_HistoryMessageDeleted
 */
@interface GTLRGmail_HistoryMessageDeleted : GTLRObject

@property(nonatomic, strong, nullable) GTLRGmail_Message *message;

@end


/**
 *  IMAP settings for an account.
 */
@interface GTLRGmail_ImapSettings : GTLRObject

/**
 *  If this value is true, Gmail will immediately expunge a message when it is
 *  marked as deleted in IMAP. Otherwise, Gmail will wait for an update from
 *  the client before expunging messages marked as deleted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoExpunge;

/**
 *  Whether IMAP is enabled for the account.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

/**
 *  The action that will be executed on a message when it is marked as deleted
 *  and expunged from the last visible IMAP folder.
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_ImapSettings_ExpungeBehavior_Archive Archive messages
 *        marked as deleted. (Value: "archive")
 *    @arg @c kGTLRGmail_ImapSettings_ExpungeBehavior_DeleteForever Immediately
 *        and permanently delete messages marked as deleted. The
 *        expunged messages cannot be recovered. (Value: "deleteForever")
 *    @arg @c kGTLRGmail_ImapSettings_ExpungeBehavior_ExpungeBehaviorUnspecified
 *        Unspecified behavior. (Value: "expungeBehaviorUnspecified")
 *    @arg @c kGTLRGmail_ImapSettings_ExpungeBehavior_Trash Move messages marked
 *        as deleted to the trash. (Value: "trash")
 */
@property(nonatomic, copy, nullable) NSString *expungeBehavior;

/**
 *  An optional limit on the number of messages that an IMAP folder may
 *  contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero
 *  is interpreted to mean that there is no limit.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxFolderSize;

@end


/**
 *  Labels are used to categorize messages and threads within the
 *  user's mailbox.
 */
@interface GTLRGmail_Label : GTLRObject

/**
 *  The color to assign to the label. Color is only available for labels that
 *  have their <code>type</code> set to <code>user</code>.
 *  \@mutable gmail.users.labels.create gmail.users.labels.update
 */
@property(nonatomic, strong, nullable) GTLRGmail_LabelColor *color;

/**
 *  The immutable ID of the label.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The visibility of the label in the label list in the Gmail web interface.
 *  \@mutable gmail.users.labels.create gmail.users.labels.update
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_Label_LabelListVisibility_LabelHide Value "labelHide"
 *    @arg @c kGTLRGmail_Label_LabelListVisibility_LabelShow Value "labelShow"
 *    @arg @c kGTLRGmail_Label_LabelListVisibility_LabelShowIfUnread Value
 *        "labelShowIfUnread"
 */
@property(nonatomic, copy, nullable) NSString *labelListVisibility;

/**
 *  The visibility of the label in the message list in the
 *  Gmail web interface.
 *  \@mutable gmail.users.labels.create gmail.users.labels.update
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_Label_MessageListVisibility_Hide Value "hide"
 *    @arg @c kGTLRGmail_Label_MessageListVisibility_Show Value "show"
 */
@property(nonatomic, copy, nullable) NSString *messageListVisibility;

/**
 *  The total number of messages with the label.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *messagesTotal;

/**
 *  The number of unread messages with the label.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *messagesUnread;

/**
 *  The display name of the label.
 *  \@mutable gmail.users.labels.create gmail.users.labels.update
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The total number of threads with the label.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *threadsTotal;

/**
 *  The number of unread threads with the label.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *threadsUnread;

/**
 *  The owner type for the label. User labels are created by the user and
 *  can be modified and deleted by the user and can be applied to any
 *  message or thread. System labels are internally created and cannot be
 *  added, modified, or deleted. System labels may be able to be applied to or
 *  removed from messages and threads under some circumstances but this is
 *  not guaranteed. For example, users can apply and remove the
 *  <code>INBOX</code> and <code>UNREAD</code> labels from messages and
 *  threads, but cannot apply or remove the <code>DRAFTS</code> or
 *  <code>SENT</code> labels from messages or threads.
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_Label_Type_System Value "system"
 *    @arg @c kGTLRGmail_Label_Type_User Value "user"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRGmail_LabelColor
 */
@interface GTLRGmail_LabelColor : GTLRObject

/**
 *  The background color represented as hex string #RRGGBB (ex #000000).
 *  This field is required in order to set the color of a label.
 *  Only the following predefined set of color values are allowed:
 *  <br/>
 *  # 000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff,
 *  # fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3,
 *  # f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8,
 *  # efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9,
 *  # e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0,
 *  # cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798,
 *  # ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775,
 *  # 822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c
 *  # 464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff,
 *  # 711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5,
 *  # 594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1,
 *  # c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46,
 *  # 662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765
 *  \@mutable gmail.users.labels.create gmail.users.labels.update
 */
@property(nonatomic, copy, nullable) NSString *backgroundColor;

/**
 *  The text color of the label, represented as hex string.
 *  This field is required in order to set the color of a label.
 *  Only the following predefined set of color values are allowed:
 *  <br/>
 *  # 000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff,
 *  # fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3,
 *  # f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8,
 *  # efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9,
 *  # e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0,
 *  # cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798,
 *  # ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775,
 *  # 822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c
 *  # 464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff,
 *  # 711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5,
 *  # 594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1,
 *  # c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46,
 *  # 662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765
 *  \@mutable gmail.users.labels.create gmail.users.labels.update
 */
@property(nonatomic, copy, nullable) NSString *textColor;

@end


/**
 *  Language settings for an account. These settings correspond to
 *  the <a href="https://support.google.com/mail/answer/17091">"Language
 *  settings"</a> feature in the web interface.
 */
@interface GTLRGmail_LanguageSettings : GTLRObject

/**
 *  The language to display Gmail in, formatted as an
 *  <a href="https://www.w3.org/International/articles/language-tags/">RFC 3066
 *  Language Tag</a> (for example <code>en-GB</code>, <code>fr</code> or
 *  <code>ja</code> for British English, French, or Japanese respectively).
 *  The set of languages supported by Gmail evolves over time, so please refer
 *  to the "Language" dropdown in the
 *  <a href="https://mail.google.com/mail/u/0/#settings/general">Gmail settings
 *  </a> for all available options, as described in the
 *  <a href="https://support.google.com/mail/answer/17091">language settings
 *  help article</a>. A table of sample values is also provided in the
 *  <a href="/gmail/api/guides/language_settings#display_language">Managing
 *  Language Settings guide</a>
 *  Not all Gmail clients can display the same set of languages. In the case
 *  that a user's display language is not available for use on a particular
 *  client, said client automatically chooses to display in the closest
 *  supported variant (or a reasonable default).
 */
@property(nonatomic, copy, nullable) NSString *displayLanguage;

@end


/**
 *  Response for the ListDelegates method.
 */
@interface GTLRGmail_ListDelegatesResponse : GTLRObject

/** List of the user's delegates (with any verification status). */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_Delegate *> *delegates;

@end


/**
 *  GTLRGmail_ListDraftsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "drafts" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGmail_ListDraftsResponse : GTLRCollectionObject

/**
 *  List of drafts. Note that the <code>Message</code> property in each
 *  <code>Draft</code> resource only contains an <code>id</code> and a
 *  <code>threadId</code>. The
 *  <a href="/gmail/api/v1/reference/users/messages/get">messages.get</a>
 *  method can fetch additional message details.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_Draft *> *drafts;

/** Token to retrieve the next page of results in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Estimated total number of results.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resultSizeEstimate;

@end


/**
 *  Response for the ListFilters method.
 */
@interface GTLRGmail_ListFiltersResponse : GTLRObject

/** List of a user's filters. */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_Filter *> *filter;

@end


/**
 *  Response for the ListForwardingAddresses method.
 */
@interface GTLRGmail_ListForwardingAddressesResponse : GTLRObject

/** List of addresses that may be used for forwarding. */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_ForwardingAddress *> *forwardingAddresses;

@end


/**
 *  GTLRGmail_ListHistoryResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "history" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGmail_ListHistoryResponse : GTLRCollectionObject

/**
 *  List of history records. Any <code>messages</code> contained in the
 *  response will typically only have <code>id</code> and
 *  <code>threadId</code> fields populated.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_History *> *history;

/**
 *  The ID of the mailbox's current history record.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *historyId;

/** Page token to retrieve the next page of results in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRGmail_ListLabelsResponse
 */
@interface GTLRGmail_ListLabelsResponse : GTLRObject

/**
 *  List of labels. Note that each label resource only contains an
 *  <code>id</code>, <code>name</code>, <code>messageListVisibility</code>,
 *  <code>labelListVisibility</code>, and <code>type</code>. The
 *  <a href="/gmail/api/v1/reference/users/labels/get">labels.get</a> method
 *  can fetch additional label details.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_Label *> *labels;

@end


/**
 *  GTLRGmail_ListMessagesResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "messages" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGmail_ListMessagesResponse : GTLRCollectionObject

/**
 *  List of messages. Note that each message resource contains only an
 *  <code>id</code> and a <code>threadId</code>. Additional message details can
 *  be fetched using the
 *  <a href="/gmail/api/v1/reference/users/messages/get">messages.get</a>
 *  method.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_Message *> *messages;

/** Token to retrieve the next page of results in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Estimated total number of results.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resultSizeEstimate;

@end


/**
 *  Response for the ListSendAs method.
 */
@interface GTLRGmail_ListSendAsResponse : GTLRObject

/** List of send-as aliases. */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_SendAs *> *sendAs;

@end


/**
 *  GTLRGmail_ListSmimeInfoResponse
 */
@interface GTLRGmail_ListSmimeInfoResponse : GTLRObject

/** List of SmimeInfo. */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_SmimeInfo *> *smimeInfo;

@end


/**
 *  GTLRGmail_ListThreadsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "threads" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGmail_ListThreadsResponse : GTLRCollectionObject

/** Page token to retrieve the next page of results in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Estimated total number of results.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resultSizeEstimate;

/**
 *  List of threads. Note that each thread resource does not contain a list of
 *  <code>messages</code>. The list of <code>messages</code> for a given thread
 *  can be fetched using the
 *  <a href="/gmail/api/v1/reference/users/threads/get">threads.get</a> method.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_Thread *> *threads;

@end


/**
 *  An email message.
 */
@interface GTLRGmail_Message : GTLRObject

/**
 *  The ID of the last history record that modified this message.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *historyId;

/**
 *  The immutable ID of the message.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The internal message creation timestamp (epoch ms), which determines
 *  ordering in the inbox. For normal SMTP-received email, this represents the
 *  time the message was originally accepted by Google, which is more reliable
 *  than the <code>Date</code> header. However, for API-migrated mail, it can
 *  be configured by client to be based on the <code>Date</code> header.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *internalDate;

/**
 *  List of IDs of labels applied to this message.
 *  \@mutable gmail.users.messages.insert gmail.users.messages.modify
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *labelIds;

/** The parsed email structure in the message parts. */
@property(nonatomic, strong, nullable) GTLRGmail_MessagePart *payload;

/**
 *  The entire email message in an RFC 2822 formatted and base64url
 *  encoded string. Returned in <code>messages.get</code> and
 *  <code>drafts.get</code> responses when the <code>format=RAW</code>
 *  parameter is supplied.
 *  \@mutable gmail.users.messages.insert gmail.users.messages.send
 *  \@mutable gmail.users.drafts.create gmail.users.drafts.update
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *raw;

/**
 *  Estimated size in bytes of the message.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sizeEstimate;

/** A short part of the message text. */
@property(nonatomic, copy, nullable) NSString *snippet;

/**
 *  The ID of the thread the message belongs to. To add a message or draft to
 *  a thread, the following criteria must be met:
 *  <ol><li>The requested <code>threadId</code> must be specified on the
 *  <code>Message</code> or <code>Draft.Message</code> you supply with your
 *  request.</li>
 *  <li>The <code>References</code> and <code>In-Reply-To</code> headers must
 *  be set in compliance with the
 *  <a href="https://tools.ietf.org/html/rfc2822">RFC 2822</a> standard.</li>
 *  <li>The <code>Subject</code> headers must match.
 *  \@mutable gmail.users.messages.insert gmail.users.messages.send
 *  \@mutable gmail.users.drafts.create gmail.users.drafts.update
 */
@property(nonatomic, copy, nullable) NSString *threadId;

@end


/**
 *  A single MIME message part.
 */
@interface GTLRGmail_MessagePart : GTLRObject

/**
 *  The message part body for this part, which may be empty for
 *  container MIME message parts.
 */
@property(nonatomic, strong, nullable) GTLRGmail_MessagePartBody *body;

/**
 *  The filename of the attachment. Only present if this message part
 *  represents an attachment.
 */
@property(nonatomic, copy, nullable) NSString *filename;

/**
 *  List of headers on this message part. For the top-level message part,
 *  representing the entire message payload, it will contain the standard
 *  RFC 2822 email headers such as <code>To</code>, <code>From</code>, and
 *  <code>Subject</code>.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_MessagePartHeader *> *headers;

/** The MIME type of the message part. */
@property(nonatomic, copy, nullable) NSString *mimeType;

/** The immutable ID of the message part. */
@property(nonatomic, copy, nullable) NSString *partId;

/**
 *  The child MIME message parts of this part. This only applies to container
 *  MIME message parts, for example <code>multipart/ *</code>. For non-
 *  container MIME message part types, such as <code>text/plain</code>, this
 *  field is empty. For more information, see
 *  <a href="http://www.ietf.org/rfc/rfc1521.txt">RFC 1521</a>.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_MessagePart *> *parts;

@end


/**
 *  The body of a single MIME message part.
 */
@interface GTLRGmail_MessagePartBody : GTLRObject

/**
 *  When present, contains the ID of an external attachment that can be
 *  retrieved in a separate <code>messages.attachments.get</code> request.
 *  When not present, the entire content of the message part body is
 *  contained in the data field.
 */
@property(nonatomic, copy, nullable) NSString *attachmentId;

/**
 *  The body data of a MIME message part as a base64url encoded string.
 *  May be empty for MIME container
 *  types that have no message body or when the body data is sent as a
 *  separate attachment. An attachment ID is present if the body data is
 *  contained in a separate attachment.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  Number of bytes for the message part data (encoding notwithstanding).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *size;

@end


/**
 *  GTLRGmail_MessagePartHeader
 */
@interface GTLRGmail_MessagePartHeader : GTLRObject

/**
 *  The name of the header before the <code>:</code> separator. For
 *  example, <code>To</code>.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The value of the header after the <code>:</code> separator. For example,
 *  <code>someuser\@example.com</code>.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRGmail_ModifyMessageRequest
 */
@interface GTLRGmail_ModifyMessageRequest : GTLRObject

/** A list of IDs of labels to add to this message. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *addLabelIds;

/** A list IDs of labels to remove from this message. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *removeLabelIds;

@end


/**
 *  GTLRGmail_ModifyThreadRequest
 */
@interface GTLRGmail_ModifyThreadRequest : GTLRObject

/** A list of IDs of labels to add to this thread. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *addLabelIds;

/** A list of IDs of labels to remove from this thread. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *removeLabelIds;

@end


/**
 *  POP settings for an account.
 */
@interface GTLRGmail_PopSettings : GTLRObject

/**
 *  The range of messages which are accessible via POP.
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_PopSettings_AccessWindow_AccessWindowUnspecified
 *        Unspecified range. (Value: "accessWindowUnspecified")
 *    @arg @c kGTLRGmail_PopSettings_AccessWindow_AllMail Indicates that all
 *        unfetched messages are accessible via POP. (Value: "allMail")
 *    @arg @c kGTLRGmail_PopSettings_AccessWindow_Disabled Indicates that no
 *        messages are accessible via POP. (Value: "disabled")
 *    @arg @c kGTLRGmail_PopSettings_AccessWindow_FromNowOn Indicates that
 *        unfetched messages received after some past point in
 *        time are accessible via POP. (Value: "fromNowOn")
 */
@property(nonatomic, copy, nullable) NSString *accessWindow;

/**
 *  The action that will be executed on a message after it has been fetched via
 *  POP.
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_PopSettings_Disposition_Archive Archive the message.
 *        (Value: "archive")
 *    @arg @c kGTLRGmail_PopSettings_Disposition_DispositionUnspecified
 *        Unspecified disposition. (Value: "dispositionUnspecified")
 *    @arg @c kGTLRGmail_PopSettings_Disposition_LeaveInInbox Leave the message
 *        in the <code>INBOX</code>. (Value: "leaveInInbox")
 *    @arg @c kGTLRGmail_PopSettings_Disposition_MarkRead Leave the message in
 *        the <code>INBOX</code> and mark it as read. (Value: "markRead")
 *    @arg @c kGTLRGmail_PopSettings_Disposition_Trash Move the message to the
 *        <code>TRASH</code>. (Value: "trash")
 */
@property(nonatomic, copy, nullable) NSString *disposition;

@end


/**
 *  Profile for a Gmail user.
 */
@interface GTLRGmail_Profile : GTLRObject

/** The user's email address. */
@property(nonatomic, copy, nullable) NSString *emailAddress;

/**
 *  The ID of the mailbox's current history record.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *historyId;

/**
 *  The total number of messages in the mailbox.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *messagesTotal;

/**
 *  The total number of threads in the mailbox.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *threadsTotal;

@end


/**
 *  Settings associated with a send-as alias, which can be either the primary
 *  login address associated with the account or a custom "from" address.
 *  Send-as aliases correspond to the
 *  <a href="https://support.google.com/mail/answer/22370">"Send Mail As"</a>
 *  feature in the web interface.
 */
@interface GTLRGmail_SendAs : GTLRObject

/**
 *  A name that appears in the "From:" header for mail sent using this alias.
 *  For custom "from" addresses, when this is empty, Gmail will populate the
 *  "From:" header with the name that is used for the primary address
 *  associated with the account.
 *  If the admin has disabled the ability for users to update their name
 *  format, requests to update this field for the primary login will silently
 *  fail.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Whether this address is selected as the default "From:" address in
 *  situations such as composing a new message or sending a vacation
 *  auto-reply. Every Gmail account has exactly one default send-as address,
 *  so the only legal value that clients may write to this field is
 *  <code>true</code>. Changing this from <code>false</code> to
 *  <code>true</code> for an address will result in this field becoming
 *  <code>false</code> for the other previous default address.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDefault;

/**
 *  Whether this address is the primary address used to login to the account.
 *  Every Gmail account has exactly one primary address, and it cannot be
 *  deleted from the collection of send-as aliases. This field is read-only.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isPrimary;

/**
 *  An optional email address that is included in a "Reply-To:" header for mail
 *  sent using this alias. If this is empty, Gmail will not generate a
 *  "Reply-To:" header.
 */
@property(nonatomic, copy, nullable) NSString *replyToAddress;

/**
 *  The email address that appears in the "From:" header for mail sent using
 *  this alias. This is read-only for all operations except create.
 */
@property(nonatomic, copy, nullable) NSString *sendAsEmail;

/**
 *  An optional HTML signature that is included in messages composed with this
 *  alias in the Gmail web UI.
 */
@property(nonatomic, copy, nullable) NSString *signature;

/**
 *  An optional SMTP service that will be used as an outbound relay for mail
 *  sent using this alias. If this is empty, outbound mail will be sent
 *  directly from Gmail's servers to the destination SMTP service. This
 *  setting only applies to custom "from" aliases.
 */
@property(nonatomic, strong, nullable) GTLRGmail_SmtpMsa *smtpMsa;

/**
 *  Whether Gmail should <a href="https://support.google.com/a/answer/1710338">
 *  treat this address as an alias</a> for the user's primary email address.
 *  This setting only applies to custom "from" aliases.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *treatAsAlias;

/**
 *  Indicates whether this address has been verified for use as a send-as
 *  alias. Read-only. This setting only applies to custom "from" aliases.
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_SendAs_VerificationStatus_Accepted The address is ready
 *        to use as a send-as alias. (Value: "accepted")
 *    @arg @c kGTLRGmail_SendAs_VerificationStatus_Pending The address is
 *        awaiting verification by the owner. (Value: "pending")
 *    @arg @c kGTLRGmail_SendAs_VerificationStatus_VerificationStatusUnspecified
 *        Unspecified verification status. (Value:
 *        "verificationStatusUnspecified")
 */
@property(nonatomic, copy, nullable) NSString *verificationStatus;

@end


/**
 *  An S/MIME email config.
 */
@interface GTLRGmail_SmimeInfo : GTLRObject

/** Encrypted key password, when key is encrypted. */
@property(nonatomic, copy, nullable) NSString *encryptedKeyPassword;

/**
 *  When the certificate expires (in milliseconds since epoch).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expiration;

/**
 *  The immutable ID for the SmimeInfo.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Whether this SmimeInfo is the default one for this user's send-as address.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDefault;

/** The S/MIME certificate issuer's common name. */
@property(nonatomic, copy, nullable) NSString *issuerCn;

/**
 *  PEM formatted X509 concatenated certificate string (standard base64
 *  encoding). Format used for returning key, which includes public key
 *  as well as certificate chain (not private key).
 */
@property(nonatomic, copy, nullable) NSString *pem;

/**
 *  PKCS#12 format containing a single private/public key pair and
 *  certificate chain. This format is only accepted from client
 *  for creating a new SmimeInfo and is never returned, because the
 *  private key is not intended to be exported. PKCS#12 may be encrypted,
 *  in which case encryptedKeyPassword should be set appropriately.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *pkcs12;

@end


/**
 *  Configuration for communication with an SMTP service.
 */
@interface GTLRGmail_SmtpMsa : GTLRObject

/** The hostname of the SMTP service. Required. */
@property(nonatomic, copy, nullable) NSString *host;

/**
 *  The password that will be used for authentication with the SMTP service.
 *  This is a write-only field that can be specified in requests to create or
 *  update SendAs settings; it is never populated in responses.
 */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  The port of the SMTP service. Required.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/**
 *  The protocol that will be used to secure communication with the SMTP
 *  service. Required.
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_SmtpMsa_SecurityMode_None Communication with the remote
 *        SMTP service is unsecured. Requires port
 *        25. (Value: "none")
 *    @arg @c kGTLRGmail_SmtpMsa_SecurityMode_SecurityModeUnspecified
 *        Unspecified security mode. (Value: "securityModeUnspecified")
 *    @arg @c kGTLRGmail_SmtpMsa_SecurityMode_Ssl Communication with the remote
 *        SMTP service is secured using SSL. (Value: "ssl")
 *    @arg @c kGTLRGmail_SmtpMsa_SecurityMode_Starttls Communication with the
 *        remote SMTP service is secured using STARTTLS. (Value: "starttls")
 */
@property(nonatomic, copy, nullable) NSString *securityMode;

/**
 *  The username that will be used for authentication with the SMTP service.
 *  This is a write-only field that can be specified in requests to create or
 *  update SendAs settings; it is never populated in responses.
 */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  A collection of messages representing a conversation.
 */
@interface GTLRGmail_Thread : GTLRObject

/**
 *  The ID of the last history record that modified this thread.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *historyId;

/**
 *  The unique ID of the thread.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The list of messages in the thread. */
@property(nonatomic, strong, nullable) NSArray<GTLRGmail_Message *> *messages;

/** A short part of the message text. */
@property(nonatomic, copy, nullable) NSString *snippet;

@end


/**
 *  Vacation auto-reply settings for an account. These settings correspond to
 *  the <a href="https://support.google.com/mail/answer/25922">"Vacation
 *  responder"</a> feature in the web interface.
 */
@interface GTLRGmail_VacationSettings : GTLRObject

/**
 *  Flag that controls whether Gmail automatically replies to messages.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableAutoReply;

/**
 *  An optional end time for sending auto-replies (epoch ms).
 *  When this is specified, Gmail will automatically reply only to messages
 *  that it receives before the end time. If both <code>startTime</code> and
 *  <code>endTime</code> are specified, <code>startTime</code> must precede
 *  <code>endTime</code>.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endTime;

/**
 *  Response body in HTML format. Gmail will sanitize the HTML before
 *  storing it. If both <code>response_body_plain_text</code> and
 *  <code>response_body_html</code> are specified,
 *  <code>response_body_html</code> will be used.
 */
@property(nonatomic, copy, nullable) NSString *responseBodyHtml;

/**
 *  Response body in plain text format. If both
 *  <code>response_body_plain_text</code> and <code>response_body_html</code>
 *  are specified, <code>response_body_html</code> will be used.
 */
@property(nonatomic, copy, nullable) NSString *responseBodyPlainText;

/**
 *  Optional text to prepend to the subject line in vacation responses. In
 *  order to enable auto-replies, either the response subject or the response
 *  body must be nonempty.
 */
@property(nonatomic, copy, nullable) NSString *responseSubject;

/**
 *  Flag that determines whether responses are sent to recipients who are not
 *  in the user's list of contacts.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *restrictToContacts;

/**
 *  Flag that determines whether responses are sent to recipients who are
 *  outside of the user's domain. This feature is only available for G Suite
 *  users.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *restrictToDomain;

/**
 *  An optional start time for sending auto-replies (epoch ms).
 *  When this is specified, Gmail will automatically reply only to messages
 *  that it receives after the start time. If both <code>startTime</code> and
 *  <code>endTime</code> are specified, <code>startTime</code> must precede
 *  <code>endTime</code>.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startTime;

@end


/**
 *  Set up or update a new push notification watch on this user's mailbox.
 */
@interface GTLRGmail_WatchRequest : GTLRObject

/**
 *  Filtering behavior of labelIds list specified.
 *
 *  Likely values:
 *    @arg @c kGTLRGmail_WatchRequest_LabelFilterAction_Exclude Get push
 *        notifications for all message changes except those relating
 *        to labelIds specified. (Value: "exclude")
 *    @arg @c kGTLRGmail_WatchRequest_LabelFilterAction_Include Only get push
 *        notifications for message changes relating to labelIds
 *        specified. (Value: "include")
 */
@property(nonatomic, copy, nullable) NSString *labelFilterAction;

/**
 *  List of label_ids to restrict notifications about. By default,
 *  if unspecified, all changes are pushed out. If specified then
 *  dictates which labels are required for a push notification to
 *  be generated.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *labelIds;

/**
 *  A fully qualified Google Cloud Pub/Sub API topic name to publish the
 *  events to. This topic name **must** already exist in Cloud Pub/Sub and
 *  you **must** have already granted gmail "publish" permission on it.
 *  For example, "projects/my-project-identifier/topics/my-topic-name"
 *  (using the Cloud Pub/Sub "v1" topic naming format).
 *  Note that the "my-project-identifier" portion must exactly match your
 *  Google developer project id (the one executing this watch request).
 */
@property(nonatomic, copy, nullable) NSString *topicName;

@end


/**
 *  Push notification watch response.
 */
@interface GTLRGmail_WatchResponse : GTLRObject

/**
 *  When Gmail will stop sending notifications for mailbox updates
 *  (epoch millis). Call <code>watch</code> again before this time to renew
 *  the watch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expiration;

/**
 *  The ID of the mailbox's current history record.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *historyId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
