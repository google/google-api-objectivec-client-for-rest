// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Mirror API (mirror/v1)
// Description:
//   Interacts with Glass users via the timeline.
// Documentation:
//   https://developers.google.com/glass

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRMirror_Attachment;
@class GTLRMirror_AuthToken;
@class GTLRMirror_Command;
@class GTLRMirror_Contact;
@class GTLRMirror_Location;
@class GTLRMirror_MenuItem;
@class GTLRMirror_MenuValue;
@class GTLRMirror_Notification;
@class GTLRMirror_NotificationConfig;
@class GTLRMirror_Subscription;
@class GTLRMirror_TimelineItem;
@class GTLRMirror_UserAction;
@class GTLRMirror_UserData;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Represents an account passed into the Account Manager on Glass.
 */
@interface GTLRMirror_Account : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRMirror_AuthToken *> *authTokens;
@property(nonatomic, strong, nullable) NSArray<NSString *> *features;
@property(nonatomic, copy, nullable) NSString *password;
@property(nonatomic, strong, nullable) NSArray<GTLRMirror_UserData *> *userData;

@end


/**
 *  Represents media content, such as a photo, that can be attached to a
 *  timeline item.
 */
@interface GTLRMirror_Attachment : GTLRObject

/** The MIME type of the attachment. */
@property(nonatomic, copy, nullable) NSString *contentType;

/** The URL for the content. */
@property(nonatomic, copy, nullable) NSString *contentUrl;

/**
 *  The ID of the attachment.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Indicates that the contentUrl is not available because the attachment
 *  content is still being processed. If the caller wishes to retrieve the
 *  content, it should try again later.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isProcessingContent;

@end


/**
 *  A list of Attachments. This is the response from the server to GET requests
 *  on the attachments collection.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRMirror_AttachmentsListResponse : GTLRCollectionObject

/**
 *  The list of attachments.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMirror_Attachment *> *items;

/** The type of resource. This is always mirror#attachmentsList. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  GTLRMirror_AuthToken
 */
@interface GTLRMirror_AuthToken : GTLRObject

@property(nonatomic, copy, nullable) NSString *authToken;
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A single menu command that is part of a Contact.
 */
@interface GTLRMirror_Command : GTLRObject

/**
 *  The type of operation this command corresponds to. Allowed values are:
 *  - TAKE_A_NOTE - Shares a timeline item with the transcription of user speech
 *  from the "Take a note" voice menu command.
 *  - POST_AN_UPDATE - Shares a timeline item with the transcription of user
 *  speech from the "Post an update" voice menu command.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A person or group that can be used as a creator or a contact.
 */
@interface GTLRMirror_Contact : GTLRObject

/**
 *  A list of voice menu commands that a contact can handle. Glass shows up to
 *  three contacts for each voice menu command. If there are more than that, the
 *  three contacts with the highest priority are shown for that particular
 *  command.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMirror_Command *> *acceptCommands;

/**
 *  A list of MIME types that a contact supports. The contact will be shown to
 *  the user if any of its acceptTypes matches any of the types of the
 *  attachments on the item. If no acceptTypes are given, the contact will be
 *  shown for all items.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *acceptTypes;

/** The name to display for this contact. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  An ID for this contact. This is generated by the application and is treated
 *  as an opaque token.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Set of image URLs to display for a contact. Most contacts will have a single
 *  image, but a "group" contact may include up to 8 image URLs and they will be
 *  resized and cropped into a mosaic on the client.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *imageUrls;

/** The type of resource. This is always mirror#contact. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Primary phone number for the contact. This can be a fully-qualified number,
 *  with country calling code and area code, or a local number.
 */
@property(nonatomic, copy, nullable) NSString *phoneNumber;

/**
 *  Priority for the contact to determine ordering in a list of contacts.
 *  Contacts with higher priorities will be shown before ones with lower
 *  priorities.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *priority;

/**
 *  A list of sharing features that a contact can handle. Allowed values are:
 *  - ADD_CAPTION
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sharingFeatures;

/**
 *  The ID of the application that created this contact. This is populated by
 *  the API
 */
@property(nonatomic, copy, nullable) NSString *source;

/**
 *  Name of this contact as it should be pronounced. If this contact's name must
 *  be spoken as part of a voice disambiguation menu, this name is used as the
 *  expected pronunciation. This is useful for contact names with
 *  unpronounceable characters or whose display spelling is otherwise not
 *  phonetic.
 */
@property(nonatomic, copy, nullable) NSString *speakableName;

/**
 *  The type for this contact. This is used for sorting in UIs. Allowed values
 *  are:
 *  - INDIVIDUAL - Represents a single person. This is the default.
 *  - GROUP - Represents more than a single person.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A list of Contacts representing contacts. This is the response from the
 *  server to GET requests on the contacts collection.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRMirror_ContactsListResponse : GTLRCollectionObject

/**
 *  Contact list.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMirror_Contact *> *items;

/** The type of resource. This is always mirror#contacts. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  A geographic location that can be associated with a timeline item.
 */
@interface GTLRMirror_Location : GTLRObject

/**
 *  The accuracy of the location fix in meters.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *accuracy;

/** The full address of the location. */
@property(nonatomic, copy, nullable) NSString *address;

/**
 *  The name to be displayed. This may be a business name or a user-defined
 *  place, such as "Home".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The ID of the location.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The type of resource. This is always mirror#location. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The latitude, in degrees.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latitude;

/**
 *  The longitude, in degrees.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longitude;

/**
 *  The time at which this location was captured, formatted according to RFC
 *  3339.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *timestamp;

@end


/**
 *  A list of Locations. This is the response from the server to GET requests on
 *  the locations collection.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRMirror_LocationsListResponse : GTLRCollectionObject

/**
 *  The list of locations.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMirror_Location *> *items;

/** The type of resource. This is always mirror#locationsList. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  A custom menu item that can be presented to the user by a timeline item.
 */
@interface GTLRMirror_MenuItem : GTLRObject

/**
 *  Controls the behavior when the user picks the menu option. Allowed values
 *  are:
 *  - CUSTOM - Custom action set by the service. When the user selects this
 *  menuItem, the API triggers a notification to your callbackUrl with the
 *  userActions.type set to CUSTOM and the userActions.payload set to the ID of
 *  this menu item. This is the default value.
 *  - Built-in actions:
 *  - REPLY - Initiate a reply to the timeline item using the voice recording
 *  UI. The creator attribute must be set in the timeline item for this menu to
 *  be available.
 *  - REPLY_ALL - Same behavior as REPLY. The original timeline item's
 *  recipients will be added to the reply item.
 *  - DELETE - Delete the timeline item.
 *  - SHARE - Share the timeline item with the available contacts.
 *  - READ_ALOUD - Read the timeline item's speakableText aloud; if this field
 *  is not set, read the text field; if none of those fields are set, this menu
 *  item is ignored.
 *  - GET_MEDIA_INPUT - Allow users to provide media payloads to Glassware from
 *  a menu item (currently, only transcribed text from voice input is
 *  supported). Subscribe to notifications when users invoke this menu item to
 *  receive the timeline item ID. Retrieve the media from the timeline item in
 *  the payload property.
 *  - VOICE_CALL - Initiate a phone call using the timeline item's
 *  creator.phoneNumber attribute as recipient.
 *  - NAVIGATE - Navigate to the timeline item's location.
 *  - TOGGLE_PINNED - Toggle the isPinned state of the timeline item.
 *  - OPEN_URI - Open the payload of the menu item in the browser.
 *  - PLAY_VIDEO - Open the payload of the menu item in the Glass video player.
 *  - SEND_MESSAGE - Initiate sending a message to the timeline item's creator:
 *  - If the creator.phoneNumber is set and Glass is connected to an Android
 *  phone, the message is an SMS.
 *  - Otherwise, if the creator.email is set, the message is an email.
 */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  The ContextualMenus.Command associated with this MenuItem (e.g. READ_ALOUD).
 *  The voice label for this command will be displayed in the voice menu and the
 *  touch label will be displayed in the touch menu. Note that the default menu
 *  value's display name will be overriden if you specify this property. Values
 *  that do not correspond to a ContextualMenus.Command name will be ignored.
 */
@property(nonatomic, copy, nullable) NSString *contextualCommand;

/**
 *  The ID for this menu item. This is generated by the application and is
 *  treated as an opaque token.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  A generic payload whose meaning changes depending on this MenuItem's action.
 *  - When the action is OPEN_URI, the payload is the URL of the website to
 *  view.
 *  - When the action is PLAY_VIDEO, the payload is the streaming URL of the
 *  video
 *  - When the action is GET_MEDIA_INPUT, the payload is the text transcription
 *  of a user's speech input
 */
@property(nonatomic, copy, nullable) NSString *payload;

/**
 *  If set to true on a CUSTOM menu item, that item will be removed from the
 *  menu after it is selected.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *removeWhenSelected;

/**
 *  For CUSTOM items, a list of values controlling the appearance of the menu
 *  item in each of its states. A value for the DEFAULT state must be provided.
 *  If the PENDING or CONFIRMED states are missing, they will not be shown.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMirror_MenuValue *> *values;

@end


/**
 *  A single value that is part of a MenuItem.
 */
@interface GTLRMirror_MenuValue : GTLRObject

/**
 *  The name to display for the menu item. If you specify this property for a
 *  built-in menu item, the default contextual voice command for that menu item
 *  is not shown.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** URL of an icon to display with the menu item. */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The state that this value applies to. Allowed values are:
 *  - DEFAULT - Default value shown when displayed in the menuItems list.
 *  - PENDING - Value shown when the menuItem has been selected by the user but
 *  can still be cancelled.
 *  - CONFIRMED - Value shown when the menuItem has been selected by the user
 *  and can no longer be cancelled.
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  A notification delivered by the API.
 */
@interface GTLRMirror_Notification : GTLRObject

/** The collection that generated the notification. */
@property(nonatomic, copy, nullable) NSString *collection;

/** The ID of the item that generated the notification. */
@property(nonatomic, copy, nullable) NSString *itemId;

/** The type of operation that generated the notification. */
@property(nonatomic, copy, nullable) NSString *operation;

/** A list of actions taken by the user that triggered the notification. */
@property(nonatomic, strong, nullable) NSArray<GTLRMirror_UserAction *> *userActions;

/**
 *  The user token provided by the service when it subscribed for notifications.
 */
@property(nonatomic, copy, nullable) NSString *userToken;

/**
 *  The secret verify token provided by the service when it subscribed for
 *  notifications.
 */
@property(nonatomic, copy, nullable) NSString *verifyToken;

@end


/**
 *  Controls how notifications for a timeline item are presented to the user.
 */
@interface GTLRMirror_NotificationConfig : GTLRObject

/** The time at which the notification should be delivered. */
@property(nonatomic, strong, nullable) GTLRDateTime *deliveryTime;

/**
 *  Describes how important the notification is. Allowed values are:
 *  - DEFAULT - Notifications of default importance. A chime will be played to
 *  alert users.
 */
@property(nonatomic, copy, nullable) NSString *level;

@end


/**
 *  A setting for Glass.
 */
@interface GTLRMirror_Setting : GTLRObject

/**
 *  The setting's ID. The following IDs are valid:
 *  - locale - The key to the user’s language/locale (BCP 47 identifier) that
 *  Glassware should use to render localized content.
 *  - timezone - The key to the user’s current time zone region as defined in
 *  the tz database. Example: America/Los_Angeles.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The type of resource. This is always mirror#setting. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The setting value, as a string. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A subscription to events on a collection.
 */
@interface GTLRMirror_Subscription : GTLRObject

/**
 *  The URL where notifications should be delivered (must start with https://).
 */
@property(nonatomic, copy, nullable) NSString *callbackUrl;

/**
 *  The collection to subscribe to. Allowed values are:
 *  - timeline - Changes in the timeline including insertion, deletion, and
 *  updates.
 *  - locations - Location updates.
 *  - settings - Settings updates.
 */
@property(nonatomic, copy, nullable) NSString *collection;

/**
 *  The ID of the subscription.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The type of resource. This is always mirror#subscription. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Container object for notifications. This is not populated in the
 *  Subscription resource.
 */
@property(nonatomic, strong, nullable) GTLRMirror_Notification *notification;

/**
 *  A list of operations that should be subscribed to. An empty list indicates
 *  that all operations on the collection should be subscribed to. Allowed
 *  values are:
 *  - UPDATE - The item has been updated.
 *  - INSERT - A new item has been inserted.
 *  - DELETE - The item has been deleted.
 *  - MENU_ACTION - A custom menu item has been triggered by the user.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *operation;

/**
 *  The time at which this subscription was last modified, formatted according
 *  to RFC 3339.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updated;

/**
 *  An opaque token sent to the subscriber in notifications so that it can
 *  determine the ID of the user.
 */
@property(nonatomic, copy, nullable) NSString *userToken;

/**
 *  A secret token sent to the subscriber in notifications so that it can verify
 *  that the notification was generated by Google.
 */
@property(nonatomic, copy, nullable) NSString *verifyToken;

@end


/**
 *  A list of Subscriptions. This is the response from the server to GET
 *  requests on the subscription collection.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRMirror_SubscriptionsListResponse : GTLRCollectionObject

/**
 *  The list of subscriptions.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMirror_Subscription *> *items;

/** The type of resource. This is always mirror#subscriptionsList. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Each item in the user's timeline is represented as a TimelineItem JSON
 *  structure, described below.
 */
@interface GTLRMirror_TimelineItem : GTLRObject

/**
 *  A list of media attachments associated with this item. As a convenience, you
 *  can refer to attachments in your HTML payloads with the attachment or cid
 *  scheme. For example:
 *  - attachment: <img src="attachment:attachment_index"> where attachment_index
 *  is the 0-based index of this array.
 *  - cid: <img src="cid:attachment_id"> where attachment_id is the ID of the
 *  attachment.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMirror_Attachment *> *attachments;

/**
 *  The bundle ID for this item. Services can specify a bundleId to group many
 *  items together. They appear under a single top-level item on the device.
 */
@property(nonatomic, copy, nullable) NSString *bundleId;

/**
 *  A canonical URL pointing to the canonical/high quality version of the data
 *  represented by the timeline item.
 */
@property(nonatomic, copy, nullable) NSString *canonicalUrl;

/**
 *  The time at which this item was created, formatted according to RFC 3339.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *created;

/** The user or group that created this item. */
@property(nonatomic, strong, nullable) GTLRMirror_Contact *creator;

/**
 *  The time that should be displayed when this item is viewed in the timeline,
 *  formatted according to RFC 3339. This user's timeline is sorted
 *  chronologically on display time, so this will also determine where the item
 *  is displayed in the timeline. If not set by the service, the display time
 *  defaults to the updated time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *displayTime;

/** ETag for this item. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  HTML content for this item. If both text and html are provided for an item,
 *  the html will be rendered in the timeline.
 *  Allowed HTML elements - You can use these elements in your timeline cards.
 *  - Headers: h1, h2, h3, h4, h5, h6
 *  - Images: img
 *  - Lists: li, ol, ul
 *  - HTML5 semantics: article, aside, details, figure, figcaption, footer,
 *  header, nav, section, summary, time
 *  - Structural: blockquote, br, div, hr, p, span
 *  - Style: b, big, center, em, i, u, s, small, strike, strong, style, sub, sup
 *  - Tables: table, tbody, td, tfoot, th, thead, tr
 *  Blocked HTML elements: These elements and their contents are removed from
 *  HTML payloads.
 *  - Document headers: head, title
 *  - Embeds: audio, embed, object, source, video
 *  - Frames: frame, frameset
 *  - Scripting: applet, script
 *  Other elements: Any elements that aren't listed are removed, but their
 *  contents are preserved.
 */
@property(nonatomic, copy, nullable) NSString *html;

/**
 *  The ID of the timeline item. This is unique within a user's timeline.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  If this item was generated as a reply to another item, this field will be
 *  set to the ID of the item being replied to. This can be used to attach a
 *  reply to the appropriate conversation or post.
 */
@property(nonatomic, copy, nullable) NSString *inReplyTo;

/**
 *  Whether this item is a bundle cover.
 *  If an item is marked as a bundle cover, it will be the entry point to the
 *  bundle of items that have the same bundleId as that item. It will be shown
 *  only on the main timeline — not within the opened bundle.
 *  On the main timeline, items that are shown are:
 *  - Items that have isBundleCover set to true
 *  - Items that do not have a bundleId In a bundle sub-timeline, items that are
 *  shown are:
 *  - Items that have the bundleId in question AND isBundleCover set to false
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isBundleCover;

/**
 *  When true, indicates this item is deleted, and only the ID property is set.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDeleted;

/**
 *  When true, indicates this item is pinned, which means it's grouped alongside
 *  "active" items like navigation and hangouts, on the opposite side of the
 *  home screen from historical (non-pinned) timeline items. You can allow the
 *  user to toggle the value of this property with the TOGGLE_PINNED built-in
 *  menu item.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isPinned;

/** The type of resource. This is always mirror#timelineItem. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The geographic location associated with this item. */
@property(nonatomic, strong, nullable) GTLRMirror_Location *location;

/**
 *  A list of menu items that will be presented to the user when this item is
 *  selected in the timeline.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMirror_MenuItem *> *menuItems;

/**
 *  Controls how notifications for this item are presented on the device. If
 *  this is missing, no notification will be generated.
 */
@property(nonatomic, strong, nullable) GTLRMirror_NotificationConfig *notification;

/**
 *  For pinned items, this determines the order in which the item is displayed
 *  in the timeline, with a higher score appearing closer to the clock. Note:
 *  setting this field is currently not supported.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pinScore;

/** A list of users or groups that this item has been shared with. */
@property(nonatomic, strong, nullable) NSArray<GTLRMirror_Contact *> *recipients;

/** A URL that can be used to retrieve this item. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  Opaque string you can use to map a timeline item to data in your own
 *  service.
 */
@property(nonatomic, copy, nullable) NSString *sourceItemId;

/**
 *  The speakable version of the content of this item. Along with the READ_ALOUD
 *  menu item, use this field to provide text that would be clearer when read
 *  aloud, or to provide extended information to what is displayed visually on
 *  Glass.
 *  Glassware should also specify the speakableType field, which will be spoken
 *  before this text in cases where the additional context is useful, for
 *  example when the user requests that the item be read aloud following a
 *  notification.
 */
@property(nonatomic, copy, nullable) NSString *speakableText;

/**
 *  A speakable description of the type of this item. This will be announced to
 *  the user prior to reading the content of the item in cases where the
 *  additional context is useful, for example when the user requests that the
 *  item be read aloud following a notification.
 *  This should be a short, simple noun phrase such as "Email", "Text message",
 *  or "Daily Planet News Update".
 *  Glassware are encouraged to populate this field for every timeline item,
 *  even if the item does not contain speakableText or text so that the user can
 *  learn the type of the item without looking at the screen.
 */
@property(nonatomic, copy, nullable) NSString *speakableType;

/** Text content of this item. */
@property(nonatomic, copy, nullable) NSString *text;

/** The title of this item. */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  The time at which this item was last modified, formatted according to RFC
 *  3339.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updated;

@end


/**
 *  A list of timeline items. This is the response from the server to GET
 *  requests on the timeline collection.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRMirror_TimelineListResponse : GTLRCollectionObject

/**
 *  Items in the timeline.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMirror_TimelineItem *> *items;

/** The type of resource. This is always mirror#timeline. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The next page token. Provide this as the pageToken parameter in the request
 *  to retrieve the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Represents an action taken by the user that triggered a notification.
 */
@interface GTLRMirror_UserAction : GTLRObject

/**
 *  An optional payload for the action.
 *  For actions of type CUSTOM, this is the ID of the custom menu item that was
 *  selected.
 */
@property(nonatomic, copy, nullable) NSString *payload;

/**
 *  The type of action. The value of this can be:
 *  - SHARE - the user shared an item.
 *  - REPLY - the user replied to an item.
 *  - REPLY_ALL - the user replied to all recipients of an item.
 *  - CUSTOM - the user selected a custom menu item on the timeline item.
 *  - DELETE - the user deleted the item.
 *  - PIN - the user pinned the item.
 *  - UNPIN - the user unpinned the item.
 *  - LAUNCH - the user initiated a voice command. In the future, additional
 *  types may be added. UserActions with unrecognized types should be ignored.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRMirror_UserData
 */
@interface GTLRMirror_UserData : GTLRObject

@property(nonatomic, copy, nullable) NSString *key;
@property(nonatomic, copy, nullable) NSString *value;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
