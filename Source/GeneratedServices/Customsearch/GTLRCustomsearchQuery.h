// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   CustomSearch API (customsearch/v1)
// Description:
//   Searches over a website or collection of websites
// Documentation:
//   https://developers.google.com/custom-search/v1/using_rest

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// filter

/**
 *  Turns off duplicate content filter.
 *
 *  Value: "0"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchFilterX0;
/**
 *  Turns on duplicate content filter.
 *
 *  Value: "1"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchFilterX1;

// ----------------------------------------------------------------------------
// imgColorType

/**
 *  color
 *
 *  Value: "color"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgColorTypeColor;
/**
 *  gray
 *
 *  Value: "gray"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgColorTypeGray;
/**
 *  mono
 *
 *  Value: "mono"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgColorTypeMono;

// ----------------------------------------------------------------------------
// imgDominantColor

/**
 *  black
 *
 *  Value: "black"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgDominantColorBlack;
/**
 *  blue
 *
 *  Value: "blue"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgDominantColorBlue;
/**
 *  brown
 *
 *  Value: "brown"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgDominantColorBrown;
/**
 *  gray
 *
 *  Value: "gray"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgDominantColorGray;
/**
 *  green
 *
 *  Value: "green"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgDominantColorGreen;
/**
 *  orange
 *
 *  Value: "orange"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgDominantColorOrange;
/**
 *  pink
 *
 *  Value: "pink"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgDominantColorPink;
/**
 *  purple
 *
 *  Value: "purple"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgDominantColorPurple;
/**
 *  red
 *
 *  Value: "red"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgDominantColorRed;
/**
 *  teal
 *
 *  Value: "teal"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgDominantColorTeal;
/**
 *  white
 *
 *  Value: "white"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgDominantColorWhite;
/**
 *  yellow
 *
 *  Value: "yellow"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgDominantColorYellow;

// ----------------------------------------------------------------------------
// imgSize

/**
 *  huge
 *
 *  Value: "huge"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgSizeHuge;
/**
 *  icon
 *
 *  Value: "icon"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgSizeIcon;
/**
 *  large
 *
 *  Value: "large"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgSizeLarge;
/**
 *  medium
 *
 *  Value: "medium"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgSizeMedium;
/**
 *  small
 *
 *  Value: "small"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgSizeSmall;
/**
 *  xlarge
 *
 *  Value: "xlarge"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgSizeXlarge;
/**
 *  xxlarge
 *
 *  Value: "xxlarge"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgSizeXxlarge;

// ----------------------------------------------------------------------------
// imgType

/**
 *  clipart
 *
 *  Value: "clipart"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgTypeClipart;
/**
 *  face
 *
 *  Value: "face"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgTypeFace;
/**
 *  lineart
 *
 *  Value: "lineart"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgTypeLineart;
/**
 *  news
 *
 *  Value: "news"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgTypeNews;
/**
 *  photo
 *
 *  Value: "photo"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchImgTypePhoto;

// ----------------------------------------------------------------------------
// lr

/**
 *  Arabic
 *
 *  Value: "lang_ar"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangAr;
/**
 *  Bulgarian
 *
 *  Value: "lang_bg"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangBg;
/**
 *  Catalan
 *
 *  Value: "lang_ca"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangCa;
/**
 *  Czech
 *
 *  Value: "lang_cs"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangCs;
/**
 *  Danish
 *
 *  Value: "lang_da"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangDa;
/**
 *  German
 *
 *  Value: "lang_de"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangDe;
/**
 *  Greek
 *
 *  Value: "lang_el"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangEl;
/**
 *  English
 *
 *  Value: "lang_en"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangEn;
/**
 *  Spanish
 *
 *  Value: "lang_es"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangEs;
/**
 *  Estonian
 *
 *  Value: "lang_et"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangEt;
/**
 *  Finnish
 *
 *  Value: "lang_fi"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangFi;
/**
 *  French
 *
 *  Value: "lang_fr"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangFr;
/**
 *  Croatian
 *
 *  Value: "lang_hr"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangHr;
/**
 *  Hungarian
 *
 *  Value: "lang_hu"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangHu;
/**
 *  Indonesian
 *
 *  Value: "lang_id"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangId;
/**
 *  Icelandic
 *
 *  Value: "lang_is"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangIs;
/**
 *  Italian
 *
 *  Value: "lang_it"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangIt;
/**
 *  Hebrew
 *
 *  Value: "lang_iw"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangIw;
/**
 *  Japanese
 *
 *  Value: "lang_ja"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangJa;
/**
 *  Korean
 *
 *  Value: "lang_ko"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangKo;
/**
 *  Lithuanian
 *
 *  Value: "lang_lt"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangLt;
/**
 *  Latvian
 *
 *  Value: "lang_lv"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangLv;
/**
 *  Dutch
 *
 *  Value: "lang_nl"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangNl;
/**
 *  Norwegian
 *
 *  Value: "lang_no"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangNo;
/**
 *  Polish
 *
 *  Value: "lang_pl"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangPl;
/**
 *  Portuguese
 *
 *  Value: "lang_pt"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangPt;
/**
 *  Romanian
 *
 *  Value: "lang_ro"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangRo;
/**
 *  Russian
 *
 *  Value: "lang_ru"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangRu;
/**
 *  Slovak
 *
 *  Value: "lang_sk"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangSk;
/**
 *  Slovenian
 *
 *  Value: "lang_sl"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangSl;
/**
 *  Serbian
 *
 *  Value: "lang_sr"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangSr;
/**
 *  Swedish
 *
 *  Value: "lang_sv"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangSv;
/**
 *  Turkish
 *
 *  Value: "lang_tr"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangTr;
/**
 *  Chinese (Simplified)
 *
 *  Value: "lang_zh-CN"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangZhCN;
/**
 *  Chinese (Traditional)
 *
 *  Value: "lang_zh-TW"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchLrLangZhTW;

// ----------------------------------------------------------------------------
// safe

/**
 *  Enables safe search filtering.
 *
 *  Value: "active"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchSafeActive;
/** Value: "high" */
GTLR_EXTERN NSString * const kGTLRCustomsearchSafeHigh;
/** Value: "medium" */
GTLR_EXTERN NSString * const kGTLRCustomsearchSafeMedium;
/**
 *  Disables safe search filtering.
 *
 *  Value: "off"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchSafeOff;

// ----------------------------------------------------------------------------
// searchType

/**
 *  custom image search
 *
 *  Value: "image"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchSearchTypeImage;

// ----------------------------------------------------------------------------
// siteSearchFilter

/**
 *  exclude
 *
 *  Value: "e"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchSiteSearchFilterE;
/**
 *  include
 *
 *  Value: "i"
 */
GTLR_EXTERN NSString * const kGTLRCustomsearchSiteSearchFilterI;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Customsearch query classes.
 */
@interface GTLRCustomsearchQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Returns metadata about the search performed, metadata about the custom
 *  search engine used for the search, and the search results.
 *
 *  Method: search.cse.list
 */
@interface GTLRCustomsearchQuery_CseList : GTLRCustomsearchQuery
// Previous library name was
//   +[GTLQueryCustomsearch queryForCseListWithq:]

/** Turns off the translation between zh-CN and zh-TW. */
@property(nonatomic, copy, nullable) NSString *c2coff;

/** Country restrict(s). */
@property(nonatomic, copy, nullable) NSString *cr;

/** The custom search engine ID to scope this search query */
@property(nonatomic, copy, nullable) NSString *cx;

/** Specifies all search results are from a time period */
@property(nonatomic, copy, nullable) NSString *dateRestrict;

/**
 *  Identifies a phrase that all documents in the search results must contain
 */
@property(nonatomic, copy, nullable) NSString *exactTerms;

/**
 *  Identifies a word or phrase that should not appear in any documents in the
 *  search results
 */
@property(nonatomic, copy, nullable) NSString *excludeTerms;

/**
 *  Returns images of a specified type. Some of the allowed values are: bmp,
 *  gif, png, jpg, svg, pdf, ...
 */
@property(nonatomic, copy, nullable) NSString *fileType;

/**
 *  Controls turning on or off the duplicate content filter.
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchFilterX0 Turns off duplicate content filter.
 *        (Value: "0")
 *    @arg @c kGTLRCustomsearchFilterX1 Turns on duplicate content filter.
 *        (Value: "1")
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Geolocation of end user. */
@property(nonatomic, copy, nullable) NSString *gl;

/** The local Google domain to use to perform the search. */
@property(nonatomic, copy, nullable) NSString *googlehost;

/**
 *  Creates a range in form as_nlo value..as_nhi value and attempts to append it
 *  to query
 */
@property(nonatomic, copy, nullable) NSString *highRange;

/** Sets the user interface language. */
@property(nonatomic, copy, nullable) NSString *hl;

/** Appends the extra query terms to the query. */
@property(nonatomic, copy, nullable) NSString *hq;

/**
 *  Returns black and white, grayscale, or color images: mono, gray, and color.
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchImgColorTypeColor color (Value: "color")
 *    @arg @c kGTLRCustomsearchImgColorTypeGray gray (Value: "gray")
 *    @arg @c kGTLRCustomsearchImgColorTypeMono mono (Value: "mono")
 */
@property(nonatomic, copy, nullable) NSString *imgColorType;

/**
 *  Returns images of a specific dominant color: red, orange, yellow, green,
 *  teal, blue, purple, pink, white, gray, black and brown.
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchImgDominantColorBlack black (Value: "black")
 *    @arg @c kGTLRCustomsearchImgDominantColorBlue blue (Value: "blue")
 *    @arg @c kGTLRCustomsearchImgDominantColorBrown brown (Value: "brown")
 *    @arg @c kGTLRCustomsearchImgDominantColorGray gray (Value: "gray")
 *    @arg @c kGTLRCustomsearchImgDominantColorGreen green (Value: "green")
 *    @arg @c kGTLRCustomsearchImgDominantColorOrange orange (Value: "orange")
 *    @arg @c kGTLRCustomsearchImgDominantColorPink pink (Value: "pink")
 *    @arg @c kGTLRCustomsearchImgDominantColorPurple purple (Value: "purple")
 *    @arg @c kGTLRCustomsearchImgDominantColorRed red (Value: "red")
 *    @arg @c kGTLRCustomsearchImgDominantColorTeal teal (Value: "teal")
 *    @arg @c kGTLRCustomsearchImgDominantColorWhite white (Value: "white")
 *    @arg @c kGTLRCustomsearchImgDominantColorYellow yellow (Value: "yellow")
 */
@property(nonatomic, copy, nullable) NSString *imgDominantColor;

/**
 *  Returns images of a specified size, where size can be one of: icon, small,
 *  medium, large, xlarge, xxlarge, and huge.
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchImgSizeHuge huge (Value: "huge")
 *    @arg @c kGTLRCustomsearchImgSizeIcon icon (Value: "icon")
 *    @arg @c kGTLRCustomsearchImgSizeLarge large (Value: "large")
 *    @arg @c kGTLRCustomsearchImgSizeMedium medium (Value: "medium")
 *    @arg @c kGTLRCustomsearchImgSizeSmall small (Value: "small")
 *    @arg @c kGTLRCustomsearchImgSizeXlarge xlarge (Value: "xlarge")
 *    @arg @c kGTLRCustomsearchImgSizeXxlarge xxlarge (Value: "xxlarge")
 */
@property(nonatomic, copy, nullable) NSString *imgSize;

/**
 *  Returns images of a type, which can be one of: clipart, face, lineart, news,
 *  and photo.
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchImgTypeClipart clipart (Value: "clipart")
 *    @arg @c kGTLRCustomsearchImgTypeFace face (Value: "face")
 *    @arg @c kGTLRCustomsearchImgTypeLineart lineart (Value: "lineart")
 *    @arg @c kGTLRCustomsearchImgTypeNews news (Value: "news")
 *    @arg @c kGTLRCustomsearchImgTypePhoto photo (Value: "photo")
 */
@property(nonatomic, copy, nullable) NSString *imgType;

/**
 *  Specifies that all search results should contain a link to a particular URL
 */
@property(nonatomic, copy, nullable) NSString *linkSite;

/**
 *  Creates a range in form as_nlo value..as_nhi value and attempts to append it
 *  to query
 */
@property(nonatomic, copy, nullable) NSString *lowRange;

/**
 *  The language restriction for the search results
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchLrLangAr Arabic (Value: "lang_ar")
 *    @arg @c kGTLRCustomsearchLrLangBg Bulgarian (Value: "lang_bg")
 *    @arg @c kGTLRCustomsearchLrLangCa Catalan (Value: "lang_ca")
 *    @arg @c kGTLRCustomsearchLrLangCs Czech (Value: "lang_cs")
 *    @arg @c kGTLRCustomsearchLrLangDa Danish (Value: "lang_da")
 *    @arg @c kGTLRCustomsearchLrLangDe German (Value: "lang_de")
 *    @arg @c kGTLRCustomsearchLrLangEl Greek (Value: "lang_el")
 *    @arg @c kGTLRCustomsearchLrLangEn English (Value: "lang_en")
 *    @arg @c kGTLRCustomsearchLrLangEs Spanish (Value: "lang_es")
 *    @arg @c kGTLRCustomsearchLrLangEt Estonian (Value: "lang_et")
 *    @arg @c kGTLRCustomsearchLrLangFi Finnish (Value: "lang_fi")
 *    @arg @c kGTLRCustomsearchLrLangFr French (Value: "lang_fr")
 *    @arg @c kGTLRCustomsearchLrLangHr Croatian (Value: "lang_hr")
 *    @arg @c kGTLRCustomsearchLrLangHu Hungarian (Value: "lang_hu")
 *    @arg @c kGTLRCustomsearchLrLangId Indonesian (Value: "lang_id")
 *    @arg @c kGTLRCustomsearchLrLangIs Icelandic (Value: "lang_is")
 *    @arg @c kGTLRCustomsearchLrLangIt Italian (Value: "lang_it")
 *    @arg @c kGTLRCustomsearchLrLangIw Hebrew (Value: "lang_iw")
 *    @arg @c kGTLRCustomsearchLrLangJa Japanese (Value: "lang_ja")
 *    @arg @c kGTLRCustomsearchLrLangKo Korean (Value: "lang_ko")
 *    @arg @c kGTLRCustomsearchLrLangLt Lithuanian (Value: "lang_lt")
 *    @arg @c kGTLRCustomsearchLrLangLv Latvian (Value: "lang_lv")
 *    @arg @c kGTLRCustomsearchLrLangNl Dutch (Value: "lang_nl")
 *    @arg @c kGTLRCustomsearchLrLangNo Norwegian (Value: "lang_no")
 *    @arg @c kGTLRCustomsearchLrLangPl Polish (Value: "lang_pl")
 *    @arg @c kGTLRCustomsearchLrLangPt Portuguese (Value: "lang_pt")
 *    @arg @c kGTLRCustomsearchLrLangRo Romanian (Value: "lang_ro")
 *    @arg @c kGTLRCustomsearchLrLangRu Russian (Value: "lang_ru")
 *    @arg @c kGTLRCustomsearchLrLangSk Slovak (Value: "lang_sk")
 *    @arg @c kGTLRCustomsearchLrLangSl Slovenian (Value: "lang_sl")
 *    @arg @c kGTLRCustomsearchLrLangSr Serbian (Value: "lang_sr")
 *    @arg @c kGTLRCustomsearchLrLangSv Swedish (Value: "lang_sv")
 *    @arg @c kGTLRCustomsearchLrLangTr Turkish (Value: "lang_tr")
 *    @arg @c kGTLRCustomsearchLrLangZhCN Chinese (Simplified) (Value:
 *        "lang_zh-CN")
 *    @arg @c kGTLRCustomsearchLrLangZhTW Chinese (Traditional) (Value:
 *        "lang_zh-TW")
 */
@property(nonatomic, copy, nullable) NSString *lr;

/**
 *  Number of search results to return
 *
 *  @note If not set, the documented server-side default will be 10.
 */
@property(nonatomic, assign) NSUInteger num;

/**
 *  Provides additional search terms to check for in a document, where each
 *  document in the search results must contain at least one of the additional
 *  search terms
 */
@property(nonatomic, copy, nullable) NSString *orTerms;

/** Query */
@property(nonatomic, copy, nullable) NSString *q;

/**
 *  Specifies that all search results should be pages that are related to the
 *  specified URL
 */
@property(nonatomic, copy, nullable) NSString *relatedSite;

/**
 *  Filters based on licensing. Supported values include: cc_publicdomain,
 *  cc_attribute, cc_sharealike, cc_noncommercial, cc_nonderived and
 *  combinations of these.
 */
@property(nonatomic, copy, nullable) NSString *rights;

/**
 *  Search safety level
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchSafeActive Enables safe search filtering. (Value:
 *        "active")
 *    @arg @c kGTLRCustomsearchSafeHigh (Deprecated) Same as active. (Value:
 *        "high")
 *    @arg @c kGTLRCustomsearchSafeMedium (Deprecated) Same as active. (Value:
 *        "medium")
 *    @arg @c kGTLRCustomsearchSafeOff Disables safe search filtering. (Value:
 *        "off")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRCustomsearchSafeOff.
 */
@property(nonatomic, copy, nullable) NSString *safe;

/**
 *  Specifies the search type: image.
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchSearchTypeImage custom image search (Value:
 *        "image")
 */
@property(nonatomic, copy, nullable) NSString *searchType;

/** Specifies all search results should be pages from a given site */
@property(nonatomic, copy, nullable) NSString *siteSearch;

/**
 *  Controls whether to include or exclude results from the site named in the
 *  as_sitesearch parameter
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchSiteSearchFilterE exclude (Value: "e")
 *    @arg @c kGTLRCustomsearchSiteSearchFilterI include (Value: "i")
 */
@property(nonatomic, copy, nullable) NSString *siteSearchFilter;

/** The sort expression to apply to the results */
@property(nonatomic, copy, nullable) NSString *sort;

/** The index of the first result to return */
@property(nonatomic, assign) NSUInteger start;

/**
 *  Fetches a @c GTLRCustomsearch_Search.
 *
 *  Returns metadata about the search performed, metadata about the custom
 *  search engine used for the search, and the search results.
 *
 *  @param q Query
 *
 *  @return GTLRCustomsearchQuery_CseList
 */
+ (instancetype)queryWithQ:(NSString *)q;

@end

/**
 *  Returns metadata about the search performed, metadata about the custom
 *  search engine used for the search, and the search results. Uses a small set
 *  of url patterns.
 *
 *  Method: search.cse.siterestrict.list
 */
@interface GTLRCustomsearchQuery_CseSiterestrictList : GTLRCustomsearchQuery
// Previous library name was
//   +[GTLQueryCustomsearch queryForCseSiterestrictListWithq:]

/** Turns off the translation between zh-CN and zh-TW. */
@property(nonatomic, copy, nullable) NSString *c2coff;

/** Country restrict(s). */
@property(nonatomic, copy, nullable) NSString *cr;

/** The custom search engine ID to scope this search query */
@property(nonatomic, copy, nullable) NSString *cx;

/** Specifies all search results are from a time period */
@property(nonatomic, copy, nullable) NSString *dateRestrict;

/**
 *  Identifies a phrase that all documents in the search results must contain
 */
@property(nonatomic, copy, nullable) NSString *exactTerms;

/**
 *  Identifies a word or phrase that should not appear in any documents in the
 *  search results
 */
@property(nonatomic, copy, nullable) NSString *excludeTerms;

/**
 *  Returns images of a specified type. Some of the allowed values are: bmp,
 *  gif, png, jpg, svg, pdf, ...
 */
@property(nonatomic, copy, nullable) NSString *fileType;

/**
 *  Controls turning on or off the duplicate content filter.
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchFilterX0 Turns off duplicate content filter.
 *        (Value: "0")
 *    @arg @c kGTLRCustomsearchFilterX1 Turns on duplicate content filter.
 *        (Value: "1")
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Geolocation of end user. */
@property(nonatomic, copy, nullable) NSString *gl;

/** The local Google domain to use to perform the search. */
@property(nonatomic, copy, nullable) NSString *googlehost;

/**
 *  Creates a range in form as_nlo value..as_nhi value and attempts to append it
 *  to query
 */
@property(nonatomic, copy, nullable) NSString *highRange;

/** Sets the user interface language. */
@property(nonatomic, copy, nullable) NSString *hl;

/** Appends the extra query terms to the query. */
@property(nonatomic, copy, nullable) NSString *hq;

/**
 *  Returns black and white, grayscale, or color images: mono, gray, and color.
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchImgColorTypeColor color (Value: "color")
 *    @arg @c kGTLRCustomsearchImgColorTypeGray gray (Value: "gray")
 *    @arg @c kGTLRCustomsearchImgColorTypeMono mono (Value: "mono")
 */
@property(nonatomic, copy, nullable) NSString *imgColorType;

/**
 *  Returns images of a specific dominant color: red, orange, yellow, green,
 *  teal, blue, purple, pink, white, gray, black and brown.
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchImgDominantColorBlack black (Value: "black")
 *    @arg @c kGTLRCustomsearchImgDominantColorBlue blue (Value: "blue")
 *    @arg @c kGTLRCustomsearchImgDominantColorBrown brown (Value: "brown")
 *    @arg @c kGTLRCustomsearchImgDominantColorGray gray (Value: "gray")
 *    @arg @c kGTLRCustomsearchImgDominantColorGreen green (Value: "green")
 *    @arg @c kGTLRCustomsearchImgDominantColorOrange orange (Value: "orange")
 *    @arg @c kGTLRCustomsearchImgDominantColorPink pink (Value: "pink")
 *    @arg @c kGTLRCustomsearchImgDominantColorPurple purple (Value: "purple")
 *    @arg @c kGTLRCustomsearchImgDominantColorRed red (Value: "red")
 *    @arg @c kGTLRCustomsearchImgDominantColorTeal teal (Value: "teal")
 *    @arg @c kGTLRCustomsearchImgDominantColorWhite white (Value: "white")
 *    @arg @c kGTLRCustomsearchImgDominantColorYellow yellow (Value: "yellow")
 */
@property(nonatomic, copy, nullable) NSString *imgDominantColor;

/**
 *  Returns images of a specified size, where size can be one of: icon, small,
 *  medium, large, xlarge, xxlarge, and huge.
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchImgSizeHuge huge (Value: "huge")
 *    @arg @c kGTLRCustomsearchImgSizeIcon icon (Value: "icon")
 *    @arg @c kGTLRCustomsearchImgSizeLarge large (Value: "large")
 *    @arg @c kGTLRCustomsearchImgSizeMedium medium (Value: "medium")
 *    @arg @c kGTLRCustomsearchImgSizeSmall small (Value: "small")
 *    @arg @c kGTLRCustomsearchImgSizeXlarge xlarge (Value: "xlarge")
 *    @arg @c kGTLRCustomsearchImgSizeXxlarge xxlarge (Value: "xxlarge")
 */
@property(nonatomic, copy, nullable) NSString *imgSize;

/**
 *  Returns images of a type, which can be one of: clipart, face, lineart, news,
 *  and photo.
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchImgTypeClipart clipart (Value: "clipart")
 *    @arg @c kGTLRCustomsearchImgTypeFace face (Value: "face")
 *    @arg @c kGTLRCustomsearchImgTypeLineart lineart (Value: "lineart")
 *    @arg @c kGTLRCustomsearchImgTypeNews news (Value: "news")
 *    @arg @c kGTLRCustomsearchImgTypePhoto photo (Value: "photo")
 */
@property(nonatomic, copy, nullable) NSString *imgType;

/**
 *  Specifies that all search results should contain a link to a particular URL
 */
@property(nonatomic, copy, nullable) NSString *linkSite;

/**
 *  Creates a range in form as_nlo value..as_nhi value and attempts to append it
 *  to query
 */
@property(nonatomic, copy, nullable) NSString *lowRange;

/**
 *  The language restriction for the search results
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchLrLangAr Arabic (Value: "lang_ar")
 *    @arg @c kGTLRCustomsearchLrLangBg Bulgarian (Value: "lang_bg")
 *    @arg @c kGTLRCustomsearchLrLangCa Catalan (Value: "lang_ca")
 *    @arg @c kGTLRCustomsearchLrLangCs Czech (Value: "lang_cs")
 *    @arg @c kGTLRCustomsearchLrLangDa Danish (Value: "lang_da")
 *    @arg @c kGTLRCustomsearchLrLangDe German (Value: "lang_de")
 *    @arg @c kGTLRCustomsearchLrLangEl Greek (Value: "lang_el")
 *    @arg @c kGTLRCustomsearchLrLangEn English (Value: "lang_en")
 *    @arg @c kGTLRCustomsearchLrLangEs Spanish (Value: "lang_es")
 *    @arg @c kGTLRCustomsearchLrLangEt Estonian (Value: "lang_et")
 *    @arg @c kGTLRCustomsearchLrLangFi Finnish (Value: "lang_fi")
 *    @arg @c kGTLRCustomsearchLrLangFr French (Value: "lang_fr")
 *    @arg @c kGTLRCustomsearchLrLangHr Croatian (Value: "lang_hr")
 *    @arg @c kGTLRCustomsearchLrLangHu Hungarian (Value: "lang_hu")
 *    @arg @c kGTLRCustomsearchLrLangId Indonesian (Value: "lang_id")
 *    @arg @c kGTLRCustomsearchLrLangIs Icelandic (Value: "lang_is")
 *    @arg @c kGTLRCustomsearchLrLangIt Italian (Value: "lang_it")
 *    @arg @c kGTLRCustomsearchLrLangIw Hebrew (Value: "lang_iw")
 *    @arg @c kGTLRCustomsearchLrLangJa Japanese (Value: "lang_ja")
 *    @arg @c kGTLRCustomsearchLrLangKo Korean (Value: "lang_ko")
 *    @arg @c kGTLRCustomsearchLrLangLt Lithuanian (Value: "lang_lt")
 *    @arg @c kGTLRCustomsearchLrLangLv Latvian (Value: "lang_lv")
 *    @arg @c kGTLRCustomsearchLrLangNl Dutch (Value: "lang_nl")
 *    @arg @c kGTLRCustomsearchLrLangNo Norwegian (Value: "lang_no")
 *    @arg @c kGTLRCustomsearchLrLangPl Polish (Value: "lang_pl")
 *    @arg @c kGTLRCustomsearchLrLangPt Portuguese (Value: "lang_pt")
 *    @arg @c kGTLRCustomsearchLrLangRo Romanian (Value: "lang_ro")
 *    @arg @c kGTLRCustomsearchLrLangRu Russian (Value: "lang_ru")
 *    @arg @c kGTLRCustomsearchLrLangSk Slovak (Value: "lang_sk")
 *    @arg @c kGTLRCustomsearchLrLangSl Slovenian (Value: "lang_sl")
 *    @arg @c kGTLRCustomsearchLrLangSr Serbian (Value: "lang_sr")
 *    @arg @c kGTLRCustomsearchLrLangSv Swedish (Value: "lang_sv")
 *    @arg @c kGTLRCustomsearchLrLangTr Turkish (Value: "lang_tr")
 *    @arg @c kGTLRCustomsearchLrLangZhCN Chinese (Simplified) (Value:
 *        "lang_zh-CN")
 *    @arg @c kGTLRCustomsearchLrLangZhTW Chinese (Traditional) (Value:
 *        "lang_zh-TW")
 */
@property(nonatomic, copy, nullable) NSString *lr;

/**
 *  Number of search results to return
 *
 *  @note If not set, the documented server-side default will be 10.
 */
@property(nonatomic, assign) NSUInteger num;

/**
 *  Provides additional search terms to check for in a document, where each
 *  document in the search results must contain at least one of the additional
 *  search terms
 */
@property(nonatomic, copy, nullable) NSString *orTerms;

/** Query */
@property(nonatomic, copy, nullable) NSString *q;

/**
 *  Specifies that all search results should be pages that are related to the
 *  specified URL
 */
@property(nonatomic, copy, nullable) NSString *relatedSite;

/**
 *  Filters based on licensing. Supported values include: cc_publicdomain,
 *  cc_attribute, cc_sharealike, cc_noncommercial, cc_nonderived and
 *  combinations of these.
 */
@property(nonatomic, copy, nullable) NSString *rights;

/**
 *  Search safety level
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchSafeHigh Enables highest level of safe search
 *        filtering. (Value: "high")
 *    @arg @c kGTLRCustomsearchSafeMedium Enables moderate safe search
 *        filtering. (Value: "medium")
 *    @arg @c kGTLRCustomsearchSafeOff Disables safe search filtering. (Value:
 *        "off")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRCustomsearchSafeOff.
 */
@property(nonatomic, copy, nullable) NSString *safe;

/**
 *  Specifies the search type: image.
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchSearchTypeImage custom image search (Value:
 *        "image")
 */
@property(nonatomic, copy, nullable) NSString *searchType;

/** Specifies all search results should be pages from a given site */
@property(nonatomic, copy, nullable) NSString *siteSearch;

/**
 *  Controls whether to include or exclude results from the site named in the
 *  as_sitesearch parameter
 *
 *  Likely values:
 *    @arg @c kGTLRCustomsearchSiteSearchFilterE exclude (Value: "e")
 *    @arg @c kGTLRCustomsearchSiteSearchFilterI include (Value: "i")
 */
@property(nonatomic, copy, nullable) NSString *siteSearchFilter;

/** The sort expression to apply to the results */
@property(nonatomic, copy, nullable) NSString *sort;

/** The index of the first result to return */
@property(nonatomic, assign) NSUInteger start;

/**
 *  Fetches a @c GTLRCustomsearch_Search.
 *
 *  Returns metadata about the search performed, metadata about the custom
 *  search engine used for the search, and the search results. Uses a small set
 *  of url patterns.
 *
 *  @param q Query
 *
 *  @return GTLRCustomsearchQuery_CseSiterestrictList
 */
+ (instancetype)queryWithQ:(NSString *)q;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
