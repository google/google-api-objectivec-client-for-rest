// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Connectors API (connectors/v1)
// Description:
//   Enables users to create and manage connections to Google Cloud services and
//   third-party business applications using the Connectors interface.
// Documentation:
//   https://cloud.google.com/apigee/docs/api-platform/connectors/about-connectors

#import "GTLRConnectorsQuery.h"

#import "GTLRConnectorsObjects.h"

// ----------------------------------------------------------------------------
// Constants

// view
NSString * const kGTLRConnectorsViewBasic                      = @"BASIC";
NSString * const kGTLRConnectorsViewConnectionViewUnspecified  = @"CONNECTION_VIEW_UNSPECIFIED";
NSString * const kGTLRConnectorsViewConnectorVersionViewBasic  = @"CONNECTOR_VERSION_VIEW_BASIC";
NSString * const kGTLRConnectorsViewConnectorVersionViewFull   = @"CONNECTOR_VERSION_VIEW_FULL";
NSString * const kGTLRConnectorsViewConnectorVersionViewUnspecified = @"CONNECTOR_VERSION_VIEW_UNSPECIFIED";
NSString * const kGTLRConnectorsViewFull                       = @"FULL";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRConnectorsQuery

@dynamic fields;

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsCreate

@dynamic connectionId, parent;

+ (instancetype)queryWithObject:(GTLRConnectors_Connection *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/connections";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRConnectors_Operation class];
  query.loggingName = @"connectors.projects.locations.connections.create";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_Operation class];
  query.loggingName = @"connectors.projects.locations.connections.delete";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsGet

@dynamic name, view;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_Connection class];
  query.loggingName = @"connectors.projects.locations.connections.get";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsGetConnectionSchemaMetadata

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsGetConnectionSchemaMetadata *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_ConnectionSchemaMetadata class];
  query.loggingName = @"connectors.projects.locations.connections.getConnectionSchemaMetadata";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRConnectors_Policy class];
  query.loggingName = @"connectors.projects.locations.connections.getIamPolicy";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsList

@dynamic filter, orderBy, pageSize, pageToken, parent, view;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/connections";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRConnectors_ListConnectionsResponse class];
  query.loggingName = @"connectors.projects.locations.connections.list";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRConnectors_Connection *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_Operation class];
  query.loggingName = @"connectors.projects.locations.connections.patch";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsRuntimeActionSchemasList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/runtimeActionSchemas";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsRuntimeActionSchemasList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRConnectors_ListRuntimeActionSchemasResponse class];
  query.loggingName = @"connectors.projects.locations.connections.runtimeActionSchemas.list";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsRuntimeEntitySchemasList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/runtimeEntitySchemas";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsRuntimeEntitySchemasList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRConnectors_ListRuntimeEntitySchemasResponse class];
  query.loggingName = @"connectors.projects.locations.connections.runtimeEntitySchemas.list";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRConnectors_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRConnectors_Policy class];
  query.loggingName = @"connectors.projects.locations.connections.setIamPolicy";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRConnectors_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRConnectors_TestIamPermissionsResponse class];
  query.loggingName = @"connectors.projects.locations.connections.testIamPermissions";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConnectorsQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_Location class];
  query.loggingName = @"connectors.projects.locations.get";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsGetRuntimeConfig

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConnectorsQuery_ProjectsLocationsGetRuntimeConfig *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_RuntimeConfig class];
  query.loggingName = @"connectors.projects.locations.getRuntimeConfig";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsGlobalProvidersConnectorsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConnectorsQuery_ProjectsLocationsGlobalProvidersConnectorsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_Connector class];
  query.loggingName = @"connectors.projects.locations.global.providers.connectors.get";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsGlobalProvidersConnectorsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/connectors";
  GTLRConnectorsQuery_ProjectsLocationsGlobalProvidersConnectorsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRConnectors_ListConnectorsResponse class];
  query.loggingName = @"connectors.projects.locations.global.providers.connectors.list";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsGlobalProvidersConnectorsVersionsGet

@dynamic name, view;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConnectorsQuery_ProjectsLocationsGlobalProvidersConnectorsVersionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_ConnectorVersion class];
  query.loggingName = @"connectors.projects.locations.global.providers.connectors.versions.get";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsGlobalProvidersConnectorsVersionsList

@dynamic pageSize, pageToken, parent, view;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/versions";
  GTLRConnectorsQuery_ProjectsLocationsGlobalProvidersConnectorsVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRConnectors_ListConnectorVersionsResponse class];
  query.loggingName = @"connectors.projects.locations.global.providers.connectors.versions.list";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsGlobalProvidersGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConnectorsQuery_ProjectsLocationsGlobalProvidersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_Provider class];
  query.loggingName = @"connectors.projects.locations.global.providers.get";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsGlobalProvidersList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/providers";
  GTLRConnectorsQuery_ProjectsLocationsGlobalProvidersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRConnectors_ListProvidersResponse class];
  query.loggingName = @"connectors.projects.locations.global.providers.list";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRConnectorsQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_ListLocationsResponse class];
  query.loggingName = @"connectors.projects.locations.list";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRConnectors_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRConnectorsQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_Empty class];
  query.loggingName = @"connectors.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConnectorsQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_Empty class];
  query.loggingName = @"connectors.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConnectorsQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_Operation class];
  query.loggingName = @"connectors.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRConnectorsQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_ListOperationsResponse class];
  query.loggingName = @"connectors.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsProvidersGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRConnectorsQuery_ProjectsLocationsProvidersGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRConnectors_Policy class];
  query.loggingName = @"connectors.projects.locations.providers.getIamPolicy";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsProvidersSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRConnectors_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRConnectorsQuery_ProjectsLocationsProvidersSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRConnectors_Policy class];
  query.loggingName = @"connectors.projects.locations.providers.setIamPolicy";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsProvidersTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRConnectors_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRConnectorsQuery_ProjectsLocationsProvidersTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRConnectors_TestIamPermissionsResponse class];
  query.loggingName = @"connectors.projects.locations.providers.testIamPermissions";
  return query;
}

@end
