// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google+ Domains API (plusDomains/v1)
// Description:
//   Builds on top of the Google+ platform for Google Apps Domains.
// Documentation:
//   https://developers.google.com/+/domains/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRPlusDomains_Activity;
@class GTLRPlusDomains_Circle;
@class GTLRPlusDomains_Comment;
@class GTLRPlusDomains_Media;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// collection

/**
 *  The list of people who this user has added to one or more circles.
 *
 *  Value: "circled"
 */
GTLR_EXTERN NSString * const kGTLRPlusDomainsCollectionCircled;
/**
 *  Upload the media to share on Google+.
 *
 *  Value: "cloud"
 */
GTLR_EXTERN NSString * const kGTLRPlusDomainsCollectionCloud;
/**
 *  List all people who have +1'd this activity.
 *
 *  Value: "plusoners"
 */
GTLR_EXTERN NSString * const kGTLRPlusDomainsCollectionPlusoners;
/**
 *  List all people who have reshared this activity.
 *
 *  Value: "resharers"
 */
GTLR_EXTERN NSString * const kGTLRPlusDomainsCollectionResharers;
/**
 *  List all people who this activity was shared to.
 *
 *  Value: "sharedto"
 */
GTLR_EXTERN NSString * const kGTLRPlusDomainsCollectionSharedto;
/**
 *  All activities created by the specified user that the authenticated user is
 *  authorized to view.
 *
 *  Value: "user"
 */
GTLR_EXTERN NSString * const kGTLRPlusDomainsCollectionUser;

// ----------------------------------------------------------------------------
// orderBy

/**
 *  Order the people by their display name.
 *
 *  Value: "alphabetical"
 */
GTLR_EXTERN NSString * const kGTLRPlusDomainsOrderByAlphabetical;
/**
 *  Order people based on the relevence to the viewer.
 *
 *  Value: "best"
 */
GTLR_EXTERN NSString * const kGTLRPlusDomainsOrderByBest;

// ----------------------------------------------------------------------------
// sortOrder

/**
 *  Sort oldest comments first.
 *
 *  Value: "ascending"
 */
GTLR_EXTERN NSString * const kGTLRPlusDomainsSortOrderAscending;
/**
 *  Sort newest comments first.
 *
 *  Value: "descending"
 */
GTLR_EXTERN NSString * const kGTLRPlusDomainsSortOrderDescending;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other PlusDomains query classes.
 */
@interface GTLRPlusDomainsQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Get an activity.
 *
 *  Method: plusDomains.activities.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 *    @c kGTLRAuthScopePlusDomainsPlusMe
 *    @c kGTLRAuthScopePlusDomainsPlusStreamRead
 */
@interface GTLRPlusDomainsQuery_ActivitiesGet : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForActivitiesGetWithactivityId:]

/** The ID of the activity to get. */
@property(nonatomic, copy, nullable) NSString *activityId;

/**
 *  Fetches a @c GTLRPlusDomains_Activity.
 *
 *  Get an activity.
 *
 *  @param activityId The ID of the activity to get.
 *
 *  @return GTLRPlusDomainsQuery_ActivitiesGet
 */
+ (instancetype)queryWithActivityId:(NSString *)activityId;

@end

/**
 *  Create a new activity for the authenticated user.
 *
 *  Method: plusDomains.activities.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 *    @c kGTLRAuthScopePlusDomainsPlusMe
 *    @c kGTLRAuthScopePlusDomainsPlusStreamWrite
 */
@interface GTLRPlusDomainsQuery_ActivitiesInsert : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForActivitiesInsertWithObject:userId:]

/**
 *  If "true", extract the potential media attachments for a URL. The response
 *  will include all possible attachments for a URL, including video, photos,
 *  and articles based on the content of the page.
 */
@property(nonatomic, assign) BOOL preview;

/**
 *  The ID of the user to create the activity on behalf of. Its value should be
 *  "me", to indicate the authenticated user.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRPlusDomains_Activity.
 *
 *  Create a new activity for the authenticated user.
 *
 *  @param object The @c GTLRPlusDomains_Activity to include in the query.
 *  @param userId The ID of the user to create the activity on behalf of. Its
 *    value should be "me", to indicate the authenticated user.
 *
 *  @return GTLRPlusDomainsQuery_ActivitiesInsert
 */
+ (instancetype)queryWithObject:(GTLRPlusDomains_Activity *)object
                         userId:(NSString *)userId;

@end

/**
 *  List all of the activities in the specified collection for a particular
 *  user.
 *
 *  Method: plusDomains.activities.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 *    @c kGTLRAuthScopePlusDomainsPlusMe
 *    @c kGTLRAuthScopePlusDomainsPlusStreamRead
 */
@interface GTLRPlusDomainsQuery_ActivitiesList : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForActivitiesListWithuserId:collection:]

/**
 *  The collection of activities to list.
 *
 *  Likely values:
 *    @arg @c kGTLRPlusDomainsCollectionUser All activities created by the
 *        specified user that the authenticated user is authorized to view.
 *        (Value: "user")
 */
@property(nonatomic, copy, nullable) NSString *collection;

/**
 *  The maximum number of activities to include in the response, which is used
 *  for paging. For any response, the actual number returned might be less than
 *  the specified maxResults.
 *
 *  @note If not set, the documented server-side default will be 20 (from the
 *        range 1..100).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The continuation token, which is used to page through large result sets. To
 *  get the next page of results, set this parameter to the value of
 *  "nextPageToken" from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The ID of the user to get activities for. The special value "me" can be used
 *  to indicate the authenticated user.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRPlusDomains_ActivityFeed.
 *
 *  List all of the activities in the specified collection for a particular
 *  user.
 *
 *  @param userId The ID of the user to get activities for. The special value
 *    "me" can be used to indicate the authenticated user.
 *  @param collection The collection of activities to list.
 *
 *  Likely values for @c collection:
 *    @arg @c kGTLRPlusDomainsCollectionUser All activities created by the
 *        specified user that the authenticated user is authorized to view.
 *        (Value: "user")
 *
 *  @return GTLRPlusDomainsQuery_ActivitiesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     collection:(NSString *)collection;

@end

/**
 *  List all of the audiences to which a user can share.
 *
 *  Method: plusDomains.audiences.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusCirclesRead
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 *    @c kGTLRAuthScopePlusDomainsPlusMe
 */
@interface GTLRPlusDomainsQuery_AudiencesList : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForAudiencesListWithuserId:]

/**
 *  The maximum number of circles to include in the response, which is used for
 *  paging. For any response, the actual number returned might be less than the
 *  specified maxResults.
 *
 *  @note If not set, the documented server-side default will be 20 (from the
 *        range 1..100).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The continuation token, which is used to page through large result sets. To
 *  get the next page of results, set this parameter to the value of
 *  "nextPageToken" from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The ID of the user to get audiences for. The special value "me" can be used
 *  to indicate the authenticated user.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRPlusDomains_AudiencesFeed.
 *
 *  List all of the audiences to which a user can share.
 *
 *  @param userId The ID of the user to get audiences for. The special value
 *    "me" can be used to indicate the authenticated user.
 *
 *  @return GTLRPlusDomainsQuery_AudiencesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Add a person to a circle. Google+ limits certain circle operations,
 *  including the number of circle adds. Learn More.
 *
 *  Method: plusDomains.circles.addPeople
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusCirclesWrite
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 */
@interface GTLRPlusDomainsQuery_CirclesAddPeople : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForCirclesAddPeopleWithcircleId:]

/** The ID of the circle to add the person to. */
@property(nonatomic, copy, nullable) NSString *circleId;

/** Email of the people to add to the circle. Optional, can be repeated. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *email;

/** IDs of the people to add to the circle. Optional, can be repeated. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *userId;

/**
 *  Fetches a @c GTLRPlusDomains_Circle.
 *
 *  Add a person to a circle. Google+ limits certain circle operations,
 *  including the number of circle adds. Learn More.
 *
 *  @param circleId The ID of the circle to add the person to.
 *
 *  @return GTLRPlusDomainsQuery_CirclesAddPeople
 */
+ (instancetype)queryWithCircleId:(NSString *)circleId;

@end

/**
 *  Get a circle.
 *
 *  Method: plusDomains.circles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusCirclesRead
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 */
@interface GTLRPlusDomainsQuery_CirclesGet : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForCirclesGetWithcircleId:]

/** The ID of the circle to get. */
@property(nonatomic, copy, nullable) NSString *circleId;

/**
 *  Fetches a @c GTLRPlusDomains_Circle.
 *
 *  Get a circle.
 *
 *  @param circleId The ID of the circle to get.
 *
 *  @return GTLRPlusDomainsQuery_CirclesGet
 */
+ (instancetype)queryWithCircleId:(NSString *)circleId;

@end

/**
 *  Create a new circle for the authenticated user.
 *
 *  Method: plusDomains.circles.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusCirclesWrite
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 *    @c kGTLRAuthScopePlusDomainsPlusMe
 */
@interface GTLRPlusDomainsQuery_CirclesInsert : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForCirclesInsertWithObject:userId:]

/**
 *  The ID of the user to create the circle on behalf of. The value "me" can be
 *  used to indicate the authenticated user.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRPlusDomains_Circle.
 *
 *  Create a new circle for the authenticated user.
 *
 *  @param object The @c GTLRPlusDomains_Circle to include in the query.
 *  @param userId The ID of the user to create the circle on behalf of. The
 *    value "me" can be used to indicate the authenticated user.
 *
 *  @return GTLRPlusDomainsQuery_CirclesInsert
 */
+ (instancetype)queryWithObject:(GTLRPlusDomains_Circle *)object
                         userId:(NSString *)userId;

@end

/**
 *  List all of the circles for a user.
 *
 *  Method: plusDomains.circles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusCirclesRead
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 *    @c kGTLRAuthScopePlusDomainsPlusMe
 */
@interface GTLRPlusDomainsQuery_CirclesList : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForCirclesListWithuserId:]

/**
 *  The maximum number of circles to include in the response, which is used for
 *  paging. For any response, the actual number returned might be less than the
 *  specified maxResults.
 *
 *  @note If not set, the documented server-side default will be 20 (from the
 *        range 1..100).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The continuation token, which is used to page through large result sets. To
 *  get the next page of results, set this parameter to the value of
 *  "nextPageToken" from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The ID of the user to get circles for. The special value "me" can be used to
 *  indicate the authenticated user.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRPlusDomains_CircleFeed.
 *
 *  List all of the circles for a user.
 *
 *  @param userId The ID of the user to get circles for. The special value "me"
 *    can be used to indicate the authenticated user.
 *
 *  @return GTLRPlusDomainsQuery_CirclesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Update a circle's description. This method supports patch semantics.
 *
 *  Method: plusDomains.circles.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusCirclesWrite
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 */
@interface GTLRPlusDomainsQuery_CirclesPatch : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForCirclesPatchWithObject:circleId:]

/** The ID of the circle to update. */
@property(nonatomic, copy, nullable) NSString *circleId;

/**
 *  Fetches a @c GTLRPlusDomains_Circle.
 *
 *  Update a circle's description. This method supports patch semantics.
 *
 *  @param object The @c GTLRPlusDomains_Circle to include in the query.
 *  @param circleId The ID of the circle to update.
 *
 *  @return GTLRPlusDomainsQuery_CirclesPatch
 */
+ (instancetype)queryWithObject:(GTLRPlusDomains_Circle *)object
                       circleId:(NSString *)circleId;

@end

/**
 *  Delete a circle.
 *
 *  Method: plusDomains.circles.remove
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusCirclesWrite
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 */
@interface GTLRPlusDomainsQuery_CirclesRemove : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForCirclesRemoveWithcircleId:]

/** The ID of the circle to delete. */
@property(nonatomic, copy, nullable) NSString *circleId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Delete a circle.
 *
 *  @param circleId The ID of the circle to delete.
 *
 *  @return GTLRPlusDomainsQuery_CirclesRemove
 */
+ (instancetype)queryWithCircleId:(NSString *)circleId;

@end

/**
 *  Remove a person from a circle.
 *
 *  Method: plusDomains.circles.removePeople
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusCirclesWrite
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 */
@interface GTLRPlusDomainsQuery_CirclesRemovePeople : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForCirclesRemovePeopleWithcircleId:]

/** The ID of the circle to remove the person from. */
@property(nonatomic, copy, nullable) NSString *circleId;

/** Email of the people to add to the circle. Optional, can be repeated. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *email;

/** IDs of the people to remove from the circle. Optional, can be repeated. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Remove a person from a circle.
 *
 *  @param circleId The ID of the circle to remove the person from.
 *
 *  @return GTLRPlusDomainsQuery_CirclesRemovePeople
 */
+ (instancetype)queryWithCircleId:(NSString *)circleId;

@end

/**
 *  Update a circle's description.
 *
 *  Method: plusDomains.circles.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusCirclesWrite
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 */
@interface GTLRPlusDomainsQuery_CirclesUpdate : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForCirclesUpdateWithObject:circleId:]

/** The ID of the circle to update. */
@property(nonatomic, copy, nullable) NSString *circleId;

/**
 *  Fetches a @c GTLRPlusDomains_Circle.
 *
 *  Update a circle's description.
 *
 *  @param object The @c GTLRPlusDomains_Circle to include in the query.
 *  @param circleId The ID of the circle to update.
 *
 *  @return GTLRPlusDomainsQuery_CirclesUpdate
 */
+ (instancetype)queryWithObject:(GTLRPlusDomains_Circle *)object
                       circleId:(NSString *)circleId;

@end

/**
 *  Get a comment.
 *
 *  Method: plusDomains.comments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 *    @c kGTLRAuthScopePlusDomainsPlusStreamRead
 */
@interface GTLRPlusDomainsQuery_CommentsGet : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForCommentsGetWithcommentId:]

/** The ID of the comment to get. */
@property(nonatomic, copy, nullable) NSString *commentId;

/**
 *  Fetches a @c GTLRPlusDomains_Comment.
 *
 *  Get a comment.
 *
 *  @param commentId The ID of the comment to get.
 *
 *  @return GTLRPlusDomainsQuery_CommentsGet
 */
+ (instancetype)queryWithCommentId:(NSString *)commentId;

@end

/**
 *  Create a new comment in reply to an activity.
 *
 *  Method: plusDomains.comments.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 *    @c kGTLRAuthScopePlusDomainsPlusStreamWrite
 */
@interface GTLRPlusDomainsQuery_CommentsInsert : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForCommentsInsertWithObject:activityId:]

/** The ID of the activity to reply to. */
@property(nonatomic, copy, nullable) NSString *activityId;

/**
 *  Fetches a @c GTLRPlusDomains_Comment.
 *
 *  Create a new comment in reply to an activity.
 *
 *  @param object The @c GTLRPlusDomains_Comment to include in the query.
 *  @param activityId The ID of the activity to reply to.
 *
 *  @return GTLRPlusDomainsQuery_CommentsInsert
 */
+ (instancetype)queryWithObject:(GTLRPlusDomains_Comment *)object
                     activityId:(NSString *)activityId;

@end

/**
 *  List all of the comments for an activity.
 *
 *  Method: plusDomains.comments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 *    @c kGTLRAuthScopePlusDomainsPlusStreamRead
 */
@interface GTLRPlusDomainsQuery_CommentsList : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForCommentsListWithactivityId:]

/** The ID of the activity to get comments for. */
@property(nonatomic, copy, nullable) NSString *activityId;

/**
 *  The maximum number of comments to include in the response, which is used for
 *  paging. For any response, the actual number returned might be less than the
 *  specified maxResults.
 *
 *  @note If not set, the documented server-side default will be 20 (from the
 *        range 0..500).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The continuation token, which is used to page through large result sets. To
 *  get the next page of results, set this parameter to the value of
 *  "nextPageToken" from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The order in which to sort the list of comments.
 *
 *  Likely values:
 *    @arg @c kGTLRPlusDomainsSortOrderAscending Sort oldest comments first.
 *        (Value: "ascending")
 *    @arg @c kGTLRPlusDomainsSortOrderDescending Sort newest comments first.
 *        (Value: "descending")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRPlusDomainsSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRPlusDomains_CommentFeed.
 *
 *  List all of the comments for an activity.
 *
 *  @param activityId The ID of the activity to get comments for.
 *
 *  @return GTLRPlusDomainsQuery_CommentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithActivityId:(NSString *)activityId;

@end

/**
 *  Add a new media item to an album. The current upload size limitations are
 *  36MB for a photo and 1GB for a video. Uploads do not count against quota if
 *  photos are less than 2048 pixels on their longest side or videos are less
 *  than 15 minutes in length.
 *
 *  Method: plusDomains.media.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 *    @c kGTLRAuthScopePlusDomainsPlusMe
 *    @c kGTLRAuthScopePlusDomainsPlusMediaUpload
 */
@interface GTLRPlusDomainsQuery_MediaInsert : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForMediaInsertWithObject:userId:collection:]

/**
 *  collection
 *
 *  Likely values:
 *    @arg @c kGTLRPlusDomainsCollectionCloud Upload the media to share on
 *        Google+. (Value: "cloud")
 */
@property(nonatomic, copy, nullable) NSString *collection;

/** The ID of the user to create the activity on behalf of. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRPlusDomains_Media.
 *
 *  Add a new media item to an album. The current upload size limitations are
 *  36MB for a photo and 1GB for a video. Uploads do not count against quota if
 *  photos are less than 2048 pixels on their longest side or videos are less
 *  than 15 minutes in length.
 *
 *  @param object The @c GTLRPlusDomains_Media to include in the query.
 *  @param userId The ID of the user to create the activity on behalf of.
 *  @param collection NSString
 *
 *  Likely values for @c collection:
 *    @arg @c kGTLRPlusDomainsCollectionCloud Upload the media to share on
 *        Google+. (Value: "cloud")
 *  @param uploadParameters The media to include in this query. Accepted MIME
 *    types: image/ *, video/ *
 *
 *  @return GTLRPlusDomainsQuery_MediaInsert
 */
+ (instancetype)queryWithObject:(GTLRPlusDomains_Media *)object
                         userId:(NSString *)userId
                     collection:(NSString *)collection
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Get a person's profile.
 *
 *  Method: plusDomains.people.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 *    @c kGTLRAuthScopePlusDomainsPlusMe
 *    @c kGTLRAuthScopePlusDomainsPlusProfilesRead
 *    @c kGTLRAuthScopePlusDomainsUserinfoEmail
 *    @c kGTLRAuthScopePlusDomainsUserinfoProfile
 */
@interface GTLRPlusDomainsQuery_PeopleGet : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForPeopleGetWithuserId:]

/**
 *  The ID of the person to get the profile for. The special value "me" can be
 *  used to indicate the authenticated user.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRPlusDomains_Person.
 *
 *  Get a person's profile.
 *
 *  @param userId The ID of the person to get the profile for. The special value
 *    "me" can be used to indicate the authenticated user.
 *
 *  @return GTLRPlusDomainsQuery_PeopleGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  List all of the people in the specified collection.
 *
 *  Method: plusDomains.people.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusCirclesRead
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 *    @c kGTLRAuthScopePlusDomainsPlusMe
 */
@interface GTLRPlusDomainsQuery_PeopleList : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForPeopleListWithuserId:collection:]

/**
 *  The collection of people to list.
 *
 *  Likely values:
 *    @arg @c kGTLRPlusDomainsCollectionCircled The list of people who this user
 *        has added to one or more circles. (Value: "circled")
 */
@property(nonatomic, copy, nullable) NSString *collection;

/**
 *  The maximum number of people to include in the response, which is used for
 *  paging. For any response, the actual number returned might be less than the
 *  specified maxResults.
 *
 *  @note If not set, the documented server-side default will be 100 (from the
 *        range 1..100).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The order to return people in.
 *
 *  Likely values:
 *    @arg @c kGTLRPlusDomainsOrderByAlphabetical Order the people by their
 *        display name. (Value: "alphabetical")
 *    @arg @c kGTLRPlusDomainsOrderByBest Order people based on the relevence to
 *        the viewer. (Value: "best")
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The continuation token, which is used to page through large result sets. To
 *  get the next page of results, set this parameter to the value of
 *  "nextPageToken" from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Get the collection of people for the person identified. Use "me" to indicate
 *  the authenticated user.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRPlusDomains_PeopleFeed.
 *
 *  List all of the people in the specified collection.
 *
 *  @param userId Get the collection of people for the person identified. Use
 *    "me" to indicate the authenticated user.
 *  @param collection The collection of people to list.
 *
 *  Likely values for @c collection:
 *    @arg @c kGTLRPlusDomainsCollectionCircled The list of people who this user
 *        has added to one or more circles. (Value: "circled")
 *
 *  @return GTLRPlusDomainsQuery_PeopleList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     collection:(NSString *)collection;

@end

/**
 *  List all of the people in the specified collection for a particular
 *  activity.
 *
 *  Method: plusDomains.people.listByActivity
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 *    @c kGTLRAuthScopePlusDomainsPlusStreamRead
 */
@interface GTLRPlusDomainsQuery_PeopleListByActivity : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForPeopleListByActivityWithactivityId:collection:]

/** The ID of the activity to get the list of people for. */
@property(nonatomic, copy, nullable) NSString *activityId;

/**
 *  The collection of people to list.
 *
 *  Likely values:
 *    @arg @c kGTLRPlusDomainsCollectionPlusoners List all people who have +1'd
 *        this activity. (Value: "plusoners")
 *    @arg @c kGTLRPlusDomainsCollectionResharers List all people who have
 *        reshared this activity. (Value: "resharers")
 *    @arg @c kGTLRPlusDomainsCollectionSharedto List all people who this
 *        activity was shared to. (Value: "sharedto")
 */
@property(nonatomic, copy, nullable) NSString *collection;

/**
 *  The maximum number of people to include in the response, which is used for
 *  paging. For any response, the actual number returned might be less than the
 *  specified maxResults.
 *
 *  @note If not set, the documented server-side default will be 20 (from the
 *        range 1..100).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The continuation token, which is used to page through large result sets. To
 *  get the next page of results, set this parameter to the value of
 *  "nextPageToken" from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRPlusDomains_PeopleFeed.
 *
 *  List all of the people in the specified collection for a particular
 *  activity.
 *
 *  @param activityId The ID of the activity to get the list of people for.
 *  @param collection The collection of people to list.
 *
 *  Likely values for @c collection:
 *    @arg @c kGTLRPlusDomainsCollectionPlusoners List all people who have +1'd
 *        this activity. (Value: "plusoners")
 *    @arg @c kGTLRPlusDomainsCollectionResharers List all people who have
 *        reshared this activity. (Value: "resharers")
 *    @arg @c kGTLRPlusDomainsCollectionSharedto List all people who this
 *        activity was shared to. (Value: "sharedto")
 *
 *  @return GTLRPlusDomainsQuery_PeopleListByActivity
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithActivityId:(NSString *)activityId
                         collection:(NSString *)collection;

@end

/**
 *  List all of the people who are members of a circle.
 *
 *  Method: plusDomains.people.listByCircle
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusDomainsPlusCirclesRead
 *    @c kGTLRAuthScopePlusDomainsPlusLogin
 */
@interface GTLRPlusDomainsQuery_PeopleListByCircle : GTLRPlusDomainsQuery
// Previous library name was
//   +[GTLQueryPlusDomains queryForPeopleListByCircleWithcircleId:]

/** The ID of the circle to get the members of. */
@property(nonatomic, copy, nullable) NSString *circleId;

/**
 *  The maximum number of people to include in the response, which is used for
 *  paging. For any response, the actual number returned might be less than the
 *  specified maxResults.
 *
 *  @note If not set, the documented server-side default will be 20 (from the
 *        range 1..100).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The continuation token, which is used to page through large result sets. To
 *  get the next page of results, set this parameter to the value of
 *  "nextPageToken" from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRPlusDomains_PeopleFeed.
 *
 *  List all of the people who are members of a circle.
 *
 *  @param circleId The ID of the circle to get the members of.
 *
 *  @return GTLRPlusDomainsQuery_PeopleListByCircle
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCircleId:(NSString *)circleId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
