// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play EMM API (androidenterprise/v1)
// Description:
//   Manages the deployment of apps to Android for Work users.
// Documentation:
//   https://developers.google.com/android/work/play/emm-api

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAndroidEnterprise_AdministratorWebTokenSpec;
@class GTLRAndroidEnterprise_AndroidDevicePolicyConfig;
@class GTLRAndroidEnterprise_Device;
@class GTLRAndroidEnterprise_DeviceState;
@class GTLRAndroidEnterprise_Enterprise;
@class GTLRAndroidEnterprise_EnterpriseAccount;
@class GTLRAndroidEnterprise_Entitlement;
@class GTLRAndroidEnterprise_Install;
@class GTLRAndroidEnterprise_ManagedConfiguration;
@class GTLRAndroidEnterprise_ProductsApproveRequest;
@class GTLRAndroidEnterprise_ProductSet;
@class GTLRAndroidEnterprise_ServiceAccountKey;
@class GTLRAndroidEnterprise_StoreCluster;
@class GTLRAndroidEnterprise_StoreLayout;
@class GTLRAndroidEnterprise_StorePage;
@class GTLRAndroidEnterprise_User;
@class GTLRAndroidEnterprise_WebApp;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// keyType

/** Value: "googleCredentials" */
GTLR_EXTERN NSString * const kGTLRAndroidEnterpriseKeyTypeGoogleCredentials;
/** Value: "pkcs12" */
GTLR_EXTERN NSString * const kGTLRAndroidEnterpriseKeyTypePkcs12;

// ----------------------------------------------------------------------------
// requestMode

/** Value: "returnImmediately" */
GTLR_EXTERN NSString * const kGTLRAndroidEnterpriseRequestModeReturnImmediately;
/** Value: "waitForNotifications" */
GTLR_EXTERN NSString * const kGTLRAndroidEnterpriseRequestModeWaitForNotifications;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Android Enterprise query classes.
 */
@interface GTLRAndroidEnterpriseQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Retrieves the details of a device.
 *
 *  Method: androidenterprise.devices.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_DevicesGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForDevicesGetWithenterpriseId:userId:deviceId:]

/** The ID of the device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Device.
 *
 *  Retrieves the details of a device.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The ID of the device.
 *
 *  @return GTLRAndroidEnterpriseQuery_DevicesGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId;

@end

/**
 *  Retrieves whether a device's access to Google services is enabled or
 *  disabled. The device state takes effect only if enforcing EMM policies on
 *  Android devices is enabled in the Google Admin Console. Otherwise, the
 *  device state is ignored and all devices are allowed access to Google
 *  services. This is only supported for Google-managed users.
 *
 *  Method: androidenterprise.devices.getState
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_DevicesGetState : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForDevicesGetStateWithenterpriseId:userId:deviceId:]

/** The ID of the device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_DeviceState.
 *
 *  Retrieves whether a device's access to Google services is enabled or
 *  disabled. The device state takes effect only if enforcing EMM policies on
 *  Android devices is enabled in the Google Admin Console. Otherwise, the
 *  device state is ignored and all devices are allowed access to Google
 *  services. This is only supported for Google-managed users.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The ID of the device.
 *
 *  @return GTLRAndroidEnterpriseQuery_DevicesGetState
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId;

@end

/**
 *  Retrieves the IDs of all of a user's devices.
 *
 *  Method: androidenterprise.devices.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_DevicesList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForDevicesListWithenterpriseId:userId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_DevicesListResponse.
 *
 *  Retrieves the IDs of all of a user's devices.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @return GTLRAndroidEnterpriseQuery_DevicesList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId;

@end

/**
 *  Updates the device policy. This method supports patch semantics.
 *
 *  Method: androidenterprise.devices.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_DevicesPatch : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForDevicesPatchWithObject:enterpriseId:userId:deviceId:]

/** The ID of the device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Mask that identifies which fields to update. If not set, all modifiable
 *  fields will be modified.
 *  When set in a query parameter, this field should be specified as
 *  updateMask=<field1>,<field2>,...
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Device.
 *
 *  Updates the device policy. This method supports patch semantics.
 *
 *  @param object The @c GTLRAndroidEnterprise_Device to include in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The ID of the device.
 *
 *  @return GTLRAndroidEnterpriseQuery_DevicesPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Device *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId;

@end

/**
 *  Sets whether a device's access to Google services is enabled or disabled.
 *  The device state takes effect only if enforcing EMM policies on Android
 *  devices is enabled in the Google Admin Console. Otherwise, the device state
 *  is ignored and all devices are allowed access to Google services. This is
 *  only supported for Google-managed users.
 *
 *  Method: androidenterprise.devices.setState
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_DevicesSetState : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForDevicesSetStateWithObject:enterpriseId:userId:deviceId:]

/** The ID of the device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_DeviceState.
 *
 *  Sets whether a device's access to Google services is enabled or disabled.
 *  The device state takes effect only if enforcing EMM policies on Android
 *  devices is enabled in the Google Admin Console. Otherwise, the device state
 *  is ignored and all devices are allowed access to Google services. This is
 *  only supported for Google-managed users.
 *
 *  @param object The @c GTLRAndroidEnterprise_DeviceState to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The ID of the device.
 *
 *  @return GTLRAndroidEnterpriseQuery_DevicesSetState
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_DeviceState *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId;

@end

/**
 *  Updates the device policy
 *
 *  Method: androidenterprise.devices.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_DevicesUpdate : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForDevicesUpdateWithObject:enterpriseId:userId:deviceId:]

/** The ID of the device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Mask that identifies which fields to update. If not set, all modifiable
 *  fields will be modified.
 *  When set in a query parameter, this field should be specified as
 *  updateMask=<field1>,<field2>,...
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Device.
 *
 *  Updates the device policy
 *
 *  @param object The @c GTLRAndroidEnterprise_Device to include in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The ID of the device.
 *
 *  @return GTLRAndroidEnterpriseQuery_DevicesUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Device *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId;

@end

/**
 *  Acknowledges notifications that were received from
 *  Enterprises.PullNotificationSet to prevent subsequent calls from returning
 *  the same notifications.
 *
 *  Method: androidenterprise.enterprises.acknowledgeNotificationSet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesAcknowledgeNotificationSet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesAcknowledgeNotificationSet]

/**
 *  The notification set ID as returned by Enterprises.PullNotificationSet. This
 *  must be provided.
 */
@property(nonatomic, copy, nullable) NSString *notificationSetId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Acknowledges notifications that were received from
 *  Enterprises.PullNotificationSet to prevent subsequent calls from returning
 *  the same notifications.
 *
 *  @return GTLRAndroidEnterpriseQuery_EnterprisesAcknowledgeNotificationSet
 */
+ (instancetype)query;

@end

/**
 *  Completes the signup flow, by specifying the Completion token and Enterprise
 *  token. This request must not be called multiple times for a given Enterprise
 *  Token.
 *
 *  Method: androidenterprise.enterprises.completeSignup
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesCompleteSignup : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesCompleteSignup]

/** The Completion token initially returned by GenerateSignupUrl. */
@property(nonatomic, copy, nullable) NSString *completionToken;

/** The Enterprise token appended to the Callback URL. */
@property(nonatomic, copy, nullable) NSString *enterpriseToken;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Enterprise.
 *
 *  Completes the signup flow, by specifying the Completion token and Enterprise
 *  token. This request must not be called multiple times for a given Enterprise
 *  Token.
 *
 *  @return GTLRAndroidEnterpriseQuery_EnterprisesCompleteSignup
 */
+ (instancetype)query;

@end

/**
 *  Returns a unique token to access an embeddable UI. To generate a web UI,
 *  pass the generated token into the managed Google Play javascript API. Each
 *  token may only be used to start one UI session. See the javascript API
 *  documentation for further information.
 *
 *  Method: androidenterprise.enterprises.createWebToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesCreateWebToken : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesCreateWebTokenWithObject:enterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_AdministratorWebToken.
 *
 *  Returns a unique token to access an embeddable UI. To generate a web UI,
 *  pass the generated token into the managed Google Play javascript API. Each
 *  token may only be used to start one UI session. See the javascript API
 *  documentation for further information.
 *
 *  @param object The @c GTLRAndroidEnterprise_AdministratorWebTokenSpec to
 *    include in the query.
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_EnterprisesCreateWebToken
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_AdministratorWebTokenSpec *)object
                   enterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Enrolls an enterprise with the calling EMM.
 *
 *  Method: androidenterprise.enterprises.enroll
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesEnroll : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesEnrollWithObject:token:]

/** The token provided by the enterprise to register the EMM. */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Enterprise.
 *
 *  Enrolls an enterprise with the calling EMM.
 *
 *  @param object The @c GTLRAndroidEnterprise_Enterprise to include in the
 *    query.
 *  @param token The token provided by the enterprise to register the EMM.
 *
 *  @return GTLRAndroidEnterpriseQuery_EnterprisesEnroll
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Enterprise *)object
                          token:(NSString *)token;

@end

/**
 *  Generates a sign-up URL.
 *
 *  Method: androidenterprise.enterprises.generateSignupUrl
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesGenerateSignupUrl : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesGenerateSignupUrl]

/**
 *  The callback URL to which the Admin will be redirected after successfully
 *  creating an enterprise. Before redirecting there the system will add a
 *  single query parameter to this URL named "enterpriseToken" which will
 *  contain an opaque token to be used for the CompleteSignup request.
 *  Beware that this means that the URL will be parsed, the parameter added and
 *  then a new URL formatted, i.e. there may be some minor formatting changes
 *  and, more importantly, the URL must be well-formed so that it can be parsed.
 */
@property(nonatomic, copy, nullable) NSString *callbackUrl;

/**
 *  Fetches a @c GTLRAndroidEnterprise_SignupInfo.
 *
 *  Generates a sign-up URL.
 *
 *  @return GTLRAndroidEnterpriseQuery_EnterprisesGenerateSignupUrl
 */
+ (instancetype)query;

@end

/**
 *  Retrieves the name and domain of an enterprise.
 *
 *  Method: androidenterprise.enterprises.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesGetWithenterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Enterprise.
 *
 *  Retrieves the name and domain of an enterprise.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_EnterprisesGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Returns a service account and credentials. The service account can be bound
 *  to the enterprise by calling setAccount. The service account is unique to
 *  this enterprise and EMM, and will be deleted if the enterprise is unbound.
 *  The credentials contain private key data and are not stored server-side.
 *  This method can only be called after calling Enterprises.Enroll or
 *  Enterprises.CompleteSignup, and before Enterprises.SetAccount; at other
 *  times it will return an error.
 *  Subsequent calls after the first will generate a new, unique set of
 *  credentials, and invalidate the previously generated credentials.
 *  Once the service account is bound to the enterprise, it can be managed using
 *  the serviceAccountKeys resource.
 *
 *  Method: androidenterprise.enterprises.getServiceAccount
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesGetServiceAccount : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesGetServiceAccountWithenterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The type of credential to return with the service account. Required.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterpriseKeyTypeGoogleCredentials Value
 *        "googleCredentials"
 *    @arg @c kGTLRAndroidEnterpriseKeyTypePkcs12 Value "pkcs12"
 */
@property(nonatomic, copy, nullable) NSString *keyType;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ServiceAccount.
 *
 *  Returns a service account and credentials. The service account can be bound
 *  to the enterprise by calling setAccount. The service account is unique to
 *  this enterprise and EMM, and will be deleted if the enterprise is unbound.
 *  The credentials contain private key data and are not stored server-side.
 *  This method can only be called after calling Enterprises.Enroll or
 *  Enterprises.CompleteSignup, and before Enterprises.SetAccount; at other
 *  times it will return an error.
 *  Subsequent calls after the first will generate a new, unique set of
 *  credentials, and invalidate the previously generated credentials.
 *  Once the service account is bound to the enterprise, it can be managed using
 *  the serviceAccountKeys resource.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_EnterprisesGetServiceAccount
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Returns the store layout for the enterprise. If the store layout has not
 *  been set, returns "basic" as the store layout type and no homepage.
 *
 *  Method: androidenterprise.enterprises.getStoreLayout
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesGetStoreLayout : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesGetStoreLayoutWithenterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StoreLayout.
 *
 *  Returns the store layout for the enterprise. If the store layout has not
 *  been set, returns "basic" as the store layout type and no homepage.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_EnterprisesGetStoreLayout
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Looks up an enterprise by domain name. This is only supported for
 *  enterprises created via the Google-initiated creation flow. Lookup of the id
 *  is not needed for enterprises created via the EMM-initiated flow since the
 *  EMM learns the enterprise ID in the callback specified in the
 *  Enterprises.generateSignupUrl call.
 *
 *  Method: androidenterprise.enterprises.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesListWithdomain:]

/** The exact primary domain name of the enterprise to look up. */
@property(nonatomic, copy, nullable) NSString *domain;

/**
 *  Fetches a @c GTLRAndroidEnterprise_EnterprisesListResponse.
 *
 *  Looks up an enterprise by domain name. This is only supported for
 *  enterprises created via the Google-initiated creation flow. Lookup of the id
 *  is not needed for enterprises created via the EMM-initiated flow since the
 *  EMM learns the enterprise ID in the callback specified in the
 *  Enterprises.generateSignupUrl call.
 *
 *  @param domain The exact primary domain name of the enterprise to look up.
 *
 *  @return GTLRAndroidEnterpriseQuery_EnterprisesList
 */
+ (instancetype)queryWithDomain:(NSString *)domain;

@end

/**
 *  Pulls and returns a notification set for the enterprises associated with the
 *  service account authenticated for the request. The notification set may be
 *  empty if no notification are pending.
 *  A notification set returned needs to be acknowledged within 20 seconds by
 *  calling Enterprises.AcknowledgeNotificationSet, unless the notification set
 *  is empty.
 *  Notifications that are not acknowledged within the 20 seconds will
 *  eventually be included again in the response to another PullNotificationSet
 *  request, and those that are never acknowledged will ultimately be deleted
 *  according to the Google Cloud Platform Pub/Sub system policy.
 *  Multiple requests might be performed concurrently to retrieve notifications,
 *  in which case the pending notifications (if any) will be split among each
 *  caller, if any are pending.
 *  If no notifications are present, an empty notification list is returned.
 *  Subsequent requests may return more notifications once they become
 *  available.
 *
 *  Method: androidenterprise.enterprises.pullNotificationSet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesPullNotificationSet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesPullNotificationSet]

/**
 *  The request mode for pulling notifications.
 *  Specifying waitForNotifications will cause the request to block and wait
 *  until one or more notifications are present, or return an empty notification
 *  list if no notifications are present after some time.
 *  Speciying returnImmediately will cause the request to immediately return the
 *  pending notifications, or an empty list if no notifications are present.
 *  If omitted, defaults to waitForNotifications.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterpriseRequestModeReturnImmediately Value
 *        "returnImmediately"
 *    @arg @c kGTLRAndroidEnterpriseRequestModeWaitForNotifications Value
 *        "waitForNotifications"
 */
@property(nonatomic, copy, nullable) NSString *requestMode;

/**
 *  Fetches a @c GTLRAndroidEnterprise_NotificationSet.
 *
 *  Pulls and returns a notification set for the enterprises associated with the
 *  service account authenticated for the request. The notification set may be
 *  empty if no notification are pending.
 *  A notification set returned needs to be acknowledged within 20 seconds by
 *  calling Enterprises.AcknowledgeNotificationSet, unless the notification set
 *  is empty.
 *  Notifications that are not acknowledged within the 20 seconds will
 *  eventually be included again in the response to another PullNotificationSet
 *  request, and those that are never acknowledged will ultimately be deleted
 *  according to the Google Cloud Platform Pub/Sub system policy.
 *  Multiple requests might be performed concurrently to retrieve notifications,
 *  in which case the pending notifications (if any) will be split among each
 *  caller, if any are pending.
 *  If no notifications are present, an empty notification list is returned.
 *  Subsequent requests may return more notifications once they become
 *  available.
 *
 *  @return GTLRAndroidEnterpriseQuery_EnterprisesPullNotificationSet
 */
+ (instancetype)query;

@end

/**
 *  Sends a test notification to validate the EMM integration with the Google
 *  Cloud Pub/Sub service for this enterprise.
 *
 *  Method: androidenterprise.enterprises.sendTestPushNotification
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesSendTestPushNotification : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesSendTestPushNotificationWithenterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c
 *  GTLRAndroidEnterprise_EnterprisesSendTestPushNotificationResponse.
 *
 *  Sends a test notification to validate the EMM integration with the Google
 *  Cloud Pub/Sub service for this enterprise.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_EnterprisesSendTestPushNotification
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Sets the account that will be used to authenticate to the API as the
 *  enterprise.
 *
 *  Method: androidenterprise.enterprises.setAccount
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesSetAccount : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesSetAccountWithObject:enterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_EnterpriseAccount.
 *
 *  Sets the account that will be used to authenticate to the API as the
 *  enterprise.
 *
 *  @param object The @c GTLRAndroidEnterprise_EnterpriseAccount to include in
 *    the query.
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_EnterprisesSetAccount
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_EnterpriseAccount *)object
                   enterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Deprecated and unused.
 *
 *  Method: androidenterprise.enterprises.setAndroidDevicePolicyConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesSetAndroidDevicePolicyConfig : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesSetAndroidDevicePolicyConfigWithObject:enterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_AndroidDevicePolicyConfig.
 *
 *  Deprecated and unused.
 *
 *  @param object The @c GTLRAndroidEnterprise_AndroidDevicePolicyConfig to
 *    include in the query.
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_EnterprisesSetAndroidDevicePolicyConfig
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_AndroidDevicePolicyConfig *)object
                   enterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Sets the store layout for the enterprise. By default, storeLayoutType is set
 *  to "basic" and the basic store layout is enabled. The basic layout only
 *  contains apps approved by the admin, and that have been added to the
 *  available product set for a user (using the setAvailableProductSet call).
 *  Apps on the page are sorted in order of their product ID value. If you
 *  create a custom store layout (by setting storeLayoutType = "custom" and
 *  setting a homepage), the basic store layout is disabled.
 *
 *  Method: androidenterprise.enterprises.setStoreLayout
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesSetStoreLayout : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesSetStoreLayoutWithObject:enterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StoreLayout.
 *
 *  Sets the store layout for the enterprise. By default, storeLayoutType is set
 *  to "basic" and the basic store layout is enabled. The basic layout only
 *  contains apps approved by the admin, and that have been added to the
 *  available product set for a user (using the setAvailableProductSet call).
 *  Apps on the page are sorted in order of their product ID value. If you
 *  create a custom store layout (by setting storeLayoutType = "custom" and
 *  setting a homepage), the basic store layout is disabled.
 *
 *  @param object The @c GTLRAndroidEnterprise_StoreLayout to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_EnterprisesSetStoreLayout
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StoreLayout *)object
                   enterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Unenrolls an enterprise from the calling EMM.
 *
 *  Method: androidenterprise.enterprises.unenroll
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EnterprisesUnenroll : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEnterprisesUnenrollWithenterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Unenrolls an enterprise from the calling EMM.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_EnterprisesUnenroll
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Removes an entitlement to an app for a user.
 *
 *  Method: androidenterprise.entitlements.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EntitlementsDelete : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEntitlementsDeleteWithenterpriseId:userId:entitlementId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the entitlement (a product ID), e.g. "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *entitlementId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes an entitlement to an app for a user.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param entitlementId The ID of the entitlement (a product ID), e.g.
 *    "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_EntitlementsDelete
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                        entitlementId:(NSString *)entitlementId;

@end

/**
 *  Retrieves details of an entitlement.
 *
 *  Method: androidenterprise.entitlements.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EntitlementsGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEntitlementsGetWithenterpriseId:userId:entitlementId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the entitlement (a product ID), e.g. "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *entitlementId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Entitlement.
 *
 *  Retrieves details of an entitlement.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param entitlementId The ID of the entitlement (a product ID), e.g.
 *    "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_EntitlementsGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                        entitlementId:(NSString *)entitlementId;

@end

/**
 *  Lists all entitlements for the specified user. Only the ID is set.
 *
 *  Method: androidenterprise.entitlements.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EntitlementsList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEntitlementsListWithenterpriseId:userId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_EntitlementsListResponse.
 *
 *  Lists all entitlements for the specified user. Only the ID is set.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @return GTLRAndroidEnterpriseQuery_EntitlementsList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId;

@end

/**
 *  Adds or updates an entitlement to an app for a user. This method supports
 *  patch semantics.
 *
 *  Method: androidenterprise.entitlements.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EntitlementsPatch : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEntitlementsPatchWithObject:enterpriseId:userId:entitlementId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the entitlement (a product ID), e.g. "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *entitlementId;

/**
 *  Set to true to also install the product on all the user's devices where
 *  possible. Failure to install on one or more devices will not prevent this
 *  operation from returning successfully, as long as the entitlement was
 *  successfully assigned to the user.
 */
@property(nonatomic, assign) BOOL install;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Entitlement.
 *
 *  Adds or updates an entitlement to an app for a user. This method supports
 *  patch semantics.
 *
 *  @param object The @c GTLRAndroidEnterprise_Entitlement to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param entitlementId The ID of the entitlement (a product ID), e.g.
 *    "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_EntitlementsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Entitlement *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                  entitlementId:(NSString *)entitlementId;

@end

/**
 *  Adds or updates an entitlement to an app for a user.
 *
 *  Method: androidenterprise.entitlements.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_EntitlementsUpdate : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForEntitlementsUpdateWithObject:enterpriseId:userId:entitlementId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the entitlement (a product ID), e.g. "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *entitlementId;

/**
 *  Set to true to also install the product on all the user's devices where
 *  possible. Failure to install on one or more devices will not prevent this
 *  operation from returning successfully, as long as the entitlement was
 *  successfully assigned to the user.
 */
@property(nonatomic, assign) BOOL install;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Entitlement.
 *
 *  Adds or updates an entitlement to an app for a user.
 *
 *  @param object The @c GTLRAndroidEnterprise_Entitlement to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param entitlementId The ID of the entitlement (a product ID), e.g.
 *    "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_EntitlementsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Entitlement *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                  entitlementId:(NSString *)entitlementId;

@end

/**
 *  Retrieves details of an enterprise's group license for a product.
 *
 *  Method: androidenterprise.grouplicenses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_GrouplicensesGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForGrouplicensesGetWithenterpriseId:groupLicenseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the product the group license is for, e.g.
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *groupLicenseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_GroupLicense.
 *
 *  Retrieves details of an enterprise's group license for a product.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param groupLicenseId The ID of the product the group license is for, e.g.
 *    "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_GrouplicensesGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                       groupLicenseId:(NSString *)groupLicenseId;

@end

/**
 *  Retrieves IDs of all products for which the enterprise has a group license.
 *
 *  Method: androidenterprise.grouplicenses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_GrouplicensesList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForGrouplicensesListWithenterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_GroupLicensesListResponse.
 *
 *  Retrieves IDs of all products for which the enterprise has a group license.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_GrouplicensesList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Retrieves the IDs of the users who have been granted entitlements under the
 *  license.
 *
 *  Method: androidenterprise.grouplicenseusers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_GrouplicenseusersList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForGrouplicenseusersListWithenterpriseId:groupLicenseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the product the group license is for, e.g.
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *groupLicenseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_GroupLicenseUsersListResponse.
 *
 *  Retrieves the IDs of the users who have been granted entitlements under the
 *  license.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param groupLicenseId The ID of the product the group license is for, e.g.
 *    "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_GrouplicenseusersList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                       groupLicenseId:(NSString *)groupLicenseId;

@end

/**
 *  Requests to remove an app from a device. A call to get or list will still
 *  show the app as installed on the device until it is actually removed.
 *
 *  Method: androidenterprise.installs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_InstallsDelete : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForInstallsDeleteWithenterpriseId:userId:deviceId:installId:]

/** The Android ID of the device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the product represented by the install, e.g.
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *installId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Requests to remove an app from a device. A call to get or list will still
 *  show the app as installed on the device until it is actually removed.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The Android ID of the device.
 *  @param installId The ID of the product represented by the install, e.g.
 *    "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_InstallsDelete
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId
                            installId:(NSString *)installId;

@end

/**
 *  Retrieves details of an installation of an app on a device.
 *
 *  Method: androidenterprise.installs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_InstallsGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForInstallsGetWithenterpriseId:userId:deviceId:installId:]

/** The Android ID of the device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the product represented by the install, e.g.
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *installId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Install.
 *
 *  Retrieves details of an installation of an app on a device.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The Android ID of the device.
 *  @param installId The ID of the product represented by the install, e.g.
 *    "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_InstallsGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId
                            installId:(NSString *)installId;

@end

/**
 *  Retrieves the details of all apps installed on the specified device.
 *
 *  Method: androidenterprise.installs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_InstallsList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForInstallsListWithenterpriseId:userId:deviceId:]

/** The Android ID of the device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_InstallsListResponse.
 *
 *  Retrieves the details of all apps installed on the specified device.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The Android ID of the device.
 *
 *  @return GTLRAndroidEnterpriseQuery_InstallsList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId;

@end

/**
 *  Requests to install the latest version of an app to a device. If the app is
 *  already installed, then it is updated to the latest version if necessary.
 *  This method supports patch semantics.
 *
 *  Method: androidenterprise.installs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_InstallsPatch : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForInstallsPatchWithObject:enterpriseId:userId:deviceId:installId:]

/** The Android ID of the device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the product represented by the install, e.g.
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *installId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Install.
 *
 *  Requests to install the latest version of an app to a device. If the app is
 *  already installed, then it is updated to the latest version if necessary.
 *  This method supports patch semantics.
 *
 *  @param object The @c GTLRAndroidEnterprise_Install to include in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The Android ID of the device.
 *  @param installId The ID of the product represented by the install, e.g.
 *    "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_InstallsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Install *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId
                      installId:(NSString *)installId;

@end

/**
 *  Requests to install the latest version of an app to a device. If the app is
 *  already installed, then it is updated to the latest version if necessary.
 *
 *  Method: androidenterprise.installs.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_InstallsUpdate : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForInstallsUpdateWithObject:enterpriseId:userId:deviceId:installId:]

/** The Android ID of the device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the product represented by the install, e.g.
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *installId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Install.
 *
 *  Requests to install the latest version of an app to a device. If the app is
 *  already installed, then it is updated to the latest version if necessary.
 *
 *  @param object The @c GTLRAndroidEnterprise_Install to include in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The Android ID of the device.
 *  @param installId The ID of the product represented by the install, e.g.
 *    "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_InstallsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Install *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId
                      installId:(NSString *)installId;

@end

/**
 *  Removes a per-device managed configuration for an app for the specified
 *  device.
 *
 *  Method: androidenterprise.managedconfigurationsfordevice.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordeviceDelete : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForManagedconfigurationsfordeviceDeleteWithenterpriseId:userId:deviceId:managedConfigurationForDeviceId:]

/** The Android ID of the device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the managed configuration (a product ID), e.g.
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *managedConfigurationForDeviceId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes a per-device managed configuration for an app for the specified
 *  device.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The Android ID of the device.
 *  @param managedConfigurationForDeviceId The ID of the managed configuration
 *    (a product ID), e.g. "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordeviceDelete
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId
      managedConfigurationForDeviceId:(NSString *)managedConfigurationForDeviceId;

@end

/**
 *  Retrieves details of a per-device managed configuration.
 *
 *  Method: androidenterprise.managedconfigurationsfordevice.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordeviceGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForManagedconfigurationsfordeviceGetWithenterpriseId:userId:deviceId:managedConfigurationForDeviceId:]

/** The Android ID of the device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the managed configuration (a product ID), e.g.
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *managedConfigurationForDeviceId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ManagedConfiguration.
 *
 *  Retrieves details of a per-device managed configuration.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The Android ID of the device.
 *  @param managedConfigurationForDeviceId The ID of the managed configuration
 *    (a product ID), e.g. "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordeviceGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId
      managedConfigurationForDeviceId:(NSString *)managedConfigurationForDeviceId;

@end

/**
 *  Lists all the per-device managed configurations for the specified device.
 *  Only the ID is set.
 *
 *  Method: androidenterprise.managedconfigurationsfordevice.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordeviceList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForManagedconfigurationsfordeviceListWithenterpriseId:userId:deviceId:]

/** The Android ID of the device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c
 *  GTLRAndroidEnterprise_ManagedConfigurationsForDeviceListResponse.
 *
 *  Lists all the per-device managed configurations for the specified device.
 *  Only the ID is set.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The Android ID of the device.
 *
 *  @return GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordeviceList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId;

@end

/**
 *  Adds or updates a per-device managed configuration for an app for the
 *  specified device. This method supports patch semantics.
 *
 *  Method: androidenterprise.managedconfigurationsfordevice.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordevicePatch : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForManagedconfigurationsfordevicePatchWithObject:enterpriseId:userId:deviceId:managedConfigurationForDeviceId:]

/** The Android ID of the device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the managed configuration (a product ID), e.g.
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *managedConfigurationForDeviceId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ManagedConfiguration.
 *
 *  Adds or updates a per-device managed configuration for an app for the
 *  specified device. This method supports patch semantics.
 *
 *  @param object The @c GTLRAndroidEnterprise_ManagedConfiguration to include
 *    in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The Android ID of the device.
 *  @param managedConfigurationForDeviceId The ID of the managed configuration
 *    (a product ID), e.g. "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordevicePatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ManagedConfiguration *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId
managedConfigurationForDeviceId:(NSString *)managedConfigurationForDeviceId;

@end

/**
 *  Adds or updates a per-device managed configuration for an app for the
 *  specified device.
 *
 *  Method: androidenterprise.managedconfigurationsfordevice.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordeviceUpdate : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForManagedconfigurationsfordeviceUpdateWithObject:enterpriseId:userId:deviceId:managedConfigurationForDeviceId:]

/** The Android ID of the device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the managed configuration (a product ID), e.g.
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *managedConfigurationForDeviceId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ManagedConfiguration.
 *
 *  Adds or updates a per-device managed configuration for an app for the
 *  specified device.
 *
 *  @param object The @c GTLRAndroidEnterprise_ManagedConfiguration to include
 *    in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param deviceId The Android ID of the device.
 *  @param managedConfigurationForDeviceId The ID of the managed configuration
 *    (a product ID), e.g. "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordeviceUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ManagedConfiguration *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId
managedConfigurationForDeviceId:(NSString *)managedConfigurationForDeviceId;

@end

/**
 *  Removes a per-user managed configuration for an app for the specified user.
 *
 *  Method: androidenterprise.managedconfigurationsforuser.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserDelete : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForManagedconfigurationsforuserDeleteWithenterpriseId:userId:managedConfigurationForUserId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the managed configuration (a product ID), e.g.
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *managedConfigurationForUserId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes a per-user managed configuration for an app for the specified user.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param managedConfigurationForUserId The ID of the managed configuration (a
 *    product ID), e.g. "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserDelete
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
        managedConfigurationForUserId:(NSString *)managedConfigurationForUserId;

@end

/**
 *  Retrieves details of a per-user managed configuration for an app for the
 *  specified user.
 *
 *  Method: androidenterprise.managedconfigurationsforuser.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForManagedconfigurationsforuserGetWithenterpriseId:userId:managedConfigurationForUserId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the managed configuration (a product ID), e.g.
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *managedConfigurationForUserId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ManagedConfiguration.
 *
 *  Retrieves details of a per-user managed configuration for an app for the
 *  specified user.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param managedConfigurationForUserId The ID of the managed configuration (a
 *    product ID), e.g. "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
        managedConfigurationForUserId:(NSString *)managedConfigurationForUserId;

@end

/**
 *  Lists all the per-user managed configurations for the specified user. Only
 *  the ID is set.
 *
 *  Method: androidenterprise.managedconfigurationsforuser.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForManagedconfigurationsforuserListWithenterpriseId:userId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ManagedConfigurationsForUserListResponse.
 *
 *  Lists all the per-user managed configurations for the specified user. Only
 *  the ID is set.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @return GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId;

@end

/**
 *  Adds or updates the managed configuration settings for an app for the
 *  specified user. If you support the Managed configurations iframe, you can
 *  apply managed configurations to a user by specifying an mcmId and its
 *  associated configuration variables (if any) in the request. Alternatively,
 *  all EMMs can apply managed configurations by passing a list of managed
 *  properties. This method supports patch semantics.
 *
 *  Method: androidenterprise.managedconfigurationsforuser.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserPatch : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForManagedconfigurationsforuserPatchWithObject:enterpriseId:userId:managedConfigurationForUserId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the managed configuration (a product ID), e.g.
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *managedConfigurationForUserId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ManagedConfiguration.
 *
 *  Adds or updates the managed configuration settings for an app for the
 *  specified user. If you support the Managed configurations iframe, you can
 *  apply managed configurations to a user by specifying an mcmId and its
 *  associated configuration variables (if any) in the request. Alternatively,
 *  all EMMs can apply managed configurations by passing a list of managed
 *  properties. This method supports patch semantics.
 *
 *  @param object The @c GTLRAndroidEnterprise_ManagedConfiguration to include
 *    in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param managedConfigurationForUserId The ID of the managed configuration (a
 *    product ID), e.g. "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ManagedConfiguration *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
  managedConfigurationForUserId:(NSString *)managedConfigurationForUserId;

@end

/**
 *  Adds or updates the managed configuration settings for an app for the
 *  specified user. If you support the Managed configurations iframe, you can
 *  apply managed configurations to a user by specifying an mcmId and its
 *  associated configuration variables (if any) in the request. Alternatively,
 *  all EMMs can apply managed configurations by passing a list of managed
 *  properties.
 *
 *  Method: androidenterprise.managedconfigurationsforuser.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserUpdate : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForManagedconfigurationsforuserUpdateWithObject:enterpriseId:userId:managedConfigurationForUserId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the managed configuration (a product ID), e.g.
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *managedConfigurationForUserId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ManagedConfiguration.
 *
 *  Adds or updates the managed configuration settings for an app for the
 *  specified user. If you support the Managed configurations iframe, you can
 *  apply managed configurations to a user by specifying an mcmId and its
 *  associated configuration variables (if any) in the request. Alternatively,
 *  all EMMs can apply managed configurations by passing a list of managed
 *  properties.
 *
 *  @param object The @c GTLRAndroidEnterprise_ManagedConfiguration to include
 *    in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *  @param managedConfigurationForUserId The ID of the managed configuration (a
 *    product ID), e.g. "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ManagedConfiguration *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
  managedConfigurationForUserId:(NSString *)managedConfigurationForUserId;

@end

/**
 *  Lists all the managed configurations settings for the specified app. Only
 *  the ID and the name is set.
 *
 *  Method: androidenterprise.managedconfigurationssettings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ManagedconfigurationssettingsList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForManagedconfigurationssettingsListWithenterpriseId:productId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The ID of the product for which the managed configurations settings applies
 *  to.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c
 *  GTLRAndroidEnterprise_ManagedConfigurationsSettingsListResponse.
 *
 *  Lists all the managed configurations settings for the specified app. Only
 *  the ID and the name is set.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param productId The ID of the product for which the managed configurations
 *    settings applies to.
 *
 *  @return GTLRAndroidEnterpriseQuery_ManagedconfigurationssettingsList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                            productId:(NSString *)productId;

@end

/**
 *  Retrieves details of an Android app permission for display to an enterprise
 *  admin.
 *
 *  Method: androidenterprise.permissions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_PermissionsGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForPermissionsGetWithpermissionId:]

/** The BCP47 tag for the user's preferred language (e.g. "en-US", "de") */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the permission. */
@property(nonatomic, copy, nullable) NSString *permissionId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Permission.
 *
 *  Retrieves details of an Android app permission for display to an enterprise
 *  admin.
 *
 *  @param permissionId The ID of the permission.
 *
 *  @return GTLRAndroidEnterpriseQuery_PermissionsGet
 */
+ (instancetype)queryWithPermissionId:(NSString *)permissionId;

@end

/**
 *  Approves the specified product and the relevant app permissions, if any. The
 *  maximum number of products that you can approve per enterprise customer is
 *  1,000.
 *  To learn how to use managed Google Play to design and create a store layout
 *  to display approved products to your users, see Store Layout Design.
 *
 *  Method: androidenterprise.products.approve
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ProductsApprove : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForProductsApproveWithObject:enterpriseId:productId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Approves the specified product and the relevant app permissions, if any. The
 *  maximum number of products that you can approve per enterprise customer is
 *  1,000.
 *  To learn how to use managed Google Play to design and create a store layout
 *  to display approved products to your users, see Store Layout Design.
 *
 *  @param object The @c GTLRAndroidEnterprise_ProductsApproveRequest to include
 *    in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param productId The ID of the product.
 *
 *  @return GTLRAndroidEnterpriseQuery_ProductsApprove
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ProductsApproveRequest *)object
                   enterpriseId:(NSString *)enterpriseId
                      productId:(NSString *)productId;

@end

/**
 *  Generates a URL that can be rendered in an iframe to display the permissions
 *  (if any) of a product. An enterprise admin must view these permissions and
 *  accept them on behalf of their organization in order to approve that
 *  product.
 *  Admins should accept the displayed permissions by interacting with a
 *  separate UI element in the EMM console, which in turn should trigger the use
 *  of this URL as the approvalUrlInfo.approvalUrl property in a
 *  Products.approve call to approve the product. This URL can only be used to
 *  display permissions for up to 1 day.
 *
 *  Method: androidenterprise.products.generateApprovalUrl
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ProductsGenerateApprovalUrl : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForProductsGenerateApprovalUrlWithenterpriseId:productId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The BCP 47 language code used for permission names and descriptions in the
 *  returned iframe, for instance "en-US".
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/** The ID of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ProductsGenerateApprovalUrlResponse.
 *
 *  Generates a URL that can be rendered in an iframe to display the permissions
 *  (if any) of a product. An enterprise admin must view these permissions and
 *  accept them on behalf of their organization in order to approve that
 *  product.
 *  Admins should accept the displayed permissions by interacting with a
 *  separate UI element in the EMM console, which in turn should trigger the use
 *  of this URL as the approvalUrlInfo.approvalUrl property in a
 *  Products.approve call to approve the product. This URL can only be used to
 *  display permissions for up to 1 day.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param productId The ID of the product.
 *
 *  @return GTLRAndroidEnterpriseQuery_ProductsGenerateApprovalUrl
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                            productId:(NSString *)productId;

@end

/**
 *  Retrieves details of a product for display to an enterprise admin.
 *
 *  Method: androidenterprise.products.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ProductsGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForProductsGetWithenterpriseId:productId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The BCP47 tag for the user's preferred language (e.g. "en-US", "de"). */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the product, e.g. "app:com.google.android.gm". */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_Product.
 *
 *  Retrieves details of a product for display to an enterprise admin.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param productId The ID of the product, e.g. "app:com.google.android.gm".
 *
 *  @return GTLRAndroidEnterpriseQuery_ProductsGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                            productId:(NSString *)productId;

@end

/**
 *  Retrieves the schema that defines the configurable properties for this
 *  product. All products have a schema, but this schema may be empty if no
 *  managed configurations have been defined. This schema can be used to
 *  populate a UI that allows an admin to configure the product. To apply a
 *  managed configuration based on the schema obtained using this API, see
 *  Managed Configurations through Play.
 *
 *  Method: androidenterprise.products.getAppRestrictionsSchema
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ProductsGetAppRestrictionsSchema : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForProductsGetAppRestrictionsSchemaWithenterpriseId:productId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The BCP47 tag for the user's preferred language (e.g. "en-US", "de"). */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_AppRestrictionsSchema.
 *
 *  Retrieves the schema that defines the configurable properties for this
 *  product. All products have a schema, but this schema may be empty if no
 *  managed configurations have been defined. This schema can be used to
 *  populate a UI that allows an admin to configure the product. To apply a
 *  managed configuration based on the schema obtained using this API, see
 *  Managed Configurations through Play.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param productId The ID of the product.
 *
 *  @return GTLRAndroidEnterpriseQuery_ProductsGetAppRestrictionsSchema
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                            productId:(NSString *)productId;

@end

/**
 *  Retrieves the Android app permissions required by this app.
 *
 *  Method: androidenterprise.products.getPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ProductsGetPermissions : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForProductsGetPermissionsWithenterpriseId:productId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ProductPermissions.
 *
 *  Retrieves the Android app permissions required by this app.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param productId The ID of the product.
 *
 *  @return GTLRAndroidEnterpriseQuery_ProductsGetPermissions
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                            productId:(NSString *)productId;

@end

/**
 *  Finds approved products that match a query, or all approved products if
 *  there is no query.
 *
 *  Method: androidenterprise.products.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ProductsList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForProductsListWithenterpriseId:]

/**
 *  Specifies whether to search among all products (false) or among only
 *  products that have been approved (true). Only "true" is supported, and
 *  should be specified.
 */
@property(nonatomic, assign) BOOL approved;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  The BCP47 tag for the user's preferred language (e.g. "en-US", "de").
 *  Results are returned in the language best matching the preferred language.
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Specifies the maximum number of products that can be returned per request.
 *  If not specified, uses a default value of 100, which is also the maximum
 *  retrievable within a single response.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The search query as typed in the Google Play store search box. If omitted,
 *  all approved apps will be returned (using the pagination parameters),
 *  including apps that are not available in the store (e.g. unpublished apps).
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  A pagination token is contained in a request''s response when there are more
 *  products. The token can be used in a subsequent request to obtain more
 *  products, and so forth. This parameter cannot be used in the initial
 *  request.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ProductsListResponse.
 *
 *  Finds approved products that match a query, or all approved products if
 *  there is no query.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_ProductsList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Unapproves the specified product (and the relevant app permissions, if any)
 *
 *  Method: androidenterprise.products.unapprove
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ProductsUnapprove : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForProductsUnapproveWithenterpriseId:productId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Unapproves the specified product (and the relevant app permissions, if any)
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param productId The ID of the product.
 *
 *  @return GTLRAndroidEnterpriseQuery_ProductsUnapprove
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                            productId:(NSString *)productId;

@end

/**
 *  Removes and invalidates the specified credentials for the service account
 *  associated with this enterprise. The calling service account must have been
 *  retrieved by calling Enterprises.GetServiceAccount and must have been set as
 *  the enterprise service account by calling Enterprises.SetAccount.
 *
 *  Method: androidenterprise.serviceaccountkeys.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ServiceaccountkeysDelete : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForServiceaccountkeysDeleteWithenterpriseId:keyId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the key. */
@property(nonatomic, copy, nullable) NSString *keyId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes and invalidates the specified credentials for the service account
 *  associated with this enterprise. The calling service account must have been
 *  retrieved by calling Enterprises.GetServiceAccount and must have been set as
 *  the enterprise service account by calling Enterprises.SetAccount.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param keyId The ID of the key.
 *
 *  @return GTLRAndroidEnterpriseQuery_ServiceaccountkeysDelete
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                                keyId:(NSString *)keyId;

@end

/**
 *  Generates new credentials for the service account associated with this
 *  enterprise. The calling service account must have been retrieved by calling
 *  Enterprises.GetServiceAccount and must have been set as the enterprise
 *  service account by calling Enterprises.SetAccount.
 *  Only the type of the key should be populated in the resource to be inserted.
 *
 *  Method: androidenterprise.serviceaccountkeys.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ServiceaccountkeysInsert : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForServiceaccountkeysInsertWithObject:enterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ServiceAccountKey.
 *
 *  Generates new credentials for the service account associated with this
 *  enterprise. The calling service account must have been retrieved by calling
 *  Enterprises.GetServiceAccount and must have been set as the enterprise
 *  service account by calling Enterprises.SetAccount.
 *  Only the type of the key should be populated in the resource to be inserted.
 *
 *  @param object The @c GTLRAndroidEnterprise_ServiceAccountKey to include in
 *    the query.
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_ServiceaccountkeysInsert
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ServiceAccountKey *)object
                   enterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Lists all active credentials for the service account associated with this
 *  enterprise. Only the ID and key type are returned. The calling service
 *  account must have been retrieved by calling Enterprises.GetServiceAccount
 *  and must have been set as the enterprise service account by calling
 *  Enterprises.SetAccount.
 *
 *  Method: androidenterprise.serviceaccountkeys.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_ServiceaccountkeysList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForServiceaccountkeysListWithenterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ServiceAccountKeysListResponse.
 *
 *  Lists all active credentials for the service account associated with this
 *  enterprise. Only the ID and key type are returned. The calling service
 *  account must have been retrieved by calling Enterprises.GetServiceAccount
 *  and must have been set as the enterprise service account by calling
 *  Enterprises.SetAccount.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_ServiceaccountkeysList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Deletes a cluster.
 *
 *  Method: androidenterprise.storelayoutclusters.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutclustersDelete : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutclustersDeleteWithenterpriseId:pageId:clusterId:]

/** The ID of the cluster. */
@property(nonatomic, copy, nullable) NSString *clusterId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a cluster.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *  @param clusterId The ID of the cluster.
 *
 *  @return GTLRAndroidEnterpriseQuery_StorelayoutclustersDelete
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               pageId:(NSString *)pageId
                            clusterId:(NSString *)clusterId;

@end

/**
 *  Retrieves details of a cluster.
 *
 *  Method: androidenterprise.storelayoutclusters.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutclustersGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutclustersGetWithenterpriseId:pageId:clusterId:]

/** The ID of the cluster. */
@property(nonatomic, copy, nullable) NSString *clusterId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StoreCluster.
 *
 *  Retrieves details of a cluster.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *  @param clusterId The ID of the cluster.
 *
 *  @return GTLRAndroidEnterpriseQuery_StorelayoutclustersGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               pageId:(NSString *)pageId
                            clusterId:(NSString *)clusterId;

@end

/**
 *  Inserts a new cluster in a page.
 *
 *  Method: androidenterprise.storelayoutclusters.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutclustersInsert : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutclustersInsertWithObject:enterpriseId:pageId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StoreCluster.
 *
 *  Inserts a new cluster in a page.
 *
 *  @param object The @c GTLRAndroidEnterprise_StoreCluster to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *
 *  @return GTLRAndroidEnterpriseQuery_StorelayoutclustersInsert
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StoreCluster *)object
                   enterpriseId:(NSString *)enterpriseId
                         pageId:(NSString *)pageId;

@end

/**
 *  Retrieves the details of all clusters on the specified page.
 *
 *  Method: androidenterprise.storelayoutclusters.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutclustersList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutclustersListWithenterpriseId:pageId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StoreLayoutClustersListResponse.
 *
 *  Retrieves the details of all clusters on the specified page.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *
 *  @return GTLRAndroidEnterpriseQuery_StorelayoutclustersList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               pageId:(NSString *)pageId;

@end

/**
 *  Updates a cluster. This method supports patch semantics.
 *
 *  Method: androidenterprise.storelayoutclusters.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutclustersPatch : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutclustersPatchWithObject:enterpriseId:pageId:clusterId:]

/** The ID of the cluster. */
@property(nonatomic, copy, nullable) NSString *clusterId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StoreCluster.
 *
 *  Updates a cluster. This method supports patch semantics.
 *
 *  @param object The @c GTLRAndroidEnterprise_StoreCluster to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *  @param clusterId The ID of the cluster.
 *
 *  @return GTLRAndroidEnterpriseQuery_StorelayoutclustersPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StoreCluster *)object
                   enterpriseId:(NSString *)enterpriseId
                         pageId:(NSString *)pageId
                      clusterId:(NSString *)clusterId;

@end

/**
 *  Updates a cluster.
 *
 *  Method: androidenterprise.storelayoutclusters.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutclustersUpdate : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutclustersUpdateWithObject:enterpriseId:pageId:clusterId:]

/** The ID of the cluster. */
@property(nonatomic, copy, nullable) NSString *clusterId;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StoreCluster.
 *
 *  Updates a cluster.
 *
 *  @param object The @c GTLRAndroidEnterprise_StoreCluster to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *  @param clusterId The ID of the cluster.
 *
 *  @return GTLRAndroidEnterpriseQuery_StorelayoutclustersUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StoreCluster *)object
                   enterpriseId:(NSString *)enterpriseId
                         pageId:(NSString *)pageId
                      clusterId:(NSString *)clusterId;

@end

/**
 *  Deletes a store page.
 *
 *  Method: androidenterprise.storelayoutpages.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutpagesDelete : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutpagesDeleteWithenterpriseId:pageId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a store page.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *
 *  @return GTLRAndroidEnterpriseQuery_StorelayoutpagesDelete
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               pageId:(NSString *)pageId;

@end

/**
 *  Retrieves details of a store page.
 *
 *  Method: androidenterprise.storelayoutpages.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutpagesGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutpagesGetWithenterpriseId:pageId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StorePage.
 *
 *  Retrieves details of a store page.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *
 *  @return GTLRAndroidEnterpriseQuery_StorelayoutpagesGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               pageId:(NSString *)pageId;

@end

/**
 *  Inserts a new store page.
 *
 *  Method: androidenterprise.storelayoutpages.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutpagesInsert : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutpagesInsertWithObject:enterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StorePage.
 *
 *  Inserts a new store page.
 *
 *  @param object The @c GTLRAndroidEnterprise_StorePage to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_StorelayoutpagesInsert
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StorePage *)object
                   enterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Retrieves the details of all pages in the store.
 *
 *  Method: androidenterprise.storelayoutpages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutpagesList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutpagesListWithenterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StoreLayoutPagesListResponse.
 *
 *  Retrieves the details of all pages in the store.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_StorelayoutpagesList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Updates the content of a store page. This method supports patch semantics.
 *
 *  Method: androidenterprise.storelayoutpages.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutpagesPatch : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutpagesPatchWithObject:enterpriseId:pageId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StorePage.
 *
 *  Updates the content of a store page. This method supports patch semantics.
 *
 *  @param object The @c GTLRAndroidEnterprise_StorePage to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *
 *  @return GTLRAndroidEnterpriseQuery_StorelayoutpagesPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StorePage *)object
                   enterpriseId:(NSString *)enterpriseId
                         pageId:(NSString *)pageId;

@end

/**
 *  Updates the content of a store page.
 *
 *  Method: androidenterprise.storelayoutpages.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_StorelayoutpagesUpdate : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForStorelayoutpagesUpdateWithObject:enterpriseId:pageId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the page. */
@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_StorePage.
 *
 *  Updates the content of a store page.
 *
 *  @param object The @c GTLRAndroidEnterprise_StorePage to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param pageId The ID of the page.
 *
 *  @return GTLRAndroidEnterpriseQuery_StorelayoutpagesUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StorePage *)object
                   enterpriseId:(NSString *)enterpriseId
                         pageId:(NSString *)pageId;

@end

/**
 *  Deleted an EMM-managed user.
 *
 *  Method: androidenterprise.users.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersDelete : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersDeleteWithenterpriseId:userId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deleted an EMM-managed user.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @return GTLRAndroidEnterpriseQuery_UsersDelete
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId;

@end

/**
 *  Generates an authentication token which the device policy client can use to
 *  provision the given EMM-managed user account on a device. The generated
 *  token is single-use and expires after a few minutes.
 *  You can provision a maximum of 10 devices per user.
 *  This call only works with EMM-managed accounts.
 *
 *  Method: androidenterprise.users.generateAuthenticationToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersGenerateAuthenticationToken : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersGenerateAuthenticationTokenWithenterpriseId:userId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_AuthenticationToken.
 *
 *  Generates an authentication token which the device policy client can use to
 *  provision the given EMM-managed user account on a device. The generated
 *  token is single-use and expires after a few minutes.
 *  You can provision a maximum of 10 devices per user.
 *  This call only works with EMM-managed accounts.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @return GTLRAndroidEnterpriseQuery_UsersGenerateAuthenticationToken
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId;

@end

/**
 *  Generates a token (activation code) to allow this user to configure their
 *  managed account in the Android Setup Wizard. Revokes any previously
 *  generated token.
 *  This call only works with Google managed accounts.
 *
 *  Method: androidenterprise.users.generateToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersGenerateToken : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersGenerateTokenWithenterpriseId:userId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_UserToken.
 *
 *  Generates a token (activation code) to allow this user to configure their
 *  managed account in the Android Setup Wizard. Revokes any previously
 *  generated token.
 *  This call only works with Google managed accounts.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @return GTLRAndroidEnterpriseQuery_UsersGenerateToken
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId;

@end

/**
 *  Retrieves a user's details.
 *
 *  Method: androidenterprise.users.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersGetWithenterpriseId:userId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_User.
 *
 *  Retrieves a user's details.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @return GTLRAndroidEnterpriseQuery_UsersGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId;

@end

/**
 *  Retrieves the set of products a user is entitled to access.
 *
 *  Method: androidenterprise.users.getAvailableProductSet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersGetAvailableProductSet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersGetAvailableProductSetWithenterpriseId:userId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ProductSet.
 *
 *  Retrieves the set of products a user is entitled to access.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @return GTLRAndroidEnterpriseQuery_UsersGetAvailableProductSet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId;

@end

/**
 *  Creates a new EMM-managed user.
 *  The Users resource passed in the body of the request should include an
 *  accountIdentifier and an accountType.
 *  If a corresponding user already exists with the same account identifier, the
 *  user will be updated with the resource. In this case only the displayName
 *  field can be changed.
 *
 *  Method: androidenterprise.users.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersInsert : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersInsertWithObject:enterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_User.
 *
 *  Creates a new EMM-managed user.
 *  The Users resource passed in the body of the request should include an
 *  accountIdentifier and an accountType.
 *  If a corresponding user already exists with the same account identifier, the
 *  user will be updated with the resource. In this case only the displayName
 *  field can be changed.
 *
 *  @param object The @c GTLRAndroidEnterprise_User to include in the query.
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_UsersInsert
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_User *)object
                   enterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Looks up a user by primary email address. This is only supported for
 *  Google-managed users. Lookup of the id is not needed for EMM-managed users
 *  because the id is already returned in the result of the Users.insert call.
 *
 *  Method: androidenterprise.users.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersListWithenterpriseId:email:]

/** The exact primary email address of the user to look up. */
@property(nonatomic, copy, nullable) NSString *email;

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_UsersListResponse.
 *
 *  Looks up a user by primary email address. This is only supported for
 *  Google-managed users. Lookup of the id is not needed for EMM-managed users
 *  because the id is already returned in the result of the Users.insert call.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param email The exact primary email address of the user to look up.
 *
 *  @return GTLRAndroidEnterpriseQuery_UsersList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                                email:(NSString *)email;

@end

/**
 *  Updates the details of an EMM-managed user.
 *  Can be used with EMM-managed users only (not Google managed users). Pass the
 *  new details in the Users resource in the request body. Only the displayName
 *  field can be changed. Other fields must either be unset or have the
 *  currently active value. This method supports patch semantics.
 *
 *  Method: androidenterprise.users.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersPatch : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersPatchWithObject:enterpriseId:userId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_User.
 *
 *  Updates the details of an EMM-managed user.
 *  Can be used with EMM-managed users only (not Google managed users). Pass the
 *  new details in the Users resource in the request body. Only the displayName
 *  field can be changed. Other fields must either be unset or have the
 *  currently active value. This method supports patch semantics.
 *
 *  @param object The @c GTLRAndroidEnterprise_User to include in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @return GTLRAndroidEnterpriseQuery_UsersPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_User *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId;

@end

/**
 *  Revokes access to all devices currently provisioned to the user. The user
 *  will no longer be able to use the managed Play store on any of their managed
 *  devices.
 *  This call only works with EMM-managed accounts.
 *
 *  Method: androidenterprise.users.revokeDeviceAccess
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersRevokeDeviceAccess : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersRevokeDeviceAccessWithenterpriseId:userId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Revokes access to all devices currently provisioned to the user. The user
 *  will no longer be able to use the managed Play store on any of their managed
 *  devices.
 *  This call only works with EMM-managed accounts.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @return GTLRAndroidEnterpriseQuery_UsersRevokeDeviceAccess
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId;

@end

/**
 *  Revokes a previously generated token (activation code) for the user.
 *
 *  Method: androidenterprise.users.revokeToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersRevokeToken : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersRevokeTokenWithenterpriseId:userId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Revokes a previously generated token (activation code) for the user.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @return GTLRAndroidEnterpriseQuery_UsersRevokeToken
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId;

@end

/**
 *  Modifies the set of products that a user is entitled to access (referred to
 *  as whitelisted products). Only products that are approved or products that
 *  were previously approved (products with revoked approval) can be
 *  whitelisted.
 *
 *  Method: androidenterprise.users.setAvailableProductSet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersSetAvailableProductSet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersSetAvailableProductSetWithObject:enterpriseId:userId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_ProductSet.
 *
 *  Modifies the set of products that a user is entitled to access (referred to
 *  as whitelisted products). Only products that are approved or products that
 *  were previously approved (products with revoked approval) can be
 *  whitelisted.
 *
 *  @param object The @c GTLRAndroidEnterprise_ProductSet to include in the
 *    query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @return GTLRAndroidEnterpriseQuery_UsersSetAvailableProductSet
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ProductSet *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId;

@end

/**
 *  Updates the details of an EMM-managed user.
 *  Can be used with EMM-managed users only (not Google managed users). Pass the
 *  new details in the Users resource in the request body. Only the displayName
 *  field can be changed. Other fields must either be unset or have the
 *  currently active value.
 *
 *  Method: androidenterprise.users.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_UsersUpdate : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForUsersUpdateWithObject:enterpriseId:userId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_User.
 *
 *  Updates the details of an EMM-managed user.
 *  Can be used with EMM-managed users only (not Google managed users). Pass the
 *  new details in the Users resource in the request body. Only the displayName
 *  field can be changed. Other fields must either be unset or have the
 *  currently active value.
 *
 *  @param object The @c GTLRAndroidEnterprise_User to include in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param userId The ID of the user.
 *
 *  @return GTLRAndroidEnterpriseQuery_UsersUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_User *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId;

@end

/**
 *  Deletes an existing web app.
 *
 *  Method: androidenterprise.webapps.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_WebappsDelete : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForWebappsDeleteWithenterpriseId:webAppId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the web app. */
@property(nonatomic, copy, nullable) NSString *webAppId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an existing web app.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param webAppId The ID of the web app.
 *
 *  @return GTLRAndroidEnterpriseQuery_WebappsDelete
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                             webAppId:(NSString *)webAppId;

@end

/**
 *  Gets an existing web app.
 *
 *  Method: androidenterprise.webapps.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_WebappsGet : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForWebappsGetWithenterpriseId:webAppId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the web app. */
@property(nonatomic, copy, nullable) NSString *webAppId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_WebApp.
 *
 *  Gets an existing web app.
 *
 *  @param enterpriseId The ID of the enterprise.
 *  @param webAppId The ID of the web app.
 *
 *  @return GTLRAndroidEnterpriseQuery_WebappsGet
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                             webAppId:(NSString *)webAppId;

@end

/**
 *  Creates a new web app for the enterprise.
 *
 *  Method: androidenterprise.webapps.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_WebappsInsert : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForWebappsInsertWithObject:enterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_WebApp.
 *
 *  Creates a new web app for the enterprise.
 *
 *  @param object The @c GTLRAndroidEnterprise_WebApp to include in the query.
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_WebappsInsert
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_WebApp *)object
                   enterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Retrieves the details of all web apps for a given enterprise.
 *
 *  Method: androidenterprise.webapps.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_WebappsList : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForWebappsListWithenterpriseId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_WebAppsListResponse.
 *
 *  Retrieves the details of all web apps for a given enterprise.
 *
 *  @param enterpriseId The ID of the enterprise.
 *
 *  @return GTLRAndroidEnterpriseQuery_WebappsList
 */
+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId;

@end

/**
 *  Updates an existing web app. This method supports patch semantics.
 *
 *  Method: androidenterprise.webapps.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_WebappsPatch : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForWebappsPatchWithObject:enterpriseId:webAppId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the web app. */
@property(nonatomic, copy, nullable) NSString *webAppId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_WebApp.
 *
 *  Updates an existing web app. This method supports patch semantics.
 *
 *  @param object The @c GTLRAndroidEnterprise_WebApp to include in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param webAppId The ID of the web app.
 *
 *  @return GTLRAndroidEnterpriseQuery_WebappsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_WebApp *)object
                   enterpriseId:(NSString *)enterpriseId
                       webAppId:(NSString *)webAppId;

@end

/**
 *  Updates an existing web app.
 *
 *  Method: androidenterprise.webapps.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidEnterprise
 */
@interface GTLRAndroidEnterpriseQuery_WebappsUpdate : GTLRAndroidEnterpriseQuery
// Previous library name was
//   +[GTLQueryAndroidEnterprise queryForWebappsUpdateWithObject:enterpriseId:webAppId:]

/** The ID of the enterprise. */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** The ID of the web app. */
@property(nonatomic, copy, nullable) NSString *webAppId;

/**
 *  Fetches a @c GTLRAndroidEnterprise_WebApp.
 *
 *  Updates an existing web app.
 *
 *  @param object The @c GTLRAndroidEnterprise_WebApp to include in the query.
 *  @param enterpriseId The ID of the enterprise.
 *  @param webAppId The ID of the web app.
 *
 *  @return GTLRAndroidEnterpriseQuery_WebappsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_WebApp *)object
                   enterpriseId:(NSString *)enterpriseId
                       webAppId:(NSString *)webAppId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
