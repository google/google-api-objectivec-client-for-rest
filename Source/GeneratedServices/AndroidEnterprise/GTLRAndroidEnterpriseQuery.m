// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play EMM API (androidenterprise/v1)
// Description:
//   Manages the deployment of apps to Android for Work users.
// Documentation:
//   https://developers.google.com/android/work/play/emm-api

#import "GTLRAndroidEnterpriseQuery.h"

#import "GTLRAndroidEnterpriseObjects.h"

// ----------------------------------------------------------------------------
// Constants

// keyType
NSString * const kGTLRAndroidEnterpriseKeyTypeGoogleCredentials = @"googleCredentials";
NSString * const kGTLRAndroidEnterpriseKeyTypePkcs12           = @"pkcs12";

// requestMode
NSString * const kGTLRAndroidEnterpriseRequestModeReturnImmediately = @"returnImmediately";
NSString * const kGTLRAndroidEnterpriseRequestModeWaitForNotifications = @"waitForNotifications";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRAndroidEnterpriseQuery

@dynamic fields;

@end

@implementation GTLRAndroidEnterpriseQuery_DevicesGet

@dynamic deviceId, enterpriseId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId {
  NSArray *pathParams = @[
    @"deviceId", @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}";
  GTLRAndroidEnterpriseQuery_DevicesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.deviceId = deviceId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_Device class];
  query.loggingName = @"androidenterprise.devices.get";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_DevicesGetState

@dynamic deviceId, enterpriseId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId {
  NSArray *pathParams = @[
    @"deviceId", @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state";
  GTLRAndroidEnterpriseQuery_DevicesGetState *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.deviceId = deviceId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_DeviceState class];
  query.loggingName = @"androidenterprise.devices.getState";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_DevicesList

@dynamic enterpriseId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/devices";
  GTLRAndroidEnterpriseQuery_DevicesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_DevicesListResponse class];
  query.loggingName = @"androidenterprise.devices.list";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_DevicesPatch

@dynamic deviceId, enterpriseId, updateMask, userId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Device *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"deviceId", @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}";
  GTLRAndroidEnterpriseQuery_DevicesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.deviceId = deviceId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_Device class];
  query.loggingName = @"androidenterprise.devices.patch";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_DevicesSetState

@dynamic deviceId, enterpriseId, userId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_DeviceState *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"deviceId", @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state";
  GTLRAndroidEnterpriseQuery_DevicesSetState *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.deviceId = deviceId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_DeviceState class];
  query.loggingName = @"androidenterprise.devices.setState";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_DevicesUpdate

@dynamic deviceId, enterpriseId, updateMask, userId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Device *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"deviceId", @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}";
  GTLRAndroidEnterpriseQuery_DevicesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.deviceId = deviceId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_Device class];
  query.loggingName = @"androidenterprise.devices.update";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EnterprisesAcknowledgeNotificationSet

@dynamic notificationSetId;

+ (instancetype)query {
  NSString *pathURITemplate = @"enterprises/acknowledgeNotificationSet";
  GTLRAndroidEnterpriseQuery_EnterprisesAcknowledgeNotificationSet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.loggingName = @"androidenterprise.enterprises.acknowledgeNotificationSet";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EnterprisesCompleteSignup

@dynamic completionToken, enterpriseToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"enterprises/completeSignup";
  GTLRAndroidEnterpriseQuery_EnterprisesCompleteSignup *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRAndroidEnterprise_Enterprise class];
  query.loggingName = @"androidenterprise.enterprises.completeSignup";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EnterprisesCreateWebToken

@dynamic enterpriseId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_AdministratorWebTokenSpec *)object
                   enterpriseId:(NSString *)enterpriseId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/createWebToken";
  GTLRAndroidEnterpriseQuery_EnterprisesCreateWebToken *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_AdministratorWebToken class];
  query.loggingName = @"androidenterprise.enterprises.createWebToken";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EnterprisesEnroll

@dynamic token;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Enterprise *)object
                          token:(NSString *)token {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"enterprises/enroll";
  GTLRAndroidEnterpriseQuery_EnterprisesEnroll *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.token = token;
  query.expectedObjectClass = [GTLRAndroidEnterprise_Enterprise class];
  query.loggingName = @"androidenterprise.enterprises.enroll";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EnterprisesGenerateSignupUrl

@dynamic callbackUrl;

+ (instancetype)query {
  NSString *pathURITemplate = @"enterprises/signupUrl";
  GTLRAndroidEnterpriseQuery_EnterprisesGenerateSignupUrl *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRAndroidEnterprise_SignupInfo class];
  query.loggingName = @"androidenterprise.enterprises.generateSignupUrl";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EnterprisesGet

@dynamic enterpriseId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId {
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}";
  GTLRAndroidEnterpriseQuery_EnterprisesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_Enterprise class];
  query.loggingName = @"androidenterprise.enterprises.get";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EnterprisesGetServiceAccount

@dynamic enterpriseId, keyType;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId {
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/serviceAccount";
  GTLRAndroidEnterpriseQuery_EnterprisesGetServiceAccount *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ServiceAccount class];
  query.loggingName = @"androidenterprise.enterprises.getServiceAccount";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EnterprisesGetStoreLayout

@dynamic enterpriseId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId {
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/storeLayout";
  GTLRAndroidEnterpriseQuery_EnterprisesGetStoreLayout *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_StoreLayout class];
  query.loggingName = @"androidenterprise.enterprises.getStoreLayout";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EnterprisesList

@dynamic domain;

+ (instancetype)queryWithDomain:(NSString *)domain {
  NSString *pathURITemplate = @"enterprises";
  GTLRAndroidEnterpriseQuery_EnterprisesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.domain = domain;
  query.expectedObjectClass = [GTLRAndroidEnterprise_EnterprisesListResponse class];
  query.loggingName = @"androidenterprise.enterprises.list";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EnterprisesPullNotificationSet

@dynamic requestMode;

+ (instancetype)query {
  NSString *pathURITemplate = @"enterprises/pullNotificationSet";
  GTLRAndroidEnterpriseQuery_EnterprisesPullNotificationSet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRAndroidEnterprise_NotificationSet class];
  query.loggingName = @"androidenterprise.enterprises.pullNotificationSet";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EnterprisesSendTestPushNotification

@dynamic enterpriseId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId {
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/sendTestPushNotification";
  GTLRAndroidEnterpriseQuery_EnterprisesSendTestPushNotification *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_EnterprisesSendTestPushNotificationResponse class];
  query.loggingName = @"androidenterprise.enterprises.sendTestPushNotification";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EnterprisesSetAccount

@dynamic enterpriseId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_EnterpriseAccount *)object
                   enterpriseId:(NSString *)enterpriseId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/account";
  GTLRAndroidEnterpriseQuery_EnterprisesSetAccount *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_EnterpriseAccount class];
  query.loggingName = @"androidenterprise.enterprises.setAccount";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EnterprisesSetAndroidDevicePolicyConfig

@dynamic enterpriseId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_AndroidDevicePolicyConfig *)object
                   enterpriseId:(NSString *)enterpriseId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/androidDevicePolicyConfig";
  GTLRAndroidEnterpriseQuery_EnterprisesSetAndroidDevicePolicyConfig *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_AndroidDevicePolicyConfig class];
  query.loggingName = @"androidenterprise.enterprises.setAndroidDevicePolicyConfig";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EnterprisesSetStoreLayout

@dynamic enterpriseId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StoreLayout *)object
                   enterpriseId:(NSString *)enterpriseId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/storeLayout";
  GTLRAndroidEnterpriseQuery_EnterprisesSetStoreLayout *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_StoreLayout class];
  query.loggingName = @"androidenterprise.enterprises.setStoreLayout";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EnterprisesUnenroll

@dynamic enterpriseId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId {
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/unenroll";
  GTLRAndroidEnterpriseQuery_EnterprisesUnenroll *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.loggingName = @"androidenterprise.enterprises.unenroll";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EntitlementsDelete

@dynamic enterpriseId, entitlementId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                        entitlementId:(NSString *)entitlementId {
  NSArray *pathParams = @[
    @"enterpriseId", @"entitlementId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}";
  GTLRAndroidEnterpriseQuery_EntitlementsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.entitlementId = entitlementId;
  query.loggingName = @"androidenterprise.entitlements.delete";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EntitlementsGet

@dynamic enterpriseId, entitlementId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                        entitlementId:(NSString *)entitlementId {
  NSArray *pathParams = @[
    @"enterpriseId", @"entitlementId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}";
  GTLRAndroidEnterpriseQuery_EntitlementsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.entitlementId = entitlementId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_Entitlement class];
  query.loggingName = @"androidenterprise.entitlements.get";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EntitlementsList

@dynamic enterpriseId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/entitlements";
  GTLRAndroidEnterpriseQuery_EntitlementsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_EntitlementsListResponse class];
  query.loggingName = @"androidenterprise.entitlements.list";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EntitlementsPatch

@dynamic enterpriseId, entitlementId, install, userId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Entitlement *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                  entitlementId:(NSString *)entitlementId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"enterpriseId", @"entitlementId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}";
  GTLRAndroidEnterpriseQuery_EntitlementsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.entitlementId = entitlementId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_Entitlement class];
  query.loggingName = @"androidenterprise.entitlements.patch";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_EntitlementsUpdate

@dynamic enterpriseId, entitlementId, install, userId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Entitlement *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                  entitlementId:(NSString *)entitlementId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"enterpriseId", @"entitlementId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}";
  GTLRAndroidEnterpriseQuery_EntitlementsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.entitlementId = entitlementId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_Entitlement class];
  query.loggingName = @"androidenterprise.entitlements.update";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_GrouplicensesGet

@dynamic enterpriseId, groupLicenseId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                       groupLicenseId:(NSString *)groupLicenseId {
  NSArray *pathParams = @[
    @"enterpriseId", @"groupLicenseId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}";
  GTLRAndroidEnterpriseQuery_GrouplicensesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.groupLicenseId = groupLicenseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_GroupLicense class];
  query.loggingName = @"androidenterprise.grouplicenses.get";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_GrouplicensesList

@dynamic enterpriseId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId {
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/groupLicenses";
  GTLRAndroidEnterpriseQuery_GrouplicensesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_GroupLicensesListResponse class];
  query.loggingName = @"androidenterprise.grouplicenses.list";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_GrouplicenseusersList

@dynamic enterpriseId, groupLicenseId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                       groupLicenseId:(NSString *)groupLicenseId {
  NSArray *pathParams = @[
    @"enterpriseId", @"groupLicenseId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}/users";
  GTLRAndroidEnterpriseQuery_GrouplicenseusersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.groupLicenseId = groupLicenseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_GroupLicenseUsersListResponse class];
  query.loggingName = @"androidenterprise.grouplicenseusers.list";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_InstallsDelete

@dynamic deviceId, enterpriseId, installId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId
                            installId:(NSString *)installId {
  NSArray *pathParams = @[
    @"deviceId", @"enterpriseId", @"installId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}";
  GTLRAndroidEnterpriseQuery_InstallsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.deviceId = deviceId;
  query.installId = installId;
  query.loggingName = @"androidenterprise.installs.delete";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_InstallsGet

@dynamic deviceId, enterpriseId, installId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId
                            installId:(NSString *)installId {
  NSArray *pathParams = @[
    @"deviceId", @"enterpriseId", @"installId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}";
  GTLRAndroidEnterpriseQuery_InstallsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.deviceId = deviceId;
  query.installId = installId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_Install class];
  query.loggingName = @"androidenterprise.installs.get";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_InstallsList

@dynamic deviceId, enterpriseId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId {
  NSArray *pathParams = @[
    @"deviceId", @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs";
  GTLRAndroidEnterpriseQuery_InstallsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.deviceId = deviceId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_InstallsListResponse class];
  query.loggingName = @"androidenterprise.installs.list";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_InstallsPatch

@dynamic deviceId, enterpriseId, installId, userId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Install *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId
                      installId:(NSString *)installId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"deviceId", @"enterpriseId", @"installId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}";
  GTLRAndroidEnterpriseQuery_InstallsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.deviceId = deviceId;
  query.installId = installId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_Install class];
  query.loggingName = @"androidenterprise.installs.patch";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_InstallsUpdate

@dynamic deviceId, enterpriseId, installId, userId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_Install *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId
                      installId:(NSString *)installId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"deviceId", @"enterpriseId", @"installId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}";
  GTLRAndroidEnterpriseQuery_InstallsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.deviceId = deviceId;
  query.installId = installId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_Install class];
  query.loggingName = @"androidenterprise.installs.update";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordeviceDelete

@dynamic deviceId, enterpriseId, managedConfigurationForDeviceId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId
      managedConfigurationForDeviceId:(NSString *)managedConfigurationForDeviceId {
  NSArray *pathParams = @[
    @"deviceId", @"enterpriseId", @"managedConfigurationForDeviceId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}";
  GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordeviceDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.deviceId = deviceId;
  query.managedConfigurationForDeviceId = managedConfigurationForDeviceId;
  query.loggingName = @"androidenterprise.managedconfigurationsfordevice.delete";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordeviceGet

@dynamic deviceId, enterpriseId, managedConfigurationForDeviceId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId
      managedConfigurationForDeviceId:(NSString *)managedConfigurationForDeviceId {
  NSArray *pathParams = @[
    @"deviceId", @"enterpriseId", @"managedConfigurationForDeviceId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}";
  GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordeviceGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.deviceId = deviceId;
  query.managedConfigurationForDeviceId = managedConfigurationForDeviceId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ManagedConfiguration class];
  query.loggingName = @"androidenterprise.managedconfigurationsfordevice.get";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordeviceList

@dynamic deviceId, enterpriseId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
                             deviceId:(NSString *)deviceId {
  NSArray *pathParams = @[
    @"deviceId", @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice";
  GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordeviceList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.deviceId = deviceId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ManagedConfigurationsForDeviceListResponse class];
  query.loggingName = @"androidenterprise.managedconfigurationsfordevice.list";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordevicePatch

@dynamic deviceId, enterpriseId, managedConfigurationForDeviceId, userId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ManagedConfiguration *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId
managedConfigurationForDeviceId:(NSString *)managedConfigurationForDeviceId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"deviceId", @"enterpriseId", @"managedConfigurationForDeviceId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}";
  GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordevicePatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.deviceId = deviceId;
  query.managedConfigurationForDeviceId = managedConfigurationForDeviceId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ManagedConfiguration class];
  query.loggingName = @"androidenterprise.managedconfigurationsfordevice.patch";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordeviceUpdate

@dynamic deviceId, enterpriseId, managedConfigurationForDeviceId, userId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ManagedConfiguration *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
                       deviceId:(NSString *)deviceId
managedConfigurationForDeviceId:(NSString *)managedConfigurationForDeviceId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"deviceId", @"enterpriseId", @"managedConfigurationForDeviceId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}";
  GTLRAndroidEnterpriseQuery_ManagedconfigurationsfordeviceUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.deviceId = deviceId;
  query.managedConfigurationForDeviceId = managedConfigurationForDeviceId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ManagedConfiguration class];
  query.loggingName = @"androidenterprise.managedconfigurationsfordevice.update";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserDelete

@dynamic enterpriseId, managedConfigurationForUserId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
        managedConfigurationForUserId:(NSString *)managedConfigurationForUserId {
  NSArray *pathParams = @[
    @"enterpriseId", @"managedConfigurationForUserId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}";
  GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.managedConfigurationForUserId = managedConfigurationForUserId;
  query.loggingName = @"androidenterprise.managedconfigurationsforuser.delete";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserGet

@dynamic enterpriseId, managedConfigurationForUserId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId
        managedConfigurationForUserId:(NSString *)managedConfigurationForUserId {
  NSArray *pathParams = @[
    @"enterpriseId", @"managedConfigurationForUserId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}";
  GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.managedConfigurationForUserId = managedConfigurationForUserId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ManagedConfiguration class];
  query.loggingName = @"androidenterprise.managedconfigurationsforuser.get";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserList

@dynamic enterpriseId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser";
  GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ManagedConfigurationsForUserListResponse class];
  query.loggingName = @"androidenterprise.managedconfigurationsforuser.list";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserPatch

@dynamic enterpriseId, managedConfigurationForUserId, userId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ManagedConfiguration *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
  managedConfigurationForUserId:(NSString *)managedConfigurationForUserId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"enterpriseId", @"managedConfigurationForUserId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}";
  GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.managedConfigurationForUserId = managedConfigurationForUserId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ManagedConfiguration class];
  query.loggingName = @"androidenterprise.managedconfigurationsforuser.patch";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserUpdate

@dynamic enterpriseId, managedConfigurationForUserId, userId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ManagedConfiguration *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId
  managedConfigurationForUserId:(NSString *)managedConfigurationForUserId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"enterpriseId", @"managedConfigurationForUserId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}";
  GTLRAndroidEnterpriseQuery_ManagedconfigurationsforuserUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.managedConfigurationForUserId = managedConfigurationForUserId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ManagedConfiguration class];
  query.loggingName = @"androidenterprise.managedconfigurationsforuser.update";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ManagedconfigurationssettingsList

@dynamic enterpriseId, productId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                            productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"enterpriseId", @"productId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/products/{productId}/managedConfigurationsSettings";
  GTLRAndroidEnterpriseQuery_ManagedconfigurationssettingsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.productId = productId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ManagedConfigurationsSettingsListResponse class];
  query.loggingName = @"androidenterprise.managedconfigurationssettings.list";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_PermissionsGet

@dynamic language, permissionId;

+ (instancetype)queryWithPermissionId:(NSString *)permissionId {
  NSArray *pathParams = @[ @"permissionId" ];
  NSString *pathURITemplate = @"permissions/{permissionId}";
  GTLRAndroidEnterpriseQuery_PermissionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.permissionId = permissionId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_Permission class];
  query.loggingName = @"androidenterprise.permissions.get";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ProductsApprove

@dynamic enterpriseId, productId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ProductsApproveRequest *)object
                   enterpriseId:(NSString *)enterpriseId
                      productId:(NSString *)productId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"enterpriseId", @"productId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/products/{productId}/approve";
  GTLRAndroidEnterpriseQuery_ProductsApprove *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.productId = productId;
  query.loggingName = @"androidenterprise.products.approve";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ProductsGenerateApprovalUrl

@dynamic enterpriseId, languageCode, productId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                            productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"enterpriseId", @"productId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/products/{productId}/generateApprovalUrl";
  GTLRAndroidEnterpriseQuery_ProductsGenerateApprovalUrl *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.productId = productId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ProductsGenerateApprovalUrlResponse class];
  query.loggingName = @"androidenterprise.products.generateApprovalUrl";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ProductsGet

@dynamic enterpriseId, language, productId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                            productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"enterpriseId", @"productId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/products/{productId}";
  GTLRAndroidEnterpriseQuery_ProductsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.productId = productId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_Product class];
  query.loggingName = @"androidenterprise.products.get";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ProductsGetAppRestrictionsSchema

@dynamic enterpriseId, language, productId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                            productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"enterpriseId", @"productId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/products/{productId}/appRestrictionsSchema";
  GTLRAndroidEnterpriseQuery_ProductsGetAppRestrictionsSchema *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.productId = productId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_AppRestrictionsSchema class];
  query.loggingName = @"androidenterprise.products.getAppRestrictionsSchema";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ProductsGetPermissions

@dynamic enterpriseId, productId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                            productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"enterpriseId", @"productId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/products/{productId}/permissions";
  GTLRAndroidEnterpriseQuery_ProductsGetPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.productId = productId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ProductPermissions class];
  query.loggingName = @"androidenterprise.products.getPermissions";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ProductsList

@dynamic approved, enterpriseId, language, maxResults, query, token;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId {
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/products";
  GTLRAndroidEnterpriseQuery_ProductsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ProductsListResponse class];
  query.loggingName = @"androidenterprise.products.list";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ProductsUnapprove

@dynamic enterpriseId, productId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                            productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"enterpriseId", @"productId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/products/{productId}/unapprove";
  GTLRAndroidEnterpriseQuery_ProductsUnapprove *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.productId = productId;
  query.loggingName = @"androidenterprise.products.unapprove";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ServiceaccountkeysDelete

@dynamic enterpriseId, keyId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                                keyId:(NSString *)keyId {
  NSArray *pathParams = @[
    @"enterpriseId", @"keyId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/serviceAccountKeys/{keyId}";
  GTLRAndroidEnterpriseQuery_ServiceaccountkeysDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.keyId = keyId;
  query.loggingName = @"androidenterprise.serviceaccountkeys.delete";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ServiceaccountkeysInsert

@dynamic enterpriseId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ServiceAccountKey *)object
                   enterpriseId:(NSString *)enterpriseId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/serviceAccountKeys";
  GTLRAndroidEnterpriseQuery_ServiceaccountkeysInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ServiceAccountKey class];
  query.loggingName = @"androidenterprise.serviceaccountkeys.insert";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_ServiceaccountkeysList

@dynamic enterpriseId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId {
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/serviceAccountKeys";
  GTLRAndroidEnterpriseQuery_ServiceaccountkeysList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ServiceAccountKeysListResponse class];
  query.loggingName = @"androidenterprise.serviceaccountkeys.list";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_StorelayoutclustersDelete

@dynamic clusterId, enterpriseId, pageId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               pageId:(NSString *)pageId
                            clusterId:(NSString *)clusterId {
  NSArray *pathParams = @[
    @"clusterId", @"enterpriseId", @"pageId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}";
  GTLRAndroidEnterpriseQuery_StorelayoutclustersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.pageId = pageId;
  query.clusterId = clusterId;
  query.loggingName = @"androidenterprise.storelayoutclusters.delete";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_StorelayoutclustersGet

@dynamic clusterId, enterpriseId, pageId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               pageId:(NSString *)pageId
                            clusterId:(NSString *)clusterId {
  NSArray *pathParams = @[
    @"clusterId", @"enterpriseId", @"pageId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}";
  GTLRAndroidEnterpriseQuery_StorelayoutclustersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.pageId = pageId;
  query.clusterId = clusterId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_StoreCluster class];
  query.loggingName = @"androidenterprise.storelayoutclusters.get";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_StorelayoutclustersInsert

@dynamic enterpriseId, pageId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StoreCluster *)object
                   enterpriseId:(NSString *)enterpriseId
                         pageId:(NSString *)pageId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"enterpriseId", @"pageId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters";
  GTLRAndroidEnterpriseQuery_StorelayoutclustersInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.pageId = pageId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_StoreCluster class];
  query.loggingName = @"androidenterprise.storelayoutclusters.insert";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_StorelayoutclustersList

@dynamic enterpriseId, pageId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               pageId:(NSString *)pageId {
  NSArray *pathParams = @[
    @"enterpriseId", @"pageId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters";
  GTLRAndroidEnterpriseQuery_StorelayoutclustersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.pageId = pageId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_StoreLayoutClustersListResponse class];
  query.loggingName = @"androidenterprise.storelayoutclusters.list";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_StorelayoutclustersPatch

@dynamic clusterId, enterpriseId, pageId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StoreCluster *)object
                   enterpriseId:(NSString *)enterpriseId
                         pageId:(NSString *)pageId
                      clusterId:(NSString *)clusterId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"clusterId", @"enterpriseId", @"pageId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}";
  GTLRAndroidEnterpriseQuery_StorelayoutclustersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.pageId = pageId;
  query.clusterId = clusterId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_StoreCluster class];
  query.loggingName = @"androidenterprise.storelayoutclusters.patch";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_StorelayoutclustersUpdate

@dynamic clusterId, enterpriseId, pageId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StoreCluster *)object
                   enterpriseId:(NSString *)enterpriseId
                         pageId:(NSString *)pageId
                      clusterId:(NSString *)clusterId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"clusterId", @"enterpriseId", @"pageId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}";
  GTLRAndroidEnterpriseQuery_StorelayoutclustersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.pageId = pageId;
  query.clusterId = clusterId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_StoreCluster class];
  query.loggingName = @"androidenterprise.storelayoutclusters.update";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_StorelayoutpagesDelete

@dynamic enterpriseId, pageId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               pageId:(NSString *)pageId {
  NSArray *pathParams = @[
    @"enterpriseId", @"pageId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/storeLayout/pages/{pageId}";
  GTLRAndroidEnterpriseQuery_StorelayoutpagesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.pageId = pageId;
  query.loggingName = @"androidenterprise.storelayoutpages.delete";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_StorelayoutpagesGet

@dynamic enterpriseId, pageId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               pageId:(NSString *)pageId {
  NSArray *pathParams = @[
    @"enterpriseId", @"pageId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/storeLayout/pages/{pageId}";
  GTLRAndroidEnterpriseQuery_StorelayoutpagesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.pageId = pageId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_StorePage class];
  query.loggingName = @"androidenterprise.storelayoutpages.get";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_StorelayoutpagesInsert

@dynamic enterpriseId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StorePage *)object
                   enterpriseId:(NSString *)enterpriseId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/storeLayout/pages";
  GTLRAndroidEnterpriseQuery_StorelayoutpagesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_StorePage class];
  query.loggingName = @"androidenterprise.storelayoutpages.insert";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_StorelayoutpagesList

@dynamic enterpriseId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId {
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/storeLayout/pages";
  GTLRAndroidEnterpriseQuery_StorelayoutpagesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_StoreLayoutPagesListResponse class];
  query.loggingName = @"androidenterprise.storelayoutpages.list";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_StorelayoutpagesPatch

@dynamic enterpriseId, pageId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StorePage *)object
                   enterpriseId:(NSString *)enterpriseId
                         pageId:(NSString *)pageId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"enterpriseId", @"pageId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/storeLayout/pages/{pageId}";
  GTLRAndroidEnterpriseQuery_StorelayoutpagesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.pageId = pageId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_StorePage class];
  query.loggingName = @"androidenterprise.storelayoutpages.patch";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_StorelayoutpagesUpdate

@dynamic enterpriseId, pageId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_StorePage *)object
                   enterpriseId:(NSString *)enterpriseId
                         pageId:(NSString *)pageId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"enterpriseId", @"pageId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/storeLayout/pages/{pageId}";
  GTLRAndroidEnterpriseQuery_StorelayoutpagesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.pageId = pageId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_StorePage class];
  query.loggingName = @"androidenterprise.storelayoutpages.update";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_UsersDelete

@dynamic enterpriseId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}";
  GTLRAndroidEnterpriseQuery_UsersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.loggingName = @"androidenterprise.users.delete";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_UsersGenerateAuthenticationToken

@dynamic enterpriseId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/authenticationToken";
  GTLRAndroidEnterpriseQuery_UsersGenerateAuthenticationToken *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_AuthenticationToken class];
  query.loggingName = @"androidenterprise.users.generateAuthenticationToken";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_UsersGenerateToken

@dynamic enterpriseId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/token";
  GTLRAndroidEnterpriseQuery_UsersGenerateToken *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_UserToken class];
  query.loggingName = @"androidenterprise.users.generateToken";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_UsersGet

@dynamic enterpriseId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}";
  GTLRAndroidEnterpriseQuery_UsersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_User class];
  query.loggingName = @"androidenterprise.users.get";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_UsersGetAvailableProductSet

@dynamic enterpriseId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/availableProductSet";
  GTLRAndroidEnterpriseQuery_UsersGetAvailableProductSet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ProductSet class];
  query.loggingName = @"androidenterprise.users.getAvailableProductSet";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_UsersInsert

@dynamic enterpriseId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_User *)object
                   enterpriseId:(NSString *)enterpriseId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users";
  GTLRAndroidEnterpriseQuery_UsersInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_User class];
  query.loggingName = @"androidenterprise.users.insert";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_UsersList

@dynamic email, enterpriseId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                                email:(NSString *)email {
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users";
  GTLRAndroidEnterpriseQuery_UsersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.email = email;
  query.expectedObjectClass = [GTLRAndroidEnterprise_UsersListResponse class];
  query.loggingName = @"androidenterprise.users.list";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_UsersPatch

@dynamic enterpriseId, userId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_User *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}";
  GTLRAndroidEnterpriseQuery_UsersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_User class];
  query.loggingName = @"androidenterprise.users.patch";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_UsersRevokeDeviceAccess

@dynamic enterpriseId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/deviceAccess";
  GTLRAndroidEnterpriseQuery_UsersRevokeDeviceAccess *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.loggingName = @"androidenterprise.users.revokeDeviceAccess";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_UsersRevokeToken

@dynamic enterpriseId, userId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                               userId:(NSString *)userId {
  NSArray *pathParams = @[
    @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/token";
  GTLRAndroidEnterpriseQuery_UsersRevokeToken *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.loggingName = @"androidenterprise.users.revokeToken";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_UsersSetAvailableProductSet

@dynamic enterpriseId, userId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_ProductSet *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}/availableProductSet";
  GTLRAndroidEnterpriseQuery_UsersSetAvailableProductSet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_ProductSet class];
  query.loggingName = @"androidenterprise.users.setAvailableProductSet";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_UsersUpdate

@dynamic enterpriseId, userId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_User *)object
                   enterpriseId:(NSString *)enterpriseId
                         userId:(NSString *)userId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"enterpriseId", @"userId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/users/{userId}";
  GTLRAndroidEnterpriseQuery_UsersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.userId = userId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_User class];
  query.loggingName = @"androidenterprise.users.update";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_WebappsDelete

@dynamic enterpriseId, webAppId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                             webAppId:(NSString *)webAppId {
  NSArray *pathParams = @[
    @"enterpriseId", @"webAppId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/webApps/{webAppId}";
  GTLRAndroidEnterpriseQuery_WebappsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.webAppId = webAppId;
  query.loggingName = @"androidenterprise.webapps.delete";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_WebappsGet

@dynamic enterpriseId, webAppId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId
                             webAppId:(NSString *)webAppId {
  NSArray *pathParams = @[
    @"enterpriseId", @"webAppId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/webApps/{webAppId}";
  GTLRAndroidEnterpriseQuery_WebappsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.webAppId = webAppId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_WebApp class];
  query.loggingName = @"androidenterprise.webapps.get";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_WebappsInsert

@dynamic enterpriseId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_WebApp *)object
                   enterpriseId:(NSString *)enterpriseId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/webApps";
  GTLRAndroidEnterpriseQuery_WebappsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_WebApp class];
  query.loggingName = @"androidenterprise.webapps.insert";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_WebappsList

@dynamic enterpriseId;

+ (instancetype)queryWithEnterpriseId:(NSString *)enterpriseId {
  NSArray *pathParams = @[ @"enterpriseId" ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/webApps";
  GTLRAndroidEnterpriseQuery_WebappsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.enterpriseId = enterpriseId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_WebAppsListResponse class];
  query.loggingName = @"androidenterprise.webapps.list";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_WebappsPatch

@dynamic enterpriseId, webAppId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_WebApp *)object
                   enterpriseId:(NSString *)enterpriseId
                       webAppId:(NSString *)webAppId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"enterpriseId", @"webAppId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/webApps/{webAppId}";
  GTLRAndroidEnterpriseQuery_WebappsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.webAppId = webAppId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_WebApp class];
  query.loggingName = @"androidenterprise.webapps.patch";
  return query;
}

@end

@implementation GTLRAndroidEnterpriseQuery_WebappsUpdate

@dynamic enterpriseId, webAppId;

+ (instancetype)queryWithObject:(GTLRAndroidEnterprise_WebApp *)object
                   enterpriseId:(NSString *)enterpriseId
                       webAppId:(NSString *)webAppId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"enterpriseId", @"webAppId"
  ];
  NSString *pathURITemplate = @"enterprises/{enterpriseId}/webApps/{webAppId}";
  GTLRAndroidEnterpriseQuery_WebappsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.enterpriseId = enterpriseId;
  query.webAppId = webAppId;
  query.expectedObjectClass = [GTLRAndroidEnterprise_WebApp class];
  query.loggingName = @"androidenterprise.webapps.update";
  return query;
}

@end
