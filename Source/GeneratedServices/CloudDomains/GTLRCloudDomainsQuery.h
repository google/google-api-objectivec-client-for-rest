// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Domains API (domains/v1beta1)
// Description:
//   Enables management and configuration of domain names.
// Documentation:
//   https://cloud.google.com/domains/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudDomains_ConfigureContactSettingsRequest;
@class GTLRCloudDomains_ConfigureDnsSettingsRequest;
@class GTLRCloudDomains_ConfigureManagementSettingsRequest;
@class GTLRCloudDomains_ExportRegistrationRequest;
@class GTLRCloudDomains_RegisterDomainRequest;
@class GTLRCloudDomains_Registration;
@class GTLRCloudDomains_ResetAuthorizationCodeRequest;
@class GTLRCloudDomains_SetIamPolicyRequest;
@class GTLRCloudDomains_TestIamPermissionsRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Cloud Domains query classes.
 */
@interface GTLRCloudDomainsQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets information about a location.
 *
 *  Method: domains.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsGet : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudDomains_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: domains.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsList : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudDomains_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: domains.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsOperationsGet : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudDomains_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: domains.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsOperationsList : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsOperationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudDomains_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates a `Registration`'s contact settings. Some changes require
 *  confirmation by the domain's registrant contact .
 *
 *  Method: domains.projects.locations.registrations.configureContactSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsConfigureContactSettings : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsRegistrationsConfigureContactSettingsWithObject:registration:]

/**
 *  Required. The name of the `Registration` whose contact settings are being
 *  updated, in the format `projects/ * /locations/ * /registrations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *registration;

/**
 *  Fetches a @c GTLRCloudDomains_Operation.
 *
 *  Updates a `Registration`'s contact settings. Some changes require
 *  confirmation by the domain's registrant contact .
 *
 *  @param object The @c GTLRCloudDomains_ConfigureContactSettingsRequest to
 *    include in the query.
 *  @param registration Required. The name of the `Registration` whose contact
 *    settings are being updated, in the format `projects/ * /locations/ *
 *    /registrations/ *`.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsConfigureContactSettings
 */
+ (instancetype)queryWithObject:(GTLRCloudDomains_ConfigureContactSettingsRequest *)object
                   registration:(NSString *)registration;

@end

/**
 *  Updates a `Registration`'s DNS settings.
 *
 *  Method: domains.projects.locations.registrations.configureDnsSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsConfigureDnsSettings : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsRegistrationsConfigureDnsSettingsWithObject:registration:]

/**
 *  Required. The name of the `Registration` whose DNS settings are being
 *  updated, in the format `projects/ * /locations/ * /registrations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *registration;

/**
 *  Fetches a @c GTLRCloudDomains_Operation.
 *
 *  Updates a `Registration`'s DNS settings.
 *
 *  @param object The @c GTLRCloudDomains_ConfigureDnsSettingsRequest to include
 *    in the query.
 *  @param registration Required. The name of the `Registration` whose DNS
 *    settings are being updated, in the format `projects/ * /locations/ *
 *    /registrations/ *`.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsConfigureDnsSettings
 */
+ (instancetype)queryWithObject:(GTLRCloudDomains_ConfigureDnsSettingsRequest *)object
                   registration:(NSString *)registration;

@end

/**
 *  Updates a `Registration`'s management settings.
 *
 *  Method: domains.projects.locations.registrations.configureManagementSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsConfigureManagementSettings : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsRegistrationsConfigureManagementSettingsWithObject:registration:]

/**
 *  Required. The name of the `Registration` whose management settings are being
 *  updated, in the format `projects/ * /locations/ * /registrations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *registration;

/**
 *  Fetches a @c GTLRCloudDomains_Operation.
 *
 *  Updates a `Registration`'s management settings.
 *
 *  @param object The @c GTLRCloudDomains_ConfigureManagementSettingsRequest to
 *    include in the query.
 *  @param registration Required. The name of the `Registration` whose
 *    management settings are being updated, in the format `projects/ *
 *    /locations/ * /registrations/ *`.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsConfigureManagementSettings
 */
+ (instancetype)queryWithObject:(GTLRCloudDomains_ConfigureManagementSettingsRequest *)object
                   registration:(NSString *)registration;

@end

/**
 *  Deletes a `Registration` resource. This method only works on resources in
 *  one of the following states: * `state` is `EXPORTED` with `expire_time` in
 *  the past * `state` is `REGISTRATION_FAILED`
 *
 *  Method: domains.projects.locations.registrations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsDelete : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsRegistrationsDeleteWithname:]

/**
 *  Required. The name of the `Registration` to delete, in the format `projects/
 *  * /locations/ * /registrations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudDomains_Operation.
 *
 *  Deletes a `Registration` resource. This method only works on resources in
 *  one of the following states: * `state` is `EXPORTED` with `expire_time` in
 *  the past * `state` is `REGISTRATION_FAILED`
 *
 *  @param name Required. The name of the `Registration` to delete, in the
 *    format `projects/ * /locations/ * /registrations/ *`.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Exports a `Registration` that you no longer want to use with Cloud Domains.
 *  You can continue to use the domain in [Google
 *  Domains](https://domains.google/) until it expires. If the export is
 *  successful: * The resource's `state` becomes `EXPORTED`, meaning that it is
 *  no longer managed by Cloud Domains * Because individual users can own
 *  domains in Google Domains, the calling user becomes the domain's sole owner.
 *  Permissions for the domain are subsequently managed in Google Domains. *
 *  Without further action, the domain does not renew automatically. The new
 *  owner can set up billing in Google Domains to renew the domain if needed.
 *
 *  Method: domains.projects.locations.registrations.export
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsExport : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsRegistrationsExportWithObject:name:]

/**
 *  Required. The name of the `Registration` to export, in the format `projects/
 *  * /locations/ * /registrations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudDomains_Operation.
 *
 *  Exports a `Registration` that you no longer want to use with Cloud Domains.
 *  You can continue to use the domain in [Google
 *  Domains](https://domains.google/) until it expires. If the export is
 *  successful: * The resource's `state` becomes `EXPORTED`, meaning that it is
 *  no longer managed by Cloud Domains * Because individual users can own
 *  domains in Google Domains, the calling user becomes the domain's sole owner.
 *  Permissions for the domain are subsequently managed in Google Domains. *
 *  Without further action, the domain does not renew automatically. The new
 *  owner can set up billing in Google Domains to renew the domain if needed.
 *
 *  @param object The @c GTLRCloudDomains_ExportRegistrationRequest to include
 *    in the query.
 *  @param name Required. The name of the `Registration` to export, in the
 *    format `projects/ * /locations/ * /registrations/ *`.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsExport
 */
+ (instancetype)queryWithObject:(GTLRCloudDomains_ExportRegistrationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the details of a `Registration` resource.
 *
 *  Method: domains.projects.locations.registrations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsGet : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsRegistrationsGetWithname:]

/**
 *  Required. The name of the `Registration` to get, in the format `projects/ *
 *  /locations/ * /registrations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudDomains_Registration.
 *
 *  Gets the details of a `Registration` resource.
 *
 *  @param name Required. The name of the `Registration` to get, in the format
 *    `projects/ * /locations/ * /registrations/ *`.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: domains.projects.locations.registrations.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsGetIamPolicy : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsRegistrationsGetIamPolicyWithresource:]

/**
 *  Optional. The policy format version to be returned. Valid values are 0, 1,
 *  and 3. Requests specifying an invalid value will be rejected. Requests for
 *  policies with any conditional bindings must specify version 3. Policies
 *  without any conditional bindings may specify any valid value or leave the
 *  field unset. To learn which resources support conditions in their IAM
 *  policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudDomains_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists the `Registration` resources in a project.
 *
 *  Method: domains.projects.locations.registrations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsList : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsRegistrationsListWithparent:]

/**
 *  Filter expression to restrict the `Registration`s returned. The expression
 *  must specify the field name, a comparison operator, and the value that you
 *  want to use for filtering. The value must be a string, a number, a boolean,
 *  or an enum value. The comparison operator should be one of =, !=, >, <, >=,
 *  <=, or : for prefix or wildcard matches. For example, to filter to a
 *  specific domain name, use an expression like `domainName="example.com"`. You
 *  can also check for the existence of a field; for example, to find domains
 *  using custom DNS settings, use an expression like `dnsSettings.customDns:*`.
 *  You can also create compound filters by combining expressions with the `AND`
 *  and `OR` operators. For example, to find domains that are suspended or have
 *  specific issues flagged, use an expression like `(state=SUSPENDED) OR
 *  (issue:*)`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Maximum number of results to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  When set to the `next_page_token` from a prior response, provides the next
 *  page of results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The project and location from which to list `Registration`s,
 *  specified in the format `projects/ * /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudDomains_ListRegistrationsResponse.
 *
 *  Lists the `Registration` resources in a project.
 *
 *  @param parent Required. The project and location from which to list
 *    `Registration`s, specified in the format `projects/ * /locations/ *`.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates select fields of a `Registration` resource, notably `labels`. To
 *  update other fields, use the appropriate custom update method: * To update
 *  management settings, see `ConfigureManagementSettings` * To update DNS
 *  configuration, see `ConfigureDnsSettings` * To update contact information,
 *  see `ConfigureContactSettings`
 *
 *  Method: domains.projects.locations.registrations.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsPatch : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsRegistrationsPatchWithObject:name:]

/**
 *  Output only. Name of the `Registration` resource, in the format `projects/ *
 *  /locations/ * /registrations/`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The field mask describing which fields to update as a
 *  comma-separated list. For example, if only the labels are being updated, the
 *  `update_mask` would be `"labels"`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudDomains_Operation.
 *
 *  Updates select fields of a `Registration` resource, notably `labels`. To
 *  update other fields, use the appropriate custom update method: * To update
 *  management settings, see `ConfigureManagementSettings` * To update DNS
 *  configuration, see `ConfigureDnsSettings` * To update contact information,
 *  see `ConfigureContactSettings`
 *
 *  @param object The @c GTLRCloudDomains_Registration to include in the query.
 *  @param name Output only. Name of the `Registration` resource, in the format
 *    `projects/ * /locations/ * /registrations/`.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudDomains_Registration *)object
                           name:(NSString *)name;

@end

/**
 *  Registers a new domain name and creates a corresponding `Registration`
 *  resource. Call `RetrieveRegisterParameters` first to check availability of
 *  the domain name and determine parameters like price that are needed to build
 *  a call to this method. A successful call creates a `Registration` resource
 *  in state `REGISTRATION_PENDING`, which resolves to `ACTIVE` within 1-2
 *  minutes, indicating that the domain was successfully registered. If the
 *  resource ends up in state `REGISTRATION_FAILED`, it indicates that the
 *  domain was not registered successfully, and you can safely delete the
 *  resource and retry registration.
 *
 *  Method: domains.projects.locations.registrations.register
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsRegister : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsRegistrationsRegisterWithObject:parent:]

/**
 *  Required. The parent resource of the `Registration`. Must be in the format
 *  `projects/ * /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudDomains_Operation.
 *
 *  Registers a new domain name and creates a corresponding `Registration`
 *  resource. Call `RetrieveRegisterParameters` first to check availability of
 *  the domain name and determine parameters like price that are needed to build
 *  a call to this method. A successful call creates a `Registration` resource
 *  in state `REGISTRATION_PENDING`, which resolves to `ACTIVE` within 1-2
 *  minutes, indicating that the domain was successfully registered. If the
 *  resource ends up in state `REGISTRATION_FAILED`, it indicates that the
 *  domain was not registered successfully, and you can safely delete the
 *  resource and retry registration.
 *
 *  @param object The @c GTLRCloudDomains_RegisterDomainRequest to include in
 *    the query.
 *  @param parent Required. The parent resource of the `Registration`. Must be
 *    in the format `projects/ * /locations/ *`.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsRegister
 */
+ (instancetype)queryWithObject:(GTLRCloudDomains_RegisterDomainRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Resets the authorization code of the `Registration` to a new random string.
 *  You can call this method only after 60 days have elapsed since the initial
 *  domain registration.
 *
 *  Method: domains.projects.locations.registrations.resetAuthorizationCode
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsResetAuthorizationCode : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsRegistrationsResetAuthorizationCodeWithObject:registration:]

/**
 *  Required. The name of the `Registration` whose authorization code is being
 *  reset, in the format `projects/ * /locations/ * /registrations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *registration;

/**
 *  Fetches a @c GTLRCloudDomains_AuthorizationCode.
 *
 *  Resets the authorization code of the `Registration` to a new random string.
 *  You can call this method only after 60 days have elapsed since the initial
 *  domain registration.
 *
 *  @param object The @c GTLRCloudDomains_ResetAuthorizationCodeRequest to
 *    include in the query.
 *  @param registration Required. The name of the `Registration` whose
 *    authorization code is being reset, in the format `projects/ * /locations/
 *    * /registrations/ *`.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsResetAuthorizationCode
 */
+ (instancetype)queryWithObject:(GTLRCloudDomains_ResetAuthorizationCodeRequest *)object
                   registration:(NSString *)registration;

@end

/**
 *  Gets the authorization code of the `Registration` for the purpose of
 *  transferring the domain to another registrar. You can call this method only
 *  after 60 days have elapsed since the initial domain registration.
 *
 *  Method: domains.projects.locations.registrations.retrieveAuthorizationCode
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsRetrieveAuthorizationCode : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsRegistrationsRetrieveAuthorizationCodeWithregistration:]

/**
 *  Required. The name of the `Registration` whose authorization code is being
 *  retrieved, in the format `projects/ * /locations/ * /registrations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *registration;

/**
 *  Fetches a @c GTLRCloudDomains_AuthorizationCode.
 *
 *  Gets the authorization code of the `Registration` for the purpose of
 *  transferring the domain to another registrar. You can call this method only
 *  after 60 days have elapsed since the initial domain registration.
 *
 *  @param registration Required. The name of the `Registration` whose
 *    authorization code is being retrieved, in the format `projects/ *
 *    /locations/ * /registrations/ *`.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsRetrieveAuthorizationCode
 */
+ (instancetype)queryWithRegistration:(NSString *)registration;

@end

/**
 *  Gets parameters needed to register a new domain name, including price and
 *  up-to-date availability. Use the returned values to call `RegisterDomain`.
 *
 *  Method: domains.projects.locations.registrations.retrieveRegisterParameters
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsRetrieveRegisterParameters : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsRegistrationsRetrieveRegisterParametersWithlocation:]

/**
 *  Required. The domain name. Unicode domain names must be expressed in
 *  Punycode format.
 */
@property(nonatomic, copy, nullable) NSString *domainName;

/**
 *  Required. The location. Must be in the format `projects/ * /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Fetches a @c GTLRCloudDomains_RetrieveRegisterParametersResponse.
 *
 *  Gets parameters needed to register a new domain name, including price and
 *  up-to-date availability. Use the returned values to call `RegisterDomain`.
 *
 *  @param location Required. The location. Must be in the format `projects/ *
 *    /locations/ *`.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsRetrieveRegisterParameters
 */
+ (instancetype)queryWithLocation:(NSString *)location;

@end

/**
 *  Searches for available domain names similar to the provided query.
 *  Availability results from this method are approximate; call
 *  `RetrieveRegisterParameters` on a domain before registering to confirm
 *  availability.
 *
 *  Method: domains.projects.locations.registrations.searchDomains
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsSearchDomains : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsRegistrationsSearchDomainsWithlocation:]

/**
 *  Required. The location. Must be in the format `projects/ * /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *location;

/** Required. String used to search for available domain names. */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Fetches a @c GTLRCloudDomains_SearchDomainsResponse.
 *
 *  Searches for available domain names similar to the provided query.
 *  Availability results from this method are approximate; call
 *  `RetrieveRegisterParameters` on a domain before registering to confirm
 *  availability.
 *
 *  @param location Required. The location. Must be in the format `projects/ *
 *    /locations/ *`.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsSearchDomains
 */
+ (instancetype)queryWithLocation:(NSString *)location;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: domains.projects.locations.registrations.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsSetIamPolicy : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsRegistrationsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudDomains_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRCloudDomains_SetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudDomains_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: domains.projects.locations.registrations.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudDomainsCloudPlatform
 */
@interface GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsTestIamPermissions : GTLRCloudDomainsQuery
// Previous library name was
//   +[GTLQueryCloudDomains queryForProjectsLocationsRegistrationsTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudDomains_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRCloudDomains_TestIamPermissionsRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudDomains_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
