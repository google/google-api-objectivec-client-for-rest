// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Access Context Manager API (accesscontextmanager/v1beta)
// Description:
//   An API for setting attribute based access control to requests to GCP
//   services.
// Documentation:
//   https://cloud.google.com/access-context-manager/docs/reference/rest/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAccessContextManager_AccessLevel;
@class GTLRAccessContextManager_AccessPolicy;
@class GTLRAccessContextManager_ServicePerimeter;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// accessLevelFormat

/** Value: "AS_DEFINED" */
GTLR_EXTERN NSString * const kGTLRAccessContextManagerAccessLevelFormatAsDefined;
/** Value: "CEL" */
GTLR_EXTERN NSString * const kGTLRAccessContextManagerAccessLevelFormatCel;
/** Value: "LEVEL_FORMAT_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRAccessContextManagerAccessLevelFormatLevelFormatUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Access Context Manager query classes.
 */
@interface GTLRAccessContextManagerQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Create an Access Level. The longrunning
 *  operation from this RPC will have a successful status once the Access
 *  Level has
 *  propagated to long-lasting storage. Access Levels containing
 *  errors will result in an error response for the first error encountered.
 *
 *  Method: accesscontextmanager.accessPolicies.accessLevels.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessContextManagerCloudPlatform
 */
@interface GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsCreate : GTLRAccessContextManagerQuery
// Previous library name was
//   +[GTLQueryAccessContextManager queryForAccessPoliciesAccessLevelsCreateWithObject:parent:]

/**
 *  Required. Resource name for the access policy which owns this Access
 *  Level.
 *  Format: `accessPolicies/{policy_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAccessContextManager_Operation.
 *
 *  Create an Access Level. The longrunning
 *  operation from this RPC will have a successful status once the Access
 *  Level has
 *  propagated to long-lasting storage. Access Levels containing
 *  errors will result in an error response for the first error encountered.
 *
 *  @param object The @c GTLRAccessContextManager_AccessLevel to include in the
 *    query.
 *  @param parent Required. Resource name for the access policy which owns this
 *    Access
 *    Level.
 *    Format: `accessPolicies/{policy_id}`
 *
 *  @return GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsCreate
 */
+ (instancetype)queryWithObject:(GTLRAccessContextManager_AccessLevel *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete an Access Level by resource
 *  name. The longrunning operation from this RPC will have a successful status
 *  once the Access Level has been removed
 *  from long-lasting storage.
 *
 *  Method: accesscontextmanager.accessPolicies.accessLevels.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessContextManagerCloudPlatform
 */
@interface GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsDelete : GTLRAccessContextManagerQuery
// Previous library name was
//   +[GTLQueryAccessContextManager queryForAccessPoliciesAccessLevelsDeleteWithname:]

/**
 *  Required. Resource name for the Access Level.
 *  Format:
 *  `accessPolicies/{policy_id}/accessLevels/{access_level_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessContextManager_Operation.
 *
 *  Delete an Access Level by resource
 *  name. The longrunning operation from this RPC will have a successful status
 *  once the Access Level has been removed
 *  from long-lasting storage.
 *
 *  @param name Required. Resource name for the Access Level.
 *    Format:
 *    `accessPolicies/{policy_id}/accessLevels/{access_level_id}`
 *
 *  @return GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get an Access Level by resource
 *  name.
 *
 *  Method: accesscontextmanager.accessPolicies.accessLevels.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessContextManagerCloudPlatform
 */
@interface GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsGet : GTLRAccessContextManagerQuery
// Previous library name was
//   +[GTLQueryAccessContextManager queryForAccessPoliciesAccessLevelsGetWithname:]

/**
 *  Whether to return `BasicLevels` in the Cloud Common Expression
 *  Language rather than as `BasicLevels`. Defaults to AS_DEFINED, where
 *  Access Levels
 *  are returned as `BasicLevels` or `CustomLevels` based on how they were
 *  created. If set to CEL, all Access Levels are returned as
 *  `CustomLevels`. In the CEL case, `BasicLevels` are translated to equivalent
 *  `CustomLevels`.
 *
 *  Likely values:
 *    @arg @c kGTLRAccessContextManagerAccessLevelFormatLevelFormatUnspecified
 *        Value "LEVEL_FORMAT_UNSPECIFIED"
 *    @arg @c kGTLRAccessContextManagerAccessLevelFormatAsDefined Value
 *        "AS_DEFINED"
 *    @arg @c kGTLRAccessContextManagerAccessLevelFormatCel Value "CEL"
 */
@property(nonatomic, copy, nullable) NSString *accessLevelFormat;

/**
 *  Required. Resource name for the Access Level.
 *  Format:
 *  `accessPolicies/{policy_id}/accessLevels/{access_level_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessContextManager_AccessLevel.
 *
 *  Get an Access Level by resource
 *  name.
 *
 *  @param name Required. Resource name for the Access Level.
 *    Format:
 *    `accessPolicies/{policy_id}/accessLevels/{access_level_id}`
 *
 *  @return GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List all Access Levels for an access
 *  policy.
 *
 *  Method: accesscontextmanager.accessPolicies.accessLevels.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessContextManagerCloudPlatform
 */
@interface GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsList : GTLRAccessContextManagerQuery
// Previous library name was
//   +[GTLQueryAccessContextManager queryForAccessPoliciesAccessLevelsListWithparent:]

/**
 *  Whether to return `BasicLevels` in the Cloud Common Expression language, as
 *  `CustomLevels`, rather than as `BasicLevels`. Defaults to returning
 *  `AccessLevels` in the format they were defined.
 *
 *  Likely values:
 *    @arg @c kGTLRAccessContextManagerAccessLevelFormatLevelFormatUnspecified
 *        Value "LEVEL_FORMAT_UNSPECIFIED"
 *    @arg @c kGTLRAccessContextManagerAccessLevelFormatAsDefined Value
 *        "AS_DEFINED"
 *    @arg @c kGTLRAccessContextManagerAccessLevelFormatCel Value "CEL"
 */
@property(nonatomic, copy, nullable) NSString *accessLevelFormat;

/**
 *  Number of Access Levels to include in
 *  the list. Default 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Next page token for the next batch of Access Level instances.
 *  Defaults to the first page of results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Resource name for the access policy to list Access Levels from.
 *  Format:
 *  `accessPolicies/{policy_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAccessContextManager_ListAccessLevelsResponse.
 *
 *  List all Access Levels for an access
 *  policy.
 *
 *  @param parent Required. Resource name for the access policy to list Access
 *    Levels from.
 *    Format:
 *    `accessPolicies/{policy_id}`
 *
 *  @return GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update an Access Level. The longrunning
 *  operation from this RPC will have a successful status once the changes to
 *  the Access Level have propagated
 *  to long-lasting storage. Access Levels containing
 *  errors will result in an error response for the first error encountered.
 *
 *  Method: accesscontextmanager.accessPolicies.accessLevels.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessContextManagerCloudPlatform
 */
@interface GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsPatch : GTLRAccessContextManagerQuery
// Previous library name was
//   +[GTLQueryAccessContextManager queryForAccessPoliciesAccessLevelsPatchWithObject:name:]

/**
 *  Required. Resource name for the Access Level. The `short_name` component
 *  must begin with a letter and only include alphanumeric and '_'. Format:
 *  `accessPolicies/{policy_id}/accessLevels/{short_name}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Mask to control which fields get updated. Must be non-empty.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAccessContextManager_Operation.
 *
 *  Update an Access Level. The longrunning
 *  operation from this RPC will have a successful status once the changes to
 *  the Access Level have propagated
 *  to long-lasting storage. Access Levels containing
 *  errors will result in an error response for the first error encountered.
 *
 *  @param object The @c GTLRAccessContextManager_AccessLevel to include in the
 *    query.
 *  @param name Required. Resource name for the Access Level. The `short_name`
 *    component
 *    must begin with a letter and only include alphanumeric and '_'. Format:
 *    `accessPolicies/{policy_id}/accessLevels/{short_name}`
 *
 *  @return GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsPatch
 */
+ (instancetype)queryWithObject:(GTLRAccessContextManager_AccessLevel *)object
                           name:(NSString *)name;

@end

/**
 *  Create an `AccessPolicy`. Fails if this organization already has a
 *  `AccessPolicy`. The longrunning Operation will have a successful status
 *  once the `AccessPolicy` has propagated to long-lasting storage.
 *  Syntactic and basic semantic errors will be returned in `metadata` as a
 *  BadRequest proto.
 *
 *  Method: accesscontextmanager.accessPolicies.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessContextManagerCloudPlatform
 */
@interface GTLRAccessContextManagerQuery_AccessPoliciesCreate : GTLRAccessContextManagerQuery
// Previous library name was
//   +[GTLQueryAccessContextManager queryForAccessPoliciesCreateWithObject:]

/**
 *  Fetches a @c GTLRAccessContextManager_Operation.
 *
 *  Create an `AccessPolicy`. Fails if this organization already has a
 *  `AccessPolicy`. The longrunning Operation will have a successful status
 *  once the `AccessPolicy` has propagated to long-lasting storage.
 *  Syntactic and basic semantic errors will be returned in `metadata` as a
 *  BadRequest proto.
 *
 *  @param object The @c GTLRAccessContextManager_AccessPolicy to include in the
 *    query.
 *
 *  @return GTLRAccessContextManagerQuery_AccessPoliciesCreate
 */
+ (instancetype)queryWithObject:(GTLRAccessContextManager_AccessPolicy *)object;

@end

/**
 *  Delete an AccessPolicy by resource
 *  name. The longrunning Operation will have a successful status once the
 *  AccessPolicy
 *  has been removed from long-lasting storage.
 *
 *  Method: accesscontextmanager.accessPolicies.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessContextManagerCloudPlatform
 */
@interface GTLRAccessContextManagerQuery_AccessPoliciesDelete : GTLRAccessContextManagerQuery
// Previous library name was
//   +[GTLQueryAccessContextManager queryForAccessPoliciesDeleteWithname:]

/**
 *  Required. Resource name for the access policy to delete.
 *  Format `accessPolicies/{policy_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessContextManager_Operation.
 *
 *  Delete an AccessPolicy by resource
 *  name. The longrunning Operation will have a successful status once the
 *  AccessPolicy
 *  has been removed from long-lasting storage.
 *
 *  @param name Required. Resource name for the access policy to delete.
 *    Format `accessPolicies/{policy_id}`
 *
 *  @return GTLRAccessContextManagerQuery_AccessPoliciesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get an AccessPolicy by name.
 *
 *  Method: accesscontextmanager.accessPolicies.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessContextManagerCloudPlatform
 */
@interface GTLRAccessContextManagerQuery_AccessPoliciesGet : GTLRAccessContextManagerQuery
// Previous library name was
//   +[GTLQueryAccessContextManager queryForAccessPoliciesGetWithname:]

/**
 *  Required. Resource name for the access policy to get.
 *  Format `accessPolicies/{policy_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessContextManager_AccessPolicy.
 *
 *  Get an AccessPolicy by name.
 *
 *  @param name Required. Resource name for the access policy to get.
 *    Format `accessPolicies/{policy_id}`
 *
 *  @return GTLRAccessContextManagerQuery_AccessPoliciesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List all AccessPolicies under a
 *  container.
 *
 *  Method: accesscontextmanager.accessPolicies.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessContextManagerCloudPlatform
 */
@interface GTLRAccessContextManagerQuery_AccessPoliciesList : GTLRAccessContextManagerQuery
// Previous library name was
//   +[GTLQueryAccessContextManager queryForAccessPoliciesList]

/** Number of AccessPolicy instances to include in the list. Default 100. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Next page token for the next batch of AccessPolicy instances. Defaults to
 *  the first page of results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Resource name for the container to list AccessPolicy instances
 *  from.
 *  Format:
 *  `organizations/{org_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAccessContextManager_ListAccessPoliciesResponse.
 *
 *  List all AccessPolicies under a
 *  container.
 *
 *  @return GTLRAccessContextManagerQuery_AccessPoliciesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Update an AccessPolicy. The
 *  longrunning Operation from this RPC will have a successful status once the
 *  changes to the AccessPolicy have propagated
 *  to long-lasting storage. Syntactic and basic semantic errors will be
 *  returned in `metadata` as a BadRequest proto.
 *
 *  Method: accesscontextmanager.accessPolicies.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessContextManagerCloudPlatform
 */
@interface GTLRAccessContextManagerQuery_AccessPoliciesPatch : GTLRAccessContextManagerQuery
// Previous library name was
//   +[GTLQueryAccessContextManager queryForAccessPoliciesPatchWithObject:name:]

/**
 *  Output only. Resource name of the `AccessPolicy`. Format:
 *  `accessPolicies/{policy_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Mask to control which fields get updated. Must be non-empty.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAccessContextManager_Operation.
 *
 *  Update an AccessPolicy. The
 *  longrunning Operation from this RPC will have a successful status once the
 *  changes to the AccessPolicy have propagated
 *  to long-lasting storage. Syntactic and basic semantic errors will be
 *  returned in `metadata` as a BadRequest proto.
 *
 *  @param object The @c GTLRAccessContextManager_AccessPolicy to include in the
 *    query.
 *  @param name Output only. Resource name of the `AccessPolicy`. Format:
 *    `accessPolicies/{policy_id}`
 *
 *  @return GTLRAccessContextManagerQuery_AccessPoliciesPatch
 */
+ (instancetype)queryWithObject:(GTLRAccessContextManager_AccessPolicy *)object
                           name:(NSString *)name;

@end

/**
 *  Create an Service Perimeter. The
 *  longrunning operation from this RPC will have a successful status once the
 *  Service Perimeter has
 *  propagated to long-lasting storage. Service Perimeters containing
 *  errors will result in an error response for the first error encountered.
 *
 *  Method: accesscontextmanager.accessPolicies.servicePerimeters.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessContextManagerCloudPlatform
 */
@interface GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersCreate : GTLRAccessContextManagerQuery
// Previous library name was
//   +[GTLQueryAccessContextManager queryForAccessPoliciesServicePerimetersCreateWithObject:parent:]

/**
 *  Required. Resource name for the access policy which owns this Service
 *  Perimeter.
 *  Format: `accessPolicies/{policy_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAccessContextManager_Operation.
 *
 *  Create an Service Perimeter. The
 *  longrunning operation from this RPC will have a successful status once the
 *  Service Perimeter has
 *  propagated to long-lasting storage. Service Perimeters containing
 *  errors will result in an error response for the first error encountered.
 *
 *  @param object The @c GTLRAccessContextManager_ServicePerimeter to include in
 *    the query.
 *  @param parent Required. Resource name for the access policy which owns this
 *    Service
 *    Perimeter.
 *    Format: `accessPolicies/{policy_id}`
 *
 *  @return GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersCreate
 */
+ (instancetype)queryWithObject:(GTLRAccessContextManager_ServicePerimeter *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete an Service Perimeter by resource
 *  name. The longrunning operation from this RPC will have a successful status
 *  once the Service Perimeter has been
 *  removed from long-lasting storage.
 *
 *  Method: accesscontextmanager.accessPolicies.servicePerimeters.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessContextManagerCloudPlatform
 */
@interface GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersDelete : GTLRAccessContextManagerQuery
// Previous library name was
//   +[GTLQueryAccessContextManager queryForAccessPoliciesServicePerimetersDeleteWithname:]

/**
 *  Required. Resource name for the Service Perimeter.
 *  Format:
 *  `accessPolicies/{policy_id}/servicePerimeters/{service_perimeter_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessContextManager_Operation.
 *
 *  Delete an Service Perimeter by resource
 *  name. The longrunning operation from this RPC will have a successful status
 *  once the Service Perimeter has been
 *  removed from long-lasting storage.
 *
 *  @param name Required. Resource name for the Service Perimeter.
 *    Format:
 *    `accessPolicies/{policy_id}/servicePerimeters/{service_perimeter_id}`
 *
 *  @return GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get an Service Perimeter by resource
 *  name.
 *
 *  Method: accesscontextmanager.accessPolicies.servicePerimeters.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessContextManagerCloudPlatform
 */
@interface GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersGet : GTLRAccessContextManagerQuery
// Previous library name was
//   +[GTLQueryAccessContextManager queryForAccessPoliciesServicePerimetersGetWithname:]

/**
 *  Required. Resource name for the Service Perimeter.
 *  Format:
 *  `accessPolicies/{policy_id}/servicePerimeters/{service_perimeters_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessContextManager_ServicePerimeter.
 *
 *  Get an Service Perimeter by resource
 *  name.
 *
 *  @param name Required. Resource name for the Service Perimeter.
 *    Format:
 *    `accessPolicies/{policy_id}/servicePerimeters/{service_perimeters_id}`
 *
 *  @return GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List all Service Perimeters for an
 *  access policy.
 *
 *  Method: accesscontextmanager.accessPolicies.servicePerimeters.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessContextManagerCloudPlatform
 */
@interface GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersList : GTLRAccessContextManagerQuery
// Previous library name was
//   +[GTLQueryAccessContextManager queryForAccessPoliciesServicePerimetersListWithparent:]

/**
 *  Number of Service Perimeters to include
 *  in the list. Default 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Next page token for the next batch of Service Perimeter instances.
 *  Defaults to the first page of results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Resource name for the access policy to list Service Perimeters
 *  from.
 *  Format:
 *  `accessPolicies/{policy_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAccessContextManager_ListServicePerimetersResponse.
 *
 *  List all Service Perimeters for an
 *  access policy.
 *
 *  @param parent Required. Resource name for the access policy to list Service
 *    Perimeters from.
 *    Format:
 *    `accessPolicies/{policy_id}`
 *
 *  @return GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update an Service Perimeter. The
 *  longrunning operation from this RPC will have a successful status once the
 *  changes to the Service Perimeter have
 *  propagated to long-lasting storage. Service Perimeter containing
 *  errors will result in an error response for the first error encountered.
 *
 *  Method: accesscontextmanager.accessPolicies.servicePerimeters.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessContextManagerCloudPlatform
 */
@interface GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersPatch : GTLRAccessContextManagerQuery
// Previous library name was
//   +[GTLQueryAccessContextManager queryForAccessPoliciesServicePerimetersPatchWithObject:name:]

/**
 *  Required. Resource name for the ServicePerimeter. The `short_name`
 *  component must begin with a letter and only include alphanumeric and '_'.
 *  Format: `accessPolicies/{policy_id}/servicePerimeters/{short_name}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Mask to control which fields get updated. Must be non-empty.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAccessContextManager_Operation.
 *
 *  Update an Service Perimeter. The
 *  longrunning operation from this RPC will have a successful status once the
 *  changes to the Service Perimeter have
 *  propagated to long-lasting storage. Service Perimeter containing
 *  errors will result in an error response for the first error encountered.
 *
 *  @param object The @c GTLRAccessContextManager_ServicePerimeter to include in
 *    the query.
 *  @param name Required. Resource name for the ServicePerimeter. The
 *    `short_name`
 *    component must begin with a letter and only include alphanumeric and '_'.
 *    Format: `accessPolicies/{policy_id}/servicePerimeters/{short_name}`
 *
 *  @return GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersPatch
 */
+ (instancetype)queryWithObject:(GTLRAccessContextManager_ServicePerimeter *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: accesscontextmanager.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAccessContextManagerCloudPlatform
 */
@interface GTLRAccessContextManagerQuery_OperationsGet : GTLRAccessContextManagerQuery
// Previous library name was
//   +[GTLQueryAccessContextManager queryForOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAccessContextManager_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRAccessContextManagerQuery_OperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
