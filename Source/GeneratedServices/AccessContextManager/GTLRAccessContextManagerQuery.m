// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Access Context Manager API (accesscontextmanager/v1beta)
// Description:
//   An API for setting attribute based access control to requests to GCP
//   services.
// Documentation:
//   https://cloud.google.com/access-context-manager/docs/reference/rest/

#import "GTLRAccessContextManagerQuery.h"

#import "GTLRAccessContextManagerObjects.h"

// ----------------------------------------------------------------------------
// Constants

// accessLevelFormat
NSString * const kGTLRAccessContextManagerAccessLevelFormatAsDefined = @"AS_DEFINED";
NSString * const kGTLRAccessContextManagerAccessLevelFormatCel = @"CEL";
NSString * const kGTLRAccessContextManagerAccessLevelFormatLevelFormatUnspecified = @"LEVEL_FORMAT_UNSPECIFIED";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRAccessContextManagerQuery

@dynamic fields;

@end

@implementation GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRAccessContextManager_AccessLevel *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/accessLevels";
  GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRAccessContextManager_Operation class];
  query.loggingName = @"accesscontextmanager.accessPolicies.accessLevels.create";
  return query;
}

@end

@implementation GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAccessContextManager_Operation class];
  query.loggingName = @"accesscontextmanager.accessPolicies.accessLevels.delete";
  return query;
}

@end

@implementation GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsGet

@dynamic accessLevelFormat, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAccessContextManager_AccessLevel class];
  query.loggingName = @"accesscontextmanager.accessPolicies.accessLevels.get";
  return query;
}

@end

@implementation GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsList

@dynamic accessLevelFormat, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/accessLevels";
  GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRAccessContextManager_ListAccessLevelsResponse class];
  query.loggingName = @"accesscontextmanager.accessPolicies.accessLevels.list";
  return query;
}

@end

@implementation GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRAccessContextManager_AccessLevel *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRAccessContextManagerQuery_AccessPoliciesAccessLevelsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAccessContextManager_Operation class];
  query.loggingName = @"accesscontextmanager.accessPolicies.accessLevels.patch";
  return query;
}

@end

@implementation GTLRAccessContextManagerQuery_AccessPoliciesCreate

+ (instancetype)queryWithObject:(GTLRAccessContextManager_AccessPolicy *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1beta/accessPolicies";
  GTLRAccessContextManagerQuery_AccessPoliciesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRAccessContextManager_Operation class];
  query.loggingName = @"accesscontextmanager.accessPolicies.create";
  return query;
}

@end

@implementation GTLRAccessContextManagerQuery_AccessPoliciesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRAccessContextManagerQuery_AccessPoliciesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAccessContextManager_Operation class];
  query.loggingName = @"accesscontextmanager.accessPolicies.delete";
  return query;
}

@end

@implementation GTLRAccessContextManagerQuery_AccessPoliciesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRAccessContextManagerQuery_AccessPoliciesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAccessContextManager_AccessPolicy class];
  query.loggingName = @"accesscontextmanager.accessPolicies.get";
  return query;
}

@end

@implementation GTLRAccessContextManagerQuery_AccessPoliciesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)query {
  NSString *pathURITemplate = @"v1beta/accessPolicies";
  GTLRAccessContextManagerQuery_AccessPoliciesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRAccessContextManager_ListAccessPoliciesResponse class];
  query.loggingName = @"accesscontextmanager.accessPolicies.list";
  return query;
}

@end

@implementation GTLRAccessContextManagerQuery_AccessPoliciesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRAccessContextManager_AccessPolicy *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRAccessContextManagerQuery_AccessPoliciesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAccessContextManager_Operation class];
  query.loggingName = @"accesscontextmanager.accessPolicies.patch";
  return query;
}

@end

@implementation GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRAccessContextManager_ServicePerimeter *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/servicePerimeters";
  GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRAccessContextManager_Operation class];
  query.loggingName = @"accesscontextmanager.accessPolicies.servicePerimeters.create";
  return query;
}

@end

@implementation GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAccessContextManager_Operation class];
  query.loggingName = @"accesscontextmanager.accessPolicies.servicePerimeters.delete";
  return query;
}

@end

@implementation GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAccessContextManager_ServicePerimeter class];
  query.loggingName = @"accesscontextmanager.accessPolicies.servicePerimeters.get";
  return query;
}

@end

@implementation GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/servicePerimeters";
  GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRAccessContextManager_ListServicePerimetersResponse class];
  query.loggingName = @"accesscontextmanager.accessPolicies.servicePerimeters.list";
  return query;
}

@end

@implementation GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRAccessContextManager_ServicePerimeter *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRAccessContextManagerQuery_AccessPoliciesServicePerimetersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAccessContextManager_Operation class];
  query.loggingName = @"accesscontextmanager.accessPolicies.servicePerimeters.patch";
  return query;
}

@end

@implementation GTLRAccessContextManagerQuery_OperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRAccessContextManagerQuery_OperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAccessContextManager_Operation class];
  query.loggingName = @"accesscontextmanager.operations.get";
  return query;
}

@end
