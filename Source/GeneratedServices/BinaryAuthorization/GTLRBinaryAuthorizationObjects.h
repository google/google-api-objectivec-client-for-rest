// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Binary Authorization API (binaryauthorization/v1beta1)
// Description:
//   The management interface for Binary Authorization, a system providing
//   policy control for images deployed to Kubernetes Engine clusters.
// Documentation:
//   https://cloud.google.com/binary-authorization/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRBinaryAuthorization_AdmissionRule;
@class GTLRBinaryAuthorization_AdmissionWhitelistPattern;
@class GTLRBinaryAuthorization_Attestor;
@class GTLRBinaryAuthorization_AttestorPublicKey;
@class GTLRBinaryAuthorization_Binding;
@class GTLRBinaryAuthorization_Expr;
@class GTLRBinaryAuthorization_IamPolicy;
@class GTLRBinaryAuthorization_Policy_ClusterAdmissionRules;
@class GTLRBinaryAuthorization_UserOwnedDrydockNote;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRBinaryAuthorization_AdmissionRule.enforcementMode

/**
 *  Enforce the admission rule by blocking the pod creation.
 *
 *  Value: "ENFORCED_BLOCK_AND_AUDIT_LOG"
 */
GTLR_EXTERN NSString * const kGTLRBinaryAuthorization_AdmissionRule_EnforcementMode_EnforcedBlockAndAuditLog;
/**
 *  Mandatory.
 *
 *  Value: "ENFORCEMENT_MODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRBinaryAuthorization_AdmissionRule_EnforcementMode_EnforcementModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBinaryAuthorization_AdmissionRule.evaluationMode

/**
 *  This rule allows all all pod creations.
 *
 *  Value: "ALWAYS_ALLOW"
 */
GTLR_EXTERN NSString * const kGTLRBinaryAuthorization_AdmissionRule_EvaluationMode_AlwaysAllow;
/**
 *  This rule denies all pod creations.
 *
 *  Value: "ALWAYS_DENY"
 */
GTLR_EXTERN NSString * const kGTLRBinaryAuthorization_AdmissionRule_EvaluationMode_AlwaysDeny;
/**
 *  Mandatory.
 *
 *  Value: "EVALUATION_MODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRBinaryAuthorization_AdmissionRule_EvaluationMode_EvaluationModeUnspecified;
/**
 *  This rule allows a pod creation if all the attestors listed in
 *  'require_attestations_by' have valid attestations for all of the
 *  images in the pod spec.
 *
 *  Value: "REQUIRE_ATTESTATION"
 */
GTLR_EXTERN NSString * const kGTLRBinaryAuthorization_AdmissionRule_EvaluationMode_RequireAttestation;

/**
 *  An admission rule specifies either that all container images
 *  used in a pod creation request must be attested to by one or more
 *  attestors, that all pod creations will be allowed, or that all
 *  pod creations will be denied.
 *  Images matching an admission whitelist pattern
 *  are exempted from admission rules and will never block a pod creation.
 */
@interface GTLRBinaryAuthorization_AdmissionRule : GTLRObject

/**
 *  Required. The action when a pod creation is denied by the admission rule.
 *
 *  Likely values:
 *    @arg @c kGTLRBinaryAuthorization_AdmissionRule_EnforcementMode_EnforcedBlockAndAuditLog
 *        Enforce the admission rule by blocking the pod creation. (Value:
 *        "ENFORCED_BLOCK_AND_AUDIT_LOG")
 *    @arg @c kGTLRBinaryAuthorization_AdmissionRule_EnforcementMode_EnforcementModeUnspecified
 *        Mandatory. (Value: "ENFORCEMENT_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *enforcementMode;

/**
 *  Required. How this admission rule will be evaluated.
 *
 *  Likely values:
 *    @arg @c kGTLRBinaryAuthorization_AdmissionRule_EvaluationMode_AlwaysAllow
 *        This rule allows all all pod creations. (Value: "ALWAYS_ALLOW")
 *    @arg @c kGTLRBinaryAuthorization_AdmissionRule_EvaluationMode_AlwaysDeny
 *        This rule denies all pod creations. (Value: "ALWAYS_DENY")
 *    @arg @c kGTLRBinaryAuthorization_AdmissionRule_EvaluationMode_EvaluationModeUnspecified
 *        Mandatory. (Value: "EVALUATION_MODE_UNSPECIFIED")
 *    @arg @c kGTLRBinaryAuthorization_AdmissionRule_EvaluationMode_RequireAttestation
 *        This rule allows a pod creation if all the attestors listed in
 *        'require_attestations_by' have valid attestations for all of the
 *        images in the pod spec. (Value: "REQUIRE_ATTESTATION")
 */
@property(nonatomic, copy, nullable) NSString *evaluationMode;

/**
 *  Optional. The resource names of the attestors that must attest to
 *  a container image, in the format `projects/ * /attestors/ *`. Each
 *  attestor must exist before a policy can reference it. To add an attestor
 *  to a policy the principal issuing the policy change request must be able
 *  to read the attestor resource.
 *  Note: this field must be non-empty when the evaluation_mode field specifies
 *  REQUIRE_ATTESTATION, otherwise it must be empty.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requireAttestationsBy;

@end


/**
 *  An admission whitelist pattern exempts images
 *  from checks by admission rules.
 */
@interface GTLRBinaryAuthorization_AdmissionWhitelistPattern : GTLRObject

/**
 *  An image name pattern to whitelist, in the form `registry/path/to/image`.
 *  This supports a trailing `*` as a wildcard, but this is allowed only in
 *  text after the `registry/` part.
 */
@property(nonatomic, copy, nullable) NSString *namePattern;

@end


/**
 *  An attestor that attests to container image
 *  artifacts. An existing attestor cannot be modified except where
 *  indicated.
 */
@interface GTLRBinaryAuthorization_Attestor : GTLRObject

/**
 *  Optional. A descriptive comment. This field may be updated.
 *  The field may be displayed in chooser dialogs.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Required. The resource name, in the format:
 *  `projects/ * /attestors/ *`. This field may not be updated.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. Time when the attestor was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** A Drydock ATTESTATION_AUTHORITY Note, created by the user. */
@property(nonatomic, strong, nullable) GTLRBinaryAuthorization_UserOwnedDrydockNote *userOwnedDrydockNote;

@end


/**
 *  An attestator public key that will be used to
 *  verify attestations signed by this attestor.
 */
@interface GTLRBinaryAuthorization_AttestorPublicKey : GTLRObject

/**
 *  ASCII-armored representation of a PGP public key, as the entire output by
 *  the command `gpg --export --armor foo\@example.com` (either LF or CRLF
 *  line endings).
 */
@property(nonatomic, copy, nullable) NSString *asciiArmoredPgpPublicKey;

/** Optional. A descriptive comment. This field may be updated. */
@property(nonatomic, copy, nullable) NSString *comment;

/**
 *  Output only. This field will be overwritten with key ID information, for
 *  example, an identifier extracted from a PGP public key. This field may not
 *  be updated.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  Associates `members` with a `role`.
 */
@interface GTLRBinaryAuthorization_Binding : GTLRObject

/**
 *  Unimplemented. The condition that is associated with this binding.
 *  NOTE: an unsatisfied condition will not allow user access via current
 *  binding. Different bindings, including their conditions, are examined
 *  independently.
 */
@property(nonatomic, strong, nullable) GTLRBinaryAuthorization_Expr *condition;

/**
 *  Specifies the identities requesting access for a Cloud Platform resource.
 *  `members` can have the following values:
 *  * `allUsers`: A special identifier that represents anyone who is
 *  on the internet; with or without a Google account.
 *  * `allAuthenticatedUsers`: A special identifier that represents anyone
 *  who is authenticated with a Google account or a service account.
 *  * `user:{emailid}`: An email address that represents a specific Google
 *  account. For example, `alice\@gmail.com` .
 *  * `serviceAccount:{emailid}`: An email address that represents a service
 *  account. For example, `my-other-app\@appspot.gserviceaccount.com`.
 *  * `group:{emailid}`: An email address that represents a Google group.
 *  For example, `admins\@example.com`.
 *  * `domain:{domain}`: A Google Apps domain name that represents all the
 *  users of that domain. For example, `google.com` or `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to `members`.
 *  For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRBinaryAuthorization_Empty : GTLRObject
@end


/**
 *  Represents an expression text. Example:
 *  title: "User account presence"
 *  description: "Determines whether the request has a user account"
 *  expression: "size(request.user) > 0"
 */
@interface GTLRBinaryAuthorization_Expr : GTLRObject

/**
 *  An optional description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in
 *  Common Expression Language syntax.
 *  The application context of the containing message determines which
 *  well-known feature set of CEL is supported.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  An optional string indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  An optional title for the expression, i.e. a short string describing
 *  its purpose. This can be used e.g. in UIs which allow to enter the
 *  expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Defines an Identity and Access Management (IAM) policy. It is used to
 *  specify access control policies for Cloud Platform resources.
 *  A `Policy` consists of a list of `bindings`. A `binding` binds a list of
 *  `members` to a `role`, where the members can be user accounts, Google
 *  groups,
 *  Google domains, and service accounts. A `role` is a named list of
 *  permissions
 *  defined by IAM.
 *  **JSON Example**
 *  {
 *  "bindings": [
 *  {
 *  "role": "roles/owner",
 *  "members": [
 *  "user:mike\@example.com",
 *  "group:admins\@example.com",
 *  "domain:google.com",
 *  "serviceAccount:my-other-app\@appspot.gserviceaccount.com"
 *  ]
 *  },
 *  {
 *  "role": "roles/viewer",
 *  "members": ["user:sean\@example.com"]
 *  }
 *  ]
 *  }
 *  **YAML Example**
 *  bindings:
 *  - members:
 *  - user:mike\@example.com
 *  - group:admins\@example.com
 *  - domain:google.com
 *  - serviceAccount:my-other-app\@appspot.gserviceaccount.com
 *  role: roles/owner
 *  - members:
 *  - user:sean\@example.com
 *  role: roles/viewer
 *  For a description of IAM and its features, see the
 *  [IAM developer's guide](https://cloud.google.com/iam/docs).
 */
@interface GTLRBinaryAuthorization_IamPolicy : GTLRObject

/**
 *  Associates a list of `members` to a `role`.
 *  `bindings` with no members will result in an error.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBinaryAuthorization_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help
 *  prevent simultaneous updates of a policy from overwriting each other.
 *  It is strongly suggested that systems make use of the `etag` in the
 *  read-modify-write cycle to perform policy updates in order to avoid race
 *  conditions: An `etag` is returned in the response to `getIamPolicy`, and
 *  systems are expected to put that etag in the request to `setIamPolicy` to
 *  ensure that their change will be applied to the same version of the policy.
 *  If no `etag` is provided in the call to `setIamPolicy`, then the existing
 *  policy is overwritten blindly.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Deprecated.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Response message for BinauthzManagementService.ListAttestors.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "attestors" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBinaryAuthorization_ListAttestorsResponse : GTLRCollectionObject

/**
 *  The list of attestors.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBinaryAuthorization_Attestor *> *attestors;

/**
 *  A token to retrieve the next page of results. Pass this value in the
 *  ListAttestorsRequest.page_token field in the subsequent call to the
 *  `ListAttestors` method to retrieve the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  A policy for container image binary authorization.
 */
@interface GTLRBinaryAuthorization_Policy : GTLRObject

/**
 *  Optional. Admission policy whitelisting. A matching admission request will
 *  always be permitted. This feature is typically used to exclude Google or
 *  third-party infrastructure images from Binary Authorization policies.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBinaryAuthorization_AdmissionWhitelistPattern *> *admissionWhitelistPatterns;

/**
 *  Optional. Per-cluster admission rules. Cluster spec format:
 *  `location.clusterId`. There can be at most one admission rule per cluster
 *  spec.
 *  A `location` is either a compute zone (e.g. us-central1-a) or a region
 *  (e.g. us-central1).
 *  For `clusterId` syntax restrictions see
 *  https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.
 */
@property(nonatomic, strong, nullable) GTLRBinaryAuthorization_Policy_ClusterAdmissionRules *clusterAdmissionRules;

/**
 *  Required. Default admission rule for a cluster without a per-cluster
 *  admission rule.
 */
@property(nonatomic, strong, nullable) GTLRBinaryAuthorization_AdmissionRule *defaultAdmissionRule;

/**
 *  Optional. A descriptive comment.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. The resource name, in the format `projects/ * /policy`. There
 *  is
 *  at most one policy per project.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. Time when the policy was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Per-cluster admission rules. Cluster spec format:
 *  `location.clusterId`. There can be at most one admission rule per cluster
 *  spec.
 *  A `location` is either a compute zone (e.g. us-central1-a) or a region
 *  (e.g. us-central1).
 *  For `clusterId` syntax restrictions see
 *  https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.
 *
 *  @note This class is documented as having more properties of
 *        GTLRBinaryAuthorization_AdmissionRule. Use @c -additionalJSONKeys and
 *        @c -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRBinaryAuthorization_Policy_ClusterAdmissionRules : GTLRObject
@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRBinaryAuthorization_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a
 *  valid policy but certain Cloud Platform services (such as Projects)
 *  might reject them.
 */
@property(nonatomic, strong, nullable) GTLRBinaryAuthorization_IamPolicy *policy;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRBinaryAuthorization_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as '*' or 'storage.*') are not allowed. For more
 *  information see
 *  [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRBinaryAuthorization_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is
 *  allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  An user owned drydock note references a Drydock
 *  ATTESTATION_AUTHORITY Note created by the user.
 */
@interface GTLRBinaryAuthorization_UserOwnedDrydockNote : GTLRObject

/**
 *  Output only. This field will contain the service account email address
 *  that this Attestor will use as the principal when querying Container
 *  Analysis. Attestor administrators must grant this service account the
 *  IAM role needed to read attestations from the note_reference in
 *  Container Analysis (`containeranalysis.notes.occurrences.viewer`).
 *  This email address is fixed for the lifetime of the Attestor, but callers
 *  should not make any other assumptions about the service account email;
 *  future versions may use an email based on a different naming pattern.
 */
@property(nonatomic, copy, nullable) NSString *delegationServiceAccountEmail;

/**
 *  Required. The Drydock resource name of a ATTESTATION_AUTHORITY Note,
 *  created by the user, in the format: `projects/ * /notes/ *` (or the legacy
 *  `providers/ * /notes/ *`). This field may not be updated.
 *  An attestation by this attestor is stored as a Drydock
 *  ATTESTATION_AUTHORITY Occurrence that names a container image and that
 *  links to this Note. Drydock is an external dependency.
 */
@property(nonatomic, copy, nullable) NSString *noteReference;

/**
 *  Optional. Public keys that verify attestations signed by this
 *  attestor. This field may be updated.
 *  If this field is non-empty, one of the specified public keys must
 *  verify that an attestation was signed by this attestor for the
 *  image specified in the admission request.
 *  If this field is empty, this attestor always returns that no
 *  valid attestations exist.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBinaryAuthorization_AttestorPublicKey *> *publicKeys;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
