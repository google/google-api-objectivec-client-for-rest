// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Binary Authorization API (binaryauthorization/v1beta1)
// Description:
//   The management interface for Binary Authorization, a system providing
//   policy control for images deployed to Kubernetes Engine clusters.
// Documentation:
//   https://cloud.google.com/binary-authorization/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRBinaryAuthorization_Attestor;
@class GTLRBinaryAuthorization_Policy;
@class GTLRBinaryAuthorization_SetIamPolicyRequest;
@class GTLRBinaryAuthorization_TestIamPermissionsRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Binary Authorization query classes.
 */
@interface GTLRBinaryAuthorizationQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates an attestor, and returns a copy of the new
 *  attestor. Returns NOT_FOUND if the project does not exist,
 *  INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the
 *  attestor already exists.
 *
 *  Method: binaryauthorization.projects.attestors.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBinaryAuthorizationCloudPlatform
 */
@interface GTLRBinaryAuthorizationQuery_ProjectsAttestorsCreate : GTLRBinaryAuthorizationQuery
// Previous library name was
//   +[GTLQueryBinaryAuthorization queryForProjectsAttestorsCreateWithObject:parent:]

/** Required. The attestors ID. */
@property(nonatomic, copy, nullable) NSString *attestorId;

/** Required. The parent of this attestor. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBinaryAuthorization_Attestor.
 *
 *  Creates an attestor, and returns a copy of the new
 *  attestor. Returns NOT_FOUND if the project does not exist,
 *  INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the
 *  attestor already exists.
 *
 *  @param object The @c GTLRBinaryAuthorization_Attestor to include in the
 *    query.
 *  @param parent Required. The parent of this attestor.
 *
 *  @return GTLRBinaryAuthorizationQuery_ProjectsAttestorsCreate
 */
+ (instancetype)queryWithObject:(GTLRBinaryAuthorization_Attestor *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an attestor. Returns NOT_FOUND if the
 *  attestor does not exist.
 *
 *  Method: binaryauthorization.projects.attestors.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBinaryAuthorizationCloudPlatform
 */
@interface GTLRBinaryAuthorizationQuery_ProjectsAttestorsDelete : GTLRBinaryAuthorizationQuery
// Previous library name was
//   +[GTLQueryBinaryAuthorization queryForProjectsAttestorsDeleteWithname:]

/**
 *  Required. The name of the attestors to delete, in the format
 *  `projects/ * /attestors/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBinaryAuthorization_Empty.
 *
 *  Deletes an attestor. Returns NOT_FOUND if the
 *  attestor does not exist.
 *
 *  @param name Required. The name of the attestors to delete, in the format
 *    `projects/ * /attestors/ *`.
 *
 *  @return GTLRBinaryAuthorizationQuery_ProjectsAttestorsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets an attestor.
 *  Returns NOT_FOUND if the attestor does not exist.
 *
 *  Method: binaryauthorization.projects.attestors.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBinaryAuthorizationCloudPlatform
 */
@interface GTLRBinaryAuthorizationQuery_ProjectsAttestorsGet : GTLRBinaryAuthorizationQuery
// Previous library name was
//   +[GTLQueryBinaryAuthorization queryForProjectsAttestorsGetWithname:]

/**
 *  Required. The name of the attestor to retrieve, in the format
 *  `projects/ * /attestors/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBinaryAuthorization_Attestor.
 *
 *  Gets an attestor.
 *  Returns NOT_FOUND if the attestor does not exist.
 *
 *  @param name Required. The name of the attestor to retrieve, in the format
 *    `projects/ * /attestors/ *`.
 *
 *  @return GTLRBinaryAuthorizationQuery_ProjectsAttestorsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  Method: binaryauthorization.projects.attestors.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBinaryAuthorizationCloudPlatform
 */
@interface GTLRBinaryAuthorizationQuery_ProjectsAttestorsGetIamPolicy : GTLRBinaryAuthorizationQuery
// Previous library name was
//   +[GTLQueryBinaryAuthorization queryForProjectsAttestorsGetIamPolicyWithresource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBinaryAuthorization_IamPolicy.
 *
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRBinaryAuthorizationQuery_ProjectsAttestorsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists attestors.
 *  Returns INVALID_ARGUMENT if the project does not exist.
 *
 *  Method: binaryauthorization.projects.attestors.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBinaryAuthorizationCloudPlatform
 */
@interface GTLRBinaryAuthorizationQuery_ProjectsAttestorsList : GTLRBinaryAuthorizationQuery
// Previous library name was
//   +[GTLQueryBinaryAuthorization queryForProjectsAttestorsListWithparent:]

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListAttestorsResponse.next_page_token returned
 *  from the previous call to the `ListAttestors` method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name of the project associated with the
 *  attestors, in the format `projects/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBinaryAuthorization_ListAttestorsResponse.
 *
 *  Lists attestors.
 *  Returns INVALID_ARGUMENT if the project does not exist.
 *
 *  @param parent Required. The resource name of the project associated with the
 *    attestors, in the format `projects/ *`.
 *
 *  @return GTLRBinaryAuthorizationQuery_ProjectsAttestorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  Method: binaryauthorization.projects.attestors.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBinaryAuthorizationCloudPlatform
 */
@interface GTLRBinaryAuthorizationQuery_ProjectsAttestorsSetIamPolicy : GTLRBinaryAuthorizationQuery
// Previous library name was
//   +[GTLQueryBinaryAuthorization queryForProjectsAttestorsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBinaryAuthorization_IamPolicy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  @param object The @c GTLRBinaryAuthorization_SetIamPolicyRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRBinaryAuthorizationQuery_ProjectsAttestorsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRBinaryAuthorization_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  Method: binaryauthorization.projects.attestors.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBinaryAuthorizationCloudPlatform
 */
@interface GTLRBinaryAuthorizationQuery_ProjectsAttestorsTestIamPermissions : GTLRBinaryAuthorizationQuery
// Previous library name was
//   +[GTLQueryBinaryAuthorization queryForProjectsAttestorsTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBinaryAuthorization_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  @param object The @c GTLRBinaryAuthorization_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRBinaryAuthorizationQuery_ProjectsAttestorsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRBinaryAuthorization_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Updates an attestor.
 *  Returns NOT_FOUND if the attestor does not exist.
 *
 *  Method: binaryauthorization.projects.attestors.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBinaryAuthorizationCloudPlatform
 */
@interface GTLRBinaryAuthorizationQuery_ProjectsAttestorsUpdate : GTLRBinaryAuthorizationQuery
// Previous library name was
//   +[GTLQueryBinaryAuthorization queryForProjectsAttestorsUpdateWithObject:name:]

/**
 *  Required. The resource name, in the format:
 *  `projects/ * /attestors/ *`. This field may not be updated.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBinaryAuthorization_Attestor.
 *
 *  Updates an attestor.
 *  Returns NOT_FOUND if the attestor does not exist.
 *
 *  @param object The @c GTLRBinaryAuthorization_Attestor to include in the
 *    query.
 *  @param name Required. The resource name, in the format:
 *    `projects/ * /attestors/ *`. This field may not be updated.
 *
 *  @return GTLRBinaryAuthorizationQuery_ProjectsAttestorsUpdate
 */
+ (instancetype)queryWithObject:(GTLRBinaryAuthorization_Attestor *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the policy for this project. Returns a default
 *  policy if the project does not have one.
 *
 *  Method: binaryauthorization.projects.getPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBinaryAuthorizationCloudPlatform
 */
@interface GTLRBinaryAuthorizationQuery_ProjectsGetPolicy : GTLRBinaryAuthorizationQuery
// Previous library name was
//   +[GTLQueryBinaryAuthorization queryForProjectsGetPolicyWithname:]

/**
 *  Required. The resource name of the policy to retrieve,
 *  in the format `projects/ * /policy`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBinaryAuthorization_Policy.
 *
 *  Gets the policy for this project. Returns a default
 *  policy if the project does not have one.
 *
 *  @param name Required. The resource name of the policy to retrieve,
 *    in the format `projects/ * /policy`.
 *
 *  @return GTLRBinaryAuthorizationQuery_ProjectsGetPolicy
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  Method: binaryauthorization.projects.policy.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBinaryAuthorizationCloudPlatform
 */
@interface GTLRBinaryAuthorizationQuery_ProjectsPolicyGetIamPolicy : GTLRBinaryAuthorizationQuery
// Previous library name was
//   +[GTLQueryBinaryAuthorization queryForProjectsPolicyGetIamPolicyWithresource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBinaryAuthorization_IamPolicy.
 *
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRBinaryAuthorizationQuery_ProjectsPolicyGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  Method: binaryauthorization.projects.policy.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBinaryAuthorizationCloudPlatform
 */
@interface GTLRBinaryAuthorizationQuery_ProjectsPolicySetIamPolicy : GTLRBinaryAuthorizationQuery
// Previous library name was
//   +[GTLQueryBinaryAuthorization queryForProjectsPolicySetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBinaryAuthorization_IamPolicy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  @param object The @c GTLRBinaryAuthorization_SetIamPolicyRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRBinaryAuthorizationQuery_ProjectsPolicySetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRBinaryAuthorization_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  Method: binaryauthorization.projects.policy.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBinaryAuthorizationCloudPlatform
 */
@interface GTLRBinaryAuthorizationQuery_ProjectsPolicyTestIamPermissions : GTLRBinaryAuthorizationQuery
// Previous library name was
//   +[GTLQueryBinaryAuthorization queryForProjectsPolicyTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBinaryAuthorization_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  @param object The @c GTLRBinaryAuthorization_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRBinaryAuthorizationQuery_ProjectsPolicyTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRBinaryAuthorization_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Creates or updates a project's policy, and returns a copy of the
 *  new policy. A policy is always updated as a whole, to avoid race
 *  conditions with concurrent policy enforcement (or management!)
 *  requests. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT
 *  if the request is malformed.
 *
 *  Method: binaryauthorization.projects.updatePolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBinaryAuthorizationCloudPlatform
 */
@interface GTLRBinaryAuthorizationQuery_ProjectsUpdatePolicy : GTLRBinaryAuthorizationQuery
// Previous library name was
//   +[GTLQueryBinaryAuthorization queryForProjectsUpdatePolicyWithObject:name:]

/**
 *  Output only. The resource name, in the format `projects/ * /policy`. There
 *  is
 *  at most one policy per project.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBinaryAuthorization_Policy.
 *
 *  Creates or updates a project's policy, and returns a copy of the
 *  new policy. A policy is always updated as a whole, to avoid race
 *  conditions with concurrent policy enforcement (or management!)
 *  requests. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT
 *  if the request is malformed.
 *
 *  @param object The @c GTLRBinaryAuthorization_Policy to include in the query.
 *  @param name Output only. The resource name, in the format `projects/ *
 *    /policy`. There is
 *    at most one policy per project.
 *
 *  @return GTLRBinaryAuthorizationQuery_ProjectsUpdatePolicy
 */
+ (instancetype)queryWithObject:(GTLRBinaryAuthorization_Policy *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
