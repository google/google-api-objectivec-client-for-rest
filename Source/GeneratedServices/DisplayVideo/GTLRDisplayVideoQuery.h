// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Display & Video 360 API (displayvideo/v1)
// Description:
//   Display & Video 360 API allows users to manage and create campaigns and
//   reports.
// Documentation:
//   https://developers.google.com/display-video/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDisplayVideo_CreateSdfDownloadTaskRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Display Video query classes.
 */
@interface GTLRDisplayVideoQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Downloads media. Download is supported on the URI
 *  `/download/{resource_name=**}?alt=media.`
 *  **Note**: Download requests will not be successful without including
 *  `alt=media` query string.
 *
 *  Method: displayvideo.media.download
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDisplayVideoDisplayVideo
 *    @c kGTLRAuthScopeDisplayVideoDoubleclickbidmanager
 */
@interface GTLRDisplayVideoQuery_MediaDownload : GTLRDisplayVideoQuery
// Previous library name was
//   +[GTLQueryDisplayVideo queryForMediaDownloadWithresourceName:]

/**
 *  Name of the media that is being downloaded. See
 *  ReadRequest.resource_name.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Fetches a @c GTLRDisplayVideo_GoogleBytestreamMedia.
 *
 *  Downloads media. Download is supported on the URI
 *  `/download/{resource_name=**}?alt=media.`
 *  **Note**: Download requests will not be successful without including
 *  `alt=media` query string.
 *
 *  @param resourceName Name of the media that is being downloaded. See
 *    ReadRequest.resource_name.
 *
 *  @return GTLRDisplayVideoQuery_MediaDownload
 */
+ (instancetype)queryWithResourceName:(NSString *)resourceName;

/**
 *  Fetches the requested resource data as a @c GTLRDataObject.
 *
 *  Downloads media. Download is supported on the URI
 *  `/download/{resource_name=**}?alt=media.`
 *  **Note**: Download requests will not be successful without including
 *  `alt=media` query string.
 *
 *  @param resourceName Name of the media that is being downloaded. See
 *    ReadRequest.resource_name.
 *
 *  @return GTLRDisplayVideoQuery_MediaDownload
 */
+ (instancetype)queryForMediaWithResourceName:(NSString *)resourceName;

@end

/**
 *  Creates an SDF Download Task. Returns an
 *  Operation.
 *  An SDF Download Task is a long-running, asynchronous operation. The
 *  metadata type of this operation is
 *  SdfDownloadTaskMetadata. If the request is successful, the
 *  response type of the operation is
 *  SdfDownloadTask. The response will not include the download files,
 *  which must be retrieved with
 *  media.download. The state of
 *  operation can be retrieved with
 *  sdfdownloadtask.operations.get.
 *  Any errors can be found in the
 *  error.message. Note
 *  that error.details is expected to be
 *  empty.
 *
 *  Method: displayvideo.sdfdownloadtasks.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDisplayVideoDisplayVideo
 */
@interface GTLRDisplayVideoQuery_SdfdownloadtasksCreate : GTLRDisplayVideoQuery
// Previous library name was
//   +[GTLQueryDisplayVideo queryForSdfdownloadtasksCreateWithObject:]

/**
 *  Fetches a @c GTLRDisplayVideo_Operation.
 *
 *  Creates an SDF Download Task. Returns an
 *  Operation.
 *  An SDF Download Task is a long-running, asynchronous operation. The
 *  metadata type of this operation is
 *  SdfDownloadTaskMetadata. If the request is successful, the
 *  response type of the operation is
 *  SdfDownloadTask. The response will not include the download files,
 *  which must be retrieved with
 *  media.download. The state of
 *  operation can be retrieved with
 *  sdfdownloadtask.operations.get.
 *  Any errors can be found in the
 *  error.message. Note
 *  that error.details is expected to be
 *  empty.
 *
 *  @param object The @c GTLRDisplayVideo_CreateSdfDownloadTaskRequest to
 *    include in the query.
 *
 *  @return GTLRDisplayVideoQuery_SdfdownloadtasksCreate
 */
+ (instancetype)queryWithObject:(GTLRDisplayVideo_CreateSdfDownloadTaskRequest *)object;

@end

/**
 *  Gets the latest state of an asynchronous SDF download task operation.
 *  Clients should poll this method at intervals of 30 seconds.
 *
 *  Method: displayvideo.sdfdownloadtasks.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDisplayVideoDisplayVideo
 *    @c kGTLRAuthScopeDisplayVideoDoubleclickbidmanager
 */
@interface GTLRDisplayVideoQuery_SdfdownloadtasksOperationsGet : GTLRDisplayVideoQuery
// Previous library name was
//   +[GTLQueryDisplayVideo queryForSdfdownloadtasksOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDisplayVideo_Operation.
 *
 *  Gets the latest state of an asynchronous SDF download task operation.
 *  Clients should poll this method at intervals of 30 seconds.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDisplayVideoQuery_SdfdownloadtasksOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
