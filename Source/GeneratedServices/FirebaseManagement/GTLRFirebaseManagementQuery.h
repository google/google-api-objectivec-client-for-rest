// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase Management API (firebase/v1beta1)
// Description:
//   The Firebase Management API enables programmatic setup and management of
//   Firebase projects, including a project's Firebase resources and Firebase
//   apps.
// Documentation:
//   https://firebase.google.com

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRFirebaseManagement_AddFirebaseRequest;
@class GTLRFirebaseManagement_AddGoogleAnalyticsRequest;
@class GTLRFirebaseManagement_AndroidApp;
@class GTLRFirebaseManagement_FinalizeDefaultLocationRequest;
@class GTLRFirebaseManagement_FirebaseProject;
@class GTLRFirebaseManagement_IosApp;
@class GTLRFirebaseManagement_RemoveAnalyticsRequest;
@class GTLRFirebaseManagement_ShaCertificate;
@class GTLRFirebaseManagement_WebApp;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Firebase Management query classes.
 */
@interface GTLRFirebaseManagementQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Returns a list of [Google Cloud Platform (GCP) `Projects`]
 *  (https://cloud.google.com/resource-manager/reference/rest/v1/projects)
 *  that are available to have Firebase resources added to them.
 *  <br>
 *  <br>A GCP `Project` will only be returned if:
 *  <ol>
 *  <li><p>The caller has sufficient
 *  [Google IAM](https://cloud.google.com/iam) permissions to call
 *  AddFirebase.</p></li>
 *  <li><p>The GCP `Project` is not already a FirebaseProject.</p></li>
 *  <li><p>The GCP `Project` is not in an Organization which has policies
 *  that prevent Firebase resources from being added.</p></li>
 *  </ol>
 *
 *  Method: firebase.availableProjects.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_AvailableProjectsList : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForAvailableProjectsList]

/**
 *  The maximum number of GCP `Projects` to return in the response.
 *  <br>
 *  <br>The server may return fewer than this value at its discretion.
 *  If no value is specified (or too large a value is specified), the server
 *  will impose its own limit.
 *  <br>
 *  <br>This value cannot be negative.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to `ListAvailableProjects`
 *  indicating where in the set of GCP `Projects` to resume listing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRFirebaseManagement_ListAvailableProjectsResponse.
 *
 *  Returns a list of [Google Cloud Platform (GCP) `Projects`]
 *  (https://cloud.google.com/resource-manager/reference/rest/v1/projects)
 *  that are available to have Firebase resources added to them.
 *  <br>
 *  <br>A GCP `Project` will only be returned if:
 *  <ol>
 *  <li><p>The caller has sufficient
 *  [Google IAM](https://cloud.google.com/iam) permissions to call
 *  AddFirebase.</p></li>
 *  <li><p>The GCP `Project` is not already a FirebaseProject.</p></li>
 *  <li><p>The GCP `Project` is not in an Organization which has policies
 *  that prevent Firebase resources from being added.</p></li>
 *  </ol>
 *
 *  @return GTLRFirebaseManagementQuery_AvailableProjectsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: firebase.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_OperationsGet : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRFirebaseManagementQuery_OperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Adds Firebase resources to the specified existing
 *  [Google Cloud Platform (GCP) `Project`]
 *  (https://cloud.google.com/resource-manager/reference/rest/v1/projects).
 *  <br>
 *  <br>Since a FirebaseProject is actually also a GCP `Project`, a
 *  `FirebaseProject` uses underlying GCP identifiers (most importantly,
 *  the `projectId`) as its own for easy interop with GCP APIs.
 *  <br>
 *  <br>The result of this call is an [`Operation`](../../v1beta1/operations).
 *  Poll the `Operation` to track the provisioning process by calling
 *  GetOperation until
 *  [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When
 *  `done` is `true`, the `Operation` has either succeeded or failed. If the
 *  `Operation` succeeded, its
 *  [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to
 *  a FirebaseProject; if the `Operation` failed, its
 *  [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a
 *  google.rpc.Status. The `Operation` is automatically deleted after
 *  completion, so there is no need to call
 *  DeleteOperation.
 *  <br>
 *  <br>This method does not modify any billing account information on the
 *  underlying GCP `Project`.
 *  <br>
 *  <br>To call `AddFirebase`, a member must be an Editor or Owner for the
 *  existing GCP `Project`. Service accounts cannot call `AddFirebase`.
 *
 *  Method: firebase.projects.addFirebase
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsAddFirebase : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsAddFirebaseWithObject:project:]

/**
 *  The resource name of the GCP `Project` to which Firebase resources will be
 *  added, in the format:
 *  <br><code>projects/<var>projectId</var></code>
 *  After calling `AddFirebase`, the
 *  [`projectId`](https://cloud.google.com/resource-manager/reference/rest/v1/projects#Project.FIELDS.project_id)
 *  of the GCP `Project` is also the `projectId` of the FirebaseProject.
 */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Adds Firebase resources to the specified existing
 *  [Google Cloud Platform (GCP) `Project`]
 *  (https://cloud.google.com/resource-manager/reference/rest/v1/projects).
 *  <br>
 *  <br>Since a FirebaseProject is actually also a GCP `Project`, a
 *  `FirebaseProject` uses underlying GCP identifiers (most importantly,
 *  the `projectId`) as its own for easy interop with GCP APIs.
 *  <br>
 *  <br>The result of this call is an [`Operation`](../../v1beta1/operations).
 *  Poll the `Operation` to track the provisioning process by calling
 *  GetOperation until
 *  [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When
 *  `done` is `true`, the `Operation` has either succeeded or failed. If the
 *  `Operation` succeeded, its
 *  [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to
 *  a FirebaseProject; if the `Operation` failed, its
 *  [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a
 *  google.rpc.Status. The `Operation` is automatically deleted after
 *  completion, so there is no need to call
 *  DeleteOperation.
 *  <br>
 *  <br>This method does not modify any billing account information on the
 *  underlying GCP `Project`.
 *  <br>
 *  <br>To call `AddFirebase`, a member must be an Editor or Owner for the
 *  existing GCP `Project`. Service accounts cannot call `AddFirebase`.
 *
 *  @param object The @c GTLRFirebaseManagement_AddFirebaseRequest to include in
 *    the query.
 *  @param project The resource name of the GCP `Project` to which Firebase
 *    resources will be
 *    added, in the format:
 *    <br><code>projects/<var>projectId</var></code>
 *    After calling `AddFirebase`, the
 *    [`projectId`](https://cloud.google.com/resource-manager/reference/rest/v1/projects#Project.FIELDS.project_id)
 *    of the GCP `Project` is also the `projectId` of the FirebaseProject.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAddFirebase
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_AddFirebaseRequest *)object
                        project:(NSString *)project;

@end

/**
 *  Links a FirebaseProject with an existing
 *  [Google Analytics account](http://www.google.com/analytics/).
 *  <br>
 *  <br>Using this call, you can either:
 *  <ul>
 *  <li>Specify an `analyticsAccountId` to provision a new Google Analytics
 *  property within the specified account and associate the new property with
 *  your `FirebaseProject`.</li>
 *  <li>Specify an existing `analyticsPropertyId` to associate the property
 *  with your `FirebaseProject`.</li>
 *  </ul>
 *  <br>
 *  Note that when you call `AddGoogleAnalytics`:
 *  <ol>
 *  <li>The first check determines if any existing data streams in the
 *  Google Analytics property correspond to any existing Firebase Apps in your
 *  `FirebaseProject` (based on the `packageName` or `bundleId` associated with
 *  the data stream). Then, as applicable, the data streams and apps are
 *  linked. Note that this auto-linking only applies to Android Apps and iOS
 *  Apps.</li>
 *  <li>If no corresponding data streams are found for your Firebase Apps,
 *  new data streams are provisioned in the Google Analytics property
 *  for each of your Firebase Apps. Note that a new data stream is always
 *  provisioned for a Web App even if it was previously associated with a
 *  data stream in your Analytics property.</li>
 *  </ol>
 *  Learn more about the hierarchy and structure of Google Analytics
 *  accounts in the
 *  [Analytics
 *  documentation](https://support.google.com/analytics/answer/9303323).
 *  <br>
 *  <br>The result of this call is an [`Operation`](../../v1beta1/operations).
 *  Poll the `Operation` to track the provisioning process by calling
 *  GetOperation until
 *  [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When
 *  `done` is `true`, the `Operation` has either succeeded or failed. If the
 *  `Operation` succeeded, its
 *  [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to
 *  an AnalyticsDetails; if the `Operation` failed, its
 *  [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a
 *  google.rpc.Status.
 *  <br>
 *  <br>To call `AddGoogleAnalytics`, a member must be an Owner for
 *  the existing `FirebaseProject` and have the
 *  [`Edit` permission](https://support.google.com/analytics/answer/2884495)
 *  for the Google Analytics account.
 *  <br>
 *  <br>If a `FirebaseProject` already has Google Analytics enabled, and you
 *  call `AddGoogleAnalytics` using an `analyticsPropertyId` that's different
 *  from the currently associated property, then the call will fail. Analytics
 *  may have already been enabled in the Firebase console or by specifying
 *  `timeZone` and `regionCode` in the call to
 *  [`AddFirebase`](../../v1beta1/projects/addFirebase).
 *
 *  Method: firebase.projects.addGoogleAnalytics
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsAddGoogleAnalytics : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsAddGoogleAnalyticsWithObject:parent:]

/**
 *  The parent `FirebaseProject` to link to an existing Google Analytics
 *  account, in the format:
 *  <br><code>projects/<var>projectId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Links a FirebaseProject with an existing
 *  [Google Analytics account](http://www.google.com/analytics/).
 *  <br>
 *  <br>Using this call, you can either:
 *  <ul>
 *  <li>Specify an `analyticsAccountId` to provision a new Google Analytics
 *  property within the specified account and associate the new property with
 *  your `FirebaseProject`.</li>
 *  <li>Specify an existing `analyticsPropertyId` to associate the property
 *  with your `FirebaseProject`.</li>
 *  </ul>
 *  <br>
 *  Note that when you call `AddGoogleAnalytics`:
 *  <ol>
 *  <li>The first check determines if any existing data streams in the
 *  Google Analytics property correspond to any existing Firebase Apps in your
 *  `FirebaseProject` (based on the `packageName` or `bundleId` associated with
 *  the data stream). Then, as applicable, the data streams and apps are
 *  linked. Note that this auto-linking only applies to Android Apps and iOS
 *  Apps.</li>
 *  <li>If no corresponding data streams are found for your Firebase Apps,
 *  new data streams are provisioned in the Google Analytics property
 *  for each of your Firebase Apps. Note that a new data stream is always
 *  provisioned for a Web App even if it was previously associated with a
 *  data stream in your Analytics property.</li>
 *  </ol>
 *  Learn more about the hierarchy and structure of Google Analytics
 *  accounts in the
 *  [Analytics
 *  documentation](https://support.google.com/analytics/answer/9303323).
 *  <br>
 *  <br>The result of this call is an [`Operation`](../../v1beta1/operations).
 *  Poll the `Operation` to track the provisioning process by calling
 *  GetOperation until
 *  [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When
 *  `done` is `true`, the `Operation` has either succeeded or failed. If the
 *  `Operation` succeeded, its
 *  [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to
 *  an AnalyticsDetails; if the `Operation` failed, its
 *  [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a
 *  google.rpc.Status.
 *  <br>
 *  <br>To call `AddGoogleAnalytics`, a member must be an Owner for
 *  the existing `FirebaseProject` and have the
 *  [`Edit` permission](https://support.google.com/analytics/answer/2884495)
 *  for the Google Analytics account.
 *  <br>
 *  <br>If a `FirebaseProject` already has Google Analytics enabled, and you
 *  call `AddGoogleAnalytics` using an `analyticsPropertyId` that's different
 *  from the currently associated property, then the call will fail. Analytics
 *  may have already been enabled in the Firebase console or by specifying
 *  `timeZone` and `regionCode` in the call to
 *  [`AddFirebase`](../../v1beta1/projects/addFirebase).
 *
 *  @param object The @c GTLRFirebaseManagement_AddGoogleAnalyticsRequest to
 *    include in the query.
 *  @param parent The parent `FirebaseProject` to link to an existing Google
 *    Analytics
 *    account, in the format:
 *    <br><code>projects/<var>projectId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAddGoogleAnalytics
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_AddGoogleAnalyticsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Requests that a new AndroidApp be created.
 *  <br>
 *  <br>The result of this call is an `Operation` which can be used to track
 *  the provisioning process. The `Operation` is automatically deleted after
 *  completion, so there is no need to call `DeleteOperation`.
 *
 *  Method: firebase.projects.androidApps.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsCreate : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsAndroidAppsCreateWithObject:parent:]

/**
 *  The parent Project in which to create an App, in the format:
 *  <br><code>projects/<var>projectId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Requests that a new AndroidApp be created.
 *  <br>
 *  <br>The result of this call is an `Operation` which can be used to track
 *  the provisioning process. The `Operation` is automatically deleted after
 *  completion, so there is no need to call `DeleteOperation`.
 *
 *  @param object The @c GTLRFirebaseManagement_AndroidApp to include in the
 *    query.
 *  @param parent The parent Project in which to create an App, in the format:
 *    <br><code>projects/<var>projectId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_AndroidApp *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets the AndroidApp identified by the specified resource name.
 *
 *  Method: firebase.projects.androidApps.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsGet : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsAndroidAppsGetWithname:]

/**
 *  The fully qualified resource name of the App, in the format:
 *  <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
 *  <br>As an <var>appId</var> is a unique identifier, the Unique Resource
 *  from Sub-Collection access pattern may be used here, in the format:
 *  <br><code>projects/-/androidApps/<var>appId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_AndroidApp.
 *
 *  Gets the AndroidApp identified by the specified resource name.
 *
 *  @param name The fully qualified resource name of the App, in the format:
 *    <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
 *    <br>As an <var>appId</var> is a unique identifier, the Unique Resource
 *    from Sub-Collection access pattern may be used here, in the format:
 *    <br><code>projects/-/androidApps/<var>appId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the configuration artifact associated with the specified
 *  AndroidApp.
 *
 *  Method: firebase.projects.androidApps.getConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsGetConfig : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsAndroidAppsGetConfigWithname:]

/**
 *  The resource name of the App configuration to download, in the format:
 *  <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var>/config</code>
 *  <br>As an <var>appId</var> is a unique identifier, the Unique Resource
 *  from Sub-Collection access pattern may be used here, in the format:
 *  <br><code>projects/-/androidApps/<var>appId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_AndroidAppConfig.
 *
 *  Gets the configuration artifact associated with the specified
 *  AndroidApp.
 *
 *  @param name The resource name of the App configuration to download, in the
 *    format:
 *    <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var>/config</code>
 *    <br>As an <var>appId</var> is a unique identifier, the Unique Resource
 *    from Sub-Collection access pattern may be used here, in the format:
 *    <br><code>projects/-/androidApps/<var>appId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsGetConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists each AndroidApp associated with the specified parent Project.
 *  <br>
 *  <br>The elements are returned in no particular order, but will be a
 *  consistent view of the Apps when additional requests are made with a
 *  `pageToken`.
 *
 *  Method: firebase.projects.androidApps.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsList : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsAndroidAppsListWithparent:]

/**
 *  The maximum number of Apps to return in the response.
 *  <br>
 *  <br>The server may return fewer than this at its discretion.
 *  If no value is specified (or too large a value is specified), then the
 *  server will impose its own limit.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to `ListAndroidApps` indicating where
 *  in the set of Apps to resume listing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent Project for which to list Apps, in the format:
 *  <br><code>projects/<var>projectId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_ListAndroidAppsResponse.
 *
 *  Lists each AndroidApp associated with the specified parent Project.
 *  <br>
 *  <br>The elements are returned in no particular order, but will be a
 *  consistent view of the Apps when additional requests are made with a
 *  `pageToken`.
 *
 *  @param parent The parent Project for which to list Apps, in the format:
 *    <br><code>projects/<var>projectId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the attributes of the AndroidApp identified by the specified
 *  resource name.
 *
 *  Method: firebase.projects.androidApps.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsPatch : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsAndroidAppsPatchWithObject:name:]

/**
 *  The fully qualified resource name of the App, in the format:
 *  <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies which fields to update.
 *  <br>Note that the fields `name`, `appId`, `projectId`, and `packageName`
 *  are all immutable.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseManagement_AndroidApp.
 *
 *  Updates the attributes of the AndroidApp identified by the specified
 *  resource name.
 *
 *  @param object The @c GTLRFirebaseManagement_AndroidApp to include in the
 *    query.
 *  @param name The fully qualified resource name of the App, in the format:
 *    <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_AndroidApp *)object
                           name:(NSString *)name;

@end

/**
 *  Adds a SHA certificate to the specified AndroidApp.
 *
 *  Method: firebase.projects.androidApps.sha.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsShaCreate : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsAndroidAppsShaCreateWithObject:parent:]

/**
 *  The parent App to which a SHA certificate will be added, in the format:
 *  <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
 *  <br>As an <var>appId</var> is a unique identifier, the Unique Resource
 *  from Sub-Collection access pattern may be used here, in the format:
 *  <br><code>projects/-/androidApps/<var>appId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_ShaCertificate.
 *
 *  Adds a SHA certificate to the specified AndroidApp.
 *
 *  @param object The @c GTLRFirebaseManagement_ShaCertificate to include in the
 *    query.
 *  @param parent The parent App to which a SHA certificate will be added, in
 *    the format:
 *    <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
 *    <br>As an <var>appId</var> is a unique identifier, the Unique Resource
 *    from Sub-Collection access pattern may be used here, in the format:
 *    <br><code>projects/-/androidApps/<var>appId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsShaCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_ShaCertificate *)object
                         parent:(NSString *)parent;

@end

/**
 *  Removes a SHA certificate from the specified AndroidApp.
 *
 *  Method: firebase.projects.androidApps.sha.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsShaDelete : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsAndroidAppsShaDeleteWithname:]

/**
 *  The fully qualified resource name of the `sha-key`, in the format:
 *  <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var>/sha/<var>shaId</var></code>
 *  <br>You can obtain the full name from the response of
 *  [`ListShaCertificates`](../projects.androidApps.sha/list) or the original
 *  [`CreateShaCertificate`](../projects.androidApps.sha/create).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_Empty.
 *
 *  Removes a SHA certificate from the specified AndroidApp.
 *
 *  @param name The fully qualified resource name of the `sha-key`, in the
 *    format:
 *    <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var>/sha/<var>shaId</var></code>
 *    <br>You can obtain the full name from the response of
 *    [`ListShaCertificates`](../projects.androidApps.sha/list) or the original
 *    [`CreateShaCertificate`](../projects.androidApps.sha/create).
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsShaDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the list of SHA-1 and SHA-256 certificates for the specified
 *  AndroidApp.
 *
 *  Method: firebase.projects.androidApps.sha.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsShaList : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsAndroidAppsShaListWithparent:]

/**
 *  The parent App for which to list SHA certificates, in the format:
 *  <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
 *  <br>As an <var>appId</var> is a unique identifier, the Unique Resource
 *  from Sub-Collection access pattern may be used here, in the format:
 *  <br><code>projects/-/androidApps/<var>appId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_ListShaCertificatesResponse.
 *
 *  Returns the list of SHA-1 and SHA-256 certificates for the specified
 *  AndroidApp.
 *
 *  @param parent The parent App for which to list SHA certificates, in the
 *    format:
 *    <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
 *    <br>As an <var>appId</var> is a unique identifier, the Unique Resource
 *    from Sub-Collection access pattern may be used here, in the format:
 *    <br><code>projects/-/androidApps/<var>appId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsShaList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Returns a list of valid Google Cloud Platform (GCP) resource locations for
 *  the specified Project (including a FirebaseProject).
 *  <br>
 *  <br>One of these locations can be selected as the Project's [_default_ GCP
 *  resource location](https://firebase.google.com/docs/projects/locations),
 *  which is the geographical location where project resources, such as Cloud
 *  Firestore, will be provisioned by default. However, if the default GCP
 *  resource location has already been set for the Project, then this setting
 *  cannot be changed.
 *  <br>
 *  <br>This call checks for any location restrictions for the specified
 *  Project and, thus, might return a subset of all possible GCP resource
 *  locations. To list all GCP resource locations (regardless of any
 *  restrictions), call the endpoint without specifying a `projectId` (that is,
 *  `/v1beta1/{parent=projects/-}/listAvailableLocations`).
 *  <br>
 *  <br>To call `ListAvailableLocations` with a specified project, a member
 *  must be at minimum a Viewer of the project. Calls without a specified
 *  project do not require any specific project permissions.
 *
 *  Method: firebase.projects.availableLocations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsAvailableLocationsList : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsAvailableLocationsListWithparent:]

/**
 *  The maximum number of locations to return in the response.
 *  <br>
 *  <br>The server may return fewer than this value at its discretion.
 *  If no value is specified (or too large a value is specified), then the
 *  server will impose its own limit.
 *  <br>
 *  <br>This value cannot be negative.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to `ListAvailableLocations` indicating
 *  where in the list of locations to resume listing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The Project for which to list GCP resource locations, in the format:
 *  <br><code>projects/<var>projectId</var></code>
 *  <br>If no project is specified (that is, `projects/-`), the returned list
 *  does not take into account org-specific or project-specific location
 *  restrictions.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_ListAvailableLocationsResponse.
 *
 *  Returns a list of valid Google Cloud Platform (GCP) resource locations for
 *  the specified Project (including a FirebaseProject).
 *  <br>
 *  <br>One of these locations can be selected as the Project's [_default_ GCP
 *  resource location](https://firebase.google.com/docs/projects/locations),
 *  which is the geographical location where project resources, such as Cloud
 *  Firestore, will be provisioned by default. However, if the default GCP
 *  resource location has already been set for the Project, then this setting
 *  cannot be changed.
 *  <br>
 *  <br>This call checks for any location restrictions for the specified
 *  Project and, thus, might return a subset of all possible GCP resource
 *  locations. To list all GCP resource locations (regardless of any
 *  restrictions), call the endpoint without specifying a `projectId` (that is,
 *  `/v1beta1/{parent=projects/-}/listAvailableLocations`).
 *  <br>
 *  <br>To call `ListAvailableLocations` with a specified project, a member
 *  must be at minimum a Viewer of the project. Calls without a specified
 *  project do not require any specific project permissions.
 *
 *  @param parent The Project for which to list GCP resource locations, in the
 *    format:
 *    <br><code>projects/<var>projectId</var></code>
 *    <br>If no project is specified (that is, `projects/-`), the returned list
 *    does not take into account org-specific or project-specific location
 *    restrictions.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAvailableLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Sets the default Google Cloud Platform (GCP) resource location for the
 *  specified FirebaseProject.
 *  <br>
 *  <br>This method creates an App Engine application with a
 *  [default Cloud Storage
 *  bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket),
 *  located in the specified
 *  [`location_id`](#body.request_body.FIELDS.location_id).
 *  This location must be one of the available
 *  [GCP resource
 *  locations](https://firebase.google.com/docs/projects/locations). <br>
 *  <br>After the default GCP resource location is finalized, or if it was
 *  already set, it cannot be changed. The default GCP resource location for
 *  the specified FirebaseProject might already be set because either the
 *  GCP `Project` already has an App Engine application or
 *  `FinalizeDefaultLocation` was previously called with a specified
 *  `location_id`. Any new calls to `FinalizeDefaultLocation` with a
 *  <em>different</em> specified `location_id` will return a 409 error.
 *  <br>
 *  <br>The result of this call is an [`Operation`](../../v1beta1/operations),
 *  which can be used to track the provisioning process. The
 *  [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of
 *  the `Operation` is google.protobuf.Empty.
 *  <br>
 *  <br>The `Operation` can be polled by its `name` using
 *  GetOperation until `done` is
 *  true. When `done` is true, the `Operation` has either succeeded or failed.
 *  If the `Operation` has succeeded, its
 *  [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be
 *  set to a google.protobuf.Empty; if the `Operation` has failed, its
 *  `error` will be set to a google.rpc.Status. The `Operation` is
 *  automatically deleted after completion, so there is no need to call
 *  DeleteOperation.
 *  <br>
 *  <br>All fields listed in the [request body](#request-body) are required.
 *  <br>
 *  <br>To call `FinalizeDefaultLocation`, a member must be an Owner
 *  of the project.
 *
 *  Method: firebase.projects.defaultLocation.finalize
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsDefaultLocationFinalize : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsDefaultLocationFinalizeWithObject:parent:]

/**
 *  The resource name of the Project for which the default GCP resource
 *  location will be set, in the format:
 *  <br><code>projects/<var>projectId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Sets the default Google Cloud Platform (GCP) resource location for the
 *  specified FirebaseProject.
 *  <br>
 *  <br>This method creates an App Engine application with a
 *  [default Cloud Storage
 *  bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket),
 *  located in the specified
 *  [`location_id`](#body.request_body.FIELDS.location_id).
 *  This location must be one of the available
 *  [GCP resource
 *  locations](https://firebase.google.com/docs/projects/locations). <br>
 *  <br>After the default GCP resource location is finalized, or if it was
 *  already set, it cannot be changed. The default GCP resource location for
 *  the specified FirebaseProject might already be set because either the
 *  GCP `Project` already has an App Engine application or
 *  `FinalizeDefaultLocation` was previously called with a specified
 *  `location_id`. Any new calls to `FinalizeDefaultLocation` with a
 *  <em>different</em> specified `location_id` will return a 409 error.
 *  <br>
 *  <br>The result of this call is an [`Operation`](../../v1beta1/operations),
 *  which can be used to track the provisioning process. The
 *  [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of
 *  the `Operation` is google.protobuf.Empty.
 *  <br>
 *  <br>The `Operation` can be polled by its `name` using
 *  GetOperation until `done` is
 *  true. When `done` is true, the `Operation` has either succeeded or failed.
 *  If the `Operation` has succeeded, its
 *  [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be
 *  set to a google.protobuf.Empty; if the `Operation` has failed, its
 *  `error` will be set to a google.rpc.Status. The `Operation` is
 *  automatically deleted after completion, so there is no need to call
 *  DeleteOperation.
 *  <br>
 *  <br>All fields listed in the [request body](#request-body) are required.
 *  <br>
 *  <br>To call `FinalizeDefaultLocation`, a member must be an Owner
 *  of the project.
 *
 *  @param object The @c GTLRFirebaseManagement_FinalizeDefaultLocationRequest
 *    to include in the query.
 *  @param parent The resource name of the Project for which the default GCP
 *    resource
 *    location will be set, in the format:
 *    <br><code>projects/<var>projectId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsDefaultLocationFinalize
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_FinalizeDefaultLocationRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets the FirebaseProject identified by the specified resource name.
 *
 *  Method: firebase.projects.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsGet : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsGetWithname:]

/**
 *  The fully qualified resource name of the Project, in the format:
 *  <br><code>projects/<var>projectId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_FirebaseProject.
 *
 *  Gets the FirebaseProject identified by the specified resource name.
 *
 *  @param name The fully qualified resource name of the Project, in the format:
 *    <br><code>projects/<var>projectId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the configuration artifact used by servers to simplify initialization.
 *  <br>
 *  <br>Typically, this configuration is used with the Firebase Admin SDK
 *  [initializeApp](https://firebase.google.com/docs/admin/setup#initialize_the_sdk)
 *  command.
 *
 *  Method: firebase.projects.getAdminSdkConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsGetAdminSdkConfig : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsGetAdminSdkConfigWithname:]

/**
 *  The fully qualified resource name of the Project, in the format:
 *  <br><code>projects/<var>projectId</var>/adminSdkConfig</code>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_AdminSdkConfig.
 *
 *  Gets the configuration artifact used by servers to simplify initialization.
 *  <br>
 *  <br>Typically, this configuration is used with the Firebase Admin SDK
 *  [initializeApp](https://firebase.google.com/docs/admin/setup#initialize_the_sdk)
 *  command.
 *
 *  @param name The fully qualified resource name of the Project, in the format:
 *    <br><code>projects/<var>projectId</var>/adminSdkConfig</code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsGetAdminSdkConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the Google Analytics details currently associated with a
 *  FirebaseProject.
 *  <br>
 *  <br>If the `FirebaseProject` is not yet linked to Google Analytics, then
 *  the response to `GetAnalyticsDetails` is NOT_FOUND.
 *
 *  Method: firebase.projects.getAnalyticsDetails
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsGetAnalyticsDetails : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsGetAnalyticsDetailsWithname:]

/**
 *  The fully qualified resource name, in the format:
 *  <br><code>projects/<var>projectId</var>/analyticsDetails</code>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_AnalyticsDetails.
 *
 *  Gets the Google Analytics details currently associated with a
 *  FirebaseProject.
 *  <br>
 *  <br>If the `FirebaseProject` is not yet linked to Google Analytics, then
 *  the response to `GetAnalyticsDetails` is NOT_FOUND.
 *
 *  @param name The fully qualified resource name, in the format:
 *    <br><code>projects/<var>projectId</var>/analyticsDetails</code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsGetAnalyticsDetails
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Requests that a new IosApp be created.
 *  <br>
 *  <br>The result of this call is an `Operation` which can be used to track
 *  the provisioning process. The `Operation` is automatically deleted after
 *  completion, so there is no need to call `DeleteOperation`.
 *
 *  Method: firebase.projects.iosApps.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsIosAppsCreate : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsIosAppsCreateWithObject:parent:]

/**
 *  The parent Project in which to create an App, in the format:
 *  <br><code>projects/<var>projectId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Requests that a new IosApp be created.
 *  <br>
 *  <br>The result of this call is an `Operation` which can be used to track
 *  the provisioning process. The `Operation` is automatically deleted after
 *  completion, so there is no need to call `DeleteOperation`.
 *
 *  @param object The @c GTLRFirebaseManagement_IosApp to include in the query.
 *  @param parent The parent Project in which to create an App, in the format:
 *    <br><code>projects/<var>projectId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsIosAppsCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_IosApp *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets the IosApp identified by the specified resource name.
 *
 *  Method: firebase.projects.iosApps.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsIosAppsGet : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsIosAppsGetWithname:]

/**
 *  The fully qualified resource name of the App, in the format:
 *  <code>projects/<var>projectId</var>/iosApps/<var>appId</var></code>
 *  <br>As an <var>appId</var> is a unique identifier, the Unique Resource
 *  from Sub-Collection access pattern may be used here, in the format:
 *  <br><code>projects/-/iosApps/<var>appId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_IosApp.
 *
 *  Gets the IosApp identified by the specified resource name.
 *
 *  @param name The fully qualified resource name of the App, in the format:
 *    <code>projects/<var>projectId</var>/iosApps/<var>appId</var></code>
 *    <br>As an <var>appId</var> is a unique identifier, the Unique Resource
 *    from Sub-Collection access pattern may be used here, in the format:
 *    <br><code>projects/-/iosApps/<var>appId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsIosAppsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the configuration artifact associated with the specified IosApp.
 *
 *  Method: firebase.projects.iosApps.getConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsIosAppsGetConfig : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsIosAppsGetConfigWithname:]

/**
 *  The resource name of the App configuration to download, in the format:
 *  <br><code>projects/<var>projectId</var>/iosApps/<var>appId</var>/config</code>
 *  <br>As an <var>appId</var> is a unique identifier, the Unique Resource
 *  from Sub-Collection access pattern may be used here, in the format:
 *  <br><code>projects/-/iosApps/<var>appId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_IosAppConfig.
 *
 *  Gets the configuration artifact associated with the specified IosApp.
 *
 *  @param name The resource name of the App configuration to download, in the
 *    format:
 *    <br><code>projects/<var>projectId</var>/iosApps/<var>appId</var>/config</code>
 *    <br>As an <var>appId</var> is a unique identifier, the Unique Resource
 *    from Sub-Collection access pattern may be used here, in the format:
 *    <br><code>projects/-/iosApps/<var>appId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsIosAppsGetConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists each IosApp associated with the specified parent Project.
 *  <br>
 *  <br>The elements are returned in no particular order, but will be a
 *  consistent view of the Apps when additional requests are made with a
 *  `pageToken`.
 *
 *  Method: firebase.projects.iosApps.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsIosAppsList : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsIosAppsListWithparent:]

/**
 *  The maximum number of Apps to return in the response.
 *  <br>
 *  <br>The server may return fewer than this at its discretion.
 *  If no value is specified (or too large a value is specified), the server
 *  will impose its own limit.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to `ListIosApps` indicating where in
 *  the set of Apps to resume listing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent Project for which to list Apps, in the format:
 *  <br><code>projects/<var>projectId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_ListIosAppsResponse.
 *
 *  Lists each IosApp associated with the specified parent Project.
 *  <br>
 *  <br>The elements are returned in no particular order, but will be a
 *  consistent view of the Apps when additional requests are made with a
 *  `pageToken`.
 *
 *  @param parent The parent Project for which to list Apps, in the format:
 *    <br><code>projects/<var>projectId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsIosAppsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the attributes of the IosApp identified by the specified
 *  resource name.
 *
 *  Method: firebase.projects.iosApps.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsIosAppsPatch : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsIosAppsPatchWithObject:name:]

/**
 *  The fully qualified resource name of the App, in the format:
 *  <br><code>projects/<var>projectId</var>/iosApps/<var>appId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies which fields to update.
 *  <br>Note that the fields `name`, `appId`, `projectId`, and `bundleId`
 *  are all immutable.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseManagement_IosApp.
 *
 *  Updates the attributes of the IosApp identified by the specified
 *  resource name.
 *
 *  @param object The @c GTLRFirebaseManagement_IosApp to include in the query.
 *  @param name The fully qualified resource name of the App, in the format:
 *    <br><code>projects/<var>projectId</var>/iosApps/<var>appId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsIosAppsPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_IosApp *)object
                           name:(NSString *)name;

@end

/**
 *  Lists each FirebaseProject accessible to the caller.
 *  <br>
 *  <br>The elements are returned in no particular order, but they will be a
 *  consistent view of the Projects when additional requests are made with a
 *  `pageToken`.
 *  <br>
 *  <br>This method is eventually consistent with Project mutations, which
 *  means newly provisioned Projects and recent modifications to existing
 *  Projects might not be reflected in the set of Projects. The list will
 *  include only ACTIVE Projects.
 *  <br>
 *  <br>Use
 *  GetFirebaseProject
 *  for consistent reads as well as for additional Project details.
 *
 *  Method: firebase.projects.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsList : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsList]

/**
 *  The maximum number of Projects to return in the response.
 *  <br>
 *  <br>The server may return fewer than this at its discretion.
 *  If no value is specified (or too large a value is specified), the server
 *  will impose its own limit.
 *  <br>
 *  <br>This value cannot be negative.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to `ListFirebaseProjects` indicating
 *  where in the set of Projects to resume listing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRFirebaseManagement_ListFirebaseProjectsResponse.
 *
 *  Lists each FirebaseProject accessible to the caller.
 *  <br>
 *  <br>The elements are returned in no particular order, but they will be a
 *  consistent view of the Projects when additional requests are made with a
 *  `pageToken`.
 *  <br>
 *  <br>This method is eventually consistent with Project mutations, which
 *  means newly provisioned Projects and recent modifications to existing
 *  Projects might not be reflected in the set of Projects. The list will
 *  include only ACTIVE Projects.
 *  <br>
 *  <br>Use
 *  GetFirebaseProject
 *  for consistent reads as well as for additional Project details.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Updates the attributes of the FirebaseProject identified by the
 *  specified resource name.
 *  <br>
 *  <br>All [query parameters](#query-parameters) are required.
 *
 *  Method: firebase.projects.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsPatch : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsPatchWithObject:name:]

/**
 *  The fully qualified resource name of the Project, in the format:
 *  <br><code>projects/<var>projectId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies which fields to update.
 *  <br>
 *  <br>If this list is empty, then no state will be updated.
 *  <br>Note that the fields `name`, `project_id`, and `project_number` are all
 *  immutable.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseManagement_FirebaseProject.
 *
 *  Updates the attributes of the FirebaseProject identified by the
 *  specified resource name.
 *  <br>
 *  <br>All [query parameters](#query-parameters) are required.
 *
 *  @param object The @c GTLRFirebaseManagement_FirebaseProject to include in
 *    the query.
 *  @param name The fully qualified resource name of the Project, in the format:
 *    <br><code>projects/<var>projectId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_FirebaseProject *)object
                           name:(NSString *)name;

@end

/**
 *  Unlinks the specified `FirebaseProject` from its Google Analytics account.
 *  <br>
 *  <br>This call removes the association of the specified `FirebaseProject`
 *  with its current Google Analytics property. However, this call does not
 *  delete the Google Analytics resources, such as the Google Analytics
 *  property or any data streams.
 *  <br>
 *  <br>These resources may be re-associated later to the `FirebaseProject` by
 *  calling
 *  [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics) and
 *  specifying the same `analyticsPropertyId`. For Android Apps and iOS Apps,
 *  this call re-links data streams with their corresponding apps. However,
 *  for Web Apps, this call provisions a <em>new</em> data stream for each Web
 *  App.
 *  <br>
 *  <br>To call `RemoveAnalytics`, a member must be an Owner for
 *  the `FirebaseProject`.
 *
 *  Method: firebase.projects.removeAnalytics
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsRemoveAnalytics : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsRemoveAnalyticsWithObject:parent:]

/**
 *  The parent `FirebaseProject` to unlink from its Google Analytics account,
 *  in the format:
 *  <br><code>projects/<var>projectId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_Empty.
 *
 *  Unlinks the specified `FirebaseProject` from its Google Analytics account.
 *  <br>
 *  <br>This call removes the association of the specified `FirebaseProject`
 *  with its current Google Analytics property. However, this call does not
 *  delete the Google Analytics resources, such as the Google Analytics
 *  property or any data streams.
 *  <br>
 *  <br>These resources may be re-associated later to the `FirebaseProject` by
 *  calling
 *  [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics) and
 *  specifying the same `analyticsPropertyId`. For Android Apps and iOS Apps,
 *  this call re-links data streams with their corresponding apps. However,
 *  for Web Apps, this call provisions a <em>new</em> data stream for each Web
 *  App.
 *  <br>
 *  <br>To call `RemoveAnalytics`, a member must be an Owner for
 *  the `FirebaseProject`.
 *
 *  @param object The @c GTLRFirebaseManagement_RemoveAnalyticsRequest to
 *    include in the query.
 *  @param parent The parent `FirebaseProject` to unlink from its Google
 *    Analytics account,
 *    in the format:
 *    <br><code>projects/<var>projectId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsRemoveAnalytics
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_RemoveAnalyticsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  A convenience method that lists all available Apps for the specified
 *  FirebaseProject.
 *  <br>
 *  <br>Typically, interaction with an App should be done using the
 *  platform-specific service, but some tool use-cases require a summary of all
 *  known Apps (such as for App selector interfaces).
 *
 *  Method: firebase.projects.searchApps
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsSearchApps : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsSearchAppsWithparent:]

/**
 *  The maximum number of Apps to return in the response.
 *  <br>
 *  <br>The server may return fewer than this value at its discretion.
 *  If no value is specified (or too large a value is specified), then the
 *  server will impose its own limit.
 *  <br>
 *  <br>This value cannot be negative.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to `SearchFirebaseApps` indicating
 *  where in the set of Apps to resume listing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent Project for which to list Apps, in the format:
 *  <br><code>projects/<var>projectId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_SearchFirebaseAppsResponse.
 *
 *  A convenience method that lists all available Apps for the specified
 *  FirebaseProject.
 *  <br>
 *  <br>Typically, interaction with an App should be done using the
 *  platform-specific service, but some tool use-cases require a summary of all
 *  known Apps (such as for App selector interfaces).
 *
 *  @param parent The parent Project for which to list Apps, in the format:
 *    <br><code>projects/<var>projectId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsSearchApps
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Requests that a new WebApp be created.
 *  <br>
 *  <br>The result of this call is an `Operation` which can be used to track
 *  the provisioning process. The `Operation` is automatically deleted after
 *  completion, so there is no need to call `DeleteOperation`.
 *
 *  Method: firebase.projects.webApps.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsWebAppsCreate : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsWebAppsCreateWithObject:parent:]

/**
 *  The parent Project in which to create an App, in the format:
 *  <br><code>projects/<var>projectId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Requests that a new WebApp be created.
 *  <br>
 *  <br>The result of this call is an `Operation` which can be used to track
 *  the provisioning process. The `Operation` is automatically deleted after
 *  completion, so there is no need to call `DeleteOperation`.
 *
 *  @param object The @c GTLRFirebaseManagement_WebApp to include in the query.
 *  @param parent The parent Project in which to create an App, in the format:
 *    <br><code>projects/<var>projectId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsWebAppsCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_WebApp *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets the WebApp identified by the specified resource name.
 *
 *  Method: firebase.projects.webApps.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsWebAppsGet : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsWebAppsGetWithname:]

/**
 *  The fully qualified resource name of the App, in the format:
 *  <br><code>projects/<var>projectId</var>/webApps/<var>appId</var></code>
 *  <br>As an <var>appId</var> is a unique identifier, the Unique Resource
 *  from Sub-Collection access pattern may be used here, in the format:
 *  <br><code>projects/-/webApps/<var>appId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_WebApp.
 *
 *  Gets the WebApp identified by the specified resource name.
 *
 *  @param name The fully qualified resource name of the App, in the format:
 *    <br><code>projects/<var>projectId</var>/webApps/<var>appId</var></code>
 *    <br>As an <var>appId</var> is a unique identifier, the Unique Resource
 *    from Sub-Collection access pattern may be used here, in the format:
 *    <br><code>projects/-/webApps/<var>appId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsWebAppsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the configuration artifact associated with the specified WebApp.
 *
 *  Method: firebase.projects.webApps.getConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsWebAppsGetConfig : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsWebAppsGetConfigWithname:]

/**
 *  The resource name of the App configuration to download, in the format:
 *  <br><code>projects/<var>projectId</var>/webApps/<var>appId</var>/config</code>
 *  <br>As an <var>appId</var> is a unique identifier, the Unique Resource
 *  from Sub-Collection access pattern may be used here, in the format:
 *  <br><code>projects/-/webApps/<var>appId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_WebAppConfig.
 *
 *  Gets the configuration artifact associated with the specified WebApp.
 *
 *  @param name The resource name of the App configuration to download, in the
 *    format:
 *    <br><code>projects/<var>projectId</var>/webApps/<var>appId</var>/config</code>
 *    <br>As an <var>appId</var> is a unique identifier, the Unique Resource
 *    from Sub-Collection access pattern may be used here, in the format:
 *    <br><code>projects/-/webApps/<var>appId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsWebAppsGetConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists each WebApp associated with the specified parent Project.
 *  <br>
 *  <br>The elements are returned in no particular order, but will be a
 *  consistent view of the Apps when additional requests are made with a
 *  `pageToken`.
 *
 *  Method: firebase.projects.webApps.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsWebAppsList : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsWebAppsListWithparent:]

/**
 *  The maximum number of Apps to return in the response.
 *  <br>
 *  <br>The server may return fewer than this value at its discretion.
 *  If no value is specified (or too large a value is specified), then the
 *  server will impose its own limit.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to `ListWebApps` indicating where in
 *  the set of Apps to resume listing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent Project for which to list Apps, in the format:
 *  <br><code>projects/<var>projectId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_ListWebAppsResponse.
 *
 *  Lists each WebApp associated with the specified parent Project.
 *  <br>
 *  <br>The elements are returned in no particular order, but will be a
 *  consistent view of the Apps when additional requests are made with a
 *  `pageToken`.
 *
 *  @param parent The parent Project for which to list Apps, in the format:
 *    <br><code>projects/<var>projectId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsWebAppsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the attributes of the WebApp identified by the specified
 *  resource name.
 *
 *  Method: firebase.projects.webApps.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsWebAppsPatch : GTLRFirebaseManagementQuery
// Previous library name was
//   +[GTLQueryFirebaseManagement queryForProjectsWebAppsPatchWithObject:name:]

/**
 *  The fully qualified resource name of the App, for example:
 *  <br><code>projects/<var>projectId</var>/webApps/<var>appId</var></code>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies which fields to update.
 *  <br>Note that the fields `name`, `appId`, and `projectId` are all
 *  immutable.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseManagement_WebApp.
 *
 *  Updates the attributes of the WebApp identified by the specified
 *  resource name.
 *
 *  @param object The @c GTLRFirebaseManagement_WebApp to include in the query.
 *  @param name The fully qualified resource name of the App, for example:
 *    <br><code>projects/<var>projectId</var>/webApps/<var>appId</var></code>
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsWebAppsPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_WebApp *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
