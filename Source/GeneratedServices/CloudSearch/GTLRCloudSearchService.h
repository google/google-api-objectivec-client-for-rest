// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Search API (cloudsearch/v1)
// Description:
//   Cloud Search provides cloud-based search capabilities over G Suite data.
//   The Cloud Search API allows indexing of non-G Suite data into Cloud Search.
// Documentation:
//   https://gsuite.google.com/products/cloud-search/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRService.h"
#else
  #import "GTLRService.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Authorization scopes

/**
 *  Authorization scope: Index and serve your organization's data with Cloud
 *  Search
 *
 *  Value "https://www.googleapis.com/auth/cloud_search"
 */
GTLR_EXTERN NSString * const kGTLRAuthScopeCloudSearchCloudSearch;
/**
 *  Authorization scope: New Service:
 *  https://www.googleapis.com/auth/cloud_search.debug
 *
 *  Value "https://www.googleapis.com/auth/cloud_search.debug"
 */
GTLR_EXTERN NSString * const kGTLRAuthScopeCloudSearchCloudSearchDebug;
/**
 *  Authorization scope: New Service:
 *  https://www.googleapis.com/auth/cloud_search.indexing
 *
 *  Value "https://www.googleapis.com/auth/cloud_search.indexing"
 */
GTLR_EXTERN NSString * const kGTLRAuthScopeCloudSearchCloudSearchIndexing;
/**
 *  Authorization scope: Search your organization's data in the Cloud Search
 *  index
 *
 *  Value "https://www.googleapis.com/auth/cloud_search.query"
 */
GTLR_EXTERN NSString * const kGTLRAuthScopeCloudSearchCloudSearchQuery;
/**
 *  Authorization scope: New Service:
 *  https://www.googleapis.com/auth/cloud_search.settings
 *
 *  Value "https://www.googleapis.com/auth/cloud_search.settings"
 */
GTLR_EXTERN NSString * const kGTLRAuthScopeCloudSearchCloudSearchSettings;
/**
 *  Authorization scope: New Service:
 *  https://www.googleapis.com/auth/cloud_search.settings.indexing
 *
 *  Value "https://www.googleapis.com/auth/cloud_search.settings.indexing"
 */
GTLR_EXTERN NSString * const kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing;
/**
 *  Authorization scope: New Service:
 *  https://www.googleapis.com/auth/cloud_search.settings.query
 *
 *  Value "https://www.googleapis.com/auth/cloud_search.settings.query"
 */
GTLR_EXTERN NSString * const kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery;
/**
 *  Authorization scope: New Service:
 *  https://www.googleapis.com/auth/cloud_search.stats
 *
 *  Value "https://www.googleapis.com/auth/cloud_search.stats"
 */
GTLR_EXTERN NSString * const kGTLRAuthScopeCloudSearchCloudSearchStats;
/**
 *  Authorization scope: New Service:
 *  https://www.googleapis.com/auth/cloud_search.stats.indexing
 *
 *  Value "https://www.googleapis.com/auth/cloud_search.stats.indexing"
 */
GTLR_EXTERN NSString * const kGTLRAuthScopeCloudSearchCloudSearchStatsIndexing;

// ----------------------------------------------------------------------------
//   GTLRCloudSearchService
//

/**
 *  Service for executing Cloud Search API queries.
 *
 *  Cloud Search provides cloud-based search capabilities over G Suite data. The
 *  Cloud Search API allows indexing of non-G Suite data into Cloud Search.
 */
@interface GTLRCloudSearchService : GTLRService

// No new methods

// Clients should create a standard query with any of the class methods in
// GTLRCloudSearchQuery.h. The query can the be sent with GTLRService's execute
// methods,
//
//   - (GTLRServiceTicket *)executeQuery:(GTLRQuery *)query
//                     completionHandler:(void (^)(GTLRServiceTicket *ticket,
//                                                 id object, NSError *error))handler;
// or
//   - (GTLRServiceTicket *)executeQuery:(GTLRQuery *)query
//                              delegate:(id)delegate
//                     didFinishSelector:(SEL)finishedSelector;
//
// where finishedSelector has a signature of:
//
//   - (void)serviceTicket:(GTLRServiceTicket *)ticket
//      finishedWithObject:(id)object
//                   error:(NSError *)error;
//
// The object passed to the completion handler or delegate method
// is a subclass of GTLRObject, determined by the query method executed.

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
