// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Search API (cloudsearch/v1)
// Description:
//   Cloud Search provides cloud-based search capabilities over G Suite data.
//   The Cloud Search API allows indexing of non-G Suite data into Cloud Search.
// Documentation:
//   https://gsuite.google.com/products/cloud-search/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudSearch_DataSource;
@class GTLRCloudSearch_DeleteQueueItemsRequest;
@class GTLRCloudSearch_IndexItemRequest;
@class GTLRCloudSearch_Media;
@class GTLRCloudSearch_PollItemsRequest;
@class GTLRCloudSearch_Principal;
@class GTLRCloudSearch_PushItemRequest;
@class GTLRCloudSearch_ResetSearchApplicationRequest;
@class GTLRCloudSearch_SearchApplication;
@class GTLRCloudSearch_SearchItemsByViewUrlRequest;
@class GTLRCloudSearch_SearchRequest;
@class GTLRCloudSearch_StartUploadItemRequest;
@class GTLRCloudSearch_SuggestRequest;
@class GTLRCloudSearch_UnreserveItemsRequest;
@class GTLRCloudSearch_UpdateDataSourceRequest;
@class GTLRCloudSearch_UpdateSchemaRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// mode

/** Value: "ASYNCHRONOUS" */
GTLR_EXTERN NSString * const kGTLRCloudSearchModeAsynchronous;
/** Value: "SYNCHRONOUS" */
GTLR_EXTERN NSString * const kGTLRCloudSearchModeSynchronous;
/** Value: "UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRCloudSearchModeUnspecified;

// ----------------------------------------------------------------------------
// resolutionStatusCode

/** Value: "CODE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRCloudSearchResolutionStatusCodeCodeUnspecified;
/** Value: "IDENTITY_SOURCE_MISCONFIGURED" */
GTLR_EXTERN NSString * const kGTLRCloudSearchResolutionStatusCodeIdentitySourceMisconfigured;
/** Value: "IDENTITY_SOURCE_NOT_FOUND" */
GTLR_EXTERN NSString * const kGTLRCloudSearchResolutionStatusCodeIdentitySourceNotFound;
/** Value: "INTERNAL_ERROR" */
GTLR_EXTERN NSString * const kGTLRCloudSearchResolutionStatusCodeInternalError;
/** Value: "NOT_FOUND" */
GTLR_EXTERN NSString * const kGTLRCloudSearchResolutionStatusCodeNotFound;
/** Value: "TOO_MANY_MAPPINGS_FOUND" */
GTLR_EXTERN NSString * const kGTLRCloudSearchResolutionStatusCodeTooManyMappingsFound;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Cloud Search query classes.
 */
@interface GTLRCloudSearchQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Checks whether an item is accessible by specified principal.
 *
 *  Method: cloudsearch.debug.datasources.items.checkAccess
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchDebug
 */
@interface GTLRCloudSearchQuery_DebugDatasourcesItemsCheckAccess : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForDebugDatasourcesItemsCheckAccessWithObject:name:]

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  Item name, format:
 *  datasources/{source_id}/items/{item_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_CheckAccessResponse.
 *
 *  Checks whether an item is accessible by specified principal.
 *
 *  @param object The @c GTLRCloudSearch_Principal to include in the query.
 *  @param name Item name, format:
 *    datasources/{source_id}/items/{item_id}
 *
 *  @return GTLRCloudSearchQuery_DebugDatasourcesItemsCheckAccess
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_Principal *)object
                           name:(NSString *)name;

@end

/**
 *  Fetches the item whose viewUrl exactly matches that of the URL provided
 *  in the request.
 *
 *  Method: cloudsearch.debug.datasources.items.searchByViewUrl
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchDebug
 */
@interface GTLRCloudSearchQuery_DebugDatasourcesItemsSearchByViewUrl : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForDebugDatasourcesItemsSearchByViewUrlWithObject:name:]

/**
 *  Source name, format:
 *  datasources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_SearchItemsByViewUrlResponse.
 *
 *  Fetches the item whose viewUrl exactly matches that of the URL provided
 *  in the request.
 *
 *  @param object The @c GTLRCloudSearch_SearchItemsByViewUrlRequest to include
 *    in the query.
 *  @param name Source name, format:
 *    datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_DebugDatasourcesItemsSearchByViewUrl
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_SearchItemsByViewUrlRequest *)object
                           name:(NSString *)name;

@end

/**
 *  List all unmapped identities for a specific item.
 *
 *  Method: cloudsearch.debug.datasources.items.unmappedids.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchDebug
 */
@interface GTLRCloudSearchQuery_DebugDatasourcesItemsUnmappedidsList : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForDebugDatasourcesItemsUnmappedidsListWithparent:]

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  Maximum number of items to fetch in a request.
 *  Defaults to 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The name of the item, in the following format:
 *  datasources/{source_id}/items/{ID}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudSearch_ListUnmappedIdentitiesResponse.
 *
 *  List all unmapped identities for a specific item.
 *
 *  @param parent The name of the item, in the following format:
 *    datasources/{source_id}/items/{ID}
 *
 *  @return GTLRCloudSearchQuery_DebugDatasourcesItemsUnmappedidsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists names of items associated with an unmapped identity.
 *
 *  Method: cloudsearch.debug.identitysources.items.listForunmappedidentity
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchDebug
 */
@interface GTLRCloudSearchQuery_DebugIdentitysourcesItemsListForunmappedidentity : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForDebugIdentitysourcesItemsListForunmappedidentityWithparent:]

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

@property(nonatomic, copy, nullable) NSString *groupResourceName;

/**
 *  Maximum number of items to fetch in a request.
 *  Defaults to 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The name of the identity source, in the following format:
 *  identitysources/{source_id}}
 */
@property(nonatomic, copy, nullable) NSString *parent;

@property(nonatomic, copy, nullable) NSString *userResourceName;

/**
 *  Fetches a @c GTLRCloudSearch_ListItemNamesForUnmappedIdentityResponse.
 *
 *  Lists names of items associated with an unmapped identity.
 *
 *  @param parent The name of the identity source, in the following format:
 *    identitysources/{source_id}}
 *
 *  @return GTLRCloudSearchQuery_DebugIdentitysourcesItemsListForunmappedidentity
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists unmapped user identities for an identity source.
 *
 *  Method: cloudsearch.debug.identitysources.unmappedids.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchDebug
 */
@interface GTLRCloudSearchQuery_DebugIdentitysourcesUnmappedidsList : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForDebugIdentitysourcesUnmappedidsListWithparent:]

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  Maximum number of items to fetch in a request.
 *  Defaults to 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The name of the identity source, in the following format:
 *  identitysources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Limit users selection to this status.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearchResolutionStatusCodeCodeUnspecified Value
 *        "CODE_UNSPECIFIED"
 *    @arg @c kGTLRCloudSearchResolutionStatusCodeNotFound Value "NOT_FOUND"
 *    @arg @c kGTLRCloudSearchResolutionStatusCodeIdentitySourceNotFound Value
 *        "IDENTITY_SOURCE_NOT_FOUND"
 *    @arg @c kGTLRCloudSearchResolutionStatusCodeIdentitySourceMisconfigured
 *        Value "IDENTITY_SOURCE_MISCONFIGURED"
 *    @arg @c kGTLRCloudSearchResolutionStatusCodeTooManyMappingsFound Value
 *        "TOO_MANY_MAPPINGS_FOUND"
 *    @arg @c kGTLRCloudSearchResolutionStatusCodeInternalError Value
 *        "INTERNAL_ERROR"
 */
@property(nonatomic, copy, nullable) NSString *resolutionStatusCode;

/**
 *  Fetches a @c GTLRCloudSearch_ListUnmappedIdentitiesResponse.
 *
 *  Lists unmapped user identities for an identity source.
 *
 *  @param parent The name of the identity source, in the following format:
 *    identitysources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_DebugIdentitysourcesUnmappedidsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Deletes the schema of a data source.
 *
 *  Method: cloudsearch.indexing.datasources.deleteSchema
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesDeleteSchema : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForIndexingDatasourcesDeleteSchemaWithname:]

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  Name of the data source to delete Schema. Format:
 *  datasources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Deletes the schema of a data source.
 *
 *  @param name Name of the data source to delete Schema. Format:
 *    datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesDeleteSchema
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the schema of a data source.
 *
 *  Method: cloudsearch.indexing.datasources.getSchema
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesGetSchema : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForIndexingDatasourcesGetSchemaWithname:]

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  Name of the data source to get Schema. Format:
 *  datasources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Schema.
 *
 *  Gets the schema of a data source.
 *
 *  @param name Name of the data source to get Schema. Format:
 *    datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesGetSchema
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes Item resource for the
 *  specified resource name.
 *
 *  Method: cloudsearch.indexing.datasources.items.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsDelete : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForIndexingDatasourcesItemsDeleteWithname:]

/**
 *  Name of connector making this call.
 *  <br />Format: datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  Required. The RequestMode for this request.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearchModeUnspecified Value "UNSPECIFIED"
 *    @arg @c kGTLRCloudSearchModeSynchronous Value "SYNCHRONOUS"
 *    @arg @c kGTLRCloudSearchModeAsynchronous Value "ASYNCHRONOUS"
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  Required. Name of the item to delete.
 *  Format: datasources/{source_id}/items/{item_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The incremented version of the item to delete from the index.
 *  The indexing system stores the version from the datasource as a
 *  byte string and compares the Item version in the index
 *  to the version of the queued Item using lexical ordering.
 *  <br /><br />
 *  Cloud Search Indexing won't delete any queued item with
 *  a version value that is less than or equal to
 *  the version of the currently indexed item.
 *  The maximum length for this field is 1024 bytes.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *version;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Deletes Item resource for the
 *  specified resource name.
 *
 *  @param name Required. Name of the item to delete.
 *    Format: datasources/{source_id}/items/{item_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes all items in a queue. This method is useful for deleting stale
 *  items.
 *
 *  Method: cloudsearch.indexing.datasources.items.deleteQueueItems
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsDeleteQueueItems : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForIndexingDatasourcesItemsDeleteQueueItemsWithObject:name:]

/**
 *  Name of the Data Source to delete items in a queue.
 *  Format: datasources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Deletes all items in a queue. This method is useful for deleting stale
 *  items.
 *
 *  @param object The @c GTLRCloudSearch_DeleteQueueItemsRequest to include in
 *    the query.
 *  @param name Name of the Data Source to delete items in a queue.
 *    Format: datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsDeleteQueueItems
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_DeleteQueueItemsRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets Item resource by item name.
 *
 *  Method: cloudsearch.indexing.datasources.items.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsGet : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForIndexingDatasourcesItemsGetWithname:]

/**
 *  Name of connector making this call.
 *  <br />Format: datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  Name of the item to get info.
 *  Format: datasources/{source_id}/items/{item_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Item.
 *
 *  Gets Item resource by item name.
 *
 *  @param name Name of the item to get info.
 *    Format: datasources/{source_id}/items/{item_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates Item ACL, metadata, and
 *  content. It will insert the Item if it
 *  does not exist.
 *  This method does not support partial updates. Fields with no provided
 *  values are cleared out in the Cloud Search index.
 *
 *  Method: cloudsearch.indexing.datasources.items.index
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsIndex : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForIndexingDatasourcesItemsIndexWithObject:name:]

/**
 *  Name of the Item. Format:
 *  datasources/{source_id}/items/{item_id}
 *  <br />This is a required field.
 *  The maximum length is 1536 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Updates Item ACL, metadata, and
 *  content. It will insert the Item if it
 *  does not exist.
 *  This method does not support partial updates. Fields with no provided
 *  values are cleared out in the Cloud Search index.
 *
 *  @param object The @c GTLRCloudSearch_IndexItemRequest to include in the
 *    query.
 *  @param name Name of the Item. Format:
 *    datasources/{source_id}/items/{item_id}
 *    <br />This is a required field.
 *    The maximum length is 1536 characters.
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsIndex
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_IndexItemRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists all or a subset of Item resources.
 *
 *  Method: cloudsearch.indexing.datasources.items.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsList : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForIndexingDatasourcesItemsListWithname:]

/**
 *  When set to true, the indexing system only populates the following fields:
 *  name,
 *  version,
 *  metadata.hash,
 *  structured_data.hash,
 *  content.hash.
 *  <br />If this value is false, then all the fields are populated in Item.
 */
@property(nonatomic, assign) BOOL brief;

/**
 *  Name of connector making this call.
 *  <br />Format: datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  Name of the Data Source to list Items. Format:
 *  datasources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Maximum number of items to fetch in a request.
 *  The max value is 1000 when brief is true. The max value is 10 if brief
 *  is false.
 *  <br />The default value is 10
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudSearch_ListItemsResponse.
 *
 *  Lists all or a subset of Item resources.
 *
 *  @param name Name of the Data Source to list Items. Format:
 *    datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Polls for unreserved items from the indexing queue and marks a
 *  set as reserved, starting with items that have
 *  the oldest timestamp from the highest priority
 *  ItemStatus.
 *  The priority order is as follows: <br />
 *  ERROR
 *  <br />
 *  MODIFIED
 *  <br />
 *  NEW_ITEM
 *  <br />
 *  ACCEPTED
 *  <br />
 *  Reserving items ensures that polling from other threads
 *  cannot create overlapping sets.
 *  After handling the reserved items, the client should put items back
 *  into the unreserved state, either by calling
 *  index,
 *  or by calling
 *  push with
 *  the type REQUEUE.
 *  Items automatically become available (unreserved) after 4 hours even if no
 *  update or push method is called.
 *
 *  Method: cloudsearch.indexing.datasources.items.poll
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsPoll : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForIndexingDatasourcesItemsPollWithObject:name:]

/**
 *  Name of the Data Source to poll items.
 *  Format: datasources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_PollItemsResponse.
 *
 *  Polls for unreserved items from the indexing queue and marks a
 *  set as reserved, starting with items that have
 *  the oldest timestamp from the highest priority
 *  ItemStatus.
 *  The priority order is as follows: <br />
 *  ERROR
 *  <br />
 *  MODIFIED
 *  <br />
 *  NEW_ITEM
 *  <br />
 *  ACCEPTED
 *  <br />
 *  Reserving items ensures that polling from other threads
 *  cannot create overlapping sets.
 *  After handling the reserved items, the client should put items back
 *  into the unreserved state, either by calling
 *  index,
 *  or by calling
 *  push with
 *  the type REQUEUE.
 *  Items automatically become available (unreserved) after 4 hours even if no
 *  update or push method is called.
 *
 *  @param object The @c GTLRCloudSearch_PollItemsRequest to include in the
 *    query.
 *  @param name Name of the Data Source to poll items.
 *    Format: datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsPoll
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_PollItemsRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Pushes an item onto a queue for later polling and updating.
 *
 *  Method: cloudsearch.indexing.datasources.items.push
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsPush : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForIndexingDatasourcesItemsPushWithObject:name:]

/**
 *  Name of the item to
 *  push into the indexing queue.<br />
 *  Format: datasources/{source_id}/items/{ID}
 *  <br />This is a required field.
 *  The maximum length is 1536 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Item.
 *
 *  Pushes an item onto a queue for later polling and updating.
 *
 *  @param object The @c GTLRCloudSearch_PushItemRequest to include in the
 *    query.
 *  @param name Name of the item to
 *    push into the indexing queue.<br />
 *    Format: datasources/{source_id}/items/{ID}
 *    <br />This is a required field.
 *    The maximum length is 1536 characters.
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsPush
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_PushItemRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Unreserves all items from a queue, making them all eligible to be
 *  polled. This method is useful for resetting the indexing queue
 *  after a connector has been restarted.
 *
 *  Method: cloudsearch.indexing.datasources.items.unreserve
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsUnreserve : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForIndexingDatasourcesItemsUnreserveWithObject:name:]

/**
 *  Name of the Data Source to unreserve all items.
 *  Format: datasources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Unreserves all items from a queue, making them all eligible to be
 *  polled. This method is useful for resetting the indexing queue
 *  after a connector has been restarted.
 *
 *  @param object The @c GTLRCloudSearch_UnreserveItemsRequest to include in the
 *    query.
 *  @param name Name of the Data Source to unreserve all items.
 *    Format: datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsUnreserve
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_UnreserveItemsRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates an upload session for uploading item content. For items smaller
 *  than 100 KiB, it's easier to embed the content
 *  inline within
 *  update.
 *
 *  Method: cloudsearch.indexing.datasources.items.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsUpload : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForIndexingDatasourcesItemsUploadWithObject:name:]

/**
 *  Name of the Data Source to start a resumable upload.
 *  Format: datasources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_UploadItemRef.
 *
 *  Creates an upload session for uploading item content. For items smaller
 *  than 100 KiB, it's easier to embed the content
 *  inline within
 *  update.
 *
 *  @param object The @c GTLRCloudSearch_StartUploadItemRequest to include in
 *    the query.
 *  @param name Name of the Data Source to start a resumable upload.
 *    Format: datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsUpload
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_StartUploadItemRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the schema of a data source.
 *
 *  Method: cloudsearch.indexing.datasources.updateSchema
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesUpdateSchema : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForIndexingDatasourcesUpdateSchemaWithObject:name:]

/**
 *  Name of the data source to update Schema. Format:
 *  datasources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Updates the schema of a data source.
 *
 *  @param object The @c GTLRCloudSearch_UpdateSchemaRequest to include in the
 *    query.
 *  @param name Name of the data source to update Schema. Format:
 *    datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesUpdateSchema
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_UpdateSchemaRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Uploads media for indexing.
 *  The upload endpoint supports direct and resumable upload protocols and
 *  is intended for large items that can not be inlined during index requests.
 *  To
 *  index large content:
 *  1. Call upload to begin
 *  a session and get the item reference.
 *  1. Upload the content using the item reference's resource name.
 *  1. Call index with the item
 *  reference as the content.
 *  For additional information, see
 *  [Create a content connector using the REST
 *  API](https://developers.google.com/cloud-search/docs/guides/content-connector#rest).
 *
 *  Method: cloudsearch.media.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_MediaUpload : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForMediaUploadWithObject:resourceName:]

/**
 *  Name of the media that is being downloaded. See
 *  ReadRequest.resource_name.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Fetches a @c GTLRCloudSearch_Media.
 *
 *  Uploads media for indexing.
 *  The upload endpoint supports direct and resumable upload protocols and
 *  is intended for large items that can not be inlined during index requests.
 *  To
 *  index large content:
 *  1. Call upload to begin
 *  a session and get the item reference.
 *  1. Upload the content using the item reference's resource name.
 *  1. Call index with the item
 *  reference as the content.
 *  For additional information, see
 *  [Create a content connector using the REST
 *  API](https://developers.google.com/cloud-search/docs/guides/content-connector#rest).
 *
 *  @param object The @c GTLRCloudSearch_Media to include in the query.
 *  @param resourceName Name of the media that is being downloaded. See
 *    ReadRequest.resource_name.
 *  @param uploadParameters The media to include in this query. Accepted MIME
 *    type: * / *
 *
 *  @return GTLRCloudSearchQuery_MediaUpload
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_Media *)object
                   resourceName:(NSString *)resourceName
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: cloudsearch.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchDebug
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery
 */
@interface GTLRCloudSearchQuery_OperationsGet : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRCloudSearchQuery_OperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  The Cloud Search Query API provides the search method, which returns
 *  the most relevant results from a user query. The results can come from
 *  G Suite Apps, such as Gmail or Google Drive, or they can come from data
 *  that you have indexed from a third party.
 *
 *  Method: cloudsearch.query.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchQuery
 */
@interface GTLRCloudSearchQuery_QuerySearch : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForQuerySearchWithObject:]

/**
 *  Fetches a @c GTLRCloudSearch_SearchResponse.
 *
 *  The Cloud Search Query API provides the search method, which returns
 *  the most relevant results from a user query. The results can come from
 *  G Suite Apps, such as Gmail or Google Drive, or they can come from data
 *  that you have indexed from a third party.
 *
 *  @param object The @c GTLRCloudSearch_SearchRequest to include in the query.
 *
 *  @return GTLRCloudSearchQuery_QuerySearch
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_SearchRequest *)object;

@end

/**
 *  Returns list of sources that user can use for Search and Suggest APIs.
 *
 *  Method: cloudsearch.query.sources.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchQuery
 */
@interface GTLRCloudSearchQuery_QuerySourcesList : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForQuerySourcesList]

/** Number of sources to return in the response. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 */
@property(nonatomic, assign) BOOL requestOptionsDebugOptionsEnableDebugging;

/**
 *  The BCP-47 language code, such as "en-US" or "sr-Latn".
 *  For more information, see
 *  http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
 *  For translations.
 */
@property(nonatomic, copy, nullable) NSString *requestOptionsLanguageCode;

/** Id of the application created using SearchApplicationsService. */
@property(nonatomic, copy, nullable) NSString *requestOptionsSearchApplicationId;

/**
 *  Current user's time zone id, such as "America/Los_Angeles" or
 *  "Australia/Sydney". These IDs are defined by
 *  [Unicode Common Locale Data Repository (CLDR)](http://cldr.unicode.org/)
 *  project, and currently available in the file
 *  [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml)
 */
@property(nonatomic, copy, nullable) NSString *requestOptionsTimeZone;

/**
 *  Fetches a @c GTLRCloudSearch_ListQuerySourcesResponse.
 *
 *  Returns list of sources that user can use for Search and Suggest APIs.
 *
 *  @return GTLRCloudSearchQuery_QuerySourcesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Provides suggestions for autocompleting the query.
 *
 *  Method: cloudsearch.query.suggest
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchQuery
 */
@interface GTLRCloudSearchQuery_QuerySuggest : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForQuerySuggestWithObject:]

/**
 *  Fetches a @c GTLRCloudSearch_SuggestResponse.
 *
 *  Provides suggestions for autocompleting the query.
 *
 *  @param object The @c GTLRCloudSearch_SuggestRequest to include in the query.
 *
 *  @return GTLRCloudSearchQuery_QuerySuggest
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_SuggestRequest *)object;

@end

/**
 *  Creates data source.
 *
 *  Method: cloudsearch.settings.datasources.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_SettingsDatasourcesCreate : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForSettingsDatasourcesCreateWithObject:]

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Creates data source.
 *
 *  @param object The @c GTLRCloudSearch_DataSource to include in the query.
 *
 *  @return GTLRCloudSearchQuery_SettingsDatasourcesCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_DataSource *)object;

@end

/**
 *  Deletes a data source.
 *
 *  Method: cloudsearch.settings.datasources.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_SettingsDatasourcesDelete : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForSettingsDatasourcesDeleteWithname:]

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  Name of the data source.
 *  Format: datasources/{source_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Deletes a data source.
 *
 *  @param name Name of the data source.
 *    Format: datasources/{source_id}.
 *
 *  @return GTLRCloudSearchQuery_SettingsDatasourcesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a data source.
 *
 *  Method: cloudsearch.settings.datasources.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_SettingsDatasourcesGet : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForSettingsDatasourcesGetWithname:]

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  Name of the data source resource.
 *  Format: datasources/{source_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_DataSource.
 *
 *  Gets a data source.
 *
 *  @param name Name of the data source resource.
 *    Format: datasources/{source_id}.
 *
 *  @return GTLRCloudSearchQuery_SettingsDatasourcesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists data sources.
 *
 *  Method: cloudsearch.settings.datasources.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_SettingsDatasourcesList : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForSettingsDatasourcesList]

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  Maximum number of data sources to fetch in a request.
 *  The max value is 100.
 *  <br />The default value is 10
 */
@property(nonatomic, assign) NSInteger pageSize;

/** Starting index of the results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudSearch_ListDataSourceResponse.
 *
 *  Lists data sources.
 *
 *  @return GTLRCloudSearchQuery_SettingsDatasourcesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Updates a data source.
 *
 *  Method: cloudsearch.settings.datasources.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_SettingsDatasourcesUpdate : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForSettingsDatasourcesUpdateWithObject:name:]

/**
 *  Name of the data source resource.
 *  Format: datasources/{source_id}.
 *  <br />The name is ignored when creating a data source.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Updates a data source.
 *
 *  @param object The @c GTLRCloudSearch_UpdateDataSourceRequest to include in
 *    the query.
 *  @param name Name of the data source resource.
 *    Format: datasources/{source_id}.
 *    <br />The name is ignored when creating a data source.
 *
 *  @return GTLRCloudSearchQuery_SettingsDatasourcesUpdate
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_UpdateDataSourceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a search application.
 *
 *  Method: cloudsearch.settings.searchapplications.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery
 */
@interface GTLRCloudSearchQuery_SettingsSearchapplicationsCreate : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForSettingsSearchapplicationsCreateWithObject:]

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Creates a search application.
 *
 *  @param object The @c GTLRCloudSearch_SearchApplication to include in the
 *    query.
 *
 *  @return GTLRCloudSearchQuery_SettingsSearchapplicationsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_SearchApplication *)object;

@end

/**
 *  Deletes a search application.
 *
 *  Method: cloudsearch.settings.searchapplications.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery
 */
@interface GTLRCloudSearchQuery_SettingsSearchapplicationsDelete : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForSettingsSearchapplicationsDeleteWithname:]

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  The name of the search application to be deleted.
 *  <br />Format: applications/{application_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Deletes a search application.
 *
 *  @param name The name of the search application to be deleted.
 *    <br />Format: applications/{application_id}.
 *
 *  @return GTLRCloudSearchQuery_SettingsSearchapplicationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the specified search application.
 *
 *  Method: cloudsearch.settings.searchapplications.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery
 */
@interface GTLRCloudSearchQuery_SettingsSearchapplicationsGet : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForSettingsSearchapplicationsGetWithname:]

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  Name of the search application.
 *  <br />Format: applications/{application_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_SearchApplication.
 *
 *  Gets the specified search application.
 *
 *  @param name Name of the search application.
 *    <br />Format: applications/{application_id}.
 *
 *  @return GTLRCloudSearchQuery_SettingsSearchapplicationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all search applications.
 *
 *  Method: cloudsearch.settings.searchapplications.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery
 */
@interface GTLRCloudSearchQuery_SettingsSearchapplicationsList : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForSettingsSearchapplicationsList]

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/** The maximum number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous List request, if any.
 *  <br/> The default value is 10
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudSearch_ListSearchApplicationsResponse.
 *
 *  Lists all search applications.
 *
 *  @return GTLRCloudSearchQuery_SettingsSearchapplicationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Resets a search application to default settings. This will return an empty
 *  response.
 *
 *  Method: cloudsearch.settings.searchapplications.reset
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery
 */
@interface GTLRCloudSearchQuery_SettingsSearchapplicationsReset : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForSettingsSearchapplicationsResetWithObject:name:]

/**
 *  The name of the search application to be reset.
 *  <br />Format: applications/{application_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Resets a search application to default settings. This will return an empty
 *  response.
 *
 *  @param object The @c GTLRCloudSearch_ResetSearchApplicationRequest to
 *    include in the query.
 *  @param name The name of the search application to be reset.
 *    <br />Format: applications/{application_id}.
 *
 *  @return GTLRCloudSearchQuery_SettingsSearchapplicationsReset
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_ResetSearchApplicationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a search application.
 *
 *  Method: cloudsearch.settings.searchapplications.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery
 */
@interface GTLRCloudSearchQuery_SettingsSearchapplicationsUpdate : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForSettingsSearchapplicationsUpdateWithObject:name:]

/**
 *  Name of the Search Application.
 *  <br />Format: searchapplications/{application_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Updates a search application.
 *
 *  @param object The @c GTLRCloudSearch_SearchApplication to include in the
 *    query.
 *  @param name Name of the Search Application.
 *    <br />Format: searchapplications/{application_id}.
 *
 *  @return GTLRCloudSearchQuery_SettingsSearchapplicationsUpdate
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_SearchApplication *)object
                           name:(NSString *)name;

@end

/**
 *  Gets indexed item statistics aggreggated across all data sources.
 *
 *  Method: cloudsearch.stats.getIndex
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStats
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStatsIndexing
 */
@interface GTLRCloudSearchQuery_StatsGetIndex : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForStatsGetIndex]

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger fromDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger fromDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger fromDateYear;

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger toDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger toDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger toDateYear;

/**
 *  Fetches a @c GTLRCloudSearch_GetCustomerIndexStatsResponse.
 *
 *  Gets indexed item statistics aggreggated across all data sources.
 *
 *  @return GTLRCloudSearchQuery_StatsGetIndex
 */
+ (instancetype)query;

@end

/**
 *  Gets indexed item statistics for a single data source.
 *
 *  Method: cloudsearch.stats.index.datasources.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStats
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStatsIndexing
 */
@interface GTLRCloudSearchQuery_StatsIndexDatasourcesGet : GTLRCloudSearchQuery
// Previous library name was
//   +[GTLQueryCloudSearch queryForStatsIndexDatasourcesGetWithname:]

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger fromDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger fromDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger fromDateYear;

/**
 *  The resource id of the data source to retrieve statistics for,
 *  in the following format: "datasources/{source_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger toDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger toDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger toDateYear;

/**
 *  Fetches a @c GTLRCloudSearch_GetDataSourceIndexStatsResponse.
 *
 *  Gets indexed item statistics for a single data source.
 *
 *  @param name The resource id of the data source to retrieve statistics for,
 *    in the following format: "datasources/{source_id}"
 *
 *  @return GTLRCloudSearchQuery_StatsIndexDatasourcesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
