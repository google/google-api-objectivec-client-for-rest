// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Search API (cloudsearch/v1)
// Description:
//   Cloud Search provides cloud-based search capabilities over G Suite data.
//   The Cloud Search API allows indexing of non-G Suite data into Cloud Search.
// Documentation:
//   https://gsuite.google.com/products/cloud-search/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudSearch_BooleanOperatorOptions;
@class GTLRCloudSearch_BooleanPropertyOptions;
@class GTLRCloudSearch_CompositeFilter;
@class GTLRCloudSearch_CustomerIndexStats;
@class GTLRCloudSearch_DataSource;
@class GTLRCloudSearch_DataSourceIndexStats;
@class GTLRCloudSearch_DataSourceRestriction;
@class GTLRCloudSearch_Date;
@class GTLRCloudSearch_DateOperatorOptions;
@class GTLRCloudSearch_DatePropertyOptions;
@class GTLRCloudSearch_DateValues;
@class GTLRCloudSearch_DebugOptions;
@class GTLRCloudSearch_DisplayedProperty;
@class GTLRCloudSearch_DoubleOperatorOptions;
@class GTLRCloudSearch_DoublePropertyOptions;
@class GTLRCloudSearch_DoubleValues;
@class GTLRCloudSearch_DriveFollowUpRestrict;
@class GTLRCloudSearch_DriveLocationRestrict;
@class GTLRCloudSearch_DriveMimeTypeRestrict;
@class GTLRCloudSearch_DriveTimeSpanRestrict;
@class GTLRCloudSearch_EmailAddress;
@class GTLRCloudSearch_EnumOperatorOptions;
@class GTLRCloudSearch_EnumPropertyOptions;
@class GTLRCloudSearch_EnumValuePair;
@class GTLRCloudSearch_EnumValues;
@class GTLRCloudSearch_ErrorInfo;
@class GTLRCloudSearch_ErrorMessage;
@class GTLRCloudSearch_FacetBucket;
@class GTLRCloudSearch_FacetOptions;
@class GTLRCloudSearch_FacetResult;
@class GTLRCloudSearch_FieldViolation;
@class GTLRCloudSearch_Filter;
@class GTLRCloudSearch_FilterOptions;
@class GTLRCloudSearch_FreshnessOptions;
@class GTLRCloudSearch_GSuitePrincipal;
@class GTLRCloudSearch_HtmlOperatorOptions;
@class GTLRCloudSearch_HtmlPropertyOptions;
@class GTLRCloudSearch_HtmlValues;
@class GTLRCloudSearch_IntegerOperatorOptions;
@class GTLRCloudSearch_IntegerPropertyOptions;
@class GTLRCloudSearch_IntegerValues;
@class GTLRCloudSearch_Interaction;
@class GTLRCloudSearch_Item;
@class GTLRCloudSearch_ItemAcl;
@class GTLRCloudSearch_ItemContent;
@class GTLRCloudSearch_ItemCountByStatus;
@class GTLRCloudSearch_ItemMetadata;
@class GTLRCloudSearch_ItemStatus;
@class GTLRCloudSearch_ItemStructuredData;
@class GTLRCloudSearch_MatchRange;
@class GTLRCloudSearch_Metadata;
@class GTLRCloudSearch_Metaline;
@class GTLRCloudSearch_Name;
@class GTLRCloudSearch_NamedProperty;
@class GTLRCloudSearch_ObjectDefinition;
@class GTLRCloudSearch_ObjectDisplayOptions;
@class GTLRCloudSearch_ObjectOptions;
@class GTLRCloudSearch_ObjectPropertyOptions;
@class GTLRCloudSearch_ObjectValues;
@class GTLRCloudSearch_Operation_Metadata;
@class GTLRCloudSearch_Operation_Response;
@class GTLRCloudSearch_PeopleSuggestion;
@class GTLRCloudSearch_Person;
@class GTLRCloudSearch_Photo;
@class GTLRCloudSearch_Principal;
@class GTLRCloudSearch_ProcessingError;
@class GTLRCloudSearch_PropertyDefinition;
@class GTLRCloudSearch_PropertyDisplayOptions;
@class GTLRCloudSearch_PushItem;
@class GTLRCloudSearch_QueryInterpretation;
@class GTLRCloudSearch_QueryInterpretationOptions;
@class GTLRCloudSearch_QueryOperator;
@class GTLRCloudSearch_QuerySource;
@class GTLRCloudSearch_QuerySuggestion;
@class GTLRCloudSearch_RepositoryError;
@class GTLRCloudSearch_RequestOptions;
@class GTLRCloudSearch_ResponseDebugInfo;
@class GTLRCloudSearch_ResultCounts;
@class GTLRCloudSearch_ResultDebugInfo;
@class GTLRCloudSearch_ResultDisplayField;
@class GTLRCloudSearch_ResultDisplayLine;
@class GTLRCloudSearch_ResultDisplayMetadata;
@class GTLRCloudSearch_RetrievalImportance;
@class GTLRCloudSearch_Schema;
@class GTLRCloudSearch_ScoringConfig;
@class GTLRCloudSearch_SearchApplication;
@class GTLRCloudSearch_SearchQualityMetadata;
@class GTLRCloudSearch_SearchResult;
@class GTLRCloudSearch_Snippet;
@class GTLRCloudSearch_SortOptions;
@class GTLRCloudSearch_Source;
@class GTLRCloudSearch_SourceConfig;
@class GTLRCloudSearch_SourceCrowdingConfig;
@class GTLRCloudSearch_SourceResultCount;
@class GTLRCloudSearch_SourceScoringConfig;
@class GTLRCloudSearch_SpellResult;
@class GTLRCloudSearch_Status;
@class GTLRCloudSearch_Status_Details_Item;
@class GTLRCloudSearch_StructuredDataObject;
@class GTLRCloudSearch_StructuredResult;
@class GTLRCloudSearch_SuggestResult;
@class GTLRCloudSearch_TextOperatorOptions;
@class GTLRCloudSearch_TextPropertyOptions;
@class GTLRCloudSearch_TextValues;
@class GTLRCloudSearch_TimestampOperatorOptions;
@class GTLRCloudSearch_TimestampPropertyOptions;
@class GTLRCloudSearch_TimestampValues;
@class GTLRCloudSearch_UnmappedIdentity;
@class GTLRCloudSearch_UploadItemRef;
@class GTLRCloudSearch_Value;
@class GTLRCloudSearch_ValueFilter;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudSearch_CompositeFilter.logicOperator

/**
 *  Logical operators, which can only be applied to sub filters.
 *
 *  Value: "AND"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_CompositeFilter_LogicOperator_And;
/**
 *  NOT can only be applied on a single sub filter.
 *
 *  Value: "NOT"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_CompositeFilter_LogicOperator_Not;
/** Value: "OR" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_CompositeFilter_LogicOperator_Or;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_DriveFollowUpRestrict.type

/** Value: "FOLLOWUP_ACTION_ITEMS" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveFollowUpRestrict_Type_FollowupActionItems;
/** Value: "FOLLOWUP_SUGGESTIONS" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveFollowUpRestrict_Type_FollowupSuggestions;
/** Value: "UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveFollowUpRestrict_Type_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_DriveLocationRestrict.type

/** Value: "STARRED" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveLocationRestrict_Type_Starred;
/** Value: "TRASHED" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveLocationRestrict_Type_Trashed;
/** Value: "UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveLocationRestrict_Type_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_DriveMimeTypeRestrict.type

/** Value: "ARCHIVE" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Archive;
/** Value: "AUDIO" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Audio;
/** Value: "DOCUMENT" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Document;
/** Value: "DRAWING" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Drawing;
/** Value: "FOLDER" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Folder;
/** Value: "FORM" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Form;
/** Value: "IMAGE" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Image;
/** Value: "MAP" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Map;
/** Value: "PDF" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Pdf;
/** Value: "PRESENTATION" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Presentation;
/** Value: "SCRIPT" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Script;
/** Value: "SITE" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Site;
/** Value: "SPREADSHEET" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Spreadsheet;
/** Value: "UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Unspecified;
/** Value: "VIDEO" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Video;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_DriveTimeSpanRestrict.type

/**
 *  Not Enabled
 *
 *  Value: "LAST_30_DAYS"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Last30Days;
/** Value: "LAST_7_DAYS" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Last7Days;
/**
 *  Not Enabled
 *
 *  Value: "LAST_90_DAYS"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Last90Days;
/** Value: "TODAY" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Today;
/** Value: "UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Unspecified;
/** Value: "YESTERDAY" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Yesterday;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_EnumPropertyOptions.orderedRanking

/**
 *  This property is ranked in ascending order. Lower values indicate lower
 *  ranking.
 *
 *  Value: "ASCENDING"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_EnumPropertyOptions_OrderedRanking_Ascending;
/**
 *  This property is ranked in descending order. Lower values indicate
 *  higher ranking.
 *
 *  Value: "DESCENDING"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_EnumPropertyOptions_OrderedRanking_Descending;
/**
 *  There is no ranking order for the property. Results will not be adjusted
 *  by this property's value.
 *
 *  Value: "NO_ORDER"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_EnumPropertyOptions_OrderedRanking_NoOrder;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_IndexItemRequest.mode

/**
 *  For changes that are executed after the response is sent back to the
 *  caller.
 *
 *  Value: "ASYNCHRONOUS"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_IndexItemRequest_Mode_Asynchronous;
/**
 *  For real-time updates.
 *
 *  Value: "SYNCHRONOUS"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_IndexItemRequest_Mode_Synchronous;
/**
 *  Priority is not specified in the update request.
 *  Leaving priority unspecified results in an update failure.
 *
 *  Value: "UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_IndexItemRequest_Mode_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_IntegerPropertyOptions.orderedRanking

/**
 *  This property is ranked in ascending order. Lower values indicate lower
 *  ranking.
 *
 *  Value: "ASCENDING"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_IntegerPropertyOptions_OrderedRanking_Ascending;
/**
 *  This property is ranked in descending order. Lower values indicate
 *  higher ranking.
 *
 *  Value: "DESCENDING"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_IntegerPropertyOptions_OrderedRanking_Descending;
/**
 *  There is no ranking order for the property. Results will not be adjusted
 *  by this property's value.
 *
 *  Value: "NO_ORDER"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_IntegerPropertyOptions_OrderedRanking_NoOrder;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Interaction.type

/**
 *  This interaction indicates the user edited the item.
 *
 *  Value: "EDIT"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_Interaction_Type_Edit;
/**
 *  Invalid value.
 *
 *  Value: "UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_Interaction_Type_Unspecified;
/**
 *  This interaction indicates the user viewed the item.
 *
 *  Value: "VIEW"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_Interaction_Type_View;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Item.itemType

/**
 *  An item that gets indexed and whose purpose is to supply other items
 *  with ACLs and/or contain other items.
 *
 *  Value: "CONTAINER_ITEM"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_Item_ItemType_ContainerItem;
/**
 *  An item that is indexed for the only purpose of serving information.
 *  These items cannot be referred in
 *  containerName
 *  or inheritAclFrom
 *  fields.
 *
 *  Value: "CONTENT_ITEM"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_Item_ItemType_ContentItem;
/** Value: "UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_Item_ItemType_Unspecified;
/**
 *  An item that does not get indexed, but otherwise has the same purpose
 *  as CONTAINER_ITEM.
 *
 *  Value: "VIRTUAL_CONTAINER_ITEM"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_Item_ItemType_VirtualContainerItem;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_ItemAcl.aclInheritanceType

/**
 *  Access is granted only if this item and the parent item specified in
 *  the inheritAclFrom
 *  field both permit read access.
 *
 *  Value: "BOTH_PERMIT"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemAcl_AclInheritanceType_BothPermit;
/**
 *  During an authorization conflict, the ACL of the child item determines
 *  its read access.
 *
 *  Value: "CHILD_OVERRIDE"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemAcl_AclInheritanceType_ChildOverride;
/**
 *  The default value when this item does not inherit an ACL.
 *  Use NOT_APPLICABLE when
 *  inheritAclFrom
 *  is empty. An item without ACL inheritance can still have ACLs supplied
 *  by its own readers and
 *  deniedReaders fields.
 *
 *  Value: "NOT_APPLICABLE"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemAcl_AclInheritanceType_NotApplicable;
/**
 *  During an authorization conflict, the ACL of the parent item
 *  specified in the
 *  inheritAclFrom
 *  field determines read access.
 *
 *  Value: "PARENT_OVERRIDE"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemAcl_AclInheritanceType_ParentOverride;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_ItemContent.contentFormat

/**
 *  contentFormat is HTML.
 *
 *  Value: "HTML"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemContent_ContentFormat_Html;
/**
 *  contentFormat is raw bytes.
 *
 *  Value: "RAW"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemContent_ContentFormat_Raw;
/**
 *  contentFormat is free text.
 *
 *  Value: "TEXT"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemContent_ContentFormat_Text;
/**
 *  Invalid value.
 *
 *  Value: "UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemContent_ContentFormat_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_ItemCountByStatus.statusCode

/**
 *  API has accepted the up-to-date data of this item.
 *
 *  Value: "ACCEPTED"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemCountByStatus_StatusCode_Accepted;
/**
 *  Input-only value. Used with
 *  Items.list
 *  to list all items in the queue, regardless of status.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemCountByStatus_StatusCode_CodeUnspecified;
/**
 *  Error encountered by Cloud Search while processing this item.
 *  Details of the error are in
 *  repositoryError.
 *
 *  Value: "ERROR"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemCountByStatus_StatusCode_Error;
/**
 *  Item has been modified in the repository, and is out of date with
 *  the version previously accepted into Cloud Search.
 *
 *  Value: "MODIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemCountByStatus_StatusCode_Modified;
/**
 *  Item is known to exist in the repository, but is not yet accepted by
 *  Cloud Search.
 *  An item can be in this state when
 *  Items.push
 *  has been called for
 *  an item of this name that did not exist previously.
 *
 *  Value: "NEW_ITEM"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemCountByStatus_StatusCode_NewItem;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_ItemStatus.code

/**
 *  API has accepted the up-to-date data of this item.
 *
 *  Value: "ACCEPTED"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemStatus_Code_Accepted;
/**
 *  Input-only value. Used with
 *  Items.list
 *  to list all items in the queue, regardless of status.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemStatus_Code_CodeUnspecified;
/**
 *  Error encountered by Cloud Search while processing this item.
 *  Details of the error are in
 *  repositoryError.
 *
 *  Value: "ERROR"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemStatus_Code_Error;
/**
 *  Item has been modified in the repository, and is out of date with
 *  the version previously accepted into Cloud Search.
 *
 *  Value: "MODIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemStatus_Code_Modified;
/**
 *  Item is known to exist in the repository, but is not yet accepted by
 *  Cloud Search.
 *  An item can be in this state when
 *  Items.push
 *  has been called for
 *  an item of this name that did not exist previously.
 *
 *  Value: "NEW_ITEM"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ItemStatus_Code_NewItem;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_PollItemsRequest.statusCodes

/** Value: "ACCEPTED" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_PollItemsRequest_StatusCodes_Accepted;
/** Value: "CODE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_PollItemsRequest_StatusCodes_CodeUnspecified;
/** Value: "ERROR" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_PollItemsRequest_StatusCodes_Error;
/** Value: "MODIFIED" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_PollItemsRequest_StatusCodes_Modified;
/** Value: "NEW_ITEM" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_PollItemsRequest_StatusCodes_NewItem;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_ProcessingError.code

/**
 *  ACL inheritance graph formed a cycle.
 *
 *  Value: "ACL_CYCLE"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ProcessingError_Code_AclCycle;
/**
 *  Items with incomplete ACL information due to inheriting other
 *  items with broken ACL or having groups with unmapped descendants.
 *
 *  Value: "INDIRECT_BROKEN_ACL"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ProcessingError_Code_IndirectBrokenAcl;
/**
 *  Item's ACL, metadata, or content is malformed or in invalid state.
 *  FieldViolations contains more details on where the problem is.
 *
 *  Value: "MALFORMED_REQUEST"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ProcessingError_Code_MalformedRequest;
/**
 *  Input only value. Use this value in Items.
 *
 *  Value: "PROCESSING_ERROR_CODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ProcessingError_Code_ProcessingErrorCodeUnspecified;
/**
 *  Countent format is unsupported.
 *
 *  Value: "UNSUPPORTED_CONTENT_FORMAT"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_ProcessingError_Code_UnsupportedContentFormat;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_PushItem.type

/**
 *  Indicates that the repository document has been modified or updated since
 *  the previous
 *  update
 *  call. This changes status to
 *  MODIFIED state for
 *  an existing item. If this is called on a non existing item, the status is
 *  changed to
 *  NEW_ITEM.
 *
 *  Value: "MODIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_PushItem_Type_Modified;
/**
 *  Item in the repository has not been modified since the last update
 *  call. This push operation will set status to
 *  ACCEPTED state.
 *
 *  Value: "NOT_MODIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_PushItem_Type_NotModified;
/**
 *  Connector is facing a repository error regarding this item. Change
 *  status to
 *  REPOSITORY_ERROR
 *  state. Item is unreserved and rescheduled at a future time determined by
 *  exponential backoff.
 *
 *  Value: "REPOSITORY_ERROR"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_PushItem_Type_RepositoryError;
/**
 *  Call push with REQUEUE only for items that have been reserved.
 *  This action unreserves the item and resets its available time to the
 *  wall clock time.
 *
 *  Value: "REQUEUE"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_PushItem_Type_Requeue;
/**
 *  Default UNSPECIFIED. Specifies that the push operation should not modify
 *  ItemStatus
 *
 *  Value: "UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_PushItem_Type_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_QueryInterpretation.interpretationType

/**
 *  The natural language results is mixed with results from original query.
 *
 *  Value: "BLEND"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_QueryInterpretation_InterpretationType_Blend;
/**
 *  No natural language interpretation or the natural language interpretation
 *  is not used to fetch the search results.
 *
 *  Value: "NONE"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_QueryInterpretation_InterpretationType_None;
/**
 *  The results only contain natural language results.
 *
 *  Value: "REPLACE"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_QueryInterpretation_InterpretationType_Replace;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_QueryOperator.type

/** Value: "BOOLEAN" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Boolean;
/** Value: "DATE" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Date;
/** Value: "DOUBLE" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Double;
/** Value: "ENUM" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Enum;
/** Value: "HTML" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Html;
/** Value: "INTEGER" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Integer;
/** Value: "TEXT" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Text;
/** Value: "TIMESTAMP" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Timestamp;
/**
 *  Invalid value.
 *
 *  Value: "UNKNOWN"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Unknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_RepositoryError.type

/**
 *  Failed authentication due to incorrect credentials.
 *
 *  Value: "AUTHENTICATION_ERROR"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_AuthenticationError;
/**
 *  Service account is not authorized for the repository.
 *
 *  Value: "AUTHORIZATION_ERROR"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_AuthorizationError;
/**
 *  Client-related error, such as an invalid request from the connector to
 *  the repository server.
 *
 *  Value: "CLIENT_ERROR"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_ClientError;
/**
 *  Cannot connect to the repository server.
 *
 *  Value: "CONNECTION_ERROR"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_ConnectionError;
/**
 *  DNS problem, such as the DNS server is not responding.
 *
 *  Value: "DNS_ERROR"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_DnsError;
/**
 *  Unknown or unreachable host.
 *
 *  Value: "NETWORK_ERROR"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_NetworkError;
/**
 *  Quota exceeded.
 *
 *  Value: "QUOTA_EXCEEDED"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_QuotaExceeded;
/**
 *  Repository server error.
 *
 *  Value: "SERVER_ERROR"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_ServerError;
/**
 *  Server temporarily unavailable.
 *
 *  Value: "SERVICE_UNAVAILABLE"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_ServiceUnavailable;
/**
 *  Unknown error.
 *
 *  Value: "UNKNOWN"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_Unknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_RetrievalImportance.importance

/**
 *  Treat the match like a body text match.
 *
 *  Value: "DEFAULT"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_RetrievalImportance_Importance_Default;
/**
 *  Treat the match with higher importance than body text.
 *
 *  Value: "HIGH"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_RetrievalImportance_Importance_High;
/**
 *  Treat the match like a match against title of the item.
 *
 *  Value: "HIGHEST"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_RetrievalImportance_Importance_Highest;
/**
 *  Treat the match with lower importance than body text.
 *
 *  Value: "LOW"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_RetrievalImportance_Importance_Low;
/**
 *  Do not match against this field during retrieval. The property can still
 *  be used for operator matching, faceting, and suggest if
 *  desired.
 *
 *  Value: "NONE"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_RetrievalImportance_Importance_None;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_SortOptions.sortOrder

/** Value: "ASCENDING" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_SortOptions_SortOrder_Ascending;
/** Value: "DESCENDING" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_SortOptions_SortOrder_Descending;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Source.predefinedSource

/** Value: "GOOGLE_CALENDAR" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_GoogleCalendar;
/** Value: "GOOGLE_DRIVE" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_GoogleDrive;
/** Value: "GOOGLE_GMAIL" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_GoogleGmail;
/** Value: "GOOGLE_GROUPS" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_GoogleGroups;
/** Value: "GOOGLE_KEEP" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_GoogleKeep;
/** Value: "GOOGLE_SITES" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_GoogleSites;
/** Value: "NONE" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_None;
/**
 *  Suggests people in the organization. Only valid when used
 *  with the suggest API. Results in an error when used in the query API.
 *
 *  Value: "PERSON"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_Person;
/**
 *  Suggests queries issued by the user in the past. Only valid when used
 *  with the suggest API. Ignored when used in the query API.
 *
 *  Value: "QUERY_HISTORY"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_QueryHistory;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_SourceScoringConfig.sourceImportance

/** Value: "DEFAULT" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_SourceScoringConfig_SourceImportance_Default;
/** Value: "HIGH" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_SourceScoringConfig_SourceImportance_High;
/** Value: "LOW" */
GTLR_EXTERN NSString * const kGTLRCloudSearch_SourceScoringConfig_SourceImportance_Low;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_UnmappedIdentity.resolutionStatusCode

/**
 *  Input-only value. Used to list all unmapped identities regardless of
 *  status.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_CodeUnspecified;
/**
 *  IDaaS does not understand the identity source, probably because the
 *  schema was modified in a non compatible way.
 *
 *  Value: "IDENTITY_SOURCE_MISCONFIGURED"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_IdentitySourceMisconfigured;
/**
 *  The identity source associated with the identity was either not found or
 *  deleted.
 *
 *  Value: "IDENTITY_SOURCE_NOT_FOUND"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_IdentitySourceNotFound;
/**
 *  Internal error.
 *
 *  Value: "INTERNAL_ERROR"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_InternalError;
/**
 *  The unmapped identity was not found in IDaaS, and needs to be provided by
 *  the user.
 *
 *  Value: "NOT_FOUND"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_NotFound;
/**
 *  The number of users associated with the external identity is too large.
 *
 *  Value: "TOO_MANY_MAPPINGS_FOUND"
 */
GTLR_EXTERN NSString * const kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_TooManyMappingsFound;

/**
 *  Used to provide a search operator for boolean properties. This is
 *  optional. Search operators let users restrict the query to specific fields
 *  relevant to the type of item being searched.
 */
@interface GTLRCloudSearch_BooleanOperatorOptions : GTLRObject

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  boolean property. For example, if operatorName is *closed* and the
 *  property's name is *isClosed*, then queries like
 *  *closed:&lt;value&gt;* will show results only where the value of the
 *  property named *isClosed* matches *&lt;value&gt;*. By contrast, a
 *  search that uses the same *&lt;value&gt;* without an operator will return
 *  all items where *&lt;value&gt;* matches the value of any
 *  String properties or text within the content field for the item.
 *  The operator name can only contain lowercase letters (a-z).
 *  The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

@end


/**
 *  Options for boolean properties.
 */
@interface GTLRCloudSearch_BooleanPropertyOptions : GTLRObject

/** If set, describes how the boolean should be used as a search operator. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_BooleanOperatorOptions *operatorOptions;

@end


/**
 *  GTLRCloudSearch_CheckAccessResponse
 */
@interface GTLRCloudSearch_CheckAccessResponse : GTLRObject

/**
 *  Returns true if principal has access. Returns false otherwise.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasAccess;

@end


/**
 *  GTLRCloudSearch_CompositeFilter
 */
@interface GTLRCloudSearch_CompositeFilter : GTLRObject

/**
 *  The logic operator of the sub filter.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_CompositeFilter_LogicOperator_And Logical
 *        operators, which can only be applied to sub filters. (Value: "AND")
 *    @arg @c kGTLRCloudSearch_CompositeFilter_LogicOperator_Not NOT can only be
 *        applied on a single sub filter. (Value: "NOT")
 *    @arg @c kGTLRCloudSearch_CompositeFilter_LogicOperator_Or Value "OR"
 */
@property(nonatomic, copy, nullable) NSString *logicOperator;

/** Sub filters. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Filter *> *subFilters;

@end


/**
 *  Aggregation of items by status code as of the specified date.
 */
@interface GTLRCloudSearch_CustomerIndexStats : GTLRObject

/** Date for which statistics were calculated. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Date *date;

/** Number of items aggregrated by status code. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ItemCountByStatus *> *itemCountByStatus;

@end


/**
 *  Data source is a logical namespace for items to be indexed.
 *  All items must belong to a data source. This is the prerequisite before
 *  items can be indexed into Cloud Search.
 */
@interface GTLRCloudSearch_DataSource : GTLRObject

/**
 *  If true, Indexing API rejects any modification calls to this data source
 *  such as create, update, and delete.
 *  Disabling this does not imply halting process of previously
 *  accepted data.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableModifications;

/**
 *  Disable serving any search or assist results.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableServing;

/**
 *  Required. Display name of the data source
 *  The maximum length is 300 characters.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** List of service accounts that have indexing access. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *indexingServiceAccounts;

/**
 *  This restricts visibility to items at a data source level to the
 *  disjunction of users/groups mentioned with the field. Note that, this
 *  does not ensure access to a specific item, as users need to have ACL
 *  permissions on the contained items. This ensures a high level access
 *  on the entire data source, and that the individual items are not shared
 *  outside this visibility.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_GSuitePrincipal *> *itemsVisibility;

/**
 *  Name of the data source resource.
 *  Format: datasources/{source_id}.
 *  <br />The name is ignored when creating a data source.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  IDs of the Long Running Operations (LROs) currently running for this schema.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *operationIds;

/**
 *  A short name or alias for the source. This value will be used to match the
 *  'source' operator. For example, if the short name is *&lt;value&gt;* then
 *  queries like *source:&lt;value&gt;* will only return results for this
 *  source. The value must be unique across all data sources. The value must
 *  only contain alphanumeric characters (a-zA-Z0-9). The value cannot start
 *  with 'google' and cannot be one of the following: mail, gmail, docs, drive,
 *  groups, sites, calendar, hangouts, gplus, keep.
 *  Its maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *shortName;

@end


/**
 *  Aggregation of items by status code as of the specified date.
 */
@interface GTLRCloudSearch_DataSourceIndexStats : GTLRObject

/**
 *  Date for which index stats were calculated. If the date of request is not
 *  the current date then stats calculated on the next day are returned. Stats
 *  are calculated close to mid night in this case. If date of request is
 *  current date, then real time stats are returned.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Date *date;

/** Number of items aggregrated by status code. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ItemCountByStatus *> *itemCountByStatus;

@end


/**
 *  Restriction on Datasource.
 */
@interface GTLRCloudSearch_DataSourceRestriction : GTLRObject

/**
 *  Filter options restricting the results. If multiple filters
 *  are present, they are grouped by object type before joining.
 *  Filters with the same object type are joined conjunctively, then
 *  the resulting expressions are joined disjunctively.
 *  The maximum number of elements is 20.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_FilterOptions *> *filterOptions;

/** The source of restriction. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Source *source;

@end


/**
 *  Represents a whole calendar date, for example a date of birth. The time of
 *  day and time zone are either specified elsewhere or are not significant. The
 *  date is relative to the [Proleptic Gregorian
 *  Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The
 *  date must be a valid calendar date between the year 1 and 9999.
 */
@interface GTLRCloudSearch_Date : GTLRObject

/**
 *  Day of month. Must be from 1 to 31 and valid for the year and month.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of date. Must be from 1 to 12.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of date. Must be from 1 to 9999.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  Optional. Provides a search operator for date properties.
 *  Search operators let users restrict the query to specific fields relevant
 *  to the type of item being searched.
 */
@interface GTLRCloudSearch_DateOperatorOptions : GTLRObject

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  date property using the greater-than operator. For example, if
 *  greaterThanOperatorName is *closedafter* and the property's name is
 *  *closeDate*, then queries like *closedafter:&lt;value&gt;* will
 *  show results only where the value of the property named *closeDate* is
 *  later than *&lt;value&gt;*.
 *  The operator name can only contain lowercase letters (a-z).
 *  The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *greaterThanOperatorName;

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  date property using the less-than operator. For example, if
 *  lessThanOperatorName is *closedbefore* and the property's name is
 *  *closeDate*, then queries like *closedbefore:&lt;value&gt;* will
 *  show results only where the value of the property named *closeDate* is
 *  earlier than *&lt;value&gt;*.
 *  The operator name can only contain lowercase letters (a-z).
 *  The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *lessThanOperatorName;

/**
 *  Indicates the actual string required in the query in order to isolate the
 *  date property. For example, suppose an issue tracking schema object
 *  has a property named *closeDate* that specifies an operator with an
 *  operatorName of *closedon*. For searches on that data, queries like
 *  *closedon:&lt;value&gt;* will show results only where the value of the
 *  *closeDate* property matches *&lt;value&gt;*. By contrast, a
 *  search that uses the same *&lt;value&gt;* without an operator will return
 *  all items where *&lt;value&gt;* matches the value of any String
 *  properties or text within the content field for the indexed datasource.
 *  The operator name can only contain lowercase letters (a-z).
 *  The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

@end


/**
 *  Options for date properties.
 */
@interface GTLRCloudSearch_DatePropertyOptions : GTLRObject

/** If set, describes how the date should be used as a search operator. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DateOperatorOptions *operatorOptions;

@end


/**
 *  List of date values.
 */
@interface GTLRCloudSearch_DateValues : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Date *> *values;

@end


/**
 *  Shared request debug options for all cloudsearch RPC methods.
 */
@interface GTLRCloudSearch_DebugOptions : GTLRObject

/**
 *  If set, the request will enable debugging features of Cloud Search.
 *  Only turn on this field, if asked by Google to help with debugging.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableDebugging;

@end


/**
 *  GTLRCloudSearch_DeleteQueueItemsRequest
 */
@interface GTLRCloudSearch_DeleteQueueItemsRequest : GTLRObject

/**
 *  Name of connector making this call.
 *  <br />Format: datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

/** Name of a queue to delete items from. */
@property(nonatomic, copy, nullable) NSString *queue;

@end


/**
 *  A reference to a top-level property within the object that should be
 *  displayed in search results. The values of the chosen properties will be
 *  displayed in the search results along with the
 *  dislpay label
 *  for that property if one is specified. If a display label is not specified,
 *  only the values will be shown.
 */
@interface GTLRCloudSearch_DisplayedProperty : GTLRObject

/**
 *  The name of the top-level property as defined in a property definition
 *  for the object. If the name is not a defined property in the schema, an
 *  error will be given when attempting to update the schema.
 */
@property(nonatomic, copy, nullable) NSString *propertyName;

@end


/**
 *  Used to provide a search operator for double properties. This is
 *  optional. Search operators let users restrict the query to specific fields
 *  relevant to the type of item being searched.
 */
@interface GTLRCloudSearch_DoubleOperatorOptions : GTLRObject

/**
 *  Indicates the operator name required in the query in order to use the
 *  double property in sorting or as a facet.
 *  The operator name can only contain lowercase letters (a-z).
 *  The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

@end


/**
 *  Options for double properties.
 */
@interface GTLRCloudSearch_DoublePropertyOptions : GTLRObject

/** If set, describes how the double should be used as a search operator. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DoubleOperatorOptions *operatorOptions;

@end


/**
 *  List of double values.
 */
@interface GTLRCloudSearch_DoubleValues : GTLRObject

/**
 *  values
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *values;

@end


/**
 *  Drive follow-up search restricts (e.g. "followup:suggestions").
 */
@interface GTLRCloudSearch_DriveFollowUpRestrict : GTLRObject

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_DriveFollowUpRestrict_Type_FollowupActionItems
 *        Value "FOLLOWUP_ACTION_ITEMS"
 *    @arg @c kGTLRCloudSearch_DriveFollowUpRestrict_Type_FollowupSuggestions
 *        Value "FOLLOWUP_SUGGESTIONS"
 *    @arg @c kGTLRCloudSearch_DriveFollowUpRestrict_Type_Unspecified Value
 *        "UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Drive location search restricts (e.g. "is:starred").
 */
@interface GTLRCloudSearch_DriveLocationRestrict : GTLRObject

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_DriveLocationRestrict_Type_Starred Value
 *        "STARRED"
 *    @arg @c kGTLRCloudSearch_DriveLocationRestrict_Type_Trashed Value
 *        "TRASHED"
 *    @arg @c kGTLRCloudSearch_DriveLocationRestrict_Type_Unspecified Value
 *        "UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Drive mime-type search restricts (e.g. "type:pdf").
 */
@interface GTLRCloudSearch_DriveMimeTypeRestrict : GTLRObject

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Archive Value
 *        "ARCHIVE"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Audio Value "AUDIO"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Document Value
 *        "DOCUMENT"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Drawing Value
 *        "DRAWING"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Folder Value "FOLDER"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Form Value "FORM"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Image Value "IMAGE"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Map Value "MAP"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Pdf Value "PDF"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Presentation Value
 *        "PRESENTATION"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Script Value "SCRIPT"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Site Value "SITE"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Spreadsheet Value
 *        "SPREADSHEET"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Unspecified Value
 *        "UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Video Value "VIDEO"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The time span search restrict (e.g. "after:2017-09-11 before:2017-09-12").
 */
@interface GTLRCloudSearch_DriveTimeSpanRestrict : GTLRObject

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Last30Days Not Enabled
 *        (Value: "LAST_30_DAYS")
 *    @arg @c kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Last7Days Value
 *        "LAST_7_DAYS"
 *    @arg @c kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Last90Days Not Enabled
 *        (Value: "LAST_90_DAYS")
 *    @arg @c kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Today Value "TODAY"
 *    @arg @c kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Unspecified Value
 *        "UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Yesterday Value
 *        "YESTERDAY"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A person's email address.
 */
@interface GTLRCloudSearch_EmailAddress : GTLRObject

/** The email address. */
@property(nonatomic, copy, nullable) NSString *emailAddress;

@end


/**
 *  Used to provide a search operator for enum properties. This is
 *  optional. Search operators let users restrict the query to specific fields
 *  relevant to the type of item being searched. For example, if you provide no
 *  operator for a *priority* enum property with possible values *p0* and *p1*,
 *  a query that contains the term *p0* will return items that have *p0* as the
 *  value of the *priority* property, as well as any items that contain the
 *  string *p0* in other fields. If you provide an operator name for the enum,
 *  such as *priority*, then search users can use that operator to refine
 *  results to only items that have *p0* as this property's value, with the
 *  query *priority:p0*.
 */
@interface GTLRCloudSearch_EnumOperatorOptions : GTLRObject

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  enum property. For example, if operatorName is *priority* and the
 *  property's name is *priorityVal*, then queries like
 *  *priority:&lt;value&gt;* will show results only where the value of the
 *  property named *priorityVal* matches *&lt;value&gt;*. By contrast, a
 *  search that uses the same *&lt;value&gt;* without an operator will return
 *  all items where *&lt;value&gt;* matches the value of any String
 *  properties or text within the content field for the item.
 *  The operator name can only contain lowercase letters (a-z).
 *  The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

@end


/**
 *  Options for enum properties, which allow you to define a restricted set of
 *  strings to match user queries, set rankings for those string values, and
 *  define an operator name to be paired with those strings so that users can
 *  narrow results to only items with a specific value. For example, for items
 *  in
 *  a request tracking system with priority information, you could define *p0*
 *  as
 *  an allowable enum value and tie this enum to the operator name *priority* so
 *  that search users could add *priority:p0* to their query to restrict the set
 *  of results to only those items indexed with the value *p0*.
 */
@interface GTLRCloudSearch_EnumPropertyOptions : GTLRObject

/** If set, describes how the enum should be used as a search operator. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_EnumOperatorOptions *operatorOptions;

/**
 *  Used to specify the ordered ranking for the enumeration that determines how
 *  the integer values provided in the possible EnumValuePairs are used to rank
 *  results. If specified, integer values must be provided for all possible
 *  EnumValuePair values given for this property. Can only be used if
 *  isRepeatable
 *  is false.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_EnumPropertyOptions_OrderedRanking_Ascending This
 *        property is ranked in ascending order. Lower values indicate lower
 *        ranking. (Value: "ASCENDING")
 *    @arg @c kGTLRCloudSearch_EnumPropertyOptions_OrderedRanking_Descending
 *        This property is ranked in descending order. Lower values indicate
 *        higher ranking. (Value: "DESCENDING")
 *    @arg @c kGTLRCloudSearch_EnumPropertyOptions_OrderedRanking_NoOrder There
 *        is no ranking order for the property. Results will not be adjusted
 *        by this property's value. (Value: "NO_ORDER")
 */
@property(nonatomic, copy, nullable) NSString *orderedRanking;

/**
 *  The list of possible values for the enumeration property. All
 *  EnumValuePairs must provide a string value. If you specify an integer value
 *  for one EnumValuePair, then all possible EnumValuePairs must provide an
 *  integer value. Both the string value and integer value must be unique over
 *  all possible values. Once set, possible values cannot be removed or
 *  modified. If you supply an ordered ranking and think you might insert
 *  additional enum values in the future, leave gaps in the initial integer
 *  values to allow adding a value in between previously registered values.
 *  The maximum number of elements is 100.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_EnumValuePair *> *possibleValues;

@end


/**
 *  The enumeration value pair defines two things: a required string value and
 *  an optional integer value. The string value defines the necessary query
 *  term required to retrieve that item, such as *p0* for a priority item.
 *  The integer value determines the ranking of that string value relative
 *  to other enumerated values for the same property. For example, you might
 *  associate *p0* with *0* and define another enum pair such as *p1* and *1*.
 *  You must use the integer value in combination with
 *  ordered
 *  ranking to
 *  set the ranking of a given value relative to other enumerated values for
 *  the same property name. Here, a ranking order of DESCENDING for *priority*
 *  properties results in a ranking boost for items indexed with a value of
 *  *p0* compared to items indexed with a value of *p1*. Without a specified
 *  ranking order, the integer value has no effect on item ranking.
 */
@interface GTLRCloudSearch_EnumValuePair : GTLRObject

/**
 *  The integer value of the EnumValuePair which must be non-negative.
 *  Optional.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *integerValue;

/**
 *  The string value of the EnumValuePair.
 *  The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *stringValue;

@end


/**
 *  List of enum values.
 */
@interface GTLRCloudSearch_EnumValues : GTLRObject

/** The maximum allowable length for string values is 32 characters. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  Error information about the response.
 */
@interface GTLRCloudSearch_ErrorInfo : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ErrorMessage *> *errorMessages;

@end


/**
 *  Error message per source response.
 */
@interface GTLRCloudSearch_ErrorMessage : GTLRObject

@property(nonatomic, copy, nullable) NSString *errorMessage;
@property(nonatomic, strong, nullable) GTLRCloudSearch_Source *source;

@end


/**
 *  A bucket in a facet is the basic unit of operation. A bucket can comprise
 *  either a single value OR a contiguous range of values, depending on the
 *  type of the field bucketed.
 *  FacetBucket is currently used only for returning the response object.
 */
@interface GTLRCloudSearch_FacetBucket : GTLRObject

/**
 *  Number of results that match the bucket value.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  Percent of results that match the bucket value. This value is between
 *  (0-100].
 *  This may not be accurate and is a best effort estimate.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *percentage;

@property(nonatomic, strong, nullable) GTLRCloudSearch_Value *value;

@end


/**
 *  Specifies operators to return facet results for. There will be one
 *  FacetResult for every source_name/object_type/operator_name combination.
 */
@interface GTLRCloudSearch_FacetOptions : GTLRObject

/**
 *  If object_type is set, only those objects of that type will be used to
 *  compute facets. If empty, then all objects will be used to compute facets.
 */
@property(nonatomic, copy, nullable) NSString *objectType;

/**
 *  Name of the operator chosen for faceting. \@see
 *  cloudsearch.SchemaPropertyOptions
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

/**
 *  Source name to facet on. Format: datasources/{source_id}
 *  If empty, all data sources will be used.
 */
@property(nonatomic, copy, nullable) NSString *sourceName;

@end


/**
 *  Source specific facet response
 */
@interface GTLRCloudSearch_FacetResult : GTLRObject

/** FacetBuckets for values in response containing atleast a single result. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_FacetBucket *> *buckets;

/** Object type for which facet results are returned. Can be empty. */
@property(nonatomic, copy, nullable) NSString *objectType;

/**
 *  Name of the operator chosen for faceting. \@see
 *  cloudsearch.SchemaPropertyOptions
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

/** Source name for which facet results are returned. Will not be empty. */
@property(nonatomic, copy, nullable) NSString *sourceName;

@end


/**
 *  GTLRCloudSearch_FieldViolation
 */
@interface GTLRCloudSearch_FieldViolation : GTLRObject

/**
 *  Description of the error.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Path of field with violation. */
@property(nonatomic, copy, nullable) NSString *field;

@end


/**
 *  A generic way of expressing filters in a query, which supports two
 *  approaches: <br/><br/>
 *  **1. Setting a ValueFilter.** The name must match an operator_name defined
 *  in
 *  the schema for your data source.
 *  <br/>
 *  **2. Setting a CompositeFilter.** The filters are evaluated
 *  using the logical operator. The top-level operators can only be either an
 *  AND
 *  or a NOT. AND can appear only at the top-most level. OR can appear only
 *  under
 *  a top-level AND.
 */
@interface GTLRCloudSearch_Filter : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_CompositeFilter *compositeFilter;
@property(nonatomic, strong, nullable) GTLRCloudSearch_ValueFilter *valueFilter;

@end


/**
 *  Filter options to be applied on query.
 */
@interface GTLRCloudSearch_FilterOptions : GTLRObject

/** Generic filter to restrict the search, such as `lang:en`, `site:xyz`. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Filter *filter;

/**
 *  If object_type is set, only objects of that type are returned. This should
 *  correspond to the name of the object that was registered within the
 *  definition of schema. The maximum length is 256 characters.
 */
@property(nonatomic, copy, nullable) NSString *objectType;

@end


/**
 *  Indicates which freshness property to use when adjusting search ranking for
 *  an item. Fresher, more recent dates indicate higher quality. Use the
 *  freshness option property that best works with your data. For fileshare
 *  documents, last modified time is most relevant. For calendar event data,
 *  the time when the event occurs is a more relevant freshness indicator. In
 *  this way, calendar events that occur closer to the time of the search query
 *  are considered higher quality and ranked accordingly.
 */
@interface GTLRCloudSearch_FreshnessOptions : GTLRObject

/**
 *  The duration (in seconds) after which an object should be considered
 *  stale.
 */
@property(nonatomic, strong, nullable) GTLRDuration *freshnessDuration;

/**
 *  This property indicates the freshness level of the object in the index.
 *  If set, this property must be a top-level property within the
 *  property definitions
 *  and it must be a
 *  timestamp type
 *  or
 *  date type.
 *  Otherwise, the Indexing API uses
 *  updateTime
 *  as the freshness indicator.
 *  The maximum length is 256 characters.
 */
@property(nonatomic, copy, nullable) NSString *freshnessProperty;

@end


/**
 *  GTLRCloudSearch_GetCustomerIndexStatsResponse
 */
@interface GTLRCloudSearch_GetCustomerIndexStatsResponse : GTLRObject

/**
 *  Summary of indexed item counts, one for each day in the requested range.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_CustomerIndexStats *> *stats;

@end


/**
 *  GTLRCloudSearch_GetDataSourceIndexStatsResponse
 */
@interface GTLRCloudSearch_GetDataSourceIndexStatsResponse : GTLRObject

/**
 *  Summary of indexed item counts, one for each day in the requested range.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_DataSourceIndexStats *> *stats;

@end


/**
 *  GTLRCloudSearch_GSuitePrincipal
 */
@interface GTLRCloudSearch_GSuitePrincipal : GTLRObject

/**
 *  This principal represents all users of the G Suite domain of the
 *  customer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *gsuiteDomain;

/** This principal references a G Suite group account */
@property(nonatomic, copy, nullable) NSString *gsuiteGroupEmail;

/** This principal references a G Suite user account */
@property(nonatomic, copy, nullable) NSString *gsuiteUserEmail;

@end


/**
 *  Used to provide a search operator for html properties. This is optional.
 *  Search operators let users restrict the query to specific fields relevant
 *  to the type of item being searched.
 */
@interface GTLRCloudSearch_HtmlOperatorOptions : GTLRObject

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  html property. For example, if operatorName is *subject* and the
 *  property's name is *subjectLine*, then queries like
 *  *subject:&lt;value&gt;* will show results only where the value of the
 *  property named *subjectLine* matches *&lt;value&gt;*. By contrast, a
 *  search that uses the same *&lt;value&gt;* without an operator will return
 *  all items where *&lt;value&gt;* matches the value of any
 *  html properties or text within the content field for the item.
 *  The operator name can only contain lowercase letters (a-z).
 *  The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

@end


/**
 *  Options for html properties.
 */
@interface GTLRCloudSearch_HtmlPropertyOptions : GTLRObject

/** If set, describes how the property should be used as a search operator. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_HtmlOperatorOptions *operatorOptions;

/**
 *  Indicates the search quality importance of the tokens within the
 *  field when used for retrieval. Can only be set to DEFAULT or NONE.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RetrievalImportance *retrievalImportance;

@end


/**
 *  List of html values.
 */
@interface GTLRCloudSearch_HtmlValues : GTLRObject

/** The maximum allowable length for html values is 2048 characters. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  GTLRCloudSearch_IndexItemRequest
 */
@interface GTLRCloudSearch_IndexItemRequest : GTLRObject

/**
 *  Name of connector making this call.
 *  <br />Format: datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

/**
 *  Name of the item. Format:
 *  datasources/{source_id}/items/{item_id}
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Item *item;

/**
 *  Required. The RequestMode for this request.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_IndexItemRequest_Mode_Asynchronous For changes
 *        that are executed after the response is sent back to the
 *        caller. (Value: "ASYNCHRONOUS")
 *    @arg @c kGTLRCloudSearch_IndexItemRequest_Mode_Synchronous For real-time
 *        updates. (Value: "SYNCHRONOUS")
 *    @arg @c kGTLRCloudSearch_IndexItemRequest_Mode_Unspecified Priority is not
 *        specified in the update request.
 *        Leaving priority unspecified results in an update failure. (Value:
 *        "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *mode;

@end


/**
 *  Used to provide a search operator for integer properties. This is
 *  optional. Search operators let users restrict the query to specific fields
 *  relevant to the type of item being searched.
 */
@interface GTLRCloudSearch_IntegerOperatorOptions : GTLRObject

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  integer property using the greater-than operator. For example, if
 *  greaterThanOperatorName is *priorityabove* and the property's name is
 *  *priorityVal*, then queries like *priorityabove:&lt;value&gt;* will
 *  show results only where the value of the property named *priorityVal* is
 *  greater than *&lt;value&gt;*.
 *  The operator name can only contain lowercase letters (a-z).
 *  The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *greaterThanOperatorName;

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  integer property using the less-than operator. For example, if
 *  lessThanOperatorName is *prioritybelow* and the property's name is
 *  *priorityVal*, then queries like *prioritybelow:&lt;value&gt;* will
 *  show results only where the value of the property named *priorityVal* is
 *  less than *&lt;value&gt;*.
 *  The operator name can only contain lowercase letters (a-z).
 *  The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *lessThanOperatorName;

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  integer property. For example, if operatorName is *priority* and the
 *  property's name is *priorityVal*, then queries like
 *  *priority:&lt;value&gt;* will show results only where the value of the
 *  property named *priorityVal* matches *&lt;value&gt;*. By contrast, a
 *  search that uses the same *&lt;value&gt;* without an operator will return
 *  all items where *&lt;value&gt;* matches the value of any String
 *  properties or text within the content field for the item.
 *  The operator name can only contain lowercase letters (a-z).
 *  The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

@end


/**
 *  Options for integer properties.
 */
@interface GTLRCloudSearch_IntegerPropertyOptions : GTLRObject

/**
 *  The maximum value of the property. The minimum and maximum values for the
 *  property are used to rank results according to the
 *  ordered ranking.
 *  Indexing requests with values greater than the maximum are accepted and
 *  ranked with the same weight as items indexed with the maximum value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maximumValue;

/**
 *  The minimum value of the property. The minimum and maximum values for the
 *  property are used to rank results according to the
 *  ordered ranking.
 *  Indexing requests with values less than the minimum are accepted and
 *  ranked with the same weight as items indexed with the minimum value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minimumValue;

/** If set, describes how the integer should be used as a search operator. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_IntegerOperatorOptions *operatorOptions;

/**
 *  Used to specify the ordered ranking for the integer. Can only be used if
 *  isRepeatable
 *  is false.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_IntegerPropertyOptions_OrderedRanking_Ascending
 *        This property is ranked in ascending order. Lower values indicate
 *        lower
 *        ranking. (Value: "ASCENDING")
 *    @arg @c kGTLRCloudSearch_IntegerPropertyOptions_OrderedRanking_Descending
 *        This property is ranked in descending order. Lower values indicate
 *        higher ranking. (Value: "DESCENDING")
 *    @arg @c kGTLRCloudSearch_IntegerPropertyOptions_OrderedRanking_NoOrder
 *        There is no ranking order for the property. Results will not be
 *        adjusted
 *        by this property's value. (Value: "NO_ORDER")
 */
@property(nonatomic, copy, nullable) NSString *orderedRanking;

@end


/**
 *  List of integer values.
 */
@interface GTLRCloudSearch_IntegerValues : GTLRObject

/**
 *  values
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *values;

@end


/**
 *  Represents an interaction between a user and an item.
 */
@interface GTLRCloudSearch_Interaction : GTLRObject

/**
 *  The time when the user acted on the item. If multiple actions of the same
 *  type exist for a single user, only the most recent action is recorded.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *interactionTime;

/** The user that acted on the item. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Principal *principal;

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Interaction_Type_Edit This interaction indicates
 *        the user edited the item. (Value: "EDIT")
 *    @arg @c kGTLRCloudSearch_Interaction_Type_Unspecified Invalid value.
 *        (Value: "UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_Interaction_Type_View This interaction indicates
 *        the user viewed the item. (Value: "VIEW")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents a single object that is an item in the search index, such as a
 *  file, folder, or a database record.
 */
@interface GTLRCloudSearch_Item : GTLRObject

/** Access control list for this item. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ItemAcl *acl;

/** Item content to be indexed and made text searchable. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ItemContent *content;

/**
 *  Type for this item.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Item_ItemType_ContainerItem An item that gets
 *        indexed and whose purpose is to supply other items
 *        with ACLs and/or contain other items. (Value: "CONTAINER_ITEM")
 *    @arg @c kGTLRCloudSearch_Item_ItemType_ContentItem An item that is indexed
 *        for the only purpose of serving information.
 *        These items cannot be referred in
 *        containerName
 *        or inheritAclFrom
 *        fields. (Value: "CONTENT_ITEM")
 *    @arg @c kGTLRCloudSearch_Item_ItemType_Unspecified Value "UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_Item_ItemType_VirtualContainerItem An item that
 *        does not get indexed, but otherwise has the same purpose
 *        as CONTAINER_ITEM. (Value: "VIRTUAL_CONTAINER_ITEM")
 */
@property(nonatomic, copy, nullable) NSString *itemType;

/** Metadata information. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ItemMetadata *metadata;

/**
 *  Name of the Item. Format:
 *  datasources/{source_id}/items/{item_id}
 *  <br />This is a required field.
 *  The maximum length is 1536 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Additional state connector can store for this item.
 *  The maximum length is 10000 bytes.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *payload;

/**
 *  Queue this item belongs to.
 *  The maximum length is 100 characters.
 */
@property(nonatomic, copy, nullable) NSString *queue;

/**
 *  Status of the item.
 *  Output only field.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ItemStatus *status;

/**
 *  The structured data for the item that should conform to a registered
 *  object definition in the schema for the data source.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ItemStructuredData *structuredData;

/**
 *  Required. The indexing system stores the version from the datasource as a
 *  byte string and compares the Item version in the index
 *  to the version of the queued Item using lexical ordering.
 *  <br /><br />
 *  Cloud Search Indexing won't index or delete any queued item with
 *  a version value that is less than or equal to the version of the
 *  currently indexed item.
 *  The maximum length for this field is 1024 bytes.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Access control list information for the item. For more information see
 *  https://developers.google.com/cloud-search/docs/guides/index-your-data#acls
 */
@interface GTLRCloudSearch_ItemAcl : GTLRObject

/**
 *  Sets the type of access rules to apply when an item inherits its ACL from a
 *  parent. This should always be set in tandem with the
 *  inheritAclFrom
 *  field. Also, when the
 *  inheritAclFrom field
 *  is set, this field should be set to a valid AclInheritanceType.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_ItemAcl_AclInheritanceType_BothPermit Access is
 *        granted only if this item and the parent item specified in
 *        the inheritAclFrom
 *        field both permit read access. (Value: "BOTH_PERMIT")
 *    @arg @c kGTLRCloudSearch_ItemAcl_AclInheritanceType_ChildOverride During
 *        an authorization conflict, the ACL of the child item determines
 *        its read access. (Value: "CHILD_OVERRIDE")
 *    @arg @c kGTLRCloudSearch_ItemAcl_AclInheritanceType_NotApplicable The
 *        default value when this item does not inherit an ACL.
 *        Use NOT_APPLICABLE when
 *        inheritAclFrom
 *        is empty. An item without ACL inheritance can still have ACLs supplied
 *        by its own readers and
 *        deniedReaders fields. (Value: "NOT_APPLICABLE")
 *    @arg @c kGTLRCloudSearch_ItemAcl_AclInheritanceType_ParentOverride During
 *        an authorization conflict, the ACL of the parent item
 *        specified in the
 *        inheritAclFrom
 *        field determines read access. (Value: "PARENT_OVERRIDE")
 */
@property(nonatomic, copy, nullable) NSString *aclInheritanceType;

/**
 *  List of principals who are explicitly denied access to the item in search
 *  results. While principals are denied access by default, use denied readers
 *  to handle exceptions and override the list allowed readers.
 *  The maximum number of elements is 100.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Principal *> *deniedReaders;

/**
 *  Name of the item to inherit the Access Permission List (ACL) from.
 *  Note: ACL inheritance *only* provides access permissions
 *  to child items and does not define structural relationships, nor does it
 *  provide convenient ways to delete large groups of items.
 *  Deleting an ACL parent from the index only alters the access permissions of
 *  child items that reference the parent in the
 *  inheritAclFrom
 *  field. The item is still in the index, but may not
 *  visible in search results. By contrast, deletion of a container item
 *  also deletes all items that reference the container via the
 *  containerName
 *  field.
 *  The maximum length for this field is 1536 characters.
 */
@property(nonatomic, copy, nullable) NSString *inheritAclFrom;

/**
 *  Optional. List of owners for the item. This field has no bearing on
 *  document access permissions. It does, however, offer
 *  a slight ranking boosts items where the querying user is an owner.
 *  The maximum number of elements is 5.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Principal *> *owners;

/**
 *  List of principals who are allowed to see the item in search results.
 *  Optional if inheriting permissions from another item or if the item
 *  is not intended to be visible, such as
 *  virtual containers.
 *  The maximum number of elements is 1000.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Principal *> *readers;

@end


/**
 *  Content of an item to be indexed and surfaced by Cloud Search.
 */
@interface GTLRCloudSearch_ItemContent : GTLRObject

/** Upload reference ID of a previously uploaded content via write method. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UploadItemRef *contentDataRef;

/**
 *  contentFormat
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_ItemContent_ContentFormat_Html contentFormat is
 *        HTML. (Value: "HTML")
 *    @arg @c kGTLRCloudSearch_ItemContent_ContentFormat_Raw contentFormat is
 *        raw bytes. (Value: "RAW")
 *    @arg @c kGTLRCloudSearch_ItemContent_ContentFormat_Text contentFormat is
 *        free text. (Value: "TEXT")
 *    @arg @c kGTLRCloudSearch_ItemContent_ContentFormat_Unspecified Invalid
 *        value. (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *contentFormat;

/**
 *  Hashing info calculated and provided by the API client for content.
 *  Can be used with the items.push method to calculate modified state.
 *  The maximum length is 2048 characters.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty;

/**
 *  Content that is supplied inlined within the update method.
 *  The maximum length is 102400 bytes (100 KiB).
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *inlineContent;

@end


/**
 *  GTLRCloudSearch_ItemCountByStatus
 */
@interface GTLRCloudSearch_ItemCountByStatus : GTLRObject

/**
 *  Number of items matching the status code.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  Status of the items.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_ItemCountByStatus_StatusCode_Accepted API has
 *        accepted the up-to-date data of this item. (Value: "ACCEPTED")
 *    @arg @c kGTLRCloudSearch_ItemCountByStatus_StatusCode_CodeUnspecified
 *        Input-only value. Used with
 *        Items.list
 *        to list all items in the queue, regardless of status. (Value:
 *        "CODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_ItemCountByStatus_StatusCode_Error Error
 *        encountered by Cloud Search while processing this item.
 *        Details of the error are in
 *        repositoryError. (Value: "ERROR")
 *    @arg @c kGTLRCloudSearch_ItemCountByStatus_StatusCode_Modified Item has
 *        been modified in the repository, and is out of date with
 *        the version previously accepted into Cloud Search. (Value: "MODIFIED")
 *    @arg @c kGTLRCloudSearch_ItemCountByStatus_StatusCode_NewItem Item is
 *        known to exist in the repository, but is not yet accepted by
 *        Cloud Search.
 *        An item can be in this state when
 *        Items.push
 *        has been called for
 *        an item of this name that did not exist previously. (Value:
 *        "NEW_ITEM")
 */
@property(nonatomic, copy, nullable) NSString *statusCode;

@end


/**
 *  Available metadata fields for the item.
 */
@interface GTLRCloudSearch_ItemMetadata : GTLRObject

/**
 *  The name of the container for this item.
 *  Deletion of the container item leads to automatic deletion of this
 *  item. Note: ACLs are not inherited from a container item.
 *  To provide ACL inheritance for an item, use the
 *  inheritAclFrom
 *  field. The maximum length is 1536 characters.
 */
@property(nonatomic, copy, nullable) NSString *containerName;

/**
 *  The BCP-47 language code for the item, such as "en-US" or "sr-Latn". For
 *  more information, see
 *  http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
 *  The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *contentLanguage;

/** The time when the item was created in the source repository. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Hashing value provided by the API caller.
 *  This can be used with the
 *  items.push
 *  method to calculate modified state.
 *  The maximum length is 2048 characters.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty;

/**
 *  A list of interactions for the item. Interactions are used to improve
 *  Search quality, but are not exposed to end users.
 *  The maximum number of elements is 1000.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Interaction *> *interactions;

/**
 *  Additional keywords or phrases that should match the item.
 *  Used internally for user generated content.
 *  The maximum number of elements is 100.
 *  The maximum length is 8192 characters.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *keywords;

/**
 *  The original mime-type of
 *  ItemContent.content
 *  in the source repository.
 *  The maximum length is 256 characters.
 */
@property(nonatomic, copy, nullable) NSString *mimeType;

/**
 *  The type of the item. This should correspond to the name of an object
 *  definition in the schema registered for the data source. For example, if
 *  the schema for the data source contains an object definition with name
 *  'document', then item indexing requests for objects of that type should set
 *  objectType to 'document'.
 *  The maximum length is 256 characters.
 */
@property(nonatomic, copy, nullable) NSString *objectType;

/** Additional search quality metadata of the item */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SearchQualityMetadata *searchQualityMetadata;

/**
 *  Link to the source repository serving the data. &#83;earch results apply
 *  this link to the title.
 *  The maximum length is 2048 characters.
 */
@property(nonatomic, copy, nullable) NSString *sourceRepositoryUrl;

/**
 *  The title of the item. If given, this will be the displayed title of the
 *  Search result.
 *  The maximum length is 2048 characters.
 */
@property(nonatomic, copy, nullable) NSString *title;

/** The time when the item was last modified in the source repository. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  This contains item's status and any errors.
 */
@interface GTLRCloudSearch_ItemStatus : GTLRObject

/**
 *  Status code.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_ItemStatus_Code_Accepted API has accepted the
 *        up-to-date data of this item. (Value: "ACCEPTED")
 *    @arg @c kGTLRCloudSearch_ItemStatus_Code_CodeUnspecified Input-only value.
 *        Used with
 *        Items.list
 *        to list all items in the queue, regardless of status. (Value:
 *        "CODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_ItemStatus_Code_Error Error encountered by Cloud
 *        Search while processing this item.
 *        Details of the error are in
 *        repositoryError. (Value: "ERROR")
 *    @arg @c kGTLRCloudSearch_ItemStatus_Code_Modified Item has been modified
 *        in the repository, and is out of date with
 *        the version previously accepted into Cloud Search. (Value: "MODIFIED")
 *    @arg @c kGTLRCloudSearch_ItemStatus_Code_NewItem Item is known to exist in
 *        the repository, but is not yet accepted by
 *        Cloud Search.
 *        An item can be in this state when
 *        Items.push
 *        has been called for
 *        an item of this name that did not exist previously. (Value:
 *        "NEW_ITEM")
 */
@property(nonatomic, copy, nullable) NSString *code;

/** Error details in case the item is in ERROR state. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ProcessingError *> *processingErrors;

/** Repository error reported by connector. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_RepositoryError *> *repositoryErrors;

@end


/**
 *  Available structured data fields for the item.
 */
@interface GTLRCloudSearch_ItemStructuredData : GTLRObject

/**
 *  Hashing value provided by the API caller.
 *  This can be used with the
 *  items.push
 *  method to calculate modified state.
 *  The maximum length is 2048 characters.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty;

/**
 *  The structured data object that should conform to a registered object
 *  definition in the schema for the data source.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_StructuredDataObject *object;

@end


/**
 *  GTLRCloudSearch_ListDataSourceResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "sources" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudSearch_ListDataSourceResponse : GTLRCollectionObject

/**
 *  Token to retrieve the next page of results, or empty if there are no
 *  more results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  sources
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_DataSource *> *sources;

@end


/**
 *  GTLRCloudSearch_ListItemNamesForUnmappedIdentityResponse
 */
@interface GTLRCloudSearch_ListItemNamesForUnmappedIdentityResponse : GTLRObject

@property(nonatomic, strong, nullable) NSArray<NSString *> *itemNames;

/**
 *  Token to retrieve the next page of results, or empty if there are no
 *  more results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRCloudSearch_ListItemsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudSearch_ListItemsResponse : GTLRCollectionObject

/**
 *  items
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Item *> *items;

/**
 *  Token to retrieve the next page of results, or empty if there are no
 *  more results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  List sources response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "sources" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudSearch_ListQuerySourcesResponse : GTLRCollectionObject

@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  sources
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_QuerySource *> *sources;

@end


/**
 *  GTLRCloudSearch_ListSearchApplicationsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "searchApplications" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRCloudSearch_ListSearchApplicationsResponse : GTLRCollectionObject

/**
 *  Token to retrieve the next page of results, or empty if there are no
 *  more results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  searchApplications
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SearchApplication *> *searchApplications;

@end


/**
 *  GTLRCloudSearch_ListUnmappedIdentitiesResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "unmappedIdentities" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRCloudSearch_ListUnmappedIdentitiesResponse : GTLRCollectionObject

/**
 *  Token to retrieve the next page of results, or empty if there are no
 *  more results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  unmappedIdentities
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_UnmappedIdentity *> *unmappedIdentities;

@end


/**
 *  Matched range of a snippet [start, end).
 */
@interface GTLRCloudSearch_MatchRange : GTLRObject

/**
 *  End of the match in the snippet.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  Starting position of the match in the snippet.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  Media resource.
 */
@interface GTLRCloudSearch_Media : GTLRObject

/** Name of the media resource. */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end


/**
 *  Metadata of a matched search result.
 */
@interface GTLRCloudSearch_Metadata : GTLRObject

/** The creation time for this document or object in the search result. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Options that specify how to display a structured data search result. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ResultDisplayMetadata *displayOptions;

/**
 *  Indexed fields in structured data, returned as a generic named property.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_NamedProperty *> *fields;

/** Mime type of the search result. */
@property(nonatomic, copy, nullable) NSString *mimeType;

/** Object type of the search result. */
@property(nonatomic, copy, nullable) NSString *objectType;

/** Owner (usually creator) of the document or object of the search result. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Person *owner;

/** The named source for the result, such as Gmail. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Source *source;

/** The last modified date for the object in the search result. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  A metaline is a list of properties that are displayed along with the search
 *  result to provide context.
 */
@interface GTLRCloudSearch_Metaline : GTLRObject

/** The list of displayed properties for the metaline. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_DisplayedProperty *> *properties;

@end


/**
 *  A person's name.
 */
@interface GTLRCloudSearch_Name : GTLRObject

/**
 *  The read-only display name formatted according to the locale specified by
 *  the viewer's account or the <code>Accept-Language</code> HTTP header.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

@end


/**
 *  A typed name-value pair for structured data. The type of the value should
 *  be the same as the registered type for the `name` property in the object
 *  definition of `objectType`.
 */
@interface GTLRCloudSearch_NamedProperty : GTLRObject

/**
 *  booleanValue
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *booleanValue;

@property(nonatomic, strong, nullable) GTLRCloudSearch_DateValues *dateValues;
@property(nonatomic, strong, nullable) GTLRCloudSearch_DoubleValues *doubleValues;
@property(nonatomic, strong, nullable) GTLRCloudSearch_EnumValues *enumValues;
@property(nonatomic, strong, nullable) GTLRCloudSearch_HtmlValues *htmlValues;
@property(nonatomic, strong, nullable) GTLRCloudSearch_IntegerValues *integerValues;

/**
 *  The name of the property. This name should correspond to the name of the
 *  property that was registered for object definition in the schema.
 *  The maximum allowable length for this property is 256 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

@property(nonatomic, strong, nullable) GTLRCloudSearch_ObjectValues *objectValues;
@property(nonatomic, strong, nullable) GTLRCloudSearch_TextValues *textValues;
@property(nonatomic, strong, nullable) GTLRCloudSearch_TimestampValues *timestampValues;

@end


/**
 *  The definition for an object within a data source.
 */
@interface GTLRCloudSearch_ObjectDefinition : GTLRObject

/**
 *  Name for the object, which then defines its type. Item indexing requests
 *  should set the
 *  objectType field
 *  equal to this value. For example, if *name* is *Document*, then indexing
 *  requests for items of type Document should set
 *  objectType equal to
 *  *Document*. Each object definition must be uniquely named within a schema.
 *  The name must start with a letter and can only contain letters (A-Z, a-z)
 *  or numbers (0-9).
 *  The maximum length is 256 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The optional object-specific options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ObjectOptions *options;

/**
 *  The property definitions for the object.
 *  The maximum number of elements is 1000.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_PropertyDefinition *> *propertyDefinitions;

@end


/**
 *  The display options for an object.
 */
@interface GTLRCloudSearch_ObjectDisplayOptions : GTLRObject

/**
 *  Defines the properties that will be displayed in the metalines of the
 *  search results. The property values will be displayed in the order given
 *  here. If a property holds multiple values, all of the values will be
 *  diplayed before the next properties. For this reason, it is a good practice
 *  to specify singular properties before repeated properties in this list. All
 *  of the properties must set
 *  is_returnable
 *  to true. The maximum number of elements is 3.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Metaline *> *metalines;

/**
 *  The user friendly label to display in the search result to inidicate the
 *  type of the item. This is OPTIONAL; if not given, an object label will not
 *  be displayed on the context line of the search results. The maximum length
 *  is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *objectDisplayLabel;

@end


/**
 *  The options for an object.
 */
@interface GTLRCloudSearch_ObjectOptions : GTLRObject

/**
 *  Options that determine how the object is displayed in the Cloud Search
 *  results page.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ObjectDisplayOptions *displayOptions;

/** The freshness options for an object. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_FreshnessOptions *freshnessOptions;

@end


/**
 *  Options for object properties.
 */
@interface GTLRCloudSearch_ObjectPropertyOptions : GTLRObject

/**
 *  The properties of the sub-object. These properties represent a nested
 *  object. For example, if this property represents a postal address, the
 *  subobjectProperties might be named *street*, *city*, and *state*.
 *  The maximum number of elements is 1000.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_PropertyDefinition *> *subobjectProperties;

@end


/**
 *  List of object values.
 */
@interface GTLRCloudSearch_ObjectValues : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_StructuredDataObject *> *values;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudSearch_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the
 *  `name` should have the format of `operations/some/unique/name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudSearch_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudSearch_Operation_Response : GTLRObject
@end


/**
 *  A people suggestion.
 */
@interface GTLRCloudSearch_PeopleSuggestion : GTLRObject

/**
 *  Suggested person. All fields of the person object might not be populated.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Person *person;

@end


/**
 *  Object to represent a person.
 */
@interface GTLRCloudSearch_Person : GTLRObject

/** The person's email addresses */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_EmailAddress *> *emailAddresses;

/**
 *  The resource name of the person to provide information about.
 *  See <a href="https://developers.google.com/people/api/rest/v1/people/get">
 *  People.get</a> from Google People API.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Obfuscated ID of a person. */
@property(nonatomic, copy, nullable) NSString *obfuscatedId;

/** The person's name */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Name *> *personNames;

/**
 *  A person's read-only photo. A picture shown next to the person's name to
 *  help others recognize the person in search results.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Photo *> *photos;

@end


/**
 *  A person's photo.
 */
@interface GTLRCloudSearch_Photo : GTLRObject

/** The URL of the photo. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  GTLRCloudSearch_PollItemsRequest
 */
@interface GTLRCloudSearch_PollItemsRequest : GTLRObject

/**
 *  Name of connector making this call.
 *  <br />Format: datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

/**
 *  Maximum number of items to return.
 *  <br />The maximum and the default value is 1000
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *limit;

/**
 *  Queue name to fetch items from. If unspecified, PollItems will
 *  fetch from 'default' queue.
 *  The maximum length is 100 characters.
 */
@property(nonatomic, copy, nullable) NSString *queue;

/** Limit the items polled to the ones with these statuses. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *statusCodes;

@end


/**
 *  GTLRCloudSearch_PollItemsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRCloudSearch_PollItemsResponse : GTLRCollectionObject

/**
 *  Set of items from the queue available for connector to process.
 *  <br />These items have the following subset of fields populated: <br />
 *  <br />version
 *  <br />metadata.hash
 *  <br />structured_data.hash
 *  <br />content.hash
 *  <br />payload
 *  <br />status
 *  <br />queue
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Item *> *items;

@end


/**
 *  Reference to a user, group, or domain.
 */
@interface GTLRCloudSearch_Principal : GTLRObject

/**
 *  This principal is a group identified using an external identity.
 *  The name field must specify the group resource name with this format:
 *  identitysources/{source_id}/groups/{ID}
 */
@property(nonatomic, copy, nullable) NSString *groupResourceName;

/** This principal is a GSuite user, group or domain. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GSuitePrincipal *gsuitePrincipal;

/**
 *  This principal is a user identified using an external identity.
 *  The name field must specify the user resource name with this format:
 *  identitysources/{source_id}/users/{ID}
 */
@property(nonatomic, copy, nullable) NSString *userResourceName;

@end


/**
 *  GTLRCloudSearch_ProcessingError
 */
@interface GTLRCloudSearch_ProcessingError : GTLRObject

/**
 *  Error code indicating the nature of the error.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_ProcessingError_Code_AclCycle ACL inheritance
 *        graph formed a cycle. (Value: "ACL_CYCLE")
 *    @arg @c kGTLRCloudSearch_ProcessingError_Code_IndirectBrokenAcl Items with
 *        incomplete ACL information due to inheriting other
 *        items with broken ACL or having groups with unmapped descendants.
 *        (Value: "INDIRECT_BROKEN_ACL")
 *    @arg @c kGTLRCloudSearch_ProcessingError_Code_MalformedRequest Item's ACL,
 *        metadata, or content is malformed or in invalid state.
 *        FieldViolations contains more details on where the problem is. (Value:
 *        "MALFORMED_REQUEST")
 *    @arg @c kGTLRCloudSearch_ProcessingError_Code_ProcessingErrorCodeUnspecified
 *        Input only value. Use this value in Items. (Value:
 *        "PROCESSING_ERROR_CODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_ProcessingError_Code_UnsupportedContentFormat
 *        Countent format is unsupported. (Value: "UNSUPPORTED_CONTENT_FORMAT")
 */
@property(nonatomic, copy, nullable) NSString *code;

/** Description of the error. */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/**
 *  In case the item fields are invalid, this field contains the details
 *  about the validation errors.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_FieldViolation *> *fieldViolations;

@end


/**
 *  The definition of a property within an object.
 */
@interface GTLRCloudSearch_PropertyDefinition : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_BooleanPropertyOptions *booleanPropertyOptions;
@property(nonatomic, strong, nullable) GTLRCloudSearch_DatePropertyOptions *datePropertyOptions;

/**
 *  Options that determine how the property is displayed in the Cloud Search
 *  results page if it is specified to be displayed in the object's
 *  display options
 *  .
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_PropertyDisplayOptions *displayOptions;

@property(nonatomic, strong, nullable) GTLRCloudSearch_DoublePropertyOptions *doublePropertyOptions;
@property(nonatomic, strong, nullable) GTLRCloudSearch_EnumPropertyOptions *enumPropertyOptions;
@property(nonatomic, strong, nullable) GTLRCloudSearch_HtmlPropertyOptions *htmlPropertyOptions;
@property(nonatomic, strong, nullable) GTLRCloudSearch_IntegerPropertyOptions *integerPropertyOptions;

/**
 *  Indicates that the property can be used for generating facets. Cannot be
 *  true for properties whose type is object. IsReturnable must be true to set
 *  this option.
 *  Only supported for Boolean, Enum, and Text properties.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isFacetable;

/**
 *  Indicates that multiple values are allowed for the property. For example, a
 *  document only has one description but can have multiple comments. Cannot be
 *  true for properties whose type is a boolean.
 *  If set to false, properties that contain more than one value will cause the
 *  indexing request for that item to be rejected.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isRepeatable;

/**
 *  Indicates that the property identifies data that should be returned in
 *  search
 *  results via the Query API. If set to *true*, indicates that Query API
 *  users can use matching property fields in results. However, storing fields
 *  requires more space allocation and uses more bandwidth for search queries,
 *  which impacts performance over large datasets. Set to *true* here only if
 *  the field is needed for search results. Cannot be true for properties
 *  whose type is an object.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isReturnable;

/**
 *  Indicates that the property can be used for sorting. Cannot be true for
 *  properties that are repeatable. Cannot be true for properties whose type
 *  is object or user identifier. IsReturnable must be true to set this option.
 *  Only supported for Boolean, Date, Double, Integer, and Timestamp
 *  properties.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isSortable;

/**
 *  The name of the property. Item indexing requests sent to the Indexing API
 *  should set the property name
 *  equal to this value. For example, if name is *subject_line*, then indexing
 *  requests for document items with subject fields should set the
 *  name for that field equal to
 *  *subject_line*. Use the name as the identifier for the object property.
 *  Once registered as a property for an object, you cannot re-use this name
 *  for another property within that object.
 *  The name must start with a letter and can only contain letters (A-Z, a-z)
 *  or numbers (0-9).
 *  The maximum length is 256 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

@property(nonatomic, strong, nullable) GTLRCloudSearch_ObjectPropertyOptions *objectPropertyOptions;
@property(nonatomic, strong, nullable) GTLRCloudSearch_TextPropertyOptions *textPropertyOptions;
@property(nonatomic, strong, nullable) GTLRCloudSearch_TimestampPropertyOptions *timestampPropertyOptions;

@end


/**
 *  The display options for a property.
 */
@interface GTLRCloudSearch_PropertyDisplayOptions : GTLRObject

/**
 *  The user friendly label for the property that will be used if the property
 *  is specified to be displayed in ObjectDisplayOptions. If given, the display
 *  label will be shown in front of the property values when the property is
 *  part of the object display options. For example, if the property value is
 *  '1', the value by itself may not be useful context for the user. If the
 *  display name given was 'priority', then the user will see 'priority : 1' in
 *  the search results which provides clear conext to search users. This is
 *  OPTIONAL; if not given, only the property values will be displayed.
 *  The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *displayLabel;

@end


/**
 *  Represents an item to be pushed to the indexing queue.
 */
@interface GTLRCloudSearch_PushItem : GTLRObject

/**
 *  Content hash of the item according to the repository. If specified, this is
 *  used to determine how to modify this
 *  item's status. Setting this field and the
 *  type field results in argument
 *  error.
 *  The maximum length is 2048 characters.
 */
@property(nonatomic, copy, nullable) NSString *contentHash;

/**
 *  Metadata hash of the item according to the repository. If specified, this
 *  is used to determine how to modify this
 *  item's status. Setting this field and the
 *  type field results in argument
 *  error.
 *  The maximum length is 2048 characters.
 */
@property(nonatomic, copy, nullable) NSString *metadataHash;

/**
 *  Provides additional document state information for the connector,
 *  such as an alternate repository ID and other metadata.
 *  The maximum length is 8192 bytes.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *payload;

/**
 *  Queue to which this item belongs to. The <code>default</code> queue is
 *  chosen if this field is not specified. The maximum length is
 *  512 characters.
 */
@property(nonatomic, copy, nullable) NSString *queue;

/**
 *  Populate this field to store Connector or repository error details.
 *  This information is displayed in the Admin Console.
 *  This field may only be populated when the
 *  Type is
 *  REPOSITORY_ERROR.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RepositoryError *repositoryError;

/**
 *  Structured data hash of the item according to the repository. If specified,
 *  this is used to determine how to modify this item's status. Setting this
 *  field and the type field
 *  results in argument error.
 *  The maximum length is 2048 characters.
 */
@property(nonatomic, copy, nullable) NSString *structuredDataHash;

/**
 *  The type of the push operation that defines the push behavior.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_PushItem_Type_Modified Indicates that the
 *        repository document has been modified or updated since
 *        the previous
 *        update
 *        call. This changes status to
 *        MODIFIED state for
 *        an existing item. If this is called on a non existing item, the status
 *        is
 *        changed to
 *        NEW_ITEM. (Value: "MODIFIED")
 *    @arg @c kGTLRCloudSearch_PushItem_Type_NotModified Item in the repository
 *        has not been modified since the last update
 *        call. This push operation will set status to
 *        ACCEPTED state. (Value: "NOT_MODIFIED")
 *    @arg @c kGTLRCloudSearch_PushItem_Type_RepositoryError Connector is facing
 *        a repository error regarding this item. Change
 *        status to
 *        REPOSITORY_ERROR
 *        state. Item is unreserved and rescheduled at a future time determined
 *        by
 *        exponential backoff. (Value: "REPOSITORY_ERROR")
 *    @arg @c kGTLRCloudSearch_PushItem_Type_Requeue Call push with REQUEUE only
 *        for items that have been reserved.
 *        This action unreserves the item and resets its available time to the
 *        wall clock time. (Value: "REQUEUE")
 *    @arg @c kGTLRCloudSearch_PushItem_Type_Unspecified Default UNSPECIFIED.
 *        Specifies that the push operation should not modify
 *        ItemStatus (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRCloudSearch_PushItemRequest
 */
@interface GTLRCloudSearch_PushItemRequest : GTLRObject

/**
 *  Name of connector making this call.
 *  <br />Format: datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

/** Item to push onto the queue. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_PushItem *item;

@end


/**
 *  GTLRCloudSearch_QueryInterpretation
 */
@interface GTLRCloudSearch_QueryInterpretation : GTLRObject

/**
 *  interpretationType
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_QueryInterpretation_InterpretationType_Blend The
 *        natural language results is mixed with results from original query.
 *        (Value: "BLEND")
 *    @arg @c kGTLRCloudSearch_QueryInterpretation_InterpretationType_None No
 *        natural language interpretation or the natural language interpretation
 *        is not used to fetch the search results. (Value: "NONE")
 *    @arg @c kGTLRCloudSearch_QueryInterpretation_InterpretationType_Replace
 *        The results only contain natural language results. (Value: "REPLACE")
 */
@property(nonatomic, copy, nullable) NSString *interpretationType;

/**
 *  The interpretation of the query used in search. For example, query "email
 *  from john" will be interpreted as "from:john source:mail"
 */
@property(nonatomic, copy, nullable) NSString *interpretedQuery;

@end


/**
 *  Options to interpret user query.
 */
@interface GTLRCloudSearch_QueryInterpretationOptions : GTLRObject

/**
 *  Flag to disable natural language (NL) interpretation of queries. Default is
 *  false, Set to true to disable natural language interpretation. NL
 *  interpretation only applies to predefined datasources.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableNlInterpretation;

@end


/**
 *  Information relevant only to a query entry.
 */
@interface GTLRCloudSearch_QueryItem : GTLRObject

/**
 *  True if the text was generated by means other than a previous user search.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isSynthetic;

@end


/**
 *  The definition of a operator that can be used in a Search/Suggest request.
 */
@interface GTLRCloudSearch_QueryOperator : GTLRObject

/** Display name of the operator */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Potential list of values for the opeatror field. This field is only filled
 *  when we can safely enumerate all the possible values of this operator.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *enumValues;

/**
 *  Indicates the operator name that can be used to isolate the property using
 *  the greater-than operator.
 */
@property(nonatomic, copy, nullable) NSString *greaterThanOperatorName;

/**
 *  Can this operator be used to get facets.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isFacetable;

/**
 *  Indicates if multiple values can be set for this property.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isRepeatable;

/**
 *  Will the property associated with this facet be returned as part of search
 *  results.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isReturnable;

/**
 *  Can this operator be used to sort results.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isSortable;

/**
 *  Can get suggestions for this field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isSuggestable;

/**
 *  Indicates the operator name that can be used to isolate the property using
 *  the less-than operator.
 */
@property(nonatomic, copy, nullable) NSString *lessThanOperatorName;

/** The name of the operator. */
@property(nonatomic, copy, nullable) NSString *operatorName;

/**
 *  Type of the operator.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Boolean Value "BOOLEAN"
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Date Value "DATE"
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Double Value "DOUBLE"
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Enum Value "ENUM"
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Html Value "HTML"
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Integer Value "INTEGER"
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Text Value "TEXT"
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Timestamp Value "TIMESTAMP"
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Unknown Invalid value. (Value:
 *        "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  List of sources that the user can search using the query API.
 */
@interface GTLRCloudSearch_QuerySource : GTLRObject

/** Display name of the data source. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** List of all operators applicable for this source. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_QueryOperator *> *operators;

/**
 *  A short name or alias for the source. This value can be used with the
 *  'source' operator.
 */
@property(nonatomic, copy, nullable) NSString *shortName;

/** Name of the source */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Source *source;

@end


/**
 *  A completed query suggestion.
 */
@interface GTLRCloudSearch_QuerySuggestion : GTLRObject
@end


/**
 *  Errors when the connector is communicating to the source repository.
 */
@interface GTLRCloudSearch_RepositoryError : GTLRObject

/**
 *  Message that describes the error. The maximum allowable length
 *  of the message is 8192 characters.
 */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/**
 *  Error codes. Matches the definition of HTTP status codes.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *httpStatusCode;

/**
 *  Type of error.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_AuthenticationError Failed
 *        authentication due to incorrect credentials. (Value:
 *        "AUTHENTICATION_ERROR")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_AuthorizationError Service
 *        account is not authorized for the repository. (Value:
 *        "AUTHORIZATION_ERROR")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_ClientError Client-related
 *        error, such as an invalid request from the connector to
 *        the repository server. (Value: "CLIENT_ERROR")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_ConnectionError Cannot
 *        connect to the repository server. (Value: "CONNECTION_ERROR")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_DnsError DNS problem, such
 *        as the DNS server is not responding. (Value: "DNS_ERROR")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_NetworkError Unknown or
 *        unreachable host. (Value: "NETWORK_ERROR")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_QuotaExceeded Quota
 *        exceeded. (Value: "QUOTA_EXCEEDED")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_ServerError Repository
 *        server error. (Value: "SERVER_ERROR")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_ServiceUnavailable Server
 *        temporarily unavailable. (Value: "SERVICE_UNAVAILABLE")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_Unknown Unknown error.
 *        (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Shared request options for all RPC methods.
 */
@interface GTLRCloudSearch_RequestOptions : GTLRObject

/** Debug options of the request */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

/**
 *  The BCP-47 language code, such as "en-US" or "sr-Latn".
 *  For more information, see
 *  http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
 *  For translations.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/** Id of the application created using SearchApplicationsService. */
@property(nonatomic, copy, nullable) NSString *searchApplicationId;

/**
 *  Current user's time zone id, such as "America/Los_Angeles" or
 *  "Australia/Sydney". These IDs are defined by
 *  [Unicode Common Locale Data Repository (CLDR)](http://cldr.unicode.org/)
 *  project, and currently available in the file
 *  [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml)
 */
@property(nonatomic, copy, nullable) NSString *timeZone;

@end


/**
 *  GTLRCloudSearch_ResetSearchApplicationRequest
 */
@interface GTLRCloudSearch_ResetSearchApplicationRequest : GTLRObject

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

@end


/**
 *  Debugging information about the response.
 */
@interface GTLRCloudSearch_ResponseDebugInfo : GTLRObject

/** General debug info formatted for display. */
@property(nonatomic, copy, nullable) NSString *formattedDebugInfo;

@end


/**
 *  Information relevant only to a restrict entry.
 *  NextId: 7
 */
@interface GTLRCloudSearch_RestrictItem : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_DriveFollowUpRestrict *driveFollowUpRestrict;
@property(nonatomic, strong, nullable) GTLRCloudSearch_DriveLocationRestrict *driveLocationRestrict;
@property(nonatomic, strong, nullable) GTLRCloudSearch_DriveMimeTypeRestrict *driveMimeTypeRestrict;
@property(nonatomic, strong, nullable) GTLRCloudSearch_DriveTimeSpanRestrict *driveTimeSpanRestrict;

/** The search restrict (e.g. "after:2017-09-11 before:2017-09-12"). */
@property(nonatomic, copy, nullable) NSString *searchOperator;

@end


/**
 *  Result count information
 */
@interface GTLRCloudSearch_ResultCounts : GTLRObject

/** Result count information for each source with results. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SourceResultCount *> *sourceResultCounts;

@end


/**
 *  Debugging information about the result.
 */
@interface GTLRCloudSearch_ResultDebugInfo : GTLRObject

/** General debug info formatted for display. */
@property(nonatomic, copy, nullable) NSString *formattedDebugInfo;

@end


/**
 *  Display Fields for Search Results
 */
@interface GTLRCloudSearch_ResultDisplayField : GTLRObject

/** The display label for the property. */
@property(nonatomic, copy, nullable) NSString *label;

/** The operator name of the property. */
@property(nonatomic, copy, nullable) NSString *operatorName;

/** The name value pair for the property. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_NamedProperty *property;

@end


/**
 *  The collection of fields that make up a displayed line
 */
@interface GTLRCloudSearch_ResultDisplayLine : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ResultDisplayField *> *fields;

@end


/**
 *  GTLRCloudSearch_ResultDisplayMetadata
 */
@interface GTLRCloudSearch_ResultDisplayMetadata : GTLRObject

/** The metalines content to be displayed with the result. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ResultDisplayLine *> *metalines;

/** The display label for the object. */
@property(nonatomic, copy, nullable) NSString *objectTypeLabel;

@end


/**
 *  GTLRCloudSearch_RetrievalImportance
 */
@interface GTLRCloudSearch_RetrievalImportance : GTLRObject

/**
 *  Indicates the ranking importance given to property when it is matched
 *  during retrieval. Once set, the token importance of a property cannot be
 *  changed.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_RetrievalImportance_Importance_Default Treat the
 *        match like a body text match. (Value: "DEFAULT")
 *    @arg @c kGTLRCloudSearch_RetrievalImportance_Importance_High Treat the
 *        match with higher importance than body text. (Value: "HIGH")
 *    @arg @c kGTLRCloudSearch_RetrievalImportance_Importance_Highest Treat the
 *        match like a match against title of the item. (Value: "HIGHEST")
 *    @arg @c kGTLRCloudSearch_RetrievalImportance_Importance_Low Treat the
 *        match with lower importance than body text. (Value: "LOW")
 *    @arg @c kGTLRCloudSearch_RetrievalImportance_Importance_None Do not match
 *        against this field during retrieval. The property can still
 *        be used for operator matching, faceting, and suggest if
 *        desired. (Value: "NONE")
 */
@property(nonatomic, copy, nullable) NSString *importance;

@end


/**
 *  The schema definition for a data source.
 */
@interface GTLRCloudSearch_Schema : GTLRObject

/**
 *  The list of top-level objects for the data source.
 *  The maximum number of elements is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ObjectDefinition *> *objectDefinitions;

/**
 *  IDs of the Long Running Operations (LROs) currently running for this
 *  schema. After modifying the schema, wait for opeations to complete
 *  before indexing additional content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *operationIds;

@end


/**
 *  Scoring configurations for a source while processing a
 *  Search or
 *  Suggest request.
 */
@interface GTLRCloudSearch_ScoringConfig : GTLRObject

/**
 *  Whether to use freshness as a ranking signal. By default, freshness is used
 *  as a ranking signal.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableFreshness;

/**
 *  Whether to personalize the results. By default, personal signals will
 *  be used to boost results.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disablePersonalization;

@end


/**
 *  SearchApplication
 */
@interface GTLRCloudSearch_SearchApplication : GTLRObject

/**
 *  Retrictions applied to the configurations.
 *  The maximum number of elements is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_DataSourceRestriction *> *dataSourceRestrictions;

/**
 *  The default fields for returning facet results.
 *  The sources specified here also have been included in
 *  data_source_restrictions
 *  above.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_FacetOptions *> *defaultFacetOptions;

/** The default options for sorting the search results */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SortOptions *defaultSortOptions;

/**
 *  Display name of the Search Application.
 *  The maximum length is 300 characters.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Name of the Search Application.
 *  <br />Format: searchapplications/{application_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  IDs of the Long Running Operations (LROs) currently running for this schema.
 *  Output only field.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *operationIds;

/** Configuration for ranking results. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ScoringConfig *scoringConfig;

/** Configuration for a sources specified in data_source_restrictions. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SourceConfig *> *sourceConfig;

@end


/**
 *  GTLRCloudSearch_SearchItemsByViewUrlRequest
 */
@interface GTLRCloudSearch_SearchItemsByViewUrlRequest : GTLRObject

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

/** The next_page_token value returned from a previous request, if any. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Specify the full view URL to find the corresponding item.
 *  The maximum length is 2048 characters.
 */
@property(nonatomic, copy, nullable) NSString *viewUrl;

@end


/**
 *  GTLRCloudSearch_SearchItemsByViewUrlResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudSearch_SearchItemsByViewUrlResponse : GTLRCollectionObject

/**
 *  items
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Item *> *items;

/**
 *  Token to retrieve the next page of results, or empty if there are no
 *  more results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Additional search quality metadata of the item.
 */
@interface GTLRCloudSearch_SearchQualityMetadata : GTLRObject

/**
 *  An indication of the quality of the item, used to influence search quality.
 *  Value should be between 0.0 (lowest quality) and 1.0 (highest quality).
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *quality;

@end


/**
 *  The search API request.
 */
@interface GTLRCloudSearch_SearchRequest : GTLRObject

/**
 *  The sources to use for querying. If not specified, all data sources
 *  from the current search application are used.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_DataSourceRestriction *> *dataSourceRestrictions;

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_FacetOptions *> *facetOptions;

/**
 *  Maximum number of search results to return in one page.
 *  Valid values are between 1 and 100, inclusive.
 *  Default value is 10.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  The raw query string.
 *  See supported search operators in the [Cloud search
 *  Cheat
 *  Sheet](https://gsuite.google.com/learning-center/products/cloudsearch/cheat-sheet/)
 */
@property(nonatomic, copy, nullable) NSString *query;

/** Options to interpret the user query. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_QueryInterpretationOptions *queryInterpretationOptions;

/** Request options, such as the search application and user timezone. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RequestOptions *requestOptions;

/** The options for sorting the search results */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SortOptions *sortOptions;

/**
 *  Starting index of the results.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  The search API response.
 */
@interface GTLRCloudSearch_SearchResponse : GTLRObject

/** Debugging information about the response. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ResponseDebugInfo *debugInfo;

/** Error information about the response. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ErrorInfo *errorInfo;

/** Repeated facet results. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_FacetResult *> *facetResults;

/**
 *  Whether there are more search results matching the query.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasMoreResults;

/**
 *  Query interpretation result for user query. Empty if query interpretation
 *  is disabled.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_QueryInterpretation *queryInterpretation;

/**
 *  The estimated result count for this query.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resultCountEstimate;

/**
 *  The exact result count for this query.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resultCountExact;

/** Expanded result count information. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ResultCounts *resultCounts;

/** Results from a search query. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SearchResult *> *results;

/** Suggested spelling for the query. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SpellResult *> *spellResults;

/**
 *  Structured results for the user query. These results are not counted
 *  against the page_size.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_StructuredResult *> *structuredResults;

@end


/**
 *  Results containing indexed information for a document.
 */
@interface GTLRCloudSearch_SearchResult : GTLRObject

/**
 *  If source is clustered, provide list of clustered results. There will only
 *  be one level of clustered results. If current source is not enabled for
 *  clustering, this field will be empty.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SearchResult *> *clusteredResults;

/** Debugging information about this search result. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ResultDebugInfo *debugInfo;

/** Metadata of the search result. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Metadata *metadata;

/**
 *  The concatenation of all snippets (summaries) available for this result.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Snippet *snippet;

/** Title of the search result. */
@property(nonatomic, copy, nullable) NSString *title;

/** The URL of the result. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Snippet of the search result, which summarizes the content of the resulting
 *  page.
 */
@interface GTLRCloudSearch_Snippet : GTLRObject

/** The matched ranges in the snippet. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_MatchRange *> *matchRanges;

/**
 *  The snippet of the document.
 *  The snippet of the document. May contain escaped HTML character that
 *  should be unescaped prior to rendering.
 */
@property(nonatomic, copy, nullable) NSString *snippet;

@end


/**
 *  GTLRCloudSearch_SortOptions
 */
@interface GTLRCloudSearch_SortOptions : GTLRObject

/**
 *  Name of the operator corresponding to the field to sort on.
 *  The corresponding property must be marked as
 *  sortable.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

/**
 *  Ascending is the default sort order
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_SortOptions_SortOrder_Ascending Value "ASCENDING"
 *    @arg @c kGTLRCloudSearch_SortOptions_SortOrder_Descending Value
 *        "DESCENDING"
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

@end


/**
 *  Defines sources for the suggest/search APIs.
 */
@interface GTLRCloudSearch_Source : GTLRObject

/**
 *  Source name for content indexed by the
 *  Indexing API.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Predefined content source for Google Apps.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_GoogleCalendar Value
 *        "GOOGLE_CALENDAR"
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_GoogleDrive Value
 *        "GOOGLE_DRIVE"
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_GoogleGmail Value
 *        "GOOGLE_GMAIL"
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_GoogleGroups Value
 *        "GOOGLE_GROUPS"
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_GoogleKeep Value
 *        "GOOGLE_KEEP"
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_GoogleSites Value
 *        "GOOGLE_SITES"
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_None Value "NONE"
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_Person Suggests people in
 *        the organization. Only valid when used
 *        with the suggest API. Results in an error when used in the query API.
 *        (Value: "PERSON")
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_QueryHistory Suggests
 *        queries issued by the user in the past. Only valid when used
 *        with the suggest API. Ignored when used in the query API. (Value:
 *        "QUERY_HISTORY")
 */
@property(nonatomic, copy, nullable) NSString *predefinedSource;

@end


/**
 *  Configurations for a source while processing a
 *  Search or
 *  Suggest request.
 */
@interface GTLRCloudSearch_SourceConfig : GTLRObject

/** The crowding configuration for the source. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SourceCrowdingConfig *crowdingConfig;

/** The scoring configuration for the source. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SourceScoringConfig *scoringConfig;

/** The source for which this configuration is to be used. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Source *source;

@end


/**
 *  Set search results crowding limits. Crowding is a situation in which
 *  multiple results from the same source or host "crowd out" other results,
 *  diminishing the quality of search for users. To foster better search quality
 *  and source diversity in search results, you can set a condition to reduce
 *  repetitive results by source.
 */
@interface GTLRCloudSearch_SourceCrowdingConfig : GTLRObject

/**
 *  Use a field to control results crowding. For example, if you want to
 *  control overly similar results from Gmail topics, use `thread_id`.
 *  For similar pages from Google Sites, you can use `webspace_id`.
 *  When matching query results contain the same field value in
 *  `GenericMetadata`, crowding limits are set on those records.
 */
@property(nonatomic, copy, nullable) NSString *field;

/**
 *  Maximum number of results allowed from a source.
 *  No limits will be set on results if this value is less than or equal to 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numResults;

/**
 *  Maximum number of suggestions allowed from a source.
 *  No limits will be set on results if this value is less than or equal to 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numSuggestions;

/**
 *  Control results by content source. This option limits the total number
 *  of results from a given source and ignores field-based crowding control.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *source;

@end


/**
 *  Per source result count information.
 */
@interface GTLRCloudSearch_SourceResultCount : GTLRObject

/**
 *  Whether there are more search results for this source.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasMoreResults;

/**
 *  The estimated result count for this source.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resultCountEstimate;

/**
 *  The exact result count for this source.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resultCountExact;

/** The source the result count information is associated with. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Source *source;

@end


/**
 *  Set the scoring configuration. This allows modifying the ranking of results
 *  for a source.
 */
@interface GTLRCloudSearch_SourceScoringConfig : GTLRObject

/**
 *  Importance of the source.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_SourceScoringConfig_SourceImportance_Default
 *        Value "DEFAULT"
 *    @arg @c kGTLRCloudSearch_SourceScoringConfig_SourceImportance_High Value
 *        "HIGH"
 *    @arg @c kGTLRCloudSearch_SourceScoringConfig_SourceImportance_Low Value
 *        "LOW"
 */
@property(nonatomic, copy, nullable) NSString *sourceImportance;

@end


/**
 *  GTLRCloudSearch_SpellResult
 */
@interface GTLRCloudSearch_SpellResult : GTLRObject

/** The suggested spelling of the query. */
@property(nonatomic, copy, nullable) NSString *suggestedQuery;

@end


/**
 *  Start upload file request.
 */
@interface GTLRCloudSearch_StartUploadItemRequest : GTLRObject

/**
 *  Name of connector making this call.
 *  <br />Format: datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRCloudSearch_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudSearch_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudSearch_Status_Details_Item : GTLRObject
@end


/**
 *  A structured data object consisting of named properties.
 */
@interface GTLRCloudSearch_StructuredDataObject : GTLRObject

/**
 *  The properties for the object.
 *  The maximum number of elements is 1000.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_NamedProperty *> *properties;

@end


/**
 *  Structured results that are returned as part of search request.
 */
@interface GTLRCloudSearch_StructuredResult : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_Person *person;

@end


/**
 *  Request of suggest API.
 */
@interface GTLRCloudSearch_SuggestRequest : GTLRObject

/**
 *  The sources to use for suggestions. If not specified, all data sources
 *  from the current search application are used.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_DataSourceRestriction *> *dataSourceRestrictions;

/** Partial query for the completion suggestion. */
@property(nonatomic, copy, nullable) NSString *query;

/** Request options, such as the search application and user timezone. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RequestOptions *requestOptions;

@end


/**
 *  Response of the suggest API.
 */
@interface GTLRCloudSearch_SuggestResponse : GTLRObject

/** List of suggestion results. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SuggestResult *> *suggestResults;

@end


/**
 *  One suggestion result.
 */
@interface GTLRCloudSearch_SuggestResult : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_PeopleSuggestion *peopleSuggestion;
@property(nonatomic, strong, nullable) GTLRCloudSearch_QuerySuggestion *querySuggestion;

/** The source of the suggestion. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Source *source;

/**
 *  The suggested query that will be used for search, when the user
 *  clicks on the suggestion
 */
@property(nonatomic, copy, nullable) NSString *suggestedQuery;

@end


/**
 *  Used to provide a search operator for text properties. This is optional.
 *  Search operators let users restrict the query to specific fields relevant
 *  to the type of item being searched.
 */
@interface GTLRCloudSearch_TextOperatorOptions : GTLRObject

/**
 *  If true, the text value will be tokenized as one atomic value in
 *  operator searches and facet matches. For example, if the operator name is
 *  "genre" and the value is "science-fiction" the query restrictions
 *  "genre:science" and "genre:fiction" will not match the item;
 *  "genre:science-fiction" will. Value matching is case-sensitive
 *  and does not remove special characters.
 *  If false, the text will be tokenized. For example, if the value is
 *  "science-fiction" the queries "genre:science" and "genre:fiction" will
 *  match the item.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exactMatchWithOperator;

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  text property. For example, if operatorName is *subject* and the
 *  property's name is *subjectLine*, then queries like
 *  *subject:&lt;value&gt;* will show results only where the value of the
 *  property named *subjectLine* matches *&lt;value&gt;*. By contrast, a
 *  search that uses the same *&lt;value&gt;* without an operator will return
 *  all items where *&lt;value&gt;* matches the value of any
 *  text properties or text within the content field for the item.
 *  The operator name can only contain lowercase letters (a-z).
 *  The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

@end


/**
 *  Options for text properties.
 */
@interface GTLRCloudSearch_TextPropertyOptions : GTLRObject

/** If set, describes how the property should be used as a search operator. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_TextOperatorOptions *operatorOptions;

/**
 *  Indicates the search quality importance of the tokens within the
 *  field when used for retrieval.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RetrievalImportance *retrievalImportance;

@end


/**
 *  List of text values.
 */
@interface GTLRCloudSearch_TextValues : GTLRObject

/** The maximum allowable length for text values is 2048 characters. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  Used to provide a search operator for timestamp properties. This is
 *  optional. Search operators let users restrict the query to specific fields
 *  relevant to the type of item being searched.
 */
@interface GTLRCloudSearch_TimestampOperatorOptions : GTLRObject

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  timestamp property using the greater-than operator. For example, if
 *  greaterThanOperatorName is *closedafter* and the property's name is
 *  *closeDate*, then queries like *closedafter:&lt;value&gt;* will
 *  show results only where the value of the property named *closeDate* is
 *  later than *&lt;value&gt;*.
 *  The operator name can only contain lowercase letters (a-z).
 *  The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *greaterThanOperatorName;

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  timestamp property using the less-than operator. For example, if
 *  lessThanOperatorName is *closedbefore* and the property's name is
 *  *closeDate*, then queries like *closedbefore:&lt;value&gt;* will
 *  show results only where the value of the property named *closeDate* is
 *  earlier than *&lt;value&gt;*.
 *  The operator name can only contain lowercase letters (a-z).
 *  The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *lessThanOperatorName;

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  timestamp property. For example, if operatorName is *closedon* and the
 *  property's name is *closeDate*, then queries like
 *  *closedon:&lt;value&gt;* will show results only where the value of the
 *  property named *closeDate* matches *&lt;value&gt;*. By contrast, a
 *  search that uses the same *&lt;value&gt;* without an operator will return
 *  all items where *&lt;value&gt;* matches the value of any String
 *  properties or text within the content field for the item. The operator
 *  name can only contain lowercase letters (a-z). The maximum length is 32
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

@end


/**
 *  Options for timestamp properties.
 */
@interface GTLRCloudSearch_TimestampPropertyOptions : GTLRObject

/**
 *  If set, describes how the timestamp should be used as a search operator.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_TimestampOperatorOptions *operatorOptions;

@end


/**
 *  List of timestamp values.
 */
@interface GTLRCloudSearch_TimestampValues : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRDateTime *> *values;

@end


/**
 *  GTLRCloudSearch_UnmappedIdentity
 */
@interface GTLRCloudSearch_UnmappedIdentity : GTLRObject

/** The resource name for an external user. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Principal *externalIdentity;

/**
 *  The resolution status for the external identity.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_CodeUnspecified
 *        Input-only value. Used to list all unmapped identities regardless of
 *        status. (Value: "CODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_IdentitySourceMisconfigured
 *        IDaaS does not understand the identity source, probably because the
 *        schema was modified in a non compatible way. (Value:
 *        "IDENTITY_SOURCE_MISCONFIGURED")
 *    @arg @c kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_IdentitySourceNotFound
 *        The identity source associated with the identity was either not found
 *        or
 *        deleted. (Value: "IDENTITY_SOURCE_NOT_FOUND")
 *    @arg @c kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_InternalError
 *        Internal error. (Value: "INTERNAL_ERROR")
 *    @arg @c kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_NotFound
 *        The unmapped identity was not found in IDaaS, and needs to be provided
 *        by
 *        the user. (Value: "NOT_FOUND")
 *    @arg @c kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_TooManyMappingsFound
 *        The number of users associated with the external identity is too
 *        large. (Value: "TOO_MANY_MAPPINGS_FOUND")
 */
@property(nonatomic, copy, nullable) NSString *resolutionStatusCode;

@end


/**
 *  GTLRCloudSearch_UnreserveItemsRequest
 */
@interface GTLRCloudSearch_UnreserveItemsRequest : GTLRObject

/**
 *  Name of connector making this call.
 *  <br />Format: datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

/** Name of a queue to unreserve items from. */
@property(nonatomic, copy, nullable) NSString *queue;

@end


/**
 *  GTLRCloudSearch_UpdateDataSourceRequest
 */
@interface GTLRCloudSearch_UpdateDataSourceRequest : GTLRObject

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

@property(nonatomic, strong, nullable) GTLRCloudSearch_DataSource *source;

@end


/**
 *  GTLRCloudSearch_UpdateSchemaRequest
 */
@interface GTLRCloudSearch_UpdateSchemaRequest : GTLRObject

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

/** The new schema for the source. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Schema *schema;

/**
 *  If true, the request will be validated without side effects.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *validateOnly;

@end


/**
 *  Represents an upload session reference.
 *  This reference is created via upload
 *  method.
 *  Updating of item content may refer to this uploaded content via
 *  contentDataRef.
 */
@interface GTLRCloudSearch_UploadItemRef : GTLRObject

/**
 *  Name of the content reference.
 *  The maximum length is 2048 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Definition of a single value with generic type.
 */
@interface GTLRCloudSearch_Value : GTLRObject

/**
 *  booleanValue
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *booleanValue;

@property(nonatomic, strong, nullable) GTLRCloudSearch_Date *dateValue;

/**
 *  doubleValue
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *doubleValue;

/**
 *  integerValue
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *integerValue;

@property(nonatomic, copy, nullable) NSString *stringValue;
@property(nonatomic, strong, nullable) GTLRDateTime *timestampValue;

@end


/**
 *  GTLRCloudSearch_ValueFilter
 */
@interface GTLRCloudSearch_ValueFilter : GTLRObject

/**
 *  The `operator_name` applied to the query, such as *price_greater_than*.
 *  The filter can work against both types of filters defined in the schema
 *  for your data source:
 *  <br/><br/>
 *  1. `operator_name`, where the query filters results by the property
 *  that matches the value.
 *  <br/>
 *  2. `greater_than_operator_name` or `less_than_operator_name` in your
 *  schema. The query filters the results for the property values that are
 *  greater than or less than the supplied value in the query.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

/** The value to be compared with. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Value *value;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
