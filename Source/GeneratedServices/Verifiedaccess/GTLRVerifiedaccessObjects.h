// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Chrome Verified Access API (verifiedaccess/v1)
// Description:
//   API for Verified Access chrome extension to provide credential verification
//   for chrome devices connecting to an enterprise network
// Documentation:
//   https://developers.google.com/chrome/verified-access

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRVerifiedaccess_SignedData;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Result message for VerifiedAccess.CreateChallenge.
 */
@interface GTLRVerifiedaccess_Challenge : GTLRObject

/**
 *  Challenge generated with the old signing key
 *  (this will only be present during key rotation)
 */
@property(nonatomic, strong, nullable) GTLRVerifiedaccess_SignedData *alternativeChallenge;

/** Generated challenge */
@property(nonatomic, strong, nullable) GTLRVerifiedaccess_SignedData *challenge;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRVerifiedaccess_Empty : GTLRObject
@end


/**
 *  The wrapper message of any data and its signature.
 */
@interface GTLRVerifiedaccess_SignedData : GTLRObject

/**
 *  The data to be signed.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  The signature of the data field.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *signature;

@end


/**
 *  signed ChallengeResponse
 */
@interface GTLRVerifiedaccess_VerifyChallengeResponseRequest : GTLRObject

/** The generated response to the challenge */
@property(nonatomic, strong, nullable) GTLRVerifiedaccess_SignedData *challengeResponse;

/**
 *  Service can optionally provide identity information about the device
 *  or user associated with the key.
 *  For an EMK, this value is the enrolled domain.
 *  For an EUK, this value is the user's email address.
 *  If present, this value will be checked against contents
 *  of the response, and verification will fail if there is no match.
 */
@property(nonatomic, copy, nullable) NSString *expectedIdentity;

@end


/**
 *  Result message for VerifiedAccess.VerifyChallengeResponse.
 */
@interface GTLRVerifiedaccess_VerifyChallengeResponseResult : GTLRObject

/**
 *  Device enrollment id is returned in this field (for the machine response
 *  only).
 */
@property(nonatomic, copy, nullable) NSString *deviceEnrollmentId;

/**
 *  Device permanent id is returned in this field (for the machine response
 *  only).
 */
@property(nonatomic, copy, nullable) NSString *devicePermanentId;

/**
 *  Certificate Signing Request (in the SPKAC format, base64 encoded) is
 *  returned in this field. This field will be set only if device has included
 *  CSR in its challenge response.
 *  (the option to include CSR is now available for both user and machine
 *  responses)
 */
@property(nonatomic, copy, nullable) NSString *signedPublicKeyAndChallenge;

/**
 *  For EMCert check, device permanent id is returned here.
 *  For EUCert check, signed_public_key_and_challenge [base64 encoded]
 *  is returned if present, otherwise empty string is returned.
 *  This field is deprecated, please use device_permanent_id or
 *  signed_public_key_and_challenge fields.
 */
@property(nonatomic, copy, nullable) NSString *verificationOutput;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
