// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Notebooks API (notebooks/v1)
// Description:
//   AI Platform Notebooks API is used to manage notebook resources in Google
//   Cloud.
// Documentation:
//   https://cloud.google.com/ai-platform/notebooks/docs/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAIPlatformNotebooks_AcceleratorConfig;
@class GTLRAIPlatformNotebooks_Binding;
@class GTLRAIPlatformNotebooks_ContainerImage;
@class GTLRAIPlatformNotebooks_Disk;
@class GTLRAIPlatformNotebooks_Environment;
@class GTLRAIPlatformNotebooks_Execution;
@class GTLRAIPlatformNotebooks_ExecutionTemplate;
@class GTLRAIPlatformNotebooks_ExecutionTemplate_Labels;
@class GTLRAIPlatformNotebooks_Expr;
@class GTLRAIPlatformNotebooks_GetInstanceHealthResponse_HealthInfo;
@class GTLRAIPlatformNotebooks_GuestOsFeature;
@class GTLRAIPlatformNotebooks_Instance;
@class GTLRAIPlatformNotebooks_Instance_Labels;
@class GTLRAIPlatformNotebooks_Instance_Metadata;
@class GTLRAIPlatformNotebooks_Location;
@class GTLRAIPlatformNotebooks_Location_Labels;
@class GTLRAIPlatformNotebooks_Location_Metadata;
@class GTLRAIPlatformNotebooks_Operation;
@class GTLRAIPlatformNotebooks_Operation_Metadata;
@class GTLRAIPlatformNotebooks_Operation_Response;
@class GTLRAIPlatformNotebooks_Policy;
@class GTLRAIPlatformNotebooks_ReportInstanceInfoRequest_Metadata;
@class GTLRAIPlatformNotebooks_Schedule;
@class GTLRAIPlatformNotebooks_SchedulerAcceleratorConfig;
@class GTLRAIPlatformNotebooks_SetInstanceLabelsRequest_Labels;
@class GTLRAIPlatformNotebooks_ShieldedInstanceConfig;
@class GTLRAIPlatformNotebooks_Status;
@class GTLRAIPlatformNotebooks_Status_Details_Item;
@class GTLRAIPlatformNotebooks_UpgradeHistoryEntry;
@class GTLRAIPlatformNotebooks_VmImage;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRAIPlatformNotebooks_AcceleratorConfig.type

/**
 *  Accelerator type is not specified.
 *
 *  Value: "ACCELERATOR_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_AcceleratorTypeUnspecified;
/**
 *  Accelerator type is Nvidia Tesla A100.
 *
 *  Value: "NVIDIA_TESLA_A100"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaA100;
/**
 *  Accelerator type is Nvidia Tesla K80.
 *
 *  Value: "NVIDIA_TESLA_K80"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaK80;
/**
 *  Accelerator type is Nvidia Tesla P100.
 *
 *  Value: "NVIDIA_TESLA_P100"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaP100;
/**
 *  Accelerator type is NVIDIA Tesla P100 Virtual Workstations.
 *
 *  Value: "NVIDIA_TESLA_P100_VWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaP100Vws;
/**
 *  Accelerator type is Nvidia Tesla P4.
 *
 *  Value: "NVIDIA_TESLA_P4"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaP4;
/**
 *  Accelerator type is NVIDIA Tesla P4 Virtual Workstations.
 *
 *  Value: "NVIDIA_TESLA_P4_VWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaP4Vws;
/**
 *  Accelerator type is Nvidia Tesla T4.
 *
 *  Value: "NVIDIA_TESLA_T4"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaT4;
/**
 *  Accelerator type is NVIDIA Tesla T4 Virtual Workstations.
 *
 *  Value: "NVIDIA_TESLA_T4_VWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaT4Vws;
/**
 *  Accelerator type is Nvidia Tesla V100.
 *
 *  Value: "NVIDIA_TESLA_V100"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaV100;
/**
 *  (Coming soon) Accelerator type is TPU V2.
 *
 *  Value: "TPU_V2"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_TpuV2;
/**
 *  (Coming soon) Accelerator type is TPU V3.
 *
 *  Value: "TPU_V3"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_TpuV3;

// ----------------------------------------------------------------------------
// GTLRAIPlatformNotebooks_Execution.state

/**
 *  The job has been cancelled. `error_message` should describe the reason for
 *  the cancellation.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Execution_State_Cancelled;
/**
 *  The job is being cancelled. `error_message` should describe the reason for
 *  the cancellation.
 *
 *  Value: "CANCELLING"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Execution_State_Cancelling;
/**
 *  The job failed. `error_message` should contain the details of the failure.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Execution_State_Failed;
/**
 *  The service is preparing to execution the job.
 *
 *  Value: "PREPARING"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Execution_State_Preparing;
/**
 *  The job has been just created and processing has not yet begun.
 *
 *  Value: "QUEUED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Execution_State_Queued;
/**
 *  The job is in progress.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Execution_State_Running;
/**
 *  The job state is unspecified.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Execution_State_StateUnspecified;
/**
 *  The job completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Execution_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRAIPlatformNotebooks_ExecutionTemplate.scaleTier

/**
 *  A single worker instance. This tier is suitable for learning how to use
 *  Cloud ML, and for experimenting with new models using small datasets.
 *
 *  Value: "BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_ExecutionTemplate_ScaleTier_Basic;
/**
 *  A single worker instance with a K80 GPU.
 *
 *  Value: "BASIC_GPU"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_ExecutionTemplate_ScaleTier_BasicGpu;
/**
 *  A single worker instance with a Cloud TPU.
 *
 *  Value: "BASIC_TPU"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_ExecutionTemplate_ScaleTier_BasicTpu;
/**
 *  The CUSTOM tier is not a set tier, but rather enables you to use your own
 *  cluster specification. When you use this tier, set values to configure your
 *  processing cluster according to these guidelines: * You _must_ set
 *  `TrainingInput.masterType` to specify the type of machine to use for your
 *  master node. This is the only required setting. * You _may_ set
 *  `TrainingInput.workerCount` to specify the number of workers to use. If you
 *  specify one or more workers, you _must_ also set `TrainingInput.workerType`
 *  to specify the type of machine to use for your worker nodes. * You _may_ set
 *  `TrainingInput.parameterServerCount` to specify the number of parameter
 *  servers to use. If you specify one or more parameter servers, you _must_
 *  also set `TrainingInput.parameterServerType` to specify the type of machine
 *  to use for your parameter servers. Note that all of your workers must use
 *  the same machine type, which can be different from your parameter server
 *  type and master type. Your parameter servers must likewise use the same
 *  machine type, which can be different from your worker type and master type.
 *
 *  Value: "CUSTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_ExecutionTemplate_ScaleTier_Custom;
/**
 *  A large number of workers with many parameter servers.
 *
 *  Value: "PREMIUM_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_ExecutionTemplate_ScaleTier_Premium1;
/**
 *  Unspecified Scale Tier.
 *
 *  Value: "SCALE_TIER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_ExecutionTemplate_ScaleTier_ScaleTierUnspecified;
/**
 *  Many workers and a few parameter servers.
 *
 *  Value: "STANDARD_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_ExecutionTemplate_ScaleTier_Standard1;

// ----------------------------------------------------------------------------
// GTLRAIPlatformNotebooks_GetInstanceHealthResponse.healthState

/**
 *  The instance has not installed health monitoring agent. Applies to ACTIVE
 *  state.
 *
 *  Value: "AGENT_NOT_INSTALLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_GetInstanceHealthResponse_HealthState_AgentNotInstalled;
/**
 *  The instance health monitoring agent is not running. Applies to ACTIVE
 *  state.
 *
 *  Value: "AGENT_NOT_RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_GetInstanceHealthResponse_HealthState_AgentNotRunning;
/**
 *  The instance substate is unknown.
 *
 *  Value: "HEALTH_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_GetInstanceHealthResponse_HealthState_HealthStateUnspecified;
/**
 *  The instance is known to be in an healthy state (for example, critical
 *  daemons are running) Applies to ACTIVE state.
 *
 *  Value: "HEALTHY"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_GetInstanceHealthResponse_HealthState_Healthy;
/**
 *  The instance is known to be in an unhealthy state (for example, critical
 *  daemons are not running) Applies to ACTIVE state.
 *
 *  Value: "UNHEALTHY"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_GetInstanceHealthResponse_HealthState_Unhealthy;

// ----------------------------------------------------------------------------
// GTLRAIPlatformNotebooks_Instance.bootDiskType

/**
 *  Disk type not set.
 *
 *  Value: "DISK_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_BootDiskType_DiskTypeUnspecified;
/**
 *  Balanced persistent disk type.
 *
 *  Value: "PD_BALANCED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_BootDiskType_PdBalanced;
/**
 *  SSD persistent disk type.
 *
 *  Value: "PD_SSD"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_BootDiskType_PdSsd;
/**
 *  Standard persistent disk type.
 *
 *  Value: "PD_STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_BootDiskType_PdStandard;

// ----------------------------------------------------------------------------
// GTLRAIPlatformNotebooks_Instance.dataDiskType

/**
 *  Disk type not set.
 *
 *  Value: "DISK_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_DataDiskType_DiskTypeUnspecified;
/**
 *  Balanced persistent disk type.
 *
 *  Value: "PD_BALANCED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_DataDiskType_PdBalanced;
/**
 *  SSD persistent disk type.
 *
 *  Value: "PD_SSD"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_DataDiskType_PdSsd;
/**
 *  Standard persistent disk type.
 *
 *  Value: "PD_STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_DataDiskType_PdStandard;

// ----------------------------------------------------------------------------
// GTLRAIPlatformNotebooks_Instance.diskEncryption

/**
 *  Use customer managed encryption keys to encrypt the boot disk.
 *
 *  Value: "CMEK"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_DiskEncryption_Cmek;
/**
 *  Disk encryption is not specified.
 *
 *  Value: "DISK_ENCRYPTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_DiskEncryption_DiskEncryptionUnspecified;
/**
 *  Use Google managed encryption keys to encrypt the boot disk.
 *
 *  Value: "GMEK"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_DiskEncryption_Gmek;

// ----------------------------------------------------------------------------
// GTLRAIPlatformNotebooks_Instance.state

/**
 *  The instance is running.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_State_Active;
/**
 *  The instance is deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_State_Deleted;
/**
 *  The instance is being created.
 *
 *  Value: "INITIALIZING"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_State_Initializing;
/**
 *  The control logic is installing required frameworks and registering the
 *  instance with notebook proxy
 *
 *  Value: "PROVISIONING"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_State_Provisioning;
/**
 *  The instance is getting registered.
 *
 *  Value: "REGISTERING"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_State_Registering;
/**
 *  The control logic is starting the instance.
 *
 *  Value: "STARTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_State_Starting;
/**
 *  State is not specified.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_State_StateUnspecified;
/**
 *  The instance is stopped.
 *
 *  Value: "STOPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_State_Stopped;
/**
 *  The control logic is stopping the instance.
 *
 *  Value: "STOPPING"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_State_Stopping;
/**
 *  The instance is upgrading.
 *
 *  Value: "UPGRADING"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Instance_State_Upgrading;

// ----------------------------------------------------------------------------
// GTLRAIPlatformNotebooks_Schedule.state

/**
 *  The job is disabled by the system due to error. The user cannot directly set
 *  a job to be disabled.
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Schedule_State_Disabled;
/**
 *  The job is executing normally.
 *
 *  Value: "ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Schedule_State_Enabled;
/**
 *  The job is paused by the user. It will not execute. A user can intentionally
 *  pause the job using PauseJobRequest.
 *
 *  Value: "PAUSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Schedule_State_Paused;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Schedule_State_StateUnspecified;
/**
 *  The job state resulting from a failed CloudScheduler.UpdateJob operation. To
 *  recover a job from this state, retry CloudScheduler.UpdateJob until a
 *  successful response is received.
 *
 *  Value: "UPDATE_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_Schedule_State_UpdateFailed;

// ----------------------------------------------------------------------------
// GTLRAIPlatformNotebooks_SchedulerAcceleratorConfig.type

/**
 *  Nvidia Tesla K80 GPU.
 *
 *  Value: "NVIDIA_TESLA_K80"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SchedulerAcceleratorConfig_Type_NvidiaTeslaK80;
/**
 *  Nvidia Tesla P100 GPU.
 *
 *  Value: "NVIDIA_TESLA_P100"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SchedulerAcceleratorConfig_Type_NvidiaTeslaP100;
/**
 *  Nvidia Tesla P4 GPU.
 *
 *  Value: "NVIDIA_TESLA_P4"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SchedulerAcceleratorConfig_Type_NvidiaTeslaP4;
/**
 *  Nvidia Tesla T4 GPU.
 *
 *  Value: "NVIDIA_TESLA_T4"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SchedulerAcceleratorConfig_Type_NvidiaTeslaT4;
/**
 *  Nvidia Tesla V100 GPU.
 *
 *  Value: "NVIDIA_TESLA_V100"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SchedulerAcceleratorConfig_Type_NvidiaTeslaV100;
/**
 *  Unspecified accelerator type. Default to no GPU.
 *
 *  Value: "SCHEDULER_ACCELERATOR_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SchedulerAcceleratorConfig_Type_SchedulerAcceleratorTypeUnspecified;
/**
 *  TPU v2.
 *
 *  Value: "TPU_V2"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SchedulerAcceleratorConfig_Type_TpuV2;
/**
 *  TPU v3.
 *
 *  Value: "TPU_V3"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SchedulerAcceleratorConfig_Type_TpuV3;

// ----------------------------------------------------------------------------
// GTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest.type

/**
 *  Accelerator type is not specified.
 *
 *  Value: "ACCELERATOR_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_AcceleratorTypeUnspecified;
/**
 *  Accelerator type is Nvidia Tesla A100.
 *
 *  Value: "NVIDIA_TESLA_A100"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaA100;
/**
 *  Accelerator type is Nvidia Tesla K80.
 *
 *  Value: "NVIDIA_TESLA_K80"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaK80;
/**
 *  Accelerator type is Nvidia Tesla P100.
 *
 *  Value: "NVIDIA_TESLA_P100"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaP100;
/**
 *  Accelerator type is NVIDIA Tesla P100 Virtual Workstations.
 *
 *  Value: "NVIDIA_TESLA_P100_VWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaP100Vws;
/**
 *  Accelerator type is Nvidia Tesla P4.
 *
 *  Value: "NVIDIA_TESLA_P4"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaP4;
/**
 *  Accelerator type is NVIDIA Tesla P4 Virtual Workstations.
 *
 *  Value: "NVIDIA_TESLA_P4_VWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaP4Vws;
/**
 *  Accelerator type is Nvidia Tesla T4.
 *
 *  Value: "NVIDIA_TESLA_T4"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaT4;
/**
 *  Accelerator type is NVIDIA Tesla T4 Virtual Workstations.
 *
 *  Value: "NVIDIA_TESLA_T4_VWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaT4Vws;
/**
 *  Accelerator type is Nvidia Tesla V100.
 *
 *  Value: "NVIDIA_TESLA_V100"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaV100;
/**
 *  (Coming soon) Accelerator type is TPU V2.
 *
 *  Value: "TPU_V2"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_TpuV2;
/**
 *  (Coming soon) Accelerator type is TPU V3.
 *
 *  Value: "TPU_V3"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_TpuV3;

// ----------------------------------------------------------------------------
// GTLRAIPlatformNotebooks_UpgradeHistoryEntry.action

/**
 *  Operation is not specified.
 *
 *  Value: "ACTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_UpgradeHistoryEntry_Action_ActionUnspecified;
/**
 *  Rollback.
 *
 *  Value: "ROLLBACK"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_UpgradeHistoryEntry_Action_Rollback;
/**
 *  Upgrade.
 *
 *  Value: "UPGRADE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_UpgradeHistoryEntry_Action_Upgrade;

// ----------------------------------------------------------------------------
// GTLRAIPlatformNotebooks_UpgradeHistoryEntry.state

/**
 *  The instance upgrade is failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_UpgradeHistoryEntry_State_Failed;
/**
 *  The instance upgrade is started.
 *
 *  Value: "STARTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_UpgradeHistoryEntry_State_Started;
/**
 *  State is not specified.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_UpgradeHistoryEntry_State_StateUnspecified;
/**
 *  The instance upgrade is succeeded.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooks_UpgradeHistoryEntry_State_Succeeded;

/**
 *  Definition of a hardware accelerator. Note that not all combinations of
 *  `type` and `core_count` are valid. Check [GPUs on Compute
 *  Engine](/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are
 *  not supported.
 */
@interface GTLRAIPlatformNotebooks_AcceleratorConfig : GTLRObject

/**
 *  Count of cores of this accelerator.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *coreCount;

/**
 *  Type of this accelerator.
 *
 *  Likely values:
 *    @arg @c kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_AcceleratorTypeUnspecified
 *        Accelerator type is not specified. (Value:
 *        "ACCELERATOR_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaA100
 *        Accelerator type is Nvidia Tesla A100. (Value: "NVIDIA_TESLA_A100")
 *    @arg @c kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaK80
 *        Accelerator type is Nvidia Tesla K80. (Value: "NVIDIA_TESLA_K80")
 *    @arg @c kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaP100
 *        Accelerator type is Nvidia Tesla P100. (Value: "NVIDIA_TESLA_P100")
 *    @arg @c kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaP100Vws
 *        Accelerator type is NVIDIA Tesla P100 Virtual Workstations. (Value:
 *        "NVIDIA_TESLA_P100_VWS")
 *    @arg @c kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaP4
 *        Accelerator type is Nvidia Tesla P4. (Value: "NVIDIA_TESLA_P4")
 *    @arg @c kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaP4Vws
 *        Accelerator type is NVIDIA Tesla P4 Virtual Workstations. (Value:
 *        "NVIDIA_TESLA_P4_VWS")
 *    @arg @c kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaT4
 *        Accelerator type is Nvidia Tesla T4. (Value: "NVIDIA_TESLA_T4")
 *    @arg @c kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaT4Vws
 *        Accelerator type is NVIDIA Tesla T4 Virtual Workstations. (Value:
 *        "NVIDIA_TESLA_T4_VWS")
 *    @arg @c kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_NvidiaTeslaV100
 *        Accelerator type is Nvidia Tesla V100. (Value: "NVIDIA_TESLA_V100")
 *    @arg @c kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_TpuV2 (Coming
 *        soon) Accelerator type is TPU V2. (Value: "TPU_V2")
 *    @arg @c kGTLRAIPlatformNotebooks_AcceleratorConfig_Type_TpuV3 (Coming
 *        soon) Accelerator type is TPU V3. (Value: "TPU_V3")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Associates `members` with a `role`.
 */
@interface GTLRAIPlatformNotebooks_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the members in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_Expr *condition;

/**
 *  Specifies the identities requesting access for a Cloud Platform resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. *
 *  `user:{emailid}`: An email address that represents a specific Google
 *  account. For example, `alice\@example.com` . * `serviceAccount:{emailid}`:
 *  An email address that represents a service account. For example,
 *  `my-other-app\@appspot.gserviceaccount.com`. * `group:{emailid}`: An email
 *  address that represents a Google group. For example, `admins\@example.com`.
 *  * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. * `domain:{domain}`: The G Suite domain (primary) that
 *  represents all the users of that domain. For example, `google.com` or
 *  `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to `members`. For example, `roles/viewer`,
 *  `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRAIPlatformNotebooks_CancelOperationRequest : GTLRObject
@end


/**
 *  Definition of a container image for starting a notebook instance with the
 *  environment installed in a container.
 */
@interface GTLRAIPlatformNotebooks_ContainerImage : GTLRObject

/**
 *  Required. The path to the container image repository. For example:
 *  `gcr.io/{project_id}/{image_name}`
 */
@property(nonatomic, copy, nullable) NSString *repository;

/**
 *  The tag of the container image. If not specified, this defaults to the
 *  latest tag.
 */
@property(nonatomic, copy, nullable) NSString *tag;

@end


/**
 *  An instance-attached disk resource.
 */
@interface GTLRAIPlatformNotebooks_Disk : GTLRObject

/**
 *  Indicates whether the disk will be auto-deleted when the instance is deleted
 *  (but not when the disk is detached from the instance).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoDelete;

/**
 *  Indicates that this is a boot disk. The virtual machine will use the first
 *  partition of the disk for its root filesystem.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *boot;

/**
 *  Indicates a unique device name of your choice that is reflected into the
 *  /dev/disk/by-id/google-* tree of a Linux operating system running within the
 *  instance. This name can be used to reference the device for mounting,
 *  resizing, and so on, from within the instance. If not specified, the server
 *  chooses a default device name to apply to this disk, in the form
 *  persistent-disk-x, where x is a number assigned by Google Compute
 *  Engine.This field is only applicable for persistent disks.
 */
@property(nonatomic, copy, nullable) NSString *deviceName;

/**
 *  Indicates the size of the disk in base-2 GB.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *diskSizeGb;

/**
 *  Indicates a list of features to enable on the guest operating system.
 *  Applicable only for bootable images. Read Enabling guest operating system
 *  features to see a list of available options.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAIPlatformNotebooks_GuestOsFeature *> *guestOsFeatures;

/**
 *  A zero-based index to this disk, where 0 is reserved for the boot disk. If
 *  you have many disks attached to an instance, each disk would have a unique
 *  index number.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *index;

/**
 *  Indicates the disk interface to use for attaching this disk, which is either
 *  SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and
 *  the request will fail if you attempt to attach a persistent disk in any
 *  other format than SCSI. Local SSDs can use either NVME or SCSI. For
 *  performance characteristics of SCSI over NVMe, see Local SSD performance.
 *  Valid values: NVME SCSI
 */
@property(nonatomic, copy, nullable) NSString *interface;

/** Type of the resource. Always compute#attachedDisk for attached disks. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  A list of publicly visible licenses. Reserved for Google's use. A License
 *  represents billing and aggregate usage data for public and marketplace
 *  images.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *licenses;

/**
 *  The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If
 *  not specified, the default is to attach the disk in READ_WRITE mode. Valid
 *  values: READ_ONLY READ_WRITE
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  Indicates a valid partial or full URL to an existing Persistent Disk
 *  resource.
 */
@property(nonatomic, copy, nullable) NSString *source;

/**
 *  Indicates the type of the disk, either SCRATCH or PERSISTENT. Valid values:
 *  PERSISTENT SCRATCH
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON
 *  representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRAIPlatformNotebooks_Empty : GTLRObject
@end


/**
 *  Definition of a software environment that is used to start a notebook
 *  instance.
 */
@interface GTLRAIPlatformNotebooks_Environment : GTLRObject

/** Use a container image to start the notebook instance. */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_ContainerImage *containerImage;

/** Output only. The time at which this environment was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  A brief description of this environment.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Display name of this environment for the UI. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. Name of this environment. Format:
 *  `projects/{project_id}/locations/{location}/environments/{environment_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Path to a Bash script that automatically runs after a notebook instance
 *  fully boots up. The path must be a URL or Cloud Storage path. Example:
 *  `"gs://path-to-file/file-name"`
 */
@property(nonatomic, copy, nullable) NSString *postStartupScript;

/** Use a Compute Engine VM image to start the notebook instance. */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_VmImage *vmImage;

@end


/**
 *  The definition of a single executed notebook.
 */
@interface GTLRAIPlatformNotebooks_Execution : GTLRObject

/** Output only. Time the Execution was instantiated. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  A brief description of this execution.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. Name used for UI purposes. Name can only contain alphanumeric
 *  characters and underscores '_'.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** execute metadata including name, hardware spec, region, labels, etc. */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_ExecutionTemplate *executionTemplate;

/**
 *  Output only. The resource name of the execute. Format:
 *  `projects/{project_id}/locations/{location}/execution/{execution_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output notebook file generated by this execution */
@property(nonatomic, copy, nullable) NSString *outputNotebookFile;

/**
 *  Output only. State of the underlying AI Platform job.
 *
 *  Likely values:
 *    @arg @c kGTLRAIPlatformNotebooks_Execution_State_Cancelled The job has
 *        been cancelled. `error_message` should describe the reason for the
 *        cancellation. (Value: "CANCELLED")
 *    @arg @c kGTLRAIPlatformNotebooks_Execution_State_Cancelling The job is
 *        being cancelled. `error_message` should describe the reason for the
 *        cancellation. (Value: "CANCELLING")
 *    @arg @c kGTLRAIPlatformNotebooks_Execution_State_Failed The job failed.
 *        `error_message` should contain the details of the failure. (Value:
 *        "FAILED")
 *    @arg @c kGTLRAIPlatformNotebooks_Execution_State_Preparing The service is
 *        preparing to execution the job. (Value: "PREPARING")
 *    @arg @c kGTLRAIPlatformNotebooks_Execution_State_Queued The job has been
 *        just created and processing has not yet begun. (Value: "QUEUED")
 *    @arg @c kGTLRAIPlatformNotebooks_Execution_State_Running The job is in
 *        progress. (Value: "RUNNING")
 *    @arg @c kGTLRAIPlatformNotebooks_Execution_State_StateUnspecified The job
 *        state is unspecified. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRAIPlatformNotebooks_Execution_State_Succeeded The job
 *        completed successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. Time the Execution was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  The description a notebook execution workload.
 */
@interface GTLRAIPlatformNotebooks_ExecutionTemplate : GTLRObject

/**
 *  Configuration (count and accelerator type) for hardware running notebook
 *  execution.
 */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_SchedulerAcceleratorConfig *acceleratorConfig;

/**
 *  Container Image URI to a DLVM Example:
 *  'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found
 *  at:
 *  https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
 */
@property(nonatomic, copy, nullable) NSString *containerImageUri;

/**
 *  Path to the notebook file to execute. Must be in a Google Cloud Storage
 *  bucket. Format: gs://{project_id}/{folder}/{notebook_file_name} Ex:
 *  gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb
 */
@property(nonatomic, copy, nullable) NSString *inputNotebookFile;

/**
 *  Labels for execution. If execution is scheduled, a field included will be
 *  'nbs-scheduled'. Otherwise, it is an immediate execution, and an included
 *  field will be 'nbs-immediate'. Use fields to efficiently index between
 *  various types of executions.
 */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_ExecutionTemplate_Labels *labels;

/**
 *  Specifies the type of virtual machine to use for your training job's master
 *  worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You
 *  can use certain Compute Engine machine types directly in this field. The
 *  following types are supported: - `n1-standard-4` - `n1-standard-8` -
 *  `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` -
 *  `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` -
 *  `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` -
 *  `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can
 *  use the following legacy machine types: - `standard` - `large_model` -
 *  `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` -
 *  `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` -
 *  `complex_model_m_p100` - `standard_v100` - `large_model_v100` -
 *  `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use
 *  a TPU for training, specify `cloud_tpu` in this field. Learn more about the
 *  [special configuration options for training with TPU.
 */
@property(nonatomic, copy, nullable) NSString *masterType;

/**
 *  Path to the notebook folder to write to. Must be in a Google Cloud Storage
 *  bucket path. Format: gs://{project_id}/{folder} Ex:
 *  gs://notebook_user/scheduled_notebooks
 */
@property(nonatomic, copy, nullable) NSString *outputNotebookFolder;

/** Parameters used within the 'input_notebook_file' notebook. */
@property(nonatomic, copy, nullable) NSString *parameters;

/**
 *  Parameters to be overridden in the notebook during execution. Ref
 *  https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to
 *  specifying parameters in the input notebook and pass them here in an YAML
 *  file. Ex:
 *  gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml
 */
@property(nonatomic, copy, nullable) NSString *paramsYamlFile;

/**
 *  Required. Scale tier of the hardware used for notebook execution.
 *
 *  Likely values:
 *    @arg @c kGTLRAIPlatformNotebooks_ExecutionTemplate_ScaleTier_Basic A
 *        single worker instance. This tier is suitable for learning how to use
 *        Cloud ML, and for experimenting with new models using small datasets.
 *        (Value: "BASIC")
 *    @arg @c kGTLRAIPlatformNotebooks_ExecutionTemplate_ScaleTier_BasicGpu A
 *        single worker instance with a K80 GPU. (Value: "BASIC_GPU")
 *    @arg @c kGTLRAIPlatformNotebooks_ExecutionTemplate_ScaleTier_BasicTpu A
 *        single worker instance with a Cloud TPU. (Value: "BASIC_TPU")
 *    @arg @c kGTLRAIPlatformNotebooks_ExecutionTemplate_ScaleTier_Custom The
 *        CUSTOM tier is not a set tier, but rather enables you to use your own
 *        cluster specification. When you use this tier, set values to configure
 *        your processing cluster according to these guidelines: * You _must_
 *        set `TrainingInput.masterType` to specify the type of machine to use
 *        for your master node. This is the only required setting. * You _may_
 *        set `TrainingInput.workerCount` to specify the number of workers to
 *        use. If you specify one or more workers, you _must_ also set
 *        `TrainingInput.workerType` to specify the type of machine to use for
 *        your worker nodes. * You _may_ set
 *        `TrainingInput.parameterServerCount` to specify the number of
 *        parameter servers to use. If you specify one or more parameter
 *        servers, you _must_ also set `TrainingInput.parameterServerType` to
 *        specify the type of machine to use for your parameter servers. Note
 *        that all of your workers must use the same machine type, which can be
 *        different from your parameter server type and master type. Your
 *        parameter servers must likewise use the same machine type, which can
 *        be different from your worker type and master type. (Value: "CUSTOM")
 *    @arg @c kGTLRAIPlatformNotebooks_ExecutionTemplate_ScaleTier_Premium1 A
 *        large number of workers with many parameter servers. (Value:
 *        "PREMIUM_1")
 *    @arg @c kGTLRAIPlatformNotebooks_ExecutionTemplate_ScaleTier_ScaleTierUnspecified
 *        Unspecified Scale Tier. (Value: "SCALE_TIER_UNSPECIFIED")
 *    @arg @c kGTLRAIPlatformNotebooks_ExecutionTemplate_ScaleTier_Standard1
 *        Many workers and a few parameter servers. (Value: "STANDARD_1")
 */
@property(nonatomic, copy, nullable) NSString *scaleTier;

@end


/**
 *  Labels for execution. If execution is scheduled, a field included will be
 *  'nbs-scheduled'. Otherwise, it is an immediate execution, and an included
 *  field will be 'nbs-immediate'. Use fields to efficiently index between
 *  various types of executions.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRAIPlatformNotebooks_ExecutionTemplate_Labels : GTLRObject
@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRAIPlatformNotebooks_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Response for checking if a notebook instance is healthy.
 */
@interface GTLRAIPlatformNotebooks_GetInstanceHealthResponse : GTLRObject

/**
 *  Output only. Additional information about instance health. Example:
 *  healthInfo": { "docker_proxy_agent_status": "1", "docker_status": "1",
 *  "jupyterlab_api_status": "-1", "jupyterlab_status": "-1", "updated":
 *  "2020-10-18 09:40:03.573409" }
 */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_GetInstanceHealthResponse_HealthInfo *healthInfo;

/**
 *  Output only. Runtime health_state.
 *
 *  Likely values:
 *    @arg @c kGTLRAIPlatformNotebooks_GetInstanceHealthResponse_HealthState_AgentNotInstalled
 *        The instance has not installed health monitoring agent. Applies to
 *        ACTIVE state. (Value: "AGENT_NOT_INSTALLED")
 *    @arg @c kGTLRAIPlatformNotebooks_GetInstanceHealthResponse_HealthState_AgentNotRunning
 *        The instance health monitoring agent is not running. Applies to ACTIVE
 *        state. (Value: "AGENT_NOT_RUNNING")
 *    @arg @c kGTLRAIPlatformNotebooks_GetInstanceHealthResponse_HealthState_HealthStateUnspecified
 *        The instance substate is unknown. (Value: "HEALTH_STATE_UNSPECIFIED")
 *    @arg @c kGTLRAIPlatformNotebooks_GetInstanceHealthResponse_HealthState_Healthy
 *        The instance is known to be in an healthy state (for example, critical
 *        daemons are running) Applies to ACTIVE state. (Value: "HEALTHY")
 *    @arg @c kGTLRAIPlatformNotebooks_GetInstanceHealthResponse_HealthState_Unhealthy
 *        The instance is known to be in an unhealthy state (for example,
 *        critical daemons are not running) Applies to ACTIVE state. (Value:
 *        "UNHEALTHY")
 */
@property(nonatomic, copy, nullable) NSString *healthState;

@end


/**
 *  Output only. Additional information about instance health. Example:
 *  healthInfo": { "docker_proxy_agent_status": "1", "docker_status": "1",
 *  "jupyterlab_api_status": "-1", "jupyterlab_status": "-1", "updated":
 *  "2020-10-18 09:40:03.573409" }
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRAIPlatformNotebooks_GetInstanceHealthResponse_HealthInfo : GTLRObject
@end


/**
 *  Guest OS features for boot disk.
 */
@interface GTLRAIPlatformNotebooks_GuestOsFeature : GTLRObject

/**
 *  The ID of a supported feature. Read Enabling guest operating system features
 *  to see a list of available options. Valid values: FEATURE_TYPE_UNSPECIFIED
 *  MULTI_IP_SUBNET SECURE_BOOT UEFI_COMPATIBLE VIRTIO_SCSI_MULTIQUEUE WINDOWS
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The definition of a notebook instance.
 */
@interface GTLRAIPlatformNotebooks_Instance : GTLRObject

/**
 *  The hardware accelerator used on this instance. If you use accelerators,
 *  make sure that your configuration has [enough vCPUs and memory to support
 *  the `machine_type` you have selected](/compute/docs/gpus/#gpus-list).
 */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_AcceleratorConfig *acceleratorConfig;

/**
 *  Input only. The size of the boot disk in GB attached to this instance, up to
 *  a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB. If
 *  not specified, this defaults to 100.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bootDiskSizeGb;

/**
 *  Input only. The type of the boot disk attached to this instance, defaults to
 *  standard persistent disk (`PD_STANDARD`).
 *
 *  Likely values:
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_BootDiskType_DiskTypeUnspecified
 *        Disk type not set. (Value: "DISK_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_BootDiskType_PdBalanced Balanced
 *        persistent disk type. (Value: "PD_BALANCED")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_BootDiskType_PdSsd SSD
 *        persistent disk type. (Value: "PD_SSD")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_BootDiskType_PdStandard Standard
 *        persistent disk type. (Value: "PD_STANDARD")
 */
@property(nonatomic, copy, nullable) NSString *bootDiskType;

/** Use a container image to start the notebook instance. */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_ContainerImage *containerImage;

/** Output only. Instance creation time. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Specify a custom Cloud Storage path where the GPU driver is stored. If not
 *  specified, we'll automatically choose from official GPU drivers.
 */
@property(nonatomic, copy, nullable) NSString *customGpuDriverPath;

/**
 *  Input only. The size of the data disk in GB attached to this instance, up to
 *  a maximum of 64000 GB (64 TB). You can choose the size of the data disk
 *  based on how big your notebooks and data are. If not specified, this
 *  defaults to 100.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dataDiskSizeGb;

/**
 *  Input only. The type of the data disk attached to this instance, defaults to
 *  standard persistent disk (`PD_STANDARD`).
 *
 *  Likely values:
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_DataDiskType_DiskTypeUnspecified
 *        Disk type not set. (Value: "DISK_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_DataDiskType_PdBalanced Balanced
 *        persistent disk type. (Value: "PD_BALANCED")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_DataDiskType_PdSsd SSD
 *        persistent disk type. (Value: "PD_SSD")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_DataDiskType_PdStandard Standard
 *        persistent disk type. (Value: "PD_STANDARD")
 */
@property(nonatomic, copy, nullable) NSString *dataDiskType;

/**
 *  Input only. Disk encryption method used on the boot and data disks, defaults
 *  to GMEK.
 *
 *  Likely values:
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_DiskEncryption_Cmek Use customer
 *        managed encryption keys to encrypt the boot disk. (Value: "CMEK")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_DiskEncryption_DiskEncryptionUnspecified
 *        Disk encryption is not specified. (Value:
 *        "DISK_ENCRYPTION_UNSPECIFIED")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_DiskEncryption_Gmek Use Google
 *        managed encryption keys to encrypt the boot disk. (Value: "GMEK")
 */
@property(nonatomic, copy, nullable) NSString *diskEncryption;

/** Output only. Attached disks to notebook instance. */
@property(nonatomic, strong, nullable) NSArray<GTLRAIPlatformNotebooks_Disk *> *disks;

/**
 *  Whether the end user authorizes Google Cloud to install GPU driver on this
 *  instance. If this field is empty or set to false, the GPU driver won't be
 *  installed. Only applicable to instances with GPUs.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *installGpuDriver;

/**
 *  Input only. The owner of this instance after creation. Format:
 *  `alias\@example.com` Currently supports one owner only. If not specified,
 *  all of the service account users of your VM instance's service account can
 *  use the instance.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *instanceOwners;

/**
 *  Input only. The KMS key used to encrypt the disks, only applicable if
 *  disk_encryption is CMEK. Format:
 *  `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}`
 *  Learn more about [using your own encryption keys](/kms/docs/quickstart).
 */
@property(nonatomic, copy, nullable) NSString *kmsKey;

/**
 *  Labels to apply to this instance. These can be later modified by the
 *  setLabels method.
 */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_Instance_Labels *labels;

/**
 *  Required. The [Compute Engine machine type](/compute/docs/machine-types) of
 *  this instance.
 */
@property(nonatomic, copy, nullable) NSString *machineType;

/** Custom metadata to apply to this instance. */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_Instance_Metadata *metadata;

/**
 *  Output only. The name of this notebook instance. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The name of the VPC that this instance is in. Format:
 *  `projects/{project_id}/global/networks/{network_id}`
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  If true, the notebook instance will not register with the proxy.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *noProxyAccess;

/**
 *  If true, no public IP will be assigned to this instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *noPublicIp;

/**
 *  Input only. If true, the data disk will not be auto deleted when deleting
 *  the instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *noRemoveDataDisk;

/**
 *  Path to a Bash script that automatically runs after a notebook instance
 *  fully boots up. The path must be a URL or Cloud Storage path
 *  (gs://path-to-file/file-name).
 */
@property(nonatomic, copy, nullable) NSString *postStartupScript;

/**
 *  Output only. The proxy endpoint that is used to access the Jupyter notebook.
 */
@property(nonatomic, copy, nullable) NSString *proxyUri;

/**
 *  The service account on this instance, giving access to other Google Cloud
 *  services. You can use any service account within the same project, but you
 *  must have the service account user permission to use the instance. If not
 *  specified, the [Compute Engine default service
 *  account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account)
 *  is used.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Optional. The URIs of service account scopes to be included in Compute
 *  Engine instances. If not specified, the following
 *  [scopes](https://cloud.google.com/compute/docs/access/service-accounts#accesscopesiam)
 *  are defined: - https://www.googleapis.com/auth/cloud-platform -
 *  https://www.googleapis.com/auth/userinfo.email If not using default scopes,
 *  you need at least: https://www.googleapis.com/auth/compute
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *serviceAccountScopes;

/**
 *  Optional. Shielded VM configuration. [Images using supported Shielded VM
 *  features]
 *  (https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
 */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_ShieldedInstanceConfig *shieldedInstanceConfig;

/**
 *  Output only. The state of this instance.
 *
 *  Likely values:
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_State_Active The instance is
 *        running. (Value: "ACTIVE")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_State_Deleted The instance is
 *        deleted. (Value: "DELETED")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_State_Initializing The instance
 *        is being created. (Value: "INITIALIZING")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_State_Provisioning The control
 *        logic is installing required frameworks and registering the instance
 *        with notebook proxy (Value: "PROVISIONING")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_State_Registering The instance
 *        is getting registered. (Value: "REGISTERING")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_State_Starting The control logic
 *        is starting the instance. (Value: "STARTING")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_State_StateUnspecified State is
 *        not specified. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_State_Stopped The instance is
 *        stopped. (Value: "STOPPED")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_State_Stopping The control logic
 *        is stopping the instance. (Value: "STOPPING")
 *    @arg @c kGTLRAIPlatformNotebooks_Instance_State_Upgrading The instance is
 *        upgrading. (Value: "UPGRADING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  The name of the subnet that this instance is in. Format:
 *  `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
 */
@property(nonatomic, copy, nullable) NSString *subnet;

/**
 *  Optional. The Compute Engine tags to add to runtime (see [Tagging
 *  instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

/** Output only. Instance update time. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** The upgrade history of this instance. */
@property(nonatomic, strong, nullable) NSArray<GTLRAIPlatformNotebooks_UpgradeHistoryEntry *> *upgradeHistory;

/** Use a Compute Engine VM image to start the notebook instance. */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_VmImage *vmImage;

@end


/**
 *  Labels to apply to this instance. These can be later modified by the
 *  setLabels method.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRAIPlatformNotebooks_Instance_Labels : GTLRObject
@end


/**
 *  Custom metadata to apply to this instance.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRAIPlatformNotebooks_Instance_Metadata : GTLRObject
@end


/**
 *  Response for checking if a notebook instance is upgradeable.
 */
@interface GTLRAIPlatformNotebooks_IsInstanceUpgradeableResponse : GTLRObject

/**
 *  If an instance is upgradeable.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *upgradeable;

/** Additional information about upgrade. */
@property(nonatomic, copy, nullable) NSString *upgradeInfo;

/**
 *  The version this instance will be upgraded to if calling the upgrade
 *  endpoint. This field will only be populated if field upgradeable is true.
 */
@property(nonatomic, copy, nullable) NSString *upgradeVersion;

@end


/**
 *  Response for listing environments.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "environments" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAIPlatformNotebooks_ListEnvironmentsResponse : GTLRCollectionObject

/**
 *  A list of returned environments.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAIPlatformNotebooks_Environment *> *environments;

/**
 *  A page token that can be used to continue listing from the last result in
 *  the next list call.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response for listing scheduled notebook executions
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "executions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAIPlatformNotebooks_ListExecutionsResponse : GTLRCollectionObject

/**
 *  A list of returned instances.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAIPlatformNotebooks_Execution *> *executions;

/**
 *  Page token that can be used to continue listing from the last result in the
 *  next list call.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Executions IDs that could not be reached. For example,
 *  ['projects/{project_id}/location/{location}/executions/imagenet_test1',
 *  'projects/{project_id}/location/{location}/executions/classifier_train1'].
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response for listing notebook instances.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "instances" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAIPlatformNotebooks_ListInstancesResponse : GTLRCollectionObject

/**
 *  A list of returned instances.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAIPlatformNotebooks_Instance *> *instances;

/**
 *  Page token that can be used to continue listing from the last result in the
 *  next list call.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Locations that could not be reached. For example, ['us-west1-a',
 *  'us-central1-b']. A ListInstancesResponse will only contain either instances
 *  or unreachables,
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAIPlatformNotebooks_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAIPlatformNotebooks_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAIPlatformNotebooks_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAIPlatformNotebooks_Operation *> *operations;

@end


/**
 *  Response for listing scheduled notebook job.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "schedules" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAIPlatformNotebooks_ListSchedulesResponse : GTLRCollectionObject

/**
 *  Page token that can be used to continue listing from the last result in the
 *  next list call.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of returned instances.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAIPlatformNotebooks_Schedule *> *schedules;

/**
 *  Schedules that could not be reached. For example,
 *  ['projects/{project_id}/location/{location}/schedules/monthly_digest',
 *  'projects/{project_id}/location/{location}/schedules/weekly_sentiment'].
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRAIPlatformNotebooks_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRAIPlatformNotebooks_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRAIPlatformNotebooks_Location_Metadata : GTLRObject
@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRAIPlatformNotebooks_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRAIPlatformNotebooks_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRAIPlatformNotebooks_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRAIPlatformNotebooks_OperationMetadata : GTLRObject

/** API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** API endpoint name of this operation. */
@property(nonatomic, copy, nullable) NSString *endpoint;

/** The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Identifies whether the user has requested cancellation of the operation.
 *  Operations that have successfully been cancelled have Operation.error value
 *  with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/** Server-defined resource path for the target of the operation. */
@property(nonatomic, copy, nullable) NSString *target;

/** Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members` to a single `role`.
 *  Members can be user accounts, service accounts, Google groups, and domains
 *  (such as G Suite). A `role` is a named list of permissions; each `role` can
 *  be an IAM predefined role or a user-created custom role. For some types of
 *  Google Cloud resources, a `binding` can also specify a `condition`, which is
 *  a logical expression that allows access to a resource only if the expression
 *  evaluates to `true`. A condition can add constraints based on attributes of
 *  the request, the resource, or both. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= -
 *  version: 3 For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRAIPlatformNotebooks_Policy : GTLRObject

/**
 *  Associates a list of `members` to a `role`. Optionally, may specify a
 *  `condition` that determines how and when the `bindings` are applied. Each of
 *  the `bindings` must contain at least one member.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAIPlatformNotebooks_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Request for registering a notebook instance.
 */
@interface GTLRAIPlatformNotebooks_RegisterInstanceRequest : GTLRObject

/**
 *  Required. User defined unique ID of this instance. The `instance_id` must be
 *  1 to 63 characters long and contain only lowercase letters, numeric
 *  characters, and dashes. The first character must be a lowercase letter and
 *  the last character cannot be a dash.
 */
@property(nonatomic, copy, nullable) NSString *instanceId;

@end


/**
 *  Request for notebook instances to report information to Notebooks API.
 */
@interface GTLRAIPlatformNotebooks_ReportInstanceInfoRequest : GTLRObject

/**
 *  The metadata reported to Notebooks API. This will be merged to the instance
 *  metadata store
 */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_ReportInstanceInfoRequest_Metadata *metadata;

/**
 *  Required. The VM hardware token for authenticating the VM.
 *  https://cloud.google.com/compute/docs/instances/verifying-instance-identity
 */
@property(nonatomic, copy, nullable) NSString *vmId;

@end


/**
 *  The metadata reported to Notebooks API. This will be merged to the instance
 *  metadata store
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRAIPlatformNotebooks_ReportInstanceInfoRequest_Metadata : GTLRObject
@end


/**
 *  Request for reseting a notebook instance
 */
@interface GTLRAIPlatformNotebooks_ResetInstanceRequest : GTLRObject
@end


/**
 *  The definition of a schedule.
 */
@interface GTLRAIPlatformNotebooks_Schedule : GTLRObject

/** Output only. Time the schedule was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Cron-tab formatted schedule by which the job will execute Format: minute,
 *  hour, day of month, month, day of week e.g. 0 0 * * WED = every Wednesday
 *  More examples: https://crontab.guru/examples.html
 */
@property(nonatomic, copy, nullable) NSString *cronSchedule;

/**
 *  A brief description of this environment.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. Display name used for UI purposes. Name can only contain
 *  alphanumeric characters, hyphens ‘-’, and underscores ‘_’.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Notebook Execution Template corresponding to this schedule. */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_ExecutionTemplate *executionTemplate;

/**
 *  Output only. The name of this schedule. Format:
 *  `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The most recent execution names triggered from this schedule
 *  and their corresponding states.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAIPlatformNotebooks_Execution *> *recentExecutions;

/**
 *  state
 *
 *  Likely values:
 *    @arg @c kGTLRAIPlatformNotebooks_Schedule_State_Disabled The job is
 *        disabled by the system due to error. The user cannot directly set a
 *        job to be disabled. (Value: "DISABLED")
 *    @arg @c kGTLRAIPlatformNotebooks_Schedule_State_Enabled The job is
 *        executing normally. (Value: "ENABLED")
 *    @arg @c kGTLRAIPlatformNotebooks_Schedule_State_Paused The job is paused
 *        by the user. It will not execute. A user can intentionally pause the
 *        job using PauseJobRequest. (Value: "PAUSED")
 *    @arg @c kGTLRAIPlatformNotebooks_Schedule_State_StateUnspecified
 *        Unspecified state. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRAIPlatformNotebooks_Schedule_State_UpdateFailed The job state
 *        resulting from a failed CloudScheduler.UpdateJob operation. To recover
 *        a job from this state, retry CloudScheduler.UpdateJob until a
 *        successful response is received. (Value: "UPDATE_FAILED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Timezone on which the cron_schedule. The value of this field must be a time
 *  zone name from the tz database. TZ Database:
 *  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some
 *  time zones include a provision for daylight savings time. The rules for
 *  daylight saving time are determined by the chosen tz. For UTC use the string
 *  "utc". If a time zone is not specified, the default will be in UTC (also
 *  known as GMT).
 */
@property(nonatomic, copy, nullable) NSString *timeZone;

/** Output only. Time the schedule was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Definition of a hardware accelerator. Note that not all combinations of
 *  `type` and `core_count` are valid. Check GPUs on Compute Engine to find a
 *  valid combination. TPUs are not supported.
 */
@interface GTLRAIPlatformNotebooks_SchedulerAcceleratorConfig : GTLRObject

/**
 *  Count of cores of this accelerator.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *coreCount;

/**
 *  Type of this accelerator.
 *
 *  Likely values:
 *    @arg @c kGTLRAIPlatformNotebooks_SchedulerAcceleratorConfig_Type_NvidiaTeslaK80
 *        Nvidia Tesla K80 GPU. (Value: "NVIDIA_TESLA_K80")
 *    @arg @c kGTLRAIPlatformNotebooks_SchedulerAcceleratorConfig_Type_NvidiaTeslaP100
 *        Nvidia Tesla P100 GPU. (Value: "NVIDIA_TESLA_P100")
 *    @arg @c kGTLRAIPlatformNotebooks_SchedulerAcceleratorConfig_Type_NvidiaTeslaP4
 *        Nvidia Tesla P4 GPU. (Value: "NVIDIA_TESLA_P4")
 *    @arg @c kGTLRAIPlatformNotebooks_SchedulerAcceleratorConfig_Type_NvidiaTeslaT4
 *        Nvidia Tesla T4 GPU. (Value: "NVIDIA_TESLA_T4")
 *    @arg @c kGTLRAIPlatformNotebooks_SchedulerAcceleratorConfig_Type_NvidiaTeslaV100
 *        Nvidia Tesla V100 GPU. (Value: "NVIDIA_TESLA_V100")
 *    @arg @c kGTLRAIPlatformNotebooks_SchedulerAcceleratorConfig_Type_SchedulerAcceleratorTypeUnspecified
 *        Unspecified accelerator type. Default to no GPU. (Value:
 *        "SCHEDULER_ACCELERATOR_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRAIPlatformNotebooks_SchedulerAcceleratorConfig_Type_TpuV2 TPU
 *        v2. (Value: "TPU_V2")
 *    @arg @c kGTLRAIPlatformNotebooks_SchedulerAcceleratorConfig_Type_TpuV3 TPU
 *        v3. (Value: "TPU_V3")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRAIPlatformNotebooks_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Cloud Platform services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_Policy *policy;

@end


/**
 *  Request for setting instance accelerator.
 */
@interface GTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest : GTLRObject

/**
 *  Required. Count of cores of this accelerator. Note that not all combinations
 *  of `type` and `core_count` are valid. Check [GPUs on Compute
 *  Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a
 *  valid combination. TPUs are not supported.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *coreCount;

/**
 *  Required. Type of this accelerator.
 *
 *  Likely values:
 *    @arg @c kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_AcceleratorTypeUnspecified
 *        Accelerator type is not specified. (Value:
 *        "ACCELERATOR_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaA100
 *        Accelerator type is Nvidia Tesla A100. (Value: "NVIDIA_TESLA_A100")
 *    @arg @c kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaK80
 *        Accelerator type is Nvidia Tesla K80. (Value: "NVIDIA_TESLA_K80")
 *    @arg @c kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaP100
 *        Accelerator type is Nvidia Tesla P100. (Value: "NVIDIA_TESLA_P100")
 *    @arg @c kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaP100Vws
 *        Accelerator type is NVIDIA Tesla P100 Virtual Workstations. (Value:
 *        "NVIDIA_TESLA_P100_VWS")
 *    @arg @c kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaP4
 *        Accelerator type is Nvidia Tesla P4. (Value: "NVIDIA_TESLA_P4")
 *    @arg @c kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaP4Vws
 *        Accelerator type is NVIDIA Tesla P4 Virtual Workstations. (Value:
 *        "NVIDIA_TESLA_P4_VWS")
 *    @arg @c kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaT4
 *        Accelerator type is Nvidia Tesla T4. (Value: "NVIDIA_TESLA_T4")
 *    @arg @c kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaT4Vws
 *        Accelerator type is NVIDIA Tesla T4 Virtual Workstations. (Value:
 *        "NVIDIA_TESLA_T4_VWS")
 *    @arg @c kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_NvidiaTeslaV100
 *        Accelerator type is Nvidia Tesla V100. (Value: "NVIDIA_TESLA_V100")
 *    @arg @c kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_TpuV2
 *        (Coming soon) Accelerator type is TPU V2. (Value: "TPU_V2")
 *    @arg @c kGTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest_Type_TpuV3
 *        (Coming soon) Accelerator type is TPU V3. (Value: "TPU_V3")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Request for setting instance labels.
 */
@interface GTLRAIPlatformNotebooks_SetInstanceLabelsRequest : GTLRObject

/**
 *  Labels to apply to this instance. These can be later modified by the
 *  setLabels method
 */
@property(nonatomic, strong, nullable) GTLRAIPlatformNotebooks_SetInstanceLabelsRequest_Labels *labels;

@end


/**
 *  Labels to apply to this instance. These can be later modified by the
 *  setLabels method
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRAIPlatformNotebooks_SetInstanceLabelsRequest_Labels : GTLRObject
@end


/**
 *  Request for setting instance machine type.
 */
@interface GTLRAIPlatformNotebooks_SetInstanceMachineTypeRequest : GTLRObject

/**
 *  Required. The [Compute Engine machine
 *  type](https://cloud.google.com/compute/docs/machine-types).
 */
@property(nonatomic, copy, nullable) NSString *machineType;

@end


/**
 *  A set of Shielded Instance options. Check [Images using supported Shielded
 *  VM features] Not all combinations are valid.
 */
@interface GTLRAIPlatformNotebooks_ShieldedInstanceConfig : GTLRObject

/**
 *  Defines whether the instance has integrity monitoring enabled. Enables
 *  monitoring and attestation of the boot integrity of the instance. The
 *  attestation is performed against the integrity policy baseline. This
 *  baseline is initially derived from the implicitly trusted boot image when
 *  the instance is created. Enabled by default.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableIntegrityMonitoring;

/**
 *  Defines whether the instance has Secure Boot enabled. Secure Boot helps
 *  ensure that the system only runs authentic software by verifying the digital
 *  signature of all boot components, and halting the boot process if signature
 *  verification fails. Disabled by default.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableSecureBoot;

/**
 *  Defines whether the instance has the vTPM enabled. Enabled by default.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableVtpm;

@end


/**
 *  Request for starting a notebook instance
 */
@interface GTLRAIPlatformNotebooks_StartInstanceRequest : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRAIPlatformNotebooks_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAIPlatformNotebooks_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRAIPlatformNotebooks_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRAIPlatformNotebooks_Status_Details_Item : GTLRObject
@end


/**
 *  Request for stopping a notebook instance
 */
@interface GTLRAIPlatformNotebooks_StopInstanceRequest : GTLRObject
@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRAIPlatformNotebooks_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as '*' or 'storage.*') are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRAIPlatformNotebooks_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Request for created scheduled notebooks
 */
@interface GTLRAIPlatformNotebooks_TriggerScheduleRequest : GTLRObject
@end


/**
 *  The entry of VM image upgrade history.
 */
@interface GTLRAIPlatformNotebooks_UpgradeHistoryEntry : GTLRObject

/**
 *  Action. Rolloback or Upgrade.
 *
 *  Likely values:
 *    @arg @c kGTLRAIPlatformNotebooks_UpgradeHistoryEntry_Action_ActionUnspecified
 *        Operation is not specified. (Value: "ACTION_UNSPECIFIED")
 *    @arg @c kGTLRAIPlatformNotebooks_UpgradeHistoryEntry_Action_Rollback
 *        Rollback. (Value: "ROLLBACK")
 *    @arg @c kGTLRAIPlatformNotebooks_UpgradeHistoryEntry_Action_Upgrade
 *        Upgrade. (Value: "UPGRADE")
 */
@property(nonatomic, copy, nullable) NSString *action;

/** The container image before this instance upgrade. */
@property(nonatomic, copy, nullable) NSString *containerImage;

/** The time that this instance upgrade history entry is created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The framework of this notebook instance. */
@property(nonatomic, copy, nullable) NSString *framework;

/** The snapshot of the boot disk of this notebook instance before upgrade. */
@property(nonatomic, copy, nullable) NSString *snapshot;

/**
 *  The state of this instance upgrade history entry.
 *
 *  Likely values:
 *    @arg @c kGTLRAIPlatformNotebooks_UpgradeHistoryEntry_State_Failed The
 *        instance upgrade is failed. (Value: "FAILED")
 *    @arg @c kGTLRAIPlatformNotebooks_UpgradeHistoryEntry_State_Started The
 *        instance upgrade is started. (Value: "STARTED")
 *    @arg @c kGTLRAIPlatformNotebooks_UpgradeHistoryEntry_State_StateUnspecified
 *        State is not specified. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRAIPlatformNotebooks_UpgradeHistoryEntry_State_Succeeded The
 *        instance upgrade is succeeded. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Target VM Image. Format: ainotebooks-vm/project/image-name/name. */
@property(nonatomic, copy, nullable) NSString *targetImage;

/** Target VM Version, like m63. */
@property(nonatomic, copy, nullable) NSString *targetVersion;

/** The version of the notebook instance before this upgrade. */
@property(nonatomic, copy, nullable) NSString *version;

/** The VM image before this instance upgrade. */
@property(nonatomic, copy, nullable) NSString *vmImage;

@end


/**
 *  Request for upgrading a notebook instance from within the VM
 */
@interface GTLRAIPlatformNotebooks_UpgradeInstanceInternalRequest : GTLRObject

/**
 *  Required. The VM hardware token for authenticating the VM.
 *  https://cloud.google.com/compute/docs/instances/verifying-instance-identity
 */
@property(nonatomic, copy, nullable) NSString *vmId;

@end


/**
 *  Request for upgrading a notebook instance
 */
@interface GTLRAIPlatformNotebooks_UpgradeInstanceRequest : GTLRObject
@end


/**
 *  Definition of a custom Compute Engine virtual machine image for starting a
 *  notebook instance with the environment installed directly on the VM.
 */
@interface GTLRAIPlatformNotebooks_VmImage : GTLRObject

/**
 *  Use this VM image family to find the image; the newest image in this family
 *  will be used.
 */
@property(nonatomic, copy, nullable) NSString *imageFamily;

/** Use VM image name to find the image. */
@property(nonatomic, copy, nullable) NSString *imageName;

/**
 *  Required. The name of the Google Cloud project that this VM image belongs
 *  to. Format: `projects/{project_id}`
 */
@property(nonatomic, copy, nullable) NSString *project;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
