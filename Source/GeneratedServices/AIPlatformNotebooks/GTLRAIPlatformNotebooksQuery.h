// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Notebooks API (notebooks/v1)
// Description:
//   AI Platform Notebooks API is used to manage notebook resources in Google
//   Cloud.
// Documentation:
//   https://cloud.google.com/ai-platform/notebooks/docs/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAIPlatformNotebooks_CancelOperationRequest;
@class GTLRAIPlatformNotebooks_Environment;
@class GTLRAIPlatformNotebooks_Instance;
@class GTLRAIPlatformNotebooks_RegisterInstanceRequest;
@class GTLRAIPlatformNotebooks_ReportInstanceInfoRequest;
@class GTLRAIPlatformNotebooks_ResetInstanceRequest;
@class GTLRAIPlatformNotebooks_SetIamPolicyRequest;
@class GTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest;
@class GTLRAIPlatformNotebooks_SetInstanceLabelsRequest;
@class GTLRAIPlatformNotebooks_SetInstanceMachineTypeRequest;
@class GTLRAIPlatformNotebooks_StartInstanceRequest;
@class GTLRAIPlatformNotebooks_StopInstanceRequest;
@class GTLRAIPlatformNotebooks_TestIamPermissionsRequest;
@class GTLRAIPlatformNotebooks_UpgradeInstanceInternalRequest;
@class GTLRAIPlatformNotebooks_UpgradeInstanceRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other AI Platform Notebooks query classes.
 */
@interface GTLRAIPlatformNotebooksQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new Environment.
 *
 *  Method: notebooks.projects.locations.environments.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsCreate : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsEnvironmentsCreateWithObject:parent:]

/**
 *  Required. User-defined unique ID of this environment. The `environment_id`
 *  must be 1 to 63 characters long and contain only lowercase letters, numeric
 *  characters, and dashes. The first character must be a lowercase letter and
 *  the last character cannot be a dash.
 */
@property(nonatomic, copy, nullable) NSString *environmentId;

/** Required. Format: `projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Creates a new Environment.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_Environment to include in the
 *    query.
 *  @param parent Required. Format: `projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsCreate
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_Environment *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Environment.
 *
 *  Method: notebooks.projects.locations.environments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsDelete : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsEnvironmentsDeleteWithname:]

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/environments/{environment_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Deletes a single Environment.
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/environments/{environment_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single Environment.
 *
 *  Method: notebooks.projects.locations.environments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsGet : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsEnvironmentsGetWithname:]

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/environments/{environment_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Environment.
 *
 *  Gets details of a single Environment.
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/environments/{environment_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists environments in a project.
 *
 *  Method: notebooks.projects.locations.environments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsList : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsEnvironmentsListWithparent:]

/** Maximum return size of the list call. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A previous returned page token that can be used to continue listing from the
 *  last result.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Format: `projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_ListEnvironmentsResponse.
 *
 *  Lists environments in a project.
 *
 *  @param parent Required. Format: `projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets information about a location.
 *
 *  Method: notebooks.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsGet : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new Instance in a given project and location.
 *
 *  Method: notebooks.projects.locations.instances.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesCreate : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesCreateWithObject:parent:]

/** Required. User-defined unique ID of this instance. */
@property(nonatomic, copy, nullable) NSString *instanceId;

/** Required. Format: `parent=projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Creates a new Instance in a given project and location.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_Instance to include in the
 *    query.
 *  @param parent Required. Format:
 *    `parent=projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesCreate
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_Instance *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Instance.
 *
 *  Method: notebooks.projects.locations.instances.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesDelete : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesDeleteWithname:]

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Deletes a single Instance.
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single Instance.
 *
 *  Method: notebooks.projects.locations.instances.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGet : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesGetWithname:]

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Instance.
 *
 *  Gets details of a single Instance.
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: notebooks.projects.locations.instances.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGetIamPolicy : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesGetIamPolicyWithresource:]

/**
 *  Optional. The policy format version to be returned. Valid values are 0, 1,
 *  and 3. Requests specifying an invalid value will be rejected. Requests for
 *  policies with any conditional bindings must specify version 3. Policies
 *  without any conditional bindings may specify any valid value or leave the
 *  field unset. To learn which resources support conditions in their IAM
 *  policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Check if a notebook instance is healthy.
 *
 *  Method: notebooks.projects.locations.instances.getInstanceHealth
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGetInstanceHealth : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesGetInstanceHealthWithname:]

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_GetInstanceHealthResponse.
 *
 *  Check if a notebook instance is healthy.
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGetInstanceHealth
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Check if a notebook instance is upgradable.
 *
 *  Method: notebooks.projects.locations.instances.isUpgradeable
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesIsUpgradeable : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesIsUpgradeableWithnotebookInstance:]

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *notebookInstance;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_IsInstanceUpgradeableResponse.
 *
 *  Check if a notebook instance is upgradable.
 *
 *  @param notebookInstance Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesIsUpgradeable
 */
+ (instancetype)queryWithNotebookInstance:(NSString *)notebookInstance;

@end

/**
 *  Lists instances in a given project and location.
 *
 *  Method: notebooks.projects.locations.instances.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesList : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesListWithparent:]

/** Maximum return size of the list call. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A previous returned page token that can be used to continue listing from the
 *  last result.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Format: `parent=projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_ListInstancesResponse.
 *
 *  Lists instances in a given project and location.
 *
 *  @param parent Required. Format:
 *    `parent=projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Registers an existing legacy notebook instance to the Notebooks API server.
 *  Legacy instances are instances created with the legacy Compute Engine calls.
 *  They are not manageable by the Notebooks API out of the box. This call makes
 *  these instances manageable by the Notebooks API.
 *
 *  Method: notebooks.projects.locations.instances.register
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesRegister : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesRegisterWithObject:parent:]

/** Required. Format: `parent=projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Registers an existing legacy notebook instance to the Notebooks API server.
 *  Legacy instances are instances created with the legacy Compute Engine calls.
 *  They are not manageable by the Notebooks API out of the box. This call makes
 *  these instances manageable by the Notebooks API.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_RegisterInstanceRequest to
 *    include in the query.
 *  @param parent Required. Format:
 *    `parent=projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesRegister
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_RegisterInstanceRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Allows notebook instances to report their latest instance information to the
 *  Notebooks API server. The server will merge the reported information to the
 *  instance metadata store. Do not use this method directly.
 *
 *  Method: notebooks.projects.locations.instances.report
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesReport : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesReportWithObject:name:]

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Allows notebook instances to report their latest instance information to the
 *  Notebooks API server. The server will merge the reported information to the
 *  instance metadata store. Do not use this method directly.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_ReportInstanceInfoRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesReport
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_ReportInstanceInfoRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Resets a notebook instance.
 *
 *  Method: notebooks.projects.locations.instances.reset
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesReset : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesResetWithObject:name:]

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Resets a notebook instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_ResetInstanceRequest to include
 *    in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesReset
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_ResetInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the guest accelerators of a single Instance.
 *
 *  Method: notebooks.projects.locations.instances.setAccelerator
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetAccelerator : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesSetAcceleratorWithObject:name:]

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Updates the guest accelerators of a single Instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest
 *    to include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetAccelerator
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: notebooks.projects.locations.instances.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetIamPolicy : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_SetIamPolicyRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Replaces all the labels of an Instance.
 *
 *  Method: notebooks.projects.locations.instances.setLabels
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetLabels : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesSetLabelsWithObject:name:]

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Replaces all the labels of an Instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_SetInstanceLabelsRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetLabels
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SetInstanceLabelsRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the machine type of a single Instance.
 *
 *  Method: notebooks.projects.locations.instances.setMachineType
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetMachineType : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesSetMachineTypeWithObject:name:]

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Updates the machine type of a single Instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_SetInstanceMachineTypeRequest
 *    to include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetMachineType
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SetInstanceMachineTypeRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Starts a notebook instance.
 *
 *  Method: notebooks.projects.locations.instances.start
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesStart : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesStartWithObject:name:]

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Starts a notebook instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_StartInstanceRequest to include
 *    in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesStart
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_StartInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Stops a notebook instance.
 *
 *  Method: notebooks.projects.locations.instances.stop
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesStop : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesStopWithObject:name:]

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Stops a notebook instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_StopInstanceRequest to include
 *    in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesStop
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_StopInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: notebooks.projects.locations.instances.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesTestIamPermissions : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Upgrades a notebook instance to the latest version.
 *
 *  Method: notebooks.projects.locations.instances.upgrade
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpgrade : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesUpgradeWithObject:name:]

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Upgrades a notebook instance to the latest version.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_UpgradeInstanceRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpgrade
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_UpgradeInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Allows notebook instances to call this endpoint to upgrade themselves. Do
 *  not use this method directly.
 *
 *  Method: notebooks.projects.locations.instances.upgradeInternal
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpgradeInternal : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsInstancesUpgradeInternalWithObject:name:]

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Allows notebook instances to call this endpoint to upgrade themselves. Do
 *  not use this method directly.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_UpgradeInstanceInternalRequest
 *    to include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpgradeInternal
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_UpgradeInstanceInternalRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: notebooks.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsList : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: notebooks.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsCancel : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsOperationsCancelWithObject:name:]

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_CancelOperationRequest to
 *    include in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: notebooks.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsDelete : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsOperationsDeleteWithname:]

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: notebooks.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsGet : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: notebooks.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsList : GTLRAIPlatformNotebooksQuery
// Previous library name was
//   +[GTLQueryAIPlatformNotebooks queryForProjectsLocationsOperationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
