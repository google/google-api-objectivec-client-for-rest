// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Photos Library API (photoslibrary/v1)
// Description:
//   Manage photos, videos, and albums in Google Photos
// Documentation:
//   https://developers.google.com/photos/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRPhotosLibrary_AddEnrichmentToAlbumRequest;
@class GTLRPhotosLibrary_BatchCreateMediaItemsRequest;
@class GTLRPhotosLibrary_CreateAlbumRequest;
@class GTLRPhotosLibrary_JoinSharedAlbumRequest;
@class GTLRPhotosLibrary_SearchMediaItemsRequest;
@class GTLRPhotosLibrary_ShareAlbumRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Photos Library query classes.
 */
@interface GTLRPhotosLibraryQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Adds an enrichment to a specified position in a defined album.
 *
 *  Method: photoslibrary.albums.addEnrichment
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryAppendonly
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_AlbumsAddEnrichment : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForAlbumsAddEnrichmentWithObject:albumId:]

/** Identifier of the album where the enrichment will be added. */
@property(nonatomic, copy, nullable) NSString *albumId;

/**
 *  Fetches a @c GTLRPhotosLibrary_AddEnrichmentToAlbumResponse.
 *
 *  Adds an enrichment to a specified position in a defined album.
 *
 *  @param object The @c GTLRPhotosLibrary_AddEnrichmentToAlbumRequest to
 *    include in the query.
 *  @param albumId Identifier of the album where the enrichment will be added.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsAddEnrichment
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_AddEnrichmentToAlbumRequest *)object
                        albumId:(NSString *)albumId;

@end

/**
 *  Creates an album in a user's Google Photos library.
 *
 *  Method: photoslibrary.albums.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryAppendonly
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_AlbumsCreate : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForAlbumsCreateWithObject:]

/**
 *  Fetches a @c GTLRPhotosLibrary_Album.
 *
 *  Creates an album in a user's Google Photos library.
 *
 *  @param object The @c GTLRPhotosLibrary_CreateAlbumRequest to include in the
 *    query.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsCreate
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_CreateAlbumRequest *)object;

@end

/**
 *  Returns the album specified by the given album id.
 *
 *  Method: photoslibrary.albums.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryDrivePhotosReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_AlbumsGet : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForAlbumsGetWithalbumId:]

/** Identifier of the album to be requested. */
@property(nonatomic, copy, nullable) NSString *albumId;

/**
 *  Fetches a @c GTLRPhotosLibrary_Album.
 *
 *  Returns the album specified by the given album id.
 *
 *  @param albumId Identifier of the album to be requested.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsGet
 */
+ (instancetype)queryWithAlbumId:(NSString *)albumId;

@end

/**
 *  Lists all albums shown to a user in the 'Albums' tab of the Google
 *  Photos app.
 *
 *  Method: photoslibrary.albums.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryDrivePhotosReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_AlbumsList : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForAlbumsList]

/**
 *  Maximum number of albums to return in the response. The default number of
 *  albums to return at a time is 20. The maximum page size is 50.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A continuation token to get the next page of the results. Adding this to
 *  the request will return the rows after the pageToken. The pageToken should
 *  be the value returned in the nextPageToken parameter in the response to the
 *  listAlbums request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRPhotosLibrary_ListAlbumsResponse.
 *
 *  Lists all albums shown to a user in the 'Albums' tab of the Google
 *  Photos app.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Marks an album as 'shared' and accessible to other users. This action can
 *  only be performed on albums which were created by the developer via the
 *  API.
 *
 *  Method: photoslibrary.albums.share
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_AlbumsShare : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForAlbumsShareWithObject:albumId:]

/**
 *  Identifier of the album to be shared. This album id must belong to an album
 *  created by the developer.
 *  .
 */
@property(nonatomic, copy, nullable) NSString *albumId;

/**
 *  Fetches a @c GTLRPhotosLibrary_ShareAlbumResponse.
 *
 *  Marks an album as 'shared' and accessible to other users. This action can
 *  only be performed on albums which were created by the developer via the
 *  API.
 *
 *  @param object The @c GTLRPhotosLibrary_ShareAlbumRequest to include in the
 *    query.
 *  @param albumId Identifier of the album to be shared. This album id must
 *    belong to an album
 *    created by the developer.
 *    .
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsShare
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_ShareAlbumRequest *)object
                        albumId:(NSString *)albumId;

@end

/**
 *  Creates one or more media items in a user's Google Photos library.
 *  If an album id is specified, the media item(s) are also added to the album.
 *  By default the media item(s) will be added to the end of the library or
 *  album.
 *  If an album id and position are both defined, then the media items will
 *  be added to the album at the specified position.
 *  If multiple media items are given, they will be inserted at the specified
 *  position.
 *
 *  Method: photoslibrary.mediaItems.batchCreate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryAppendonly
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_MediaItemsBatchCreate : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForMediaItemsBatchCreateWithObject:]

/**
 *  Fetches a @c GTLRPhotosLibrary_BatchCreateMediaItemsResponse.
 *
 *  Creates one or more media items in a user's Google Photos library.
 *  If an album id is specified, the media item(s) are also added to the album.
 *  By default the media item(s) will be added to the end of the library or
 *  album.
 *  If an album id and position are both defined, then the media items will
 *  be added to the album at the specified position.
 *  If multiple media items are given, they will be inserted at the specified
 *  position.
 *
 *  @param object The @c GTLRPhotosLibrary_BatchCreateMediaItemsRequest to
 *    include in the query.
 *
 *  @return GTLRPhotosLibraryQuery_MediaItemsBatchCreate
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_BatchCreateMediaItemsRequest *)object;

@end

/**
 *  Returns the media item specified based on a given media item id.
 *
 *  Method: photoslibrary.mediaItems.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryDrivePhotosReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_MediaItemsGet : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForMediaItemsGetWithmediaItemId:]

/** Identifier of media item to be requested. */
@property(nonatomic, copy, nullable) NSString *mediaItemId;

/**
 *  Fetches a @c GTLRPhotosLibrary_MediaItem.
 *
 *  Returns the media item specified based on a given media item id.
 *
 *  @param mediaItemId Identifier of media item to be requested.
 *
 *  @return GTLRPhotosLibraryQuery_MediaItemsGet
 */
+ (instancetype)queryWithMediaItemId:(NSString *)mediaItemId;

@end

/**
 *  Searches for media items in a user's Google Photos library.
 *  If no filters are set, then all media items in the user's library will be
 *  returned.
 *  If an album is set, all media items in the specified album will be
 *  returned.
 *  If filters are specified, anything that matches the filters from the user's
 *  library will be listed.
 *  If an album and filters are set, then this will result in an error.
 *
 *  Method: photoslibrary.mediaItems.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryDrivePhotosReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_MediaItemsSearch : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForMediaItemsSearchWithObject:]

/**
 *  Fetches a @c GTLRPhotosLibrary_SearchMediaItemsResponse.
 *
 *  Searches for media items in a user's Google Photos library.
 *  If no filters are set, then all media items in the user's library will be
 *  returned.
 *  If an album is set, all media items in the specified album will be
 *  returned.
 *  If filters are specified, anything that matches the filters from the user's
 *  library will be listed.
 *  If an album and filters are set, then this will result in an error.
 *
 *  @param object The @c GTLRPhotosLibrary_SearchMediaItemsRequest to include in
 *    the query.
 *
 *  @return GTLRPhotosLibraryQuery_MediaItemsSearch
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_SearchMediaItemsRequest *)object;

@end

/**
 *  Joins a shared album on behalf of the Google Photos user.
 *
 *  Method: photoslibrary.sharedAlbums.join
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_SharedAlbumsJoin : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForSharedAlbumsJoinWithObject:]

/**
 *  Fetches a @c GTLRPhotosLibrary_JoinSharedAlbumResponse.
 *
 *  Joins a shared album on behalf of the Google Photos user.
 *
 *  @param object The @c GTLRPhotosLibrary_JoinSharedAlbumRequest to include in
 *    the query.
 *
 *  @return GTLRPhotosLibraryQuery_SharedAlbumsJoin
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_JoinSharedAlbumRequest *)object;

@end

/**
 *  Lists all shared albums shown to a user in the 'Sharing' tab of the
 *  Google Photos app.
 *
 *  Method: photoslibrary.sharedAlbums.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryDrivePhotosReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_SharedAlbumsList : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForSharedAlbumsList]

/**
 *  Maximum number of albums to return in the response. The default number of
 *  albums to return at a time is 20. The maximum page size is 50.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A continuation token to get the next page of the results. Adding this to
 *  the request will return the rows after the pageToken. The pageToken should
 *  be the value returned in the nextPageToken parameter in the response to the
 *  listSharedAlbums request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRPhotosLibrary_ListSharedAlbumsResponse.
 *
 *  Lists all shared albums shown to a user in the 'Sharing' tab of the
 *  Google Photos app.
 *
 *  @return GTLRPhotosLibraryQuery_SharedAlbumsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
