// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Compute Engine API (compute/v1)
// Description:
//   Creates and runs virtual machines on Google Cloud Platform.
// Documentation:
//   https://developers.google.com/compute/docs/reference/latest/

#import "GTLRComputeQuery.h"

#import "GTLRComputeObjects.h"

@implementation GTLRComputeQuery

@dynamic fields;

@end

@implementation GTLRComputeQuery_AcceleratorTypesAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/acceleratorTypes";
  GTLRComputeQuery_AcceleratorTypesAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_AcceleratorTypeAggregatedList class];
  query.loggingName = @"compute.acceleratorTypes.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_AcceleratorTypesGet

@dynamic acceleratorType, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                 acceleratorType:(NSString *)acceleratorType {
  NSArray *pathParams = @[
    @"acceleratorType", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/acceleratorTypes/{acceleratorType}";
  GTLRComputeQuery_AcceleratorTypesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.acceleratorType = acceleratorType;
  query.expectedObjectClass = [GTLRCompute_AcceleratorType class];
  query.loggingName = @"compute.acceleratorTypes.get";
  return query;
}

@end

@implementation GTLRComputeQuery_AcceleratorTypesList

@dynamic filter, maxResults, orderBy, pageToken, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty {
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/acceleratorTypes";
  GTLRComputeQuery_AcceleratorTypesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_AcceleratorTypeList class];
  query.loggingName = @"compute.acceleratorTypes.list";
  return query;
}

@end

@implementation GTLRComputeQuery_AddressesAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/addresses";
  GTLRComputeQuery_AddressesAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_AddressAggregatedList class];
  query.loggingName = @"compute.addresses.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_AddressesDelete

@dynamic address, project, region, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                         address:(NSString *)address {
  NSArray *pathParams = @[
    @"address", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/addresses/{address}";
  GTLRComputeQuery_AddressesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.address = address;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.addresses.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_AddressesGet

@dynamic address, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                         address:(NSString *)address {
  NSArray *pathParams = @[
    @"address", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/addresses/{address}";
  GTLRComputeQuery_AddressesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.address = address;
  query.expectedObjectClass = [GTLRCompute_Address class];
  query.loggingName = @"compute.addresses.get";
  return query;
}

@end

@implementation GTLRComputeQuery_AddressesInsert

@dynamic project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Address *)object
                        project:(NSString *)project
                         region:(NSString *)region {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/addresses";
  GTLRComputeQuery_AddressesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.addresses.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_AddressesList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/addresses";
  GTLRComputeQuery_AddressesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_AddressList class];
  query.loggingName = @"compute.addresses.list";
  return query;
}

@end

@implementation GTLRComputeQuery_AutoscalersAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/autoscalers";
  GTLRComputeQuery_AutoscalersAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_AutoscalerAggregatedList class];
  query.loggingName = @"compute.autoscalers.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_AutoscalersDelete

@dynamic autoscaler, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                      autoscaler:(NSString *)autoscaler {
  NSArray *pathParams = @[
    @"autoscaler", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/autoscalers/{autoscaler}";
  GTLRComputeQuery_AutoscalersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.autoscaler = autoscaler;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.autoscalers.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_AutoscalersGet

@dynamic autoscaler, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                      autoscaler:(NSString *)autoscaler {
  NSArray *pathParams = @[
    @"autoscaler", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/autoscalers/{autoscaler}";
  GTLRComputeQuery_AutoscalersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.autoscaler = autoscaler;
  query.expectedObjectClass = [GTLRCompute_Autoscaler class];
  query.loggingName = @"compute.autoscalers.get";
  return query;
}

@end

@implementation GTLRComputeQuery_AutoscalersInsert

@dynamic project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_Autoscaler *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/autoscalers";
  GTLRComputeQuery_AutoscalersInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.autoscalers.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_AutoscalersList

@dynamic filter, maxResults, orderBy, pageToken, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty {
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/autoscalers";
  GTLRComputeQuery_AutoscalersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_AutoscalerList class];
  query.loggingName = @"compute.autoscalers.list";
  return query;
}

@end

@implementation GTLRComputeQuery_AutoscalersPatch

@dynamic autoscaler, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_Autoscaler *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/autoscalers";
  GTLRComputeQuery_AutoscalersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.autoscalers.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_AutoscalersUpdate

@dynamic autoscaler, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_Autoscaler *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/autoscalers";
  GTLRComputeQuery_AutoscalersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.autoscalers.update";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendBucketsAddSignedUrlKey

@dynamic backendBucket, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_SignedUrlKey *)object
                        project:(NSString *)project
                  backendBucket:(NSString *)backendBucket {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"backendBucket", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey";
  GTLRComputeQuery_BackendBucketsAddSignedUrlKey *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.backendBucket = backendBucket;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.backendBuckets.addSignedUrlKey";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendBucketsDelete

@dynamic backendBucket, project, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                   backendBucket:(NSString *)backendBucket {
  NSArray *pathParams = @[
    @"backendBucket", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/backendBuckets/{backendBucket}";
  GTLRComputeQuery_BackendBucketsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.backendBucket = backendBucket;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.backendBuckets.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendBucketsDeleteSignedUrlKey

@dynamic backendBucket, keyName, project, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                   backendBucket:(NSString *)backendBucket
                         keyName:(NSString *)keyName {
  NSArray *pathParams = @[
    @"backendBucket", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey";
  GTLRComputeQuery_BackendBucketsDeleteSignedUrlKey *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.backendBucket = backendBucket;
  query.keyName = keyName;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.backendBuckets.deleteSignedUrlKey";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendBucketsGet

@dynamic backendBucket, project;

+ (instancetype)queryWithProject:(NSString *)project
                   backendBucket:(NSString *)backendBucket {
  NSArray *pathParams = @[
    @"backendBucket", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/backendBuckets/{backendBucket}";
  GTLRComputeQuery_BackendBucketsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.backendBucket = backendBucket;
  query.expectedObjectClass = [GTLRCompute_BackendBucket class];
  query.loggingName = @"compute.backendBuckets.get";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendBucketsInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_BackendBucket *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/backendBuckets";
  GTLRComputeQuery_BackendBucketsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.backendBuckets.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendBucketsList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/backendBuckets";
  GTLRComputeQuery_BackendBucketsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_BackendBucketList class];
  query.loggingName = @"compute.backendBuckets.list";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendBucketsPatch

@dynamic backendBucket, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_BackendBucket *)object
                        project:(NSString *)project
                  backendBucket:(NSString *)backendBucket {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"backendBucket", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/backendBuckets/{backendBucket}";
  GTLRComputeQuery_BackendBucketsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.backendBucket = backendBucket;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.backendBuckets.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendBucketsUpdate

@dynamic backendBucket, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_BackendBucket *)object
                        project:(NSString *)project
                  backendBucket:(NSString *)backendBucket {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"backendBucket", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/backendBuckets/{backendBucket}";
  GTLRComputeQuery_BackendBucketsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.backendBucket = backendBucket;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.backendBuckets.update";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendServicesAddSignedUrlKey

@dynamic backendService, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_SignedUrlKey *)object
                        project:(NSString *)project
                 backendService:(NSString *)backendService {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"backendService", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/backendServices/{backendService}/addSignedUrlKey";
  GTLRComputeQuery_BackendServicesAddSignedUrlKey *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.backendService = backendService;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.backendServices.addSignedUrlKey";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendServicesAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/backendServices";
  GTLRComputeQuery_BackendServicesAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_BackendServiceAggregatedList class];
  query.loggingName = @"compute.backendServices.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendServicesDelete

@dynamic backendService, project, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                  backendService:(NSString *)backendService {
  NSArray *pathParams = @[
    @"backendService", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/backendServices/{backendService}";
  GTLRComputeQuery_BackendServicesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.backendService = backendService;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.backendServices.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendServicesDeleteSignedUrlKey

@dynamic backendService, keyName, project, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                  backendService:(NSString *)backendService
                         keyName:(NSString *)keyName {
  NSArray *pathParams = @[
    @"backendService", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/backendServices/{backendService}/deleteSignedUrlKey";
  GTLRComputeQuery_BackendServicesDeleteSignedUrlKey *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.backendService = backendService;
  query.keyName = keyName;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.backendServices.deleteSignedUrlKey";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendServicesGet

@dynamic backendService, project;

+ (instancetype)queryWithProject:(NSString *)project
                  backendService:(NSString *)backendService {
  NSArray *pathParams = @[
    @"backendService", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/backendServices/{backendService}";
  GTLRComputeQuery_BackendServicesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.backendService = backendService;
  query.expectedObjectClass = [GTLRCompute_BackendService class];
  query.loggingName = @"compute.backendServices.get";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendServicesGetHealth

@dynamic backendService, project;

+ (instancetype)queryWithObject:(GTLRCompute_ResourceGroupReference *)object
                        project:(NSString *)project
                 backendService:(NSString *)backendService {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"backendService", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/backendServices/{backendService}/getHealth";
  GTLRComputeQuery_BackendServicesGetHealth *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.backendService = backendService;
  query.expectedObjectClass = [GTLRCompute_BackendServiceGroupHealth class];
  query.loggingName = @"compute.backendServices.getHealth";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendServicesInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_BackendService *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/backendServices";
  GTLRComputeQuery_BackendServicesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.backendServices.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendServicesList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/backendServices";
  GTLRComputeQuery_BackendServicesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_BackendServiceList class];
  query.loggingName = @"compute.backendServices.list";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendServicesPatch

@dynamic backendService, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_BackendService *)object
                        project:(NSString *)project
                 backendService:(NSString *)backendService {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"backendService", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/backendServices/{backendService}";
  GTLRComputeQuery_BackendServicesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.backendService = backendService;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.backendServices.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendServicesSetSecurityPolicy

@dynamic backendService, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_SecurityPolicyReference *)object
                        project:(NSString *)project
                 backendService:(NSString *)backendService {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"backendService", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/backendServices/{backendService}/setSecurityPolicy";
  GTLRComputeQuery_BackendServicesSetSecurityPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.backendService = backendService;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.backendServices.setSecurityPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_BackendServicesUpdate

@dynamic backendService, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_BackendService *)object
                        project:(NSString *)project
                 backendService:(NSString *)backendService {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"backendService", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/backendServices/{backendService}";
  GTLRComputeQuery_BackendServicesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.backendService = backendService;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.backendServices.update";
  return query;
}

@end

@implementation GTLRComputeQuery_DisksAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/disks";
  GTLRComputeQuery_DisksAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_DiskAggregatedList class];
  query.loggingName = @"compute.disks.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_DisksCreateSnapshot

@dynamic disk, guestFlush, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_Snapshot *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                           disk:(NSString *)disk {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"disk", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/disks/{disk}/createSnapshot";
  GTLRComputeQuery_DisksCreateSnapshot *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.disk = disk;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.disks.createSnapshot";
  return query;
}

@end

@implementation GTLRComputeQuery_DisksDelete

@dynamic disk, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                            disk:(NSString *)disk {
  NSArray *pathParams = @[
    @"disk", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/disks/{disk}";
  GTLRComputeQuery_DisksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.disk = disk;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.disks.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_DisksGet

@dynamic disk, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                            disk:(NSString *)disk {
  NSArray *pathParams = @[
    @"disk", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/disks/{disk}";
  GTLRComputeQuery_DisksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.disk = disk;
  query.expectedObjectClass = [GTLRCompute_Disk class];
  query.loggingName = @"compute.disks.get";
  return query;
}

@end

@implementation GTLRComputeQuery_DisksGetIamPolicy

@dynamic project, resource, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        resource:(NSString *)resource {
  NSArray *pathParams = @[
    @"project", @"resource", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/disks/{resource}/getIamPolicy";
  GTLRComputeQuery_DisksGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.disks.getIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_DisksInsert

@dynamic project, requestId, sourceImage, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_Disk *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/disks";
  GTLRComputeQuery_DisksInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.disks.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_DisksList

@dynamic filter, maxResults, orderBy, pageToken, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty {
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/disks";
  GTLRComputeQuery_DisksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_DiskList class];
  query.loggingName = @"compute.disks.list";
  return query;
}

@end

@implementation GTLRComputeQuery_DisksResize

@dynamic disk, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_DisksResizeRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                           disk:(NSString *)disk {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"disk", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/disks/{disk}/resize";
  GTLRComputeQuery_DisksResize *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.disk = disk;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.disks.resize";
  return query;
}

@end

@implementation GTLRComputeQuery_DisksSetIamPolicy

@dynamic project, resource, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_ZoneSetPolicyRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/disks/{resource}/setIamPolicy";
  GTLRComputeQuery_DisksSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.disks.setIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_DisksSetLabels

@dynamic project, requestId, resource, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_ZoneSetLabelsRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/disks/{resource}/setLabels";
  GTLRComputeQuery_DisksSetLabels *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.disks.setLabels";
  return query;
}

@end

@implementation GTLRComputeQuery_DisksTestIamPermissions

@dynamic project, resource, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_TestPermissionsRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/disks/{resource}/testIamPermissions";
  GTLRComputeQuery_DisksTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_TestPermissionsResponse class];
  query.loggingName = @"compute.disks.testIamPermissions";
  return query;
}

@end

@implementation GTLRComputeQuery_DiskTypesAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/diskTypes";
  GTLRComputeQuery_DiskTypesAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_DiskTypeAggregatedList class];
  query.loggingName = @"compute.diskTypes.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_DiskTypesGet

@dynamic diskType, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        diskType:(NSString *)diskType {
  NSArray *pathParams = @[
    @"diskType", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/diskTypes/{diskType}";
  GTLRComputeQuery_DiskTypesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.diskType = diskType;
  query.expectedObjectClass = [GTLRCompute_DiskType class];
  query.loggingName = @"compute.diskTypes.get";
  return query;
}

@end

@implementation GTLRComputeQuery_DiskTypesList

@dynamic filter, maxResults, orderBy, pageToken, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty {
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/diskTypes";
  GTLRComputeQuery_DiskTypesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_DiskTypeList class];
  query.loggingName = @"compute.diskTypes.list";
  return query;
}

@end

@implementation GTLRComputeQuery_FirewallsDelete

@dynamic firewall, project, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                        firewall:(NSString *)firewall {
  NSArray *pathParams = @[
    @"firewall", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/firewalls/{firewall}";
  GTLRComputeQuery_FirewallsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.firewall = firewall;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.firewalls.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_FirewallsGet

@dynamic firewall, project;

+ (instancetype)queryWithProject:(NSString *)project
                        firewall:(NSString *)firewall {
  NSArray *pathParams = @[
    @"firewall", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/firewalls/{firewall}";
  GTLRComputeQuery_FirewallsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.firewall = firewall;
  query.expectedObjectClass = [GTLRCompute_Firewall class];
  query.loggingName = @"compute.firewalls.get";
  return query;
}

@end

@implementation GTLRComputeQuery_FirewallsInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Firewall *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/firewalls";
  GTLRComputeQuery_FirewallsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.firewalls.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_FirewallsList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/firewalls";
  GTLRComputeQuery_FirewallsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_FirewallList class];
  query.loggingName = @"compute.firewalls.list";
  return query;
}

@end

@implementation GTLRComputeQuery_FirewallsPatch

@dynamic firewall, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Firewall *)object
                        project:(NSString *)project
                       firewall:(NSString *)firewall {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"firewall", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/firewalls/{firewall}";
  GTLRComputeQuery_FirewallsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.firewall = firewall;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.firewalls.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_FirewallsUpdate

@dynamic firewall, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Firewall *)object
                        project:(NSString *)project
                       firewall:(NSString *)firewall {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"firewall", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/firewalls/{firewall}";
  GTLRComputeQuery_FirewallsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.firewall = firewall;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.firewalls.update";
  return query;
}

@end

@implementation GTLRComputeQuery_ForwardingRulesAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/forwardingRules";
  GTLRComputeQuery_ForwardingRulesAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_ForwardingRuleAggregatedList class];
  query.loggingName = @"compute.forwardingRules.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_ForwardingRulesDelete

@dynamic forwardingRule, project, region, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                  forwardingRule:(NSString *)forwardingRule {
  NSArray *pathParams = @[
    @"forwardingRule", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/forwardingRules/{forwardingRule}";
  GTLRComputeQuery_ForwardingRulesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.forwardingRule = forwardingRule;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.forwardingRules.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_ForwardingRulesGet

@dynamic forwardingRule, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                  forwardingRule:(NSString *)forwardingRule {
  NSArray *pathParams = @[
    @"forwardingRule", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/forwardingRules/{forwardingRule}";
  GTLRComputeQuery_ForwardingRulesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.forwardingRule = forwardingRule;
  query.expectedObjectClass = [GTLRCompute_ForwardingRule class];
  query.loggingName = @"compute.forwardingRules.get";
  return query;
}

@end

@implementation GTLRComputeQuery_ForwardingRulesInsert

@dynamic project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_ForwardingRule *)object
                        project:(NSString *)project
                         region:(NSString *)region {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/forwardingRules";
  GTLRComputeQuery_ForwardingRulesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.forwardingRules.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_ForwardingRulesList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/forwardingRules";
  GTLRComputeQuery_ForwardingRulesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_ForwardingRuleList class];
  query.loggingName = @"compute.forwardingRules.list";
  return query;
}

@end

@implementation GTLRComputeQuery_ForwardingRulesSetTarget

@dynamic forwardingRule, project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_TargetReference *)object
                        project:(NSString *)project
                         region:(NSString *)region
                 forwardingRule:(NSString *)forwardingRule {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"forwardingRule", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget";
  GTLRComputeQuery_ForwardingRulesSetTarget *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.forwardingRule = forwardingRule;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.forwardingRules.setTarget";
  return query;
}

@end

@implementation GTLRComputeQuery_GlobalAddressesDelete

@dynamic address, project, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                         address:(NSString *)address {
  NSArray *pathParams = @[
    @"address", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/addresses/{address}";
  GTLRComputeQuery_GlobalAddressesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.address = address;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.globalAddresses.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_GlobalAddressesGet

@dynamic address, project;

+ (instancetype)queryWithProject:(NSString *)project
                         address:(NSString *)address {
  NSArray *pathParams = @[
    @"address", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/addresses/{address}";
  GTLRComputeQuery_GlobalAddressesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.address = address;
  query.expectedObjectClass = [GTLRCompute_Address class];
  query.loggingName = @"compute.globalAddresses.get";
  return query;
}

@end

@implementation GTLRComputeQuery_GlobalAddressesInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Address *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/addresses";
  GTLRComputeQuery_GlobalAddressesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.globalAddresses.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_GlobalAddressesList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/addresses";
  GTLRComputeQuery_GlobalAddressesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_AddressList class];
  query.loggingName = @"compute.globalAddresses.list";
  return query;
}

@end

@implementation GTLRComputeQuery_GlobalForwardingRulesDelete

@dynamic forwardingRule, project, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                  forwardingRule:(NSString *)forwardingRule {
  NSArray *pathParams = @[
    @"forwardingRule", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/forwardingRules/{forwardingRule}";
  GTLRComputeQuery_GlobalForwardingRulesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.forwardingRule = forwardingRule;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.globalForwardingRules.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_GlobalForwardingRulesGet

@dynamic forwardingRule, project;

+ (instancetype)queryWithProject:(NSString *)project
                  forwardingRule:(NSString *)forwardingRule {
  NSArray *pathParams = @[
    @"forwardingRule", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/forwardingRules/{forwardingRule}";
  GTLRComputeQuery_GlobalForwardingRulesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.forwardingRule = forwardingRule;
  query.expectedObjectClass = [GTLRCompute_ForwardingRule class];
  query.loggingName = @"compute.globalForwardingRules.get";
  return query;
}

@end

@implementation GTLRComputeQuery_GlobalForwardingRulesInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_ForwardingRule *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/forwardingRules";
  GTLRComputeQuery_GlobalForwardingRulesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.globalForwardingRules.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_GlobalForwardingRulesList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/forwardingRules";
  GTLRComputeQuery_GlobalForwardingRulesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_ForwardingRuleList class];
  query.loggingName = @"compute.globalForwardingRules.list";
  return query;
}

@end

@implementation GTLRComputeQuery_GlobalForwardingRulesSetTarget

@dynamic forwardingRule, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_TargetReference *)object
                        project:(NSString *)project
                 forwardingRule:(NSString *)forwardingRule {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"forwardingRule", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/forwardingRules/{forwardingRule}/setTarget";
  GTLRComputeQuery_GlobalForwardingRulesSetTarget *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.forwardingRule = forwardingRule;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.globalForwardingRules.setTarget";
  return query;
}

@end

@implementation GTLRComputeQuery_GlobalOperationsAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/operations";
  GTLRComputeQuery_GlobalOperationsAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_OperationAggregatedList class];
  query.loggingName = @"compute.globalOperations.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_GlobalOperationsDelete

@dynamic operation, project;

+ (instancetype)queryWithProject:(NSString *)project
                       operation:(NSString *)operation {
  NSArray *pathParams = @[
    @"operation", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/operations/{operation}";
  GTLRComputeQuery_GlobalOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.operation = operation;
  query.loggingName = @"compute.globalOperations.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_GlobalOperationsGet

@dynamic operation, project;

+ (instancetype)queryWithProject:(NSString *)project
                       operation:(NSString *)operation {
  NSArray *pathParams = @[
    @"operation", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/operations/{operation}";
  GTLRComputeQuery_GlobalOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.operation = operation;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.globalOperations.get";
  return query;
}

@end

@implementation GTLRComputeQuery_GlobalOperationsList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/operations";
  GTLRComputeQuery_GlobalOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_OperationList class];
  query.loggingName = @"compute.globalOperations.list";
  return query;
}

@end

@implementation GTLRComputeQuery_HealthChecksDelete

@dynamic healthCheck, project, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                     healthCheck:(NSString *)healthCheck {
  NSArray *pathParams = @[
    @"healthCheck", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/healthChecks/{healthCheck}";
  GTLRComputeQuery_HealthChecksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.healthCheck = healthCheck;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.healthChecks.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_HealthChecksGet

@dynamic healthCheck, project;

+ (instancetype)queryWithProject:(NSString *)project
                     healthCheck:(NSString *)healthCheck {
  NSArray *pathParams = @[
    @"healthCheck", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/healthChecks/{healthCheck}";
  GTLRComputeQuery_HealthChecksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.healthCheck = healthCheck;
  query.expectedObjectClass = [GTLRCompute_HealthCheck class];
  query.loggingName = @"compute.healthChecks.get";
  return query;
}

@end

@implementation GTLRComputeQuery_HealthChecksInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_HealthCheck *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/healthChecks";
  GTLRComputeQuery_HealthChecksInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.healthChecks.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_HealthChecksList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/healthChecks";
  GTLRComputeQuery_HealthChecksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_HealthCheckList class];
  query.loggingName = @"compute.healthChecks.list";
  return query;
}

@end

@implementation GTLRComputeQuery_HealthChecksPatch

@dynamic healthCheck, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_HealthCheck *)object
                        project:(NSString *)project
                    healthCheck:(NSString *)healthCheck {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"healthCheck", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/healthChecks/{healthCheck}";
  GTLRComputeQuery_HealthChecksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.healthCheck = healthCheck;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.healthChecks.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_HealthChecksUpdate

@dynamic healthCheck, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_HealthCheck *)object
                        project:(NSString *)project
                    healthCheck:(NSString *)healthCheck {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"healthCheck", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/healthChecks/{healthCheck}";
  GTLRComputeQuery_HealthChecksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.healthCheck = healthCheck;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.healthChecks.update";
  return query;
}

@end

@implementation GTLRComputeQuery_HttpHealthChecksDelete

@dynamic httpHealthCheck, project, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                 httpHealthCheck:(NSString *)httpHealthCheck {
  NSArray *pathParams = @[
    @"httpHealthCheck", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/httpHealthChecks/{httpHealthCheck}";
  GTLRComputeQuery_HttpHealthChecksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.httpHealthCheck = httpHealthCheck;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.httpHealthChecks.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_HttpHealthChecksGet

@dynamic httpHealthCheck, project;

+ (instancetype)queryWithProject:(NSString *)project
                 httpHealthCheck:(NSString *)httpHealthCheck {
  NSArray *pathParams = @[
    @"httpHealthCheck", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/httpHealthChecks/{httpHealthCheck}";
  GTLRComputeQuery_HttpHealthChecksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.httpHealthCheck = httpHealthCheck;
  query.expectedObjectClass = [GTLRCompute_HttpHealthCheck class];
  query.loggingName = @"compute.httpHealthChecks.get";
  return query;
}

@end

@implementation GTLRComputeQuery_HttpHealthChecksInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_HttpHealthCheck *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/httpHealthChecks";
  GTLRComputeQuery_HttpHealthChecksInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.httpHealthChecks.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_HttpHealthChecksList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/httpHealthChecks";
  GTLRComputeQuery_HttpHealthChecksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_HttpHealthCheckList class];
  query.loggingName = @"compute.httpHealthChecks.list";
  return query;
}

@end

@implementation GTLRComputeQuery_HttpHealthChecksPatch

@dynamic httpHealthCheck, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_HttpHealthCheck *)object
                        project:(NSString *)project
                httpHealthCheck:(NSString *)httpHealthCheck {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"httpHealthCheck", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/httpHealthChecks/{httpHealthCheck}";
  GTLRComputeQuery_HttpHealthChecksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.httpHealthCheck = httpHealthCheck;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.httpHealthChecks.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_HttpHealthChecksUpdate

@dynamic httpHealthCheck, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_HttpHealthCheck *)object
                        project:(NSString *)project
                httpHealthCheck:(NSString *)httpHealthCheck {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"httpHealthCheck", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/httpHealthChecks/{httpHealthCheck}";
  GTLRComputeQuery_HttpHealthChecksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.httpHealthCheck = httpHealthCheck;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.httpHealthChecks.update";
  return query;
}

@end

@implementation GTLRComputeQuery_HttpsHealthChecksDelete

@dynamic httpsHealthCheck, project, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                httpsHealthCheck:(NSString *)httpsHealthCheck {
  NSArray *pathParams = @[
    @"httpsHealthCheck", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/httpsHealthChecks/{httpsHealthCheck}";
  GTLRComputeQuery_HttpsHealthChecksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.httpsHealthCheck = httpsHealthCheck;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.httpsHealthChecks.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_HttpsHealthChecksGet

@dynamic httpsHealthCheck, project;

+ (instancetype)queryWithProject:(NSString *)project
                httpsHealthCheck:(NSString *)httpsHealthCheck {
  NSArray *pathParams = @[
    @"httpsHealthCheck", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/httpsHealthChecks/{httpsHealthCheck}";
  GTLRComputeQuery_HttpsHealthChecksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.httpsHealthCheck = httpsHealthCheck;
  query.expectedObjectClass = [GTLRCompute_HttpsHealthCheck class];
  query.loggingName = @"compute.httpsHealthChecks.get";
  return query;
}

@end

@implementation GTLRComputeQuery_HttpsHealthChecksInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_HttpsHealthCheck *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/httpsHealthChecks";
  GTLRComputeQuery_HttpsHealthChecksInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.httpsHealthChecks.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_HttpsHealthChecksList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/httpsHealthChecks";
  GTLRComputeQuery_HttpsHealthChecksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_HttpsHealthCheckList class];
  query.loggingName = @"compute.httpsHealthChecks.list";
  return query;
}

@end

@implementation GTLRComputeQuery_HttpsHealthChecksPatch

@dynamic httpsHealthCheck, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_HttpsHealthCheck *)object
                        project:(NSString *)project
               httpsHealthCheck:(NSString *)httpsHealthCheck {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"httpsHealthCheck", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/httpsHealthChecks/{httpsHealthCheck}";
  GTLRComputeQuery_HttpsHealthChecksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.httpsHealthCheck = httpsHealthCheck;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.httpsHealthChecks.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_HttpsHealthChecksUpdate

@dynamic httpsHealthCheck, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_HttpsHealthCheck *)object
                        project:(NSString *)project
               httpsHealthCheck:(NSString *)httpsHealthCheck {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"httpsHealthCheck", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/httpsHealthChecks/{httpsHealthCheck}";
  GTLRComputeQuery_HttpsHealthChecksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.httpsHealthCheck = httpsHealthCheck;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.httpsHealthChecks.update";
  return query;
}

@end

@implementation GTLRComputeQuery_ImagesDelete

@dynamic image, project, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                           image:(NSString *)image {
  NSArray *pathParams = @[
    @"image", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/images/{image}";
  GTLRComputeQuery_ImagesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.image = image;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.images.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_ImagesDeprecate

@dynamic image, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_DeprecationStatus *)object
                        project:(NSString *)project
                          image:(NSString *)image {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"image", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/images/{image}/deprecate";
  GTLRComputeQuery_ImagesDeprecate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.image = image;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.images.deprecate";
  return query;
}

@end

@implementation GTLRComputeQuery_ImagesGet

@dynamic image, project;

+ (instancetype)queryWithProject:(NSString *)project
                           image:(NSString *)image {
  NSArray *pathParams = @[
    @"image", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/images/{image}";
  GTLRComputeQuery_ImagesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.image = image;
  query.expectedObjectClass = [GTLRCompute_Image class];
  query.loggingName = @"compute.images.get";
  return query;
}

@end

@implementation GTLRComputeQuery_ImagesGetFromFamily

@dynamic family, project;

+ (instancetype)queryWithProject:(NSString *)project
                          family:(NSString *)family {
  NSArray *pathParams = @[
    @"family", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/images/family/{family}";
  GTLRComputeQuery_ImagesGetFromFamily *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.family = family;
  query.expectedObjectClass = [GTLRCompute_Image class];
  query.loggingName = @"compute.images.getFromFamily";
  return query;
}

@end

@implementation GTLRComputeQuery_ImagesGetIamPolicy

@dynamic project, resource;

+ (instancetype)queryWithProject:(NSString *)project
                        resource:(NSString *)resource {
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/images/{resource}/getIamPolicy";
  GTLRComputeQuery_ImagesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.images.getIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_ImagesInsert

@dynamic forceCreate, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Image *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/images";
  GTLRComputeQuery_ImagesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.images.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_ImagesList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/images";
  GTLRComputeQuery_ImagesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_ImageList class];
  query.loggingName = @"compute.images.list";
  return query;
}

@end

@implementation GTLRComputeQuery_ImagesSetIamPolicy

@dynamic project, resource;

+ (instancetype)queryWithObject:(GTLRCompute_GlobalSetPolicyRequest *)object
                        project:(NSString *)project
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/images/{resource}/setIamPolicy";
  GTLRComputeQuery_ImagesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.images.setIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_ImagesSetLabels

@dynamic project, resource;

+ (instancetype)queryWithObject:(GTLRCompute_GlobalSetLabelsRequest *)object
                        project:(NSString *)project
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/images/{resource}/setLabels";
  GTLRComputeQuery_ImagesSetLabels *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.images.setLabels";
  return query;
}

@end

@implementation GTLRComputeQuery_ImagesTestIamPermissions

@dynamic project, resource;

+ (instancetype)queryWithObject:(GTLRCompute_TestPermissionsRequest *)object
                        project:(NSString *)project
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/images/{resource}/testIamPermissions";
  GTLRComputeQuery_ImagesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_TestPermissionsResponse class];
  query.loggingName = @"compute.images.testIamPermissions";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupManagersAbandonInstances

@dynamic instanceGroupManager, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstanceGroupManagersAbandonInstancesRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances";
  GTLRComputeQuery_InstanceGroupManagersAbandonInstances *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instanceGroupManagers.abandonInstances";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupManagersAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/instanceGroupManagers";
  GTLRComputeQuery_InstanceGroupManagersAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_InstanceGroupManagerAggregatedList class];
  query.loggingName = @"compute.instanceGroupManagers.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupManagersDelete

@dynamic instanceGroupManager, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
            instanceGroupManager:(NSString *)instanceGroupManager {
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}";
  GTLRComputeQuery_InstanceGroupManagersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instanceGroupManagers.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupManagersDeleteInstances

@dynamic instanceGroupManager, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstanceGroupManagersDeleteInstancesRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances";
  GTLRComputeQuery_InstanceGroupManagersDeleteInstances *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instanceGroupManagers.deleteInstances";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupManagersGet

@dynamic instanceGroupManager, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
            instanceGroupManager:(NSString *)instanceGroupManager {
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}";
  GTLRComputeQuery_InstanceGroupManagersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_InstanceGroupManager class];
  query.loggingName = @"compute.instanceGroupManagers.get";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupManagersInsert

@dynamic project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstanceGroupManager *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers";
  GTLRComputeQuery_InstanceGroupManagersInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instanceGroupManagers.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupManagersList

@dynamic filter, maxResults, orderBy, pageToken, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty {
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers";
  GTLRComputeQuery_InstanceGroupManagersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_InstanceGroupManagerList class];
  query.loggingName = @"compute.instanceGroupManagers.list";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupManagersListManagedInstances

@dynamic filter, instanceGroupManager, maxResults, orderBy, pageToken, project,
         zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"orderBy" : @"order_by",
    @"zoneProperty" : @"zone"
  };
  return map;
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
            instanceGroupManager:(NSString *)instanceGroupManager {
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances";
  GTLRComputeQuery_InstanceGroupManagersListManagedInstances *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_InstanceGroupManagersListManagedInstancesResponse class];
  query.loggingName = @"compute.instanceGroupManagers.listManagedInstances";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupManagersPatch

@dynamic instanceGroupManager, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstanceGroupManager *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}";
  GTLRComputeQuery_InstanceGroupManagersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instanceGroupManagers.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupManagersRecreateInstances

@dynamic instanceGroupManager, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstanceGroupManagersRecreateInstancesRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances";
  GTLRComputeQuery_InstanceGroupManagersRecreateInstances *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instanceGroupManagers.recreateInstances";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupManagersResize

@dynamic instanceGroupManager, project, requestId, size, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
            instanceGroupManager:(NSString *)instanceGroupManager
                            size:(NSInteger)size {
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize";
  GTLRComputeQuery_InstanceGroupManagersResize *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.size = size;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instanceGroupManagers.resize";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupManagersSetInstanceTemplate

@dynamic instanceGroupManager, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstanceGroupManagersSetInstanceTemplateRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate";
  GTLRComputeQuery_InstanceGroupManagersSetInstanceTemplate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instanceGroupManagers.setInstanceTemplate";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupManagersSetTargetPools

@dynamic instanceGroupManager, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstanceGroupManagersSetTargetPoolsRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools";
  GTLRComputeQuery_InstanceGroupManagersSetTargetPools *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instanceGroupManagers.setTargetPools";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupsAddInstances

@dynamic instanceGroup, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstanceGroupsAddInstancesRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                  instanceGroup:(NSString *)instanceGroup {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroup", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances";
  GTLRComputeQuery_InstanceGroupsAddInstances *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroup = instanceGroup;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instanceGroups.addInstances";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupsAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/instanceGroups";
  GTLRComputeQuery_InstanceGroupsAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_InstanceGroupAggregatedList class];
  query.loggingName = @"compute.instanceGroups.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupsDelete

@dynamic instanceGroup, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                   instanceGroup:(NSString *)instanceGroup {
  NSArray *pathParams = @[
    @"instanceGroup", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroups/{instanceGroup}";
  GTLRComputeQuery_InstanceGroupsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroup = instanceGroup;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instanceGroups.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupsGet

@dynamic instanceGroup, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                   instanceGroup:(NSString *)instanceGroup {
  NSArray *pathParams = @[
    @"instanceGroup", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroups/{instanceGroup}";
  GTLRComputeQuery_InstanceGroupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroup = instanceGroup;
  query.expectedObjectClass = [GTLRCompute_InstanceGroup class];
  query.loggingName = @"compute.instanceGroups.get";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupsInsert

@dynamic project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstanceGroup *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroups";
  GTLRComputeQuery_InstanceGroupsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instanceGroups.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupsList

@dynamic filter, maxResults, orderBy, pageToken, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty {
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroups";
  GTLRComputeQuery_InstanceGroupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_InstanceGroupList class];
  query.loggingName = @"compute.instanceGroups.list";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupsListInstances

@dynamic filter, instanceGroup, maxResults, orderBy, pageToken, project,
         zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstanceGroupsListInstancesRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                  instanceGroup:(NSString *)instanceGroup {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroup", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances";
  GTLRComputeQuery_InstanceGroupsListInstances *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroup = instanceGroup;
  query.expectedObjectClass = [GTLRCompute_InstanceGroupsListInstances class];
  query.loggingName = @"compute.instanceGroups.listInstances";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupsRemoveInstances

@dynamic instanceGroup, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstanceGroupsRemoveInstancesRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                  instanceGroup:(NSString *)instanceGroup {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroup", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances";
  GTLRComputeQuery_InstanceGroupsRemoveInstances *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroup = instanceGroup;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instanceGroups.removeInstances";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceGroupsSetNamedPorts

@dynamic instanceGroup, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstanceGroupsSetNamedPortsRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                  instanceGroup:(NSString *)instanceGroup {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroup", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts";
  GTLRComputeQuery_InstanceGroupsSetNamedPorts *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroup = instanceGroup;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instanceGroups.setNamedPorts";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesAddAccessConfig

@dynamic instance, networkInterface, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_AccessConfig *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       instance:(NSString *)instance
               networkInterface:(NSString *)networkInterface {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/addAccessConfig";
  GTLRComputeQuery_InstancesAddAccessConfig *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.networkInterface = networkInterface;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.addAccessConfig";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/instances";
  GTLRComputeQuery_InstancesAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_InstanceAggregatedList class];
  query.loggingName = @"compute.instances.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesAttachDisk

@dynamic forceAttach, instance, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_AttachedDisk *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       instance:(NSString *)instance {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/attachDisk";
  GTLRComputeQuery_InstancesAttachDisk *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.attachDisk";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesDelete

@dynamic instance, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        instance:(NSString *)instance {
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}";
  GTLRComputeQuery_InstancesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesDeleteAccessConfig

@dynamic accessConfig, instance, networkInterface, project, requestId,
         zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        instance:(NSString *)instance
                    accessConfig:(NSString *)accessConfig
                networkInterface:(NSString *)networkInterface {
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/deleteAccessConfig";
  GTLRComputeQuery_InstancesDeleteAccessConfig *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.accessConfig = accessConfig;
  query.networkInterface = networkInterface;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.deleteAccessConfig";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesDetachDisk

@dynamic deviceName, instance, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        instance:(NSString *)instance
                      deviceName:(NSString *)deviceName {
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/detachDisk";
  GTLRComputeQuery_InstancesDetachDisk *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.deviceName = deviceName;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.detachDisk";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesGet

@dynamic instance, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        instance:(NSString *)instance {
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}";
  GTLRComputeQuery_InstancesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_Instance class];
  query.loggingName = @"compute.instances.get";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesGetIamPolicy

@dynamic project, resource, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        resource:(NSString *)resource {
  NSArray *pathParams = @[
    @"project", @"resource", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{resource}/getIamPolicy";
  GTLRComputeQuery_InstancesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.instances.getIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesGetSerialPortOutput

@dynamic instance, port, project, start, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        instance:(NSString *)instance {
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/serialPort";
  GTLRComputeQuery_InstancesGetSerialPortOutput *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_SerialPortOutput class];
  query.loggingName = @"compute.instances.getSerialPortOutput";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesInsert

@dynamic project, requestId, sourceInstanceTemplate, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_Instance *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances";
  GTLRComputeQuery_InstancesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesList

@dynamic filter, maxResults, orderBy, pageToken, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty {
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances";
  GTLRComputeQuery_InstancesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_InstanceList class];
  query.loggingName = @"compute.instances.list";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesListReferrers

@dynamic filter, instance, maxResults, orderBy, pageToken, project,
         zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        instance:(NSString *)instance {
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/referrers";
  GTLRComputeQuery_InstancesListReferrers *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_InstanceListReferrers class];
  query.loggingName = @"compute.instances.listReferrers";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesReset

@dynamic instance, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        instance:(NSString *)instance {
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/reset";
  GTLRComputeQuery_InstancesReset *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.reset";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesSetDeletionProtection

@dynamic deletionProtection, project, requestId, resource, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        resource:(NSString *)resource {
  NSArray *pathParams = @[
    @"project", @"resource", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{resource}/setDeletionProtection";
  GTLRComputeQuery_InstancesSetDeletionProtection *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.setDeletionProtection";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesSetDiskAutoDelete

@dynamic autoDelete, deviceName, instance, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        instance:(NSString *)instance
                      autoDelete:(BOOL)autoDelete
                      deviceName:(NSString *)deviceName {
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete";
  GTLRComputeQuery_InstancesSetDiskAutoDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.autoDelete = autoDelete;
  query.deviceName = deviceName;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.setDiskAutoDelete";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesSetIamPolicy

@dynamic project, resource, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_ZoneSetPolicyRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{resource}/setIamPolicy";
  GTLRComputeQuery_InstancesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.instances.setIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesSetLabels

@dynamic instance, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstancesSetLabelsRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       instance:(NSString *)instance {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/setLabels";
  GTLRComputeQuery_InstancesSetLabels *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.setLabels";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesSetMachineResources

@dynamic instance, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstancesSetMachineResourcesRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       instance:(NSString *)instance {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/setMachineResources";
  GTLRComputeQuery_InstancesSetMachineResources *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.setMachineResources";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesSetMachineType

@dynamic instance, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstancesSetMachineTypeRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       instance:(NSString *)instance {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/setMachineType";
  GTLRComputeQuery_InstancesSetMachineType *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.setMachineType";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesSetMetadata

@dynamic instance, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_Metadata *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       instance:(NSString *)instance {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/setMetadata";
  GTLRComputeQuery_InstancesSetMetadata *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.setMetadata";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesSetMinCpuPlatform

@dynamic instance, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstancesSetMinCpuPlatformRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       instance:(NSString *)instance {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform";
  GTLRComputeQuery_InstancesSetMinCpuPlatform *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.setMinCpuPlatform";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesSetScheduling

@dynamic instance, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_Scheduling *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       instance:(NSString *)instance {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/setScheduling";
  GTLRComputeQuery_InstancesSetScheduling *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.setScheduling";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesSetServiceAccount

@dynamic instance, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstancesSetServiceAccountRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       instance:(NSString *)instance {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/setServiceAccount";
  GTLRComputeQuery_InstancesSetServiceAccount *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.setServiceAccount";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesSetTags

@dynamic instance, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_Tags *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       instance:(NSString *)instance {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/setTags";
  GTLRComputeQuery_InstancesSetTags *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.setTags";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesSimulateMaintenanceEvent

@dynamic instance, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        instance:(NSString *)instance {
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent";
  GTLRComputeQuery_InstancesSimulateMaintenanceEvent *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.simulateMaintenanceEvent";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesStart

@dynamic instance, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        instance:(NSString *)instance {
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/start";
  GTLRComputeQuery_InstancesStart *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.start";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesStartWithEncryptionKey

@dynamic instance, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_InstancesStartWithEncryptionKeyRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       instance:(NSString *)instance {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey";
  GTLRComputeQuery_InstancesStartWithEncryptionKey *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.startWithEncryptionKey";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesStop

@dynamic instance, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        instance:(NSString *)instance {
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/stop";
  GTLRComputeQuery_InstancesStop *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.stop";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesTestIamPermissions

@dynamic project, resource, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_TestPermissionsRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{resource}/testIamPermissions";
  GTLRComputeQuery_InstancesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_TestPermissionsResponse class];
  query.loggingName = @"compute.instances.testIamPermissions";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesUpdateAccessConfig

@dynamic instance, networkInterface, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_AccessConfig *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       instance:(NSString *)instance
               networkInterface:(NSString *)networkInterface {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/updateAccessConfig";
  GTLRComputeQuery_InstancesUpdateAccessConfig *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.networkInterface = networkInterface;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.updateAccessConfig";
  return query;
}

@end

@implementation GTLRComputeQuery_InstancesUpdateNetworkInterface

@dynamic instance, networkInterface, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_NetworkInterface *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       instance:(NSString *)instance
               networkInterface:(NSString *)networkInterface {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instance", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instances/{instance}/updateNetworkInterface";
  GTLRComputeQuery_InstancesUpdateNetworkInterface *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.networkInterface = networkInterface;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instances.updateNetworkInterface";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceTemplatesDelete

@dynamic instanceTemplate, project, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                instanceTemplate:(NSString *)instanceTemplate {
  NSArray *pathParams = @[
    @"instanceTemplate", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/instanceTemplates/{instanceTemplate}";
  GTLRComputeQuery_InstanceTemplatesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.instanceTemplate = instanceTemplate;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instanceTemplates.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceTemplatesGet

@dynamic instanceTemplate, project;

+ (instancetype)queryWithProject:(NSString *)project
                instanceTemplate:(NSString *)instanceTemplate {
  NSArray *pathParams = @[
    @"instanceTemplate", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/instanceTemplates/{instanceTemplate}";
  GTLRComputeQuery_InstanceTemplatesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.instanceTemplate = instanceTemplate;
  query.expectedObjectClass = [GTLRCompute_InstanceTemplate class];
  query.loggingName = @"compute.instanceTemplates.get";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceTemplatesGetIamPolicy

@dynamic project, resource;

+ (instancetype)queryWithProject:(NSString *)project
                        resource:(NSString *)resource {
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/instanceTemplates/{resource}/getIamPolicy";
  GTLRComputeQuery_InstanceTemplatesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.instanceTemplates.getIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceTemplatesInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_InstanceTemplate *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/instanceTemplates";
  GTLRComputeQuery_InstanceTemplatesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.instanceTemplates.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceTemplatesList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/instanceTemplates";
  GTLRComputeQuery_InstanceTemplatesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_InstanceTemplateList class];
  query.loggingName = @"compute.instanceTemplates.list";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceTemplatesSetIamPolicy

@dynamic project, resource;

+ (instancetype)queryWithObject:(GTLRCompute_GlobalSetPolicyRequest *)object
                        project:(NSString *)project
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/instanceTemplates/{resource}/setIamPolicy";
  GTLRComputeQuery_InstanceTemplatesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.instanceTemplates.setIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_InstanceTemplatesTestIamPermissions

@dynamic project, resource;

+ (instancetype)queryWithObject:(GTLRCompute_TestPermissionsRequest *)object
                        project:(NSString *)project
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/instanceTemplates/{resource}/testIamPermissions";
  GTLRComputeQuery_InstanceTemplatesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_TestPermissionsResponse class];
  query.loggingName = @"compute.instanceTemplates.testIamPermissions";
  return query;
}

@end

@implementation GTLRComputeQuery_InterconnectAttachmentsAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/interconnectAttachments";
  GTLRComputeQuery_InterconnectAttachmentsAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_InterconnectAttachmentAggregatedList class];
  query.loggingName = @"compute.interconnectAttachments.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_InterconnectAttachmentsDelete

@dynamic interconnectAttachment, project, region, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
          interconnectAttachment:(NSString *)interconnectAttachment {
  NSArray *pathParams = @[
    @"interconnectAttachment", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}";
  GTLRComputeQuery_InterconnectAttachmentsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.interconnectAttachment = interconnectAttachment;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.interconnectAttachments.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_InterconnectAttachmentsGet

@dynamic interconnectAttachment, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
          interconnectAttachment:(NSString *)interconnectAttachment {
  NSArray *pathParams = @[
    @"interconnectAttachment", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}";
  GTLRComputeQuery_InterconnectAttachmentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.interconnectAttachment = interconnectAttachment;
  query.expectedObjectClass = [GTLRCompute_InterconnectAttachment class];
  query.loggingName = @"compute.interconnectAttachments.get";
  return query;
}

@end

@implementation GTLRComputeQuery_InterconnectAttachmentsInsert

@dynamic project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_InterconnectAttachment *)object
                        project:(NSString *)project
                         region:(NSString *)region {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/interconnectAttachments";
  GTLRComputeQuery_InterconnectAttachmentsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.interconnectAttachments.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_InterconnectAttachmentsList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/interconnectAttachments";
  GTLRComputeQuery_InterconnectAttachmentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_InterconnectAttachmentList class];
  query.loggingName = @"compute.interconnectAttachments.list";
  return query;
}

@end

@implementation GTLRComputeQuery_InterconnectAttachmentsPatch

@dynamic interconnectAttachment, project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_InterconnectAttachment *)object
                        project:(NSString *)project
                         region:(NSString *)region
         interconnectAttachment:(NSString *)interconnectAttachment {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"interconnectAttachment", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}";
  GTLRComputeQuery_InterconnectAttachmentsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.interconnectAttachment = interconnectAttachment;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.interconnectAttachments.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_InterconnectLocationsGet

@dynamic interconnectLocation, project;

+ (instancetype)queryWithProject:(NSString *)project
            interconnectLocation:(NSString *)interconnectLocation {
  NSArray *pathParams = @[
    @"interconnectLocation", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/interconnectLocations/{interconnectLocation}";
  GTLRComputeQuery_InterconnectLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.interconnectLocation = interconnectLocation;
  query.expectedObjectClass = [GTLRCompute_InterconnectLocation class];
  query.loggingName = @"compute.interconnectLocations.get";
  return query;
}

@end

@implementation GTLRComputeQuery_InterconnectLocationsList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/interconnectLocations";
  GTLRComputeQuery_InterconnectLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_InterconnectLocationList class];
  query.loggingName = @"compute.interconnectLocations.list";
  return query;
}

@end

@implementation GTLRComputeQuery_InterconnectsDelete

@dynamic interconnect, project, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                    interconnect:(NSString *)interconnect {
  NSArray *pathParams = @[
    @"interconnect", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/interconnects/{interconnect}";
  GTLRComputeQuery_InterconnectsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.interconnect = interconnect;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.interconnects.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_InterconnectsGet

@dynamic interconnect, project;

+ (instancetype)queryWithProject:(NSString *)project
                    interconnect:(NSString *)interconnect {
  NSArray *pathParams = @[
    @"interconnect", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/interconnects/{interconnect}";
  GTLRComputeQuery_InterconnectsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.interconnect = interconnect;
  query.expectedObjectClass = [GTLRCompute_Interconnect class];
  query.loggingName = @"compute.interconnects.get";
  return query;
}

@end

@implementation GTLRComputeQuery_InterconnectsGetDiagnostics

@dynamic interconnect, project;

+ (instancetype)queryWithProject:(NSString *)project
                    interconnect:(NSString *)interconnect {
  NSArray *pathParams = @[
    @"interconnect", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/interconnects/{interconnect}/getDiagnostics";
  GTLRComputeQuery_InterconnectsGetDiagnostics *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.interconnect = interconnect;
  query.expectedObjectClass = [GTLRCompute_InterconnectsGetDiagnosticsResponse class];
  query.loggingName = @"compute.interconnects.getDiagnostics";
  return query;
}

@end

@implementation GTLRComputeQuery_InterconnectsInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Interconnect *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/interconnects";
  GTLRComputeQuery_InterconnectsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.interconnects.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_InterconnectsList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/interconnects";
  GTLRComputeQuery_InterconnectsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_InterconnectList class];
  query.loggingName = @"compute.interconnects.list";
  return query;
}

@end

@implementation GTLRComputeQuery_InterconnectsPatch

@dynamic interconnect, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Interconnect *)object
                        project:(NSString *)project
                   interconnect:(NSString *)interconnect {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"interconnect", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/interconnects/{interconnect}";
  GTLRComputeQuery_InterconnectsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.interconnect = interconnect;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.interconnects.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_LicenseCodesGet

@dynamic licenseCode, project;

+ (instancetype)queryWithProject:(NSString *)project
                     licenseCode:(NSString *)licenseCode {
  NSArray *pathParams = @[
    @"licenseCode", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/licenseCodes/{licenseCode}";
  GTLRComputeQuery_LicenseCodesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.licenseCode = licenseCode;
  query.expectedObjectClass = [GTLRCompute_LicenseCode class];
  query.loggingName = @"compute.licenseCodes.get";
  return query;
}

@end

@implementation GTLRComputeQuery_LicenseCodesTestIamPermissions

@dynamic project, resource;

+ (instancetype)queryWithObject:(GTLRCompute_TestPermissionsRequest *)object
                        project:(NSString *)project
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/licenseCodes/{resource}/testIamPermissions";
  GTLRComputeQuery_LicenseCodesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_TestPermissionsResponse class];
  query.loggingName = @"compute.licenseCodes.testIamPermissions";
  return query;
}

@end

@implementation GTLRComputeQuery_LicensesDelete

@dynamic license, project, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                         license:(NSString *)license {
  NSArray *pathParams = @[
    @"license", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/licenses/{license}";
  GTLRComputeQuery_LicensesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.license = license;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.licenses.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_LicensesGet

@dynamic license, project;

+ (instancetype)queryWithProject:(NSString *)project
                         license:(NSString *)license {
  NSArray *pathParams = @[
    @"license", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/licenses/{license}";
  GTLRComputeQuery_LicensesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.license = license;
  query.expectedObjectClass = [GTLRCompute_License class];
  query.loggingName = @"compute.licenses.get";
  return query;
}

@end

@implementation GTLRComputeQuery_LicensesGetIamPolicy

@dynamic project, resource;

+ (instancetype)queryWithProject:(NSString *)project
                        resource:(NSString *)resource {
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/licenses/{resource}/getIamPolicy";
  GTLRComputeQuery_LicensesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.licenses.getIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_LicensesInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_License *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/licenses";
  GTLRComputeQuery_LicensesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.licenses.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_LicensesList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/licenses";
  GTLRComputeQuery_LicensesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_LicensesListResponse class];
  query.loggingName = @"compute.licenses.list";
  return query;
}

@end

@implementation GTLRComputeQuery_LicensesSetIamPolicy

@dynamic project, resource;

+ (instancetype)queryWithObject:(GTLRCompute_GlobalSetPolicyRequest *)object
                        project:(NSString *)project
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/licenses/{resource}/setIamPolicy";
  GTLRComputeQuery_LicensesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.licenses.setIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_LicensesTestIamPermissions

@dynamic project, resource;

+ (instancetype)queryWithObject:(GTLRCompute_TestPermissionsRequest *)object
                        project:(NSString *)project
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/licenses/{resource}/testIamPermissions";
  GTLRComputeQuery_LicensesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_TestPermissionsResponse class];
  query.loggingName = @"compute.licenses.testIamPermissions";
  return query;
}

@end

@implementation GTLRComputeQuery_MachineTypesAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/machineTypes";
  GTLRComputeQuery_MachineTypesAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_MachineTypeAggregatedList class];
  query.loggingName = @"compute.machineTypes.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_MachineTypesGet

@dynamic machineType, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                     machineType:(NSString *)machineType {
  NSArray *pathParams = @[
    @"machineType", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/machineTypes/{machineType}";
  GTLRComputeQuery_MachineTypesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.machineType = machineType;
  query.expectedObjectClass = [GTLRCompute_MachineType class];
  query.loggingName = @"compute.machineTypes.get";
  return query;
}

@end

@implementation GTLRComputeQuery_MachineTypesList

@dynamic filter, maxResults, orderBy, pageToken, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty {
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/machineTypes";
  GTLRComputeQuery_MachineTypesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_MachineTypeList class];
  query.loggingName = @"compute.machineTypes.list";
  return query;
}

@end

@implementation GTLRComputeQuery_NetworksAddPeering

@dynamic network, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_NetworksAddPeeringRequest *)object
                        project:(NSString *)project
                        network:(NSString *)network {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"network", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/networks/{network}/addPeering";
  GTLRComputeQuery_NetworksAddPeering *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.network = network;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.networks.addPeering";
  return query;
}

@end

@implementation GTLRComputeQuery_NetworksDelete

@dynamic network, project, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                         network:(NSString *)network {
  NSArray *pathParams = @[
    @"network", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/networks/{network}";
  GTLRComputeQuery_NetworksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.network = network;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.networks.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_NetworksGet

@dynamic network, project;

+ (instancetype)queryWithProject:(NSString *)project
                         network:(NSString *)network {
  NSArray *pathParams = @[
    @"network", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/networks/{network}";
  GTLRComputeQuery_NetworksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.network = network;
  query.expectedObjectClass = [GTLRCompute_Network class];
  query.loggingName = @"compute.networks.get";
  return query;
}

@end

@implementation GTLRComputeQuery_NetworksInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Network *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/networks";
  GTLRComputeQuery_NetworksInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.networks.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_NetworksList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/networks";
  GTLRComputeQuery_NetworksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_NetworkList class];
  query.loggingName = @"compute.networks.list";
  return query;
}

@end

@implementation GTLRComputeQuery_NetworksPatch

@dynamic network, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Network *)object
                        project:(NSString *)project
                        network:(NSString *)network {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"network", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/networks/{network}";
  GTLRComputeQuery_NetworksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.network = network;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.networks.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_NetworksRemovePeering

@dynamic network, project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_NetworksRemovePeeringRequest *)object
                        project:(NSString *)project
                        network:(NSString *)network {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"network", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/networks/{network}/removePeering";
  GTLRComputeQuery_NetworksRemovePeering *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.network = network;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.networks.removePeering";
  return query;
}

@end

@implementation GTLRComputeQuery_NetworksSwitchToCustomMode

@dynamic network, project, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                         network:(NSString *)network {
  NSArray *pathParams = @[
    @"network", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/networks/{network}/switchToCustomMode";
  GTLRComputeQuery_NetworksSwitchToCustomMode *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.network = network;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.networks.switchToCustomMode";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeGroupsAddNodes

@dynamic nodeGroup, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_NodeGroupsAddNodesRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                      nodeGroup:(NSString *)nodeGroup {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"nodeGroup", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes";
  GTLRComputeQuery_NodeGroupsAddNodes *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.nodeGroup = nodeGroup;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.nodeGroups.addNodes";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeGroupsAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/nodeGroups";
  GTLRComputeQuery_NodeGroupsAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_NodeGroupAggregatedList class];
  query.loggingName = @"compute.nodeGroups.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeGroupsDelete

@dynamic nodeGroup, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                       nodeGroup:(NSString *)nodeGroup {
  NSArray *pathParams = @[
    @"nodeGroup", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/nodeGroups/{nodeGroup}";
  GTLRComputeQuery_NodeGroupsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.nodeGroup = nodeGroup;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.nodeGroups.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeGroupsDeleteNodes

@dynamic nodeGroup, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_NodeGroupsDeleteNodesRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                      nodeGroup:(NSString *)nodeGroup {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"nodeGroup", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes";
  GTLRComputeQuery_NodeGroupsDeleteNodes *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.nodeGroup = nodeGroup;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.nodeGroups.deleteNodes";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeGroupsGet

@dynamic nodeGroup, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                       nodeGroup:(NSString *)nodeGroup {
  NSArray *pathParams = @[
    @"nodeGroup", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/nodeGroups/{nodeGroup}";
  GTLRComputeQuery_NodeGroupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.nodeGroup = nodeGroup;
  query.expectedObjectClass = [GTLRCompute_NodeGroup class];
  query.loggingName = @"compute.nodeGroups.get";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeGroupsGetIamPolicy

@dynamic project, resource, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        resource:(NSString *)resource {
  NSArray *pathParams = @[
    @"project", @"resource", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy";
  GTLRComputeQuery_NodeGroupsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.nodeGroups.getIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeGroupsInsert

@dynamic initialNodeCount, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_NodeGroup *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
               initialNodeCount:(NSInteger)initialNodeCount {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/nodeGroups";
  GTLRComputeQuery_NodeGroupsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.initialNodeCount = initialNodeCount;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.nodeGroups.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeGroupsList

@dynamic filter, maxResults, orderBy, pageToken, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty {
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/nodeGroups";
  GTLRComputeQuery_NodeGroupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_NodeGroupList class];
  query.loggingName = @"compute.nodeGroups.list";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeGroupsListNodes

@dynamic filter, maxResults, nodeGroup, orderBy, pageToken, project,
         zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                       nodeGroup:(NSString *)nodeGroup {
  NSArray *pathParams = @[
    @"nodeGroup", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes";
  GTLRComputeQuery_NodeGroupsListNodes *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.nodeGroup = nodeGroup;
  query.expectedObjectClass = [GTLRCompute_NodeGroupsListNodes class];
  query.loggingName = @"compute.nodeGroups.listNodes";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeGroupsSetIamPolicy

@dynamic project, resource, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_ZoneSetPolicyRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy";
  GTLRComputeQuery_NodeGroupsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.nodeGroups.setIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeGroupsSetNodeTemplate

@dynamic nodeGroup, project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_NodeGroupsSetNodeTemplateRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                      nodeGroup:(NSString *)nodeGroup {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"nodeGroup", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate";
  GTLRComputeQuery_NodeGroupsSetNodeTemplate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.nodeGroup = nodeGroup;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.nodeGroups.setNodeTemplate";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeGroupsTestIamPermissions

@dynamic project, resource, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_TestPermissionsRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions";
  GTLRComputeQuery_NodeGroupsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_TestPermissionsResponse class];
  query.loggingName = @"compute.nodeGroups.testIamPermissions";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeTemplatesAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/nodeTemplates";
  GTLRComputeQuery_NodeTemplatesAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_NodeTemplateAggregatedList class];
  query.loggingName = @"compute.nodeTemplates.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeTemplatesDelete

@dynamic nodeTemplate, project, region, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                    nodeTemplate:(NSString *)nodeTemplate {
  NSArray *pathParams = @[
    @"nodeTemplate", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/nodeTemplates/{nodeTemplate}";
  GTLRComputeQuery_NodeTemplatesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.nodeTemplate = nodeTemplate;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.nodeTemplates.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeTemplatesGet

@dynamic nodeTemplate, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                    nodeTemplate:(NSString *)nodeTemplate {
  NSArray *pathParams = @[
    @"nodeTemplate", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/nodeTemplates/{nodeTemplate}";
  GTLRComputeQuery_NodeTemplatesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.nodeTemplate = nodeTemplate;
  query.expectedObjectClass = [GTLRCompute_NodeTemplate class];
  query.loggingName = @"compute.nodeTemplates.get";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeTemplatesGetIamPolicy

@dynamic project, region, resource;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                        resource:(NSString *)resource {
  NSArray *pathParams = @[
    @"project", @"region", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy";
  GTLRComputeQuery_NodeTemplatesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.nodeTemplates.getIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeTemplatesInsert

@dynamic project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_NodeTemplate *)object
                        project:(NSString *)project
                         region:(NSString *)region {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/nodeTemplates";
  GTLRComputeQuery_NodeTemplatesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.nodeTemplates.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeTemplatesList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/nodeTemplates";
  GTLRComputeQuery_NodeTemplatesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_NodeTemplateList class];
  query.loggingName = @"compute.nodeTemplates.list";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeTemplatesSetIamPolicy

@dynamic project, region, resource;

+ (instancetype)queryWithObject:(GTLRCompute_RegionSetPolicyRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy";
  GTLRComputeQuery_NodeTemplatesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.nodeTemplates.setIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeTemplatesTestIamPermissions

@dynamic project, region, resource;

+ (instancetype)queryWithObject:(GTLRCompute_TestPermissionsRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions";
  GTLRComputeQuery_NodeTemplatesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_TestPermissionsResponse class];
  query.loggingName = @"compute.nodeTemplates.testIamPermissions";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeTypesAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/nodeTypes";
  GTLRComputeQuery_NodeTypesAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_NodeTypeAggregatedList class];
  query.loggingName = @"compute.nodeTypes.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeTypesGet

@dynamic nodeType, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        nodeType:(NSString *)nodeType {
  NSArray *pathParams = @[
    @"nodeType", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/nodeTypes/{nodeType}";
  GTLRComputeQuery_NodeTypesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.nodeType = nodeType;
  query.expectedObjectClass = [GTLRCompute_NodeType class];
  query.loggingName = @"compute.nodeTypes.get";
  return query;
}

@end

@implementation GTLRComputeQuery_NodeTypesList

@dynamic filter, maxResults, orderBy, pageToken, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty {
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/nodeTypes";
  GTLRComputeQuery_NodeTypesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_NodeTypeList class];
  query.loggingName = @"compute.nodeTypes.list";
  return query;
}

@end

@implementation GTLRComputeQuery_ProjectsDisableXpnHost

@dynamic project, requestId;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/disableXpnHost";
  GTLRComputeQuery_ProjectsDisableXpnHost *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.projects.disableXpnHost";
  return query;
}

@end

@implementation GTLRComputeQuery_ProjectsDisableXpnResource

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_ProjectsDisableXpnResourceRequest *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/disableXpnResource";
  GTLRComputeQuery_ProjectsDisableXpnResource *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.projects.disableXpnResource";
  return query;
}

@end

@implementation GTLRComputeQuery_ProjectsEnableXpnHost

@dynamic project, requestId;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/enableXpnHost";
  GTLRComputeQuery_ProjectsEnableXpnHost *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.projects.enableXpnHost";
  return query;
}

@end

@implementation GTLRComputeQuery_ProjectsEnableXpnResource

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_ProjectsEnableXpnResourceRequest *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/enableXpnResource";
  GTLRComputeQuery_ProjectsEnableXpnResource *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.projects.enableXpnResource";
  return query;
}

@end

@implementation GTLRComputeQuery_ProjectsGet

@dynamic project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}";
  GTLRComputeQuery_ProjectsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Project class];
  query.loggingName = @"compute.projects.get";
  return query;
}

@end

@implementation GTLRComputeQuery_ProjectsGetXpnHost

@dynamic project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/getXpnHost";
  GTLRComputeQuery_ProjectsGetXpnHost *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Project class];
  query.loggingName = @"compute.projects.getXpnHost";
  return query;
}

@end

@implementation GTLRComputeQuery_ProjectsGetXpnResources

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"orderBy" : @"order_by" };
}

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/getXpnResources";
  GTLRComputeQuery_ProjectsGetXpnResources *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_ProjectsGetXpnResources class];
  query.loggingName = @"compute.projects.getXpnResources";
  return query;
}

@end

@implementation GTLRComputeQuery_ProjectsListXpnHosts

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"orderBy" : @"order_by" };
}

+ (instancetype)queryWithObject:(GTLRCompute_ProjectsListXpnHostsRequest *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/listXpnHosts";
  GTLRComputeQuery_ProjectsListXpnHosts *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_XpnHostList class];
  query.loggingName = @"compute.projects.listXpnHosts";
  return query;
}

@end

@implementation GTLRComputeQuery_ProjectsMoveDisk

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_DiskMoveRequest *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/moveDisk";
  GTLRComputeQuery_ProjectsMoveDisk *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.projects.moveDisk";
  return query;
}

@end

@implementation GTLRComputeQuery_ProjectsMoveInstance

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_InstanceMoveRequest *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/moveInstance";
  GTLRComputeQuery_ProjectsMoveInstance *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.projects.moveInstance";
  return query;
}

@end

@implementation GTLRComputeQuery_ProjectsSetCommonInstanceMetadata

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Metadata *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/setCommonInstanceMetadata";
  GTLRComputeQuery_ProjectsSetCommonInstanceMetadata *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.projects.setCommonInstanceMetadata";
  return query;
}

@end

@implementation GTLRComputeQuery_ProjectsSetDefaultNetworkTier

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_ProjectsSetDefaultNetworkTierRequest *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/setDefaultNetworkTier";
  GTLRComputeQuery_ProjectsSetDefaultNetworkTier *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.projects.setDefaultNetworkTier";
  return query;
}

@end

@implementation GTLRComputeQuery_ProjectsSetUsageExportBucket

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_UsageExportLocation *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/setUsageExportBucket";
  GTLRComputeQuery_ProjectsSetUsageExportBucket *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.projects.setUsageExportBucket";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionAutoscalersDelete

@dynamic autoscaler, project, region, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                      autoscaler:(NSString *)autoscaler {
  NSArray *pathParams = @[
    @"autoscaler", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/autoscalers/{autoscaler}";
  GTLRComputeQuery_RegionAutoscalersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.autoscaler = autoscaler;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionAutoscalers.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionAutoscalersGet

@dynamic autoscaler, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                      autoscaler:(NSString *)autoscaler {
  NSArray *pathParams = @[
    @"autoscaler", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/autoscalers/{autoscaler}";
  GTLRComputeQuery_RegionAutoscalersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.autoscaler = autoscaler;
  query.expectedObjectClass = [GTLRCompute_Autoscaler class];
  query.loggingName = @"compute.regionAutoscalers.get";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionAutoscalersInsert

@dynamic project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Autoscaler *)object
                        project:(NSString *)project
                         region:(NSString *)region {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/autoscalers";
  GTLRComputeQuery_RegionAutoscalersInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionAutoscalers.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionAutoscalersList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/autoscalers";
  GTLRComputeQuery_RegionAutoscalersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_RegionAutoscalerList class];
  query.loggingName = @"compute.regionAutoscalers.list";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionAutoscalersPatch

@dynamic autoscaler, project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Autoscaler *)object
                        project:(NSString *)project
                         region:(NSString *)region {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/autoscalers";
  GTLRComputeQuery_RegionAutoscalersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionAutoscalers.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionAutoscalersUpdate

@dynamic autoscaler, project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Autoscaler *)object
                        project:(NSString *)project
                         region:(NSString *)region {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/autoscalers";
  GTLRComputeQuery_RegionAutoscalersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionAutoscalers.update";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionBackendServicesDelete

@dynamic backendService, project, region, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                  backendService:(NSString *)backendService {
  NSArray *pathParams = @[
    @"backendService", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/backendServices/{backendService}";
  GTLRComputeQuery_RegionBackendServicesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.backendService = backendService;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionBackendServices.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionBackendServicesGet

@dynamic backendService, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                  backendService:(NSString *)backendService {
  NSArray *pathParams = @[
    @"backendService", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/backendServices/{backendService}";
  GTLRComputeQuery_RegionBackendServicesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.backendService = backendService;
  query.expectedObjectClass = [GTLRCompute_BackendService class];
  query.loggingName = @"compute.regionBackendServices.get";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionBackendServicesGetHealth

@dynamic backendService, project, region;

+ (instancetype)queryWithObject:(GTLRCompute_ResourceGroupReference *)object
                        project:(NSString *)project
                         region:(NSString *)region
                 backendService:(NSString *)backendService {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"backendService", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/backendServices/{backendService}/getHealth";
  GTLRComputeQuery_RegionBackendServicesGetHealth *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.backendService = backendService;
  query.expectedObjectClass = [GTLRCompute_BackendServiceGroupHealth class];
  query.loggingName = @"compute.regionBackendServices.getHealth";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionBackendServicesInsert

@dynamic project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_BackendService *)object
                        project:(NSString *)project
                         region:(NSString *)region {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/backendServices";
  GTLRComputeQuery_RegionBackendServicesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionBackendServices.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionBackendServicesList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/backendServices";
  GTLRComputeQuery_RegionBackendServicesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_BackendServiceList class];
  query.loggingName = @"compute.regionBackendServices.list";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionBackendServicesPatch

@dynamic backendService, project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_BackendService *)object
                        project:(NSString *)project
                         region:(NSString *)region
                 backendService:(NSString *)backendService {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"backendService", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/backendServices/{backendService}";
  GTLRComputeQuery_RegionBackendServicesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.backendService = backendService;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionBackendServices.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionBackendServicesUpdate

@dynamic backendService, project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_BackendService *)object
                        project:(NSString *)project
                         region:(NSString *)region
                 backendService:(NSString *)backendService {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"backendService", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/backendServices/{backendService}";
  GTLRComputeQuery_RegionBackendServicesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.backendService = backendService;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionBackendServices.update";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionCommitmentsAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/commitments";
  GTLRComputeQuery_RegionCommitmentsAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_CommitmentAggregatedList class];
  query.loggingName = @"compute.regionCommitments.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionCommitmentsGet

@dynamic commitment, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                      commitment:(NSString *)commitment {
  NSArray *pathParams = @[
    @"commitment", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/commitments/{commitment}";
  GTLRComputeQuery_RegionCommitmentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.commitment = commitment;
  query.expectedObjectClass = [GTLRCompute_Commitment class];
  query.loggingName = @"compute.regionCommitments.get";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionCommitmentsInsert

@dynamic project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Commitment *)object
                        project:(NSString *)project
                         region:(NSString *)region {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/commitments";
  GTLRComputeQuery_RegionCommitmentsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionCommitments.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionCommitmentsList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/commitments";
  GTLRComputeQuery_RegionCommitmentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_CommitmentList class];
  query.loggingName = @"compute.regionCommitments.list";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionDisksCreateSnapshot

@dynamic disk, project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Snapshot *)object
                        project:(NSString *)project
                         region:(NSString *)region
                           disk:(NSString *)disk {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"disk", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/disks/{disk}/createSnapshot";
  GTLRComputeQuery_RegionDisksCreateSnapshot *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.disk = disk;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionDisks.createSnapshot";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionDisksDelete

@dynamic disk, project, region, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                            disk:(NSString *)disk {
  NSArray *pathParams = @[
    @"disk", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/disks/{disk}";
  GTLRComputeQuery_RegionDisksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.disk = disk;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionDisks.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionDisksGet

@dynamic disk, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                            disk:(NSString *)disk {
  NSArray *pathParams = @[
    @"disk", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/disks/{disk}";
  GTLRComputeQuery_RegionDisksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.disk = disk;
  query.expectedObjectClass = [GTLRCompute_Disk class];
  query.loggingName = @"compute.regionDisks.get";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionDisksInsert

@dynamic project, region, requestId, sourceImage;

+ (instancetype)queryWithObject:(GTLRCompute_Disk *)object
                        project:(NSString *)project
                         region:(NSString *)region {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/disks";
  GTLRComputeQuery_RegionDisksInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionDisks.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionDisksList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/disks";
  GTLRComputeQuery_RegionDisksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_DiskList class];
  query.loggingName = @"compute.regionDisks.list";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionDisksResize

@dynamic disk, project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_RegionDisksResizeRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
                           disk:(NSString *)disk {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"disk", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/disks/{disk}/resize";
  GTLRComputeQuery_RegionDisksResize *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.disk = disk;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionDisks.resize";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionDisksSetLabels

@dynamic project, region, requestId, resource;

+ (instancetype)queryWithObject:(GTLRCompute_RegionSetLabelsRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/disks/{resource}/setLabels";
  GTLRComputeQuery_RegionDisksSetLabels *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionDisks.setLabels";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionDisksTestIamPermissions

@dynamic project, region, resource;

+ (instancetype)queryWithObject:(GTLRCompute_TestPermissionsRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/disks/{resource}/testIamPermissions";
  GTLRComputeQuery_RegionDisksTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_TestPermissionsResponse class];
  query.loggingName = @"compute.regionDisks.testIamPermissions";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionDiskTypesGet

@dynamic diskType, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                        diskType:(NSString *)diskType {
  NSArray *pathParams = @[
    @"diskType", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/diskTypes/{diskType}";
  GTLRComputeQuery_RegionDiskTypesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.diskType = diskType;
  query.expectedObjectClass = [GTLRCompute_DiskType class];
  query.loggingName = @"compute.regionDiskTypes.get";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionDiskTypesList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/diskTypes";
  GTLRComputeQuery_RegionDiskTypesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_RegionDiskTypeList class];
  query.loggingName = @"compute.regionDiskTypes.list";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionInstanceGroupManagersAbandonInstances

@dynamic instanceGroupManager, project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_RegionInstanceGroupManagersAbandonInstancesRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances";
  GTLRComputeQuery_RegionInstanceGroupManagersAbandonInstances *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionInstanceGroupManagers.abandonInstances";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionInstanceGroupManagersDelete

@dynamic instanceGroupManager, project, region, requestId;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
            instanceGroupManager:(NSString *)instanceGroupManager {
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}";
  GTLRComputeQuery_RegionInstanceGroupManagersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionInstanceGroupManagers.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionInstanceGroupManagersDeleteInstances

@dynamic instanceGroupManager, project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_RegionInstanceGroupManagersDeleteInstancesRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances";
  GTLRComputeQuery_RegionInstanceGroupManagersDeleteInstances *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionInstanceGroupManagers.deleteInstances";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionInstanceGroupManagersGet

@dynamic instanceGroupManager, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
            instanceGroupManager:(NSString *)instanceGroupManager {
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}";
  GTLRComputeQuery_RegionInstanceGroupManagersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_InstanceGroupManager class];
  query.loggingName = @"compute.regionInstanceGroupManagers.get";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionInstanceGroupManagersInsert

@dynamic project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_InstanceGroupManager *)object
                        project:(NSString *)project
                         region:(NSString *)region {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/instanceGroupManagers";
  GTLRComputeQuery_RegionInstanceGroupManagersInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionInstanceGroupManagers.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionInstanceGroupManagersList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/instanceGroupManagers";
  GTLRComputeQuery_RegionInstanceGroupManagersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_RegionInstanceGroupManagerList class];
  query.loggingName = @"compute.regionInstanceGroupManagers.list";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionInstanceGroupManagersListManagedInstances

@dynamic filter, instanceGroupManager, maxResults, orderBy, pageToken, project,
         region;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"orderBy" : @"order_by" };
}

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
            instanceGroupManager:(NSString *)instanceGroupManager {
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances";
  GTLRComputeQuery_RegionInstanceGroupManagersListManagedInstances *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_RegionInstanceGroupManagersListInstancesResponse class];
  query.loggingName = @"compute.regionInstanceGroupManagers.listManagedInstances";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionInstanceGroupManagersPatch

@dynamic instanceGroupManager, project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_InstanceGroupManager *)object
                        project:(NSString *)project
                         region:(NSString *)region
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}";
  GTLRComputeQuery_RegionInstanceGroupManagersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionInstanceGroupManagers.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionInstanceGroupManagersRecreateInstances

@dynamic instanceGroupManager, project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_RegionInstanceGroupManagersRecreateRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances";
  GTLRComputeQuery_RegionInstanceGroupManagersRecreateInstances *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionInstanceGroupManagers.recreateInstances";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionInstanceGroupManagersResize

@dynamic instanceGroupManager, project, region, requestId, size;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
            instanceGroupManager:(NSString *)instanceGroupManager
                            size:(NSInteger)size {
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize";
  GTLRComputeQuery_RegionInstanceGroupManagersResize *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.instanceGroupManager = instanceGroupManager;
  query.size = size;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionInstanceGroupManagers.resize";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionInstanceGroupManagersSetInstanceTemplate

@dynamic instanceGroupManager, project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_RegionInstanceGroupManagersSetTemplateRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate";
  GTLRComputeQuery_RegionInstanceGroupManagersSetInstanceTemplate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionInstanceGroupManagers.setInstanceTemplate";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionInstanceGroupManagersSetTargetPools

@dynamic instanceGroupManager, project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_RegionInstanceGroupManagersSetTargetPoolsRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools";
  GTLRComputeQuery_RegionInstanceGroupManagersSetTargetPools *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionInstanceGroupManagers.setTargetPools";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionInstanceGroupsGet

@dynamic instanceGroup, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                   instanceGroup:(NSString *)instanceGroup {
  NSArray *pathParams = @[
    @"instanceGroup", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/instanceGroups/{instanceGroup}";
  GTLRComputeQuery_RegionInstanceGroupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.instanceGroup = instanceGroup;
  query.expectedObjectClass = [GTLRCompute_InstanceGroup class];
  query.loggingName = @"compute.regionInstanceGroups.get";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionInstanceGroupsList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/instanceGroups";
  GTLRComputeQuery_RegionInstanceGroupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_RegionInstanceGroupList class];
  query.loggingName = @"compute.regionInstanceGroups.list";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionInstanceGroupsListInstances

@dynamic filter, instanceGroup, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithObject:(GTLRCompute_RegionInstanceGroupsListInstancesRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
                  instanceGroup:(NSString *)instanceGroup {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroup", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances";
  GTLRComputeQuery_RegionInstanceGroupsListInstances *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.instanceGroup = instanceGroup;
  query.expectedObjectClass = [GTLRCompute_RegionInstanceGroupsListInstances class];
  query.loggingName = @"compute.regionInstanceGroups.listInstances";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionInstanceGroupsSetNamedPorts

@dynamic instanceGroup, project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_RegionInstanceGroupsSetNamedPortsRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
                  instanceGroup:(NSString *)instanceGroup {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroup", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts";
  GTLRComputeQuery_RegionInstanceGroupsSetNamedPorts *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.instanceGroup = instanceGroup;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionInstanceGroups.setNamedPorts";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionOperationsDelete

@dynamic operation, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                       operation:(NSString *)operation {
  NSArray *pathParams = @[
    @"operation", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/operations/{operation}";
  GTLRComputeQuery_RegionOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.operation = operation;
  query.loggingName = @"compute.regionOperations.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionOperationsGet

@dynamic operation, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                       operation:(NSString *)operation {
  NSArray *pathParams = @[
    @"operation", @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/operations/{operation}";
  GTLRComputeQuery_RegionOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.operation = operation;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.regionOperations.get";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionOperationsList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/operations";
  GTLRComputeQuery_RegionOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_OperationList class];
  query.loggingName = @"compute.regionOperations.list";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionsGet

@dynamic project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}";
  GTLRComputeQuery_RegionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Region class];
  query.loggingName = @"compute.regions.get";
  return query;
}

@end

@implementation GTLRComputeQuery_RegionsList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/regions";
  GTLRComputeQuery_RegionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_RegionList class];
  query.loggingName = @"compute.regions.list";
  return query;
}

@end

@implementation GTLRComputeQuery_RoutersAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/routers";
  GTLRComputeQuery_RoutersAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_RouterAggregatedList class];
  query.loggingName = @"compute.routers.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_RoutersDelete

@dynamic project, region, requestId, router;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                          router:(NSString *)router {
  NSArray *pathParams = @[
    @"project", @"region", @"router"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/routers/{router}";
  GTLRComputeQuery_RoutersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.router = router;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.routers.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_RoutersGet

@dynamic project, region, router;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                          router:(NSString *)router {
  NSArray *pathParams = @[
    @"project", @"region", @"router"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/routers/{router}";
  GTLRComputeQuery_RoutersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.router = router;
  query.expectedObjectClass = [GTLRCompute_Router class];
  query.loggingName = @"compute.routers.get";
  return query;
}

@end

@implementation GTLRComputeQuery_RoutersGetNatMappingInfo

@dynamic filter, maxResults, orderBy, pageToken, project, region, router;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                          router:(NSString *)router {
  NSArray *pathParams = @[
    @"project", @"region", @"router"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/routers/{router}/getNatMappingInfo";
  GTLRComputeQuery_RoutersGetNatMappingInfo *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.router = router;
  query.expectedObjectClass = [GTLRCompute_VmEndpointNatMappingsList class];
  query.loggingName = @"compute.routers.getNatMappingInfo";
  return query;
}

@end

@implementation GTLRComputeQuery_RoutersGetRouterStatus

@dynamic project, region, router;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                          router:(NSString *)router {
  NSArray *pathParams = @[
    @"project", @"region", @"router"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/routers/{router}/getRouterStatus";
  GTLRComputeQuery_RoutersGetRouterStatus *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.router = router;
  query.expectedObjectClass = [GTLRCompute_RouterStatusResponse class];
  query.loggingName = @"compute.routers.getRouterStatus";
  return query;
}

@end

@implementation GTLRComputeQuery_RoutersInsert

@dynamic project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Router *)object
                        project:(NSString *)project
                         region:(NSString *)region {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/routers";
  GTLRComputeQuery_RoutersInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.routers.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_RoutersList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/routers";
  GTLRComputeQuery_RoutersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_RouterList class];
  query.loggingName = @"compute.routers.list";
  return query;
}

@end

@implementation GTLRComputeQuery_RoutersPatch

@dynamic project, region, requestId, router;

+ (instancetype)queryWithObject:(GTLRCompute_Router *)object
                        project:(NSString *)project
                         region:(NSString *)region
                         router:(NSString *)router {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"router"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/routers/{router}";
  GTLRComputeQuery_RoutersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.router = router;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.routers.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_RoutersPreview

@dynamic project, region, router;

+ (instancetype)queryWithObject:(GTLRCompute_Router *)object
                        project:(NSString *)project
                         region:(NSString *)region
                         router:(NSString *)router {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"router"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/routers/{router}/preview";
  GTLRComputeQuery_RoutersPreview *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.router = router;
  query.expectedObjectClass = [GTLRCompute_RoutersPreviewResponse class];
  query.loggingName = @"compute.routers.preview";
  return query;
}

@end

@implementation GTLRComputeQuery_RoutersUpdate

@dynamic project, region, requestId, router;

+ (instancetype)queryWithObject:(GTLRCompute_Router *)object
                        project:(NSString *)project
                         region:(NSString *)region
                         router:(NSString *)router {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"router"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/routers/{router}";
  GTLRComputeQuery_RoutersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.router = router;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.routers.update";
  return query;
}

@end

@implementation GTLRComputeQuery_RoutesDelete

@dynamic project, requestId, route;

+ (instancetype)queryWithProject:(NSString *)project
                           route:(NSString *)route {
  NSArray *pathParams = @[
    @"project", @"route"
  ];
  NSString *pathURITemplate = @"{project}/global/routes/{route}";
  GTLRComputeQuery_RoutesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.route = route;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.routes.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_RoutesGet

@dynamic project, route;

+ (instancetype)queryWithProject:(NSString *)project
                           route:(NSString *)route {
  NSArray *pathParams = @[
    @"project", @"route"
  ];
  NSString *pathURITemplate = @"{project}/global/routes/{route}";
  GTLRComputeQuery_RoutesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.route = route;
  query.expectedObjectClass = [GTLRCompute_Route class];
  query.loggingName = @"compute.routes.get";
  return query;
}

@end

@implementation GTLRComputeQuery_RoutesInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Route *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/routes";
  GTLRComputeQuery_RoutesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.routes.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_RoutesList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/routes";
  GTLRComputeQuery_RoutesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_RouteList class];
  query.loggingName = @"compute.routes.list";
  return query;
}

@end

@implementation GTLRComputeQuery_SecurityPoliciesAddRule

@dynamic project, securityPolicy;

+ (instancetype)queryWithObject:(GTLRCompute_SecurityPolicyRule *)object
                        project:(NSString *)project
                 securityPolicy:(NSString *)securityPolicy {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"securityPolicy"
  ];
  NSString *pathURITemplate = @"{project}/global/securityPolicies/{securityPolicy}/addRule";
  GTLRComputeQuery_SecurityPoliciesAddRule *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.securityPolicy = securityPolicy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.securityPolicies.addRule";
  return query;
}

@end

@implementation GTLRComputeQuery_SecurityPoliciesDelete

@dynamic project, requestId, securityPolicy;

+ (instancetype)queryWithProject:(NSString *)project
                  securityPolicy:(NSString *)securityPolicy {
  NSArray *pathParams = @[
    @"project", @"securityPolicy"
  ];
  NSString *pathURITemplate = @"{project}/global/securityPolicies/{securityPolicy}";
  GTLRComputeQuery_SecurityPoliciesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.securityPolicy = securityPolicy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.securityPolicies.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_SecurityPoliciesGet

@dynamic project, securityPolicy;

+ (instancetype)queryWithProject:(NSString *)project
                  securityPolicy:(NSString *)securityPolicy {
  NSArray *pathParams = @[
    @"project", @"securityPolicy"
  ];
  NSString *pathURITemplate = @"{project}/global/securityPolicies/{securityPolicy}";
  GTLRComputeQuery_SecurityPoliciesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.securityPolicy = securityPolicy;
  query.expectedObjectClass = [GTLRCompute_SecurityPolicy class];
  query.loggingName = @"compute.securityPolicies.get";
  return query;
}

@end

@implementation GTLRComputeQuery_SecurityPoliciesGetRule

@dynamic priority, project, securityPolicy;

+ (instancetype)queryWithProject:(NSString *)project
                  securityPolicy:(NSString *)securityPolicy {
  NSArray *pathParams = @[
    @"project", @"securityPolicy"
  ];
  NSString *pathURITemplate = @"{project}/global/securityPolicies/{securityPolicy}/getRule";
  GTLRComputeQuery_SecurityPoliciesGetRule *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.securityPolicy = securityPolicy;
  query.expectedObjectClass = [GTLRCompute_SecurityPolicyRule class];
  query.loggingName = @"compute.securityPolicies.getRule";
  return query;
}

@end

@implementation GTLRComputeQuery_SecurityPoliciesInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_SecurityPolicy *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/securityPolicies";
  GTLRComputeQuery_SecurityPoliciesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.securityPolicies.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_SecurityPoliciesList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/securityPolicies";
  GTLRComputeQuery_SecurityPoliciesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_SecurityPolicyList class];
  query.loggingName = @"compute.securityPolicies.list";
  return query;
}

@end

@implementation GTLRComputeQuery_SecurityPoliciesPatch

@dynamic project, requestId, securityPolicy;

+ (instancetype)queryWithObject:(GTLRCompute_SecurityPolicy *)object
                        project:(NSString *)project
                 securityPolicy:(NSString *)securityPolicy {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"securityPolicy"
  ];
  NSString *pathURITemplate = @"{project}/global/securityPolicies/{securityPolicy}";
  GTLRComputeQuery_SecurityPoliciesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.securityPolicy = securityPolicy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.securityPolicies.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_SecurityPoliciesPatchRule

@dynamic priority, project, securityPolicy;

+ (instancetype)queryWithObject:(GTLRCompute_SecurityPolicyRule *)object
                        project:(NSString *)project
                 securityPolicy:(NSString *)securityPolicy {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"securityPolicy"
  ];
  NSString *pathURITemplate = @"{project}/global/securityPolicies/{securityPolicy}/patchRule";
  GTLRComputeQuery_SecurityPoliciesPatchRule *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.securityPolicy = securityPolicy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.securityPolicies.patchRule";
  return query;
}

@end

@implementation GTLRComputeQuery_SecurityPoliciesRemoveRule

@dynamic priority, project, securityPolicy;

+ (instancetype)queryWithProject:(NSString *)project
                  securityPolicy:(NSString *)securityPolicy {
  NSArray *pathParams = @[
    @"project", @"securityPolicy"
  ];
  NSString *pathURITemplate = @"{project}/global/securityPolicies/{securityPolicy}/removeRule";
  GTLRComputeQuery_SecurityPoliciesRemoveRule *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.securityPolicy = securityPolicy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.securityPolicies.removeRule";
  return query;
}

@end

@implementation GTLRComputeQuery_SnapshotsDelete

@dynamic project, requestId, snapshot;

+ (instancetype)queryWithProject:(NSString *)project
                        snapshot:(NSString *)snapshot {
  NSArray *pathParams = @[
    @"project", @"snapshot"
  ];
  NSString *pathURITemplate = @"{project}/global/snapshots/{snapshot}";
  GTLRComputeQuery_SnapshotsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.snapshot = snapshot;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.snapshots.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_SnapshotsGet

@dynamic project, snapshot;

+ (instancetype)queryWithProject:(NSString *)project
                        snapshot:(NSString *)snapshot {
  NSArray *pathParams = @[
    @"project", @"snapshot"
  ];
  NSString *pathURITemplate = @"{project}/global/snapshots/{snapshot}";
  GTLRComputeQuery_SnapshotsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.snapshot = snapshot;
  query.expectedObjectClass = [GTLRCompute_Snapshot class];
  query.loggingName = @"compute.snapshots.get";
  return query;
}

@end

@implementation GTLRComputeQuery_SnapshotsGetIamPolicy

@dynamic project, resource;

+ (instancetype)queryWithProject:(NSString *)project
                        resource:(NSString *)resource {
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/snapshots/{resource}/getIamPolicy";
  GTLRComputeQuery_SnapshotsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.snapshots.getIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_SnapshotsList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/snapshots";
  GTLRComputeQuery_SnapshotsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_SnapshotList class];
  query.loggingName = @"compute.snapshots.list";
  return query;
}

@end

@implementation GTLRComputeQuery_SnapshotsSetIamPolicy

@dynamic project, resource;

+ (instancetype)queryWithObject:(GTLRCompute_GlobalSetPolicyRequest *)object
                        project:(NSString *)project
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/snapshots/{resource}/setIamPolicy";
  GTLRComputeQuery_SnapshotsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.snapshots.setIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_SnapshotsSetLabels

@dynamic project, resource;

+ (instancetype)queryWithObject:(GTLRCompute_GlobalSetLabelsRequest *)object
                        project:(NSString *)project
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/snapshots/{resource}/setLabels";
  GTLRComputeQuery_SnapshotsSetLabels *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.snapshots.setLabels";
  return query;
}

@end

@implementation GTLRComputeQuery_SnapshotsTestIamPermissions

@dynamic project, resource;

+ (instancetype)queryWithObject:(GTLRCompute_TestPermissionsRequest *)object
                        project:(NSString *)project
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/snapshots/{resource}/testIamPermissions";
  GTLRComputeQuery_SnapshotsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_TestPermissionsResponse class];
  query.loggingName = @"compute.snapshots.testIamPermissions";
  return query;
}

@end

@implementation GTLRComputeQuery_SslCertificatesDelete

@dynamic project, requestId, sslCertificate;

+ (instancetype)queryWithProject:(NSString *)project
                  sslCertificate:(NSString *)sslCertificate {
  NSArray *pathParams = @[
    @"project", @"sslCertificate"
  ];
  NSString *pathURITemplate = @"{project}/global/sslCertificates/{sslCertificate}";
  GTLRComputeQuery_SslCertificatesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.sslCertificate = sslCertificate;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.sslCertificates.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_SslCertificatesGet

@dynamic project, sslCertificate;

+ (instancetype)queryWithProject:(NSString *)project
                  sslCertificate:(NSString *)sslCertificate {
  NSArray *pathParams = @[
    @"project", @"sslCertificate"
  ];
  NSString *pathURITemplate = @"{project}/global/sslCertificates/{sslCertificate}";
  GTLRComputeQuery_SslCertificatesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.sslCertificate = sslCertificate;
  query.expectedObjectClass = [GTLRCompute_SslCertificate class];
  query.loggingName = @"compute.sslCertificates.get";
  return query;
}

@end

@implementation GTLRComputeQuery_SslCertificatesInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_SslCertificate *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/sslCertificates";
  GTLRComputeQuery_SslCertificatesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.sslCertificates.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_SslCertificatesList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/sslCertificates";
  GTLRComputeQuery_SslCertificatesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_SslCertificateList class];
  query.loggingName = @"compute.sslCertificates.list";
  return query;
}

@end

@implementation GTLRComputeQuery_SslPoliciesDelete

@dynamic project, requestId, sslPolicy;

+ (instancetype)queryWithProject:(NSString *)project
                       sslPolicy:(NSString *)sslPolicy {
  NSArray *pathParams = @[
    @"project", @"sslPolicy"
  ];
  NSString *pathURITemplate = @"{project}/global/sslPolicies/{sslPolicy}";
  GTLRComputeQuery_SslPoliciesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.sslPolicy = sslPolicy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.sslPolicies.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_SslPoliciesGet

@dynamic project, sslPolicy;

+ (instancetype)queryWithProject:(NSString *)project
                       sslPolicy:(NSString *)sslPolicy {
  NSArray *pathParams = @[
    @"project", @"sslPolicy"
  ];
  NSString *pathURITemplate = @"{project}/global/sslPolicies/{sslPolicy}";
  GTLRComputeQuery_SslPoliciesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.sslPolicy = sslPolicy;
  query.expectedObjectClass = [GTLRCompute_SslPolicy class];
  query.loggingName = @"compute.sslPolicies.get";
  return query;
}

@end

@implementation GTLRComputeQuery_SslPoliciesInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_SslPolicy *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/sslPolicies";
  GTLRComputeQuery_SslPoliciesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.sslPolicies.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_SslPoliciesList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/sslPolicies";
  GTLRComputeQuery_SslPoliciesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_SslPoliciesList class];
  query.loggingName = @"compute.sslPolicies.list";
  return query;
}

@end

@implementation GTLRComputeQuery_SslPoliciesListAvailableFeatures

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/sslPolicies/listAvailableFeatures";
  GTLRComputeQuery_SslPoliciesListAvailableFeatures *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_SslPoliciesListAvailableFeaturesResponse class];
  query.loggingName = @"compute.sslPolicies.listAvailableFeatures";
  return query;
}

@end

@implementation GTLRComputeQuery_SslPoliciesPatch

@dynamic project, requestId, sslPolicy;

+ (instancetype)queryWithObject:(GTLRCompute_SslPolicy *)object
                        project:(NSString *)project
                      sslPolicy:(NSString *)sslPolicy {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"sslPolicy"
  ];
  NSString *pathURITemplate = @"{project}/global/sslPolicies/{sslPolicy}";
  GTLRComputeQuery_SslPoliciesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.sslPolicy = sslPolicy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.sslPolicies.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_SubnetworksAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/subnetworks";
  GTLRComputeQuery_SubnetworksAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_SubnetworkAggregatedList class];
  query.loggingName = @"compute.subnetworks.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_SubnetworksDelete

@dynamic project, region, requestId, subnetwork;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                      subnetwork:(NSString *)subnetwork {
  NSArray *pathParams = @[
    @"project", @"region", @"subnetwork"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/subnetworks/{subnetwork}";
  GTLRComputeQuery_SubnetworksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.subnetwork = subnetwork;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.subnetworks.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_SubnetworksExpandIpCidrRange

@dynamic project, region, requestId, subnetwork;

+ (instancetype)queryWithObject:(GTLRCompute_SubnetworksExpandIpCidrRangeRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
                     subnetwork:(NSString *)subnetwork {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"subnetwork"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange";
  GTLRComputeQuery_SubnetworksExpandIpCidrRange *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.subnetwork = subnetwork;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.subnetworks.expandIpCidrRange";
  return query;
}

@end

@implementation GTLRComputeQuery_SubnetworksGet

@dynamic project, region, subnetwork;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                      subnetwork:(NSString *)subnetwork {
  NSArray *pathParams = @[
    @"project", @"region", @"subnetwork"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/subnetworks/{subnetwork}";
  GTLRComputeQuery_SubnetworksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.subnetwork = subnetwork;
  query.expectedObjectClass = [GTLRCompute_Subnetwork class];
  query.loggingName = @"compute.subnetworks.get";
  return query;
}

@end

@implementation GTLRComputeQuery_SubnetworksGetIamPolicy

@dynamic project, region, resource;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                        resource:(NSString *)resource {
  NSArray *pathParams = @[
    @"project", @"region", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/subnetworks/{resource}/getIamPolicy";
  GTLRComputeQuery_SubnetworksGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.subnetworks.getIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_SubnetworksInsert

@dynamic project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_Subnetwork *)object
                        project:(NSString *)project
                         region:(NSString *)region {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/subnetworks";
  GTLRComputeQuery_SubnetworksInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.subnetworks.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_SubnetworksList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/subnetworks";
  GTLRComputeQuery_SubnetworksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_SubnetworkList class];
  query.loggingName = @"compute.subnetworks.list";
  return query;
}

@end

@implementation GTLRComputeQuery_SubnetworksListUsable

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/subnetworks/listUsable";
  GTLRComputeQuery_SubnetworksListUsable *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_UsableSubnetworksAggregatedList class];
  query.loggingName = @"compute.subnetworks.listUsable";
  return query;
}

@end

@implementation GTLRComputeQuery_SubnetworksPatch

@dynamic project, region, requestId, subnetwork;

+ (instancetype)queryWithObject:(GTLRCompute_Subnetwork *)object
                        project:(NSString *)project
                         region:(NSString *)region
                     subnetwork:(NSString *)subnetwork {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"subnetwork"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/subnetworks/{subnetwork}";
  GTLRComputeQuery_SubnetworksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.subnetwork = subnetwork;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.subnetworks.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_SubnetworksSetIamPolicy

@dynamic project, region, resource;

+ (instancetype)queryWithObject:(GTLRCompute_RegionSetPolicyRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/subnetworks/{resource}/setIamPolicy";
  GTLRComputeQuery_SubnetworksSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_Policy class];
  query.loggingName = @"compute.subnetworks.setIamPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_SubnetworksSetPrivateIpGoogleAccess

@dynamic project, region, requestId, subnetwork;

+ (instancetype)queryWithObject:(GTLRCompute_SubnetworksSetPrivateIpGoogleAccessRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
                     subnetwork:(NSString *)subnetwork {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"subnetwork"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess";
  GTLRComputeQuery_SubnetworksSetPrivateIpGoogleAccess *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.subnetwork = subnetwork;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.subnetworks.setPrivateIpGoogleAccess";
  return query;
}

@end

@implementation GTLRComputeQuery_SubnetworksTestIamPermissions

@dynamic project, region, resource;

+ (instancetype)queryWithObject:(GTLRCompute_TestPermissionsRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/subnetworks/{resource}/testIamPermissions";
  GTLRComputeQuery_SubnetworksTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCompute_TestPermissionsResponse class];
  query.loggingName = @"compute.subnetworks.testIamPermissions";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetHttpProxiesDelete

@dynamic project, requestId, targetHttpProxy;

+ (instancetype)queryWithProject:(NSString *)project
                 targetHttpProxy:(NSString *)targetHttpProxy {
  NSArray *pathParams = @[
    @"project", @"targetHttpProxy"
  ];
  NSString *pathURITemplate = @"{project}/global/targetHttpProxies/{targetHttpProxy}";
  GTLRComputeQuery_TargetHttpProxiesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.targetHttpProxy = targetHttpProxy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetHttpProxies.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetHttpProxiesGet

@dynamic project, targetHttpProxy;

+ (instancetype)queryWithProject:(NSString *)project
                 targetHttpProxy:(NSString *)targetHttpProxy {
  NSArray *pathParams = @[
    @"project", @"targetHttpProxy"
  ];
  NSString *pathURITemplate = @"{project}/global/targetHttpProxies/{targetHttpProxy}";
  GTLRComputeQuery_TargetHttpProxiesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.targetHttpProxy = targetHttpProxy;
  query.expectedObjectClass = [GTLRCompute_TargetHttpProxy class];
  query.loggingName = @"compute.targetHttpProxies.get";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetHttpProxiesInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_TargetHttpProxy *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/targetHttpProxies";
  GTLRComputeQuery_TargetHttpProxiesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetHttpProxies.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetHttpProxiesList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/targetHttpProxies";
  GTLRComputeQuery_TargetHttpProxiesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_TargetHttpProxyList class];
  query.loggingName = @"compute.targetHttpProxies.list";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetHttpProxiesSetUrlMap

@dynamic project, requestId, targetHttpProxy;

+ (instancetype)queryWithObject:(GTLRCompute_UrlMapReference *)object
                        project:(NSString *)project
                targetHttpProxy:(NSString *)targetHttpProxy {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"targetHttpProxy"
  ];
  NSString *pathURITemplate = @"{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap";
  GTLRComputeQuery_TargetHttpProxiesSetUrlMap *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.targetHttpProxy = targetHttpProxy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetHttpProxies.setUrlMap";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetHttpsProxiesDelete

@dynamic project, requestId, targetHttpsProxy;

+ (instancetype)queryWithProject:(NSString *)project
                targetHttpsProxy:(NSString *)targetHttpsProxy {
  NSArray *pathParams = @[
    @"project", @"targetHttpsProxy"
  ];
  NSString *pathURITemplate = @"{project}/global/targetHttpsProxies/{targetHttpsProxy}";
  GTLRComputeQuery_TargetHttpsProxiesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.targetHttpsProxy = targetHttpsProxy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetHttpsProxies.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetHttpsProxiesGet

@dynamic project, targetHttpsProxy;

+ (instancetype)queryWithProject:(NSString *)project
                targetHttpsProxy:(NSString *)targetHttpsProxy {
  NSArray *pathParams = @[
    @"project", @"targetHttpsProxy"
  ];
  NSString *pathURITemplate = @"{project}/global/targetHttpsProxies/{targetHttpsProxy}";
  GTLRComputeQuery_TargetHttpsProxiesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.targetHttpsProxy = targetHttpsProxy;
  query.expectedObjectClass = [GTLRCompute_TargetHttpsProxy class];
  query.loggingName = @"compute.targetHttpsProxies.get";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetHttpsProxiesInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_TargetHttpsProxy *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/targetHttpsProxies";
  GTLRComputeQuery_TargetHttpsProxiesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetHttpsProxies.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetHttpsProxiesList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/targetHttpsProxies";
  GTLRComputeQuery_TargetHttpsProxiesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_TargetHttpsProxyList class];
  query.loggingName = @"compute.targetHttpsProxies.list";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetHttpsProxiesSetQuicOverride

@dynamic project, requestId, targetHttpsProxy;

+ (instancetype)queryWithObject:(GTLRCompute_TargetHttpsProxiesSetQuicOverrideRequest *)object
                        project:(NSString *)project
               targetHttpsProxy:(NSString *)targetHttpsProxy {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"targetHttpsProxy"
  ];
  NSString *pathURITemplate = @"{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride";
  GTLRComputeQuery_TargetHttpsProxiesSetQuicOverride *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.targetHttpsProxy = targetHttpsProxy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetHttpsProxies.setQuicOverride";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetHttpsProxiesSetSslCertificates

@dynamic project, requestId, targetHttpsProxy;

+ (instancetype)queryWithObject:(GTLRCompute_TargetHttpsProxiesSetSslCertificatesRequest *)object
                        project:(NSString *)project
               targetHttpsProxy:(NSString *)targetHttpsProxy {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"targetHttpsProxy"
  ];
  NSString *pathURITemplate = @"{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates";
  GTLRComputeQuery_TargetHttpsProxiesSetSslCertificates *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.targetHttpsProxy = targetHttpsProxy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetHttpsProxies.setSslCertificates";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetHttpsProxiesSetSslPolicy

@dynamic project, requestId, targetHttpsProxy;

+ (instancetype)queryWithObject:(GTLRCompute_SslPolicyReference *)object
                        project:(NSString *)project
               targetHttpsProxy:(NSString *)targetHttpsProxy {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"targetHttpsProxy"
  ];
  NSString *pathURITemplate = @"{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy";
  GTLRComputeQuery_TargetHttpsProxiesSetSslPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.targetHttpsProxy = targetHttpsProxy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetHttpsProxies.setSslPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetHttpsProxiesSetUrlMap

@dynamic project, requestId, targetHttpsProxy;

+ (instancetype)queryWithObject:(GTLRCompute_UrlMapReference *)object
                        project:(NSString *)project
               targetHttpsProxy:(NSString *)targetHttpsProxy {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"targetHttpsProxy"
  ];
  NSString *pathURITemplate = @"{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap";
  GTLRComputeQuery_TargetHttpsProxiesSetUrlMap *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.targetHttpsProxy = targetHttpsProxy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetHttpsProxies.setUrlMap";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetInstancesAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/targetInstances";
  GTLRComputeQuery_TargetInstancesAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_TargetInstanceAggregatedList class];
  query.loggingName = @"compute.targetInstances.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetInstancesDelete

@dynamic project, requestId, targetInstance, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                  targetInstance:(NSString *)targetInstance {
  NSArray *pathParams = @[
    @"project", @"targetInstance", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/targetInstances/{targetInstance}";
  GTLRComputeQuery_TargetInstancesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.targetInstance = targetInstance;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetInstances.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetInstancesGet

@dynamic project, targetInstance, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                  targetInstance:(NSString *)targetInstance {
  NSArray *pathParams = @[
    @"project", @"targetInstance", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/targetInstances/{targetInstance}";
  GTLRComputeQuery_TargetInstancesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.targetInstance = targetInstance;
  query.expectedObjectClass = [GTLRCompute_TargetInstance class];
  query.loggingName = @"compute.targetInstances.get";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetInstancesInsert

@dynamic project, requestId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRCompute_TargetInstance *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/targetInstances";
  GTLRComputeQuery_TargetInstancesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetInstances.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetInstancesList

@dynamic filter, maxResults, orderBy, pageToken, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty {
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/targetInstances";
  GTLRComputeQuery_TargetInstancesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_TargetInstanceList class];
  query.loggingName = @"compute.targetInstances.list";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetPoolsAddHealthCheck

@dynamic project, region, requestId, targetPool;

+ (instancetype)queryWithObject:(GTLRCompute_TargetPoolsAddHealthCheckRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
                     targetPool:(NSString *)targetPool {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"targetPool"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck";
  GTLRComputeQuery_TargetPoolsAddHealthCheck *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.targetPool = targetPool;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetPools.addHealthCheck";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetPoolsAddInstance

@dynamic project, region, requestId, targetPool;

+ (instancetype)queryWithObject:(GTLRCompute_TargetPoolsAddInstanceRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
                     targetPool:(NSString *)targetPool {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"targetPool"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/targetPools/{targetPool}/addInstance";
  GTLRComputeQuery_TargetPoolsAddInstance *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.targetPool = targetPool;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetPools.addInstance";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetPoolsAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/targetPools";
  GTLRComputeQuery_TargetPoolsAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_TargetPoolAggregatedList class];
  query.loggingName = @"compute.targetPools.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetPoolsDelete

@dynamic project, region, requestId, targetPool;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                      targetPool:(NSString *)targetPool {
  NSArray *pathParams = @[
    @"project", @"region", @"targetPool"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/targetPools/{targetPool}";
  GTLRComputeQuery_TargetPoolsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.targetPool = targetPool;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetPools.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetPoolsGet

@dynamic project, region, targetPool;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                      targetPool:(NSString *)targetPool {
  NSArray *pathParams = @[
    @"project", @"region", @"targetPool"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/targetPools/{targetPool}";
  GTLRComputeQuery_TargetPoolsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.targetPool = targetPool;
  query.expectedObjectClass = [GTLRCompute_TargetPool class];
  query.loggingName = @"compute.targetPools.get";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetPoolsGetHealth

@dynamic project, region, targetPool;

+ (instancetype)queryWithObject:(GTLRCompute_InstanceReference *)object
                        project:(NSString *)project
                         region:(NSString *)region
                     targetPool:(NSString *)targetPool {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"targetPool"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/targetPools/{targetPool}/getHealth";
  GTLRComputeQuery_TargetPoolsGetHealth *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.targetPool = targetPool;
  query.expectedObjectClass = [GTLRCompute_TargetPoolInstanceHealth class];
  query.loggingName = @"compute.targetPools.getHealth";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetPoolsInsert

@dynamic project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_TargetPool *)object
                        project:(NSString *)project
                         region:(NSString *)region {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/targetPools";
  GTLRComputeQuery_TargetPoolsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetPools.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetPoolsList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/targetPools";
  GTLRComputeQuery_TargetPoolsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_TargetPoolList class];
  query.loggingName = @"compute.targetPools.list";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetPoolsRemoveHealthCheck

@dynamic project, region, requestId, targetPool;

+ (instancetype)queryWithObject:(GTLRCompute_TargetPoolsRemoveHealthCheckRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
                     targetPool:(NSString *)targetPool {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"targetPool"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck";
  GTLRComputeQuery_TargetPoolsRemoveHealthCheck *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.targetPool = targetPool;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetPools.removeHealthCheck";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetPoolsRemoveInstance

@dynamic project, region, requestId, targetPool;

+ (instancetype)queryWithObject:(GTLRCompute_TargetPoolsRemoveInstanceRequest *)object
                        project:(NSString *)project
                         region:(NSString *)region
                     targetPool:(NSString *)targetPool {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"targetPool"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/targetPools/{targetPool}/removeInstance";
  GTLRComputeQuery_TargetPoolsRemoveInstance *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.targetPool = targetPool;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetPools.removeInstance";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetPoolsSetBackup

@dynamic failoverRatio, project, region, requestId, targetPool;

+ (instancetype)queryWithObject:(GTLRCompute_TargetReference *)object
                        project:(NSString *)project
                         region:(NSString *)region
                     targetPool:(NSString *)targetPool {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region", @"targetPool"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/targetPools/{targetPool}/setBackup";
  GTLRComputeQuery_TargetPoolsSetBackup *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.targetPool = targetPool;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetPools.setBackup";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetSslProxiesDelete

@dynamic project, requestId, targetSslProxy;

+ (instancetype)queryWithProject:(NSString *)project
                  targetSslProxy:(NSString *)targetSslProxy {
  NSArray *pathParams = @[
    @"project", @"targetSslProxy"
  ];
  NSString *pathURITemplate = @"{project}/global/targetSslProxies/{targetSslProxy}";
  GTLRComputeQuery_TargetSslProxiesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.targetSslProxy = targetSslProxy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetSslProxies.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetSslProxiesGet

@dynamic project, targetSslProxy;

+ (instancetype)queryWithProject:(NSString *)project
                  targetSslProxy:(NSString *)targetSslProxy {
  NSArray *pathParams = @[
    @"project", @"targetSslProxy"
  ];
  NSString *pathURITemplate = @"{project}/global/targetSslProxies/{targetSslProxy}";
  GTLRComputeQuery_TargetSslProxiesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.targetSslProxy = targetSslProxy;
  query.expectedObjectClass = [GTLRCompute_TargetSslProxy class];
  query.loggingName = @"compute.targetSslProxies.get";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetSslProxiesInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_TargetSslProxy *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/targetSslProxies";
  GTLRComputeQuery_TargetSslProxiesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetSslProxies.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetSslProxiesList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/targetSslProxies";
  GTLRComputeQuery_TargetSslProxiesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_TargetSslProxyList class];
  query.loggingName = @"compute.targetSslProxies.list";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetSslProxiesSetBackendService

@dynamic project, requestId, targetSslProxy;

+ (instancetype)queryWithObject:(GTLRCompute_TargetSslProxiesSetBackendServiceRequest *)object
                        project:(NSString *)project
                 targetSslProxy:(NSString *)targetSslProxy {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"targetSslProxy"
  ];
  NSString *pathURITemplate = @"{project}/global/targetSslProxies/{targetSslProxy}/setBackendService";
  GTLRComputeQuery_TargetSslProxiesSetBackendService *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.targetSslProxy = targetSslProxy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetSslProxies.setBackendService";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetSslProxiesSetProxyHeader

@dynamic project, requestId, targetSslProxy;

+ (instancetype)queryWithObject:(GTLRCompute_TargetSslProxiesSetProxyHeaderRequest *)object
                        project:(NSString *)project
                 targetSslProxy:(NSString *)targetSslProxy {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"targetSslProxy"
  ];
  NSString *pathURITemplate = @"{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader";
  GTLRComputeQuery_TargetSslProxiesSetProxyHeader *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.targetSslProxy = targetSslProxy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetSslProxies.setProxyHeader";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetSslProxiesSetSslCertificates

@dynamic project, requestId, targetSslProxy;

+ (instancetype)queryWithObject:(GTLRCompute_TargetSslProxiesSetSslCertificatesRequest *)object
                        project:(NSString *)project
                 targetSslProxy:(NSString *)targetSslProxy {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"targetSslProxy"
  ];
  NSString *pathURITemplate = @"{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates";
  GTLRComputeQuery_TargetSslProxiesSetSslCertificates *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.targetSslProxy = targetSslProxy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetSslProxies.setSslCertificates";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetSslProxiesSetSslPolicy

@dynamic project, requestId, targetSslProxy;

+ (instancetype)queryWithObject:(GTLRCompute_SslPolicyReference *)object
                        project:(NSString *)project
                 targetSslProxy:(NSString *)targetSslProxy {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"targetSslProxy"
  ];
  NSString *pathURITemplate = @"{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy";
  GTLRComputeQuery_TargetSslProxiesSetSslPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.targetSslProxy = targetSslProxy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetSslProxies.setSslPolicy";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetTcpProxiesDelete

@dynamic project, requestId, targetTcpProxy;

+ (instancetype)queryWithProject:(NSString *)project
                  targetTcpProxy:(NSString *)targetTcpProxy {
  NSArray *pathParams = @[
    @"project", @"targetTcpProxy"
  ];
  NSString *pathURITemplate = @"{project}/global/targetTcpProxies/{targetTcpProxy}";
  GTLRComputeQuery_TargetTcpProxiesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.targetTcpProxy = targetTcpProxy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetTcpProxies.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetTcpProxiesGet

@dynamic project, targetTcpProxy;

+ (instancetype)queryWithProject:(NSString *)project
                  targetTcpProxy:(NSString *)targetTcpProxy {
  NSArray *pathParams = @[
    @"project", @"targetTcpProxy"
  ];
  NSString *pathURITemplate = @"{project}/global/targetTcpProxies/{targetTcpProxy}";
  GTLRComputeQuery_TargetTcpProxiesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.targetTcpProxy = targetTcpProxy;
  query.expectedObjectClass = [GTLRCompute_TargetTcpProxy class];
  query.loggingName = @"compute.targetTcpProxies.get";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetTcpProxiesInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_TargetTcpProxy *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/targetTcpProxies";
  GTLRComputeQuery_TargetTcpProxiesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetTcpProxies.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetTcpProxiesList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/targetTcpProxies";
  GTLRComputeQuery_TargetTcpProxiesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_TargetTcpProxyList class];
  query.loggingName = @"compute.targetTcpProxies.list";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetTcpProxiesSetBackendService

@dynamic project, requestId, targetTcpProxy;

+ (instancetype)queryWithObject:(GTLRCompute_TargetTcpProxiesSetBackendServiceRequest *)object
                        project:(NSString *)project
                 targetTcpProxy:(NSString *)targetTcpProxy {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"targetTcpProxy"
  ];
  NSString *pathURITemplate = @"{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService";
  GTLRComputeQuery_TargetTcpProxiesSetBackendService *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.targetTcpProxy = targetTcpProxy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetTcpProxies.setBackendService";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetTcpProxiesSetProxyHeader

@dynamic project, requestId, targetTcpProxy;

+ (instancetype)queryWithObject:(GTLRCompute_TargetTcpProxiesSetProxyHeaderRequest *)object
                        project:(NSString *)project
                 targetTcpProxy:(NSString *)targetTcpProxy {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"targetTcpProxy"
  ];
  NSString *pathURITemplate = @"{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader";
  GTLRComputeQuery_TargetTcpProxiesSetProxyHeader *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.targetTcpProxy = targetTcpProxy;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetTcpProxies.setProxyHeader";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetVpnGatewaysAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/targetVpnGateways";
  GTLRComputeQuery_TargetVpnGatewaysAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_TargetVpnGatewayAggregatedList class];
  query.loggingName = @"compute.targetVpnGateways.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetVpnGatewaysDelete

@dynamic project, region, requestId, targetVpnGateway;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                targetVpnGateway:(NSString *)targetVpnGateway {
  NSArray *pathParams = @[
    @"project", @"region", @"targetVpnGateway"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}";
  GTLRComputeQuery_TargetVpnGatewaysDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.targetVpnGateway = targetVpnGateway;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetVpnGateways.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetVpnGatewaysGet

@dynamic project, region, targetVpnGateway;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                targetVpnGateway:(NSString *)targetVpnGateway {
  NSArray *pathParams = @[
    @"project", @"region", @"targetVpnGateway"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}";
  GTLRComputeQuery_TargetVpnGatewaysGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.targetVpnGateway = targetVpnGateway;
  query.expectedObjectClass = [GTLRCompute_TargetVpnGateway class];
  query.loggingName = @"compute.targetVpnGateways.get";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetVpnGatewaysInsert

@dynamic project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_TargetVpnGateway *)object
                        project:(NSString *)project
                         region:(NSString *)region {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/targetVpnGateways";
  GTLRComputeQuery_TargetVpnGatewaysInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.targetVpnGateways.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_TargetVpnGatewaysList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/targetVpnGateways";
  GTLRComputeQuery_TargetVpnGatewaysList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_TargetVpnGatewayList class];
  query.loggingName = @"compute.targetVpnGateways.list";
  return query;
}

@end

@implementation GTLRComputeQuery_UrlMapsDelete

@dynamic project, requestId, urlMap;

+ (instancetype)queryWithProject:(NSString *)project
                          urlMap:(NSString *)urlMap {
  NSArray *pathParams = @[
    @"project", @"urlMap"
  ];
  NSString *pathURITemplate = @"{project}/global/urlMaps/{urlMap}";
  GTLRComputeQuery_UrlMapsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.urlMap = urlMap;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.urlMaps.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_UrlMapsGet

@dynamic project, urlMap;

+ (instancetype)queryWithProject:(NSString *)project
                          urlMap:(NSString *)urlMap {
  NSArray *pathParams = @[
    @"project", @"urlMap"
  ];
  NSString *pathURITemplate = @"{project}/global/urlMaps/{urlMap}";
  GTLRComputeQuery_UrlMapsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.urlMap = urlMap;
  query.expectedObjectClass = [GTLRCompute_UrlMap class];
  query.loggingName = @"compute.urlMaps.get";
  return query;
}

@end

@implementation GTLRComputeQuery_UrlMapsInsert

@dynamic project, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_UrlMap *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/urlMaps";
  GTLRComputeQuery_UrlMapsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.urlMaps.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_UrlMapsInvalidateCache

@dynamic project, requestId, urlMap;

+ (instancetype)queryWithObject:(GTLRCompute_CacheInvalidationRule *)object
                        project:(NSString *)project
                         urlMap:(NSString *)urlMap {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"urlMap"
  ];
  NSString *pathURITemplate = @"{project}/global/urlMaps/{urlMap}/invalidateCache";
  GTLRComputeQuery_UrlMapsInvalidateCache *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.urlMap = urlMap;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.urlMaps.invalidateCache";
  return query;
}

@end

@implementation GTLRComputeQuery_UrlMapsList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/urlMaps";
  GTLRComputeQuery_UrlMapsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_UrlMapList class];
  query.loggingName = @"compute.urlMaps.list";
  return query;
}

@end

@implementation GTLRComputeQuery_UrlMapsPatch

@dynamic project, requestId, urlMap;

+ (instancetype)queryWithObject:(GTLRCompute_UrlMap *)object
                        project:(NSString *)project
                         urlMap:(NSString *)urlMap {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"urlMap"
  ];
  NSString *pathURITemplate = @"{project}/global/urlMaps/{urlMap}";
  GTLRComputeQuery_UrlMapsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.urlMap = urlMap;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.urlMaps.patch";
  return query;
}

@end

@implementation GTLRComputeQuery_UrlMapsUpdate

@dynamic project, requestId, urlMap;

+ (instancetype)queryWithObject:(GTLRCompute_UrlMap *)object
                        project:(NSString *)project
                         urlMap:(NSString *)urlMap {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"urlMap"
  ];
  NSString *pathURITemplate = @"{project}/global/urlMaps/{urlMap}";
  GTLRComputeQuery_UrlMapsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.urlMap = urlMap;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.urlMaps.update";
  return query;
}

@end

@implementation GTLRComputeQuery_UrlMapsValidate

@dynamic project, urlMap;

+ (instancetype)queryWithObject:(GTLRCompute_UrlMapsValidateRequest *)object
                        project:(NSString *)project
                         urlMap:(NSString *)urlMap {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"urlMap"
  ];
  NSString *pathURITemplate = @"{project}/global/urlMaps/{urlMap}/validate";
  GTLRComputeQuery_UrlMapsValidate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.urlMap = urlMap;
  query.expectedObjectClass = [GTLRCompute_UrlMapsValidateResponse class];
  query.loggingName = @"compute.urlMaps.validate";
  return query;
}

@end

@implementation GTLRComputeQuery_VpnTunnelsAggregatedList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/aggregated/vpnTunnels";
  GTLRComputeQuery_VpnTunnelsAggregatedList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_VpnTunnelAggregatedList class];
  query.loggingName = @"compute.vpnTunnels.aggregatedList";
  return query;
}

@end

@implementation GTLRComputeQuery_VpnTunnelsDelete

@dynamic project, region, requestId, vpnTunnel;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                       vpnTunnel:(NSString *)vpnTunnel {
  NSArray *pathParams = @[
    @"project", @"region", @"vpnTunnel"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/vpnTunnels/{vpnTunnel}";
  GTLRComputeQuery_VpnTunnelsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.vpnTunnel = vpnTunnel;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.vpnTunnels.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_VpnTunnelsGet

@dynamic project, region, vpnTunnel;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region
                       vpnTunnel:(NSString *)vpnTunnel {
  NSArray *pathParams = @[
    @"project", @"region", @"vpnTunnel"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/vpnTunnels/{vpnTunnel}";
  GTLRComputeQuery_VpnTunnelsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.vpnTunnel = vpnTunnel;
  query.expectedObjectClass = [GTLRCompute_VpnTunnel class];
  query.loggingName = @"compute.vpnTunnels.get";
  return query;
}

@end

@implementation GTLRComputeQuery_VpnTunnelsInsert

@dynamic project, region, requestId;

+ (instancetype)queryWithObject:(GTLRCompute_VpnTunnel *)object
                        project:(NSString *)project
                         region:(NSString *)region {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/vpnTunnels";
  GTLRComputeQuery_VpnTunnelsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.vpnTunnels.insert";
  return query;
}

@end

@implementation GTLRComputeQuery_VpnTunnelsList

@dynamic filter, maxResults, orderBy, pageToken, project, region;

+ (instancetype)queryWithProject:(NSString *)project
                          region:(NSString *)region {
  NSArray *pathParams = @[
    @"project", @"region"
  ];
  NSString *pathURITemplate = @"{project}/regions/{region}/vpnTunnels";
  GTLRComputeQuery_VpnTunnelsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.region = region;
  query.expectedObjectClass = [GTLRCompute_VpnTunnelList class];
  query.loggingName = @"compute.vpnTunnels.list";
  return query;
}

@end

@implementation GTLRComputeQuery_ZoneOperationsDelete

@dynamic operation, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                       operation:(NSString *)operation {
  NSArray *pathParams = @[
    @"operation", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/operations/{operation}";
  GTLRComputeQuery_ZoneOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.operation = operation;
  query.loggingName = @"compute.zoneOperations.delete";
  return query;
}

@end

@implementation GTLRComputeQuery_ZoneOperationsGet

@dynamic operation, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                       operation:(NSString *)operation {
  NSArray *pathParams = @[
    @"operation", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/operations/{operation}";
  GTLRComputeQuery_ZoneOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.operation = operation;
  query.expectedObjectClass = [GTLRCompute_Operation class];
  query.loggingName = @"compute.zoneOperations.get";
  return query;
}

@end

@implementation GTLRComputeQuery_ZoneOperationsList

@dynamic filter, maxResults, orderBy, pageToken, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty {
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/operations";
  GTLRComputeQuery_ZoneOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_OperationList class];
  query.loggingName = @"compute.zoneOperations.list";
  return query;
}

@end

@implementation GTLRComputeQuery_ZonesGet

@dynamic project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty {
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}";
  GTLRComputeQuery_ZonesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRCompute_Zone class];
  query.loggingName = @"compute.zones.get";
  return query;
}

@end

@implementation GTLRComputeQuery_ZonesList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/zones";
  GTLRComputeQuery_ZonesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCompute_ZoneList class];
  query.loggingName = @"compute.zones.list";
  return query;
}

@end
