// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Tool Results API (toolresults/v1beta3)
// Description:
//   API to publish and access results from developer tools.
// Documentation:
//   https://firebase.google.com/docs/test-lab/

#import "GTLRToolResultsQuery.h"

#import "GTLRToolResultsObjects.h"

// ----------------------------------------------------------------------------
// Constants

// filter
NSString * const kGTLRToolResultsFilterCpu                     = @"CPU";
NSString * const kGTLRToolResultsFilterGraphics                = @"GRAPHICS";
NSString * const kGTLRToolResultsFilterMemory                  = @"MEMORY";
NSString * const kGTLRToolResultsFilterNetwork                 = @"NETWORK";
NSString * const kGTLRToolResultsFilterPerfMetricTypeUnspecified = @"PERF_METRIC_TYPE_UNSPECIFIED";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRToolResultsQuery

@dynamic fields;

@end

@implementation GTLRToolResultsQuery_ClustersGet

@dynamic clusterId, executionId, historyId, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         historyId:(NSString *)historyId
                       executionId:(NSString *)executionId
                         clusterId:(NSString *)clusterId {
  NSArray *pathParams = @[
    @"clusterId", @"executionId", @"historyId", @"projectId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/clusters/{clusterId}";
  GTLRToolResultsQuery_ClustersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.clusterId = clusterId;
  query.expectedObjectClass = [GTLRToolResults_ScreenshotCluster class];
  query.loggingName = @"toolresults.clusters.get";
  return query;
}

@end

@implementation GTLRToolResultsQuery_ClustersList

@dynamic executionId, historyId, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         historyId:(NSString *)historyId
                       executionId:(NSString *)executionId {
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/clusters";
  GTLRToolResultsQuery_ClustersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.expectedObjectClass = [GTLRToolResults_ListScreenshotClustersResponse class];
  query.loggingName = @"toolresults.clusters.list";
  return query;
}

@end

@implementation GTLRToolResultsQuery_EnvironmentsGet

@dynamic environmentId, executionId, historyId, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         historyId:(NSString *)historyId
                       executionId:(NSString *)executionId
                     environmentId:(NSString *)environmentId {
  NSArray *pathParams = @[
    @"environmentId", @"executionId", @"historyId", @"projectId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/environments/{environmentId}";
  GTLRToolResultsQuery_EnvironmentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.environmentId = environmentId;
  query.expectedObjectClass = [GTLRToolResults_Environment class];
  query.loggingName = @"toolresults.environments.get";
  return query;
}

@end

@implementation GTLRToolResultsQuery_EnvironmentsList

@dynamic executionId, historyId, pageSize, pageToken, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         historyId:(NSString *)historyId
                       executionId:(NSString *)executionId {
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/environments";
  GTLRToolResultsQuery_EnvironmentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.expectedObjectClass = [GTLRToolResults_ListEnvironmentsResponse class];
  query.loggingName = @"toolresults.environments.list";
  return query;
}

@end

@implementation GTLRToolResultsQuery_ExecutionsCreate

@dynamic historyId, projectId, requestId;

+ (instancetype)queryWithObject:(GTLRToolResults_Execution *)object
                      projectId:(NSString *)projectId
                      historyId:(NSString *)historyId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"historyId", @"projectId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions";
  GTLRToolResultsQuery_ExecutionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.historyId = historyId;
  query.expectedObjectClass = [GTLRToolResults_Execution class];
  query.loggingName = @"toolresults.executions.create";
  return query;
}

@end

@implementation GTLRToolResultsQuery_ExecutionsGet

@dynamic executionId, historyId, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         historyId:(NSString *)historyId
                       executionId:(NSString *)executionId {
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}";
  GTLRToolResultsQuery_ExecutionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.expectedObjectClass = [GTLRToolResults_Execution class];
  query.loggingName = @"toolresults.executions.get";
  return query;
}

@end

@implementation GTLRToolResultsQuery_ExecutionsList

@dynamic historyId, pageSize, pageToken, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         historyId:(NSString *)historyId {
  NSArray *pathParams = @[
    @"historyId", @"projectId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions";
  GTLRToolResultsQuery_ExecutionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.historyId = historyId;
  query.expectedObjectClass = [GTLRToolResults_ListExecutionsResponse class];
  query.loggingName = @"toolresults.executions.list";
  return query;
}

@end

@implementation GTLRToolResultsQuery_ExecutionsPatch

@dynamic executionId, historyId, projectId, requestId;

+ (instancetype)queryWithObject:(GTLRToolResults_Execution *)object
                      projectId:(NSString *)projectId
                      historyId:(NSString *)historyId
                    executionId:(NSString *)executionId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}";
  GTLRToolResultsQuery_ExecutionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.expectedObjectClass = [GTLRToolResults_Execution class];
  query.loggingName = @"toolresults.executions.patch";
  return query;
}

@end

@implementation GTLRToolResultsQuery_HistoriesCreate

@dynamic projectId, requestId;

+ (instancetype)queryWithObject:(GTLRToolResults_History *)object
                      projectId:(NSString *)projectId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories";
  GTLRToolResultsQuery_HistoriesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRToolResults_History class];
  query.loggingName = @"toolresults.histories.create";
  return query;
}

@end

@implementation GTLRToolResultsQuery_HistoriesGet

@dynamic historyId, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         historyId:(NSString *)historyId {
  NSArray *pathParams = @[
    @"historyId", @"projectId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}";
  GTLRToolResultsQuery_HistoriesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.historyId = historyId;
  query.expectedObjectClass = [GTLRToolResults_History class];
  query.loggingName = @"toolresults.histories.get";
  return query;
}

@end

@implementation GTLRToolResultsQuery_HistoriesList

@dynamic filterByName, pageSize, pageToken, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId {
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories";
  GTLRToolResultsQuery_HistoriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRToolResults_ListHistoriesResponse class];
  query.loggingName = @"toolresults.histories.list";
  return query;
}

@end

@implementation GTLRToolResultsQuery_PerfMetricsSummaryCreate

@dynamic executionId, historyId, projectId, stepId;

+ (instancetype)queryWithObject:(GTLRToolResults_PerfMetricsSummary *)object
                      projectId:(NSString *)projectId
                      historyId:(NSString *)historyId
                    executionId:(NSString *)executionId
                         stepId:(NSString *)stepId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId", @"stepId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary";
  GTLRToolResultsQuery_PerfMetricsSummaryCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.stepId = stepId;
  query.expectedObjectClass = [GTLRToolResults_PerfMetricsSummary class];
  query.loggingName = @"toolresults.perfMetricsSummary.create";
  return query;
}

@end

@implementation GTLRToolResultsQuery_PerfSampleSeriesCreate

@dynamic executionId, historyId, projectId, stepId;

+ (instancetype)queryWithObject:(GTLRToolResults_PerfSampleSeries *)object
                      projectId:(NSString *)projectId
                      historyId:(NSString *)historyId
                    executionId:(NSString *)executionId
                         stepId:(NSString *)stepId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId", @"stepId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries";
  GTLRToolResultsQuery_PerfSampleSeriesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.stepId = stepId;
  query.expectedObjectClass = [GTLRToolResults_PerfSampleSeries class];
  query.loggingName = @"toolresults.perfSampleSeries.create";
  return query;
}

@end

@implementation GTLRToolResultsQuery_PerfSampleSeriesGet

@dynamic executionId, historyId, projectId, sampleSeriesId, stepId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         historyId:(NSString *)historyId
                       executionId:(NSString *)executionId
                            stepId:(NSString *)stepId
                    sampleSeriesId:(NSString *)sampleSeriesId {
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId", @"sampleSeriesId", @"stepId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}";
  GTLRToolResultsQuery_PerfSampleSeriesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.stepId = stepId;
  query.sampleSeriesId = sampleSeriesId;
  query.expectedObjectClass = [GTLRToolResults_PerfSampleSeries class];
  query.loggingName = @"toolresults.perfSampleSeries.get";
  return query;
}

@end

@implementation GTLRToolResultsQuery_PerfSampleSeriesList

@dynamic executionId, filter, historyId, projectId, stepId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"filter" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         historyId:(NSString *)historyId
                       executionId:(NSString *)executionId
                            stepId:(NSString *)stepId {
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId", @"stepId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries";
  GTLRToolResultsQuery_PerfSampleSeriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.stepId = stepId;
  query.expectedObjectClass = [GTLRToolResults_ListPerfSampleSeriesResponse class];
  query.loggingName = @"toolresults.perfSampleSeries.list";
  return query;
}

@end

@implementation GTLRToolResultsQuery_ProjectsGetSettings

@dynamic projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId {
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/settings";
  GTLRToolResultsQuery_ProjectsGetSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRToolResults_ProjectSettings class];
  query.loggingName = @"toolresults.projects.getSettings";
  return query;
}

@end

@implementation GTLRToolResultsQuery_ProjectsInitializeSettings

@dynamic projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId {
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}:initializeSettings";
  GTLRToolResultsQuery_ProjectsInitializeSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRToolResults_ProjectSettings class];
  query.loggingName = @"toolresults.projects.initializeSettings";
  return query;
}

@end

@implementation GTLRToolResultsQuery_SamplesBatchCreate

@dynamic executionId, historyId, projectId, sampleSeriesId, stepId;

+ (instancetype)queryWithObject:(GTLRToolResults_BatchCreatePerfSamplesRequest *)object
                      projectId:(NSString *)projectId
                      historyId:(NSString *)historyId
                    executionId:(NSString *)executionId
                         stepId:(NSString *)stepId
                 sampleSeriesId:(NSString *)sampleSeriesId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId", @"sampleSeriesId", @"stepId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples:batchCreate";
  GTLRToolResultsQuery_SamplesBatchCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.stepId = stepId;
  query.sampleSeriesId = sampleSeriesId;
  query.expectedObjectClass = [GTLRToolResults_BatchCreatePerfSamplesResponse class];
  query.loggingName = @"toolresults.samples.batchCreate";
  return query;
}

@end

@implementation GTLRToolResultsQuery_SamplesList

@dynamic executionId, historyId, pageSize, pageToken, projectId, sampleSeriesId,
         stepId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         historyId:(NSString *)historyId
                       executionId:(NSString *)executionId
                            stepId:(NSString *)stepId
                    sampleSeriesId:(NSString *)sampleSeriesId {
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId", @"sampleSeriesId", @"stepId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples";
  GTLRToolResultsQuery_SamplesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.stepId = stepId;
  query.sampleSeriesId = sampleSeriesId;
  query.expectedObjectClass = [GTLRToolResults_ListPerfSamplesResponse class];
  query.loggingName = @"toolresults.samples.list";
  return query;
}

@end

@implementation GTLRToolResultsQuery_StepsAccessibilityClusters

@dynamic locale, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"toolresults/v1beta3/{+name}:accessibilityClusters";
  GTLRToolResultsQuery_StepsAccessibilityClusters *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRToolResults_ListStepAccessibilityClustersResponse class];
  query.loggingName = @"toolresults.steps.accessibilityClusters";
  return query;
}

@end

@implementation GTLRToolResultsQuery_StepsCreate

@dynamic executionId, historyId, projectId, requestId;

+ (instancetype)queryWithObject:(GTLRToolResults_Step *)object
                      projectId:(NSString *)projectId
                      historyId:(NSString *)historyId
                    executionId:(NSString *)executionId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps";
  GTLRToolResultsQuery_StepsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.expectedObjectClass = [GTLRToolResults_Step class];
  query.loggingName = @"toolresults.steps.create";
  return query;
}

@end

@implementation GTLRToolResultsQuery_StepsGet

@dynamic executionId, historyId, projectId, stepId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         historyId:(NSString *)historyId
                       executionId:(NSString *)executionId
                            stepId:(NSString *)stepId {
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId", @"stepId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}";
  GTLRToolResultsQuery_StepsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.stepId = stepId;
  query.expectedObjectClass = [GTLRToolResults_Step class];
  query.loggingName = @"toolresults.steps.get";
  return query;
}

@end

@implementation GTLRToolResultsQuery_StepsGetPerfMetricsSummary

@dynamic executionId, historyId, projectId, stepId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         historyId:(NSString *)historyId
                       executionId:(NSString *)executionId
                            stepId:(NSString *)stepId {
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId", @"stepId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary";
  GTLRToolResultsQuery_StepsGetPerfMetricsSummary *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.stepId = stepId;
  query.expectedObjectClass = [GTLRToolResults_PerfMetricsSummary class];
  query.loggingName = @"toolresults.steps.getPerfMetricsSummary";
  return query;
}

@end

@implementation GTLRToolResultsQuery_StepsList

@dynamic executionId, historyId, pageSize, pageToken, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         historyId:(NSString *)historyId
                       executionId:(NSString *)executionId {
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps";
  GTLRToolResultsQuery_StepsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.expectedObjectClass = [GTLRToolResults_ListStepsResponse class];
  query.loggingName = @"toolresults.steps.list";
  return query;
}

@end

@implementation GTLRToolResultsQuery_StepsPatch

@dynamic executionId, historyId, projectId, requestId, stepId;

+ (instancetype)queryWithObject:(GTLRToolResults_Step *)object
                      projectId:(NSString *)projectId
                      historyId:(NSString *)historyId
                    executionId:(NSString *)executionId
                         stepId:(NSString *)stepId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId", @"stepId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}";
  GTLRToolResultsQuery_StepsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.stepId = stepId;
  query.expectedObjectClass = [GTLRToolResults_Step class];
  query.loggingName = @"toolresults.steps.patch";
  return query;
}

@end

@implementation GTLRToolResultsQuery_StepsPublishXunitXmlFiles

@dynamic executionId, historyId, projectId, stepId;

+ (instancetype)queryWithObject:(GTLRToolResults_PublishXunitXmlFilesRequest *)object
                      projectId:(NSString *)projectId
                      historyId:(NSString *)historyId
                    executionId:(NSString *)executionId
                         stepId:(NSString *)stepId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId", @"stepId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}:publishXunitXmlFiles";
  GTLRToolResultsQuery_StepsPublishXunitXmlFiles *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.stepId = stepId;
  query.expectedObjectClass = [GTLRToolResults_Step class];
  query.loggingName = @"toolresults.steps.publishXunitXmlFiles";
  return query;
}

@end

@implementation GTLRToolResultsQuery_TestCasesGet

@dynamic executionId, historyId, projectId, stepId, testCaseId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         historyId:(NSString *)historyId
                       executionId:(NSString *)executionId
                            stepId:(NSString *)stepId
                        testCaseId:(NSString *)testCaseId {
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId", @"stepId", @"testCaseId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/testCases/{testCaseId}";
  GTLRToolResultsQuery_TestCasesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.stepId = stepId;
  query.testCaseId = testCaseId;
  query.expectedObjectClass = [GTLRToolResults_TestCase class];
  query.loggingName = @"toolresults.testCases.get";
  return query;
}

@end

@implementation GTLRToolResultsQuery_TestCasesList

@dynamic executionId, historyId, pageSize, pageToken, projectId, stepId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         historyId:(NSString *)historyId
                       executionId:(NSString *)executionId
                            stepId:(NSString *)stepId {
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId", @"stepId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/testCases";
  GTLRToolResultsQuery_TestCasesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.stepId = stepId;
  query.expectedObjectClass = [GTLRToolResults_ListTestCasesResponse class];
  query.loggingName = @"toolresults.testCases.list";
  return query;
}

@end

@implementation GTLRToolResultsQuery_ThumbnailsList

@dynamic executionId, historyId, pageSize, pageToken, projectId, stepId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         historyId:(NSString *)historyId
                       executionId:(NSString *)executionId
                            stepId:(NSString *)stepId {
  NSArray *pathParams = @[
    @"executionId", @"historyId", @"projectId", @"stepId"
  ];
  NSString *pathURITemplate = @"toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/thumbnails";
  GTLRToolResultsQuery_ThumbnailsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.historyId = historyId;
  query.executionId = executionId;
  query.stepId = stepId;
  query.expectedObjectClass = [GTLRToolResults_ListStepThumbnailsResponse class];
  query.loggingName = @"toolresults.thumbnails.list";
  return query;
}

@end
