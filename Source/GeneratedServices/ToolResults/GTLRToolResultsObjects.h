// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Tool Results API (toolresults/v1beta3)
// Description:
//   Reads and publishes results from Firebase Test Lab.
// Documentation:
//   https://firebase.google.com/docs/test-lab/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRToolResults_AndroidAppInfo;
@class GTLRToolResults_AndroidInstrumentationTest;
@class GTLRToolResults_AndroidRoboTest;
@class GTLRToolResults_AndroidTest;
@class GTLRToolResults_Any;
@class GTLRToolResults_AppStartTime;
@class GTLRToolResults_BasicPerfSampleSeries;
@class GTLRToolResults_CPUInfo;
@class GTLRToolResults_Duration;
@class GTLRToolResults_Execution;
@class GTLRToolResults_FailureDetail;
@class GTLRToolResults_FileReference;
@class GTLRToolResults_GraphicsStats;
@class GTLRToolResults_GraphicsStatsBucket;
@class GTLRToolResults_History;
@class GTLRToolResults_Image;
@class GTLRToolResults_InconclusiveDetail;
@class GTLRToolResults_MemoryInfo;
@class GTLRToolResults_Outcome;
@class GTLRToolResults_PerfEnvironment;
@class GTLRToolResults_PerfSample;
@class GTLRToolResults_PerfSampleSeries;
@class GTLRToolResults_Screen;
@class GTLRToolResults_ScreenshotCluster;
@class GTLRToolResults_SkippedDetail;
@class GTLRToolResults_Specification;
@class GTLRToolResults_StackTrace;
@class GTLRToolResults_Status;
@class GTLRToolResults_Step;
@class GTLRToolResults_StepDimensionValueEntry;
@class GTLRToolResults_StepLabelsEntry;
@class GTLRToolResults_SuccessDetail;
@class GTLRToolResults_TestCaseReference;
@class GTLRToolResults_TestExecutionStep;
@class GTLRToolResults_TestIssue;
@class GTLRToolResults_TestSuiteOverview;
@class GTLRToolResults_TestTiming;
@class GTLRToolResults_Thumbnail;
@class GTLRToolResults_Timestamp;
@class GTLRToolResults_ToolExecution;
@class GTLRToolResults_ToolExecutionStep;
@class GTLRToolResults_ToolExitCode;
@class GTLRToolResults_ToolOutputReference;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRToolResults_BasicPerfSampleSeries.perfMetricType

/** Value: "cpu" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_Cpu;
/** Value: "graphics" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_Graphics;
/** Value: "memory" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_Memory;
/** Value: "network" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_Network;
/** Value: "perfMetricTypeUnspecified" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_PerfMetricTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRToolResults_BasicPerfSampleSeries.perfUnit

/** Value: "byte" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_Byte;
/** Value: "bytesPerSecond" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_BytesPerSecond;
/** Value: "framesPerSecond" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_FramesPerSecond;
/** Value: "kibibyte" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_Kibibyte;
/** Value: "percent" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_Percent;
/** Value: "perfUnitUnspecified" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_PerfUnitUnspecified;

// ----------------------------------------------------------------------------
// GTLRToolResults_BasicPerfSampleSeries.sampleSeriesLabel

/** Value: "cpuKernel" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_CpuKernel;
/** Value: "cpuTotal" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_CpuTotal;
/** Value: "cpuUser" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_CpuUser;
/** Value: "graphicsFrameRate" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_GraphicsFrameRate;
/** Value: "memoryRssPrivate" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_MemoryRssPrivate;
/** Value: "memoryRssShared" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_MemoryRssShared;
/** Value: "memoryRssTotal" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_MemoryRssTotal;
/** Value: "memoryTotal" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_MemoryTotal;
/** Value: "networkReceived" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_NetworkReceived;
/** Value: "networkSent" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_NetworkSent;
/** Value: "ntBytesReceived" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_NtBytesReceived;
/** Value: "ntBytesTransferred" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_NtBytesTransferred;
/** Value: "sampleSeriesTypeUnspecified" */
GTLR_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_SampleSeriesTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRToolResults_Execution.state

/** Value: "complete" */
GTLR_EXTERN NSString * const kGTLRToolResults_Execution_State_Complete;
/** Value: "inProgress" */
GTLR_EXTERN NSString * const kGTLRToolResults_Execution_State_InProgress;
/** Value: "pending" */
GTLR_EXTERN NSString * const kGTLRToolResults_Execution_State_Pending;
/** Value: "unknownState" */
GTLR_EXTERN NSString * const kGTLRToolResults_Execution_State_UnknownState;

// ----------------------------------------------------------------------------
// GTLRToolResults_Outcome.summary

/** Value: "failure" */
GTLR_EXTERN NSString * const kGTLRToolResults_Outcome_Summary_Failure;
/** Value: "inconclusive" */
GTLR_EXTERN NSString * const kGTLRToolResults_Outcome_Summary_Inconclusive;
/** Value: "skipped" */
GTLR_EXTERN NSString * const kGTLRToolResults_Outcome_Summary_Skipped;
/** Value: "success" */
GTLR_EXTERN NSString * const kGTLRToolResults_Outcome_Summary_Success;
/** Value: "unset" */
GTLR_EXTERN NSString * const kGTLRToolResults_Outcome_Summary_Unset;

// ----------------------------------------------------------------------------
// GTLRToolResults_PerfMetricsSummary.perfMetrics

/** Value: "cpu" */
GTLR_EXTERN NSString * const kGTLRToolResults_PerfMetricsSummary_PerfMetrics_Cpu;
/** Value: "graphics" */
GTLR_EXTERN NSString * const kGTLRToolResults_PerfMetricsSummary_PerfMetrics_Graphics;
/** Value: "memory" */
GTLR_EXTERN NSString * const kGTLRToolResults_PerfMetricsSummary_PerfMetrics_Memory;
/** Value: "network" */
GTLR_EXTERN NSString * const kGTLRToolResults_PerfMetricsSummary_PerfMetrics_Network;
/** Value: "perfMetricTypeUnspecified" */
GTLR_EXTERN NSString * const kGTLRToolResults_PerfMetricsSummary_PerfMetrics_PerfMetricTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRToolResults_Step.state

/** Value: "complete" */
GTLR_EXTERN NSString * const kGTLRToolResults_Step_State_Complete;
/** Value: "inProgress" */
GTLR_EXTERN NSString * const kGTLRToolResults_Step_State_InProgress;
/** Value: "pending" */
GTLR_EXTERN NSString * const kGTLRToolResults_Step_State_Pending;
/** Value: "unknownState" */
GTLR_EXTERN NSString * const kGTLRToolResults_Step_State_UnknownState;

// ----------------------------------------------------------------------------
// GTLRToolResults_TestIssue.category

/** Value: "common" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Category_Common;
/** Value: "robo" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Category_Robo;
/** Value: "unspecifiedCategory" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Category_UnspecifiedCategory;

// ----------------------------------------------------------------------------
// GTLRToolResults_TestIssue.severity

/** Value: "info" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Severity_Info;
/** Value: "severe" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Severity_Severe;
/** Value: "suggestion" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Severity_Suggestion;
/** Value: "unspecifiedSeverity" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Severity_UnspecifiedSeverity;
/** Value: "warning" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Severity_Warning;

// ----------------------------------------------------------------------------
// GTLRToolResults_TestIssue.type

/** Value: "anr" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_Anr;
/** Value: "availableDeepLinks" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_AvailableDeepLinks;
/** Value: "compatibleWithOrchestrator" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_CompatibleWithOrchestrator;
/** Value: "completeRoboScriptExecution" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_CompleteRoboScriptExecution;
/** Value: "encounteredLoginScreen" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_EncounteredLoginScreen;
/** Value: "encounteredNonAndroidUiWidgetScreen" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_EncounteredNonAndroidUiWidgetScreen;
/** Value: "failedToInstall" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_FailedToInstall;
/** Value: "fatalException" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_FatalException;
/** Value: "inAppPurchases" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_InAppPurchases;
/** Value: "incompleteRoboScriptExecution" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_IncompleteRoboScriptExecution;
/** Value: "insufficientCoverage" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_InsufficientCoverage;
/** Value: "iosCrash" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_IosCrash;
/** Value: "iosException" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_IosException;
/** Value: "launcherActivityNotFound" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_LauncherActivityNotFound;
/** Value: "nativeCrash" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_NativeCrash;
/** Value: "nonSdkApiUsageViolation" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_NonSdkApiUsageViolation;
/** Value: "performedGoogleLogin" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_PerformedGoogleLogin;
/** Value: "performedMonkeyActions" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_PerformedMonkeyActions;
/** Value: "startActivityNotFound" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_StartActivityNotFound;
/** Value: "unspecifiedType" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_UnspecifiedType;
/** Value: "unusedRoboDirective" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_UnusedRoboDirective;
/** Value: "usedRoboDirective" */
GTLR_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_UsedRoboDirective;

/**
 *  Android app information.
 */
@interface GTLRToolResults_AndroidAppInfo : GTLRObject

/** The name of the app. Optional */
@property(nonatomic, copy, nullable) NSString *name;

/** The package name of the app. Required. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The internal version code of the app. Optional. */
@property(nonatomic, copy, nullable) NSString *versionCode;

/** The version name of the app. Optional. */
@property(nonatomic, copy, nullable) NSString *versionName;

@end


/**
 *  A test of an Android application that can control an Android component
 *  independently of its normal lifecycle.
 *  See for more information on types of Android tests.
 */
@interface GTLRToolResults_AndroidInstrumentationTest : GTLRObject

/** The java package for the test to be executed. Required */
@property(nonatomic, copy, nullable) NSString *testPackageId;

/** The InstrumentationTestRunner class. Required */
@property(nonatomic, copy, nullable) NSString *testRunnerClass;

/**
 *  Each target must be fully qualified with the package name or class name, in
 *  one of these formats: - "package package_name" - "class
 *  package_name.class_name" - "class package_name.class_name#method_name"
 *  If empty, all targets in the module will be run.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *testTargets;

/**
 *  The flag indicates whether Android Test Orchestrator will be used to run
 *  test or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useOrchestrator;

@end


/**
 *  A test of an android application that explores the application on a virtual
 *  or physical Android device, finding culprits and crashes as it goes.
 */
@interface GTLRToolResults_AndroidRoboTest : GTLRObject

/** The initial activity that should be used to start the app. Optional */
@property(nonatomic, copy, nullable) NSString *appInitialActivity;

/** The java package for the bootstrap. Optional */
@property(nonatomic, copy, nullable) NSString *bootstrapPackageId;

/** The runner class for the bootstrap. Optional */
@property(nonatomic, copy, nullable) NSString *bootstrapRunnerClass;

/**
 *  The max depth of the traversal stack Robo can explore. Optional
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxDepth;

/**
 *  The max number of steps/actions Robo can execute. Default is no limit (0).
 *  Optional
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxSteps;

@end


/**
 *  An Android mobile test specification.
 */
@interface GTLRToolResults_AndroidTest : GTLRObject

/** Information about the application under test. */
@property(nonatomic, strong, nullable) GTLRToolResults_AndroidAppInfo *androidAppInfo;

/** An Android instrumentation test. */
@property(nonatomic, strong, nullable) GTLRToolResults_AndroidInstrumentationTest *androidInstrumentationTest;

/** An Android robo test. */
@property(nonatomic, strong, nullable) GTLRToolResults_AndroidRoboTest *androidRoboTest;

/** Max time a test is allowed to run before it is automatically cancelled. */
@property(nonatomic, strong, nullable) GTLRToolResults_Duration *testTimeout;

@end


/**
 *  `Any` contains an arbitrary serialized protocol buffer message along with a
 *  URL that describes the type of the serialized message.
 *  Protobuf library provides support to pack/unpack Any values in the form of
 *  utility functions or additional generated methods of the Any type.
 *  Example 1: Pack and unpack a message in C++.
 *  Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&foo)) { ...
 *  }
 *  Example 2: Pack and unpack a message in Java.
 *  Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo =
 *  any.unpack(Foo.class); }
 *  Example 3: Pack and unpack a message in Python.
 *  foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR):
 *  any.Unpack(foo) ...
 *  Example 4: Pack and unpack a message in Go
 *  foo := &pb.Foo{...} any, err := ptypes.MarshalAny(foo) ... foo := &pb.Foo{}
 *  if err := ptypes.UnmarshalAny(any, foo); err != nil { ... }
 *  The pack methods provided by protobuf library will by default use
 *  'type.googleapis.com/full.type.name' as the type URL and the unpack methods
 *  only use the fully qualified type name after the last '/' in the type URL,
 *  for example "foo.bar.com/x/y.z" will yield type name "y.z".
 *  JSON ==== The JSON representation of an `Any` value uses the regular
 *  representation of the deserialized, embedded message, with an additional
 *  field `\@type` which contains the type URL. Example:
 *  package google.profile; message Person { string first_name = 1; string
 *  last_name = 2; }
 *  { "\@type": "type.googleapis.com/google.profile.Person", "firstName": ,
 *  "lastName": }
 *  If the embedded message type is well-known and has a custom JSON
 *  representation, that representation will be embedded adding a field `value`
 *  which holds the custom JSON in addition to the `\@type` field. Example (for
 *  message [google.protobuf.Duration][]):
 *  { "\@type": "type.googleapis.com/google.protobuf.Duration", "value":
 *  "1.212s" }
 */
@interface GTLRToolResults_Any : GTLRObject

/**
 *  A URL/resource name that uniquely identifies the type of the serialized
 *  protocol buffer message. This string must contain at least one "/"
 *  character. The last segment of the URL's path must represent the fully
 *  qualified name of the type (as in `path/google.protobuf.Duration`). The name
 *  should be in a canonical form (e.g., leading "." is not accepted).
 *  In practice, teams usually precompile into the binary all types that they
 *  expect it to use in the context of Any. However, for URLs which use the
 *  scheme `http`, `https`, or no scheme, one can optionally set up a type
 *  server that maps type URLs to message definitions as follows:
 *  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL
 *  must yield a [google.protobuf.Type][] value in binary format, or produce an
 *  error. * Applications are allowed to cache lookup results based on the URL,
 *  or have them precompiled into a binary to avoid any lookup. Therefore,
 *  binary compatibility needs to be preserved on changes to types. (Use
 *  versioned type names to manage breaking changes.)
 *  Note: this functionality is not currently available in the official protobuf
 *  release, and it is not used for type URLs beginning with
 *  type.googleapis.com.
 *  Schemes other than `http`, `https` (or the empty scheme) might be used with
 *  implementation specific semantics.
 */
@property(nonatomic, copy, nullable) NSString *typeUrl;

/**
 *  Must be a valid serialized protocol buffer of the above specified type.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRToolResults_AppStartTime
 */
@interface GTLRToolResults_AppStartTime : GTLRObject

/**
 *  Optional. The time from app start to reaching the developer-reported "fully
 *  drawn" time. This is only stored if the app includes a call to
 *  Activity.reportFullyDrawn(). See
 *  https://developer.android.com/topic/performance/launch-time.html#time-full
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Duration *fullyDrawnTime;

/**
 *  The time from app start to the first displayed activity being drawn, as
 *  reported in Logcat. See
 *  https://developer.android.com/topic/performance/launch-time.html#time-initial
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Duration *initialDisplayTime;

@end


/**
 *  Encapsulates the metadata for basic sample series represented by a line
 *  chart
 */
@interface GTLRToolResults_BasicPerfSampleSeries : GTLRObject

/**
 *  perfMetricType
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_Cpu Value
 *        "cpu"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_Graphics
 *        Value "graphics"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_Memory Value
 *        "memory"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_Network
 *        Value "network"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_PerfMetricTypeUnspecified
 *        Value "perfMetricTypeUnspecified"
 */
@property(nonatomic, copy, nullable) NSString *perfMetricType;

/**
 *  perfUnit
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_Byte Value "byte"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_BytesPerSecond
 *        Value "bytesPerSecond"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_FramesPerSecond
 *        Value "framesPerSecond"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_Kibibyte Value
 *        "kibibyte"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_Percent Value
 *        "percent"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_PerfUnitUnspecified
 *        Value "perfUnitUnspecified"
 */
@property(nonatomic, copy, nullable) NSString *perfUnit;

/**
 *  sampleSeriesLabel
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_CpuKernel
 *        Value "cpuKernel"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_CpuTotal
 *        Value "cpuTotal"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_CpuUser
 *        Value "cpuUser"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_GraphicsFrameRate
 *        Value "graphicsFrameRate"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_MemoryRssPrivate
 *        Value "memoryRssPrivate"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_MemoryRssShared
 *        Value "memoryRssShared"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_MemoryRssTotal
 *        Value "memoryRssTotal"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_MemoryTotal
 *        Value "memoryTotal"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_NetworkReceived
 *        Value "networkReceived"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_NetworkSent
 *        Value "networkSent"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_NtBytesReceived
 *        Value "ntBytesReceived"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_NtBytesTransferred
 *        Value "ntBytesTransferred"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_SampleSeriesTypeUnspecified
 *        Value "sampleSeriesTypeUnspecified"
 */
@property(nonatomic, copy, nullable) NSString *sampleSeriesLabel;

@end


/**
 *  The request must provide up to a maximum of 5000 samples to be created; a
 *  larger sample size will cause an INVALID_ARGUMENT error
 */
@interface GTLRToolResults_BatchCreatePerfSamplesRequest : GTLRObject

/** The set of PerfSamples to create should not include existing timestamps */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_PerfSample *> *perfSamples;

@end


/**
 *  GTLRToolResults_BatchCreatePerfSamplesResponse
 */
@interface GTLRToolResults_BatchCreatePerfSamplesResponse : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_PerfSample *> *perfSamples;

@end


/**
 *  GTLRToolResults_CPUInfo
 */
@interface GTLRToolResults_CPUInfo : GTLRObject

/**
 *  description of the device processor ie '1.8 GHz hexa core 64-bit ARMv8-A'
 */
@property(nonatomic, copy, nullable) NSString *cpuProcessor;

/**
 *  the CPU clock speed in GHz
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cpuSpeedInGhz;

/**
 *  the number of CPU cores
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numberOfCores;

@end


/**
 *  A Duration represents a signed, fixed-length span of time represented as a
 *  count of seconds and fractions of seconds at nanosecond resolution. It is
 *  independent of any calendar and concepts like "day" or "month". It is
 *  related to Timestamp in that the difference between two Timestamp values is
 *  a Duration and it can be added or subtracted from a Timestamp. Range is
 *  approximately +-10,000 years.
 *  # Examples
 *  Example 1: Compute Duration from two Timestamps in pseudo code.
 *  Timestamp start = ...; Timestamp end = ...; Duration duration = ...;
 *  duration.seconds = end.seconds - start.seconds; duration.nanos = end.nanos -
 *  start.nanos;
 *  if (duration.seconds 0) { duration.seconds += 1; duration.nanos -=
 *  1000000000; } else if (durations.seconds > 0 && duration.nanos < 0) {
 *  duration.seconds -= 1; duration.nanos += 1000000000; }
 *  Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.
 *  Timestamp start = ...; Duration duration = ...; Timestamp end = ...;
 *  end.seconds = start.seconds + duration.seconds; end.nanos = start.nanos +
 *  duration.nanos;
 *  if (end.nanos = 1000000000) { end.seconds += 1; end.nanos -= 1000000000; }
 *  Example 3: Compute Duration from datetime.timedelta in Python.
 *  td = datetime.timedelta(days=3, minutes=10) duration = Duration()
 *  duration.FromTimedelta(td)
 *  # JSON Mapping
 *  In JSON format, the Duration type is encoded as a string rather than an
 *  object, where the string ends in the suffix "s" (indicating seconds) and is
 *  preceded by the number of seconds, with nanoseconds expressed as fractional
 *  seconds. For example, 3 seconds with 0 nanoseconds should be encoded in JSON
 *  format as "3s", while 3 seconds and 1 nanosecond should be expressed in JSON
 *  format as "3.000000001s", and 3 seconds and 1 microsecond should be
 *  expressed in JSON format as "3.000001s".
 */
@interface GTLRToolResults_Duration : GTLRObject

/**
 *  Signed fractions of a second at nanosecond resolution of the span of time.
 *  Durations less than one second are represented with a 0 `seconds` field and
 *  a positive or negative `nanos` field. For durations of one second or more, a
 *  non-zero value for the `nanos` field must be of the same sign as the
 *  `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Signed seconds of the span of time. Must be from -315,576,000,000 to
 *  +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min
 *  * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

@end


/**
 *  An Execution represents a collection of Steps. For instance, it could
 *  represent: - a mobile test executed across a range of device configurations
 *  - a jenkins job with a build step followed by a test step
 *  The maximum size of an execution message is 1 MiB.
 *  An Execution can be updated until its state is set to COMPLETE at which
 *  point it becomes immutable.
 */
@interface GTLRToolResults_Execution : GTLRObject

/**
 *  The time when the Execution status transitioned to COMPLETE.
 *  This value will be set automatically when state transitions to COMPLETE.
 *  - In response: set if the execution state is COMPLETE. - In create/update
 *  request: never set
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Timestamp *completionTime;

/**
 *  The time when the Execution was created.
 *  This value will be set automatically when CreateExecution is called.
 *  - In response: always set - In create/update request: never set
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Timestamp *creationTime;

/**
 *  A unique identifier within a History for this Execution.
 *  Returns INVALID_ARGUMENT if this field is set or overwritten by the caller.
 *  - In response always set - In create/update request: never set
 */
@property(nonatomic, copy, nullable) NSString *executionId;

/**
 *  Classify the result, for example into SUCCESS or FAILURE
 *  - In response: present if set by create/update request - In create/update
 *  request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Outcome *outcome;

/**
 *  Lightweight information about execution request.
 *  - In response: present if set by create - In create: optional - In update:
 *  optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Specification *specification;

/**
 *  The initial state is IN_PROGRESS.
 *  The only legal state transitions is from IN_PROGRESS to COMPLETE.
 *  A PRECONDITION_FAILED will be returned if an invalid transition is
 *  requested.
 *  The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be
 *  returned if the state is set to COMPLETE multiple times.
 *  If the state is set to COMPLETE, all the in-progress steps within the
 *  execution will be set as COMPLETE. If the outcome of the step is not set,
 *  the outcome will be set to INCONCLUSIVE.
 *  - In response always set - In create/update request: optional
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_Execution_State_Complete Value "complete"
 *    @arg @c kGTLRToolResults_Execution_State_InProgress Value "inProgress"
 *    @arg @c kGTLRToolResults_Execution_State_Pending Value "pending"
 *    @arg @c kGTLRToolResults_Execution_State_UnknownState Value "unknownState"
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  TestExecution Matrix ID that the TestExecutionService uses.
 *  - In response: present if set by create - In create: optional - In update:
 *  never set
 */
@property(nonatomic, copy, nullable) NSString *testExecutionMatrixId;

@end


/**
 *  GTLRToolResults_FailureDetail
 */
@interface GTLRToolResults_FailureDetail : GTLRObject

/**
 *  If the failure was severe because the system (app) under test crashed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *crashed;

/**
 *  If an app is not installed and thus no test can be run with the app. This
 *  might be caused by trying to run a test on an unsupported platform.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *notInstalled;

/**
 *  If a native process (including any other than the app) crashed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *otherNativeCrash;

/**
 *  If the test overran some time limit, and that is why it failed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timedOut;

/**
 *  If the robo was unable to crawl the app; perhaps because the app did not
 *  start.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *unableToCrawl;

@end


/**
 *  A reference to a file.
 */
@interface GTLRToolResults_FileReference : GTLRObject

/**
 *  The URI of a file stored in Google Cloud Storage.
 *  For example: http://storage.googleapis.com/mybucket/path/to/test.xml or in
 *  gsutil format: gs://mybucket/path/to/test.xml with version-specific info,
 *  gs://mybucket/path/to/test.xml#1360383693690000
 *  An INVALID_ARGUMENT error will be returned if the URI format is not
 *  supported.
 *  - In response: always set - In create/update request: always set
 */
@property(nonatomic, copy, nullable) NSString *fileUri;

@end


/**
 *  Graphics statistics for the App. The information is collected from 'adb
 *  shell dumpsys graphicsstats'. For more info see:
 *  https://developer.android.com/training/testing/performance.html Statistics
 *  will only be present for API 23+.
 */
@interface GTLRToolResults_GraphicsStats : GTLRObject

/**
 *  Histogram of frame render times. There should be 154 buckets ranging from
 *  [5ms, 6ms) to [4950ms, infinity)
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_GraphicsStatsBucket *> *buckets;

/**
 *  Total "high input latency" events.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *highInputLatencyCount;

/**
 *  Total frames with slow render time. Should be <= total_frames.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *jankyFrames;

/**
 *  Total "missed vsync" events.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *missedVsyncCount;

/**
 *  50th percentile frame render time in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *p50Millis;

/**
 *  90th percentile frame render time in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *p90Millis;

/**
 *  95th percentile frame render time in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *p95Millis;

/**
 *  99th percentile frame render time in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *p99Millis;

/**
 *  Total "slow bitmap upload" events.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slowBitmapUploadCount;

/**
 *  Total "slow draw" events.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slowDrawCount;

/**
 *  Total "slow UI thread" events.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slowUiThreadCount;

/**
 *  Total frames rendered by package.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalFrames;

@end


/**
 *  GTLRToolResults_GraphicsStatsBucket
 */
@interface GTLRToolResults_GraphicsStatsBucket : GTLRObject

/**
 *  Number of frames in the bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *frameCount;

/**
 *  Lower bound of render time in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *renderMillis;

@end


/**
 *  A History represents a sorted list of Executions ordered by the
 *  start_timestamp_millis field (descending). It can be used to group all the
 *  Executions of a continuous build.
 *  Note that the ordering only operates on one-dimension. If a repository has
 *  multiple branches, it means that multiple histories will need to be used in
 *  order to order Executions per branch.
 */
@interface GTLRToolResults_History : GTLRObject

/**
 *  A short human-readable (plain text) name to display in the UI. Maximum of
 *  100 characters.
 *  - In response: present if set during create. - In create request: optional
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  A unique identifier within a project for this History.
 *  Returns INVALID_ARGUMENT if this field is set or overwritten by the caller.
 *  - In response always set - In create request: never set
 */
@property(nonatomic, copy, nullable) NSString *historyId;

/**
 *  A name to uniquely identify a history within a project. Maximum of 200
 *  characters.
 *  - In response always set - In create request: always set
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  An image, with a link to the main image and a thumbnail.
 */
@interface GTLRToolResults_Image : GTLRObject

/** An error explaining why the thumbnail could not be rendered. */
@property(nonatomic, strong, nullable) GTLRToolResults_Status *error;

/**
 *  A reference to the full-size, original image.
 *  This is the same as the tool_outputs entry for the image under its Step.
 *  Always set.
 */
@property(nonatomic, strong, nullable) GTLRToolResults_ToolOutputReference *sourceImage;

/**
 *  The step to which the image is attached.
 *  Always set.
 */
@property(nonatomic, copy, nullable) NSString *stepId;

/** The thumbnail. */
@property(nonatomic, strong, nullable) GTLRToolResults_Thumbnail *thumbnail;

@end


/**
 *  GTLRToolResults_InconclusiveDetail
 */
@interface GTLRToolResults_InconclusiveDetail : GTLRObject

/**
 *  If the end user aborted the test execution before a pass or fail could be
 *  determined. For example, the user pressed ctrl-c which sent a kill signal to
 *  the test runner while the test was running.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *abortedByUser;

/**
 *  If the test runner could not determine success or failure because the test
 *  depends on a component other than the system under test which failed.
 *  For example, a mobile test requires provisioning a device where the test
 *  executes, and that provisioning can fail.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *infrastructureFailure;

@end


/**
 *  GTLRToolResults_ListExecutionsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "executions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRToolResults_ListExecutionsResponse : GTLRCollectionObject

/**
 *  Executions.
 *  Always set.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_Execution *> *executions;

/**
 *  A continuation token to resume the query at the next item.
 *  Will only be set if there are more Executions to fetch.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for HistoryService.List
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "histories" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRToolResults_ListHistoriesResponse : GTLRCollectionObject

/**
 *  Histories.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_History *> *histories;

/**
 *  A continuation token to resume the query at the next item.
 *  Will only be set if there are more histories to fetch.
 *  Tokens are valid for up to one hour from the time of the first list request.
 *  For instance, if you make a list request at 1PM and use the token from this
 *  first request 10 minutes later, the token from this second response will
 *  only be valid for 50 minutes.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRToolResults_ListPerfSampleSeriesResponse
 */
@interface GTLRToolResults_ListPerfSampleSeriesResponse : GTLRObject

/** The resulting PerfSampleSeries sorted by id */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_PerfSampleSeries *> *perfSampleSeries;

@end


/**
 *  GTLRToolResults_ListPerfSamplesResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "perfSamples" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRToolResults_ListPerfSamplesResponse : GTLRCollectionObject

/**
 *  Optional, returned if result size exceeds the page size specified in the
 *  request (or the default page size, 500, if unspecified). It indicates the
 *  last sample timestamp to be used as page_token in subsequent request
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  perfSamples
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_PerfSample *> *perfSamples;

@end


/**
 *  GTLRToolResults_ListScreenshotClustersResponse
 */
@interface GTLRToolResults_ListScreenshotClustersResponse : GTLRObject

/** The set of clusters associated with an execution Always set */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_ScreenshotCluster *> *clusters;

@end


/**
 *  Response message for StepService.List.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "steps" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRToolResults_ListStepsResponse : GTLRCollectionObject

/**
 *  A continuation token to resume the query at the next item.
 *  If set, indicates that there are more steps to read, by calling list again
 *  with this value in the page_token field.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Steps.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_Step *> *steps;

@end


/**
 *  A response containing the thumbnails in a step.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "thumbnails" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRToolResults_ListStepThumbnailsResponse : GTLRCollectionObject

/**
 *  A continuation token to resume the query at the next item.
 *  If set, indicates that there are more thumbnails to read, by calling list
 *  again with this value in the page_token field.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of image data.
 *  Images are returned in a deterministic order; they are ordered by these
 *  factors, in order of importance: * First, by their associated test case.
 *  Images without a test case are considered greater than images with one. *
 *  Second, by their creation time. Images without a creation time are greater
 *  than images with one. * Third, by the order in which they were added to the
 *  step (by calls to CreateStep or UpdateStep).
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_Image *> *thumbnails;

@end


/**
 *  GTLRToolResults_MemoryInfo
 */
@interface GTLRToolResults_MemoryInfo : GTLRObject

/**
 *  Maximum memory that can be allocated to the process in KiB
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memoryCapInKibibyte;

/**
 *  Total memory available on the device in KiB
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memoryTotalInKibibyte;

@end


/**
 *  Interprets a result so that humans and machines can act on it.
 */
@interface GTLRToolResults_Outcome : GTLRObject

/**
 *  More information about a FAILURE outcome.
 *  Returns INVALID_ARGUMENT if this field is set but the summary is not
 *  FAILURE.
 *  Optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_FailureDetail *failureDetail;

/**
 *  More information about an INCONCLUSIVE outcome.
 *  Returns INVALID_ARGUMENT if this field is set but the summary is not
 *  INCONCLUSIVE.
 *  Optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_InconclusiveDetail *inconclusiveDetail;

/**
 *  More information about a SKIPPED outcome.
 *  Returns INVALID_ARGUMENT if this field is set but the summary is not
 *  SKIPPED.
 *  Optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_SkippedDetail *skippedDetail;

/**
 *  More information about a SUCCESS outcome.
 *  Returns INVALID_ARGUMENT if this field is set but the summary is not
 *  SUCCESS.
 *  Optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_SuccessDetail *successDetail;

/**
 *  The simplest way to interpret a result.
 *  Required
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_Outcome_Summary_Failure Value "failure"
 *    @arg @c kGTLRToolResults_Outcome_Summary_Inconclusive Value "inconclusive"
 *    @arg @c kGTLRToolResults_Outcome_Summary_Skipped Value "skipped"
 *    @arg @c kGTLRToolResults_Outcome_Summary_Success Value "success"
 *    @arg @c kGTLRToolResults_Outcome_Summary_Unset Value "unset"
 */
@property(nonatomic, copy, nullable) NSString *summary;

@end


/**
 *  Encapsulates performance environment info
 */
@interface GTLRToolResults_PerfEnvironment : GTLRObject

/** CPU related environment info */
@property(nonatomic, strong, nullable) GTLRToolResults_CPUInfo *cpuInfo;

/** Memory related environment info */
@property(nonatomic, strong, nullable) GTLRToolResults_MemoryInfo *memoryInfo;

@end


/**
 *  A summary of perf metrics collected and performance environment info
 */
@interface GTLRToolResults_PerfMetricsSummary : GTLRObject

@property(nonatomic, strong, nullable) GTLRToolResults_AppStartTime *appStartTime;

/** A tool results execution ID. */
@property(nonatomic, copy, nullable) NSString *executionId;

/**
 *  Graphics statistics for the entire run. Statistics are reset at the
 *  beginning of the run and collected at the end of the run.
 */
@property(nonatomic, strong, nullable) GTLRToolResults_GraphicsStats *graphicsStats;

/** A tool results history ID. */
@property(nonatomic, copy, nullable) NSString *historyId;

/**
 *  Describes the environment in which the performance metrics were collected
 */
@property(nonatomic, strong, nullable) GTLRToolResults_PerfEnvironment *perfEnvironment;

/** Set of resource collected */
@property(nonatomic, strong, nullable) NSArray<NSString *> *perfMetrics;

/** The cloud project */
@property(nonatomic, copy, nullable) NSString *projectId;

/** A tool results step ID. */
@property(nonatomic, copy, nullable) NSString *stepId;

@end


/**
 *  Resource representing a single performance measure or data point
 */
@interface GTLRToolResults_PerfSample : GTLRObject

/** Timestamp of collection */
@property(nonatomic, strong, nullable) GTLRToolResults_Timestamp *sampleTime;

/**
 *  Value observed
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *value;

@end


/**
 *  Resource representing a collection of performance samples (or data points)
 */
@interface GTLRToolResults_PerfSampleSeries : GTLRObject

/** Basic series represented by a line chart */
@property(nonatomic, strong, nullable) GTLRToolResults_BasicPerfSampleSeries *basicPerfSampleSeries;

/** A tool results execution ID. */
@property(nonatomic, copy, nullable) NSString *executionId;

/** A tool results history ID. */
@property(nonatomic, copy, nullable) NSString *historyId;

/** The cloud project */
@property(nonatomic, copy, nullable) NSString *projectId;

/** A sample series id */
@property(nonatomic, copy, nullable) NSString *sampleSeriesId;

/** A tool results step ID. */
@property(nonatomic, copy, nullable) NSString *stepId;

@end


/**
 *  Per-project settings for the Tool Results service.
 */
@interface GTLRToolResults_ProjectSettings : GTLRObject

/**
 *  The name of the Google Cloud Storage bucket to which results are written.
 *  By default, this is unset.
 *  In update request: optional In response: optional
 */
@property(nonatomic, copy, nullable) NSString *defaultBucket;

/**
 *  The name of the project's settings.
 *  Always of the form: projects/{project-id}/settings
 *  In update request: never set In response: always set
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Request message for StepService.PublishXunitXmlFiles.
 */
@interface GTLRToolResults_PublishXunitXmlFilesRequest : GTLRObject

/**
 *  URI of the Xunit XML files to publish.
 *  The maximum size of the file this reference is pointing to is 50MB.
 *  Required.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_FileReference *> *xunitXmlFiles;

@end


/**
 *  GTLRToolResults_Screen
 */
@interface GTLRToolResults_Screen : GTLRObject

/** File reference of the png file. Required. */
@property(nonatomic, copy, nullable) NSString *fileReference;

/** Locale of the device that the screenshot was taken on. Required. */
@property(nonatomic, copy, nullable) NSString *locale;

/** Model of the device that the screenshot was taken on. Required. */
@property(nonatomic, copy, nullable) NSString *model;

/** OS version of the device that the screenshot was taken on. Required. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  GTLRToolResults_ScreenshotCluster
 */
@interface GTLRToolResults_ScreenshotCluster : GTLRObject

/** A string that describes the activity of every screen in the cluster. */
@property(nonatomic, copy, nullable) NSString *activity;

/** A unique identifier for the cluster. */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  A singular screen that represents the cluster as a whole. This screen will
 *  act as the "cover" of the entire cluster. When users look at the clusters,
 *  only the key screen from each cluster will be shown. Which screen is the key
 *  screen is determined by the ClusteringAlgorithm
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Screen *keyScreen;

/** Full list of screens. */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_Screen *> *screens;

@end


/**
 *  GTLRToolResults_SkippedDetail
 */
@interface GTLRToolResults_SkippedDetail : GTLRObject

/**
 *  If the App doesn't support the specific API level.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *incompatibleAppVersion;

/**
 *  If the App doesn't run on the specific architecture, for example, x86.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *incompatibleArchitecture;

/**
 *  If the requested OS version doesn't run on the specific device model.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *incompatibleDevice;

@end


/**
 *  The details about how to run the execution.
 */
@interface GTLRToolResults_Specification : GTLRObject

/** An Android mobile test execution specification. */
@property(nonatomic, strong, nullable) GTLRToolResults_AndroidTest *androidTest;

@end


/**
 *  A stacktrace.
 */
@interface GTLRToolResults_StackTrace : GTLRObject

/**
 *  The stack trace message.
 *  Required
 */
@property(nonatomic, copy, nullable) NSString *exception;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users - Flexible enough to meet
 *  unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message, and error details. The error code should be an enum value of
 *  [google.rpc.Code][], but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be mapped differently. For example, it will likely be mapped to some
 *  exceptions in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a consistent developer
 *  experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may have
 *  a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for each
 *  error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRToolResults_Status : GTLRObject

/**
 *  The status code, which should be an enum value of [google.rpc.Code][].
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_Any *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  [google.rpc.Status.details][] field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  A Step represents a single operation performed as part of Execution. A step
 *  can be used to represent the execution of a tool ( for example a test runner
 *  execution or an execution of a compiler).
 *  Steps can overlap (for instance two steps might have the same start time if
 *  some operations are done in parallel).
 *  Here is an example, let's consider that we have a continuous build is
 *  executing a test runner for each iteration. The workflow would look like: -
 *  user creates a Execution with id 1 - user creates an TestExecutionStep with
 *  id 100 for Execution 1 - user update TestExecutionStep with id 100 to add a
 *  raw xml log + the service parses the xml logs and returns a
 *  TestExecutionStep with updated TestResult(s). - user update the status of
 *  TestExecutionStep with id 100 to COMPLETE
 *  A Step can be updated until its state is set to COMPLETE at which points it
 *  becomes immutable.
 */
@interface GTLRToolResults_Step : GTLRObject

/**
 *  The time when the step status was set to complete.
 *  This value will be set automatically when state transitions to COMPLETE.
 *  - In response: set if the execution state is COMPLETE. - In create/update
 *  request: never set
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Timestamp *completionTime;

/**
 *  The time when the step was created.
 *  - In response: always set - In create/update request: never set
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Timestamp *creationTime;

/**
 *  A description of this tool For example: mvn clean package -D skipTests=true
 *  - In response: present if set by create/update request - In create/update
 *  request: optional
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  How much the device resource is used to perform the test.
 *  This is the device usage used for billing purpose, which is different from
 *  the run_duration, for example, infrastructure failure won't be charged for
 *  device usage.
 *  PRECONDITION_FAILED will be returned if one attempts to set a device_usage
 *  on a step which already has this field set.
 *  - In response: present if previously set. - In create request: optional - In
 *  update request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Duration *deviceUsageDuration;

/**
 *  If the execution containing this step has any dimension_definition set, then
 *  this field allows the child to specify the values of the dimensions.
 *  The keys must exactly match the dimension_definition of the execution.
 *  For example, if the execution has `dimension_definition = ['attempt',
 *  'device']` then a step must define values for those dimensions, eg.
 *  `dimension_value = ['attempt': '1', 'device': 'Nexus 6']`
 *  If a step does not participate in one dimension of the matrix, the value for
 *  that dimension should be empty string. For example, if one of the tests is
 *  executed by a runner which does not support retries, the step could have
 *  `dimension_value = ['attempt': '', 'device': 'Nexus 6']`
 *  If the step does not participate in any dimensions of the matrix, it may
 *  leave dimension_value unset.
 *  A PRECONDITION_FAILED will be returned if any of the keys do not exist in
 *  the dimension_definition of the execution.
 *  A PRECONDITION_FAILED will be returned if another step in this execution
 *  already has the same name and dimension_value, but differs on other data
 *  fields, for example, step field is different.
 *  A PRECONDITION_FAILED will be returned if dimension_value is set, and there
 *  is a dimension_definition in the execution which is not specified as one of
 *  the keys.
 *  - In response: present if set by create - In create request: optional - In
 *  update request: never set
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_StepDimensionValueEntry *> *dimensionValue;

/**
 *  Whether any of the outputs of this step are images whose thumbnails can be
 *  fetched with ListThumbnails.
 *  - In response: always set - In create/update request: never set
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasImages;

/**
 *  Arbitrary user-supplied key/value pairs that are associated with the step.
 *  Users are responsible for managing the key namespace such that keys don't
 *  accidentally collide.
 *  An INVALID_ARGUMENT will be returned if the number of labels exceeds 100 or
 *  if the length of any of the keys or values exceeds 100 characters.
 *  - In response: always set - In create request: optional - In update request:
 *  optional; any new key/value pair will be added to the map, and any new value
 *  for an existing key will update that key's value
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_StepLabelsEntry *> *labels;

/**
 *  A short human-readable name to display in the UI. Maximum of 100 characters.
 *  For example: Clean build
 *  A PRECONDITION_FAILED will be returned upon creating a new step if it shares
 *  its name and dimension_value with an existing step. If two steps represent a
 *  similar action, but have different dimension values, they should share the
 *  same name. For instance, if the same set of tests is run on two different
 *  platforms, the two steps should have the same name.
 *  - In response: always set - In create request: always set - In update
 *  request: never set
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Classification of the result, for example into SUCCESS or FAILURE
 *  - In response: present if set by create/update request - In create/update
 *  request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Outcome *outcome;

/**
 *  How long it took for this step to run.
 *  If unset, this is set to the difference between creation_time and
 *  completion_time when the step is set to the COMPLETE state. In some cases,
 *  it is appropriate to set this value separately: For instance, if a step is
 *  created, but the operation it represents is queued for a few minutes before
 *  it executes, it would be appropriate not to include the time spent queued in
 *  its run_duration.
 *  PRECONDITION_FAILED will be returned if one attempts to set a run_duration
 *  on a step which already has this field set.
 *  - In response: present if previously set; always present on COMPLETE step -
 *  In create request: optional - In update request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Duration *runDuration;

/**
 *  The initial state is IN_PROGRESS. The only legal state transitions are *
 *  IN_PROGRESS -> COMPLETE
 *  A PRECONDITION_FAILED will be returned if an invalid transition is
 *  requested.
 *  It is valid to create Step with a state set to COMPLETE. The state can only
 *  be set to COMPLETE once. A PRECONDITION_FAILED will be returned if the state
 *  is set to COMPLETE multiple times.
 *  - In response: always set - In create/update request: optional
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_Step_State_Complete Value "complete"
 *    @arg @c kGTLRToolResults_Step_State_InProgress Value "inProgress"
 *    @arg @c kGTLRToolResults_Step_State_Pending Value "pending"
 *    @arg @c kGTLRToolResults_Step_State_UnknownState Value "unknownState"
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  A unique identifier within a Execution for this Step.
 *  Returns INVALID_ARGUMENT if this field is set or overwritten by the caller.
 *  - In response: always set - In create/update request: never set
 */
@property(nonatomic, copy, nullable) NSString *stepId;

/** An execution of a test runner. */
@property(nonatomic, strong, nullable) GTLRToolResults_TestExecutionStep *testExecutionStep;

/** An execution of a tool (used for steps we don't explicitly support). */
@property(nonatomic, strong, nullable) GTLRToolResults_ToolExecutionStep *toolExecutionStep;

@end


/**
 *  GTLRToolResults_StepDimensionValueEntry
 */
@interface GTLRToolResults_StepDimensionValueEntry : GTLRObject

@property(nonatomic, copy, nullable) NSString *key;
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRToolResults_StepLabelsEntry
 */
@interface GTLRToolResults_StepLabelsEntry : GTLRObject

@property(nonatomic, copy, nullable) NSString *key;
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRToolResults_SuccessDetail
 */
@interface GTLRToolResults_SuccessDetail : GTLRObject

/**
 *  If a native process other than the app crashed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *otherNativeCrash;

@end


/**
 *  A reference to a test case.
 *  Test case references are canonically ordered lexicographically by these
 *  three factors: * First, by test_suite_name. * Second, by class_name. *
 *  Third, by name.
 */
@interface GTLRToolResults_TestCaseReference : GTLRObject

/**
 *  The name of the class.
 *
 *  Remapped to 'classNameProperty' to avoid NSObject's 'className'.
 */
@property(nonatomic, copy, nullable) NSString *classNameProperty;

/**
 *  The name of the test case.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The name of the test suite to which this test case belongs. */
@property(nonatomic, copy, nullable) NSString *testSuiteName;

@end


/**
 *  A step that represents running tests.
 *  It accepts ant-junit xml files which will be parsed into structured test
 *  results by the service. Xml file paths are updated in order to append more
 *  files, however they can't be deleted.
 *  Users can also add test results manually by using the test_result field.
 */
@interface GTLRToolResults_TestExecutionStep : GTLRObject

/**
 *  Issues observed during the test execution.
 *  For example, if the mobile app under test crashed during the test, the error
 *  message and the stack trace content can be recorded here to assist
 *  debugging.
 *  - In response: present if set by create or update - In create/update
 *  request: optional
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_TestIssue *> *testIssues;

/**
 *  List of test suite overview contents. This could be parsed from xUnit XML
 *  log by server, or uploaded directly by user. This references should only be
 *  called when test suites are fully parsed or uploaded.
 *  The maximum allowed number of test suite overviews per step is 1000.
 *  - In response: always set - In create request: optional - In update request:
 *  never (use publishXunitXmlFiles custom method instead)
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_TestSuiteOverview *> *testSuiteOverviews;

/**
 *  The timing break down of the test execution.
 *  - In response: present if set by create or update - In create/update
 *  request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_TestTiming *testTiming;

/**
 *  Represents the execution of the test runner.
 *  The exit code of this tool will be used to determine if the test passed.
 *  - In response: always set - In create/update request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_ToolExecution *toolExecution;

@end


/**
 *  An issue detected occurring during a test execution.
 */
@interface GTLRToolResults_TestIssue : GTLRObject

/**
 *  Category of issue. Required.
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_TestIssue_Category_Common Value "common"
 *    @arg @c kGTLRToolResults_TestIssue_Category_Robo Value "robo"
 *    @arg @c kGTLRToolResults_TestIssue_Category_UnspecifiedCategory Value
 *        "unspecifiedCategory"
 */
@property(nonatomic, copy, nullable) NSString *category;

/** A brief human-readable message describing the issue. Required. */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/**
 *  Severity of issue. Required.
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_TestIssue_Severity_Info Value "info"
 *    @arg @c kGTLRToolResults_TestIssue_Severity_Severe Value "severe"
 *    @arg @c kGTLRToolResults_TestIssue_Severity_Suggestion Value "suggestion"
 *    @arg @c kGTLRToolResults_TestIssue_Severity_UnspecifiedSeverity Value
 *        "unspecifiedSeverity"
 *    @arg @c kGTLRToolResults_TestIssue_Severity_Warning Value "warning"
 */
@property(nonatomic, copy, nullable) NSString *severity;

/** Deprecated in favor of stack trace fields inside specific warnings. */
@property(nonatomic, strong, nullable) GTLRToolResults_StackTrace *stackTrace;

/**
 *  Type of issue. Required.
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_TestIssue_Type_Anr Value "anr"
 *    @arg @c kGTLRToolResults_TestIssue_Type_AvailableDeepLinks Value
 *        "availableDeepLinks"
 *    @arg @c kGTLRToolResults_TestIssue_Type_CompatibleWithOrchestrator Value
 *        "compatibleWithOrchestrator"
 *    @arg @c kGTLRToolResults_TestIssue_Type_CompleteRoboScriptExecution Value
 *        "completeRoboScriptExecution"
 *    @arg @c kGTLRToolResults_TestIssue_Type_EncounteredLoginScreen Value
 *        "encounteredLoginScreen"
 *    @arg @c kGTLRToolResults_TestIssue_Type_EncounteredNonAndroidUiWidgetScreen
 *        Value "encounteredNonAndroidUiWidgetScreen"
 *    @arg @c kGTLRToolResults_TestIssue_Type_FailedToInstall Value
 *        "failedToInstall"
 *    @arg @c kGTLRToolResults_TestIssue_Type_FatalException Value
 *        "fatalException"
 *    @arg @c kGTLRToolResults_TestIssue_Type_InAppPurchases Value
 *        "inAppPurchases"
 *    @arg @c kGTLRToolResults_TestIssue_Type_IncompleteRoboScriptExecution
 *        Value "incompleteRoboScriptExecution"
 *    @arg @c kGTLRToolResults_TestIssue_Type_InsufficientCoverage Value
 *        "insufficientCoverage"
 *    @arg @c kGTLRToolResults_TestIssue_Type_IosCrash Value "iosCrash"
 *    @arg @c kGTLRToolResults_TestIssue_Type_IosException Value "iosException"
 *    @arg @c kGTLRToolResults_TestIssue_Type_LauncherActivityNotFound Value
 *        "launcherActivityNotFound"
 *    @arg @c kGTLRToolResults_TestIssue_Type_NativeCrash Value "nativeCrash"
 *    @arg @c kGTLRToolResults_TestIssue_Type_NonSdkApiUsageViolation Value
 *        "nonSdkApiUsageViolation"
 *    @arg @c kGTLRToolResults_TestIssue_Type_PerformedGoogleLogin Value
 *        "performedGoogleLogin"
 *    @arg @c kGTLRToolResults_TestIssue_Type_PerformedMonkeyActions Value
 *        "performedMonkeyActions"
 *    @arg @c kGTLRToolResults_TestIssue_Type_StartActivityNotFound Value
 *        "startActivityNotFound"
 *    @arg @c kGTLRToolResults_TestIssue_Type_UnspecifiedType Value
 *        "unspecifiedType"
 *    @arg @c kGTLRToolResults_TestIssue_Type_UnusedRoboDirective Value
 *        "unusedRoboDirective"
 *    @arg @c kGTLRToolResults_TestIssue_Type_UsedRoboDirective Value
 *        "usedRoboDirective"
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Warning message with additional details of the issue. Should always be a
 *  message from com.google.devtools.toolresults.v1.warnings
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Any *warning;

@end


/**
 *  A summary of a test suite result either parsed from XML or uploaded directly
 *  by a user.
 *  Note: the API related comments are for StepService only. This message is
 *  also being used in ExecutionService in a read only mode for the
 *  corresponding step.
 */
@interface GTLRToolResults_TestSuiteOverview : GTLRObject

/**
 *  Number of test cases in error, typically set by the service by parsing the
 *  xml_source.
 *  - In create/response: always set - In update request: never
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *errorCount;

/**
 *  Number of failed test cases, typically set by the service by parsing the
 *  xml_source. May also be set by the user.
 *  - In create/response: always set - In update request: never
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failureCount;

/**
 *  The name of the test suite.
 *  - In create/response: always set - In update request: never
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Number of test cases not run, typically set by the service by parsing the
 *  xml_source.
 *  - In create/response: always set - In update request: never
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skippedCount;

/**
 *  Number of test cases, typically set by the service by parsing the
 *  xml_source.
 *  - In create/response: always set - In update request: never
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalCount;

/**
 *  If this test suite was parsed from XML, this is the URI where the original
 *  XML file is stored.
 *  Note: Multiple test suites can share the same xml_source
 *  Returns INVALID_ARGUMENT if the uri format is not supported.
 *  - In create/response: optional - In update request: never
 */
@property(nonatomic, strong, nullable) GTLRToolResults_FileReference *xmlSource;

@end


/**
 *  Testing timing break down to know phases.
 */
@interface GTLRToolResults_TestTiming : GTLRObject

/**
 *  How long it took to run the test process.
 *  - In response: present if previously set. - In create/update request:
 *  optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Duration *testProcessDuration;

@end


/**
 *  A single thumbnail, with its size and format.
 */
@interface GTLRToolResults_Thumbnail : GTLRObject

/**
 *  The thumbnail's content type, i.e. "image/png".
 *  Always set.
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  The thumbnail file itself.
 *  That is, the bytes here are precisely the bytes that make up the thumbnail
 *  file; they can be served as an image as-is (with the appropriate content
 *  type.)
 *  Always set.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  The height of the thumbnail, in pixels.
 *  Always set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *heightPx;

/**
 *  The width of the thumbnail, in pixels.
 *  Always set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *widthPx;

@end


/**
 *  A Timestamp represents a point in time independent of any time zone or local
 *  calendar, encoded as a count of seconds and fractions of seconds at
 *  nanosecond resolution. The count is relative to an epoch at UTC midnight on
 *  January 1, 1970, in the proleptic Gregorian calendar which extends the
 *  Gregorian calendar backwards to year one.
 *  All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
 *  second table is needed for interpretation, using a [24-hour linear
 *  smear](https://developers.google.com/time/smear).
 *  The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
 *  restricting to that range, we ensure that we can convert to and from [RFC
 *  3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
 *  # Examples
 *  Example 1: Compute Timestamp from POSIX `time()`.
 *  Timestamp timestamp; timestamp.set_seconds(time(NULL));
 *  timestamp.set_nanos(0);
 *  Example 2: Compute Timestamp from POSIX `gettimeofday()`.
 *  struct timeval tv; gettimeofday(&tv, NULL);
 *  Timestamp timestamp; timestamp.set_seconds(tv.tv_sec);
 *  timestamp.set_nanos(tv.tv_usec * 1000);
 *  Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.
 *  FILETIME ft; GetSystemTimeAsFileTime(&ft); UINT64 ticks =
 *  (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;
 *  // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z //
 *  is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z. Timestamp
 *  timestamp; timestamp.set_seconds((INT64) ((ticks / 10000000) -
 *  11644473600LL)); timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));
 *  Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.
 *  long millis = System.currentTimeMillis();
 *  Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
 *  .setNanos((int) ((millis % 1000) * 1000000)).build();
 *  Example 5: Compute Timestamp from current time in Python.
 *  timestamp = Timestamp() timestamp.GetCurrentTime()
 *  # JSON Mapping
 *  In JSON format, the Timestamp type is encoded as a string in the [RFC
 *  3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the format is
 *  "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z" where {year} is
 *  always expressed using four digits while {month}, {day}, {hour}, {min}, and
 *  {sec} are zero-padded to two digits each. The fractional seconds, which can
 *  go up to 9 digits (i.e. up to 1 nanosecond resolution), are optional. The
 *  "Z" suffix indicates the timezone ("UTC"); the timezone is required. A
 *  proto3 JSON serializer should always use UTC (as indicated by "Z") when
 *  printing the Timestamp type and a proto3 JSON parser should be able to
 *  accept both UTC and other timezones (as indicated by an offset).
 *  For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past 01:30 UTC
 *  on January 15, 2017.
 *  In JavaScript, one can convert a Date object to this format using the
 *  standard
 *  [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
 *  method. In Python, a standard `datetime.datetime` object can be converted to
 *  this format using
 *  [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
 *  the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
 *  the Joda Time's [`ISODateTimeFormat.dateTime()`](
 *  http://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime%2D%2D
 *  ) to obtain a formatter capable of generating timestamps in this format.
 */
@interface GTLRToolResults_Timestamp : GTLRObject

/**
 *  Non-negative fractions of a second at nanosecond resolution. Negative second
 *  values with fractions must still have non-negative nanos values that count
 *  forward in time. Must be from 0 to 999,999,999 inclusive.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must
 *  be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

@end


/**
 *  An execution of an arbitrary tool. It could be a test runner or a tool
 *  copying artifacts or deploying code.
 */
@interface GTLRToolResults_ToolExecution : GTLRObject

/**
 *  The full tokenized command line including the program name (equivalent to
 *  argv in a C program).
 *  - In response: present if set by create request - In create request:
 *  optional - In update request: never set
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *commandLineArguments;

/**
 *  Tool execution exit code. This field will be set once the tool has exited.
 *  - In response: present if set by create/update request - In create request:
 *  optional - In update request: optional, a FAILED_PRECONDITION error will be
 *  returned if an exit_code is already set.
 */
@property(nonatomic, strong, nullable) GTLRToolResults_ToolExitCode *exitCode;

/**
 *  References to any plain text logs output the tool execution.
 *  This field can be set before the tool has exited in order to be able to have
 *  access to a live view of the logs while the tool is running.
 *  The maximum allowed number of tool logs per step is 1000.
 *  - In response: present if set by create/update request - In create request:
 *  optional - In update request: optional, any value provided will be appended
 *  to the existing list
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_FileReference *> *toolLogs;

/**
 *  References to opaque files of any format output by the tool execution.
 *  The maximum allowed number of tool outputs per step is 1000.
 *  - In response: present if set by create/update request - In create request:
 *  optional - In update request: optional, any value provided will be appended
 *  to the existing list
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_ToolOutputReference *> *toolOutputs;

@end


/**
 *  Generic tool step to be used for binaries we do not explicitly support. For
 *  example: running cp to copy artifacts from one location to another.
 */
@interface GTLRToolResults_ToolExecutionStep : GTLRObject

/**
 *  A Tool execution.
 *  - In response: present if set by create/update request - In create/update
 *  request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_ToolExecution *toolExecution;

@end


/**
 *  Exit code from a tool execution.
 */
@interface GTLRToolResults_ToolExitCode : GTLRObject

/**
 *  Tool execution exit code. A value of 0 means that the execution was
 *  successful.
 *  - In response: always set - In create/update request: always set
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *number;

@end


/**
 *  A reference to a ToolExecution output file.
 */
@interface GTLRToolResults_ToolOutputReference : GTLRObject

/**
 *  The creation time of the file.
 *  - In response: present if set by create/update request - In create/update
 *  request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Timestamp *creationTime;

/**
 *  A FileReference to an output file.
 *  - In response: always set - In create/update request: always set
 */
@property(nonatomic, strong, nullable) GTLRToolResults_FileReference *output;

/**
 *  The test case to which this output file belongs.
 *  - In response: present if set by create/update request - In create/update
 *  request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_TestCaseReference *testCase;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
