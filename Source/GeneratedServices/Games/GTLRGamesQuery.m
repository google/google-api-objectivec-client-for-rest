// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play Game Services API (games/v1)
// Description:
//   The API for Google Play Game Services.
// Documentation:
//   https://developers.google.com/games/services/

#import "GTLRGamesQuery.h"

#import "GTLRGamesObjects.h"

// ----------------------------------------------------------------------------
// Constants

// collection
NSString * const kGTLRGamesCollectionAll        = @"all";
NSString * const kGTLRGamesCollectionConnected  = @"connected";
NSString * const kGTLRGamesCollectionPlayedWith = @"played_with";
NSString * const kGTLRGamesCollectionPublic     = @"PUBLIC";
NSString * const kGTLRGamesCollectionSocial     = @"SOCIAL";
NSString * const kGTLRGamesCollectionSocial1p   = @"SOCIAL_1P";
NSString * const kGTLRGamesCollectionVisible    = @"visible";

// includeRankType
NSString * const kGTLRGamesIncludeRankTypeAll    = @"ALL";
NSString * const kGTLRGamesIncludeRankTypePublic = @"PUBLIC";
NSString * const kGTLRGamesIncludeRankTypeSocial = @"SOCIAL";

// platformType
NSString * const kGTLRGamesPlatformTypeAndroid = @"ANDROID";
NSString * const kGTLRGamesPlatformTypeIos     = @"IOS";
NSString * const kGTLRGamesPlatformTypeWebApp  = @"WEB_APP";

// state
NSString * const kGTLRGamesStateAll      = @"ALL";
NSString * const kGTLRGamesStateHidden   = @"HIDDEN";
NSString * const kGTLRGamesStateRevealed = @"REVEALED";
NSString * const kGTLRGamesStateUnlocked = @"UNLOCKED";

// timeSpan
NSString * const kGTLRGamesTimeSpanAll     = @"ALL";
NSString * const kGTLRGamesTimeSpanAllTime = @"ALL_TIME";
NSString * const kGTLRGamesTimeSpanDaily   = @"DAILY";
NSString * const kGTLRGamesTimeSpanWeekly  = @"WEEKLY";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRGamesQuery

@dynamic fields;

@end

@implementation GTLRGamesQuery_AchievementDefinitionsList

@dynamic language, maxResults, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"achievements";
  GTLRGamesQuery_AchievementDefinitionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRGames_AchievementDefinitionsListResponse class];
  query.loggingName = @"games.achievementDefinitions.list";
  return query;
}

@end

@implementation GTLRGamesQuery_AchievementsIncrement

@dynamic achievementId, requestId, stepsToIncrement;

+ (instancetype)queryWithAchievementId:(NSString *)achievementId
                      stepsToIncrement:(NSInteger)stepsToIncrement {
  NSArray *pathParams = @[ @"achievementId" ];
  NSString *pathURITemplate = @"achievements/{achievementId}/increment";
  GTLRGamesQuery_AchievementsIncrement *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.achievementId = achievementId;
  query.stepsToIncrement = stepsToIncrement;
  query.expectedObjectClass = [GTLRGames_AchievementIncrementResponse class];
  query.loggingName = @"games.achievements.increment";
  return query;
}

@end

@implementation GTLRGamesQuery_AchievementsList

@dynamic language, maxResults, pageToken, playerId, state;

+ (instancetype)queryWithPlayerId:(NSString *)playerId {
  NSArray *pathParams = @[ @"playerId" ];
  NSString *pathURITemplate = @"players/{playerId}/achievements";
  GTLRGamesQuery_AchievementsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.playerId = playerId;
  query.expectedObjectClass = [GTLRGames_PlayerAchievementListResponse class];
  query.loggingName = @"games.achievements.list";
  return query;
}

@end

@implementation GTLRGamesQuery_AchievementsReveal

@dynamic achievementId;

+ (instancetype)queryWithAchievementId:(NSString *)achievementId {
  NSArray *pathParams = @[ @"achievementId" ];
  NSString *pathURITemplate = @"achievements/{achievementId}/reveal";
  GTLRGamesQuery_AchievementsReveal *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.achievementId = achievementId;
  query.expectedObjectClass = [GTLRGames_AchievementRevealResponse class];
  query.loggingName = @"games.achievements.reveal";
  return query;
}

@end

@implementation GTLRGamesQuery_AchievementsSetStepsAtLeast

@dynamic achievementId, steps;

+ (instancetype)queryWithAchievementId:(NSString *)achievementId
                                 steps:(NSInteger)steps {
  NSArray *pathParams = @[ @"achievementId" ];
  NSString *pathURITemplate = @"achievements/{achievementId}/setStepsAtLeast";
  GTLRGamesQuery_AchievementsSetStepsAtLeast *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.achievementId = achievementId;
  query.steps = steps;
  query.expectedObjectClass = [GTLRGames_AchievementSetStepsAtLeastResponse class];
  query.loggingName = @"games.achievements.setStepsAtLeast";
  return query;
}

@end

@implementation GTLRGamesQuery_AchievementsUnlock

@dynamic achievementId, builtinGameId;

+ (instancetype)queryWithAchievementId:(NSString *)achievementId {
  NSArray *pathParams = @[ @"achievementId" ];
  NSString *pathURITemplate = @"achievements/{achievementId}/unlock";
  GTLRGamesQuery_AchievementsUnlock *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.achievementId = achievementId;
  query.expectedObjectClass = [GTLRGames_AchievementUnlockResponse class];
  query.loggingName = @"games.achievements.unlock";
  return query;
}

@end

@implementation GTLRGamesQuery_AchievementsUpdateMultiple

@dynamic builtinGameId;

+ (instancetype)queryWithObject:(GTLRGames_AchievementUpdateMultipleRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"achievements/updateMultiple";
  GTLRGamesQuery_AchievementsUpdateMultiple *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGames_AchievementUpdateMultipleResponse class];
  query.loggingName = @"games.achievements.updateMultiple";
  return query;
}

@end

@implementation GTLRGamesQuery_ApplicationsGet

@dynamic applicationId, language, platformType;

+ (instancetype)queryWithApplicationId:(NSString *)applicationId {
  NSArray *pathParams = @[ @"applicationId" ];
  NSString *pathURITemplate = @"applications/{applicationId}";
  GTLRGamesQuery_ApplicationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.applicationId = applicationId;
  query.expectedObjectClass = [GTLRGames_Application class];
  query.loggingName = @"games.applications.get";
  return query;
}

@end

@implementation GTLRGamesQuery_ApplicationsPlayed

@dynamic builtinGameId;

+ (instancetype)query {
  NSString *pathURITemplate = @"applications/played";
  GTLRGamesQuery_ApplicationsPlayed *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.loggingName = @"games.applications.played";
  return query;
}

@end

@implementation GTLRGamesQuery_ApplicationsVerify

@dynamic applicationId;

+ (instancetype)queryWithApplicationId:(NSString *)applicationId {
  NSArray *pathParams = @[ @"applicationId" ];
  NSString *pathURITemplate = @"applications/{applicationId}/verify";
  GTLRGamesQuery_ApplicationsVerify *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.applicationId = applicationId;
  query.expectedObjectClass = [GTLRGames_ApplicationVerifyResponse class];
  query.loggingName = @"games.applications.verify";
  return query;
}

@end

@implementation GTLRGamesQuery_EventsListByPlayer

@dynamic language, maxResults, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"events";
  GTLRGamesQuery_EventsListByPlayer *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRGames_PlayerEventListResponse class];
  query.loggingName = @"games.events.listByPlayer";
  return query;
}

@end

@implementation GTLRGamesQuery_EventsListDefinitions

@dynamic language, maxResults, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"eventDefinitions";
  GTLRGamesQuery_EventsListDefinitions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRGames_EventDefinitionListResponse class];
  query.loggingName = @"games.events.listDefinitions";
  return query;
}

@end

@implementation GTLRGamesQuery_EventsRecord

@dynamic language;

+ (instancetype)queryWithObject:(GTLRGames_EventRecordRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"events";
  GTLRGamesQuery_EventsRecord *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGames_EventUpdateResponse class];
  query.loggingName = @"games.events.record";
  return query;
}

@end

@implementation GTLRGamesQuery_LeaderboardsGet

@dynamic language, leaderboardId;

+ (instancetype)queryWithLeaderboardId:(NSString *)leaderboardId {
  NSArray *pathParams = @[ @"leaderboardId" ];
  NSString *pathURITemplate = @"leaderboards/{leaderboardId}";
  GTLRGamesQuery_LeaderboardsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.leaderboardId = leaderboardId;
  query.expectedObjectClass = [GTLRGames_Leaderboard class];
  query.loggingName = @"games.leaderboards.get";
  return query;
}

@end

@implementation GTLRGamesQuery_LeaderboardsList

@dynamic language, maxResults, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"leaderboards";
  GTLRGamesQuery_LeaderboardsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRGames_LeaderboardListResponse class];
  query.loggingName = @"games.leaderboards.list";
  return query;
}

@end

@implementation GTLRGamesQuery_MetagameGetMetagameConfig

+ (instancetype)query {
  NSString *pathURITemplate = @"metagameConfig";
  GTLRGamesQuery_MetagameGetMetagameConfig *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRGames_MetagameConfig class];
  query.loggingName = @"games.metagame.getMetagameConfig";
  return query;
}

@end

@implementation GTLRGamesQuery_MetagameListCategoriesByPlayer

@dynamic collection, language, maxResults, pageToken, playerId;

+ (instancetype)queryWithPlayerId:(NSString *)playerId
                       collection:(NSString *)collection {
  NSArray *pathParams = @[
    @"collection", @"playerId"
  ];
  NSString *pathURITemplate = @"players/{playerId}/categories/{collection}";
  GTLRGamesQuery_MetagameListCategoriesByPlayer *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.playerId = playerId;
  query.collection = collection;
  query.expectedObjectClass = [GTLRGames_CategoryListResponse class];
  query.loggingName = @"games.metagame.listCategoriesByPlayer";
  return query;
}

@end

@implementation GTLRGamesQuery_PlayersGet

@dynamic language, playerId;

+ (instancetype)queryWithPlayerId:(NSString *)playerId {
  NSArray *pathParams = @[ @"playerId" ];
  NSString *pathURITemplate = @"players/{playerId}";
  GTLRGamesQuery_PlayersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.playerId = playerId;
  query.expectedObjectClass = [GTLRGames_Player class];
  query.loggingName = @"games.players.get";
  return query;
}

@end

@implementation GTLRGamesQuery_PlayersList

@dynamic collection, language, maxResults, pageToken;

+ (instancetype)queryWithCollection:(NSString *)collection {
  NSArray *pathParams = @[ @"collection" ];
  NSString *pathURITemplate = @"players/me/players/{collection}";
  GTLRGamesQuery_PlayersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.collection = collection;
  query.expectedObjectClass = [GTLRGames_PlayerListResponse class];
  query.loggingName = @"games.players.list";
  return query;
}

@end

@implementation GTLRGamesQuery_PushtokensRemove

+ (instancetype)queryWithObject:(GTLRGames_PushTokenId *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"pushtokens/remove";
  GTLRGamesQuery_PushtokensRemove *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.loggingName = @"games.pushtokens.remove";
  return query;
}

@end

@implementation GTLRGamesQuery_PushtokensUpdate

+ (instancetype)queryWithObject:(GTLRGames_PushToken *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"pushtokens";
  GTLRGamesQuery_PushtokensUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.loggingName = @"games.pushtokens.update";
  return query;
}

@end

@implementation GTLRGamesQuery_QuestMilestonesClaim

@dynamic milestoneId, questId, requestId;

+ (instancetype)queryWithQuestId:(NSString *)questId
                     milestoneId:(NSString *)milestoneId
                       requestId:(long long)requestId {
  NSArray *pathParams = @[
    @"milestoneId", @"questId"
  ];
  NSString *pathURITemplate = @"quests/{questId}/milestones/{milestoneId}/claim";
  GTLRGamesQuery_QuestMilestonesClaim *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.questId = questId;
  query.milestoneId = milestoneId;
  query.requestId = requestId;
  query.loggingName = @"games.questMilestones.claim";
  return query;
}

@end

@implementation GTLRGamesQuery_QuestsAccept

@dynamic language, questId;

+ (instancetype)queryWithQuestId:(NSString *)questId {
  NSArray *pathParams = @[ @"questId" ];
  NSString *pathURITemplate = @"quests/{questId}/accept";
  GTLRGamesQuery_QuestsAccept *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.questId = questId;
  query.expectedObjectClass = [GTLRGames_Quest class];
  query.loggingName = @"games.quests.accept";
  return query;
}

@end

@implementation GTLRGamesQuery_QuestsList

@dynamic language, maxResults, pageToken, playerId;

+ (instancetype)queryWithPlayerId:(NSString *)playerId {
  NSArray *pathParams = @[ @"playerId" ];
  NSString *pathURITemplate = @"players/{playerId}/quests";
  GTLRGamesQuery_QuestsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.playerId = playerId;
  query.expectedObjectClass = [GTLRGames_QuestListResponse class];
  query.loggingName = @"games.quests.list";
  return query;
}

@end

@implementation GTLRGamesQuery_RevisionsCheck

@dynamic clientRevision;

+ (instancetype)queryWithClientRevision:(NSString *)clientRevision {
  NSString *pathURITemplate = @"revisions/check";
  GTLRGamesQuery_RevisionsCheck *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.clientRevision = clientRevision;
  query.expectedObjectClass = [GTLRGames_RevisionCheckResponse class];
  query.loggingName = @"games.revisions.check";
  return query;
}

@end

@implementation GTLRGamesQuery_RoomsCreate

@dynamic language;

+ (instancetype)queryWithObject:(GTLRGames_RoomCreateRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"rooms/create";
  GTLRGamesQuery_RoomsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGames_Room class];
  query.loggingName = @"games.rooms.create";
  return query;
}

@end

@implementation GTLRGamesQuery_RoomsDecline

@dynamic language, roomId;

+ (instancetype)queryWithRoomId:(NSString *)roomId {
  NSArray *pathParams = @[ @"roomId" ];
  NSString *pathURITemplate = @"rooms/{roomId}/decline";
  GTLRGamesQuery_RoomsDecline *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.roomId = roomId;
  query.expectedObjectClass = [GTLRGames_Room class];
  query.loggingName = @"games.rooms.decline";
  return query;
}

@end

@implementation GTLRGamesQuery_RoomsDismiss

@dynamic roomId;

+ (instancetype)queryWithRoomId:(NSString *)roomId {
  NSArray *pathParams = @[ @"roomId" ];
  NSString *pathURITemplate = @"rooms/{roomId}/dismiss";
  GTLRGamesQuery_RoomsDismiss *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.roomId = roomId;
  query.loggingName = @"games.rooms.dismiss";
  return query;
}

@end

@implementation GTLRGamesQuery_RoomsGet

@dynamic language, roomId;

+ (instancetype)queryWithRoomId:(NSString *)roomId {
  NSArray *pathParams = @[ @"roomId" ];
  NSString *pathURITemplate = @"rooms/{roomId}";
  GTLRGamesQuery_RoomsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.roomId = roomId;
  query.expectedObjectClass = [GTLRGames_Room class];
  query.loggingName = @"games.rooms.get";
  return query;
}

@end

@implementation GTLRGamesQuery_RoomsJoin

@dynamic language, roomId;

+ (instancetype)queryWithObject:(GTLRGames_RoomJoinRequest *)object
                         roomId:(NSString *)roomId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"roomId" ];
  NSString *pathURITemplate = @"rooms/{roomId}/join";
  GTLRGamesQuery_RoomsJoin *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.roomId = roomId;
  query.expectedObjectClass = [GTLRGames_Room class];
  query.loggingName = @"games.rooms.join";
  return query;
}

@end

@implementation GTLRGamesQuery_RoomsLeave

@dynamic language, roomId;

+ (instancetype)queryWithObject:(GTLRGames_RoomLeaveRequest *)object
                         roomId:(NSString *)roomId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"roomId" ];
  NSString *pathURITemplate = @"rooms/{roomId}/leave";
  GTLRGamesQuery_RoomsLeave *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.roomId = roomId;
  query.expectedObjectClass = [GTLRGames_Room class];
  query.loggingName = @"games.rooms.leave";
  return query;
}

@end

@implementation GTLRGamesQuery_RoomsList

@dynamic language, maxResults, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"rooms";
  GTLRGamesQuery_RoomsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRGames_RoomList class];
  query.loggingName = @"games.rooms.list";
  return query;
}

@end

@implementation GTLRGamesQuery_RoomsReportStatus

@dynamic language, roomId;

+ (instancetype)queryWithObject:(GTLRGames_RoomP2PStatuses *)object
                         roomId:(NSString *)roomId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"roomId" ];
  NSString *pathURITemplate = @"rooms/{roomId}/reportstatus";
  GTLRGamesQuery_RoomsReportStatus *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.roomId = roomId;
  query.expectedObjectClass = [GTLRGames_RoomStatus class];
  query.loggingName = @"games.rooms.reportStatus";
  return query;
}

@end

@implementation GTLRGamesQuery_ScoresGet

@dynamic includeRankType, language, leaderboardId, maxResults, pageToken,
         playerId, timeSpan;

+ (instancetype)queryWithPlayerId:(NSString *)playerId
                    leaderboardId:(NSString *)leaderboardId
                         timeSpan:(NSString *)timeSpan {
  NSArray *pathParams = @[
    @"leaderboardId", @"playerId", @"timeSpan"
  ];
  NSString *pathURITemplate = @"players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}";
  GTLRGamesQuery_ScoresGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.playerId = playerId;
  query.leaderboardId = leaderboardId;
  query.timeSpan = timeSpan;
  query.expectedObjectClass = [GTLRGames_PlayerLeaderboardScoreListResponse class];
  query.loggingName = @"games.scores.get";
  return query;
}

@end

@implementation GTLRGamesQuery_ScoresList

@dynamic collection, language, leaderboardId, maxResults, pageToken, timeSpan;

+ (instancetype)queryWithLeaderboardId:(NSString *)leaderboardId
                            collection:(NSString *)collection
                              timeSpan:(NSString *)timeSpan {
  NSArray *pathParams = @[
    @"collection", @"leaderboardId"
  ];
  NSString *pathURITemplate = @"leaderboards/{leaderboardId}/scores/{collection}";
  GTLRGamesQuery_ScoresList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.leaderboardId = leaderboardId;
  query.collection = collection;
  query.timeSpan = timeSpan;
  query.expectedObjectClass = [GTLRGames_LeaderboardScores class];
  query.loggingName = @"games.scores.list";
  return query;
}

@end

@implementation GTLRGamesQuery_ScoresListWindow

@dynamic collection, language, leaderboardId, maxResults, pageToken,
         resultsAbove, returnTopIfAbsent, timeSpan;

+ (instancetype)queryWithLeaderboardId:(NSString *)leaderboardId
                            collection:(NSString *)collection
                              timeSpan:(NSString *)timeSpan {
  NSArray *pathParams = @[
    @"collection", @"leaderboardId"
  ];
  NSString *pathURITemplate = @"leaderboards/{leaderboardId}/window/{collection}";
  GTLRGamesQuery_ScoresListWindow *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.leaderboardId = leaderboardId;
  query.collection = collection;
  query.timeSpan = timeSpan;
  query.expectedObjectClass = [GTLRGames_LeaderboardScores class];
  query.loggingName = @"games.scores.listWindow";
  return query;
}

@end

@implementation GTLRGamesQuery_ScoresSubmit

@dynamic language, leaderboardId, score, scoreTag;

+ (instancetype)queryWithLeaderboardId:(NSString *)leaderboardId
                                 score:(long long)score {
  NSArray *pathParams = @[ @"leaderboardId" ];
  NSString *pathURITemplate = @"leaderboards/{leaderboardId}/scores";
  GTLRGamesQuery_ScoresSubmit *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.leaderboardId = leaderboardId;
  query.score = score;
  query.expectedObjectClass = [GTLRGames_PlayerScoreResponse class];
  query.loggingName = @"games.scores.submit";
  return query;
}

@end

@implementation GTLRGamesQuery_ScoresSubmitMultiple

@dynamic language;

+ (instancetype)queryWithObject:(GTLRGames_PlayerScoreSubmissionList *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"leaderboards/scores";
  GTLRGamesQuery_ScoresSubmitMultiple *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGames_PlayerScoreListResponse class];
  query.loggingName = @"games.scores.submitMultiple";
  return query;
}

@end

@implementation GTLRGamesQuery_SnapshotsGet

@dynamic language, snapshotId;

+ (instancetype)queryWithSnapshotId:(NSString *)snapshotId {
  NSArray *pathParams = @[ @"snapshotId" ];
  NSString *pathURITemplate = @"snapshots/{snapshotId}";
  GTLRGamesQuery_SnapshotsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.snapshotId = snapshotId;
  query.expectedObjectClass = [GTLRGames_Snapshot class];
  query.loggingName = @"games.snapshots.get";
  return query;
}

@end

@implementation GTLRGamesQuery_SnapshotsList

@dynamic language, maxResults, pageToken, playerId;

+ (instancetype)queryWithPlayerId:(NSString *)playerId {
  NSArray *pathParams = @[ @"playerId" ];
  NSString *pathURITemplate = @"players/{playerId}/snapshots";
  GTLRGamesQuery_SnapshotsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.playerId = playerId;
  query.expectedObjectClass = [GTLRGames_SnapshotListResponse class];
  query.loggingName = @"games.snapshots.list";
  return query;
}

@end

@implementation GTLRGamesQuery_TurnBasedMatchesCancel

@dynamic matchId;

+ (instancetype)queryWithMatchId:(NSString *)matchId {
  NSArray *pathParams = @[ @"matchId" ];
  NSString *pathURITemplate = @"turnbasedmatches/{matchId}/cancel";
  GTLRGamesQuery_TurnBasedMatchesCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.matchId = matchId;
  query.loggingName = @"games.turnBasedMatches.cancel";
  return query;
}

@end

@implementation GTLRGamesQuery_TurnBasedMatchesCreate

@dynamic language;

+ (instancetype)queryWithObject:(GTLRGames_TurnBasedMatchCreateRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"turnbasedmatches/create";
  GTLRGamesQuery_TurnBasedMatchesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGames_TurnBasedMatch class];
  query.loggingName = @"games.turnBasedMatches.create";
  return query;
}

@end

@implementation GTLRGamesQuery_TurnBasedMatchesDecline

@dynamic language, matchId;

+ (instancetype)queryWithMatchId:(NSString *)matchId {
  NSArray *pathParams = @[ @"matchId" ];
  NSString *pathURITemplate = @"turnbasedmatches/{matchId}/decline";
  GTLRGamesQuery_TurnBasedMatchesDecline *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.matchId = matchId;
  query.expectedObjectClass = [GTLRGames_TurnBasedMatch class];
  query.loggingName = @"games.turnBasedMatches.decline";
  return query;
}

@end

@implementation GTLRGamesQuery_TurnBasedMatchesDismiss

@dynamic matchId;

+ (instancetype)queryWithMatchId:(NSString *)matchId {
  NSArray *pathParams = @[ @"matchId" ];
  NSString *pathURITemplate = @"turnbasedmatches/{matchId}/dismiss";
  GTLRGamesQuery_TurnBasedMatchesDismiss *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.matchId = matchId;
  query.loggingName = @"games.turnBasedMatches.dismiss";
  return query;
}

@end

@implementation GTLRGamesQuery_TurnBasedMatchesFinish

@dynamic language, matchId;

+ (instancetype)queryWithObject:(GTLRGames_TurnBasedMatchResults *)object
                        matchId:(NSString *)matchId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"matchId" ];
  NSString *pathURITemplate = @"turnbasedmatches/{matchId}/finish";
  GTLRGamesQuery_TurnBasedMatchesFinish *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.matchId = matchId;
  query.expectedObjectClass = [GTLRGames_TurnBasedMatch class];
  query.loggingName = @"games.turnBasedMatches.finish";
  return query;
}

@end

@implementation GTLRGamesQuery_TurnBasedMatchesGet

@dynamic includeMatchData, language, matchId;

+ (instancetype)queryWithMatchId:(NSString *)matchId {
  NSArray *pathParams = @[ @"matchId" ];
  NSString *pathURITemplate = @"turnbasedmatches/{matchId}";
  GTLRGamesQuery_TurnBasedMatchesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.matchId = matchId;
  query.expectedObjectClass = [GTLRGames_TurnBasedMatch class];
  query.loggingName = @"games.turnBasedMatches.get";
  return query;
}

@end

@implementation GTLRGamesQuery_TurnBasedMatchesJoin

@dynamic language, matchId;

+ (instancetype)queryWithMatchId:(NSString *)matchId {
  NSArray *pathParams = @[ @"matchId" ];
  NSString *pathURITemplate = @"turnbasedmatches/{matchId}/join";
  GTLRGamesQuery_TurnBasedMatchesJoin *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.matchId = matchId;
  query.expectedObjectClass = [GTLRGames_TurnBasedMatch class];
  query.loggingName = @"games.turnBasedMatches.join";
  return query;
}

@end

@implementation GTLRGamesQuery_TurnBasedMatchesLeave

@dynamic language, matchId;

+ (instancetype)queryWithMatchId:(NSString *)matchId {
  NSArray *pathParams = @[ @"matchId" ];
  NSString *pathURITemplate = @"turnbasedmatches/{matchId}/leave";
  GTLRGamesQuery_TurnBasedMatchesLeave *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.matchId = matchId;
  query.expectedObjectClass = [GTLRGames_TurnBasedMatch class];
  query.loggingName = @"games.turnBasedMatches.leave";
  return query;
}

@end

@implementation GTLRGamesQuery_TurnBasedMatchesLeaveTurn

@dynamic language, matchId, matchVersion, pendingParticipantId;

+ (instancetype)queryWithMatchId:(NSString *)matchId
                    matchVersion:(NSInteger)matchVersion {
  NSArray *pathParams = @[ @"matchId" ];
  NSString *pathURITemplate = @"turnbasedmatches/{matchId}/leaveTurn";
  GTLRGamesQuery_TurnBasedMatchesLeaveTurn *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.matchId = matchId;
  query.matchVersion = matchVersion;
  query.expectedObjectClass = [GTLRGames_TurnBasedMatch class];
  query.loggingName = @"games.turnBasedMatches.leaveTurn";
  return query;
}

@end

@implementation GTLRGamesQuery_TurnBasedMatchesList

@dynamic includeMatchData, language, maxCompletedMatches, maxResults, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"turnbasedmatches";
  GTLRGamesQuery_TurnBasedMatchesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRGames_TurnBasedMatchList class];
  query.loggingName = @"games.turnBasedMatches.list";
  return query;
}

@end

@implementation GTLRGamesQuery_TurnBasedMatchesRematch

@dynamic language, matchId, requestId;

+ (instancetype)queryWithMatchId:(NSString *)matchId {
  NSArray *pathParams = @[ @"matchId" ];
  NSString *pathURITemplate = @"turnbasedmatches/{matchId}/rematch";
  GTLRGamesQuery_TurnBasedMatchesRematch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.matchId = matchId;
  query.expectedObjectClass = [GTLRGames_TurnBasedMatchRematch class];
  query.loggingName = @"games.turnBasedMatches.rematch";
  return query;
}

@end

@implementation GTLRGamesQuery_TurnBasedMatchesSync

@dynamic includeMatchData, language, maxCompletedMatches, maxResults, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"turnbasedmatches/sync";
  GTLRGamesQuery_TurnBasedMatchesSync *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRGames_TurnBasedMatchSync class];
  query.loggingName = @"games.turnBasedMatches.sync";
  return query;
}

@end

@implementation GTLRGamesQuery_TurnBasedMatchesTakeTurn

@dynamic language, matchId;

+ (instancetype)queryWithObject:(GTLRGames_TurnBasedMatchTurn *)object
                        matchId:(NSString *)matchId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"matchId" ];
  NSString *pathURITemplate = @"turnbasedmatches/{matchId}/turn";
  GTLRGamesQuery_TurnBasedMatchesTakeTurn *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.matchId = matchId;
  query.expectedObjectClass = [GTLRGames_TurnBasedMatch class];
  query.loggingName = @"games.turnBasedMatches.takeTurn";
  return query;
}

@end
