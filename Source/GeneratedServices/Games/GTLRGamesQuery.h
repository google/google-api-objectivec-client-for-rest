// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play Game Services (games/v1)
// Description:
//   The Google Play games service allows developers to enhance games with
//   social leaderboards,
//   achievements, game state, sign-in with Google, and more.
// Documentation:
//   https://developers.google.com/games/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRGames_AchievementUpdateMultipleRequest;
@class GTLRGames_EventRecordRequest;
@class GTLRGames_PlayerScoreSubmissionList;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// collection

/** Value: "ALL" */
FOUNDATION_EXTERN NSString * const kGTLRGamesCollectionAll;
/** Value: "COLLECTION_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRGamesCollectionCollectionUnspecified;
/** Value: "CONNECTED" */
FOUNDATION_EXTERN NSString * const kGTLRGamesCollectionConnected;
/** Value: "FRIENDS" */
FOUNDATION_EXTERN NSString * const kGTLRGamesCollectionFriends;
/** Value: "FRIENDS_ALL" */
FOUNDATION_EXTERN NSString * const kGTLRGamesCollectionFriendsAll;
/** Value: "PUBLIC" */
FOUNDATION_EXTERN NSString * const kGTLRGamesCollectionPublic;
/** Value: "SCORE_COLLECTION_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRGamesCollectionScoreCollectionUnspecified;
/** Value: "SOCIAL" */
FOUNDATION_EXTERN NSString * const kGTLRGamesCollectionSocial;
/** Value: "VISIBLE" */
FOUNDATION_EXTERN NSString * const kGTLRGamesCollectionVisible;

// ----------------------------------------------------------------------------
// includeRankType

/** Value: "ALL" */
FOUNDATION_EXTERN NSString * const kGTLRGamesIncludeRankTypeAll;
/** Value: "INCLUDE_RANK_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRGamesIncludeRankTypeIncludeRankTypeUnspecified;
/** Value: "PUBLIC" */
FOUNDATION_EXTERN NSString * const kGTLRGamesIncludeRankTypePublic;
/** Value: "SOCIAL" */
FOUNDATION_EXTERN NSString * const kGTLRGamesIncludeRankTypeSocial;

// ----------------------------------------------------------------------------
// platformType

/** Value: "ANDROID" */
FOUNDATION_EXTERN NSString * const kGTLRGamesPlatformTypeAndroid;
/** Value: "IOS" */
FOUNDATION_EXTERN NSString * const kGTLRGamesPlatformTypeIos;
/** Value: "PLATFORM_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRGamesPlatformTypePlatformTypeUnspecified;
/** Value: "WEB_APP" */
FOUNDATION_EXTERN NSString * const kGTLRGamesPlatformTypeWebApp;

// ----------------------------------------------------------------------------
// state

/** Value: "ALL" */
FOUNDATION_EXTERN NSString * const kGTLRGamesStateAll;
/** Value: "HIDDEN" */
FOUNDATION_EXTERN NSString * const kGTLRGamesStateHidden;
/** Value: "REVEALED" */
FOUNDATION_EXTERN NSString * const kGTLRGamesStateRevealed;
/** Value: "UNLOCKED" */
FOUNDATION_EXTERN NSString * const kGTLRGamesStateUnlocked;

// ----------------------------------------------------------------------------
// timeSpan

/** Value: "ALL" */
FOUNDATION_EXTERN NSString * const kGTLRGamesTimeSpanAll;
/** Value: "ALL_TIME" */
FOUNDATION_EXTERN NSString * const kGTLRGamesTimeSpanAllTime;
/** Value: "DAILY" */
FOUNDATION_EXTERN NSString * const kGTLRGamesTimeSpanDaily;
/** Value: "SCORE_TIME_SPAN_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRGamesTimeSpanScoreTimeSpanUnspecified;
/** Value: "WEEKLY" */
FOUNDATION_EXTERN NSString * const kGTLRGamesTimeSpanWeekly;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Games query classes.
 */
@interface GTLRGamesQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Lists all the achievement definitions for your application.
 *
 *  Method: games.achievementDefinitions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_AchievementDefinitionsList : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForAchievementDefinitionsList]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of achievement resources to return in the response, used
 *  for paging. For any response, the actual number of achievement resources
 *  returned may be less than the specified `maxResults`.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRGames_AchievementDefinitionsListResponse.
 *
 *  Lists all the achievement definitions for your application.
 *
 *  @return GTLRGamesQuery_AchievementDefinitionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Increments the steps of the achievement with the given ID for the currently
 *  authenticated player.
 *
 *  Method: games.achievements.increment
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_AchievementsIncrement : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForAchievementsIncrementWithachievementId:stepsToIncrement:]

/** The ID of the achievement used by this method. */
@property(nonatomic, copy, nullable) NSString *achievementId;

/**
 *  A randomly generated numeric ID for each request specified by the caller.
 *  This number is used at the server to ensure that the request is handled
 *  correctly across retries.
 */
@property(nonatomic, assign) long long requestId;

/** The number of steps to increment. */
@property(nonatomic, assign) NSInteger stepsToIncrement;

/**
 *  Fetches a @c GTLRGames_AchievementIncrementResponse.
 *
 *  Increments the steps of the achievement with the given ID for the currently
 *  authenticated player.
 *
 *  @param achievementId The ID of the achievement used by this method.
 *  @param stepsToIncrement The number of steps to increment.
 *
 *  @return GTLRGamesQuery_AchievementsIncrement
 */
+ (instancetype)queryWithAchievementId:(NSString *)achievementId
                      stepsToIncrement:(NSInteger)stepsToIncrement;

@end

/**
 *  Lists the progress for all your application's achievements for the
 *  currently authenticated player.
 *
 *  Method: games.achievements.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_AchievementsList : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForAchievementsListWithplayerId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of achievement resources to return in the response, used
 *  for paging. For any response, the actual number of achievement resources
 *  returned may be less than the specified `maxResults`.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  A player ID. A value of `me` may be used in place of the
 *  authenticated player's ID.
 */
@property(nonatomic, copy, nullable) NSString *playerId;

/**
 *  Tells the server to return only achievements with the specified state. If
 *  this parameter isn't specified, all achievements are returned.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesStateAll Value "ALL"
 *    @arg @c kGTLRGamesStateHidden Value "HIDDEN"
 *    @arg @c kGTLRGamesStateRevealed Value "REVEALED"
 *    @arg @c kGTLRGamesStateUnlocked Value "UNLOCKED"
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Fetches a @c GTLRGames_PlayerAchievementListResponse.
 *
 *  Lists the progress for all your application's achievements for the
 *  currently authenticated player.
 *
 *  @param playerId A player ID. A value of `me` may be used in place of the
 *    authenticated player's ID.
 *
 *  @return GTLRGamesQuery_AchievementsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPlayerId:(NSString *)playerId;

@end

/**
 *  Sets the state of the achievement with the given ID to
 *  `REVEALED` for the currently authenticated player.
 *
 *  Method: games.achievements.reveal
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_AchievementsReveal : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForAchievementsRevealWithachievementId:]

/** The ID of the achievement used by this method. */
@property(nonatomic, copy, nullable) NSString *achievementId;

/**
 *  Fetches a @c GTLRGames_AchievementRevealResponse.
 *
 *  Sets the state of the achievement with the given ID to
 *  `REVEALED` for the currently authenticated player.
 *
 *  @param achievementId The ID of the achievement used by this method.
 *
 *  @return GTLRGamesQuery_AchievementsReveal
 */
+ (instancetype)queryWithAchievementId:(NSString *)achievementId;

@end

/**
 *  Sets the steps for the currently authenticated player towards unlocking an
 *  achievement. If the steps parameter is less than the current number of
 *  steps that the player already gained for the achievement, the achievement
 *  is not modified.
 *
 *  Method: games.achievements.setStepsAtLeast
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_AchievementsSetStepsAtLeast : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForAchievementsSetStepsAtLeastWithachievementId:steps:]

/** The ID of the achievement used by this method. */
@property(nonatomic, copy, nullable) NSString *achievementId;

/** The minimum value to set the steps to. */
@property(nonatomic, assign) NSInteger steps;

/**
 *  Fetches a @c GTLRGames_AchievementSetStepsAtLeastResponse.
 *
 *  Sets the steps for the currently authenticated player towards unlocking an
 *  achievement. If the steps parameter is less than the current number of
 *  steps that the player already gained for the achievement, the achievement
 *  is not modified.
 *
 *  @param achievementId The ID of the achievement used by this method.
 *  @param steps The minimum value to set the steps to.
 *
 *  @return GTLRGamesQuery_AchievementsSetStepsAtLeast
 */
+ (instancetype)queryWithAchievementId:(NSString *)achievementId
                                 steps:(NSInteger)steps;

@end

/**
 *  Unlocks this achievement for the currently authenticated player.
 *
 *  Method: games.achievements.unlock
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_AchievementsUnlock : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForAchievementsUnlockWithachievementId:]

/** The ID of the achievement used by this method. */
@property(nonatomic, copy, nullable) NSString *achievementId;

/**
 *  Fetches a @c GTLRGames_AchievementUnlockResponse.
 *
 *  Unlocks this achievement for the currently authenticated player.
 *
 *  @param achievementId The ID of the achievement used by this method.
 *
 *  @return GTLRGamesQuery_AchievementsUnlock
 */
+ (instancetype)queryWithAchievementId:(NSString *)achievementId;

@end

/**
 *  Updates multiple achievements for the currently authenticated player.
 *
 *  Method: games.achievements.updateMultiple
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_AchievementsUpdateMultiple : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForAchievementsUpdateMultipleWithObject:]

/**
 *  Fetches a @c GTLRGames_AchievementUpdateMultipleResponse.
 *
 *  Updates multiple achievements for the currently authenticated player.
 *
 *  @param object The @c GTLRGames_AchievementUpdateMultipleRequest to include
 *    in the query.
 *
 *  @return GTLRGamesQuery_AchievementsUpdateMultiple
 */
+ (instancetype)queryWithObject:(GTLRGames_AchievementUpdateMultipleRequest *)object;

@end

/**
 *  Retrieves the metadata of the application with the given ID. If the
 *  requested application is not available for the specified
 *  `platformType`, the returned response will not include any
 *  instance data.
 *
 *  Method: games.applications.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_ApplicationsGet : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForApplicationsGetWithapplicationId:]

/** The application ID from the Google Play developer console. */
@property(nonatomic, copy, nullable) NSString *applicationId;

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Restrict application details returned to the specific platform.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesPlatformTypePlatformTypeUnspecified Value
 *        "PLATFORM_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRGamesPlatformTypeAndroid Value "ANDROID"
 *    @arg @c kGTLRGamesPlatformTypeIos Value "IOS"
 *    @arg @c kGTLRGamesPlatformTypeWebApp Value "WEB_APP"
 */
@property(nonatomic, copy, nullable) NSString *platformType;

/**
 *  Fetches a @c GTLRGames_Application.
 *
 *  Retrieves the metadata of the application with the given ID. If the
 *  requested application is not available for the specified
 *  `platformType`, the returned response will not include any
 *  instance data.
 *
 *  @param applicationId The application ID from the Google Play developer
 *    console.
 *
 *  @return GTLRGamesQuery_ApplicationsGet
 */
+ (instancetype)queryWithApplicationId:(NSString *)applicationId;

@end

/**
 *  Indicate that the currently authenticated user is playing your
 *  application.
 *
 *  Method: games.applications.played
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_ApplicationsPlayed : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForApplicationsPlayed]

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Indicate that the currently authenticated user is playing your
 *  application.
 *
 *  @return GTLRGamesQuery_ApplicationsPlayed
 */
+ (instancetype)query;

@end

/**
 *  Verifies the auth token provided with this request is for the application
 *  with the specified ID, and returns the ID of the player it was granted for.
 *
 *  Method: games.applications.verify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_ApplicationsVerify : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForApplicationsVerifyWithapplicationId:]

/** The application ID from the Google Play developer console. */
@property(nonatomic, copy, nullable) NSString *applicationId;

/**
 *  Fetches a @c GTLRGames_ApplicationVerifyResponse.
 *
 *  Verifies the auth token provided with this request is for the application
 *  with the specified ID, and returns the ID of the player it was granted for.
 *
 *  @param applicationId The application ID from the Google Play developer
 *    console.
 *
 *  @return GTLRGamesQuery_ApplicationsVerify
 */
+ (instancetype)queryWithApplicationId:(NSString *)applicationId;

@end

/**
 *  Returns a list showing the current progress on events in this application
 *  for the currently authenticated user.
 *
 *  Method: games.events.listByPlayer
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_EventsListByPlayer : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForEventsListByPlayer]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of events to return in the response, used for paging.
 *  For any response, the actual number of events to return may be less than
 *  the specified maxResults.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRGames_PlayerEventListResponse.
 *
 *  Returns a list showing the current progress on events in this application
 *  for the currently authenticated user.
 *
 *  @return GTLRGamesQuery_EventsListByPlayer
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Returns a list of the event definitions in this application.
 *
 *  Method: games.events.listDefinitions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_EventsListDefinitions : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForEventsListDefinitions]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of event definitions to return in the response, used for
 *  paging. For any response, the actual number of event definitions to return
 *  may be less than the specified `maxResults`.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRGames_EventDefinitionListResponse.
 *
 *  Returns a list of the event definitions in this application.
 *
 *  @return GTLRGamesQuery_EventsListDefinitions
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Records a batch of changes to the number of times events have occurred for
 *  the currently authenticated user of this application.
 *
 *  Method: games.events.record
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_EventsRecord : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForEventsRecordWithObject:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Fetches a @c GTLRGames_EventUpdateResponse.
 *
 *  Records a batch of changes to the number of times events have occurred for
 *  the currently authenticated user of this application.
 *
 *  @param object The @c GTLRGames_EventRecordRequest to include in the query.
 *
 *  @return GTLRGamesQuery_EventsRecord
 */
+ (instancetype)queryWithObject:(GTLRGames_EventRecordRequest *)object;

@end

/**
 *  Retrieves the metadata of the leaderboard with the given ID.
 *
 *  Method: games.leaderboards.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_LeaderboardsGet : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForLeaderboardsGetWithleaderboardId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the leaderboard. */
@property(nonatomic, copy, nullable) NSString *leaderboardId;

/**
 *  Fetches a @c GTLRGames_Leaderboard.
 *
 *  Retrieves the metadata of the leaderboard with the given ID.
 *
 *  @param leaderboardId The ID of the leaderboard.
 *
 *  @return GTLRGamesQuery_LeaderboardsGet
 */
+ (instancetype)queryWithLeaderboardId:(NSString *)leaderboardId;

@end

/**
 *  Lists all the leaderboard metadata for your application.
 *
 *  Method: games.leaderboards.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_LeaderboardsList : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForLeaderboardsList]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of leaderboards to return in the response. For any
 *  response, the actual number of leaderboards returned may be less than the
 *  specified `maxResults`.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRGames_LeaderboardListResponse.
 *
 *  Lists all the leaderboard metadata for your application.
 *
 *  @return GTLRGamesQuery_LeaderboardsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Return the metagame configuration data for the calling application.
 *
 *  Method: games.metagame.getMetagameConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_MetagameGetMetagameConfig : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForMetagameGetMetagameConfig]

/**
 *  Fetches a @c GTLRGames_MetagameConfig.
 *
 *  Return the metagame configuration data for the calling application.
 *
 *  @return GTLRGamesQuery_MetagameGetMetagameConfig
 */
+ (instancetype)query;

@end

/**
 *  List play data aggregated per category for the player corresponding to
 *  `playerId`.
 *
 *  Method: games.metagame.listCategoriesByPlayer
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_MetagameListCategoriesByPlayer : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForMetagameListCategoriesByPlayerWithplayerId:collection:]

/**
 *  The collection of categories for which data will be returned.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesCollectionCollectionUnspecified Value
 *        "COLLECTION_UNSPECIFIED"
 *    @arg @c kGTLRGamesCollectionAll Value "ALL"
 */
@property(nonatomic, copy, nullable) NSString *collection;

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of category resources to return in the response, used
 *  for paging. For any response, the actual number of category resources
 *  returned may be less than the specified `maxResults`.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  A player ID. A value of `me` may be used in place of the
 *  authenticated player's ID.
 */
@property(nonatomic, copy, nullable) NSString *playerId;

/**
 *  Fetches a @c GTLRGames_CategoryListResponse.
 *
 *  List play data aggregated per category for the player corresponding to
 *  `playerId`.
 *
 *  @param playerId A player ID. A value of `me` may be used in place of the
 *    authenticated player's ID.
 *  @param collection The collection of categories for which data will be
 *    returned.
 *
 *  Likely values for @c collection:
 *    @arg @c kGTLRGamesCollectionCollectionUnspecified Value
 *        "COLLECTION_UNSPECIFIED"
 *    @arg @c kGTLRGamesCollectionAll Value "ALL"
 *
 *  @return GTLRGamesQuery_MetagameListCategoriesByPlayer
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPlayerId:(NSString *)playerId
                       collection:(NSString *)collection;

@end

/**
 *  Retrieves the Player resource with the given ID. To retrieve the player
 *  for the currently authenticated user, set `playerId` to `me`.
 *
 *  Method: games.players.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_PlayersGet : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForPlayersGetWithplayerId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  A player ID. A value of `me` may be used in place of the
 *  authenticated player's ID.
 */
@property(nonatomic, copy, nullable) NSString *playerId;

/**
 *  Fetches a @c GTLRGames_Player.
 *
 *  Retrieves the Player resource with the given ID. To retrieve the player
 *  for the currently authenticated user, set `playerId` to `me`.
 *
 *  @param playerId A player ID. A value of `me` may be used in place of the
 *    authenticated player's ID.
 *
 *  @return GTLRGamesQuery_PlayersGet
 */
+ (instancetype)queryWithPlayerId:(NSString *)playerId;

@end

/**
 *  Get the collection of players for the currently authenticated user.
 *
 *  Method: games.players.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_PlayersList : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForPlayersListWithcollection:]

/**
 *  Collection of players being retrieved
 *
 *  Likely values:
 *    @arg @c kGTLRGamesCollectionConnected Value "CONNECTED"
 *    @arg @c kGTLRGamesCollectionVisible Value "VISIBLE"
 *    @arg @c kGTLRGamesCollectionFriendsAll Value "FRIENDS_ALL"
 */
@property(nonatomic, copy, nullable) NSString *collection;

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of player resources to return in the response, used for
 *  paging. For any response, the actual number of player resources returned
 *  may be less than the specified `maxResults`.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRGames_PlayerListResponse.
 *
 *  Get the collection of players for the currently authenticated user.
 *
 *  @param collection Collection of players being retrieved
 *
 *  Likely values for @c collection:
 *    @arg @c kGTLRGamesCollectionConnected Value "CONNECTED"
 *    @arg @c kGTLRGamesCollectionVisible Value "VISIBLE"
 *    @arg @c kGTLRGamesCollectionFriendsAll Value "FRIENDS_ALL"
 *
 *  @return GTLRGamesQuery_PlayersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCollection:(NSString *)collection;

@end

/**
 *  Checks whether the games client is out of date.
 *
 *  Method: games.revisions.check
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_RevisionsCheck : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForRevisionsCheckWithclientRevision:]

/**
 *  The revision of the client SDK used by your application. Format:
 *  `[PLATFORM_TYPE]:[VERSION_NUMBER]`. Possible values of `PLATFORM_TYPE` are:
 *  * `ANDROID` - Client is running the Android SDK.
 *  * `IOS` - Client is running the iOS SDK.
 *  * `WEB_APP` - Client is running as a Web App.
 */
@property(nonatomic, copy, nullable) NSString *clientRevision;

/**
 *  Fetches a @c GTLRGames_RevisionCheckResponse.
 *
 *  Checks whether the games client is out of date.
 *
 *  @param clientRevision The revision of the client SDK used by your
 *    application. Format:
 *    `[PLATFORM_TYPE]:[VERSION_NUMBER]`. Possible values of `PLATFORM_TYPE`
 *    are:
 *    * `ANDROID` - Client is running the Android SDK.
 *    * `IOS` - Client is running the iOS SDK.
 *    * `WEB_APP` - Client is running as a Web App.
 *
 *  @return GTLRGamesQuery_RevisionsCheck
 */
+ (instancetype)queryWithClientRevision:(NSString *)clientRevision;

@end

/**
 *  Get high scores, and optionally ranks, in leaderboards for the currently
 *  authenticated player. For a specific time span, `leaderboardId`
 *  can be set to `ALL` to retrieve data for all leaderboards in a
 *  given time span. `NOTE: You cannot ask for 'ALL' leaderboards and
 *  'ALL' timeSpans in the same request; only one parameter may be set to
 *  'ALL'.
 *
 *  Method: games.scores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_ScoresGet : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForScoresGetWithplayerId:leaderboardId:timeSpan:]

/**
 *  The types of ranks to return. If the parameter is omitted, no ranks will be
 *  returned.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesIncludeRankTypeIncludeRankTypeUnspecified Value
 *        "INCLUDE_RANK_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRGamesIncludeRankTypeAll Value "ALL"
 *    @arg @c kGTLRGamesIncludeRankTypePublic Value "PUBLIC"
 *    @arg @c kGTLRGamesIncludeRankTypeSocial Value "SOCIAL"
 */
@property(nonatomic, copy, nullable) NSString *includeRankType;

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The ID of the leaderboard. Can be set to 'ALL' to retrieve data for all
 *  leaderboards for this application.
 */
@property(nonatomic, copy, nullable) NSString *leaderboardId;

/**
 *  The maximum number of leaderboard scores to return in the response. For
 *  any response, the actual number of leaderboard scores returned may be less
 *  than the specified `maxResults`.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  A player ID. A value of `me` may be used in place of the
 *  authenticated player's ID.
 */
@property(nonatomic, copy, nullable) NSString *playerId;

/**
 *  The time span for the scores and ranks you're requesting.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesTimeSpanScoreTimeSpanUnspecified Value
 *        "SCORE_TIME_SPAN_UNSPECIFIED"
 *    @arg @c kGTLRGamesTimeSpanAll Value "ALL"
 *    @arg @c kGTLRGamesTimeSpanAllTime Value "ALL_TIME"
 *    @arg @c kGTLRGamesTimeSpanWeekly Value "WEEKLY"
 *    @arg @c kGTLRGamesTimeSpanDaily Value "DAILY"
 */
@property(nonatomic, copy, nullable) NSString *timeSpan;

/**
 *  Fetches a @c GTLRGames_PlayerLeaderboardScoreListResponse.
 *
 *  Get high scores, and optionally ranks, in leaderboards for the currently
 *  authenticated player. For a specific time span, `leaderboardId`
 *  can be set to `ALL` to retrieve data for all leaderboards in a
 *  given time span. `NOTE: You cannot ask for 'ALL' leaderboards and
 *  'ALL' timeSpans in the same request; only one parameter may be set to
 *  'ALL'.
 *
 *  @param playerId A player ID. A value of `me` may be used in place of the
 *    authenticated player's ID.
 *  @param leaderboardId The ID of the leaderboard. Can be set to 'ALL' to
 *    retrieve data for all
 *    leaderboards for this application.
 *  @param timeSpan The time span for the scores and ranks you're requesting.
 *
 *  Likely values for @c timeSpan:
 *    @arg @c kGTLRGamesTimeSpanScoreTimeSpanUnspecified Value
 *        "SCORE_TIME_SPAN_UNSPECIFIED"
 *    @arg @c kGTLRGamesTimeSpanAll Value "ALL"
 *    @arg @c kGTLRGamesTimeSpanAllTime Value "ALL_TIME"
 *    @arg @c kGTLRGamesTimeSpanWeekly Value "WEEKLY"
 *    @arg @c kGTLRGamesTimeSpanDaily Value "DAILY"
 *
 *  @return GTLRGamesQuery_ScoresGet
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPlayerId:(NSString *)playerId
                    leaderboardId:(NSString *)leaderboardId
                         timeSpan:(NSString *)timeSpan;

@end

/**
 *  Lists the scores in a leaderboard, starting from the top.
 *
 *  Method: games.scores.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_ScoresList : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForScoresListWithleaderboardId:collection:timeSpan:]

/**
 *  The collection of scores you're requesting.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesCollectionScoreCollectionUnspecified Value
 *        "SCORE_COLLECTION_UNSPECIFIED"
 *    @arg @c kGTLRGamesCollectionPublic Value "PUBLIC"
 *    @arg @c kGTLRGamesCollectionSocial Value "SOCIAL"
 *    @arg @c kGTLRGamesCollectionFriends Value "FRIENDS"
 */
@property(nonatomic, copy, nullable) NSString *collection;

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the leaderboard. */
@property(nonatomic, copy, nullable) NSString *leaderboardId;

/**
 *  The maximum number of leaderboard scores to return in the response. For
 *  any response, the actual number of leaderboard scores returned may be less
 *  than the specified `maxResults`.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The time span for the scores and ranks you're requesting.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesTimeSpanScoreTimeSpanUnspecified Value
 *        "SCORE_TIME_SPAN_UNSPECIFIED"
 *    @arg @c kGTLRGamesTimeSpanAllTime Value "ALL_TIME"
 *    @arg @c kGTLRGamesTimeSpanWeekly Value "WEEKLY"
 *    @arg @c kGTLRGamesTimeSpanDaily Value "DAILY"
 */
@property(nonatomic, copy, nullable) NSString *timeSpan;

/**
 *  Fetches a @c GTLRGames_LeaderboardScores.
 *
 *  Lists the scores in a leaderboard, starting from the top.
 *
 *  @param leaderboardId The ID of the leaderboard.
 *  @param collection The collection of scores you're requesting.
 *  @param timeSpan The time span for the scores and ranks you're requesting.
 *
 *  Likely values for @c collection:
 *    @arg @c kGTLRGamesCollectionScoreCollectionUnspecified Value
 *        "SCORE_COLLECTION_UNSPECIFIED"
 *    @arg @c kGTLRGamesCollectionPublic Value "PUBLIC"
 *    @arg @c kGTLRGamesCollectionSocial Value "SOCIAL"
 *    @arg @c kGTLRGamesCollectionFriends Value "FRIENDS"
 *
 *  Likely values for @c timeSpan:
 *    @arg @c kGTLRGamesTimeSpanScoreTimeSpanUnspecified Value
 *        "SCORE_TIME_SPAN_UNSPECIFIED"
 *    @arg @c kGTLRGamesTimeSpanAllTime Value "ALL_TIME"
 *    @arg @c kGTLRGamesTimeSpanWeekly Value "WEEKLY"
 *    @arg @c kGTLRGamesTimeSpanDaily Value "DAILY"
 *
 *  @return GTLRGamesQuery_ScoresList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithLeaderboardId:(NSString *)leaderboardId
                            collection:(NSString *)collection
                              timeSpan:(NSString *)timeSpan;

@end

/**
 *  Lists the scores in a leaderboard around (and including) a player's score.
 *
 *  Method: games.scores.listWindow
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_ScoresListWindow : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForScoresListWindowWithleaderboardId:collection:timeSpan:]

/**
 *  The collection of scores you're requesting.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesCollectionScoreCollectionUnspecified Value
 *        "SCORE_COLLECTION_UNSPECIFIED"
 *    @arg @c kGTLRGamesCollectionPublic Value "PUBLIC"
 *    @arg @c kGTLRGamesCollectionSocial Value "SOCIAL"
 *    @arg @c kGTLRGamesCollectionFriends Value "FRIENDS"
 */
@property(nonatomic, copy, nullable) NSString *collection;

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the leaderboard. */
@property(nonatomic, copy, nullable) NSString *leaderboardId;

/**
 *  The maximum number of leaderboard scores to return in the response. For
 *  any response, the actual number of leaderboard scores returned may be less
 *  than the specified `maxResults`.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The preferred number of scores to return above the player's score. More
 *  scores may be returned if the player is at the bottom of the leaderboard;
 *  fewer may be returned if the player is at the top. Must be less than or
 *  equal to maxResults.
 */
@property(nonatomic, assign) NSInteger resultsAbove;

/**
 *  True if the top scores should be returned when the player is not in the
 *  leaderboard. Defaults to true.
 */
@property(nonatomic, assign) BOOL returnTopIfAbsent;

/**
 *  The time span for the scores and ranks you're requesting.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesTimeSpanScoreTimeSpanUnspecified Value
 *        "SCORE_TIME_SPAN_UNSPECIFIED"
 *    @arg @c kGTLRGamesTimeSpanAllTime Value "ALL_TIME"
 *    @arg @c kGTLRGamesTimeSpanWeekly Value "WEEKLY"
 *    @arg @c kGTLRGamesTimeSpanDaily Value "DAILY"
 */
@property(nonatomic, copy, nullable) NSString *timeSpan;

/**
 *  Fetches a @c GTLRGames_LeaderboardScores.
 *
 *  Lists the scores in a leaderboard around (and including) a player's score.
 *
 *  @param leaderboardId The ID of the leaderboard.
 *  @param collection The collection of scores you're requesting.
 *  @param timeSpan The time span for the scores and ranks you're requesting.
 *
 *  Likely values for @c collection:
 *    @arg @c kGTLRGamesCollectionScoreCollectionUnspecified Value
 *        "SCORE_COLLECTION_UNSPECIFIED"
 *    @arg @c kGTLRGamesCollectionPublic Value "PUBLIC"
 *    @arg @c kGTLRGamesCollectionSocial Value "SOCIAL"
 *    @arg @c kGTLRGamesCollectionFriends Value "FRIENDS"
 *
 *  Likely values for @c timeSpan:
 *    @arg @c kGTLRGamesTimeSpanScoreTimeSpanUnspecified Value
 *        "SCORE_TIME_SPAN_UNSPECIFIED"
 *    @arg @c kGTLRGamesTimeSpanAllTime Value "ALL_TIME"
 *    @arg @c kGTLRGamesTimeSpanWeekly Value "WEEKLY"
 *    @arg @c kGTLRGamesTimeSpanDaily Value "DAILY"
 *
 *  @return GTLRGamesQuery_ScoresListWindow
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithLeaderboardId:(NSString *)leaderboardId
                            collection:(NSString *)collection
                              timeSpan:(NSString *)timeSpan;

@end

/**
 *  Submits a score to the specified leaderboard.
 *
 *  Method: games.scores.submit
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_ScoresSubmit : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForScoresSubmitWithleaderboardId:score:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the leaderboard. */
@property(nonatomic, copy, nullable) NSString *leaderboardId;

/**
 *  The score you're submitting. The submitted score is ignored if it is worse
 *  than a previously submitted score, where worse depends on the leaderboard
 *  sort order. The meaning of the score value depends on the leaderboard
 *  format type. For fixed-point, the score represents the raw value. For
 *  time, the score represents elapsed time in milliseconds. For currency, the
 *  score represents a value in micro units.
 */
@property(nonatomic, assign) long long score;

/**
 *  Additional information about the score you're submitting. Values must
 *  contain no more than 64 URI-safe characters as defined by section 2.3 of
 *  RFC 3986.
 */
@property(nonatomic, copy, nullable) NSString *scoreTag;

/**
 *  Fetches a @c GTLRGames_PlayerScoreResponse.
 *
 *  Submits a score to the specified leaderboard.
 *
 *  @param leaderboardId The ID of the leaderboard.
 *  @param score The score you're submitting. The submitted score is ignored if
 *    it is worse
 *    than a previously submitted score, where worse depends on the leaderboard
 *    sort order. The meaning of the score value depends on the leaderboard
 *    format type. For fixed-point, the score represents the raw value. For
 *    time, the score represents elapsed time in milliseconds. For currency, the
 *    score represents a value in micro units.
 *
 *  @return GTLRGamesQuery_ScoresSubmit
 */
+ (instancetype)queryWithLeaderboardId:(NSString *)leaderboardId
                                 score:(long long)score;

@end

/**
 *  Submits multiple scores to leaderboards.
 *
 *  Method: games.scores.submitMultiple
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_ScoresSubmitMultiple : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForScoresSubmitMultipleWithObject:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Fetches a @c GTLRGames_PlayerScoreListResponse.
 *
 *  Submits multiple scores to leaderboards.
 *
 *  @param object The @c GTLRGames_PlayerScoreSubmissionList to include in the
 *    query.
 *
 *  @return GTLRGamesQuery_ScoresSubmitMultiple
 */
+ (instancetype)queryWithObject:(GTLRGames_PlayerScoreSubmissionList *)object;

@end

/**
 *  Retrieves the metadata for a given snapshot ID.
 *
 *  Method: games.snapshots.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 *    @c kGTLRAuthScopeGamesDriveAppdata
 */
@interface GTLRGamesQuery_SnapshotsGet : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForSnapshotsGetWithsnapshotId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the snapshot. */
@property(nonatomic, copy, nullable) NSString *snapshotId;

/**
 *  Fetches a @c GTLRGames_Snapshot.
 *
 *  Retrieves the metadata for a given snapshot ID.
 *
 *  @param snapshotId The ID of the snapshot.
 *
 *  @return GTLRGamesQuery_SnapshotsGet
 */
+ (instancetype)queryWithSnapshotId:(NSString *)snapshotId;

@end

/**
 *  Retrieves a list of snapshots created by your application for the player
 *  corresponding to the player ID.
 *
 *  Method: games.snapshots.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 *    @c kGTLRAuthScopeGamesDriveAppdata
 */
@interface GTLRGamesQuery_SnapshotsList : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForSnapshotsListWithplayerId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of snapshot resources to return in the response, used
 *  for paging. For any response, the actual number of snapshot resources
 *  returned may be less than the specified `maxResults`.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  A player ID. A value of `me` may be used in place of the authenticated
 *  player's ID.
 */
@property(nonatomic, copy, nullable) NSString *playerId;

/**
 *  Fetches a @c GTLRGames_SnapshotListResponse.
 *
 *  Retrieves a list of snapshots created by your application for the player
 *  corresponding to the player ID.
 *
 *  @param playerId A player ID. A value of `me` may be used in place of the
 *    authenticated
 *    player's ID.
 *
 *  @return GTLRGamesQuery_SnapshotsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPlayerId:(NSString *)playerId;

@end

/**
 *  Returns engagement and spend statistics in this application for the
 *  currently authenticated user.
 *
 *  Method: games.stats.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_StatsGet : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForStatsGet]

/**
 *  Fetches a @c GTLRGames_StatsResponse.
 *
 *  Returns engagement and spend statistics in this application for the
 *  currently authenticated user.
 *
 *  @return GTLRGamesQuery_StatsGet
 */
+ (instancetype)query;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
