// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play Game Services API (games/v1)
// Description:
//   The API for Google Play Game Services.
// Documentation:
//   https://developers.google.com/games/services/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRGames_AchievementUpdateMultipleRequest;
@class GTLRGames_EventRecordRequest;
@class GTLRGames_PlayerScoreSubmissionList;
@class GTLRGames_PushToken;
@class GTLRGames_PushTokenId;
@class GTLRGames_RoomCreateRequest;
@class GTLRGames_RoomJoinRequest;
@class GTLRGames_RoomLeaveRequest;
@class GTLRGames_RoomP2PStatuses;
@class GTLRGames_TurnBasedMatchCreateRequest;
@class GTLRGames_TurnBasedMatchResults;
@class GTLRGames_TurnBasedMatchTurn;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// collection

/**
 *  Retrieve data for all categories. This is the default.
 *
 *  Value: "all"
 */
GTLR_EXTERN NSString * const kGTLRGamesCollectionAll;
/**
 *  Retrieve a list of players that are also playing this game in reverse
 *  chronological order.
 *
 *  Value: "connected"
 */
GTLR_EXTERN NSString * const kGTLRGamesCollectionConnected;
/** Value: "played_with" */
GTLR_EXTERN NSString * const kGTLRGamesCollectionPlayedWith;
/**
 *  List all scores in the public leaderboard.
 *
 *  Value: "PUBLIC"
 */
GTLR_EXTERN NSString * const kGTLRGamesCollectionPublic;
/**
 *  List only social scores.
 *
 *  Value: "SOCIAL"
 */
GTLR_EXTERN NSString * const kGTLRGamesCollectionSocial;
/**
 *  List only social scores, not respecting the fACL.
 *
 *  Value: "SOCIAL_1P"
 */
GTLR_EXTERN NSString * const kGTLRGamesCollectionSocial1p;
/**
 *  Retrieve a list of players in the user's social graph that are visible to
 *  this game.
 *
 *  Value: "visible"
 */
GTLR_EXTERN NSString * const kGTLRGamesCollectionVisible;

// ----------------------------------------------------------------------------
// includeRankType

/**
 *  Retrieve public and social ranks.
 *
 *  Value: "ALL"
 */
GTLR_EXTERN NSString * const kGTLRGamesIncludeRankTypeAll;
/**
 *  Retrieve public ranks, if the player is sharing their gameplay activity
 *  publicly.
 *
 *  Value: "PUBLIC"
 */
GTLR_EXTERN NSString * const kGTLRGamesIncludeRankTypePublic;
/**
 *  Retrieve the social rank.
 *
 *  Value: "SOCIAL"
 */
GTLR_EXTERN NSString * const kGTLRGamesIncludeRankTypeSocial;

// ----------------------------------------------------------------------------
// platformType

/**
 *  Retrieve applications that can be played on Android.
 *
 *  Value: "ANDROID"
 */
GTLR_EXTERN NSString * const kGTLRGamesPlatformTypeAndroid;
/**
 *  Retrieve applications that can be played on iOS.
 *
 *  Value: "IOS"
 */
GTLR_EXTERN NSString * const kGTLRGamesPlatformTypeIos;
/**
 *  Retrieve applications that can be played on desktop web.
 *
 *  Value: "WEB_APP"
 */
GTLR_EXTERN NSString * const kGTLRGamesPlatformTypeWebApp;

// ----------------------------------------------------------------------------
// state

/**
 *  List all achievements. This is the default.
 *
 *  Value: "ALL"
 */
GTLR_EXTERN NSString * const kGTLRGamesStateAll;
/**
 *  List only hidden achievements.
 *
 *  Value: "HIDDEN"
 */
GTLR_EXTERN NSString * const kGTLRGamesStateHidden;
/**
 *  List only revealed achievements.
 *
 *  Value: "REVEALED"
 */
GTLR_EXTERN NSString * const kGTLRGamesStateRevealed;
/**
 *  List only unlocked achievements.
 *
 *  Value: "UNLOCKED"
 */
GTLR_EXTERN NSString * const kGTLRGamesStateUnlocked;

// ----------------------------------------------------------------------------
// timeSpan

/**
 *  Get the high scores for all time spans. If this is used, maxResults values
 *  will be ignored.
 *
 *  Value: "ALL"
 */
GTLR_EXTERN NSString * const kGTLRGamesTimeSpanAll;
/** Value: "ALL_TIME" */
GTLR_EXTERN NSString * const kGTLRGamesTimeSpanAllTime;
/**
 *  List the top scores for the current day.
 *
 *  Value: "DAILY"
 */
GTLR_EXTERN NSString * const kGTLRGamesTimeSpanDaily;
/**
 *  List the top scores for the current week.
 *
 *  Value: "WEEKLY"
 */
GTLR_EXTERN NSString * const kGTLRGamesTimeSpanWeekly;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Games query classes.
 */
@interface GTLRGamesQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Lists all the achievement definitions for your application.
 *
 *  Method: games.achievementDefinitions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_AchievementDefinitionsList : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForAchievementDefinitionsList]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of achievement resources to return in the response, used
 *  for paging. For any response, the actual number of achievement resources
 *  returned may be less than the specified maxResults.
 *
 *  @note The documented range is 1..200.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRGames_AchievementDefinitionsListResponse.
 *
 *  Lists all the achievement definitions for your application.
 *
 *  @return GTLRGamesQuery_AchievementDefinitionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Increments the steps of the achievement with the given ID for the currently
 *  authenticated player.
 *
 *  Method: games.achievements.increment
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_AchievementsIncrement : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForAchievementsIncrementWithachievementId:stepsToIncrement:]

/** The ID of the achievement used by this method. */
@property(nonatomic, copy, nullable) NSString *achievementId;

/**
 *  A randomly generated numeric ID for each request specified by the caller.
 *  This number is used at the server to ensure that the request is handled
 *  correctly across retries.
 */
@property(nonatomic, assign) long long requestId;

/** The number of steps to increment. */
@property(nonatomic, assign) NSInteger stepsToIncrement;

/**
 *  Fetches a @c GTLRGames_AchievementIncrementResponse.
 *
 *  Increments the steps of the achievement with the given ID for the currently
 *  authenticated player.
 *
 *  @param achievementId The ID of the achievement used by this method.
 *  @param stepsToIncrement The number of steps to increment.
 *
 *  @return GTLRGamesQuery_AchievementsIncrement
 */
+ (instancetype)queryWithAchievementId:(NSString *)achievementId
                      stepsToIncrement:(NSInteger)stepsToIncrement;

@end

/**
 *  Lists the progress for all your application's achievements for the currently
 *  authenticated player.
 *
 *  Method: games.achievements.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_AchievementsList : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForAchievementsListWithplayerId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of achievement resources to return in the response, used
 *  for paging. For any response, the actual number of achievement resources
 *  returned may be less than the specified maxResults.
 *
 *  @note The documented range is 1..200.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  A player ID. A value of me may be used in place of the authenticated
 *  player's ID.
 */
@property(nonatomic, copy, nullable) NSString *playerId;

/**
 *  Tells the server to return only achievements with the specified state. If
 *  this parameter isn't specified, all achievements are returned.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesStateAll List all achievements. This is the default.
 *        (Value: "ALL")
 *    @arg @c kGTLRGamesStateHidden List only hidden achievements. (Value:
 *        "HIDDEN")
 *    @arg @c kGTLRGamesStateRevealed List only revealed achievements. (Value:
 *        "REVEALED")
 *    @arg @c kGTLRGamesStateUnlocked List only unlocked achievements. (Value:
 *        "UNLOCKED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Fetches a @c GTLRGames_PlayerAchievementListResponse.
 *
 *  Lists the progress for all your application's achievements for the currently
 *  authenticated player.
 *
 *  @param playerId A player ID. A value of me may be used in place of the
 *    authenticated player's ID.
 *
 *  @return GTLRGamesQuery_AchievementsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPlayerId:(NSString *)playerId;

@end

/**
 *  Sets the state of the achievement with the given ID to REVEALED for the
 *  currently authenticated player.
 *
 *  Method: games.achievements.reveal
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_AchievementsReveal : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForAchievementsRevealWithachievementId:]

/** The ID of the achievement used by this method. */
@property(nonatomic, copy, nullable) NSString *achievementId;

/**
 *  Fetches a @c GTLRGames_AchievementRevealResponse.
 *
 *  Sets the state of the achievement with the given ID to REVEALED for the
 *  currently authenticated player.
 *
 *  @param achievementId The ID of the achievement used by this method.
 *
 *  @return GTLRGamesQuery_AchievementsReveal
 */
+ (instancetype)queryWithAchievementId:(NSString *)achievementId;

@end

/**
 *  Sets the steps for the currently authenticated player towards unlocking an
 *  achievement. If the steps parameter is less than the current number of steps
 *  that the player already gained for the achievement, the achievement is not
 *  modified.
 *
 *  Method: games.achievements.setStepsAtLeast
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_AchievementsSetStepsAtLeast : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForAchievementsSetStepsAtLeastWithachievementId:steps:]

/** The ID of the achievement used by this method. */
@property(nonatomic, copy, nullable) NSString *achievementId;

/** The minimum value to set the steps to. */
@property(nonatomic, assign) NSInteger steps;

/**
 *  Fetches a @c GTLRGames_AchievementSetStepsAtLeastResponse.
 *
 *  Sets the steps for the currently authenticated player towards unlocking an
 *  achievement. If the steps parameter is less than the current number of steps
 *  that the player already gained for the achievement, the achievement is not
 *  modified.
 *
 *  @param achievementId The ID of the achievement used by this method.
 *  @param steps The minimum value to set the steps to.
 *
 *  @return GTLRGamesQuery_AchievementsSetStepsAtLeast
 */
+ (instancetype)queryWithAchievementId:(NSString *)achievementId
                                 steps:(NSInteger)steps;

@end

/**
 *  Unlocks this achievement for the currently authenticated player.
 *
 *  Method: games.achievements.unlock
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_AchievementsUnlock : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForAchievementsUnlockWithachievementId:]

/** The ID of the achievement used by this method. */
@property(nonatomic, copy, nullable) NSString *achievementId;

/** Override used only by built-in games in Play Games application. */
@property(nonatomic, copy, nullable) NSString *builtinGameId;

/**
 *  Fetches a @c GTLRGames_AchievementUnlockResponse.
 *
 *  Unlocks this achievement for the currently authenticated player.
 *
 *  @param achievementId The ID of the achievement used by this method.
 *
 *  @return GTLRGamesQuery_AchievementsUnlock
 */
+ (instancetype)queryWithAchievementId:(NSString *)achievementId;

@end

/**
 *  Updates multiple achievements for the currently authenticated player.
 *
 *  Method: games.achievements.updateMultiple
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_AchievementsUpdateMultiple : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForAchievementsUpdateMultipleWithObject:]

/** Override used only by built-in games in Play Games application. */
@property(nonatomic, copy, nullable) NSString *builtinGameId;

/**
 *  Fetches a @c GTLRGames_AchievementUpdateMultipleResponse.
 *
 *  Updates multiple achievements for the currently authenticated player.
 *
 *  @param object The @c GTLRGames_AchievementUpdateMultipleRequest to include
 *    in the query.
 *
 *  @return GTLRGamesQuery_AchievementsUpdateMultiple
 */
+ (instancetype)queryWithObject:(GTLRGames_AchievementUpdateMultipleRequest *)object;

@end

/**
 *  Retrieves the metadata of the application with the given ID. If the
 *  requested application is not available for the specified platformType, the
 *  returned response will not include any instance data.
 *
 *  Method: games.applications.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_ApplicationsGet : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForApplicationsGetWithapplicationId:]

/** The application ID from the Google Play developer console. */
@property(nonatomic, copy, nullable) NSString *applicationId;

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Restrict application details returned to the specific platform.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesPlatformTypeAndroid Retrieve applications that can be
 *        played on Android. (Value: "ANDROID")
 *    @arg @c kGTLRGamesPlatformTypeIos Retrieve applications that can be played
 *        on iOS. (Value: "IOS")
 *    @arg @c kGTLRGamesPlatformTypeWebApp Retrieve applications that can be
 *        played on desktop web. (Value: "WEB_APP")
 */
@property(nonatomic, copy, nullable) NSString *platformType;

/**
 *  Fetches a @c GTLRGames_Application.
 *
 *  Retrieves the metadata of the application with the given ID. If the
 *  requested application is not available for the specified platformType, the
 *  returned response will not include any instance data.
 *
 *  @param applicationId The application ID from the Google Play developer
 *    console.
 *
 *  @return GTLRGamesQuery_ApplicationsGet
 */
+ (instancetype)queryWithApplicationId:(NSString *)applicationId;

@end

/**
 *  Indicate that the the currently authenticated user is playing your
 *  application.
 *
 *  Method: games.applications.played
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_ApplicationsPlayed : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForApplicationsPlayed]

/** Override used only by built-in games in Play Games application. */
@property(nonatomic, copy, nullable) NSString *builtinGameId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Indicate that the the currently authenticated user is playing your
 *  application.
 *
 *  @return GTLRGamesQuery_ApplicationsPlayed
 */
+ (instancetype)query;

@end

/**
 *  Verifies the auth token provided with this request is for the application
 *  with the specified ID, and returns the ID of the player it was granted for.
 *
 *  Method: games.applications.verify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_ApplicationsVerify : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForApplicationsVerifyWithapplicationId:]

/** The application ID from the Google Play developer console. */
@property(nonatomic, copy, nullable) NSString *applicationId;

/**
 *  Fetches a @c GTLRGames_ApplicationVerifyResponse.
 *
 *  Verifies the auth token provided with this request is for the application
 *  with the specified ID, and returns the ID of the player it was granted for.
 *
 *  @param applicationId The application ID from the Google Play developer
 *    console.
 *
 *  @return GTLRGamesQuery_ApplicationsVerify
 */
+ (instancetype)queryWithApplicationId:(NSString *)applicationId;

@end

/**
 *  Returns a list showing the current progress on events in this application
 *  for the currently authenticated user.
 *
 *  Method: games.events.listByPlayer
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_EventsListByPlayer : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForEventsListByPlayer]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of events to return in the response, used for paging. For
 *  any response, the actual number of events to return may be less than the
 *  specified maxResults.
 *
 *  @note The documented range is 1..100.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRGames_PlayerEventListResponse.
 *
 *  Returns a list showing the current progress on events in this application
 *  for the currently authenticated user.
 *
 *  @return GTLRGamesQuery_EventsListByPlayer
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Returns a list of the event definitions in this application.
 *
 *  Method: games.events.listDefinitions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_EventsListDefinitions : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForEventsListDefinitions]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of event definitions to return in the response, used for
 *  paging. For any response, the actual number of event definitions to return
 *  may be less than the specified maxResults.
 *
 *  @note The documented range is 1..100.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRGames_EventDefinitionListResponse.
 *
 *  Returns a list of the event definitions in this application.
 *
 *  @return GTLRGamesQuery_EventsListDefinitions
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Records a batch of changes to the number of times events have occurred for
 *  the currently authenticated user of this application.
 *
 *  Method: games.events.record
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_EventsRecord : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForEventsRecordWithObject:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Fetches a @c GTLRGames_EventUpdateResponse.
 *
 *  Records a batch of changes to the number of times events have occurred for
 *  the currently authenticated user of this application.
 *
 *  @param object The @c GTLRGames_EventRecordRequest to include in the query.
 *
 *  @return GTLRGamesQuery_EventsRecord
 */
+ (instancetype)queryWithObject:(GTLRGames_EventRecordRequest *)object;

@end

/**
 *  Retrieves the metadata of the leaderboard with the given ID.
 *
 *  Method: games.leaderboards.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_LeaderboardsGet : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForLeaderboardsGetWithleaderboardId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the leaderboard. */
@property(nonatomic, copy, nullable) NSString *leaderboardId;

/**
 *  Fetches a @c GTLRGames_Leaderboard.
 *
 *  Retrieves the metadata of the leaderboard with the given ID.
 *
 *  @param leaderboardId The ID of the leaderboard.
 *
 *  @return GTLRGamesQuery_LeaderboardsGet
 */
+ (instancetype)queryWithLeaderboardId:(NSString *)leaderboardId;

@end

/**
 *  Lists all the leaderboard metadata for your application.
 *
 *  Method: games.leaderboards.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_LeaderboardsList : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForLeaderboardsList]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of leaderboards to return in the response. For any
 *  response, the actual number of leaderboards returned may be less than the
 *  specified maxResults.
 *
 *  @note The documented range is 1..200.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRGames_LeaderboardListResponse.
 *
 *  Lists all the leaderboard metadata for your application.
 *
 *  @return GTLRGamesQuery_LeaderboardsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Return the metagame configuration data for the calling application.
 *
 *  Method: games.metagame.getMetagameConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_MetagameGetMetagameConfig : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForMetagameGetMetagameConfig]

/**
 *  Fetches a @c GTLRGames_MetagameConfig.
 *
 *  Return the metagame configuration data for the calling application.
 *
 *  @return GTLRGamesQuery_MetagameGetMetagameConfig
 */
+ (instancetype)query;

@end

/**
 *  List play data aggregated per category for the player corresponding to
 *  playerId.
 *
 *  Method: games.metagame.listCategoriesByPlayer
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_MetagameListCategoriesByPlayer : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForMetagameListCategoriesByPlayerWithplayerId:collection:]

/**
 *  The collection of categories for which data will be returned.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesCollectionAll Retrieve data for all categories. This is
 *        the default. (Value: "all")
 */
@property(nonatomic, copy, nullable) NSString *collection;

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of category resources to return in the response, used for
 *  paging. For any response, the actual number of category resources returned
 *  may be less than the specified maxResults.
 *
 *  @note The documented range is 1..100.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  A player ID. A value of me may be used in place of the authenticated
 *  player's ID.
 */
@property(nonatomic, copy, nullable) NSString *playerId;

/**
 *  Fetches a @c GTLRGames_CategoryListResponse.
 *
 *  List play data aggregated per category for the player corresponding to
 *  playerId.
 *
 *  @param playerId A player ID. A value of me may be used in place of the
 *    authenticated player's ID.
 *  @param collection The collection of categories for which data will be
 *    returned.
 *
 *  Likely values for @c collection:
 *    @arg @c kGTLRGamesCollectionAll Retrieve data for all categories. This is
 *        the default. (Value: "all")
 *
 *  @return GTLRGamesQuery_MetagameListCategoriesByPlayer
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPlayerId:(NSString *)playerId
                       collection:(NSString *)collection;

@end

/**
 *  Retrieves the Player resource with the given ID. To retrieve the player for
 *  the currently authenticated user, set playerId to me.
 *
 *  Method: games.players.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_PlayersGet : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForPlayersGetWithplayerId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  A player ID. A value of me may be used in place of the authenticated
 *  player's ID.
 */
@property(nonatomic, copy, nullable) NSString *playerId;

/**
 *  Fetches a @c GTLRGames_Player.
 *
 *  Retrieves the Player resource with the given ID. To retrieve the player for
 *  the currently authenticated user, set playerId to me.
 *
 *  @param playerId A player ID. A value of me may be used in place of the
 *    authenticated player's ID.
 *
 *  @return GTLRGamesQuery_PlayersGet
 */
+ (instancetype)queryWithPlayerId:(NSString *)playerId;

@end

/**
 *  Get the collection of players for the currently authenticated user.
 *
 *  Method: games.players.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_PlayersList : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForPlayersListWithcollection:]

/**
 *  Collection of players being retrieved
 *
 *  Likely values:
 *    @arg @c kGTLRGamesCollectionConnected Retrieve a list of players that are
 *        also playing this game in reverse chronological order. (Value:
 *        "connected")
 *    @arg @c kGTLRGamesCollectionPlayedWith (DEPRECATED: please use
 *        played_with!) Retrieve a list of players you have played a multiplayer
 *        game (realtime or turn-based) with recently. (Value: "playedWith")
 *    @arg @c kGTLRGamesCollectionPlayedWith Retrieve a list of players you have
 *        played a multiplayer game (realtime or turn-based) with recently.
 *        (Value: "played_with")
 *    @arg @c kGTLRGamesCollectionVisible Retrieve a list of players in the
 *        user's social graph that are visible to this game. (Value: "visible")
 */
@property(nonatomic, copy, nullable) NSString *collection;

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of player resources to return in the response, used for
 *  paging. For any response, the actual number of player resources returned may
 *  be less than the specified maxResults.
 *
 *  @note The documented range is 1..50.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRGames_PlayerListResponse.
 *
 *  Get the collection of players for the currently authenticated user.
 *
 *  @param collection Collection of players being retrieved
 *
 *  Likely values for @c collection:
 *    @arg @c kGTLRGamesCollectionConnected Retrieve a list of players that are
 *        also playing this game in reverse chronological order. (Value:
 *        "connected")
 *    @arg @c kGTLRGamesCollectionPlayedWith (DEPRECATED: please use
 *        played_with!) Retrieve a list of players you have played a multiplayer
 *        game (realtime or turn-based) with recently. (Value: "playedWith")
 *    @arg @c kGTLRGamesCollectionPlayedWith Retrieve a list of players you have
 *        played a multiplayer game (realtime or turn-based) with recently.
 *        (Value: "played_with")
 *    @arg @c kGTLRGamesCollectionVisible Retrieve a list of players in the
 *        user's social graph that are visible to this game. (Value: "visible")
 *
 *  @return GTLRGamesQuery_PlayersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCollection:(NSString *)collection;

@end

/**
 *  Removes a push token for the current user and application. Removing a
 *  non-existent push token will report success.
 *
 *  Method: games.pushtokens.remove
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_PushtokensRemove : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForPushtokensRemoveWithObject:]

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes a push token for the current user and application. Removing a
 *  non-existent push token will report success.
 *
 *  @param object The @c GTLRGames_PushTokenId to include in the query.
 *
 *  @return GTLRGamesQuery_PushtokensRemove
 */
+ (instancetype)queryWithObject:(GTLRGames_PushTokenId *)object;

@end

/**
 *  Registers a push token for the current user and application.
 *
 *  Method: games.pushtokens.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_PushtokensUpdate : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForPushtokensUpdateWithObject:]

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Registers a push token for the current user and application.
 *
 *  @param object The @c GTLRGames_PushToken to include in the query.
 *
 *  @return GTLRGamesQuery_PushtokensUpdate
 */
+ (instancetype)queryWithObject:(GTLRGames_PushToken *)object;

@end

/**
 *  Report that a reward for the milestone corresponding to milestoneId for the
 *  quest corresponding to questId has been claimed by the currently authorized
 *  user.
 *
 *  Method: games.questMilestones.claim
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_QuestMilestonesClaim : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForQuestMilestonesClaimWithquestId:milestoneId:requestId:]

/** The ID of the milestone. */
@property(nonatomic, copy, nullable) NSString *milestoneId;

/** The ID of the quest. */
@property(nonatomic, copy, nullable) NSString *questId;

/**
 *  A numeric ID to ensure that the request is handled correctly across retries.
 *  Your client application must generate this ID randomly.
 */
@property(nonatomic, assign) long long requestId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Report that a reward for the milestone corresponding to milestoneId for the
 *  quest corresponding to questId has been claimed by the currently authorized
 *  user.
 *
 *  @param questId The ID of the quest.
 *  @param milestoneId The ID of the milestone.
 *  @param requestId A numeric ID to ensure that the request is handled
 *    correctly across retries. Your client application must generate this ID
 *    randomly.
 *
 *  @return GTLRGamesQuery_QuestMilestonesClaim
 */
+ (instancetype)queryWithQuestId:(NSString *)questId
                     milestoneId:(NSString *)milestoneId
                       requestId:(long long)requestId;

@end

/**
 *  Indicates that the currently authorized user will participate in the quest.
 *
 *  Method: games.quests.accept
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_QuestsAccept : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForQuestsAcceptWithquestId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the quest. */
@property(nonatomic, copy, nullable) NSString *questId;

/**
 *  Fetches a @c GTLRGames_Quest.
 *
 *  Indicates that the currently authorized user will participate in the quest.
 *
 *  @param questId The ID of the quest.
 *
 *  @return GTLRGamesQuery_QuestsAccept
 */
+ (instancetype)queryWithQuestId:(NSString *)questId;

@end

/**
 *  Get a list of quests for your application and the currently authenticated
 *  player.
 *
 *  Method: games.quests.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_QuestsList : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForQuestsListWithplayerId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of quest resources to return in the response, used for
 *  paging. For any response, the actual number of quest resources returned may
 *  be less than the specified maxResults. Acceptable values are 1 to 50,
 *  inclusive. (Default: 50).
 *
 *  @note The documented range is 1..50.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  A player ID. A value of me may be used in place of the authenticated
 *  player's ID.
 */
@property(nonatomic, copy, nullable) NSString *playerId;

/**
 *  Fetches a @c GTLRGames_QuestListResponse.
 *
 *  Get a list of quests for your application and the currently authenticated
 *  player.
 *
 *  @param playerId A player ID. A value of me may be used in place of the
 *    authenticated player's ID.
 *
 *  @return GTLRGamesQuery_QuestsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPlayerId:(NSString *)playerId;

@end

/**
 *  Checks whether the games client is out of date.
 *
 *  Method: games.revisions.check
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_RevisionsCheck : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForRevisionsCheckWithclientRevision:]

/**
 *  The revision of the client SDK used by your application. Format:
 *  [PLATFORM_TYPE]:[VERSION_NUMBER]. Possible values of PLATFORM_TYPE are:
 *  - "ANDROID" - Client is running the Android SDK.
 *  - "IOS" - Client is running the iOS SDK.
 *  - "WEB_APP" - Client is running as a Web App.
 */
@property(nonatomic, copy, nullable) NSString *clientRevision;

/**
 *  Fetches a @c GTLRGames_RevisionCheckResponse.
 *
 *  Checks whether the games client is out of date.
 *
 *  @param clientRevision The revision of the client SDK used by your
 *    application. Format:
 *    [PLATFORM_TYPE]:[VERSION_NUMBER]. Possible values of PLATFORM_TYPE are:
 *    - "ANDROID" - Client is running the Android SDK.
 *    - "IOS" - Client is running the iOS SDK.
 *    - "WEB_APP" - Client is running as a Web App.
 *
 *  @return GTLRGamesQuery_RevisionsCheck
 */
+ (instancetype)queryWithClientRevision:(NSString *)clientRevision;

@end

/**
 *  Create a room. For internal use by the Games SDK only. Calling this method
 *  directly is unsupported.
 *
 *  Method: games.rooms.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_RoomsCreate : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForRoomsCreateWithObject:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Fetches a @c GTLRGames_Room.
 *
 *  Create a room. For internal use by the Games SDK only. Calling this method
 *  directly is unsupported.
 *
 *  @param object The @c GTLRGames_RoomCreateRequest to include in the query.
 *
 *  @return GTLRGamesQuery_RoomsCreate
 */
+ (instancetype)queryWithObject:(GTLRGames_RoomCreateRequest *)object;

@end

/**
 *  Decline an invitation to join a room. For internal use by the Games SDK
 *  only. Calling this method directly is unsupported.
 *
 *  Method: games.rooms.decline
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_RoomsDecline : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForRoomsDeclineWithroomId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the room. */
@property(nonatomic, copy, nullable) NSString *roomId;

/**
 *  Fetches a @c GTLRGames_Room.
 *
 *  Decline an invitation to join a room. For internal use by the Games SDK
 *  only. Calling this method directly is unsupported.
 *
 *  @param roomId The ID of the room.
 *
 *  @return GTLRGamesQuery_RoomsDecline
 */
+ (instancetype)queryWithRoomId:(NSString *)roomId;

@end

/**
 *  Dismiss an invitation to join a room. For internal use by the Games SDK
 *  only. Calling this method directly is unsupported.
 *
 *  Method: games.rooms.dismiss
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_RoomsDismiss : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForRoomsDismissWithroomId:]

/** The ID of the room. */
@property(nonatomic, copy, nullable) NSString *roomId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Dismiss an invitation to join a room. For internal use by the Games SDK
 *  only. Calling this method directly is unsupported.
 *
 *  @param roomId The ID of the room.
 *
 *  @return GTLRGamesQuery_RoomsDismiss
 */
+ (instancetype)queryWithRoomId:(NSString *)roomId;

@end

/**
 *  Get the data for a room.
 *
 *  Method: games.rooms.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_RoomsGet : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForRoomsGetWithroomId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the room. */
@property(nonatomic, copy, nullable) NSString *roomId;

/**
 *  Fetches a @c GTLRGames_Room.
 *
 *  Get the data for a room.
 *
 *  @param roomId The ID of the room.
 *
 *  @return GTLRGamesQuery_RoomsGet
 */
+ (instancetype)queryWithRoomId:(NSString *)roomId;

@end

/**
 *  Join a room. For internal use by the Games SDK only. Calling this method
 *  directly is unsupported.
 *
 *  Method: games.rooms.join
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_RoomsJoin : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForRoomsJoinWithObject:roomId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the room. */
@property(nonatomic, copy, nullable) NSString *roomId;

/**
 *  Fetches a @c GTLRGames_Room.
 *
 *  Join a room. For internal use by the Games SDK only. Calling this method
 *  directly is unsupported.
 *
 *  @param object The @c GTLRGames_RoomJoinRequest to include in the query.
 *  @param roomId The ID of the room.
 *
 *  @return GTLRGamesQuery_RoomsJoin
 */
+ (instancetype)queryWithObject:(GTLRGames_RoomJoinRequest *)object
                         roomId:(NSString *)roomId;

@end

/**
 *  Leave a room. For internal use by the Games SDK only. Calling this method
 *  directly is unsupported.
 *
 *  Method: games.rooms.leave
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_RoomsLeave : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForRoomsLeaveWithObject:roomId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the room. */
@property(nonatomic, copy, nullable) NSString *roomId;

/**
 *  Fetches a @c GTLRGames_Room.
 *
 *  Leave a room. For internal use by the Games SDK only. Calling this method
 *  directly is unsupported.
 *
 *  @param object The @c GTLRGames_RoomLeaveRequest to include in the query.
 *  @param roomId The ID of the room.
 *
 *  @return GTLRGamesQuery_RoomsLeave
 */
+ (instancetype)queryWithObject:(GTLRGames_RoomLeaveRequest *)object
                         roomId:(NSString *)roomId;

@end

/**
 *  Returns invitations to join rooms.
 *
 *  Method: games.rooms.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_RoomsList : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForRoomsList]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of rooms to return in the response, used for paging. For
 *  any response, the actual number of rooms to return may be less than the
 *  specified maxResults.
 *
 *  @note The documented range is 1..500.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRGames_RoomList.
 *
 *  Returns invitations to join rooms.
 *
 *  @return GTLRGamesQuery_RoomsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Updates sent by a client reporting the status of peers in a room. For
 *  internal use by the Games SDK only. Calling this method directly is
 *  unsupported.
 *
 *  Method: games.rooms.reportStatus
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_RoomsReportStatus : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForRoomsReportStatusWithObject:roomId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the room. */
@property(nonatomic, copy, nullable) NSString *roomId;

/**
 *  Fetches a @c GTLRGames_RoomStatus.
 *
 *  Updates sent by a client reporting the status of peers in a room. For
 *  internal use by the Games SDK only. Calling this method directly is
 *  unsupported.
 *
 *  @param object The @c GTLRGames_RoomP2PStatuses to include in the query.
 *  @param roomId The ID of the room.
 *
 *  @return GTLRGamesQuery_RoomsReportStatus
 */
+ (instancetype)queryWithObject:(GTLRGames_RoomP2PStatuses *)object
                         roomId:(NSString *)roomId;

@end

/**
 *  Get high scores, and optionally ranks, in leaderboards for the currently
 *  authenticated player. For a specific time span, leaderboardId can be set to
 *  ALL to retrieve data for all leaderboards in a given time span.
 *  NOTE: You cannot ask for 'ALL' leaderboards and 'ALL' timeSpans in the same
 *  request; only one parameter may be set to 'ALL'.
 *
 *  Method: games.scores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_ScoresGet : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForScoresGetWithplayerId:leaderboardId:timeSpan:]

/**
 *  The types of ranks to return. If the parameter is omitted, no ranks will be
 *  returned.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesIncludeRankTypeAll Retrieve public and social ranks.
 *        (Value: "ALL")
 *    @arg @c kGTLRGamesIncludeRankTypePublic Retrieve public ranks, if the
 *        player is sharing their gameplay activity publicly. (Value: "PUBLIC")
 *    @arg @c kGTLRGamesIncludeRankTypeSocial Retrieve the social rank. (Value:
 *        "SOCIAL")
 */
@property(nonatomic, copy, nullable) NSString *includeRankType;

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The ID of the leaderboard. Can be set to 'ALL' to retrieve data for all
 *  leaderboards for this application.
 */
@property(nonatomic, copy, nullable) NSString *leaderboardId;

/**
 *  The maximum number of leaderboard scores to return in the response. For any
 *  response, the actual number of leaderboard scores returned may be less than
 *  the specified maxResults.
 *
 *  @note The documented range is 1..30.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  A player ID. A value of me may be used in place of the authenticated
 *  player's ID.
 */
@property(nonatomic, copy, nullable) NSString *playerId;

/**
 *  The time span for the scores and ranks you're requesting.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesTimeSpanAll Get the high scores for all time spans. If
 *        this is used, maxResults values will be ignored. (Value: "ALL")
 *    @arg @c kGTLRGamesTimeSpanAllTime Get the all time high score. (Value:
 *        "ALL_TIME")
 *    @arg @c kGTLRGamesTimeSpanDaily List the top scores for the current day.
 *        (Value: "DAILY")
 *    @arg @c kGTLRGamesTimeSpanWeekly List the top scores for the current week.
 *        (Value: "WEEKLY")
 */
@property(nonatomic, copy, nullable) NSString *timeSpan;

/**
 *  Fetches a @c GTLRGames_PlayerLeaderboardScoreListResponse.
 *
 *  Get high scores, and optionally ranks, in leaderboards for the currently
 *  authenticated player. For a specific time span, leaderboardId can be set to
 *  ALL to retrieve data for all leaderboards in a given time span.
 *  NOTE: You cannot ask for 'ALL' leaderboards and 'ALL' timeSpans in the same
 *  request; only one parameter may be set to 'ALL'.
 *
 *  @param playerId A player ID. A value of me may be used in place of the
 *    authenticated player's ID.
 *  @param leaderboardId The ID of the leaderboard. Can be set to 'ALL' to
 *    retrieve data for all leaderboards for this application.
 *  @param timeSpan The time span for the scores and ranks you're requesting.
 *
 *  Likely values for @c timeSpan:
 *    @arg @c kGTLRGamesTimeSpanAll Get the high scores for all time spans. If
 *        this is used, maxResults values will be ignored. (Value: "ALL")
 *    @arg @c kGTLRGamesTimeSpanAllTime Get the all time high score. (Value:
 *        "ALL_TIME")
 *    @arg @c kGTLRGamesTimeSpanDaily List the top scores for the current day.
 *        (Value: "DAILY")
 *    @arg @c kGTLRGamesTimeSpanWeekly List the top scores for the current week.
 *        (Value: "WEEKLY")
 *
 *  @return GTLRGamesQuery_ScoresGet
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPlayerId:(NSString *)playerId
                    leaderboardId:(NSString *)leaderboardId
                         timeSpan:(NSString *)timeSpan;

@end

/**
 *  Lists the scores in a leaderboard, starting from the top.
 *
 *  Method: games.scores.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_ScoresList : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForScoresListWithleaderboardId:collection:timeSpan:]

/**
 *  The collection of scores you're requesting.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesCollectionPublic List all scores in the public
 *        leaderboard. (Value: "PUBLIC")
 *    @arg @c kGTLRGamesCollectionSocial List only social scores. (Value:
 *        "SOCIAL")
 *    @arg @c kGTLRGamesCollectionSocial1p List only social scores, not
 *        respecting the fACL. (Value: "SOCIAL_1P")
 */
@property(nonatomic, copy, nullable) NSString *collection;

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the leaderboard. */
@property(nonatomic, copy, nullable) NSString *leaderboardId;

/**
 *  The maximum number of leaderboard scores to return in the response. For any
 *  response, the actual number of leaderboard scores returned may be less than
 *  the specified maxResults.
 *
 *  @note The documented range is 1..30.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The time span for the scores and ranks you're requesting.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesTimeSpanAllTime List the all-time top scores. (Value:
 *        "ALL_TIME")
 *    @arg @c kGTLRGamesTimeSpanDaily List the top scores for the current day.
 *        (Value: "DAILY")
 *    @arg @c kGTLRGamesTimeSpanWeekly List the top scores for the current week.
 *        (Value: "WEEKLY")
 */
@property(nonatomic, copy, nullable) NSString *timeSpan;

/**
 *  Fetches a @c GTLRGames_LeaderboardScores.
 *
 *  Lists the scores in a leaderboard, starting from the top.
 *
 *  @param leaderboardId The ID of the leaderboard.
 *  @param collection The collection of scores you're requesting.
 *  @param timeSpan The time span for the scores and ranks you're requesting.
 *
 *  Likely values for @c collection:
 *    @arg @c kGTLRGamesCollectionPublic List all scores in the public
 *        leaderboard. (Value: "PUBLIC")
 *    @arg @c kGTLRGamesCollectionSocial List only social scores. (Value:
 *        "SOCIAL")
 *    @arg @c kGTLRGamesCollectionSocial1p List only social scores, not
 *        respecting the fACL. (Value: "SOCIAL_1P")
 *
 *  Likely values for @c timeSpan:
 *    @arg @c kGTLRGamesTimeSpanAllTime List the all-time top scores. (Value:
 *        "ALL_TIME")
 *    @arg @c kGTLRGamesTimeSpanDaily List the top scores for the current day.
 *        (Value: "DAILY")
 *    @arg @c kGTLRGamesTimeSpanWeekly List the top scores for the current week.
 *        (Value: "WEEKLY")
 *
 *  @return GTLRGamesQuery_ScoresList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithLeaderboardId:(NSString *)leaderboardId
                            collection:(NSString *)collection
                              timeSpan:(NSString *)timeSpan;

@end

/**
 *  Lists the scores in a leaderboard around (and including) a player's score.
 *
 *  Method: games.scores.listWindow
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_ScoresListWindow : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForScoresListWindowWithleaderboardId:collection:timeSpan:]

/**
 *  The collection of scores you're requesting.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesCollectionPublic List all scores in the public
 *        leaderboard. (Value: "PUBLIC")
 *    @arg @c kGTLRGamesCollectionSocial List only social scores. (Value:
 *        "SOCIAL")
 *    @arg @c kGTLRGamesCollectionSocial1p List only social scores, not
 *        respecting the fACL. (Value: "SOCIAL_1P")
 */
@property(nonatomic, copy, nullable) NSString *collection;

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the leaderboard. */
@property(nonatomic, copy, nullable) NSString *leaderboardId;

/**
 *  The maximum number of leaderboard scores to return in the response. For any
 *  response, the actual number of leaderboard scores returned may be less than
 *  the specified maxResults.
 *
 *  @note The documented range is 1..30.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The preferred number of scores to return above the player's score. More
 *  scores may be returned if the player is at the bottom of the leaderboard;
 *  fewer may be returned if the player is at the top. Must be less than or
 *  equal to maxResults.
 */
@property(nonatomic, assign) NSInteger resultsAbove;

/**
 *  True if the top scores should be returned when the player is not in the
 *  leaderboard. Defaults to true.
 */
@property(nonatomic, assign) BOOL returnTopIfAbsent;

/**
 *  The time span for the scores and ranks you're requesting.
 *
 *  Likely values:
 *    @arg @c kGTLRGamesTimeSpanAllTime List the all-time top scores. (Value:
 *        "ALL_TIME")
 *    @arg @c kGTLRGamesTimeSpanDaily List the top scores for the current day.
 *        (Value: "DAILY")
 *    @arg @c kGTLRGamesTimeSpanWeekly List the top scores for the current week.
 *        (Value: "WEEKLY")
 */
@property(nonatomic, copy, nullable) NSString *timeSpan;

/**
 *  Fetches a @c GTLRGames_LeaderboardScores.
 *
 *  Lists the scores in a leaderboard around (and including) a player's score.
 *
 *  @param leaderboardId The ID of the leaderboard.
 *  @param collection The collection of scores you're requesting.
 *  @param timeSpan The time span for the scores and ranks you're requesting.
 *
 *  Likely values for @c collection:
 *    @arg @c kGTLRGamesCollectionPublic List all scores in the public
 *        leaderboard. (Value: "PUBLIC")
 *    @arg @c kGTLRGamesCollectionSocial List only social scores. (Value:
 *        "SOCIAL")
 *    @arg @c kGTLRGamesCollectionSocial1p List only social scores, not
 *        respecting the fACL. (Value: "SOCIAL_1P")
 *
 *  Likely values for @c timeSpan:
 *    @arg @c kGTLRGamesTimeSpanAllTime List the all-time top scores. (Value:
 *        "ALL_TIME")
 *    @arg @c kGTLRGamesTimeSpanDaily List the top scores for the current day.
 *        (Value: "DAILY")
 *    @arg @c kGTLRGamesTimeSpanWeekly List the top scores for the current week.
 *        (Value: "WEEKLY")
 *
 *  @return GTLRGamesQuery_ScoresListWindow
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithLeaderboardId:(NSString *)leaderboardId
                            collection:(NSString *)collection
                              timeSpan:(NSString *)timeSpan;

@end

/**
 *  Submits a score to the specified leaderboard.
 *
 *  Method: games.scores.submit
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_ScoresSubmit : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForScoresSubmitWithleaderboardId:score:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the leaderboard. */
@property(nonatomic, copy, nullable) NSString *leaderboardId;

/**
 *  The score you're submitting. The submitted score is ignored if it is worse
 *  than a previously submitted score, where worse depends on the leaderboard
 *  sort order. The meaning of the score value depends on the leaderboard format
 *  type. For fixed-point, the score represents the raw value. For time, the
 *  score represents elapsed time in milliseconds. For currency, the score
 *  represents a value in micro units.
 */
@property(nonatomic, assign) long long score;

/**
 *  Additional information about the score you're submitting. Values must
 *  contain no more than 64 URI-safe characters as defined by section 2.3 of RFC
 *  3986.
 */
@property(nonatomic, copy, nullable) NSString *scoreTag;

/**
 *  Fetches a @c GTLRGames_PlayerScoreResponse.
 *
 *  Submits a score to the specified leaderboard.
 *
 *  @param leaderboardId The ID of the leaderboard.
 *  @param score The score you're submitting. The submitted score is ignored if
 *    it is worse than a previously submitted score, where worse depends on the
 *    leaderboard sort order. The meaning of the score value depends on the
 *    leaderboard format type. For fixed-point, the score represents the raw
 *    value. For time, the score represents elapsed time in milliseconds. For
 *    currency, the score represents a value in micro units.
 *
 *  @return GTLRGamesQuery_ScoresSubmit
 */
+ (instancetype)queryWithLeaderboardId:(NSString *)leaderboardId
                                 score:(long long)score;

@end

/**
 *  Submits multiple scores to leaderboards.
 *
 *  Method: games.scores.submitMultiple
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_ScoresSubmitMultiple : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForScoresSubmitMultipleWithObject:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Fetches a @c GTLRGames_PlayerScoreListResponse.
 *
 *  Submits multiple scores to leaderboards.
 *
 *  @param object The @c GTLRGames_PlayerScoreSubmissionList to include in the
 *    query.
 *
 *  @return GTLRGamesQuery_ScoresSubmitMultiple
 */
+ (instancetype)queryWithObject:(GTLRGames_PlayerScoreSubmissionList *)object;

@end

/**
 *  Retrieves the metadata for a given snapshot ID.
 *
 *  Method: games.snapshots.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 *    @c kGTLRAuthScopeGamesDriveAppdata
 */
@interface GTLRGamesQuery_SnapshotsGet : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForSnapshotsGetWithsnapshotId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the snapshot. */
@property(nonatomic, copy, nullable) NSString *snapshotId;

/**
 *  Fetches a @c GTLRGames_Snapshot.
 *
 *  Retrieves the metadata for a given snapshot ID.
 *
 *  @param snapshotId The ID of the snapshot.
 *
 *  @return GTLRGamesQuery_SnapshotsGet
 */
+ (instancetype)queryWithSnapshotId:(NSString *)snapshotId;

@end

/**
 *  Retrieves a list of snapshots created by your application for the player
 *  corresponding to the player ID.
 *
 *  Method: games.snapshots.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 *    @c kGTLRAuthScopeGamesDriveAppdata
 */
@interface GTLRGamesQuery_SnapshotsList : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForSnapshotsListWithplayerId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of snapshot resources to return in the response, used for
 *  paging. For any response, the actual number of snapshot resources returned
 *  may be less than the specified maxResults.
 *
 *  @note The documented range is 1..25.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  A player ID. A value of me may be used in place of the authenticated
 *  player's ID.
 */
@property(nonatomic, copy, nullable) NSString *playerId;

/**
 *  Fetches a @c GTLRGames_SnapshotListResponse.
 *
 *  Retrieves a list of snapshots created by your application for the player
 *  corresponding to the player ID.
 *
 *  @param playerId A player ID. A value of me may be used in place of the
 *    authenticated player's ID.
 *
 *  @return GTLRGamesQuery_SnapshotsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPlayerId:(NSString *)playerId;

@end

/**
 *  Cancel a turn-based match.
 *
 *  Method: games.turnBasedMatches.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_TurnBasedMatchesCancel : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForTurnBasedMatchesCancelWithmatchId:]

/** The ID of the match. */
@property(nonatomic, copy, nullable) NSString *matchId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Cancel a turn-based match.
 *
 *  @param matchId The ID of the match.
 *
 *  @return GTLRGamesQuery_TurnBasedMatchesCancel
 */
+ (instancetype)queryWithMatchId:(NSString *)matchId;

@end

/**
 *  Create a turn-based match.
 *
 *  Method: games.turnBasedMatches.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_TurnBasedMatchesCreate : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForTurnBasedMatchesCreateWithObject:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Fetches a @c GTLRGames_TurnBasedMatch.
 *
 *  Create a turn-based match.
 *
 *  @param object The @c GTLRGames_TurnBasedMatchCreateRequest to include in the
 *    query.
 *
 *  @return GTLRGamesQuery_TurnBasedMatchesCreate
 */
+ (instancetype)queryWithObject:(GTLRGames_TurnBasedMatchCreateRequest *)object;

@end

/**
 *  Decline an invitation to play a turn-based match.
 *
 *  Method: games.turnBasedMatches.decline
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_TurnBasedMatchesDecline : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForTurnBasedMatchesDeclineWithmatchId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the match. */
@property(nonatomic, copy, nullable) NSString *matchId;

/**
 *  Fetches a @c GTLRGames_TurnBasedMatch.
 *
 *  Decline an invitation to play a turn-based match.
 *
 *  @param matchId The ID of the match.
 *
 *  @return GTLRGamesQuery_TurnBasedMatchesDecline
 */
+ (instancetype)queryWithMatchId:(NSString *)matchId;

@end

/**
 *  Dismiss a turn-based match from the match list. The match will no longer
 *  show up in the list and will not generate notifications.
 *
 *  Method: games.turnBasedMatches.dismiss
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_TurnBasedMatchesDismiss : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForTurnBasedMatchesDismissWithmatchId:]

/** The ID of the match. */
@property(nonatomic, copy, nullable) NSString *matchId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Dismiss a turn-based match from the match list. The match will no longer
 *  show up in the list and will not generate notifications.
 *
 *  @param matchId The ID of the match.
 *
 *  @return GTLRGamesQuery_TurnBasedMatchesDismiss
 */
+ (instancetype)queryWithMatchId:(NSString *)matchId;

@end

/**
 *  Finish a turn-based match. Each player should make this call once, after all
 *  results are in. Only the player whose turn it is may make the first call to
 *  Finish, and can pass in the final match state.
 *
 *  Method: games.turnBasedMatches.finish
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_TurnBasedMatchesFinish : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForTurnBasedMatchesFinishWithObject:matchId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the match. */
@property(nonatomic, copy, nullable) NSString *matchId;

/**
 *  Fetches a @c GTLRGames_TurnBasedMatch.
 *
 *  Finish a turn-based match. Each player should make this call once, after all
 *  results are in. Only the player whose turn it is may make the first call to
 *  Finish, and can pass in the final match state.
 *
 *  @param object The @c GTLRGames_TurnBasedMatchResults to include in the
 *    query.
 *  @param matchId The ID of the match.
 *
 *  @return GTLRGamesQuery_TurnBasedMatchesFinish
 */
+ (instancetype)queryWithObject:(GTLRGames_TurnBasedMatchResults *)object
                        matchId:(NSString *)matchId;

@end

/**
 *  Get the data for a turn-based match.
 *
 *  Method: games.turnBasedMatches.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_TurnBasedMatchesGet : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForTurnBasedMatchesGetWithmatchId:]

/** Get match data along with metadata. */
@property(nonatomic, assign) BOOL includeMatchData;

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the match. */
@property(nonatomic, copy, nullable) NSString *matchId;

/**
 *  Fetches a @c GTLRGames_TurnBasedMatch.
 *
 *  Get the data for a turn-based match.
 *
 *  @param matchId The ID of the match.
 *
 *  @return GTLRGamesQuery_TurnBasedMatchesGet
 */
+ (instancetype)queryWithMatchId:(NSString *)matchId;

@end

/**
 *  Join a turn-based match.
 *
 *  Method: games.turnBasedMatches.join
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_TurnBasedMatchesJoin : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForTurnBasedMatchesJoinWithmatchId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the match. */
@property(nonatomic, copy, nullable) NSString *matchId;

/**
 *  Fetches a @c GTLRGames_TurnBasedMatch.
 *
 *  Join a turn-based match.
 *
 *  @param matchId The ID of the match.
 *
 *  @return GTLRGamesQuery_TurnBasedMatchesJoin
 */
+ (instancetype)queryWithMatchId:(NSString *)matchId;

@end

/**
 *  Leave a turn-based match when it is not the current player's turn, without
 *  canceling the match.
 *
 *  Method: games.turnBasedMatches.leave
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_TurnBasedMatchesLeave : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForTurnBasedMatchesLeaveWithmatchId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the match. */
@property(nonatomic, copy, nullable) NSString *matchId;

/**
 *  Fetches a @c GTLRGames_TurnBasedMatch.
 *
 *  Leave a turn-based match when it is not the current player's turn, without
 *  canceling the match.
 *
 *  @param matchId The ID of the match.
 *
 *  @return GTLRGamesQuery_TurnBasedMatchesLeave
 */
+ (instancetype)queryWithMatchId:(NSString *)matchId;

@end

/**
 *  Leave a turn-based match during the current player's turn, without canceling
 *  the match.
 *
 *  Method: games.turnBasedMatches.leaveTurn
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_TurnBasedMatchesLeaveTurn : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForTurnBasedMatchesLeaveTurnWithmatchId:matchVersion:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the match. */
@property(nonatomic, copy, nullable) NSString *matchId;

/** The version of the match being updated. */
@property(nonatomic, assign) NSInteger matchVersion;

/**
 *  The ID of another participant who should take their turn next. If not set,
 *  the match will wait for other player(s) to join via automatching; this is
 *  only valid if automatch criteria is set on the match with remaining slots
 *  for automatched players.
 */
@property(nonatomic, copy, nullable) NSString *pendingParticipantId;

/**
 *  Fetches a @c GTLRGames_TurnBasedMatch.
 *
 *  Leave a turn-based match during the current player's turn, without canceling
 *  the match.
 *
 *  @param matchId The ID of the match.
 *  @param matchVersion The version of the match being updated.
 *
 *  @return GTLRGamesQuery_TurnBasedMatchesLeaveTurn
 */
+ (instancetype)queryWithMatchId:(NSString *)matchId
                    matchVersion:(NSInteger)matchVersion;

@end

/**
 *  Returns turn-based matches the player is or was involved in.
 *
 *  Method: games.turnBasedMatches.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_TurnBasedMatchesList : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForTurnBasedMatchesList]

/**
 *  True if match data should be returned in the response. Note that not all
 *  data will necessarily be returned if include_match_data is true; the server
 *  may decide to only return data for some of the matches to limit download
 *  size for the client. The remainder of the data for these matches will be
 *  retrievable on request.
 */
@property(nonatomic, assign) BOOL includeMatchData;

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of completed or canceled matches to return in the
 *  response. If not set, all matches returned could be completed or canceled.
 *
 *  @note The documented range is 0..500.
 */
@property(nonatomic, assign) NSInteger maxCompletedMatches;

/**
 *  The maximum number of matches to return in the response, used for paging.
 *  For any response, the actual number of matches to return may be less than
 *  the specified maxResults.
 *
 *  @note The documented range is 1..500.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRGames_TurnBasedMatchList.
 *
 *  Returns turn-based matches the player is or was involved in.
 *
 *  @return GTLRGamesQuery_TurnBasedMatchesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Create a rematch of a match that was previously completed, with the same
 *  participants. This can be called by only one player on a match still in
 *  their list; the player must have called Finish first. Returns the newly
 *  created match; it will be the caller's turn.
 *
 *  Method: games.turnBasedMatches.rematch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_TurnBasedMatchesRematch : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForTurnBasedMatchesRematchWithmatchId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the match. */
@property(nonatomic, copy, nullable) NSString *matchId;

/**
 *  A randomly generated numeric ID for each request specified by the caller.
 *  This number is used at the server to ensure that the request is handled
 *  correctly across retries.
 */
@property(nonatomic, assign) long long requestId;

/**
 *  Fetches a @c GTLRGames_TurnBasedMatchRematch.
 *
 *  Create a rematch of a match that was previously completed, with the same
 *  participants. This can be called by only one player on a match still in
 *  their list; the player must have called Finish first. Returns the newly
 *  created match; it will be the caller's turn.
 *
 *  @param matchId The ID of the match.
 *
 *  @return GTLRGamesQuery_TurnBasedMatchesRematch
 */
+ (instancetype)queryWithMatchId:(NSString *)matchId;

@end

/**
 *  Returns turn-based matches the player is or was involved in that changed
 *  since the last sync call, with the least recent changes coming first.
 *  Matches that should be removed from the local cache will have a status of
 *  MATCH_DELETED.
 *
 *  Method: games.turnBasedMatches.sync
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_TurnBasedMatchesSync : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForTurnBasedMatchesSync]

/**
 *  True if match data should be returned in the response. Note that not all
 *  data will necessarily be returned if include_match_data is true; the server
 *  may decide to only return data for some of the matches to limit download
 *  size for the client. The remainder of the data for these matches will be
 *  retrievable on request.
 */
@property(nonatomic, assign) BOOL includeMatchData;

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of completed or canceled matches to return in the
 *  response. If not set, all matches returned could be completed or canceled.
 *
 *  @note The documented range is 0..500.
 */
@property(nonatomic, assign) NSInteger maxCompletedMatches;

/**
 *  The maximum number of matches to return in the response, used for paging.
 *  For any response, the actual number of matches to return may be less than
 *  the specified maxResults.
 *
 *  @note The documented range is 1..500.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRGames_TurnBasedMatchSync.
 *
 *  Returns turn-based matches the player is or was involved in that changed
 *  since the last sync call, with the least recent changes coming first.
 *  Matches that should be removed from the local cache will have a status of
 *  MATCH_DELETED.
 *
 *  @return GTLRGamesQuery_TurnBasedMatchesSync
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Commit the results of a player turn.
 *
 *  Method: games.turnBasedMatches.takeTurn
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGames
 */
@interface GTLRGamesQuery_TurnBasedMatchesTakeTurn : GTLRGamesQuery
// Previous library name was
//   +[GTLQueryGames queryForTurnBasedMatchesTakeTurnWithObject:matchId:]

/** The preferred language to use for strings returned by this method. */
@property(nonatomic, copy, nullable) NSString *language;

/** The ID of the match. */
@property(nonatomic, copy, nullable) NSString *matchId;

/**
 *  Fetches a @c GTLRGames_TurnBasedMatch.
 *
 *  Commit the results of a player turn.
 *
 *  @param object The @c GTLRGames_TurnBasedMatchTurn to include in the query.
 *  @param matchId The ID of the match.
 *
 *  @return GTLRGamesQuery_TurnBasedMatchesTakeTurn
 */
+ (instancetype)queryWithObject:(GTLRGames_TurnBasedMatchTurn *)object
                        matchId:(NSString *)matchId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
