// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play Game Services API (games/v1)
// Description:
//   The API for Google Play Game Services.
// Documentation:
//   https://developers.google.com/games/services/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRGames_AchievementDefinition;
@class GTLRGames_AchievementUpdateRequest;
@class GTLRGames_AchievementUpdateResponse;
@class GTLRGames_AggregateStats;
@class GTLRGames_AnonymousPlayer;
@class GTLRGames_ApplicationCategory;
@class GTLRGames_Category;
@class GTLRGames_EventBatchRecordFailure;
@class GTLRGames_EventChild;
@class GTLRGames_EventDefinition;
@class GTLRGames_EventPeriodRange;
@class GTLRGames_EventPeriodUpdate;
@class GTLRGames_EventRecordFailure;
@class GTLRGames_EventUpdateRequest;
@class GTLRGames_GamesAchievementIncrement;
@class GTLRGames_GamesAchievementSetStepsAtLeast;
@class GTLRGames_ImageAsset;
@class GTLRGames_Instance;
@class GTLRGames_InstanceAndroidDetails;
@class GTLRGames_InstanceIosDetails;
@class GTLRGames_InstanceWebDetails;
@class GTLRGames_Leaderboard;
@class GTLRGames_LeaderboardEntry;
@class GTLRGames_LeaderboardScoreRank;
@class GTLRGames_NetworkDiagnostics;
@class GTLRGames_ParticipantResult;
@class GTLRGames_PeerChannelDiagnostics;
@class GTLRGames_PeerSessionDiagnostics;
@class GTLRGames_Played;
@class GTLRGames_Player;
@class GTLRGames_Player_Name;
@class GTLRGames_PlayerAchievement;
@class GTLRGames_PlayerEvent;
@class GTLRGames_PlayerExperienceInfo;
@class GTLRGames_PlayerLeaderboardScore;
@class GTLRGames_PlayerLevel;
@class GTLRGames_PlayerScore;
@class GTLRGames_PlayerScoreResponse;
@class GTLRGames_ProfileSettings;
@class GTLRGames_PushTokenId;
@class GTLRGames_PushTokenId_Ios;
@class GTLRGames_Quest;
@class GTLRGames_QuestContribution;
@class GTLRGames_QuestCriterion;
@class GTLRGames_QuestMilestone;
@class GTLRGames_Room;
@class GTLRGames_RoomAutoMatchingCriteria;
@class GTLRGames_RoomAutoMatchStatus;
@class GTLRGames_RoomClientAddress;
@class GTLRGames_RoomLeaveDiagnostics;
@class GTLRGames_RoomModification;
@class GTLRGames_RoomP2PStatus;
@class GTLRGames_RoomParticipant;
@class GTLRGames_ScoreSubmission;
@class GTLRGames_Snapshot;
@class GTLRGames_SnapshotImage;
@class GTLRGames_TurnBasedAutoMatchingCriteria;
@class GTLRGames_TurnBasedMatch;
@class GTLRGames_TurnBasedMatchData;
@class GTLRGames_TurnBasedMatchDataRequest;
@class GTLRGames_TurnBasedMatchModification;
@class GTLRGames_TurnBasedMatchParticipant;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  This is a JSON template for an achievement definition object.
 */
@interface GTLRGames_AchievementDefinition : GTLRObject

/**
 *  The type of the achievement.
 *  Possible values are:
 *  - "STANDARD" - Achievement is either locked or unlocked.
 *  - "INCREMENTAL" - Achievement is incremental.
 */
@property(nonatomic, copy, nullable) NSString *achievementType;

/**
 *  The description of the achievement.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Experience points which will be earned when unlocking this achievement.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *experiencePoints;

/** The total steps for an incremental achievement as a string. */
@property(nonatomic, copy, nullable) NSString *formattedTotalSteps;

/**
 *  The ID of the achievement.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The initial state of the achievement.
 *  Possible values are:
 *  - "HIDDEN" - Achievement is hidden.
 *  - "REVEALED" - Achievement is revealed.
 *  - "UNLOCKED" - Achievement is unlocked.
 */
@property(nonatomic, copy, nullable) NSString *initialState;

/**
 *  Indicates whether the revealed icon image being returned is a default image,
 *  or is provided by the game.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isRevealedIconUrlDefault;

/**
 *  Indicates whether the unlocked icon image being returned is a default image,
 *  or is game-provided.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isUnlockedIconUrlDefault;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#achievementDefinition.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The name of the achievement. */
@property(nonatomic, copy, nullable) NSString *name;

/** The image URL for the revealed achievement icon. */
@property(nonatomic, copy, nullable) NSString *revealedIconUrl;

/**
 *  The total steps for an incremental achievement.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSteps;

/** The image URL for the unlocked achievement icon. */
@property(nonatomic, copy, nullable) NSString *unlockedIconUrl;

@end


/**
 *  This is a JSON template for a list of achievement definition objects.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_AchievementDefinitionsListResponse : GTLRCollectionObject

/**
 *  The achievement definitions.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_AchievementDefinition *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#achievementDefinitionsListResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Token corresponding to the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  This is a JSON template for an achievement increment response
 */
@interface GTLRGames_AchievementIncrementResponse : GTLRObject

/**
 *  The current steps recorded for this incremental achievement.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentSteps;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#achievementIncrementResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Whether the current steps for the achievement has reached the number of
 *  steps required to unlock.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *newlyUnlocked;

@end


/**
 *  This is a JSON template for an achievement reveal response
 */
@interface GTLRGames_AchievementRevealResponse : GTLRObject

/**
 *  The current state of the achievement for which a reveal was attempted. This
 *  might be UNLOCKED if the achievement was already unlocked.
 *  Possible values are:
 *  - "REVEALED" - Achievement is revealed.
 *  - "UNLOCKED" - Achievement is unlocked.
 */
@property(nonatomic, copy, nullable) NSString *currentState;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#achievementRevealResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  This is a JSON template for an achievement set steps at least response.
 */
@interface GTLRGames_AchievementSetStepsAtLeastResponse : GTLRObject

/**
 *  The current steps recorded for this incremental achievement.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentSteps;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#achievementSetStepsAtLeastResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Whether the the current steps for the achievement has reached the number of
 *  steps required to unlock.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *newlyUnlocked;

@end


/**
 *  This is a JSON template for an achievement unlock response
 */
@interface GTLRGames_AchievementUnlockResponse : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#achievementUnlockResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Whether this achievement was newly unlocked (that is, whether the unlock
 *  request for the achievement was the first for the player).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *newlyUnlocked;

@end


/**
 *  This is a JSON template for a list of achievement update requests.
 */
@interface GTLRGames_AchievementUpdateMultipleRequest : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#achievementUpdateMultipleRequest.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The individual achievement update requests. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_AchievementUpdateRequest *> *updates;

@end


/**
 *  This is a JSON template for an achievement unlock response.
 */
@interface GTLRGames_AchievementUpdateMultipleResponse : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#achievementUpdateListResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The updated state of the achievements. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_AchievementUpdateResponse *> *updatedAchievements;

@end


/**
 *  This is a JSON template for a request to update an achievement.
 */
@interface GTLRGames_AchievementUpdateRequest : GTLRObject

/** The achievement this update is being applied to. */
@property(nonatomic, copy, nullable) NSString *achievementId;

/**
 *  The payload if an update of type INCREMENT was requested for the
 *  achievement.
 */
@property(nonatomic, strong, nullable) GTLRGames_GamesAchievementIncrement *incrementPayload;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#achievementUpdateRequest.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The payload if an update of type SET_STEPS_AT_LEAST was requested for the
 *  achievement.
 */
@property(nonatomic, strong, nullable) GTLRGames_GamesAchievementSetStepsAtLeast *setStepsAtLeastPayload;

/**
 *  The type of update being applied.
 *  Possible values are:
 *  - "REVEAL" - Achievement is revealed.
 *  - "UNLOCK" - Achievement is unlocked.
 *  - "INCREMENT" - Achievement is incremented.
 *  - "SET_STEPS_AT_LEAST" - Achievement progress is set to at least the passed
 *  value.
 */
@property(nonatomic, copy, nullable) NSString *updateType;

@end


/**
 *  This is a JSON template for an achievement update response.
 */
@interface GTLRGames_AchievementUpdateResponse : GTLRObject

/** The achievement this update is was applied to. */
@property(nonatomic, copy, nullable) NSString *achievementId;

/**
 *  The current state of the achievement.
 *  Possible values are:
 *  - "HIDDEN" - Achievement is hidden.
 *  - "REVEALED" - Achievement is revealed.
 *  - "UNLOCKED" - Achievement is unlocked.
 */
@property(nonatomic, copy, nullable) NSString *currentState;

/**
 *  The current steps recorded for this achievement if it is incremental.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentSteps;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#achievementUpdateResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Whether this achievement was newly unlocked (that is, whether the unlock
 *  request for the achievement was the first for the player).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *newlyUnlocked;

/**
 *  Whether the requested updates actually affected the achievement.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *updateOccurred;

@end


/**
 *  This is a JSON template for aggregate stats.
 */
@interface GTLRGames_AggregateStats : GTLRObject

/**
 *  The number of messages sent between a pair of peers.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#aggregateStats.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The maximum amount.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *max;

/**
 *  The minimum amount.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *min;

/**
 *  The total number of bytes sent for messages between a pair of peers.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sum;

@end


/**
 *  This is a JSON template for an anonymous player
 */
@interface GTLRGames_AnonymousPlayer : GTLRObject

/** The base URL for the image to display for the anonymous player. */
@property(nonatomic, copy, nullable) NSString *avatarImageUrl;

/** The name to display for the anonymous player. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#anonymousPlayer.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  This is a JSON template for the Application resource.
 */
@interface GTLRGames_Application : GTLRObject

/**
 *  The number of achievements visible to the currently authenticated player.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *achievementCount;

/** The assets of the application. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_ImageAsset *> *assets;

/** The author of the application. */
@property(nonatomic, copy, nullable) NSString *author;

/** The category of the application. */
@property(nonatomic, strong, nullable) GTLRGames_ApplicationCategory *category;

/**
 *  The description of the application.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  A list of features that have been enabled for the application.
 *  Possible values are:
 *  - "SNAPSHOTS" - Snapshots has been enabled
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *enabledFeatures;

/**
 *  The ID of the application.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The instances of the application. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_Instance *> *instances;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#application.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The last updated timestamp of the application.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastUpdatedTimestamp;

/**
 *  The number of leaderboards visible to the currently authenticated player.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *leaderboardCount;

/** The name of the application. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A hint to the client UI for what color to use as an app-themed color. The
 *  color is given as an RGB triplet (e.g. "E0E0E0").
 */
@property(nonatomic, copy, nullable) NSString *themeColor;

@end


/**
 *  This is a JSON template for an application category object.
 */
@interface GTLRGames_ApplicationCategory : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#applicationCategory.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The primary category. */
@property(nonatomic, copy, nullable) NSString *primary;

/** The secondary category. */
@property(nonatomic, copy, nullable) NSString *secondary;

@end


/**
 *  This is a JSON template for a third party application verification response
 *  resource.
 */
@interface GTLRGames_ApplicationVerifyResponse : GTLRObject

/**
 *  An alternate ID that was once used for the player that was issued the auth
 *  token used in this request. (This field is not normally populated.)
 */
@property(nonatomic, copy, nullable) NSString *alternatePlayerId;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#applicationVerifyResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The ID of the player that was issued the auth token used in this request.
 */
@property(nonatomic, copy, nullable) NSString *playerId;

@end


/**
 *  This is a JSON template for data related to individual game categories.
 */
@interface GTLRGames_Category : GTLRObject

/** The category name. */
@property(nonatomic, copy, nullable) NSString *category;

/**
 *  Experience points earned in this category.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *experiencePoints;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#category.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  This is a JSON template for a list of category data objects.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_CategoryListResponse : GTLRCollectionObject

/**
 *  The list of categories with usage data.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_Category *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#categoryListResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Token corresponding to the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  This is a JSON template for a batch update failure resource.
 */
@interface GTLRGames_EventBatchRecordFailure : GTLRObject

/**
 *  The cause for the update failure.
 *  Possible values are:
 *  - "TOO_LARGE": A batch request was issued with more events than are allowed
 *  in a single batch.
 *  - "TIME_PERIOD_EXPIRED": A batch was sent with data too far in the past to
 *  record.
 *  - "TIME_PERIOD_SHORT": A batch was sent with a time range that was too
 *  short.
 *  - "TIME_PERIOD_LONG": A batch was sent with a time range that was too long.
 *  - "ALREADY_UPDATED": An attempt was made to record a batch of data which was
 *  already seen.
 *  - "RECORD_RATE_HIGH": An attempt was made to record data faster than the
 *  server will apply updates.
 */
@property(nonatomic, copy, nullable) NSString *failureCause;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#eventBatchRecordFailure.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The time range which was rejected; empty for a request-wide failure. */
@property(nonatomic, strong, nullable) GTLRGames_EventPeriodRange *range;

@end


/**
 *  This is a JSON template for an event child relationship resource.
 */
@interface GTLRGames_EventChild : GTLRObject

/** The ID of the child event. */
@property(nonatomic, copy, nullable) NSString *childId;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#eventChild.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  This is a JSON template for an event definition resource.
 */
@interface GTLRGames_EventDefinition : GTLRObject

/** A list of events that are a child of this event. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_EventChild *> *childEvents;

/**
 *  Description of what this event represents.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The name to display for the event. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The ID of the event.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The base URL for the image that represents the event. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/**
 *  Indicates whether the icon image being returned is a default image, or is
 *  game-provided.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDefaultImageUrl;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#eventDefinition.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The visibility of event being tracked in this definition.
 *  Possible values are:
 *  - "REVEALED": This event should be visible to all users.
 *  - "HIDDEN": This event should only be shown to users that have recorded this
 *  event at least once.
 */
@property(nonatomic, copy, nullable) NSString *visibility;

@end


/**
 *  This is a JSON template for a ListDefinitions response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_EventDefinitionListResponse : GTLRCollectionObject

/**
 *  The event definitions.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_EventDefinition *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#eventDefinitionListResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The pagination token for the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  This is a JSON template for an event period time range.
 */
@interface GTLRGames_EventPeriodRange : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#eventPeriodRange.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The time when this update period ends, in millis, since 1970 UTC (Unix
 *  Epoch).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *periodEndMillis;

/**
 *  The time when this update period begins, in millis, since 1970 UTC (Unix
 *  Epoch).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *periodStartMillis;

@end


/**
 *  This is a JSON template for an event period update resource.
 */
@interface GTLRGames_EventPeriodUpdate : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#eventPeriodUpdate.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The time period being covered by this update. */
@property(nonatomic, strong, nullable) GTLRGames_EventPeriodRange *timePeriod;

/** The updates being made for this time period. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_EventUpdateRequest *> *updates;

@end


/**
 *  This is a JSON template for an event update failure resource.
 */
@interface GTLRGames_EventRecordFailure : GTLRObject

/** The ID of the event that was not updated. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  The cause for the update failure.
 *  Possible values are:
 *  - "NOT_FOUND" - An attempt was made to set an event that was not defined.
 *  - "INVALID_UPDATE_VALUE" - An attempt was made to increment an event by a
 *  non-positive value.
 */
@property(nonatomic, copy, nullable) NSString *failureCause;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#eventRecordFailure.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  This is a JSON template for an event period update resource.
 */
@interface GTLRGames_EventRecordRequest : GTLRObject

/**
 *  The current time when this update was sent, in milliseconds, since 1970 UTC
 *  (Unix Epoch).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentTimeMillis;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#eventRecordRequest.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The request ID used to identify this attempt to record events.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestId;

/** A list of the time period updates being made in this request. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_EventPeriodUpdate *> *timePeriods;

@end


/**
 *  This is a JSON template for an event period update resource.
 */
@interface GTLRGames_EventUpdateRequest : GTLRObject

/** The ID of the event being modified in this update. */
@property(nonatomic, copy, nullable) NSString *definitionId;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#eventUpdateRequest.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The number of times this event occurred in this time period.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *updateCount;

@end


/**
 *  This is a JSON template for an event period update resource.
 */
@interface GTLRGames_EventUpdateResponse : GTLRObject

/** Any batch-wide failures which occurred applying updates. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_EventBatchRecordFailure *> *batchFailures;

/** Any failures updating a particular event. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_EventRecordFailure *> *eventFailures;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#eventUpdateResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The current status of any updated events */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_PlayerEvent *> *playerEvents;

@end


/**
 *  This is a JSON template for the payload to request to increment an
 *  achievement.
 */
@interface GTLRGames_GamesAchievementIncrement : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#GamesAchievementIncrement.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The requestId associated with an increment to an achievement.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestId;

/**
 *  The number of steps to be incremented.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *steps;

@end


/**
 *  This is a JSON template for the payload to request to increment an
 *  achievement.
 */
@interface GTLRGames_GamesAchievementSetStepsAtLeast : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#GamesAchievementSetStepsAtLeast.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The minimum number of steps for the achievement to be set to.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *steps;

@end


/**
 *  This is a JSON template for an image asset object.
 */
@interface GTLRGames_ImageAsset : GTLRObject

/**
 *  The height of the asset.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *height;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#imageAsset.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The name of the asset. */
@property(nonatomic, copy, nullable) NSString *name;

/** The URL of the asset. */
@property(nonatomic, copy, nullable) NSString *url;

/**
 *  The width of the asset.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *width;

@end


/**
 *  This is a JSON template for the Instance resource.
 */
@interface GTLRGames_Instance : GTLRObject

/** URI which shows where a user can acquire this instance. */
@property(nonatomic, copy, nullable) NSString *acquisitionUri;

/** Platform dependent details for Android. */
@property(nonatomic, strong, nullable) GTLRGames_InstanceAndroidDetails *androidInstance;

/** Platform dependent details for iOS. */
@property(nonatomic, strong, nullable) GTLRGames_InstanceIosDetails *iosInstance;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#instance.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Localized display name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The platform type.
 *  Possible values are:
 *  - "ANDROID" - Instance is for Android.
 *  - "IOS" - Instance is for iOS
 *  - "WEB_APP" - Instance is for Web App.
 */
@property(nonatomic, copy, nullable) NSString *platformType;

/**
 *  Flag to show if this game instance supports realtime play.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *realtimePlay;

/**
 *  Flag to show if this game instance supports turn based play.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *turnBasedPlay;

/** Platform dependent details for Web. */
@property(nonatomic, strong, nullable) GTLRGames_InstanceWebDetails *webInstance;

@end


/**
 *  This is a JSON template for the Android instance details resource.
 */
@interface GTLRGames_InstanceAndroidDetails : GTLRObject

/**
 *  Flag indicating whether the anti-piracy check is enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enablePiracyCheck;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#instanceAndroidDetails.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Android package name which maps to Google Play URL. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Indicates that this instance is the default for new installations.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preferred;

@end


/**
 *  This is a JSON template for the iOS details resource.
 */
@interface GTLRGames_InstanceIosDetails : GTLRObject

/** Bundle identifier. */
@property(nonatomic, copy, nullable) NSString *bundleIdentifier;

/** iTunes App ID. */
@property(nonatomic, copy, nullable) NSString *itunesAppId;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#instanceIosDetails.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Indicates that this instance is the default for new installations on iPad
 *  devices.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preferredForIpad;

/**
 *  Indicates that this instance is the default for new installations on iPhone
 *  devices.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preferredForIphone;

/**
 *  Flag to indicate if this instance supports iPad.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportIpad;

/**
 *  Flag to indicate if this instance supports iPhone.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportIphone;

@end


/**
 *  This is a JSON template for the Web details resource.
 */
@interface GTLRGames_InstanceWebDetails : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#instanceWebDetails.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Launch URL for the game. */
@property(nonatomic, copy, nullable) NSString *launchUrl;

/**
 *  Indicates that this instance is the default for new installations.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preferred;

@end


/**
 *  This is a JSON template for the Leaderboard resource.
 */
@interface GTLRGames_Leaderboard : GTLRObject

/** The icon for the leaderboard. */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The leaderboard ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Indicates whether the icon image being returned is a default image, or is
 *  game-provided.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isIconUrlDefault;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#leaderboard.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The name of the leaderboard. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  How scores are ordered.
 *  Possible values are:
 *  - "LARGER_IS_BETTER" - Larger values are better; scores are sorted in
 *  descending order.
 *  - "SMALLER_IS_BETTER" - Smaller values are better; scores are sorted in
 *  ascending order.
 */
@property(nonatomic, copy, nullable) NSString *order;

@end


/**
 *  This is a JSON template for the Leaderboard Entry resource.
 */
@interface GTLRGames_LeaderboardEntry : GTLRObject

/** The localized string for the numerical value of this score. */
@property(nonatomic, copy, nullable) NSString *formattedScore;

/** The localized string for the rank of this score for this leaderboard. */
@property(nonatomic, copy, nullable) NSString *formattedScoreRank;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#leaderboardEntry.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The player who holds this score. */
@property(nonatomic, strong, nullable) GTLRGames_Player *player;

/**
 *  The rank of this score for this leaderboard.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scoreRank;

/**
 *  Additional information about the score. Values must contain no more than 64
 *  URI-safe characters as defined by section 2.3 of RFC 3986.
 */
@property(nonatomic, copy, nullable) NSString *scoreTag;

/**
 *  The numerical value of this score.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scoreValue;

/**
 *  The time span of this high score.
 *  Possible values are:
 *  - "ALL_TIME" - The score is an all-time high score.
 *  - "WEEKLY" - The score is a weekly high score.
 *  - "DAILY" - The score is a daily high score.
 */
@property(nonatomic, copy, nullable) NSString *timeSpan;

/**
 *  The timestamp at which this score was recorded, in milliseconds since the
 *  epoch in UTC.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeTimestampMillis;

@end


/**
 *  This is a JSON template for a list of leaderboard objects.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_LeaderboardListResponse : GTLRCollectionObject

/**
 *  The leaderboards.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_Leaderboard *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#leaderboardListResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Token corresponding to the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  This is a JSON template for a score rank in a leaderboard.
 */
@interface GTLRGames_LeaderboardScoreRank : GTLRObject

/** The number of scores in the leaderboard as a string. */
@property(nonatomic, copy, nullable) NSString *formattedNumScores;

/** The rank in the leaderboard as a string. */
@property(nonatomic, copy, nullable) NSString *formattedRank;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#leaderboardScoreRank.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The number of scores in the leaderboard.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numScores;

/**
 *  The rank in the leaderboard.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rank;

@end


/**
 *  This is a JSON template for a ListScores response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_LeaderboardScores : GTLRCollectionObject

/**
 *  The scores in the leaderboard.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_LeaderboardEntry *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#leaderboardScores.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The pagination token for the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The total number of scores in the leaderboard.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numScores;

/**
 *  The score of the requesting player on the leaderboard. The player's score
 *  may appear both here and in the list of scores above. If you are viewing a
 *  public leaderboard and the player is not sharing their gameplay information
 *  publicly, the scoreRank and formattedScoreRank values will not be present.
 */
@property(nonatomic, strong, nullable) GTLRGames_LeaderboardEntry *playerScore;

/** The pagination token for the previous page of results. */
@property(nonatomic, copy, nullable) NSString *prevPageToken;

@end


/**
 *  This is a JSON template for the metagame config resource
 */
@interface GTLRGames_MetagameConfig : GTLRObject

/**
 *  Current version of the metagame configuration data. When this data is
 *  updated, the version number will be increased by one.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentVersion;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#metagameConfig.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The list of player levels. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_PlayerLevel *> *playerLevels;

@end


/**
 *  This is a JSON template for network diagnostics reported for a client.
 */
@interface GTLRGames_NetworkDiagnostics : GTLRObject

/**
 *  The Android network subtype.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *androidNetworkSubtype;

/**
 *  The Android network type.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *androidNetworkType;

/**
 *  iOS network type as defined in Reachability.h.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *iosNetworkType;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#networkDiagnostics.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The MCC+MNC code for the client's network connection. On Android:
 *  http://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkOperator()
 *  On iOS, see:
 *  https://developer.apple.com/library/ios/documentation/NetworkingInternet/Reference/CTCarrier/Reference/Reference.html
 */
@property(nonatomic, copy, nullable) NSString *networkOperatorCode;

/**
 *  The name of the carrier of the client's network connection. On Android:
 *  http://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkOperatorName()
 *  On iOS:
 *  https://developer.apple.com/library/ios/documentation/NetworkingInternet/Reference/CTCarrier/Reference/Reference.html#//apple_ref/occ/instp/CTCarrier/carrierName
 */
@property(nonatomic, copy, nullable) NSString *networkOperatorName;

/**
 *  The amount of time in milliseconds it took for the client to establish a
 *  connection with the XMPP server.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *registrationLatencyMillis;

@end


/**
 *  This is a JSON template for a result for a match participant.
 */
@interface GTLRGames_ParticipantResult : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#participantResult.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The ID of the participant. */
@property(nonatomic, copy, nullable) NSString *participantId;

/**
 *  The placement or ranking of the participant in the match results; a number
 *  from one to the number of participants in the match. Multiple participants
 *  may have the same placing value in case of a type.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *placing;

/**
 *  The result of the participant for this match.
 *  Possible values are:
 *  - "MATCH_RESULT_WIN" - The participant won the match.
 *  - "MATCH_RESULT_LOSS" - The participant lost the match.
 *  - "MATCH_RESULT_TIE" - The participant tied the match.
 *  - "MATCH_RESULT_NONE" - There was no winner for the match (nobody wins or
 *  loses this kind of game.)
 *  - "MATCH_RESULT_DISCONNECT" - The participant disconnected / left during the
 *  match.
 *  - "MATCH_RESULT_DISAGREED" - Different clients reported different results
 *  for this participant.
 */
@property(nonatomic, copy, nullable) NSString *result;

@end


/**
 *  This is a JSON template for peer channel diagnostics.
 */
@interface GTLRGames_PeerChannelDiagnostics : GTLRObject

/** Number of bytes received. */
@property(nonatomic, strong, nullable) GTLRGames_AggregateStats *bytesReceived;

/** Number of bytes sent. */
@property(nonatomic, strong, nullable) GTLRGames_AggregateStats *bytesSent;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#peerChannelDiagnostics.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Number of messages lost.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numMessagesLost;

/**
 *  Number of messages received.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numMessagesReceived;

/**
 *  Number of messages sent.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numMessagesSent;

/**
 *  Number of send failures.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numSendFailures;

/** Roundtrip latency stats in milliseconds. */
@property(nonatomic, strong, nullable) GTLRGames_AggregateStats *roundtripLatencyMillis;

@end


/**
 *  This is a JSON template for peer session diagnostics.
 */
@interface GTLRGames_PeerSessionDiagnostics : GTLRObject

/**
 *  Connected time in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *connectedTimestampMillis;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#peerSessionDiagnostics.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The participant ID of the peer. */
@property(nonatomic, copy, nullable) NSString *participantId;

/** Reliable channel diagnostics. */
@property(nonatomic, strong, nullable) GTLRGames_PeerChannelDiagnostics *reliableChannel;

/** Unreliable channel diagnostics. */
@property(nonatomic, strong, nullable) GTLRGames_PeerChannelDiagnostics *unreliableChannel;

@end


/**
 *  This is a JSON template for metadata about a player playing a game with the
 *  currently authenticated user.
 */
@interface GTLRGames_Played : GTLRObject

/**
 *  True if the player was auto-matched with the currently authenticated user.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoMatched;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#played.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The last time the player played the game in milliseconds since the epoch in
 *  UTC.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timeMillis;

@end


/**
 *  This is a JSON template for a Player resource.
 */
@interface GTLRGames_Player : GTLRObject

/** The base URL for the image that represents the player. */
@property(nonatomic, copy, nullable) NSString *avatarImageUrl;

/** The url to the landscape mode player banner image. */
@property(nonatomic, copy, nullable) NSString *bannerUrlLandscape;

/** The url to the portrait mode player banner image. */
@property(nonatomic, copy, nullable) NSString *bannerUrlPortrait;

/** The name to display for the player. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** An object to represent Play Game experience information for the player. */
@property(nonatomic, strong, nullable) GTLRGames_PlayerExperienceInfo *experienceInfo;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#player.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Details about the last time this player played a multiplayer game with the
 *  currently authenticated player. Populated for PLAYED_WITH player collection
 *  members.
 */
@property(nonatomic, strong, nullable) GTLRGames_Played *lastPlayedWith;

/**
 *  An object representation of the individual components of the player's name.
 *  For some players, these fields may not be present.
 */
@property(nonatomic, strong, nullable) GTLRGames_Player_Name *name;

/**
 *  The player ID that was used for this player the first time they signed into
 *  the game in question. This is only populated for calls to player.get for the
 *  requesting player, only if the player ID has subsequently changed, and only
 *  to clients that support remapping player IDs.
 */
@property(nonatomic, copy, nullable) NSString *originalPlayerId;

/** The ID of the player. */
@property(nonatomic, copy, nullable) NSString *playerId;

/**
 *  The player's profile settings. Controls whether or not the player's profile
 *  is visible to other players.
 */
@property(nonatomic, strong, nullable) GTLRGames_ProfileSettings *profileSettings;

/** The player's title rewarded for their game activities. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  An object representation of the individual components of the player's name.
 *  For some players, these fields may not be present.
 */
@interface GTLRGames_Player_Name : GTLRObject

/**
 *  The family name of this player. In some places, this is known as the last
 *  name.
 */
@property(nonatomic, copy, nullable) NSString *familyName;

/**
 *  The given name of this player. In some places, this is known as the first
 *  name.
 */
@property(nonatomic, copy, nullable) NSString *givenName;

@end


/**
 *  This is a JSON template for an achievement object.
 */
@interface GTLRGames_PlayerAchievement : GTLRObject

/**
 *  The state of the achievement.
 *  Possible values are:
 *  - "HIDDEN" - Achievement is hidden.
 *  - "REVEALED" - Achievement is revealed.
 *  - "UNLOCKED" - Achievement is unlocked.
 */
@property(nonatomic, copy, nullable) NSString *achievementState;

/**
 *  The current steps for an incremental achievement.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentSteps;

/**
 *  Experience points earned for the achievement. This field is absent for
 *  achievements that have not yet been unlocked and 0 for achievements that
 *  have been unlocked by testers but that are unpublished.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *experiencePoints;

/** The current steps for an incremental achievement as a string. */
@property(nonatomic, copy, nullable) NSString *formattedCurrentStepsString;

/**
 *  The ID of the achievement.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#playerAchievement.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The timestamp of the last modification to this achievement's state.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastUpdatedTimestamp;

@end


/**
 *  This is a JSON template for a list of achievement objects.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_PlayerAchievementListResponse : GTLRCollectionObject

/**
 *  The achievements.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_PlayerAchievement *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#playerAchievementListResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Token corresponding to the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  This is a JSON template for an event status resource.
 */
@interface GTLRGames_PlayerEvent : GTLRObject

/** The ID of the event definition. */
@property(nonatomic, copy, nullable) NSString *definitionId;

/**
 *  The current number of times this event has occurred, as a string. The
 *  formatting of this string depends on the configuration of your event in the
 *  Play Games Developer Console.
 */
@property(nonatomic, copy, nullable) NSString *formattedNumEvents;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#playerEvent.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The current number of times this event has occurred.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numEvents;

/** The ID of the player. */
@property(nonatomic, copy, nullable) NSString *playerId;

@end


/**
 *  This is a JSON template for a ListByPlayer response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_PlayerEventListResponse : GTLRCollectionObject

/**
 *  The player events.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_PlayerEvent *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#playerEventListResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The pagination token for the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  This is a JSON template for 1P/3P metadata about the player's experience.
 */
@interface GTLRGames_PlayerExperienceInfo : GTLRObject

/**
 *  The current number of experience points for the player.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentExperiencePoints;

/** The current level of the player. */
@property(nonatomic, strong, nullable) GTLRGames_PlayerLevel *currentLevel;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#playerExperienceInfo.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The timestamp when the player was leveled up, in millis since Unix epoch
 *  UTC.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastLevelUpTimestampMillis;

/**
 *  The next level of the player. If the current level is the maximum level,
 *  this should be same as the current level.
 */
@property(nonatomic, strong, nullable) GTLRGames_PlayerLevel *nextLevel;

@end


/**
 *  This is a JSON template for a player leaderboard score object.
 */
@interface GTLRGames_PlayerLeaderboardScore : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#playerLeaderboardScore.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The ID of the leaderboard this score is in. */
@property(nonatomic, copy, nullable) NSString *leaderboardId;

/**
 *  The public rank of the score in this leaderboard. This object will not be
 *  present if the user is not sharing their scores publicly.
 */
@property(nonatomic, strong, nullable) GTLRGames_LeaderboardScoreRank *publicRank;

/** The formatted value of this score. */
@property(nonatomic, copy, nullable) NSString *scoreString;

/**
 *  Additional information about the score. Values must contain no more than 64
 *  URI-safe characters as defined by section 2.3 of RFC 3986.
 */
@property(nonatomic, copy, nullable) NSString *scoreTag;

/**
 *  The numerical value of this score.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scoreValue;

/** The social rank of the score in this leaderboard. */
@property(nonatomic, strong, nullable) GTLRGames_LeaderboardScoreRank *socialRank;

/**
 *  The time span of this score.
 *  Possible values are:
 *  - "ALL_TIME" - The score is an all-time score.
 *  - "WEEKLY" - The score is a weekly score.
 *  - "DAILY" - The score is a daily score.
 */
@property(nonatomic, copy, nullable) NSString *timeSpan;

/**
 *  The timestamp at which this score was recorded, in milliseconds since the
 *  epoch in UTC.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeTimestamp;

@end


/**
 *  This is a JSON template for a list of player leaderboard scores.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_PlayerLeaderboardScoreListResponse : GTLRCollectionObject

/**
 *  The leaderboard scores.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_PlayerLeaderboardScore *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#playerLeaderboardScoreListResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The pagination token for the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** The Player resources for the owner of this score. */
@property(nonatomic, strong, nullable) GTLRGames_Player *player;

@end


/**
 *  This is a JSON template for 1P/3P metadata about a user's level.
 */
@interface GTLRGames_PlayerLevel : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#playerLevel.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The level for the user.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *level;

/**
 *  The maximum experience points for this level.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxExperiencePoints;

/**
 *  The minimum experience points for this level.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minExperiencePoints;

@end


/**
 *  This is a JSON template for a third party player list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_PlayerListResponse : GTLRCollectionObject

/**
 *  The players.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_Player *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#playerListResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Token corresponding to the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  This is a JSON template for a player score.
 */
@interface GTLRGames_PlayerScore : GTLRObject

/** The formatted score for this player score. */
@property(nonatomic, copy, nullable) NSString *formattedScore;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#playerScore.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The numerical value for this player score.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *score;

/**
 *  Additional information about this score. Values will contain no more than 64
 *  URI-safe characters as defined by section 2.3 of RFC 3986.
 */
@property(nonatomic, copy, nullable) NSString *scoreTag;

/**
 *  The time span for this player score.
 *  Possible values are:
 *  - "ALL_TIME" - The score is an all-time score.
 *  - "WEEKLY" - The score is a weekly score.
 *  - "DAILY" - The score is a daily score.
 */
@property(nonatomic, copy, nullable) NSString *timeSpan;

@end


/**
 *  This is a JSON template for a list of score submission statuses.
 */
@interface GTLRGames_PlayerScoreListResponse : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#playerScoreListResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The score submissions statuses. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_PlayerScoreResponse *> *submittedScores;

@end


/**
 *  This is a JSON template for a list of leaderboard entry resources.
 */
@interface GTLRGames_PlayerScoreResponse : GTLRObject

/**
 *  The time spans where the submitted score is better than the existing score
 *  for that time span.
 *  Possible values are:
 *  - "ALL_TIME" - The score is an all-time score.
 *  - "WEEKLY" - The score is a weekly score.
 *  - "DAILY" - The score is a daily score.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *beatenScoreTimeSpans;

/** The formatted value of the submitted score. */
@property(nonatomic, copy, nullable) NSString *formattedScore;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#playerScoreResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The leaderboard ID that this score was submitted to. */
@property(nonatomic, copy, nullable) NSString *leaderboardId;

/**
 *  Additional information about this score. Values will contain no more than 64
 *  URI-safe characters as defined by section 2.3 of RFC 3986.
 */
@property(nonatomic, copy, nullable) NSString *scoreTag;

/**
 *  The scores in time spans that have not been beaten. As an example, the
 *  submitted score may be better than the player's DAILY score, but not better
 *  than the player's scores for the WEEKLY or ALL_TIME time spans.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_PlayerScore *> *unbeatenScores;

@end


/**
 *  This is a JSON template for a list of score submission requests
 */
@interface GTLRGames_PlayerScoreSubmissionList : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#playerScoreSubmissionList.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The score submissions. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_ScoreSubmission *> *scores;

@end


/**
 *  This is a JSON template for profile settings
 */
@interface GTLRGames_ProfileSettings : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#profileSettings.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The player's current profile visibility. This field is visible to both 1P
 *  and 3P APIs.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *profileVisible;

@end


/**
 *  This is a JSON template for a push token resource.
 */
@interface GTLRGames_PushToken : GTLRObject

/**
 *  The revision of the client SDK used by your application, in the same format
 *  that's used by revisions.check. Used to send backward compatible messages.
 *  Format: [PLATFORM_TYPE]:[VERSION_NUMBER]. Possible values of PLATFORM_TYPE
 *  are:
 *  - IOS - Push token is for iOS
 */
@property(nonatomic, copy, nullable) NSString *clientRevision;

/**
 *  Unique identifier for this push token.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) GTLRGames_PushTokenId *identifier;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#pushToken.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The preferred language for notifications that are sent using this token.
 */
@property(nonatomic, copy, nullable) NSString *language;

@end


/**
 *  This is a JSON template for a push token ID resource.
 */
@interface GTLRGames_PushTokenId : GTLRObject

/** A push token ID for iOS devices. */
@property(nonatomic, strong, nullable) GTLRGames_PushTokenId_Ios *ios;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#pushTokenId.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  A push token ID for iOS devices.
 */
@interface GTLRGames_PushTokenId_Ios : GTLRObject

/**
 *  Device token supplied by an iOS system call to register for remote
 *  notifications. Encode this field as web-safe base64.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *apnsDeviceToken;

/**
 *  Indicates whether this token should be used for the production or sandbox
 *  APNS server.
 */
@property(nonatomic, copy, nullable) NSString *apnsEnvironment;

@end


/**
 *  This is a JSON template for a Quest resource.
 */
@interface GTLRGames_Quest : GTLRObject

/**
 *  The timestamp at which the user accepted the quest in milliseconds since the
 *  epoch in UTC. Only present if the player has accepted the quest.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *acceptedTimestampMillis;

/** The ID of the application this quest is part of. */
@property(nonatomic, copy, nullable) NSString *applicationId;

/** The banner image URL for the quest. */
@property(nonatomic, copy, nullable) NSString *bannerUrl;

/**
 *  The description of the quest.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The timestamp at which the quest ceases to be active in milliseconds since
 *  the epoch in UTC.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endTimestampMillis;

/** The icon image URL for the quest. */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The ID of the quest.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Indicates whether the banner image being returned is a default image, or is
 *  game-provided.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDefaultBannerUrl;

/**
 *  Indicates whether the icon image being returned is a default image, or is
 *  game-provided.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDefaultIconUrl;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#quest.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The timestamp at which the quest was last updated by the user in
 *  milliseconds since the epoch in UTC. Only present if the player has accepted
 *  the quest.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastUpdatedTimestampMillis;

/** The quest milestones. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_QuestMilestone *> *milestones;

/** The name of the quest. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The timestamp at which the user should be notified that the quest will end
 *  soon in milliseconds since the epoch in UTC.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *notifyTimestampMillis;

/**
 *  The timestamp at which the quest becomes active in milliseconds since the
 *  epoch in UTC.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startTimestampMillis;

/**
 *  The state of the quest.
 *  Possible values are:
 *  - "UPCOMING": The quest is upcoming. The user can see the quest, but cannot
 *  accept it until it is open.
 *  - "OPEN": The quest is currently open and may be accepted at this time.
 *  - "ACCEPTED": The user is currently participating in this quest.
 *  - "COMPLETED": The user has completed the quest.
 *  - "FAILED": The quest was attempted but was not completed before the
 *  deadline expired.
 *  - "EXPIRED": The quest has expired and was not accepted.
 *  - "DELETED": The quest should be deleted from the local database.
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  This is a JSON template for a Quest Criterion Contribution resource.
 */
@interface GTLRGames_QuestContribution : GTLRObject

/**
 *  The formatted value of the contribution as a string. Format depends on the
 *  configuration for the associated event definition in the Play Games
 *  Developer Console.
 */
@property(nonatomic, copy, nullable) NSString *formattedValue;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#questContribution.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The value of the contribution.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *value;

@end


/**
 *  This is a JSON template for a Quest Criterion resource.
 */
@interface GTLRGames_QuestCriterion : GTLRObject

/**
 *  The total number of times the associated event must be incremented for the
 *  player to complete this quest.
 */
@property(nonatomic, strong, nullable) GTLRGames_QuestContribution *completionContribution;

/**
 *  The number of increments the player has made toward the completion count
 *  event increments required to complete the quest. This value will not exceed
 *  the completion contribution.
 *  There will be no currentContribution until the player has accepted the
 *  quest.
 */
@property(nonatomic, strong, nullable) GTLRGames_QuestContribution *currentContribution;

/** The ID of the event the criterion corresponds to. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  The value of the event associated with this quest at the time that the quest
 *  was accepted. This value may change if event increments that took place
 *  before the start of quest are uploaded after the quest starts.
 *  There will be no initialPlayerProgress until the player has accepted the
 *  quest.
 */
@property(nonatomic, strong, nullable) GTLRGames_QuestContribution *initialPlayerProgress;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#questCriterion.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  This is a JSON template for a list of quest objects.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_QuestListResponse : GTLRCollectionObject

/**
 *  The quests.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_Quest *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#questListResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Token corresponding to the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  This is a JSON template for a Quest Milestone resource.
 */
@interface GTLRGames_QuestMilestone : GTLRObject

/**
 *  The completion reward data of the milestone, represented as a Base64-encoded
 *  string. This is a developer-specified binary blob with size between 0 and 2
 *  KB before encoding.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *completionRewardData;

/** The criteria of the milestone. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_QuestCriterion *> *criteria;

/**
 *  The milestone ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#questMilestone.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The current state of the milestone.
 *  Possible values are:
 *  - "COMPLETED_NOT_CLAIMED" - The milestone is complete, but has not yet been
 *  claimed.
 *  - "CLAIMED" - The milestone is complete and has been claimed.
 *  - "NOT_COMPLETED" - The milestone has not yet been completed.
 *  - "NOT_STARTED" - The milestone is for a quest that has not yet been
 *  accepted.
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  This is a JSON template for the result of checking a revision.
 */
@interface GTLRGames_RevisionCheckResponse : GTLRObject

/**
 *  The version of the API this client revision should use when calling API
 *  methods.
 */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#revisionCheckResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The result of the revision check.
 *  Possible values are:
 *  - "OK" - The revision being used is current.
 *  - "DEPRECATED" - There is currently a newer version available, but the
 *  revision being used still works.
 *  - "INVALID" - The revision being used is not supported in any released
 *  version.
 */
@property(nonatomic, copy, nullable) NSString *revisionStatus;

@end


/**
 *  This is a JSON template for a room resource object.
 */
@interface GTLRGames_Room : GTLRObject

/** The ID of the application being played. */
@property(nonatomic, copy, nullable) NSString *applicationId;

/** Criteria for auto-matching players into this room. */
@property(nonatomic, strong, nullable) GTLRGames_RoomAutoMatchingCriteria *autoMatchingCriteria;

/**
 *  Auto-matching status for this room. Not set if the room is not currently in
 *  the auto-matching queue.
 */
@property(nonatomic, strong, nullable) GTLRGames_RoomAutoMatchStatus *autoMatchingStatus;

/** Details about the room creation. */
@property(nonatomic, strong, nullable) GTLRGames_RoomModification *creationDetails;

/**
 *  This short description is generated by our servers and worded relative to
 *  the player requesting the room. It is intended to be displayed when the room
 *  is shown in a list (that is, an invitation to a room.)
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The ID of the participant that invited the user to the room. Not set if the
 *  user was not invited to the room.
 */
@property(nonatomic, copy, nullable) NSString *inviterId;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#room.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Details about the last update to the room. */
@property(nonatomic, strong, nullable) GTLRGames_RoomModification *lastUpdateDetails;

/**
 *  The participants involved in the room, along with their statuses. Includes
 *  participants who have left or declined invitations.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_RoomParticipant *> *participants;

/** Globally unique ID for a room. */
@property(nonatomic, copy, nullable) NSString *roomId;

/**
 *  The version of the room status: an increasing counter, used by the client to
 *  ignore out-of-order updates to room status.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *roomStatusVersion;

/**
 *  The status of the room.
 *  Possible values are:
 *  - "ROOM_INVITING" - One or more players have been invited and not responded.
 *  - "ROOM_AUTO_MATCHING" - One or more slots need to be filled by
 *  auto-matching.
 *  - "ROOM_CONNECTING" - Players have joined and are connecting to each other
 *  (either before or after auto-matching).
 *  - "ROOM_ACTIVE" - All players have joined and connected to each other.
 *  - "ROOM_DELETED" - The room should no longer be shown on the client.
 *  Returned in sync calls when a player joins a room (as a tombstone), or for
 *  rooms where all joined participants have left.
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  The variant / mode of the application being played; can be any integer
 *  value, or left blank.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *variant;

@end


/**
 *  This is a JSON template for a room auto-match criteria object.
 */
@interface GTLRGames_RoomAutoMatchingCriteria : GTLRObject

/**
 *  A bitmask indicating when auto-matches are valid. When ANDed with other
 *  exclusive bitmasks, the result must be zero. Can be used to support
 *  exclusive roles within a game.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exclusiveBitmask;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#roomAutoMatchingCriteria.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The maximum number of players that should be added to the room by
 *  auto-matching.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxAutoMatchingPlayers;

/**
 *  The minimum number of players that should be added to the room by
 *  auto-matching.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minAutoMatchingPlayers;

@end


/**
 *  This is a JSON template for status of room automatching that is in progress.
 */
@interface GTLRGames_RoomAutoMatchStatus : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#roomAutoMatchStatus.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  An estimate for the amount of time (in seconds) that auto-matching is
 *  expected to take to complete.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waitEstimateSeconds;

@end


/**
 *  This is a JSON template for the client address when setting up a room.
 */
@interface GTLRGames_RoomClientAddress : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#roomClientAddress.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The XMPP address of the client on the Google Games XMPP network. */
@property(nonatomic, copy, nullable) NSString *xmppAddress;

@end


/**
 *  This is a JSON template for a room creation request.
 */
@interface GTLRGames_RoomCreateRequest : GTLRObject

/** Criteria for auto-matching players into this room. */
@property(nonatomic, strong, nullable) GTLRGames_RoomAutoMatchingCriteria *autoMatchingCriteria;

/** The capabilities that this client supports for realtime communication. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *capabilities;

/** Client address for the player creating the room. */
@property(nonatomic, strong, nullable) GTLRGames_RoomClientAddress *clientAddress;

/** The player IDs to invite to the room. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *invitedPlayerIds;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#roomCreateRequest.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Network diagnostics for the client creating the room. */
@property(nonatomic, strong, nullable) GTLRGames_NetworkDiagnostics *networkDiagnostics;

/**
 *  A randomly generated numeric ID. This number is used at the server to ensure
 *  that the request is handled correctly across retries.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestId;

/**
 *  The variant / mode of the application to be played. This can be any integer
 *  value, or left blank. You should use a small number of variants to keep the
 *  auto-matching pool as large as possible.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *variant;

@end


/**
 *  This is a JSON template for a join room request.
 */
@interface GTLRGames_RoomJoinRequest : GTLRObject

/** The capabilities that this client supports for realtime communication. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *capabilities;

/** Client address for the player joining the room. */
@property(nonatomic, strong, nullable) GTLRGames_RoomClientAddress *clientAddress;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#roomJoinRequest.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Network diagnostics for the client joining the room. */
@property(nonatomic, strong, nullable) GTLRGames_NetworkDiagnostics *networkDiagnostics;

@end


/**
 *  This is a JSON template for room leave diagnostics.
 */
@interface GTLRGames_RoomLeaveDiagnostics : GTLRObject

/**
 *  Android network subtype.
 *  http://developer.android.com/reference/android/net/NetworkInfo.html#getSubtype()
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *androidNetworkSubtype;

/**
 *  Android network type.
 *  http://developer.android.com/reference/android/net/NetworkInfo.html#getType()
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *androidNetworkType;

/**
 *  iOS network type as defined in Reachability.h.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *iosNetworkType;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#roomLeaveDiagnostics.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The MCC+MNC code for the client's network connection. On Android:
 *  http://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkOperator()
 *  On iOS, see:
 *  https://developer.apple.com/library/ios/documentation/NetworkingInternet/Reference/CTCarrier/Reference/Reference.html
 */
@property(nonatomic, copy, nullable) NSString *networkOperatorCode;

/**
 *  The name of the carrier of the client's network connection. On Android:
 *  http://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkOperatorName()
 *  On iOS:
 *  https://developer.apple.com/library/ios/documentation/NetworkingInternet/Reference/CTCarrier/Reference/Reference.html#//apple_ref/occ/instp/CTCarrier/carrierName
 */
@property(nonatomic, copy, nullable) NSString *networkOperatorName;

/** Diagnostics about all peer sessions. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_PeerSessionDiagnostics *> *peerSession;

/**
 *  Whether or not sockets were used.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *socketsUsed;

@end


/**
 *  This is a JSON template for a leave room request.
 */
@interface GTLRGames_RoomLeaveRequest : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#roomLeaveRequest.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Diagnostics for a player leaving the room. */
@property(nonatomic, strong, nullable) GTLRGames_RoomLeaveDiagnostics *leaveDiagnostics;

/**
 *  Reason for leaving the match.
 *  Possible values are:
 *  - "PLAYER_LEFT" - The player chose to leave the room..
 *  - "GAME_LEFT" - The game chose to remove the player from the room.
 *  - "REALTIME_ABANDONED" - The player switched to another application and
 *  abandoned the room.
 *  - "REALTIME_PEER_CONNECTION_FAILURE" - The client was unable to establish a
 *  connection to other peer(s).
 *  - "REALTIME_SERVER_CONNECTION_FAILURE" - The client was unable to
 *  communicate with the server.
 *  - "REALTIME_SERVER_ERROR" - The client received an error response when it
 *  tried to communicate with the server.
 *  - "REALTIME_TIMEOUT" - The client timed out while waiting for a room.
 *  - "REALTIME_CLIENT_DISCONNECTING" - The client disconnects without first
 *  calling Leave.
 *  - "REALTIME_SIGN_OUT" - The user signed out of G+ while in the room.
 *  - "REALTIME_GAME_CRASHED" - The game crashed.
 *  - "REALTIME_ROOM_SERVICE_CRASHED" - RoomAndroidService crashed.
 *  - "REALTIME_DIFFERENT_CLIENT_ROOM_OPERATION" - Another client is trying to
 *  enter a room.
 *  - "REALTIME_SAME_CLIENT_ROOM_OPERATION" - The same client is trying to enter
 *  a new room.
 */
@property(nonatomic, copy, nullable) NSString *reason;

@end


/**
 *  This is a JSON template for a list of rooms.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_RoomList : GTLRCollectionObject

/**
 *  The rooms.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_Room *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#roomList.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The pagination token for the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  This is a JSON template for room modification metadata.
 */
@interface GTLRGames_RoomModification : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#roomModification.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The timestamp at which they modified the room, in milliseconds since the
 *  epoch in UTC.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *modifiedTimestampMillis;

/** The ID of the participant that modified the room. */
@property(nonatomic, copy, nullable) NSString *participantId;

@end


/**
 *  This is a JSON template for an update on the status of a peer in a room.
 */
@interface GTLRGames_RoomP2PStatus : GTLRObject

/**
 *  The amount of time in milliseconds it took to establish connections with
 *  this peer.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *connectionSetupLatencyMillis;

/**
 *  The error code in event of a failure.
 *  Possible values are:
 *  - "P2P_FAILED" - The client failed to establish a P2P connection with the
 *  peer.
 *  - "PRESENCE_FAILED" - The client failed to register to receive P2P
 *  connections.
 *  - "RELAY_SERVER_FAILED" - The client received an error when trying to use
 *  the relay server to establish a P2P connection with the peer.
 */
@property(nonatomic, copy, nullable) NSString *error;

/** More detailed diagnostic message returned in event of a failure. */
@property(nonatomic, copy, nullable) NSString *errorReason;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#roomP2PStatus.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The ID of the participant. */
@property(nonatomic, copy, nullable) NSString *participantId;

/**
 *  The status of the peer in the room.
 *  Possible values are:
 *  - "CONNECTION_ESTABLISHED" - The client established a P2P connection with
 *  the peer.
 *  - "CONNECTION_FAILED" - The client failed to establish directed presence
 *  with the peer.
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  The amount of time in milliseconds it took to send packets back and forth on
 *  the unreliable channel with this peer.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *unreliableRoundtripLatencyMillis;

@end


/**
 *  This is a JSON template for an update on the status of peers in a room.
 */
@interface GTLRGames_RoomP2PStatuses : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#roomP2PStatuses.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The updates for the peers. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_RoomP2PStatus *> *updates;

@end


/**
 *  This is a JSON template for a participant in a room.
 */
@interface GTLRGames_RoomParticipant : GTLRObject

/**
 *  True if this participant was auto-matched with the requesting player.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoMatched;

/**
 *  Information about a player that has been anonymously auto-matched against
 *  the requesting player. (Either player or autoMatchedPlayer will be set.)
 */
@property(nonatomic, strong, nullable) GTLRGames_AnonymousPlayer *autoMatchedPlayer;

/**
 *  The capabilities which can be used when communicating with this participant.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *capabilities;

/** Client address for the participant. */
@property(nonatomic, strong, nullable) GTLRGames_RoomClientAddress *clientAddress;

/**
 *  True if this participant is in the fully connected set of peers in the room.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *connected;

/**
 *  An identifier for the participant in the scope of the room. Cannot be used
 *  to identify a player across rooms or in other contexts.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#roomParticipant.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The reason the participant left the room; populated if the participant
 *  status is PARTICIPANT_LEFT.
 *  Possible values are:
 *  - "PLAYER_LEFT" - The player explicitly chose to leave the room.
 *  - "GAME_LEFT" - The game chose to remove the player from the room.
 *  - "ABANDONED" - The player switched to another application and abandoned the
 *  room.
 *  - "PEER_CONNECTION_FAILURE" - The client was unable to establish or maintain
 *  a connection to other peer(s) in the room.
 *  - "SERVER_ERROR" - The client received an error response when it tried to
 *  communicate with the server.
 *  - "TIMEOUT" - The client timed out while waiting for players to join and
 *  connect.
 *  - "PRESENCE_FAILURE" - The client's XMPP connection ended abruptly.
 */
@property(nonatomic, copy, nullable) NSString *leaveReason;

/**
 *  Information about the player. Not populated if this player was anonymously
 *  auto-matched against the requesting player. (Either player or
 *  autoMatchedPlayer will be set.)
 */
@property(nonatomic, strong, nullable) GTLRGames_Player *player;

/**
 *  The status of the participant with respect to the room.
 *  Possible values are:
 *  - "PARTICIPANT_INVITED" - The participant has been invited to join the room,
 *  but has not yet responded.
 *  - "PARTICIPANT_JOINED" - The participant has joined the room (either after
 *  creating it or accepting an invitation.)
 *  - "PARTICIPANT_DECLINED" - The participant declined an invitation to join
 *  the room.
 *  - "PARTICIPANT_LEFT" - The participant joined the room and then left it.
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  This is a JSON template for the status of a room that the player has joined.
 */
@interface GTLRGames_RoomStatus : GTLRObject

/**
 *  Auto-matching status for this room. Not set if the room is not currently in
 *  the automatching queue.
 */
@property(nonatomic, strong, nullable) GTLRGames_RoomAutoMatchStatus *autoMatchingStatus;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#roomStatus.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The participants involved in the room, along with their statuses. Includes
 *  participants who have left or declined invitations.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_RoomParticipant *> *participants;

/** Globally unique ID for a room. */
@property(nonatomic, copy, nullable) NSString *roomId;

/**
 *  The status of the room.
 *  Possible values are:
 *  - "ROOM_INVITING" - One or more players have been invited and not responded.
 *  - "ROOM_AUTO_MATCHING" - One or more slots need to be filled by
 *  auto-matching.
 *  - "ROOM_CONNECTING" - Players have joined are connecting to each other
 *  (either before or after auto-matching).
 *  - "ROOM_ACTIVE" - All players have joined and connected to each other.
 *  - "ROOM_DELETED" - All joined players have left.
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  The version of the status for the room: an increasing counter, used by the
 *  client to ignore out-of-order updates to room status.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *statusVersion;

@end


/**
 *  This is a JSON template for a request to submit a score to leaderboards.
 */
@interface GTLRGames_ScoreSubmission : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#scoreSubmission.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The leaderboard this score is being submitted to. */
@property(nonatomic, copy, nullable) NSString *leaderboardId;

/**
 *  The new score being submitted.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *score;

/**
 *  Additional information about this score. Values will contain no more than 64
 *  URI-safe characters as defined by section 2.3 of RFC 3986.
 */
@property(nonatomic, copy, nullable) NSString *scoreTag;

/**
 *  Signature Values will contain URI-safe characters as defined by section 2.3
 *  of RFC 3986.
 */
@property(nonatomic, copy, nullable) NSString *signature;

@end


/**
 *  This is a JSON template for an snapshot object.
 */
@interface GTLRGames_Snapshot : GTLRObject

/** The cover image of this snapshot. May be absent if there is no image. */
@property(nonatomic, strong, nullable) GTLRGames_SnapshotImage *coverImage;

/**
 *  The description of this snapshot.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The ID of the file underlying this snapshot in the Drive API. Only present
 *  if the snapshot is a view on a Drive file and the file is owned by the
 *  caller.
 */
@property(nonatomic, copy, nullable) NSString *driveId;

/**
 *  The duration associated with this snapshot, in millis.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *durationMillis;

/**
 *  The ID of the snapshot.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#snapshot.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The timestamp (in millis since Unix epoch) of the last modification to this
 *  snapshot.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastModifiedMillis;

/**
 *  The progress value (64-bit integer set by developer) associated with this
 *  snapshot.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *progressValue;

/** The title of this snapshot. */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  The type of this snapshot.
 *  Possible values are:
 *  - "SAVE_GAME" - A snapshot representing a save game.
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The unique name provided when the snapshot was created. */
@property(nonatomic, copy, nullable) NSString *uniqueName;

@end


/**
 *  This is a JSON template for an image of a snapshot.
 */
@interface GTLRGames_SnapshotImage : GTLRObject

/**
 *  The height of the image.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *height;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#snapshotImage.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The MIME type of the image. */
@property(nonatomic, copy, nullable) NSString *mimeType;

/**
 *  The URL of the image. This URL may be invalidated at any time and should not
 *  be cached.
 */
@property(nonatomic, copy, nullable) NSString *url;

/**
 *  The width of the image.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *width;

@end


/**
 *  This is a JSON template for a list of snapshot objects.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_SnapshotListResponse : GTLRCollectionObject

/**
 *  The snapshots.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_Snapshot *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#snapshotListResponse.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Token corresponding to the next page of results. If there are no more
 *  results, the token is omitted.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  This is a JSON template for an turn-based auto-match criteria object.
 */
@interface GTLRGames_TurnBasedAutoMatchingCriteria : GTLRObject

/**
 *  A bitmask indicating when auto-matches are valid. When ANDed with other
 *  exclusive bitmasks, the result must be zero. Can be used to support
 *  exclusive roles within a game.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exclusiveBitmask;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#turnBasedAutoMatchingCriteria.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The maximum number of players that should be added to the match by
 *  auto-matching.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxAutoMatchingPlayers;

/**
 *  The minimum number of players that should be added to the match by
 *  auto-matching.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minAutoMatchingPlayers;

@end


/**
 *  This is a JSON template for a turn-based match resource object.
 */
@interface GTLRGames_TurnBasedMatch : GTLRObject

/** The ID of the application being played. */
@property(nonatomic, copy, nullable) NSString *applicationId;

/** Criteria for auto-matching players into this match. */
@property(nonatomic, strong, nullable) GTLRGames_TurnBasedAutoMatchingCriteria *autoMatchingCriteria;

/** Details about the match creation. */
@property(nonatomic, strong, nullable) GTLRGames_TurnBasedMatchModification *creationDetails;

/** The data / game state for this match. */
@property(nonatomic, strong, nullable) GTLRGames_TurnBasedMatchData *data;

/**
 *  This short description is generated by our servers based on turn state and
 *  is localized and worded relative to the player requesting the match. It is
 *  intended to be displayed when the match is shown in a list.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The ID of the participant that invited the user to the match. Not set if the
 *  user was not invited to the match.
 */
@property(nonatomic, copy, nullable) NSString *inviterId;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#turnBasedMatch.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Details about the last update to the match. */
@property(nonatomic, strong, nullable) GTLRGames_TurnBasedMatchModification *lastUpdateDetails;

/** Globally unique ID for a turn-based match. */
@property(nonatomic, copy, nullable) NSString *matchId;

/**
 *  The number of the match in a chain of rematches. Will be set to 1 for the
 *  first match and incremented by 1 for each rematch.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *matchNumber;

/**
 *  The version of this match: an increasing counter, used to avoid out-of-date
 *  updates to the match.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *matchVersion;

/**
 *  The participants involved in the match, along with their statuses. Includes
 *  participants who have left or declined invitations.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_TurnBasedMatchParticipant *> *participants;

/** The ID of the participant that is taking a turn. */
@property(nonatomic, copy, nullable) NSString *pendingParticipantId;

/**
 *  The data / game state for the previous match; set for the first turn of
 *  rematches only.
 */
@property(nonatomic, strong, nullable) GTLRGames_TurnBasedMatchData *previousMatchData;

/**
 *  The ID of a rematch of this match. Only set for completed matches that have
 *  been rematched.
 */
@property(nonatomic, copy, nullable) NSString *rematchId;

/** The results reported for this match. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_ParticipantResult *> *results;

/**
 *  The status of the match.
 *  Possible values are:
 *  - "MATCH_AUTO_MATCHING" - One or more slots need to be filled by
 *  auto-matching; the match cannot be established until they are filled.
 *  - "MATCH_ACTIVE" - The match has started.
 *  - "MATCH_COMPLETE" - The match has finished.
 *  - "MATCH_CANCELED" - The match was canceled.
 *  - "MATCH_EXPIRED" - The match expired due to inactivity.
 *  - "MATCH_DELETED" - The match should no longer be shown on the client.
 *  Returned only for tombstones for matches when sync is called.
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  The status of the current user in the match. Derived from the match type,
 *  match status, the user's participant status, and the pending participant for
 *  the match.
 *  Possible values are:
 *  - "USER_INVITED" - The user has been invited to join the match and has not
 *  responded yet.
 *  - "USER_AWAITING_TURN" - The user is waiting for their turn.
 *  - "USER_TURN" - The user has an action to take in the match.
 *  - "USER_MATCH_COMPLETED" - The match has ended (it is completed, canceled,
 *  or expired.)
 */
@property(nonatomic, copy, nullable) NSString *userMatchStatus;

/**
 *  The variant / mode of the application being played; can be any integer
 *  value, or left blank.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *variant;

/**
 *  The ID of another participant in the match that can be used when describing
 *  the participants the user is playing with.
 */
@property(nonatomic, copy, nullable) NSString *withParticipantId;

@end


/**
 *  This is a JSON template for a turn-based match creation request.
 */
@interface GTLRGames_TurnBasedMatchCreateRequest : GTLRObject

/** Criteria for auto-matching players into this match. */
@property(nonatomic, strong, nullable) GTLRGames_TurnBasedAutoMatchingCriteria *autoMatchingCriteria;

/** The player ids to invite to the match. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *invitedPlayerIds;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#turnBasedMatchCreateRequest.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  A randomly generated numeric ID. This number is used at the server to ensure
 *  that the request is handled correctly across retries.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestId;

/**
 *  The variant / mode of the application to be played. This can be any integer
 *  value, or left blank. You should use a small number of variants to keep the
 *  auto-matching pool as large as possible.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *variant;

@end


/**
 *  This is a JSON template for a turn-based match data object.
 */
@interface GTLRGames_TurnBasedMatchData : GTLRObject

/**
 *  The byte representation of the data (limited to 128 kB), as a Base64-encoded
 *  string with the URL_SAFE encoding option.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  True if this match has data available but it wasn't returned in a list
 *  response; fetching the match individually will retrieve this data.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dataAvailable;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#turnBasedMatchData.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  This is a JSON template for sending a turn-based match data object.
 */
@interface GTLRGames_TurnBasedMatchDataRequest : GTLRObject

/**
 *  The byte representation of the data (limited to 128 kB), as a Base64-encoded
 *  string with the URL_SAFE encoding option.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#turnBasedMatchDataRequest.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  This is a JSON template for a list of turn-based matches.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_TurnBasedMatchList : GTLRCollectionObject

/**
 *  The matches.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_TurnBasedMatch *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#turnBasedMatchList.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The pagination token for the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  This is a JSON template for turn-based match modification metadata.
 */
@interface GTLRGames_TurnBasedMatchModification : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#turnBasedMatchModification.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The timestamp at which they modified the match, in milliseconds since the
 *  epoch in UTC.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *modifiedTimestampMillis;

/** The ID of the participant that modified the match. */
@property(nonatomic, copy, nullable) NSString *participantId;

@end


/**
 *  This is a JSON template for a participant in a turn-based match.
 */
@interface GTLRGames_TurnBasedMatchParticipant : GTLRObject

/**
 *  True if this participant was auto-matched with the requesting player.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoMatched;

/**
 *  Information about a player that has been anonymously auto-matched against
 *  the requesting player. (Either player or autoMatchedPlayer will be set.)
 */
@property(nonatomic, strong, nullable) GTLRGames_AnonymousPlayer *autoMatchedPlayer;

/**
 *  An identifier for the participant in the scope of the match. Cannot be used
 *  to identify a player across matches or in other contexts.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#turnBasedMatchParticipant.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Information about the player. Not populated if this player was anonymously
 *  auto-matched against the requesting player. (Either player or
 *  autoMatchedPlayer will be set.)
 */
@property(nonatomic, strong, nullable) GTLRGames_Player *player;

/**
 *  The status of the participant with respect to the match.
 *  Possible values are:
 *  - "PARTICIPANT_NOT_INVITED_YET" - The participant is slated to be invited to
 *  the match, but the invitation has not been sent; the invite will be sent
 *  when it becomes their turn.
 *  - "PARTICIPANT_INVITED" - The participant has been invited to join the
 *  match, but has not yet responded.
 *  - "PARTICIPANT_JOINED" - The participant has joined the match (either after
 *  creating it or accepting an invitation.)
 *  - "PARTICIPANT_DECLINED" - The participant declined an invitation to join
 *  the match.
 *  - "PARTICIPANT_LEFT" - The participant joined the match and then left it.
 *  - "PARTICIPANT_FINISHED" - The participant finished playing in the match.
 *  - "PARTICIPANT_UNRESPONSIVE" - The participant did not take their turn in
 *  the allotted time.
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  This is a JSON template for a rematch response.
 */
@interface GTLRGames_TurnBasedMatchRematch : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#turnBasedMatchRematch.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The old match that the rematch was created from; will be updated such that
 *  the rematchId field will point at the new match.
 */
@property(nonatomic, strong, nullable) GTLRGames_TurnBasedMatch *previousMatch;

/**
 *  The newly created match; a rematch of the old match with the same
 *  participants.
 */
@property(nonatomic, strong, nullable) GTLRGames_TurnBasedMatch *rematch;

@end


/**
 *  This is a JSON template for a turn-based match results object.
 */
@interface GTLRGames_TurnBasedMatchResults : GTLRObject

/** The final match data. */
@property(nonatomic, strong, nullable) GTLRGames_TurnBasedMatchDataRequest *data;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#turnBasedMatchResults.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The version of the match being updated.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *matchVersion;

/** The match results for the participants in the match. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_ParticipantResult *> *results;

@end


/**
 *  This is a JSON template for a list of turn-based matches returned from a
 *  sync.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_TurnBasedMatchSync : GTLRCollectionObject

/**
 *  The matches.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_TurnBasedMatch *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#turnBasedMatchSync.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  True if there were more matches available to fetch at the time the response
 *  was generated (which were not returned due to page size limits.)
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *moreAvailable;

/** The pagination token for the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  This is a JSON template for the object representing a turn.
 */
@interface GTLRGames_TurnBasedMatchTurn : GTLRObject

/** The shared game state data after the turn is over. */
@property(nonatomic, strong, nullable) GTLRGames_TurnBasedMatchDataRequest *data;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string games#turnBasedMatchTurn.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The version of this match: an increasing counter, used to avoid out-of-date
 *  updates to the match.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *matchVersion;

/**
 *  The ID of the participant who should take their turn next. May be set to the
 *  current player's participant ID to update match state without changing the
 *  turn. If not set, the match will wait for other player(s) to join via
 *  automatching; this is only valid if automatch criteria is set on the match
 *  with remaining slots for automatched players.
 */
@property(nonatomic, copy, nullable) NSString *pendingParticipantId;

/** The match results for the participants in the match. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_ParticipantResult *> *results;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
