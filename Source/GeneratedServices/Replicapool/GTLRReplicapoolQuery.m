// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Compute Engine Instance Group Manager API (replicapool/v1beta2)
// Description:
//   [Deprecated. Please use Instance Group Manager in Compute API] Provides
//   groups of homogenous Compute Engine instances.
// Documentation:
//   https://developers.google.com/compute/docs/instance-groups/manager/v1beta2

#import "GTLRReplicapoolQuery.h"

#import "GTLRReplicapoolObjects.h"

@implementation GTLRReplicapoolQuery

@dynamic fields;

@end

@implementation GTLRReplicapoolQuery_InstanceGroupManagersAbandonInstances

@dynamic instanceGroupManager, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRReplicapool_InstanceGroupManagersAbandonInstancesRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances";
  GTLRReplicapoolQuery_InstanceGroupManagersAbandonInstances *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRReplicapool_Operation class];
  query.loggingName = @"replicapool.instanceGroupManagers.abandonInstances";
  return query;
}

@end

@implementation GTLRReplicapoolQuery_InstanceGroupManagersDelete

@dynamic instanceGroupManager, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
            instanceGroupManager:(NSString *)instanceGroupManager {
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}";
  GTLRReplicapoolQuery_InstanceGroupManagersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRReplicapool_Operation class];
  query.loggingName = @"replicapool.instanceGroupManagers.delete";
  return query;
}

@end

@implementation GTLRReplicapoolQuery_InstanceGroupManagersDeleteInstances

@dynamic instanceGroupManager, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRReplicapool_InstanceGroupManagersDeleteInstancesRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances";
  GTLRReplicapoolQuery_InstanceGroupManagersDeleteInstances *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRReplicapool_Operation class];
  query.loggingName = @"replicapool.instanceGroupManagers.deleteInstances";
  return query;
}

@end

@implementation GTLRReplicapoolQuery_InstanceGroupManagersGet

@dynamic instanceGroupManager, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
            instanceGroupManager:(NSString *)instanceGroupManager {
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}";
  GTLRReplicapoolQuery_InstanceGroupManagersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRReplicapool_InstanceGroupManager class];
  query.loggingName = @"replicapool.instanceGroupManagers.get";
  return query;
}

@end

@implementation GTLRReplicapoolQuery_InstanceGroupManagersInsert

@dynamic project, size, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRReplicapool_InstanceGroupManager *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
                           size:(NSInteger)size {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers";
  GTLRReplicapoolQuery_InstanceGroupManagersInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.size = size;
  query.expectedObjectClass = [GTLRReplicapool_Operation class];
  query.loggingName = @"replicapool.instanceGroupManagers.insert";
  return query;
}

@end

@implementation GTLRReplicapoolQuery_InstanceGroupManagersList

@dynamic filter, maxResults, pageToken, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty {
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers";
  GTLRReplicapoolQuery_InstanceGroupManagersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRReplicapool_InstanceGroupManagerList class];
  query.loggingName = @"replicapool.instanceGroupManagers.list";
  return query;
}

@end

@implementation GTLRReplicapoolQuery_InstanceGroupManagersRecreateInstances

@dynamic instanceGroupManager, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRReplicapool_InstanceGroupManagersRecreateInstancesRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances";
  GTLRReplicapoolQuery_InstanceGroupManagersRecreateInstances *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRReplicapool_Operation class];
  query.loggingName = @"replicapool.instanceGroupManagers.recreateInstances";
  return query;
}

@end

@implementation GTLRReplicapoolQuery_InstanceGroupManagersResize

@dynamic instanceGroupManager, project, size, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
            instanceGroupManager:(NSString *)instanceGroupManager
                            size:(NSInteger)size {
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize";
  GTLRReplicapoolQuery_InstanceGroupManagersResize *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.size = size;
  query.expectedObjectClass = [GTLRReplicapool_Operation class];
  query.loggingName = @"replicapool.instanceGroupManagers.resize";
  return query;
}

@end

@implementation GTLRReplicapoolQuery_InstanceGroupManagersSetInstanceTemplate

@dynamic instanceGroupManager, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRReplicapool_InstanceGroupManagersSetInstanceTemplateRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate";
  GTLRReplicapoolQuery_InstanceGroupManagersSetInstanceTemplate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRReplicapool_Operation class];
  query.loggingName = @"replicapool.instanceGroupManagers.setInstanceTemplate";
  return query;
}

@end

@implementation GTLRReplicapoolQuery_InstanceGroupManagersSetTargetPools

@dynamic instanceGroupManager, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithObject:(GTLRReplicapool_InstanceGroupManagersSetTargetPoolsRequest *)object
                        project:(NSString *)project
                   zoneProperty:(NSString *)zoneProperty
           instanceGroupManager:(NSString *)instanceGroupManager {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"instanceGroupManager", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools";
  GTLRReplicapoolQuery_InstanceGroupManagersSetTargetPools *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instanceGroupManager = instanceGroupManager;
  query.expectedObjectClass = [GTLRReplicapool_Operation class];
  query.loggingName = @"replicapool.instanceGroupManagers.setTargetPools";
  return query;
}

@end

@implementation GTLRReplicapoolQuery_ZoneOperationsGet

@dynamic operation, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                       operation:(NSString *)operation {
  NSArray *pathParams = @[
    @"operation", @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/operations/{operation}";
  GTLRReplicapoolQuery_ZoneOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.operation = operation;
  query.expectedObjectClass = [GTLRReplicapool_Operation class];
  query.loggingName = @"replicapool.zoneOperations.get";
  return query;
}

@end

@implementation GTLRReplicapoolQuery_ZoneOperationsList

@dynamic filter, maxResults, pageToken, project, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty {
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/operations";
  GTLRReplicapoolQuery_ZoneOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.expectedObjectClass = [GTLRReplicapool_OperationList class];
  query.loggingName = @"replicapool.zoneOperations.list";
  return query;
}

@end
