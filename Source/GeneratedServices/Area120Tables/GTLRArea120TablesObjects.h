// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Area120 Tables API (area120tables/v1alpha1)
// Documentation:
//   https://tables.area120.google.com

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRArea120Tables_ColumnDescription;
@class GTLRArea120Tables_CreateRowRequest;
@class GTLRArea120Tables_LabeledItem;
@class GTLRArea120Tables_LookupDetails;
@class GTLRArea120Tables_RelationshipDetails;
@class GTLRArea120Tables_Row;
@class GTLRArea120Tables_Row_Values;
@class GTLRArea120Tables_Table;
@class GTLRArea120Tables_UpdateRowRequest;
@class GTLRArea120Tables_Workspace;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRArea120Tables_CreateRowRequest.view

/**
 *  Uses internally generated column id to identify values.
 *
 *  Value: "COLUMN_ID_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRArea120Tables_CreateRowRequest_View_ColumnIdView;
/**
 *  Defaults to user entered text.
 *
 *  Value: "VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRArea120Tables_CreateRowRequest_View_ViewUnspecified;

// ----------------------------------------------------------------------------
// GTLRArea120Tables_UpdateRowRequest.view

/**
 *  Uses internally generated column id to identify values.
 *
 *  Value: "COLUMN_ID_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRArea120Tables_UpdateRowRequest_View_ColumnIdView;
/**
 *  Defaults to user entered text.
 *
 *  Value: "VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRArea120Tables_UpdateRowRequest_View_ViewUnspecified;

/**
 *  Request message for TablesService.BatchCreateRows.
 */
@interface GTLRArea120Tables_BatchCreateRowsRequest : GTLRObject

/**
 *  Required. The request message specifying the rows to create. A maximum of
 *  500 rows can be created in a single batch.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRArea120Tables_CreateRowRequest *> *requests;

@end


/**
 *  Response message for TablesService.BatchCreateRows.
 */
@interface GTLRArea120Tables_BatchCreateRowsResponse : GTLRObject

/** The created rows. */
@property(nonatomic, strong, nullable) NSArray<GTLRArea120Tables_Row *> *rows;

@end


/**
 *  Request message for TablesService.BatchDeleteRows
 */
@interface GTLRArea120Tables_BatchDeleteRowsRequest : GTLRObject

/**
 *  Required. The names of the rows to delete. All rows must belong to the
 *  parent table or else the entire batch will fail. A maximum of 500 rows can
 *  be deleted in a batch. Format: tables/{table}/rows/{row}
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

@end


/**
 *  Request message for TablesService.BatchUpdateRows.
 */
@interface GTLRArea120Tables_BatchUpdateRowsRequest : GTLRObject

/**
 *  Required. The request messages specifying the rows to update. A maximum of
 *  500 rows can be modified in a single batch.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRArea120Tables_UpdateRowRequest *> *requests;

@end


/**
 *  Response message for TablesService.BatchUpdateRows.
 */
@interface GTLRArea120Tables_BatchUpdateRowsResponse : GTLRObject

/** The updated rows. */
@property(nonatomic, strong, nullable) NSArray<GTLRArea120Tables_Row *> *rows;

@end


/**
 *  Details on a column in the table.
 */
@interface GTLRArea120Tables_ColumnDescription : GTLRObject

/**
 *  Data type of the column Supported types are auto_id, boolean, boolean_list,
 *  creator, create_timestamp, date, dropdown, location, integer, integer_list,
 *  number, number_list, person, person_list, tags, check_list, text, text_list,
 *  update_timestamp, updater, relationship, file_attachment_list. These types
 *  directly map to the column types supported on Tables website.
 */
@property(nonatomic, copy, nullable) NSString *dataType;

/**
 *  Internal id for a column.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Optional. Range of labeled values for the column. Some columns like tags and
 *  drop-downs limit the values to a set of possible values. We return the range
 *  of values in such cases to help clients implement better user data
 *  validation.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRArea120Tables_LabeledItem *> *labels;

/**
 *  Optional. Indicates that this is a lookup column whose value is derived from
 *  the relationship column specified in the details. Lookup columns can not be
 *  updated directly. To change the value you must update the associated
 *  relationship column.
 */
@property(nonatomic, strong, nullable) GTLRArea120Tables_LookupDetails *lookupDetails;

/** column name */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Additional details about a relationship column. Specified when
 *  data_type is relationship.
 */
@property(nonatomic, strong, nullable) GTLRArea120Tables_RelationshipDetails *relationshipDetails;

@end


/**
 *  Request message for TablesService.CreateRow.
 */
@interface GTLRArea120Tables_CreateRowRequest : GTLRObject

/**
 *  Required. The parent table where this row will be created. Format:
 *  tables/{table}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. The row to create. */
@property(nonatomic, strong, nullable) GTLRArea120Tables_Row *row;

/**
 *  Optional. Column key to use for values in the row. Defaults to user entered
 *  name.
 *
 *  Likely values:
 *    @arg @c kGTLRArea120Tables_CreateRowRequest_View_ColumnIdView Uses
 *        internally generated column id to identify values. (Value:
 *        "COLUMN_ID_VIEW")
 *    @arg @c kGTLRArea120Tables_CreateRowRequest_View_ViewUnspecified Defaults
 *        to user entered text. (Value: "VIEW_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *view;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON
 *  representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRArea120Tables_Empty : GTLRObject
@end


/**
 *  A single item in a labeled column.
 */
@interface GTLRArea120Tables_LabeledItem : GTLRObject

/**
 *  Internal id associated with the item.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Display string as entered by user. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Response message for TablesService.ListRows.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rows" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRArea120Tables_ListRowsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is empty, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The rows from the specified table.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRArea120Tables_Row *> *rows;

@end


/**
 *  Response message for TablesService.ListTables.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "tables" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRArea120Tables_ListTablesResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is empty, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of tables.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRArea120Tables_Table *> *tables;

@end


/**
 *  Response message for TablesService.ListWorkspaces.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "workspaces" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRArea120Tables_ListWorkspacesResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is empty, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of workspaces.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRArea120Tables_Workspace *> *workspaces;

@end


/**
 *  Details about a lookup column whose value comes from the associated
 *  relationship.
 */
@interface GTLRArea120Tables_LookupDetails : GTLRObject

/** The name of the relationship column associated with the lookup. */
@property(nonatomic, copy, nullable) NSString *relationshipColumn;

/** The id of the relationship column. */
@property(nonatomic, copy, nullable) NSString *relationshipColumnId;

@end


/**
 *  Details about a relationship column.
 */
@interface GTLRArea120Tables_RelationshipDetails : GTLRObject

/** The name of the table this relationship is linked to. */
@property(nonatomic, copy, nullable) NSString *linkedTable;

@end


/**
 *  A single row in a table.
 */
@interface GTLRArea120Tables_Row : GTLRObject

/**
 *  The resource name of the row. Row names have the form
 *  `tables/{table}/rows/{row}`. The name is ignored when creating a row.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The values of the row. This is a map of column key to value. Key is user
 *  entered name(default) or the internal column id based on the view in the
 *  request.
 */
@property(nonatomic, strong, nullable) GTLRArea120Tables_Row_Values *values;

@end


/**
 *  The values of the row. This is a map of column key to value. Key is user
 *  entered name(default) or the internal column id based on the view in the
 *  request.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRArea120Tables_Row_Values : GTLRObject
@end


/**
 *  A single table.
 */
@interface GTLRArea120Tables_Table : GTLRObject

/**
 *  List of columns in this table. Order of columns matches the display order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRArea120Tables_ColumnDescription *> *columns;

/** The human readable title of the table. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The resource name of the table. Table names have the form `tables/{table}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Request message for TablesService.UpdateRow.
 */
@interface GTLRArea120Tables_UpdateRowRequest : GTLRObject

/** Required. The row to update. */
@property(nonatomic, strong, nullable) GTLRArea120Tables_Row *row;

/**
 *  The list of fields to update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Optional. Column key to use for values in the row. Defaults to user entered
 *  name.
 *
 *  Likely values:
 *    @arg @c kGTLRArea120Tables_UpdateRowRequest_View_ColumnIdView Uses
 *        internally generated column id to identify values. (Value:
 *        "COLUMN_ID_VIEW")
 *    @arg @c kGTLRArea120Tables_UpdateRowRequest_View_ViewUnspecified Defaults
 *        to user entered text. (Value: "VIEW_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *view;

@end


/**
 *  A single workspace.
 */
@interface GTLRArea120Tables_Workspace : GTLRObject

/** The human readable title of the workspace. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The resource name of the workspace. Workspace names have the form
 *  `workspaces/{workspace}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The list of tables in the workspace. */
@property(nonatomic, strong, nullable) NSArray<GTLRArea120Tables_Table *> *tables;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
