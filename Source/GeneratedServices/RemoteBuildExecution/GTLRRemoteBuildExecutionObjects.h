// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Remote Build Execution API (remotebuildexecution/v2)
// Description:
//   Supplies a Remote Execution API service for tools such as bazel.
// Documentation:
//   https://cloud.google.com/remote-build-execution/docs/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ActionCacheUpdateCapabilities;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ActionResult;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchReadBlobsResponseResponse;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchUpdateBlobsRequestRequest;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchUpdateBlobsResponseResponse;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CacheCapabilities;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CommandEnvironmentVariable;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Directory;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2DirectoryNode;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutedActionMetadata;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteResponse_ServerLogs;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutionCapabilities;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutionPolicy;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2FileNode;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2LogFile;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2OutputDirectory;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2OutputFile;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2OutputSymlink;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Platform;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2PlatformProperty;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2PriorityCapabilities;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2PriorityCapabilitiesPriorityRange;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ResultsCachePolicy;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2SymlinkNode;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ToolDetails;
@class GTLRRemoteBuildExecution_BuildBazelSemverSemVer;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testActionResult;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testCommandEnvironmentVariable;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDigest;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDirectory;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDirectoryNode;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testExecuteResponse_ServerLogs;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testFileNode;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testLogFile;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testOutputDirectory;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testOutputFile;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testToolDetails;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2Blob;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandResult_Metadata_Item;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2Digest;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata;
@class GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2FileMetadata;
@class GTLRRemoteBuildExecution_GoogleLongrunningOperation_Metadata;
@class GTLRRemoteBuildExecution_GoogleLongrunningOperation_Response;
@class GTLRRemoteBuildExecution_GoogleRpcStatus;
@class GTLRRemoteBuildExecution_GoogleRpcStatus_Details_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CacheCapabilities.digestFunction

/** Value: "MD5" */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CacheCapabilities_DigestFunction_Md5;
/** Value: "SHA1" */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CacheCapabilities_DigestFunction_Sha1;
/** Value: "SHA256" */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CacheCapabilities_DigestFunction_Sha256;
/** Value: "UNKNOWN" */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CacheCapabilities_DigestFunction_Unknown;

// ----------------------------------------------------------------------------
// GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CacheCapabilities.symlinkAbsolutePathStrategy

/**
 *  Server will allow symlink targets to escape the input root tree, possibly
 *  resulting in non-hermetic builds.
 *
 *  Value: "ALLOWED"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CacheCapabilities_SymlinkAbsolutePathStrategy_Allowed;
/**
 *  Server will return an `INVALID_ARGUMENT` on input symlinks with absolute
 *  targets.
 *  If an action tries to create an output symlink with an absolute target, a
 *  `FAILED_PRECONDITION` will be returned.
 *
 *  Value: "DISALLOWED"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CacheCapabilities_SymlinkAbsolutePathStrategy_Disallowed;
/** Value: "UNKNOWN" */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CacheCapabilities_SymlinkAbsolutePathStrategy_Unknown;

// ----------------------------------------------------------------------------
// GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteOperationMetadata.stage

/**
 *  Checking the result against the cache.
 *
 *  Value: "CACHE_CHECK"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteOperationMetadata_Stage_CacheCheck;
/**
 *  Finished execution.
 *
 *  Value: "COMPLETED"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteOperationMetadata_Stage_Completed;
/**
 *  Currently being executed by a worker.
 *
 *  Value: "EXECUTING"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteOperationMetadata_Stage_Executing;
/**
 *  Currently idle, awaiting a free machine to execute.
 *
 *  Value: "QUEUED"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteOperationMetadata_Stage_Queued;
/** Value: "UNKNOWN" */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteOperationMetadata_Stage_Unknown;

// ----------------------------------------------------------------------------
// GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutionCapabilities.digestFunction

/**
 *  The MD5 digest function.
 *
 *  Value: "MD5"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutionCapabilities_DigestFunction_Md5;
/**
 *  The Sha-1 digest function.
 *
 *  Value: "SHA1"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutionCapabilities_DigestFunction_Sha1;
/**
 *  The Sha-256 digest function.
 *
 *  Value: "SHA256"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutionCapabilities_DigestFunction_Sha256;
/**
 *  It is an error for the server to return this value.
 *
 *  Value: "UNKNOWN"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutionCapabilities_DigestFunction_Unknown;

// ----------------------------------------------------------------------------
// GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.state

/**
 *  The instance is in state `CREATING` once `CreateInstance` is called and
 *  before the instance is ready for use.
 *
 *  Value: "CREATING"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance_State_Creating;
/**
 *  An `INACTIVE` instance indicates that there is a problem that needs to be
 *  fixed. Such instances cannot be used for execution and instances that
 *  remain in this state for a significant period of time will be removed
 *  permanently.
 *
 *  Value: "INACTIVE"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance_State_Inactive;
/**
 *  The instance is in state `RUNNING` when it is ready for use.
 *
 *  Value: "RUNNING"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance_State_Running;
/**
 *  Not a valid state, but the default value of the enum.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool.state

/**
 *  The worker pool is in state `CREATING` once `CreateWorkerPool` is called
 *  and before all requested workers are ready.
 *
 *  Value: "CREATING"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool_State_Creating;
/**
 *  The worker pool is in state `DELETING` once the `Delete` method is called
 *  and before the deletion completes.
 *
 *  Value: "DELETING"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool_State_Deleting;
/**
 *  The worker pool is in state `INACTIVE` when the instance hosting the
 *  worker pool in not running.
 *
 *  Value: "INACTIVE"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool_State_Inactive;
/**
 *  The worker pool is in state `RUNNING` when all its workers are ready for
 *  use.
 *
 *  Value: "RUNNING"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool_State_Running;
/**
 *  Not a valid state, but the default value of the enum.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool_State_StateUnspecified;
/**
 *  The worker pool is in state `UPDATING` once `UpdateWorkerPool` is called
 *  and before the new configuration has all the requested workers ready for
 *  use, and no older configuration has any workers. At that point the state
 *  transitions to `RUNNING`.
 *
 *  Value: "UPDATING"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool_State_Updating;

// ----------------------------------------------------------------------------
// GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testExecuteOperationMetadata.stage

/**
 *  Checking the result against the cache.
 *
 *  Value: "CACHE_CHECK"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testExecuteOperationMetadata_Stage_CacheCheck;
/**
 *  Finished execution.
 *
 *  Value: "COMPLETED"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testExecuteOperationMetadata_Stage_Completed;
/**
 *  Currently being executed by a worker.
 *
 *  Value: "EXECUTING"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testExecuteOperationMetadata_Stage_Executing;
/**
 *  Currently idle, awaiting a free machine to execute.
 *
 *  Value: "QUEUED"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testExecuteOperationMetadata_Stage_Queued;
/** Value: "UNKNOWN" */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testExecuteOperationMetadata_Stage_Unknown;

// ----------------------------------------------------------------------------
// GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2AdminTemp.command

/**
 *  Restart the bot without downloading a new version. `arg` will be a
 *  message to log.
 *
 *  Value: "BOT_RESTART"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2AdminTemp_Command_BotRestart;
/**
 *  Shut down the bot. `arg` will be a task resource name (similar to those
 *  in tasks.proto) that the bot can use to tell the server that it is
 *  terminating.
 *
 *  Value: "BOT_TERMINATE"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2AdminTemp_Command_BotTerminate;
/**
 *  Download and run a new version of the bot. `arg` will be a resource
 *  accessible via `ByteStream.Read` to obtain the new bot code.
 *
 *  Value: "BOT_UPDATE"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2AdminTemp_Command_BotUpdate;
/**
 *  Restart the host computer. `arg` will be a message to log.
 *
 *  Value: "HOST_RESTART"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2AdminTemp_Command_HostRestart;
/**
 *  Illegal value.
 *
 *  Value: "UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2AdminTemp_Command_Unspecified;

/**
 *  An `Action` captures all the information about an execution which is
 *  required
 *  to reproduce it.
 *  `Action`s are the core component of the [Execution] service. A single
 *  `Action` represents a repeatable action that can be performed by the
 *  execution service. `Action`s can be succinctly identified by the digest of
 *  their wire format encoding and, once an `Action` has been executed, will be
 *  cached in the action cache. Future requests can then use the cached result
 *  rather than needing to run afresh.
 *  When a server completes execution of an
 *  Action, it MAY choose to
 *  cache the result in
 *  the ActionCache unless
 *  `do_not_cache` is `true`. Clients SHOULD expect the server to do so. By
 *  default, future calls to
 *  Execute the same
 *  `Action` will also serve their results from the cache. Clients must take
 *  care
 *  to understand the caching behaviour. Ideally, all `Action`s will be
 *  reproducible so that serving a result from cache is always desirable and
 *  correct.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Action : GTLRObject

/**
 *  The digest of the Command
 *  to run, which MUST be present in the
 *  ContentAddressableStorage.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *commandDigest;

/**
 *  If true, then the `Action`'s result cannot be cached.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *doNotCache;

/**
 *  The digest of the root
 *  Directory for the input
 *  files. The files in the directory tree are available in the correct
 *  location on the build machine before the command is executed. The root
 *  directory, as well as every subdirectory and content blob referred to, MUST
 *  be in the
 *  ContentAddressableStorage.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *inputRootDigest;

/**
 *  A timeout after which the execution should be killed. If the timeout is
 *  absent, then the client is specifying that the execution should continue
 *  as long as the server will let it. The server SHOULD impose a timeout if
 *  the client does not specify one, however, if the client does specify a
 *  timeout that is longer than the server's maximum timeout, the server MUST
 *  reject the request.
 *  The timeout is a part of the
 *  Action message, and
 *  therefore two `Actions` with different timeouts are different, even if they
 *  are otherwise identical. This is because, if they were not, running an
 *  `Action` with a lower timeout than is required might result in a cache hit
 *  from an execution run with a longer timeout, hiding the fact that the
 *  timeout is too short. By encoding it directly in the `Action`, a lower
 *  timeout will result in a cache miss and the execution timeout will fail
 *  immediately, rather than whenever the cache entry gets evicted.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

@end


/**
 *  Describes the server/instance capabilities for updating the action cache.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ActionCacheUpdateCapabilities : GTLRObject

/**
 *  updateEnabled
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *updateEnabled;

@end


/**
 *  An ActionResult represents the result of an
 *  Action being run.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ActionResult : GTLRObject

/** The details of the execution that originally produced this result. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutedActionMetadata *executionMetadata;

/**
 *  The exit code of the command.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exitCode;

/**
 *  The output directories of the action. For each output directory requested
 *  in the `output_directories` field of the Action, if the corresponding
 *  directory existed after the action completed, a single entry will be
 *  present in the output list, which will contain the digest of a
 *  Tree message containing the
 *  directory tree, and the path equal exactly to the corresponding Action
 *  output_directories member.
 *  As an example, suppose the Action had an output directory `a/b/dir` and the
 *  execution produced the following contents in `a/b/dir`: a file named `bar`
 *  and a directory named `foo` with an executable file named `baz`. Then,
 *  output_directory will contain (hashes shortened for readability):
 *  ```json
 *  // OutputDirectory proto:
 *  {
 *  path: "a/b/dir"
 *  tree_digest: {
 *  hash: "4a73bc9d03...",
 *  size: 55
 *  }
 *  }
 *  // Tree proto with hash "4a73bc9d03..." and size 55:
 *  {
 *  root: {
 *  files: [
 *  {
 *  name: "bar",
 *  digest: {
 *  hash: "4a73bc9d03...",
 *  size: 65534
 *  }
 *  }
 *  ],
 *  directories: [
 *  {
 *  name: "foo",
 *  digest: {
 *  hash: "4cf2eda940...",
 *  size: 43
 *  }
 *  }
 *  ]
 *  }
 *  children : {
 *  // (Directory proto with hash "4cf2eda940..." and size 43)
 *  files: [
 *  {
 *  name: "baz",
 *  digest: {
 *  hash: "b2c941073e...",
 *  size: 1294,
 *  },
 *  is_executable: true
 *  }
 *  ]
 *  }
 *  }
 *  ```
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2OutputDirectory *> *outputDirectories;

/**
 *  The output directories of the action that are symbolic links to other
 *  directories. Those may be links to other output directories, or input
 *  directories, or even absolute paths outside of the working directory,
 *  if the server supports
 *  SymlinkAbsolutePathStrategy.ALLOWED.
 *  For each output directory requested in the `output_directories` field of
 *  the Action, if the directory file existed after
 *  the action completed, a single entry will be present either in this field,
 *  or in the `output_directories` field, if the directory was not a symbolic
 *  link.
 *  If the action does not produce the requested output, or produces a
 *  file where a directory is expected or vice versa, then that output
 *  will be omitted from the list. The server is free to arrange the output
 *  list as desired; clients MUST NOT assume that the output list is sorted.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2OutputSymlink *> *outputDirectorySymlinks;

/**
 *  The output files of the action. For each output file requested in the
 *  `output_files` field of the Action, if the corresponding file existed after
 *  the action completed, a single entry will be present either in this field,
 *  or in the output_file_symlinks field, if the file was a symbolic link to
 *  another file.
 *  If the action does not produce the requested output, or produces a
 *  directory where a regular file is expected or vice versa, then that output
 *  will be omitted from the list. The server is free to arrange the output
 *  list as desired; clients MUST NOT assume that the output list is sorted.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2OutputFile *> *outputFiles;

/**
 *  The output files of the action that are symbolic links to other files. Those
 *  may be links to other output files, or input files, or even absolute paths
 *  outside of the working directory, if the server supports
 *  SymlinkAbsolutePathStrategy.ALLOWED.
 *  For each output file requested in the `output_files` field of the Action,
 *  if the corresponding file existed after
 *  the action completed, a single entry will be present either in this field,
 *  or in the `output_files` field, if the file was not a symbolic link.
 *  If the action does not produce the requested output, or produces a
 *  directory where a regular file is expected or vice versa, then that output
 *  will be omitted from the list. The server is free to arrange the output
 *  list as desired; clients MUST NOT assume that the output list is sorted.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2OutputSymlink *> *outputFileSymlinks;

/**
 *  The digest for a blob containing the standard error of the action, which
 *  can be retrieved from the
 *  ContentAddressableStorage.
 *  See `stderr_raw` for when this will be set.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *stderrDigest;

/**
 *  The standard error buffer of the action. The server will determine, based
 *  on the size of the buffer, whether to return it in raw form or to return
 *  a digest in `stderr_digest` that points to the buffer. If neither is set,
 *  then the buffer is empty. The client SHOULD NOT assume it will get one of
 *  the raw buffer or a digest on any given request and should be prepared to
 *  handle either.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *stderrRaw;

/**
 *  The digest for a blob containing the standard output of the action, which
 *  can be retrieved from the
 *  ContentAddressableStorage.
 *  See `stdout_raw` for when this will be set.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *stdoutDigest;

/**
 *  The standard output buffer of the action. The server will determine, based
 *  on the size of the buffer, whether to return it in raw form or to return
 *  a digest in `stdout_digest` that points to the buffer. If neither is set,
 *  then the buffer is empty. The client SHOULD NOT assume it will get one of
 *  the raw buffer or a digest on any given request and should be prepared to
 *  handle either.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *stdoutRaw;

@end


/**
 *  A request message for
 *  ContentAddressableStorage.BatchReadBlobs.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchReadBlobsRequest : GTLRObject

/** The individual blob digests. */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *> *digests;

@end


/**
 *  A response message for
 *  ContentAddressableStorage.BatchReadBlobs.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchReadBlobsResponse : GTLRObject

/** The responses to the requests. */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchReadBlobsResponseResponse *> *responses;

@end


/**
 *  A response corresponding to a single blob that the client tried to upload.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchReadBlobsResponseResponse : GTLRObject

/**
 *  The raw binary data.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/** The digest to which this response corresponds. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *digest;

/** The result of attempting to download that blob. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleRpcStatus *status;

@end


/**
 *  A request message for
 *  ContentAddressableStorage.BatchUpdateBlobs.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchUpdateBlobsRequest : GTLRObject

/** The individual upload requests. */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchUpdateBlobsRequestRequest *> *requests;

@end


/**
 *  A request corresponding to a single blob that the client wants to upload.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchUpdateBlobsRequestRequest : GTLRObject

/**
 *  The raw binary data.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/** The digest of the blob. This MUST be the digest of `data`. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *digest;

@end


/**
 *  A response message for
 *  ContentAddressableStorage.BatchUpdateBlobs.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchUpdateBlobsResponse : GTLRObject

/** The responses to the requests. */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchUpdateBlobsResponseResponse *> *responses;

@end


/**
 *  A response corresponding to a single blob that the client tried to upload.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchUpdateBlobsResponseResponse : GTLRObject

/** The blob digest to which this response corresponds. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *digest;

/** The result of attempting to upload that blob. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleRpcStatus *status;

@end


/**
 *  Capabilities of the remote cache system.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CacheCapabilities : GTLRObject

/** Capabilities for updating the action cache. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ActionCacheUpdateCapabilities *actionCacheUpdateCapabilities;

/** Supported cache priority range for both CAS and ActionCache. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2PriorityCapabilities *cachePriorityCapabilities;

/**
 *  All the digest functions supported by the remote cache.
 *  Remote cache may support multiple digest functions simultaneously.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *digestFunction;

/**
 *  Maximum total size of blobs to be uploaded/downloaded using
 *  batch methods. A value of 0 means no limit is set, although
 *  in practice there will always be a message size limitation
 *  of the protocol in use, e.g. GRPC.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxBatchTotalSizeBytes;

/**
 *  Whether absolute symlink targets are supported.
 *
 *  Likely values:
 *    @arg @c kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CacheCapabilities_SymlinkAbsolutePathStrategy_Allowed
 *        Server will allow symlink targets to escape the input root tree,
 *        possibly
 *        resulting in non-hermetic builds. (Value: "ALLOWED")
 *    @arg @c kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CacheCapabilities_SymlinkAbsolutePathStrategy_Disallowed
 *        Server will return an `INVALID_ARGUMENT` on input symlinks with
 *        absolute
 *        targets.
 *        If an action tries to create an output symlink with an absolute
 *        target, a
 *        `FAILED_PRECONDITION` will be returned. (Value: "DISALLOWED")
 *    @arg @c kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CacheCapabilities_SymlinkAbsolutePathStrategy_Unknown
 *        Value "UNKNOWN"
 */
@property(nonatomic, copy, nullable) NSString *symlinkAbsolutePathStrategy;

@end


/**
 *  A `Command` is the actual command executed by a worker running an
 *  Action and specifications of its
 *  environment.
 *  Except as otherwise required, the environment (such as which system
 *  libraries or binaries are available, and what filesystems are mounted where)
 *  is defined by and specific to the implementation of the remote execution
 *  API.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Command : GTLRObject

/**
 *  The arguments to the command. The first argument must be the path to the
 *  executable, which must be either a relative path, in which case it is
 *  evaluated with respect to the input root, or an absolute path.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *arguments;

/**
 *  The environment variables to set when running the program. The worker may
 *  provide its own default environment variables; these defaults can be
 *  overridden using this field. Additional variables can also be specified.
 *  In order to ensure that equivalent
 *  Commands always hash to the same
 *  value, the environment variables MUST be lexicographically sorted by name.
 *  Sorting of strings is done by code point, equivalently, by the UTF-8 bytes.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CommandEnvironmentVariable *> *environmentVariables;

/**
 *  A list of the output directories that the client expects to retrieve from
 *  the action. Only the listed directories will be returned (an entire
 *  directory structure will be returned as a
 *  Tree message digest, see
 *  OutputDirectory), as
 *  well as files listed in `output_files`. Other files or directories that
 *  may be created during command execution are discarded.
 *  The paths are relative to the working directory of the action execution.
 *  The paths are specified using a single forward slash (`/`) as a path
 *  separator, even if the execution platform natively uses a different
 *  separator. The path MUST NOT include a trailing slash, nor a leading slash,
 *  being a relative path. The special value of empty string is allowed,
 *  although not recommended, and can be used to capture the entire working
 *  directory tree, including inputs.
 *  In order to ensure consistent hashing of the same Action, the output paths
 *  MUST be sorted lexicographically by code point (or, equivalently, by UTF-8
 *  bytes).
 *  An output directory cannot be duplicated or have the same path as any of
 *  the listed output files.
 *  Directories leading up to the output directories (but not the output
 *  directories themselves) are created by the worker prior to execution, even
 *  if they are not explicitly part of the input root.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *outputDirectories;

/**
 *  A list of the output files that the client expects to retrieve from the
 *  action. Only the listed files, as well as directories listed in
 *  `output_directories`, will be returned to the client as output.
 *  Other files or directories that may be created during command execution
 *  are discarded.
 *  The paths are relative to the working directory of the action execution.
 *  The paths are specified using a single forward slash (`/`) as a path
 *  separator, even if the execution platform natively uses a different
 *  separator. The path MUST NOT include a trailing slash, nor a leading slash,
 *  being a relative path.
 *  In order to ensure consistent hashing of the same Action, the output paths
 *  MUST be sorted lexicographically by code point (or, equivalently, by UTF-8
 *  bytes).
 *  An output file cannot be duplicated, be a parent of another output file, or
 *  have the same path as any of the listed output directories.
 *  Directories leading up to the output files are created by the worker prior
 *  to execution, even if they are not explicitly part of the input root.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *outputFiles;

/**
 *  The platform requirements for the execution environment. The server MAY
 *  choose to execute the action on any worker satisfying the requirements, so
 *  the client SHOULD ensure that running the action on any such worker will
 *  have the same result.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Platform *platform;

/**
 *  The working directory, relative to the input root, for the command to run
 *  in. It must be a directory which exists in the input tree. If it is left
 *  empty, then the action is run in the input root.
 */
@property(nonatomic, copy, nullable) NSString *workingDirectory;

@end


/**
 *  An `EnvironmentVariable` is one variable to set in the running program's
 *  environment.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CommandEnvironmentVariable : GTLRObject

/** The variable name. */
@property(nonatomic, copy, nullable) NSString *name;

/** The variable value. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A content digest. A digest for a given blob consists of the size of the blob
 *  and its hash. The hash algorithm to use is defined by the server, but
 *  servers
 *  SHOULD use SHA-256.
 *  The size is considered to be an integral part of the digest and cannot be
 *  separated. That is, even if the `hash` field is correctly specified but
 *  `size_bytes` is not, the server MUST reject the request.
 *  The reason for including the size in the digest is as follows: in a great
 *  many cases, the server needs to know the size of the blob it is about to
 *  work
 *  with prior to starting an operation with it, such as flattening Merkle tree
 *  structures or streaming it to a worker. Technically, the server could
 *  implement a separate metadata store, but this results in a significantly
 *  more
 *  complicated implementation as opposed to having the client specify the size
 *  up-front (or storing the size along with the digest in every message where
 *  digests are embedded). This does mean that the API leaks some implementation
 *  details of (what we consider to be) a reasonable server implementation, but
 *  we consider this to be a worthwhile tradeoff.
 *  When a `Digest` is used to refer to a proto message, it always refers to the
 *  message in binary encoded form. To ensure consistent hashing, clients and
 *  servers MUST ensure that they serialize messages according to the following
 *  rules, even if there are alternate valid encodings for the same message:
 *  * Fields are serialized in tag order.
 *  * There are no unknown fields.
 *  * There are no duplicate fields.
 *  * Fields are serialized according to the default semantics for their type.
 *  Most protocol buffer implementations will always follow these rules when
 *  serializing, but care should be taken to avoid shortcuts. For instance,
 *  concatenating two messages to merge them may produce duplicate fields.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest : GTLRObject

/**
 *  The hash. In the case of SHA-256, it will always be a lowercase hex string
 *  exactly 64 characters long.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty;

/**
 *  The size of the blob, in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sizeBytes;

@end


/**
 *  A `Directory` represents a directory node in a file tree, containing zero or
 *  more children FileNodes,
 *  DirectoryNodes and
 *  SymlinkNodes.
 *  Each `Node` contains its name in the directory, either the digest of its
 *  content (either a file blob or a `Directory` proto) or a symlink target, as
 *  well as possibly some metadata about the file or directory.
 *  In order to ensure that two equivalent directory trees hash to the same
 *  value, the following restrictions MUST be obeyed when constructing a
 *  a `Directory`:
 *  * Every child in the directory must have a path of exactly one segment.
 *  Multiple levels of directory hierarchy may not be collapsed.
 *  * Each child in the directory must have a unique path segment (file name).
 *  * The files, directories and symlinks in the directory must each be sorted
 *  in lexicographical order by path. The path strings must be sorted by code
 *  point, equivalently, by UTF-8 bytes.
 *  A `Directory` that obeys the restrictions is said to be in canonical form.
 *  As an example, the following could be used for a file named `bar` and a
 *  directory named `foo` with an executable file named `baz` (hashes shortened
 *  for readability):
 *  ```json
 *  // (Directory proto)
 *  {
 *  files: [
 *  {
 *  name: "bar",
 *  digest: {
 *  hash: "4a73bc9d03...",
 *  size: 65534
 *  }
 *  }
 *  ],
 *  directories: [
 *  {
 *  name: "foo",
 *  digest: {
 *  hash: "4cf2eda940...",
 *  size: 43
 *  }
 *  }
 *  ]
 *  }
 *  // (Directory proto with hash "4cf2eda940..." and size 43)
 *  {
 *  files: [
 *  {
 *  name: "baz",
 *  digest: {
 *  hash: "b2c941073e...",
 *  size: 1294,
 *  },
 *  is_executable: true
 *  }
 *  ]
 *  }
 *  ```
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Directory : GTLRObject

/** The subdirectories in the directory. */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2DirectoryNode *> *directories;

/** The files in the directory. */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2FileNode *> *files;

/** The symlinks in the directory. */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2SymlinkNode *> *symlinks;

@end


/**
 *  A `DirectoryNode` represents a child of a
 *  Directory which is itself
 *  a `Directory` and its associated metadata.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2DirectoryNode : GTLRObject

/**
 *  The digest of the
 *  Directory object
 *  represented. See Digest
 *  for information about how to take the digest of a proto message.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *digest;

/** The name of the directory. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  ExecutedActionMetadata contains details about a completed execution.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutedActionMetadata : GTLRObject

/** When the worker completed executing the action command. */
@property(nonatomic, strong, nullable) GTLRDateTime *executionCompletedTimestamp;

/** When the worker started executing the action command. */
@property(nonatomic, strong, nullable) GTLRDateTime *executionStartTimestamp;

/** When the worker finished fetching action inputs. */
@property(nonatomic, strong, nullable) GTLRDateTime *inputFetchCompletedTimestamp;

/** When the worker started fetching action inputs. */
@property(nonatomic, strong, nullable) GTLRDateTime *inputFetchStartTimestamp;

/** When the worker finished uploading action outputs. */
@property(nonatomic, strong, nullable) GTLRDateTime *outputUploadCompletedTimestamp;

/** When the worker started uploading action outputs. */
@property(nonatomic, strong, nullable) GTLRDateTime *outputUploadStartTimestamp;

/** When was the action added to the queue. */
@property(nonatomic, strong, nullable) GTLRDateTime *queuedTimestamp;

/** The name of the worker which ran the execution. */
@property(nonatomic, copy, nullable) NSString *worker;

/** When the worker completed the action, including all stages. */
@property(nonatomic, strong, nullable) GTLRDateTime *workerCompletedTimestamp;

/** When the worker received the action. */
@property(nonatomic, strong, nullable) GTLRDateTime *workerStartTimestamp;

@end


/**
 *  Metadata about an ongoing
 *  execution, which
 *  will be contained in the metadata
 *  field of the
 *  Operation.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteOperationMetadata : GTLRObject

/**
 *  The digest of the Action
 *  being executed.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *actionDigest;

/**
 *  stage
 *
 *  Likely values:
 *    @arg @c kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteOperationMetadata_Stage_CacheCheck
 *        Checking the result against the cache. (Value: "CACHE_CHECK")
 *    @arg @c kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteOperationMetadata_Stage_Completed
 *        Finished execution. (Value: "COMPLETED")
 *    @arg @c kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteOperationMetadata_Stage_Executing
 *        Currently being executed by a worker. (Value: "EXECUTING")
 *    @arg @c kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteOperationMetadata_Stage_Queued
 *        Currently idle, awaiting a free machine to execute. (Value: "QUEUED")
 *    @arg @c kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteOperationMetadata_Stage_Unknown
 *        Value "UNKNOWN"
 */
@property(nonatomic, copy, nullable) NSString *stage;

/**
 *  If set, the client can use this name with
 *  ByteStream.Read to stream the
 *  standard error.
 */
@property(nonatomic, copy, nullable) NSString *stderrStreamName;

/**
 *  If set, the client can use this name with
 *  ByteStream.Read to stream the
 *  standard output.
 */
@property(nonatomic, copy, nullable) NSString *stdoutStreamName;

@end


/**
 *  A request message for
 *  Execution.Execute.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteRequest : GTLRObject

/**
 *  The digest of the Action to
 *  execute.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *actionDigest;

/**
 *  An optional policy for execution of the action.
 *  The server will have a default policy if this is not provided.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutionPolicy *executionPolicy;

/**
 *  An optional policy for the results of this execution in the remote cache.
 *  The server will have a default policy if this is not provided.
 *  This may be applied to both the ActionResult and the associated blobs.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ResultsCachePolicy *resultsCachePolicy;

/**
 *  If true, the action will be executed anew even if its result was already
 *  present in the cache. If false, the result may be served from the
 *  ActionCache.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipCacheLookup;

@end


/**
 *  The response message for
 *  Execution.Execute,
 *  which will be contained in the response
 *  field of the
 *  Operation.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteResponse : GTLRObject

/**
 *  True if the result was served from cache, false if it was executed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cachedResult;

/**
 *  Freeform informational message with details on the execution of the action
 *  that may be displayed to the user upon failure or when requested explicitly.
 */
@property(nonatomic, copy, nullable) NSString *message;

/** The result of the action. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ActionResult *result;

/**
 *  An optional list of additional log outputs the server wishes to provide. A
 *  server can use this to return execution-specific logs however it wishes.
 *  This is intended primarily to make it easier for users to debug issues that
 *  may be outside of the actual job execution, such as by identifying the
 *  worker executing the action or by providing logs from the worker's setup
 *  phase. The keys SHOULD be human readable so that a client can display them
 *  to a user.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteResponse_ServerLogs *serverLogs;

/**
 *  If the status has a code other than `OK`, it indicates that the action did
 *  not finish execution. For example, if the operation times out during
 *  execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST
 *  use this field for errors in execution, rather than the error field on the
 *  `Operation` object.
 *  If the status code is other than `OK`, then the result MUST NOT be cached.
 *  For an error status, the `result` field is optional; the server may
 *  populate the output-, stdout-, and stderr-related fields if it has any
 *  information available, such as the stdout and stderr of a timed-out action.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleRpcStatus *status;

@end


/**
 *  An optional list of additional log outputs the server wishes to provide. A
 *  server can use this to return execution-specific logs however it wishes.
 *  This is intended primarily to make it easier for users to debug issues that
 *  may be outside of the actual job execution, such as by identifying the
 *  worker executing the action or by providing logs from the worker's setup
 *  phase. The keys SHOULD be human readable so that a client can display them
 *  to a user.
 *
 *  @note This class is documented as having more properties of
 *        GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2LogFile. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteResponse_ServerLogs : GTLRObject
@end


/**
 *  Capabilities of the remote execution system.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutionCapabilities : GTLRObject

/**
 *  Remote execution may only support a single digest function.
 *
 *  Likely values:
 *    @arg @c kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutionCapabilities_DigestFunction_Md5
 *        The MD5 digest function. (Value: "MD5")
 *    @arg @c kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutionCapabilities_DigestFunction_Sha1
 *        The Sha-1 digest function. (Value: "SHA1")
 *    @arg @c kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutionCapabilities_DigestFunction_Sha256
 *        The Sha-256 digest function. (Value: "SHA256")
 *    @arg @c kGTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutionCapabilities_DigestFunction_Unknown
 *        It is an error for the server to return this value. (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *digestFunction;

/**
 *  Whether remote execution is enabled for the particular server/instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *execEnabled;

/** Supported execution priority range. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2PriorityCapabilities *executionPriorityCapabilities;

@end


/**
 *  An `ExecutionPolicy` can be used to control the scheduling of the action.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutionPolicy : GTLRObject

/**
 *  The priority (relative importance) of this action. Generally, a lower value
 *  means that the action should be run sooner than actions having a greater
 *  priority value, but the interpretation of a given value is server-
 *  dependent. A priority of 0 means the *default* priority. Priorities may be
 *  positive or negative, and such actions should run later or sooner than
 *  actions having the default priority, respectively. The particular semantics
 *  of this field is up to the server. In particular, every server will have
 *  their own supported range of priorities, and will decide how these map into
 *  scheduling policy.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *priority;

@end


/**
 *  A `FileNode` represents a single file and associated metadata.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2FileNode : GTLRObject

/** The digest of the file's content. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *digest;

/**
 *  True if file is executable, false otherwise.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isExecutable;

/** The name of the file. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A request message for
 *  ContentAddressableStorage.FindMissingBlobs.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2FindMissingBlobsRequest : GTLRObject

/** A list of the blobs to check. */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *> *blobDigests;

@end


/**
 *  A response message for
 *  ContentAddressableStorage.FindMissingBlobs.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2FindMissingBlobsResponse : GTLRObject

/** A list of the blobs requested *not* present in the storage. */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *> *missingBlobDigests;

@end


/**
 *  A response message for
 *  ContentAddressableStorage.GetTree.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "directories" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2GetTreeResponse : GTLRCollectionObject

/**
 *  The directories descended from the requested root.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Directory *> *directories;

/**
 *  If present, signifies that there are more results which the client can
 *  retrieve by passing this as the page_token in a subsequent
 *  request.
 *  If empty, signifies that this is the last page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  A `LogFile` is a log stored in the CAS.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2LogFile : GTLRObject

/** The digest of the log contents. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *digest;

/**
 *  This is a hint as to the purpose of the log, and is set to true if the log
 *  is human-readable text that can be usefully displayed to a user, and false
 *  otherwise. For instance, if a command-line client wishes to print the
 *  server logs to the terminal for a failed action, this allows it to avoid
 *  displaying a binary file.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *humanReadable;

@end


/**
 *  An `OutputDirectory` is the output in an `ActionResult` corresponding to a
 *  directory's full contents rather than a single file.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2OutputDirectory : GTLRObject

/**
 *  The full path of the directory relative to the working directory. The path
 *  separator is a forward slash `/`. Since this is a relative path, it MUST
 *  NOT begin with a leading forward slash. The empty string value is allowed,
 *  and it denotes the entire working directory.
 */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  The digest of the encoded
 *  Tree proto containing the
 *  directory's contents.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *treeDigest;

@end


/**
 *  An `OutputFile` is similar to a
 *  FileNode, but it is used as an
 *  output in an `ActionResult`. It allows a full file path rather than
 *  only a name.
 *  `OutputFile` is binary-compatible with `FileNode`.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2OutputFile : GTLRObject

/** The digest of the file's content. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Digest *digest;

/**
 *  True if file is executable, false otherwise.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isExecutable;

/**
 *  The full path of the file relative to the working directory, including the
 *  filename. The path separator is a forward slash `/`. Since this is a
 *  relative path, it MUST NOT begin with a leading forward slash.
 */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  An `OutputSymlink` is similar to a
 *  Symlink, but it is used as an
 *  output in an `ActionResult`.
 *  `OutputSymlink` is binary-compatible with `SymlinkNode`.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2OutputSymlink : GTLRObject

/**
 *  The full path of the symlink relative to the working directory, including
 *  the
 *  filename. The path separator is a forward slash `/`. Since this is a
 *  relative path, it MUST NOT begin with a leading forward slash.
 */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  The target path of the symlink. The path separator is a forward slash `/`.
 *  The target path can be relative to the parent directory of the symlink or
 *  it can be an absolute path starting with `/`. Support for absolute paths
 *  can be checked using the Capabilities
 *  API. The canonical form forbids the substrings `/./` and `//` in the target
 *  path. `..` components are allowed anywhere in the target path.
 */
@property(nonatomic, copy, nullable) NSString *target;

@end


/**
 *  A `Platform` is a set of requirements, such as hardware, operating system,
 *  or
 *  compiler toolchain, for an
 *  Action's execution
 *  environment. A `Platform` is represented as a series of key-value pairs
 *  representing the properties that are required of the platform.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Platform : GTLRObject

/**
 *  The properties that make up this platform. In order to ensure that
 *  equivalent `Platform`s always hash to the same value, the properties MUST
 *  be lexicographically sorted by name, and then by value. Sorting of strings
 *  is done by code point, equivalently, by the UTF-8 bytes.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2PlatformProperty *> *properties;

@end


/**
 *  A single property for the environment. The server is responsible for
 *  specifying the property `name`s that it accepts. If an unknown `name` is
 *  provided in the requirements for an
 *  Action, the server SHOULD
 *  reject the execution request. If permitted by the server, the same `name`
 *  may occur multiple times.
 *  The server is also responsible for specifying the interpretation of
 *  property `value`s. For instance, a property describing how much RAM must be
 *  available may be interpreted as allowing a worker with 16GB to fulfill a
 *  request for 8GB, while a property describing the OS environment on which
 *  the action must be performed may require an exact match with the worker's
 *  OS.
 *  The server MAY use the `value` of one or more properties to determine how
 *  it sets up the execution environment, such as by making specific system
 *  files available to the worker.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2PlatformProperty : GTLRObject

/** The property name. */
@property(nonatomic, copy, nullable) NSString *name;

/** The property value. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Allowed values for priority in
 *  ResultsCachePolicy
 *  Used for querying both cache and execution valid priority ranges.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2PriorityCapabilities : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2PriorityCapabilitiesPriorityRange *> *priorities;

@end


/**
 *  Supported range of priorities, including boundaries.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2PriorityCapabilitiesPriorityRange : GTLRObject

/**
 *  maxPriority
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxPriority;

/**
 *  minPriority
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minPriority;

@end


/**
 *  An optional Metadata to attach to any RPC request to tell the server about
 *  an
 *  external context of the request. The server may use this for logging or
 *  other
 *  purposes. To use it, the client attaches the header to the call using the
 *  canonical proto serialization:
 *  * name: `build.bazel.remote.execution.v2.requestmetadata-bin`
 *  * contents: the base64 encoded binary `RequestMetadata` message.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2RequestMetadata : GTLRObject

/**
 *  An identifier that ties multiple requests to the same action.
 *  For example, multiple requests to the CAS, Action Cache, and Execution
 *  API are used in order to compile foo.cc.
 */
@property(nonatomic, copy, nullable) NSString *actionId;

/**
 *  An identifier to tie multiple tool invocations together. For example,
 *  runs of foo_test, bar_test and baz_test on a post-submit of a given patch.
 */
@property(nonatomic, copy, nullable) NSString *correlatedInvocationsId;

/** The details for the tool invoking the requests. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ToolDetails *toolDetails;

/**
 *  An identifier that ties multiple actions together to a final result.
 *  For example, multiple actions are required to build and run foo_test.
 */
@property(nonatomic, copy, nullable) NSString *toolInvocationId;

@end


/**
 *  A `ResultsCachePolicy` is used for fine-grained control over how action
 *  outputs are stored in the CAS and Action Cache.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ResultsCachePolicy : GTLRObject

/**
 *  The priority (relative importance) of this content in the overall cache.
 *  Generally, a lower value means a longer retention time or other advantage,
 *  but the interpretation of a given value is server-dependent. A priority of
 *  0 means a *default* value, decided by the server.
 *  The particular semantics of this field is up to the server. In particular,
 *  every server will have their own supported range of priorities, and will
 *  decide how these map into retention/eviction policy.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *priority;

@end


/**
 *  A response message for
 *  Capabilities.GetCapabilities.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ServerCapabilities : GTLRObject

/** Capabilities of the remote cache system. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2CacheCapabilities *cacheCapabilities;

/** Earliest RE API version supported, including deprecated versions. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelSemverSemVer *deprecatedApiVersion;

/** Capabilities of the remote execution system. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecutionCapabilities *executionCapabilities;

/** Latest RE API version supported. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelSemverSemVer *highApiVersion;

/** Earliest non-deprecated RE API version supported. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelSemverSemVer *lowApiVersion;

@end


/**
 *  A `SymlinkNode` represents a symbolic link.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2SymlinkNode : GTLRObject

/** The name of the symlink. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The target path of the symlink. The path separator is a forward slash `/`.
 *  The target path can be relative to the parent directory of the symlink or
 *  it can be an absolute path starting with `/`. Support for absolute paths
 *  can be checked using the Capabilities
 *  API. The canonical form forbids the substrings `/./` and `//` in the target
 *  path. `..` components are allowed anywhere in the target path.
 */
@property(nonatomic, copy, nullable) NSString *target;

@end


/**
 *  Details for the tool used to call the API.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ToolDetails : GTLRObject

/** Name of the tool, e.g. bazel. */
@property(nonatomic, copy, nullable) NSString *toolName;

/** Version of the tool used for the request, e.g. 5.0.3. */
@property(nonatomic, copy, nullable) NSString *toolVersion;

@end


/**
 *  A `Tree` contains all the
 *  Directory protos in a
 *  single directory Merkle tree, compressed into one message.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Tree : GTLRObject

/**
 *  All the child directories: the directories referred to by the root and,
 *  recursively, all its children. In order to reconstruct the directory tree,
 *  the client must take the digests of each of the child directories and then
 *  build up a tree starting from the `root`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Directory *> *children;

/** The root directory in the tree. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2Directory *root;

@end


/**
 *  A request message for
 *  WaitExecution.
 */
@interface GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2WaitExecutionRequest : GTLRObject
@end


/**
 *  The full version of a given tool.
 */
@interface GTLRRemoteBuildExecution_BuildBazelSemverSemVer : GTLRObject

/**
 *  The major version, e.g 10 for 10.2.3.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *major;

/**
 *  The minor version, e.g. 2 for 10.2.3.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minor;

/**
 *  The patch version, e.g 3 for 10.2.3.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *patch;

/**
 *  The pre-release version. Either this field or major/minor/patch fields
 *  must be filled. They are mutually exclusive. Pre-release versions are
 *  assumed to be earlier than any released versions.
 */
@property(nonatomic, copy, nullable) NSString *prerelease;

@end


/**
 *  CommandDuration contains the various duration metrics tracked when a bot
 *  performs a command.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildbotCommandDurations : GTLRObject

/**
 *  The time spent preparing the command to be run in a Docker container
 *  (includes pulling the Docker image, if necessary).
 */
@property(nonatomic, strong, nullable) GTLRDuration *dockerPrep;

/**
 *  The time spent downloading the input files and constructing the working
 *  directory.
 */
@property(nonatomic, strong, nullable) GTLRDuration *download;

/** The time spent executing the command (i.e., doing useful work). */
@property(nonatomic, strong, nullable) GTLRDuration *execution;

/**
 *  The timestamp when preparation is done and bot starts downloading files.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *isoPrepDone;

/** The time spent completing the command, in total. */
@property(nonatomic, strong, nullable) GTLRDuration *overall;

/** The time spent uploading the stdout logs. */
@property(nonatomic, strong, nullable) GTLRDuration *stdout;

/** The time spent uploading the output files. */
@property(nonatomic, strong, nullable) GTLRDuration *upload;

@end


/**
 *  CommandEvents contains counters for the number of warnings and errors
 *  that occurred during the execution of a command.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildbotCommandEvents : GTLRObject

/**
 *  Indicates whether we are using a cached Docker image (true) or had to pull
 *  the Docker image (false) for this command.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dockerCacheHit;

/**
 *  The number of errors reported.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numErrors;

/**
 *  The number of warnings reported.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numWarnings;

@end


/**
 *  The request used for `CreateInstance`.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaCreateInstanceRequest : GTLRObject

/**
 *  Specifies the instance to create.
 *  The name in the instance, if specified in the instance, is ignored.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance *instance;

/**
 *  ID of the created instance.
 *  A valid `instance_id` must:
 *  be 6-50 characters long,
 *  contains only lowercase letters, digits, hyphens and underscores,
 *  start with a lowercase letter, and
 *  end with a lowercase letter or a digit.
 */
@property(nonatomic, copy, nullable) NSString *instanceId;

/**
 *  Resource name of the project containing the instance.
 *  Format: `projects/[PROJECT_ID]`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

@end


/**
 *  The request used for `CreateWorkerPool`.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaCreateWorkerPoolRequest : GTLRObject

/**
 *  Resource name of the instance in which to create the new worker pool.
 *  Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  ID of the created worker pool.
 *  A valid pool ID must:
 *  be 6-50 characters long,
 *  contain only lowercase letters, digits, hyphens and underscores,
 *  start with a lowercase letter, and
 *  end with a lowercase letter or a digit.
 */
@property(nonatomic, copy, nullable) NSString *poolId;

/**
 *  Specifies the worker pool to create.
 *  The name in the worker pool, if specified, is ignored.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool *workerPool;

@end


/**
 *  The request used for `DeleteInstance`.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaDeleteInstanceRequest : GTLRObject

/**
 *  Name of the instance to delete.
 *  Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  The request used for DeleteWorkerPool.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaDeleteWorkerPoolRequest : GTLRObject

/**
 *  Name of the worker pool to delete.
 *  Format:
 *  `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  The request used for `GetInstance`.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaGetInstanceRequest : GTLRObject

/**
 *  Name of the instance to retrieve.
 *  Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  The request used for GetWorkerPool.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaGetWorkerPoolRequest : GTLRObject

/**
 *  Name of the worker pool to retrieve.
 *  Format:
 *  `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Instance conceptually encapsulates all Remote Build Execution resources
 *  for remote builds.
 *  An instance consists of storage and compute resources (for example,
 *  `ContentAddressableStorage`, `ActionCache`, `WorkerPools`) used for
 *  running remote builds.
 *  All Remote Build Execution API calls are scoped to an instance.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance : GTLRObject

/**
 *  The location is a GCP region. Currently only `us-central1` is supported.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Output only. Whether stack driver logging is enabled for the instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *loggingEnabled;

/**
 *  Output only. Instance resource name formatted as:
 *  `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`.
 *  Name should not be populated when creating an instance since it is provided
 *  in the `instance_id` field.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. State of the instance.
 *
 *  Likely values:
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance_State_Creating
 *        The instance is in state `CREATING` once `CreateInstance` is called
 *        and
 *        before the instance is ready for use. (Value: "CREATING")
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance_State_Inactive
 *        An `INACTIVE` instance indicates that there is a problem that needs to
 *        be
 *        fixed. Such instances cannot be used for execution and instances that
 *        remain in this state for a significant period of time will be removed
 *        permanently. (Value: "INACTIVE")
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance_State_Running
 *        The instance is in state `RUNNING` when it is ready for use. (Value:
 *        "RUNNING")
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance_State_StateUnspecified
 *        Not a valid state, but the default value of the enum. (Value:
 *        "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaListInstancesRequest
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaListInstancesRequest : GTLRObject

/**
 *  Resource name of the project.
 *  Format: `projects/[PROJECT_ID]`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

@end


/**
 *  GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaListInstancesResponse
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaListInstancesResponse : GTLRObject

/** The list of instances in a given project. */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance *> *instances;

@end


/**
 *  GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest : GTLRObject

/**
 *  Resource name of the instance.
 *  Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

@end


/**
 *  GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsResponse
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsResponse : GTLRObject

/** The list of worker pools in a given instance. */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool *> *workerPools;

@end


/**
 *  The request used for UpdateWorkerPool.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaUpdateWorkerPoolRequest : GTLRObject

/**
 *  The update mask applies to worker_pool. For the `FieldMask` definition,
 *  see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *  If an empty update_mask is provided, only the non-default valued field in
 *  the worker pool field will be updated. Note that in order to update a field
 *  to the default value (zero, false, empty string) an explicit update_mask
 *  must be provided.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/** Specifies the worker pool to update. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool *workerPool;

@end


/**
 *  Defines the configuration to be used for a creating workers in
 *  the worker pool.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig : GTLRObject

/**
 *  Required. Size of the disk attached to the worker, in GB.
 *  See https://cloud.google.com/compute/docs/disks/
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *diskSizeGb;

/**
 *  Required. Disk Type to use for the worker.
 *  See [Storage
 *  options](https://cloud.google.com/compute/docs/disks/#introduction).
 *  Currently only `pd-standard` is supported.
 */
@property(nonatomic, copy, nullable) NSString *diskType;

/**
 *  Required. Machine type of the worker, such as n1-standard-2.
 *  See https://cloud.google.com/compute/docs/machine-types for a list of
 *  supported machine types.
 */
@property(nonatomic, copy, nullable) NSString *machineType;

/**
 *  Minimum CPU platform to use when creating the worker.
 *  See [CPU Platforms](https://cloud.google.com/compute/docs/cpu-platforms).
 */
@property(nonatomic, copy, nullable) NSString *minCpuPlatform;

/**
 *  Determines whether the worker is reserved (and therefore won't be
 *  preempted).
 *  See [Preemptible VMs](https://cloud.google.com/preemptible-vms/) for more
 *  details.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reserved;

@end


/**
 *  A worker pool resource in the Remote Build Execution API.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool : GTLRObject

/**
 *  WorkerPool resource name formatted as:
 *  `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`.
 *  name should not be populated when creating a worker pool since it is
 *  provided in the `poolId` field.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. State of the worker pool.
 *
 *  Likely values:
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool_State_Creating
 *        The worker pool is in state `CREATING` once `CreateWorkerPool` is
 *        called
 *        and before all requested workers are ready. (Value: "CREATING")
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool_State_Deleting
 *        The worker pool is in state `DELETING` once the `Delete` method is
 *        called
 *        and before the deletion completes. (Value: "DELETING")
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool_State_Inactive
 *        The worker pool is in state `INACTIVE` when the instance hosting the
 *        worker pool in not running. (Value: "INACTIVE")
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool_State_Running
 *        The worker pool is in state `RUNNING` when all its workers are ready
 *        for
 *        use. (Value: "RUNNING")
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool_State_StateUnspecified
 *        Not a valid state, but the default value of the enum. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool_State_Updating
 *        The worker pool is in state `UPDATING` once `UpdateWorkerPool` is
 *        called
 *        and before the new configuration has all the requested workers ready
 *        for
 *        use, and no older configuration has any workers. At that point the
 *        state
 *        transitions to `RUNNING`. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Specifies the properties, such as machine type and disk size, used for
 *  creating workers in a worker pool.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig *workerConfig;

/**
 *  The desired number of workers in the worker pool. Must be a value between
 *  0 and 1000.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *workerCount;

@end


/**
 *  An ActionResult represents the result of an
 *  Action being run.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testActionResult : GTLRObject

/**
 *  The exit code of the command.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exitCode;

/**
 *  The output directories of the action. For each output directory requested
 *  in the `output_directories` field of the Action, if the corresponding
 *  directory existed after the action completed, a single entry will be
 *  present in the output list, which will contain the digest of
 *  a Tree message containing
 *  the directory tree, and the path equal exactly to the corresponding Action
 *  output_directories member.
 *  As an example, suppose the Action had an output directory `a/b/dir` and the
 *  execution produced the following contents in `a/b/dir`: a file named `bar`
 *  and a directory named `foo` with an executable file named `baz`. Then,
 *  output_directory will contain (hashes shortened for readability):
 *  ```json
 *  // OutputDirectory proto:
 *  {
 *  path: "a/b/dir"
 *  tree_digest: {
 *  hash: "4a73bc9d03...",
 *  size: 55
 *  }
 *  }
 *  // Tree proto with hash "4a73bc9d03..." and size 55:
 *  {
 *  root: {
 *  files: [
 *  {
 *  name: "bar",
 *  digest: {
 *  hash: "4a73bc9d03...",
 *  size: 65534
 *  }
 *  }
 *  ],
 *  directories: [
 *  {
 *  name: "foo",
 *  digest: {
 *  hash: "4cf2eda940...",
 *  size: 43
 *  }
 *  }
 *  ]
 *  }
 *  children : {
 *  // (Directory proto with hash "4cf2eda940..." and size 43)
 *  files: [
 *  {
 *  name: "baz",
 *  digest: {
 *  hash: "b2c941073e...",
 *  size: 1294,
 *  },
 *  is_executable: true
 *  }
 *  ]
 *  }
 *  }
 *  ```
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testOutputDirectory *> *outputDirectories;

/**
 *  The output files of the action. For each output file requested in the
 *  `output_files` field of the Action, if the corresponding file existed after
 *  the action completed, a single entry will be present in the output list.
 *  If the action does not produce the requested output, or produces a
 *  directory where a regular file is expected or vice versa, then that output
 *  will be omitted from the list. The server is free to arrange the output
 *  list as desired; clients MUST NOT assume that the output list is sorted.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testOutputFile *> *outputFiles;

/**
 *  The digest for a blob containing the standard error of the action, which
 *  can be retrieved from the
 *  ContentAddressableStorage.
 *  See `stderr_raw` for when this will be set.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDigest *stderrDigest;

/**
 *  The standard error buffer of the action. The server will determine, based
 *  on the size of the buffer, whether to return it in raw form or to return
 *  a digest in `stderr_digest` that points to the buffer. If neither is set,
 *  then the buffer is empty. The client SHOULD NOT assume it will get one of
 *  the raw buffer or a digest on any given request and should be prepared to
 *  handle either.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *stderrRaw;

/**
 *  The digest for a blob containing the standard output of the action, which
 *  can be retrieved from the
 *  ContentAddressableStorage.
 *  See `stdout_raw` for when this will be set.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDigest *stdoutDigest;

/**
 *  The standard output buffer of the action. The server will determine, based
 *  on the size of the buffer, whether to return it in raw form or to return
 *  a digest in `stdout_digest` that points to the buffer. If neither is set,
 *  then the buffer is empty. The client SHOULD NOT assume it will get one of
 *  the raw buffer or a digest on any given request and should be prepared to
 *  handle either.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *stdoutRaw;

@end


/**
 *  A `Command` is the actual command executed by a worker running an
 *  Action.
 *  Except as otherwise required, the environment (such as which system
 *  libraries or binaries are available, and what filesystems are mounted where)
 *  is defined by and specific to the implementation of the remote execution
 *  API.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testCommand : GTLRObject

/**
 *  The arguments to the command. The first argument must be the path to the
 *  executable, which must be either a relative path, in which case it is
 *  evaluated with respect to the input root, or an absolute path.
 *  The working directory will always be the input root.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *arguments;

/**
 *  The environment variables to set when running the program. The worker may
 *  provide its own default environment variables; these defaults can be
 *  overridden using this field. Additional variables can also be specified.
 *  In order to ensure that equivalent `Command`s always hash to the same
 *  value, the environment variables MUST be lexicographically sorted by name.
 *  Sorting of strings is done by code point, equivalently, by the UTF-8 bytes.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testCommandEnvironmentVariable *> *environmentVariables;

@end


/**
 *  An `EnvironmentVariable` is one variable to set in the running program's
 *  environment.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testCommandEnvironmentVariable : GTLRObject

/** The variable name. */
@property(nonatomic, copy, nullable) NSString *name;

/** The variable value. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A content digest. A digest for a given blob consists of the size of the blob
 *  and its hash. The hash algorithm to use is defined by the server, but
 *  servers
 *  SHOULD use SHA-256.
 *  The size is considered to be an integral part of the digest and cannot be
 *  separated. That is, even if the `hash` field is correctly specified but
 *  `size_bytes` is not, the server MUST reject the request.
 *  The reason for including the size in the digest is as follows: in a great
 *  many cases, the server needs to know the size of the blob it is about to
 *  work
 *  with prior to starting an operation with it, such as flattening Merkle tree
 *  structures or streaming it to a worker. Technically, the server could
 *  implement a separate metadata store, but this results in a significantly
 *  more
 *  complicated implementation as opposed to having the client specify the size
 *  up-front (or storing the size along with the digest in every message where
 *  digests are embedded). This does mean that the API leaks some implementation
 *  details of (what we consider to be) a reasonable server implementation, but
 *  we consider this to be a worthwhile tradeoff.
 *  When a `Digest` is used to refer to a proto message, it always refers to the
 *  message in binary encoded form. To ensure consistent hashing, clients and
 *  servers MUST ensure that they serialize messages according to the following
 *  rules, even if there are alternate valid encodings for the same message.
 *  - Fields are serialized in tag order.
 *  - There are no unknown fields.
 *  - There are no duplicate fields.
 *  - Fields are serialized according to the default semantics for their type.
 *  Most protocol buffer implementations will always follow these rules when
 *  serializing, but care should be taken to avoid shortcuts. For instance,
 *  concatenating two messages to merge them may produce duplicate fields.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDigest : GTLRObject

/**
 *  The hash. In the case of SHA-256, it will always be a lowercase hex string
 *  exactly 64 characters long.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty;

/**
 *  The size of the blob, in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sizeBytes;

@end


/**
 *  A `Directory` represents a directory node in a file tree, containing zero or
 *  more children FileNodes
 *  and DirectoryNodes.
 *  Each `Node` contains its name in the directory, the digest of its content
 *  (either a file blob or a `Directory` proto), as well as possibly some
 *  metadata about the file or directory.
 *  In order to ensure that two equivalent directory trees hash to the same
 *  value, the following restrictions MUST be obeyed when constructing a
 *  a `Directory`:
 *  - Every child in the directory must have a path of exactly one segment.
 *  Multiple levels of directory hierarchy may not be collapsed.
 *  - Each child in the directory must have a unique path segment (file name).
 *  - The files and directories in the directory must each be sorted in
 *  lexicographical order by path. The path strings must be sorted by code
 *  point, equivalently, by UTF-8 bytes.
 *  A `Directory` that obeys the restrictions is said to be in canonical form.
 *  As an example, the following could be used for a file named `bar` and a
 *  directory named `foo` with an executable file named `baz` (hashes shortened
 *  for readability):
 *  ```json
 *  // (Directory proto)
 *  {
 *  files: [
 *  {
 *  name: "bar",
 *  digest: {
 *  hash: "4a73bc9d03...",
 *  size: 65534
 *  }
 *  }
 *  ],
 *  directories: [
 *  {
 *  name: "foo",
 *  digest: {
 *  hash: "4cf2eda940...",
 *  size: 43
 *  }
 *  }
 *  ]
 *  }
 *  // (Directory proto with hash "4cf2eda940..." and size 43)
 *  {
 *  files: [
 *  {
 *  name: "baz",
 *  digest: {
 *  hash: "b2c941073e...",
 *  size: 1294,
 *  },
 *  is_executable: true
 *  }
 *  ]
 *  }
 *  ```
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDirectory : GTLRObject

/** The subdirectories in the directory. */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDirectoryNode *> *directories;

/** The files in the directory. */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testFileNode *> *files;

@end


/**
 *  A `DirectoryNode` represents a child of a
 *  Directory which is itself
 *  a `Directory` and its associated metadata.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDirectoryNode : GTLRObject

/**
 *  The digest of the
 *  Directory object
 *  represented. See Digest
 *  for information about how to take the digest of a proto message.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDigest *digest;

/** The name of the directory. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Metadata about an ongoing
 *  execution, which
 *  will be contained in the metadata
 *  field of the
 *  Operation.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testExecuteOperationMetadata : GTLRObject

/**
 *  The digest of the Action
 *  being executed.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDigest *actionDigest;

/**
 *  stage
 *
 *  Likely values:
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testExecuteOperationMetadata_Stage_CacheCheck
 *        Checking the result against the cache. (Value: "CACHE_CHECK")
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testExecuteOperationMetadata_Stage_Completed
 *        Finished execution. (Value: "COMPLETED")
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testExecuteOperationMetadata_Stage_Executing
 *        Currently being executed by a worker. (Value: "EXECUTING")
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testExecuteOperationMetadata_Stage_Queued
 *        Currently idle, awaiting a free machine to execute. (Value: "QUEUED")
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testExecuteOperationMetadata_Stage_Unknown
 *        Value "UNKNOWN"
 */
@property(nonatomic, copy, nullable) NSString *stage;

/**
 *  If set, the client can use this name with
 *  ByteStream.Read to stream the
 *  standard error.
 */
@property(nonatomic, copy, nullable) NSString *stderrStreamName;

/**
 *  If set, the client can use this name with
 *  ByteStream.Read to stream the
 *  standard output.
 */
@property(nonatomic, copy, nullable) NSString *stdoutStreamName;

@end


/**
 *  The response message for
 *  Execution.Execute,
 *  which will be contained in the response
 *  field of the
 *  Operation.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testExecuteResponse : GTLRObject

/**
 *  True if the result was served from cache, false if it was executed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cachedResult;

/** The result of the action. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testActionResult *result;

/**
 *  An optional list of additional log outputs the server wishes to provide. A
 *  server can use this to return execution-specific logs however it wishes.
 *  This is intended primarily to make it easier for users to debug issues that
 *  may be outside of the actual job execution, such as by identifying the
 *  worker executing the action or by providing logs from the worker's setup
 *  phase. The keys SHOULD be human readable so that a client can display them
 *  to a user.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testExecuteResponse_ServerLogs *serverLogs;

/**
 *  If the status has a code other than `OK`, it indicates that the action did
 *  not finish execution. For example, if the operation times out during
 *  execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST
 *  use this field for errors in execution, rather than the error field on the
 *  `Operation` object.
 *  If the status code is other than `OK`, then the result MUST NOT be cached.
 *  For an error status, the `result` field is optional; the server may
 *  populate the output-, stdout-, and stderr-related fields if it has any
 *  information available, such as the stdout and stderr of a timed-out action.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleRpcStatus *status;

@end


/**
 *  An optional list of additional log outputs the server wishes to provide. A
 *  server can use this to return execution-specific logs however it wishes.
 *  This is intended primarily to make it easier for users to debug issues that
 *  may be outside of the actual job execution, such as by identifying the
 *  worker executing the action or by providing logs from the worker's setup
 *  phase. The keys SHOULD be human readable so that a client can display them
 *  to a user.
 *
 *  @note This class is documented as having more properties of
 *        GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testLogFile.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testExecuteResponse_ServerLogs : GTLRObject
@end


/**
 *  A `FileNode` represents a single file and associated metadata.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testFileNode : GTLRObject

/** The digest of the file's content. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDigest *digest;

/**
 *  True if file is executable, false otherwise.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isExecutable;

/** The name of the file. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A `LogFile` is a log stored in the CAS.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testLogFile : GTLRObject

/** The digest of the log contents. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDigest *digest;

/**
 *  This is a hint as to the purpose of the log, and is set to true if the log
 *  is human-readable text that can be usefully displayed to a user, and false
 *  otherwise. For instance, if a command-line client wishes to print the
 *  server logs to the terminal for a failed action, this allows it to avoid
 *  displaying a binary file.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *humanReadable;

@end


/**
 *  An `OutputDirectory` is the output in an `ActionResult` corresponding to a
 *  directory's full contents rather than a single file.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testOutputDirectory : GTLRObject

/** DEPRECATED: This field is deprecated and should no longer be used. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDigest *digest;

/**
 *  The full path of the directory relative to the working directory. The path
 *  separator is a forward slash `/`. Since this is a relative path, it MUST
 *  NOT begin with a leading forward slash. The empty string value is allowed,
 *  and it denotes the entire working directory.
 */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  The digest of the encoded
 *  Tree proto containing the
 *  directory's contents.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDigest *treeDigest;

@end


/**
 *  An `OutputFile` is similar to a
 *  FileNode, but it is
 *  tailored for output as part of an `ActionResult`. It allows a full file path
 *  rather than only a name, and allows the server to include content inline.
 *  `OutputFile` is binary-compatible with `FileNode`.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testOutputFile : GTLRObject

/**
 *  The raw content of the file.
 *  This field may be used by the server to provide the content of a file
 *  inline in an
 *  ActionResult and
 *  avoid requiring that the client make a separate call to
 *  [ContentAddressableStorage.GetBlob] to retrieve it.
 *  The client SHOULD NOT assume that it will get raw content with any request,
 *  and always be prepared to retrieve it via `digest`.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *content;

/** The digest of the file's content. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDigest *digest;

/**
 *  True if file is executable, false otherwise.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isExecutable;

/**
 *  The full path of the file relative to the input root, including the
 *  filename. The path separator is a forward slash `/`. Since this is a
 *  relative path, it MUST NOT begin with a leading forward slash.
 */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  An optional Metadata to attach to any RPC request to tell the server about
 *  an
 *  external context of the request. The server may use this for logging or
 *  other
 *  purposes. To use it, the client attaches the header to the call using the
 *  canonical proto serialization:
 *  name: google.devtools.remoteexecution.v1test.requestmetadata-bin
 *  contents: the base64 encoded binary RequestMetadata message.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testRequestMetadata : GTLRObject

/**
 *  An identifier that ties multiple requests to the same action.
 *  For example, multiple requests to the CAS, Action Cache, and Execution
 *  API are used in order to compile foo.cc.
 */
@property(nonatomic, copy, nullable) NSString *actionId;

/**
 *  An identifier to tie multiple tool invocations together. For example,
 *  runs of foo_test, bar_test and baz_test on a post-submit of a given patch.
 */
@property(nonatomic, copy, nullable) NSString *correlatedInvocationsId;

/** The details for the tool invoking the requests. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testToolDetails *toolDetails;

/**
 *  An identifier that ties multiple actions together to a final result.
 *  For example, multiple actions are required to build and run foo_test.
 */
@property(nonatomic, copy, nullable) NSString *toolInvocationId;

@end


/**
 *  Details for the tool used to call the API.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testToolDetails : GTLRObject

/** Name of the tool, e.g. bazel. */
@property(nonatomic, copy, nullable) NSString *toolName;

/** Version of the tool used for the request, e.g. 5.0.3. */
@property(nonatomic, copy, nullable) NSString *toolVersion;

@end


/**
 *  A `Tree` contains all the
 *  Directory protos in a
 *  single directory Merkle tree, compressed into one message.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testTree : GTLRObject

/**
 *  All the child directories: the directories referred to by the root and,
 *  recursively, all its children. In order to reconstruct the directory tree,
 *  the client must take the digests of each of the child directories and then
 *  build up a tree starting from the `root`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDirectory *> *children;

/** The root directory in the tree. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteexecutionV1testDirectory *root;

@end


/**
 *  AdminTemp is a prelimiary set of administration tasks. It's called "Temp"
 *  because we do not yet know the best way to represent admin tasks; it's
 *  possible that this will be entirely replaced in later versions of this API.
 *  If this message proves to be sufficient, it will be renamed in the alpha or
 *  beta release of this API.
 *  This message (suitably marshalled into a protobuf.Any) can be used as the
 *  inline_assignment field in a lease; the lease assignment field should simply
 *  be `"admin"` in these cases.
 *  This message is heavily based on Swarming administration tasks from the LUCI
 *  project (http://github.com/luci/luci-py/appengine/swarming).
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2AdminTemp : GTLRObject

/** The argument to the admin action; see `Command` for semantics. */
@property(nonatomic, copy, nullable) NSString *arg;

/**
 *  The admin action; see `Command` for legal values.
 *
 *  Likely values:
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2AdminTemp_Command_BotRestart
 *        Restart the bot without downloading a new version. `arg` will be a
 *        message to log. (Value: "BOT_RESTART")
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2AdminTemp_Command_BotTerminate
 *        Shut down the bot. `arg` will be a task resource name (similar to
 *        those
 *        in tasks.proto) that the bot can use to tell the server that it is
 *        terminating. (Value: "BOT_TERMINATE")
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2AdminTemp_Command_BotUpdate
 *        Download and run a new version of the bot. `arg` will be a resource
 *        accessible via `ByteStream.Read` to obtain the new bot code. (Value:
 *        "BOT_UPDATE")
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2AdminTemp_Command_HostRestart
 *        Restart the host computer. `arg` will be a message to log. (Value:
 *        "HOST_RESTART")
 *    @arg @c kGTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2AdminTemp_Command_Unspecified
 *        Illegal value. (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *command;

@end


/**
 *  Describes a blob of binary content with its digest.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2Blob : GTLRObject

/**
 *  The contents of the blob.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *contents;

/** The digest of the blob. This should be verified by the receiver. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2Digest *digest;

@end


/**
 *  DEPRECATED - use CommandResult instead.
 *  Describes the actual outputs from the task.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandOutputs : GTLRObject

/**
 *  exit_code is only fully reliable if the status' code is OK. If the task
 *  exceeded its deadline or was cancelled, the process may still produce an
 *  exit code as it is cancelled, and this will be populated, but a successful
 *  (zero) is unlikely to be correct unless the status code is OK.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exitCode;

/**
 *  The output files. The blob referenced by the digest should contain
 *  one of the following (implementation-dependent):
 *  * A marshalled DirectoryMetadata of the returned filesystem
 *  * A LUCI-style .isolated file
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2Digest *outputs;

@end


/**
 *  DEPRECATED - use CommandResult instead.
 *  Can be used as part of CompleteRequest.metadata, or are part of a more
 *  sophisticated message.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandOverhead : GTLRObject

/**
 *  The elapsed time between calling Accept and Complete. The server will also
 *  have its own idea of what this should be, but this excludes the overhead of
 *  the RPCs and the bot response time.
 */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/**
 *  The amount of time *not* spent executing the command (ie
 *  uploading/downloading files).
 */
@property(nonatomic, strong, nullable) GTLRDuration *overhead;

@end


/**
 *  All information about the execution of a command, suitable for providing as
 *  the Bots interface's `Lease.result` field.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandResult : GTLRObject

/**
 *  The elapsed time between calling Accept and Complete. The server will also
 *  have its own idea of what this should be, but this excludes the overhead of
 *  the RPCs and the bot response time.
 */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/**
 *  The exit code of the process. An exit code of "0" should only be trusted if
 *  `status` has a code of OK (otherwise it may simply be unset).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exitCode;

/**
 *  Implementation-dependent metadata about the task. Both servers and bots
 *  may define messages which can be encoded here; bots are free to provide
 *  metadata in multiple formats, and servers are free to choose one or more
 *  of the values to process and ignore others. In particular, it is *not*
 *  considered an error for the bot to provide the server with a field that it
 *  doesn't know about.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandResult_Metadata_Item *> *metadata;

/**
 *  The output files. The blob referenced by the digest should contain
 *  one of the following (implementation-dependent):
 *  * A marshalled DirectoryMetadata of the returned filesystem
 *  * A LUCI-style .isolated file
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2Digest *outputs;

/**
 *  The amount of time *not* spent executing the command (ie
 *  uploading/downloading files).
 */
@property(nonatomic, strong, nullable) GTLRDuration *overhead;

/**
 *  An overall status for the command. For example, if the command timed out,
 *  this might have a code of DEADLINE_EXCEEDED; if it was killed by the OS for
 *  memory exhaustion, it might have a code of RESOURCE_EXHAUSTED.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleRpcStatus *status;

@end


/**
 *  GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandResult_Metadata_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandResult_Metadata_Item : GTLRObject
@end


/**
 *  Describes a shell-style task to execute, suitable for providing as the Bots
 *  interface's `Lease.payload` field.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandTask : GTLRObject

/** The expected outputs from the task. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs *expectedOutputs;

/** The inputs to the task. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs *inputs;

/** The timeouts of this task. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts *timeouts;

@end


/**
 *  Describes the inputs to a shell-style task.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs : GTLRObject

/**
 *  The command itself to run (e.g., argv).
 *  This field should be passed directly to the underlying operating system,
 *  and so it must be sensible to that operating system. For example, on
 *  Windows, the first argument might be "C:\\Windows\\System32\\ping.exe" -
 *  that is, using drive letters and backslashes. A command for a *nix
 *  system, on the other hand, would use forward slashes.
 *  All other fields in the RWAPI must consistently use forward slashes,
 *  since those fields may be interpretted by both the service and the bot.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *arguments;

/** All environment variables required by the task. */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable *> *environmentVariables;

/**
 *  The input filesystem to be set up prior to the task beginning. The
 *  contents should be a repeated set of FileMetadata messages though other
 *  formats are allowed if better for the implementation (eg, a LUCI-style
 *  .isolated file).
 *  This field is repeated since implementations might want to cache the
 *  metadata, in which case it may be useful to break up portions of the
 *  filesystem that change frequently (eg, specific input files) from those
 *  that don't (eg, standard header files).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2Digest *> *files;

/**
 *  Inline contents for blobs expected to be needed by the bot to execute the
 *  task. For example, contents of entries in `files` or blobs that are
 *  indirectly referenced by an entry there.
 *  The bot should check against this list before downloading required task
 *  inputs to reduce the number of communications between itself and the
 *  remote CAS server.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2Blob *> *inlineBlobs;

@end


/**
 *  An environment variable required by this task.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable : GTLRObject

/** The envvar name. */
@property(nonatomic, copy, nullable) NSString *name;

/** The envvar value. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Describes the expected outputs of the command.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs : GTLRObject

/**
 *  A list of expected directories, relative to the execution root. All paths
 *  MUST be delimited by forward slashes.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *directories;

/**
 *  A list of expected files, relative to the execution root. All paths
 *  MUST be delimited by forward slashes.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *files;

/**
 *  The destination to which any stderr should be sent. The method by which
 *  the bot should send the stream contents to that destination is not
 *  defined in this API. As examples, the destination could be a file
 *  referenced in the `files` field in this message, or it could be a URI
 *  that must be written via the ByteStream API.
 */
@property(nonatomic, copy, nullable) NSString *stderrDestination;

/**
 *  The destination to which any stdout should be sent. The method by which
 *  the bot should send the stream contents to that destination is not
 *  defined in this API. As examples, the destination could be a file
 *  referenced in the `files` field in this message, or it could be a URI
 *  that must be written via the ByteStream API.
 */
@property(nonatomic, copy, nullable) NSString *stdoutDestination;

@end


/**
 *  Describes the timeouts associated with this task.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts : GTLRObject

/**
 *  This specifies the maximum time that the task can run, excluding the
 *  time required to download inputs or upload outputs. That is, the worker
 *  will terminate the task if it runs longer than this.
 */
@property(nonatomic, strong, nullable) GTLRDuration *execution;

/**
 *  This specifies the maximum amount of time the task can be idle - that is,
 *  go without generating some output in either stdout or stderr. If the
 *  process is silent for more than the specified time, the worker will
 *  terminate the task.
 */
@property(nonatomic, strong, nullable) GTLRDuration *idle;

/**
 *  If the execution or IO timeouts are exceeded, the worker will try to
 *  gracefully terminate the task and return any existing logs. However,
 *  tasks may be hard-frozen in which case this process will fail. This
 *  timeout specifies how long to wait for a terminated task to shut down
 *  gracefully (e.g. via SIGTERM) before we bring down the hammer (e.g.
 *  SIGKILL on *nix, CTRL_BREAK_EVENT on Windows).
 */
@property(nonatomic, strong, nullable) GTLRDuration *shutdown;

@end


/**
 *  The CommandTask and CommandResult messages assume the existence of a service
 *  that can serve blobs of content, identified by a hash and size known as a
 *  "digest." The method by which these blobs may be retrieved is not specified
 *  here, but a model implementation is in the Remote Execution API's
 *  "ContentAddressibleStorage" interface.
 *  In the context of the RWAPI, a Digest will virtually always refer to the
 *  contents of a file or a directory. The latter is represented by the
 *  byte-encoded Directory message.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2Digest : GTLRObject

/**
 *  A string-encoded hash (eg "1a2b3c", not the byte array [0x1a, 0x2b, 0x3c])
 *  using an implementation-defined hash algorithm (eg SHA-256).
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty;

/**
 *  The size of the contents. While this is not strictly required as part of an
 *  identifier (after all, any given hash will have exactly one canonical
 *  size), it's useful in almost all cases when one might want to send or
 *  retrieve blobs of content and is included here for this reason.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sizeBytes;

@end


/**
 *  The contents of a directory. Similar to the equivalent message in the Remote
 *  Execution API.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2Directory : GTLRObject

/** Any subdirectories */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata *> *directories;

/** The files in this directory */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2FileMetadata *> *files;

@end


/**
 *  The metadata for a directory. Similar to the equivalent message in the
 *  Remote
 *  Execution API.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata : GTLRObject

/**
 *  A pointer to the contents of the directory, in the form of a marshalled
 *  Directory message.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2Digest *digest;

/** The path of the directory, as in FileMetadata.path. */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  The metadata for a file. Similar to the equivalent message in the Remote
 *  Execution API.
 */
@interface GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2FileMetadata : GTLRObject

/**
 *  If the file is small enough, its contents may also or alternatively be
 *  listed here.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *contents;

/**
 *  A pointer to the contents of the file. The method by which a client
 *  retrieves the contents from a CAS system is not defined here.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleDevtoolsRemoteworkersV1test2Digest *digest;

/**
 *  Properties of the file
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isExecutable;

/**
 *  The path of this file. If this message is part of the
 *  CommandOutputs.outputs fields, the path is relative to the execution root
 *  and must correspond to an entry in CommandTask.outputs.files. If this
 *  message is part of a Directory message, then the path is relative to the
 *  root of that directory. All paths MUST be delimited by forward slashes.
 */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRRemoteBuildExecution_GoogleLongrunningOperation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleRpcStatus *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleLongrunningOperation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the
 *  `name` should have the format of `operations/some/unique/name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRRemoteBuildExecution_GoogleLongrunningOperation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRRemoteBuildExecution_GoogleLongrunningOperation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRRemoteBuildExecution_GoogleLongrunningOperation_Response : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRRemoteBuildExecution_GoogleRpcStatus : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRemoteBuildExecution_GoogleRpcStatus_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRRemoteBuildExecution_GoogleRpcStatus_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRRemoteBuildExecution_GoogleRpcStatus_Details_Item : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
