// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Remote Build Execution API (remotebuildexecution/v2)
// Description:
//   Supplies a Remote Execution API service for tools such as bazel.
// Documentation:
//   https://cloud.google.com/remote-build-execution/docs/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ActionResult;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchReadBlobsRequest;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchUpdateBlobsRequest;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteRequest;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2FindMissingBlobsRequest;
@class GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2WaitExecutionRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Remote Build Execution query classes.
 */
@interface GTLRRemoteBuildExecutionQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Retrieve a cached execution result.
 *  Errors:
 *  * `NOT_FOUND`: The requested `ActionResult` is not in the cache.
 *
 *  Method: remotebuildexecution.actionResults.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRemoteBuildExecutionCloudPlatform
 */
@interface GTLRRemoteBuildExecutionQuery_ActionResultsGet : GTLRRemoteBuildExecutionQuery
// Previous library name was
//   +[GTLQueryRemoteBuildExecution queryForActionResultsGetWithinstanceName:hashProperty:sizeBytes:]

/**
 *  The hash. In the case of SHA-256, it will always be a lowercase hex string
 *  exactly 64 characters long.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty;

/**
 *  The instance of the execution system to operate against. A server may
 *  support multiple instances of the execution system (with their own workers,
 *  storage, caches, etc.). The server MAY require use of this field to select
 *  between them in an implementation-defined fashion, otherwise it can be
 *  omitted.
 */
@property(nonatomic, copy, nullable) NSString *instanceName;

/** The size of the blob, in bytes. */
@property(nonatomic, assign) long long sizeBytes;

/**
 *  Fetches a @c
 *  GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ActionResult.
 *
 *  Retrieve a cached execution result.
 *  Errors:
 *  * `NOT_FOUND`: The requested `ActionResult` is not in the cache.
 *
 *  @param instanceName The instance of the execution system to operate against.
 *    A server may
 *    support multiple instances of the execution system (with their own
 *    workers,
 *    storage, caches, etc.). The server MAY require use of this field to select
 *    between them in an implementation-defined fashion, otherwise it can be
 *    omitted.
 *  @param hashProperty The hash. In the case of SHA-256, it will always be a
 *    lowercase hex string
 *    exactly 64 characters long.
 *  @param sizeBytes The size of the blob, in bytes.
 *
 *  @return GTLRRemoteBuildExecutionQuery_ActionResultsGet
 */
+ (instancetype)queryWithInstanceName:(NSString *)instanceName
                         hashProperty:(NSString *)hashProperty
                            sizeBytes:(long long)sizeBytes;

@end

/**
 *  Upload a new execution result.
 *  In order to allow the server to perform access control based on the type of
 *  action, and to assist with client debugging, the client MUST first upload
 *  the Action that produced the
 *  result, along with its
 *  Command, into the
 *  `ContentAddressableStorage`.
 *  Errors:
 *  * `INVALID_ARGUMENT`: One or more arguments are invalid.
 *  * `FAILED_PRECONDITION`: One or more errors occurred in updating the
 *  action result, such as a missing command or action.
 *  * `RESOURCE_EXHAUSTED`: There is insufficient storage space to add the
 *  entry to the cache.
 *
 *  Method: remotebuildexecution.actionResults.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRemoteBuildExecutionCloudPlatform
 */
@interface GTLRRemoteBuildExecutionQuery_ActionResultsUpdate : GTLRRemoteBuildExecutionQuery
// Previous library name was
//   +[GTLQueryRemoteBuildExecution queryForActionResultsUpdateWithObject:instanceName:hashProperty:sizeBytes:]

/**
 *  The hash. In the case of SHA-256, it will always be a lowercase hex string
 *  exactly 64 characters long.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty;

/**
 *  The instance of the execution system to operate against. A server may
 *  support multiple instances of the execution system (with their own workers,
 *  storage, caches, etc.). The server MAY require use of this field to select
 *  between them in an implementation-defined fashion, otherwise it can be
 *  omitted.
 */
@property(nonatomic, copy, nullable) NSString *instanceName;

/**
 *  The priority (relative importance) of this content in the overall cache.
 *  Generally, a lower value means a longer retention time or other advantage,
 *  but the interpretation of a given value is server-dependent. A priority of
 *  0 means a *default* value, decided by the server.
 *  The particular semantics of this field is up to the server. In particular,
 *  every server will have their own supported range of priorities, and will
 *  decide how these map into retention/eviction policy.
 */
@property(nonatomic, assign) NSInteger resultsCachePolicyPriority;

/** The size of the blob, in bytes. */
@property(nonatomic, assign) long long sizeBytes;

/**
 *  Fetches a @c
 *  GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ActionResult.
 *
 *  Upload a new execution result.
 *  In order to allow the server to perform access control based on the type of
 *  action, and to assist with client debugging, the client MUST first upload
 *  the Action that produced the
 *  result, along with its
 *  Command, into the
 *  `ContentAddressableStorage`.
 *  Errors:
 *  * `INVALID_ARGUMENT`: One or more arguments are invalid.
 *  * `FAILED_PRECONDITION`: One or more errors occurred in updating the
 *  action result, such as a missing command or action.
 *  * `RESOURCE_EXHAUSTED`: There is insufficient storage space to add the
 *  entry to the cache.
 *
 *  @param object The @c
 *    GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ActionResult to
 *    include in the query.
 *  @param instanceName The instance of the execution system to operate against.
 *    A server may
 *    support multiple instances of the execution system (with their own
 *    workers,
 *    storage, caches, etc.). The server MAY require use of this field to select
 *    between them in an implementation-defined fashion, otherwise it can be
 *    omitted.
 *  @param hashProperty The hash. In the case of SHA-256, it will always be a
 *    lowercase hex string
 *    exactly 64 characters long.
 *  @param sizeBytes The size of the blob, in bytes.
 *
 *  @return GTLRRemoteBuildExecutionQuery_ActionResultsUpdate
 */
+ (instancetype)queryWithObject:(GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ActionResult *)object
                   instanceName:(NSString *)instanceName
                   hashProperty:(NSString *)hashProperty
                      sizeBytes:(long long)sizeBytes;

@end

/**
 *  Execute an action remotely.
 *  In order to execute an action, the client must first upload all of the
 *  inputs, the
 *  Command to run, and the
 *  Action into the
 *  ContentAddressableStorage.
 *  It then calls `Execute` with an `action_digest` referring to them. The
 *  server will run the action and eventually return the result.
 *  The input `Action`'s fields MUST meet the various canonicalization
 *  requirements specified in the documentation for their types so that it has
 *  the same digest as other logically equivalent `Action`s. The server MAY
 *  enforce the requirements and return errors if a non-canonical input is
 *  received. It MAY also proceed without verifying some or all of the
 *  requirements, such as for performance reasons. If the server does not
 *  verify the requirement, then it will treat the `Action` as distinct from
 *  another logically equivalent action if they hash differently.
 *  Returns a stream of
 *  google.longrunning.Operation messages
 *  describing the resulting execution, with eventual `response`
 *  ExecuteResponse. The
 *  `metadata` on the operation is of type
 *  ExecuteOperationMetadata.
 *  If the client remains connected after the first response is returned after
 *  the server, then updates are streamed as if the client had called
 *  WaitExecution
 *  until the execution completes or the request reaches an error. The
 *  operation can also be queried using Operations
 *  API.
 *  The server NEED NOT implement other methods or functionality of the
 *  Operations API.
 *  Errors discovered during creation of the `Operation` will be reported
 *  as gRPC Status errors, while errors that occurred while running the
 *  action will be reported in the `status` field of the `ExecuteResponse`. The
 *  server MUST NOT set the `error` field of the `Operation` proto.
 *  The possible errors include:
 *  * `INVALID_ARGUMENT`: One or more arguments are invalid.
 *  * `FAILED_PRECONDITION`: One or more errors occurred in setting up the
 *  action requested, such as a missing input or command or no worker being
 *  available. The client may be able to fix the errors and retry.
 *  * `RESOURCE_EXHAUSTED`: There is insufficient quota of some resource to run
 *  the action.
 *  * `UNAVAILABLE`: Due to a transient condition, such as all workers being
 *  occupied (and the server does not support a queue), the action could not
 *  be started. The client should retry.
 *  * `INTERNAL`: An internal error occurred in the execution engine or the
 *  worker.
 *  * `DEADLINE_EXCEEDED`: The execution timed out.
 *  * `CANCELLED`: The operation was cancelled by the client. This status is
 *  only possible if the server implements the Operations API CancelOperation
 *  method, and it was called for the current execution.
 *  In the case of a missing input or command, the server SHOULD additionally
 *  send a PreconditionFailure error detail
 *  where, for each requested blob not present in the CAS, there is a
 *  `Violation` with a `type` of `MISSING` and a `subject` of
 *  `"blobs/{hash}/{size}"` indicating the digest of the missing blob.
 *
 *  Method: remotebuildexecution.actions.execute
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRemoteBuildExecutionCloudPlatform
 */
@interface GTLRRemoteBuildExecutionQuery_ActionsExecute : GTLRRemoteBuildExecutionQuery
// Previous library name was
//   +[GTLQueryRemoteBuildExecution queryForActionsExecuteWithObject:instanceName:]

/**
 *  The instance of the execution system to operate against. A server may
 *  support multiple instances of the execution system (with their own workers,
 *  storage, caches, etc.). The server MAY require use of this field to select
 *  between them in an implementation-defined fashion, otherwise it can be
 *  omitted.
 */
@property(nonatomic, copy, nullable) NSString *instanceName;

/**
 *  Fetches a @c GTLRRemoteBuildExecution_GoogleLongrunningOperation.
 *
 *  Execute an action remotely.
 *  In order to execute an action, the client must first upload all of the
 *  inputs, the
 *  Command to run, and the
 *  Action into the
 *  ContentAddressableStorage.
 *  It then calls `Execute` with an `action_digest` referring to them. The
 *  server will run the action and eventually return the result.
 *  The input `Action`'s fields MUST meet the various canonicalization
 *  requirements specified in the documentation for their types so that it has
 *  the same digest as other logically equivalent `Action`s. The server MAY
 *  enforce the requirements and return errors if a non-canonical input is
 *  received. It MAY also proceed without verifying some or all of the
 *  requirements, such as for performance reasons. If the server does not
 *  verify the requirement, then it will treat the `Action` as distinct from
 *  another logically equivalent action if they hash differently.
 *  Returns a stream of
 *  google.longrunning.Operation messages
 *  describing the resulting execution, with eventual `response`
 *  ExecuteResponse. The
 *  `metadata` on the operation is of type
 *  ExecuteOperationMetadata.
 *  If the client remains connected after the first response is returned after
 *  the server, then updates are streamed as if the client had called
 *  WaitExecution
 *  until the execution completes or the request reaches an error. The
 *  operation can also be queried using Operations
 *  API.
 *  The server NEED NOT implement other methods or functionality of the
 *  Operations API.
 *  Errors discovered during creation of the `Operation` will be reported
 *  as gRPC Status errors, while errors that occurred while running the
 *  action will be reported in the `status` field of the `ExecuteResponse`. The
 *  server MUST NOT set the `error` field of the `Operation` proto.
 *  The possible errors include:
 *  * `INVALID_ARGUMENT`: One or more arguments are invalid.
 *  * `FAILED_PRECONDITION`: One or more errors occurred in setting up the
 *  action requested, such as a missing input or command or no worker being
 *  available. The client may be able to fix the errors and retry.
 *  * `RESOURCE_EXHAUSTED`: There is insufficient quota of some resource to run
 *  the action.
 *  * `UNAVAILABLE`: Due to a transient condition, such as all workers being
 *  occupied (and the server does not support a queue), the action could not
 *  be started. The client should retry.
 *  * `INTERNAL`: An internal error occurred in the execution engine or the
 *  worker.
 *  * `DEADLINE_EXCEEDED`: The execution timed out.
 *  * `CANCELLED`: The operation was cancelled by the client. This status is
 *  only possible if the server implements the Operations API CancelOperation
 *  method, and it was called for the current execution.
 *  In the case of a missing input or command, the server SHOULD additionally
 *  send a PreconditionFailure error detail
 *  where, for each requested blob not present in the CAS, there is a
 *  `Violation` with a `type` of `MISSING` and a `subject` of
 *  `"blobs/{hash}/{size}"` indicating the digest of the missing blob.
 *
 *  @param object The @c
 *    GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteRequest to
 *    include in the query.
 *  @param instanceName The instance of the execution system to operate against.
 *    A server may
 *    support multiple instances of the execution system (with their own
 *    workers,
 *    storage, caches, etc.). The server MAY require use of this field to select
 *    between them in an implementation-defined fashion, otherwise it can be
 *    omitted.
 *
 *  @return GTLRRemoteBuildExecutionQuery_ActionsExecute
 */
+ (instancetype)queryWithObject:(GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ExecuteRequest *)object
                   instanceName:(NSString *)instanceName;

@end

/**
 *  Download many blobs at once.
 *  The server may enforce a limit of the combined total size of blobs
 *  to be downloaded using this API. This limit may be obtained using the
 *  Capabilities API.
 *  Requests exceeding the limit should either be split into smaller
 *  chunks or downloaded using the
 *  ByteStream API, as appropriate.
 *  This request is equivalent to calling a Bytestream `Read` request
 *  on each individual blob, in parallel. The requests may succeed or fail
 *  independently.
 *  Errors:
 *  * `INVALID_ARGUMENT`: The client attempted to read more than the
 *  server supported limit.
 *  Every error on individual read will be returned in the corresponding digest
 *  status.
 *
 *  Method: remotebuildexecution.blobs.batchRead
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRemoteBuildExecutionCloudPlatform
 */
@interface GTLRRemoteBuildExecutionQuery_BlobsBatchRead : GTLRRemoteBuildExecutionQuery
// Previous library name was
//   +[GTLQueryRemoteBuildExecution queryForBlobsBatchReadWithObject:instanceName:]

/**
 *  The instance of the execution system to operate against. A server may
 *  support multiple instances of the execution system (with their own workers,
 *  storage, caches, etc.). The server MAY require use of this field to select
 *  between them in an implementation-defined fashion, otherwise it can be
 *  omitted.
 */
@property(nonatomic, copy, nullable) NSString *instanceName;

/**
 *  Fetches a @c
 *  GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchReadBlobsResponse.
 *
 *  Download many blobs at once.
 *  The server may enforce a limit of the combined total size of blobs
 *  to be downloaded using this API. This limit may be obtained using the
 *  Capabilities API.
 *  Requests exceeding the limit should either be split into smaller
 *  chunks or downloaded using the
 *  ByteStream API, as appropriate.
 *  This request is equivalent to calling a Bytestream `Read` request
 *  on each individual blob, in parallel. The requests may succeed or fail
 *  independently.
 *  Errors:
 *  * `INVALID_ARGUMENT`: The client attempted to read more than the
 *  server supported limit.
 *  Every error on individual read will be returned in the corresponding digest
 *  status.
 *
 *  @param object The @c
 *    GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchReadBlobsRequest
 *    to include in the query.
 *  @param instanceName The instance of the execution system to operate against.
 *    A server may
 *    support multiple instances of the execution system (with their own
 *    workers,
 *    storage, caches, etc.). The server MAY require use of this field to select
 *    between them in an implementation-defined fashion, otherwise it can be
 *    omitted.
 *
 *  @return GTLRRemoteBuildExecutionQuery_BlobsBatchRead
 */
+ (instancetype)queryWithObject:(GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchReadBlobsRequest *)object
                   instanceName:(NSString *)instanceName;

@end

/**
 *  Upload many blobs at once.
 *  The server may enforce a limit of the combined total size of blobs
 *  to be uploaded using this API. This limit may be obtained using the
 *  Capabilities API.
 *  Requests exceeding the limit should either be split into smaller
 *  chunks or uploaded using the
 *  ByteStream API, as appropriate.
 *  This request is equivalent to calling a Bytestream `Write` request
 *  on each individual blob, in parallel. The requests may succeed or fail
 *  independently.
 *  Errors:
 *  * `INVALID_ARGUMENT`: The client attempted to upload more than the
 *  server supported limit.
 *  Individual requests may return the following errors, additionally:
 *  * `RESOURCE_EXHAUSTED`: There is insufficient disk quota to store the blob.
 *  * `INVALID_ARGUMENT`: The
 *  Digest does not match the
 *  provided data.
 *
 *  Method: remotebuildexecution.blobs.batchUpdate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRemoteBuildExecutionCloudPlatform
 */
@interface GTLRRemoteBuildExecutionQuery_BlobsBatchUpdate : GTLRRemoteBuildExecutionQuery
// Previous library name was
//   +[GTLQueryRemoteBuildExecution queryForBlobsBatchUpdateWithObject:instanceName:]

/**
 *  The instance of the execution system to operate against. A server may
 *  support multiple instances of the execution system (with their own workers,
 *  storage, caches, etc.). The server MAY require use of this field to select
 *  between them in an implementation-defined fashion, otherwise it can be
 *  omitted.
 */
@property(nonatomic, copy, nullable) NSString *instanceName;

/**
 *  Fetches a @c
 *  GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchUpdateBlobsResponse.
 *
 *  Upload many blobs at once.
 *  The server may enforce a limit of the combined total size of blobs
 *  to be uploaded using this API. This limit may be obtained using the
 *  Capabilities API.
 *  Requests exceeding the limit should either be split into smaller
 *  chunks or uploaded using the
 *  ByteStream API, as appropriate.
 *  This request is equivalent to calling a Bytestream `Write` request
 *  on each individual blob, in parallel. The requests may succeed or fail
 *  independently.
 *  Errors:
 *  * `INVALID_ARGUMENT`: The client attempted to upload more than the
 *  server supported limit.
 *  Individual requests may return the following errors, additionally:
 *  * `RESOURCE_EXHAUSTED`: There is insufficient disk quota to store the blob.
 *  * `INVALID_ARGUMENT`: The
 *  Digest does not match the
 *  provided data.
 *
 *  @param object The @c
 *    GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchUpdateBlobsRequest
 *    to include in the query.
 *  @param instanceName The instance of the execution system to operate against.
 *    A server may
 *    support multiple instances of the execution system (with their own
 *    workers,
 *    storage, caches, etc.). The server MAY require use of this field to select
 *    between them in an implementation-defined fashion, otherwise it can be
 *    omitted.
 *
 *  @return GTLRRemoteBuildExecutionQuery_BlobsBatchUpdate
 */
+ (instancetype)queryWithObject:(GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2BatchUpdateBlobsRequest *)object
                   instanceName:(NSString *)instanceName;

@end

/**
 *  Determine if blobs are present in the CAS.
 *  Clients can use this API before uploading blobs to determine which ones are
 *  already present in the CAS and do not need to be uploaded again.
 *  There are no method-specific errors.
 *
 *  Method: remotebuildexecution.blobs.findMissing
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRemoteBuildExecutionCloudPlatform
 */
@interface GTLRRemoteBuildExecutionQuery_BlobsFindMissing : GTLRRemoteBuildExecutionQuery
// Previous library name was
//   +[GTLQueryRemoteBuildExecution queryForBlobsFindMissingWithObject:instanceName:]

/**
 *  The instance of the execution system to operate against. A server may
 *  support multiple instances of the execution system (with their own workers,
 *  storage, caches, etc.). The server MAY require use of this field to select
 *  between them in an implementation-defined fashion, otherwise it can be
 *  omitted.
 */
@property(nonatomic, copy, nullable) NSString *instanceName;

/**
 *  Fetches a @c
 *  GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2FindMissingBlobsResponse.
 *
 *  Determine if blobs are present in the CAS.
 *  Clients can use this API before uploading blobs to determine which ones are
 *  already present in the CAS and do not need to be uploaded again.
 *  There are no method-specific errors.
 *
 *  @param object The @c
 *    GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2FindMissingBlobsRequest
 *    to include in the query.
 *  @param instanceName The instance of the execution system to operate against.
 *    A server may
 *    support multiple instances of the execution system (with their own
 *    workers,
 *    storage, caches, etc.). The server MAY require use of this field to select
 *    between them in an implementation-defined fashion, otherwise it can be
 *    omitted.
 *
 *  @return GTLRRemoteBuildExecutionQuery_BlobsFindMissing
 */
+ (instancetype)queryWithObject:(GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2FindMissingBlobsRequest *)object
                   instanceName:(NSString *)instanceName;

@end

/**
 *  Fetch the entire directory tree rooted at a node.
 *  This request must be targeted at a
 *  Directory stored in the
 *  ContentAddressableStorage
 *  (CAS). The server will enumerate the `Directory` tree recursively and
 *  return every node descended from the root.
 *  The GetTreeRequest.page_token parameter can be used to skip ahead in
 *  the stream (e.g. when retrying a partially completed and aborted request),
 *  by setting it to a value taken from GetTreeResponse.next_page_token of the
 *  last successfully processed GetTreeResponse).
 *  The exact traversal order is unspecified and, unless retrieving subsequent
 *  pages from an earlier request, is not guaranteed to be stable across
 *  multiple invocations of `GetTree`.
 *  If part of the tree is missing from the CAS, the server will return the
 *  portion present and omit the rest.
 *  * `NOT_FOUND`: The requested tree root is not present in the CAS.
 *
 *  Method: remotebuildexecution.blobs.getTree
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRemoteBuildExecutionCloudPlatform
 */
@interface GTLRRemoteBuildExecutionQuery_BlobsGetTree : GTLRRemoteBuildExecutionQuery
// Previous library name was
//   +[GTLQueryRemoteBuildExecution queryForBlobsGetTreeWithinstanceName:hashProperty:sizeBytes:]

/**
 *  The hash. In the case of SHA-256, it will always be a lowercase hex string
 *  exactly 64 characters long.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty;

/**
 *  The instance of the execution system to operate against. A server may
 *  support multiple instances of the execution system (with their own workers,
 *  storage, caches, etc.). The server MAY require use of this field to select
 *  between them in an implementation-defined fashion, otherwise it can be
 *  omitted.
 */
@property(nonatomic, copy, nullable) NSString *instanceName;

/**
 *  A maximum page size to request. If present, the server will request no more
 *  than this many items. Regardless of whether a page size is specified, the
 *  server may place its own limit on the number of items to be returned and
 *  require the client to retrieve more items using a subsequent request.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, which must be a value received in a previous
 *  GetTreeResponse.
 *  If present, the server will use it to return the following page of results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The size of the blob, in bytes. */
@property(nonatomic, assign) long long sizeBytes;

/**
 *  Fetches a @c
 *  GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2GetTreeResponse.
 *
 *  Fetch the entire directory tree rooted at a node.
 *  This request must be targeted at a
 *  Directory stored in the
 *  ContentAddressableStorage
 *  (CAS). The server will enumerate the `Directory` tree recursively and
 *  return every node descended from the root.
 *  The GetTreeRequest.page_token parameter can be used to skip ahead in
 *  the stream (e.g. when retrying a partially completed and aborted request),
 *  by setting it to a value taken from GetTreeResponse.next_page_token of the
 *  last successfully processed GetTreeResponse).
 *  The exact traversal order is unspecified and, unless retrieving subsequent
 *  pages from an earlier request, is not guaranteed to be stable across
 *  multiple invocations of `GetTree`.
 *  If part of the tree is missing from the CAS, the server will return the
 *  portion present and omit the rest.
 *  * `NOT_FOUND`: The requested tree root is not present in the CAS.
 *
 *  @param instanceName The instance of the execution system to operate against.
 *    A server may
 *    support multiple instances of the execution system (with their own
 *    workers,
 *    storage, caches, etc.). The server MAY require use of this field to select
 *    between them in an implementation-defined fashion, otherwise it can be
 *    omitted.
 *  @param hashProperty The hash. In the case of SHA-256, it will always be a
 *    lowercase hex string
 *    exactly 64 characters long.
 *  @param sizeBytes The size of the blob, in bytes.
 *
 *  @return GTLRRemoteBuildExecutionQuery_BlobsGetTree
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithInstanceName:(NSString *)instanceName
                         hashProperty:(NSString *)hashProperty
                            sizeBytes:(long long)sizeBytes;

@end

/**
 *  Wait for an execution operation to complete. When the client initially
 *  makes the request, the server immediately responds with the current status
 *  of the execution. The server will leave the request stream open until the
 *  operation completes, and then respond with the completed operation. The
 *  server MAY choose to stream additional updates as execution progresses,
 *  such as to provide an update as to the state of the execution.
 *
 *  Method: remotebuildexecution.operations.waitExecution
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRemoteBuildExecutionCloudPlatform
 */
@interface GTLRRemoteBuildExecutionQuery_OperationsWaitExecution : GTLRRemoteBuildExecutionQuery
// Previous library name was
//   +[GTLQueryRemoteBuildExecution queryForOperationsWaitExecutionWithObject:name:]

/**
 *  The name of the Operation
 *  returned by Execute.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRemoteBuildExecution_GoogleLongrunningOperation.
 *
 *  Wait for an execution operation to complete. When the client initially
 *  makes the request, the server immediately responds with the current status
 *  of the execution. The server will leave the request stream open until the
 *  operation completes, and then respond with the completed operation. The
 *  server MAY choose to stream additional updates as execution progresses,
 *  such as to provide an update as to the state of the execution.
 *
 *  @param object The @c
 *    GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2WaitExecutionRequest
 *    to include in the query.
 *  @param name The name of the Operation
 *    returned by Execute.
 *
 *  @return GTLRRemoteBuildExecutionQuery_OperationsWaitExecution
 */
+ (instancetype)queryWithObject:(GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2WaitExecutionRequest *)object
                           name:(NSString *)name;

@end

/**
 *  GetCapabilities returns the server capabilities configuration.
 *
 *  Method: remotebuildexecution.getCapabilities
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRemoteBuildExecutionCloudPlatform
 */
@interface GTLRRemoteBuildExecutionQuery_V2GetCapabilities : GTLRRemoteBuildExecutionQuery
// Previous library name was
//   +[GTLQueryRemoteBuildExecution queryForGetCapabilitiesWithinstanceName:]

/**
 *  The instance of the execution system to operate against. A server may
 *  support multiple instances of the execution system (with their own workers,
 *  storage, caches, etc.). The server MAY require use of this field to select
 *  between them in an implementation-defined fashion, otherwise it can be
 *  omitted.
 */
@property(nonatomic, copy, nullable) NSString *instanceName;

/**
 *  Fetches a @c
 *  GTLRRemoteBuildExecution_BuildBazelRemoteExecutionV2ServerCapabilities.
 *
 *  GetCapabilities returns the server capabilities configuration.
 *
 *  @param instanceName The instance of the execution system to operate against.
 *    A server may
 *    support multiple instances of the execution system (with their own
 *    workers,
 *    storage, caches, etc.). The server MAY require use of this field to select
 *    between them in an implementation-defined fashion, otherwise it can be
 *    omitted.
 *
 *  @return GTLRRemoteBuildExecutionQuery_V2GetCapabilities
 */
+ (instancetype)queryWithInstanceName:(NSString *)instanceName;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
