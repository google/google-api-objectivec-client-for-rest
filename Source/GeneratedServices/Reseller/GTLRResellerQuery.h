// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Enterprise Apps Reseller API (reseller/v1)
// Description:
//   Creates and manages your customers and their subscriptions.
// Documentation:
//   https://developers.google.com/google-apps/reseller/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRReseller_ChangePlanRequest;
@class GTLRReseller_Customer;
@class GTLRReseller_RenewalSettings;
@class GTLRReseller_Seats;
@class GTLRReseller_Subscription;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// deletionType

/**
 *  Cancels the subscription immediately. This does not apply to a G Suite
 *  subscription.
 *
 *  Value: "cancel"
 */
GTLR_EXTERN NSString * const kGTLRResellerDeletionTypeCancel;
/**
 *  Downgrades a G Suite subscription to a Google Apps Free edition subscription
 *  only if the customer was initially subscribed to a Google Apps Free edition
 *  (also known as the Standard edition). Once downgraded, the customer no
 *  longer has access to the previous G Suite subscription and is no longer
 *  managed by the reseller.
 *  A G Suite subscription's downgrade cannot be invoked if an active or
 *  suspended Google Drive or Google Vault subscription is present. The Google
 *  Drive or Google Vault subscription must be cancelled before the G Suite
 *  subscription's downgrade is invoked.
 *  The downgrade deletionType does not apply to other products or G Suite SKUs.
 *
 *  Value: "downgrade"
 */
GTLR_EXTERN NSString * const kGTLRResellerDeletionTypeDowngrade;
/**
 *  (DEPRECATED) The G Suite account is suspended for four days and then
 *  cancelled. Once suspended, an administrator has access to the suspended
 *  account, but the account users can not access their services. A suspension
 *  can be lifted, using the reseller tools.
 *  A G Suite subscription's suspension can not be invoked if an active or
 *  suspended Google Drive or Google Vault subscription is present. The Google
 *  Drive or Google Vault subscription must be cancelled before the G Suite
 *  subscription's suspension is invoked.
 *
 *  Value: "suspend"
 */
GTLR_EXTERN NSString * const kGTLRResellerDeletionTypeSuspend;
/**
 *  Transfers a subscription directly to Google. The customer is immediately
 *  transferred to a direct billing relationship with Google and is given a
 *  short amount of time with no service interruption. The customer can then
 *  choose to set up billing directly with Google by using a credit card, or
 *  they can transfer to another reseller.
 *
 *  Value: "transfer_to_direct"
 */
GTLR_EXTERN NSString * const kGTLRResellerDeletionTypeTransferToDirect;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Reseller query classes.
 */
@interface GTLRResellerQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Get a customer account.
 *
 *  Method: reseller.customers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 *    @c kGTLRAuthScopeResellerAppsOrderReadonly
 */
@interface GTLRResellerQuery_CustomersGet : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForCustomersGetWithcustomerId:]

/**
 *  Either the customer's primary domain name or the customer's unique
 *  identifier. If using the domain name, we do not recommend using a customerId
 *  as a key for persistent data. If the domain name for a customerId is
 *  changed, the Google system automatically updates.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Fetches a @c GTLRReseller_Customer.
 *
 *  Get a customer account.
 *
 *  @param customerId Either the customer's primary domain name or the
 *    customer's unique identifier. If using the domain name, we do not
 *    recommend using a customerId as a key for persistent data. If the domain
 *    name for a customerId is changed, the Google system automatically updates.
 *
 *  @return GTLRResellerQuery_CustomersGet
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId;

@end

/**
 *  Order a new customer's account.
 *
 *  Method: reseller.customers.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_CustomersInsert : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForCustomersInsertWithObject:]

/**
 *  The customerAuthToken query string is required when creating a resold
 *  account that transfers a direct customer's subscription or transfers another
 *  reseller customer's subscription to your reseller management. This is a
 *  hexadecimal authentication token needed to complete the subscription
 *  transfer. For more information, see the administrator help center.
 */
@property(nonatomic, copy, nullable) NSString *customerAuthToken;

/**
 *  Fetches a @c GTLRReseller_Customer.
 *
 *  Order a new customer's account.
 *
 *  @param object The @c GTLRReseller_Customer to include in the query.
 *
 *  @return GTLRResellerQuery_CustomersInsert
 */
+ (instancetype)queryWithObject:(GTLRReseller_Customer *)object;

@end

/**
 *  Update a customer account's settings. This method supports patch semantics.
 *
 *  Method: reseller.customers.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_CustomersPatch : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForCustomersPatchWithObject:customerId:]

/**
 *  Either the customer's primary domain name or the customer's unique
 *  identifier. If using the domain name, we do not recommend using a customerId
 *  as a key for persistent data. If the domain name for a customerId is
 *  changed, the Google system automatically updates.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Fetches a @c GTLRReseller_Customer.
 *
 *  Update a customer account's settings. This method supports patch semantics.
 *
 *  @param object The @c GTLRReseller_Customer to include in the query.
 *  @param customerId Either the customer's primary domain name or the
 *    customer's unique identifier. If using the domain name, we do not
 *    recommend using a customerId as a key for persistent data. If the domain
 *    name for a customerId is changed, the Google system automatically updates.
 *
 *  @return GTLRResellerQuery_CustomersPatch
 */
+ (instancetype)queryWithObject:(GTLRReseller_Customer *)object
                     customerId:(NSString *)customerId;

@end

/**
 *  Update a customer account's settings.
 *
 *  Method: reseller.customers.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_CustomersUpdate : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForCustomersUpdateWithObject:customerId:]

/**
 *  Either the customer's primary domain name or the customer's unique
 *  identifier. If using the domain name, we do not recommend using a customerId
 *  as a key for persistent data. If the domain name for a customerId is
 *  changed, the Google system automatically updates.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Fetches a @c GTLRReseller_Customer.
 *
 *  Update a customer account's settings.
 *
 *  @param object The @c GTLRReseller_Customer to include in the query.
 *  @param customerId Either the customer's primary domain name or the
 *    customer's unique identifier. If using the domain name, we do not
 *    recommend using a customerId as a key for persistent data. If the domain
 *    name for a customerId is changed, the Google system automatically updates.
 *
 *  @return GTLRResellerQuery_CustomersUpdate
 */
+ (instancetype)queryWithObject:(GTLRReseller_Customer *)object
                     customerId:(NSString *)customerId;

@end

/**
 *  Returns all the details of the watch corresponding to the reseller.
 *
 *  Method: reseller.resellernotify.getwatchdetails
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 *    @c kGTLRAuthScopeResellerAppsOrderReadonly
 */
@interface GTLRResellerQuery_ResellernotifyGetwatchdetails : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForResellernotifyGetwatchdetails]

/**
 *  Fetches a @c GTLRReseller_NotifyGetwatchdetailsResponse.
 *
 *  Returns all the details of the watch corresponding to the reseller.
 *
 *  @return GTLRResellerQuery_ResellernotifyGetwatchdetails
 */
+ (instancetype)query;

@end

/**
 *  Registers a Reseller for receiving notifications.
 *
 *  Method: reseller.resellernotify.register
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_ResellernotifyRegister : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForResellernotifyRegister]

/** The service account which will own the created Cloud-PubSub topic. */
@property(nonatomic, copy, nullable) NSString *serviceAccountEmailAddress;

/**
 *  Fetches a @c GTLRReseller_NotifyResource.
 *
 *  Registers a Reseller for receiving notifications.
 *
 *  @return GTLRResellerQuery_ResellernotifyRegister
 */
+ (instancetype)query;

@end

/**
 *  Unregisters a Reseller for receiving notifications.
 *
 *  Method: reseller.resellernotify.unregister
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_ResellernotifyUnregister : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForResellernotifyUnregister]

/** The service account which owns the Cloud-PubSub topic. */
@property(nonatomic, copy, nullable) NSString *serviceAccountEmailAddress;

/**
 *  Fetches a @c GTLRReseller_NotifyResource.
 *
 *  Unregisters a Reseller for receiving notifications.
 *
 *  @return GTLRResellerQuery_ResellernotifyUnregister
 */
+ (instancetype)query;

@end

/**
 *  Activates a subscription previously suspended by the reseller
 *
 *  Method: reseller.subscriptions.activate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_SubscriptionsActivate : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForSubscriptionsActivateWithcustomerId:subscriptionId:]

/**
 *  Either the customer's primary domain name or the customer's unique
 *  identifier. If using the domain name, we do not recommend using a customerId
 *  as a key for persistent data. If the domain name for a customerId is
 *  changed, the Google system automatically updates.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  This is a required property. The subscriptionId is the subscription
 *  identifier and is unique for each customer. Since a subscriptionId changes
 *  when a subscription is updated, we recommend to not use this ID as a key for
 *  persistent data. And the subscriptionId can be found using the retrieve all
 *  reseller subscriptions method.
 */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  Fetches a @c GTLRReseller_Subscription.
 *
 *  Activates a subscription previously suspended by the reseller
 *
 *  @param customerId Either the customer's primary domain name or the
 *    customer's unique identifier. If using the domain name, we do not
 *    recommend using a customerId as a key for persistent data. If the domain
 *    name for a customerId is changed, the Google system automatically updates.
 *  @param subscriptionId This is a required property. The subscriptionId is the
 *    subscription identifier and is unique for each customer. Since a
 *    subscriptionId changes when a subscription is updated, we recommend to not
 *    use this ID as a key for persistent data. And the subscriptionId can be
 *    found using the retrieve all reseller subscriptions method.
 *
 *  @return GTLRResellerQuery_SubscriptionsActivate
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                     subscriptionId:(NSString *)subscriptionId;

@end

/**
 *  Update a subscription plan. Use this method to update a plan for a 30-day
 *  trial or a flexible plan subscription to an annual commitment plan with
 *  monthly or yearly payments.
 *
 *  Method: reseller.subscriptions.changePlan
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_SubscriptionsChangePlan : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForSubscriptionsChangePlanWithObject:customerId:subscriptionId:]

/**
 *  Either the customer's primary domain name or the customer's unique
 *  identifier. If using the domain name, we do not recommend using a customerId
 *  as a key for persistent data. If the domain name for a customerId is
 *  changed, the Google system automatically updates.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  This is a required property. The subscriptionId is the subscription
 *  identifier and is unique for each customer. Since a subscriptionId changes
 *  when a subscription is updated, we recommend to not use this ID as a key for
 *  persistent data. And the subscriptionId can be found using the retrieve all
 *  reseller subscriptions method.
 */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  Fetches a @c GTLRReseller_Subscription.
 *
 *  Update a subscription plan. Use this method to update a plan for a 30-day
 *  trial or a flexible plan subscription to an annual commitment plan with
 *  monthly or yearly payments.
 *
 *  @param object The @c GTLRReseller_ChangePlanRequest to include in the query.
 *  @param customerId Either the customer's primary domain name or the
 *    customer's unique identifier. If using the domain name, we do not
 *    recommend using a customerId as a key for persistent data. If the domain
 *    name for a customerId is changed, the Google system automatically updates.
 *  @param subscriptionId This is a required property. The subscriptionId is the
 *    subscription identifier and is unique for each customer. Since a
 *    subscriptionId changes when a subscription is updated, we recommend to not
 *    use this ID as a key for persistent data. And the subscriptionId can be
 *    found using the retrieve all reseller subscriptions method.
 *
 *  @return GTLRResellerQuery_SubscriptionsChangePlan
 */
+ (instancetype)queryWithObject:(GTLRReseller_ChangePlanRequest *)object
                     customerId:(NSString *)customerId
                 subscriptionId:(NSString *)subscriptionId;

@end

/**
 *  Update a user license's renewal settings. This is applicable for accounts
 *  with annual commitment plans only.
 *
 *  Method: reseller.subscriptions.changeRenewalSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_SubscriptionsChangeRenewalSettings : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForSubscriptionsChangeRenewalSettingsWithObject:customerId:subscriptionId:]

/**
 *  Either the customer's primary domain name or the customer's unique
 *  identifier. If using the domain name, we do not recommend using a customerId
 *  as a key for persistent data. If the domain name for a customerId is
 *  changed, the Google system automatically updates.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  This is a required property. The subscriptionId is the subscription
 *  identifier and is unique for each customer. Since a subscriptionId changes
 *  when a subscription is updated, we recommend to not use this ID as a key for
 *  persistent data. And the subscriptionId can be found using the retrieve all
 *  reseller subscriptions method.
 */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  Fetches a @c GTLRReseller_Subscription.
 *
 *  Update a user license's renewal settings. This is applicable for accounts
 *  with annual commitment plans only.
 *
 *  @param object The @c GTLRReseller_RenewalSettings to include in the query.
 *  @param customerId Either the customer's primary domain name or the
 *    customer's unique identifier. If using the domain name, we do not
 *    recommend using a customerId as a key for persistent data. If the domain
 *    name for a customerId is changed, the Google system automatically updates.
 *  @param subscriptionId This is a required property. The subscriptionId is the
 *    subscription identifier and is unique for each customer. Since a
 *    subscriptionId changes when a subscription is updated, we recommend to not
 *    use this ID as a key for persistent data. And the subscriptionId can be
 *    found using the retrieve all reseller subscriptions method.
 *
 *  @return GTLRResellerQuery_SubscriptionsChangeRenewalSettings
 */
+ (instancetype)queryWithObject:(GTLRReseller_RenewalSettings *)object
                     customerId:(NSString *)customerId
                 subscriptionId:(NSString *)subscriptionId;

@end

/**
 *  Update a subscription's user license settings.
 *
 *  Method: reseller.subscriptions.changeSeats
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_SubscriptionsChangeSeats : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForSubscriptionsChangeSeatsWithObject:customerId:subscriptionId:]

/**
 *  Either the customer's primary domain name or the customer's unique
 *  identifier. If using the domain name, we do not recommend using a customerId
 *  as a key for persistent data. If the domain name for a customerId is
 *  changed, the Google system automatically updates.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  This is a required property. The subscriptionId is the subscription
 *  identifier and is unique for each customer. Since a subscriptionId changes
 *  when a subscription is updated, we recommend to not use this ID as a key for
 *  persistent data. And the subscriptionId can be found using the retrieve all
 *  reseller subscriptions method.
 */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  Fetches a @c GTLRReseller_Subscription.
 *
 *  Update a subscription's user license settings.
 *
 *  @param object The @c GTLRReseller_Seats to include in the query.
 *  @param customerId Either the customer's primary domain name or the
 *    customer's unique identifier. If using the domain name, we do not
 *    recommend using a customerId as a key for persistent data. If the domain
 *    name for a customerId is changed, the Google system automatically updates.
 *  @param subscriptionId This is a required property. The subscriptionId is the
 *    subscription identifier and is unique for each customer. Since a
 *    subscriptionId changes when a subscription is updated, we recommend to not
 *    use this ID as a key for persistent data. And the subscriptionId can be
 *    found using the retrieve all reseller subscriptions method.
 *
 *  @return GTLRResellerQuery_SubscriptionsChangeSeats
 */
+ (instancetype)queryWithObject:(GTLRReseller_Seats *)object
                     customerId:(NSString *)customerId
                 subscriptionId:(NSString *)subscriptionId;

@end

/**
 *  Cancel, suspend or transfer a subscription to direct.
 *
 *  Method: reseller.subscriptions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_SubscriptionsDelete : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForSubscriptionsDeleteWithcustomerId:subscriptionId:deletionType:]

/**
 *  Either the customer's primary domain name or the customer's unique
 *  identifier. If using the domain name, we do not recommend using a customerId
 *  as a key for persistent data. If the domain name for a customerId is
 *  changed, the Google system automatically updates.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  The deletionType query string enables the cancellation, downgrade, or
 *  suspension of a subscription.
 *
 *  Likely values:
 *    @arg @c kGTLRResellerDeletionTypeCancel Cancels the subscription
 *        immediately. This does not apply to a G Suite subscription. (Value:
 *        "cancel")
 *    @arg @c kGTLRResellerDeletionTypeDowngrade Downgrades a G Suite
 *        subscription to a Google Apps Free edition subscription only if the
 *        customer was initially subscribed to a Google Apps Free edition (also
 *        known as the Standard edition). Once downgraded, the customer no
 *        longer has access to the previous G Suite subscription and is no
 *        longer managed by the reseller.
 *        A G Suite subscription's downgrade cannot be invoked if an active or
 *        suspended Google Drive or Google Vault subscription is present. The
 *        Google Drive or Google Vault subscription must be cancelled before the
 *        G Suite subscription's downgrade is invoked.
 *        The downgrade deletionType does not apply to other products or G Suite
 *        SKUs. (Value: "downgrade")
 *    @arg @c kGTLRResellerDeletionTypeSuspend (DEPRECATED) The G Suite account
 *        is suspended for four days and then cancelled. Once suspended, an
 *        administrator has access to the suspended account, but the account
 *        users can not access their services. A suspension can be lifted, using
 *        the reseller tools.
 *        A G Suite subscription's suspension can not be invoked if an active or
 *        suspended Google Drive or Google Vault subscription is present. The
 *        Google Drive or Google Vault subscription must be cancelled before the
 *        G Suite subscription's suspension is invoked. (Value: "suspend")
 *    @arg @c kGTLRResellerDeletionTypeTransferToDirect Transfers a subscription
 *        directly to Google. The customer is immediately transferred to a
 *        direct billing relationship with Google and is given a short amount of
 *        time with no service interruption. The customer can then choose to set
 *        up billing directly with Google by using a credit card, or they can
 *        transfer to another reseller. (Value: "transfer_to_direct")
 */
@property(nonatomic, copy, nullable) NSString *deletionType;

/**
 *  This is a required property. The subscriptionId is the subscription
 *  identifier and is unique for each customer. Since a subscriptionId changes
 *  when a subscription is updated, we recommend to not use this ID as a key for
 *  persistent data. And the subscriptionId can be found using the retrieve all
 *  reseller subscriptions method.
 */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Cancel, suspend or transfer a subscription to direct.
 *
 *  @param customerId Either the customer's primary domain name or the
 *    customer's unique identifier. If using the domain name, we do not
 *    recommend using a customerId as a key for persistent data. If the domain
 *    name for a customerId is changed, the Google system automatically updates.
 *  @param subscriptionId This is a required property. The subscriptionId is the
 *    subscription identifier and is unique for each customer. Since a
 *    subscriptionId changes when a subscription is updated, we recommend to not
 *    use this ID as a key for persistent data. And the subscriptionId can be
 *    found using the retrieve all reseller subscriptions method.
 *  @param deletionType The deletionType query string enables the cancellation,
 *    downgrade, or suspension of a subscription.
 *
 *  Likely values for @c deletionType:
 *    @arg @c kGTLRResellerDeletionTypeCancel Cancels the subscription
 *        immediately. This does not apply to a G Suite subscription. (Value:
 *        "cancel")
 *    @arg @c kGTLRResellerDeletionTypeDowngrade Downgrades a G Suite
 *        subscription to a Google Apps Free edition subscription only if the
 *        customer was initially subscribed to a Google Apps Free edition (also
 *        known as the Standard edition). Once downgraded, the customer no
 *        longer has access to the previous G Suite subscription and is no
 *        longer managed by the reseller.
 *        A G Suite subscription's downgrade cannot be invoked if an active or
 *        suspended Google Drive or Google Vault subscription is present. The
 *        Google Drive or Google Vault subscription must be cancelled before the
 *        G Suite subscription's downgrade is invoked.
 *        The downgrade deletionType does not apply to other products or G Suite
 *        SKUs. (Value: "downgrade")
 *    @arg @c kGTLRResellerDeletionTypeSuspend (DEPRECATED) The G Suite account
 *        is suspended for four days and then cancelled. Once suspended, an
 *        administrator has access to the suspended account, but the account
 *        users can not access their services. A suspension can be lifted, using
 *        the reseller tools.
 *        A G Suite subscription's suspension can not be invoked if an active or
 *        suspended Google Drive or Google Vault subscription is present. The
 *        Google Drive or Google Vault subscription must be cancelled before the
 *        G Suite subscription's suspension is invoked. (Value: "suspend")
 *    @arg @c kGTLRResellerDeletionTypeTransferToDirect Transfers a subscription
 *        directly to Google. The customer is immediately transferred to a
 *        direct billing relationship with Google and is given a short amount of
 *        time with no service interruption. The customer can then choose to set
 *        up billing directly with Google by using a credit card, or they can
 *        transfer to another reseller. (Value: "transfer_to_direct")
 *
 *  @return GTLRResellerQuery_SubscriptionsDelete
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                     subscriptionId:(NSString *)subscriptionId
                       deletionType:(NSString *)deletionType;

@end

/**
 *  Get a specific subscription.
 *
 *  Method: reseller.subscriptions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 *    @c kGTLRAuthScopeResellerAppsOrderReadonly
 */
@interface GTLRResellerQuery_SubscriptionsGet : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForSubscriptionsGetWithcustomerId:subscriptionId:]

/**
 *  Either the customer's primary domain name or the customer's unique
 *  identifier. If using the domain name, we do not recommend using a customerId
 *  as a key for persistent data. If the domain name for a customerId is
 *  changed, the Google system automatically updates.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  This is a required property. The subscriptionId is the subscription
 *  identifier and is unique for each customer. Since a subscriptionId changes
 *  when a subscription is updated, we recommend to not use this ID as a key for
 *  persistent data. And the subscriptionId can be found using the retrieve all
 *  reseller subscriptions method.
 */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  Fetches a @c GTLRReseller_Subscription.
 *
 *  Get a specific subscription.
 *
 *  @param customerId Either the customer's primary domain name or the
 *    customer's unique identifier. If using the domain name, we do not
 *    recommend using a customerId as a key for persistent data. If the domain
 *    name for a customerId is changed, the Google system automatically updates.
 *  @param subscriptionId This is a required property. The subscriptionId is the
 *    subscription identifier and is unique for each customer. Since a
 *    subscriptionId changes when a subscription is updated, we recommend to not
 *    use this ID as a key for persistent data. And the subscriptionId can be
 *    found using the retrieve all reseller subscriptions method.
 *
 *  @return GTLRResellerQuery_SubscriptionsGet
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                     subscriptionId:(NSString *)subscriptionId;

@end

/**
 *  Create or transfer a subscription.
 *
 *  Method: reseller.subscriptions.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_SubscriptionsInsert : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForSubscriptionsInsertWithObject:customerId:]

/**
 *  The customerAuthToken query string is required when creating a resold
 *  account that transfers a direct customer's subscription or transfers another
 *  reseller customer's subscription to your reseller management. This is a
 *  hexadecimal authentication token needed to complete the subscription
 *  transfer. For more information, see the administrator help center.
 */
@property(nonatomic, copy, nullable) NSString *customerAuthToken;

/**
 *  Either the customer's primary domain name or the customer's unique
 *  identifier. If using the domain name, we do not recommend using a customerId
 *  as a key for persistent data. If the domain name for a customerId is
 *  changed, the Google system automatically updates.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Fetches a @c GTLRReseller_Subscription.
 *
 *  Create or transfer a subscription.
 *
 *  @param object The @c GTLRReseller_Subscription to include in the query.
 *  @param customerId Either the customer's primary domain name or the
 *    customer's unique identifier. If using the domain name, we do not
 *    recommend using a customerId as a key for persistent data. If the domain
 *    name for a customerId is changed, the Google system automatically updates.
 *
 *  @return GTLRResellerQuery_SubscriptionsInsert
 */
+ (instancetype)queryWithObject:(GTLRReseller_Subscription *)object
                     customerId:(NSString *)customerId;

@end

/**
 *  List of subscriptions managed by the reseller. The list can be all
 *  subscriptions, all of a customer's subscriptions, or all of a customer's
 *  transferable subscriptions.
 *
 *  Method: reseller.subscriptions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 *    @c kGTLRAuthScopeResellerAppsOrderReadonly
 */
@interface GTLRResellerQuery_SubscriptionsList : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForSubscriptionsList]

/**
 *  The customerAuthToken query string is required when creating a resold
 *  account that transfers a direct customer's subscription or transfers another
 *  reseller customer's subscription to your reseller management. This is a
 *  hexadecimal authentication token needed to complete the subscription
 *  transfer. For more information, see the administrator help center.
 */
@property(nonatomic, copy, nullable) NSString *customerAuthToken;

/**
 *  Either the customer's primary domain name or the customer's unique
 *  identifier. If using the domain name, we do not recommend using a customerId
 *  as a key for persistent data. If the domain name for a customerId is
 *  changed, the Google system automatically updates.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  When retrieving all of your subscriptions and filtering for specific
 *  customers, you can enter a prefix for a customer name. Using an example
 *  customer group that includes exam.com, example20.com and example.com:
 *  - exa -- Returns all customer names that start with 'exa' which could
 *  include exam.com, example20.com, and example.com. A name prefix is similar
 *  to using a regular expression's asterisk, exa*.
 *  - example -- Returns example20.com and example.com.
 */
@property(nonatomic, copy, nullable) NSString *customerNamePrefix;

/**
 *  When retrieving a large list, the maxResults is the maximum number of
 *  results per page. The nextPageToken value takes you to the next page. The
 *  default is 20.
 *
 *  @note The documented range is 1..100.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** Token to specify next page in the list */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRReseller_Subscriptions.
 *
 *  List of subscriptions managed by the reseller. The list can be all
 *  subscriptions, all of a customer's subscriptions, or all of a customer's
 *  transferable subscriptions.
 *
 *  @return GTLRResellerQuery_SubscriptionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Immediately move a 30-day free trial subscription to a paid service
 *  subscription.
 *
 *  Method: reseller.subscriptions.startPaidService
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_SubscriptionsStartPaidService : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForSubscriptionsStartPaidServiceWithcustomerId:subscriptionId:]

/**
 *  Either the customer's primary domain name or the customer's unique
 *  identifier. If using the domain name, we do not recommend using a customerId
 *  as a key for persistent data. If the domain name for a customerId is
 *  changed, the Google system automatically updates.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  This is a required property. The subscriptionId is the subscription
 *  identifier and is unique for each customer. Since a subscriptionId changes
 *  when a subscription is updated, we recommend to not use this ID as a key for
 *  persistent data. And the subscriptionId can be found using the retrieve all
 *  reseller subscriptions method.
 */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  Fetches a @c GTLRReseller_Subscription.
 *
 *  Immediately move a 30-day free trial subscription to a paid service
 *  subscription.
 *
 *  @param customerId Either the customer's primary domain name or the
 *    customer's unique identifier. If using the domain name, we do not
 *    recommend using a customerId as a key for persistent data. If the domain
 *    name for a customerId is changed, the Google system automatically updates.
 *  @param subscriptionId This is a required property. The subscriptionId is the
 *    subscription identifier and is unique for each customer. Since a
 *    subscriptionId changes when a subscription is updated, we recommend to not
 *    use this ID as a key for persistent data. And the subscriptionId can be
 *    found using the retrieve all reseller subscriptions method.
 *
 *  @return GTLRResellerQuery_SubscriptionsStartPaidService
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                     subscriptionId:(NSString *)subscriptionId;

@end

/**
 *  Suspends an active subscription.
 *
 *  Method: reseller.subscriptions.suspend
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_SubscriptionsSuspend : GTLRResellerQuery
// Previous library name was
//   +[GTLQueryReseller queryForSubscriptionsSuspendWithcustomerId:subscriptionId:]

/**
 *  Either the customer's primary domain name or the customer's unique
 *  identifier. If using the domain name, we do not recommend using a customerId
 *  as a key for persistent data. If the domain name for a customerId is
 *  changed, the Google system automatically updates.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  This is a required property. The subscriptionId is the subscription
 *  identifier and is unique for each customer. Since a subscriptionId changes
 *  when a subscription is updated, we recommend to not use this ID as a key for
 *  persistent data. And the subscriptionId can be found using the retrieve all
 *  reseller subscriptions method.
 */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  Fetches a @c GTLRReseller_Subscription.
 *
 *  Suspends an active subscription.
 *
 *  @param customerId Either the customer's primary domain name or the
 *    customer's unique identifier. If using the domain name, we do not
 *    recommend using a customerId as a key for persistent data. If the domain
 *    name for a customerId is changed, the Google system automatically updates.
 *  @param subscriptionId This is a required property. The subscriptionId is the
 *    subscription identifier and is unique for each customer. Since a
 *    subscriptionId changes when a subscription is updated, we recommend to not
 *    use this ID as a key for persistent data. And the subscriptionId can be
 *    found using the retrieve all reseller subscriptions method.
 *
 *  @return GTLRResellerQuery_SubscriptionsSuspend
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                     subscriptionId:(NSString *)subscriptionId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
