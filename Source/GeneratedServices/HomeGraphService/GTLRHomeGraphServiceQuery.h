// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   HomeGraph API (homegraph/v1)
// Documentation:
//   https://developers.google.com/actions/smarthome/create-app#request-sync

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRHomeGraphService_QueryRequest;
@class GTLRHomeGraphService_ReportStateAndNotificationRequest;
@class GTLRHomeGraphService_RequestSyncDevicesRequest;
@class GTLRHomeGraphService_SyncRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Home Graph Service query classes.
 */
@interface GTLRHomeGraphServiceQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Unlinks an agent user from Google. As a result, all data related to this
 *  user will be deleted.
 *  Here is how the agent user is created in Google:
 *  1. When a user opens their Google Home App, they can begin linking a 3p
 *  partner.
 *  2. User is guided through the OAuth process.
 *  3. After entering the 3p credentials, Google gets the 3p OAuth token and
 *  uses it to make a Sync call to the 3p partner and gets back all of the
 *  user's data, including `agent_user_id` and devices.
 *  4. Google creates the agent user and stores a mapping from the
 *  `agent_user_id` -> Google ID mapping. Google also
 *  stores all of the user's devices under that Google ID.
 *  The mapping from `agent_user_id` to Google ID is many to many, since one
 *  Google user can have multiple 3p accounts, and multiple Google users can
 *  map to one `agent_user_id` (e.g., a husband and wife share one Nest account
 *  username/password).
 *  The third-party user's identity is passed in as `agent_user_id`.
 *  The agent is identified by the JWT signed by the partner's service account.
 *  Note: Special characters (except "/") in `agent_user_id` must be
 *  URL-encoded.
 *
 *  Method: homegraph.agentUsers.delete
 */
@interface GTLRHomeGraphServiceQuery_AgentUsersDelete : GTLRHomeGraphServiceQuery
// Previous library name was
//   +[GTLQueryHomeGraphService queryForAgentUsersDeleteWithagentUserId:]

/** Required. Third-party user ID. */
@property(nonatomic, copy, nullable) NSString *agentUserId;

/** Request ID used for debugging. */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRHomeGraphService_Empty.
 *
 *  Unlinks an agent user from Google. As a result, all data related to this
 *  user will be deleted.
 *  Here is how the agent user is created in Google:
 *  1. When a user opens their Google Home App, they can begin linking a 3p
 *  partner.
 *  2. User is guided through the OAuth process.
 *  3. After entering the 3p credentials, Google gets the 3p OAuth token and
 *  uses it to make a Sync call to the 3p partner and gets back all of the
 *  user's data, including `agent_user_id` and devices.
 *  4. Google creates the agent user and stores a mapping from the
 *  `agent_user_id` -> Google ID mapping. Google also
 *  stores all of the user's devices under that Google ID.
 *  The mapping from `agent_user_id` to Google ID is many to many, since one
 *  Google user can have multiple 3p accounts, and multiple Google users can
 *  map to one `agent_user_id` (e.g., a husband and wife share one Nest account
 *  username/password).
 *  The third-party user's identity is passed in as `agent_user_id`.
 *  The agent is identified by the JWT signed by the partner's service account.
 *  Note: Special characters (except "/") in `agent_user_id` must be
 *  URL-encoded.
 *
 *  @param agentUserId Required. Third-party user ID.
 *
 *  @return GTLRHomeGraphServiceQuery_AgentUsersDelete
 */
+ (instancetype)queryWithAgentUserId:(NSString *)agentUserId;

@end

/**
 *  Gets the device states for the devices in QueryRequest.
 *  The third-party user's identity is passed in as `agent_user_id`. The agent
 *  is identified by the JWT signed by the third-party partner's service
 *  account.
 *
 *  Method: homegraph.devices.query
 */
@interface GTLRHomeGraphServiceQuery_DevicesQuery : GTLRHomeGraphServiceQuery
// Previous library name was
//   +[GTLQueryHomeGraphService queryForDevicesQueryWithObject:]

/**
 *  Fetches a @c GTLRHomeGraphService_QueryResponse.
 *
 *  Gets the device states for the devices in QueryRequest.
 *  The third-party user's identity is passed in as `agent_user_id`. The agent
 *  is identified by the JWT signed by the third-party partner's service
 *  account.
 *
 *  @param object The @c GTLRHomeGraphService_QueryRequest to include in the
 *    query.
 *
 *  @return GTLRHomeGraphServiceQuery_DevicesQuery
 */
+ (instancetype)queryWithObject:(GTLRHomeGraphService_QueryRequest *)object;

@end

/**
 *  Reports device state and optionally sends device notifications. Called by
 *  an agent when the device state of a third-party changes or the agent wants
 *  to send a notification about the device. See
 *  [Implement Report State](/actions/smarthome/report-state) for more
 *  information.
 *  This method updates a predefined set of states for a device, which all
 *  devices have according to their prescribed traits (for example, a light
 *  will have the [OnOff](/actions/smarthome/traits/onoff) trait that reports
 *  the state `on` as a boolean value).
 *  A new state may not be created and an INVALID_ARGUMENT code will be thrown
 *  if so. It also optionally takes in a list of Notifications that may be
 *  created, which are associated to this state change.
 *  The third-party user's identity is passed in as `agent_user_id`.
 *  The agent is identified by the JWT signed by the partner's service account.
 *
 *  Method: homegraph.devices.reportStateAndNotification
 */
@interface GTLRHomeGraphServiceQuery_DevicesReportStateAndNotification : GTLRHomeGraphServiceQuery
// Previous library name was
//   +[GTLQueryHomeGraphService queryForDevicesReportStateAndNotificationWithObject:]

/**
 *  Fetches a @c GTLRHomeGraphService_ReportStateAndNotificationResponse.
 *
 *  Reports device state and optionally sends device notifications. Called by
 *  an agent when the device state of a third-party changes or the agent wants
 *  to send a notification about the device. See
 *  [Implement Report State](/actions/smarthome/report-state) for more
 *  information.
 *  This method updates a predefined set of states for a device, which all
 *  devices have according to their prescribed traits (for example, a light
 *  will have the [OnOff](/actions/smarthome/traits/onoff) trait that reports
 *  the state `on` as a boolean value).
 *  A new state may not be created and an INVALID_ARGUMENT code will be thrown
 *  if so. It also optionally takes in a list of Notifications that may be
 *  created, which are associated to this state change.
 *  The third-party user's identity is passed in as `agent_user_id`.
 *  The agent is identified by the JWT signed by the partner's service account.
 *
 *  @param object The @c GTLRHomeGraphService_ReportStateAndNotificationRequest
 *    to include in the query.
 *
 *  @return GTLRHomeGraphServiceQuery_DevicesReportStateAndNotification
 */
+ (instancetype)queryWithObject:(GTLRHomeGraphService_ReportStateAndNotificationRequest *)object;

@end

/**
 *  Requests a `SYNC` call from Google to a 3p partner's home control agent for
 *  a user.
 *  The third-party user's identity is passed in as `agent_user_id`
 *  (see RequestSyncDevicesRequest) and forwarded back to the agent.
 *  The agent is identified by the API key or JWT signed by the partner's
 *  service account.
 *
 *  Method: homegraph.devices.requestSync
 */
@interface GTLRHomeGraphServiceQuery_DevicesRequestSync : GTLRHomeGraphServiceQuery
// Previous library name was
//   +[GTLQueryHomeGraphService queryForDevicesRequestSyncWithObject:]

/**
 *  Fetches a @c GTLRHomeGraphService_RequestSyncDevicesResponse.
 *
 *  Requests a `SYNC` call from Google to a 3p partner's home control agent for
 *  a user.
 *  The third-party user's identity is passed in as `agent_user_id`
 *  (see RequestSyncDevicesRequest) and forwarded back to the agent.
 *  The agent is identified by the API key or JWT signed by the partner's
 *  service account.
 *
 *  @param object The @c GTLRHomeGraphService_RequestSyncDevicesRequest to
 *    include in the query.
 *
 *  @return GTLRHomeGraphServiceQuery_DevicesRequestSync
 */
+ (instancetype)queryWithObject:(GTLRHomeGraphService_RequestSyncDevicesRequest *)object;

@end

/**
 *  Gets all the devices associated with the given third-party user.
 *  The third-party user's identity is passed in as `agent_user_id`. The agent
 *  is identified by the JWT signed by the third-party partner's service
 *  account.
 *
 *  Method: homegraph.devices.sync
 */
@interface GTLRHomeGraphServiceQuery_DevicesSync : GTLRHomeGraphServiceQuery
// Previous library name was
//   +[GTLQueryHomeGraphService queryForDevicesSyncWithObject:]

/**
 *  Fetches a @c GTLRHomeGraphService_SyncResponse.
 *
 *  Gets all the devices associated with the given third-party user.
 *  The third-party user's identity is passed in as `agent_user_id`. The agent
 *  is identified by the JWT signed by the third-party partner's service
 *  account.
 *
 *  @param object The @c GTLRHomeGraphService_SyncRequest to include in the
 *    query.
 *
 *  @return GTLRHomeGraphServiceQuery_DevicesSync
 */
+ (instancetype)queryWithObject:(GTLRHomeGraphService_SyncRequest *)object;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
