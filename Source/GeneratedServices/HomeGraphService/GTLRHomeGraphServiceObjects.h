// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   HomeGraph API (homegraph/v1)
// Documentation:
//   https://developers.google.com/actions/smarthome/create-app#request-sync

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRHomeGraphService_AgentDeviceId;
@class GTLRHomeGraphService_AgentOtherDeviceId;
@class GTLRHomeGraphService_Device;
@class GTLRHomeGraphService_Device_Attributes;
@class GTLRHomeGraphService_Device_CustomData;
@class GTLRHomeGraphService_DeviceInfo;
@class GTLRHomeGraphService_DeviceNames;
@class GTLRHomeGraphService_QueryRequestInput;
@class GTLRHomeGraphService_QueryRequestPayload;
@class GTLRHomeGraphService_QueryResponsePayload;
@class GTLRHomeGraphService_QueryResponsePayload_Devices;
@class GTLRHomeGraphService_QueryResponsePayload_Devices_Device;
@class GTLRHomeGraphService_ReportStateAndNotificationDevice;
@class GTLRHomeGraphService_ReportStateAndNotificationDevice_Notifications;
@class GTLRHomeGraphService_ReportStateAndNotificationDevice_States;
@class GTLRHomeGraphService_StateAndNotificationPayload;
@class GTLRHomeGraphService_SyncResponsePayload;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Third-party partner's device ID for one device.
 */
@interface GTLRHomeGraphService_AgentDeviceId : GTLRObject

/**
 *  Third-party partner's device ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  Identifies a device in the third party or first party system.
 */
@interface GTLRHomeGraphService_AgentOtherDeviceId : GTLRObject

/** The agent's ID. Generally it is the agent's AoG project id. */
@property(nonatomic, copy, nullable) NSString *agentId;

/** Device ID defined by the agent. The device_id must be unique. */
@property(nonatomic, copy, nullable) NSString *deviceId;

@end


/**
 *  Third-party partner's device definition.
 */
@interface GTLRHomeGraphService_Device : GTLRObject

/** Attributes for the traits supported by the device. */
@property(nonatomic, strong, nullable) GTLRHomeGraphService_Device_Attributes *attributes;

/**
 *  Custom JSON data provided by the manufacturer and attached to QUERY and
 *  EXECUTE requests in AoG.
 */
@property(nonatomic, strong, nullable) GTLRHomeGraphService_Device_CustomData *customData;

/** Device manufacturer, model, hardware version, and software version. */
@property(nonatomic, strong, nullable) GTLRHomeGraphService_DeviceInfo *deviceInfo;

/**
 *  Third-party partner's device ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Name of the device given by the third party. This includes names given to
 *  the device via third party device manufacturer's app, model names for the
 *  device, etc.
 */
@property(nonatomic, strong, nullable) GTLRHomeGraphService_DeviceNames *name;

/**
 *  Indicates whether the device is capable of sending notifications. This
 *  field will be set by the agent (partner) on an incoming SYNC. If a device
 *  is not capable of generating notifications, the partner should set this
 *  flag to false. If a partner is not capable of calling
 *  ReportStateAndNotification to send notifications to Google, the partner
 *  should set this flag to false. If there is a user setting in the partner
 *  app to enable notifications and it is turned off, the partner should set
 *  this flag to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *notificationSupportedByAgent;

/**
 *  IDs of other devices associated with this device. This is used to
 *  represent a device group (e.g. bonded zone) or "facets" synced
 *  through different flows (e.g. Google Nest Hub Max with a Nest Camera).
 *  This may also be used to pass in alternate IDs used to identify a cloud
 *  synced device for local execution (i.e. local verification). If used for
 *  local verification, this field is synced from the cloud.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHomeGraphService_AgentOtherDeviceId *> *otherDeviceIds;

/**
 *  If the third-party partner's cloud configuration includes placing devices
 *  in rooms, the name of the room can be provided here.
 */
@property(nonatomic, copy, nullable) NSString *roomHint;

/**
 *  As in roomHint, for structures that users set up in the partner's system.
 */
@property(nonatomic, copy, nullable) NSString *structureHint;

/** Traits supported by the device. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *traits;

/** Hardware type of the device (e.g. light, outlet, etc). */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Indicates whether the state of this device is being reported to Google
 *  through ReportStateAndNotification call.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *willReportState;

@end


/**
 *  Attributes for the traits supported by the device.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRHomeGraphService_Device_Attributes : GTLRObject
@end


/**
 *  Custom JSON data provided by the manufacturer and attached to QUERY and
 *  EXECUTE requests in AoG.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRHomeGraphService_Device_CustomData : GTLRObject
@end


/**
 *  Device information.
 */
@interface GTLRHomeGraphService_DeviceInfo : GTLRObject

/** Device hardware version. */
@property(nonatomic, copy, nullable) NSString *hwVersion;

/** Device manufacturer. */
@property(nonatomic, copy, nullable) NSString *manufacturer;

/** Device model. */
@property(nonatomic, copy, nullable) NSString *model;

/** Device software version. */
@property(nonatomic, copy, nullable) NSString *swVersion;

@end


/**
 *  Different names for the device.
 */
@interface GTLRHomeGraphService_DeviceNames : GTLRObject

/**
 *  List of names provided by the partner rather than the user, often
 *  manufacturer names, SKUs, etc.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *defaultNames;

/** Primary name of the device, generally provided by the user. */
@property(nonatomic, copy, nullable) NSString *name;

/** Additional names provided by the user for the device. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *nicknames;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRHomeGraphService_Empty : GTLRObject
@end


/**
 *  Request type for the
 *  [`Query`](#google.home.graph.v1.HomeGraphApiService.Query) call. This should
 *  be the same format as the Actions on Google `action.devices.QUERY`
 *  [request](/actions/smarthome/create-app#actiondevicesquery) with the
 *  exception of the extra `agent_user_id` and no `intent` and `customData`
 *  fields.
 */
@interface GTLRHomeGraphService_QueryRequest : GTLRObject

/** Required. Third-party user ID. */
@property(nonatomic, copy, nullable) NSString *agentUserId;

/**
 *  Required. Inputs containing third-party partner's device IDs for which to
 *  get the device states.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHomeGraphService_QueryRequestInput *> *inputs;

/** Request ID used for debugging. */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Device ID inputs to QueryRequest.
 */
@interface GTLRHomeGraphService_QueryRequestInput : GTLRObject

/** Payload containing third-party partner's device IDs. */
@property(nonatomic, strong, nullable) GTLRHomeGraphService_QueryRequestPayload *payload;

@end


/**
 *  Payload containing device IDs.
 */
@interface GTLRHomeGraphService_QueryRequestPayload : GTLRObject

/** Third-party partner's device IDs for which to get the device states. */
@property(nonatomic, strong, nullable) NSArray<GTLRHomeGraphService_AgentDeviceId *> *devices;

@end


/**
 *  Response type for the
 *  [`Query`](#google.home.graph.v1.HomeGraphApiService.Query) call. This should
 *  follow the same format as the Actions on Google `action.devices.QUERY`
 *  [response](/actions/smarthome/create-app#actiondevicesquery).
 *  # Example
 *  ```json
 *  {
 *  "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf",
 *  "payload": {
 *  "devices": {
 *  "123": {
 *  "on": true,
 *  "online": true
 *  },
 *  "456": {
 *  "on": true,
 *  "online": true,
 *  "brightness": 80,
 *  "color": {
 *  "name": "cerulean",
 *  "spectrumRGB": 31655
 *  }
 *  }
 *  }
 *  }
 *  }
 *  ```
 */
@interface GTLRHomeGraphService_QueryResponse : GTLRObject

/** Device states for the devices given in the request. */
@property(nonatomic, strong, nullable) GTLRHomeGraphService_QueryResponsePayload *payload;

/** Request ID used for debugging. Copied from the request. */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Payload containing device states information.
 */
@interface GTLRHomeGraphService_QueryResponsePayload : GTLRObject

/**
 *  States of the devices. Map of third-party device ID to struct of device
 *  states.
 */
@property(nonatomic, strong, nullable) GTLRHomeGraphService_QueryResponsePayload_Devices *devices;

@end


/**
 *  States of the devices. Map of third-party device ID to struct of device
 *  states.
 *
 *  @note This class is documented as having more properties of
 *        GTLRHomeGraphService_QueryResponsePayload_Devices_Device. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRHomeGraphService_QueryResponsePayload_Devices : GTLRObject
@end


/**
 *  GTLRHomeGraphService_QueryResponsePayload_Devices_Device
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRHomeGraphService_QueryResponsePayload_Devices_Device : GTLRObject
@end


/**
 *  The states and notifications specific to a device.
 */
@interface GTLRHomeGraphService_ReportStateAndNotificationDevice : GTLRObject

/** Notifications metadata for devices. */
@property(nonatomic, strong, nullable) GTLRHomeGraphService_ReportStateAndNotificationDevice_Notifications *notifications;

/** States of devices to update. */
@property(nonatomic, strong, nullable) GTLRHomeGraphService_ReportStateAndNotificationDevice_States *states;

@end


/**
 *  Notifications metadata for devices.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRHomeGraphService_ReportStateAndNotificationDevice_Notifications : GTLRObject
@end


/**
 *  States of devices to update.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRHomeGraphService_ReportStateAndNotificationDevice_States : GTLRObject
@end


/**
 *  Request type for the
 *  [`ReportStateAndNotification`](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification)
 *  call. It may include States, Notifications, or both. This request uses
 *  globally unique flattened state names instead of namespaces based on traits
 *  to align with the existing QUERY and EXECUTE APIs implemented by 90+ Smart
 *  Home partners. States and notifications are defined per `device_id` (for
 *  example, "123"
 *  and "456" in the following example). # Example
 *  ```json
 *  {
 *  "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf",
 *  "agentUserId": "1234",
 *  "payload": {
 *  "devices": {
 *  "states": {
 *  "123": {
 *  "on": true
 *  },
 *  "456": {
 *  "on": true,
 *  "brightness": 10
 *  }
 *  },
 *  }
 *  }
 *  }
 *  ```
 */
@interface GTLRHomeGraphService_ReportStateAndNotificationRequest : GTLRObject

/** Required. Third-party user ID. */
@property(nonatomic, copy, nullable) NSString *agentUserId;

/** Unique identifier per event (for example, a doorbell press). */
@property(nonatomic, copy, nullable) NSString *eventId;

/** Token to maintain state in the follow up notification response. */
@property(nonatomic, copy, nullable) NSString *followUpToken;

/**
 *  Required. State of devices to update and notification metadata for devices.
 *  For
 *  example, if a user turns a light on manually, a state update should be
 *  sent so that the information is always the current status of the device.
 *  Notifications are independent from the state and its piece of the payload
 *  should contain everything necessary to notify the user. Although it may be
 *  related to a state change, it does not need to be. For example, if a
 *  device can turn on/off and change temperature, the states reported would
 *  include both "on" and "70 degrees" but the 3p may choose not to send any
 *  notification for that, or to only say that the "the room is heating up",
 *  keeping state and notification independent.
 */
@property(nonatomic, strong, nullable) GTLRHomeGraphService_StateAndNotificationPayload *payload;

/** Request ID used for debugging. */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Response type for the
 *  [`ReportStateAndNotification`](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification)
 *  call.
 */
@interface GTLRHomeGraphService_ReportStateAndNotificationResponse : GTLRObject

/** Request ID copied from ReportStateAndNotificationRequest. */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Request type for the
 *  [`RequestSyncDevices`](#google.home.graph.v1.HomeGraphApiService.RequestSyncDevices)
 *  call.
 */
@interface GTLRHomeGraphService_RequestSyncDevicesRequest : GTLRObject

/**
 *  Required. Third-party user ID issued by agent's third-party identity
 *  provider.
 */
@property(nonatomic, copy, nullable) NSString *agentUserId;

/**
 *  Optional. If set, the request will be added to a queue and a response will
 *  be returned immediately. The queue allows for de-duplication of
 *  simultaneous requests.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *async;

@end


/**
 *  Response type for the
 *  [`RequestSyncDevices`](#google.home.graph.v1.HomeGraphApiService.RequestSyncDevices)
 *  call. Intentionally empty upon success. An HTTP response code is returned
 *  with more details upon failure.
 */
@interface GTLRHomeGraphService_RequestSyncDevicesResponse : GTLRObject
@end


/**
 *  Payload containing the state and notification information for devices.
 */
@interface GTLRHomeGraphService_StateAndNotificationPayload : GTLRObject

/** The devices for updating state and sending notifications. */
@property(nonatomic, strong, nullable) GTLRHomeGraphService_ReportStateAndNotificationDevice *devices;

@end


/**
 *  Request type for the
 *  [`Sync`](#google.home.graph.v1.HomeGraphApiService.Sync)
 *  call. This should follow the same format as the Actions on Google
 *  `action.devices.SYNC`
 *  [request](/actions/smarthome/create-app#actiondevicessync) with the
 *  exception
 *  of the extra `agent_user_id` and no `intent` field.
 */
@interface GTLRHomeGraphService_SyncRequest : GTLRObject

/** Required. Third-party user ID. */
@property(nonatomic, copy, nullable) NSString *agentUserId;

/** Request ID used for debugging. */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Response type for the
 *  [`Sync`](#google.home.graph.v1.HomeGraphApiService.Sync) call. This should
 *  follow the same format as the Actions on Google `action.devices.SYNC`
 *  [response](/actions/smarthome/create-app#actiondevicessync).
 *  # Example
 *  ```json
 *  {
 *  "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf",
 *  "payload": {
 *  "agentUserId": "1836.15267389",
 *  "devices": [{
 *  "id": "123",
 *  "type": "action.devices.types.OUTLET",
 *  "traits": [
 *  "action.devices.traits.OnOff"
 *  ],
 *  "name": {
 *  "defaultNames": ["My Outlet 1234"],
 *  "name": "Night light",
 *  "nicknames": ["wall plug"]
 *  },
 *  "willReportState": false,
 *  "deviceInfo": {
 *  "manufacturer": "lights-out-inc",
 *  "model": "hs1234",
 *  "hwVersion": "3.2",
 *  "swVersion": "11.4"
 *  },
 *  "customData": {
 *  "fooValue": 74,
 *  "barValue": true,
 *  "bazValue": "foo"
 *  }
 *  }]
 *  }
 *  }
 *  ```
 */
@interface GTLRHomeGraphService_SyncResponse : GTLRObject

/** Devices associated with the third-party user. */
@property(nonatomic, strong, nullable) GTLRHomeGraphService_SyncResponsePayload *payload;

/** Request ID used for debugging. Copied from the request. */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Payload containing device information.
 */
@interface GTLRHomeGraphService_SyncResponsePayload : GTLRObject

/** Third-party user ID */
@property(nonatomic, copy, nullable) NSString *agentUserId;

/** Devices associated with the third-party user. */
@property(nonatomic, strong, nullable) NSArray<GTLRHomeGraphService_Device *> *devices;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
