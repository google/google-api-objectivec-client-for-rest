// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Service Control API (servicecontrol/v1)
// Description:
//   Provides control plane functionality to managed services, such as logging,
//   monitoring, and status checks.
// Documentation:
//   https://cloud.google.com/service-control/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRServiceControl_AllocateInfo;
@class GTLRServiceControl_AuditLog_Metadata;
@class GTLRServiceControl_AuditLog_Request;
@class GTLRServiceControl_AuditLog_ResourceOriginalState;
@class GTLRServiceControl_AuditLog_Response;
@class GTLRServiceControl_AuditLog_ServiceData;
@class GTLRServiceControl_Auth;
@class GTLRServiceControl_Auth_Claims;
@class GTLRServiceControl_AuthenticationInfo;
@class GTLRServiceControl_AuthenticationInfo_ThirdPartyPrincipal;
@class GTLRServiceControl_AuthorizationInfo;
@class GTLRServiceControl_CheckError;
@class GTLRServiceControl_CheckInfo;
@class GTLRServiceControl_ConsumerInfo;
@class GTLRServiceControl_Distribution;
@class GTLRServiceControl_ExplicitBuckets;
@class GTLRServiceControl_ExponentialBuckets;
@class GTLRServiceControl_HttpRequest;
@class GTLRServiceControl_LinearBuckets;
@class GTLRServiceControl_LogEntry;
@class GTLRServiceControl_LogEntry_Labels;
@class GTLRServiceControl_LogEntry_ProtoPayload;
@class GTLRServiceControl_LogEntry_StructPayload;
@class GTLRServiceControl_LogEntryOperation;
@class GTLRServiceControl_MetricValue;
@class GTLRServiceControl_MetricValue_Labels;
@class GTLRServiceControl_MetricValueSet;
@class GTLRServiceControl_Money;
@class GTLRServiceControl_Operation;
@class GTLRServiceControl_Operation_Labels;
@class GTLRServiceControl_Operation_UserLabels;
@class GTLRServiceControl_Peer;
@class GTLRServiceControl_Peer_Labels;
@class GTLRServiceControl_QuotaError;
@class GTLRServiceControl_QuotaInfo;
@class GTLRServiceControl_QuotaInfo_QuotaConsumed;
@class GTLRServiceControl_QuotaOperation;
@class GTLRServiceControl_QuotaOperation_Labels;
@class GTLRServiceControl_QuotaProperties;
@class GTLRServiceControl_ReportError;
@class GTLRServiceControl_ReportInfo;
@class GTLRServiceControl_Request;
@class GTLRServiceControl_Request_Headers;
@class GTLRServiceControl_RequestMetadata;
@class GTLRServiceControl_Resource;
@class GTLRServiceControl_Resource_Labels;
@class GTLRServiceControl_ResourceInfo;
@class GTLRServiceControl_ResourceLocation;
@class GTLRServiceControl_Status;
@class GTLRServiceControl_Status_Details_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRServiceControl_CheckError.code

/**
 *  The consumer has been flagged as an abuser.
 *
 *  Value: "ABUSER_DETECTED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_AbuserDetected;
/**
 *  The consumer's API Key has expired.
 *
 *  Value: "API_KEY_EXPIRED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_ApiKeyExpired;
/**
 *  The consumer's API key is invalid.
 *
 *  Value: "API_KEY_INVALID"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_ApiKeyInvalid;
/**
 *  The consumer's API Key was not found in config record.
 *
 *  Value: "API_KEY_NOT_FOUND"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_ApiKeyNotFound;
/**
 *  The API targeted by this request is invalid for the specified consumer
 *  project.
 *
 *  Value: "API_TARGET_BLOCKED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_ApiTargetBlocked;
/**
 *  The consumer cannot access the service because billing is disabled.
 *
 *  Value: "BILLING_DISABLED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_BillingDisabled;
/**
 *  The backend server for checking billing status is unavailable.
 *
 *  Value: "BILLING_STATUS_UNAVAILABLE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_BillingStatusUnavailable;
/**
 *  Budget check failed.
 *
 *  Value: "BUDGET_EXCEEDED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_BudgetExceeded;
/**
 *  The client application of the consumer request is invalid for the
 *  specific consumer project.
 *
 *  Value: "CLIENT_APP_BLOCKED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_ClientAppBlocked;
/**
 *  Cloud Resource Manager backend server is unavailable.
 *
 *  Value: "CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_CloudResourceManagerBackendUnavailable;
/**
 *  The input consumer info does not represent a valid consumer folder or
 *  organization.
 *
 *  Value: "CONSUMER_INVALID"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_ConsumerInvalid;
/**
 *  The consumer's request has been flagged as a DoS attack.
 *
 *  Value: "DENIAL_OF_SERVICE_DETECTED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_DenialOfServiceDetected;
/**
 *  This is never used in `CheckResponse`.
 *
 *  Value: "ERROR_CODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_ErrorCodeUnspecified;
/**
 *  The credential in the request can not be verified.
 *
 *  Value: "INVALID_CREDENTIAL"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_InvalidCredential;
/**
 *  The IP address of the consumer is invalid for the specific consumer
 *  project.
 *
 *  Value: "IP_ADDRESS_BLOCKED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_IpAddressBlocked;
/**
 *  The consumer's request should be rejected in order to protect the service
 *  from being overloaded.
 *
 *  Value: "LOAD_SHEDDING"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_LoadShedding;
/**
 *  The consumer's LOAS project is not `ACTIVE` in LoquatV2.
 *
 *  Value: "LOAS_PROJECT_DISABLED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_LoasProjectDisabled;
/**
 *  The Spanner for looking up LOAS project is unavailable.
 *
 *  Value: "LOAS_PROJECT_LOOKUP_UNAVAILABLE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_LoasProjectLookupUnavailable;
/**
 *  The consumer's LOAS role is invalid.
 *
 *  Value: "LOAS_ROLE_INVALID"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_LoasRoleInvalid;
/**
 *  Backend server for evaluating location policy is unavailable.
 *
 *  Value: "LOCATION_POLICY_BACKEND_UNAVAILABLE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_LocationPolicyBackendUnavailable;
/**
 *  Request is not allowed as per location policies defined in Org Policy.
 *
 *  Value: "LOCATION_POLICY_VIOLATED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_LocationPolicyViolated;
/**
 *  The backend server for looking up project id/number is unavailable.
 *
 *  Value: "NAMESPACE_LOOKUP_UNAVAILABLE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_NamespaceLookupUnavailable;
/**
 *  The consumer's LOAS role has no associated project.
 *
 *  Value: "NO_LOAS_PROJECT"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_NoLoasProject;
/**
 *  The consumer's project id, network container, or resource container was
 *  not found. Same as google.rpc.Code.NOT_FOUND.
 *
 *  Value: "NOT_FOUND"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_NotFound;
/**
 *  The consumer doesn't have access to the specified resource.
 *  Same as google.rpc.Code.PERMISSION_DENIED.
 *
 *  Value: "PERMISSION_DENIED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_PermissionDenied;
/**
 *  The consumer's project has been marked as deleted (soft deletion).
 *
 *  Value: "PROJECT_DELETED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_ProjectDeleted;
/**
 *  The consumer's project number or id does not represent a valid project.
 *
 *  Value: "PROJECT_INVALID"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_ProjectInvalid;
/**
 *  The backend server for checking quota limits is unavailable.
 *
 *  Value: "QUOTA_CHECK_UNAVAILABLE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_QuotaCheckUnavailable;
/**
 *  The referer address of the consumer request is invalid for the specific
 *  consumer project.
 *
 *  Value: "REFERER_BLOCKED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_RefererBlocked;
/**
 *  Quota check failed. Same as google.rpc.Code.RESOURCE_EXHAUSTED.
 *
 *  Value: "RESOURCE_EXHAUSTED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_ResourceExhausted;
/**
 *  NOTE: for customers in the scope of Beta/GA of
 *  https://cloud.google.com/vpc-service-controls, this error
 *  is no longer returned. If the security backend is unavailable, rpc
 *  UNAVAILABLE status will be returned instead. It should be ignored and
 *  should not be used to reject client requests.
 *
 *  Value: "SECURITY_POLICY_BACKEND_UNAVAILABLE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_SecurityPolicyBackendUnavailable;
/**
 *  Request is not allowed as per security policies defined in Org Policy.
 *
 *  Value: "SECURITY_POLICY_VIOLATED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_SecurityPolicyViolated;
/**
 *  The consumer hasn't activated the service.
 *
 *  Value: "SERVICE_NOT_ACTIVATED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_ServiceNotActivated;
/**
 *  The backend server for checking service status is unavailable.
 *
 *  Value: "SERVICE_STATUS_UNAVAILABLE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_ServiceStatusUnavailable;
/**
 *  The consumer's spatula header is invalid.
 *
 *  Value: "SPATULA_HEADER_INVALID"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_SpatulaHeaderInvalid;
/**
 *  The consumer cannot access the service due to visibility configuration.
 *
 *  Value: "VISIBILITY_DENIED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_CheckError_Code_VisibilityDenied;

// ----------------------------------------------------------------------------
// GTLRServiceControl_ConsumerInfo.type

/** Value: "CONSUMER_TYPE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRServiceControl_ConsumerInfo_Type_ConsumerTypeUnspecified;
/** Value: "FOLDER" */
GTLR_EXTERN NSString * const kGTLRServiceControl_ConsumerInfo_Type_Folder;
/** Value: "ORGANIZATION" */
GTLR_EXTERN NSString * const kGTLRServiceControl_ConsumerInfo_Type_Organization;
/** Value: "PROJECT" */
GTLR_EXTERN NSString * const kGTLRServiceControl_ConsumerInfo_Type_Project;

// ----------------------------------------------------------------------------
// GTLRServiceControl_LogEntry.severity

/**
 *  (700) A person must take an action immediately.
 *
 *  Value: "ALERT"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_LogEntry_Severity_Alert;
/**
 *  (600) Critical events cause more severe problems or outages.
 *
 *  Value: "CRITICAL"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_LogEntry_Severity_Critical;
/**
 *  (100) Debug or trace information.
 *
 *  Value: "DEBUG"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_LogEntry_Severity_Debug;
/**
 *  (0) The log entry has no assigned severity level.
 *
 *  Value: "DEFAULT"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_LogEntry_Severity_Default;
/**
 *  (800) One or more systems are unusable.
 *
 *  Value: "EMERGENCY"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_LogEntry_Severity_Emergency;
/**
 *  (500) Error events are likely to cause problems.
 *
 *  Value: "ERROR"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_LogEntry_Severity_Error;
/**
 *  (200) Routine information, such as ongoing status or performance.
 *
 *  Value: "INFO"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_LogEntry_Severity_Info;
/**
 *  (300) Normal but significant events, such as start up, shut down, or
 *  a configuration change.
 *
 *  Value: "NOTICE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_LogEntry_Severity_Notice;
/**
 *  (400) Warning events might cause problems.
 *
 *  Value: "WARNING"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_LogEntry_Severity_Warning;

// ----------------------------------------------------------------------------
// GTLRServiceControl_Operation.importance

/**
 *  In addition to the behavior described in HIGH, DEBUG enables
 *  additional validation logic that is only useful during the onboarding
 *  process. This is only available to Google internal services and
 *  the service must be whitelisted by chemist-dev\@google.com in order
 *  to use this level.
 *
 *  Value: "DEBUG"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_Operation_Importance_Debug;
/**
 *  The API implementation doesn't cache and aggregate the data.
 *  If the method returns successfully, it's guaranteed that the data has
 *  been persisted in durable storage.
 *
 *  Value: "HIGH"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_Operation_Importance_High;
/**
 *  The API implementation may cache and aggregate the data.
 *  The data may be lost when rare and unexpected system failures occur.
 *
 *  Value: "LOW"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_Operation_Importance_Low;

// ----------------------------------------------------------------------------
// GTLRServiceControl_QuotaError.code

/**
 *  Specified API Key has expired.
 *
 *  Value: "API_KEY_EXPIRED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaError_Code_ApiKeyExpired;
/**
 *  Specified API key is invalid.
 *
 *  Value: "API_KEY_INVALID"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaError_Code_ApiKeyInvalid;
/**
 *  Consumer cannot access the service because the service requires active
 *  billing.
 *
 *  Value: "BILLING_NOT_ACTIVE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaError_Code_BillingNotActive;
/**
 *  The backend server for checking billing status is unavailable.
 *
 *  Value: "BILLING_STATUS_UNAVAILABLE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaError_Code_BillingStatusUnavailable;
/**
 *  The consumer's LOAS role is invalid.
 *
 *  Value: "LOAS_ROLE_INVALID"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaError_Code_LoasRoleInvalid;
/**
 *  The consumer's LOAS role has no associated project.
 *
 *  Value: "NO_LOAS_PROJECT"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaError_Code_NoLoasProject;
/**
 *  Quota release failed. This error is ONLY returned on a NORMAL release.
 *  More formally: if a user requests a release of 10 tokens, but only
 *  5 tokens were previously allocated, in a BEST_EFFORT release, this will
 *  be considered a success, 5 tokens will be released, and the result will
 *  be "Ok". If this is done in NORMAL mode, no tokens will be released,
 *  and an OUT_OF_RANGE error will be returned.
 *  Same as google.rpc.Code.OUT_OF_RANGE.
 *
 *  Value: "OUT_OF_RANGE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaError_Code_OutOfRange;
/**
 *  Consumer's project has been marked as deleted (soft deletion).
 *
 *  Value: "PROJECT_DELETED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaError_Code_ProjectDeleted;
/**
 *  The backend server for looking up project id/number is unavailable.
 *
 *  Value: "PROJECT_STATUS_UNAVAILABLE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaError_Code_ProjectStatusUnavailable;
/**
 *  The backend server for checking quota limits is unavailable.
 *
 *  Value: "QUOTA_SYSTEM_UNAVAILABLE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaError_Code_QuotaSystemUnavailable;
/**
 *  Quota allocation failed.
 *  Same as google.rpc.Code.RESOURCE_EXHAUSTED.
 *
 *  Value: "RESOURCE_EXHAUSTED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaError_Code_ResourceExhausted;
/**
 *  The backend server for checking service status is unavailable.
 *
 *  Value: "SERVICE_STATUS_UNAVAILABLE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaError_Code_ServiceStatusUnavailable;
/**
 *  Consumer's spatula header is invalid.
 *
 *  Value: "SPATULA_HEADER_INVALID"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaError_Code_SpatulaHeaderInvalid;
/**
 *  This is never used.
 *
 *  Value: "UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaError_Code_Unspecified;

// ----------------------------------------------------------------------------
// GTLRServiceControl_QuotaOperation.quotaMode

/**
 *  The operation allocates quota for the amount specified in the service
 *  configuration or specified using the quota metrics. If the amount is
 *  higher than the available quota, request does not fail but all available
 *  quota will be allocated.
 *
 *  Value: "BEST_EFFORT"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaOperation_QuotaMode_BestEffort;
/**
 *  For AllocateQuota request, only checks if there is enough quota
 *  available and does not change the available quota. No lock is placed on
 *  the available quota either.
 *
 *  Value: "CHECK_ONLY"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaOperation_QuotaMode_CheckOnly;
/**
 *  For AllocateQuota request, allocates quota for the amount specified in
 *  the service configuration or specified using the quota metrics. If the
 *  amount is higher than the available quota, allocation error will be
 *  returned and no quota will be allocated.
 *  If multiple quotas are part of the request, and one fails, none of the
 *  quotas are allocated or released.
 *
 *  Value: "NORMAL"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaOperation_QuotaMode_Normal;
/**
 *  Guard against implicit default. Must not be used.
 *
 *  Value: "UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaOperation_QuotaMode_Unspecified;

// ----------------------------------------------------------------------------
// GTLRServiceControl_QuotaProperties.quotaMode

/**
 *  Decreases available quota by the cost specified for the operation.
 *  If cost is higher than available quota, operation fails and returns
 *  error.
 *
 *  Value: "ACQUIRE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaProperties_QuotaMode_Acquire;
/**
 *  Decreases available quota by the cost specified for the operation.
 *  If cost is higher than available quota, operation does not fail and
 *  available quota goes down to zero but it returns error.
 *
 *  Value: "ACQUIRE_BEST_EFFORT"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaProperties_QuotaMode_AcquireBestEffort;
/**
 *  Does not change any available quota. Only checks if there is enough
 *  quota.
 *  No lock is placed on the checked tokens neither.
 *
 *  Value: "CHECK"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaProperties_QuotaMode_Check;
/**
 *  Increases available quota by the operation cost specified for the
 *  operation.
 *
 *  Value: "RELEASE"
 */
GTLR_EXTERN NSString * const kGTLRServiceControl_QuotaProperties_QuotaMode_Release;

/**
 *  GTLRServiceControl_AllocateInfo
 */
@interface GTLRServiceControl_AllocateInfo : GTLRObject

/**
 *  A list of label keys that were unused by the server in processing the
 *  request. Thus, for similar requests repeated in a certain future time
 *  window, the caller can choose to ignore these labels in the requests
 *  to achieve better client-side cache hits and quota aggregation.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unusedArguments;

@end


/**
 *  Request message for the AllocateQuota method.
 */
@interface GTLRServiceControl_AllocateQuotaRequest : GTLRObject

/** Operation that describes the quota allocation. */
@property(nonatomic, strong, nullable) GTLRServiceControl_QuotaOperation *allocateOperation;

/**
 *  Specifies which version of service configuration should be used to process
 *  the request. If unspecified or no matching version can be found, the latest
 *  one will be used.
 */
@property(nonatomic, copy, nullable) NSString *serviceConfigId;

@end


/**
 *  Response message for the AllocateQuota method.
 */
@interface GTLRServiceControl_AllocateQuotaResponse : GTLRObject

/** Indicates the decision of the allocate. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceControl_QuotaError *> *allocateErrors;

/** WARNING: DO NOT use this field until this warning message is removed. */
@property(nonatomic, strong, nullable) GTLRServiceControl_AllocateInfo *allocateInfo;

/**
 *  The same operation_id value used in the AllocateQuotaRequest. Used for
 *  logging and diagnostics purposes.
 */
@property(nonatomic, copy, nullable) NSString *operationId;

/**
 *  Quota metrics to indicate the result of allocation. Depending on the
 *  request, one or more of the following metrics will be included:
 *  1. Per quota group or per quota metric incremental usage will be specified
 *  using the following delta metric :
 *  "serviceruntime.googleapis.com/api/consumer/quota_used_count"
 *  2. The quota limit reached condition will be specified using the following
 *  boolean metric :
 *  "serviceruntime.googleapis.com/quota/exceeded"
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceControl_MetricValueSet *> *quotaMetrics;

/** ID of the actual config used to process the request. */
@property(nonatomic, copy, nullable) NSString *serviceConfigId;

@end


/**
 *  Common audit log format for Google Cloud Platform API operations.
 */
@interface GTLRServiceControl_AuditLog : GTLRObject

/** Authentication information. */
@property(nonatomic, strong, nullable) GTLRServiceControl_AuthenticationInfo *authenticationInfo;

/**
 *  Authorization information. If there are multiple
 *  resources or permissions involved, then there is
 *  one AuthorizationInfo element for each {resource, permission} tuple.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceControl_AuthorizationInfo *> *authorizationInfo;

/**
 *  Other service-specific data about the request, response, and other
 *  information associated with the current audited event.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_AuditLog_Metadata *metadata;

/**
 *  The name of the service method or operation.
 *  For API calls, this should be the name of the API method.
 *  For example,
 *  "google.datastore.v1.Datastore.RunQuery"
 *  "google.logging.v1.LoggingService.DeleteLog"
 */
@property(nonatomic, copy, nullable) NSString *methodName;

/**
 *  The number of items returned from a List or Query API method,
 *  if applicable.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numResponseItems;

/**
 *  The operation request. This may not include all request parameters,
 *  such as those that are too large, privacy-sensitive, or duplicated
 *  elsewhere in the log record.
 *  It should never include user-generated data, such as file contents.
 *  When the JSON object represented here has a proto equivalent, the proto
 *  name will be indicated in the `\@type` property.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_AuditLog_Request *request;

/** Metadata about the operation. */
@property(nonatomic, strong, nullable) GTLRServiceControl_RequestMetadata *requestMetadata;

/** The resource location information. */
@property(nonatomic, strong, nullable) GTLRServiceControl_ResourceLocation *resourceLocation;

/**
 *  The resource or collection that is the target of the operation.
 *  The name is a scheme-less URI, not including the API service name.
 *  For example:
 *  "shelves/SHELF_ID/books"
 *  "shelves/SHELF_ID/books/BOOK_ID"
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  The resource's original state before mutation. Present only for
 *  operations which have successfully modified the targeted resource(s).
 *  In general, this field should contain all changed fields, except those
 *  that are already been included in `request`, `response`, `metadata` or
 *  `service_data` fields.
 *  When the JSON object represented here has a proto equivalent,
 *  the proto name will be indicated in the `\@type` property.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_AuditLog_ResourceOriginalState *resourceOriginalState;

/**
 *  The operation response. This may not include all response elements,
 *  such as those that are too large, privacy-sensitive, or duplicated
 *  elsewhere in the log record.
 *  It should never include user-generated data, such as file contents.
 *  When the JSON object represented here has a proto equivalent, the proto
 *  name will be indicated in the `\@type` property.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_AuditLog_Response *response;

/**
 *  Deprecated, use `metadata` field instead.
 *  Other service-specific data about the request, response, and other
 *  activities.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_AuditLog_ServiceData *serviceData;

/**
 *  The name of the API service performing the operation. For example,
 *  `"datastore.googleapis.com"`.
 */
@property(nonatomic, copy, nullable) NSString *serviceName;

/** The status of the overall operation. */
@property(nonatomic, strong, nullable) GTLRServiceControl_Status *status;

@end


/**
 *  Other service-specific data about the request, response, and other
 *  information associated with the current audited event.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceControl_AuditLog_Metadata : GTLRObject
@end


/**
 *  The operation request. This may not include all request parameters,
 *  such as those that are too large, privacy-sensitive, or duplicated
 *  elsewhere in the log record.
 *  It should never include user-generated data, such as file contents.
 *  When the JSON object represented here has a proto equivalent, the proto
 *  name will be indicated in the `\@type` property.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceControl_AuditLog_Request : GTLRObject
@end


/**
 *  The resource's original state before mutation. Present only for
 *  operations which have successfully modified the targeted resource(s).
 *  In general, this field should contain all changed fields, except those
 *  that are already been included in `request`, `response`, `metadata` or
 *  `service_data` fields.
 *  When the JSON object represented here has a proto equivalent,
 *  the proto name will be indicated in the `\@type` property.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceControl_AuditLog_ResourceOriginalState : GTLRObject
@end


/**
 *  The operation response. This may not include all response elements,
 *  such as those that are too large, privacy-sensitive, or duplicated
 *  elsewhere in the log record.
 *  It should never include user-generated data, such as file contents.
 *  When the JSON object represented here has a proto equivalent, the proto
 *  name will be indicated in the `\@type` property.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceControl_AuditLog_Response : GTLRObject
@end


/**
 *  Deprecated, use `metadata` field instead.
 *  Other service-specific data about the request, response, and other
 *  activities.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceControl_AuditLog_ServiceData : GTLRObject
@end


/**
 *  This message defines request authentication attributes. Terminology is
 *  based on the JSON Web Token (JWT) standard, but the terms also
 *  correlate to concepts in other standards.
 */
@interface GTLRServiceControl_Auth : GTLRObject

/**
 *  A list of access level resource names that allow resources to be
 *  accessed by authenticated requester. It is part of Secure GCP processing
 *  for the incoming request. An access level string has the format:
 *  "//{api_service_name}/accessPolicies/{policy_id}/accessLevels/{short_name}"
 *  Example:
 *  "//accesscontextmanager.googleapis.com/accessPolicies/MY_POLICY_ID/accessLevels/MY_LEVEL"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *accessLevels;

/**
 *  The intended audience(s) for this authentication information. Reflects
 *  the audience (`aud`) claim within a JWT. The audience
 *  value(s) depends on the `issuer`, but typically include one or more of
 *  the following pieces of information:
 *  * The services intended to receive the credential such as
 *  ["pubsub.googleapis.com", "storage.googleapis.com"]
 *  * A set of service-based scopes. For example,
 *  ["https://www.googleapis.com/auth/cloud-platform"]
 *  * The client id of an app, such as the Firebase project id for JWTs
 *  from Firebase Auth.
 *  Consult the documentation for the credential issuer to determine the
 *  information provided.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *audiences;

/**
 *  Structured claims presented with the credential. JWTs include
 *  `{key: value}` pairs for standard and private claims. The following
 *  is a subset of the standard required and optional claims that would
 *  typically be presented for a Google-based JWT:
 *  {'iss': 'accounts.google.com',
 *  'sub': '113289723416554971153',
 *  'aud': ['123456789012', 'pubsub.googleapis.com'],
 *  'azp': '123456789012.apps.googleusercontent.com',
 *  'email': 'jsmith\@example.com',
 *  'iat': 1353601026,
 *  'exp': 1353604926}
 *  SAML assertions are similarly specified, but with an identity provider
 *  dependent structure.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_Auth_Claims *claims;

/**
 *  The authorized presenter of the credential. Reflects the optional
 *  Authorized Presenter (`azp`) claim within a JWT or the
 *  OAuth client id. For example, a Google Cloud Platform client id looks
 *  as follows: "123456789012.apps.googleusercontent.com".
 */
@property(nonatomic, copy, nullable) NSString *presenter;

/**
 *  The authenticated principal. Reflects the issuer (`iss`) and subject
 *  (`sub`) claims within a JWT. The issuer and subject should be `/`
 *  delimited, with `/` percent-encoded within the subject fragment. For
 *  Google accounts, the principal format is:
 *  "https://accounts.google.com/{id}"
 */
@property(nonatomic, copy, nullable) NSString *principal;

@end


/**
 *  Structured claims presented with the credential. JWTs include
 *  `{key: value}` pairs for standard and private claims. The following
 *  is a subset of the standard required and optional claims that would
 *  typically be presented for a Google-based JWT:
 *  {'iss': 'accounts.google.com',
 *  'sub': '113289723416554971153',
 *  'aud': ['123456789012', 'pubsub.googleapis.com'],
 *  'azp': '123456789012.apps.googleusercontent.com',
 *  'email': 'jsmith\@example.com',
 *  'iat': 1353601026,
 *  'exp': 1353604926}
 *  SAML assertions are similarly specified, but with an identity provider
 *  dependent structure.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceControl_Auth_Claims : GTLRObject
@end


/**
 *  Authentication information for the operation.
 */
@interface GTLRServiceControl_AuthenticationInfo : GTLRObject

/**
 *  The authority selector specified by the requestor, if any.
 *  It is not guaranteed that the principal was allowed to use this authority.
 */
@property(nonatomic, copy, nullable) NSString *authoritySelector;

/**
 *  The email address of the authenticated user (or service account on behalf
 *  of third party principal) making the request. For privacy reasons, the
 *  principal email address is redacted for all read-only operations that fail
 *  with a "permission denied" error.
 */
@property(nonatomic, copy, nullable) NSString *principalEmail;

/**
 *  The name of the service account key used to create or exchange
 *  credentials for authenticating the service account making the request.
 *  This is a scheme-less URI full resource name. For example:
 *  "//iam.googleapis.com/projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}"
 */
@property(nonatomic, copy, nullable) NSString *serviceAccountKeyName;

/**
 *  The third party identification (if any) of the authenticated user making
 *  the request.
 *  When the JSON object represented here has a proto equivalent, the proto
 *  name will be indicated in the `\@type` property.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_AuthenticationInfo_ThirdPartyPrincipal *thirdPartyPrincipal;

@end


/**
 *  The third party identification (if any) of the authenticated user making
 *  the request.
 *  When the JSON object represented here has a proto equivalent, the proto
 *  name will be indicated in the `\@type` property.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceControl_AuthenticationInfo_ThirdPartyPrincipal : GTLRObject
@end


/**
 *  Authorization information for the operation.
 */
@interface GTLRServiceControl_AuthorizationInfo : GTLRObject

/**
 *  Whether or not authorization for `resource` and `permission`
 *  was granted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *granted;

/** The required IAM permission. */
@property(nonatomic, copy, nullable) NSString *permission;

/**
 *  The resource being accessed, as a REST-style string. For example:
 *  bigquery.googleapis.com/projects/PROJECTID/datasets/DATASETID
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Resource attributes used in IAM condition evaluation. This field contains
 *  resource attributes like resource type and resource name.
 *  To get the whole view of the attributes used in IAM
 *  condition evaluation, the user must also look into
 *  `AuditLog.request_metadata.request_attributes`.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_Resource *resourceAttributes;

@end


/**
 *  Defines the errors to be returned in
 *  google.api.servicecontrol.v1.CheckResponse.check_errors.
 */
@interface GTLRServiceControl_CheckError : GTLRObject

/**
 *  The error code.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceControl_CheckError_Code_AbuserDetected The consumer
 *        has been flagged as an abuser. (Value: "ABUSER_DETECTED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_ApiKeyExpired The consumer's
 *        API Key has expired. (Value: "API_KEY_EXPIRED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_ApiKeyInvalid The consumer's
 *        API key is invalid. (Value: "API_KEY_INVALID")
 *    @arg @c kGTLRServiceControl_CheckError_Code_ApiKeyNotFound The consumer's
 *        API Key was not found in config record. (Value: "API_KEY_NOT_FOUND")
 *    @arg @c kGTLRServiceControl_CheckError_Code_ApiTargetBlocked The API
 *        targeted by this request is invalid for the specified consumer
 *        project. (Value: "API_TARGET_BLOCKED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_BillingDisabled The consumer
 *        cannot access the service because billing is disabled. (Value:
 *        "BILLING_DISABLED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_BillingStatusUnavailable The
 *        backend server for checking billing status is unavailable. (Value:
 *        "BILLING_STATUS_UNAVAILABLE")
 *    @arg @c kGTLRServiceControl_CheckError_Code_BudgetExceeded Budget check
 *        failed. (Value: "BUDGET_EXCEEDED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_ClientAppBlocked The client
 *        application of the consumer request is invalid for the
 *        specific consumer project. (Value: "CLIENT_APP_BLOCKED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_CloudResourceManagerBackendUnavailable
 *        Cloud Resource Manager backend server is unavailable. (Value:
 *        "CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE")
 *    @arg @c kGTLRServiceControl_CheckError_Code_ConsumerInvalid The input
 *        consumer info does not represent a valid consumer folder or
 *        organization. (Value: "CONSUMER_INVALID")
 *    @arg @c kGTLRServiceControl_CheckError_Code_DenialOfServiceDetected The
 *        consumer's request has been flagged as a DoS attack. (Value:
 *        "DENIAL_OF_SERVICE_DETECTED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_ErrorCodeUnspecified This is
 *        never used in `CheckResponse`. (Value: "ERROR_CODE_UNSPECIFIED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_InvalidCredential The
 *        credential in the request can not be verified. (Value:
 *        "INVALID_CREDENTIAL")
 *    @arg @c kGTLRServiceControl_CheckError_Code_IpAddressBlocked The IP
 *        address of the consumer is invalid for the specific consumer
 *        project. (Value: "IP_ADDRESS_BLOCKED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_LoadShedding The consumer's
 *        request should be rejected in order to protect the service
 *        from being overloaded. (Value: "LOAD_SHEDDING")
 *    @arg @c kGTLRServiceControl_CheckError_Code_LoasProjectDisabled The
 *        consumer's LOAS project is not `ACTIVE` in LoquatV2. (Value:
 *        "LOAS_PROJECT_DISABLED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_LoasProjectLookupUnavailable
 *        The Spanner for looking up LOAS project is unavailable. (Value:
 *        "LOAS_PROJECT_LOOKUP_UNAVAILABLE")
 *    @arg @c kGTLRServiceControl_CheckError_Code_LoasRoleInvalid The consumer's
 *        LOAS role is invalid. (Value: "LOAS_ROLE_INVALID")
 *    @arg @c kGTLRServiceControl_CheckError_Code_LocationPolicyBackendUnavailable
 *        Backend server for evaluating location policy is unavailable. (Value:
 *        "LOCATION_POLICY_BACKEND_UNAVAILABLE")
 *    @arg @c kGTLRServiceControl_CheckError_Code_LocationPolicyViolated Request
 *        is not allowed as per location policies defined in Org Policy. (Value:
 *        "LOCATION_POLICY_VIOLATED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_NamespaceLookupUnavailable The
 *        backend server for looking up project id/number is unavailable.
 *        (Value: "NAMESPACE_LOOKUP_UNAVAILABLE")
 *    @arg @c kGTLRServiceControl_CheckError_Code_NoLoasProject The consumer's
 *        LOAS role has no associated project. (Value: "NO_LOAS_PROJECT")
 *    @arg @c kGTLRServiceControl_CheckError_Code_NotFound The consumer's
 *        project id, network container, or resource container was
 *        not found. Same as google.rpc.Code.NOT_FOUND. (Value: "NOT_FOUND")
 *    @arg @c kGTLRServiceControl_CheckError_Code_PermissionDenied The consumer
 *        doesn't have access to the specified resource.
 *        Same as google.rpc.Code.PERMISSION_DENIED. (Value:
 *        "PERMISSION_DENIED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_ProjectDeleted The consumer's
 *        project has been marked as deleted (soft deletion). (Value:
 *        "PROJECT_DELETED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_ProjectInvalid The consumer's
 *        project number or id does not represent a valid project. (Value:
 *        "PROJECT_INVALID")
 *    @arg @c kGTLRServiceControl_CheckError_Code_QuotaCheckUnavailable The
 *        backend server for checking quota limits is unavailable. (Value:
 *        "QUOTA_CHECK_UNAVAILABLE")
 *    @arg @c kGTLRServiceControl_CheckError_Code_RefererBlocked The referer
 *        address of the consumer request is invalid for the specific
 *        consumer project. (Value: "REFERER_BLOCKED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_ResourceExhausted Quota check
 *        failed. Same as google.rpc.Code.RESOURCE_EXHAUSTED. (Value:
 *        "RESOURCE_EXHAUSTED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_SecurityPolicyBackendUnavailable
 *        NOTE: for customers in the scope of Beta/GA of
 *        https://cloud.google.com/vpc-service-controls, this error
 *        is no longer returned. If the security backend is unavailable, rpc
 *        UNAVAILABLE status will be returned instead. It should be ignored and
 *        should not be used to reject client requests. (Value:
 *        "SECURITY_POLICY_BACKEND_UNAVAILABLE")
 *    @arg @c kGTLRServiceControl_CheckError_Code_SecurityPolicyViolated Request
 *        is not allowed as per security policies defined in Org Policy. (Value:
 *        "SECURITY_POLICY_VIOLATED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_ServiceNotActivated The
 *        consumer hasn't activated the service. (Value:
 *        "SERVICE_NOT_ACTIVATED")
 *    @arg @c kGTLRServiceControl_CheckError_Code_ServiceStatusUnavailable The
 *        backend server for checking service status is unavailable. (Value:
 *        "SERVICE_STATUS_UNAVAILABLE")
 *    @arg @c kGTLRServiceControl_CheckError_Code_SpatulaHeaderInvalid The
 *        consumer's spatula header is invalid. (Value:
 *        "SPATULA_HEADER_INVALID")
 *    @arg @c kGTLRServiceControl_CheckError_Code_VisibilityDenied The consumer
 *        cannot access the service due to visibility configuration. (Value:
 *        "VISIBILITY_DENIED")
 */
@property(nonatomic, copy, nullable) NSString *code;

/** Free-form text providing details on the error cause of the error. */
@property(nonatomic, copy, nullable) NSString *detail;

/**
 *  Subject to whom this error applies. See the specific code enum for more
 *  details on this field. For example:
 *  - “project:<project-id or project-number>”
 *  - “folder:<folder-id>”
 *  - “organization:<organization-id>”
 */
@property(nonatomic, copy, nullable) NSString *subject;

@end


/**
 *  Contains additional information about the check operation.
 */
@interface GTLRServiceControl_CheckInfo : GTLRObject

/** Consumer info of this check. */
@property(nonatomic, strong, nullable) GTLRServiceControl_ConsumerInfo *consumerInfo;

/**
 *  A list of fields and label keys that are ignored by the server.
 *  The client doesn't need to send them for following requests to improve
 *  performance and allow better aggregation.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unusedArguments;

@end


/**
 *  Request message for the Check method.
 */
@interface GTLRServiceControl_CheckRequest : GTLRObject

/** The operation to be checked. */
@property(nonatomic, strong, nullable) GTLRServiceControl_Operation *operation;

/**
 *  Requests the project settings to be returned as part of the check response.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestProjectSettings;

/**
 *  Specifies which version of service configuration should be used to process
 *  the request.
 *  If unspecified or no matching version can be found, the
 *  latest one will be used.
 */
@property(nonatomic, copy, nullable) NSString *serviceConfigId;

/**
 *  Indicates if service activation check should be skipped for this request.
 *  Default behavior is to perform the check and apply relevant quota.
 *  WARNING: Setting this flag to "true" will disable quota enforcement.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipActivationCheck;

@end


/**
 *  Response message for the Check method.
 */
@interface GTLRServiceControl_CheckResponse : GTLRObject

/**
 *  Indicate the decision of the check.
 *  If no check errors are present, the service should process the operation.
 *  Otherwise the service should use the list of errors to determine the
 *  appropriate action.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceControl_CheckError *> *checkErrors;

/**
 *  Feedback data returned from the server during processing a Check request.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_CheckInfo *checkInfo;

/**
 *  The same operation_id value used in the CheckRequest.
 *  Used for logging and diagnostics purposes.
 */
@property(nonatomic, copy, nullable) NSString *operationId;

/** Quota information for the check request associated with this response. */
@property(nonatomic, strong, nullable) GTLRServiceControl_QuotaInfo *quotaInfo;

/** The actual config id used to process the request. */
@property(nonatomic, copy, nullable) NSString *serviceConfigId;

@end


/**
 *  `ConsumerInfo` provides information about the consumer.
 */
@interface GTLRServiceControl_ConsumerInfo : GTLRObject

/**
 *  The consumer identity number, can be Google cloud project number, folder
 *  number or organization number e.g. 1234567890. A value of 0 indicates no
 *  consumer number is found.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *consumerNumber;

/**
 *  The Google cloud project number, e.g. 1234567890. A value of 0 indicates
 *  no project number is found.
 *  NOTE: This field is deprecated after Chemist support flexible consumer
 *  id. New code should not depend on this field anymore.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *projectNumber;

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRServiceControl_ConsumerInfo_Type_ConsumerTypeUnspecified
 *        Value "CONSUMER_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRServiceControl_ConsumerInfo_Type_Folder Value "FOLDER"
 *    @arg @c kGTLRServiceControl_ConsumerInfo_Type_Organization Value
 *        "ORGANIZATION"
 *    @arg @c kGTLRServiceControl_ConsumerInfo_Type_Project Value "PROJECT"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Distribution represents a frequency distribution of double-valued sample
 *  points. It contains the size of the population of sample points plus
 *  additional optional information:
 *  - the arithmetic mean of the samples
 *  - the minimum and maximum of the samples
 *  - the sum-squared-deviation of the samples, used to compute variance
 *  - a histogram of the values of the sample points
 */
@interface GTLRServiceControl_Distribution : GTLRObject

/**
 *  The number of samples in each histogram bucket. `bucket_counts` are
 *  optional. If present, they must sum to the `count` value.
 *  The buckets are defined below in `bucket_option`. There are N buckets.
 *  `bucket_counts[0]` is the number of samples in the underflow bucket.
 *  `bucket_counts[1]` to `bucket_counts[N-1]` are the numbers of samples
 *  in each of the finite buckets. And `bucket_counts[N] is the number
 *  of samples in the overflow bucket. See the comments of `bucket_option`
 *  below for more details.
 *  Any suffix of trailing zeros may be omitted.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *bucketCounts;

/**
 *  The total number of samples in the distribution. Must be >= 0.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/** Buckets with arbitrary user-provided width. */
@property(nonatomic, strong, nullable) GTLRServiceControl_ExplicitBuckets *explicitBuckets;

/** Buckets with exponentially growing width. */
@property(nonatomic, strong, nullable) GTLRServiceControl_ExponentialBuckets *exponentialBuckets;

/** Buckets with constant width. */
@property(nonatomic, strong, nullable) GTLRServiceControl_LinearBuckets *linearBuckets;

/**
 *  The maximum of the population of values. Ignored if `count` is zero.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maximum;

/**
 *  The arithmetic mean of the samples in the distribution. If `count` is
 *  zero then this field must be zero.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *mean;

/**
 *  The minimum of the population of values. Ignored if `count` is zero.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minimum;

/**
 *  The sum of squared deviations from the mean:
 *  Sum[i=1..count]((x_i - mean)^2)
 *  where each x_i is a sample values. If `count` is zero then this field
 *  must be zero, otherwise validation of the request fails.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sumOfSquaredDeviation;

@end


/**
 *  Describing buckets with arbitrary user-provided width.
 */
@interface GTLRServiceControl_ExplicitBuckets : GTLRObject

/**
 *  'bound' is a list of strictly increasing boundaries between
 *  buckets. Note that a list of length N-1 defines N buckets because
 *  of fenceposting. See comments on `bucket_options` for details.
 *  The i'th finite bucket covers the interval
 *  [bound[i-1], bound[i])
 *  where i ranges from 1 to bound_size() - 1. Note that there are no
 *  finite buckets at all if 'bound' only contains a single element; in
 *  that special case the single bound defines the boundary between the
 *  underflow and overflow buckets.
 *  bucket number lower bound upper bound
 *  i == 0 (underflow) -inf bound[i]
 *  0 < i < bound_size() bound[i-1] bound[i]
 *  i == bound_size() (overflow) bound[i-1] +inf
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *bounds;

@end


/**
 *  Describing buckets with exponentially growing width.
 */
@interface GTLRServiceControl_ExponentialBuckets : GTLRObject

/**
 *  The i'th exponential bucket covers the interval
 *  [scale * growth_factor^(i-1), scale * growth_factor^i)
 *  where i ranges from 1 to num_finite_buckets inclusive.
 *  Must be larger than 1.0.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *growthFactor;

/**
 *  The number of finite buckets. With the underflow and overflow buckets,
 *  the total number of buckets is `num_finite_buckets` + 2.
 *  See comments on `bucket_options` for details.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numFiniteBuckets;

/**
 *  The i'th exponential bucket covers the interval
 *  [scale * growth_factor^(i-1), scale * growth_factor^i)
 *  where i ranges from 1 to num_finite_buckets inclusive.
 *  Must be > 0.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scale;

@end


/**
 *  A common proto for logging HTTP requests. Only contains semantics
 *  defined by the HTTP specification. Product-specific logging
 *  information MUST be defined in a separate message.
 */
@interface GTLRServiceControl_HttpRequest : GTLRObject

/**
 *  The number of HTTP response bytes inserted into cache. Set only when a
 *  cache fill was attempted.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheFillBytes;

/**
 *  Whether or not an entity was served from cache
 *  (with or without validation).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheHit;

/**
 *  Whether or not a cache lookup was attempted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheLookup;

/**
 *  Whether or not the response was validated with the origin server before
 *  being served from cache. This field is only meaningful if `cache_hit` is
 *  True.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheValidatedWithOriginServer;

/**
 *  The request processing latency on the server, from the time the request was
 *  received until the response was sent.
 */
@property(nonatomic, strong, nullable) GTLRDuration *latency;

/**
 *  Protocol used for the request. Examples: "HTTP/1.1", "HTTP/2", "websocket"
 */
@property(nonatomic, copy, nullable) NSString *protocol;

/**
 *  The referer URL of the request, as defined in
 *  [HTTP/1.1 Header Field
 *  Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
 */
@property(nonatomic, copy, nullable) NSString *referer;

/**
 *  The IP address (IPv4 or IPv6) of the client that issued the HTTP
 *  request. Examples: `"192.168.1.1"`, `"FE80::0202:B3FF:FE1E:8329"`.
 */
@property(nonatomic, copy, nullable) NSString *remoteIp;

/** The request method. Examples: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`. */
@property(nonatomic, copy, nullable) NSString *requestMethod;

/**
 *  The size of the HTTP request message in bytes, including the request
 *  headers and the request body.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestSize;

/**
 *  The scheme (http, https), the host name, the path, and the query
 *  portion of the URL that was requested.
 *  Example: `"http://example.com/some/info?color=red"`.
 */
@property(nonatomic, copy, nullable) NSString *requestUrl;

/**
 *  The size of the HTTP response message sent back to the client, in bytes,
 *  including the response headers and the response body.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *responseSize;

/**
 *  The IP address (IPv4 or IPv6) of the origin server that the request was
 *  sent to.
 */
@property(nonatomic, copy, nullable) NSString *serverIp;

/**
 *  The response code indicating the status of the response.
 *  Examples: 200, 404.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *status;

/**
 *  The user agent sent by the client. Example:
 *  `"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET
 *  CLR 1.0.3705)"`.
 */
@property(nonatomic, copy, nullable) NSString *userAgent;

@end


/**
 *  Describing buckets with constant width.
 */
@interface GTLRServiceControl_LinearBuckets : GTLRObject

/**
 *  The number of finite buckets. With the underflow and overflow buckets,
 *  the total number of buckets is `num_finite_buckets` + 2.
 *  See comments on `bucket_options` for details.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numFiniteBuckets;

/**
 *  The i'th linear bucket covers the interval
 *  [offset + (i-1) * width, offset + i * width)
 *  where i ranges from 1 to num_finite_buckets, inclusive.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offset;

/**
 *  The i'th linear bucket covers the interval
 *  [offset + (i-1) * width, offset + i * width)
 *  where i ranges from 1 to num_finite_buckets, inclusive.
 *  Must be strictly positive.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *width;

@end


/**
 *  An individual log entry.
 */
@interface GTLRServiceControl_LogEntry : GTLRObject

/**
 *  Optional. Information about the HTTP request associated with this
 *  log entry, if applicable.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_HttpRequest *httpRequest;

/**
 *  A unique ID for the log entry used for deduplication. If omitted,
 *  the implementation will generate one based on operation_id.
 */
@property(nonatomic, copy, nullable) NSString *insertId;

/**
 *  A set of user-defined (key, value) data that provides additional
 *  information about the log entry.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_LogEntry_Labels *labels;

/**
 *  Required. The log to which this log entry belongs. Examples: `"syslog"`,
 *  `"book_log"`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Information about an operation associated with the log entry, if
 *  applicable.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_LogEntryOperation *operation;

/**
 *  The log entry payload, represented as a protocol buffer that is
 *  expressed as a JSON object. The only accepted type currently is
 *  AuditLog.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_LogEntry_ProtoPayload *protoPayload;

/**
 *  The severity of the log entry. The default value is
 *  `LogSeverity.DEFAULT`.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceControl_LogEntry_Severity_Alert (700) A person must
 *        take an action immediately. (Value: "ALERT")
 *    @arg @c kGTLRServiceControl_LogEntry_Severity_Critical (600) Critical
 *        events cause more severe problems or outages. (Value: "CRITICAL")
 *    @arg @c kGTLRServiceControl_LogEntry_Severity_Debug (100) Debug or trace
 *        information. (Value: "DEBUG")
 *    @arg @c kGTLRServiceControl_LogEntry_Severity_Default (0) The log entry
 *        has no assigned severity level. (Value: "DEFAULT")
 *    @arg @c kGTLRServiceControl_LogEntry_Severity_Emergency (800) One or more
 *        systems are unusable. (Value: "EMERGENCY")
 *    @arg @c kGTLRServiceControl_LogEntry_Severity_Error (500) Error events are
 *        likely to cause problems. (Value: "ERROR")
 *    @arg @c kGTLRServiceControl_LogEntry_Severity_Info (200) Routine
 *        information, such as ongoing status or performance. (Value: "INFO")
 *    @arg @c kGTLRServiceControl_LogEntry_Severity_Notice (300) Normal but
 *        significant events, such as start up, shut down, or
 *        a configuration change. (Value: "NOTICE")
 *    @arg @c kGTLRServiceControl_LogEntry_Severity_Warning (400) Warning events
 *        might cause problems. (Value: "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *severity;

/**
 *  The log entry payload, represented as a structure that
 *  is expressed as a JSON object.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_LogEntry_StructPayload *structPayload;

/** The log entry payload, represented as a Unicode string (UTF-8). */
@property(nonatomic, copy, nullable) NSString *textPayload;

/**
 *  The time the event described by the log entry occurred. If
 *  omitted, defaults to operation start time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *timestamp;

/**
 *  Optional. Resource name of the trace associated with the log entry, if any.
 *  If this field contains a relative resource name, you can assume the name is
 *  relative to `//tracing.googleapis.com`. Example:
 *  `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`
 */
@property(nonatomic, copy, nullable) NSString *trace;

@end


/**
 *  A set of user-defined (key, value) data that provides additional
 *  information about the log entry.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRServiceControl_LogEntry_Labels : GTLRObject
@end


/**
 *  The log entry payload, represented as a protocol buffer that is
 *  expressed as a JSON object. The only accepted type currently is
 *  AuditLog.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceControl_LogEntry_ProtoPayload : GTLRObject
@end


/**
 *  The log entry payload, represented as a structure that
 *  is expressed as a JSON object.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceControl_LogEntry_StructPayload : GTLRObject
@end


/**
 *  Additional information about a potentially long-running operation with which
 *  a log entry is associated.
 */
@interface GTLRServiceControl_LogEntryOperation : GTLRObject

/**
 *  Optional. Set this to True if this is the first log entry in the operation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *first;

/**
 *  Optional. An arbitrary operation identifier. Log entries with the
 *  same identifier are assumed to be part of the same operation.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Optional. Set this to True if this is the last log entry in the operation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *last;

/**
 *  Optional. An arbitrary producer identifier. The combination of
 *  `id` and `producer` must be globally unique. Examples for `producer`:
 *  `"MyDivision.MyBigCompany.com"`, `"github.com/MyProject/MyApplication"`.
 */
@property(nonatomic, copy, nullable) NSString *producer;

@end


/**
 *  Represents a single metric value.
 */
@interface GTLRServiceControl_MetricValue : GTLRObject

/**
 *  A boolean value.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *boolValue;

/** A distribution value. */
@property(nonatomic, strong, nullable) GTLRServiceControl_Distribution *distributionValue;

/**
 *  A double precision floating point value.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *doubleValue;

/**
 *  The end of the time period over which this metric value's measurement
 *  applies.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  A signed 64-bit integer value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *int64Value;

/**
 *  The labels describing the metric value.
 *  See comments on google.api.servicecontrol.v1.Operation.labels for
 *  the overriding relationship.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_MetricValue_Labels *labels;

/** A money value. */
@property(nonatomic, strong, nullable) GTLRServiceControl_Money *moneyValue;

/**
 *  The start of the time period over which this metric value's measurement
 *  applies. The time period has different semantics for different metric
 *  types (cumulative, delta, and gauge). See the metric definition
 *  documentation in the service configuration for details.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/** A text string value. */
@property(nonatomic, copy, nullable) NSString *stringValue;

@end


/**
 *  The labels describing the metric value.
 *  See comments on google.api.servicecontrol.v1.Operation.labels for
 *  the overriding relationship.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRServiceControl_MetricValue_Labels : GTLRObject
@end


/**
 *  Represents a set of metric values in the same metric.
 *  Each metric value in the set should have a unique combination of start time,
 *  end time, and label values.
 */
@interface GTLRServiceControl_MetricValueSet : GTLRObject

/** The metric name defined in the service configuration. */
@property(nonatomic, copy, nullable) NSString *metricName;

/** The values in this metric. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceControl_MetricValue *> *metricValues;

@end


/**
 *  Represents an amount of money with its currency type.
 */
@interface GTLRServiceControl_Money : GTLRObject

/** The 3-letter currency code defined in ISO 4217. */
@property(nonatomic, copy, nullable) NSString *currencyCode;

/**
 *  Number of nano (10^-9) units of the amount.
 *  The value must be between -999,999,999 and +999,999,999 inclusive.
 *  If `units` is positive, `nanos` must be positive or zero.
 *  If `units` is zero, `nanos` can be positive, zero, or negative.
 *  If `units` is negative, `nanos` must be negative or zero.
 *  For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  The whole units of the amount.
 *  For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *units;

@end


/**
 *  Represents information regarding an operation.
 */
@interface GTLRServiceControl_Operation : GTLRObject

/**
 *  Identity of the consumer who is using the service.
 *  This field should be filled in for the operations initiated by a
 *  consumer, but not for service-initiated operations that are
 *  not related to a specific consumer.
 *  This can be in one of the following formats:
 *  project:<project_id>,
 *  project_number:<project_number>,
 *  api_key:<api_key>.
 */
@property(nonatomic, copy, nullable) NSString *consumerId;

/**
 *  End time of the operation.
 *  Required when the operation is used in ServiceController.Report,
 *  but optional when the operation is used in ServiceController.Check.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  DO NOT USE. This is an experimental field.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceControl_Operation_Importance_Debug In addition to the
 *        behavior described in HIGH, DEBUG enables
 *        additional validation logic that is only useful during the onboarding
 *        process. This is only available to Google internal services and
 *        the service must be whitelisted by chemist-dev\@google.com in order
 *        to use this level. (Value: "DEBUG")
 *    @arg @c kGTLRServiceControl_Operation_Importance_High The API
 *        implementation doesn't cache and aggregate the data.
 *        If the method returns successfully, it's guaranteed that the data has
 *        been persisted in durable storage. (Value: "HIGH")
 *    @arg @c kGTLRServiceControl_Operation_Importance_Low The API
 *        implementation may cache and aggregate the data.
 *        The data may be lost when rare and unexpected system failures occur.
 *        (Value: "LOW")
 */
@property(nonatomic, copy, nullable) NSString *importance;

/**
 *  Labels describing the operation. Only the following labels are allowed:
 *  - Labels describing monitored resources as defined in
 *  the service configuration.
 *  - Default labels of metric values. When specified, labels defined in the
 *  metric value override these default.
 *  - The following labels defined by Google Cloud Platform:
 *  - `cloud.googleapis.com/location` describing the location where the
 *  operation happened,
 *  - `servicecontrol.googleapis.com/user_agent` describing the user agent
 *  of the API request,
 *  - `servicecontrol.googleapis.com/service_agent` describing the service
 *  used to handle the API request (e.g. ESP),
 *  - `servicecontrol.googleapis.com/platform` describing the platform
 *  where the API is served, such as App Engine, Compute Engine, or
 *  Kubernetes Engine.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_Operation_Labels *labels;

/** Represents information to be logged. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceControl_LogEntry *> *logEntries;

/**
 *  Represents information about this operation. Each MetricValueSet
 *  corresponds to a metric defined in the service configuration.
 *  The data type used in the MetricValueSet must agree with
 *  the data type specified in the metric definition.
 *  Within a single operation, it is not allowed to have more than one
 *  MetricValue instances that have the same metric names and identical
 *  label value combinations. If a request has such duplicated MetricValue
 *  instances, the entire request is rejected with
 *  an invalid argument error.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceControl_MetricValueSet *> *metricValueSets;

/**
 *  Identity of the operation. This must be unique within the scope of the
 *  service that generated the operation. If the service calls
 *  Check() and Report() on the same operation, the two calls should carry
 *  the same id.
 *  UUID version 4 is recommended, though not required.
 *  In scenarios where an operation is computed from existing information
 *  and an idempotent id is desirable for deduplication purpose, UUID version 5
 *  is recommended. See RFC 4122 for details.
 */
@property(nonatomic, copy, nullable) NSString *operationId;

/** Fully qualified name of the operation. Reserved for future use. */
@property(nonatomic, copy, nullable) NSString *operationName;

/**
 *  Represents the properties needed for quota check. Applicable only if this
 *  operation is for a quota check request. If this is not specified, no quota
 *  check will be performed.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_QuotaProperties *quotaProperties;

/**
 *  DO NOT USE. This field is deprecated, use "resources" field instead.
 *  The resource name of the parent of a resource in the resource hierarchy.
 *  This can be in one of the following formats:
 *  - “projects/<project-id or project-number>”
 *  - “folders/<folder-id>”
 *  - “organizations/<organization-id>”
 */
@property(nonatomic, copy, nullable) NSString *resourceContainer;

/**
 *  The resources that are involved in the operation.
 *  The maximum supported number of entries in this field is 100.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceControl_ResourceInfo *> *resources;

/** Required. Start time of the operation. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  User defined labels for the resource that this operation is associated
 *  with. Only a combination of 1000 user labels per consumer project are
 *  allowed.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_Operation_UserLabels *userLabels;

@end


/**
 *  Labels describing the operation. Only the following labels are allowed:
 *  - Labels describing monitored resources as defined in
 *  the service configuration.
 *  - Default labels of metric values. When specified, labels defined in the
 *  metric value override these default.
 *  - The following labels defined by Google Cloud Platform:
 *  - `cloud.googleapis.com/location` describing the location where the
 *  operation happened,
 *  - `servicecontrol.googleapis.com/user_agent` describing the user agent
 *  of the API request,
 *  - `servicecontrol.googleapis.com/service_agent` describing the service
 *  used to handle the API request (e.g. ESP),
 *  - `servicecontrol.googleapis.com/platform` describing the platform
 *  where the API is served, such as App Engine, Compute Engine, or
 *  Kubernetes Engine.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRServiceControl_Operation_Labels : GTLRObject
@end


/**
 *  User defined labels for the resource that this operation is associated
 *  with. Only a combination of 1000 user labels per consumer project are
 *  allowed.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRServiceControl_Operation_UserLabels : GTLRObject
@end


/**
 *  This message defines attributes for a node that handles a network request.
 *  The node can be either a service or an application that sends, forwards,
 *  or receives the request. Service peers should fill in the `service`,
 *  `principal`, and `labels` as appropriate.
 */
@interface GTLRServiceControl_Peer : GTLRObject

/** The IP address of the peer. */
@property(nonatomic, copy, nullable) NSString *ip;

/** The labels associated with the peer. */
@property(nonatomic, strong, nullable) GTLRServiceControl_Peer_Labels *labels;

/**
 *  The network port of the peer.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/**
 *  The identity of this peer. Similar to `Request.auth.principal`, but
 *  relative to the peer instead of the request. For example, the
 *  idenity associated with a load balancer that forwared the request.
 */
@property(nonatomic, copy, nullable) NSString *principal;

/**
 *  The CLDR country/region code associated with the above IP address.
 *  If the IP address is private, the `region_code` should reflect the
 *  physical location where this peer is running.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  The canonical service name of the peer.
 *  NOTE: different systems may have different service naming schemes.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  The labels associated with the peer.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRServiceControl_Peer_Labels : GTLRObject
@end


/**
 *  Represents error information for QuotaOperation.
 */
@interface GTLRServiceControl_QuotaError : GTLRObject

/**
 *  Error code.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceControl_QuotaError_Code_ApiKeyExpired Specified API
 *        Key has expired. (Value: "API_KEY_EXPIRED")
 *    @arg @c kGTLRServiceControl_QuotaError_Code_ApiKeyInvalid Specified API
 *        key is invalid. (Value: "API_KEY_INVALID")
 *    @arg @c kGTLRServiceControl_QuotaError_Code_BillingNotActive Consumer
 *        cannot access the service because the service requires active
 *        billing. (Value: "BILLING_NOT_ACTIVE")
 *    @arg @c kGTLRServiceControl_QuotaError_Code_BillingStatusUnavailable The
 *        backend server for checking billing status is unavailable. (Value:
 *        "BILLING_STATUS_UNAVAILABLE")
 *    @arg @c kGTLRServiceControl_QuotaError_Code_LoasRoleInvalid The consumer's
 *        LOAS role is invalid. (Value: "LOAS_ROLE_INVALID")
 *    @arg @c kGTLRServiceControl_QuotaError_Code_NoLoasProject The consumer's
 *        LOAS role has no associated project. (Value: "NO_LOAS_PROJECT")
 *    @arg @c kGTLRServiceControl_QuotaError_Code_OutOfRange Quota release
 *        failed. This error is ONLY returned on a NORMAL release.
 *        More formally: if a user requests a release of 10 tokens, but only
 *        5 tokens were previously allocated, in a BEST_EFFORT release, this
 *        will
 *        be considered a success, 5 tokens will be released, and the result
 *        will
 *        be "Ok". If this is done in NORMAL mode, no tokens will be released,
 *        and an OUT_OF_RANGE error will be returned.
 *        Same as google.rpc.Code.OUT_OF_RANGE. (Value: "OUT_OF_RANGE")
 *    @arg @c kGTLRServiceControl_QuotaError_Code_ProjectDeleted Consumer's
 *        project has been marked as deleted (soft deletion). (Value:
 *        "PROJECT_DELETED")
 *    @arg @c kGTLRServiceControl_QuotaError_Code_ProjectStatusUnavailable The
 *        backend server for looking up project id/number is unavailable.
 *        (Value: "PROJECT_STATUS_UNAVAILABLE")
 *    @arg @c kGTLRServiceControl_QuotaError_Code_QuotaSystemUnavailable The
 *        backend server for checking quota limits is unavailable. (Value:
 *        "QUOTA_SYSTEM_UNAVAILABLE")
 *    @arg @c kGTLRServiceControl_QuotaError_Code_ResourceExhausted Quota
 *        allocation failed.
 *        Same as google.rpc.Code.RESOURCE_EXHAUSTED. (Value:
 *        "RESOURCE_EXHAUSTED")
 *    @arg @c kGTLRServiceControl_QuotaError_Code_ServiceStatusUnavailable The
 *        backend server for checking service status is unavailable. (Value:
 *        "SERVICE_STATUS_UNAVAILABLE")
 *    @arg @c kGTLRServiceControl_QuotaError_Code_SpatulaHeaderInvalid
 *        Consumer's spatula header is invalid. (Value:
 *        "SPATULA_HEADER_INVALID")
 *    @arg @c kGTLRServiceControl_QuotaError_Code_Unspecified This is never
 *        used. (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *code;

/**
 *  Free-form text that provides details on the cause of the error.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Subject to whom this error applies. See the specific enum for more details
 *  on this field. For example, "clientip:<ip address of client>" or
 *  "project:<Google developer project id>".
 */
@property(nonatomic, copy, nullable) NSString *subject;

@end


/**
 *  Contains the quota information for a quota check response.
 */
@interface GTLRServiceControl_QuotaInfo : GTLRObject

/**
 *  Quota Metrics that have exceeded quota limits.
 *  For QuotaGroup-based quota, this is QuotaGroup.name
 *  For QuotaLimit-based quota, this is QuotaLimit.name
 *  See: google.api.Quota
 *  Deprecated: Use quota_metrics to get per quota group limit exceeded status.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *limitExceeded;

/**
 *  Map of quota group name to the actual number of tokens consumed. If the
 *  quota check was not successful, then this will not be populated due to no
 *  quota consumption.
 *  We are not merging this field with 'quota_metrics' field because of the
 *  complexity of scaling in Chemist client code base. For simplicity, we will
 *  keep this field for Castor (that scales quota usage) and 'quota_metrics'
 *  for SuperQuota (that doesn't scale quota usage).
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_QuotaInfo_QuotaConsumed *quotaConsumed;

/**
 *  Quota metrics to indicate the usage. Depending on the check request, one or
 *  more of the following metrics will be included:
 *  1. For rate quota, per quota group or per quota metric incremental usage
 *  will be specified using the following delta metric:
 *  "serviceruntime.googleapis.com/api/consumer/quota_used_count"
 *  2. For allocation quota, per quota metric total usage will be specified
 *  using the following gauge metric:
 *  "serviceruntime.googleapis.com/allocation/consumer/quota_used_count"
 *  3. For both rate quota and allocation quota, the quota limit reached
 *  condition will be specified using the following boolean metric:
 *  "serviceruntime.googleapis.com/quota/exceeded"
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceControl_MetricValueSet *> *quotaMetrics;

@end


/**
 *  Map of quota group name to the actual number of tokens consumed. If the
 *  quota check was not successful, then this will not be populated due to no
 *  quota consumption.
 *  We are not merging this field with 'quota_metrics' field because of the
 *  complexity of scaling in Chemist client code base. For simplicity, we will
 *  keep this field for Castor (that scales quota usage) and 'quota_metrics'
 *  for SuperQuota (that doesn't scale quota usage).
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of intValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceControl_QuotaInfo_QuotaConsumed : GTLRObject
@end


/**
 *  Represents information regarding a quota operation.
 */
@interface GTLRServiceControl_QuotaOperation : GTLRObject

/**
 *  Identity of the consumer for whom this quota operation is being performed.
 *  This can be in one of the following formats:
 *  project:<project_id>,
 *  project_number:<project_number>,
 *  api_key:<api_key>.
 */
@property(nonatomic, copy, nullable) NSString *consumerId;

/** Labels describing the operation. */
@property(nonatomic, strong, nullable) GTLRServiceControl_QuotaOperation_Labels *labels;

/**
 *  Fully qualified name of the API method for which this quota operation is
 *  requested. This name is used for matching quota rules or metric rules and
 *  billing status rules defined in service configuration.
 *  This field should not be set if any of the following is true:
 *  (1) the quota operation is performed on non-API resources.
 *  (2) quota_metrics is set because the caller is doing quota override.
 *  Example of an RPC method name:
 *  google.example.library.v1.LibraryService.CreateShelf
 */
@property(nonatomic, copy, nullable) NSString *methodName;

/**
 *  Identity of the operation. This is expected to be unique within the scope
 *  of the service that generated the operation, and guarantees idempotency in
 *  case of retries.
 *  UUID version 4 is recommended, though not required. In scenarios where an
 *  operation is computed from existing information and an idempotent id is
 *  desirable for deduplication purpose, UUID version 5 is recommended. See
 *  RFC 4122 for details.
 */
@property(nonatomic, copy, nullable) NSString *operationId;

/**
 *  Represents information about this operation. Each MetricValueSet
 *  corresponds to a metric defined in the service configuration.
 *  The data type used in the MetricValueSet must agree with
 *  the data type specified in the metric definition.
 *  Within a single operation, it is not allowed to have more than one
 *  MetricValue instances that have the same metric names and identical
 *  label value combinations. If a request has such duplicated MetricValue
 *  instances, the entire request is rejected with
 *  an invalid argument error.
 *  This field is mutually exclusive with method_name.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceControl_MetricValueSet *> *quotaMetrics;

/**
 *  Quota mode for this operation.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceControl_QuotaOperation_QuotaMode_BestEffort The
 *        operation allocates quota for the amount specified in the service
 *        configuration or specified using the quota metrics. If the amount is
 *        higher than the available quota, request does not fail but all
 *        available
 *        quota will be allocated. (Value: "BEST_EFFORT")
 *    @arg @c kGTLRServiceControl_QuotaOperation_QuotaMode_CheckOnly For
 *        AllocateQuota request, only checks if there is enough quota
 *        available and does not change the available quota. No lock is placed
 *        on
 *        the available quota either. (Value: "CHECK_ONLY")
 *    @arg @c kGTLRServiceControl_QuotaOperation_QuotaMode_Normal For
 *        AllocateQuota request, allocates quota for the amount specified in
 *        the service configuration or specified using the quota metrics. If the
 *        amount is higher than the available quota, allocation error will be
 *        returned and no quota will be allocated.
 *        If multiple quotas are part of the request, and one fails, none of the
 *        quotas are allocated or released. (Value: "NORMAL")
 *    @arg @c kGTLRServiceControl_QuotaOperation_QuotaMode_Unspecified Guard
 *        against implicit default. Must not be used. (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *quotaMode;

@end


/**
 *  Labels describing the operation.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRServiceControl_QuotaOperation_Labels : GTLRObject
@end


/**
 *  Represents the properties needed for quota operations.
 */
@interface GTLRServiceControl_QuotaProperties : GTLRObject

/**
 *  Quota mode for this operation.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceControl_QuotaProperties_QuotaMode_Acquire Decreases
 *        available quota by the cost specified for the operation.
 *        If cost is higher than available quota, operation fails and returns
 *        error. (Value: "ACQUIRE")
 *    @arg @c kGTLRServiceControl_QuotaProperties_QuotaMode_AcquireBestEffort
 *        Decreases available quota by the cost specified for the operation.
 *        If cost is higher than available quota, operation does not fail and
 *        available quota goes down to zero but it returns error. (Value:
 *        "ACQUIRE_BEST_EFFORT")
 *    @arg @c kGTLRServiceControl_QuotaProperties_QuotaMode_Check Does not
 *        change any available quota. Only checks if there is enough
 *        quota.
 *        No lock is placed on the checked tokens neither. (Value: "CHECK")
 *    @arg @c kGTLRServiceControl_QuotaProperties_QuotaMode_Release Increases
 *        available quota by the operation cost specified for the
 *        operation. (Value: "RELEASE")
 */
@property(nonatomic, copy, nullable) NSString *quotaMode;

@end


/**
 *  Represents the processing error of one Operation in the request.
 */
@interface GTLRServiceControl_ReportError : GTLRObject

/** The Operation.operation_id value from the request. */
@property(nonatomic, copy, nullable) NSString *operationId;

/** Details of the error when processing the Operation. */
@property(nonatomic, strong, nullable) GTLRServiceControl_Status *status;

@end


/**
 *  Contains additional info about the report operation.
 */
@interface GTLRServiceControl_ReportInfo : GTLRObject

/** The Operation.operation_id value from the request. */
@property(nonatomic, copy, nullable) NSString *operationId;

/** Quota usage info when processing the `Operation`. */
@property(nonatomic, strong, nullable) GTLRServiceControl_QuotaInfo *quotaInfo;

@end


/**
 *  Request message for the Report method.
 */
@interface GTLRServiceControl_ReportRequest : GTLRObject

/**
 *  Operations to be reported.
 *  Typically the service should report one operation per request.
 *  Putting multiple operations into a single request is allowed, but should
 *  be used only when multiple operations are natually available at the time
 *  of the report.
 *  If multiple operations are in a single request, the total request size
 *  should be no larger than 1MB. See ReportResponse.report_errors for
 *  partial failure behavior.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceControl_Operation *> *operations;

/**
 *  Specifies which version of service config should be used to process the
 *  request.
 *  If unspecified or no matching version can be found, the
 *  latest one will be used.
 */
@property(nonatomic, copy, nullable) NSString *serviceConfigId;

@end


/**
 *  Response message for the Report method.
 */
@interface GTLRServiceControl_ReportResponse : GTLRObject

/**
 *  Partial failures, one for each `Operation` in the request that failed
 *  processing. There are three possible combinations of the RPC status:
 *  1. The combination of a successful RPC status and an empty `report_errors`
 *  list indicates a complete success where all `Operations` in the
 *  request are processed successfully.
 *  2. The combination of a successful RPC status and a non-empty
 *  `report_errors` list indicates a partial success where some
 *  `Operations` in the request succeeded. Each
 *  `Operation` that failed processing has a corresponding item
 *  in this list.
 *  3. A failed RPC status indicates a general non-deterministic failure.
 *  When this happens, it's impossible to know which of the
 *  'Operations' in the request succeeded or failed.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceControl_ReportError *> *reportErrors;

/**
 *  Quota usage for each quota release `Operation` request.
 *  Fully or partially failed quota release request may or may not be present
 *  in `report_quota_info`. For example, a failed quota release request will
 *  have the current quota usage info when precise quota library returns the
 *  info. A deadline exceeded quota request will not have quota usage info.
 *  If there is no quota release request, report_quota_info will be empty.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceControl_ReportInfo *> *reportInfos;

/** The actual config id used to process the request. */
@property(nonatomic, copy, nullable) NSString *serviceConfigId;

@end


/**
 *  This message defines attributes for an HTTP request. If the actual
 *  request is not an HTTP request, the runtime system should try to map
 *  the actual request to an equivalent HTTP request.
 */
@interface GTLRServiceControl_Request : GTLRObject

/**
 *  The request authentication. May be absent for unauthenticated requests.
 *  Derived from the HTTP request `Authorization` header or equivalent.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_Auth *auth;

/** The HTTP URL fragment. No URL decoding is performed. */
@property(nonatomic, copy, nullable) NSString *fragment;

/**
 *  The HTTP request headers. If multiple headers share the same key, they
 *  must be merged according to the HTTP spec. All header keys must be
 *  lowercased, because HTTP header keys are case-insensitive.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_Request_Headers *headers;

/** The HTTP request `Host` header value. */
@property(nonatomic, copy, nullable) NSString *host;

/**
 *  The unique ID for a request, which can be propagated to downstream
 *  systems. The ID should have low probability of collision
 *  within a single day for a specific service.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The HTTP request method, such as `GET`, `POST`. */
@property(nonatomic, copy, nullable) NSString *method;

/** The HTTP URL path. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  The network protocol used with the request, such as "http/1.1",
 *  "spdy/3", "h2", "h2c", "webrtc", "tcp", "udp", "quic". See
 *  https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids
 *  for details.
 */
@property(nonatomic, copy, nullable) NSString *protocol;

/**
 *  The HTTP URL query in the format of `name1=value`&name2=value2`, as it
 *  appears in the first line of the HTTP request. No decoding is performed.
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  A special parameter for request reason. It is used by security systems
 *  to associate auditing information with a request.
 */
@property(nonatomic, copy, nullable) NSString *reason;

/** The HTTP URL scheme, such as `http` and `https`. */
@property(nonatomic, copy, nullable) NSString *scheme;

/**
 *  The HTTP request size in bytes. If unknown, it must be -1.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *size;

/**
 *  The timestamp when the `destination` service receives the first byte of
 *  the request.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *time;

@end


/**
 *  The HTTP request headers. If multiple headers share the same key, they
 *  must be merged according to the HTTP spec. All header keys must be
 *  lowercased, because HTTP header keys are case-insensitive.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRServiceControl_Request_Headers : GTLRObject
@end


/**
 *  Metadata about the request.
 */
@interface GTLRServiceControl_RequestMetadata : GTLRObject

/**
 *  The IP address of the caller.
 *  For caller from internet, this will be public IPv4 or IPv6 address.
 *  For caller from a Compute Engine VM with external IP address, this
 *  will be the VM's external IP address. For caller from a Compute
 *  Engine VM without external IP address, if the VM is in the same
 *  organization (or project) as the accessed resource, `caller_ip` will
 *  be the VM's internal IPv4 address, otherwise the `caller_ip` will be
 *  redacted to "gce-internal-ip".
 *  See https://cloud.google.com/compute/docs/vpc/ for more information.
 */
@property(nonatomic, copy, nullable) NSString *callerIp;

/**
 *  The network of the caller.
 *  Set only if the network host project is part of the same GCP organization
 *  (or project) as the accessed resource.
 *  See https://cloud.google.com/compute/docs/vpc/ for more information.
 *  This is a scheme-less URI full resource name. For example:
 *  "//compute.googleapis.com/projects/PROJECT_ID/global/networks/NETWORK_ID"
 */
@property(nonatomic, copy, nullable) NSString *callerNetwork;

/**
 *  The user agent of the caller.
 *  This information is not authenticated and should be treated accordingly.
 *  For example:
 *  + `google-api-python-client/1.4.0`:
 *  The request was made by the Google API client for Python.
 *  + `Cloud SDK Command Line Tool apitools-client/1.0 gcloud/0.9.62`:
 *  The request was made by the Google Cloud SDK CLI (gcloud).
 *  + `AppEngine-Google; (+http://code.google.com/appengine; appid:
 *  s~my-project`:
 *  The request was made from the `my-project` App Engine app.
 *  NOLINT
 */
@property(nonatomic, copy, nullable) NSString *callerSuppliedUserAgent;

/**
 *  The destination of a network activity, such as accepting a TCP connection.
 *  In a multi hop network activity, the destination represents the receiver of
 *  the last hop. Only two fields are used in this message, Peer.port and
 *  Peer.ip. These fields are optionally populated by those services utilizing
 *  the IAM condition feature.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_Peer *destinationAttributes;

/**
 *  Request attributes used in IAM condition evaluation. This field contains
 *  request attributes like request time and access levels associated with
 *  the request.
 *  To get the whole view of the attributes used in IAM
 *  condition evaluation, the user must also look into
 *  `AuditLog.authentication_info.resource_attributes`.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_Request *requestAttributes;

@end


/**
 *  This message defines core attributes for a resource. A resource is an
 *  addressable (named) entity provided by the destination service. For
 *  example, a file stored on a network storage service.
 */
@interface GTLRServiceControl_Resource : GTLRObject

/**
 *  The labels or tags on the resource, such as AWS resource tags and
 *  Kubernetes resource labels.
 */
@property(nonatomic, strong, nullable) GTLRServiceControl_Resource_Labels *labels;

/**
 *  The stable identifier (name) of a resource on the `service`. A resource
 *  can be logically identified as "//{resource.service}/{resource.name}".
 *  The differences between a resource name and a URI are:
 *  * Resource name is a logical identifier, independent of network
 *  protocol and API version. For example,
 *  `//pubsub.googleapis.com/projects/123/topics/news-feed`.
 *  * URI often includes protocol and version information, so it can
 *  be used directly by applications. For example,
 *  `https://pubsub.googleapis.com/v1/projects/123/topics/news-feed`.
 *  See https://cloud.google.com/apis/design/resource_names for details.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The name of the service that this resource belongs to, such as
 *  `pubsub.googleapis.com`. The service may be different from the DNS
 *  hostname that actually serves the request.
 */
@property(nonatomic, copy, nullable) NSString *service;

/**
 *  The type of the resource. The scheme is platform-specific because
 *  different platforms define their resources differently.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The labels or tags on the resource, such as AWS resource tags and
 *  Kubernetes resource labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRServiceControl_Resource_Labels : GTLRObject
@end


/**
 *  Describes a resource associated with this operation.
 */
@interface GTLRServiceControl_ResourceInfo : GTLRObject

/**
 *  The identifier of the parent of this resource instance.
 *  Must be in one of the following formats:
 *  - “projects/<project-id or project-number>”
 *  - “folders/<folder-id>”
 *  - “organizations/<organization-id>”
 */
@property(nonatomic, copy, nullable) NSString *resourceContainer;

/**
 *  The location of the resource. If not empty, the resource will be checked
 *  against location policy. The value must be a valid zone, region or
 *  multiregion. For example: "europe-west4" or "northamerica-northeast1-a"
 */
@property(nonatomic, copy, nullable) NSString *resourceLocation;

/** Name of the resource. This is used for auditing purposes. */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end


/**
 *  Location information about a resource.
 */
@interface GTLRServiceControl_ResourceLocation : GTLRObject

/**
 *  The locations of a resource after the execution of the operation.
 *  Requests to create or delete a location based resource must populate
 *  the 'current_locations' field and not the 'original_locations' field.
 *  For example:
 *  "europe-west1-a"
 *  "us-east1"
 *  "nam3"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *currentLocations;

/**
 *  The locations of a resource prior to the execution of the operation.
 *  Requests that mutate the resource's location must populate both the
 *  'original_locations' as well as the 'current_locations' fields.
 *  For example:
 *  "europe-west1-a"
 *  "us-east1"
 *  "nam3"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *originalLocations;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRServiceControl_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceControl_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRServiceControl_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceControl_Status_Details_Item : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
