// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Service Control API (servicecontrol/v1)
// Description:
//   Google Service Control provides control plane functionality to managed
//   services, such as logging, monitoring, and status checks.
// Documentation:
//   https://cloud.google.com/service-control/

#import "GTLRServiceControlQuery.h"

#import "GTLRServiceControlObjects.h"

@implementation GTLRServiceControlQuery

@dynamic fields;

@end

@implementation GTLRServiceControlQuery_ServicesAllocateQuota

@dynamic serviceName;

+ (instancetype)queryWithObject:(GTLRServiceControl_AllocateQuotaRequest *)object
                    serviceName:(NSString *)serviceName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}:allocateQuota";
  GTLRServiceControlQuery_ServicesAllocateQuota *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceControl_AllocateQuotaResponse class];
  query.loggingName = @"servicecontrol.services.allocateQuota";
  return query;
}

@end

@implementation GTLRServiceControlQuery_ServicesCheck

@dynamic serviceName;

+ (instancetype)queryWithObject:(GTLRServiceControl_CheckRequest *)object
                    serviceName:(NSString *)serviceName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}:check";
  GTLRServiceControlQuery_ServicesCheck *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceControl_CheckResponse class];
  query.loggingName = @"servicecontrol.services.check";
  return query;
}

@end

@implementation GTLRServiceControlQuery_ServicesEndReconciliation

@dynamic serviceName;

+ (instancetype)queryWithObject:(GTLRServiceControl_EndReconciliationRequest *)object
                    serviceName:(NSString *)serviceName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}:endReconciliation";
  GTLRServiceControlQuery_ServicesEndReconciliation *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceControl_EndReconciliationResponse class];
  query.loggingName = @"servicecontrol.services.endReconciliation";
  return query;
}

@end

@implementation GTLRServiceControlQuery_ServicesReleaseQuota

@dynamic serviceName;

+ (instancetype)queryWithObject:(GTLRServiceControl_ReleaseQuotaRequest *)object
                    serviceName:(NSString *)serviceName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}:releaseQuota";
  GTLRServiceControlQuery_ServicesReleaseQuota *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceControl_ReleaseQuotaResponse class];
  query.loggingName = @"servicecontrol.services.releaseQuota";
  return query;
}

@end

@implementation GTLRServiceControlQuery_ServicesReport

@dynamic serviceName;

+ (instancetype)queryWithObject:(GTLRServiceControl_ReportRequest *)object
                    serviceName:(NSString *)serviceName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}:report";
  GTLRServiceControlQuery_ServicesReport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceControl_ReportResponse class];
  query.loggingName = @"servicecontrol.services.report";
  return query;
}

@end

@implementation GTLRServiceControlQuery_ServicesStartReconciliation

@dynamic serviceName;

+ (instancetype)queryWithObject:(GTLRServiceControl_StartReconciliationRequest *)object
                    serviceName:(NSString *)serviceName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}:startReconciliation";
  GTLRServiceControlQuery_ServicesStartReconciliation *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceControl_StartReconciliationResponse class];
  query.loggingName = @"servicecontrol.services.startReconciliation";
  return query;
}

@end
