// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Service User API (serviceuser/v1)
// Description:
//   Enables services that service consumers want to use on Google Cloud
//   Platform, lists the available or enabled services, or disables services
//   that service consumers no longer use.
// Documentation:
//   https://cloud.google.com/service-management/

#import "GTLRServiceUserQuery.h"

#import "GTLRServiceUserObjects.h"

@implementation GTLRServiceUserQuery

@dynamic fields;

@end

@implementation GTLRServiceUserQuery_ProjectsServicesDisable

@dynamic name;

+ (instancetype)queryWithObject:(GTLRServiceUser_DisableServiceRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:disable";
  GTLRServiceUserQuery_ProjectsServicesDisable *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRServiceUser_Operation class];
  query.loggingName = @"serviceuser.projects.services.disable";
  return query;
}

@end

@implementation GTLRServiceUserQuery_ProjectsServicesEnable

@dynamic name;

+ (instancetype)queryWithObject:(GTLRServiceUser_EnableServiceRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:enable";
  GTLRServiceUserQuery_ProjectsServicesEnable *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRServiceUser_Operation class];
  query.loggingName = @"serviceuser.projects.services.enable";
  return query;
}

@end

@implementation GTLRServiceUserQuery_ProjectsServicesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/services";
  GTLRServiceUserQuery_ProjectsServicesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRServiceUser_ListEnabledServicesResponse class];
  query.loggingName = @"serviceuser.projects.services.list";
  return query;
}

@end

@implementation GTLRServiceUserQuery_ServicesSearch

@dynamic pageSize, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/services:search";
  GTLRServiceUserQuery_ServicesSearch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRServiceUser_SearchServicesResponse class];
  query.loggingName = @"serviceuser.services.search";
  return query;
}

@end
