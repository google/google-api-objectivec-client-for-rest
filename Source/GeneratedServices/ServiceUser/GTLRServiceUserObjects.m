// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Service User API (serviceuser/v1)
// Description:
//   Enables services that service consumers want to use on Google Cloud
//   Platform, lists the available or enabled services, or disables services
//   that service consumers no longer use.
// Documentation:
//   https://cloud.google.com/service-management/

#import "GTLRServiceUserObjects.h"

// ----------------------------------------------------------------------------
// Constants

// GTLRServiceUser_Api.syntax
NSString * const kGTLRServiceUser_Api_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRServiceUser_Api_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// GTLRServiceUser_Enum.syntax
NSString * const kGTLRServiceUser_Enum_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRServiceUser_Enum_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// GTLRServiceUser_Field.cardinality
NSString * const kGTLRServiceUser_Field_Cardinality_CardinalityOptional = @"CARDINALITY_OPTIONAL";
NSString * const kGTLRServiceUser_Field_Cardinality_CardinalityRepeated = @"CARDINALITY_REPEATED";
NSString * const kGTLRServiceUser_Field_Cardinality_CardinalityRequired = @"CARDINALITY_REQUIRED";
NSString * const kGTLRServiceUser_Field_Cardinality_CardinalityUnknown = @"CARDINALITY_UNKNOWN";

// GTLRServiceUser_Field.kind
NSString * const kGTLRServiceUser_Field_Kind_TypeBool     = @"TYPE_BOOL";
NSString * const kGTLRServiceUser_Field_Kind_TypeBytes    = @"TYPE_BYTES";
NSString * const kGTLRServiceUser_Field_Kind_TypeDouble   = @"TYPE_DOUBLE";
NSString * const kGTLRServiceUser_Field_Kind_TypeEnum     = @"TYPE_ENUM";
NSString * const kGTLRServiceUser_Field_Kind_TypeFixed32  = @"TYPE_FIXED32";
NSString * const kGTLRServiceUser_Field_Kind_TypeFixed64  = @"TYPE_FIXED64";
NSString * const kGTLRServiceUser_Field_Kind_TypeFloat    = @"TYPE_FLOAT";
NSString * const kGTLRServiceUser_Field_Kind_TypeGroup    = @"TYPE_GROUP";
NSString * const kGTLRServiceUser_Field_Kind_TypeInt32    = @"TYPE_INT32";
NSString * const kGTLRServiceUser_Field_Kind_TypeInt64    = @"TYPE_INT64";
NSString * const kGTLRServiceUser_Field_Kind_TypeMessage  = @"TYPE_MESSAGE";
NSString * const kGTLRServiceUser_Field_Kind_TypeSfixed32 = @"TYPE_SFIXED32";
NSString * const kGTLRServiceUser_Field_Kind_TypeSfixed64 = @"TYPE_SFIXED64";
NSString * const kGTLRServiceUser_Field_Kind_TypeSint32   = @"TYPE_SINT32";
NSString * const kGTLRServiceUser_Field_Kind_TypeSint64   = @"TYPE_SINT64";
NSString * const kGTLRServiceUser_Field_Kind_TypeString   = @"TYPE_STRING";
NSString * const kGTLRServiceUser_Field_Kind_TypeUint32   = @"TYPE_UINT32";
NSString * const kGTLRServiceUser_Field_Kind_TypeUint64   = @"TYPE_UINT64";
NSString * const kGTLRServiceUser_Field_Kind_TypeUnknown  = @"TYPE_UNKNOWN";

// GTLRServiceUser_LabelDescriptor.valueType
NSString * const kGTLRServiceUser_LabelDescriptor_ValueType_Bool = @"BOOL";
NSString * const kGTLRServiceUser_LabelDescriptor_ValueType_Int64 = @"INT64";
NSString * const kGTLRServiceUser_LabelDescriptor_ValueType_String = @"STRING";

// GTLRServiceUser_Method.syntax
NSString * const kGTLRServiceUser_Method_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRServiceUser_Method_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// GTLRServiceUser_MetricDescriptor.metricKind
NSString * const kGTLRServiceUser_MetricDescriptor_MetricKind_Cumulative = @"CUMULATIVE";
NSString * const kGTLRServiceUser_MetricDescriptor_MetricKind_Delta = @"DELTA";
NSString * const kGTLRServiceUser_MetricDescriptor_MetricKind_Gauge = @"GAUGE";
NSString * const kGTLRServiceUser_MetricDescriptor_MetricKind_MetricKindUnspecified = @"METRIC_KIND_UNSPECIFIED";

// GTLRServiceUser_MetricDescriptor.valueType
NSString * const kGTLRServiceUser_MetricDescriptor_ValueType_Bool = @"BOOL";
NSString * const kGTLRServiceUser_MetricDescriptor_ValueType_Distribution = @"DISTRIBUTION";
NSString * const kGTLRServiceUser_MetricDescriptor_ValueType_Double = @"DOUBLE";
NSString * const kGTLRServiceUser_MetricDescriptor_ValueType_Int64 = @"INT64";
NSString * const kGTLRServiceUser_MetricDescriptor_ValueType_Money = @"MONEY";
NSString * const kGTLRServiceUser_MetricDescriptor_ValueType_String = @"STRING";
NSString * const kGTLRServiceUser_MetricDescriptor_ValueType_ValueTypeUnspecified = @"VALUE_TYPE_UNSPECIFIED";

// GTLRServiceUser_Step.status
NSString * const kGTLRServiceUser_Step_Status_Cancelled        = @"CANCELLED";
NSString * const kGTLRServiceUser_Step_Status_Done             = @"DONE";
NSString * const kGTLRServiceUser_Step_Status_Failed           = @"FAILED";
NSString * const kGTLRServiceUser_Step_Status_InProgress       = @"IN_PROGRESS";
NSString * const kGTLRServiceUser_Step_Status_NotStarted       = @"NOT_STARTED";
NSString * const kGTLRServiceUser_Step_Status_StatusUnspecified = @"STATUS_UNSPECIFIED";

// GTLRServiceUser_Type.syntax
NSString * const kGTLRServiceUser_Type_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRServiceUser_Type_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Api
//

@implementation GTLRServiceUser_Api
@dynamic methods, mixins, name, options, sourceContext, syntax, version;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"methods" : [GTLRServiceUser_Method class],
    @"mixins" : [GTLRServiceUser_Mixin class],
    @"options" : [GTLRServiceUser_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Authentication
//

@implementation GTLRServiceUser_Authentication
@dynamic providers, rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"providers" : [GTLRServiceUser_AuthProvider class],
    @"rules" : [GTLRServiceUser_AuthenticationRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_AuthenticationRule
//

@implementation GTLRServiceUser_AuthenticationRule
@dynamic allowWithoutCredential, customAuth, oauth, requirements, selector;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requirements" : [GTLRServiceUser_AuthRequirement class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_AuthorizationConfig
//

@implementation GTLRServiceUser_AuthorizationConfig
@dynamic provider;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_AuthProvider
//

@implementation GTLRServiceUser_AuthProvider
@dynamic audiences, authorizationUrl, identifier, issuer, jwksUri;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_AuthRequirement
//

@implementation GTLRServiceUser_AuthRequirement
@dynamic audiences, providerId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Backend
//

@implementation GTLRServiceUser_Backend
@dynamic rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceUser_BackendRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_BackendRule
//

@implementation GTLRServiceUser_BackendRule
@dynamic address, deadline, minDeadline, selector;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Billing
//

@implementation GTLRServiceUser_Billing
@dynamic consumerDestinations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"consumerDestinations" : [GTLRServiceUser_BillingDestination class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_BillingDestination
//

@implementation GTLRServiceUser_BillingDestination
@dynamic metrics, monitoredResource;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metrics" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Context
//

@implementation GTLRServiceUser_Context
@dynamic rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceUser_ContextRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_ContextRule
//

@implementation GTLRServiceUser_ContextRule
@dynamic allowedRequestExtensions, allowedResponseExtensions, provided,
         requested, selector;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"allowedRequestExtensions" : [NSString class],
    @"allowedResponseExtensions" : [NSString class],
    @"provided" : [NSString class],
    @"requested" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Control
//

@implementation GTLRServiceUser_Control
@dynamic environment;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_CustomAuthRequirements
//

@implementation GTLRServiceUser_CustomAuthRequirements
@dynamic provider;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_CustomError
//

@implementation GTLRServiceUser_CustomError
@dynamic rules, types;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceUser_CustomErrorRule class],
    @"types" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_CustomErrorRule
//

@implementation GTLRServiceUser_CustomErrorRule
@dynamic isErrorType, selector;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_CustomHttpPattern
//

@implementation GTLRServiceUser_CustomHttpPattern
@dynamic kind, path;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_DisableServiceRequest
//

@implementation GTLRServiceUser_DisableServiceRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Documentation
//

@implementation GTLRServiceUser_Documentation
@dynamic documentationRootUrl, overview, pages, rules, summary;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"pages" : [GTLRServiceUser_Page class],
    @"rules" : [GTLRServiceUser_DocumentationRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_DocumentationRule
//

@implementation GTLRServiceUser_DocumentationRule
@dynamic deprecationDescription, descriptionProperty, selector;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_EnableServiceRequest
//

@implementation GTLRServiceUser_EnableServiceRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Endpoint
//

@implementation GTLRServiceUser_Endpoint
@dynamic aliases, allowCors, features, name, target;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"aliases" : [NSString class],
    @"features" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Enum
//

@implementation GTLRServiceUser_Enum
@dynamic enumvalue, name, options, sourceContext, syntax;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"enumvalue" : [GTLRServiceUser_EnumValue class],
    @"options" : [GTLRServiceUser_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_EnumValue
//

@implementation GTLRServiceUser_EnumValue
@dynamic name, number, options;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"options" : [GTLRServiceUser_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Experimental
//

@implementation GTLRServiceUser_Experimental
@dynamic authorization;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Field
//

@implementation GTLRServiceUser_Field
@dynamic cardinality, defaultValue, jsonName, kind, name, number, oneofIndex,
         options, packed, typeUrl;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"options" : [GTLRServiceUser_Option class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Http
//

@implementation GTLRServiceUser_Http
@dynamic fullyDecodeReservedExpansion, rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceUser_HttpRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_HttpRule
//

@implementation GTLRServiceUser_HttpRule
@dynamic additionalBindings, body, custom, deleteProperty, get, mediaDownload,
         mediaUpload, patch, post, put, selector;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"deleteProperty" : @"delete" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"additionalBindings" : [GTLRServiceUser_HttpRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_LabelDescriptor
//

@implementation GTLRServiceUser_LabelDescriptor
@dynamic descriptionProperty, key, valueType;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_ListEnabledServicesResponse
//

@implementation GTLRServiceUser_ListEnabledServicesResponse
@dynamic nextPageToken, services;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"services" : [GTLRServiceUser_PublishedService class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"services";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_LogDescriptor
//

@implementation GTLRServiceUser_LogDescriptor
@dynamic descriptionProperty, displayName, labels, name;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labels" : [GTLRServiceUser_LabelDescriptor class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Logging
//

@implementation GTLRServiceUser_Logging
@dynamic consumerDestinations, producerDestinations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"consumerDestinations" : [GTLRServiceUser_LoggingDestination class],
    @"producerDestinations" : [GTLRServiceUser_LoggingDestination class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_LoggingDestination
//

@implementation GTLRServiceUser_LoggingDestination
@dynamic logs, monitoredResource;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"logs" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_MediaDownload
//

@implementation GTLRServiceUser_MediaDownload
@dynamic completeNotification, downloadService, dropzone, enabled,
         maxDirectDownloadSize, useDirectDownload;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_MediaUpload
//

@implementation GTLRServiceUser_MediaUpload
@dynamic completeNotification, dropzone, enabled, maxSize, mimeTypes,
         progressNotification, startNotification, uploadService;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"mimeTypes" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Method
//

@implementation GTLRServiceUser_Method
@dynamic name, options, requestStreaming, requestTypeUrl, responseStreaming,
         responseTypeUrl, syntax;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"options" : [GTLRServiceUser_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_MetricDescriptor
//

@implementation GTLRServiceUser_MetricDescriptor
@dynamic descriptionProperty, displayName, labels, metricKind, name, type, unit,
         valueType;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labels" : [GTLRServiceUser_LabelDescriptor class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_MetricRule
//

@implementation GTLRServiceUser_MetricRule
@dynamic metricCosts, selector;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_MetricRule_MetricCosts
//

@implementation GTLRServiceUser_MetricRule_MetricCosts

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Mixin
//

@implementation GTLRServiceUser_Mixin
@dynamic name, root;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_MonitoredResourceDescriptor
//

@implementation GTLRServiceUser_MonitoredResourceDescriptor
@dynamic descriptionProperty, displayName, labels, name, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labels" : [GTLRServiceUser_LabelDescriptor class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Monitoring
//

@implementation GTLRServiceUser_Monitoring
@dynamic consumerDestinations, producerDestinations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"consumerDestinations" : [GTLRServiceUser_MonitoringDestination class],
    @"producerDestinations" : [GTLRServiceUser_MonitoringDestination class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_MonitoringDestination
//

@implementation GTLRServiceUser_MonitoringDestination
@dynamic metrics, monitoredResource;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metrics" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_OAuthRequirements
//

@implementation GTLRServiceUser_OAuthRequirements
@dynamic canonicalScopes;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Operation
//

@implementation GTLRServiceUser_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Operation_Metadata
//

@implementation GTLRServiceUser_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Operation_Response
//

@implementation GTLRServiceUser_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_OperationMetadata
//

@implementation GTLRServiceUser_OperationMetadata
@dynamic progressPercentage, resourceNames, startTime, steps;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resourceNames" : [NSString class],
    @"steps" : [GTLRServiceUser_Step class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Option
//

@implementation GTLRServiceUser_Option
@dynamic name, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Option_Value
//

@implementation GTLRServiceUser_Option_Value

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Page
//

@implementation GTLRServiceUser_Page
@dynamic content, name, subpages;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"subpages" : [GTLRServiceUser_Page class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_PublishedService
//

@implementation GTLRServiceUser_PublishedService
@dynamic name, service;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Quota
//

@implementation GTLRServiceUser_Quota
@dynamic limits, metricRules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"limits" : [GTLRServiceUser_QuotaLimit class],
    @"metricRules" : [GTLRServiceUser_MetricRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_QuotaLimit
//

@implementation GTLRServiceUser_QuotaLimit
@dynamic defaultLimit, descriptionProperty, displayName, duration, freeTier,
         maxLimit, metric, name, unit, values;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_QuotaLimit_Values
//

@implementation GTLRServiceUser_QuotaLimit_Values

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_SearchServicesResponse
//

@implementation GTLRServiceUser_SearchServicesResponse
@dynamic nextPageToken, services;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"services" : [GTLRServiceUser_PublishedService class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"services";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Service
//

@implementation GTLRServiceUser_Service
@dynamic apis, authentication, backend, billing, configVersion, context,
         control, customError, documentation, endpoints, enums, experimental,
         http, identifier, logging, logs, metrics, monitoredResources,
         monitoring, name, producerProjectId, quota, sourceInfo,
         systemParameters, systemTypes, title, types, usage;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"apis" : [GTLRServiceUser_Api class],
    @"endpoints" : [GTLRServiceUser_Endpoint class],
    @"enums" : [GTLRServiceUser_Enum class],
    @"logs" : [GTLRServiceUser_LogDescriptor class],
    @"metrics" : [GTLRServiceUser_MetricDescriptor class],
    @"monitoredResources" : [GTLRServiceUser_MonitoredResourceDescriptor class],
    @"systemTypes" : [GTLRServiceUser_Type class],
    @"types" : [GTLRServiceUser_Type class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_SourceContext
//

@implementation GTLRServiceUser_SourceContext
@dynamic fileName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_SourceInfo
//

@implementation GTLRServiceUser_SourceInfo
@dynamic sourceFiles;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sourceFiles" : [GTLRServiceUser_SourceInfo_SourceFiles_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_SourceInfo_SourceFiles_Item
//

@implementation GTLRServiceUser_SourceInfo_SourceFiles_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Status
//

@implementation GTLRServiceUser_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRServiceUser_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Status_Details_Item
//

@implementation GTLRServiceUser_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Step
//

@implementation GTLRServiceUser_Step
@dynamic descriptionProperty, status;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_SystemParameter
//

@implementation GTLRServiceUser_SystemParameter
@dynamic httpHeader, name, urlQueryParameter;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_SystemParameterRule
//

@implementation GTLRServiceUser_SystemParameterRule
@dynamic parameters, selector;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"parameters" : [GTLRServiceUser_SystemParameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_SystemParameters
//

@implementation GTLRServiceUser_SystemParameters
@dynamic rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceUser_SystemParameterRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Type
//

@implementation GTLRServiceUser_Type
@dynamic fields, name, oneofs, options, sourceContext, syntax;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fields" : [GTLRServiceUser_Field class],
    @"oneofs" : [NSString class],
    @"options" : [GTLRServiceUser_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_Usage
//

@implementation GTLRServiceUser_Usage
@dynamic producerNotificationChannel, requirements, rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requirements" : [NSString class],
    @"rules" : [GTLRServiceUser_UsageRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceUser_UsageRule
//

@implementation GTLRServiceUser_UsageRule
@dynamic allowUnregisteredCalls, selector, skipServiceControl;
@end
