// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Stackdriver Logging API (logging/v2)
// Description:
//   Writes log entries and manages your Logging configuration.
// Documentation:
//   https://cloud.google.com/logging/docs/

#import "GTLRLoggingQuery.h"

#import "GTLRLoggingObjects.h"

@implementation GTLRLoggingQuery

@dynamic fields;

@end

@implementation GTLRLoggingQuery_BillingAccountsExclusionsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_BillingAccountsExclusionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.billingAccounts.exclusions.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsExclusionsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_BillingAccountsExclusionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.billingAccounts.exclusions.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsExclusionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_BillingAccountsExclusionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.billingAccounts.exclusions.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsExclusionsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_BillingAccountsExclusionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListExclusionsResponse class];
  query.loggingName = @"logging.billingAccounts.exclusions.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsExclusionsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_BillingAccountsExclusionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.billingAccounts.exclusions.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLogsDelete

@dynamic logName;

+ (instancetype)queryWithLogName:(NSString *)logName {
  NSArray *pathParams = @[ @"logName" ];
  NSString *pathURITemplate = @"v2/{+logName}";
  GTLRLoggingQuery_BillingAccountsLogsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.logName = logName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.billingAccounts.logs.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLogsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/logs";
  GTLRLoggingQuery_BillingAccountsLogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListLogsResponse class];
  query.loggingName = @"logging.billingAccounts.logs.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsSinksCreate

@dynamic parent, uniqueWriterIdentity;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_BillingAccountsSinksCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.billingAccounts.sinks.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsSinksDelete

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_BillingAccountsSinksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.billingAccounts.sinks.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsSinksGet

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_BillingAccountsSinksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.billingAccounts.sinks.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsSinksList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_BillingAccountsSinksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListSinksResponse class];
  query.loggingName = @"logging.billingAccounts.sinks.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsSinksPatch

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_BillingAccountsSinksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.billingAccounts.sinks.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsSinksUpdate

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_BillingAccountsSinksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.billingAccounts.sinks.update";
  return query;
}

@end

@implementation GTLRLoggingQuery_EntriesList

+ (instancetype)queryWithObject:(GTLRLogging_ListLogEntriesRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v2/entries:list";
  GTLRLoggingQuery_EntriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRLogging_ListLogEntriesResponse class];
  query.loggingName = @"logging.entries.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_EntriesWrite

+ (instancetype)queryWithObject:(GTLRLogging_WriteLogEntriesRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v2/entries:write";
  GTLRLoggingQuery_EntriesWrite *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRLogging_WriteLogEntriesResponse class];
  query.loggingName = @"logging.entries.write";
  return query;
}

@end

@implementation GTLRLoggingQuery_ExclusionsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_ExclusionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.exclusions.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_ExclusionsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ExclusionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.exclusions.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_ExclusionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ExclusionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.exclusions.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_ExclusionsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_ExclusionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListExclusionsResponse class];
  query.loggingName = @"logging.exclusions.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_ExclusionsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ExclusionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.exclusions.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersExclusionsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_FoldersExclusionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.folders.exclusions.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersExclusionsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_FoldersExclusionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.folders.exclusions.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersExclusionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_FoldersExclusionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.folders.exclusions.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersExclusionsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_FoldersExclusionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListExclusionsResponse class];
  query.loggingName = @"logging.folders.exclusions.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersExclusionsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_FoldersExclusionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.folders.exclusions.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLogsDelete

@dynamic logName;

+ (instancetype)queryWithLogName:(NSString *)logName {
  NSArray *pathParams = @[ @"logName" ];
  NSString *pathURITemplate = @"v2/{+logName}";
  GTLRLoggingQuery_FoldersLogsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.logName = logName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.folders.logs.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLogsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/logs";
  GTLRLoggingQuery_FoldersLogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListLogsResponse class];
  query.loggingName = @"logging.folders.logs.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersSinksCreate

@dynamic parent, uniqueWriterIdentity;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_FoldersSinksCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.folders.sinks.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersSinksDelete

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_FoldersSinksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.folders.sinks.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersSinksGet

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_FoldersSinksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.folders.sinks.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersSinksList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_FoldersSinksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListSinksResponse class];
  query.loggingName = @"logging.folders.sinks.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersSinksPatch

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_FoldersSinksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.folders.sinks.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersSinksUpdate

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_FoldersSinksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.folders.sinks.update";
  return query;
}

@end

@implementation GTLRLoggingQuery_LogsDelete

@dynamic logName;

+ (instancetype)queryWithLogName:(NSString *)logName {
  NSArray *pathParams = @[ @"logName" ];
  NSString *pathURITemplate = @"v2/{+logName}";
  GTLRLoggingQuery_LogsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.logName = logName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.logs.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_LogsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/logs";
  GTLRLoggingQuery_LogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListLogsResponse class];
  query.loggingName = @"logging.logs.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_MonitoredResourceDescriptorsList

@dynamic pageSize, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"v2/monitoredResourceDescriptors";
  GTLRLoggingQuery_MonitoredResourceDescriptorsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRLogging_ListMonitoredResourceDescriptorsResponse class];
  query.loggingName = @"logging.monitoredResourceDescriptors.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsExclusionsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_OrganizationsExclusionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.organizations.exclusions.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsExclusionsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_OrganizationsExclusionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.organizations.exclusions.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsExclusionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_OrganizationsExclusionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.organizations.exclusions.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsExclusionsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_OrganizationsExclusionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListExclusionsResponse class];
  query.loggingName = @"logging.organizations.exclusions.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsExclusionsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_OrganizationsExclusionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.organizations.exclusions.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLogsDelete

@dynamic logName;

+ (instancetype)queryWithLogName:(NSString *)logName {
  NSArray *pathParams = @[ @"logName" ];
  NSString *pathURITemplate = @"v2/{+logName}";
  GTLRLoggingQuery_OrganizationsLogsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.logName = logName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.organizations.logs.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLogsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/logs";
  GTLRLoggingQuery_OrganizationsLogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListLogsResponse class];
  query.loggingName = @"logging.organizations.logs.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsSinksCreate

@dynamic parent, uniqueWriterIdentity;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_OrganizationsSinksCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.organizations.sinks.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsSinksDelete

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_OrganizationsSinksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.organizations.sinks.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsSinksGet

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_OrganizationsSinksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.organizations.sinks.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsSinksList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_OrganizationsSinksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListSinksResponse class];
  query.loggingName = @"logging.organizations.sinks.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsSinksPatch

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_OrganizationsSinksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.organizations.sinks.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsSinksUpdate

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_OrganizationsSinksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.organizations.sinks.update";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsExclusionsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_ProjectsExclusionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.projects.exclusions.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsExclusionsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ProjectsExclusionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.projects.exclusions.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsExclusionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ProjectsExclusionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.projects.exclusions.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsExclusionsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_ProjectsExclusionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListExclusionsResponse class];
  query.loggingName = @"logging.projects.exclusions.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsExclusionsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ProjectsExclusionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.projects.exclusions.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLogsDelete

@dynamic logName;

+ (instancetype)queryWithLogName:(NSString *)logName {
  NSArray *pathParams = @[ @"logName" ];
  NSString *pathURITemplate = @"v2/{+logName}";
  GTLRLoggingQuery_ProjectsLogsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.logName = logName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.projects.logs.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLogsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/logs";
  GTLRLoggingQuery_ProjectsLogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListLogsResponse class];
  query.loggingName = @"logging.projects.logs.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsMetricsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogMetric *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/metrics";
  GTLRLoggingQuery_ProjectsMetricsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogMetric class];
  query.loggingName = @"logging.projects.metrics.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsMetricsDelete

@dynamic metricName;

+ (instancetype)queryWithMetricName:(NSString *)metricName {
  NSArray *pathParams = @[ @"metricName" ];
  NSString *pathURITemplate = @"v2/{+metricName}";
  GTLRLoggingQuery_ProjectsMetricsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.metricName = metricName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.projects.metrics.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsMetricsGet

@dynamic metricName;

+ (instancetype)queryWithMetricName:(NSString *)metricName {
  NSArray *pathParams = @[ @"metricName" ];
  NSString *pathURITemplate = @"v2/{+metricName}";
  GTLRLoggingQuery_ProjectsMetricsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.metricName = metricName;
  query.expectedObjectClass = [GTLRLogging_LogMetric class];
  query.loggingName = @"logging.projects.metrics.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsMetricsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/metrics";
  GTLRLoggingQuery_ProjectsMetricsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListLogMetricsResponse class];
  query.loggingName = @"logging.projects.metrics.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsMetricsUpdate

@dynamic metricName;

+ (instancetype)queryWithObject:(GTLRLogging_LogMetric *)object
                     metricName:(NSString *)metricName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"metricName" ];
  NSString *pathURITemplate = @"v2/{+metricName}";
  GTLRLoggingQuery_ProjectsMetricsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.metricName = metricName;
  query.expectedObjectClass = [GTLRLogging_LogMetric class];
  query.loggingName = @"logging.projects.metrics.update";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsSinksCreate

@dynamic parent, uniqueWriterIdentity;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_ProjectsSinksCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.projects.sinks.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsSinksDelete

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_ProjectsSinksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.projects.sinks.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsSinksGet

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_ProjectsSinksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.projects.sinks.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsSinksList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_ProjectsSinksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListSinksResponse class];
  query.loggingName = @"logging.projects.sinks.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsSinksPatch

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_ProjectsSinksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.projects.sinks.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsSinksUpdate

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_ProjectsSinksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.projects.sinks.update";
  return query;
}

@end

@implementation GTLRLoggingQuery_SinksCreate

@dynamic parent, uniqueWriterIdentity;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_SinksCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.sinks.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_SinksDelete

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_SinksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.sinks.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_SinksGet

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_SinksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.sinks.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_SinksList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_SinksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListSinksResponse class];
  query.loggingName = @"logging.sinks.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_SinksUpdate

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_SinksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.sinks.update";
  return query;
}

@end
