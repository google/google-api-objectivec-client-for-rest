// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Logging API (logging/v2)
// Description:
//   Writes log entries and manages your Cloud Logging configuration. The table
//   entries below are presented in alphabetical order, not in order of common
//   use. For explanations of the concepts found in the table entries, read the
//   documentation at https://cloud.google.com/logging/docs.
// Documentation:
//   https://cloud.google.com/logging/docs/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRLogging_CmekSettings;
@class GTLRLogging_ListLogEntriesRequest;
@class GTLRLogging_LogBucket;
@class GTLRLogging_LogExclusion;
@class GTLRLogging_LogMetric;
@class GTLRLogging_LogSink;
@class GTLRLogging_LogView;
@class GTLRLogging_TailLogEntriesRequest;
@class GTLRLogging_UndeleteBucketRequest;
@class GTLRLogging_WriteLogEntriesRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Logging query classes.
 */
@interface GTLRLoggingQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets a bucket.
 *
 *  Method: logging.billingAccounts.buckets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_BillingAccountsBucketsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsBucketsGetWithname:]

/**
 *  Required. The resource name of the bucket:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_LogBucket.
 *
 *  Gets a bucket.
 *
 *  @param name Required. The resource name of the bucket:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 *
 *  @return GTLRLoggingQuery_BillingAccountsBucketsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a view.
 *
 *  Method: logging.billingAccounts.buckets.views.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_BillingAccountsBucketsViewsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsBucketsViewsGetWithname:]

/**
 *  Required. The resource name of the policy:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *  Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_LogView.
 *
 *  Gets a view.
 *
 *  @param name Required. The resource name of the policy:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *    Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 *
 *  @return GTLRLoggingQuery_BillingAccountsBucketsViewsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new exclusion in a specified parent resource. Only log entries
 *  belonging to that resource can be excluded. You can have up to 10 exclusions
 *  in a resource.
 *
 *  Method: logging.billingAccounts.exclusions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsExclusionsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsExclusionsCreateWithObject:parent:]

/**
 *  Required. The parent resource in which to create the exclusion:
 *  "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]" Examples:
 *  "projects/my-logging-project", "organizations/123456789".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_LogExclusion.
 *
 *  Creates a new exclusion in a specified parent resource. Only log entries
 *  belonging to that resource can be excluded. You can have up to 10 exclusions
 *  in a resource.
 *
 *  @param object The @c GTLRLogging_LogExclusion to include in the query.
 *  @param parent Required. The parent resource in which to create the
 *    exclusion: "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]" Examples:
 *    "projects/my-logging-project", "organizations/123456789".
 *
 *  @return GTLRLoggingQuery_BillingAccountsExclusionsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an exclusion.
 *
 *  Method: logging.billingAccounts.exclusions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsExclusionsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsExclusionsDeleteWithname:]

/**
 *  Required. The resource name of an existing exclusion to delete:
 *  "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *  "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *  "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *  "projects/my-project-id/exclusions/my-exclusion-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes an exclusion.
 *
 *  @param name Required. The resource name of an existing exclusion to delete:
 *    "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *    "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *    "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *    "projects/my-project-id/exclusions/my-exclusion-id".
 *
 *  @return GTLRLoggingQuery_BillingAccountsExclusionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the description of an exclusion.
 *
 *  Method: logging.billingAccounts.exclusions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_BillingAccountsExclusionsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsExclusionsGetWithname:]

/**
 *  Required. The resource name of an existing exclusion:
 *  "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *  "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *  "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *  "projects/my-project-id/exclusions/my-exclusion-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_LogExclusion.
 *
 *  Gets the description of an exclusion.
 *
 *  @param name Required. The resource name of an existing exclusion:
 *    "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *    "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *    "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *    "projects/my-project-id/exclusions/my-exclusion-id".
 *
 *  @return GTLRLoggingQuery_BillingAccountsExclusionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all the exclusions in a parent resource.
 *
 *  Method: logging.billingAccounts.exclusions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_BillingAccountsExclusionsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsExclusionsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose exclusions are to be listed.
 *  "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListExclusionsResponse.
 *
 *  Lists all the exclusions in a parent resource.
 *
 *  @param parent Required. The parent resource whose exclusions are to be
 *    listed. "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 *
 *  @return GTLRLoggingQuery_BillingAccountsExclusionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Changes one or more properties of an existing exclusion.
 *
 *  Method: logging.billingAccounts.exclusions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsExclusionsPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsExclusionsPatchWithObject:name:]

/**
 *  Required. The resource name of the exclusion to update:
 *  "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *  "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *  "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *  "projects/my-project-id/exclusions/my-exclusion-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A non-empty list of fields to change in the existing exclusion.
 *  New values for the fields are taken from the corresponding fields in the
 *  LogExclusion included in this request. Fields not mentioned in update_mask
 *  are not changed and are ignored in the request.For example, to change the
 *  filter and description of an exclusion, specify an update_mask of
 *  "filter,description".
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogExclusion.
 *
 *  Changes one or more properties of an existing exclusion.
 *
 *  @param object The @c GTLRLogging_LogExclusion to include in the query.
 *  @param name Required. The resource name of the exclusion to update:
 *    "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *    "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *    "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *    "projects/my-project-id/exclusions/my-exclusion-id".
 *
 *  @return GTLRLoggingQuery_BillingAccountsExclusionsPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a bucket that can be used to store log entries. Once a bucket has
 *  been created, the region cannot be changed.
 *
 *  Method: logging.billingAccounts.locations.buckets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsLocationsBucketsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsLocationsBucketsCreateWithObject:parent:]

/**
 *  Required. A client-assigned identifier such as "my-bucket". Identifiers are
 *  limited to 100 characters and can include only letters, digits, underscores,
 *  hyphens, and periods.
 */
@property(nonatomic, copy, nullable) NSString *bucketId;

/**
 *  Required. The resource in which to create the bucket:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]" Example:
 *  "projects/my-logging-project/locations/global"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_LogBucket.
 *
 *  Creates a bucket that can be used to store log entries. Once a bucket has
 *  been created, the region cannot be changed.
 *
 *  @param object The @c GTLRLogging_LogBucket to include in the query.
 *  @param parent Required. The resource in which to create the bucket:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]" Example:
 *    "projects/my-logging-project/locations/global"
 *
 *  @return GTLRLoggingQuery_BillingAccountsLocationsBucketsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a bucket. Moves the bucket to the DELETE_REQUESTED state. After 7
 *  days, the bucket will be purged and all logs in the bucket will be
 *  permanently deleted.
 *
 *  Method: logging.billingAccounts.locations.buckets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsLocationsBucketsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsLocationsBucketsDeleteWithname:]

/**
 *  Required. The full resource name of the bucket to delete.
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a bucket. Moves the bucket to the DELETE_REQUESTED state. After 7
 *  days, the bucket will be purged and all logs in the bucket will be
 *  permanently deleted.
 *
 *  @param name Required. The full resource name of the bucket to delete.
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 *
 *  @return GTLRLoggingQuery_BillingAccountsLocationsBucketsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists buckets.
 *
 *  Method: logging.billingAccounts.locations.buckets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_BillingAccountsLocationsBucketsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsLocationsBucketsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose buckets are to be listed:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]" Note: The locations portion of
 *  the resource must be specified, but supplying the character - in place of
 *  LOCATION_ID will return all buckets.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListBucketsResponse.
 *
 *  Lists buckets.
 *
 *  @param parent Required. The parent resource whose buckets are to be listed:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]" Note: The locations portion
 *    of the resource must be specified, but supplying the character - in place
 *    of LOCATION_ID will return all buckets.
 *
 *  @return GTLRLoggingQuery_BillingAccountsLocationsBucketsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a bucket. This method replaces the following fields in the existing
 *  bucket with values from the new bucket: retention_periodIf the retention
 *  period is decreased and the bucket is locked, FAILED_PRECONDITION will be
 *  returned.If the bucket has a LifecycleState of DELETE_REQUESTED,
 *  FAILED_PRECONDITION will be returned.A buckets region may not be modified
 *  after it is created.
 *
 *  Method: logging.billingAccounts.locations.buckets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsLocationsBucketsPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsLocationsBucketsPatchWithObject:name:]

/**
 *  Required. The full resource name of the bucket to update.
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id". Also
 *  requires permission "resourcemanager.projects.updateLiens" to set the locked
 *  property
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Field mask that specifies the fields in bucket that need an
 *  update. A bucket field will be overwritten if, and only if, it is in the
 *  update mask. name and output only fields cannot be updated.For a detailed
 *  FieldMask definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=retention_days.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogBucket.
 *
 *  Updates a bucket. This method replaces the following fields in the existing
 *  bucket with values from the new bucket: retention_periodIf the retention
 *  period is decreased and the bucket is locked, FAILED_PRECONDITION will be
 *  returned.If the bucket has a LifecycleState of DELETE_REQUESTED,
 *  FAILED_PRECONDITION will be returned.A buckets region may not be modified
 *  after it is created.
 *
 *  @param object The @c GTLRLogging_LogBucket to include in the query.
 *  @param name Required. The full resource name of the bucket to update.
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id". Also
 *    requires permission "resourcemanager.projects.updateLiens" to set the
 *    locked property
 *
 *  @return GTLRLoggingQuery_BillingAccountsLocationsBucketsPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                           name:(NSString *)name;

@end

/**
 *  Undeletes a bucket. A bucket that has been deleted may be undeleted within
 *  the grace period of 7 days.
 *
 *  Method: logging.billingAccounts.locations.buckets.undelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsLocationsBucketsUndelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsLocationsBucketsUndeleteWithObject:name:]

/**
 *  Required. The full resource name of the bucket to undelete.
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Undeletes a bucket. A bucket that has been deleted may be undeleted within
 *  the grace period of 7 days.
 *
 *  @param object The @c GTLRLogging_UndeleteBucketRequest to include in the
 *    query.
 *  @param name Required. The full resource name of the bucket to undelete.
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 *
 *  @return GTLRLoggingQuery_BillingAccountsLocationsBucketsUndelete
 */
+ (instancetype)queryWithObject:(GTLRLogging_UndeleteBucketRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a view over logs in a bucket. A bucket may contain a maximum of 50
 *  views.
 *
 *  Method: logging.billingAccounts.locations.buckets.views.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsLocationsBucketsViewsCreateWithObject:parent:]

/**
 *  Required. The bucket in which to create the view
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-logging-project/locations/my-location/buckets/my-bucket"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. The id to use for this view. */
@property(nonatomic, copy, nullable) NSString *viewId;

/**
 *  Fetches a @c GTLRLogging_LogView.
 *
 *  Creates a view over logs in a bucket. A bucket may contain a maximum of 50
 *  views.
 *
 *  @param object The @c GTLRLogging_LogView to include in the query.
 *  @param parent Required. The bucket in which to create the view
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    Example:
 *    "projects/my-logging-project/locations/my-location/buckets/my-bucket"
 *
 *  @return GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a view from a bucket.
 *
 *  Method: logging.billingAccounts.locations.buckets.views.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsLocationsBucketsViewsDeleteWithname:]

/**
 *  Required. The full resource name of the view to delete:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *  Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a view from a bucket.
 *
 *  @param name Required. The full resource name of the view to delete:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *    Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 *
 *  @return GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists views on a bucket.
 *
 *  Method: logging.billingAccounts.locations.buckets.views.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsLocationsBucketsViewsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The bucket whose views are to be listed:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListViewsResponse.
 *
 *  Lists views on a bucket.
 *
 *  @param parent Required. The bucket whose views are to be listed:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *
 *  @return GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a view. This method replaces the following fields in the existing
 *  view with values from the new view: filter.
 *
 *  Method: logging.billingAccounts.locations.buckets.views.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsLocationsBucketsViewsPatchWithObject:name:]

/**
 *  Required. The full resource name of the view to update
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *  Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Field mask that specifies the fields in view that need an update.
 *  A field will be overwritten if, and only if, it is in the update mask. name
 *  and output only fields cannot be updated.For a detailed FieldMask
 *  definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=filter.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogView.
 *
 *  Updates a view. This method replaces the following fields in the existing
 *  view with values from the new view: filter.
 *
 *  @param object The @c GTLRLogging_LogView to include in the query.
 *  @param name Required. The full resource name of the view to update
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *    Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 *
 *  @return GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a location.
 *
 *  Method: logging.billingAccounts.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_BillingAccountsLocationsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRLoggingQuery_BillingAccountsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: logging.billingAccounts.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_BillingAccountsLocationsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsLocationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRLogging_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRLoggingQuery_BillingAccountsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted. Entries received after the delete operation with a timestamp
 *  before the operation will be deleted.
 *
 *  Method: logging.billingAccounts.logs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsLogsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsLogsDeleteWithlogName:]

/**
 *  Required. The resource name of the log to delete:
 *  "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *  "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *  "folders/[FOLDER_ID]/logs/[LOG_ID]" [LOG_ID] must be URL-encoded. For
 *  example, "projects/my-project-id/logs/syslog",
 *  "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *  For more information about log names, see LogEntry.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted. Entries received after the delete operation with a timestamp
 *  before the operation will be deleted.
 *
 *  @param logName Required. The resource name of the log to delete:
 *    "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *    "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *    "folders/[FOLDER_ID]/logs/[LOG_ID]" [LOG_ID] must be URL-encoded. For
 *    example, "projects/my-project-id/logs/syslog",
 *    "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *    For more information about log names, see LogEntry.
 *
 *  @return GTLRLoggingQuery_BillingAccountsLogsDelete
 */
+ (instancetype)queryWithLogName:(NSString *)logName;

@end

/**
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  Method: logging.billingAccounts.logs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_BillingAccountsLogsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsLogsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name that owns the logs: "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]" "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. The resource name that owns the logs:
 *  projects/PROJECT_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_ID
 *  organization/ORGANIZATION_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_ID
 *  billingAccounts/BILLING_ACCOUNT_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_ID
 *  folders/FOLDER_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_IDTo
 *  support legacy queries, it could also be: "projects/PROJECT_ID"
 *  "organizations/ORGANIZATION_ID" "billingAccounts/BILLING_ACCOUNT_ID"
 *  "folders/FOLDER_ID"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNames;

/**
 *  Fetches a @c GTLRLogging_ListLogsResponse.
 *
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  @param parent Required. The resource name that owns the logs:
 *    "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 *
 *  @return GTLRLoggingQuery_BillingAccountsLogsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the sink's
 *  writer_identity is not permitted to write to the destination. A sink can
 *  export log entries only from the resource owning the sink.
 *
 *  Method: logging.billingAccounts.sinks.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsSinksCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsSinksCreateWithObject:parent:]

/**
 *  Required. The resource in which to create the sink: "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]" "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]" Examples: "projects/my-logging-project",
 *  "organizations/123456789".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. Determines the kind of IAM identity returned as writer_identity in
 *  the new sink. If this value is omitted or set to false, and if the sink's
 *  parent is a project, then the value returned as writer_identity is the same
 *  group or service account used by Logging before the addition of writer
 *  identities to this API. The sink's destination must be in the same project
 *  as the sink itself.If this field is set to true, or if the sink is owned by
 *  a non-project resource such as an organization, then the value of
 *  writer_identity will be a unique service account used only for exports from
 *  the new sink. For more information, see writer_identity in LogSink.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the sink's
 *  writer_identity is not permitted to write to the destination. A sink can
 *  export log entries only from the resource owning the sink.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param parent Required. The resource in which to create the sink:
 *    "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]" Examples:
 *    "projects/my-logging-project", "organizations/123456789".
 *
 *  @return GTLRLoggingQuery_BillingAccountsSinksCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  Method: logging.billingAccounts.sinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsSinksDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsSinksDeleteWithsinkName:]

/**
 *  Required. The full resource name of the sink to delete, including the parent
 *  resource and the sink identifier: "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  @param sinkName Required. The full resource name of the sink to delete,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_BillingAccountsSinksDelete
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Gets a sink.
 *
 *  Method: logging.billingAccounts.sinks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_BillingAccountsSinksGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsSinksGetWithsinkName:]

/**
 *  Required. The resource name of the sink:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Gets a sink.
 *
 *  @param sinkName Required. The resource name of the sink:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_BillingAccountsSinksGet
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Lists sinks.
 *
 *  Method: logging.billingAccounts.sinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_BillingAccountsSinksList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsSinksListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose sinks are to be listed:
 *  "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListSinksResponse.
 *
 *  Lists sinks.
 *
 *  @param parent Required. The parent resource whose sinks are to be listed:
 *    "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 *
 *  @return GTLRLoggingQuery_BillingAccountsSinksList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  Method: logging.billingAccounts.sinks.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsSinksPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsSinksPatchWithObject:sinkName:]

/**
 *  Required. The full resource name of the sink to update, including the parent
 *  resource and the sink identifier: "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Optional. See sinks.create for a description of this field. When updating a
 *  sink, the effect of this field on the value of writer_identity in the
 *  updated sink depends on both the old and new values of this field: If the
 *  old and new values of this field are both false or both true, then there is
 *  no change to the sink's writer_identity. If the old value is false and the
 *  new value is true, then writer_identity is changed to a unique service
 *  account. It is an error if the old value is true and the new value is set to
 *  false or defaulted to false.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Optional. Field mask that specifies the fields in sink that need an update.
 *  A sink field will be overwritten if, and only if, it is in the update mask.
 *  name and output only fields cannot be updated.An empty updateMask is
 *  temporarily treated as using the following mask for backwards compatibility
 *  purposes: destination,filter,includeChildren At some point in the future,
 *  behavior will be removed and specifying an empty updateMask will be an
 *  error.For a detailed FieldMask definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=filter.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param sinkName Required. The full resource name of the sink to update,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_BillingAccountsSinksPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName;

@end

/**
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  Method: logging.billingAccounts.sinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsSinksUpdate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsSinksUpdateWithObject:sinkName:]

/**
 *  Required. The full resource name of the sink to update, including the parent
 *  resource and the sink identifier: "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Optional. See sinks.create for a description of this field. When updating a
 *  sink, the effect of this field on the value of writer_identity in the
 *  updated sink depends on both the old and new values of this field: If the
 *  old and new values of this field are both false or both true, then there is
 *  no change to the sink's writer_identity. If the old value is false and the
 *  new value is true, then writer_identity is changed to a unique service
 *  account. It is an error if the old value is true and the new value is set to
 *  false or defaulted to false.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Optional. Field mask that specifies the fields in sink that need an update.
 *  A sink field will be overwritten if, and only if, it is in the update mask.
 *  name and output only fields cannot be updated.An empty updateMask is
 *  temporarily treated as using the following mask for backwards compatibility
 *  purposes: destination,filter,includeChildren At some point in the future,
 *  behavior will be removed and specifying an empty updateMask will be an
 *  error.For a detailed FieldMask definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=filter.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param sinkName Required. The full resource name of the sink to update,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_BillingAccountsSinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName;

@end

/**
 *  Lists log entries. Use this method to retrieve log entries that originated
 *  from a project/folder/organization/billing account. For ways to export log
 *  entries, see Exporting Logs (https://cloud.google.com/logging/docs/export).
 *
 *  Method: logging.entries.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_EntriesList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForEntriesListWithObject:]

/**
 *  Fetches a @c GTLRLogging_ListLogEntriesResponse.
 *
 *  Lists log entries. Use this method to retrieve log entries that originated
 *  from a project/folder/organization/billing account. For ways to export log
 *  entries, see Exporting Logs (https://cloud.google.com/logging/docs/export).
 *
 *  @param object The @c GTLRLogging_ListLogEntriesRequest to include in the
 *    query.
 *
 *  @return GTLRLoggingQuery_EntriesList
 */
+ (instancetype)queryWithObject:(GTLRLogging_ListLogEntriesRequest *)object;

@end

/**
 *  Streaming read of log entries as they are ingested. Until the stream is
 *  terminated, it will continue reading logs.
 *
 *  Method: logging.entries.tail
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_EntriesTail : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForEntriesTailWithObject:]

/**
 *  Fetches a @c GTLRLogging_TailLogEntriesResponse.
 *
 *  Streaming read of log entries as they are ingested. Until the stream is
 *  terminated, it will continue reading logs.
 *
 *  @param object The @c GTLRLogging_TailLogEntriesRequest to include in the
 *    query.
 *
 *  @return GTLRLoggingQuery_EntriesTail
 */
+ (instancetype)queryWithObject:(GTLRLogging_TailLogEntriesRequest *)object;

@end

/**
 *  Writes log entries to Logging. This API method is the only way to send log
 *  entries to Logging. This method is used, directly or indirectly, by the
 *  Logging agent (fluentd) and all logging libraries configured to use Logging.
 *  A single request may contain log entries for a maximum of 1000 different
 *  resources (projects, organizations, billing accounts or folders)
 *
 *  Method: logging.entries.write
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingWrite
 */
@interface GTLRLoggingQuery_EntriesWrite : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForEntriesWriteWithObject:]

/**
 *  Fetches a @c GTLRLogging_WriteLogEntriesResponse.
 *
 *  Writes log entries to Logging. This API method is the only way to send log
 *  entries to Logging. This method is used, directly or indirectly, by the
 *  Logging agent (fluentd) and all logging libraries configured to use Logging.
 *  A single request may contain log entries for a maximum of 1000 different
 *  resources (projects, organizations, billing accounts or folders)
 *
 *  @param object The @c GTLRLogging_WriteLogEntriesRequest to include in the
 *    query.
 *
 *  @return GTLRLoggingQuery_EntriesWrite
 */
+ (instancetype)queryWithObject:(GTLRLogging_WriteLogEntriesRequest *)object;

@end

/**
 *  Creates a new exclusion in a specified parent resource. Only log entries
 *  belonging to that resource can be excluded. You can have up to 10 exclusions
 *  in a resource.
 *
 *  Method: logging.exclusions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ExclusionsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForExclusionsCreateWithObject:parent:]

/**
 *  Required. The parent resource in which to create the exclusion:
 *  "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]" Examples:
 *  "projects/my-logging-project", "organizations/123456789".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_LogExclusion.
 *
 *  Creates a new exclusion in a specified parent resource. Only log entries
 *  belonging to that resource can be excluded. You can have up to 10 exclusions
 *  in a resource.
 *
 *  @param object The @c GTLRLogging_LogExclusion to include in the query.
 *  @param parent Required. The parent resource in which to create the
 *    exclusion: "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]" Examples:
 *    "projects/my-logging-project", "organizations/123456789".
 *
 *  @return GTLRLoggingQuery_ExclusionsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an exclusion.
 *
 *  Method: logging.exclusions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ExclusionsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForExclusionsDeleteWithname:]

/**
 *  Required. The resource name of an existing exclusion to delete:
 *  "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *  "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *  "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *  "projects/my-project-id/exclusions/my-exclusion-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes an exclusion.
 *
 *  @param name Required. The resource name of an existing exclusion to delete:
 *    "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *    "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *    "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *    "projects/my-project-id/exclusions/my-exclusion-id".
 *
 *  @return GTLRLoggingQuery_ExclusionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the description of an exclusion.
 *
 *  Method: logging.exclusions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ExclusionsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForExclusionsGetWithname:]

/**
 *  Required. The resource name of an existing exclusion:
 *  "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *  "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *  "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *  "projects/my-project-id/exclusions/my-exclusion-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_LogExclusion.
 *
 *  Gets the description of an exclusion.
 *
 *  @param name Required. The resource name of an existing exclusion:
 *    "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *    "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *    "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *    "projects/my-project-id/exclusions/my-exclusion-id".
 *
 *  @return GTLRLoggingQuery_ExclusionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all the exclusions in a parent resource.
 *
 *  Method: logging.exclusions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ExclusionsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForExclusionsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose exclusions are to be listed.
 *  "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListExclusionsResponse.
 *
 *  Lists all the exclusions in a parent resource.
 *
 *  @param parent Required. The parent resource whose exclusions are to be
 *    listed. "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 *
 *  @return GTLRLoggingQuery_ExclusionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Changes one or more properties of an existing exclusion.
 *
 *  Method: logging.exclusions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ExclusionsPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForExclusionsPatchWithObject:name:]

/**
 *  Required. The resource name of the exclusion to update:
 *  "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *  "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *  "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *  "projects/my-project-id/exclusions/my-exclusion-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A non-empty list of fields to change in the existing exclusion.
 *  New values for the fields are taken from the corresponding fields in the
 *  LogExclusion included in this request. Fields not mentioned in update_mask
 *  are not changed and are ignored in the request.For example, to change the
 *  filter and description of an exclusion, specify an update_mask of
 *  "filter,description".
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogExclusion.
 *
 *  Changes one or more properties of an existing exclusion.
 *
 *  @param object The @c GTLRLogging_LogExclusion to include in the query.
 *  @param name Required. The resource name of the exclusion to update:
 *    "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *    "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *    "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *    "projects/my-project-id/exclusions/my-exclusion-id".
 *
 *  @return GTLRLoggingQuery_ExclusionsPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new exclusion in a specified parent resource. Only log entries
 *  belonging to that resource can be excluded. You can have up to 10 exclusions
 *  in a resource.
 *
 *  Method: logging.folders.exclusions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersExclusionsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersExclusionsCreateWithObject:parent:]

/**
 *  Required. The parent resource in which to create the exclusion:
 *  "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]" Examples:
 *  "projects/my-logging-project", "organizations/123456789".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_LogExclusion.
 *
 *  Creates a new exclusion in a specified parent resource. Only log entries
 *  belonging to that resource can be excluded. You can have up to 10 exclusions
 *  in a resource.
 *
 *  @param object The @c GTLRLogging_LogExclusion to include in the query.
 *  @param parent Required. The parent resource in which to create the
 *    exclusion: "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]" Examples:
 *    "projects/my-logging-project", "organizations/123456789".
 *
 *  @return GTLRLoggingQuery_FoldersExclusionsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an exclusion.
 *
 *  Method: logging.folders.exclusions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersExclusionsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersExclusionsDeleteWithname:]

/**
 *  Required. The resource name of an existing exclusion to delete:
 *  "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *  "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *  "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *  "projects/my-project-id/exclusions/my-exclusion-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes an exclusion.
 *
 *  @param name Required. The resource name of an existing exclusion to delete:
 *    "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *    "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *    "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *    "projects/my-project-id/exclusions/my-exclusion-id".
 *
 *  @return GTLRLoggingQuery_FoldersExclusionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the description of an exclusion.
 *
 *  Method: logging.folders.exclusions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_FoldersExclusionsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersExclusionsGetWithname:]

/**
 *  Required. The resource name of an existing exclusion:
 *  "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *  "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *  "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *  "projects/my-project-id/exclusions/my-exclusion-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_LogExclusion.
 *
 *  Gets the description of an exclusion.
 *
 *  @param name Required. The resource name of an existing exclusion:
 *    "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *    "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *    "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *    "projects/my-project-id/exclusions/my-exclusion-id".
 *
 *  @return GTLRLoggingQuery_FoldersExclusionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all the exclusions in a parent resource.
 *
 *  Method: logging.folders.exclusions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_FoldersExclusionsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersExclusionsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose exclusions are to be listed.
 *  "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListExclusionsResponse.
 *
 *  Lists all the exclusions in a parent resource.
 *
 *  @param parent Required. The parent resource whose exclusions are to be
 *    listed. "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 *
 *  @return GTLRLoggingQuery_FoldersExclusionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Changes one or more properties of an existing exclusion.
 *
 *  Method: logging.folders.exclusions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersExclusionsPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersExclusionsPatchWithObject:name:]

/**
 *  Required. The resource name of the exclusion to update:
 *  "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *  "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *  "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *  "projects/my-project-id/exclusions/my-exclusion-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A non-empty list of fields to change in the existing exclusion.
 *  New values for the fields are taken from the corresponding fields in the
 *  LogExclusion included in this request. Fields not mentioned in update_mask
 *  are not changed and are ignored in the request.For example, to change the
 *  filter and description of an exclusion, specify an update_mask of
 *  "filter,description".
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogExclusion.
 *
 *  Changes one or more properties of an existing exclusion.
 *
 *  @param object The @c GTLRLogging_LogExclusion to include in the query.
 *  @param name Required. The resource name of the exclusion to update:
 *    "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *    "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *    "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *    "projects/my-project-id/exclusions/my-exclusion-id".
 *
 *  @return GTLRLoggingQuery_FoldersExclusionsPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a bucket that can be used to store log entries. Once a bucket has
 *  been created, the region cannot be changed.
 *
 *  Method: logging.folders.locations.buckets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersLocationsBucketsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLocationsBucketsCreateWithObject:parent:]

/**
 *  Required. A client-assigned identifier such as "my-bucket". Identifiers are
 *  limited to 100 characters and can include only letters, digits, underscores,
 *  hyphens, and periods.
 */
@property(nonatomic, copy, nullable) NSString *bucketId;

/**
 *  Required. The resource in which to create the bucket:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]" Example:
 *  "projects/my-logging-project/locations/global"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_LogBucket.
 *
 *  Creates a bucket that can be used to store log entries. Once a bucket has
 *  been created, the region cannot be changed.
 *
 *  @param object The @c GTLRLogging_LogBucket to include in the query.
 *  @param parent Required. The resource in which to create the bucket:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]" Example:
 *    "projects/my-logging-project/locations/global"
 *
 *  @return GTLRLoggingQuery_FoldersLocationsBucketsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a bucket. Moves the bucket to the DELETE_REQUESTED state. After 7
 *  days, the bucket will be purged and all logs in the bucket will be
 *  permanently deleted.
 *
 *  Method: logging.folders.locations.buckets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersLocationsBucketsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLocationsBucketsDeleteWithname:]

/**
 *  Required. The full resource name of the bucket to delete.
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a bucket. Moves the bucket to the DELETE_REQUESTED state. After 7
 *  days, the bucket will be purged and all logs in the bucket will be
 *  permanently deleted.
 *
 *  @param name Required. The full resource name of the bucket to delete.
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 *
 *  @return GTLRLoggingQuery_FoldersLocationsBucketsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a bucket.
 *
 *  Method: logging.folders.locations.buckets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_FoldersLocationsBucketsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLocationsBucketsGetWithname:]

/**
 *  Required. The resource name of the bucket:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_LogBucket.
 *
 *  Gets a bucket.
 *
 *  @param name Required. The resource name of the bucket:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 *
 *  @return GTLRLoggingQuery_FoldersLocationsBucketsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists buckets.
 *
 *  Method: logging.folders.locations.buckets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_FoldersLocationsBucketsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLocationsBucketsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose buckets are to be listed:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]" Note: The locations portion of
 *  the resource must be specified, but supplying the character - in place of
 *  LOCATION_ID will return all buckets.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListBucketsResponse.
 *
 *  Lists buckets.
 *
 *  @param parent Required. The parent resource whose buckets are to be listed:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]" Note: The locations portion
 *    of the resource must be specified, but supplying the character - in place
 *    of LOCATION_ID will return all buckets.
 *
 *  @return GTLRLoggingQuery_FoldersLocationsBucketsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a bucket. This method replaces the following fields in the existing
 *  bucket with values from the new bucket: retention_periodIf the retention
 *  period is decreased and the bucket is locked, FAILED_PRECONDITION will be
 *  returned.If the bucket has a LifecycleState of DELETE_REQUESTED,
 *  FAILED_PRECONDITION will be returned.A buckets region may not be modified
 *  after it is created.
 *
 *  Method: logging.folders.locations.buckets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersLocationsBucketsPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLocationsBucketsPatchWithObject:name:]

/**
 *  Required. The full resource name of the bucket to update.
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id". Also
 *  requires permission "resourcemanager.projects.updateLiens" to set the locked
 *  property
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Field mask that specifies the fields in bucket that need an
 *  update. A bucket field will be overwritten if, and only if, it is in the
 *  update mask. name and output only fields cannot be updated.For a detailed
 *  FieldMask definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=retention_days.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogBucket.
 *
 *  Updates a bucket. This method replaces the following fields in the existing
 *  bucket with values from the new bucket: retention_periodIf the retention
 *  period is decreased and the bucket is locked, FAILED_PRECONDITION will be
 *  returned.If the bucket has a LifecycleState of DELETE_REQUESTED,
 *  FAILED_PRECONDITION will be returned.A buckets region may not be modified
 *  after it is created.
 *
 *  @param object The @c GTLRLogging_LogBucket to include in the query.
 *  @param name Required. The full resource name of the bucket to update.
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id". Also
 *    requires permission "resourcemanager.projects.updateLiens" to set the
 *    locked property
 *
 *  @return GTLRLoggingQuery_FoldersLocationsBucketsPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                           name:(NSString *)name;

@end

/**
 *  Undeletes a bucket. A bucket that has been deleted may be undeleted within
 *  the grace period of 7 days.
 *
 *  Method: logging.folders.locations.buckets.undelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersLocationsBucketsUndelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLocationsBucketsUndeleteWithObject:name:]

/**
 *  Required. The full resource name of the bucket to undelete.
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Undeletes a bucket. A bucket that has been deleted may be undeleted within
 *  the grace period of 7 days.
 *
 *  @param object The @c GTLRLogging_UndeleteBucketRequest to include in the
 *    query.
 *  @param name Required. The full resource name of the bucket to undelete.
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 *
 *  @return GTLRLoggingQuery_FoldersLocationsBucketsUndelete
 */
+ (instancetype)queryWithObject:(GTLRLogging_UndeleteBucketRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a view over logs in a bucket. A bucket may contain a maximum of 50
 *  views.
 *
 *  Method: logging.folders.locations.buckets.views.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersLocationsBucketsViewsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLocationsBucketsViewsCreateWithObject:parent:]

/**
 *  Required. The bucket in which to create the view
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-logging-project/locations/my-location/buckets/my-bucket"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. The id to use for this view. */
@property(nonatomic, copy, nullable) NSString *viewId;

/**
 *  Fetches a @c GTLRLogging_LogView.
 *
 *  Creates a view over logs in a bucket. A bucket may contain a maximum of 50
 *  views.
 *
 *  @param object The @c GTLRLogging_LogView to include in the query.
 *  @param parent Required. The bucket in which to create the view
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    Example:
 *    "projects/my-logging-project/locations/my-location/buckets/my-bucket"
 *
 *  @return GTLRLoggingQuery_FoldersLocationsBucketsViewsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a view from a bucket.
 *
 *  Method: logging.folders.locations.buckets.views.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersLocationsBucketsViewsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLocationsBucketsViewsDeleteWithname:]

/**
 *  Required. The full resource name of the view to delete:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *  Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a view from a bucket.
 *
 *  @param name Required. The full resource name of the view to delete:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *    Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 *
 *  @return GTLRLoggingQuery_FoldersLocationsBucketsViewsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a view.
 *
 *  Method: logging.folders.locations.buckets.views.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_FoldersLocationsBucketsViewsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLocationsBucketsViewsGetWithname:]

/**
 *  Required. The resource name of the policy:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *  Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_LogView.
 *
 *  Gets a view.
 *
 *  @param name Required. The resource name of the policy:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *    Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 *
 *  @return GTLRLoggingQuery_FoldersLocationsBucketsViewsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists views on a bucket.
 *
 *  Method: logging.folders.locations.buckets.views.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_FoldersLocationsBucketsViewsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLocationsBucketsViewsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The bucket whose views are to be listed:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListViewsResponse.
 *
 *  Lists views on a bucket.
 *
 *  @param parent Required. The bucket whose views are to be listed:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *
 *  @return GTLRLoggingQuery_FoldersLocationsBucketsViewsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a view. This method replaces the following fields in the existing
 *  view with values from the new view: filter.
 *
 *  Method: logging.folders.locations.buckets.views.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersLocationsBucketsViewsPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLocationsBucketsViewsPatchWithObject:name:]

/**
 *  Required. The full resource name of the view to update
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *  Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Field mask that specifies the fields in view that need an update.
 *  A field will be overwritten if, and only if, it is in the update mask. name
 *  and output only fields cannot be updated.For a detailed FieldMask
 *  definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=filter.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogView.
 *
 *  Updates a view. This method replaces the following fields in the existing
 *  view with values from the new view: filter.
 *
 *  @param object The @c GTLRLogging_LogView to include in the query.
 *  @param name Required. The full resource name of the view to update
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *    Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 *
 *  @return GTLRLoggingQuery_FoldersLocationsBucketsViewsPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a location.
 *
 *  Method: logging.folders.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_FoldersLocationsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRLoggingQuery_FoldersLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: logging.folders.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_FoldersLocationsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLocationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRLogging_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRLoggingQuery_FoldersLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted. Entries received after the delete operation with a timestamp
 *  before the operation will be deleted.
 *
 *  Method: logging.folders.logs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersLogsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLogsDeleteWithlogName:]

/**
 *  Required. The resource name of the log to delete:
 *  "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *  "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *  "folders/[FOLDER_ID]/logs/[LOG_ID]" [LOG_ID] must be URL-encoded. For
 *  example, "projects/my-project-id/logs/syslog",
 *  "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *  For more information about log names, see LogEntry.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted. Entries received after the delete operation with a timestamp
 *  before the operation will be deleted.
 *
 *  @param logName Required. The resource name of the log to delete:
 *    "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *    "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *    "folders/[FOLDER_ID]/logs/[LOG_ID]" [LOG_ID] must be URL-encoded. For
 *    example, "projects/my-project-id/logs/syslog",
 *    "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *    For more information about log names, see LogEntry.
 *
 *  @return GTLRLoggingQuery_FoldersLogsDelete
 */
+ (instancetype)queryWithLogName:(NSString *)logName;

@end

/**
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  Method: logging.folders.logs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_FoldersLogsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLogsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name that owns the logs: "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]" "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. The resource name that owns the logs:
 *  projects/PROJECT_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_ID
 *  organization/ORGANIZATION_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_ID
 *  billingAccounts/BILLING_ACCOUNT_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_ID
 *  folders/FOLDER_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_IDTo
 *  support legacy queries, it could also be: "projects/PROJECT_ID"
 *  "organizations/ORGANIZATION_ID" "billingAccounts/BILLING_ACCOUNT_ID"
 *  "folders/FOLDER_ID"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNames;

/**
 *  Fetches a @c GTLRLogging_ListLogsResponse.
 *
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  @param parent Required. The resource name that owns the logs:
 *    "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 *
 *  @return GTLRLoggingQuery_FoldersLogsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the sink's
 *  writer_identity is not permitted to write to the destination. A sink can
 *  export log entries only from the resource owning the sink.
 *
 *  Method: logging.folders.sinks.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersSinksCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersSinksCreateWithObject:parent:]

/**
 *  Required. The resource in which to create the sink: "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]" "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]" Examples: "projects/my-logging-project",
 *  "organizations/123456789".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. Determines the kind of IAM identity returned as writer_identity in
 *  the new sink. If this value is omitted or set to false, and if the sink's
 *  parent is a project, then the value returned as writer_identity is the same
 *  group or service account used by Logging before the addition of writer
 *  identities to this API. The sink's destination must be in the same project
 *  as the sink itself.If this field is set to true, or if the sink is owned by
 *  a non-project resource such as an organization, then the value of
 *  writer_identity will be a unique service account used only for exports from
 *  the new sink. For more information, see writer_identity in LogSink.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the sink's
 *  writer_identity is not permitted to write to the destination. A sink can
 *  export log entries only from the resource owning the sink.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param parent Required. The resource in which to create the sink:
 *    "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]" Examples:
 *    "projects/my-logging-project", "organizations/123456789".
 *
 *  @return GTLRLoggingQuery_FoldersSinksCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  Method: logging.folders.sinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersSinksDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersSinksDeleteWithsinkName:]

/**
 *  Required. The full resource name of the sink to delete, including the parent
 *  resource and the sink identifier: "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  @param sinkName Required. The full resource name of the sink to delete,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_FoldersSinksDelete
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Gets a sink.
 *
 *  Method: logging.folders.sinks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_FoldersSinksGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersSinksGetWithsinkName:]

/**
 *  Required. The resource name of the sink:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Gets a sink.
 *
 *  @param sinkName Required. The resource name of the sink:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_FoldersSinksGet
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Lists sinks.
 *
 *  Method: logging.folders.sinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_FoldersSinksList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersSinksListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose sinks are to be listed:
 *  "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListSinksResponse.
 *
 *  Lists sinks.
 *
 *  @param parent Required. The parent resource whose sinks are to be listed:
 *    "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 *
 *  @return GTLRLoggingQuery_FoldersSinksList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  Method: logging.folders.sinks.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersSinksPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersSinksPatchWithObject:sinkName:]

/**
 *  Required. The full resource name of the sink to update, including the parent
 *  resource and the sink identifier: "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Optional. See sinks.create for a description of this field. When updating a
 *  sink, the effect of this field on the value of writer_identity in the
 *  updated sink depends on both the old and new values of this field: If the
 *  old and new values of this field are both false or both true, then there is
 *  no change to the sink's writer_identity. If the old value is false and the
 *  new value is true, then writer_identity is changed to a unique service
 *  account. It is an error if the old value is true and the new value is set to
 *  false or defaulted to false.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Optional. Field mask that specifies the fields in sink that need an update.
 *  A sink field will be overwritten if, and only if, it is in the update mask.
 *  name and output only fields cannot be updated.An empty updateMask is
 *  temporarily treated as using the following mask for backwards compatibility
 *  purposes: destination,filter,includeChildren At some point in the future,
 *  behavior will be removed and specifying an empty updateMask will be an
 *  error.For a detailed FieldMask definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=filter.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param sinkName Required. The full resource name of the sink to update,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_FoldersSinksPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName;

@end

/**
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  Method: logging.folders.sinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersSinksUpdate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersSinksUpdateWithObject:sinkName:]

/**
 *  Required. The full resource name of the sink to update, including the parent
 *  resource and the sink identifier: "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Optional. See sinks.create for a description of this field. When updating a
 *  sink, the effect of this field on the value of writer_identity in the
 *  updated sink depends on both the old and new values of this field: If the
 *  old and new values of this field are both false or both true, then there is
 *  no change to the sink's writer_identity. If the old value is false and the
 *  new value is true, then writer_identity is changed to a unique service
 *  account. It is an error if the old value is true and the new value is set to
 *  false or defaulted to false.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Optional. Field mask that specifies the fields in sink that need an update.
 *  A sink field will be overwritten if, and only if, it is in the update mask.
 *  name and output only fields cannot be updated.An empty updateMask is
 *  temporarily treated as using the following mask for backwards compatibility
 *  purposes: destination,filter,includeChildren At some point in the future,
 *  behavior will be removed and specifying an empty updateMask will be an
 *  error.For a detailed FieldMask definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=filter.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param sinkName Required. The full resource name of the sink to update,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_FoldersSinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName;

@end

/**
 *  Creates a bucket that can be used to store log entries. Once a bucket has
 *  been created, the region cannot be changed.
 *
 *  Method: logging.locations.buckets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_LocationsBucketsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForLocationsBucketsCreateWithObject:parent:]

/**
 *  Required. A client-assigned identifier such as "my-bucket". Identifiers are
 *  limited to 100 characters and can include only letters, digits, underscores,
 *  hyphens, and periods.
 */
@property(nonatomic, copy, nullable) NSString *bucketId;

/**
 *  Required. The resource in which to create the bucket:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]" Example:
 *  "projects/my-logging-project/locations/global"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_LogBucket.
 *
 *  Creates a bucket that can be used to store log entries. Once a bucket has
 *  been created, the region cannot be changed.
 *
 *  @param object The @c GTLRLogging_LogBucket to include in the query.
 *  @param parent Required. The resource in which to create the bucket:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]" Example:
 *    "projects/my-logging-project/locations/global"
 *
 *  @return GTLRLoggingQuery_LocationsBucketsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a bucket. Moves the bucket to the DELETE_REQUESTED state. After 7
 *  days, the bucket will be purged and all logs in the bucket will be
 *  permanently deleted.
 *
 *  Method: logging.locations.buckets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_LocationsBucketsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForLocationsBucketsDeleteWithname:]

/**
 *  Required. The full resource name of the bucket to delete.
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a bucket. Moves the bucket to the DELETE_REQUESTED state. After 7
 *  days, the bucket will be purged and all logs in the bucket will be
 *  permanently deleted.
 *
 *  @param name Required. The full resource name of the bucket to delete.
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 *
 *  @return GTLRLoggingQuery_LocationsBucketsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a bucket.
 *
 *  Method: logging.locations.buckets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_LocationsBucketsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForLocationsBucketsGetWithname:]

/**
 *  Required. The resource name of the bucket:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_LogBucket.
 *
 *  Gets a bucket.
 *
 *  @param name Required. The resource name of the bucket:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 *
 *  @return GTLRLoggingQuery_LocationsBucketsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists buckets.
 *
 *  Method: logging.locations.buckets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_LocationsBucketsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForLocationsBucketsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose buckets are to be listed:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]" Note: The locations portion of
 *  the resource must be specified, but supplying the character - in place of
 *  LOCATION_ID will return all buckets.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListBucketsResponse.
 *
 *  Lists buckets.
 *
 *  @param parent Required. The parent resource whose buckets are to be listed:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]" Note: The locations portion
 *    of the resource must be specified, but supplying the character - in place
 *    of LOCATION_ID will return all buckets.
 *
 *  @return GTLRLoggingQuery_LocationsBucketsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a bucket. This method replaces the following fields in the existing
 *  bucket with values from the new bucket: retention_periodIf the retention
 *  period is decreased and the bucket is locked, FAILED_PRECONDITION will be
 *  returned.If the bucket has a LifecycleState of DELETE_REQUESTED,
 *  FAILED_PRECONDITION will be returned.A buckets region may not be modified
 *  after it is created.
 *
 *  Method: logging.locations.buckets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_LocationsBucketsPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForLocationsBucketsPatchWithObject:name:]

/**
 *  Required. The full resource name of the bucket to update.
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id". Also
 *  requires permission "resourcemanager.projects.updateLiens" to set the locked
 *  property
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Field mask that specifies the fields in bucket that need an
 *  update. A bucket field will be overwritten if, and only if, it is in the
 *  update mask. name and output only fields cannot be updated.For a detailed
 *  FieldMask definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=retention_days.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogBucket.
 *
 *  Updates a bucket. This method replaces the following fields in the existing
 *  bucket with values from the new bucket: retention_periodIf the retention
 *  period is decreased and the bucket is locked, FAILED_PRECONDITION will be
 *  returned.If the bucket has a LifecycleState of DELETE_REQUESTED,
 *  FAILED_PRECONDITION will be returned.A buckets region may not be modified
 *  after it is created.
 *
 *  @param object The @c GTLRLogging_LogBucket to include in the query.
 *  @param name Required. The full resource name of the bucket to update.
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id". Also
 *    requires permission "resourcemanager.projects.updateLiens" to set the
 *    locked property
 *
 *  @return GTLRLoggingQuery_LocationsBucketsPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                           name:(NSString *)name;

@end

/**
 *  Undeletes a bucket. A bucket that has been deleted may be undeleted within
 *  the grace period of 7 days.
 *
 *  Method: logging.locations.buckets.undelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_LocationsBucketsUndelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForLocationsBucketsUndeleteWithObject:name:]

/**
 *  Required. The full resource name of the bucket to undelete.
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Undeletes a bucket. A bucket that has been deleted may be undeleted within
 *  the grace period of 7 days.
 *
 *  @param object The @c GTLRLogging_UndeleteBucketRequest to include in the
 *    query.
 *  @param name Required. The full resource name of the bucket to undelete.
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 *
 *  @return GTLRLoggingQuery_LocationsBucketsUndelete
 */
+ (instancetype)queryWithObject:(GTLRLogging_UndeleteBucketRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a view over logs in a bucket. A bucket may contain a maximum of 50
 *  views.
 *
 *  Method: logging.locations.buckets.views.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_LocationsBucketsViewsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForLocationsBucketsViewsCreateWithObject:parent:]

/**
 *  Required. The bucket in which to create the view
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-logging-project/locations/my-location/buckets/my-bucket"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. The id to use for this view. */
@property(nonatomic, copy, nullable) NSString *viewId;

/**
 *  Fetches a @c GTLRLogging_LogView.
 *
 *  Creates a view over logs in a bucket. A bucket may contain a maximum of 50
 *  views.
 *
 *  @param object The @c GTLRLogging_LogView to include in the query.
 *  @param parent Required. The bucket in which to create the view
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    Example:
 *    "projects/my-logging-project/locations/my-location/buckets/my-bucket"
 *
 *  @return GTLRLoggingQuery_LocationsBucketsViewsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a view from a bucket.
 *
 *  Method: logging.locations.buckets.views.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_LocationsBucketsViewsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForLocationsBucketsViewsDeleteWithname:]

/**
 *  Required. The full resource name of the view to delete:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *  Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a view from a bucket.
 *
 *  @param name Required. The full resource name of the view to delete:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *    Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 *
 *  @return GTLRLoggingQuery_LocationsBucketsViewsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a view.
 *
 *  Method: logging.locations.buckets.views.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_LocationsBucketsViewsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForLocationsBucketsViewsGetWithname:]

/**
 *  Required. The resource name of the policy:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *  Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_LogView.
 *
 *  Gets a view.
 *
 *  @param name Required. The resource name of the policy:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *    Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 *
 *  @return GTLRLoggingQuery_LocationsBucketsViewsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists views on a bucket.
 *
 *  Method: logging.locations.buckets.views.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_LocationsBucketsViewsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForLocationsBucketsViewsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The bucket whose views are to be listed:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListViewsResponse.
 *
 *  Lists views on a bucket.
 *
 *  @param parent Required. The bucket whose views are to be listed:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *
 *  @return GTLRLoggingQuery_LocationsBucketsViewsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a view. This method replaces the following fields in the existing
 *  view with values from the new view: filter.
 *
 *  Method: logging.locations.buckets.views.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_LocationsBucketsViewsPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForLocationsBucketsViewsPatchWithObject:name:]

/**
 *  Required. The full resource name of the view to update
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *  Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Field mask that specifies the fields in view that need an update.
 *  A field will be overwritten if, and only if, it is in the update mask. name
 *  and output only fields cannot be updated.For a detailed FieldMask
 *  definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=filter.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogView.
 *
 *  Updates a view. This method replaces the following fields in the existing
 *  view with values from the new view: filter.
 *
 *  @param object The @c GTLRLogging_LogView to include in the query.
 *  @param name Required. The full resource name of the view to update
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *    Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 *
 *  @return GTLRLoggingQuery_LocationsBucketsViewsPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a location.
 *
 *  Method: logging.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_LocationsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRLoggingQuery_LocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: logging.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_LocationsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForLocationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRLogging_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRLoggingQuery_LocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted. Entries received after the delete operation with a timestamp
 *  before the operation will be deleted.
 *
 *  Method: logging.logs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_LogsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForLogsDeleteWithlogName:]

/**
 *  Required. The resource name of the log to delete:
 *  "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *  "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *  "folders/[FOLDER_ID]/logs/[LOG_ID]" [LOG_ID] must be URL-encoded. For
 *  example, "projects/my-project-id/logs/syslog",
 *  "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *  For more information about log names, see LogEntry.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted. Entries received after the delete operation with a timestamp
 *  before the operation will be deleted.
 *
 *  @param logName Required. The resource name of the log to delete:
 *    "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *    "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *    "folders/[FOLDER_ID]/logs/[LOG_ID]" [LOG_ID] must be URL-encoded. For
 *    example, "projects/my-project-id/logs/syslog",
 *    "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *    For more information about log names, see LogEntry.
 *
 *  @return GTLRLoggingQuery_LogsDelete
 */
+ (instancetype)queryWithLogName:(NSString *)logName;

@end

/**
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  Method: logging.logs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_LogsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForLogsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name that owns the logs: "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]" "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. The resource name that owns the logs:
 *  projects/PROJECT_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_ID
 *  organization/ORGANIZATION_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_ID
 *  billingAccounts/BILLING_ACCOUNT_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_ID
 *  folders/FOLDER_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_IDTo
 *  support legacy queries, it could also be: "projects/PROJECT_ID"
 *  "organizations/ORGANIZATION_ID" "billingAccounts/BILLING_ACCOUNT_ID"
 *  "folders/FOLDER_ID"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNames;

/**
 *  Fetches a @c GTLRLogging_ListLogsResponse.
 *
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  @param parent Required. The resource name that owns the logs:
 *    "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 *
 *  @return GTLRLoggingQuery_LogsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists the descriptors for monitored resource types used by Logging.
 *
 *  Method: logging.monitoredResourceDescriptors.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_MonitoredResourceDescriptorsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForMonitoredResourceDescriptorsList]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRLogging_ListMonitoredResourceDescriptorsResponse.
 *
 *  Lists the descriptors for monitored resource types used by Logging.
 *
 *  @return GTLRLoggingQuery_MonitoredResourceDescriptorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Creates a new exclusion in a specified parent resource. Only log entries
 *  belonging to that resource can be excluded. You can have up to 10 exclusions
 *  in a resource.
 *
 *  Method: logging.organizations.exclusions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsExclusionsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsExclusionsCreateWithObject:parent:]

/**
 *  Required. The parent resource in which to create the exclusion:
 *  "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]" Examples:
 *  "projects/my-logging-project", "organizations/123456789".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_LogExclusion.
 *
 *  Creates a new exclusion in a specified parent resource. Only log entries
 *  belonging to that resource can be excluded. You can have up to 10 exclusions
 *  in a resource.
 *
 *  @param object The @c GTLRLogging_LogExclusion to include in the query.
 *  @param parent Required. The parent resource in which to create the
 *    exclusion: "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]" Examples:
 *    "projects/my-logging-project", "organizations/123456789".
 *
 *  @return GTLRLoggingQuery_OrganizationsExclusionsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an exclusion.
 *
 *  Method: logging.organizations.exclusions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsExclusionsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsExclusionsDeleteWithname:]

/**
 *  Required. The resource name of an existing exclusion to delete:
 *  "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *  "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *  "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *  "projects/my-project-id/exclusions/my-exclusion-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes an exclusion.
 *
 *  @param name Required. The resource name of an existing exclusion to delete:
 *    "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *    "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *    "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *    "projects/my-project-id/exclusions/my-exclusion-id".
 *
 *  @return GTLRLoggingQuery_OrganizationsExclusionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the description of an exclusion.
 *
 *  Method: logging.organizations.exclusions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsExclusionsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsExclusionsGetWithname:]

/**
 *  Required. The resource name of an existing exclusion:
 *  "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *  "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *  "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *  "projects/my-project-id/exclusions/my-exclusion-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_LogExclusion.
 *
 *  Gets the description of an exclusion.
 *
 *  @param name Required. The resource name of an existing exclusion:
 *    "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *    "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *    "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *    "projects/my-project-id/exclusions/my-exclusion-id".
 *
 *  @return GTLRLoggingQuery_OrganizationsExclusionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all the exclusions in a parent resource.
 *
 *  Method: logging.organizations.exclusions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsExclusionsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsExclusionsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose exclusions are to be listed.
 *  "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListExclusionsResponse.
 *
 *  Lists all the exclusions in a parent resource.
 *
 *  @param parent Required. The parent resource whose exclusions are to be
 *    listed. "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 *
 *  @return GTLRLoggingQuery_OrganizationsExclusionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Changes one or more properties of an existing exclusion.
 *
 *  Method: logging.organizations.exclusions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsExclusionsPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsExclusionsPatchWithObject:name:]

/**
 *  Required. The resource name of the exclusion to update:
 *  "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *  "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *  "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *  "projects/my-project-id/exclusions/my-exclusion-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A non-empty list of fields to change in the existing exclusion.
 *  New values for the fields are taken from the corresponding fields in the
 *  LogExclusion included in this request. Fields not mentioned in update_mask
 *  are not changed and are ignored in the request.For example, to change the
 *  filter and description of an exclusion, specify an update_mask of
 *  "filter,description".
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogExclusion.
 *
 *  Changes one or more properties of an existing exclusion.
 *
 *  @param object The @c GTLRLogging_LogExclusion to include in the query.
 *  @param name Required. The resource name of the exclusion to update:
 *    "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *    "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *    "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *    "projects/my-project-id/exclusions/my-exclusion-id".
 *
 *  @return GTLRLoggingQuery_OrganizationsExclusionsPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the Logs Router CMEK settings for the given resource.Note: CMEK for the
 *  Logs Router can currently only be configured for GCP organizations. Once
 *  configured, it applies to all projects and folders in the GCP
 *  organization.See Enabling CMEK for Logs Router
 *  (https://cloud.google.com/logging/docs/routing/managed-encryption) for more
 *  information.
 *
 *  Method: logging.organizations.getCmekSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsGetCmekSettings : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsGetCmekSettingsWithname:]

/**
 *  Required. The resource for which to retrieve CMEK settings.
 *  "projects/[PROJECT_ID]/cmekSettings"
 *  "organizations/[ORGANIZATION_ID]/cmekSettings"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/cmekSettings"
 *  "folders/[FOLDER_ID]/cmekSettings" Example:
 *  "organizations/12345/cmekSettings".Note: CMEK for the Logs Router can
 *  currently only be configured for GCP organizations. Once configured, it
 *  applies to all projects and folders in the GCP organization.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_CmekSettings.
 *
 *  Gets the Logs Router CMEK settings for the given resource.Note: CMEK for the
 *  Logs Router can currently only be configured for GCP organizations. Once
 *  configured, it applies to all projects and folders in the GCP
 *  organization.See Enabling CMEK for Logs Router
 *  (https://cloud.google.com/logging/docs/routing/managed-encryption) for more
 *  information.
 *
 *  @param name Required. The resource for which to retrieve CMEK settings.
 *    "projects/[PROJECT_ID]/cmekSettings"
 *    "organizations/[ORGANIZATION_ID]/cmekSettings"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/cmekSettings"
 *    "folders/[FOLDER_ID]/cmekSettings" Example:
 *    "organizations/12345/cmekSettings".Note: CMEK for the Logs Router can
 *    currently only be configured for GCP organizations. Once configured, it
 *    applies to all projects and folders in the GCP organization.
 *
 *  @return GTLRLoggingQuery_OrganizationsGetCmekSettings
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a bucket that can be used to store log entries. Once a bucket has
 *  been created, the region cannot be changed.
 *
 *  Method: logging.organizations.locations.buckets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsLocationsBucketsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLocationsBucketsCreateWithObject:parent:]

/**
 *  Required. A client-assigned identifier such as "my-bucket". Identifiers are
 *  limited to 100 characters and can include only letters, digits, underscores,
 *  hyphens, and periods.
 */
@property(nonatomic, copy, nullable) NSString *bucketId;

/**
 *  Required. The resource in which to create the bucket:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]" Example:
 *  "projects/my-logging-project/locations/global"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_LogBucket.
 *
 *  Creates a bucket that can be used to store log entries. Once a bucket has
 *  been created, the region cannot be changed.
 *
 *  @param object The @c GTLRLogging_LogBucket to include in the query.
 *  @param parent Required. The resource in which to create the bucket:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]" Example:
 *    "projects/my-logging-project/locations/global"
 *
 *  @return GTLRLoggingQuery_OrganizationsLocationsBucketsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a bucket. Moves the bucket to the DELETE_REQUESTED state. After 7
 *  days, the bucket will be purged and all logs in the bucket will be
 *  permanently deleted.
 *
 *  Method: logging.organizations.locations.buckets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsLocationsBucketsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLocationsBucketsDeleteWithname:]

/**
 *  Required. The full resource name of the bucket to delete.
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a bucket. Moves the bucket to the DELETE_REQUESTED state. After 7
 *  days, the bucket will be purged and all logs in the bucket will be
 *  permanently deleted.
 *
 *  @param name Required. The full resource name of the bucket to delete.
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 *
 *  @return GTLRLoggingQuery_OrganizationsLocationsBucketsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a bucket.
 *
 *  Method: logging.organizations.locations.buckets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsLocationsBucketsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLocationsBucketsGetWithname:]

/**
 *  Required. The resource name of the bucket:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_LogBucket.
 *
 *  Gets a bucket.
 *
 *  @param name Required. The resource name of the bucket:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 *
 *  @return GTLRLoggingQuery_OrganizationsLocationsBucketsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists buckets.
 *
 *  Method: logging.organizations.locations.buckets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsLocationsBucketsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLocationsBucketsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose buckets are to be listed:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]" Note: The locations portion of
 *  the resource must be specified, but supplying the character - in place of
 *  LOCATION_ID will return all buckets.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListBucketsResponse.
 *
 *  Lists buckets.
 *
 *  @param parent Required. The parent resource whose buckets are to be listed:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]" Note: The locations portion
 *    of the resource must be specified, but supplying the character - in place
 *    of LOCATION_ID will return all buckets.
 *
 *  @return GTLRLoggingQuery_OrganizationsLocationsBucketsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a bucket. This method replaces the following fields in the existing
 *  bucket with values from the new bucket: retention_periodIf the retention
 *  period is decreased and the bucket is locked, FAILED_PRECONDITION will be
 *  returned.If the bucket has a LifecycleState of DELETE_REQUESTED,
 *  FAILED_PRECONDITION will be returned.A buckets region may not be modified
 *  after it is created.
 *
 *  Method: logging.organizations.locations.buckets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsLocationsBucketsPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLocationsBucketsPatchWithObject:name:]

/**
 *  Required. The full resource name of the bucket to update.
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id". Also
 *  requires permission "resourcemanager.projects.updateLiens" to set the locked
 *  property
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Field mask that specifies the fields in bucket that need an
 *  update. A bucket field will be overwritten if, and only if, it is in the
 *  update mask. name and output only fields cannot be updated.For a detailed
 *  FieldMask definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=retention_days.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogBucket.
 *
 *  Updates a bucket. This method replaces the following fields in the existing
 *  bucket with values from the new bucket: retention_periodIf the retention
 *  period is decreased and the bucket is locked, FAILED_PRECONDITION will be
 *  returned.If the bucket has a LifecycleState of DELETE_REQUESTED,
 *  FAILED_PRECONDITION will be returned.A buckets region may not be modified
 *  after it is created.
 *
 *  @param object The @c GTLRLogging_LogBucket to include in the query.
 *  @param name Required. The full resource name of the bucket to update.
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id". Also
 *    requires permission "resourcemanager.projects.updateLiens" to set the
 *    locked property
 *
 *  @return GTLRLoggingQuery_OrganizationsLocationsBucketsPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                           name:(NSString *)name;

@end

/**
 *  Undeletes a bucket. A bucket that has been deleted may be undeleted within
 *  the grace period of 7 days.
 *
 *  Method: logging.organizations.locations.buckets.undelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsLocationsBucketsUndelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLocationsBucketsUndeleteWithObject:name:]

/**
 *  Required. The full resource name of the bucket to undelete.
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Undeletes a bucket. A bucket that has been deleted may be undeleted within
 *  the grace period of 7 days.
 *
 *  @param object The @c GTLRLogging_UndeleteBucketRequest to include in the
 *    query.
 *  @param name Required. The full resource name of the bucket to undelete.
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 *
 *  @return GTLRLoggingQuery_OrganizationsLocationsBucketsUndelete
 */
+ (instancetype)queryWithObject:(GTLRLogging_UndeleteBucketRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a view over logs in a bucket. A bucket may contain a maximum of 50
 *  views.
 *
 *  Method: logging.organizations.locations.buckets.views.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsLocationsBucketsViewsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLocationsBucketsViewsCreateWithObject:parent:]

/**
 *  Required. The bucket in which to create the view
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-logging-project/locations/my-location/buckets/my-bucket"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. The id to use for this view. */
@property(nonatomic, copy, nullable) NSString *viewId;

/**
 *  Fetches a @c GTLRLogging_LogView.
 *
 *  Creates a view over logs in a bucket. A bucket may contain a maximum of 50
 *  views.
 *
 *  @param object The @c GTLRLogging_LogView to include in the query.
 *  @param parent Required. The bucket in which to create the view
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    Example:
 *    "projects/my-logging-project/locations/my-location/buckets/my-bucket"
 *
 *  @return GTLRLoggingQuery_OrganizationsLocationsBucketsViewsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a view from a bucket.
 *
 *  Method: logging.organizations.locations.buckets.views.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsLocationsBucketsViewsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLocationsBucketsViewsDeleteWithname:]

/**
 *  Required. The full resource name of the view to delete:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *  Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a view from a bucket.
 *
 *  @param name Required. The full resource name of the view to delete:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *    Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 *
 *  @return GTLRLoggingQuery_OrganizationsLocationsBucketsViewsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a view.
 *
 *  Method: logging.organizations.locations.buckets.views.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsLocationsBucketsViewsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLocationsBucketsViewsGetWithname:]

/**
 *  Required. The resource name of the policy:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *  Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_LogView.
 *
 *  Gets a view.
 *
 *  @param name Required. The resource name of the policy:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *    Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 *
 *  @return GTLRLoggingQuery_OrganizationsLocationsBucketsViewsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists views on a bucket.
 *
 *  Method: logging.organizations.locations.buckets.views.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsLocationsBucketsViewsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLocationsBucketsViewsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The bucket whose views are to be listed:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListViewsResponse.
 *
 *  Lists views on a bucket.
 *
 *  @param parent Required. The bucket whose views are to be listed:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *
 *  @return GTLRLoggingQuery_OrganizationsLocationsBucketsViewsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a view. This method replaces the following fields in the existing
 *  view with values from the new view: filter.
 *
 *  Method: logging.organizations.locations.buckets.views.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsLocationsBucketsViewsPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLocationsBucketsViewsPatchWithObject:name:]

/**
 *  Required. The full resource name of the view to update
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *  Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Field mask that specifies the fields in view that need an update.
 *  A field will be overwritten if, and only if, it is in the update mask. name
 *  and output only fields cannot be updated.For a detailed FieldMask
 *  definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=filter.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogView.
 *
 *  Updates a view. This method replaces the following fields in the existing
 *  view with values from the new view: filter.
 *
 *  @param object The @c GTLRLogging_LogView to include in the query.
 *  @param name Required. The full resource name of the view to update
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *    Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 *
 *  @return GTLRLoggingQuery_OrganizationsLocationsBucketsViewsPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a location.
 *
 *  Method: logging.organizations.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsLocationsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRLoggingQuery_OrganizationsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: logging.organizations.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsLocationsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLocationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRLogging_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRLoggingQuery_OrganizationsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted. Entries received after the delete operation with a timestamp
 *  before the operation will be deleted.
 *
 *  Method: logging.organizations.logs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsLogsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLogsDeleteWithlogName:]

/**
 *  Required. The resource name of the log to delete:
 *  "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *  "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *  "folders/[FOLDER_ID]/logs/[LOG_ID]" [LOG_ID] must be URL-encoded. For
 *  example, "projects/my-project-id/logs/syslog",
 *  "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *  For more information about log names, see LogEntry.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted. Entries received after the delete operation with a timestamp
 *  before the operation will be deleted.
 *
 *  @param logName Required. The resource name of the log to delete:
 *    "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *    "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *    "folders/[FOLDER_ID]/logs/[LOG_ID]" [LOG_ID] must be URL-encoded. For
 *    example, "projects/my-project-id/logs/syslog",
 *    "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *    For more information about log names, see LogEntry.
 *
 *  @return GTLRLoggingQuery_OrganizationsLogsDelete
 */
+ (instancetype)queryWithLogName:(NSString *)logName;

@end

/**
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  Method: logging.organizations.logs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsLogsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLogsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name that owns the logs: "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]" "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. The resource name that owns the logs:
 *  projects/PROJECT_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_ID
 *  organization/ORGANIZATION_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_ID
 *  billingAccounts/BILLING_ACCOUNT_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_ID
 *  folders/FOLDER_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_IDTo
 *  support legacy queries, it could also be: "projects/PROJECT_ID"
 *  "organizations/ORGANIZATION_ID" "billingAccounts/BILLING_ACCOUNT_ID"
 *  "folders/FOLDER_ID"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNames;

/**
 *  Fetches a @c GTLRLogging_ListLogsResponse.
 *
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  @param parent Required. The resource name that owns the logs:
 *    "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 *
 *  @return GTLRLoggingQuery_OrganizationsLogsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the sink's
 *  writer_identity is not permitted to write to the destination. A sink can
 *  export log entries only from the resource owning the sink.
 *
 *  Method: logging.organizations.sinks.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsSinksCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsSinksCreateWithObject:parent:]

/**
 *  Required. The resource in which to create the sink: "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]" "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]" Examples: "projects/my-logging-project",
 *  "organizations/123456789".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. Determines the kind of IAM identity returned as writer_identity in
 *  the new sink. If this value is omitted or set to false, and if the sink's
 *  parent is a project, then the value returned as writer_identity is the same
 *  group or service account used by Logging before the addition of writer
 *  identities to this API. The sink's destination must be in the same project
 *  as the sink itself.If this field is set to true, or if the sink is owned by
 *  a non-project resource such as an organization, then the value of
 *  writer_identity will be a unique service account used only for exports from
 *  the new sink. For more information, see writer_identity in LogSink.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the sink's
 *  writer_identity is not permitted to write to the destination. A sink can
 *  export log entries only from the resource owning the sink.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param parent Required. The resource in which to create the sink:
 *    "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]" Examples:
 *    "projects/my-logging-project", "organizations/123456789".
 *
 *  @return GTLRLoggingQuery_OrganizationsSinksCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  Method: logging.organizations.sinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsSinksDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsSinksDeleteWithsinkName:]

/**
 *  Required. The full resource name of the sink to delete, including the parent
 *  resource and the sink identifier: "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  @param sinkName Required. The full resource name of the sink to delete,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_OrganizationsSinksDelete
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Gets a sink.
 *
 *  Method: logging.organizations.sinks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsSinksGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsSinksGetWithsinkName:]

/**
 *  Required. The resource name of the sink:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Gets a sink.
 *
 *  @param sinkName Required. The resource name of the sink:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_OrganizationsSinksGet
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Lists sinks.
 *
 *  Method: logging.organizations.sinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsSinksList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsSinksListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose sinks are to be listed:
 *  "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListSinksResponse.
 *
 *  Lists sinks.
 *
 *  @param parent Required. The parent resource whose sinks are to be listed:
 *    "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 *
 *  @return GTLRLoggingQuery_OrganizationsSinksList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  Method: logging.organizations.sinks.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsSinksPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsSinksPatchWithObject:sinkName:]

/**
 *  Required. The full resource name of the sink to update, including the parent
 *  resource and the sink identifier: "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Optional. See sinks.create for a description of this field. When updating a
 *  sink, the effect of this field on the value of writer_identity in the
 *  updated sink depends on both the old and new values of this field: If the
 *  old and new values of this field are both false or both true, then there is
 *  no change to the sink's writer_identity. If the old value is false and the
 *  new value is true, then writer_identity is changed to a unique service
 *  account. It is an error if the old value is true and the new value is set to
 *  false or defaulted to false.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Optional. Field mask that specifies the fields in sink that need an update.
 *  A sink field will be overwritten if, and only if, it is in the update mask.
 *  name and output only fields cannot be updated.An empty updateMask is
 *  temporarily treated as using the following mask for backwards compatibility
 *  purposes: destination,filter,includeChildren At some point in the future,
 *  behavior will be removed and specifying an empty updateMask will be an
 *  error.For a detailed FieldMask definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=filter.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param sinkName Required. The full resource name of the sink to update,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_OrganizationsSinksPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName;

@end

/**
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  Method: logging.organizations.sinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsSinksUpdate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsSinksUpdateWithObject:sinkName:]

/**
 *  Required. The full resource name of the sink to update, including the parent
 *  resource and the sink identifier: "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Optional. See sinks.create for a description of this field. When updating a
 *  sink, the effect of this field on the value of writer_identity in the
 *  updated sink depends on both the old and new values of this field: If the
 *  old and new values of this field are both false or both true, then there is
 *  no change to the sink's writer_identity. If the old value is false and the
 *  new value is true, then writer_identity is changed to a unique service
 *  account. It is an error if the old value is true and the new value is set to
 *  false or defaulted to false.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Optional. Field mask that specifies the fields in sink that need an update.
 *  A sink field will be overwritten if, and only if, it is in the update mask.
 *  name and output only fields cannot be updated.An empty updateMask is
 *  temporarily treated as using the following mask for backwards compatibility
 *  purposes: destination,filter,includeChildren At some point in the future,
 *  behavior will be removed and specifying an empty updateMask will be an
 *  error.For a detailed FieldMask definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=filter.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param sinkName Required. The full resource name of the sink to update,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_OrganizationsSinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName;

@end

/**
 *  Updates the Logs Router CMEK settings for the given resource.Note: CMEK for
 *  the Logs Router can currently only be configured for GCP organizations. Once
 *  configured, it applies to all projects and folders in the GCP
 *  organization.UpdateCmekSettings will fail if 1) kms_key_name is invalid, or
 *  2) the associated service account does not have the required
 *  roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key, or 3)
 *  access to the key is disabled.See Enabling CMEK for Logs Router
 *  (https://cloud.google.com/logging/docs/routing/managed-encryption) for more
 *  information.
 *
 *  Method: logging.organizations.updateCmekSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsUpdateCmekSettings : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsUpdateCmekSettingsWithObject:name:]

/**
 *  Required. The resource name for the CMEK settings to update.
 *  "projects/[PROJECT_ID]/cmekSettings"
 *  "organizations/[ORGANIZATION_ID]/cmekSettings"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/cmekSettings"
 *  "folders/[FOLDER_ID]/cmekSettings" Example:
 *  "organizations/12345/cmekSettings".Note: CMEK for the Logs Router can
 *  currently only be configured for GCP organizations. Once configured, it
 *  applies to all projects and folders in the GCP organization.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Field mask identifying which fields from cmek_settings should be
 *  updated. A field will be overwritten if and only if it is in the update
 *  mask. Output only fields cannot be updated.See FieldMask for more
 *  information.Example: "updateMask=kmsKeyName"
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_CmekSettings.
 *
 *  Updates the Logs Router CMEK settings for the given resource.Note: CMEK for
 *  the Logs Router can currently only be configured for GCP organizations. Once
 *  configured, it applies to all projects and folders in the GCP
 *  organization.UpdateCmekSettings will fail if 1) kms_key_name is invalid, or
 *  2) the associated service account does not have the required
 *  roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key, or 3)
 *  access to the key is disabled.See Enabling CMEK for Logs Router
 *  (https://cloud.google.com/logging/docs/routing/managed-encryption) for more
 *  information.
 *
 *  @param object The @c GTLRLogging_CmekSettings to include in the query.
 *  @param name Required. The resource name for the CMEK settings to update.
 *    "projects/[PROJECT_ID]/cmekSettings"
 *    "organizations/[ORGANIZATION_ID]/cmekSettings"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/cmekSettings"
 *    "folders/[FOLDER_ID]/cmekSettings" Example:
 *    "organizations/12345/cmekSettings".Note: CMEK for the Logs Router can
 *    currently only be configured for GCP organizations. Once configured, it
 *    applies to all projects and folders in the GCP organization.
 *
 *  @return GTLRLoggingQuery_OrganizationsUpdateCmekSettings
 */
+ (instancetype)queryWithObject:(GTLRLogging_CmekSettings *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new exclusion in a specified parent resource. Only log entries
 *  belonging to that resource can be excluded. You can have up to 10 exclusions
 *  in a resource.
 *
 *  Method: logging.projects.exclusions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsExclusionsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsExclusionsCreateWithObject:parent:]

/**
 *  Required. The parent resource in which to create the exclusion:
 *  "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]" Examples:
 *  "projects/my-logging-project", "organizations/123456789".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_LogExclusion.
 *
 *  Creates a new exclusion in a specified parent resource. Only log entries
 *  belonging to that resource can be excluded. You can have up to 10 exclusions
 *  in a resource.
 *
 *  @param object The @c GTLRLogging_LogExclusion to include in the query.
 *  @param parent Required. The parent resource in which to create the
 *    exclusion: "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]" Examples:
 *    "projects/my-logging-project", "organizations/123456789".
 *
 *  @return GTLRLoggingQuery_ProjectsExclusionsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an exclusion.
 *
 *  Method: logging.projects.exclusions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsExclusionsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsExclusionsDeleteWithname:]

/**
 *  Required. The resource name of an existing exclusion to delete:
 *  "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *  "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *  "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *  "projects/my-project-id/exclusions/my-exclusion-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes an exclusion.
 *
 *  @param name Required. The resource name of an existing exclusion to delete:
 *    "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *    "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *    "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *    "projects/my-project-id/exclusions/my-exclusion-id".
 *
 *  @return GTLRLoggingQuery_ProjectsExclusionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the description of an exclusion.
 *
 *  Method: logging.projects.exclusions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsExclusionsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsExclusionsGetWithname:]

/**
 *  Required. The resource name of an existing exclusion:
 *  "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *  "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *  "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *  "projects/my-project-id/exclusions/my-exclusion-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_LogExclusion.
 *
 *  Gets the description of an exclusion.
 *
 *  @param name Required. The resource name of an existing exclusion:
 *    "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *    "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *    "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *    "projects/my-project-id/exclusions/my-exclusion-id".
 *
 *  @return GTLRLoggingQuery_ProjectsExclusionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all the exclusions in a parent resource.
 *
 *  Method: logging.projects.exclusions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsExclusionsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsExclusionsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose exclusions are to be listed.
 *  "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListExclusionsResponse.
 *
 *  Lists all the exclusions in a parent resource.
 *
 *  @param parent Required. The parent resource whose exclusions are to be
 *    listed. "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 *
 *  @return GTLRLoggingQuery_ProjectsExclusionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Changes one or more properties of an existing exclusion.
 *
 *  Method: logging.projects.exclusions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsExclusionsPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsExclusionsPatchWithObject:name:]

/**
 *  Required. The resource name of the exclusion to update:
 *  "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *  "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *  "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *  "projects/my-project-id/exclusions/my-exclusion-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A non-empty list of fields to change in the existing exclusion.
 *  New values for the fields are taken from the corresponding fields in the
 *  LogExclusion included in this request. Fields not mentioned in update_mask
 *  are not changed and are ignored in the request.For example, to change the
 *  filter and description of an exclusion, specify an update_mask of
 *  "filter,description".
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogExclusion.
 *
 *  Changes one or more properties of an existing exclusion.
 *
 *  @param object The @c GTLRLogging_LogExclusion to include in the query.
 *  @param name Required. The resource name of the exclusion to update:
 *    "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *    "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *    "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]" Example:
 *    "projects/my-project-id/exclusions/my-exclusion-id".
 *
 *  @return GTLRLoggingQuery_ProjectsExclusionsPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a bucket that can be used to store log entries. Once a bucket has
 *  been created, the region cannot be changed.
 *
 *  Method: logging.projects.locations.buckets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsLocationsBucketsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLocationsBucketsCreateWithObject:parent:]

/**
 *  Required. A client-assigned identifier such as "my-bucket". Identifiers are
 *  limited to 100 characters and can include only letters, digits, underscores,
 *  hyphens, and periods.
 */
@property(nonatomic, copy, nullable) NSString *bucketId;

/**
 *  Required. The resource in which to create the bucket:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]" Example:
 *  "projects/my-logging-project/locations/global"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_LogBucket.
 *
 *  Creates a bucket that can be used to store log entries. Once a bucket has
 *  been created, the region cannot be changed.
 *
 *  @param object The @c GTLRLogging_LogBucket to include in the query.
 *  @param parent Required. The resource in which to create the bucket:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]" Example:
 *    "projects/my-logging-project/locations/global"
 *
 *  @return GTLRLoggingQuery_ProjectsLocationsBucketsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a bucket. Moves the bucket to the DELETE_REQUESTED state. After 7
 *  days, the bucket will be purged and all logs in the bucket will be
 *  permanently deleted.
 *
 *  Method: logging.projects.locations.buckets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsLocationsBucketsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLocationsBucketsDeleteWithname:]

/**
 *  Required. The full resource name of the bucket to delete.
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a bucket. Moves the bucket to the DELETE_REQUESTED state. After 7
 *  days, the bucket will be purged and all logs in the bucket will be
 *  permanently deleted.
 *
 *  @param name Required. The full resource name of the bucket to delete.
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 *
 *  @return GTLRLoggingQuery_ProjectsLocationsBucketsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a bucket.
 *
 *  Method: logging.projects.locations.buckets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsLocationsBucketsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLocationsBucketsGetWithname:]

/**
 *  Required. The resource name of the bucket:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_LogBucket.
 *
 *  Gets a bucket.
 *
 *  @param name Required. The resource name of the bucket:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 *
 *  @return GTLRLoggingQuery_ProjectsLocationsBucketsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists buckets.
 *
 *  Method: logging.projects.locations.buckets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsLocationsBucketsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLocationsBucketsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose buckets are to be listed:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]" Note: The locations portion of
 *  the resource must be specified, but supplying the character - in place of
 *  LOCATION_ID will return all buckets.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListBucketsResponse.
 *
 *  Lists buckets.
 *
 *  @param parent Required. The parent resource whose buckets are to be listed:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]" Note: The locations portion
 *    of the resource must be specified, but supplying the character - in place
 *    of LOCATION_ID will return all buckets.
 *
 *  @return GTLRLoggingQuery_ProjectsLocationsBucketsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a bucket. This method replaces the following fields in the existing
 *  bucket with values from the new bucket: retention_periodIf the retention
 *  period is decreased and the bucket is locked, FAILED_PRECONDITION will be
 *  returned.If the bucket has a LifecycleState of DELETE_REQUESTED,
 *  FAILED_PRECONDITION will be returned.A buckets region may not be modified
 *  after it is created.
 *
 *  Method: logging.projects.locations.buckets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsLocationsBucketsPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLocationsBucketsPatchWithObject:name:]

/**
 *  Required. The full resource name of the bucket to update.
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id". Also
 *  requires permission "resourcemanager.projects.updateLiens" to set the locked
 *  property
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Field mask that specifies the fields in bucket that need an
 *  update. A bucket field will be overwritten if, and only if, it is in the
 *  update mask. name and output only fields cannot be updated.For a detailed
 *  FieldMask definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=retention_days.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogBucket.
 *
 *  Updates a bucket. This method replaces the following fields in the existing
 *  bucket with values from the new bucket: retention_periodIf the retention
 *  period is decreased and the bucket is locked, FAILED_PRECONDITION will be
 *  returned.If the bucket has a LifecycleState of DELETE_REQUESTED,
 *  FAILED_PRECONDITION will be returned.A buckets region may not be modified
 *  after it is created.
 *
 *  @param object The @c GTLRLogging_LogBucket to include in the query.
 *  @param name Required. The full resource name of the bucket to update.
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id". Also
 *    requires permission "resourcemanager.projects.updateLiens" to set the
 *    locked property
 *
 *  @return GTLRLoggingQuery_ProjectsLocationsBucketsPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                           name:(NSString *)name;

@end

/**
 *  Undeletes a bucket. A bucket that has been deleted may be undeleted within
 *  the grace period of 7 days.
 *
 *  Method: logging.projects.locations.buckets.undelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsLocationsBucketsUndelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLocationsBucketsUndeleteWithObject:name:]

/**
 *  Required. The full resource name of the bucket to undelete.
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *  "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Undeletes a bucket. A bucket that has been deleted may be undeleted within
 *  the grace period of 7 days.
 *
 *  @param object The @c GTLRLogging_UndeleteBucketRequest to include in the
 *    query.
 *  @param name Required. The full resource name of the bucket to undelete.
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id".
 *
 *  @return GTLRLoggingQuery_ProjectsLocationsBucketsUndelete
 */
+ (instancetype)queryWithObject:(GTLRLogging_UndeleteBucketRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a view over logs in a bucket. A bucket may contain a maximum of 50
 *  views.
 *
 *  Method: logging.projects.locations.buckets.views.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsLocationsBucketsViewsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLocationsBucketsViewsCreateWithObject:parent:]

/**
 *  Required. The bucket in which to create the view
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example:
 *  "projects/my-logging-project/locations/my-location/buckets/my-bucket"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. The id to use for this view. */
@property(nonatomic, copy, nullable) NSString *viewId;

/**
 *  Fetches a @c GTLRLogging_LogView.
 *
 *  Creates a view over logs in a bucket. A bucket may contain a maximum of 50
 *  views.
 *
 *  @param object The @c GTLRLogging_LogView to include in the query.
 *  @param parent Required. The bucket in which to create the view
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *    Example:
 *    "projects/my-logging-project/locations/my-location/buckets/my-bucket"
 *
 *  @return GTLRLoggingQuery_ProjectsLocationsBucketsViewsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a view from a bucket.
 *
 *  Method: logging.projects.locations.buckets.views.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsLocationsBucketsViewsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLocationsBucketsViewsDeleteWithname:]

/**
 *  Required. The full resource name of the view to delete:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *  Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a view from a bucket.
 *
 *  @param name Required. The full resource name of the view to delete:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *    Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 *
 *  @return GTLRLoggingQuery_ProjectsLocationsBucketsViewsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a view.
 *
 *  Method: logging.projects.locations.buckets.views.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsLocationsBucketsViewsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLocationsBucketsViewsGetWithname:]

/**
 *  Required. The resource name of the policy:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *  Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_LogView.
 *
 *  Gets a view.
 *
 *  @param name Required. The resource name of the policy:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *    Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 *
 *  @return GTLRLoggingQuery_ProjectsLocationsBucketsViewsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists views on a bucket.
 *
 *  Method: logging.projects.locations.buckets.views.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsLocationsBucketsViewsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLocationsBucketsViewsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The bucket whose views are to be listed:
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListViewsResponse.
 *
 *  Lists views on a bucket.
 *
 *  @param parent Required. The bucket whose views are to be listed:
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *
 *  @return GTLRLoggingQuery_ProjectsLocationsBucketsViewsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a view. This method replaces the following fields in the existing
 *  view with values from the new view: filter.
 *
 *  Method: logging.projects.locations.buckets.views.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsLocationsBucketsViewsPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLocationsBucketsViewsPatchWithObject:name:]

/**
 *  Required. The full resource name of the view to update
 *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *  Example:
 *  "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Field mask that specifies the fields in view that need an update.
 *  A field will be overwritten if, and only if, it is in the update mask. name
 *  and output only fields cannot be updated.For a detailed FieldMask
 *  definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=filter.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogView.
 *
 *  Updates a view. This method replaces the following fields in the existing
 *  view with values from the new view: filter.
 *
 *  @param object The @c GTLRLogging_LogView to include in the query.
 *  @param name Required. The full resource name of the view to update
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *    Example:
 *    "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view-id".
 *
 *  @return GTLRLoggingQuery_ProjectsLocationsBucketsViewsPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a location.
 *
 *  Method: logging.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsLocationsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRLoggingQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: logging.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsLocationsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLocationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRLogging_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRLoggingQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted. Entries received after the delete operation with a timestamp
 *  before the operation will be deleted.
 *
 *  Method: logging.projects.logs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsLogsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLogsDeleteWithlogName:]

/**
 *  Required. The resource name of the log to delete:
 *  "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *  "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *  "folders/[FOLDER_ID]/logs/[LOG_ID]" [LOG_ID] must be URL-encoded. For
 *  example, "projects/my-project-id/logs/syslog",
 *  "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *  For more information about log names, see LogEntry.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted. Entries received after the delete operation with a timestamp
 *  before the operation will be deleted.
 *
 *  @param logName Required. The resource name of the log to delete:
 *    "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *    "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *    "folders/[FOLDER_ID]/logs/[LOG_ID]" [LOG_ID] must be URL-encoded. For
 *    example, "projects/my-project-id/logs/syslog",
 *    "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *    For more information about log names, see LogEntry.
 *
 *  @return GTLRLoggingQuery_ProjectsLogsDelete
 */
+ (instancetype)queryWithLogName:(NSString *)logName;

@end

/**
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  Method: logging.projects.logs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsLogsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLogsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name that owns the logs: "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]" "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. The resource name that owns the logs:
 *  projects/PROJECT_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_ID
 *  organization/ORGANIZATION_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_ID
 *  billingAccounts/BILLING_ACCOUNT_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_ID
 *  folders/FOLDER_ID/locations/LOCATION_ID/buckets/BUCKET_ID/views/VIEW_IDTo
 *  support legacy queries, it could also be: "projects/PROJECT_ID"
 *  "organizations/ORGANIZATION_ID" "billingAccounts/BILLING_ACCOUNT_ID"
 *  "folders/FOLDER_ID"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNames;

/**
 *  Fetches a @c GTLRLogging_ListLogsResponse.
 *
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  @param parent Required. The resource name that owns the logs:
 *    "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 *
 *  @return GTLRLoggingQuery_ProjectsLogsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a logs-based metric.
 *
 *  Method: logging.projects.metrics.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingWrite
 */
@interface GTLRLoggingQuery_ProjectsMetricsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsCreateWithObject:parent:]

/**
 *  Required. The resource name of the project in which to create the metric:
 *  "projects/[PROJECT_ID]" The new metric must be provided in the request.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_LogMetric.
 *
 *  Creates a logs-based metric.
 *
 *  @param object The @c GTLRLogging_LogMetric to include in the query.
 *  @param parent Required. The resource name of the project in which to create
 *    the metric: "projects/[PROJECT_ID]" The new metric must be provided in the
 *    request.
 *
 *  @return GTLRLoggingQuery_ProjectsMetricsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogMetric *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a logs-based metric.
 *
 *  Method: logging.projects.metrics.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingWrite
 */
@interface GTLRLoggingQuery_ProjectsMetricsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsDeleteWithmetricName:]

/**
 *  Required. The resource name of the metric to delete:
 *  "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
 */
@property(nonatomic, copy, nullable) NSString *metricName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a logs-based metric.
 *
 *  @param metricName Required. The resource name of the metric to delete:
 *    "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
 *
 *  @return GTLRLoggingQuery_ProjectsMetricsDelete
 */
+ (instancetype)queryWithMetricName:(NSString *)metricName;

@end

/**
 *  Gets a logs-based metric.
 *
 *  Method: logging.projects.metrics.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsMetricsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsGetWithmetricName:]

/**
 *  Required. The resource name of the desired metric:
 *  "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
 */
@property(nonatomic, copy, nullable) NSString *metricName;

/**
 *  Fetches a @c GTLRLogging_LogMetric.
 *
 *  Gets a logs-based metric.
 *
 *  @param metricName Required. The resource name of the desired metric:
 *    "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
 *
 *  @return GTLRLoggingQuery_ProjectsMetricsGet
 */
+ (instancetype)queryWithMetricName:(NSString *)metricName;

@end

/**
 *  Lists logs-based metrics.
 *
 *  Method: logging.projects.metrics.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsMetricsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the project containing the metrics:
 *  "projects/[PROJECT_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListLogMetricsResponse.
 *
 *  Lists logs-based metrics.
 *
 *  @param parent Required. The name of the project containing the metrics:
 *    "projects/[PROJECT_ID]"
 *
 *  @return GTLRLoggingQuery_ProjectsMetricsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates or updates a logs-based metric.
 *
 *  Method: logging.projects.metrics.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingWrite
 */
@interface GTLRLoggingQuery_ProjectsMetricsUpdate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsUpdateWithObject:metricName:]

/**
 *  Required. The resource name of the metric to update:
 *  "projects/[PROJECT_ID]/metrics/[METRIC_ID]" The updated metric must be
 *  provided in the request and it's name field must be the same as [METRIC_ID]
 *  If the metric does not exist in [PROJECT_ID], then a new metric is created.
 */
@property(nonatomic, copy, nullable) NSString *metricName;

/**
 *  Fetches a @c GTLRLogging_LogMetric.
 *
 *  Creates or updates a logs-based metric.
 *
 *  @param object The @c GTLRLogging_LogMetric to include in the query.
 *  @param metricName Required. The resource name of the metric to update:
 *    "projects/[PROJECT_ID]/metrics/[METRIC_ID]" The updated metric must be
 *    provided in the request and it's name field must be the same as
 *    [METRIC_ID] If the metric does not exist in [PROJECT_ID], then a new
 *    metric is created.
 *
 *  @return GTLRLoggingQuery_ProjectsMetricsUpdate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogMetric *)object
                     metricName:(NSString *)metricName;

@end

/**
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the sink's
 *  writer_identity is not permitted to write to the destination. A sink can
 *  export log entries only from the resource owning the sink.
 *
 *  Method: logging.projects.sinks.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsSinksCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksCreateWithObject:parent:]

/**
 *  Required. The resource in which to create the sink: "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]" "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]" Examples: "projects/my-logging-project",
 *  "organizations/123456789".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. Determines the kind of IAM identity returned as writer_identity in
 *  the new sink. If this value is omitted or set to false, and if the sink's
 *  parent is a project, then the value returned as writer_identity is the same
 *  group or service account used by Logging before the addition of writer
 *  identities to this API. The sink's destination must be in the same project
 *  as the sink itself.If this field is set to true, or if the sink is owned by
 *  a non-project resource such as an organization, then the value of
 *  writer_identity will be a unique service account used only for exports from
 *  the new sink. For more information, see writer_identity in LogSink.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the sink's
 *  writer_identity is not permitted to write to the destination. A sink can
 *  export log entries only from the resource owning the sink.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param parent Required. The resource in which to create the sink:
 *    "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]" Examples:
 *    "projects/my-logging-project", "organizations/123456789".
 *
 *  @return GTLRLoggingQuery_ProjectsSinksCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  Method: logging.projects.sinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsSinksDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksDeleteWithsinkName:]

/**
 *  Required. The full resource name of the sink to delete, including the parent
 *  resource and the sink identifier: "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  @param sinkName Required. The full resource name of the sink to delete,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_ProjectsSinksDelete
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Gets a sink.
 *
 *  Method: logging.projects.sinks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsSinksGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksGetWithsinkName:]

/**
 *  Required. The resource name of the sink:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Gets a sink.
 *
 *  @param sinkName Required. The resource name of the sink:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_ProjectsSinksGet
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Lists sinks.
 *
 *  Method: logging.projects.sinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsSinksList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose sinks are to be listed:
 *  "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListSinksResponse.
 *
 *  Lists sinks.
 *
 *  @param parent Required. The parent resource whose sinks are to be listed:
 *    "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 *
 *  @return GTLRLoggingQuery_ProjectsSinksList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  Method: logging.projects.sinks.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsSinksPatch : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksPatchWithObject:sinkName:]

/**
 *  Required. The full resource name of the sink to update, including the parent
 *  resource and the sink identifier: "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Optional. See sinks.create for a description of this field. When updating a
 *  sink, the effect of this field on the value of writer_identity in the
 *  updated sink depends on both the old and new values of this field: If the
 *  old and new values of this field are both false or both true, then there is
 *  no change to the sink's writer_identity. If the old value is false and the
 *  new value is true, then writer_identity is changed to a unique service
 *  account. It is an error if the old value is true and the new value is set to
 *  false or defaulted to false.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Optional. Field mask that specifies the fields in sink that need an update.
 *  A sink field will be overwritten if, and only if, it is in the update mask.
 *  name and output only fields cannot be updated.An empty updateMask is
 *  temporarily treated as using the following mask for backwards compatibility
 *  purposes: destination,filter,includeChildren At some point in the future,
 *  behavior will be removed and specifying an empty updateMask will be an
 *  error.For a detailed FieldMask definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=filter.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param sinkName Required. The full resource name of the sink to update,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_ProjectsSinksPatch
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName;

@end

/**
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  Method: logging.projects.sinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsSinksUpdate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksUpdateWithObject:sinkName:]

/**
 *  Required. The full resource name of the sink to update, including the parent
 *  resource and the sink identifier: "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Optional. See sinks.create for a description of this field. When updating a
 *  sink, the effect of this field on the value of writer_identity in the
 *  updated sink depends on both the old and new values of this field: If the
 *  old and new values of this field are both false or both true, then there is
 *  no change to the sink's writer_identity. If the old value is false and the
 *  new value is true, then writer_identity is changed to a unique service
 *  account. It is an error if the old value is true and the new value is set to
 *  false or defaulted to false.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Optional. Field mask that specifies the fields in sink that need an update.
 *  A sink field will be overwritten if, and only if, it is in the update mask.
 *  name and output only fields cannot be updated.An empty updateMask is
 *  temporarily treated as using the following mask for backwards compatibility
 *  purposes: destination,filter,includeChildren At some point in the future,
 *  behavior will be removed and specifying an empty updateMask will be an
 *  error.For a detailed FieldMask definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=filter.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param sinkName Required. The full resource name of the sink to update,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_ProjectsSinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName;

@end

/**
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the sink's
 *  writer_identity is not permitted to write to the destination. A sink can
 *  export log entries only from the resource owning the sink.
 *
 *  Method: logging.sinks.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_SinksCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForSinksCreateWithObject:parent:]

/**
 *  Required. The resource in which to create the sink: "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]" "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]" Examples: "projects/my-logging-project",
 *  "organizations/123456789".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. Determines the kind of IAM identity returned as writer_identity in
 *  the new sink. If this value is omitted or set to false, and if the sink's
 *  parent is a project, then the value returned as writer_identity is the same
 *  group or service account used by Logging before the addition of writer
 *  identities to this API. The sink's destination must be in the same project
 *  as the sink itself.If this field is set to true, or if the sink is owned by
 *  a non-project resource such as an organization, then the value of
 *  writer_identity will be a unique service account used only for exports from
 *  the new sink. For more information, see writer_identity in LogSink.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the sink's
 *  writer_identity is not permitted to write to the destination. A sink can
 *  export log entries only from the resource owning the sink.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param parent Required. The resource in which to create the sink:
 *    "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]" Examples:
 *    "projects/my-logging-project", "organizations/123456789".
 *
 *  @return GTLRLoggingQuery_SinksCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  Method: logging.sinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_SinksDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForSinksDeleteWithsinkName:]

/**
 *  Required. The full resource name of the sink to delete, including the parent
 *  resource and the sink identifier: "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  @param sinkName Required. The full resource name of the sink to delete,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_SinksDelete
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Gets a sink.
 *
 *  Method: logging.sinks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_SinksGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForSinksGetWithsinkName:]

/**
 *  Required. The resource name of the sink:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Gets a sink.
 *
 *  @param sinkName Required. The resource name of the sink:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_SinksGet
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Lists sinks.
 *
 *  Method: logging.sinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_SinksList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForSinksListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose sinks are to be listed:
 *  "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListSinksResponse.
 *
 *  Lists sinks.
 *
 *  @param parent Required. The parent resource whose sinks are to be listed:
 *    "projects/[PROJECT_ID]" "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]" "folders/[FOLDER_ID]"
 *
 *  @return GTLRLoggingQuery_SinksList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  Method: logging.sinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_SinksUpdate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForSinksUpdateWithObject:sinkName:]

/**
 *  Required. The full resource name of the sink to update, including the parent
 *  resource and the sink identifier: "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *  "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Optional. See sinks.create for a description of this field. When updating a
 *  sink, the effect of this field on the value of writer_identity in the
 *  updated sink depends on both the old and new values of this field: If the
 *  old and new values of this field are both false or both true, then there is
 *  no change to the sink's writer_identity. If the old value is false and the
 *  new value is true, then writer_identity is changed to a unique service
 *  account. It is an error if the old value is true and the new value is set to
 *  false or defaulted to false.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Optional. Field mask that specifies the fields in sink that need an update.
 *  A sink field will be overwritten if, and only if, it is in the update mask.
 *  name and output only fields cannot be updated.An empty updateMask is
 *  temporarily treated as using the following mask for backwards compatibility
 *  purposes: destination,filter,includeChildren At some point in the future,
 *  behavior will be removed and specifying an empty updateMask will be an
 *  error.For a detailed FieldMask definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMaskExample:
 *  updateMask=filter.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Updates a sink. This method replaces the following fields in the existing
 *  sink with values from the new sink: destination, and filter.The updated sink
 *  might also have a new writer_identity; see the unique_writer_identity field.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param sinkName Required. The full resource name of the sink to update,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]" Example:
 *    "projects/my-project-id/sinks/my-sink-id".
 *
 *  @return GTLRLoggingQuery_SinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName;

@end

/**
 *  Gets the Logs Router CMEK settings for the given resource.Note: CMEK for the
 *  Logs Router can currently only be configured for GCP organizations. Once
 *  configured, it applies to all projects and folders in the GCP
 *  organization.See Enabling CMEK for Logs Router
 *  (https://cloud.google.com/logging/docs/routing/managed-encryption) for more
 *  information.
 *
 *  Method: logging.getCmekSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_V2GetCmekSettings : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForGetCmekSettingsWithname:]

/**
 *  Required. The resource for which to retrieve CMEK settings.
 *  "projects/[PROJECT_ID]/cmekSettings"
 *  "organizations/[ORGANIZATION_ID]/cmekSettings"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/cmekSettings"
 *  "folders/[FOLDER_ID]/cmekSettings" Example:
 *  "organizations/12345/cmekSettings".Note: CMEK for the Logs Router can
 *  currently only be configured for GCP organizations. Once configured, it
 *  applies to all projects and folders in the GCP organization.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRLogging_CmekSettings.
 *
 *  Gets the Logs Router CMEK settings for the given resource.Note: CMEK for the
 *  Logs Router can currently only be configured for GCP organizations. Once
 *  configured, it applies to all projects and folders in the GCP
 *  organization.See Enabling CMEK for Logs Router
 *  (https://cloud.google.com/logging/docs/routing/managed-encryption) for more
 *  information.
 *
 *  @param name Required. The resource for which to retrieve CMEK settings.
 *    "projects/[PROJECT_ID]/cmekSettings"
 *    "organizations/[ORGANIZATION_ID]/cmekSettings"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/cmekSettings"
 *    "folders/[FOLDER_ID]/cmekSettings" Example:
 *    "organizations/12345/cmekSettings".Note: CMEK for the Logs Router can
 *    currently only be configured for GCP organizations. Once configured, it
 *    applies to all projects and folders in the GCP organization.
 *
 *  @return GTLRLoggingQuery_V2GetCmekSettings
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the Logs Router CMEK settings for the given resource.Note: CMEK for
 *  the Logs Router can currently only be configured for GCP organizations. Once
 *  configured, it applies to all projects and folders in the GCP
 *  organization.UpdateCmekSettings will fail if 1) kms_key_name is invalid, or
 *  2) the associated service account does not have the required
 *  roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key, or 3)
 *  access to the key is disabled.See Enabling CMEK for Logs Router
 *  (https://cloud.google.com/logging/docs/routing/managed-encryption) for more
 *  information.
 *
 *  Method: logging.updateCmekSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_V2UpdateCmekSettings : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForUpdateCmekSettingsWithObject:name:]

/**
 *  Required. The resource name for the CMEK settings to update.
 *  "projects/[PROJECT_ID]/cmekSettings"
 *  "organizations/[ORGANIZATION_ID]/cmekSettings"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/cmekSettings"
 *  "folders/[FOLDER_ID]/cmekSettings" Example:
 *  "organizations/12345/cmekSettings".Note: CMEK for the Logs Router can
 *  currently only be configured for GCP organizations. Once configured, it
 *  applies to all projects and folders in the GCP organization.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Field mask identifying which fields from cmek_settings should be
 *  updated. A field will be overwritten if and only if it is in the update
 *  mask. Output only fields cannot be updated.See FieldMask for more
 *  information.Example: "updateMask=kmsKeyName"
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRLogging_CmekSettings.
 *
 *  Updates the Logs Router CMEK settings for the given resource.Note: CMEK for
 *  the Logs Router can currently only be configured for GCP organizations. Once
 *  configured, it applies to all projects and folders in the GCP
 *  organization.UpdateCmekSettings will fail if 1) kms_key_name is invalid, or
 *  2) the associated service account does not have the required
 *  roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key, or 3)
 *  access to the key is disabled.See Enabling CMEK for Logs Router
 *  (https://cloud.google.com/logging/docs/routing/managed-encryption) for more
 *  information.
 *
 *  @param object The @c GTLRLogging_CmekSettings to include in the query.
 *  @param name Required. The resource name for the CMEK settings to update.
 *    "projects/[PROJECT_ID]/cmekSettings"
 *    "organizations/[ORGANIZATION_ID]/cmekSettings"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/cmekSettings"
 *    "folders/[FOLDER_ID]/cmekSettings" Example:
 *    "organizations/12345/cmekSettings".Note: CMEK for the Logs Router can
 *    currently only be configured for GCP organizations. Once configured, it
 *    applies to all projects and folders in the GCP organization.
 *
 *  @return GTLRLoggingQuery_V2UpdateCmekSettings
 */
+ (instancetype)queryWithObject:(GTLRLogging_CmekSettings *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
