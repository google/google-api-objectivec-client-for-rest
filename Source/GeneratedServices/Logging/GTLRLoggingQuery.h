// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Stackdriver Logging API (logging/v2)
// Description:
//   Writes log entries and manages your Stackdriver Logging configuration.
// Documentation:
//   https://cloud.google.com/logging/docs/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRLogging_ListLogEntriesRequest;
@class GTLRLogging_LogMetric;
@class GTLRLogging_LogSink;
@class GTLRLogging_WriteLogEntriesRequest;

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Logging query classes.
 */
@interface GTLRLoggingQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted.
 *
 *  Method: logging.billingAccounts.logs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsLogsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsLogsDeleteWithlogName:]

/**
 *  Required. The resource name of the log to delete:
 *  "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *  "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *  "folders/[FOLDER_ID]/logs/[LOG_ID]"
 *  [LOG_ID] must be URL-encoded. For example,
 *  "projects/my-project-id/logs/syslog",
 *  "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *  For more information about log names, see LogEntry.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted.
 *
 *  @param logName Required. The resource name of the log to delete:
 *    "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *    "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *    "folders/[FOLDER_ID]/logs/[LOG_ID]"
 *    [LOG_ID] must be URL-encoded. For example,
 *    "projects/my-project-id/logs/syslog",
 *    "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *    For more information about log names, see LogEntry.
 *
 *  @returns GTLRLoggingQuery_BillingAccountsLogsDelete
 */
+ (instancetype)queryWithLogName:(NSString *)logName;

@end

/**
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  Method: logging.billingAccounts.logs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_BillingAccountsLogsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsLogsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name that owns the logs:
 *  "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListLogsResponse.
 *
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  @param parent Required. The resource name that owns the logs:
 *    "projects/[PROJECT_ID]"
 *    "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]"
 *    "folders/[FOLDER_ID]"
 *
 *  @returns GTLRLoggingQuery_BillingAccountsLogsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the current
 *  time is outside the sink's start and end times or the sink's writer_identity
 *  is not permitted to write to the destination. A sink can export log entries
 *  only from the resource owning the sink.
 *
 *  Method: logging.billingAccounts.sinks.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsSinksCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsSinksCreateWithObject:parent:]

/**
 *  Required. The resource in which to create the sink:
 *  "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 *  Examples: "projects/my-logging-project", "organizations/123456789".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. Determines the kind of IAM identity returned as writer_identity in
 *  the new sink. If this value is omitted or set to false, and if the sink's
 *  parent is a project, then the value returned as writer_identity is the same
 *  group or service account used by Stackdriver Logging before the addition of
 *  writer identities to this API. The sink's destination must be in the same
 *  project as the sink itself.If this field is set to true, or if the sink is
 *  owned by a non-project resource such as an organization, then the value of
 *  writer_identity will be a unique service account used only for exports from
 *  the new sink. For more information, see writer_identity in LogSink.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the current
 *  time is outside the sink's start and end times or the sink's writer_identity
 *  is not permitted to write to the destination. A sink can export log entries
 *  only from the resource owning the sink.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param parent Required. The resource in which to create the sink:
 *    "projects/[PROJECT_ID]"
 *    "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]"
 *    "folders/[FOLDER_ID]"
 *    Examples: "projects/my-logging-project", "organizations/123456789".
 *
 *  @returns GTLRLoggingQuery_BillingAccountsSinksCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  Method: logging.billingAccounts.sinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsSinksDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsSinksDeleteWithsinkName:]

/**
 *  Required. The full resource name of the sink to delete, including the parent
 *  resource and the sink identifier:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *  Example: "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  @param sinkName Required. The full resource name of the sink to delete,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *    Example: "projects/my-project-id/sinks/my-sink-id".
 *
 *  @returns GTLRLoggingQuery_BillingAccountsSinksDelete
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Gets a sink.
 *
 *  Method: logging.billingAccounts.sinks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_BillingAccountsSinksGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsSinksGetWithsinkName:]

/**
 *  Required. The resource name of the sink:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *  Example: "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Gets a sink.
 *
 *  @param sinkName Required. The resource name of the sink:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *    Example: "projects/my-project-id/sinks/my-sink-id".
 *
 *  @returns GTLRLoggingQuery_BillingAccountsSinksGet
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Lists sinks.
 *
 *  Method: logging.billingAccounts.sinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_BillingAccountsSinksList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsSinksListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose sinks are to be listed:
 *  "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListSinksResponse.
 *
 *  Lists sinks.
 *
 *  @param parent Required. The parent resource whose sinks are to be listed:
 *    "projects/[PROJECT_ID]"
 *    "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]"
 *    "folders/[FOLDER_ID]"
 *
 *  @returns GTLRLoggingQuery_BillingAccountsSinksList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a sink. If the named sink doesn't exist, then this method is
 *  identical to sinks.create. If the named sink does exist, then this method
 *  replaces the following fields in the existing sink with values from the new
 *  sink: destination, filter, output_version_format, start_time, and end_time.
 *  The updated filter might also have a new writer_identity; see the
 *  unique_writer_identity field.
 *
 *  Method: logging.billingAccounts.sinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsSinksUpdate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsSinksUpdateWithObject:sinkName:]

/**
 *  Required. The full resource name of the sink to update, including the parent
 *  resource and the sink identifier:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *  Example: "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Optional. See sinks.create for a description of this field. When updating a
 *  sink, the effect of this field on the value of writer_identity in the
 *  updated sink depends on both the old and new values of this field:
 *  If the old and new values of this field are both false or both true, then
 *  there is no change to the sink's writer_identity.
 *  If the old value is false and the new value is true, then writer_identity is
 *  changed to a unique service account.
 *  It is an error if the old value is true and the new value is set to false or
 *  defaulted to false.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Updates a sink. If the named sink doesn't exist, then this method is
 *  identical to sinks.create. If the named sink does exist, then this method
 *  replaces the following fields in the existing sink with values from the new
 *  sink: destination, filter, output_version_format, start_time, and end_time.
 *  The updated filter might also have a new writer_identity; see the
 *  unique_writer_identity field.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param sinkName Required. The full resource name of the sink to update,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *    Example: "projects/my-project-id/sinks/my-sink-id".
 *
 *  @returns GTLRLoggingQuery_BillingAccountsSinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName;

@end

/**
 *  Lists log entries. Use this method to retrieve log entries from Stackdriver
 *  Logging. For ways to export log entries, see Exporting Logs.
 *
 *  Method: logging.entries.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_EntriesList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForEntriesListWithObject:]

/**
 *  Fetches a @c GTLRLogging_ListLogEntriesResponse.
 *
 *  Lists log entries. Use this method to retrieve log entries from Stackdriver
 *  Logging. For ways to export log entries, see Exporting Logs.
 *
 *  @param object The @c GTLRLogging_ListLogEntriesRequest to include in the
 *    query.
 *
 *  @returns GTLRLoggingQuery_EntriesList
 */
+ (instancetype)queryWithObject:(GTLRLogging_ListLogEntriesRequest *)object;

@end

/**
 *  Writes log entries to Stackdriver Logging.
 *
 *  Method: logging.entries.write
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingWrite
 */
@interface GTLRLoggingQuery_EntriesWrite : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForEntriesWriteWithObject:]

/**
 *  Fetches a @c GTLRLogging_WriteLogEntriesResponse.
 *
 *  Writes log entries to Stackdriver Logging.
 *
 *  @param object The @c GTLRLogging_WriteLogEntriesRequest to include in the
 *    query.
 *
 *  @returns GTLRLoggingQuery_EntriesWrite
 */
+ (instancetype)queryWithObject:(GTLRLogging_WriteLogEntriesRequest *)object;

@end

/**
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted.
 *
 *  Method: logging.folders.logs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersLogsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLogsDeleteWithlogName:]

/**
 *  Required. The resource name of the log to delete:
 *  "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *  "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *  "folders/[FOLDER_ID]/logs/[LOG_ID]"
 *  [LOG_ID] must be URL-encoded. For example,
 *  "projects/my-project-id/logs/syslog",
 *  "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *  For more information about log names, see LogEntry.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted.
 *
 *  @param logName Required. The resource name of the log to delete:
 *    "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *    "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *    "folders/[FOLDER_ID]/logs/[LOG_ID]"
 *    [LOG_ID] must be URL-encoded. For example,
 *    "projects/my-project-id/logs/syslog",
 *    "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *    For more information about log names, see LogEntry.
 *
 *  @returns GTLRLoggingQuery_FoldersLogsDelete
 */
+ (instancetype)queryWithLogName:(NSString *)logName;

@end

/**
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  Method: logging.folders.logs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_FoldersLogsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersLogsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name that owns the logs:
 *  "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListLogsResponse.
 *
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  @param parent Required. The resource name that owns the logs:
 *    "projects/[PROJECT_ID]"
 *    "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]"
 *    "folders/[FOLDER_ID]"
 *
 *  @returns GTLRLoggingQuery_FoldersLogsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the current
 *  time is outside the sink's start and end times or the sink's writer_identity
 *  is not permitted to write to the destination. A sink can export log entries
 *  only from the resource owning the sink.
 *
 *  Method: logging.folders.sinks.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersSinksCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersSinksCreateWithObject:parent:]

/**
 *  Required. The resource in which to create the sink:
 *  "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 *  Examples: "projects/my-logging-project", "organizations/123456789".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. Determines the kind of IAM identity returned as writer_identity in
 *  the new sink. If this value is omitted or set to false, and if the sink's
 *  parent is a project, then the value returned as writer_identity is the same
 *  group or service account used by Stackdriver Logging before the addition of
 *  writer identities to this API. The sink's destination must be in the same
 *  project as the sink itself.If this field is set to true, or if the sink is
 *  owned by a non-project resource such as an organization, then the value of
 *  writer_identity will be a unique service account used only for exports from
 *  the new sink. For more information, see writer_identity in LogSink.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the current
 *  time is outside the sink's start and end times or the sink's writer_identity
 *  is not permitted to write to the destination. A sink can export log entries
 *  only from the resource owning the sink.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param parent Required. The resource in which to create the sink:
 *    "projects/[PROJECT_ID]"
 *    "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]"
 *    "folders/[FOLDER_ID]"
 *    Examples: "projects/my-logging-project", "organizations/123456789".
 *
 *  @returns GTLRLoggingQuery_FoldersSinksCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  Method: logging.folders.sinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersSinksDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersSinksDeleteWithsinkName:]

/**
 *  Required. The full resource name of the sink to delete, including the parent
 *  resource and the sink identifier:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *  Example: "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  @param sinkName Required. The full resource name of the sink to delete,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *    Example: "projects/my-project-id/sinks/my-sink-id".
 *
 *  @returns GTLRLoggingQuery_FoldersSinksDelete
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Gets a sink.
 *
 *  Method: logging.folders.sinks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_FoldersSinksGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersSinksGetWithsinkName:]

/**
 *  Required. The resource name of the sink:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *  Example: "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Gets a sink.
 *
 *  @param sinkName Required. The resource name of the sink:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *    Example: "projects/my-project-id/sinks/my-sink-id".
 *
 *  @returns GTLRLoggingQuery_FoldersSinksGet
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Lists sinks.
 *
 *  Method: logging.folders.sinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_FoldersSinksList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersSinksListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose sinks are to be listed:
 *  "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListSinksResponse.
 *
 *  Lists sinks.
 *
 *  @param parent Required. The parent resource whose sinks are to be listed:
 *    "projects/[PROJECT_ID]"
 *    "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]"
 *    "folders/[FOLDER_ID]"
 *
 *  @returns GTLRLoggingQuery_FoldersSinksList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a sink. If the named sink doesn't exist, then this method is
 *  identical to sinks.create. If the named sink does exist, then this method
 *  replaces the following fields in the existing sink with values from the new
 *  sink: destination, filter, output_version_format, start_time, and end_time.
 *  The updated filter might also have a new writer_identity; see the
 *  unique_writer_identity field.
 *
 *  Method: logging.folders.sinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_FoldersSinksUpdate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForFoldersSinksUpdateWithObject:sinkName:]

/**
 *  Required. The full resource name of the sink to update, including the parent
 *  resource and the sink identifier:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *  Example: "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Optional. See sinks.create for a description of this field. When updating a
 *  sink, the effect of this field on the value of writer_identity in the
 *  updated sink depends on both the old and new values of this field:
 *  If the old and new values of this field are both false or both true, then
 *  there is no change to the sink's writer_identity.
 *  If the old value is false and the new value is true, then writer_identity is
 *  changed to a unique service account.
 *  It is an error if the old value is true and the new value is set to false or
 *  defaulted to false.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Updates a sink. If the named sink doesn't exist, then this method is
 *  identical to sinks.create. If the named sink does exist, then this method
 *  replaces the following fields in the existing sink with values from the new
 *  sink: destination, filter, output_version_format, start_time, and end_time.
 *  The updated filter might also have a new writer_identity; see the
 *  unique_writer_identity field.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param sinkName Required. The full resource name of the sink to update,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *    Example: "projects/my-project-id/sinks/my-sink-id".
 *
 *  @returns GTLRLoggingQuery_FoldersSinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName;

@end

/**
 *  Lists the descriptors for monitored resource types used by Stackdriver
 *  Logging.
 *
 *  Method: logging.monitoredResourceDescriptors.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_MonitoredResourceDescriptorsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForMonitoredResourceDescriptorsList]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRLogging_ListMonitoredResourceDescriptorsResponse.
 *
 *  Lists the descriptors for monitored resource types used by Stackdriver
 *  Logging.
 *
 *  @returns GTLRLoggingQuery_MonitoredResourceDescriptorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted.
 *
 *  Method: logging.organizations.logs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsLogsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLogsDeleteWithlogName:]

/**
 *  Required. The resource name of the log to delete:
 *  "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *  "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *  "folders/[FOLDER_ID]/logs/[LOG_ID]"
 *  [LOG_ID] must be URL-encoded. For example,
 *  "projects/my-project-id/logs/syslog",
 *  "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *  For more information about log names, see LogEntry.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted.
 *
 *  @param logName Required. The resource name of the log to delete:
 *    "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *    "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *    "folders/[FOLDER_ID]/logs/[LOG_ID]"
 *    [LOG_ID] must be URL-encoded. For example,
 *    "projects/my-project-id/logs/syslog",
 *    "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *    For more information about log names, see LogEntry.
 *
 *  @returns GTLRLoggingQuery_OrganizationsLogsDelete
 */
+ (instancetype)queryWithLogName:(NSString *)logName;

@end

/**
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  Method: logging.organizations.logs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsLogsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLogsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name that owns the logs:
 *  "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListLogsResponse.
 *
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  @param parent Required. The resource name that owns the logs:
 *    "projects/[PROJECT_ID]"
 *    "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]"
 *    "folders/[FOLDER_ID]"
 *
 *  @returns GTLRLoggingQuery_OrganizationsLogsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the current
 *  time is outside the sink's start and end times or the sink's writer_identity
 *  is not permitted to write to the destination. A sink can export log entries
 *  only from the resource owning the sink.
 *
 *  Method: logging.organizations.sinks.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsSinksCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsSinksCreateWithObject:parent:]

/**
 *  Required. The resource in which to create the sink:
 *  "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 *  Examples: "projects/my-logging-project", "organizations/123456789".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. Determines the kind of IAM identity returned as writer_identity in
 *  the new sink. If this value is omitted or set to false, and if the sink's
 *  parent is a project, then the value returned as writer_identity is the same
 *  group or service account used by Stackdriver Logging before the addition of
 *  writer identities to this API. The sink's destination must be in the same
 *  project as the sink itself.If this field is set to true, or if the sink is
 *  owned by a non-project resource such as an organization, then the value of
 *  writer_identity will be a unique service account used only for exports from
 *  the new sink. For more information, see writer_identity in LogSink.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the current
 *  time is outside the sink's start and end times or the sink's writer_identity
 *  is not permitted to write to the destination. A sink can export log entries
 *  only from the resource owning the sink.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param parent Required. The resource in which to create the sink:
 *    "projects/[PROJECT_ID]"
 *    "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]"
 *    "folders/[FOLDER_ID]"
 *    Examples: "projects/my-logging-project", "organizations/123456789".
 *
 *  @returns GTLRLoggingQuery_OrganizationsSinksCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  Method: logging.organizations.sinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsSinksDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsSinksDeleteWithsinkName:]

/**
 *  Required. The full resource name of the sink to delete, including the parent
 *  resource and the sink identifier:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *  Example: "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  @param sinkName Required. The full resource name of the sink to delete,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *    Example: "projects/my-project-id/sinks/my-sink-id".
 *
 *  @returns GTLRLoggingQuery_OrganizationsSinksDelete
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Gets a sink.
 *
 *  Method: logging.organizations.sinks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsSinksGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsSinksGetWithsinkName:]

/**
 *  Required. The resource name of the sink:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *  Example: "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Gets a sink.
 *
 *  @param sinkName Required. The resource name of the sink:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *    Example: "projects/my-project-id/sinks/my-sink-id".
 *
 *  @returns GTLRLoggingQuery_OrganizationsSinksGet
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Lists sinks.
 *
 *  Method: logging.organizations.sinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsSinksList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsSinksListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose sinks are to be listed:
 *  "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListSinksResponse.
 *
 *  Lists sinks.
 *
 *  @param parent Required. The parent resource whose sinks are to be listed:
 *    "projects/[PROJECT_ID]"
 *    "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]"
 *    "folders/[FOLDER_ID]"
 *
 *  @returns GTLRLoggingQuery_OrganizationsSinksList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a sink. If the named sink doesn't exist, then this method is
 *  identical to sinks.create. If the named sink does exist, then this method
 *  replaces the following fields in the existing sink with values from the new
 *  sink: destination, filter, output_version_format, start_time, and end_time.
 *  The updated filter might also have a new writer_identity; see the
 *  unique_writer_identity field.
 *
 *  Method: logging.organizations.sinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsSinksUpdate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsSinksUpdateWithObject:sinkName:]

/**
 *  Required. The full resource name of the sink to update, including the parent
 *  resource and the sink identifier:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *  Example: "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Optional. See sinks.create for a description of this field. When updating a
 *  sink, the effect of this field on the value of writer_identity in the
 *  updated sink depends on both the old and new values of this field:
 *  If the old and new values of this field are both false or both true, then
 *  there is no change to the sink's writer_identity.
 *  If the old value is false and the new value is true, then writer_identity is
 *  changed to a unique service account.
 *  It is an error if the old value is true and the new value is set to false or
 *  defaulted to false.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Updates a sink. If the named sink doesn't exist, then this method is
 *  identical to sinks.create. If the named sink does exist, then this method
 *  replaces the following fields in the existing sink with values from the new
 *  sink: destination, filter, output_version_format, start_time, and end_time.
 *  The updated filter might also have a new writer_identity; see the
 *  unique_writer_identity field.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param sinkName Required. The full resource name of the sink to update,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *    Example: "projects/my-project-id/sinks/my-sink-id".
 *
 *  @returns GTLRLoggingQuery_OrganizationsSinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName;

@end

/**
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted.
 *
 *  Method: logging.projects.logs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsLogsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLogsDeleteWithlogName:]

/**
 *  Required. The resource name of the log to delete:
 *  "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *  "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *  "folders/[FOLDER_ID]/logs/[LOG_ID]"
 *  [LOG_ID] must be URL-encoded. For example,
 *  "projects/my-project-id/logs/syslog",
 *  "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *  For more information about log names, see LogEntry.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes all the log entries in a log. The log reappears if it receives new
 *  entries. Log entries written shortly before the delete operation might not
 *  be deleted.
 *
 *  @param logName Required. The resource name of the log to delete:
 *    "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *    "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *    "folders/[FOLDER_ID]/logs/[LOG_ID]"
 *    [LOG_ID] must be URL-encoded. For example,
 *    "projects/my-project-id/logs/syslog",
 *    "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *    For more information about log names, see LogEntry.
 *
 *  @returns GTLRLoggingQuery_ProjectsLogsDelete
 */
+ (instancetype)queryWithLogName:(NSString *)logName;

@end

/**
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  Method: logging.projects.logs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsLogsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLogsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name that owns the logs:
 *  "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListLogsResponse.
 *
 *  Lists the logs in projects, organizations, folders, or billing accounts.
 *  Only logs that have entries are listed.
 *
 *  @param parent Required. The resource name that owns the logs:
 *    "projects/[PROJECT_ID]"
 *    "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]"
 *    "folders/[FOLDER_ID]"
 *
 *  @returns GTLRLoggingQuery_ProjectsLogsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a logs-based metric.
 *
 *  Method: logging.projects.metrics.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingWrite
 */
@interface GTLRLoggingQuery_ProjectsMetricsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsCreateWithObject:parent:]

/**
 *  The resource name of the project in which to create the metric:
 *  "projects/[PROJECT_ID]"
 *  The new metric must be provided in the request.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_LogMetric.
 *
 *  Creates a logs-based metric.
 *
 *  @param object The @c GTLRLogging_LogMetric to include in the query.
 *  @param parent The resource name of the project in which to create the
 *    metric:
 *    "projects/[PROJECT_ID]"
 *    The new metric must be provided in the request.
 *
 *  @returns GTLRLoggingQuery_ProjectsMetricsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogMetric *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a logs-based metric.
 *
 *  Method: logging.projects.metrics.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingWrite
 */
@interface GTLRLoggingQuery_ProjectsMetricsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsDeleteWithmetricName:]

/**
 *  The resource name of the metric to delete:
 *  "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
 */
@property(nonatomic, copy, nullable) NSString *metricName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a logs-based metric.
 *
 *  @param metricName The resource name of the metric to delete:
 *    "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
 *
 *  @returns GTLRLoggingQuery_ProjectsMetricsDelete
 */
+ (instancetype)queryWithMetricName:(NSString *)metricName;

@end

/**
 *  Gets a logs-based metric.
 *
 *  Method: logging.projects.metrics.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsMetricsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsGetWithmetricName:]

/**
 *  The resource name of the desired metric:
 *  "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
 */
@property(nonatomic, copy, nullable) NSString *metricName;

/**
 *  Fetches a @c GTLRLogging_LogMetric.
 *
 *  Gets a logs-based metric.
 *
 *  @param metricName The resource name of the desired metric:
 *    "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
 *
 *  @returns GTLRLoggingQuery_ProjectsMetricsGet
 */
+ (instancetype)queryWithMetricName:(NSString *)metricName;

@end

/**
 *  Lists logs-based metrics.
 *
 *  Method: logging.projects.metrics.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsMetricsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the project containing the metrics:
 *  "projects/[PROJECT_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListLogMetricsResponse.
 *
 *  Lists logs-based metrics.
 *
 *  @param parent Required. The name of the project containing the metrics:
 *    "projects/[PROJECT_ID]"
 *
 *  @returns GTLRLoggingQuery_ProjectsMetricsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates or updates a logs-based metric.
 *
 *  Method: logging.projects.metrics.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingWrite
 */
@interface GTLRLoggingQuery_ProjectsMetricsUpdate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsUpdateWithObject:metricName:]

/**
 *  The resource name of the metric to update:
 *  "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
 *  The updated metric must be provided in the request and it's name field must
 *  be the same as [METRIC_ID] If the metric does not exist in [PROJECT_ID],
 *  then a new metric is created.
 */
@property(nonatomic, copy, nullable) NSString *metricName;

/**
 *  Fetches a @c GTLRLogging_LogMetric.
 *
 *  Creates or updates a logs-based metric.
 *
 *  @param object The @c GTLRLogging_LogMetric to include in the query.
 *  @param metricName The resource name of the metric to update:
 *    "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
 *    The updated metric must be provided in the request and it's name field
 *    must be the same as [METRIC_ID] If the metric does not exist in
 *    [PROJECT_ID], then a new metric is created.
 *
 *  @returns GTLRLoggingQuery_ProjectsMetricsUpdate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogMetric *)object
                     metricName:(NSString *)metricName;

@end

/**
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the current
 *  time is outside the sink's start and end times or the sink's writer_identity
 *  is not permitted to write to the destination. A sink can export log entries
 *  only from the resource owning the sink.
 *
 *  Method: logging.projects.sinks.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsSinksCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksCreateWithObject:parent:]

/**
 *  Required. The resource in which to create the sink:
 *  "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 *  Examples: "projects/my-logging-project", "organizations/123456789".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. Determines the kind of IAM identity returned as writer_identity in
 *  the new sink. If this value is omitted or set to false, and if the sink's
 *  parent is a project, then the value returned as writer_identity is the same
 *  group or service account used by Stackdriver Logging before the addition of
 *  writer identities to this API. The sink's destination must be in the same
 *  project as the sink itself.If this field is set to true, or if the sink is
 *  owned by a non-project resource such as an organization, then the value of
 *  writer_identity will be a unique service account used only for exports from
 *  the new sink. For more information, see writer_identity in LogSink.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Creates a sink that exports specified log entries to a destination. The
 *  export of newly-ingested log entries begins immediately, unless the current
 *  time is outside the sink's start and end times or the sink's writer_identity
 *  is not permitted to write to the destination. A sink can export log entries
 *  only from the resource owning the sink.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param parent Required. The resource in which to create the sink:
 *    "projects/[PROJECT_ID]"
 *    "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]"
 *    "folders/[FOLDER_ID]"
 *    Examples: "projects/my-logging-project", "organizations/123456789".
 *
 *  @returns GTLRLoggingQuery_ProjectsSinksCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  Method: logging.projects.sinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsSinksDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksDeleteWithsinkName:]

/**
 *  Required. The full resource name of the sink to delete, including the parent
 *  resource and the sink identifier:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *  Example: "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a sink. If the sink has a unique writer_identity, then that service
 *  account is also deleted.
 *
 *  @param sinkName Required. The full resource name of the sink to delete,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *    Example: "projects/my-project-id/sinks/my-sink-id".
 *
 *  @returns GTLRLoggingQuery_ProjectsSinksDelete
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Gets a sink.
 *
 *  Method: logging.projects.sinks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsSinksGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksGetWithsinkName:]

/**
 *  Required. The resource name of the sink:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *  Example: "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Gets a sink.
 *
 *  @param sinkName Required. The resource name of the sink:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *    Example: "projects/my-project-id/sinks/my-sink-id".
 *
 *  @returns GTLRLoggingQuery_ProjectsSinksGet
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Lists sinks.
 *
 *  Method: logging.projects.sinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsSinksList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of nextPageToken in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. pageToken must be the value of nextPageToken
 *  from the previous response. The values of other method parameters should be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource whose sinks are to be listed:
 *  "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListSinksResponse.
 *
 *  Lists sinks.
 *
 *  @param parent Required. The parent resource whose sinks are to be listed:
 *    "projects/[PROJECT_ID]"
 *    "organizations/[ORGANIZATION_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]"
 *    "folders/[FOLDER_ID]"
 *
 *  @returns GTLRLoggingQuery_ProjectsSinksList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a sink. If the named sink doesn't exist, then this method is
 *  identical to sinks.create. If the named sink does exist, then this method
 *  replaces the following fields in the existing sink with values from the new
 *  sink: destination, filter, output_version_format, start_time, and end_time.
 *  The updated filter might also have a new writer_identity; see the
 *  unique_writer_identity field.
 *
 *  Method: logging.projects.sinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsSinksUpdate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksUpdateWithObject:sinkName:]

/**
 *  Required. The full resource name of the sink to update, including the parent
 *  resource and the sink identifier:
 *  "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *  "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *  "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *  Example: "projects/my-project-id/sinks/my-sink-id".
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Optional. See sinks.create for a description of this field. When updating a
 *  sink, the effect of this field on the value of writer_identity in the
 *  updated sink depends on both the old and new values of this field:
 *  If the old and new values of this field are both false or both true, then
 *  there is no change to the sink's writer_identity.
 *  If the old value is false and the new value is true, then writer_identity is
 *  changed to a unique service account.
 *  It is an error if the old value is true and the new value is set to false or
 *  defaulted to false.
 */
@property(nonatomic, assign) BOOL uniqueWriterIdentity;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Updates a sink. If the named sink doesn't exist, then this method is
 *  identical to sinks.create. If the named sink does exist, then this method
 *  replaces the following fields in the existing sink with values from the new
 *  sink: destination, filter, output_version_format, start_time, and end_time.
 *  The updated filter might also have a new writer_identity; see the
 *  unique_writer_identity field.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param sinkName Required. The full resource name of the sink to update,
 *    including the parent resource and the sink identifier:
 *    "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *    "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *    "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *    "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *    Example: "projects/my-project-id/sinks/my-sink-id".
 *
 *  @returns GTLRLoggingQuery_ProjectsSinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName;

@end

NS_ASSUME_NONNULL_END
