// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Stackdriver Logging API (logging/v2)
// Description:
//   Writes log entries and manages your Stackdriver Logging configuration.
// Documentation:
//   https://cloud.google.com/logging/docs/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRLogging_HttpRequest;
@class GTLRLogging_LabelDescriptor;
@class GTLRLogging_LogEntry;
@class GTLRLogging_LogEntry_JsonPayload;
@class GTLRLogging_LogEntry_Labels;
@class GTLRLogging_LogEntry_ProtoPayload;
@class GTLRLogging_LogEntryOperation;
@class GTLRLogging_LogEntrySourceLocation;
@class GTLRLogging_LogLine;
@class GTLRLogging_LogMetric;
@class GTLRLogging_LogSink;
@class GTLRLogging_MonitoredResource;
@class GTLRLogging_MonitoredResource_Labels;
@class GTLRLogging_MonitoredResourceDescriptor;
@class GTLRLogging_SourceLocation;
@class GTLRLogging_SourceReference;
@class GTLRLogging_WriteLogEntriesRequest_Labels;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRLogging_LabelDescriptor.valueType

/**
 *  Boolean; true or false.
 *
 *  Value: "BOOL"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LabelDescriptor_ValueType_Bool;
/**
 *  A 64-bit signed integer.
 *
 *  Value: "INT64"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LabelDescriptor_ValueType_Int64;
/**
 *  A variable-length string. This is the default.
 *
 *  Value: "STRING"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LabelDescriptor_ValueType_String;

// ----------------------------------------------------------------------------
// GTLRLogging_LogEntry.severity

/**
 *  (700) A person must take an action immediately.
 *
 *  Value: "ALERT"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Alert;
/**
 *  (600) Critical events cause more severe problems or outages.
 *
 *  Value: "CRITICAL"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Critical;
/**
 *  (100) Debug or trace information.
 *
 *  Value: "DEBUG"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Debug;
/**
 *  (0) The log entry has no assigned severity level.
 *
 *  Value: "DEFAULT"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Default;
/**
 *  (800) One or more systems are unusable.
 *
 *  Value: "EMERGENCY"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Emergency;
/**
 *  (500) Error events are likely to cause problems.
 *
 *  Value: "ERROR"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Error;
/**
 *  (200) Routine information, such as ongoing status or performance.
 *
 *  Value: "INFO"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Info;
/**
 *  (300) Normal but significant events, such as start up, shut down, or a
 *  configuration change.
 *
 *  Value: "NOTICE"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Notice;
/**
 *  (400) Warning events might cause problems.
 *
 *  Value: "WARNING"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Warning;

// ----------------------------------------------------------------------------
// GTLRLogging_LogLine.severity

/**
 *  (700) A person must take an action immediately.
 *
 *  Value: "ALERT"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Alert;
/**
 *  (600) Critical events cause more severe problems or outages.
 *
 *  Value: "CRITICAL"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Critical;
/**
 *  (100) Debug or trace information.
 *
 *  Value: "DEBUG"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Debug;
/**
 *  (0) The log entry has no assigned severity level.
 *
 *  Value: "DEFAULT"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Default;
/**
 *  (800) One or more systems are unusable.
 *
 *  Value: "EMERGENCY"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Emergency;
/**
 *  (500) Error events are likely to cause problems.
 *
 *  Value: "ERROR"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Error;
/**
 *  (200) Routine information, such as ongoing status or performance.
 *
 *  Value: "INFO"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Info;
/**
 *  (300) Normal but significant events, such as start up, shut down, or a
 *  configuration change.
 *
 *  Value: "NOTICE"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Notice;
/**
 *  (400) Warning events might cause problems.
 *
 *  Value: "WARNING"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Warning;

// ----------------------------------------------------------------------------
// GTLRLogging_LogMetric.version

/**
 *  Stackdriver Logging API v1.
 *
 *  Value: "V1"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogMetric_Version_V1;
/**
 *  Stackdriver Logging API v2.
 *
 *  Value: "V2"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogMetric_Version_V2;

// ----------------------------------------------------------------------------
// GTLRLogging_LogSink.outputVersionFormat

/**
 *  LogEntry version 1 format.
 *
 *  Value: "V1"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogSink_OutputVersionFormat_V1;
/**
 *  LogEntry version 2 format.
 *
 *  Value: "V2"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogSink_OutputVersionFormat_V2;
/**
 *  An unspecified format version that will default to V2.
 *
 *  Value: "VERSION_FORMAT_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRLogging_LogSink_OutputVersionFormat_VersionFormatUnspecified;

/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for Empty is empty JSON object {}.
 */
@interface GTLRLogging_Empty : GTLRObject
@end


/**
 *  A common proto for logging HTTP requests. Only contains semantics defined by
 *  the HTTP specification. Product-specific logging information MUST be defined
 *  in a separate message.
 */
@interface GTLRLogging_HttpRequest : GTLRObject

/**
 *  The number of HTTP response bytes inserted into cache. Set only when a cache
 *  fill was attempted.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheFillBytes;

/**
 *  Whether or not an entity was served from cache (with or without validation).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheHit;

/**
 *  Whether or not a cache lookup was attempted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheLookup;

/**
 *  Whether or not the response was validated with the origin server before
 *  being served from cache. This field is only meaningful if cache_hit is True.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheValidatedWithOriginServer;

/**
 *  The request processing latency on the server, from the time the request was
 *  received until the response was sent.
 */
@property(nonatomic, strong, nullable) GTLRDuration *latency;

/**
 *  The referer URL of the request, as defined in HTTP/1.1 Header Field
 *  Definitions (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
 */
@property(nonatomic, copy, nullable) NSString *referer;

/**
 *  The IP address (IPv4 or IPv6) of the client that issued the HTTP request.
 *  Examples: "192.168.1.1", "FE80::0202:B3FF:FE1E:8329".
 */
@property(nonatomic, copy, nullable) NSString *remoteIp;

/** The request method. Examples: "GET", "HEAD", "PUT", "POST". */
@property(nonatomic, copy, nullable) NSString *requestMethod;

/**
 *  The size of the HTTP request message in bytes, including the request headers
 *  and the request body.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestSize;

/**
 *  The scheme (http, https), the host name, the path and the query portion of
 *  the URL that was requested. Example:
 *  "http://example.com/some/info?color=red".
 */
@property(nonatomic, copy, nullable) NSString *requestUrl;

/**
 *  The size of the HTTP response message sent back to the client, in bytes,
 *  including the response headers and the response body.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *responseSize;

/**
 *  The IP address (IPv4 or IPv6) of the origin server that the request was sent
 *  to.
 */
@property(nonatomic, copy, nullable) NSString *serverIp;

/**
 *  The response code indicating the status of response. Examples: 200, 404.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *status;

/**
 *  The user agent sent by the client. Example: "Mozilla/4.0 (compatible; MSIE
 *  6.0; Windows 98; Q312461; .NET CLR 1.0.3705)".
 */
@property(nonatomic, copy, nullable) NSString *userAgent;

@end


/**
 *  A description of a label.
 */
@interface GTLRLogging_LabelDescriptor : GTLRObject

/**
 *  A human-readable description for the label.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The label key. */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  The type of data that can be assigned to the label.
 *
 *  Likely values:
 *    @arg @c kGTLRLogging_LabelDescriptor_ValueType_Bool Boolean; true or
 *        false. (Value: "BOOL")
 *    @arg @c kGTLRLogging_LabelDescriptor_ValueType_Int64 A 64-bit signed
 *        integer. (Value: "INT64")
 *    @arg @c kGTLRLogging_LabelDescriptor_ValueType_String A variable-length
 *        string. This is the default. (Value: "STRING")
 */
@property(nonatomic, copy, nullable) NSString *valueType;

@end


/**
 *  The parameters to ListLogEntries.
 */
@interface GTLRLogging_ListLogEntriesRequest : GTLRObject

/**
 *  Optional. A filter that chooses which log entries to return. See Advanced
 *  Logs Filters. Only log entries that match the filter are returned. An empty
 *  filter matches all log entries in the resources listed in resource_names.
 *  Referencing a parent resource that is not listed in resource_names will
 *  cause the filter to return no results. The maximum length of the filter is
 *  20000 characters.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. How the results should be sorted. Presently, the only permitted
 *  values are "timestamp asc" (default) and "timestamp desc". The first option
 *  returns entries in order of increasing values of LogEntry.timestamp (oldest
 *  first), and the second option returns entries in order of decreasing
 *  timestamps (newest first). Entries with equal timestamps are returned in
 *  order of their insert_id values.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of next_page_token in the
 *  response indicates that more results might be available.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. page_token must be the value of
 *  next_page_token from the previous response. The values of other method
 *  parameters should be identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Deprecated. Use resource_names instead. One or more project identifiers or
 *  project numbers from which to retrieve log entries. Example:
 *  "my-project-1A". If present, these project identifiers are converted to
 *  resource name format and added to the list of resources in resource_names.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *projectIds;

/**
 *  Required. Names of one or more parent resources from which to retrieve log
 *  entries:
 *  "projects/[PROJECT_ID]"
 *  "organizations/[ORGANIZATION_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]"
 *  "folders/[FOLDER_ID]"
 *  Projects listed in the project_ids field are added to this list.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNames;

@end


/**
 *  Result returned from ListLogEntries.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "entries" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRLogging_ListLogEntriesResponse : GTLRCollectionObject

/**
 *  A list of log entries.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_LogEntry *> *entries;

/**
 *  If there might be more results than those appearing in this response, then
 *  nextPageToken is included. To get the next set of results, call this method
 *  again using the value of nextPageToken as pageToken.If a value for
 *  next_page_token appears and the entries field is empty, it means that the
 *  search found no log entries so far but it did not have time to search all
 *  the possible log entries. Retry the method with this value for page_token to
 *  continue the search. Alternatively, consider speeding up the search by
 *  changing your filter to specify a single log name or resource type, or to
 *  narrow the time range of the search.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Result returned from ListLogMetrics.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "metrics" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRLogging_ListLogMetricsResponse : GTLRCollectionObject

/**
 *  A list of logs-based metrics.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_LogMetric *> *metrics;

/**
 *  If there might be more results than appear in this response, then
 *  nextPageToken is included. To get the next set of results, call this method
 *  again using the value of nextPageToken as pageToken.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Result returned from ListLogs.
 */
@interface GTLRLogging_ListLogsResponse : GTLRObject

/**
 *  A list of log names. For example, "projects/my-project/syslog" or
 *  "organizations/123/cloudresourcemanager.googleapis.com%2Factivity".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *logNames;

/**
 *  If there might be more results than those appearing in this response, then
 *  nextPageToken is included. To get the next set of results, call this method
 *  again using the value of nextPageToken as pageToken.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Result returned from ListMonitoredResourceDescriptors.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "resourceDescriptors" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRLogging_ListMonitoredResourceDescriptorsResponse : GTLRCollectionObject

/**
 *  If there might be more results than those appearing in this response, then
 *  nextPageToken is included. To get the next set of results, call this method
 *  again using the value of nextPageToken as pageToken.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of resource descriptors.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_MonitoredResourceDescriptor *> *resourceDescriptors;

@end


/**
 *  Result returned from ListSinks.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "sinks" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRLogging_ListSinksResponse : GTLRCollectionObject

/**
 *  If there might be more results than appear in this response, then
 *  nextPageToken is included. To get the next set of results, call the same
 *  method again using the value of nextPageToken as pageToken.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of sinks.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_LogSink *> *sinks;

@end


/**
 *  An individual entry in a log.
 */
@interface GTLRLogging_LogEntry : GTLRObject

/**
 *  Optional. Information about the HTTP request associated with this log entry,
 *  if applicable.
 */
@property(nonatomic, strong, nullable) GTLRLogging_HttpRequest *httpRequest;

/**
 *  Optional. A unique identifier for the log entry. If you provide a value,
 *  then Stackdriver Logging considers other log entries in the same project,
 *  with the same timestamp, and with the same insert_id to be duplicates which
 *  can be removed. If omitted in new log entries, then Stackdriver Logging will
 *  insert its own unique identifier. The insert_id is used to order log entries
 *  that have the same timestamp value.
 */
@property(nonatomic, copy, nullable) NSString *insertId;

/**
 *  The log entry payload, represented as a structure that is expressed as a
 *  JSON object.
 */
@property(nonatomic, strong, nullable) GTLRLogging_LogEntry_JsonPayload *jsonPayload;

/**
 *  Optional. A set of user-defined (key, value) data that provides additional
 *  information about the log entry.
 */
@property(nonatomic, strong, nullable) GTLRLogging_LogEntry_Labels *labels;

/**
 *  Required. The resource name of the log to which this log entry belongs:
 *  "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *  "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *  "folders/[FOLDER_ID]/logs/[LOG_ID]"
 *  [LOG_ID] must be URL-encoded within log_name. Example:
 *  "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *  [LOG_ID] must be less than 512 characters long and can only include the
 *  following characters: upper and lower case alphanumeric characters,
 *  forward-slash, underscore, hyphen, and period.For backward compatibility, if
 *  log_name begins with a forward-slash, such as /projects/..., then the log
 *  entry is ingested as usual but the forward-slash is removed. Listing the log
 *  entry will not show the leading slash and filtering for a log name with a
 *  leading slash will never return any results.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Optional. Information about an operation associated with the log entry, if
 *  applicable.
 */
@property(nonatomic, strong, nullable) GTLRLogging_LogEntryOperation *operation;

/**
 *  The log entry payload, represented as a protocol buffer. Some Google Cloud
 *  Platform services use this field for their log entry payloads.
 */
@property(nonatomic, strong, nullable) GTLRLogging_LogEntry_ProtoPayload *protoPayload;

/**
 *  Output only. The time the log entry was received by Stackdriver Logging.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *receiveTimestamp;

/**
 *  Required. The monitored resource associated with this log entry. Example: a
 *  log entry that reports a database error would be associated with the
 *  monitored resource designating the particular database that reported the
 *  error.
 */
@property(nonatomic, strong, nullable) GTLRLogging_MonitoredResource *resource;

/**
 *  Optional. The severity of the log entry. The default value is
 *  LogSeverity.DEFAULT.
 *
 *  Likely values:
 *    @arg @c kGTLRLogging_LogEntry_Severity_Alert (700) A person must take an
 *        action immediately. (Value: "ALERT")
 *    @arg @c kGTLRLogging_LogEntry_Severity_Critical (600) Critical events
 *        cause more severe problems or outages. (Value: "CRITICAL")
 *    @arg @c kGTLRLogging_LogEntry_Severity_Debug (100) Debug or trace
 *        information. (Value: "DEBUG")
 *    @arg @c kGTLRLogging_LogEntry_Severity_Default (0) The log entry has no
 *        assigned severity level. (Value: "DEFAULT")
 *    @arg @c kGTLRLogging_LogEntry_Severity_Emergency (800) One or more systems
 *        are unusable. (Value: "EMERGENCY")
 *    @arg @c kGTLRLogging_LogEntry_Severity_Error (500) Error events are likely
 *        to cause problems. (Value: "ERROR")
 *    @arg @c kGTLRLogging_LogEntry_Severity_Info (200) Routine information,
 *        such as ongoing status or performance. (Value: "INFO")
 *    @arg @c kGTLRLogging_LogEntry_Severity_Notice (300) Normal but significant
 *        events, such as start up, shut down, or a configuration change.
 *        (Value: "NOTICE")
 *    @arg @c kGTLRLogging_LogEntry_Severity_Warning (400) Warning events might
 *        cause problems. (Value: "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *severity;

/**
 *  Optional. Source code location information associated with the log entry, if
 *  any.
 */
@property(nonatomic, strong, nullable) GTLRLogging_LogEntrySourceLocation *sourceLocation;

/** The log entry payload, represented as a Unicode string (UTF-8). */
@property(nonatomic, copy, nullable) NSString *textPayload;

/**
 *  Optional. The time the event described by the log entry occurred. If omitted
 *  in a new log entry, Stackdriver Logging will insert the time the log entry
 *  is received. Stackdriver Logging might reject log entries whose time stamps
 *  are more than a couple of hours in the future. Log entries with time stamps
 *  in the past are accepted.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *timestamp;

/**
 *  Optional. Resource name of the trace associated with the log entry, if any.
 *  If it contains a relative resource name, the name is assumed to be relative
 *  to //tracing.googleapis.com. Example:
 *  projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824
 */
@property(nonatomic, copy, nullable) NSString *trace;

@end


/**
 *  The log entry payload, represented as a structure that is expressed as a
 *  JSON object.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRLogging_LogEntry_JsonPayload : GTLRObject
@end


/**
 *  Optional. A set of user-defined (key, value) data that provides additional
 *  information about the log entry.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRLogging_LogEntry_Labels : GTLRObject
@end


/**
 *  The log entry payload, represented as a protocol buffer. Some Google Cloud
 *  Platform services use this field for their log entry payloads.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRLogging_LogEntry_ProtoPayload : GTLRObject
@end


/**
 *  Additional information about a potentially long-running operation with which
 *  a log entry is associated.
 */
@interface GTLRLogging_LogEntryOperation : GTLRObject

/**
 *  Optional. Set this to True if this is the first log entry in the operation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *first;

/**
 *  Optional. An arbitrary operation identifier. Log entries with the same
 *  identifier are assumed to be part of the same operation.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Optional. Set this to True if this is the last log entry in the operation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *last;

/**
 *  Optional. An arbitrary producer identifier. The combination of id and
 *  producer must be globally unique. Examples for producer:
 *  "MyDivision.MyBigCompany.com", "github.com/MyProject/MyApplication".
 */
@property(nonatomic, copy, nullable) NSString *producer;

@end


/**
 *  Additional information about the source code location that produced the log
 *  entry.
 */
@interface GTLRLogging_LogEntrySourceLocation : GTLRObject

/**
 *  Optional. Source file name. Depending on the runtime environment, this might
 *  be a simple name or a fully-qualified name.
 */
@property(nonatomic, copy, nullable) NSString *file;

/**
 *  Optional. Human-readable name of the function or method being invoked, with
 *  optional context such as the class or package name. This information may be
 *  used in contexts such as the logs viewer, where a file and line number are
 *  less meaningful. The format can vary by language. For example:
 *  qual.if.ied.Class.method (Java), dir/package.func (Go), function (Python).
 */
@property(nonatomic, copy, nullable) NSString *function;

/**
 *  Optional. Line within the source file. 1-based; 0 indicates no line number
 *  available.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *line;

@end


/**
 *  Application log line emitted while processing a request.
 */
@interface GTLRLogging_LogLine : GTLRObject

/** App-provided log message. */
@property(nonatomic, copy, nullable) NSString *logMessage;

/**
 *  Severity of this log entry.
 *
 *  Likely values:
 *    @arg @c kGTLRLogging_LogLine_Severity_Alert (700) A person must take an
 *        action immediately. (Value: "ALERT")
 *    @arg @c kGTLRLogging_LogLine_Severity_Critical (600) Critical events cause
 *        more severe problems or outages. (Value: "CRITICAL")
 *    @arg @c kGTLRLogging_LogLine_Severity_Debug (100) Debug or trace
 *        information. (Value: "DEBUG")
 *    @arg @c kGTLRLogging_LogLine_Severity_Default (0) The log entry has no
 *        assigned severity level. (Value: "DEFAULT")
 *    @arg @c kGTLRLogging_LogLine_Severity_Emergency (800) One or more systems
 *        are unusable. (Value: "EMERGENCY")
 *    @arg @c kGTLRLogging_LogLine_Severity_Error (500) Error events are likely
 *        to cause problems. (Value: "ERROR")
 *    @arg @c kGTLRLogging_LogLine_Severity_Info (200) Routine information, such
 *        as ongoing status or performance. (Value: "INFO")
 *    @arg @c kGTLRLogging_LogLine_Severity_Notice (300) Normal but significant
 *        events, such as start up, shut down, or a configuration change.
 *        (Value: "NOTICE")
 *    @arg @c kGTLRLogging_LogLine_Severity_Warning (400) Warning events might
 *        cause problems. (Value: "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *severity;

/** Where in the source code this log message was written. */
@property(nonatomic, strong, nullable) GTLRLogging_SourceLocation *sourceLocation;

/** Approximate time when this log entry was made. */
@property(nonatomic, strong, nullable) GTLRDateTime *time;

@end


/**
 *  Describes a logs-based metric. The value of the metric is the number of log
 *  entries that match a logs filter in a given time interval.
 */
@interface GTLRLogging_LogMetric : GTLRObject

/**
 *  Optional. A description of this metric, which is used in documentation.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Required. An advanced logs filter which is used to match log entries.
 *  Example:
 *  "resource.type=gae_app AND severity>=ERROR"
 *  The maximum length of the filter is 20000 characters.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Required. The client-assigned metric identifier. Examples: "error_count",
 *  "nginx/requests".Metric identifiers are limited to 100 characters and can
 *  include only the following characters: A-Z, a-z, 0-9, and the special
 *  characters _-.,+!*',()%/. The forward-slash character (/) denotes a
 *  hierarchy of name pieces, and it cannot be the first character of the
 *  name.The metric identifier in this field must not be URL-encoded
 *  (https://en.wikipedia.org/wiki/Percent-encoding). However, when the metric
 *  identifier appears as the [METRIC_ID] part of a metric_name API parameter,
 *  then the metric identifier must be URL-encoded. Example:
 *  "projects/my-project/metrics/nginx%2Frequests".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The API version that created or updated this metric. The
 *  version also dictates the syntax of the filter expression. When a value for
 *  this field is missing, the default value of V2 should be assumed.
 *
 *  Likely values:
 *    @arg @c kGTLRLogging_LogMetric_Version_V1 Stackdriver Logging API v1.
 *        (Value: "V1")
 *    @arg @c kGTLRLogging_LogMetric_Version_V2 Stackdriver Logging API v2.
 *        (Value: "V2")
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Describes a sink used to export log entries to one of the following
 *  destinations in any project: a Cloud Storage bucket, a BigQuery dataset, or
 *  a Cloud Pub/Sub topic. A logs filter controls which log entries are
 *  exported. The sink must be created within a project, organization, billing
 *  account, or folder.
 */
@interface GTLRLogging_LogSink : GTLRObject

/**
 *  Required. The export destination:
 *  "storage.googleapis.com/[GCS_BUCKET]"
 *  "bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]"
 *  "pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]"
 *  The sink's writer_identity, set when the sink is created, must have
 *  permission to write to the destination or else the log entries are not
 *  exported. For more information, see Exporting Logs With Sinks.
 */
@property(nonatomic, copy, nullable) NSString *destination;

/**
 *  Optional. The time at which this sink will stop exporting log entries. Log
 *  entries are exported only if their timestamp is earlier than the end time.
 *  If this field is not supplied, there is no end time. If both a start time
 *  and an end time are provided, then the end time must be later than the start
 *  time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Optional. An advanced logs filter. The only exported log entries are those
 *  that are in the resource owning the sink and that match the filter. The
 *  filter must use the log entry format specified by the output_version_format
 *  parameter. For example, in the v2 format:
 *  logName="projects/[PROJECT_ID]/logs/[LOG_ID]" AND severity>=ERROR
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. This field applies only to sinks owned by organizations and
 *  folders. If the field is false, the default, only the logs owned by the
 *  sink's parent resource are available for export. If the field is true, then
 *  logs from all the projects, folders, and billing accounts contained in the
 *  sink's parent resource are also available for export. Whether a particular
 *  log entry from the children is exported depends on the sink's filter
 *  expression. For example, if this field is true, then the filter
 *  resource.type=gce_instance would export all Compute Engine VM instance log
 *  entries from all projects in the sink's parent. To only export entries from
 *  certain child projects, filter on the project part of the log name:
 *  logName:("projects/test-project1/" OR "projects/test-project2/") AND
 *  resource.type=gce_instance
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeChildren;

/**
 *  Required. The client-assigned sink identifier, unique within the project.
 *  Example: "my-syslog-errors-to-pubsub". Sink identifiers are limited to 100
 *  characters and can include only the following characters: upper and
 *  lower-case alphanumeric characters, underscores, hyphens, and periods.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The log entry format to use for this sink's exported log entries.
 *  The v2 format is used by default. The v1 format is deprecated and should be
 *  used only as part of a migration effort to v2. See Migration to the v2 API.
 *
 *  Likely values:
 *    @arg @c kGTLRLogging_LogSink_OutputVersionFormat_V1 LogEntry version 1
 *        format. (Value: "V1")
 *    @arg @c kGTLRLogging_LogSink_OutputVersionFormat_V2 LogEntry version 2
 *        format. (Value: "V2")
 *    @arg @c kGTLRLogging_LogSink_OutputVersionFormat_VersionFormatUnspecified
 *        An unspecified format version that will default to V2. (Value:
 *        "VERSION_FORMAT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *outputVersionFormat;

/**
 *  Optional. The time at which this sink will begin exporting log entries. Log
 *  entries are exported only if their timestamp is not earlier than the start
 *  time. The default value of this field is the time the sink is created or
 *  updated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. An IAM identity&mdash;a service account or group&mdash;under
 *  which Stackdriver Logging writes the exported log entries to the sink's
 *  destination. This field is set by sinks.create and sinks.update, based on
 *  the setting of unique_writer_identity in those methods.Until you grant this
 *  identity write-access to the destination, log entry exports from this sink
 *  will fail. For more information, see Granting access for a resource. Consult
 *  the destination service's documentation to determine the appropriate IAM
 *  roles to assign to the identity.
 */
@property(nonatomic, copy, nullable) NSString *writerIdentity;

@end


/**
 *  An object representing a resource that can be used for monitoring, logging,
 *  billing, or other purposes. Examples include virtual machine instances,
 *  databases, and storage devices such as disks. The type field identifies a
 *  MonitoredResourceDescriptor object that describes the resource's schema.
 *  Information in the labels field identifies the actual resource and its
 *  attributes according to the schema. For example, a particular Compute Engine
 *  VM instance could be represented by the following object, because the
 *  MonitoredResourceDescriptor for "gce_instance" has labels "instance_id" and
 *  "zone":
 *  { "type": "gce_instance",
 *  "labels": { "instance_id": "12345678901234",
 *  "zone": "us-central1-a" }}
 */
@interface GTLRLogging_MonitoredResource : GTLRObject

/**
 *  Required. Values for all of the labels listed in the associated monitored
 *  resource descriptor. For example, Compute Engine VM instances use the labels
 *  "project_id", "instance_id", and "zone".
 */
@property(nonatomic, strong, nullable) GTLRLogging_MonitoredResource_Labels *labels;

/**
 *  Required. The monitored resource type. This field must match the type field
 *  of a MonitoredResourceDescriptor object. For example, the type of a Compute
 *  Engine VM instance is gce_instance.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Required. Values for all of the labels listed in the associated monitored
 *  resource descriptor. For example, Compute Engine VM instances use the labels
 *  "project_id", "instance_id", and "zone".
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRLogging_MonitoredResource_Labels : GTLRObject
@end


/**
 *  An object that describes the schema of a MonitoredResource object using a
 *  type name and a set of labels. For example, the monitored resource
 *  descriptor for Google Compute Engine VM instances has a type of
 *  "gce_instance" and specifies the use of the labels "instance_id" and "zone"
 *  to identify particular VM instances.Different APIs can support different
 *  monitored resource types. APIs generally provide a list method that returns
 *  the monitored resource descriptors used by the API.
 */
@interface GTLRLogging_MonitoredResourceDescriptor : GTLRObject

/**
 *  Optional. A detailed description of the monitored resource type that might
 *  be used in documentation.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. A concise name for the monitored resource type that might be
 *  displayed in user interfaces. It should be a Title Cased Noun Phrase,
 *  without any article or other determiners. For example, "Google Cloud SQL
 *  Database".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Required. A set of labels used to describe instances of this monitored
 *  resource type. For example, an individual Google Cloud SQL database is
 *  identified by values for the labels "database_id" and "zone".
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_LabelDescriptor *> *labels;

/**
 *  Optional. The resource name of the monitored resource descriptor:
 *  "projects/{project_id}/monitoredResourceDescriptors/{type}" where {type} is
 *  the value of the type field in this object and {project_id} is a project ID
 *  that provides API-specific context for accessing the type. APIs that do not
 *  use project information can use the resource name format
 *  "monitoredResourceDescriptors/{type}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The monitored resource type. For example, the type
 *  "cloudsql_database" represents databases in Google Cloud SQL. The maximum
 *  length of this value is 256 characters.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Complete log information about a single HTTP request to an App Engine
 *  application.
 */
@interface GTLRLogging_RequestLog : GTLRObject

/** App Engine release version. */
@property(nonatomic, copy, nullable) NSString *appEngineRelease;

/** Application that handled this request. */
@property(nonatomic, copy, nullable) NSString *appId;

/**
 *  An indication of the relative cost of serving this request.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cost;

/** Time when the request finished. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Whether this request is finished or active.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *finished;

/**
 *  Whether this is the first RequestLog entry for this request. If an active
 *  request has several RequestLog entries written to Stackdriver Logging, then
 *  this field will be set for one of them.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *first;

/** Internet host and port number of the resource being requested. */
@property(nonatomic, copy, nullable) NSString *host;

/** HTTP version of request. Example: "HTTP/1.1". */
@property(nonatomic, copy, nullable) NSString *httpVersion;

/** An identifier for the instance that handled the request. */
@property(nonatomic, copy, nullable) NSString *instanceId;

/**
 *  If the instance processing this request belongs to a manually scaled module,
 *  then this is the 0-based index of the instance. Otherwise, this value is -1.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *instanceIndex;

/** Origin IP address. */
@property(nonatomic, copy, nullable) NSString *ip;

/** Latency of the request. */
@property(nonatomic, strong, nullable) GTLRDuration *latency;

/**
 *  A list of log lines emitted by the application while serving this request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_LogLine *> *line;

/**
 *  Number of CPU megacycles used to process request.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *megaCycles;

/** Request method. Example: "GET", "HEAD", "PUT", "POST", "DELETE". */
@property(nonatomic, copy, nullable) NSString *method;

/** Module of the application that handled this request. */
@property(nonatomic, copy, nullable) NSString *moduleId;

/**
 *  The logged-in user who made the request.Most likely, this is the part of the
 *  user's email before the \@ sign. The field value is the same for different
 *  requests from the same user, but different users can have similar names.
 *  This information is also available to the application via the App Engine
 *  Users API.This field will be populated starting with App Engine 1.9.21.
 */
@property(nonatomic, copy, nullable) NSString *nickname;

/** Time this request spent in the pending request queue. */
@property(nonatomic, strong, nullable) GTLRDuration *pendingTime;

/** Referrer URL of request. */
@property(nonatomic, copy, nullable) NSString *referrer;

/**
 *  Globally unique identifier for a request, which is based on the request
 *  start time. Request IDs for requests which started later will compare
 *  greater as strings than those for requests which started earlier.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Contains the path and query portion of the URL that was requested. For
 *  example, if the URL was "http://example.com/app?name=val", the resource
 *  would be "/app?name=val". The fragment identifier, which is identified by
 *  the # character, is not included.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Size in bytes sent back to client by request.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *responseSize;

/**
 *  Source code for the application that handled this request. There can be more
 *  than one source reference per deployed application if source code is
 *  distributed among multiple repositories.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_SourceReference *> *sourceReference;

/** Time when the request started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  HTTP response status code. Example: 200, 404.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *status;

/** Task name of the request, in the case of an offline request. */
@property(nonatomic, copy, nullable) NSString *taskName;

/** Queue name of the request, in the case of an offline request. */
@property(nonatomic, copy, nullable) NSString *taskQueueName;

/** Stackdriver Trace identifier for this request. */
@property(nonatomic, copy, nullable) NSString *traceId;

/** File or class that handled the request. */
@property(nonatomic, copy, nullable) NSString *urlMapEntry;

/** User agent that made the request. */
@property(nonatomic, copy, nullable) NSString *userAgent;

/** Version of the application that handled this request. */
@property(nonatomic, copy, nullable) NSString *versionId;

/**
 *  Whether this was a loading request for the instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wasLoadingRequest;

@end


/**
 *  Specifies a location in a source code file.
 */
@interface GTLRLogging_SourceLocation : GTLRObject

/**
 *  Source file name. Depending on the runtime environment, this might be a
 *  simple name or a fully-qualified name.
 */
@property(nonatomic, copy, nullable) NSString *file;

/**
 *  Human-readable name of the function or method being invoked, with optional
 *  context such as the class or package name. This information is used in
 *  contexts such as the logs viewer, where a file and line number are less
 *  meaningful. The format can vary by language. For example:
 *  qual.if.ied.Class.method (Java), dir/package.func (Go), function (Python).
 */
@property(nonatomic, copy, nullable) NSString *functionName;

/**
 *  Line within the source file.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *line;

@end


/**
 *  A reference to a particular snapshot of the source tree used to build and
 *  deploy an application.
 */
@interface GTLRLogging_SourceReference : GTLRObject

/**
 *  Optional. A URI string identifying the repository. Example:
 *  "https://github.com/GoogleCloudPlatform/kubernetes.git"
 */
@property(nonatomic, copy, nullable) NSString *repository;

/**
 *  The canonical and persistent identifier of the deployed revision. Example
 *  (git): "0035781c50ec7aa23385dc841529ce8a4b70db1b"
 */
@property(nonatomic, copy, nullable) NSString *revisionId;

@end


/**
 *  The parameters to WriteLogEntries.
 */
@interface GTLRLogging_WriteLogEntriesRequest : GTLRObject

/**
 *  Required. The log entries to write. Values supplied for the fields log_name,
 *  resource, and labels in this entries.write request are inserted into those
 *  log entries in this list that do not provide their own values.Stackdriver
 *  Logging also creates and inserts values for timestamp and insert_id if the
 *  entries do not provide them. The created insert_id for the N'th entry in
 *  this list will be greater than earlier entries and less than later entries.
 *  Otherwise, the order of log entries in this list does not matter.To improve
 *  throughput and to avoid exceeding the quota limit for calls to
 *  entries.write, you should write multiple log entries at once rather than
 *  calling this method for each individual log entry.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_LogEntry *> *entries;

/**
 *  Optional. Default labels that are added to the labels field of all log
 *  entries in entries. If a log entry already has a label with the same key as
 *  a label in this parameter, then the log entry's label is not changed. See
 *  LogEntry.
 */
@property(nonatomic, strong, nullable) GTLRLogging_WriteLogEntriesRequest_Labels *labels;

/**
 *  Optional. A default log resource name that is assigned to all log entries in
 *  entries that do not specify a value for log_name:
 *  "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *  "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *  "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *  "folders/[FOLDER_ID]/logs/[LOG_ID]"
 *  [LOG_ID] must be URL-encoded. For example,
 *  "projects/my-project-id/logs/syslog" or
 *  "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity".
 *  For more information about log names, see LogEntry.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Optional. Whether valid entries should be written even if some other entries
 *  fail due to INVALID_ARGUMENT or PERMISSION_DENIED errors. If any entry is
 *  not written, then the response status is the error associated with one of
 *  the failed entries and the response includes error details keyed by the
 *  entries' zero-based index in the entries.write method.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *partialSuccess;

/**
 *  Optional. A default monitored resource object that is assigned to all log
 *  entries in entries that do not specify a value for resource. Example:
 *  { "type": "gce_instance",
 *  "labels": {
 *  "zone": "us-central1-a", "instance_id": "00000000000000000000" }}
 *  See LogEntry.
 */
@property(nonatomic, strong, nullable) GTLRLogging_MonitoredResource *resource;

@end


/**
 *  Optional. Default labels that are added to the labels field of all log
 *  entries in entries. If a log entry already has a label with the same key as
 *  a label in this parameter, then the log entry's label is not changed. See
 *  LogEntry.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRLogging_WriteLogEntriesRequest_Labels : GTLRObject
@end


/**
 *  Result returned from WriteLogEntries. empty
 */
@interface GTLRLogging_WriteLogEntriesResponse : GTLRObject
@end

NS_ASSUME_NONNULL_END
