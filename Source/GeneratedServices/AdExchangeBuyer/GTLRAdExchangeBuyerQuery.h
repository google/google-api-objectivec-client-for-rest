// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Ad Exchange Buyer API (adexchangebuyer/v1.4)
// Description:
//   Accesses your bidding-account information, submits creatives for
//   validation, finds available direct deals, and retrieves performance
//   reports.
// Documentation:
//   https://developers.google.com/ad-exchange/buyer-rest

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAdExchangeBuyer_Account;
@class GTLRAdExchangeBuyer_AddOrderDealsRequest;
@class GTLRAdExchangeBuyer_AddOrderNotesRequest;
@class GTLRAdExchangeBuyer_Budget;
@class GTLRAdExchangeBuyer_CreateOrdersRequest;
@class GTLRAdExchangeBuyer_Creative;
@class GTLRAdExchangeBuyer_DeleteOrderDealsRequest;
@class GTLRAdExchangeBuyer_EditAllOrderDealsRequest;
@class GTLRAdExchangeBuyer_PretargetingConfig;
@class GTLRAdExchangeBuyer_Proposal;
@class GTLRAdExchangeBuyer_UpdatePrivateAuctionProposalRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// dealsStatusFilter

/**
 *  Creatives which have been approved for serving on deals.
 *
 *  Value: "approved"
 */
GTLR_EXTERN NSString * const kGTLRAdExchangeBuyerDealsStatusFilterApproved;
/**
 *  Creatives which have been conditionally approved for serving on deals.
 *
 *  Value: "conditionally_approved"
 */
GTLR_EXTERN NSString * const kGTLRAdExchangeBuyerDealsStatusFilterConditionallyApproved;
/**
 *  Creatives which have been disapproved for serving on deals.
 *
 *  Value: "disapproved"
 */
GTLR_EXTERN NSString * const kGTLRAdExchangeBuyerDealsStatusFilterDisapproved;
/**
 *  Creatives whose deals status is not yet checked.
 *
 *  Value: "not_checked"
 */
GTLR_EXTERN NSString * const kGTLRAdExchangeBuyerDealsStatusFilterNotChecked;

// ----------------------------------------------------------------------------
// openAuctionStatusFilter

/**
 *  Creatives which have been approved for serving on the open auction.
 *
 *  Value: "approved"
 */
GTLR_EXTERN NSString * const kGTLRAdExchangeBuyerOpenAuctionStatusFilterApproved;
/**
 *  Creatives which have been conditionally approved for serving on the open
 *  auction.
 *
 *  Value: "conditionally_approved"
 */
GTLR_EXTERN NSString * const kGTLRAdExchangeBuyerOpenAuctionStatusFilterConditionallyApproved;
/**
 *  Creatives which have been disapproved for serving on the open auction.
 *
 *  Value: "disapproved"
 */
GTLR_EXTERN NSString * const kGTLRAdExchangeBuyerOpenAuctionStatusFilterDisapproved;
/**
 *  Creatives whose open auction status is not yet checked.
 *
 *  Value: "not_checked"
 */
GTLR_EXTERN NSString * const kGTLRAdExchangeBuyerOpenAuctionStatusFilterNotChecked;

// ----------------------------------------------------------------------------
// updateAction

/** Value: "accept" */
GTLR_EXTERN NSString * const kGTLRAdExchangeBuyerUpdateActionAccept;
/** Value: "cancel" */
GTLR_EXTERN NSString * const kGTLRAdExchangeBuyerUpdateActionCancel;
/** Value: "propose" */
GTLR_EXTERN NSString * const kGTLRAdExchangeBuyerUpdateActionPropose;
/** Value: "proposeAndAccept" */
GTLR_EXTERN NSString * const kGTLRAdExchangeBuyerUpdateActionProposeAndAccept;
/** Value: "unknownAction" */
GTLR_EXTERN NSString * const kGTLRAdExchangeBuyerUpdateActionUnknownAction;
/** Value: "updateNonTerms" */
GTLR_EXTERN NSString * const kGTLRAdExchangeBuyerUpdateActionUpdateNonTerms;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Ad Exchange Buyer query classes.
 */
@interface GTLRAdExchangeBuyerQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets one account by ID.
 *
 *  Method: adexchangebuyer.accounts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_AccountsGet : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForAccountsGetWithidentifier:]

/**
 *  The account id
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) NSInteger identifier;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_Account.
 *
 *  Gets one account by ID.
 *
 *  @param identifier The account id
 *
 *  @return GTLRAdExchangeBuyerQuery_AccountsGet
 */
+ (instancetype)queryWithIdentifier:(NSInteger)identifier;

@end

/**
 *  Retrieves the authenticated user's list of accounts.
 *
 *  Method: adexchangebuyer.accounts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_AccountsList : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForAccountsList]

/**
 *  Fetches a @c GTLRAdExchangeBuyer_AccountsList.
 *
 *  Retrieves the authenticated user's list of accounts.
 *
 *  @return GTLRAdExchangeBuyerQuery_AccountsList
 */
+ (instancetype)query;

@end

/**
 *  Updates an existing account. This method supports patch semantics.
 *
 *  Method: adexchangebuyer.accounts.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_AccountsPatch : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForAccountsPatchWithObject:identifier:]

/** Confirmation for erasing bidder and cookie matching urls. */
@property(nonatomic, assign) BOOL confirmUnsafeAccountChange;

/**
 *  The account id
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) NSInteger identifier;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_Account.
 *
 *  Updates an existing account. This method supports patch semantics.
 *
 *  @param object The @c GTLRAdExchangeBuyer_Account to include in the query.
 *  @param identifier The account id
 *
 *  @return GTLRAdExchangeBuyerQuery_AccountsPatch
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyer_Account *)object
                     identifier:(NSInteger)identifier;

@end

/**
 *  Updates an existing account.
 *
 *  Method: adexchangebuyer.accounts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_AccountsUpdate : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForAccountsUpdateWithObject:identifier:]

/** Confirmation for erasing bidder and cookie matching urls. */
@property(nonatomic, assign) BOOL confirmUnsafeAccountChange;

/**
 *  The account id
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, assign) NSInteger identifier;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_Account.
 *
 *  Updates an existing account.
 *
 *  @param object The @c GTLRAdExchangeBuyer_Account to include in the query.
 *  @param identifier The account id
 *
 *  @return GTLRAdExchangeBuyerQuery_AccountsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyer_Account *)object
                     identifier:(NSInteger)identifier;

@end

/**
 *  Returns the billing information for one account specified by account ID.
 *
 *  Method: adexchangebuyer.billingInfo.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_BillingInfoGet : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForBillingInfoGetWithaccountId:]

/** The account id. */
@property(nonatomic, assign) NSInteger accountId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_BillingInfo.
 *
 *  Returns the billing information for one account specified by account ID.
 *
 *  @param accountId The account id.
 *
 *  @return GTLRAdExchangeBuyerQuery_BillingInfoGet
 */
+ (instancetype)queryWithAccountId:(NSInteger)accountId;

@end

/**
 *  Retrieves a list of billing information for all accounts of the
 *  authenticated user.
 *
 *  Method: adexchangebuyer.billingInfo.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_BillingInfoList : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForBillingInfoList]

/**
 *  Fetches a @c GTLRAdExchangeBuyer_BillingInfoList.
 *
 *  Retrieves a list of billing information for all accounts of the
 *  authenticated user.
 *
 *  @return GTLRAdExchangeBuyerQuery_BillingInfoList
 */
+ (instancetype)query;

@end

/**
 *  Returns the budget information for the adgroup specified by the accountId
 *  and billingId.
 *
 *  Method: adexchangebuyer.budget.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_BudgetGet : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForBudgetGetWithaccountId:billingId:]

/** The account id to get the budget information for. */
@property(nonatomic, assign) long long accountId;

/** The billing id to get the budget information for. */
@property(nonatomic, assign) long long billingId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_Budget.
 *
 *  Returns the budget information for the adgroup specified by the accountId
 *  and billingId.
 *
 *  @param accountId The account id to get the budget information for.
 *  @param billingId The billing id to get the budget information for.
 *
 *  @return GTLRAdExchangeBuyerQuery_BudgetGet
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                         billingId:(long long)billingId;

@end

/**
 *  Updates the budget amount for the budget of the adgroup specified by the
 *  accountId and billingId, with the budget amount in the request. This method
 *  supports patch semantics.
 *
 *  Method: adexchangebuyer.budget.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_BudgetPatch : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForBudgetPatchWithObject:accountId:billingId:]

/** The account id associated with the budget being updated. */
@property(nonatomic, assign) long long accountId;

/** The billing id associated with the budget being updated. */
@property(nonatomic, assign) long long billingId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_Budget.
 *
 *  Updates the budget amount for the budget of the adgroup specified by the
 *  accountId and billingId, with the budget amount in the request. This method
 *  supports patch semantics.
 *
 *  @param object The @c GTLRAdExchangeBuyer_Budget to include in the query.
 *  @param accountId The account id associated with the budget being updated.
 *  @param billingId The billing id associated with the budget being updated.
 *
 *  @return GTLRAdExchangeBuyerQuery_BudgetPatch
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyer_Budget *)object
                      accountId:(long long)accountId
                      billingId:(long long)billingId;

@end

/**
 *  Updates the budget amount for the budget of the adgroup specified by the
 *  accountId and billingId, with the budget amount in the request.
 *
 *  Method: adexchangebuyer.budget.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_BudgetUpdate : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForBudgetUpdateWithObject:accountId:billingId:]

/** The account id associated with the budget being updated. */
@property(nonatomic, assign) long long accountId;

/** The billing id associated with the budget being updated. */
@property(nonatomic, assign) long long billingId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_Budget.
 *
 *  Updates the budget amount for the budget of the adgroup specified by the
 *  accountId and billingId, with the budget amount in the request.
 *
 *  @param object The @c GTLRAdExchangeBuyer_Budget to include in the query.
 *  @param accountId The account id associated with the budget being updated.
 *  @param billingId The billing id associated with the budget being updated.
 *
 *  @return GTLRAdExchangeBuyerQuery_BudgetUpdate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyer_Budget *)object
                      accountId:(long long)accountId
                      billingId:(long long)billingId;

@end

/**
 *  Add a deal id association for the creative.
 *
 *  Method: adexchangebuyer.creatives.addDeal
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_CreativesAddDeal : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForCreativesAddDealWithaccountId:buyerCreativeId:dealId:]

/** The id for the account that will serve this creative. */
@property(nonatomic, assign) NSInteger accountId;

/** The buyer-specific id for this creative. */
@property(nonatomic, copy, nullable) NSString *buyerCreativeId;

/** The id of the deal id to associate with this creative. */
@property(nonatomic, assign) long long dealId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Add a deal id association for the creative.
 *
 *  @param accountId The id for the account that will serve this creative.
 *  @param buyerCreativeId The buyer-specific id for this creative.
 *  @param dealId The id of the deal id to associate with this creative.
 *
 *  @return GTLRAdExchangeBuyerQuery_CreativesAddDeal
 */
+ (instancetype)queryWithAccountId:(NSInteger)accountId
                   buyerCreativeId:(NSString *)buyerCreativeId
                            dealId:(long long)dealId;

@end

/**
 *  Gets the status for a single creative. A creative will be available 30-40
 *  minutes after submission.
 *
 *  Method: adexchangebuyer.creatives.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_CreativesGet : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForCreativesGetWithaccountId:buyerCreativeId:]

/** The id for the account that will serve this creative. */
@property(nonatomic, assign) NSInteger accountId;

/** The buyer-specific id for this creative. */
@property(nonatomic, copy, nullable) NSString *buyerCreativeId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_Creative.
 *
 *  Gets the status for a single creative. A creative will be available 30-40
 *  minutes after submission.
 *
 *  @param accountId The id for the account that will serve this creative.
 *  @param buyerCreativeId The buyer-specific id for this creative.
 *
 *  @return GTLRAdExchangeBuyerQuery_CreativesGet
 */
+ (instancetype)queryWithAccountId:(NSInteger)accountId
                   buyerCreativeId:(NSString *)buyerCreativeId;

@end

/**
 *  Submit a new creative.
 *
 *  Method: adexchangebuyer.creatives.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_CreativesInsert : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForCreativesInsertWithObject:]

/**
 *  Fetches a @c GTLRAdExchangeBuyer_Creative.
 *
 *  Submit a new creative.
 *
 *  @param object The @c GTLRAdExchangeBuyer_Creative to include in the query.
 *
 *  @return GTLRAdExchangeBuyerQuery_CreativesInsert
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyer_Creative *)object;

@end

/**
 *  Retrieves a list of the authenticated user's active creatives. A creative
 *  will be available 30-40 minutes after submission.
 *
 *  Method: adexchangebuyer.creatives.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_CreativesList : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForCreativesList]

/**
 *  When specified, only creatives for the given account ids are returned.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *accountId;

/**
 *  When specified, only creatives for the given buyer creative ids are
 *  returned.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *buyerCreativeId;

/**
 *  When specified, only creatives having the given deals status are returned.
 *
 *  Likely values:
 *    @arg @c kGTLRAdExchangeBuyerDealsStatusFilterApproved Creatives which have
 *        been approved for serving on deals. (Value: "approved")
 *    @arg @c kGTLRAdExchangeBuyerDealsStatusFilterConditionallyApproved
 *        Creatives which have been conditionally approved for serving on deals.
 *        (Value: "conditionally_approved")
 *    @arg @c kGTLRAdExchangeBuyerDealsStatusFilterDisapproved Creatives which
 *        have been disapproved for serving on deals. (Value: "disapproved")
 *    @arg @c kGTLRAdExchangeBuyerDealsStatusFilterNotChecked Creatives whose
 *        deals status is not yet checked. (Value: "not_checked")
 */
@property(nonatomic, copy, nullable) NSString *dealsStatusFilter;

/**
 *  Maximum number of entries returned on one result page. If not set, the
 *  default is 100. Optional.
 *
 *  @note The documented range is 1..1000.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  When specified, only creatives having the given open auction status are
 *  returned.
 *
 *  Likely values:
 *    @arg @c kGTLRAdExchangeBuyerOpenAuctionStatusFilterApproved Creatives
 *        which have been approved for serving on the open auction. (Value:
 *        "approved")
 *    @arg @c kGTLRAdExchangeBuyerOpenAuctionStatusFilterConditionallyApproved
 *        Creatives which have been conditionally approved for serving on the
 *        open auction. (Value: "conditionally_approved")
 *    @arg @c kGTLRAdExchangeBuyerOpenAuctionStatusFilterDisapproved Creatives
 *        which have been disapproved for serving on the open auction. (Value:
 *        "disapproved")
 *    @arg @c kGTLRAdExchangeBuyerOpenAuctionStatusFilterNotChecked Creatives
 *        whose open auction status is not yet checked. (Value: "not_checked")
 */
@property(nonatomic, copy, nullable) NSString *openAuctionStatusFilter;

/**
 *  A continuation token, used to page through ad clients. To retrieve the next
 *  page, set this parameter to the value of "nextPageToken" from the previous
 *  response. Optional.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_CreativesList.
 *
 *  Retrieves a list of the authenticated user's active creatives. A creative
 *  will be available 30-40 minutes after submission.
 *
 *  @return GTLRAdExchangeBuyerQuery_CreativesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Lists the external deal ids associated with the creative.
 *
 *  Method: adexchangebuyer.creatives.listDeals
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_CreativesListDeals : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForCreativesListDealsWithaccountId:buyerCreativeId:]

/** The id for the account that will serve this creative. */
@property(nonatomic, assign) NSInteger accountId;

/** The buyer-specific id for this creative. */
@property(nonatomic, copy, nullable) NSString *buyerCreativeId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_CreativeDealIds.
 *
 *  Lists the external deal ids associated with the creative.
 *
 *  @param accountId The id for the account that will serve this creative.
 *  @param buyerCreativeId The buyer-specific id for this creative.
 *
 *  @return GTLRAdExchangeBuyerQuery_CreativesListDeals
 */
+ (instancetype)queryWithAccountId:(NSInteger)accountId
                   buyerCreativeId:(NSString *)buyerCreativeId;

@end

/**
 *  Remove a deal id associated with the creative.
 *
 *  Method: adexchangebuyer.creatives.removeDeal
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_CreativesRemoveDeal : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForCreativesRemoveDealWithaccountId:buyerCreativeId:dealId:]

/** The id for the account that will serve this creative. */
@property(nonatomic, assign) NSInteger accountId;

/** The buyer-specific id for this creative. */
@property(nonatomic, copy, nullable) NSString *buyerCreativeId;

/** The id of the deal id to disassociate with this creative. */
@property(nonatomic, assign) long long dealId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Remove a deal id associated with the creative.
 *
 *  @param accountId The id for the account that will serve this creative.
 *  @param buyerCreativeId The buyer-specific id for this creative.
 *  @param dealId The id of the deal id to disassociate with this creative.
 *
 *  @return GTLRAdExchangeBuyerQuery_CreativesRemoveDeal
 */
+ (instancetype)queryWithAccountId:(NSInteger)accountId
                   buyerCreativeId:(NSString *)buyerCreativeId
                            dealId:(long long)dealId;

@end

/**
 *  Delete the specified deals from the proposal
 *
 *  Method: adexchangebuyer.marketplacedeals.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_MarketplacedealsDelete : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForMarketplacedealsDeleteWithObject:proposalId:]

/** The proposalId to delete deals from. */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_DeleteOrderDealsResponse.
 *
 *  Delete the specified deals from the proposal
 *
 *  @param object The @c GTLRAdExchangeBuyer_DeleteOrderDealsRequest to include
 *    in the query.
 *  @param proposalId The proposalId to delete deals from.
 *
 *  @return GTLRAdExchangeBuyerQuery_MarketplacedealsDelete
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyer_DeleteOrderDealsRequest *)object
                     proposalId:(NSString *)proposalId;

@end

/**
 *  Add new deals for the specified proposal
 *
 *  Method: adexchangebuyer.marketplacedeals.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_MarketplacedealsInsert : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForMarketplacedealsInsertWithObject:proposalId:]

/** proposalId for which deals need to be added. */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_AddOrderDealsResponse.
 *
 *  Add new deals for the specified proposal
 *
 *  @param object The @c GTLRAdExchangeBuyer_AddOrderDealsRequest to include in
 *    the query.
 *  @param proposalId proposalId for which deals need to be added.
 *
 *  @return GTLRAdExchangeBuyerQuery_MarketplacedealsInsert
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyer_AddOrderDealsRequest *)object
                     proposalId:(NSString *)proposalId;

@end

/**
 *  List all the deals for a given proposal
 *
 *  Method: adexchangebuyer.marketplacedeals.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_MarketplacedealsList : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForMarketplacedealsListWithproposalId:]

/** Query string to retrieve specific deals. */
@property(nonatomic, copy, nullable) NSString *pqlQuery;

/**
 *  The proposalId to get deals for. To search across all proposals specify
 *  order_id = '-' as part of the URL.
 */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_GetOrderDealsResponse.
 *
 *  List all the deals for a given proposal
 *
 *  @param proposalId The proposalId to get deals for. To search across all
 *    proposals specify order_id = '-' as part of the URL.
 *
 *  @return GTLRAdExchangeBuyerQuery_MarketplacedealsList
 */
+ (instancetype)queryWithProposalId:(NSString *)proposalId;

@end

/**
 *  Replaces all the deals in the proposal with the passed in deals
 *
 *  Method: adexchangebuyer.marketplacedeals.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_MarketplacedealsUpdate : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForMarketplacedealsUpdateWithObject:proposalId:]

/** The proposalId to edit deals on. */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_EditAllOrderDealsResponse.
 *
 *  Replaces all the deals in the proposal with the passed in deals
 *
 *  @param object The @c GTLRAdExchangeBuyer_EditAllOrderDealsRequest to include
 *    in the query.
 *  @param proposalId The proposalId to edit deals on.
 *
 *  @return GTLRAdExchangeBuyerQuery_MarketplacedealsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyer_EditAllOrderDealsRequest *)object
                     proposalId:(NSString *)proposalId;

@end

/**
 *  Add notes to the proposal
 *
 *  Method: adexchangebuyer.marketplacenotes.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_MarketplacenotesInsert : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForMarketplacenotesInsertWithObject:proposalId:]

/** The proposalId to add notes for. */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_AddOrderNotesResponse.
 *
 *  Add notes to the proposal
 *
 *  @param object The @c GTLRAdExchangeBuyer_AddOrderNotesRequest to include in
 *    the query.
 *  @param proposalId The proposalId to add notes for.
 *
 *  @return GTLRAdExchangeBuyerQuery_MarketplacenotesInsert
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyer_AddOrderNotesRequest *)object
                     proposalId:(NSString *)proposalId;

@end

/**
 *  Get all the notes associated with a proposal
 *
 *  Method: adexchangebuyer.marketplacenotes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_MarketplacenotesList : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForMarketplacenotesListWithproposalId:]

/**
 *  Query string to retrieve specific notes. To search the text contents of
 *  notes, please use syntax like "WHERE note.note = "foo" or "WHERE note.note
 *  LIKE "%bar%"
 */
@property(nonatomic, copy, nullable) NSString *pqlQuery;

/**
 *  The proposalId to get notes for. To search across all proposals specify
 *  order_id = '-' as part of the URL.
 */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_GetOrderNotesResponse.
 *
 *  Get all the notes associated with a proposal
 *
 *  @param proposalId The proposalId to get notes for. To search across all
 *    proposals specify order_id = '-' as part of the URL.
 *
 *  @return GTLRAdExchangeBuyerQuery_MarketplacenotesList
 */
+ (instancetype)queryWithProposalId:(NSString *)proposalId;

@end

/**
 *  Update a given private auction proposal
 *
 *  Method: adexchangebuyer.marketplaceprivateauction.updateproposal
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_MarketplaceprivateauctionUpdateproposal : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForMarketplaceprivateauctionUpdateproposalWithObject:privateAuctionId:]

/** The private auction id to be updated. */
@property(nonatomic, copy, nullable) NSString *privateAuctionId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Update a given private auction proposal
 *
 *  @param object The @c GTLRAdExchangeBuyer_UpdatePrivateAuctionProposalRequest
 *    to include in the query.
 *  @param privateAuctionId The private auction id to be updated.
 *
 *  @return GTLRAdExchangeBuyerQuery_MarketplaceprivateauctionUpdateproposal
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyer_UpdatePrivateAuctionProposalRequest *)object
               privateAuctionId:(NSString *)privateAuctionId;

@end

/**
 *  Retrieves the authenticated user's list of performance metrics.
 *
 *  Method: adexchangebuyer.performanceReport.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_PerformanceReportList : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForPerformanceReportListWithaccountId:endDateTime:startDateTime:]

/** The account id to get the reports. */
@property(nonatomic, assign) long long accountId;

/** The end time of the report in ISO 8601 timestamp format using UTC. */
@property(nonatomic, copy, nullable) NSString *endDateTime;

/**
 *  Maximum number of entries returned on one result page. If not set, the
 *  default is 100. Optional.
 *
 *  @note The documented range is 1..1000.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  A continuation token, used to page through performance reports. To retrieve
 *  the next page, set this parameter to the value of "nextPageToken" from the
 *  previous response. Optional.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The start time of the report in ISO 8601 timestamp format using UTC. */
@property(nonatomic, copy, nullable) NSString *startDateTime;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_PerformanceReportList.
 *
 *  Retrieves the authenticated user's list of performance metrics.
 *
 *  @param accountId The account id to get the reports.
 *  @param endDateTime The end time of the report in ISO 8601 timestamp format
 *    using UTC.
 *  @param startDateTime The start time of the report in ISO 8601 timestamp
 *    format using UTC.
 *
 *  @return GTLRAdExchangeBuyerQuery_PerformanceReportList
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                       endDateTime:(NSString *)endDateTime
                     startDateTime:(NSString *)startDateTime;

@end

/**
 *  Deletes an existing pretargeting config.
 *
 *  Method: adexchangebuyer.pretargetingConfig.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_PretargetingConfigDelete : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForPretargetingConfigDeleteWithaccountId:configId:]

/** The account id to delete the pretargeting config for. */
@property(nonatomic, assign) long long accountId;

/** The specific id of the configuration to delete. */
@property(nonatomic, assign) long long configId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an existing pretargeting config.
 *
 *  @param accountId The account id to delete the pretargeting config for.
 *  @param configId The specific id of the configuration to delete.
 *
 *  @return GTLRAdExchangeBuyerQuery_PretargetingConfigDelete
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                          configId:(long long)configId;

@end

/**
 *  Gets a specific pretargeting configuration
 *
 *  Method: adexchangebuyer.pretargetingConfig.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_PretargetingConfigGet : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForPretargetingConfigGetWithaccountId:configId:]

/** The account id to get the pretargeting config for. */
@property(nonatomic, assign) long long accountId;

/** The specific id of the configuration to retrieve. */
@property(nonatomic, assign) long long configId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_PretargetingConfig.
 *
 *  Gets a specific pretargeting configuration
 *
 *  @param accountId The account id to get the pretargeting config for.
 *  @param configId The specific id of the configuration to retrieve.
 *
 *  @return GTLRAdExchangeBuyerQuery_PretargetingConfigGet
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                          configId:(long long)configId;

@end

/**
 *  Inserts a new pretargeting configuration.
 *
 *  Method: adexchangebuyer.pretargetingConfig.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_PretargetingConfigInsert : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForPretargetingConfigInsertWithObject:accountId:]

/** The account id to insert the pretargeting config for. */
@property(nonatomic, assign) long long accountId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_PretargetingConfig.
 *
 *  Inserts a new pretargeting configuration.
 *
 *  @param object The @c GTLRAdExchangeBuyer_PretargetingConfig to include in
 *    the query.
 *  @param accountId The account id to insert the pretargeting config for.
 *
 *  @return GTLRAdExchangeBuyerQuery_PretargetingConfigInsert
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyer_PretargetingConfig *)object
                      accountId:(long long)accountId;

@end

/**
 *  Retrieves a list of the authenticated user's pretargeting configurations.
 *
 *  Method: adexchangebuyer.pretargetingConfig.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_PretargetingConfigList : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForPretargetingConfigListWithaccountId:]

/** The account id to get the pretargeting configs for. */
@property(nonatomic, assign) long long accountId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_PretargetingConfigList.
 *
 *  Retrieves a list of the authenticated user's pretargeting configurations.
 *
 *  @param accountId The account id to get the pretargeting configs for.
 *
 *  @return GTLRAdExchangeBuyerQuery_PretargetingConfigList
 */
+ (instancetype)queryWithAccountId:(long long)accountId;

@end

/**
 *  Updates an existing pretargeting config. This method supports patch
 *  semantics.
 *
 *  Method: adexchangebuyer.pretargetingConfig.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_PretargetingConfigPatch : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForPretargetingConfigPatchWithObject:accountId:configId:]

/** The account id to update the pretargeting config for. */
@property(nonatomic, assign) long long accountId;

/** The specific id of the configuration to update. */
@property(nonatomic, assign) long long configId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_PretargetingConfig.
 *
 *  Updates an existing pretargeting config. This method supports patch
 *  semantics.
 *
 *  @param object The @c GTLRAdExchangeBuyer_PretargetingConfig to include in
 *    the query.
 *  @param accountId The account id to update the pretargeting config for.
 *  @param configId The specific id of the configuration to update.
 *
 *  @return GTLRAdExchangeBuyerQuery_PretargetingConfigPatch
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyer_PretargetingConfig *)object
                      accountId:(long long)accountId
                       configId:(long long)configId;

@end

/**
 *  Updates an existing pretargeting config.
 *
 *  Method: adexchangebuyer.pretargetingConfig.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_PretargetingConfigUpdate : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForPretargetingConfigUpdateWithObject:accountId:configId:]

/** The account id to update the pretargeting config for. */
@property(nonatomic, assign) long long accountId;

/** The specific id of the configuration to update. */
@property(nonatomic, assign) long long configId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_PretargetingConfig.
 *
 *  Updates an existing pretargeting config.
 *
 *  @param object The @c GTLRAdExchangeBuyer_PretargetingConfig to include in
 *    the query.
 *  @param accountId The account id to update the pretargeting config for.
 *  @param configId The specific id of the configuration to update.
 *
 *  @return GTLRAdExchangeBuyerQuery_PretargetingConfigUpdate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyer_PretargetingConfig *)object
                      accountId:(long long)accountId
                       configId:(long long)configId;

@end

/**
 *  Gets the requested product by id.
 *
 *  Method: adexchangebuyer.products.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_ProductsGet : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForProductsGetWithproductId:]

/** The id for the product to get the head revision for. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_Product.
 *
 *  Gets the requested product by id.
 *
 *  @param productId The id for the product to get the head revision for.
 *
 *  @return GTLRAdExchangeBuyerQuery_ProductsGet
 */
+ (instancetype)queryWithProductId:(NSString *)productId;

@end

/**
 *  Gets the requested product.
 *
 *  Method: adexchangebuyer.products.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_ProductsSearch : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForProductsSearch]

/** The pql query used to query for products. */
@property(nonatomic, copy, nullable) NSString *pqlQuery;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_GetOffersResponse.
 *
 *  Gets the requested product.
 *
 *  @return GTLRAdExchangeBuyerQuery_ProductsSearch
 */
+ (instancetype)query;

@end

/**
 *  Get a proposal given its id
 *
 *  Method: adexchangebuyer.proposals.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_ProposalsGet : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForProposalsGetWithproposalId:]

/** Id of the proposal to retrieve. */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_Proposal.
 *
 *  Get a proposal given its id
 *
 *  @param proposalId Id of the proposal to retrieve.
 *
 *  @return GTLRAdExchangeBuyerQuery_ProposalsGet
 */
+ (instancetype)queryWithProposalId:(NSString *)proposalId;

@end

/**
 *  Create the given list of proposals
 *
 *  Method: adexchangebuyer.proposals.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_ProposalsInsert : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForProposalsInsertWithObject:]

/**
 *  Fetches a @c GTLRAdExchangeBuyer_CreateOrdersResponse.
 *
 *  Create the given list of proposals
 *
 *  @param object The @c GTLRAdExchangeBuyer_CreateOrdersRequest to include in
 *    the query.
 *
 *  @return GTLRAdExchangeBuyerQuery_ProposalsInsert
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyer_CreateOrdersRequest *)object;

@end

/**
 *  Update the given proposal. This method supports patch semantics.
 *
 *  Method: adexchangebuyer.proposals.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_ProposalsPatch : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForProposalsPatchWithObject:proposalId:revisionNumber:updateAction:]

/** The proposal id to update. */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  The last known revision number to update. If the head revision in the
 *  marketplace database has since changed, an error will be thrown. The caller
 *  should then fetch the latest proposal at head revision and retry the update
 *  at that revision.
 */
@property(nonatomic, assign) long long revisionNumber;

/**
 *  The proposed action to take on the proposal. This field is required and it
 *  must be set when updating a proposal.
 *
 *  Likely values:
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionAccept Value "accept"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionCancel Value "cancel"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionPropose Value "propose"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionProposeAndAccept Value
 *        "proposeAndAccept"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionUnknownAction Value
 *        "unknownAction"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionUpdateNonTerms Value
 *        "updateNonTerms"
 */
@property(nonatomic, copy, nullable) NSString *updateAction;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_Proposal.
 *
 *  Update the given proposal. This method supports patch semantics.
 *
 *  @param object The @c GTLRAdExchangeBuyer_Proposal to include in the query.
 *  @param proposalId The proposal id to update.
 *  @param revisionNumber The last known revision number to update. If the head
 *    revision in the marketplace database has since changed, an error will be
 *    thrown. The caller should then fetch the latest proposal at head revision
 *    and retry the update at that revision.
 *  @param updateAction The proposed action to take on the proposal. This field
 *    is required and it must be set when updating a proposal.
 *
 *  Likely values for @c updateAction:
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionAccept Value "accept"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionCancel Value "cancel"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionPropose Value "propose"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionProposeAndAccept Value
 *        "proposeAndAccept"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionUnknownAction Value
 *        "unknownAction"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionUpdateNonTerms Value
 *        "updateNonTerms"
 *
 *  @return GTLRAdExchangeBuyerQuery_ProposalsPatch
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyer_Proposal *)object
                     proposalId:(NSString *)proposalId
                 revisionNumber:(long long)revisionNumber
                   updateAction:(NSString *)updateAction;

@end

/**
 *  Search for proposals using pql query
 *
 *  Method: adexchangebuyer.proposals.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_ProposalsSearch : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForProposalsSearch]

/** Query string to retrieve specific proposals. */
@property(nonatomic, copy, nullable) NSString *pqlQuery;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_GetOrdersResponse.
 *
 *  Search for proposals using pql query
 *
 *  @return GTLRAdExchangeBuyerQuery_ProposalsSearch
 */
+ (instancetype)query;

@end

/**
 *  Update the given proposal to indicate that setup has been completed.
 *
 *  Method: adexchangebuyer.proposals.setupcomplete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_ProposalsSetupcomplete : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForProposalsSetupcompleteWithproposalId:]

/** The proposal id for which the setup is complete */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Update the given proposal to indicate that setup has been completed.
 *
 *  @param proposalId The proposal id for which the setup is complete
 *
 *  @return GTLRAdExchangeBuyerQuery_ProposalsSetupcomplete
 */
+ (instancetype)queryWithProposalId:(NSString *)proposalId;

@end

/**
 *  Update the given proposal
 *
 *  Method: adexchangebuyer.proposals.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_ProposalsUpdate : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForProposalsUpdateWithObject:proposalId:revisionNumber:updateAction:]

/** The proposal id to update. */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  The last known revision number to update. If the head revision in the
 *  marketplace database has since changed, an error will be thrown. The caller
 *  should then fetch the latest proposal at head revision and retry the update
 *  at that revision.
 */
@property(nonatomic, assign) long long revisionNumber;

/**
 *  The proposed action to take on the proposal. This field is required and it
 *  must be set when updating a proposal.
 *
 *  Likely values:
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionAccept Value "accept"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionCancel Value "cancel"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionPropose Value "propose"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionProposeAndAccept Value
 *        "proposeAndAccept"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionUnknownAction Value
 *        "unknownAction"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionUpdateNonTerms Value
 *        "updateNonTerms"
 */
@property(nonatomic, copy, nullable) NSString *updateAction;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_Proposal.
 *
 *  Update the given proposal
 *
 *  @param object The @c GTLRAdExchangeBuyer_Proposal to include in the query.
 *  @param proposalId The proposal id to update.
 *  @param revisionNumber The last known revision number to update. If the head
 *    revision in the marketplace database has since changed, an error will be
 *    thrown. The caller should then fetch the latest proposal at head revision
 *    and retry the update at that revision.
 *  @param updateAction The proposed action to take on the proposal. This field
 *    is required and it must be set when updating a proposal.
 *
 *  Likely values for @c updateAction:
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionAccept Value "accept"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionCancel Value "cancel"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionPropose Value "propose"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionProposeAndAccept Value
 *        "proposeAndAccept"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionUnknownAction Value
 *        "unknownAction"
 *    @arg @c kGTLRAdExchangeBuyerUpdateActionUpdateNonTerms Value
 *        "updateNonTerms"
 *
 *  @return GTLRAdExchangeBuyerQuery_ProposalsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyer_Proposal *)object
                     proposalId:(NSString *)proposalId
                 revisionNumber:(long long)revisionNumber
                   updateAction:(NSString *)updateAction;

@end

/**
 *  Gets the requested publisher profile(s) by publisher accountId.
 *
 *  Method: adexchangebuyer.pubprofiles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerQuery_PubprofilesList : GTLRAdExchangeBuyerQuery
// Previous library name was
//   +[GTLQueryAdExchangeBuyer queryForPubprofilesListWithaccountId:]

/** The accountId of the publisher to get profiles for. */
@property(nonatomic, assign) NSInteger accountId;

/**
 *  Fetches a @c GTLRAdExchangeBuyer_GetPublisherProfilesByAccountIdResponse.
 *
 *  Gets the requested publisher profile(s) by publisher accountId.
 *
 *  @param accountId The accountId of the publisher to get profiles for.
 *
 *  @return GTLRAdExchangeBuyerQuery_PubprofilesList
 */
+ (instancetype)queryWithAccountId:(NSInteger)accountId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
