// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Android Device Provisioning Partner API (androiddeviceprovisioning/v1)
// Description:
//   Automates Android zero-touch enrollment for device resellers, customers,
//   and EMMs.
// Documentation:
//   https://developers.google.com/zero-touch/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAndroidProvisioningPartner_Company;
@class GTLRAndroidProvisioningPartner_Configuration;
@class GTLRAndroidProvisioningPartner_Device;
@class GTLRAndroidProvisioningPartner_DeviceClaim;
@class GTLRAndroidProvisioningPartner_DeviceIdentifier;
@class GTLRAndroidProvisioningPartner_DeviceMetadata;
@class GTLRAndroidProvisioningPartner_DeviceMetadata_Entries;
@class GTLRAndroidProvisioningPartner_DeviceReference;
@class GTLRAndroidProvisioningPartner_Dpc;
@class GTLRAndroidProvisioningPartner_Operation_Metadata;
@class GTLRAndroidProvisioningPartner_Operation_Response;
@class GTLRAndroidProvisioningPartner_OperationPerDevice;
@class GTLRAndroidProvisioningPartner_PartnerClaim;
@class GTLRAndroidProvisioningPartner_PartnerUnclaim;
@class GTLRAndroidProvisioningPartner_PerDeviceStatusInBatch;
@class GTLRAndroidProvisioningPartner_Status;
@class GTLRAndroidProvisioningPartner_Status_Details_Item;
@class GTLRAndroidProvisioningPartner_UpdateMetadataArguments;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRAndroidProvisioningPartner_ClaimDeviceRequest.sectionType

/**
 *  SIM-lock section type.
 *
 *  Value: "SECTION_TYPE_SIM_LOCK"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_ClaimDeviceRequest_SectionType_SectionTypeSimLock;
/**
 *  Unspecified section type.
 *
 *  Value: "SECTION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_ClaimDeviceRequest_SectionType_SectionTypeUnspecified;
/**
 *  Zero-touch enrollment section type.
 *
 *  Value: "SECTION_TYPE_ZERO_TOUCH"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_ClaimDeviceRequest_SectionType_SectionTypeZeroTouch;

// ----------------------------------------------------------------------------
// GTLRAndroidProvisioningPartner_Company.termsStatus

/**
 *  One (or more) of the company's users has accepted the ToS.
 *
 *  Value: "TERMS_STATUS_ACCEPTED"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_Company_TermsStatus_TermsStatusAccepted;
/**
 *  None of the company's users have accepted the ToS.
 *
 *  Value: "TERMS_STATUS_NOT_ACCEPTED"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_Company_TermsStatus_TermsStatusNotAccepted;
/**
 *  None of the company's users has accepted the current ToS but at least one
 *  user accepted a previous ToS.
 *
 *  Value: "TERMS_STATUS_STALE"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_Company_TermsStatus_TermsStatusStale;
/**
 *  Default value. This value should never be set if the enum is present.
 *
 *  Value: "TERMS_STATUS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_Company_TermsStatus_TermsStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidProvisioningPartner_DeviceClaim.sectionType

/**
 *  SIM-lock section type.
 *
 *  Value: "SECTION_TYPE_SIM_LOCK"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_DeviceClaim_SectionType_SectionTypeSimLock;
/**
 *  Unspecified section type.
 *
 *  Value: "SECTION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_DeviceClaim_SectionType_SectionTypeUnspecified;
/**
 *  Zero-touch enrollment section type.
 *
 *  Value: "SECTION_TYPE_ZERO_TOUCH"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_DeviceClaim_SectionType_SectionTypeZeroTouch;

// ----------------------------------------------------------------------------
// GTLRAndroidProvisioningPartner_DevicesLongRunningOperationMetadata.processingStatus

/**
 *  In progress.
 *
 *  Value: "BATCH_PROCESS_IN_PROGRESS"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_DevicesLongRunningOperationMetadata_ProcessingStatus_BatchProcessInProgress;
/**
 *  Pending.
 *
 *  Value: "BATCH_PROCESS_PENDING"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_DevicesLongRunningOperationMetadata_ProcessingStatus_BatchProcessPending;
/**
 *  Processed.
 *  This doesn't mean all items were processed successfully, you should
 *  check the `response` field for the result of every item.
 *
 *  Value: "BATCH_PROCESS_PROCESSED"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_DevicesLongRunningOperationMetadata_ProcessingStatus_BatchProcessProcessed;
/**
 *  Invalid code. Shouldn't be used.
 *
 *  Value: "BATCH_PROCESS_STATUS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_DevicesLongRunningOperationMetadata_ProcessingStatus_BatchProcessStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidProvisioningPartner_FindDevicesByOwnerRequest.sectionType

/**
 *  SIM-lock section type.
 *
 *  Value: "SECTION_TYPE_SIM_LOCK"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_FindDevicesByOwnerRequest_SectionType_SectionTypeSimLock;
/**
 *  Unspecified section type.
 *
 *  Value: "SECTION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_FindDevicesByOwnerRequest_SectionType_SectionTypeUnspecified;
/**
 *  Zero-touch enrollment section type.
 *
 *  Value: "SECTION_TYPE_ZERO_TOUCH"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_FindDevicesByOwnerRequest_SectionType_SectionTypeZeroTouch;

// ----------------------------------------------------------------------------
// GTLRAndroidProvisioningPartner_PartnerClaim.sectionType

/**
 *  SIM-lock section type.
 *
 *  Value: "SECTION_TYPE_SIM_LOCK"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_PartnerClaim_SectionType_SectionTypeSimLock;
/**
 *  Unspecified section type.
 *
 *  Value: "SECTION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_PartnerClaim_SectionType_SectionTypeUnspecified;
/**
 *  Zero-touch enrollment section type.
 *
 *  Value: "SECTION_TYPE_ZERO_TOUCH"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_PartnerClaim_SectionType_SectionTypeZeroTouch;

// ----------------------------------------------------------------------------
// GTLRAndroidProvisioningPartner_PartnerUnclaim.sectionType

/**
 *  SIM-lock section type.
 *
 *  Value: "SECTION_TYPE_SIM_LOCK"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_PartnerUnclaim_SectionType_SectionTypeSimLock;
/**
 *  Unspecified section type.
 *
 *  Value: "SECTION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_PartnerUnclaim_SectionType_SectionTypeUnspecified;
/**
 *  Zero-touch enrollment section type.
 *
 *  Value: "SECTION_TYPE_ZERO_TOUCH"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_PartnerUnclaim_SectionType_SectionTypeZeroTouch;

// ----------------------------------------------------------------------------
// GTLRAndroidProvisioningPartner_PerDeviceStatusInBatch.status

/**
 *  Invalid device identifier.
 *
 *  Value: "SINGLE_DEVICE_STATUS_INVALID_DEVICE_IDENTIFIER"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_PerDeviceStatusInBatch_Status_SingleDeviceStatusInvalidDeviceIdentifier;
/**
 *  Invalid section type.
 *
 *  Value: "SINGLE_DEVICE_STATUS_INVALID_SECTION_TYPE"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_PerDeviceStatusInBatch_Status_SingleDeviceStatusInvalidSectionType;
/**
 *  Other error.
 *  We know/expect this error, but there's no defined error code for the
 *  error.
 *
 *  Value: "SINGLE_DEVICE_STATUS_OTHER_ERROR"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_PerDeviceStatusInBatch_Status_SingleDeviceStatusOtherError;
/**
 *  Permission denied.
 *
 *  Value: "SINGLE_DEVICE_STATUS_PERMISSION_DENIED"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_PerDeviceStatusInBatch_Status_SingleDeviceStatusPermissionDenied;
/**
 *  This section is claimed by another company.
 *
 *  Value: "SINGLE_DEVICE_STATUS_SECTION_NOT_YOURS"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_PerDeviceStatusInBatch_Status_SingleDeviceStatusSectionNotYours;
/**
 *  Success.
 *
 *  Value: "SINGLE_DEVICE_STATUS_SUCCESS"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_PerDeviceStatusInBatch_Status_SingleDeviceStatusSuccess;
/**
 *  Unknown error.
 *  We don't expect this error to occur here.
 *
 *  Value: "SINGLE_DEVICE_STATUS_UNKNOWN_ERROR"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_PerDeviceStatusInBatch_Status_SingleDeviceStatusUnknownError;
/**
 *  Invalid code. Shouldn't be used.
 *
 *  Value: "SINGLE_DEVICE_STATUS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_PerDeviceStatusInBatch_Status_SingleDeviceStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidProvisioningPartner_UnclaimDeviceRequest.sectionType

/**
 *  SIM-lock section type.
 *
 *  Value: "SECTION_TYPE_SIM_LOCK"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_UnclaimDeviceRequest_SectionType_SectionTypeSimLock;
/**
 *  Unspecified section type.
 *
 *  Value: "SECTION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_UnclaimDeviceRequest_SectionType_SectionTypeUnspecified;
/**
 *  Zero-touch enrollment section type.
 *
 *  Value: "SECTION_TYPE_ZERO_TOUCH"
 */
GTLR_EXTERN NSString * const kGTLRAndroidProvisioningPartner_UnclaimDeviceRequest_SectionType_SectionTypeZeroTouch;

/**
 *  Request message to claim a device on behalf of a customer.
 */
@interface GTLRAndroidProvisioningPartner_ClaimDeviceRequest : GTLRObject

/**
 *  Required. The ID of the customer for whom the device is being claimed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *customerId;

/** Required. The device identifier of the device to claim. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceIdentifier *deviceIdentifier;

/** Optional. The metadata to attach to the device. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceMetadata *deviceMetadata;

/**
 *  Required. The section type of the device's provisioning record.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidProvisioningPartner_ClaimDeviceRequest_SectionType_SectionTypeSimLock
 *        SIM-lock section type. (Value: "SECTION_TYPE_SIM_LOCK")
 *    @arg @c kGTLRAndroidProvisioningPartner_ClaimDeviceRequest_SectionType_SectionTypeUnspecified
 *        Unspecified section type. (Value: "SECTION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRAndroidProvisioningPartner_ClaimDeviceRequest_SectionType_SectionTypeZeroTouch
 *        Zero-touch enrollment section type. (Value: "SECTION_TYPE_ZERO_TOUCH")
 */
@property(nonatomic, copy, nullable) NSString *sectionType;

@end


/**
 *  Response message containing device id of the claim.
 */
@interface GTLRAndroidProvisioningPartner_ClaimDeviceResponse : GTLRObject

/**
 *  The device ID of the claimed device.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deviceId;

/**
 *  The resource name of the device in the format
 *  `partners/[PARTNER_ID]/devices/[DEVICE_ID]`.
 */
@property(nonatomic, copy, nullable) NSString *deviceName;

@end


/**
 *  Request to claim devices asynchronously in batch. Claiming a device adds the
 *  device to zero-touch enrollment and shows the device in the customer's view
 *  of the portal.
 */
@interface GTLRAndroidProvisioningPartner_ClaimDevicesRequest : GTLRObject

/** Required. A list of device claims. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidProvisioningPartner_PartnerClaim *> *claims;

@end


/**
 *  A reseller, vendor, or customer in the zero-touch reseller and customer
 *  APIs.
 */
@interface GTLRAndroidProvisioningPartner_Company : GTLRObject

/**
 *  Input only. Optional. Email address of customer's users in the admin role.
 *  Each email address must be associated with a Google Account.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *adminEmails;

/**
 *  Output only. The ID of the company. Assigned by the server.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *companyId;

/**
 *  Required. The name of the company. For example _XYZ Corp_. Displayed to the
 *  company's employees in the zero-touch enrollment portal.
 */
@property(nonatomic, copy, nullable) NSString *companyName;

/**
 *  Output only. The API resource name of the company. The resource name is one
 *  of the following formats:
 *  * `partners/[PARTNER_ID]/customers/[CUSTOMER_ID]`
 *  * `partners/[PARTNER_ID]/vendors/[VENDOR_ID]`
 *  * `partners/[PARTNER_ID]/vendors/[VENDOR_ID]/customers/[CUSTOMER_ID]`
 *  Assigned by the server.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Input only. Email address of customer's users in the owner role. At least
 *  one `owner_email` is required. Each email address must be associated with a
 *  Google Account. Owners share the same access as admins but can also add,
 *  delete, and edit your organization's portal users.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ownerEmails;

/**
 *  Output only. Whether any user from the company has accepted the latest
 *  Terms of Service (ToS). See
 *  TermsStatus.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidProvisioningPartner_Company_TermsStatus_TermsStatusAccepted
 *        One (or more) of the company's users has accepted the ToS. (Value:
 *        "TERMS_STATUS_ACCEPTED")
 *    @arg @c kGTLRAndroidProvisioningPartner_Company_TermsStatus_TermsStatusNotAccepted
 *        None of the company's users have accepted the ToS. (Value:
 *        "TERMS_STATUS_NOT_ACCEPTED")
 *    @arg @c kGTLRAndroidProvisioningPartner_Company_TermsStatus_TermsStatusStale
 *        None of the company's users has accepted the current ToS but at least
 *        one
 *        user accepted a previous ToS. (Value: "TERMS_STATUS_STALE")
 *    @arg @c kGTLRAndroidProvisioningPartner_Company_TermsStatus_TermsStatusUnspecified
 *        Default value. This value should never be set if the enum is present.
 *        (Value: "TERMS_STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *termsStatus;

@end


/**
 *  A configuration collects the provisioning options for Android devices. Each
 *  configuration combines the following:
 *  * The EMM device policy controller (DPC) installed on the devices.
 *  * EMM policies enforced on the devices.
 *  * Metadata displayed on the device to help users during setup.
 *  Customers can add as many configurations as they need. However, zero-touch
 *  enrollment works best when a customer sets a default configuration that's
 *  applied to any new devices the organization purchases.
 */
@interface GTLRAndroidProvisioningPartner_Configuration : GTLRObject

/**
 *  Required. The name of the organization. Zero-touch enrollment shows this
 *  organization name to device users during device provisioning.
 */
@property(nonatomic, copy, nullable) NSString *companyName;

/**
 *  Output only. The ID of the configuration. Assigned by the server.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *configurationId;

/**
 *  Required. A short name that describes the configuration's purpose. For
 *  example, _Sales team_ or _Temporary employees_. The zero-touch enrollment
 *  portal displays this name to IT admins.
 */
@property(nonatomic, copy, nullable) NSString *configurationName;

/**
 *  Required. The email address that device users can contact to get help.
 *  Zero-touch enrollment shows this email address to device users before
 *  device provisioning. The value is validated on input.
 */
@property(nonatomic, copy, nullable) NSString *contactEmail;

/**
 *  Required. The telephone number that device users can call, using another
 *  device, to get help. Zero-touch enrollment shows this number to device
 *  users before device provisioning. Accepts numerals, spaces, the plus sign,
 *  hyphens, and parentheses.
 */
@property(nonatomic, copy, nullable) NSString *contactPhone;

/**
 *  A message, containing one or two sentences, to help device users get help
 *  or give them more details about what’s happening to their device.
 *  Zero-touch enrollment shows this message before the device is provisioned.
 */
@property(nonatomic, copy, nullable) NSString *customMessage;

/** The JSON-formatted EMM provisioning extras that are passed to the DPC. */
@property(nonatomic, copy, nullable) NSString *dpcExtras;

/**
 *  Required. The resource name of the selected DPC (device policy controller)
 *  in the format `customers/[CUSTOMER_ID]/dpcs/ *`. To list the supported DPCs,
 *  call
 *  `customers.dpcs.list`.
 */
@property(nonatomic, copy, nullable) NSString *dpcResourcePath;

/**
 *  Required. Whether this is the default configuration that zero-touch
 *  enrollment applies to any new devices the organization purchases in the
 *  future. Only one customer configuration can be the default. Setting this
 *  value to `true`, changes the previous default configuration's `isDefault`
 *  value to `false`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDefault;

/**
 *  Output only. The API resource name in the format
 *  `customers/[CUSTOMER_ID]/configurations/[CONFIGURATION_ID]`. Assigned by
 *  the server.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Request message to create a customer.
 */
@interface GTLRAndroidProvisioningPartner_CreateCustomerRequest : GTLRObject

/**
 *  Required. The company data to populate the new customer. Must contain a
 *  value for `companyName` and at least one `owner_email` that's associated
 *  with a Google Account. The values for `companyId` and `name` must be empty.
 */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_Company *customer;

@end


/**
 *  Request message for customer to assign a configuration to device.
 */
@interface GTLRAndroidProvisioningPartner_CustomerApplyConfigurationRequest : GTLRObject

/**
 *  Required. The configuration applied to the device in the format
 *  `customers/[CUSTOMER_ID]/configurations/[CONFIGURATION_ID]`.
 */
@property(nonatomic, copy, nullable) NSString *configuration;

/** Required. The device the configuration is applied to. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceReference *device;

@end


/**
 *  Response message of customer's listing configuration.
 */
@interface GTLRAndroidProvisioningPartner_CustomerListConfigurationsResponse : GTLRObject

/** The configurations. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidProvisioningPartner_Configuration *> *configurations;

@end


/**
 *  Response message for listing my customers.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "customers" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAndroidProvisioningPartner_CustomerListCustomersResponse : GTLRCollectionObject

/**
 *  The customer accounts the calling user is a member of.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidProvisioningPartner_Company *> *customers;

/**
 *  A token used to access the next page of results. Omitted if no further
 *  results are available.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message of customer's liting devices.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "devices" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAndroidProvisioningPartner_CustomerListDevicesResponse : GTLRCollectionObject

/**
 *  The customer's devices.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidProvisioningPartner_Device *> *devices;

/**
 *  A token used to access the next page of results. Omitted if no further
 *  results are available.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message of customer's listing DPCs.
 */
@interface GTLRAndroidProvisioningPartner_CustomerListDpcsResponse : GTLRObject

/**
 *  The list of DPCs available to the customer that support zero-touch
 *  enrollment.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidProvisioningPartner_Dpc *> *dpcs;

@end


/**
 *  Request message for customer to remove the configuration from device.
 */
@interface GTLRAndroidProvisioningPartner_CustomerRemoveConfigurationRequest : GTLRObject

/** Required. The device to remove the configuration from. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceReference *device;

@end


/**
 *  Request message for customer to unclaim a device.
 */
@interface GTLRAndroidProvisioningPartner_CustomerUnclaimDeviceRequest : GTLRObject

/** Required. The device to unclaim. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceReference *device;

@end


/**
 *  An Android device registered for zero-touch enrollment.
 */
@interface GTLRAndroidProvisioningPartner_Device : GTLRObject

/**
 *  Output only. The provisioning claims for a device. Devices claimed for
 *  zero-touch enrollment have a claim with the type `SECTION_TYPE_ZERO_TOUCH`.
 *  Call
 *  `partners.devices.unclaim`
 *  or
 *  `partners.devices.unclaimAsync`
 *  to remove the device from zero-touch enrollment.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidProvisioningPartner_DeviceClaim *> *claims;

/** Not available to resellers. */
@property(nonatomic, copy, nullable) NSString *configuration;

/**
 *  Output only. The ID of the device. Assigned by the server.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deviceId;

/**
 *  The hardware IDs that identify a manufactured device. To learn more, read
 *  [Identifiers](/zero-touch/guides/identifiers).
 */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceIdentifier *deviceIdentifier;

/**
 *  The metadata attached to the device. Structured as key-value pairs. To
 *  learn more, read [Device metadata](/zero-touch/guides/metadata).
 */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceMetadata *deviceMetadata;

/**
 *  Output only. The API resource name in the format
 *  `partners/[PARTNER_ID]/devices/[DEVICE_ID]`. Assigned by the server.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A record of a device claimed by a reseller for a customer. Devices claimed
 *  for zero-touch enrollment have a claim with the type
 *  `SECTION_TYPE_ZERO_TOUCH`. To learn more, read
 *  [Claim devices for customers](/zero-touch/guides/how-it-works#claim).
 */
@interface GTLRAndroidProvisioningPartner_DeviceClaim : GTLRObject

/**
 *  The ID of the Customer that purchased the device.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ownerCompanyId;

/**
 *  The ID of the reseller that claimed the device.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resellerId;

/**
 *  Output only. The type of claim made on the device.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidProvisioningPartner_DeviceClaim_SectionType_SectionTypeSimLock
 *        SIM-lock section type. (Value: "SECTION_TYPE_SIM_LOCK")
 *    @arg @c kGTLRAndroidProvisioningPartner_DeviceClaim_SectionType_SectionTypeUnspecified
 *        Unspecified section type. (Value: "SECTION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRAndroidProvisioningPartner_DeviceClaim_SectionType_SectionTypeZeroTouch
 *        Zero-touch enrollment section type. (Value: "SECTION_TYPE_ZERO_TOUCH")
 */
@property(nonatomic, copy, nullable) NSString *sectionType;

@end


/**
 *  Encapsulates hardware and product IDs to identify a manufactured device.
 *  To understand requirements on identifier sets, read
 *  [Identifiers](/zero-touch/guides/identifiers).
 */
@interface GTLRAndroidProvisioningPartner_DeviceIdentifier : GTLRObject

/** The device’s IMEI number. Validated on input. */
@property(nonatomic, copy, nullable) NSString *imei;

/**
 *  The device manufacturer’s name. Matches the device's built-in
 *  value returned from `android.os.Build.MANUFACTURER`. Allowed values are
 *  listed in
 *  [manufacturers](/zero-touch/resources/manufacturer-names#manufacturers-names).
 */
@property(nonatomic, copy, nullable) NSString *manufacturer;

/** The device’s MEID number. */
@property(nonatomic, copy, nullable) NSString *meid;

/**
 *  The device model's name. Matches the device's built-in value returned from
 *  `android.os.Build.MODEL`. Allowed values are listed in
 *  [models](/zero-touch/resources/manufacturer-names#model-names).
 */
@property(nonatomic, copy, nullable) NSString *model;

/**
 *  The manufacturer's serial number for the device. This value might not be
 *  unique across different device models.
 */
@property(nonatomic, copy, nullable) NSString *serialNumber;

@end


/**
 *  Metadata entries that can be attached to a `Device`. To learn more, read
 *  [Device metadata](/zero-touch/guides/metadata).
 */
@interface GTLRAndroidProvisioningPartner_DeviceMetadata : GTLRObject

/** Metadata entries recorded as key-value pairs. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceMetadata_Entries *entries;

@end


/**
 *  Metadata entries recorded as key-value pairs.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRAndroidProvisioningPartner_DeviceMetadata_Entries : GTLRObject
@end


/**
 *  A `DeviceReference` is an API abstraction that lets you supply a _device_
 *  argument to a method using one of the following identifier types:
 *  * A numeric API resource ID.
 *  * Real-world hardware IDs, such as IMEI number, belonging to the
 *  manufactured
 *  device.
 *  Methods that operate on devices take a `DeviceReference` as a parameter type
 *  because it's more flexible for the caller. To learn more about device
 *  identifiers, read [Identifiers](/zero-touch/guides/identifiers).
 */
@interface GTLRAndroidProvisioningPartner_DeviceReference : GTLRObject

/**
 *  The ID of the device.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deviceId;

/** The hardware IDs of the device. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceIdentifier *deviceIdentifier;

@end


/**
 *  Tracks the status of a long-running operation to asynchronously update a
 *  batch of reseller metadata attached to devices. To learn more, read
 *  [Long‑running batch operations](/zero-touch/guides/how-it-works#operations).
 */
@interface GTLRAndroidProvisioningPartner_DevicesLongRunningOperationMetadata : GTLRObject

/**
 *  The number of metadata updates in the operation. This might be different
 *  from the number of updates in the request if the API can't parse some of
 *  the updates.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *devicesCount;

/**
 *  The processing status of the operation.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidProvisioningPartner_DevicesLongRunningOperationMetadata_ProcessingStatus_BatchProcessInProgress
 *        In progress. (Value: "BATCH_PROCESS_IN_PROGRESS")
 *    @arg @c kGTLRAndroidProvisioningPartner_DevicesLongRunningOperationMetadata_ProcessingStatus_BatchProcessPending
 *        Pending. (Value: "BATCH_PROCESS_PENDING")
 *    @arg @c kGTLRAndroidProvisioningPartner_DevicesLongRunningOperationMetadata_ProcessingStatus_BatchProcessProcessed
 *        Processed.
 *        This doesn't mean all items were processed successfully, you should
 *        check the `response` field for the result of every item. (Value:
 *        "BATCH_PROCESS_PROCESSED")
 *    @arg @c kGTLRAndroidProvisioningPartner_DevicesLongRunningOperationMetadata_ProcessingStatus_BatchProcessStatusUnspecified
 *        Invalid code. Shouldn't be used. (Value:
 *        "BATCH_PROCESS_STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *processingStatus;

/**
 *  The processing progress of the operation. Measured as a number from 0 to
 *  100. A value of 10O doesnt always mean the operation completed—check for
 *  the inclusion of a `done` field.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *progress;

@end


/**
 *  Tracks the status of a long-running operation to claim, unclaim, or attach
 *  metadata to devices. To learn more, read
 *  [Long‑running batch operations](/zero-touch/guides/how-it-works#operations).
 */
@interface GTLRAndroidProvisioningPartner_DevicesLongRunningOperationResponse : GTLRObject

/**
 *  The processing status for each device in the operation.
 *  One `PerDeviceStatus` per device. The list order matches the items in the
 *  original request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidProvisioningPartner_OperationPerDevice *> *perDeviceStatus;

/**
 *  A summary of how many items in the operation the server processed
 *  successfully. Updated as the operation progresses.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *successCount;

@end


/**
 *  An EMM's DPC ([device policy
 *  controller](http://developer.android.com/work/dpc/build-dpc.html)).
 *  Zero-touch enrollment installs a DPC (listed in the `Configuration`) on a
 *  device to maintain the customer's mobile policies. All the DPCs listed by
 *  the
 *  API support zero-touch enrollment and are available in Google Play.
 */
@interface GTLRAndroidProvisioningPartner_Dpc : GTLRObject

/**
 *  Output only. The title of the DPC app in Google Play. For example, _Google
 *  Apps Device Policy_. Useful in an application's user interface.
 */
@property(nonatomic, copy, nullable) NSString *dpcName;

/**
 *  Output only. The API resource name in the format
 *  `customers/[CUSTOMER_ID]/dpcs/[DPC_ID]`. Assigned by
 *  the server. To maintain a reference to a DPC across customer accounts,
 *  persist and match the last path component (`DPC_ID`).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The DPC's Android application ID that looks like a Java
 *  package name. Zero-touch enrollment installs the DPC app onto a device
 *  using this identifier.
 */
@property(nonatomic, copy, nullable) NSString *packageName;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRAndroidProvisioningPartner_Empty : GTLRObject
@end


/**
 *  Request to find devices.
 */
@interface GTLRAndroidProvisioningPartner_FindDevicesByDeviceIdentifierRequest : GTLRObject

/** Required. The device identifier to search for. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceIdentifier *deviceIdentifier;

/**
 *  Required. The maximum number of devices to show in a page of results. Must
 *  be between 1 and 100 inclusive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *limit;

/** A token specifying which result page to return. */
@property(nonatomic, copy, nullable) NSString *pageToken;

@end


/**
 *  Response containing found devices.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "devices" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAndroidProvisioningPartner_FindDevicesByDeviceIdentifierResponse : GTLRCollectionObject

/**
 *  Found devices.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidProvisioningPartner_Device *> *devices;

/**
 *  A token used to access the next page of results. Omitted if no further
 *  results are available.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The total count of items in the list irrespective of pagination.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Request to find devices by customers.
 */
@interface GTLRAndroidProvisioningPartner_FindDevicesByOwnerRequest : GTLRObject

/**
 *  Required. The list of customer IDs to search for.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *customerId;

/**
 *  Required. The maximum number of devices to show in a page of results. Must
 *  be between 1 and 100 inclusive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *limit;

/** A token specifying which result page to return. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The section type of the device's provisioning record.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidProvisioningPartner_FindDevicesByOwnerRequest_SectionType_SectionTypeSimLock
 *        SIM-lock section type. (Value: "SECTION_TYPE_SIM_LOCK")
 *    @arg @c kGTLRAndroidProvisioningPartner_FindDevicesByOwnerRequest_SectionType_SectionTypeUnspecified
 *        Unspecified section type. (Value: "SECTION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRAndroidProvisioningPartner_FindDevicesByOwnerRequest_SectionType_SectionTypeZeroTouch
 *        Zero-touch enrollment section type. (Value: "SECTION_TYPE_ZERO_TOUCH")
 */
@property(nonatomic, copy, nullable) NSString *sectionType;

@end


/**
 *  Response containing found devices.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "devices" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAndroidProvisioningPartner_FindDevicesByOwnerResponse : GTLRCollectionObject

/**
 *  The customer's devices.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidProvisioningPartner_Device *> *devices;

/**
 *  A token used to access the next page of results.
 *  Omitted if no further results are available.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The total count of items in the list irrespective of pagination.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Response message of all customers related to this partner.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "customers" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAndroidProvisioningPartner_ListCustomersResponse : GTLRCollectionObject

/**
 *  List of customers related to this reseller partner.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidProvisioningPartner_Company *> *customers;

/**
 *  A token to retrieve the next page of results. Omitted if no further results
 *  are available.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The total count of items in the list irrespective of pagination.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Response message to list customers of the vendor.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "customers" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAndroidProvisioningPartner_ListVendorCustomersResponse : GTLRCollectionObject

/**
 *  List of customers of the vendor.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidProvisioningPartner_Company *> *customers;

/**
 *  A token to retrieve the next page of results. Omitted if no further results
 *  are available.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The total count of items in the list irrespective of pagination.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Response message to list vendors of the partner.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "vendors" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAndroidProvisioningPartner_ListVendorsResponse : GTLRCollectionObject

/**
 *  A token to retrieve the next page of results. Omitted if no further results
 *  are available.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The total count of items in the list irrespective of pagination.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

/**
 *  List of vendors of the reseller partner. Fields `name`, `companyId` and
 *  `companyName` are populated to the Company object.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidProvisioningPartner_Company *> *vendors;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRAndroidProvisioningPartner_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/**
 *  This field will always be not set if the operation is created by
 *  `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`. In this case, error
 *  information for each device is set in
 *  `response.perDeviceStatus.result.status`.
 */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_Status *error;

/**
 *  This field will contain a `DevicesLongRunningOperationMetadata` object if
 *  the operation is created by `claimAsync`, `unclaimAsync`, or
 *  `updateMetadataAsync`.
 */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the
 *  `name` should have the format of `operations/some/unique/name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  This field will contain a `DevicesLongRunningOperationResponse` object if
 *  the operation is created by `claimAsync`, `unclaimAsync`, or
 *  `updateMetadataAsync`.
 */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_Operation_Response *response;

@end


/**
 *  This field will contain a `DevicesLongRunningOperationMetadata` object if
 *  the operation is created by `claimAsync`, `unclaimAsync`, or
 *  `updateMetadataAsync`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRAndroidProvisioningPartner_Operation_Metadata : GTLRObject
@end


/**
 *  This field will contain a `DevicesLongRunningOperationResponse` object if
 *  the operation is created by `claimAsync`, `unclaimAsync`, or
 *  `updateMetadataAsync`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRAndroidProvisioningPartner_Operation_Response : GTLRObject
@end


/**
 *  A task for each device in the operation. Corresponds to each device
 *  change in the request.
 */
@interface GTLRAndroidProvisioningPartner_OperationPerDevice : GTLRObject

/** A copy of the original device-claim request received by the server. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_PartnerClaim *claim;

/** The processing result for each device. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_PerDeviceStatusInBatch *result;

/** A copy of the original device-unclaim request received by the server. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_PartnerUnclaim *unclaim;

/** A copy of the original metadata-update request received by the server. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_UpdateMetadataArguments *updateMetadata;

@end


/**
 *  Identifies one claim request.
 */
@interface GTLRAndroidProvisioningPartner_PartnerClaim : GTLRObject

/**
 *  Required. The ID of the customer for whom the device is being claimed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *customerId;

/** Required. Device identifier of the device. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceIdentifier *deviceIdentifier;

/** Required. The metadata to attach to the device at claim. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceMetadata *deviceMetadata;

/**
 *  Required. The section type of the device's provisioning record.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidProvisioningPartner_PartnerClaim_SectionType_SectionTypeSimLock
 *        SIM-lock section type. (Value: "SECTION_TYPE_SIM_LOCK")
 *    @arg @c kGTLRAndroidProvisioningPartner_PartnerClaim_SectionType_SectionTypeUnspecified
 *        Unspecified section type. (Value: "SECTION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRAndroidProvisioningPartner_PartnerClaim_SectionType_SectionTypeZeroTouch
 *        Zero-touch enrollment section type. (Value: "SECTION_TYPE_ZERO_TOUCH")
 */
@property(nonatomic, copy, nullable) NSString *sectionType;

@end


/**
 *  Identifies one unclaim request.
 */
@interface GTLRAndroidProvisioningPartner_PartnerUnclaim : GTLRObject

/**
 *  Device ID of the device.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deviceId;

/** Device identifier of the device. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceIdentifier *deviceIdentifier;

/**
 *  Required. The section type of the device's provisioning record.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidProvisioningPartner_PartnerUnclaim_SectionType_SectionTypeSimLock
 *        SIM-lock section type. (Value: "SECTION_TYPE_SIM_LOCK")
 *    @arg @c kGTLRAndroidProvisioningPartner_PartnerUnclaim_SectionType_SectionTypeUnspecified
 *        Unspecified section type. (Value: "SECTION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRAndroidProvisioningPartner_PartnerUnclaim_SectionType_SectionTypeZeroTouch
 *        Zero-touch enrollment section type. (Value: "SECTION_TYPE_ZERO_TOUCH")
 */
@property(nonatomic, copy, nullable) NSString *sectionType;

@end


/**
 *  Captures the processing status for each device in the operation.
 */
@interface GTLRAndroidProvisioningPartner_PerDeviceStatusInBatch : GTLRObject

/**
 *  If processing succeeds, the device ID of the device.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deviceId;

/** If processing fails, the error type. */
@property(nonatomic, copy, nullable) NSString *errorIdentifier;

/** If processing fails, a developer message explaining what went wrong. */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/**
 *  The result status of the device after processing.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidProvisioningPartner_PerDeviceStatusInBatch_Status_SingleDeviceStatusInvalidDeviceIdentifier
 *        Invalid device identifier. (Value:
 *        "SINGLE_DEVICE_STATUS_INVALID_DEVICE_IDENTIFIER")
 *    @arg @c kGTLRAndroidProvisioningPartner_PerDeviceStatusInBatch_Status_SingleDeviceStatusInvalidSectionType
 *        Invalid section type. (Value:
 *        "SINGLE_DEVICE_STATUS_INVALID_SECTION_TYPE")
 *    @arg @c kGTLRAndroidProvisioningPartner_PerDeviceStatusInBatch_Status_SingleDeviceStatusOtherError
 *        Other error.
 *        We know/expect this error, but there's no defined error code for the
 *        error. (Value: "SINGLE_DEVICE_STATUS_OTHER_ERROR")
 *    @arg @c kGTLRAndroidProvisioningPartner_PerDeviceStatusInBatch_Status_SingleDeviceStatusPermissionDenied
 *        Permission denied. (Value: "SINGLE_DEVICE_STATUS_PERMISSION_DENIED")
 *    @arg @c kGTLRAndroidProvisioningPartner_PerDeviceStatusInBatch_Status_SingleDeviceStatusSectionNotYours
 *        This section is claimed by another company. (Value:
 *        "SINGLE_DEVICE_STATUS_SECTION_NOT_YOURS")
 *    @arg @c kGTLRAndroidProvisioningPartner_PerDeviceStatusInBatch_Status_SingleDeviceStatusSuccess
 *        Success. (Value: "SINGLE_DEVICE_STATUS_SUCCESS")
 *    @arg @c kGTLRAndroidProvisioningPartner_PerDeviceStatusInBatch_Status_SingleDeviceStatusUnknownError
 *        Unknown error.
 *        We don't expect this error to occur here. (Value:
 *        "SINGLE_DEVICE_STATUS_UNKNOWN_ERROR")
 *    @arg @c kGTLRAndroidProvisioningPartner_PerDeviceStatusInBatch_Status_SingleDeviceStatusUnspecified
 *        Invalid code. Shouldn't be used. (Value:
 *        "SINGLE_DEVICE_STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRAndroidProvisioningPartner_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidProvisioningPartner_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRAndroidProvisioningPartner_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRAndroidProvisioningPartner_Status_Details_Item : GTLRObject
@end


/**
 *  Request message to unclaim a device.
 */
@interface GTLRAndroidProvisioningPartner_UnclaimDeviceRequest : GTLRObject

/**
 *  The device ID returned by `ClaimDevice`.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deviceId;

/** The device identifier you used when you claimed this device. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceIdentifier *deviceIdentifier;

/**
 *  Required. The section type of the device's provisioning record.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidProvisioningPartner_UnclaimDeviceRequest_SectionType_SectionTypeSimLock
 *        SIM-lock section type. (Value: "SECTION_TYPE_SIM_LOCK")
 *    @arg @c kGTLRAndroidProvisioningPartner_UnclaimDeviceRequest_SectionType_SectionTypeUnspecified
 *        Unspecified section type. (Value: "SECTION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRAndroidProvisioningPartner_UnclaimDeviceRequest_SectionType_SectionTypeZeroTouch
 *        Zero-touch enrollment section type. (Value: "SECTION_TYPE_ZERO_TOUCH")
 */
@property(nonatomic, copy, nullable) NSString *sectionType;

@end


/**
 *  Request to unclaim devices asynchronously in batch.
 */
@interface GTLRAndroidProvisioningPartner_UnclaimDevicesRequest : GTLRObject

/** Required. The list of devices to unclaim. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidProvisioningPartner_PartnerUnclaim *> *unclaims;

@end


/**
 *  Request to update device metadata in batch.
 */
@interface GTLRAndroidProvisioningPartner_UpdateDeviceMetadataInBatchRequest : GTLRObject

/** Required. The list of metadata updates. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidProvisioningPartner_UpdateMetadataArguments *> *updates;

@end


/**
 *  Request to set metadata for a device.
 */
@interface GTLRAndroidProvisioningPartner_UpdateDeviceMetadataRequest : GTLRObject

/** Required. The metdata to attach to the device. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceMetadata *deviceMetadata;

@end


/**
 *  Identifies metdata updates to one device.
 */
@interface GTLRAndroidProvisioningPartner_UpdateMetadataArguments : GTLRObject

/**
 *  Device ID of the device.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deviceId;

/** Device identifier. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceIdentifier *deviceIdentifier;

/** Required. The metadata to update. */
@property(nonatomic, strong, nullable) GTLRAndroidProvisioningPartner_DeviceMetadata *deviceMetadata;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
