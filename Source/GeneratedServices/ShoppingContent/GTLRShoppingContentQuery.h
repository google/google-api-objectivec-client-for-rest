// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Content API for Shopping (content/v2)
// Description:
//   Manages product items, inventory, and Merchant Center accounts for Google
//   Shopping.
// Documentation:
//   https://developers.google.com/shopping-content

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRShoppingContent_Account;
@class GTLRShoppingContent_AccountsCustomBatchRequest;
@class GTLRShoppingContent_AccountstatusesCustomBatchRequest;
@class GTLRShoppingContent_AccountTax;
@class GTLRShoppingContent_AccounttaxCustomBatchRequest;
@class GTLRShoppingContent_Datafeed;
@class GTLRShoppingContent_DatafeedsCustomBatchRequest;
@class GTLRShoppingContent_DatafeedstatusesCustomBatchRequest;
@class GTLRShoppingContent_InventoryCustomBatchRequest;
@class GTLRShoppingContent_InventorySetRequest;
@class GTLRShoppingContent_OrdersAcknowledgeRequest;
@class GTLRShoppingContent_OrdersCancelLineItemRequest;
@class GTLRShoppingContent_OrdersCancelRequest;
@class GTLRShoppingContent_OrdersCreateTestOrderRequest;
@class GTLRShoppingContent_OrdersCustomBatchRequest;
@class GTLRShoppingContent_OrdersRefundRequest;
@class GTLRShoppingContent_OrdersReturnLineItemRequest;
@class GTLRShoppingContent_OrdersShipLineItemsRequest;
@class GTLRShoppingContent_OrdersUpdateMerchantOrderIdRequest;
@class GTLRShoppingContent_OrdersUpdateShipmentRequest;
@class GTLRShoppingContent_Product;
@class GTLRShoppingContent_ProductsCustomBatchRequest;
@class GTLRShoppingContent_ProductstatusesCustomBatchRequest;
@class GTLRShoppingContent_ShippingSettings;
@class GTLRShoppingContent_ShippingsettingsCustomBatchRequest;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// orderBy

/** Value: "placedDate asc" */
GTLR_EXTERN NSString * const kGTLRShoppingContentOrderByPlacedDateAsc;
/** Value: "placedDate desc" */
GTLR_EXTERN NSString * const kGTLRShoppingContentOrderByPlacedDateDesc;

// ----------------------------------------------------------------------------
// statuses

/** Value: "active" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesActive;
/** Value: "canceled" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesCanceled;
/** Value: "completed" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesCompleted;
/** Value: "delivered" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesDelivered;
/** Value: "inProgress" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesInProgress;
/** Value: "partiallyDelivered" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesPartiallyDelivered;
/** Value: "partiallyReturned" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesPartiallyReturned;
/** Value: "partiallyShipped" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesPartiallyShipped;
/** Value: "pendingShipment" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesPendingShipment;
/** Value: "returned" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesReturned;
/** Value: "shipped" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesShipped;

// ----------------------------------------------------------------------------
// templateName

/** Value: "template1" */
GTLR_EXTERN NSString * const kGTLRShoppingContentTemplateNameTemplate1;
/** Value: "template1a" */
GTLR_EXTERN NSString * const kGTLRShoppingContentTemplateNameTemplate1a;
/** Value: "template1b" */
GTLR_EXTERN NSString * const kGTLRShoppingContentTemplateNameTemplate1b;
/** Value: "template2" */
GTLR_EXTERN NSString * const kGTLRShoppingContentTemplateNameTemplate2;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Shopping Content query classes.
 */
@interface GTLRShoppingContentQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Returns information about the authenticated user.
 *
 *  Method: content.accounts.authinfo
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsAuthinfo : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsAuthinfo]

/**
 *  Fetches a @c GTLRShoppingContent_AccountsAuthInfoResponse.
 *
 *  Returns information about the authenticated user.
 *
 *  @returns GTLRShoppingContentQuery_AccountsAuthinfo
 */
+ (instancetype)query;

@end

/**
 *  Claims the website of a Merchant Center sub-account. This method can only be
 *  called for accounts to which the managing account has access: either the
 *  managing account itself or sub-accounts if the managing account is a
 *  multi-client account.
 *
 *  Method: content.accounts.claimwebsite
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsClaimwebsite : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsClaimwebsiteWithmerchantId:accountId:]

/** The ID of the account whose website is claimed. */
@property(nonatomic, assign) unsigned long long accountId;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Flag to remove any existing claim on the requested website by another
 *  account and replace it with a claim from this account.
 */
@property(nonatomic, assign) BOOL overwrite;

/**
 *  Fetches a @c GTLRShoppingContent_AccountsClaimWebsiteResponse.
 *
 *  Claims the website of a Merchant Center sub-account. This method can only be
 *  called for accounts to which the managing account has access: either the
 *  managing account itself or sub-accounts if the managing account is a
 *  multi-client account.
 *
 *  @param merchantId The ID of the managing account.
 *  @param accountId The ID of the account whose website is claimed.
 *
 *  @returns GTLRShoppingContentQuery_AccountsClaimwebsite
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves, inserts, updates, and deletes multiple Merchant Center
 *  (sub-)accounts in a single request.
 *
 *  Method: content.accounts.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsCustombatchWithObject:]

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/**
 *  Fetches a @c GTLRShoppingContent_AccountsCustomBatchResponse.
 *
 *  Retrieves, inserts, updates, and deletes multiple Merchant Center
 *  (sub-)accounts in a single request.
 *
 *  @param object The @c GTLRShoppingContent_AccountsCustomBatchRequest to
 *    include in the query.
 *
 *  @returns GTLRShoppingContentQuery_AccountsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountsCustomBatchRequest *)object;

@end

/**
 *  Deletes a Merchant Center sub-account. This method can only be called for
 *  multi-client accounts.
 *
 *  Method: content.accounts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsDelete : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsDeleteWithmerchantId:accountId:]

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a Merchant Center sub-account. This method can only be called for
 *  multi-client accounts.
 *
 *  @param merchantId The ID of the managing account.
 *  @param accountId The ID of the account.
 *
 *  @returns GTLRShoppingContentQuery_AccountsDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves a Merchant Center account. This method can only be called for
 *  accounts to which the managing account has access: either the managing
 *  account itself or sub-accounts if the managing account is a multi-client
 *  account.
 *
 *  Method: content.accounts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsGetWithmerchantId:accountId:]

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Account.
 *
 *  Retrieves a Merchant Center account. This method can only be called for
 *  accounts to which the managing account has access: either the managing
 *  account itself or sub-accounts if the managing account is a multi-client
 *  account.
 *
 *  @param merchantId The ID of the managing account.
 *  @param accountId The ID of the account.
 *
 *  @returns GTLRShoppingContentQuery_AccountsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Creates a Merchant Center sub-account. This method can only be called for
 *  multi-client accounts.
 *
 *  Method: content.accounts.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsInsert : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsInsertWithObject:merchantId:]

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Account.
 *
 *  Creates a Merchant Center sub-account. This method can only be called for
 *  multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_Account to include in the query.
 *  @param merchantId The ID of the managing account.
 *
 *  @returns GTLRShoppingContentQuery_AccountsInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Account *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the sub-accounts in your Merchant Center account. This method can only
 *  be called for multi-client accounts.
 *
 *  Method: content.accounts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsListWithmerchantId:]

/**
 *  The maximum number of accounts to return in the response, used for paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_AccountsListResponse.
 *
 *  Lists the sub-accounts in your Merchant Center account. This method can only
 *  be called for multi-client accounts.
 *
 *  @param merchantId The ID of the managing account.
 *
 *  @returns GTLRShoppingContentQuery_AccountsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates a Merchant Center account. This method can only be called for
 *  accounts to which the managing account has access: either the managing
 *  account itself or sub-accounts if the managing account is a multi-client
 *  account. This method supports patch semantics.
 *
 *  Method: content.accounts.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsPatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsPatchWithObject:merchantId:accountId:]

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Account.
 *
 *  Updates a Merchant Center account. This method can only be called for
 *  accounts to which the managing account has access: either the managing
 *  account itself or sub-accounts if the managing account is a multi-client
 *  account. This method supports patch semantics.
 *
 *  @param object The @c GTLRShoppingContent_Account to include in the query.
 *  @param merchantId The ID of the managing account.
 *  @param accountId The ID of the account.
 *
 *  @returns GTLRShoppingContentQuery_AccountsPatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Account *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  GTLRShoppingContentQuery_AccountstatusesCustombatch
 *
 *  Method: content.accountstatuses.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountstatusesCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountstatusesCustombatchWithObject:]

/**
 *  Fetches a @c GTLRShoppingContent_AccountstatusesCustomBatchResponse.
 *
 *  @param object The @c GTLRShoppingContent_AccountstatusesCustomBatchRequest
 *    to include in the query.
 *
 *  @returns GTLRShoppingContentQuery_AccountstatusesCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountstatusesCustomBatchRequest *)object;

@end

/**
 *  Retrieves the status of a Merchant Center account. This method can only be
 *  called for accounts to which the managing account has access: either the
 *  managing account itself or sub-accounts if the managing account is a
 *  multi-client account.
 *
 *  Method: content.accountstatuses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountstatusesGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountstatusesGetWithmerchantId:accountId:]

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountStatus.
 *
 *  Retrieves the status of a Merchant Center account. This method can only be
 *  called for accounts to which the managing account has access: either the
 *  managing account itself or sub-accounts if the managing account is a
 *  multi-client account.
 *
 *  @param merchantId The ID of the managing account.
 *  @param accountId The ID of the account.
 *
 *  @returns GTLRShoppingContentQuery_AccountstatusesGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Lists the statuses of the sub-accounts in your Merchant Center account. This
 *  method can only be called for multi-client accounts.
 *
 *  Method: content.accountstatuses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountstatusesList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountstatusesListWithmerchantId:]

/**
 *  The maximum number of account statuses to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_AccountstatusesListResponse.
 *
 *  Lists the statuses of the sub-accounts in your Merchant Center account. This
 *  method can only be called for multi-client accounts.
 *
 *  @param merchantId The ID of the managing account.
 *
 *  @returns GTLRShoppingContentQuery_AccountstatusesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates a Merchant Center account. This method can only be called for
 *  accounts to which the managing account has access: either the managing
 *  account itself or sub-accounts if the managing account is a multi-client
 *  account.
 *
 *  Method: content.accounts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsUpdate : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsUpdateWithObject:merchantId:accountId:]

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Account.
 *
 *  Updates a Merchant Center account. This method can only be called for
 *  accounts to which the managing account has access: either the managing
 *  account itself or sub-accounts if the managing account is a multi-client
 *  account.
 *
 *  @param object The @c GTLRShoppingContent_Account to include in the query.
 *  @param merchantId The ID of the managing account.
 *  @param accountId The ID of the account.
 *
 *  @returns GTLRShoppingContentQuery_AccountsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Account *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves and updates tax settings of multiple accounts in a single request.
 *
 *  Method: content.accounttax.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccounttaxCustombatchWithObject:]

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/**
 *  Fetches a @c GTLRShoppingContent_AccounttaxCustomBatchResponse.
 *
 *  Retrieves and updates tax settings of multiple accounts in a single request.
 *
 *  @param object The @c GTLRShoppingContent_AccounttaxCustomBatchRequest to
 *    include in the query.
 *
 *  @returns GTLRShoppingContentQuery_AccounttaxCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccounttaxCustomBatchRequest *)object;

@end

/**
 *  Retrieves the tax settings of the account. This method can only be called
 *  for accounts to which the managing account has access: either the managing
 *  account itself or sub-accounts if the managing account is a multi-client
 *  account.
 *
 *  Method: content.accounttax.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccounttaxGetWithmerchantId:accountId:]

/** The ID of the account for which to get/update account tax settings. */
@property(nonatomic, assign) unsigned long long accountId;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountTax.
 *
 *  Retrieves the tax settings of the account. This method can only be called
 *  for accounts to which the managing account has access: either the managing
 *  account itself or sub-accounts if the managing account is a multi-client
 *  account.
 *
 *  @param merchantId The ID of the managing account.
 *  @param accountId The ID of the account for which to get/update account tax
 *    settings.
 *
 *  @returns GTLRShoppingContentQuery_AccounttaxGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Lists the tax settings of the sub-accounts in your Merchant Center account.
 *  This method can only be called for multi-client accounts.
 *
 *  Method: content.accounttax.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccounttaxListWithmerchantId:]

/**
 *  The maximum number of tax settings to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_AccounttaxListResponse.
 *
 *  Lists the tax settings of the sub-accounts in your Merchant Center account.
 *  This method can only be called for multi-client accounts.
 *
 *  @param merchantId The ID of the managing account.
 *
 *  @returns GTLRShoppingContentQuery_AccounttaxList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates the tax settings of the account. This method can only be called for
 *  accounts to which the managing account has access: either the managing
 *  account itself or sub-accounts if the managing account is a multi-client
 *  account. This method supports patch semantics.
 *
 *  Method: content.accounttax.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxPatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccounttaxPatchWithObject:merchantId:accountId:]

/** The ID of the account for which to get/update account tax settings. */
@property(nonatomic, assign) unsigned long long accountId;

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountTax.
 *
 *  Updates the tax settings of the account. This method can only be called for
 *  accounts to which the managing account has access: either the managing
 *  account itself or sub-accounts if the managing account is a multi-client
 *  account. This method supports patch semantics.
 *
 *  @param object The @c GTLRShoppingContent_AccountTax to include in the query.
 *  @param merchantId The ID of the managing account.
 *  @param accountId The ID of the account for which to get/update account tax
 *    settings.
 *
 *  @returns GTLRShoppingContentQuery_AccounttaxPatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountTax *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Updates the tax settings of the account. This method can only be called for
 *  accounts to which the managing account has access: either the managing
 *  account itself or sub-accounts if the managing account is a multi-client
 *  account.
 *
 *  Method: content.accounttax.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxUpdate : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccounttaxUpdateWithObject:merchantId:accountId:]

/** The ID of the account for which to get/update account tax settings. */
@property(nonatomic, assign) unsigned long long accountId;

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountTax.
 *
 *  Updates the tax settings of the account. This method can only be called for
 *  accounts to which the managing account has access: either the managing
 *  account itself or sub-accounts if the managing account is a multi-client
 *  account.
 *
 *  @param object The @c GTLRShoppingContent_AccountTax to include in the query.
 *  @param merchantId The ID of the managing account.
 *  @param accountId The ID of the account for which to get/update account tax
 *    settings.
 *
 *  @returns GTLRShoppingContentQuery_AccounttaxUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountTax *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  GTLRShoppingContentQuery_DatafeedsCustombatch
 *
 *  Method: content.datafeeds.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedsCustombatchWithObject:]

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedsCustomBatchResponse.
 *
 *  @param object The @c GTLRShoppingContent_DatafeedsCustomBatchRequest to
 *    include in the query.
 *
 *  @returns GTLRShoppingContentQuery_DatafeedsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_DatafeedsCustomBatchRequest *)object;

@end

/**
 *  Deletes a datafeed configuration from your Merchant Center account. This
 *  method can only be called for non-multi-client accounts.
 *
 *  Method: content.datafeeds.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsDelete : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedsDeleteWithmerchantId:datafeedId:]

@property(nonatomic, assign) unsigned long long datafeedId;

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a datafeed configuration from your Merchant Center account. This
 *  method can only be called for non-multi-client accounts.
 *
 *  @param merchantId unsigned long long
 *  @param datafeedId unsigned long long
 *
 *  @returns GTLRShoppingContentQuery_DatafeedsDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Retrieves a datafeed configuration from your Merchant Center account. This
 *  method can only be called for non-multi-client accounts.
 *
 *  Method: content.datafeeds.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedsGetWithmerchantId:datafeedId:]

@property(nonatomic, assign) unsigned long long datafeedId;

@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Datafeed.
 *
 *  Retrieves a datafeed configuration from your Merchant Center account. This
 *  method can only be called for non-multi-client accounts.
 *
 *  @param merchantId unsigned long long
 *  @param datafeedId unsigned long long
 *
 *  @returns GTLRShoppingContentQuery_DatafeedsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Registers a datafeed configuration with your Merchant Center account. This
 *  method can only be called for non-multi-client accounts.
 *
 *  Method: content.datafeeds.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsInsert : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedsInsertWithObject:merchantId:]

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Datafeed.
 *
 *  Registers a datafeed configuration with your Merchant Center account. This
 *  method can only be called for non-multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_Datafeed to include in the query.
 *  @param merchantId unsigned long long
 *
 *  @returns GTLRShoppingContentQuery_DatafeedsInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Datafeed *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the datafeeds in your Merchant Center account. This method can only be
 *  called for non-multi-client accounts.
 *
 *  Method: content.datafeeds.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedsListWithmerchantId:]

/**
 *  The maximum number of products to return in the response, used for paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedsListResponse.
 *
 *  Lists the datafeeds in your Merchant Center account. This method can only be
 *  called for non-multi-client accounts.
 *
 *  @param merchantId The ID of the managing account.
 *
 *  @returns GTLRShoppingContentQuery_DatafeedsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates a datafeed configuration of your Merchant Center account. This
 *  method can only be called for non-multi-client accounts. This method
 *  supports patch semantics.
 *
 *  Method: content.datafeeds.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsPatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedsPatchWithObject:merchantId:datafeedId:]

@property(nonatomic, assign) unsigned long long datafeedId;

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Datafeed.
 *
 *  Updates a datafeed configuration of your Merchant Center account. This
 *  method can only be called for non-multi-client accounts. This method
 *  supports patch semantics.
 *
 *  @param object The @c GTLRShoppingContent_Datafeed to include in the query.
 *  @param merchantId unsigned long long
 *  @param datafeedId unsigned long long
 *
 *  @returns GTLRShoppingContentQuery_DatafeedsPatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Datafeed *)object
                     merchantId:(unsigned long long)merchantId
                     datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  GTLRShoppingContentQuery_DatafeedstatusesCustombatch
 *
 *  Method: content.datafeedstatuses.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedstatusesCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedstatusesCustombatchWithObject:]

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedstatusesCustomBatchResponse.
 *
 *  @param object The @c GTLRShoppingContent_DatafeedstatusesCustomBatchRequest
 *    to include in the query.
 *
 *  @returns GTLRShoppingContentQuery_DatafeedstatusesCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_DatafeedstatusesCustomBatchRequest *)object;

@end

/**
 *  Retrieves the status of a datafeed from your Merchant Center account. This
 *  method can only be called for non-multi-client accounts.
 *
 *  Method: content.datafeedstatuses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedstatusesGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedstatusesGetWithmerchantId:datafeedId:]

@property(nonatomic, assign) unsigned long long datafeedId;

@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedStatus.
 *
 *  Retrieves the status of a datafeed from your Merchant Center account. This
 *  method can only be called for non-multi-client accounts.
 *
 *  @param merchantId unsigned long long
 *  @param datafeedId unsigned long long
 *
 *  @returns GTLRShoppingContentQuery_DatafeedstatusesGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Lists the statuses of the datafeeds in your Merchant Center account. This
 *  method can only be called for non-multi-client accounts.
 *
 *  Method: content.datafeedstatuses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedstatusesList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedstatusesListWithmerchantId:]

/**
 *  The maximum number of products to return in the response, used for paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedstatusesListResponse.
 *
 *  Lists the statuses of the datafeeds in your Merchant Center account. This
 *  method can only be called for non-multi-client accounts.
 *
 *  @param merchantId The ID of the managing account.
 *
 *  @returns GTLRShoppingContentQuery_DatafeedstatusesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates a datafeed configuration of your Merchant Center account. This
 *  method can only be called for non-multi-client accounts.
 *
 *  Method: content.datafeeds.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsUpdate : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedsUpdateWithObject:merchantId:datafeedId:]

@property(nonatomic, assign) unsigned long long datafeedId;

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Datafeed.
 *
 *  Updates a datafeed configuration of your Merchant Center account. This
 *  method can only be called for non-multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_Datafeed to include in the query.
 *  @param merchantId unsigned long long
 *  @param datafeedId unsigned long long
 *
 *  @returns GTLRShoppingContentQuery_DatafeedsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Datafeed *)object
                     merchantId:(unsigned long long)merchantId
                     datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Updates price and availability for multiple products or stores in a single
 *  request. This operation does not update the expiration date of the products.
 *  This method can only be called for non-multi-client accounts.
 *
 *  Method: content.inventory.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_InventoryCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForInventoryCustombatchWithObject:]

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/**
 *  Fetches a @c GTLRShoppingContent_InventoryCustomBatchResponse.
 *
 *  Updates price and availability for multiple products or stores in a single
 *  request. This operation does not update the expiration date of the products.
 *  This method can only be called for non-multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_InventoryCustomBatchRequest to
 *    include in the query.
 *
 *  @returns GTLRShoppingContentQuery_InventoryCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_InventoryCustomBatchRequest *)object;

@end

/**
 *  Updates price and availability of a product in your Merchant Center account.
 *  This operation does not update the expiration date of the product. This
 *  method can only be called for non-multi-client accounts.
 *
 *  Method: content.inventory.set
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_InventorySet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForInventorySetWithObject:merchantId:storeCode:productId:]

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the product for which to update price and availability. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  The code of the store for which to update price and availability. Use online
 *  to update price and availability of an online product.
 */
@property(nonatomic, copy, nullable) NSString *storeCode;

/**
 *  Fetches a @c GTLRShoppingContent_InventorySetResponse.
 *
 *  Updates price and availability of a product in your Merchant Center account.
 *  This operation does not update the expiration date of the product. This
 *  method can only be called for non-multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_InventorySetRequest to include in
 *    the query.
 *  @param merchantId The ID of the managing account.
 *  @param storeCode The code of the store for which to update price and
 *    availability. Use online to update price and availability of an online
 *    product.
 *  @param productId The ID of the product for which to update price and
 *    availability.
 *
 *  @returns GTLRShoppingContentQuery_InventorySet
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_InventorySetRequest *)object
                     merchantId:(unsigned long long)merchantId
                      storeCode:(NSString *)storeCode
                      productId:(NSString *)productId;

@end

/**
 *  Marks an order as acknowledged. This method can only be called for
 *  non-multi-client accounts.
 *
 *  Method: content.orders.acknowledge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersAcknowledge : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersAcknowledgeWithObject:merchantId:orderId:]

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersAcknowledgeResponse.
 *
 *  Marks an order as acknowledged. This method can only be called for
 *  non-multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_OrdersAcknowledgeRequest to include
 *    in the query.
 *  @param merchantId The ID of the managing account.
 *  @param orderId The ID of the order.
 *
 *  @returns GTLRShoppingContentQuery_OrdersAcknowledge
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersAcknowledgeRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Sandbox only. Moves a test order from state "inProgress" to state
 *  "pendingShipment". This method can only be called for non-multi-client
 *  accounts.
 *
 *  Method: content.orders.advancetestorder
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersAdvancetestorder : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersAdvancetestorderWithmerchantId:orderId:]

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the test order to modify. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersAdvanceTestOrderResponse.
 *
 *  Sandbox only. Moves a test order from state "inProgress" to state
 *  "pendingShipment". This method can only be called for non-multi-client
 *  accounts.
 *
 *  @param merchantId The ID of the managing account.
 *  @param orderId The ID of the test order to modify.
 *
 *  @returns GTLRShoppingContentQuery_OrdersAdvancetestorder
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                            orderId:(NSString *)orderId;

@end

/**
 *  Cancels all line items in an order, making a full refund. This method can
 *  only be called for non-multi-client accounts.
 *
 *  Method: content.orders.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersCancel : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersCancelWithObject:merchantId:orderId:]

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order to cancel. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersCancelResponse.
 *
 *  Cancels all line items in an order, making a full refund. This method can
 *  only be called for non-multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_OrdersCancelRequest to include in
 *    the query.
 *  @param merchantId The ID of the managing account.
 *  @param orderId The ID of the order to cancel.
 *
 *  @returns GTLRShoppingContentQuery_OrdersCancel
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCancelRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Cancels a line item, making a full refund. This method can only be called
 *  for non-multi-client accounts.
 *
 *  Method: content.orders.cancellineitem
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersCancellineitem : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersCancellineitemWithObject:merchantId:orderId:]

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersCancelLineItemResponse.
 *
 *  Cancels a line item, making a full refund. This method can only be called
 *  for non-multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_OrdersCancelLineItemRequest to
 *    include in the query.
 *  @param merchantId The ID of the managing account.
 *  @param orderId The ID of the order.
 *
 *  @returns GTLRShoppingContentQuery_OrdersCancellineitem
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCancelLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Sandbox only. Creates a test order. This method can only be called for
 *  non-multi-client accounts.
 *
 *  Method: content.orders.createtestorder
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersCreatetestorder : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersCreatetestorderWithObject:merchantId:]

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersCreateTestOrderResponse.
 *
 *  Sandbox only. Creates a test order. This method can only be called for
 *  non-multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_OrdersCreateTestOrderRequest to
 *    include in the query.
 *  @param merchantId The ID of the managing account.
 *
 *  @returns GTLRShoppingContentQuery_OrdersCreatetestorder
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCreateTestOrderRequest *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Retrieves or modifies multiple orders in a single request. This method can
 *  only be called for non-multi-client accounts.
 *
 *  Method: content.orders.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersCustombatchWithObject:]

/**
 *  Fetches a @c GTLRShoppingContent_OrdersCustomBatchResponse.
 *
 *  Retrieves or modifies multiple orders in a single request. This method can
 *  only be called for non-multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_OrdersCustomBatchRequest to include
 *    in the query.
 *
 *  @returns GTLRShoppingContentQuery_OrdersCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCustomBatchRequest *)object;

@end

/**
 *  Retrieves an order from your Merchant Center account. This method can only
 *  be called for non-multi-client accounts.
 *
 *  Method: content.orders.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersGetWithmerchantId:orderId:]

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_Order.
 *
 *  Retrieves an order from your Merchant Center account. This method can only
 *  be called for non-multi-client accounts.
 *
 *  @param merchantId The ID of the managing account.
 *  @param orderId The ID of the order.
 *
 *  @returns GTLRShoppingContentQuery_OrdersGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                            orderId:(NSString *)orderId;

@end

/**
 *  Retrieves an order using merchant order id. This method can only be called
 *  for non-multi-client accounts.
 *
 *  Method: content.orders.getbymerchantorderid
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersGetbymerchantorderid : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersGetbymerchantorderidWithmerchantId:merchantOrderId:]

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The merchant order id to be looked for. */
@property(nonatomic, copy, nullable) NSString *merchantOrderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersGetByMerchantOrderIdResponse.
 *
 *  Retrieves an order using merchant order id. This method can only be called
 *  for non-multi-client accounts.
 *
 *  @param merchantId The ID of the managing account.
 *  @param merchantOrderId The merchant order id to be looked for.
 *
 *  @returns GTLRShoppingContentQuery_OrdersGetbymerchantorderid
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                    merchantOrderId:(NSString *)merchantOrderId;

@end

/**
 *  Sandbox only. Retrieves an order template that can be used to quickly create
 *  a new order in sandbox. This method can only be called for non-multi-client
 *  accounts.
 *
 *  Method: content.orders.gettestordertemplate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersGettestordertemplate : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersGettestordertemplateWithmerchantId:templateName:]

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  The name of the template to retrieve.
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1 Value "template1"
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1a Value "template1a"
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1b Value "template1b"
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate2 Value "template2"
 */
@property(nonatomic, copy, nullable) NSString *templateName;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersGetTestOrderTemplateResponse.
 *
 *  Sandbox only. Retrieves an order template that can be used to quickly create
 *  a new order in sandbox. This method can only be called for non-multi-client
 *  accounts.
 *
 *  @param merchantId The ID of the managing account.
 *  @param templateName The name of the template to retrieve.
 *
 *  Likely values for @c templateName:
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1 Value "template1"
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1a Value "template1a"
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1b Value "template1b"
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate2 Value "template2"
 *
 *  @returns GTLRShoppingContentQuery_OrdersGettestordertemplate
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                       templateName:(NSString *)templateName;

@end

/**
 *  Lists the orders in your Merchant Center account. This method can only be
 *  called for non-multi-client accounts.
 *
 *  Method: content.orders.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersListWithmerchantId:]

/**
 *  Obtains orders that match the acknowledgement status. When set to true,
 *  obtains orders that have been acknowledged. When false, obtains orders that
 *  have not been acknowledged.
 *  We recommend using this filter set to false, in conjunction with the
 *  acknowledge call, such that only un-acknowledged orders are returned.
 */
@property(nonatomic, assign) BOOL acknowledged;

/**
 *  The maximum number of orders to return in the response, used for paging. The
 *  default value is 25 orders per page, and the maximum allowed value is 250
 *  orders per page.
 *  Known issue: All List calls will return all Orders without limit regardless
 *  of the value of this field.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  The ordering of the returned list. The only supported value are placedDate
 *  desc and placedDate asc for now, which returns orders sorted by placement
 *  date. "placedDate desc" stands for listing orders by placement date, from
 *  oldest to most recent. "placedDate asc" stands for listing orders by
 *  placement date, from most recent to oldest. In future releases we'll support
 *  other sorting criteria.
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentOrderByPlacedDateAsc Value "placedDate asc"
 *    @arg @c kGTLRShoppingContentOrderByPlacedDateDesc Value "placedDate desc"
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Obtains orders placed before this date (exclusively), in ISO 8601 format.
 */
@property(nonatomic, copy, nullable) NSString *placedDateEnd;

/**
 *  Obtains orders placed after this date (inclusively), in ISO 8601 format.
 */
@property(nonatomic, copy, nullable) NSString *placedDateStart;

/**
 *  Obtains orders that match any of the specified statuses. Multiple values can
 *  be specified with comma separation. Additionally, please note that active is
 *  a shortcut for pendingShipment and partiallyShipped, and completed is a
 *  shortcut for shipped , partiallyDelivered, delivered, partiallyReturned,
 *  returned, and canceled.
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentStatusesActive Value "active"
 *    @arg @c kGTLRShoppingContentStatusesCanceled Value "canceled"
 *    @arg @c kGTLRShoppingContentStatusesCompleted Value "completed"
 *    @arg @c kGTLRShoppingContentStatusesDelivered Value "delivered"
 *    @arg @c kGTLRShoppingContentStatusesInProgress Value "inProgress"
 *    @arg @c kGTLRShoppingContentStatusesPartiallyDelivered Value
 *        "partiallyDelivered"
 *    @arg @c kGTLRShoppingContentStatusesPartiallyReturned Value
 *        "partiallyReturned"
 *    @arg @c kGTLRShoppingContentStatusesPartiallyShipped Value
 *        "partiallyShipped"
 *    @arg @c kGTLRShoppingContentStatusesPendingShipment Value
 *        "pendingShipment"
 *    @arg @c kGTLRShoppingContentStatusesReturned Value "returned"
 *    @arg @c kGTLRShoppingContentStatusesShipped Value "shipped"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *statuses;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersListResponse.
 *
 *  Lists the orders in your Merchant Center account. This method can only be
 *  called for non-multi-client accounts.
 *
 *  @param merchantId The ID of the managing account.
 *
 *  @returns GTLRShoppingContentQuery_OrdersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Refund a portion of the order, up to the full amount paid. This method can
 *  only be called for non-multi-client accounts.
 *
 *  Method: content.orders.refund
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersRefund : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersRefundWithObject:merchantId:orderId:]

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order to refund. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersRefundResponse.
 *
 *  Refund a portion of the order, up to the full amount paid. This method can
 *  only be called for non-multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_OrdersRefundRequest to include in
 *    the query.
 *  @param merchantId The ID of the managing account.
 *  @param orderId The ID of the order to refund.
 *
 *  @returns GTLRShoppingContentQuery_OrdersRefund
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersRefundRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Returns a line item. This method can only be called for non-multi-client
 *  accounts.
 *
 *  Method: content.orders.returnlineitem
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersReturnlineitem : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersReturnlineitemWithObject:merchantId:orderId:]

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersReturnLineItemResponse.
 *
 *  Returns a line item. This method can only be called for non-multi-client
 *  accounts.
 *
 *  @param object The @c GTLRShoppingContent_OrdersReturnLineItemRequest to
 *    include in the query.
 *  @param merchantId The ID of the managing account.
 *  @param orderId The ID of the order.
 *
 *  @returns GTLRShoppingContentQuery_OrdersReturnlineitem
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersReturnLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Marks line item(s) as shipped. This method can only be called for
 *  non-multi-client accounts.
 *
 *  Method: content.orders.shiplineitems
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersShiplineitems : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersShiplineitemsWithObject:merchantId:orderId:]

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersShipLineItemsResponse.
 *
 *  Marks line item(s) as shipped. This method can only be called for
 *  non-multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_OrdersShipLineItemsRequest to
 *    include in the query.
 *  @param merchantId The ID of the managing account.
 *  @param orderId The ID of the order.
 *
 *  @returns GTLRShoppingContentQuery_OrdersShiplineitems
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersShipLineItemsRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Updates the merchant order ID for a given order. This method can only be
 *  called for non-multi-client accounts.
 *
 *  Method: content.orders.updatemerchantorderid
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersUpdatemerchantorderid : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersUpdatemerchantorderidWithObject:merchantId:orderId:]

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersUpdateMerchantOrderIdResponse.
 *
 *  Updates the merchant order ID for a given order. This method can only be
 *  called for non-multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_OrdersUpdateMerchantOrderIdRequest
 *    to include in the query.
 *  @param merchantId The ID of the managing account.
 *  @param orderId The ID of the order.
 *
 *  @returns GTLRShoppingContentQuery_OrdersUpdatemerchantorderid
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersUpdateMerchantOrderIdRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Updates a shipment's status, carrier, and/or tracking ID. This method can
 *  only be called for non-multi-client accounts.
 *
 *  Method: content.orders.updateshipment
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersUpdateshipment : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersUpdateshipmentWithObject:merchantId:orderId:]

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersUpdateShipmentResponse.
 *
 *  Updates a shipment's status, carrier, and/or tracking ID. This method can
 *  only be called for non-multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_OrdersUpdateShipmentRequest to
 *    include in the query.
 *  @param merchantId The ID of the managing account.
 *  @param orderId The ID of the order.
 *
 *  @returns GTLRShoppingContentQuery_OrdersUpdateshipment
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersUpdateShipmentRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Retrieves, inserts, and deletes multiple products in a single request. This
 *  method can only be called for non-multi-client accounts.
 *
 *  Method: content.products.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForProductsCustombatchWithObject:]

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/**
 *  Fetches a @c GTLRShoppingContent_ProductsCustomBatchResponse.
 *
 *  Retrieves, inserts, and deletes multiple products in a single request. This
 *  method can only be called for non-multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_ProductsCustomBatchRequest to
 *    include in the query.
 *
 *  @returns GTLRShoppingContentQuery_ProductsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ProductsCustomBatchRequest *)object;

@end

/**
 *  Deletes a product from your Merchant Center account. This method can only be
 *  called for non-multi-client accounts.
 *
 *  Method: content.products.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsDelete : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForProductsDeleteWithmerchantId:productId:]

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a product from your Merchant Center account. This method can only be
 *  called for non-multi-client accounts.
 *
 *  @param merchantId The ID of the managing account.
 *  @param productId The ID of the product.
 *
 *  @returns GTLRShoppingContentQuery_ProductsDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Retrieves a product from your Merchant Center account. This method can only
 *  be called for non-multi-client accounts.
 *
 *  Method: content.products.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForProductsGetWithmerchantId:productId:]

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRShoppingContent_Product.
 *
 *  Retrieves a product from your Merchant Center account. This method can only
 *  be called for non-multi-client accounts.
 *
 *  @param merchantId The ID of the managing account.
 *  @param productId The ID of the product.
 *
 *  @returns GTLRShoppingContentQuery_ProductsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Uploads a product to your Merchant Center account. If an item with the same
 *  channel, contentLanguage, offerId, and targetCountry already exists, this
 *  method updates that entry. This method can only be called for
 *  non-multi-client accounts.
 *
 *  Method: content.products.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsInsert : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForProductsInsertWithObject:merchantId:]

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Product.
 *
 *  Uploads a product to your Merchant Center account. If an item with the same
 *  channel, contentLanguage, offerId, and targetCountry already exists, this
 *  method updates that entry. This method can only be called for
 *  non-multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_Product to include in the query.
 *  @param merchantId The ID of the managing account.
 *
 *  @returns GTLRShoppingContentQuery_ProductsInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Product *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the products in your Merchant Center account. This method can only be
 *  called for non-multi-client accounts.
 *
 *  Method: content.products.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForProductsListWithmerchantId:]

/**
 *  Flag to include the invalid inserted items in the result of the list
 *  request. By default the invalid items are not shown (the default value is
 *  false).
 */
@property(nonatomic, assign) BOOL includeInvalidInsertedItems;

/**
 *  The maximum number of products to return in the response, used for paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ProductsListResponse.
 *
 *  Lists the products in your Merchant Center account. This method can only be
 *  called for non-multi-client accounts.
 *
 *  @param merchantId The ID of the managing account.
 *
 *  @returns GTLRShoppingContentQuery_ProductsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Gets the statuses of multiple products in a single request. This method can
 *  only be called for non-multi-client accounts.
 *
 *  Method: content.productstatuses.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductstatusesCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForProductstatusesCustombatchWithObject:]

/**
 *  Flag to include full product data in the results of this request. The
 *  default value is false.
 */
@property(nonatomic, assign) BOOL includeAttributes;

/**
 *  Fetches a @c GTLRShoppingContent_ProductstatusesCustomBatchResponse.
 *
 *  Gets the statuses of multiple products in a single request. This method can
 *  only be called for non-multi-client accounts.
 *
 *  @param object The @c GTLRShoppingContent_ProductstatusesCustomBatchRequest
 *    to include in the query.
 *
 *  @returns GTLRShoppingContentQuery_ProductstatusesCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ProductstatusesCustomBatchRequest *)object;

@end

/**
 *  Gets the status of a product from your Merchant Center account. This method
 *  can only be called for non-multi-client accounts.
 *
 *  Method: content.productstatuses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductstatusesGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForProductstatusesGetWithmerchantId:productId:]

/**
 *  Flag to include full product data in the result of this get request. The
 *  default value is false.
 */
@property(nonatomic, assign) BOOL includeAttributes;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRShoppingContent_ProductStatus.
 *
 *  Gets the status of a product from your Merchant Center account. This method
 *  can only be called for non-multi-client accounts.
 *
 *  @param merchantId The ID of the managing account.
 *  @param productId The ID of the product.
 *
 *  @returns GTLRShoppingContentQuery_ProductstatusesGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Lists the statuses of the products in your Merchant Center account. This
 *  method can only be called for non-multi-client accounts.
 *
 *  Method: content.productstatuses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductstatusesList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForProductstatusesListWithmerchantId:]

/**
 *  Flag to include full product data in the results of the list request. The
 *  default value is false.
 */
@property(nonatomic, assign) BOOL includeAttributes;

/**
 *  Flag to include the invalid inserted items in the result of the list
 *  request. By default the invalid items are not shown (the default value is
 *  false).
 */
@property(nonatomic, assign) BOOL includeInvalidInsertedItems;

/**
 *  The maximum number of product statuses to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ProductstatusesListResponse.
 *
 *  Lists the statuses of the products in your Merchant Center account. This
 *  method can only be called for non-multi-client accounts.
 *
 *  @param merchantId The ID of the managing account.
 *
 *  @returns GTLRShoppingContentQuery_ProductstatusesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Retrieves and updates the shipping settings of multiple accounts in a single
 *  request.
 *
 *  Method: content.shippingsettings.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForShippingsettingsCustombatchWithObject:]

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/**
 *  Fetches a @c GTLRShoppingContent_ShippingsettingsCustomBatchResponse.
 *
 *  Retrieves and updates the shipping settings of multiple accounts in a single
 *  request.
 *
 *  @param object The @c GTLRShoppingContent_ShippingsettingsCustomBatchRequest
 *    to include in the query.
 *
 *  @returns GTLRShoppingContentQuery_ShippingsettingsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ShippingsettingsCustomBatchRequest *)object;

@end

/**
 *  Retrieves the shipping settings of the account. This method can only be
 *  called for accounts to which the managing account has access: either the
 *  managing account itself or sub-accounts if the managing account is a
 *  multi-client account.
 *
 *  Method: content.shippingsettings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForShippingsettingsGetWithmerchantId:accountId:]

/** The ID of the account for which to get/update shipping settings. */
@property(nonatomic, assign) unsigned long long accountId;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ShippingSettings.
 *
 *  Retrieves the shipping settings of the account. This method can only be
 *  called for accounts to which the managing account has access: either the
 *  managing account itself or sub-accounts if the managing account is a
 *  multi-client account.
 *
 *  @param merchantId The ID of the managing account.
 *  @param accountId The ID of the account for which to get/update shipping
 *    settings.
 *
 *  @returns GTLRShoppingContentQuery_ShippingsettingsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves supported carriers and carrier services for an account.
 *
 *  Method: content.shippingsettings.getsupportedcarriers
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsGetsupportedcarriers : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForShippingsettingsGetsupportedcarriersWithmerchantId:]

/** The ID of the account for which to retrieve the supported carriers. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_ShippingsettingsGetSupportedCarriersResponse.
 *
 *  Retrieves supported carriers and carrier services for an account.
 *
 *  @param merchantId The ID of the account for which to retrieve the supported
 *    carriers.
 *
 *  @returns GTLRShoppingContentQuery_ShippingsettingsGetsupportedcarriers
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the shipping settings of the sub-accounts in your Merchant Center
 *  account. This method can only be called for multi-client accounts.
 *
 *  Method: content.shippingsettings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForShippingsettingsListWithmerchantId:]

/**
 *  The maximum number of shipping settings to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ShippingsettingsListResponse.
 *
 *  Lists the shipping settings of the sub-accounts in your Merchant Center
 *  account. This method can only be called for multi-client accounts.
 *
 *  @param merchantId The ID of the managing account.
 *
 *  @returns GTLRShoppingContentQuery_ShippingsettingsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates the shipping settings of the account. This method can only be called
 *  for accounts to which the managing account has access: either the managing
 *  account itself or sub-accounts if the managing account is a multi-client
 *  account. This method supports patch semantics.
 *
 *  Method: content.shippingsettings.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsPatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForShippingsettingsPatchWithObject:merchantId:accountId:]

/** The ID of the account for which to get/update shipping settings. */
@property(nonatomic, assign) unsigned long long accountId;

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ShippingSettings.
 *
 *  Updates the shipping settings of the account. This method can only be called
 *  for accounts to which the managing account has access: either the managing
 *  account itself or sub-accounts if the managing account is a multi-client
 *  account. This method supports patch semantics.
 *
 *  @param object The @c GTLRShoppingContent_ShippingSettings to include in the
 *    query.
 *  @param merchantId The ID of the managing account.
 *  @param accountId The ID of the account for which to get/update shipping
 *    settings.
 *
 *  @returns GTLRShoppingContentQuery_ShippingsettingsPatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ShippingSettings *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Updates the shipping settings of the account. This method can only be called
 *  for accounts to which the managing account has access: either the managing
 *  account itself or sub-accounts if the managing account is a multi-client
 *  account.
 *
 *  Method: content.shippingsettings.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsUpdate : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForShippingsettingsUpdateWithObject:merchantId:accountId:]

/** The ID of the account for which to get/update shipping settings. */
@property(nonatomic, assign) unsigned long long accountId;

/** Flag to run the request in dry-run mode. */
@property(nonatomic, assign) BOOL dryRun;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ShippingSettings.
 *
 *  Updates the shipping settings of the account. This method can only be called
 *  for accounts to which the managing account has access: either the managing
 *  account itself or sub-accounts if the managing account is a multi-client
 *  account.
 *
 *  @param object The @c GTLRShoppingContent_ShippingSettings to include in the
 *    query.
 *  @param merchantId The ID of the managing account.
 *  @param accountId The ID of the account for which to get/update shipping
 *    settings.
 *
 *  @returns GTLRShoppingContentQuery_ShippingsettingsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ShippingSettings *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

NS_ASSUME_NONNULL_END
