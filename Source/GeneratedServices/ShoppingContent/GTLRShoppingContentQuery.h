// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Content API for Shopping (content/v2.1)
// Description:
//   Manages product items, inventory, and Merchant Center accounts for Google
//   Shopping.
// Documentation:
//   https://developers.google.com/shopping-content

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRShoppingContent_Account;
@class GTLRShoppingContent_AccountsCustomBatchRequest;
@class GTLRShoppingContent_AccountsLinkRequest;
@class GTLRShoppingContent_AccountstatusesCustomBatchRequest;
@class GTLRShoppingContent_AccountTax;
@class GTLRShoppingContent_AccounttaxCustomBatchRequest;
@class GTLRShoppingContent_Datafeed;
@class GTLRShoppingContent_DatafeedsCustomBatchRequest;
@class GTLRShoppingContent_DatafeedstatusesCustomBatchRequest;
@class GTLRShoppingContent_LiaSettings;
@class GTLRShoppingContent_LiasettingsCustomBatchRequest;
@class GTLRShoppingContent_OrderinvoicesCreateChargeInvoiceRequest;
@class GTLRShoppingContent_OrderinvoicesCreateRefundInvoiceRequest;
@class GTLRShoppingContent_OrderpaymentsNotifyAuthApprovedRequest;
@class GTLRShoppingContent_OrderpaymentsNotifyAuthDeclinedRequest;
@class GTLRShoppingContent_OrderpaymentsNotifyChargeRequest;
@class GTLRShoppingContent_OrderpaymentsNotifyRefundRequest;
@class GTLRShoppingContent_OrdersAcknowledgeRequest;
@class GTLRShoppingContent_OrdersCancelLineItemRequest;
@class GTLRShoppingContent_OrdersCancelRequest;
@class GTLRShoppingContent_OrdersCancelTestOrderByCustomerRequest;
@class GTLRShoppingContent_OrdersCreateTestOrderRequest;
@class GTLRShoppingContent_OrdersCreateTestReturnRequest;
@class GTLRShoppingContent_OrdersInStoreRefundLineItemRequest;
@class GTLRShoppingContent_OrdersRejectReturnLineItemRequest;
@class GTLRShoppingContent_OrdersReturnRefundLineItemRequest;
@class GTLRShoppingContent_OrdersSetLineItemMetadataRequest;
@class GTLRShoppingContent_OrdersShipLineItemsRequest;
@class GTLRShoppingContent_OrdersUpdateLineItemShippingDetailsRequest;
@class GTLRShoppingContent_OrdersUpdateMerchantOrderIdRequest;
@class GTLRShoppingContent_OrdersUpdateShipmentRequest;
@class GTLRShoppingContent_PosCustomBatchRequest;
@class GTLRShoppingContent_PosInventoryRequest;
@class GTLRShoppingContent_PosSaleRequest;
@class GTLRShoppingContent_PosStore;
@class GTLRShoppingContent_Product;
@class GTLRShoppingContent_ProductsCustomBatchRequest;
@class GTLRShoppingContent_ProductstatusesCustomBatchRequest;
@class GTLRShoppingContent_ShippingSettings;
@class GTLRShoppingContent_ShippingsettingsCustomBatchRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// orderBy

/** Value: "placedDate asc" */
GTLR_EXTERN NSString * const kGTLRShoppingContentOrderByPlacedDateAsc;
/** Value: "placedDate desc" */
GTLR_EXTERN NSString * const kGTLRShoppingContentOrderByPlacedDateDesc;
/** Value: "returnCreationTimeAsc" */
GTLR_EXTERN NSString * const kGTLRShoppingContentOrderByReturnCreationTimeAsc;
/** Value: "returnCreationTimeDesc" */
GTLR_EXTERN NSString * const kGTLRShoppingContentOrderByReturnCreationTimeDesc;

// ----------------------------------------------------------------------------
// statuses

/** Value: "active" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesActive;
/** Value: "canceled" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesCanceled;
/** Value: "completed" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesCompleted;
/** Value: "delivered" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesDelivered;
/** Value: "inProgress" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesInProgress;
/** Value: "partiallyDelivered" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesPartiallyDelivered;
/** Value: "partiallyReturned" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesPartiallyReturned;
/** Value: "partiallyShipped" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesPartiallyShipped;
/** Value: "pendingShipment" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesPendingShipment;
/** Value: "returned" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesReturned;
/** Value: "shipped" */
GTLR_EXTERN NSString * const kGTLRShoppingContentStatusesShipped;

// ----------------------------------------------------------------------------
// templateName

/** Value: "template1" */
GTLR_EXTERN NSString * const kGTLRShoppingContentTemplateNameTemplate1;
/** Value: "template1a" */
GTLR_EXTERN NSString * const kGTLRShoppingContentTemplateNameTemplate1a;
/** Value: "template1b" */
GTLR_EXTERN NSString * const kGTLRShoppingContentTemplateNameTemplate1b;
/** Value: "template2" */
GTLR_EXTERN NSString * const kGTLRShoppingContentTemplateNameTemplate2;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Shopping Content query classes.
 */
@interface GTLRShoppingContentQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Returns information about the authenticated user.
 *
 *  Method: content.accounts.authinfo
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsAuthinfo : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsAuthinfo]

/**
 *  Fetches a @c GTLRShoppingContent_AccountsAuthInfoResponse.
 *
 *  Returns information about the authenticated user.
 *
 *  @return GTLRShoppingContentQuery_AccountsAuthinfo
 */
+ (instancetype)query;

@end

/**
 *  Claims the website of a Merchant Center sub-account.
 *
 *  Method: content.accounts.claimwebsite
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsClaimwebsite : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsClaimwebsiteWithmerchantId:accountId:]

/** The ID of the account whose website is claimed. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Only available to selected merchants. When set to True, this flag removes
 *  any existing claim on the requested website by another account and replaces
 *  it with a claim from this account.
 */
@property(nonatomic, assign) BOOL overwrite;

/**
 *  Fetches a @c GTLRShoppingContent_AccountsClaimWebsiteResponse.
 *
 *  Claims the website of a Merchant Center sub-account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and accountId must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account whose website is claimed.
 *
 *  @return GTLRShoppingContentQuery_AccountsClaimwebsite
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves, inserts, updates, and deletes multiple Merchant Center
 *  (sub-)accounts in a single request.
 *
 *  Method: content.accounts.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsCustombatchWithObject:]

/**
 *  Fetches a @c GTLRShoppingContent_AccountsCustomBatchResponse.
 *
 *  Retrieves, inserts, updates, and deletes multiple Merchant Center
 *  (sub-)accounts in a single request.
 *
 *  @param object The @c GTLRShoppingContent_AccountsCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_AccountsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountsCustomBatchRequest *)object;

@end

/**
 *  Deletes a Merchant Center sub-account.
 *
 *  Method: content.accounts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsDelete : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsDeleteWithmerchantId:accountId:]

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  Flag to delete sub-accounts with products. The default value is false.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL force;

/**
 *  The ID of the managing account. This must be a multi-client account, and
 *  accountId must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a Merchant Center sub-account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account, and accountId must be the ID of a sub-account of
 *    this account.
 *  @param accountId The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_AccountsDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves a Merchant Center account.
 *
 *  Method: content.accounts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsGetWithmerchantId:accountId:]

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Account.
 *
 *  Retrieves a Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and accountId must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_AccountsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Creates a Merchant Center sub-account.
 *
 *  Method: content.accounts.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsInsert : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsInsertWithObject:merchantId:]

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Account.
 *
 *  Creates a Merchant Center sub-account.
 *
 *  @param object The @c GTLRShoppingContent_Account to include in the query.
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_AccountsInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Account *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Performs an action on a link between a Merchant Center account and another
 *  account.
 *
 *  Method: content.accounts.link
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsLink : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsLinkWithObject:merchantId:accountId:]

/** The ID of the account that should be linked. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountsLinkResponse.
 *
 *  Performs an action on a link between a Merchant Center account and another
 *  account.
 *
 *  @param object The @c GTLRShoppingContent_AccountsLinkRequest to include in
 *    the query.
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and accountId must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account that should be linked.
 *
 *  @return GTLRShoppingContentQuery_AccountsLink
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountsLinkRequest *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Lists the sub-accounts in your Merchant Center account.
 *
 *  Method: content.accounts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsListWithmerchantId:]

/**
 *  The maximum number of accounts to return in the response, used for paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_AccountsListResponse.
 *
 *  Lists the sub-accounts in your Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_AccountsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  GTLRShoppingContentQuery_AccountstatusesCustombatch
 *
 *  Method: content.accountstatuses.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountstatusesCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountstatusesCustombatchWithObject:]

/**
 *  Fetches a @c GTLRShoppingContent_AccountstatusesCustomBatchResponse.
 *
 *  @param object The @c GTLRShoppingContent_AccountstatusesCustomBatchRequest
 *    to include in the query.
 *
 *  @return GTLRShoppingContentQuery_AccountstatusesCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountstatusesCustomBatchRequest *)object;

@end

/**
 *  Retrieves the status of a Merchant Center account. Multi-client accounts can
 *  only call this method for sub-accounts.
 *
 *  Method: content.accountstatuses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountstatusesGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountstatusesGetWithmerchantId:accountId:]

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  If set, only issues for the specified destinations are returned, otherwise
 *  only issues for the Shopping destination.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *destinations;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountStatus.
 *
 *  Retrieves the status of a Merchant Center account. Multi-client accounts can
 *  only call this method for sub-accounts.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and accountId must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_AccountstatusesGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Lists the statuses of the sub-accounts in your Merchant Center account.
 *
 *  Method: content.accountstatuses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountstatusesList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountstatusesListWithmerchantId:]

/**
 *  If set, only issues for the specified destinations are returned, otherwise
 *  only issues for the Shopping destination.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *destinations;

/**
 *  The maximum number of account statuses to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_AccountstatusesListResponse.
 *
 *  Lists the statuses of the sub-accounts in your Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_AccountstatusesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates a Merchant Center account.
 *
 *  Method: content.accounts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsUpdate : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccountsUpdateWithObject:merchantId:accountId:]

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Account.
 *
 *  Updates a Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_Account to include in the query.
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and accountId must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_AccountsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Account *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves and updates tax settings of multiple accounts in a single request.
 *
 *  Method: content.accounttax.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccounttaxCustombatchWithObject:]

/**
 *  Fetches a @c GTLRShoppingContent_AccounttaxCustomBatchResponse.
 *
 *  Retrieves and updates tax settings of multiple accounts in a single request.
 *
 *  @param object The @c GTLRShoppingContent_AccounttaxCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_AccounttaxCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccounttaxCustomBatchRequest *)object;

@end

/**
 *  Retrieves the tax settings of the account.
 *
 *  Method: content.accounttax.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccounttaxGetWithmerchantId:accountId:]

/** The ID of the account for which to get/update account tax settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountTax.
 *
 *  Retrieves the tax settings of the account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and accountId must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get/update account tax
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_AccounttaxGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Lists the tax settings of the sub-accounts in your Merchant Center account.
 *
 *  Method: content.accounttax.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccounttaxListWithmerchantId:]

/**
 *  The maximum number of tax settings to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_AccounttaxListResponse.
 *
 *  Lists the tax settings of the sub-accounts in your Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_AccounttaxList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates the tax settings of the account.
 *
 *  Method: content.accounttax.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxUpdate : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForAccounttaxUpdateWithObject:merchantId:accountId:]

/** The ID of the account for which to get/update account tax settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountTax.
 *
 *  Updates the tax settings of the account.
 *
 *  @param object The @c GTLRShoppingContent_AccountTax to include in the query.
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and accountId must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get/update account tax
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_AccounttaxUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountTax *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  GTLRShoppingContentQuery_DatafeedsCustombatch
 *
 *  Method: content.datafeeds.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedsCustombatchWithObject:]

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedsCustomBatchResponse.
 *
 *  @param object The @c GTLRShoppingContent_DatafeedsCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_DatafeedsCustomBatchRequest *)object;

@end

/**
 *  Deletes a datafeed configuration from your Merchant Center account.
 *
 *  Method: content.datafeeds.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsDelete : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedsDeleteWithmerchantId:datafeedId:]

/** The ID of the datafeed. */
@property(nonatomic, assign) unsigned long long datafeedId;

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a datafeed configuration from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *  @param datafeedId The ID of the datafeed.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Invokes a fetch for the datafeed in your Merchant Center account.
 *
 *  Method: content.datafeeds.fetchnow
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsFetchnow : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedsFetchnowWithmerchantId:datafeedId:]

/** The ID of the datafeed to be fetched. */
@property(nonatomic, assign) unsigned long long datafeedId;

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedsFetchNowResponse.
 *
 *  Invokes a fetch for the datafeed in your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *  @param datafeedId The ID of the datafeed to be fetched.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsFetchnow
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Retrieves a datafeed configuration from your Merchant Center account.
 *
 *  Method: content.datafeeds.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedsGetWithmerchantId:datafeedId:]

/** The ID of the datafeed. */
@property(nonatomic, assign) unsigned long long datafeedId;

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Datafeed.
 *
 *  Retrieves a datafeed configuration from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *  @param datafeedId The ID of the datafeed.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Registers a datafeed configuration with your Merchant Center account.
 *
 *  Method: content.datafeeds.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsInsert : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedsInsertWithObject:merchantId:]

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Datafeed.
 *
 *  Registers a datafeed configuration with your Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_Datafeed to include in the query.
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Datafeed *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the configurations for datafeeds in your Merchant Center account.
 *
 *  Method: content.datafeeds.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedsListWithmerchantId:]

/**
 *  The maximum number of products to return in the response, used for paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that manages the datafeeds. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedsListResponse.
 *
 *  Lists the configurations for datafeeds in your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the datafeeds. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  GTLRShoppingContentQuery_DatafeedstatusesCustombatch
 *
 *  Method: content.datafeedstatuses.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedstatusesCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedstatusesCustombatchWithObject:]

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedstatusesCustomBatchResponse.
 *
 *  @param object The @c GTLRShoppingContent_DatafeedstatusesCustomBatchRequest
 *    to include in the query.
 *
 *  @return GTLRShoppingContentQuery_DatafeedstatusesCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_DatafeedstatusesCustomBatchRequest *)object;

@end

/**
 *  Retrieves the status of a datafeed from your Merchant Center account.
 *
 *  Method: content.datafeedstatuses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedstatusesGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedstatusesGetWithmerchantId:datafeedId:]

/**
 *  The country for which to get the datafeed status. If this parameter is
 *  provided then language must also be provided. Note that this parameter is
 *  required for feeds targeting multiple countries and languages, since a feed
 *  may have a different status for each target.
 */
@property(nonatomic, copy, nullable) NSString *country;

/** The ID of the datafeed. */
@property(nonatomic, assign) unsigned long long datafeedId;

/**
 *  The language for which to get the datafeed status. If this parameter is
 *  provided then country must also be provided. Note that this parameter is
 *  required for feeds targeting multiple countries and languages, since a feed
 *  may have a different status for each target.
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedStatus.
 *
 *  Retrieves the status of a datafeed from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *  @param datafeedId The ID of the datafeed.
 *
 *  @return GTLRShoppingContentQuery_DatafeedstatusesGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Lists the statuses of the datafeeds in your Merchant Center account.
 *
 *  Method: content.datafeedstatuses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedstatusesList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedstatusesListWithmerchantId:]

/**
 *  The maximum number of products to return in the response, used for paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that manages the datafeeds. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedstatusesListResponse.
 *
 *  Lists the statuses of the datafeeds in your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the datafeeds. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_DatafeedstatusesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates a datafeed configuration of your Merchant Center account.
 *
 *  Method: content.datafeeds.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsUpdate : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForDatafeedsUpdateWithObject:merchantId:datafeedId:]

/** The ID of the datafeed. */
@property(nonatomic, assign) unsigned long long datafeedId;

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Datafeed.
 *
 *  Updates a datafeed configuration of your Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_Datafeed to include in the query.
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *  @param datafeedId The ID of the datafeed.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Datafeed *)object
                     merchantId:(unsigned long long)merchantId
                     datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Retrieves and/or updates the LIA settings of multiple accounts in a single
 *  request.
 *
 *  Method: content.liasettings.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForLiasettingsCustombatchWithObject:]

/**
 *  Fetches a @c GTLRShoppingContent_LiasettingsCustomBatchResponse.
 *
 *  Retrieves and/or updates the LIA settings of multiple accounts in a single
 *  request.
 *
 *  @param object The @c GTLRShoppingContent_LiasettingsCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_LiasettingsCustomBatchRequest *)object;

@end

/**
 *  Retrieves the LIA settings of the account.
 *
 *  Method: content.liasettings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForLiasettingsGetWithmerchantId:accountId:]

/** The ID of the account for which to get or update LIA settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_LiaSettings.
 *
 *  Retrieves the LIA settings of the account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and accountId must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get or update LIA
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves the list of accessible Google My Business accounts.
 *
 *  Method: content.liasettings.getaccessiblegmbaccounts
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsGetaccessiblegmbaccounts : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForLiasettingsGetaccessiblegmbaccountsWithmerchantId:accountId:]

/**
 *  The ID of the account for which to retrieve accessible Google My Business
 *  accounts.
 */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_LiasettingsGetAccessibleGmbAccountsResponse.
 *
 *  Retrieves the list of accessible Google My Business accounts.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and accountId must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to retrieve accessible
 *    Google My Business accounts.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsGetaccessiblegmbaccounts
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Lists the LIA settings of the sub-accounts in your Merchant Center account.
 *
 *  Method: content.liasettings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForLiasettingsListWithmerchantId:]

/**
 *  The maximum number of LIA settings to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_LiasettingsListResponse.
 *
 *  Lists the LIA settings of the sub-accounts in your Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Retrieves the list of POS data providers that have active settings for the
 *  all eiligible countries.
 *
 *  Method: content.liasettings.listposdataproviders
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsListposdataproviders : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForLiasettingsListposdataproviders]

/**
 *  Fetches a @c GTLRShoppingContent_LiasettingsListPosDataProvidersResponse.
 *
 *  Retrieves the list of POS data providers that have active settings for the
 *  all eiligible countries.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsListposdataproviders
 */
+ (instancetype)query;

@end

/**
 *  Requests access to a specified Google My Business account.
 *
 *  Method: content.liasettings.requestgmbaccess
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsRequestgmbaccess : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForLiasettingsRequestgmbaccessWithmerchantId:accountId:gmbEmail:]

/** The ID of the account for which GMB access is requested. */
@property(nonatomic, assign) unsigned long long accountId;

/** The email of the Google My Business account. */
@property(nonatomic, copy, nullable) NSString *gmbEmail;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_LiasettingsRequestGmbAccessResponse.
 *
 *  Requests access to a specified Google My Business account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and accountId must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which GMB access is requested.
 *  @param gmbEmail The email of the Google My Business account.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsRequestgmbaccess
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                           gmbEmail:(NSString *)gmbEmail;

@end

/**
 *  Requests inventory validation for the specified country.
 *
 *  Method: content.liasettings.requestinventoryverification
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsRequestinventoryverification : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForLiasettingsRequestinventoryverificationWithmerchantId:accountId:country:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long accountId;

/** The country for which inventory validation is requested. */
@property(nonatomic, copy, nullable) NSString *country;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_LiasettingsRequestInventoryVerificationResponse.
 *
 *  Requests inventory validation for the specified country.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and accountId must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param country The country for which inventory validation is requested.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsRequestinventoryverification
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                            country:(NSString *)country;

@end

/**
 *  Sets the inventory verification contract for the specified country.
 *
 *  Method: content.liasettings.setinventoryverificationcontact
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsSetinventoryverificationcontact : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForLiasettingsSetinventoryverificationcontactWithmerchantId:accountId:contactEmail:contactName:country:language:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long accountId;

/** The email of the inventory verification contact. */
@property(nonatomic, copy, nullable) NSString *contactEmail;

/** The name of the inventory verification contact. */
@property(nonatomic, copy, nullable) NSString *contactName;

/** The country for which inventory verification is requested. */
@property(nonatomic, copy, nullable) NSString *country;

/** The language for which inventory verification is requested. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_LiasettingsSetInventoryVerificationContactResponse.
 *
 *  Sets the inventory verification contract for the specified country.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and accountId must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param contactEmail The email of the inventory verification contact.
 *  @param contactName The name of the inventory verification contact.
 *  @param country The country for which inventory verification is requested.
 *  @param language The language for which inventory verification is requested.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsSetinventoryverificationcontact
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                       contactEmail:(NSString *)contactEmail
                        contactName:(NSString *)contactName
                            country:(NSString *)country
                           language:(NSString *)language;

@end

/**
 *  Sets the POS data provider for the specified country.
 *
 *  Method: content.liasettings.setposdataprovider
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsSetposdataprovider : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForLiasettingsSetposdataproviderWithmerchantId:accountId:country:]

/**
 *  The ID of the account for which to retrieve accessible Google My Business
 *  accounts.
 */
@property(nonatomic, assign) unsigned long long accountId;

/** The country for which the POS data provider is selected. */
@property(nonatomic, copy, nullable) NSString *country;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of POS data provider. */
@property(nonatomic, assign) unsigned long long posDataProviderId;

/**
 *  The account ID by which this merchant is known to the POS data provider.
 */
@property(nonatomic, copy, nullable) NSString *posExternalAccountId;

/**
 *  Fetches a @c GTLRShoppingContent_LiasettingsSetPosDataProviderResponse.
 *
 *  Sets the POS data provider for the specified country.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and accountId must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to retrieve accessible
 *    Google My Business accounts.
 *  @param country The country for which the POS data provider is selected.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsSetposdataprovider
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                            country:(NSString *)country;

@end

/**
 *  Updates the LIA settings of the account.
 *
 *  Method: content.liasettings.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsUpdate : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForLiasettingsUpdateWithObject:merchantId:accountId:]

/** The ID of the account for which to get or update LIA settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_LiaSettings.
 *
 *  Updates the LIA settings of the account.
 *
 *  @param object The @c GTLRShoppingContent_LiaSettings to include in the
 *    query.
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and accountId must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get or update LIA
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_LiaSettings *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Creates a charge invoice for a shipment group, and triggers a charge capture
 *  for non-facilitated payment orders.
 *
 *  Method: content.orderinvoices.createchargeinvoice
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderinvoicesCreatechargeinvoice : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrderinvoicesCreatechargeinvoiceWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrderinvoicesCreateChargeInvoiceResponse.
 *
 *  Creates a charge invoice for a shipment group, and triggers a charge capture
 *  for non-facilitated payment orders.
 *
 *  @param object The @c
 *    GTLRShoppingContent_OrderinvoicesCreateChargeInvoiceRequest to include in
 *    the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrderinvoicesCreatechargeinvoice
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderinvoicesCreateChargeInvoiceRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Creates a refund invoice for one or more shipment groups, and triggers a
 *  refund for non-facilitated payment orders. This can only be used for line
 *  items that have previously been charged using createChargeInvoice. All
 *  amounts (except for the summary) are incremental with respect to the
 *  previous invoice.
 *
 *  Method: content.orderinvoices.createrefundinvoice
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderinvoicesCreaterefundinvoice : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrderinvoicesCreaterefundinvoiceWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrderinvoicesCreateRefundInvoiceResponse.
 *
 *  Creates a refund invoice for one or more shipment groups, and triggers a
 *  refund for non-facilitated payment orders. This can only be used for line
 *  items that have previously been charged using createChargeInvoice. All
 *  amounts (except for the summary) are incremental with respect to the
 *  previous invoice.
 *
 *  @param object The @c
 *    GTLRShoppingContent_OrderinvoicesCreateRefundInvoiceRequest to include in
 *    the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrderinvoicesCreaterefundinvoice
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderinvoicesCreateRefundInvoiceRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Notify about successfully authorizing user's payment method for a given
 *  amount.
 *
 *  Method: content.orderpayments.notifyauthapproved
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderpaymentsNotifyauthapproved : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrderpaymentsNotifyauthapprovedWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order for for which payment authorization is happening. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrderpaymentsNotifyAuthApprovedResponse.
 *
 *  Notify about successfully authorizing user's payment method for a given
 *  amount.
 *
 *  @param object The @c
 *    GTLRShoppingContent_OrderpaymentsNotifyAuthApprovedRequest to include in
 *    the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order for for which payment authorization is
 *    happening.
 *
 *  @return GTLRShoppingContentQuery_OrderpaymentsNotifyauthapproved
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderpaymentsNotifyAuthApprovedRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Notify about failure to authorize user's payment method.
 *
 *  Method: content.orderpayments.notifyauthdeclined
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderpaymentsNotifyauthdeclined : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrderpaymentsNotifyauthdeclinedWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order for which payment authorization was declined. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrderpaymentsNotifyAuthDeclinedResponse.
 *
 *  Notify about failure to authorize user's payment method.
 *
 *  @param object The @c
 *    GTLRShoppingContent_OrderpaymentsNotifyAuthDeclinedRequest to include in
 *    the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order for which payment authorization was
 *    declined.
 *
 *  @return GTLRShoppingContentQuery_OrderpaymentsNotifyauthdeclined
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderpaymentsNotifyAuthDeclinedRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Notify about charge on user's selected payments method.
 *
 *  Method: content.orderpayments.notifycharge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderpaymentsNotifycharge : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrderpaymentsNotifychargeWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order for which charge is happening. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrderpaymentsNotifyChargeResponse.
 *
 *  Notify about charge on user's selected payments method.
 *
 *  @param object The @c GTLRShoppingContent_OrderpaymentsNotifyChargeRequest to
 *    include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order for which charge is happening.
 *
 *  @return GTLRShoppingContentQuery_OrderpaymentsNotifycharge
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderpaymentsNotifyChargeRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Notify about refund on user's selected payments method.
 *
 *  Method: content.orderpayments.notifyrefund
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderpaymentsNotifyrefund : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrderpaymentsNotifyrefundWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order for which charge is happening. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrderpaymentsNotifyRefundResponse.
 *
 *  Notify about refund on user's selected payments method.
 *
 *  @param object The @c GTLRShoppingContent_OrderpaymentsNotifyRefundRequest to
 *    include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order for which charge is happening.
 *
 *  @return GTLRShoppingContentQuery_OrderpaymentsNotifyrefund
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderpaymentsNotifyRefundRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Retrieves a report for disbursements from your Merchant Center account.
 *
 *  Method: content.orderreports.listdisbursements
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderreportsListdisbursements : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrderreportsListdisbursementsWithmerchantId:disbursementStartDate:]

/**
 *  The last date which disbursements occurred. In ISO 8601 format. Default:
 *  current date.
 */
@property(nonatomic, copy, nullable) NSString *disbursementEndDate;

/** The first date which disbursements occurred. In ISO 8601 format. */
@property(nonatomic, copy, nullable) NSString *disbursementStartDate;

/**
 *  The maximum number of disbursements to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_OrderreportsListDisbursementsResponse.
 *
 *  Retrieves a report for disbursements from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param disbursementStartDate The first date which disbursements occurred. In
 *    ISO 8601 format.
 *
 *  @return GTLRShoppingContentQuery_OrderreportsListdisbursements
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
              disbursementStartDate:(NSString *)disbursementStartDate;

@end

/**
 *  Retrieves a list of transactions for a disbursement from your Merchant
 *  Center account.
 *
 *  Method: content.orderreports.listtransactions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderreportsListtransactions : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrderreportsListtransactionsWithmerchantId:disbursementId:transactionStartDate:]

/** The Google-provided ID of the disbursement (found in Wallet). */
@property(nonatomic, copy, nullable) NSString *disbursementId;

/**
 *  The maximum number of disbursements to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The last date in which transaction occurred. In ISO 8601 format. Default:
 *  current date.
 */
@property(nonatomic, copy, nullable) NSString *transactionEndDate;

/** The first date in which transaction occurred. In ISO 8601 format. */
@property(nonatomic, copy, nullable) NSString *transactionStartDate;

/**
 *  Fetches a @c GTLRShoppingContent_OrderreportsListTransactionsResponse.
 *
 *  Retrieves a list of transactions for a disbursement from your Merchant
 *  Center account.
 *
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param disbursementId The Google-provided ID of the disbursement (found in
 *    Wallet).
 *  @param transactionStartDate The first date in which transaction occurred. In
 *    ISO 8601 format.
 *
 *  @return GTLRShoppingContentQuery_OrderreportsListtransactions
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                     disbursementId:(NSString *)disbursementId
               transactionStartDate:(NSString *)transactionStartDate;

@end

/**
 *  Retrieves an order return from your Merchant Center account.
 *
 *  Method: content.orderreturns.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderreturnsGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrderreturnsGetWithmerchantId:returnId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** Merchant order return ID generated by Google. */
@property(nonatomic, copy, nullable) NSString *returnId;

/**
 *  Fetches a @c GTLRShoppingContent_MerchantOrderReturn.
 *
 *  Retrieves an order return from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param returnId Merchant order return ID generated by Google.
 *
 *  @return GTLRShoppingContentQuery_OrderreturnsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                           returnId:(NSString *)returnId;

@end

/**
 *  Lists order returns in your Merchant Center account.
 *
 *  Method: content.orderreturns.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderreturnsList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrderreturnsListWithmerchantId:]

/**
 *  Obtains order returns created before this date (inclusively), in ISO 8601
 *  format.
 */
@property(nonatomic, copy, nullable) NSString *createdEndDate;

/**
 *  Obtains order returns created after this date (inclusively), in ISO 8601
 *  format.
 */
@property(nonatomic, copy, nullable) NSString *createdStartDate;

/**
 *  The maximum number of order returns to return in the response, used for
 *  paging. The default value is 25 returns per page, and the maximum allowed
 *  value is 250 returns per page.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Return the results in the specified order.
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentOrderByReturnCreationTimeAsc Value
 *        "returnCreationTimeAsc"
 *    @arg @c kGTLRShoppingContentOrderByReturnCreationTimeDesc Value
 *        "returnCreationTimeDesc"
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_OrderreturnsListResponse.
 *
 *  Lists order returns in your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_OrderreturnsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Marks an order as acknowledged.
 *
 *  Method: content.orders.acknowledge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersAcknowledge : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersAcknowledgeWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersAcknowledgeResponse.
 *
 *  Marks an order as acknowledged.
 *
 *  @param object The @c GTLRShoppingContent_OrdersAcknowledgeRequest to include
 *    in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersAcknowledge
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersAcknowledgeRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Sandbox only. Moves a test order from state "inProgress" to state
 *  "pendingShipment".
 *
 *  Method: content.orders.advancetestorder
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersAdvancetestorder : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersAdvancetestorderWithmerchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the test order to modify. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersAdvanceTestOrderResponse.
 *
 *  Sandbox only. Moves a test order from state "inProgress" to state
 *  "pendingShipment".
 *
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the test order to modify.
 *
 *  @return GTLRShoppingContentQuery_OrdersAdvancetestorder
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                            orderId:(NSString *)orderId;

@end

/**
 *  Cancels all line items in an order, making a full refund.
 *
 *  Method: content.orders.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersCancel : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersCancelWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order to cancel. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersCancelResponse.
 *
 *  Cancels all line items in an order, making a full refund.
 *
 *  @param object The @c GTLRShoppingContent_OrdersCancelRequest to include in
 *    the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order to cancel.
 *
 *  @return GTLRShoppingContentQuery_OrdersCancel
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCancelRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Cancels a line item, making a full refund.
 *
 *  Method: content.orders.cancellineitem
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersCancellineitem : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersCancellineitemWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersCancelLineItemResponse.
 *
 *  Cancels a line item, making a full refund.
 *
 *  @param object The @c GTLRShoppingContent_OrdersCancelLineItemRequest to
 *    include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersCancellineitem
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCancelLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Sandbox only. Cancels a test order for customer-initiated cancellation.
 *
 *  Method: content.orders.canceltestorderbycustomer
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersCanceltestorderbycustomer : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersCanceltestorderbycustomerWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the test order to cancel. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersCancelTestOrderByCustomerResponse.
 *
 *  Sandbox only. Cancels a test order for customer-initiated cancellation.
 *
 *  @param object The @c
 *    GTLRShoppingContent_OrdersCancelTestOrderByCustomerRequest to include in
 *    the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the test order to cancel.
 *
 *  @return GTLRShoppingContentQuery_OrdersCanceltestorderbycustomer
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCancelTestOrderByCustomerRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Sandbox only. Creates a test order.
 *
 *  Method: content.orders.createtestorder
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersCreatetestorder : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersCreatetestorderWithObject:merchantId:]

/**
 *  The ID of the account that should manage the order. This cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersCreateTestOrderResponse.
 *
 *  Sandbox only. Creates a test order.
 *
 *  @param object The @c GTLRShoppingContent_OrdersCreateTestOrderRequest to
 *    include in the query.
 *  @param merchantId The ID of the account that should manage the order. This
 *    cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_OrdersCreatetestorder
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCreateTestOrderRequest *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Sandbox only. Creates a test return.
 *
 *  Method: content.orders.createtestreturn
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersCreatetestreturn : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersCreatetestreturnWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersCreateTestReturnResponse.
 *
 *  Sandbox only. Creates a test return.
 *
 *  @param object The @c GTLRShoppingContent_OrdersCreateTestReturnRequest to
 *    include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersCreatetestreturn
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCreateTestReturnRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Retrieves an order from your Merchant Center account.
 *
 *  Method: content.orders.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersGetWithmerchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_Order.
 *
 *  Retrieves an order from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                            orderId:(NSString *)orderId;

@end

/**
 *  Retrieves an order using merchant order id.
 *
 *  Method: content.orders.getbymerchantorderid
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersGetbymerchantorderid : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersGetbymerchantorderidWithmerchantId:merchantOrderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The merchant order id to be looked for. */
@property(nonatomic, copy, nullable) NSString *merchantOrderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersGetByMerchantOrderIdResponse.
 *
 *  Retrieves an order using merchant order id.
 *
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param merchantOrderId The merchant order id to be looked for.
 *
 *  @return GTLRShoppingContentQuery_OrdersGetbymerchantorderid
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                    merchantOrderId:(NSString *)merchantOrderId;

@end

/**
 *  Sandbox only. Retrieves an order template that can be used to quickly create
 *  a new order in sandbox.
 *
 *  Method: content.orders.gettestordertemplate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersGettestordertemplate : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersGettestordertemplateWithmerchantId:templateName:]

/** The country of the template to retrieve. Defaults to US. */
@property(nonatomic, copy, nullable) NSString *country;

/**
 *  The ID of the account that should manage the order. This cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  The name of the template to retrieve.
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1 Value "template1"
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1a Value "template1a"
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1b Value "template1b"
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate2 Value "template2"
 */
@property(nonatomic, copy, nullable) NSString *templateName;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersGetTestOrderTemplateResponse.
 *
 *  Sandbox only. Retrieves an order template that can be used to quickly create
 *  a new order in sandbox.
 *
 *  @param merchantId The ID of the account that should manage the order. This
 *    cannot be a multi-client account.
 *  @param templateName The name of the template to retrieve.
 *
 *  Likely values for @c templateName:
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1 Value "template1"
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1a Value "template1a"
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1b Value "template1b"
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate2 Value "template2"
 *
 *  @return GTLRShoppingContentQuery_OrdersGettestordertemplate
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                       templateName:(NSString *)templateName;

@end

/**
 *  Notifies that item return and refund was handled directly by merchant
 *  outside of Google payments processing (e.g. cash refund done in store).
 *
 *  Method: content.orders.instorerefundlineitem
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersInstorerefundlineitem : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersInstorerefundlineitemWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersInStoreRefundLineItemResponse.
 *
 *  Notifies that item return and refund was handled directly by merchant
 *  outside of Google payments processing (e.g. cash refund done in store).
 *
 *  @param object The @c GTLRShoppingContent_OrdersInStoreRefundLineItemRequest
 *    to include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersInstorerefundlineitem
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersInStoreRefundLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Lists the orders in your Merchant Center account.
 *
 *  Method: content.orders.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersListWithmerchantId:]

/**
 *  Obtains orders that match the acknowledgement status. When set to true,
 *  obtains orders that have been acknowledged. When false, obtains orders that
 *  have not been acknowledged.
 *  We recommend using this filter set to false, in conjunction with the
 *  acknowledge call, such that only un-acknowledged orders are returned.
 */
@property(nonatomic, assign) BOOL acknowledged;

/**
 *  The maximum number of orders to return in the response, used for paging. The
 *  default value is 25 orders per page, and the maximum allowed value is 250
 *  orders per page.
 *  Known issue: All List calls will return all Orders without limit regardless
 *  of the value of this field.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  The ordering of the returned list. The only supported value are placedDate
 *  desc and placedDate asc for now, which returns orders sorted by placement
 *  date. "placedDate desc" stands for listing orders by placement date, from
 *  oldest to most recent. "placedDate asc" stands for listing orders by
 *  placement date, from most recent to oldest. In future releases we'll support
 *  other sorting criteria.
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentOrderByPlacedDateAsc Value "placedDate asc"
 *    @arg @c kGTLRShoppingContentOrderByPlacedDateDesc Value "placedDate desc"
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Obtains orders placed before this date (exclusively), in ISO 8601 format.
 */
@property(nonatomic, copy, nullable) NSString *placedDateEnd;

/**
 *  Obtains orders placed after this date (inclusively), in ISO 8601 format.
 */
@property(nonatomic, copy, nullable) NSString *placedDateStart;

/**
 *  Obtains orders that match any of the specified statuses. Multiple values can
 *  be specified with comma separation. Additionally, please note that active is
 *  a shortcut for pendingShipment and partiallyShipped, and completed is a
 *  shortcut for shipped , partiallyDelivered, delivered, partiallyReturned,
 *  returned, and canceled.
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentStatusesActive Value "active"
 *    @arg @c kGTLRShoppingContentStatusesCanceled Value "canceled"
 *    @arg @c kGTLRShoppingContentStatusesCompleted Value "completed"
 *    @arg @c kGTLRShoppingContentStatusesDelivered Value "delivered"
 *    @arg @c kGTLRShoppingContentStatusesInProgress Value "inProgress"
 *    @arg @c kGTLRShoppingContentStatusesPartiallyDelivered Value
 *        "partiallyDelivered"
 *    @arg @c kGTLRShoppingContentStatusesPartiallyReturned Value
 *        "partiallyReturned"
 *    @arg @c kGTLRShoppingContentStatusesPartiallyShipped Value
 *        "partiallyShipped"
 *    @arg @c kGTLRShoppingContentStatusesPendingShipment Value
 *        "pendingShipment"
 *    @arg @c kGTLRShoppingContentStatusesReturned Value "returned"
 *    @arg @c kGTLRShoppingContentStatusesShipped Value "shipped"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *statuses;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersListResponse.
 *
 *  Lists the orders in your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_OrdersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Rejects return on an line item.
 *
 *  Method: content.orders.rejectreturnlineitem
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersRejectreturnlineitem : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersRejectreturnlineitemWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersRejectReturnLineItemResponse.
 *
 *  Rejects return on an line item.
 *
 *  @param object The @c GTLRShoppingContent_OrdersRejectReturnLineItemRequest
 *    to include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersRejectreturnlineitem
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersRejectReturnLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Returns and refunds a line item. Note that this method can only be called on
 *  fully shipped orders.
 *
 *  Method: content.orders.returnrefundlineitem
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersReturnrefundlineitem : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersReturnrefundlineitemWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersReturnRefundLineItemResponse.
 *
 *  Returns and refunds a line item. Note that this method can only be called on
 *  fully shipped orders.
 *
 *  @param object The @c GTLRShoppingContent_OrdersReturnRefundLineItemRequest
 *    to include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersReturnrefundlineitem
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersReturnRefundLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Sets (overrides) merchant provided annotations on the line item.
 *
 *  Method: content.orders.setlineitemmetadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersSetlineitemmetadata : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersSetlineitemmetadataWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersSetLineItemMetadataResponse.
 *
 *  Sets (overrides) merchant provided annotations on the line item.
 *
 *  @param object The @c GTLRShoppingContent_OrdersSetLineItemMetadataRequest to
 *    include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersSetlineitemmetadata
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersSetLineItemMetadataRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Marks line item(s) as shipped.
 *
 *  Method: content.orders.shiplineitems
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersShiplineitems : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersShiplineitemsWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersShipLineItemsResponse.
 *
 *  Marks line item(s) as shipped.
 *
 *  @param object The @c GTLRShoppingContent_OrdersShipLineItemsRequest to
 *    include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersShiplineitems
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersShipLineItemsRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Updates ship by and delivery by dates for a line item.
 *
 *  Method: content.orders.updatelineitemshippingdetails
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersUpdatelineitemshippingdetails : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersUpdatelineitemshippingdetailsWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_OrdersUpdateLineItemShippingDetailsResponse.
 *
 *  Updates ship by and delivery by dates for a line item.
 *
 *  @param object The @c
 *    GTLRShoppingContent_OrdersUpdateLineItemShippingDetailsRequest to include
 *    in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersUpdatelineitemshippingdetails
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersUpdateLineItemShippingDetailsRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Updates the merchant order ID for a given order.
 *
 *  Method: content.orders.updatemerchantorderid
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersUpdatemerchantorderid : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersUpdatemerchantorderidWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersUpdateMerchantOrderIdResponse.
 *
 *  Updates the merchant order ID for a given order.
 *
 *  @param object The @c GTLRShoppingContent_OrdersUpdateMerchantOrderIdRequest
 *    to include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersUpdatemerchantorderid
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersUpdateMerchantOrderIdRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Updates a shipment's status, carrier, and/or tracking ID.
 *
 *  Method: content.orders.updateshipment
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersUpdateshipment : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForOrdersUpdateshipmentWithObject:merchantId:orderId:]

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersUpdateShipmentResponse.
 *
 *  Updates a shipment's status, carrier, and/or tracking ID.
 *
 *  @param object The @c GTLRShoppingContent_OrdersUpdateShipmentRequest to
 *    include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersUpdateshipment
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersUpdateShipmentRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Batches multiple POS-related calls in a single request.
 *
 *  Method: content.pos.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForPosCustombatchWithObject:]

/**
 *  Fetches a @c GTLRShoppingContent_PosCustomBatchResponse.
 *
 *  Batches multiple POS-related calls in a single request.
 *
 *  @param object The @c GTLRShoppingContent_PosCustomBatchRequest to include in
 *    the query.
 *
 *  @return GTLRShoppingContentQuery_PosCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_PosCustomBatchRequest *)object;

@end

/**
 *  Deletes a store for the given merchant.
 *
 *  Method: content.pos.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosDelete : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForPosDeleteWithmerchantId:targetMerchantId:storeCode:]

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** A store code that is unique per merchant. */
@property(nonatomic, copy, nullable) NSString *storeCode;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a store for the given merchant.
 *
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *  @param storeCode A store code that is unique per merchant.
 *
 *  @return GTLRShoppingContentQuery_PosDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                   targetMerchantId:(unsigned long long)targetMerchantId
                          storeCode:(NSString *)storeCode;

@end

/**
 *  Retrieves information about the given store.
 *
 *  Method: content.pos.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForPosGetWithmerchantId:targetMerchantId:storeCode:]

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** A store code that is unique per merchant. */
@property(nonatomic, copy, nullable) NSString *storeCode;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PosStore.
 *
 *  Retrieves information about the given store.
 *
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *  @param storeCode A store code that is unique per merchant.
 *
 *  @return GTLRShoppingContentQuery_PosGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                   targetMerchantId:(unsigned long long)targetMerchantId
                          storeCode:(NSString *)storeCode;

@end

/**
 *  Creates a store for the given merchant.
 *
 *  Method: content.pos.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosInsert : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForPosInsertWithObject:merchantId:targetMerchantId:]

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PosStore.
 *
 *  Creates a store for the given merchant.
 *
 *  @param object The @c GTLRShoppingContent_PosStore to include in the query.
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *
 *  @return GTLRShoppingContentQuery_PosInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_PosStore *)object
                     merchantId:(unsigned long long)merchantId
               targetMerchantId:(unsigned long long)targetMerchantId;

@end

/**
 *  Submit inventory for the given merchant.
 *
 *  Method: content.pos.inventory
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosInventory : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForPosInventoryWithObject:merchantId:targetMerchantId:]

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PosInventoryResponse.
 *
 *  Submit inventory for the given merchant.
 *
 *  @param object The @c GTLRShoppingContent_PosInventoryRequest to include in
 *    the query.
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *
 *  @return GTLRShoppingContentQuery_PosInventory
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_PosInventoryRequest *)object
                     merchantId:(unsigned long long)merchantId
               targetMerchantId:(unsigned long long)targetMerchantId;

@end

/**
 *  Lists the stores of the target merchant.
 *
 *  Method: content.pos.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForPosListWithmerchantId:targetMerchantId:]

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PosListResponse.
 *
 *  Lists the stores of the target merchant.
 *
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *
 *  @return GTLRShoppingContentQuery_PosList
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                   targetMerchantId:(unsigned long long)targetMerchantId;

@end

/**
 *  Submit a sale event for the given merchant.
 *
 *  Method: content.pos.sale
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosSale : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForPosSaleWithObject:merchantId:targetMerchantId:]

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PosSaleResponse.
 *
 *  Submit a sale event for the given merchant.
 *
 *  @param object The @c GTLRShoppingContent_PosSaleRequest to include in the
 *    query.
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *
 *  @return GTLRShoppingContentQuery_PosSale
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_PosSaleRequest *)object
                     merchantId:(unsigned long long)merchantId
               targetMerchantId:(unsigned long long)targetMerchantId;

@end

/**
 *  Retrieves, inserts, and deletes multiple products in a single request.
 *
 *  Method: content.products.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForProductsCustombatchWithObject:]

/**
 *  Fetches a @c GTLRShoppingContent_ProductsCustomBatchResponse.
 *
 *  Retrieves, inserts, and deletes multiple products in a single request.
 *
 *  @param object The @c GTLRShoppingContent_ProductsCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_ProductsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ProductsCustomBatchRequest *)object;

@end

/**
 *  Deletes a product from your Merchant Center account.
 *
 *  Method: content.products.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsDelete : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForProductsDeleteWithmerchantId:productId:]

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The REST id of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a product from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *  @param productId The REST id of the product.
 *
 *  @return GTLRShoppingContentQuery_ProductsDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Retrieves a product from your Merchant Center account.
 *
 *  Method: content.products.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForProductsGetWithmerchantId:productId:]

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The REST id of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRShoppingContent_Product.
 *
 *  Retrieves a product from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *  @param productId The REST id of the product.
 *
 *  @return GTLRShoppingContentQuery_ProductsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Uploads a product to your Merchant Center account. If an item with the same
 *  channel, contentLanguage, offerId, and targetCountry already exists, this
 *  method updates that entry.
 *
 *  Method: content.products.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsInsert : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForProductsInsertWithObject:merchantId:]

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Product.
 *
 *  Uploads a product to your Merchant Center account. If an item with the same
 *  channel, contentLanguage, offerId, and targetCountry already exists, this
 *  method updates that entry.
 *
 *  @param object The @c GTLRShoppingContent_Product to include in the query.
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_ProductsInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Product *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the products in your Merchant Center account.
 *
 *  Method: content.products.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForProductsListWithmerchantId:]

/**
 *  The maximum number of products to return in the response, used for paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that contains the products. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ProductsListResponse.
 *
 *  Lists the products in your Merchant Center account.
 *
 *  @param merchantId The ID of the account that contains the products. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_ProductsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Gets the statuses of multiple products in a single request.
 *
 *  Method: content.productstatuses.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductstatusesCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForProductstatusesCustombatchWithObject:]

/**
 *  Fetches a @c GTLRShoppingContent_ProductstatusesCustomBatchResponse.
 *
 *  Gets the statuses of multiple products in a single request.
 *
 *  @param object The @c GTLRShoppingContent_ProductstatusesCustomBatchRequest
 *    to include in the query.
 *
 *  @return GTLRShoppingContentQuery_ProductstatusesCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ProductstatusesCustomBatchRequest *)object;

@end

/**
 *  Gets the status of a product from your Merchant Center account.
 *
 *  Method: content.productstatuses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductstatusesGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForProductstatusesGetWithmerchantId:productId:]

/**
 *  If set, only issues for the specified destinations are returned, otherwise
 *  only issues for the Shopping destination.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *destinations;

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The REST id of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRShoppingContent_ProductStatus.
 *
 *  Gets the status of a product from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *  @param productId The REST id of the product.
 *
 *  @return GTLRShoppingContentQuery_ProductstatusesGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Lists the statuses of the products in your Merchant Center account.
 *
 *  Method: content.productstatuses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductstatusesList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForProductstatusesListWithmerchantId:]

/**
 *  If set, only issues for the specified destinations are returned, otherwise
 *  only issues for the Shopping destination.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *destinations;

/**
 *  The maximum number of product statuses to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that contains the products. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ProductstatusesListResponse.
 *
 *  Lists the statuses of the products in your Merchant Center account.
 *
 *  @param merchantId The ID of the account that contains the products. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_ProductstatusesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Retrieves and updates the shipping settings of multiple accounts in a single
 *  request.
 *
 *  Method: content.shippingsettings.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsCustombatch : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForShippingsettingsCustombatchWithObject:]

/**
 *  Fetches a @c GTLRShoppingContent_ShippingsettingsCustomBatchResponse.
 *
 *  Retrieves and updates the shipping settings of multiple accounts in a single
 *  request.
 *
 *  @param object The @c GTLRShoppingContent_ShippingsettingsCustomBatchRequest
 *    to include in the query.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ShippingsettingsCustomBatchRequest *)object;

@end

/**
 *  Retrieves the shipping settings of the account.
 *
 *  Method: content.shippingsettings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsGet : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForShippingsettingsGetWithmerchantId:accountId:]

/** The ID of the account for which to get/update shipping settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ShippingSettings.
 *
 *  Retrieves the shipping settings of the account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and accountId must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get/update shipping
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves supported carriers and carrier services for an account.
 *
 *  Method: content.shippingsettings.getsupportedcarriers
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsGetsupportedcarriers : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForShippingsettingsGetsupportedcarriersWithmerchantId:]

/** The ID of the account for which to retrieve the supported carriers. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_ShippingsettingsGetSupportedCarriersResponse.
 *
 *  Retrieves supported carriers and carrier services for an account.
 *
 *  @param merchantId The ID of the account for which to retrieve the supported
 *    carriers.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsGetsupportedcarriers
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Retrieves supported holidays for an account.
 *
 *  Method: content.shippingsettings.getsupportedholidays
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsGetsupportedholidays : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForShippingsettingsGetsupportedholidaysWithmerchantId:]

/** The ID of the account for which to retrieve the supported holidays. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_ShippingsettingsGetSupportedHolidaysResponse.
 *
 *  Retrieves supported holidays for an account.
 *
 *  @param merchantId The ID of the account for which to retrieve the supported
 *    holidays.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsGetsupportedholidays
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the shipping settings of the sub-accounts in your Merchant Center
 *  account.
 *
 *  Method: content.shippingsettings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsList : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForShippingsettingsListWithmerchantId:]

/**
 *  The maximum number of shipping settings to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ShippingsettingsListResponse.
 *
 *  Lists the shipping settings of the sub-accounts in your Merchant Center
 *  account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates the shipping settings of the account.
 *
 *  Method: content.shippingsettings.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsUpdate : GTLRShoppingContentQuery
// Previous library name was
//   +[GTLQueryShoppingContent queryForShippingsettingsUpdateWithObject:merchantId:accountId:]

/** The ID of the account for which to get/update shipping settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ShippingSettings.
 *
 *  Updates the shipping settings of the account.
 *
 *  @param object The @c GTLRShoppingContent_ShippingSettings to include in the
 *    query.
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and accountId must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get/update shipping
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ShippingSettings *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
