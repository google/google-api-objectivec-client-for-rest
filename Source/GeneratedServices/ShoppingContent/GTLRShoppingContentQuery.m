// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Content API for Shopping (content/v2.1)
// Description:
//   Manages product items, inventory, and Merchant Center accounts for Google
//   Shopping.
// Documentation:
//   https://developers.google.com/shopping-content

#import "GTLRShoppingContentQuery.h"

#import "GTLRShoppingContentObjects.h"

// ----------------------------------------------------------------------------
// Constants

// orderBy
NSString * const kGTLRShoppingContentOrderByPlacedDateAsc      = @"placedDate asc";
NSString * const kGTLRShoppingContentOrderByPlacedDateDesc     = @"placedDate desc";
NSString * const kGTLRShoppingContentOrderByReturnCreationTimeAsc = @"returnCreationTimeAsc";
NSString * const kGTLRShoppingContentOrderByReturnCreationTimeDesc = @"returnCreationTimeDesc";

// statuses
NSString * const kGTLRShoppingContentStatusesActive            = @"active";
NSString * const kGTLRShoppingContentStatusesCanceled          = @"canceled";
NSString * const kGTLRShoppingContentStatusesCompleted         = @"completed";
NSString * const kGTLRShoppingContentStatusesDelivered         = @"delivered";
NSString * const kGTLRShoppingContentStatusesInProgress        = @"inProgress";
NSString * const kGTLRShoppingContentStatusesPartiallyDelivered = @"partiallyDelivered";
NSString * const kGTLRShoppingContentStatusesPartiallyReturned = @"partiallyReturned";
NSString * const kGTLRShoppingContentStatusesPartiallyShipped  = @"partiallyShipped";
NSString * const kGTLRShoppingContentStatusesPendingShipment   = @"pendingShipment";
NSString * const kGTLRShoppingContentStatusesReturned          = @"returned";
NSString * const kGTLRShoppingContentStatusesShipped           = @"shipped";

// templateName
NSString * const kGTLRShoppingContentTemplateNameTemplate1  = @"template1";
NSString * const kGTLRShoppingContentTemplateNameTemplate1a = @"template1a";
NSString * const kGTLRShoppingContentTemplateNameTemplate1b = @"template1b";
NSString * const kGTLRShoppingContentTemplateNameTemplate2  = @"template2";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRShoppingContentQuery

@dynamic fields;

@end

@implementation GTLRShoppingContentQuery_AccountsAuthinfo

+ (instancetype)query {
  NSString *pathURITemplate = @"accounts/authinfo";
  GTLRShoppingContentQuery_AccountsAuthinfo *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRShoppingContent_AccountsAuthInfoResponse class];
  query.loggingName = @"content.accounts.authinfo";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsClaimwebsite

@dynamic accountId, merchantId, overwrite;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounts/{accountId}/claimwebsite";
  GTLRShoppingContentQuery_AccountsClaimwebsite *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountsClaimWebsiteResponse class];
  query.loggingName = @"content.accounts.claimwebsite";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountsCustomBatchRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"accounts/batch";
  GTLRShoppingContentQuery_AccountsCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_AccountsCustomBatchResponse class];
  query.loggingName = @"content.accounts.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsDelete

@dynamic accountId, force, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounts/{accountId}";
  GTLRShoppingContentQuery_AccountsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.loggingName = @"content.accounts.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsGet

@dynamic accountId, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounts/{accountId}";
  GTLRShoppingContentQuery_AccountsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_Account class];
  query.loggingName = @"content.accounts.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsInsert

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_Account *)object
                     merchantId:(unsigned long long)merchantId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/accounts";
  GTLRShoppingContentQuery_AccountsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_Account class];
  query.loggingName = @"content.accounts.insert";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsLink

@dynamic accountId, merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountsLinkRequest *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounts/{accountId}/link";
  GTLRShoppingContentQuery_AccountsLink *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountsLinkResponse class];
  query.loggingName = @"content.accounts.link";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsList

@dynamic maxResults, merchantId, pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/accounts";
  GTLRShoppingContentQuery_AccountsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountsListResponse class];
  query.loggingName = @"content.accounts.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountstatusesCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountstatusesCustomBatchRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"accountstatuses/batch";
  GTLRShoppingContentQuery_AccountstatusesCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_AccountstatusesCustomBatchResponse class];
  query.loggingName = @"content.accountstatuses.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountstatusesGet

@dynamic accountId, destinations, merchantId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"destinations" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accountstatuses/{accountId}";
  GTLRShoppingContentQuery_AccountstatusesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountStatus class];
  query.loggingName = @"content.accountstatuses.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountstatusesList

@dynamic destinations, maxResults, merchantId, pageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"destinations" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/accountstatuses";
  GTLRShoppingContentQuery_AccountstatusesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountstatusesListResponse class];
  query.loggingName = @"content.accountstatuses.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsUpdate

@dynamic accountId, merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_Account *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounts/{accountId}";
  GTLRShoppingContentQuery_AccountsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_Account class];
  query.loggingName = @"content.accounts.update";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccounttaxCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_AccounttaxCustomBatchRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"accounttax/batch";
  GTLRShoppingContentQuery_AccounttaxCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_AccounttaxCustomBatchResponse class];
  query.loggingName = @"content.accounttax.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccounttaxGet

@dynamic accountId, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounttax/{accountId}";
  GTLRShoppingContentQuery_AccounttaxGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountTax class];
  query.loggingName = @"content.accounttax.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccounttaxList

@dynamic maxResults, merchantId, pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/accounttax";
  GTLRShoppingContentQuery_AccounttaxList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_AccounttaxListResponse class];
  query.loggingName = @"content.accounttax.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccounttaxUpdate

@dynamic accountId, merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountTax *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounttax/{accountId}";
  GTLRShoppingContentQuery_AccounttaxUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountTax class];
  query.loggingName = @"content.accounttax.update";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedsCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_DatafeedsCustomBatchRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"datafeeds/batch";
  GTLRShoppingContentQuery_DatafeedsCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_DatafeedsCustomBatchResponse class];
  query.loggingName = @"content.datafeeds.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedsDelete

@dynamic datafeedId, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId {
  NSArray *pathParams = @[
    @"datafeedId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/datafeeds/{datafeedId}";
  GTLRShoppingContentQuery_DatafeedsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.datafeedId = datafeedId;
  query.loggingName = @"content.datafeeds.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedsFetchnow

@dynamic datafeedId, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId {
  NSArray *pathParams = @[
    @"datafeedId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/datafeeds/{datafeedId}/fetchNow";
  GTLRShoppingContentQuery_DatafeedsFetchnow *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.datafeedId = datafeedId;
  query.expectedObjectClass = [GTLRShoppingContent_DatafeedsFetchNowResponse class];
  query.loggingName = @"content.datafeeds.fetchnow";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedsGet

@dynamic datafeedId, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId {
  NSArray *pathParams = @[
    @"datafeedId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/datafeeds/{datafeedId}";
  GTLRShoppingContentQuery_DatafeedsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.datafeedId = datafeedId;
  query.expectedObjectClass = [GTLRShoppingContent_Datafeed class];
  query.loggingName = @"content.datafeeds.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedsInsert

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_Datafeed *)object
                     merchantId:(unsigned long long)merchantId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/datafeeds";
  GTLRShoppingContentQuery_DatafeedsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_Datafeed class];
  query.loggingName = @"content.datafeeds.insert";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedsList

@dynamic maxResults, merchantId, pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/datafeeds";
  GTLRShoppingContentQuery_DatafeedsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_DatafeedsListResponse class];
  query.loggingName = @"content.datafeeds.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedstatusesCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_DatafeedstatusesCustomBatchRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"datafeedstatuses/batch";
  GTLRShoppingContentQuery_DatafeedstatusesCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_DatafeedstatusesCustomBatchResponse class];
  query.loggingName = @"content.datafeedstatuses.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedstatusesGet

@dynamic country, datafeedId, language, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId {
  NSArray *pathParams = @[
    @"datafeedId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/datafeedstatuses/{datafeedId}";
  GTLRShoppingContentQuery_DatafeedstatusesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.datafeedId = datafeedId;
  query.expectedObjectClass = [GTLRShoppingContent_DatafeedStatus class];
  query.loggingName = @"content.datafeedstatuses.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedstatusesList

@dynamic maxResults, merchantId, pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/datafeedstatuses";
  GTLRShoppingContentQuery_DatafeedstatusesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_DatafeedstatusesListResponse class];
  query.loggingName = @"content.datafeedstatuses.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedsUpdate

@dynamic datafeedId, merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_Datafeed *)object
                     merchantId:(unsigned long long)merchantId
                     datafeedId:(unsigned long long)datafeedId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"datafeedId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/datafeeds/{datafeedId}";
  GTLRShoppingContentQuery_DatafeedsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.datafeedId = datafeedId;
  query.expectedObjectClass = [GTLRShoppingContent_Datafeed class];
  query.loggingName = @"content.datafeeds.update";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_LiasettingsCustomBatchRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"liasettings/batch";
  GTLRShoppingContentQuery_LiasettingsCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_LiasettingsCustomBatchResponse class];
  query.loggingName = @"content.liasettings.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsGet

@dynamic accountId, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/liasettings/{accountId}";
  GTLRShoppingContentQuery_LiasettingsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_LiaSettings class];
  query.loggingName = @"content.liasettings.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsGetaccessiblegmbaccounts

@dynamic accountId, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/liasettings/{accountId}/accessiblegmbaccounts";
  GTLRShoppingContentQuery_LiasettingsGetaccessiblegmbaccounts *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_LiasettingsGetAccessibleGmbAccountsResponse class];
  query.loggingName = @"content.liasettings.getaccessiblegmbaccounts";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsList

@dynamic maxResults, merchantId, pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/liasettings";
  GTLRShoppingContentQuery_LiasettingsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_LiasettingsListResponse class];
  query.loggingName = @"content.liasettings.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsListposdataproviders

+ (instancetype)query {
  NSString *pathURITemplate = @"liasettings/posdataproviders";
  GTLRShoppingContentQuery_LiasettingsListposdataproviders *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRShoppingContent_LiasettingsListPosDataProvidersResponse class];
  query.loggingName = @"content.liasettings.listposdataproviders";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsRequestgmbaccess

@dynamic accountId, gmbEmail, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                           gmbEmail:(NSString *)gmbEmail {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/liasettings/{accountId}/requestgmbaccess";
  GTLRShoppingContentQuery_LiasettingsRequestgmbaccess *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.gmbEmail = gmbEmail;
  query.expectedObjectClass = [GTLRShoppingContent_LiasettingsRequestGmbAccessResponse class];
  query.loggingName = @"content.liasettings.requestgmbaccess";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsRequestinventoryverification

@dynamic accountId, country, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                            country:(NSString *)country {
  NSArray *pathParams = @[
    @"accountId", @"country", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/liasettings/{accountId}/requestinventoryverification/{country}";
  GTLRShoppingContentQuery_LiasettingsRequestinventoryverification *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.country = country;
  query.expectedObjectClass = [GTLRShoppingContent_LiasettingsRequestInventoryVerificationResponse class];
  query.loggingName = @"content.liasettings.requestinventoryverification";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsSetinventoryverificationcontact

@dynamic accountId, contactEmail, contactName, country, language, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                       contactEmail:(NSString *)contactEmail
                        contactName:(NSString *)contactName
                            country:(NSString *)country
                           language:(NSString *)language {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/liasettings/{accountId}/setinventoryverificationcontact";
  GTLRShoppingContentQuery_LiasettingsSetinventoryverificationcontact *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.contactEmail = contactEmail;
  query.contactName = contactName;
  query.country = country;
  query.language = language;
  query.expectedObjectClass = [GTLRShoppingContent_LiasettingsSetInventoryVerificationContactResponse class];
  query.loggingName = @"content.liasettings.setinventoryverificationcontact";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsSetposdataprovider

@dynamic accountId, country, merchantId, posDataProviderId,
         posExternalAccountId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                            country:(NSString *)country {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/liasettings/{accountId}/setposdataprovider";
  GTLRShoppingContentQuery_LiasettingsSetposdataprovider *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.country = country;
  query.expectedObjectClass = [GTLRShoppingContent_LiasettingsSetPosDataProviderResponse class];
  query.loggingName = @"content.liasettings.setposdataprovider";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsUpdate

@dynamic accountId, merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_LiaSettings *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/liasettings/{accountId}";
  GTLRShoppingContentQuery_LiasettingsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_LiaSettings class];
  query.loggingName = @"content.liasettings.update";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderinvoicesCreatechargeinvoice

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderinvoicesCreateChargeInvoiceRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orderinvoices/{orderId}/createChargeInvoice";
  GTLRShoppingContentQuery_OrderinvoicesCreatechargeinvoice *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrderinvoicesCreateChargeInvoiceResponse class];
  query.loggingName = @"content.orderinvoices.createchargeinvoice";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderinvoicesCreaterefundinvoice

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderinvoicesCreateRefundInvoiceRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orderinvoices/{orderId}/createRefundInvoice";
  GTLRShoppingContentQuery_OrderinvoicesCreaterefundinvoice *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrderinvoicesCreateRefundInvoiceResponse class];
  query.loggingName = @"content.orderinvoices.createrefundinvoice";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderpaymentsNotifyauthapproved

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderpaymentsNotifyAuthApprovedRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orderpayments/{orderId}/notifyAuthApproved";
  GTLRShoppingContentQuery_OrderpaymentsNotifyauthapproved *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrderpaymentsNotifyAuthApprovedResponse class];
  query.loggingName = @"content.orderpayments.notifyauthapproved";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderpaymentsNotifyauthdeclined

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderpaymentsNotifyAuthDeclinedRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orderpayments/{orderId}/notifyAuthDeclined";
  GTLRShoppingContentQuery_OrderpaymentsNotifyauthdeclined *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrderpaymentsNotifyAuthDeclinedResponse class];
  query.loggingName = @"content.orderpayments.notifyauthdeclined";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderpaymentsNotifycharge

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderpaymentsNotifyChargeRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orderpayments/{orderId}/notifyCharge";
  GTLRShoppingContentQuery_OrderpaymentsNotifycharge *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrderpaymentsNotifyChargeResponse class];
  query.loggingName = @"content.orderpayments.notifycharge";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderpaymentsNotifyrefund

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderpaymentsNotifyRefundRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orderpayments/{orderId}/notifyRefund";
  GTLRShoppingContentQuery_OrderpaymentsNotifyrefund *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrderpaymentsNotifyRefundResponse class];
  query.loggingName = @"content.orderpayments.notifyrefund";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderreportsListdisbursements

@dynamic disbursementEndDate, disbursementStartDate, maxResults, merchantId,
         pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
              disbursementStartDate:(NSString *)disbursementStartDate {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/orderreports/disbursements";
  GTLRShoppingContentQuery_OrderreportsListdisbursements *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.disbursementStartDate = disbursementStartDate;
  query.expectedObjectClass = [GTLRShoppingContent_OrderreportsListDisbursementsResponse class];
  query.loggingName = @"content.orderreports.listdisbursements";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderreportsListtransactions

@dynamic disbursementId, maxResults, merchantId, pageToken, transactionEndDate,
         transactionStartDate;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                     disbursementId:(NSString *)disbursementId
               transactionStartDate:(NSString *)transactionStartDate {
  NSArray *pathParams = @[
    @"disbursementId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orderreports/disbursements/{disbursementId}/transactions";
  GTLRShoppingContentQuery_OrderreportsListtransactions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.disbursementId = disbursementId;
  query.transactionStartDate = transactionStartDate;
  query.expectedObjectClass = [GTLRShoppingContent_OrderreportsListTransactionsResponse class];
  query.loggingName = @"content.orderreports.listtransactions";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderreturnsGet

@dynamic merchantId, returnId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                           returnId:(NSString *)returnId {
  NSArray *pathParams = @[
    @"merchantId", @"returnId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orderreturns/{returnId}";
  GTLRShoppingContentQuery_OrderreturnsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.returnId = returnId;
  query.expectedObjectClass = [GTLRShoppingContent_MerchantOrderReturn class];
  query.loggingName = @"content.orderreturns.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderreturnsList

@dynamic createdEndDate, createdStartDate, maxResults, merchantId, orderBy,
         pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/orderreturns";
  GTLRShoppingContentQuery_OrderreturnsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_OrderreturnsListResponse class];
  query.loggingName = @"content.orderreturns.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersAcknowledge

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersAcknowledgeRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/acknowledge";
  GTLRShoppingContentQuery_OrdersAcknowledge *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersAcknowledgeResponse class];
  query.loggingName = @"content.orders.acknowledge";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersAdvancetestorder

@dynamic merchantId, orderId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                            orderId:(NSString *)orderId {
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/testorders/{orderId}/advance";
  GTLRShoppingContentQuery_OrdersAdvancetestorder *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersAdvanceTestOrderResponse class];
  query.loggingName = @"content.orders.advancetestorder";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersCancel

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCancelRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/cancel";
  GTLRShoppingContentQuery_OrdersCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersCancelResponse class];
  query.loggingName = @"content.orders.cancel";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersCancellineitem

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCancelLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/cancelLineItem";
  GTLRShoppingContentQuery_OrdersCancellineitem *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersCancelLineItemResponse class];
  query.loggingName = @"content.orders.cancellineitem";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersCanceltestorderbycustomer

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCancelTestOrderByCustomerRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/testorders/{orderId}/cancelByCustomer";
  GTLRShoppingContentQuery_OrdersCanceltestorderbycustomer *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersCancelTestOrderByCustomerResponse class];
  query.loggingName = @"content.orders.canceltestorderbycustomer";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersCreatetestorder

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCreateTestOrderRequest *)object
                     merchantId:(unsigned long long)merchantId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/testorders";
  GTLRShoppingContentQuery_OrdersCreatetestorder *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersCreateTestOrderResponse class];
  query.loggingName = @"content.orders.createtestorder";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersCreatetestreturn

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCreateTestReturnRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/testreturn";
  GTLRShoppingContentQuery_OrdersCreatetestreturn *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersCreateTestReturnResponse class];
  query.loggingName = @"content.orders.createtestreturn";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersGet

@dynamic merchantId, orderId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                            orderId:(NSString *)orderId {
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}";
  GTLRShoppingContentQuery_OrdersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_Order class];
  query.loggingName = @"content.orders.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersGetbymerchantorderid

@dynamic merchantId, merchantOrderId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                    merchantOrderId:(NSString *)merchantOrderId {
  NSArray *pathParams = @[
    @"merchantId", @"merchantOrderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/ordersbymerchantid/{merchantOrderId}";
  GTLRShoppingContentQuery_OrdersGetbymerchantorderid *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.merchantOrderId = merchantOrderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersGetByMerchantOrderIdResponse class];
  query.loggingName = @"content.orders.getbymerchantorderid";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersGettestordertemplate

@dynamic country, merchantId, templateName;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                       templateName:(NSString *)templateName {
  NSArray *pathParams = @[
    @"merchantId", @"templateName"
  ];
  NSString *pathURITemplate = @"{merchantId}/testordertemplates/{templateName}";
  GTLRShoppingContentQuery_OrdersGettestordertemplate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.templateName = templateName;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersGetTestOrderTemplateResponse class];
  query.loggingName = @"content.orders.gettestordertemplate";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersInstorerefundlineitem

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersInStoreRefundLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/inStoreRefundLineItem";
  GTLRShoppingContentQuery_OrdersInstorerefundlineitem *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersInStoreRefundLineItemResponse class];
  query.loggingName = @"content.orders.instorerefundlineitem";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersList

@dynamic acknowledged, maxResults, merchantId, orderBy, pageToken,
         placedDateEnd, placedDateStart, statuses;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statuses" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/orders";
  GTLRShoppingContentQuery_OrdersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersListResponse class];
  query.loggingName = @"content.orders.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersRejectreturnlineitem

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersRejectReturnLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/rejectReturnLineItem";
  GTLRShoppingContentQuery_OrdersRejectreturnlineitem *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersRejectReturnLineItemResponse class];
  query.loggingName = @"content.orders.rejectreturnlineitem";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersReturnrefundlineitem

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersReturnRefundLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/returnRefundLineItem";
  GTLRShoppingContentQuery_OrdersReturnrefundlineitem *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersReturnRefundLineItemResponse class];
  query.loggingName = @"content.orders.returnrefundlineitem";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersSetlineitemmetadata

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersSetLineItemMetadataRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/setLineItemMetadata";
  GTLRShoppingContentQuery_OrdersSetlineitemmetadata *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersSetLineItemMetadataResponse class];
  query.loggingName = @"content.orders.setlineitemmetadata";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersShiplineitems

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersShipLineItemsRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/shipLineItems";
  GTLRShoppingContentQuery_OrdersShiplineitems *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersShipLineItemsResponse class];
  query.loggingName = @"content.orders.shiplineitems";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersUpdatelineitemshippingdetails

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersUpdateLineItemShippingDetailsRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/updateLineItemShippingDetails";
  GTLRShoppingContentQuery_OrdersUpdatelineitemshippingdetails *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersUpdateLineItemShippingDetailsResponse class];
  query.loggingName = @"content.orders.updatelineitemshippingdetails";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersUpdatemerchantorderid

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersUpdateMerchantOrderIdRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/updateMerchantOrderId";
  GTLRShoppingContentQuery_OrdersUpdatemerchantorderid *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersUpdateMerchantOrderIdResponse class];
  query.loggingName = @"content.orders.updatemerchantorderid";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersUpdateshipment

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersUpdateShipmentRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/updateShipment";
  GTLRShoppingContentQuery_OrdersUpdateshipment *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersUpdateShipmentResponse class];
  query.loggingName = @"content.orders.updateshipment";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PosCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_PosCustomBatchRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"pos/batch";
  GTLRShoppingContentQuery_PosCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_PosCustomBatchResponse class];
  query.loggingName = @"content.pos.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PosDelete

@dynamic merchantId, storeCode, targetMerchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                   targetMerchantId:(unsigned long long)targetMerchantId
                          storeCode:(NSString *)storeCode {
  NSArray *pathParams = @[
    @"merchantId", @"storeCode", @"targetMerchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/pos/{targetMerchantId}/store/{storeCode}";
  GTLRShoppingContentQuery_PosDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.targetMerchantId = targetMerchantId;
  query.storeCode = storeCode;
  query.loggingName = @"content.pos.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PosGet

@dynamic merchantId, storeCode, targetMerchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                   targetMerchantId:(unsigned long long)targetMerchantId
                          storeCode:(NSString *)storeCode {
  NSArray *pathParams = @[
    @"merchantId", @"storeCode", @"targetMerchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/pos/{targetMerchantId}/store/{storeCode}";
  GTLRShoppingContentQuery_PosGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.targetMerchantId = targetMerchantId;
  query.storeCode = storeCode;
  query.expectedObjectClass = [GTLRShoppingContent_PosStore class];
  query.loggingName = @"content.pos.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PosInsert

@dynamic merchantId, targetMerchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_PosStore *)object
                     merchantId:(unsigned long long)merchantId
               targetMerchantId:(unsigned long long)targetMerchantId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"targetMerchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/pos/{targetMerchantId}/store";
  GTLRShoppingContentQuery_PosInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.targetMerchantId = targetMerchantId;
  query.expectedObjectClass = [GTLRShoppingContent_PosStore class];
  query.loggingName = @"content.pos.insert";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PosInventory

@dynamic merchantId, targetMerchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_PosInventoryRequest *)object
                     merchantId:(unsigned long long)merchantId
               targetMerchantId:(unsigned long long)targetMerchantId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"targetMerchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/pos/{targetMerchantId}/inventory";
  GTLRShoppingContentQuery_PosInventory *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.targetMerchantId = targetMerchantId;
  query.expectedObjectClass = [GTLRShoppingContent_PosInventoryResponse class];
  query.loggingName = @"content.pos.inventory";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PosList

@dynamic merchantId, targetMerchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                   targetMerchantId:(unsigned long long)targetMerchantId {
  NSArray *pathParams = @[
    @"merchantId", @"targetMerchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/pos/{targetMerchantId}/store";
  GTLRShoppingContentQuery_PosList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.targetMerchantId = targetMerchantId;
  query.expectedObjectClass = [GTLRShoppingContent_PosListResponse class];
  query.loggingName = @"content.pos.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PosSale

@dynamic merchantId, targetMerchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_PosSaleRequest *)object
                     merchantId:(unsigned long long)merchantId
               targetMerchantId:(unsigned long long)targetMerchantId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"targetMerchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/pos/{targetMerchantId}/sale";
  GTLRShoppingContentQuery_PosSale *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.targetMerchantId = targetMerchantId;
  query.expectedObjectClass = [GTLRShoppingContent_PosSaleResponse class];
  query.loggingName = @"content.pos.sale";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductsCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_ProductsCustomBatchRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"products/batch";
  GTLRShoppingContentQuery_ProductsCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_ProductsCustomBatchResponse class];
  query.loggingName = @"content.products.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductsDelete

@dynamic merchantId, productId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"merchantId", @"productId"
  ];
  NSString *pathURITemplate = @"{merchantId}/products/{productId}";
  GTLRShoppingContentQuery_ProductsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.productId = productId;
  query.loggingName = @"content.products.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductsGet

@dynamic merchantId, productId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"merchantId", @"productId"
  ];
  NSString *pathURITemplate = @"{merchantId}/products/{productId}";
  GTLRShoppingContentQuery_ProductsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.productId = productId;
  query.expectedObjectClass = [GTLRShoppingContent_Product class];
  query.loggingName = @"content.products.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductsInsert

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_Product *)object
                     merchantId:(unsigned long long)merchantId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/products";
  GTLRShoppingContentQuery_ProductsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_Product class];
  query.loggingName = @"content.products.insert";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductsList

@dynamic maxResults, merchantId, pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/products";
  GTLRShoppingContentQuery_ProductsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ProductsListResponse class];
  query.loggingName = @"content.products.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductstatusesCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_ProductstatusesCustomBatchRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"productstatuses/batch";
  GTLRShoppingContentQuery_ProductstatusesCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_ProductstatusesCustomBatchResponse class];
  query.loggingName = @"content.productstatuses.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductstatusesGet

@dynamic destinations, merchantId, productId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"destinations" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"merchantId", @"productId"
  ];
  NSString *pathURITemplate = @"{merchantId}/productstatuses/{productId}";
  GTLRShoppingContentQuery_ProductstatusesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.productId = productId;
  query.expectedObjectClass = [GTLRShoppingContent_ProductStatus class];
  query.loggingName = @"content.productstatuses.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductstatusesList

@dynamic destinations, maxResults, merchantId, pageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"destinations" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/productstatuses";
  GTLRShoppingContentQuery_ProductstatusesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ProductstatusesListResponse class];
  query.loggingName = @"content.productstatuses.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ShippingsettingsCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_ShippingsettingsCustomBatchRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"shippingsettings/batch";
  GTLRShoppingContentQuery_ShippingsettingsCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_ShippingsettingsCustomBatchResponse class];
  query.loggingName = @"content.shippingsettings.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ShippingsettingsGet

@dynamic accountId, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/shippingsettings/{accountId}";
  GTLRShoppingContentQuery_ShippingsettingsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_ShippingSettings class];
  query.loggingName = @"content.shippingsettings.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ShippingsettingsGetsupportedcarriers

@dynamic merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/supportedCarriers";
  GTLRShoppingContentQuery_ShippingsettingsGetsupportedcarriers *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ShippingsettingsGetSupportedCarriersResponse class];
  query.loggingName = @"content.shippingsettings.getsupportedcarriers";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ShippingsettingsGetsupportedholidays

@dynamic merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/supportedHolidays";
  GTLRShoppingContentQuery_ShippingsettingsGetsupportedholidays *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ShippingsettingsGetSupportedHolidaysResponse class];
  query.loggingName = @"content.shippingsettings.getsupportedholidays";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ShippingsettingsList

@dynamic maxResults, merchantId, pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/shippingsettings";
  GTLRShoppingContentQuery_ShippingsettingsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ShippingsettingsListResponse class];
  query.loggingName = @"content.shippingsettings.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ShippingsettingsUpdate

@dynamic accountId, merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_ShippingSettings *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/shippingsettings/{accountId}";
  GTLRShoppingContentQuery_ShippingsettingsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_ShippingSettings class];
  query.loggingName = @"content.shippingsettings.update";
  return query;
}

@end
