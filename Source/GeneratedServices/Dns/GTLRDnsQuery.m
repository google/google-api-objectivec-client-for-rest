// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Cloud DNS API (dns/v1)
// Description:
//   Configures and serves authoritative DNS records.
// Documentation:
//   https://developers.google.com/cloud-dns

#import "GTLRDnsQuery.h"

#import "GTLRDnsObjects.h"

// ----------------------------------------------------------------------------
// Constants

// sortBy
NSString * const kGTLRDnsSortByChangeSequence = @"changeSequence";
NSString * const kGTLRDnsSortById             = @"id";
NSString * const kGTLRDnsSortByStartTime      = @"startTime";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRDnsQuery

@dynamic fields;

@end

@implementation GTLRDnsQuery_ChangesCreate

@dynamic clientOperationId, managedZone, project;

+ (instancetype)queryWithObject:(GTLRDns_Change *)object
                        project:(NSString *)project
                    managedZone:(NSString *)managedZone {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"managedZone", @"project"
  ];
  NSString *pathURITemplate = @"{project}/managedZones/{managedZone}/changes";
  GTLRDnsQuery_ChangesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.managedZone = managedZone;
  query.expectedObjectClass = [GTLRDns_Change class];
  query.loggingName = @"dns.changes.create";
  return query;
}

@end

@implementation GTLRDnsQuery_ChangesGet

@dynamic changeId, clientOperationId, managedZone, project;

+ (instancetype)queryWithProject:(NSString *)project
                     managedZone:(NSString *)managedZone
                        changeId:(NSString *)changeId {
  NSArray *pathParams = @[
    @"changeId", @"managedZone", @"project"
  ];
  NSString *pathURITemplate = @"{project}/managedZones/{managedZone}/changes/{changeId}";
  GTLRDnsQuery_ChangesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.managedZone = managedZone;
  query.changeId = changeId;
  query.expectedObjectClass = [GTLRDns_Change class];
  query.loggingName = @"dns.changes.get";
  return query;
}

@end

@implementation GTLRDnsQuery_ChangesList

@dynamic managedZone, maxResults, pageToken, project, sortBy, sortOrder;

+ (instancetype)queryWithProject:(NSString *)project
                     managedZone:(NSString *)managedZone {
  NSArray *pathParams = @[
    @"managedZone", @"project"
  ];
  NSString *pathURITemplate = @"{project}/managedZones/{managedZone}/changes";
  GTLRDnsQuery_ChangesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.managedZone = managedZone;
  query.expectedObjectClass = [GTLRDns_ChangesListResponse class];
  query.loggingName = @"dns.changes.list";
  return query;
}

@end

@implementation GTLRDnsQuery_DnsKeysGet

@dynamic clientOperationId, digestType, dnsKeyId, managedZone, project;

+ (instancetype)queryWithProject:(NSString *)project
                     managedZone:(NSString *)managedZone
                        dnsKeyId:(NSString *)dnsKeyId {
  NSArray *pathParams = @[
    @"dnsKeyId", @"managedZone", @"project"
  ];
  NSString *pathURITemplate = @"{project}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}";
  GTLRDnsQuery_DnsKeysGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.managedZone = managedZone;
  query.dnsKeyId = dnsKeyId;
  query.expectedObjectClass = [GTLRDns_DnsKey class];
  query.loggingName = @"dns.dnsKeys.get";
  return query;
}

@end

@implementation GTLRDnsQuery_DnsKeysList

@dynamic digestType, managedZone, maxResults, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project
                     managedZone:(NSString *)managedZone {
  NSArray *pathParams = @[
    @"managedZone", @"project"
  ];
  NSString *pathURITemplate = @"{project}/managedZones/{managedZone}/dnsKeys";
  GTLRDnsQuery_DnsKeysList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.managedZone = managedZone;
  query.expectedObjectClass = [GTLRDns_DnsKeysListResponse class];
  query.loggingName = @"dns.dnsKeys.list";
  return query;
}

@end

@implementation GTLRDnsQuery_ManagedZoneOperationsGet

@dynamic clientOperationId, managedZone, operation, project;

+ (instancetype)queryWithProject:(NSString *)project
                     managedZone:(NSString *)managedZone
                       operation:(NSString *)operation {
  NSArray *pathParams = @[
    @"managedZone", @"operation", @"project"
  ];
  NSString *pathURITemplate = @"{project}/managedZones/{managedZone}/operations/{operation}";
  GTLRDnsQuery_ManagedZoneOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.managedZone = managedZone;
  query.operation = operation;
  query.expectedObjectClass = [GTLRDns_Operation class];
  query.loggingName = @"dns.managedZoneOperations.get";
  return query;
}

@end

@implementation GTLRDnsQuery_ManagedZoneOperationsList

@dynamic managedZone, maxResults, pageToken, project, sortBy;

+ (instancetype)queryWithProject:(NSString *)project
                     managedZone:(NSString *)managedZone {
  NSArray *pathParams = @[
    @"managedZone", @"project"
  ];
  NSString *pathURITemplate = @"{project}/managedZones/{managedZone}/operations";
  GTLRDnsQuery_ManagedZoneOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.managedZone = managedZone;
  query.expectedObjectClass = [GTLRDns_ManagedZoneOperationsListResponse class];
  query.loggingName = @"dns.managedZoneOperations.list";
  return query;
}

@end

@implementation GTLRDnsQuery_ManagedZonesCreate

@dynamic clientOperationId, project;

+ (instancetype)queryWithObject:(GTLRDns_ManagedZone *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/managedZones";
  GTLRDnsQuery_ManagedZonesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRDns_ManagedZone class];
  query.loggingName = @"dns.managedZones.create";
  return query;
}

@end

@implementation GTLRDnsQuery_ManagedZonesDelete

@dynamic clientOperationId, managedZone, project;

+ (instancetype)queryWithProject:(NSString *)project
                     managedZone:(NSString *)managedZone {
  NSArray *pathParams = @[
    @"managedZone", @"project"
  ];
  NSString *pathURITemplate = @"{project}/managedZones/{managedZone}";
  GTLRDnsQuery_ManagedZonesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.managedZone = managedZone;
  query.loggingName = @"dns.managedZones.delete";
  return query;
}

@end

@implementation GTLRDnsQuery_ManagedZonesGet

@dynamic clientOperationId, managedZone, project;

+ (instancetype)queryWithProject:(NSString *)project
                     managedZone:(NSString *)managedZone {
  NSArray *pathParams = @[
    @"managedZone", @"project"
  ];
  NSString *pathURITemplate = @"{project}/managedZones/{managedZone}";
  GTLRDnsQuery_ManagedZonesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.managedZone = managedZone;
  query.expectedObjectClass = [GTLRDns_ManagedZone class];
  query.loggingName = @"dns.managedZones.get";
  return query;
}

@end

@implementation GTLRDnsQuery_ManagedZonesList

@dynamic dnsName, maxResults, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/managedZones";
  GTLRDnsQuery_ManagedZonesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRDns_ManagedZonesListResponse class];
  query.loggingName = @"dns.managedZones.list";
  return query;
}

@end

@implementation GTLRDnsQuery_ManagedZonesPatch

@dynamic clientOperationId, managedZone, project;

+ (instancetype)queryWithObject:(GTLRDns_ManagedZone *)object
                        project:(NSString *)project
                    managedZone:(NSString *)managedZone {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"managedZone", @"project"
  ];
  NSString *pathURITemplate = @"{project}/managedZones/{managedZone}";
  GTLRDnsQuery_ManagedZonesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.managedZone = managedZone;
  query.expectedObjectClass = [GTLRDns_Operation class];
  query.loggingName = @"dns.managedZones.patch";
  return query;
}

@end

@implementation GTLRDnsQuery_ManagedZonesUpdate

@dynamic clientOperationId, managedZone, project;

+ (instancetype)queryWithObject:(GTLRDns_ManagedZone *)object
                        project:(NSString *)project
                    managedZone:(NSString *)managedZone {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"managedZone", @"project"
  ];
  NSString *pathURITemplate = @"{project}/managedZones/{managedZone}";
  GTLRDnsQuery_ManagedZonesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.managedZone = managedZone;
  query.expectedObjectClass = [GTLRDns_Operation class];
  query.loggingName = @"dns.managedZones.update";
  return query;
}

@end

@implementation GTLRDnsQuery_ProjectsGet

@dynamic clientOperationId, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}";
  GTLRDnsQuery_ProjectsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRDns_Project class];
  query.loggingName = @"dns.projects.get";
  return query;
}

@end

@implementation GTLRDnsQuery_ResourceRecordSetsList

@dynamic managedZone, maxResults, name, pageToken, project, type;

+ (instancetype)queryWithProject:(NSString *)project
                     managedZone:(NSString *)managedZone {
  NSArray *pathParams = @[
    @"managedZone", @"project"
  ];
  NSString *pathURITemplate = @"{project}/managedZones/{managedZone}/rrsets";
  GTLRDnsQuery_ResourceRecordSetsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.managedZone = managedZone;
  query.expectedObjectClass = [GTLRDns_ResourceRecordSetsListResponse class];
  query.loggingName = @"dns.resourceRecordSets.list";
  return query;
}

@end
