// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Eventarc API (eventarc/v1beta1)
// Documentation:
//   https://cloud.google.com/eventarc

#import "GTLREventarcQuery.h"

#import "GTLREventarcObjects.h"

@implementation GTLREventarcQuery

@dynamic fields;

@end

@implementation GTLREventarcQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta1/{+name}";
  GTLREventarcQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLREventarc_Location class];
  query.loggingName = @"eventarc.projects.locations.get";
  return query;
}

@end

@implementation GTLREventarcQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta1/{+name}/locations";
  GTLREventarcQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLREventarc_ListLocationsResponse class];
  query.loggingName = @"eventarc.projects.locations.list";
  return query;
}

@end

@implementation GTLREventarcQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLREventarc_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta1/{+name}:cancel";
  GTLREventarcQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLREventarc_Empty class];
  query.loggingName = @"eventarc.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLREventarcQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta1/{+name}";
  GTLREventarcQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLREventarc_Empty class];
  query.loggingName = @"eventarc.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLREventarcQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta1/{+name}";
  GTLREventarcQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLREventarc_Operation class];
  query.loggingName = @"eventarc.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLREventarcQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta1/{+name}/operations";
  GTLREventarcQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLREventarc_ListOperationsResponse class];
  query.loggingName = @"eventarc.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLREventarcQuery_ProjectsLocationsTriggersCreate

@dynamic parent, triggerId;

+ (instancetype)queryWithObject:(GTLREventarc_Trigger *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta1/{+parent}/triggers";
  GTLREventarcQuery_ProjectsLocationsTriggersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLREventarc_Operation class];
  query.loggingName = @"eventarc.projects.locations.triggers.create";
  return query;
}

@end

@implementation GTLREventarcQuery_ProjectsLocationsTriggersDelete

@dynamic ETag, name;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta1/{+name}";
  GTLREventarcQuery_ProjectsLocationsTriggersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLREventarc_Operation class];
  query.loggingName = @"eventarc.projects.locations.triggers.delete";
  return query;
}

@end

@implementation GTLREventarcQuery_ProjectsLocationsTriggersGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta1/{+name}";
  GTLREventarcQuery_ProjectsLocationsTriggersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLREventarc_Trigger class];
  query.loggingName = @"eventarc.projects.locations.triggers.get";
  return query;
}

@end

@implementation GTLREventarcQuery_ProjectsLocationsTriggersGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1beta1/{+resource}:getIamPolicy";
  GTLREventarcQuery_ProjectsLocationsTriggersGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLREventarc_Policy class];
  query.loggingName = @"eventarc.projects.locations.triggers.getIamPolicy";
  return query;
}

@end

@implementation GTLREventarcQuery_ProjectsLocationsTriggersList

@dynamic orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta1/{+parent}/triggers";
  GTLREventarcQuery_ProjectsLocationsTriggersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLREventarc_ListTriggersResponse class];
  query.loggingName = @"eventarc.projects.locations.triggers.list";
  return query;
}

@end

@implementation GTLREventarcQuery_ProjectsLocationsTriggersPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLREventarc_Trigger *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta1/{+name}";
  GTLREventarcQuery_ProjectsLocationsTriggersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLREventarc_Operation class];
  query.loggingName = @"eventarc.projects.locations.triggers.patch";
  return query;
}

@end

@implementation GTLREventarcQuery_ProjectsLocationsTriggersSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLREventarc_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1beta1/{+resource}:setIamPolicy";
  GTLREventarcQuery_ProjectsLocationsTriggersSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLREventarc_Policy class];
  query.loggingName = @"eventarc.projects.locations.triggers.setIamPolicy";
  return query;
}

@end

@implementation GTLREventarcQuery_ProjectsLocationsTriggersTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLREventarc_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1beta1/{+resource}:testIamPermissions";
  GTLREventarcQuery_ProjectsLocationsTriggersTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLREventarc_TestIamPermissionsResponse class];
  query.loggingName = @"eventarc.projects.locations.triggers.testIamPermissions";
  return query;
}

@end
