// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Testing API (testing/v1)
// Description:
//   Allows developers to run automated tests for their mobile applications on
//   Google infrastructure.
// Documentation:
//   https://developers.google.com/cloud-test-lab/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRTesting_Account;
@class GTLRTesting_AndroidDevice;
@class GTLRTesting_AndroidDeviceCatalog;
@class GTLRTesting_AndroidDeviceList;
@class GTLRTesting_AndroidInstrumentationTest;
@class GTLRTesting_AndroidMatrix;
@class GTLRTesting_AndroidModel;
@class GTLRTesting_AndroidRoboTest;
@class GTLRTesting_AndroidRuntimeConfiguration;
@class GTLRTesting_AndroidTestLoop;
@class GTLRTesting_AndroidVersion;
@class GTLRTesting_Apk;
@class GTLRTesting_ApkDetail;
@class GTLRTesting_ApkManifest;
@class GTLRTesting_AppBundle;
@class GTLRTesting_ClientInfo;
@class GTLRTesting_ClientInfoDetail;
@class GTLRTesting_Date;
@class GTLRTesting_DeviceFile;
@class GTLRTesting_Distribution;
@class GTLRTesting_Environment;
@class GTLRTesting_EnvironmentMatrix;
@class GTLRTesting_EnvironmentVariable;
@class GTLRTesting_FileReference;
@class GTLRTesting_GoogleAuto;
@class GTLRTesting_GoogleCloudStorage;
@class GTLRTesting_IntentFilter;
@class GTLRTesting_IosDevice;
@class GTLRTesting_IosDeviceCatalog;
@class GTLRTesting_IosDeviceList;
@class GTLRTesting_IosModel;
@class GTLRTesting_IosRuntimeConfiguration;
@class GTLRTesting_IosTestSetup;
@class GTLRTesting_IosVersion;
@class GTLRTesting_IosXcTest;
@class GTLRTesting_LauncherActivityIntent;
@class GTLRTesting_Locale;
@class GTLRTesting_NetworkConfiguration;
@class GTLRTesting_NetworkConfigurationCatalog;
@class GTLRTesting_ObbFile;
@class GTLRTesting_Orientation;
@class GTLRTesting_ProvidedSoftwareCatalog;
@class GTLRTesting_RegularFile;
@class GTLRTesting_ResultStorage;
@class GTLRTesting_RoboDirective;
@class GTLRTesting_RoboStartingIntent;
@class GTLRTesting_StartActivityIntent;
@class GTLRTesting_TestDetails;
@class GTLRTesting_TestExecution;
@class GTLRTesting_TestSetup;
@class GTLRTesting_TestSpecification;
@class GTLRTesting_ToolResultsExecution;
@class GTLRTesting_ToolResultsHistory;
@class GTLRTesting_ToolResultsStep;
@class GTLRTesting_TrafficRule;
@class GTLRTesting_XcodeVersion;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRTesting_AndroidInstrumentationTest.orchestratorOption

/**
 *  Run test without using orchestrator.
 *
 *  Value: "DO_NOT_USE_ORCHESTRATOR"
 */
GTLR_EXTERN NSString * const kGTLRTesting_AndroidInstrumentationTest_OrchestratorOption_DoNotUseOrchestrator;
/**
 *  Default value: the server will choose the mode. Currently implies that
 *  the test will run without the orchestrator. In the future,
 *  all instrumentation tests will be run with the orchestrator.
 *  Using the orchestrator is highly encouraged because of all the benefits it
 *  offers.
 *
 *  Value: "ORCHESTRATOR_OPTION_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_AndroidInstrumentationTest_OrchestratorOption_OrchestratorOptionUnspecified;
/**
 *  Run test using orchestrator.
 *  ** Only compatible with AndroidJUnitRunner version 1.0 or higher! **
 *  Recommended.
 *
 *  Value: "USE_ORCHESTRATOR"
 */
GTLR_EXTERN NSString * const kGTLRTesting_AndroidInstrumentationTest_OrchestratorOption_UseOrchestrator;

// ----------------------------------------------------------------------------
// GTLRTesting_AndroidModel.form

/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "DEVICE_FORM_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_AndroidModel_Form_DeviceFormUnspecified;
/**
 *  Actual hardware.
 *
 *  Value: "PHYSICAL"
 */
GTLR_EXTERN NSString * const kGTLRTesting_AndroidModel_Form_Physical;
/**
 *  A software stack that simulates the device.
 *
 *  Value: "VIRTUAL"
 */
GTLR_EXTERN NSString * const kGTLRTesting_AndroidModel_Form_Virtual;

// ----------------------------------------------------------------------------
// GTLRTesting_AndroidModel.formFactor

/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "DEVICE_FORM_FACTOR_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_AndroidModel_FormFactor_DeviceFormFactorUnspecified;
/**
 *  This device has the shape of a phone.
 *
 *  Value: "PHONE"
 */
GTLR_EXTERN NSString * const kGTLRTesting_AndroidModel_FormFactor_Phone;
/**
 *  This device has the shape of a tablet.
 *
 *  Value: "TABLET"
 */
GTLR_EXTERN NSString * const kGTLRTesting_AndroidModel_FormFactor_Tablet;
/**
 *  This device has the shape of a watch or other wearable.
 *
 *  Value: "WEARABLE"
 */
GTLR_EXTERN NSString * const kGTLRTesting_AndroidModel_FormFactor_Wearable;

// ----------------------------------------------------------------------------
// GTLRTesting_CancelTestMatrixResponse.testState

/**
 *  The user cancelled the execution.
 *  Can only be set on an execution.
 *
 *  Value: "CANCELLED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_Cancelled;
/**
 *  The execution or matrix has stopped because it encountered an
 *  infrastructure failure.
 *
 *  Value: "ERROR"
 */
GTLR_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_Error;
/**
 *  The execution or matrix has terminated normally.
 *  On a matrix this means that the matrix level processing completed normally,
 *  but individual executions may be in an ERROR state.
 *
 *  Value: "FINISHED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_Finished;
/**
 *  The execution was not run because the provided inputs are incompatible with
 *  the requested architecture.
 *  Example: requested device does not support running the native code in
 *  the supplied APK
 *  Can only be set on an execution.
 *
 *  Value: "INCOMPATIBLE_ARCHITECTURE"
 */
GTLR_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_IncompatibleArchitecture;
/**
 *  The execution was not run because the provided inputs are incompatible with
 *  the requested environment.
 *  Example: requested AndroidVersion is lower than APK's minSdkVersion
 *  Can only be set on an execution.
 *
 *  Value: "INCOMPATIBLE_ENVIRONMENT"
 */
GTLR_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_IncompatibleEnvironment;
/**
 *  The execution or matrix was not run because the provided inputs are not
 *  valid.
 *  Examples: input file is not of the expected type, is malformed/corrupt, or
 *  was flagged as malware
 *
 *  Value: "INVALID"
 */
GTLR_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_Invalid;
/**
 *  The execution or matrix is waiting for resources to become available.
 *
 *  Value: "PENDING"
 */
GTLR_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_Pending;
/**
 *  The execution is currently being processed.
 *  Can only be set on an execution.
 *
 *  Value: "RUNNING"
 */
GTLR_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_Running;
/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "TEST_STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_TestStateUnspecified;
/**
 *  The execution was not run because it corresponds to a unsupported
 *  environment.
 *  Can only be set on an execution.
 *
 *  Value: "UNSUPPORTED_ENVIRONMENT"
 */
GTLR_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_UnsupportedEnvironment;
/**
 *  The execution or matrix is being validated.
 *
 *  Value: "VALIDATING"
 */
GTLR_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_Validating;

// ----------------------------------------------------------------------------
// GTLRTesting_IosModel.formFactor

/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "DEVICE_FORM_FACTOR_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_IosModel_FormFactor_DeviceFormFactorUnspecified;
/**
 *  This device has the shape of a phone.
 *
 *  Value: "PHONE"
 */
GTLR_EXTERN NSString * const kGTLRTesting_IosModel_FormFactor_Phone;
/**
 *  This device has the shape of a tablet.
 *
 *  Value: "TABLET"
 */
GTLR_EXTERN NSString * const kGTLRTesting_IosModel_FormFactor_Tablet;
/**
 *  This device has the shape of a watch or other wearable.
 *
 *  Value: "WEARABLE"
 */
GTLR_EXTERN NSString * const kGTLRTesting_IosModel_FormFactor_Wearable;

// ----------------------------------------------------------------------------
// GTLRTesting_RoboDirective.actionType

/**
 *  DO NOT USE. For proto versioning only.
 *
 *  Value: "ACTION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_RoboDirective_ActionType_ActionTypeUnspecified;
/**
 *  Direct Robo to enter text on the specified element. No-op if specified
 *  element is not enabled or does not allow text entry.
 *
 *  Value: "ENTER_TEXT"
 */
GTLR_EXTERN NSString * const kGTLRTesting_RoboDirective_ActionType_EnterText;
/**
 *  Direct Robo to click on the specified element. No-op if specified element
 *  is not clickable.
 *
 *  Value: "SINGLE_CLICK"
 */
GTLR_EXTERN NSString * const kGTLRTesting_RoboDirective_ActionType_SingleClick;

// ----------------------------------------------------------------------------
// GTLRTesting_TestExecution.state

/**
 *  The user cancelled the execution.
 *  Can only be set on an execution.
 *
 *  Value: "CANCELLED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestExecution_State_Cancelled;
/**
 *  The execution or matrix has stopped because it encountered an
 *  infrastructure failure.
 *
 *  Value: "ERROR"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestExecution_State_Error;
/**
 *  The execution or matrix has terminated normally.
 *  On a matrix this means that the matrix level processing completed normally,
 *  but individual executions may be in an ERROR state.
 *
 *  Value: "FINISHED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestExecution_State_Finished;
/**
 *  The execution was not run because the provided inputs are incompatible with
 *  the requested architecture.
 *  Example: requested device does not support running the native code in
 *  the supplied APK
 *  Can only be set on an execution.
 *
 *  Value: "INCOMPATIBLE_ARCHITECTURE"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestExecution_State_IncompatibleArchitecture;
/**
 *  The execution was not run because the provided inputs are incompatible with
 *  the requested environment.
 *  Example: requested AndroidVersion is lower than APK's minSdkVersion
 *  Can only be set on an execution.
 *
 *  Value: "INCOMPATIBLE_ENVIRONMENT"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestExecution_State_IncompatibleEnvironment;
/**
 *  The execution or matrix was not run because the provided inputs are not
 *  valid.
 *  Examples: input file is not of the expected type, is malformed/corrupt, or
 *  was flagged as malware
 *
 *  Value: "INVALID"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestExecution_State_Invalid;
/**
 *  The execution or matrix is waiting for resources to become available.
 *
 *  Value: "PENDING"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestExecution_State_Pending;
/**
 *  The execution is currently being processed.
 *  Can only be set on an execution.
 *
 *  Value: "RUNNING"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestExecution_State_Running;
/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "TEST_STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestExecution_State_TestStateUnspecified;
/**
 *  The execution was not run because it corresponds to a unsupported
 *  environment.
 *  Can only be set on an execution.
 *
 *  Value: "UNSUPPORTED_ENVIRONMENT"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestExecution_State_UnsupportedEnvironment;
/**
 *  The execution or matrix is being validated.
 *
 *  Value: "VALIDATING"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestExecution_State_Validating;

// ----------------------------------------------------------------------------
// GTLRTesting_TestMatrix.invalidMatrixDetails

/**
 *  The zipped XCTest was built for the iOS simulator rather than for a
 *  physical device.
 *
 *  Value: "BUILT_FOR_IOS_SIMULATOR"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_BuiltForIosSimulator;
/**
 *  The matrix is INVALID, but there are no further details available.
 *
 *  Value: "DETAILS_UNAVAILABLE"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_DetailsUnavailable;
/**
 *  Device administrator applications are not allowed.
 *
 *  Value: "DEVICE_ADMIN_RECEIVER"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_DeviceAdminReceiver;
/**
 *  The app declares one or more permissions that are not allowed.
 *
 *  Value: "FORBIDDEN_PERMISSIONS"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_ForbiddenPermissions;
/**
 *  The test runner class specified by user or in the test APK's manifest file
 *  is not compatible with Android Test Orchestrator.
 *  Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
 *  higher.
 *  Orchestrator can be disabled by using DO_NOT_USE_ORCHESTRATOR
 *  OrchestratorOption.
 *
 *  Value: "INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_InstrumentationOrchestratorIncompatible;
/**
 *  APK is built for a preview SDK which is unsupported
 *
 *  Value: "INVALID_APK_PREVIEW_SDK"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidApkPreviewSdk;
/**
 *  Either the provided input APK path was malformed,
 *  the APK file does not exist, or the user does not have permission to
 *  access the APK file.
 *
 *  Value: "INVALID_INPUT_APK"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidInputApk;
/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "INVALID_MATRIX_DETAILS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidMatrixDetailsUnspecified;
/**
 *  There is a conflict in the provided robo_directives.
 *
 *  Value: "INVALID_ROBO_DIRECTIVES"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidRoboDirectives;
/**
 *  The input app APK could not be parsed.
 *
 *  Value: "MALFORMED_APK"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedApk;
/**
 *  The input IPA could not be parsed.
 *  Deprecated and not currently used.
 *
 *  Value: "MALFORMED_IPA"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedIpa;
/**
 *  The input test APK could not be parsed.
 *
 *  Value: "MALFORMED_TEST_APK"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedTestApk;
/**
 *  The zipped XCTest was malformed. The zip did not contain a single
 *  .xctestrun file and the contents of the DerivedData/Build/Products
 *  directory.
 *
 *  Value: "MALFORMED_XC_TEST_ZIP"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedXcTestZip;
/**
 *  APK contains no code.
 *  See also
 *  https://developer.android.com/guide/topics/manifest/application-element.html#code
 *
 *  Value: "NO_CODE_APK"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoCodeApk;
/**
 *  The test apk does not declare an instrumentation.
 *
 *  Value: "NO_INSTRUMENTATION"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoInstrumentation;
/**
 *  A main launcher activity could not be found.
 *
 *  Value: "NO_LAUNCHER_ACTIVITY"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoLauncherActivity;
/**
 *  The AndroidManifest.xml could not be found.
 *
 *  Value: "NO_MANIFEST"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoManifest;
/**
 *  The APK manifest does not declare a package name.
 *
 *  Value: "NO_PACKAGE_NAME"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoPackageName;
/**
 *  The input app apk does not have a signature.
 *
 *  Value: "NO_SIGNATURE"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoSignature;
/**
 *  The test APK does not contain the test runner class specified by user or in
 *  the manifest file.
 *  This can be caused by either of the following reasons:
 *  - the user provided a runner class name that's incorrect, or
 *  - the test runner isn't built into the test APK (might be in the app APK
 *  instead).
 *
 *  Value: "NO_TEST_RUNNER_CLASS"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoTestRunnerClass;
/**
 *  The .xctestrun file did not specify any test targets.
 *
 *  Value: "NO_TESTS_IN_XC_TEST_ZIP"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoTestsInXcTestZip;
/**
 *  An Info.plist file in the XCTest zip could not be parsed.
 *
 *  Value: "PLIST_CANNOT_BE_PARSED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_PlistCannotBeParsed;
/**
 *  There was an error when parsing a label's value.
 *
 *  Value: "SCENARIO_LABEL_MALFORMED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_ScenarioLabelMalformed;
/**
 *  The request contains a scenario label that was not declared in the
 *  manifest.
 *
 *  Value: "SCENARIO_LABEL_NOT_DECLARED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_ScenarioLabelNotDeclared;
/**
 *  The request contains a scenario number that was not declared in the
 *  manifest.
 *
 *  Value: "SCENARIO_NOT_DECLARED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_ScenarioNotDeclared;
/**
 *  There there is no test loop intent filter, or the one that is given is
 *  not formatted correctly.
 *
 *  Value: "TEST_LOOP_INTENT_FILTER_NOT_FOUND"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestLoopIntentFilterNotFound;
/**
 *  XC tests which run on physical devices must have
 *  "IsAppHostedTestBundle" == "true" in the xctestrun file.
 *
 *  Value: "TEST_NOT_APP_HOSTED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestNotAppHosted;
/**
 *  The APK is marked as "testOnly".
 *  Deprecated and not currently used.
 *
 *  Value: "TEST_ONLY_APK"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestOnlyApk;
/**
 *  The test package and app package are the same.
 *
 *  Value: "TEST_SAME_AS_APP"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestSameAsApp;
/**
 *  One or more of the test targets defined in the .xctestrun file specifies
 *  "UseDestinationArtifacts", which is disallowed.
 *
 *  Value: "USE_DESTINATION_ARTIFACTS"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_UseDestinationArtifacts;

// ----------------------------------------------------------------------------
// GTLRTesting_TestMatrix.state

/**
 *  The user cancelled the execution.
 *  Can only be set on an execution.
 *
 *  Value: "CANCELLED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_State_Cancelled;
/**
 *  The execution or matrix has stopped because it encountered an
 *  infrastructure failure.
 *
 *  Value: "ERROR"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_State_Error;
/**
 *  The execution or matrix has terminated normally.
 *  On a matrix this means that the matrix level processing completed normally,
 *  but individual executions may be in an ERROR state.
 *
 *  Value: "FINISHED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_State_Finished;
/**
 *  The execution was not run because the provided inputs are incompatible with
 *  the requested architecture.
 *  Example: requested device does not support running the native code in
 *  the supplied APK
 *  Can only be set on an execution.
 *
 *  Value: "INCOMPATIBLE_ARCHITECTURE"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_State_IncompatibleArchitecture;
/**
 *  The execution was not run because the provided inputs are incompatible with
 *  the requested environment.
 *  Example: requested AndroidVersion is lower than APK's minSdkVersion
 *  Can only be set on an execution.
 *
 *  Value: "INCOMPATIBLE_ENVIRONMENT"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_State_IncompatibleEnvironment;
/**
 *  The execution or matrix was not run because the provided inputs are not
 *  valid.
 *  Examples: input file is not of the expected type, is malformed/corrupt, or
 *  was flagged as malware
 *
 *  Value: "INVALID"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_State_Invalid;
/**
 *  The execution or matrix is waiting for resources to become available.
 *
 *  Value: "PENDING"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_State_Pending;
/**
 *  The execution is currently being processed.
 *  Can only be set on an execution.
 *
 *  Value: "RUNNING"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_State_Running;
/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "TEST_STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_State_TestStateUnspecified;
/**
 *  The execution was not run because it corresponds to a unsupported
 *  environment.
 *  Can only be set on an execution.
 *
 *  Value: "UNSUPPORTED_ENVIRONMENT"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_State_UnsupportedEnvironment;
/**
 *  The execution or matrix is being validated.
 *
 *  Value: "VALIDATING"
 */
GTLR_EXTERN NSString * const kGTLRTesting_TestMatrix_State_Validating;

/**
 *  Identifies an account and how to log into it.
 */
@interface GTLRTesting_Account : GTLRObject

/** An automatic google login account. */
@property(nonatomic, strong, nullable) GTLRTesting_GoogleAuto *googleAuto;

@end


/**
 *  A single Android device.
 */
@interface GTLRTesting_AndroidDevice : GTLRObject

/**
 *  Required. The id of the Android device to be used.
 *  Use the EnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, copy, nullable) NSString *androidModelId;

/**
 *  Required. The id of the Android OS version to be used.
 *  Use the EnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, copy, nullable) NSString *androidVersionId;

/**
 *  Required. The locale the test device used for testing.
 *  Use the EnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, copy, nullable) NSString *locale;

/**
 *  Required. How the device is oriented during the test.
 *  Use the EnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, copy, nullable) NSString *orientation;

@end


/**
 *  The currently supported Android devices.
 */
@interface GTLRTesting_AndroidDeviceCatalog : GTLRObject

/** The set of supported Android device models. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_AndroidModel *> *models;

/** The set of supported runtime configurations. */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidRuntimeConfiguration *runtimeConfiguration;

/** The set of supported Android OS versions. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_AndroidVersion *> *versions;

@end


/**
 *  A list of Android device configurations in which the test is to be executed.
 */
@interface GTLRTesting_AndroidDeviceList : GTLRObject

/** Required. A list of Android devices. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_AndroidDevice *> *androidDevices;

@end


/**
 *  A test of an Android application that can control an Android component
 *  independently of its normal lifecycle.
 *  Android instrumentation tests run an application APK and test APK inside the
 *  same process on a virtual or physical AndroidDevice. They also specify
 *  a test runner class, such as com.google.GoogleTestRunner, which can vary
 *  on the specific instrumentation framework chosen.
 *  See <http://developer.android.com/tools/testing/testing_android.html> for
 *  more information on types of Android tests.
 */
@interface GTLRTesting_AndroidInstrumentationTest : GTLRObject

/** The APK for the application under test. */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *appApk;

/** A multi-apk app bundle for the application under test. */
@property(nonatomic, strong, nullable) GTLRTesting_AppBundle *appBundle;

/**
 *  The java package for the application under test.
 *  The default value is determined by examining the application's manifest.
 */
@property(nonatomic, copy, nullable) NSString *appPackageId;

/**
 *  The option of whether running each test within its own invocation of
 *  instrumentation with Android Test Orchestrator or not.
 *  ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
 *  higher! **
 *  Orchestrator offers the following benefits:
 *  - No shared state
 *  - Crashes are isolated
 *  - Logs are scoped per test
 *  See
 *  <https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator>
 *  for more information about Android Test Orchestrator.
 *  If not set, the test will be run without the orchestrator.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_AndroidInstrumentationTest_OrchestratorOption_DoNotUseOrchestrator
 *        Run test without using orchestrator. (Value:
 *        "DO_NOT_USE_ORCHESTRATOR")
 *    @arg @c kGTLRTesting_AndroidInstrumentationTest_OrchestratorOption_OrchestratorOptionUnspecified
 *        Default value: the server will choose the mode. Currently implies that
 *        the test will run without the orchestrator. In the future,
 *        all instrumentation tests will be run with the orchestrator.
 *        Using the orchestrator is highly encouraged because of all the
 *        benefits it
 *        offers. (Value: "ORCHESTRATOR_OPTION_UNSPECIFIED")
 *    @arg @c kGTLRTesting_AndroidInstrumentationTest_OrchestratorOption_UseOrchestrator
 *        Run test using orchestrator.
 *        ** Only compatible with AndroidJUnitRunner version 1.0 or higher! **
 *        Recommended. (Value: "USE_ORCHESTRATOR")
 */
@property(nonatomic, copy, nullable) NSString *orchestratorOption;

/** Required. The APK containing the test code to be executed. */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *testApk;

/**
 *  The java package for the test to be executed.
 *  The default value is determined by examining the application's manifest.
 */
@property(nonatomic, copy, nullable) NSString *testPackageId;

/**
 *  The InstrumentationTestRunner class.
 *  The default value is determined by examining the application's manifest.
 */
@property(nonatomic, copy, nullable) NSString *testRunnerClass;

/**
 *  Each target must be fully qualified with the package name or class name,
 *  in one of these formats:
 *  - "package package_name"
 *  - "class package_name.class_name"
 *  - "class package_name.class_name#method_name"
 *  If empty, all targets in the module will be run.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *testTargets;

@end


/**
 *  A set of Android device configuration permutations is defined by the
 *  the cross-product of the given axes. Internally, the given AndroidMatrix
 *  will be expanded into a set of AndroidDevices.
 *  Only supported permutations will be instantiated. Invalid permutations
 *  (e.g., incompatible models/versions) are ignored.
 */
@interface GTLRTesting_AndroidMatrix : GTLRObject

/**
 *  Required. The ids of the set of Android device to be used.
 *  Use the EnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *androidModelIds;

/**
 *  Required. The ids of the set of Android OS version to be used.
 *  Use the EnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *androidVersionIds;

/**
 *  Required. The set of locales the test device will enable for testing.
 *  Use the EnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *locales;

/**
 *  Required. The set of orientations to test with.
 *  Use the EnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *orientations;

@end


/**
 *  A description of an Android device tests may be run on.
 */
@interface GTLRTesting_AndroidModel : GTLRObject

/**
 *  The company that this device is branded with.
 *  Example: "Google", "Samsung".
 */
@property(nonatomic, copy, nullable) NSString *brand;

/**
 *  The name of the industrial design.
 *  This corresponds to android.os.Build.DEVICE.
 */
@property(nonatomic, copy, nullable) NSString *codename;

/**
 *  Whether this device is virtual or physical.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_AndroidModel_Form_DeviceFormUnspecified Do not use.
 *        For proto versioning only. (Value: "DEVICE_FORM_UNSPECIFIED")
 *    @arg @c kGTLRTesting_AndroidModel_Form_Physical Actual hardware. (Value:
 *        "PHYSICAL")
 *    @arg @c kGTLRTesting_AndroidModel_Form_Virtual A software stack that
 *        simulates the device. (Value: "VIRTUAL")
 */
@property(nonatomic, copy, nullable) NSString *form;

/**
 *  Whether this device is a phone, tablet, wearable, etc.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_AndroidModel_FormFactor_DeviceFormFactorUnspecified
 *        Do not use. For proto versioning only. (Value:
 *        "DEVICE_FORM_FACTOR_UNSPECIFIED")
 *    @arg @c kGTLRTesting_AndroidModel_FormFactor_Phone This device has the
 *        shape of a phone. (Value: "PHONE")
 *    @arg @c kGTLRTesting_AndroidModel_FormFactor_Tablet This device has the
 *        shape of a tablet. (Value: "TABLET")
 *    @arg @c kGTLRTesting_AndroidModel_FormFactor_Wearable This device has the
 *        shape of a watch or other wearable. (Value: "WEARABLE")
 */
@property(nonatomic, copy, nullable) NSString *formFactor;

/**
 *  The unique opaque id for this model.
 *  Use this for invoking the TestExecutionService.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  True if and only if tests with this model are recorded by stitching
 *  together screenshots. See use_low_spec_video_recording in device config.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lowFpsVideoRecording;

/** The manufacturer of this device. */
@property(nonatomic, copy, nullable) NSString *manufacturer;

/**
 *  The human-readable marketing name for this device model.
 *  Examples: "Nexus 5", "Galaxy S5".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Screen density in DPI.
 *  This corresponds to ro.sf.lcd_density
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenDensity;

/**
 *  Screen size in the horizontal (X) dimension measured in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenX;

/**
 *  Screen size in the vertical (Y) dimension measured in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenY;

/**
 *  The list of supported ABIs for this device.
 *  This corresponds to either android.os.Build.SUPPORTED_ABIS (for API level
 *  21 and above) or android.os.Build.CPU_ABI/CPU_ABI2.
 *  The most preferred ABI is the first element in the list.
 *  Elements are optionally prefixed by "version_id:" (where version_id is
 *  the id of an AndroidVersion), denoting an ABI that is supported only on
 *  a particular version.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedAbis;

/** The set of Android versions this device supports. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedVersionIds;

/**
 *  Tags for this dimension.
 *  Examples: "default", "preview", "deprecated".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

@end


/**
 *  A test of an android application that explores the application on a virtual
 *  or physical Android Device, finding culprits and crashes as it goes.
 */
@interface GTLRTesting_AndroidRoboTest : GTLRObject

/** The APK for the application under test. */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *appApk;

/** A multi-apk app bundle for the application under test. */
@property(nonatomic, strong, nullable) GTLRTesting_AppBundle *appBundle;

/** The initial activity that should be used to start the app. */
@property(nonatomic, copy, nullable) NSString *appInitialActivity;

/**
 *  The java package for the application under test.
 *  The default value is determined by examining the application's manifest.
 */
@property(nonatomic, copy, nullable) NSString *appPackageId;

/**
 *  The max depth of the traversal stack Robo can explore. Needs to be at least
 *  2 to make Robo explore the app beyond the first activity.
 *  Default is 50.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxDepth;

/**
 *  The max number of steps Robo can execute.
 *  Default is no limit.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxSteps;

/**
 *  A set of directives Robo should apply during the crawl.
 *  This allows users to customize the crawl. For example, the username and
 *  password for a test account can be provided.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_RoboDirective *> *roboDirectives;

/**
 *  A JSON file with a sequence of actions Robo should perform as a prologue
 *  for the crawl.
 */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *roboScript;

/**
 *  The intents used to launch the app for the crawl.
 *  If none are provided, then the main launcher activity is launched.
 *  If some are provided, then only those provided are launched (the main
 *  launcher activity must be provided explicitly).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_RoboStartingIntent *> *startingIntents;

@end


/**
 *  Android configuration that can be selected at the time a test is run.
 */
@interface GTLRTesting_AndroidRuntimeConfiguration : GTLRObject

/** The set of available locales. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_Locale *> *locales;

/** The set of available orientations. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_Orientation *> *orientations;

@end


/**
 *  A test of an Android Application with a Test Loop.
 *  The intent \\<intent-name\\> will be implicitly added, since Games is the
 *  only
 *  user of this api, for the time being.
 */
@interface GTLRTesting_AndroidTestLoop : GTLRObject

/** The APK for the application under test. */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *appApk;

/** A multi-apk app bundle for the application under test. */
@property(nonatomic, strong, nullable) GTLRTesting_AppBundle *appBundle;

/**
 *  The java package for the application under test.
 *  The default is determined by examining the application's manifest.
 */
@property(nonatomic, copy, nullable) NSString *appPackageId;

/**
 *  The list of scenario labels that should be run during the test.
 *  The scenario labels should map to labels defined in the application's
 *  manifest. For example, player_experience and
 *  com.google.test.loops.player_experience add all of the loops labeled in the
 *  manifest with the com.google.test.loops.player_experience name to the
 *  execution.
 *  Scenarios can also be specified in the scenarios field.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *scenarioLabels;

/**
 *  The list of scenarios that should be run during the test.
 *  The default is all test loops, derived from the application's
 *  manifest.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *scenarios;

@end


/**
 *  A version of the Android OS.
 */
@interface GTLRTesting_AndroidVersion : GTLRObject

/**
 *  The API level for this Android version.
 *  Examples: 18, 19.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *apiLevel;

/**
 *  The code name for this Android version.
 *  Examples: "JellyBean", "KitKat".
 */
@property(nonatomic, copy, nullable) NSString *codeName;

/** Market share for this version. */
@property(nonatomic, strong, nullable) GTLRTesting_Distribution *distribution;

/**
 *  An opaque id for this Android version.
 *  Use this id to invoke the TestExecutionService.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The date this Android version became available in the market. */
@property(nonatomic, strong, nullable) GTLRTesting_Date *releaseDate;

/**
 *  Tags for this dimension.
 *  Examples: "default", "preview", "deprecated".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

/**
 *  A string representing this version of the Android OS.
 *  Examples: "4.3", "4.4".
 */
@property(nonatomic, copy, nullable) NSString *versionString;

@end


/**
 *  An Android package file to install.
 */
@interface GTLRTesting_Apk : GTLRObject

/**
 *  The path to an APK to be installed on the device before the test begins.
 */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *location;

/**
 *  The java package for the APK to be installed.
 *  Value is determined by examining the application's manifest.
 */
@property(nonatomic, copy, nullable) NSString *packageName;

@end


/**
 *  Android application details based on application manifest and apk archive
 *  contents.
 */
@interface GTLRTesting_ApkDetail : GTLRObject

@property(nonatomic, strong, nullable) GTLRTesting_ApkManifest *apkManifest;

@end


/**
 *  An Android app manifest. See
 *  http://developer.android.com/guide/topics/manifest/manifest-intro.html
 */
@interface GTLRTesting_ApkManifest : GTLRObject

/** User-readable name for the application. */
@property(nonatomic, copy, nullable) NSString *applicationLabel;

@property(nonatomic, strong, nullable) NSArray<GTLRTesting_IntentFilter *> *intentFilters;

/**
 *  Maximum API level on which the application is designed to run.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxSdkVersion;

/**
 *  Minimum API level required for the application to run.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minSdkVersion;

/**
 *  Full Java-style package name for this application, e.g.
 *  "com.example.foo".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

@end


/**
 *  An Android App Bundle file format, containing a BundleConfig.pb file,
 *  a base module directory, zero or more dynamic feature module directories.
 *  <p>See https://developer.android.com/guide/app-bundle/build for guidance on
 *  building App Bundles.
 */
@interface GTLRTesting_AppBundle : GTLRObject

/** .aab file representing the app bundle under test. */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *bundleLocation;

@end


/**
 *  Response containing the current state of the specified test matrix.
 */
@interface GTLRTesting_CancelTestMatrixResponse : GTLRObject

/**
 *  The current rolled-up state of the test matrix.
 *  If this state is already final, then the cancelation request will
 *  have no effect.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_Cancelled The user
 *        cancelled the execution.
 *        Can only be set on an execution. (Value: "CANCELLED")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_Error The
 *        execution or matrix has stopped because it encountered an
 *        infrastructure failure. (Value: "ERROR")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_Finished The
 *        execution or matrix has terminated normally.
 *        On a matrix this means that the matrix level processing completed
 *        normally,
 *        but individual executions may be in an ERROR state. (Value:
 *        "FINISHED")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_IncompatibleArchitecture
 *        The execution was not run because the provided inputs are incompatible
 *        with
 *        the requested architecture.
 *        Example: requested device does not support running the native code in
 *        the supplied APK
 *        Can only be set on an execution. (Value: "INCOMPATIBLE_ARCHITECTURE")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_IncompatibleEnvironment
 *        The execution was not run because the provided inputs are incompatible
 *        with
 *        the requested environment.
 *        Example: requested AndroidVersion is lower than APK's minSdkVersion
 *        Can only be set on an execution. (Value: "INCOMPATIBLE_ENVIRONMENT")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_Invalid The
 *        execution or matrix was not run because the provided inputs are not
 *        valid.
 *        Examples: input file is not of the expected type, is
 *        malformed/corrupt, or
 *        was flagged as malware (Value: "INVALID")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_Pending The
 *        execution or matrix is waiting for resources to become available.
 *        (Value: "PENDING")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_Running The
 *        execution is currently being processed.
 *        Can only be set on an execution. (Value: "RUNNING")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_TestStateUnspecified
 *        Do not use. For proto versioning only. (Value:
 *        "TEST_STATE_UNSPECIFIED")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_UnsupportedEnvironment
 *        The execution was not run because it corresponds to a unsupported
 *        environment.
 *        Can only be set on an execution. (Value: "UNSUPPORTED_ENVIRONMENT")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_Validating The
 *        execution or matrix is being validated. (Value: "VALIDATING")
 */
@property(nonatomic, copy, nullable) NSString *testState;

@end


/**
 *  Information about the client which invoked the test.
 */
@interface GTLRTesting_ClientInfo : GTLRObject

/** The list of detailed information about client. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_ClientInfoDetail *> *clientInfoDetails;

/** Required. Client name, such as gcloud. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Key-value pair of detailed information about the client which invoked the
 *  test. Examples: {'Version', '1.0'}, {'Release Track', 'BETA'}.
 */
@interface GTLRTesting_ClientInfoDetail : GTLRObject

/** Required. The key of detailed client information. */
@property(nonatomic, copy, nullable) NSString *key;

/** Required. The value of detailed client information. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Represents a whole or partial calendar date, e.g. a birthday. The time of
 *  day
 *  and time zone are either specified elsewhere or are not significant. The
 *  date
 *  is relative to the Proleptic Gregorian Calendar. This can represent:
 *  * A full date, with non-zero year, month and day values
 *  * A month and day value, with a zero year, e.g. an anniversary
 *  * A year on its own, with zero month and day values
 *  * A year and month value, with a zero day, e.g. a credit card expiration
 *  date
 *  Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
 */
@interface GTLRTesting_Date : GTLRObject

/**
 *  Day of month. Must be from 1 to 31 and valid for the year and month, or 0
 *  if specifying a year by itself or a year and month where the day is not
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of year. Must be from 1 to 12, or 0 if specifying a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of date. Must be from 1 to 9999, or 0 if specifying a date without
 *  a year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  A single device file description.
 */
@interface GTLRTesting_DeviceFile : GTLRObject

/** A reference to an opaque binary blob file */
@property(nonatomic, strong, nullable) GTLRTesting_ObbFile *obbFile;

/** A reference to a regular file */
@property(nonatomic, strong, nullable) GTLRTesting_RegularFile *regularFile;

@end


/**
 *  Data about the relative number of devices running a
 *  given configuration of the Android platform.
 */
@interface GTLRTesting_Distribution : GTLRObject

/**
 *  Output only. The estimated fraction (0-1) of the total market with this
 *  configuration.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *marketShare;

/** Output only. The time this distribution was measured. */
@property(nonatomic, strong, nullable) GTLRDateTime *measurementTime;

@end


/**
 *  The environment in which the test is run.
 */
@interface GTLRTesting_Environment : GTLRObject

/** An Android device which must be used with an Android test. */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidDevice *androidDevice;

/** An iOS device which must be used with an iOS test. */
@property(nonatomic, strong, nullable) GTLRTesting_IosDevice *iosDevice;

@end


/**
 *  The matrix of environments in which the test is to be executed.
 */
@interface GTLRTesting_EnvironmentMatrix : GTLRObject

/**
 *  A list of Android devices; the test will be run only on the specified
 *  devices.
 */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidDeviceList *androidDeviceList;

/** A matrix of Android devices. */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidMatrix *androidMatrix;

/** A list of iOS devices. */
@property(nonatomic, strong, nullable) GTLRTesting_IosDeviceList *iosDeviceList;

@end


/**
 *  A key-value pair passed as an environment variable to the test.
 */
@interface GTLRTesting_EnvironmentVariable : GTLRObject

/** Key for the environment variable. */
@property(nonatomic, copy, nullable) NSString *key;

/** Value for the environment variable. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A reference to a file, used for user inputs.
 */
@interface GTLRTesting_FileReference : GTLRObject

/**
 *  A path to a file in Google Cloud Storage.
 *  Example: gs://build-app-1414623860166/app-debug-unaligned.apk
 */
@property(nonatomic, copy, nullable) NSString *gcsPath;

@end


/**
 *  Response containing the details of the specified Android application APK.
 */
@interface GTLRTesting_GetApkDetailsResponse : GTLRObject

/** Details of the Android APK. */
@property(nonatomic, strong, nullable) GTLRTesting_ApkDetail *apkDetail;

@end


/**
 *  Enables automatic Google account login.
 *  If set, the service will automatically generate a Google test account and
 *  add
 *  it to the device, before executing the test. Note that test accounts might
 *  be
 *  reused.
 *  Many applications show their full set of functionalities when an account is
 *  present on the device. Logging into the device with these generated accounts
 *  allows testing more functionalities.
 */
@interface GTLRTesting_GoogleAuto : GTLRObject
@end


/**
 *  A storage location within Google cloud storage (GCS).
 */
@interface GTLRTesting_GoogleCloudStorage : GTLRObject

/**
 *  Required. The path to a directory in GCS that will
 *  eventually contain the results for this test.
 *  The requesting user must have write access on the bucket in the supplied
 *  path.
 */
@property(nonatomic, copy, nullable) NSString *gcsPath;

@end


/**
 *  The <intent-filter> section of an <activity> tag.
 *  https://developer.android.com/guide/topics/manifest/intent-filter-element.html
 */
@interface GTLRTesting_IntentFilter : GTLRObject

/** The android:name value of the <action> tag. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *actionNames;

/** The android:name value of the <category> tag. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *categoryNames;

/** The android:mimeType value of the <data> tag. */
@property(nonatomic, copy, nullable) NSString *mimeType;

@end


/**
 *  A single iOS device.
 */
@interface GTLRTesting_IosDevice : GTLRObject

/**
 *  Required. The id of the iOS device to be used.
 *  Use the EnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, copy, nullable) NSString *iosModelId;

/**
 *  Required. The id of the iOS major software version to be used.
 *  Use the EnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, copy, nullable) NSString *iosVersionId;

/**
 *  Required. The locale the test device used for testing.
 *  Use the EnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, copy, nullable) NSString *locale;

/**
 *  Required. How the device is oriented during the test.
 *  Use the EnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, copy, nullable) NSString *orientation;

@end


/**
 *  The currently supported iOS devices.
 */
@interface GTLRTesting_IosDeviceCatalog : GTLRObject

/** The set of supported iOS device models. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_IosModel *> *models;

/** The set of supported runtime configurations. */
@property(nonatomic, strong, nullable) GTLRTesting_IosRuntimeConfiguration *runtimeConfiguration;

/** The set of supported iOS software versions. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_IosVersion *> *versions;

/** The set of supported Xcode versions. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_XcodeVersion *> *xcodeVersions;

@end


/**
 *  A list of iOS device configurations in which the test is to be executed.
 */
@interface GTLRTesting_IosDeviceList : GTLRObject

/** Required. A list of iOS devices. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_IosDevice *> *iosDevices;

@end


/**
 *  A description of an iOS device tests may be run on.
 */
@interface GTLRTesting_IosModel : GTLRObject

/**
 *  Device capabilities.
 *  Copied from
 *  https://developer.apple.com/library/archive/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/DeviceCompatibilityMatrix/DeviceCompatibilityMatrix.html
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *deviceCapabilities;

/**
 *  Whether this device is a phone, tablet, wearable, etc.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_IosModel_FormFactor_DeviceFormFactorUnspecified Do
 *        not use. For proto versioning only. (Value:
 *        "DEVICE_FORM_FACTOR_UNSPECIFIED")
 *    @arg @c kGTLRTesting_IosModel_FormFactor_Phone This device has the shape
 *        of a phone. (Value: "PHONE")
 *    @arg @c kGTLRTesting_IosModel_FormFactor_Tablet This device has the shape
 *        of a tablet. (Value: "TABLET")
 *    @arg @c kGTLRTesting_IosModel_FormFactor_Wearable This device has the
 *        shape of a watch or other wearable. (Value: "WEARABLE")
 */
@property(nonatomic, copy, nullable) NSString *formFactor;

/**
 *  The unique opaque id for this model.
 *  Use this for invoking the TestExecutionService.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The human-readable name for this device model.
 *  Examples: "iPhone 4s", "iPad Mini 2".
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The set of iOS major software versions this device supports. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedVersionIds;

/**
 *  Tags for this dimension.
 *  Examples: "default", "preview", "deprecated".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

@end


/**
 *  iOS configuration that can be selected at the time a test is run.
 */
@interface GTLRTesting_IosRuntimeConfiguration : GTLRObject

/** The set of available locales. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_Locale *> *locales;

/** The set of available orientations. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_Orientation *> *orientations;

@end


/**
 *  A description of how to set up an iOS device prior to a test.
 */
@interface GTLRTesting_IosTestSetup : GTLRObject

/**
 *  The network traffic profile used for running the test.
 *  Available network profiles can be queried by using the
 *  NETWORK_CONFIGURATION environment type when calling
 *  TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
 */
@property(nonatomic, copy, nullable) NSString *networkProfile;

@end


/**
 *  An iOS version.
 */
@interface GTLRTesting_IosVersion : GTLRObject

/**
 *  An opaque id for this iOS version.
 *  Use this id to invoke the TestExecutionService.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  An integer representing the major iOS version.
 *  Examples: "8", "9".
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *majorVersion;

/**
 *  An integer representing the minor iOS version.
 *  Examples: "1", "2".
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minorVersion;

/** The available Xcode versions for this version. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedXcodeVersionIds;

/**
 *  Tags for this dimension.
 *  Examples: "default", "preview", "deprecated".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

@end


/**
 *  A test of an iOS application that uses the XCTest framework.
 *  Xcode supports the option to "build for testing", which generates an
 *  .xctestrun file that contains a test specification (arguments, test methods,
 *  etc). This test type accepts a zip file containing the .xctestrun file and
 *  the corresponding contents of the Build/Products directory that contains all
 *  the binaries needed to run the tests.
 */
@interface GTLRTesting_IosXcTest : GTLRObject

/** Output only. The bundle id for the application under test. */
@property(nonatomic, copy, nullable) NSString *appBundleId;

/**
 *  Required. The .zip containing the .xctestrun file and the contents of the
 *  DerivedData/Build/Products directory.
 *  The .xctestrun file in this zip is ignored if the xctestrun field is
 *  specified.
 */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *testsZip;

/**
 *  The Xcode version that should be used for the test.
 *  Use the EnvironmentDiscoveryService to get supported options.
 *  Defaults to the latest Xcode version Firebase Test Lab supports.
 */
@property(nonatomic, copy, nullable) NSString *xcodeVersion;

/**
 *  An .xctestrun file that will override the .xctestrun file in the
 *  tests zip. Because the .xctestrun file contains environment variables along
 *  with test methods to run and/or ignore, this can be useful for sharding
 *  tests. Default is taken from the tests zip.
 */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *xctestrun;

@end


/**
 *  Specifies an intent that starts the main launcher activity.
 */
@interface GTLRTesting_LauncherActivityIntent : GTLRObject
@end


/**
 *  A location/region designation for language.
 */
@interface GTLRTesting_Locale : GTLRObject

/**
 *  The id for this locale.
 *  Example: "en_US".
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  A human-friendly name for this language/locale.
 *  Example: "English".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A human-friendly string representing the region for this
 *  locale. Example: "United States". Not present for every locale.
 */
@property(nonatomic, copy, nullable) NSString *region;

/**
 *  Tags for this dimension.
 *  Example: "default".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

@end


/**
 *  GTLRTesting_NetworkConfiguration
 */
@interface GTLRTesting_NetworkConfiguration : GTLRObject

/** The emulation rule applying to the download traffic. */
@property(nonatomic, strong, nullable) GTLRTesting_TrafficRule *downRule;

/**
 *  The unique opaque id for this network traffic configuration.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The emulation rule applying to the upload traffic. */
@property(nonatomic, strong, nullable) GTLRTesting_TrafficRule *upRule;

@end


/**
 *  GTLRTesting_NetworkConfigurationCatalog
 */
@interface GTLRTesting_NetworkConfigurationCatalog : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRTesting_NetworkConfiguration *> *configurations;

@end


/**
 *  An opaque binary blob file to install on the device before the test starts.
 */
@interface GTLRTesting_ObbFile : GTLRObject

/** Required. Opaque Binary Blob (OBB) file(s) to install on the device. */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *obb;

/**
 *  Required. OBB file name which must conform to the format as specified by
 *  Android
 *  e.g. [main|patch].0300110.com.example.android.obb
 *  which will be installed into
 *  \\<shared-storage\\>/Android/obb/\\<package-name\\>/
 *  on the device.
 */
@property(nonatomic, copy, nullable) NSString *obbFileName;

@end


/**
 *  Screen orientation of the device.
 */
@interface GTLRTesting_Orientation : GTLRObject

/**
 *  The id for this orientation.
 *  Example: "portrait".
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  A human-friendly name for this orientation.
 *  Example: "portrait".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Tags for this dimension.
 *  Example: "default".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

@end


/**
 *  The currently provided software environment on the devices under test.
 */
@interface GTLRTesting_ProvidedSoftwareCatalog : GTLRObject

/**
 *  A string representing the current version of Android Test
 *  Orchestrator that is provided by TestExecutionService.
 *  Example: "1.0.2 beta".
 */
@property(nonatomic, copy, nullable) NSString *orchestratorVersion;

@end


/**
 *  A file or directory to install on the device before the test starts.
 */
@interface GTLRTesting_RegularFile : GTLRObject

/** Required. The source file. */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *content;

/**
 *  Required. Where to put the content on the device. Must be an absolute,
 *  whitelisted path. If the file exists, it will be replaced.
 *  The following device-side directories and any of their subdirectories are
 *  whitelisted:
 *  <p>${EXTERNAL_STORAGE}, or /sdcard</p>
 *  <p>${ANDROID_DATA}/local/tmp, or /data/local/tmp</p>
 *  <p>Specifying a path outside of these directory trees is invalid.
 *  <p> The paths /sdcard and /data will be made available and treated as
 *  implicit path substitutions. E.g. if /sdcard on a particular device does
 *  not map to external storage, the system will replace it with the external
 *  storage path prefix for that device and copy the file there.
 *  <p> It is strongly advised to use the
 *  <a href= 
 "http://developer.android.com/reference/android/os/Environment.html">
 *  Environment API</a> in app and test code to access files on the device in a
 *  portable way.
 */
@property(nonatomic, copy, nullable) NSString *devicePath;

@end


/**
 *  Locations where the results of running the test are stored.
 */
@interface GTLRTesting_ResultStorage : GTLRObject

/** Required. */
@property(nonatomic, strong, nullable) GTLRTesting_GoogleCloudStorage *googleCloudStorage;

/** Output only. The tool results execution that results are written to. */
@property(nonatomic, strong, nullable) GTLRTesting_ToolResultsExecution *toolResultsExecution;

/**
 *  The tool results history that contains the tool results execution that
 *  results are written to.
 *  If not provided, the service will choose an appropriate value.
 */
@property(nonatomic, strong, nullable) GTLRTesting_ToolResultsHistory *toolResultsHistory;

@end


/**
 *  Directs Robo to interact with a specific UI element if it is encountered
 *  during the crawl. Currently, Robo can perform text entry or element click.
 */
@interface GTLRTesting_RoboDirective : GTLRObject

/**
 *  Required. The type of action that Robo should perform on the specified
 *  element.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_RoboDirective_ActionType_ActionTypeUnspecified DO NOT
 *        USE. For proto versioning only. (Value: "ACTION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRTesting_RoboDirective_ActionType_EnterText Direct Robo to
 *        enter text on the specified element. No-op if specified
 *        element is not enabled or does not allow text entry. (Value:
 *        "ENTER_TEXT")
 *    @arg @c kGTLRTesting_RoboDirective_ActionType_SingleClick Direct Robo to
 *        click on the specified element. No-op if specified element
 *        is not clickable. (Value: "SINGLE_CLICK")
 */
@property(nonatomic, copy, nullable) NSString *actionType;

/**
 *  The text that Robo is directed to set. If left empty, the directive will be
 *  treated as a CLICK on the element matching the resource_name.
 */
@property(nonatomic, copy, nullable) NSString *inputText;

/**
 *  Required. The android resource name of the target UI element.
 *  For example,
 *  in Java: R.string.foo
 *  in xml: \@string/foo
 *  Only the "foo" part is needed.
 *  Reference doc:
 *  https://developer.android.com/guide/topics/resources/accessing-resources.html
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end


/**
 *  Message for specifying the start activities to crawl.
 */
@interface GTLRTesting_RoboStartingIntent : GTLRObject

@property(nonatomic, strong, nullable) GTLRTesting_LauncherActivityIntent *launcherActivity;
@property(nonatomic, strong, nullable) GTLRTesting_StartActivityIntent *startActivity;

@end


/**
 *  A starting intent specified by an action, uri, and categories.
 */
@interface GTLRTesting_StartActivityIntent : GTLRObject

/**
 *  Action name.
 *  Required for START_ACTIVITY.
 */
@property(nonatomic, copy, nullable) NSString *action;

/** Intent categories to set on the intent. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *categories;

/** URI for the action. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Additional details about the progress of the running test.
 */
@interface GTLRTesting_TestDetails : GTLRObject

/**
 *  Output only. If the TestState is ERROR, then this string will contain
 *  human-readable details about the error.
 */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/**
 *  Output only. Human-readable, detailed descriptions of the test's progress.
 *  For example: "Provisioning a device", "Starting Test".
 *  During the course of execution new data may be appended
 *  to the end of progress_messages.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *progressMessages;

@end


/**
 *  A description of a test environment.
 */
@interface GTLRTesting_TestEnvironmentCatalog : GTLRObject

/** Supported Android devices. */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidDeviceCatalog *androidDeviceCatalog;

/** Supported iOS devices. */
@property(nonatomic, strong, nullable) GTLRTesting_IosDeviceCatalog *iosDeviceCatalog;

/** Supported network configurations. */
@property(nonatomic, strong, nullable) GTLRTesting_NetworkConfigurationCatalog *networkConfigurationCatalog;

/** The software test environment provided by TestExecutionService. */
@property(nonatomic, strong, nullable) GTLRTesting_ProvidedSoftwareCatalog *softwareCatalog;

@end


/**
 *  Specifies a single test to be executed in a single environment.
 */
@interface GTLRTesting_TestExecution : GTLRObject

/** Output only. How the host machine(s) are configured. */
@property(nonatomic, strong, nullable) GTLRTesting_Environment *environment;

/**
 *  Output only. Unique id set by the backend.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Output only. Id of the containing TestMatrix. */
@property(nonatomic, copy, nullable) NSString *matrixId;

/** Output only. The cloud project that owns the test execution. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Output only. Indicates the current progress of the test execution
 *  (e.g., FINISHED).
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_TestExecution_State_Cancelled The user cancelled the
 *        execution.
 *        Can only be set on an execution. (Value: "CANCELLED")
 *    @arg @c kGTLRTesting_TestExecution_State_Error The execution or matrix has
 *        stopped because it encountered an
 *        infrastructure failure. (Value: "ERROR")
 *    @arg @c kGTLRTesting_TestExecution_State_Finished The execution or matrix
 *        has terminated normally.
 *        On a matrix this means that the matrix level processing completed
 *        normally,
 *        but individual executions may be in an ERROR state. (Value:
 *        "FINISHED")
 *    @arg @c kGTLRTesting_TestExecution_State_IncompatibleArchitecture The
 *        execution was not run because the provided inputs are incompatible
 *        with
 *        the requested architecture.
 *        Example: requested device does not support running the native code in
 *        the supplied APK
 *        Can only be set on an execution. (Value: "INCOMPATIBLE_ARCHITECTURE")
 *    @arg @c kGTLRTesting_TestExecution_State_IncompatibleEnvironment The
 *        execution was not run because the provided inputs are incompatible
 *        with
 *        the requested environment.
 *        Example: requested AndroidVersion is lower than APK's minSdkVersion
 *        Can only be set on an execution. (Value: "INCOMPATIBLE_ENVIRONMENT")
 *    @arg @c kGTLRTesting_TestExecution_State_Invalid The execution or matrix
 *        was not run because the provided inputs are not
 *        valid.
 *        Examples: input file is not of the expected type, is
 *        malformed/corrupt, or
 *        was flagged as malware (Value: "INVALID")
 *    @arg @c kGTLRTesting_TestExecution_State_Pending The execution or matrix
 *        is waiting for resources to become available. (Value: "PENDING")
 *    @arg @c kGTLRTesting_TestExecution_State_Running The execution is
 *        currently being processed.
 *        Can only be set on an execution. (Value: "RUNNING")
 *    @arg @c kGTLRTesting_TestExecution_State_TestStateUnspecified Do not use.
 *        For proto versioning only. (Value: "TEST_STATE_UNSPECIFIED")
 *    @arg @c kGTLRTesting_TestExecution_State_UnsupportedEnvironment The
 *        execution was not run because it corresponds to a unsupported
 *        environment.
 *        Can only be set on an execution. (Value: "UNSUPPORTED_ENVIRONMENT")
 *    @arg @c kGTLRTesting_TestExecution_State_Validating The execution or
 *        matrix is being validated. (Value: "VALIDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. Additional details about the running test. */
@property(nonatomic, strong, nullable) GTLRTesting_TestDetails *testDetails;

/** Output only. How to run the test. */
@property(nonatomic, strong, nullable) GTLRTesting_TestSpecification *testSpecification;

/** Output only. The time this test execution was initially created. */
@property(nonatomic, strong, nullable) GTLRDateTime *timestamp;

/** Output only. Where the results for this execution are written. */
@property(nonatomic, strong, nullable) GTLRTesting_ToolResultsStep *toolResultsStep;

@end


/**
 *  A group of one or more TestExecutions, built by taking a
 *  product of values over a pre-defined set of axes.
 */
@interface GTLRTesting_TestMatrix : GTLRObject

/** Information about the client which invoked the test. */
@property(nonatomic, strong, nullable) GTLRTesting_ClientInfo *clientInfo;

/** Required. How the host machine(s) are configured. */
@property(nonatomic, strong, nullable) GTLRTesting_EnvironmentMatrix *environmentMatrix;

/**
 *  The number of times a TestExecution should be re-attempted if one or more
 *  of its test cases fail for any reason.
 *  The maximum number of reruns allowed is 10.
 *  Default is 0, which implies no reruns.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *flakyTestAttempts;

/**
 *  Output only. Describes why the matrix is considered invalid.
 *  Only useful for matrices in the INVALID state.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_BuiltForIosSimulator
 *        The zipped XCTest was built for the iOS simulator rather than for a
 *        physical device. (Value: "BUILT_FOR_IOS_SIMULATOR")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_DetailsUnavailable
 *        The matrix is INVALID, but there are no further details available.
 *        (Value: "DETAILS_UNAVAILABLE")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_DeviceAdminReceiver
 *        Device administrator applications are not allowed. (Value:
 *        "DEVICE_ADMIN_RECEIVER")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_ForbiddenPermissions
 *        The app declares one or more permissions that are not allowed. (Value:
 *        "FORBIDDEN_PERMISSIONS")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_InstrumentationOrchestratorIncompatible
 *        The test runner class specified by user or in the test APK's manifest
 *        file
 *        is not compatible with Android Test Orchestrator.
 *        Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
 *        higher.
 *        Orchestrator can be disabled by using DO_NOT_USE_ORCHESTRATOR
 *        OrchestratorOption. (Value:
 *        "INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidApkPreviewSdk
 *        APK is built for a preview SDK which is unsupported (Value:
 *        "INVALID_APK_PREVIEW_SDK")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidInputApk
 *        Either the provided input APK path was malformed,
 *        the APK file does not exist, or the user does not have permission to
 *        access the APK file. (Value: "INVALID_INPUT_APK")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidMatrixDetailsUnspecified
 *        Do not use. For proto versioning only. (Value:
 *        "INVALID_MATRIX_DETAILS_UNSPECIFIED")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidRoboDirectives
 *        There is a conflict in the provided robo_directives. (Value:
 *        "INVALID_ROBO_DIRECTIVES")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedApk The
 *        input app APK could not be parsed. (Value: "MALFORMED_APK")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedIpa The
 *        input IPA could not be parsed.
 *        Deprecated and not currently used. (Value: "MALFORMED_IPA")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedTestApk The
 *        input test APK could not be parsed. (Value: "MALFORMED_TEST_APK")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedXcTestZip
 *        The zipped XCTest was malformed. The zip did not contain a single
 *        .xctestrun file and the contents of the DerivedData/Build/Products
 *        directory. (Value: "MALFORMED_XC_TEST_ZIP")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoCodeApk APK
 *        contains no code.
 *        See also
 *        https://developer.android.com/guide/topics/manifest/application-element.html#code
 *        (Value: "NO_CODE_APK")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoInstrumentation The
 *        test apk does not declare an instrumentation. (Value:
 *        "NO_INSTRUMENTATION")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoLauncherActivity A
 *        main launcher activity could not be found. (Value:
 *        "NO_LAUNCHER_ACTIVITY")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoManifest The
 *        AndroidManifest.xml could not be found. (Value: "NO_MANIFEST")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoPackageName The APK
 *        manifest does not declare a package name. (Value: "NO_PACKAGE_NAME")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoSignature The input
 *        app apk does not have a signature. (Value: "NO_SIGNATURE")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoTestRunnerClass The
 *        test APK does not contain the test runner class specified by user or
 *        in
 *        the manifest file.
 *        This can be caused by either of the following reasons:
 *        - the user provided a runner class name that's incorrect, or
 *        - the test runner isn't built into the test APK (might be in the app
 *        APK
 *        instead). (Value: "NO_TEST_RUNNER_CLASS")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoTestsInXcTestZip
 *        The .xctestrun file did not specify any test targets. (Value:
 *        "NO_TESTS_IN_XC_TEST_ZIP")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_PlistCannotBeParsed
 *        An Info.plist file in the XCTest zip could not be parsed. (Value:
 *        "PLIST_CANNOT_BE_PARSED")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_ScenarioLabelMalformed
 *        There was an error when parsing a label's value. (Value:
 *        "SCENARIO_LABEL_MALFORMED")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_ScenarioLabelNotDeclared
 *        The request contains a scenario label that was not declared in the
 *        manifest. (Value: "SCENARIO_LABEL_NOT_DECLARED")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_ScenarioNotDeclared
 *        The request contains a scenario number that was not declared in the
 *        manifest. (Value: "SCENARIO_NOT_DECLARED")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestLoopIntentFilterNotFound
 *        There there is no test loop intent filter, or the one that is given is
 *        not formatted correctly. (Value: "TEST_LOOP_INTENT_FILTER_NOT_FOUND")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestNotAppHosted XC
 *        tests which run on physical devices must have
 *        "IsAppHostedTestBundle" == "true" in the xctestrun file. (Value:
 *        "TEST_NOT_APP_HOSTED")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestOnlyApk The APK
 *        is marked as "testOnly".
 *        Deprecated and not currently used. (Value: "TEST_ONLY_APK")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestSameAsApp The
 *        test package and app package are the same. (Value: "TEST_SAME_AS_APP")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_UseDestinationArtifacts
 *        One or more of the test targets defined in the .xctestrun file
 *        specifies
 *        "UseDestinationArtifacts", which is disallowed. (Value:
 *        "USE_DESTINATION_ARTIFACTS")
 */
@property(nonatomic, copy, nullable) NSString *invalidMatrixDetails;

/** The cloud project that owns the test matrix. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Required. Where the results for the matrix are written. */
@property(nonatomic, strong, nullable) GTLRTesting_ResultStorage *resultStorage;

/**
 *  Output only. Indicates the current progress of the test matrix
 *  (e.g., FINISHED).
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_TestMatrix_State_Cancelled The user cancelled the
 *        execution.
 *        Can only be set on an execution. (Value: "CANCELLED")
 *    @arg @c kGTLRTesting_TestMatrix_State_Error The execution or matrix has
 *        stopped because it encountered an
 *        infrastructure failure. (Value: "ERROR")
 *    @arg @c kGTLRTesting_TestMatrix_State_Finished The execution or matrix has
 *        terminated normally.
 *        On a matrix this means that the matrix level processing completed
 *        normally,
 *        but individual executions may be in an ERROR state. (Value:
 *        "FINISHED")
 *    @arg @c kGTLRTesting_TestMatrix_State_IncompatibleArchitecture The
 *        execution was not run because the provided inputs are incompatible
 *        with
 *        the requested architecture.
 *        Example: requested device does not support running the native code in
 *        the supplied APK
 *        Can only be set on an execution. (Value: "INCOMPATIBLE_ARCHITECTURE")
 *    @arg @c kGTLRTesting_TestMatrix_State_IncompatibleEnvironment The
 *        execution was not run because the provided inputs are incompatible
 *        with
 *        the requested environment.
 *        Example: requested AndroidVersion is lower than APK's minSdkVersion
 *        Can only be set on an execution. (Value: "INCOMPATIBLE_ENVIRONMENT")
 *    @arg @c kGTLRTesting_TestMatrix_State_Invalid The execution or matrix was
 *        not run because the provided inputs are not
 *        valid.
 *        Examples: input file is not of the expected type, is
 *        malformed/corrupt, or
 *        was flagged as malware (Value: "INVALID")
 *    @arg @c kGTLRTesting_TestMatrix_State_Pending The execution or matrix is
 *        waiting for resources to become available. (Value: "PENDING")
 *    @arg @c kGTLRTesting_TestMatrix_State_Running The execution is currently
 *        being processed.
 *        Can only be set on an execution. (Value: "RUNNING")
 *    @arg @c kGTLRTesting_TestMatrix_State_TestStateUnspecified Do not use. For
 *        proto versioning only. (Value: "TEST_STATE_UNSPECIFIED")
 *    @arg @c kGTLRTesting_TestMatrix_State_UnsupportedEnvironment The execution
 *        was not run because it corresponds to a unsupported
 *        environment.
 *        Can only be set on an execution. (Value: "UNSUPPORTED_ENVIRONMENT")
 *    @arg @c kGTLRTesting_TestMatrix_State_Validating The execution or matrix
 *        is being validated. (Value: "VALIDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. The list of test executions that the service creates for
 *  this matrix.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_TestExecution *> *testExecutions;

/** Output only. Unique id set by the service. */
@property(nonatomic, copy, nullable) NSString *testMatrixId;

/** Required. How to run the test. */
@property(nonatomic, strong, nullable) GTLRTesting_TestSpecification *testSpecification;

/** Output only. The time this test matrix was initially created. */
@property(nonatomic, strong, nullable) GTLRDateTime *timestamp;

@end


/**
 *  A description of how to set up the Android device prior to running the test.
 */
@interface GTLRTesting_TestSetup : GTLRObject

/**
 *  The device will be logged in on this account for the duration of the test.
 */
@property(nonatomic, strong, nullable) GTLRTesting_Account *account;

/**
 *  APKs to install in addition to those being directly tested.
 *  Currently capped at 100.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_Apk *> *additionalApks;

/**
 *  List of directories on the device to upload to GCS at the end of the test;
 *  they must be absolute paths under /sdcard or /data/local/tmp.
 *  Path names are restricted to characters a-z A-Z 0-9 _ - . + and /
 *  Note: The paths /sdcard and /data will be made available and treated as
 *  implicit path substitutions. E.g. if /sdcard on a particular device does
 *  not map to external storage, the system will replace it with the external
 *  storage path prefix for that device.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *directoriesToPull;

/**
 *  Environment variables to set for the test (only applicable for
 *  instrumentation tests).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_EnvironmentVariable *> *environmentVariables;

/** List of files to push to the device before starting the test. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_DeviceFile *> *filesToPush;

/**
 *  The network traffic profile used for running the test.
 *  Available network profiles can be queried by using the
 *  NETWORK_CONFIGURATION environment type when calling
 *  TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
 */
@property(nonatomic, copy, nullable) NSString *networkProfile;

@end


/**
 *  A description of how to run the test.
 */
@interface GTLRTesting_TestSpecification : GTLRObject

/** An Android instrumentation test. */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidInstrumentationTest *androidInstrumentationTest;

/** An Android robo test. */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidRoboTest *androidRoboTest;

/** An Android Application with a Test Loop. */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidTestLoop *androidTestLoop;

/**
 *  Enables automatic Google account login.
 *  If set, the service will automatically generate a Google test account and
 *  add it to the device, before executing the test. Note that test accounts
 *  might be reused.
 *  Many applications show their full set of functionalities when an account is
 *  present on the device. Logging into the device with these generated
 *  accounts allows testing more functionalities.
 *  Default is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoGoogleLogin;

/**
 *  Disables performance metrics recording; may reduce test latency.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disablePerformanceMetrics;

/**
 *  Disables video recording; may reduce test latency.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableVideoRecording;

/** Test setup requirements for iOS. */
@property(nonatomic, strong, nullable) GTLRTesting_IosTestSetup *iosTestSetup;

/** An iOS XCTest, via an .xctestrun file. */
@property(nonatomic, strong, nullable) GTLRTesting_IosXcTest *iosXcTest;

/**
 *  Test setup requirements for Android e.g. files to install, bootstrap
 *  scripts.
 */
@property(nonatomic, strong, nullable) GTLRTesting_TestSetup *testSetup;

/**
 *  Max time a test execution is allowed to run before it is
 *  automatically cancelled.
 *  The default value is 5 min.
 */
@property(nonatomic, strong, nullable) GTLRDuration *testTimeout;

@end


/**
 *  Represents a tool results execution resource.
 *  This has the results of a TestMatrix.
 */
@interface GTLRTesting_ToolResultsExecution : GTLRObject

/** Output only. A tool results execution ID. */
@property(nonatomic, copy, nullable) NSString *executionId;

/** Output only. A tool results history ID. */
@property(nonatomic, copy, nullable) NSString *historyId;

/** Output only. The cloud project that owns the tool results execution. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  Represents a tool results history resource.
 */
@interface GTLRTesting_ToolResultsHistory : GTLRObject

/** Required. A tool results history ID. */
@property(nonatomic, copy, nullable) NSString *historyId;

/** Required. The cloud project that owns the tool results history. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  Represents a tool results step resource.
 *  This has the results of a TestExecution.
 */
@interface GTLRTesting_ToolResultsStep : GTLRObject

/** Output only. A tool results execution ID. */
@property(nonatomic, copy, nullable) NSString *executionId;

/** Output only. A tool results history ID. */
@property(nonatomic, copy, nullable) NSString *historyId;

/** Output only. The cloud project that owns the tool results step. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Output only. A tool results step ID. */
@property(nonatomic, copy, nullable) NSString *stepId;

@end


/**
 *  Network emulation parameters.
 */
@interface GTLRTesting_TrafficRule : GTLRObject

/**
 *  Bandwidth in kbits/second.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bandwidth;

/**
 *  Burst size in kbits.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *burst;

/** Packet delay, must be >= 0. */
@property(nonatomic, strong, nullable) GTLRDuration *delay;

/**
 *  Packet duplication ratio (0.0 - 1.0).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *packetDuplicationRatio;

/**
 *  Packet loss ratio (0.0 - 1.0).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *packetLossRatio;

@end


/**
 *  An Xcode version that an iOS version is compatible with.
 */
@interface GTLRTesting_XcodeVersion : GTLRObject

/**
 *  Tags for this Xcode version.
 *  Example: "default".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

/**
 *  The id for this version.
 *  Example: "9.2".
 */
@property(nonatomic, copy, nullable) NSString *version;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
