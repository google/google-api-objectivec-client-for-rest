// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Identity and Access Management (IAM) API (iam/v1)
// Description:
//   Manages identity and access control for Google Cloud Platform resources,
//   including the creation of service accounts, which you can use to
//   authenticate to Google and make API calls.
// Documentation:
//   https://cloud.google.com/iam/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRIam_CreateRoleRequest;
@class GTLRIam_CreateServiceAccountKeyRequest;
@class GTLRIam_CreateServiceAccountRequest;
@class GTLRIam_LintPolicyRequest;
@class GTLRIam_PatchServiceAccountRequest;
@class GTLRIam_QueryAuditableServicesRequest;
@class GTLRIam_QueryGrantableRolesRequest;
@class GTLRIam_QueryTestablePermissionsRequest;
@class GTLRIam_Role;
@class GTLRIam_ServiceAccount;
@class GTLRIam_SetIamPolicyRequest;
@class GTLRIam_SignBlobRequest;
@class GTLRIam_SignJwtRequest;
@class GTLRIam_TestIamPermissionsRequest;
@class GTLRIam_UndeleteRoleRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// keyTypes

/** Value: "KEY_TYPE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRIamKeyTypesKeyTypeUnspecified;
/** Value: "SYSTEM_MANAGED" */
GTLR_EXTERN NSString * const kGTLRIamKeyTypesSystemManaged;
/** Value: "USER_MANAGED" */
GTLR_EXTERN NSString * const kGTLRIamKeyTypesUserManaged;

// ----------------------------------------------------------------------------
// publicKeyType

/** Value: "TYPE_NONE" */
GTLR_EXTERN NSString * const kGTLRIamPublicKeyTypeTypeNone;
/** Value: "TYPE_RAW_PUBLIC_KEY" */
GTLR_EXTERN NSString * const kGTLRIamPublicKeyTypeTypeRawPublicKey;
/** Value: "TYPE_X509_PEM_FILE" */
GTLR_EXTERN NSString * const kGTLRIamPublicKeyTypeTypeX509PemFile;

// ----------------------------------------------------------------------------
// view

/** Value: "BASIC" */
GTLR_EXTERN NSString * const kGTLRIamViewBasic;
/** Value: "FULL" */
GTLR_EXTERN NSString * const kGTLRIamViewFull;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other iam query classes.
 */
@interface GTLRIamQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Lints a Cloud IAM policy object or its sub fields. Currently supports
 *  google.iam.v1.Policy, google.iam.v1.Binding and
 *  google.iam.v1.Binding.condition.
 *  Each lint operation consists of multiple lint validation units.
 *  Validation units have the following properties:
 *  - Each unit inspects the input object in regard to a particular
 *  linting aspect and issues a google.iam.admin.v1.LintResult
 *  disclosing the result.
 *  - Domain of discourse of each unit can be either
 *  google.iam.v1.Policy, google.iam.v1.Binding, or
 *  google.iam.v1.Binding.condition depending on the purpose of the
 *  validation.
 *  - A unit may require additional data (like the list of all possible
 *  enumerable values of a particular attribute used in the policy instance)
 *  which shall be provided by the caller. Refer to the comments of
 *  google.iam.admin.v1.LintPolicyRequest.context for more details.
 *  The set of applicable validation units is determined by the Cloud IAM
 *  server and is not configurable.
 *  Regardless of any lint issues or their severities, successful calls to
 *  `lintPolicy` return an HTTP 200 OK status code.
 *
 *  Method: iam.iamPolicies.lintPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_IamPoliciesLintPolicy : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForIamPoliciesLintPolicyWithObject:]

/**
 *  Fetches a @c GTLRIam_LintPolicyResponse.
 *
 *  Lints a Cloud IAM policy object or its sub fields. Currently supports
 *  google.iam.v1.Policy, google.iam.v1.Binding and
 *  google.iam.v1.Binding.condition.
 *  Each lint operation consists of multiple lint validation units.
 *  Validation units have the following properties:
 *  - Each unit inspects the input object in regard to a particular
 *  linting aspect and issues a google.iam.admin.v1.LintResult
 *  disclosing the result.
 *  - Domain of discourse of each unit can be either
 *  google.iam.v1.Policy, google.iam.v1.Binding, or
 *  google.iam.v1.Binding.condition depending on the purpose of the
 *  validation.
 *  - A unit may require additional data (like the list of all possible
 *  enumerable values of a particular attribute used in the policy instance)
 *  which shall be provided by the caller. Refer to the comments of
 *  google.iam.admin.v1.LintPolicyRequest.context for more details.
 *  The set of applicable validation units is determined by the Cloud IAM
 *  server and is not configurable.
 *  Regardless of any lint issues or their severities, successful calls to
 *  `lintPolicy` return an HTTP 200 OK status code.
 *
 *  @param object The @c GTLRIam_LintPolicyRequest to include in the query.
 *
 *  @return GTLRIamQuery_IamPoliciesLintPolicy
 */
+ (instancetype)queryWithObject:(GTLRIam_LintPolicyRequest *)object;

@end

/**
 *  Returns a list of services that support service level audit logging
 *  configuration for the given resource.
 *
 *  Method: iam.iamPolicies.queryAuditableServices
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_IamPoliciesQueryAuditableServices : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForIamPoliciesQueryAuditableServicesWithObject:]

/**
 *  Fetches a @c GTLRIam_QueryAuditableServicesResponse.
 *
 *  Returns a list of services that support service level audit logging
 *  configuration for the given resource.
 *
 *  @param object The @c GTLRIam_QueryAuditableServicesRequest to include in the
 *    query.
 *
 *  @return GTLRIamQuery_IamPoliciesQueryAuditableServices
 */
+ (instancetype)queryWithObject:(GTLRIam_QueryAuditableServicesRequest *)object;

@end

/**
 *  Creates a new Role.
 *
 *  Method: iam.organizations.roles.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_OrganizationsRolesCreate : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForOrganizationsRolesCreateWithObject:parent:]

/**
 *  The resource name of the parent resource in one of the following formats:
 *  `organizations/{ORGANIZATION_ID}`
 *  `projects/{PROJECT_ID}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRIam_Role.
 *
 *  Creates a new Role.
 *
 *  @param object The @c GTLRIam_CreateRoleRequest to include in the query.
 *  @param parent The resource name of the parent resource in one of the
 *    following formats:
 *    `organizations/{ORGANIZATION_ID}`
 *    `projects/{PROJECT_ID}`
 *
 *  @return GTLRIamQuery_OrganizationsRolesCreate
 */
+ (instancetype)queryWithObject:(GTLRIam_CreateRoleRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Soft deletes a role. The role is suspended and cannot be used to create new
 *  IAM Policy Bindings.
 *  The Role will not be included in `ListRoles()` unless `show_deleted` is set
 *  in the `ListRolesRequest`. The Role contains the deleted boolean set.
 *  Existing Bindings remains, but are inactive. The Role can be undeleted
 *  within 7 days. After 7 days the Role is deleted and all Bindings associated
 *  with the role are removed.
 *
 *  Method: iam.organizations.roles.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_OrganizationsRolesDelete : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForOrganizationsRolesDeleteWithname:]

/**
 *  Used to perform a consistent read-modify-write.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The resource name of the role in one of the following formats:
 *  `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *  `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_Role.
 *
 *  Soft deletes a role. The role is suspended and cannot be used to create new
 *  IAM Policy Bindings.
 *  The Role will not be included in `ListRoles()` unless `show_deleted` is set
 *  in the `ListRolesRequest`. The Role contains the deleted boolean set.
 *  Existing Bindings remains, but are inactive. The Role can be undeleted
 *  within 7 days. After 7 days the Role is deleted and all Bindings associated
 *  with the role are removed.
 *
 *  @param name The resource name of the role in one of the following formats:
 *    `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *    `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 *
 *  @return GTLRIamQuery_OrganizationsRolesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Role definition.
 *
 *  Method: iam.organizations.roles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_OrganizationsRolesGet : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForOrganizationsRolesGetWithname:]

/**
 *  The resource name of the role in one of the following formats:
 *  `roles/{ROLE_NAME}`
 *  `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *  `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_Role.
 *
 *  Gets a Role definition.
 *
 *  @param name The resource name of the role in one of the following formats:
 *    `roles/{ROLE_NAME}`
 *    `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *    `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 *
 *  @return GTLRIamQuery_OrganizationsRolesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the Roles defined on a resource.
 *
 *  Method: iam.organizations.roles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_OrganizationsRolesList : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForOrganizationsRolesListWithparent:]

/** Optional limit on the number of roles to include in the response. */
@property(nonatomic, assign) NSInteger pageSize;

/** Optional pagination token returned in an earlier ListRolesResponse. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The resource name of the parent resource in one of the following formats:
 *  `` (empty string) -- this refers to curated roles.
 *  `organizations/{ORGANIZATION_ID}`
 *  `projects/{PROJECT_ID}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Include Roles that have been deleted. */
@property(nonatomic, assign) BOOL showDeleted;

/**
 *  Optional view for the returned Role objects.
 *
 *  Likely values:
 *    @arg @c kGTLRIamViewBasic Value "BASIC"
 *    @arg @c kGTLRIamViewFull Value "FULL"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRIam_ListRolesResponse.
 *
 *  Lists the Roles defined on a resource.
 *
 *  @param parent The resource name of the parent resource in one of the
 *    following formats:
 *    `` (empty string) -- this refers to curated roles.
 *    `organizations/{ORGANIZATION_ID}`
 *    `projects/{PROJECT_ID}`
 *
 *  @return GTLRIamQuery_OrganizationsRolesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a Role definition.
 *
 *  Method: iam.organizations.roles.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_OrganizationsRolesPatch : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForOrganizationsRolesPatchWithObject:name:]

/**
 *  The resource name of the role in one of the following formats:
 *  `roles/{ROLE_NAME}`
 *  `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *  `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A mask describing which fields in the Role have changed.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRIam_Role.
 *
 *  Updates a Role definition.
 *
 *  @param object The @c GTLRIam_Role to include in the query.
 *  @param name The resource name of the role in one of the following formats:
 *    `roles/{ROLE_NAME}`
 *    `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *    `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 *
 *  @return GTLRIamQuery_OrganizationsRolesPatch
 */
+ (instancetype)queryWithObject:(GTLRIam_Role *)object
                           name:(NSString *)name;

@end

/**
 *  Undelete a Role, bringing it back in its previous state.
 *
 *  Method: iam.organizations.roles.undelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_OrganizationsRolesUndelete : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForOrganizationsRolesUndeleteWithObject:name:]

/**
 *  The resource name of the role in one of the following formats:
 *  `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *  `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_Role.
 *
 *  Undelete a Role, bringing it back in its previous state.
 *
 *  @param object The @c GTLRIam_UndeleteRoleRequest to include in the query.
 *  @param name The resource name of the role in one of the following formats:
 *    `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *    `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 *
 *  @return GTLRIamQuery_OrganizationsRolesUndelete
 */
+ (instancetype)queryWithObject:(GTLRIam_UndeleteRoleRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists the permissions testable on a resource.
 *  A permission is testable if it can be tested for an identity on a resource.
 *
 *  Method: iam.permissions.queryTestablePermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_PermissionsQueryTestablePermissions : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForPermissionsQueryTestablePermissionsWithObject:]

/**
 *  Fetches a @c GTLRIam_QueryTestablePermissionsResponse.
 *
 *  Lists the permissions testable on a resource.
 *  A permission is testable if it can be tested for an identity on a resource.
 *
 *  @param object The @c GTLRIam_QueryTestablePermissionsRequest to include in
 *    the query.
 *
 *  @return GTLRIamQuery_PermissionsQueryTestablePermissions
 */
+ (instancetype)queryWithObject:(GTLRIam_QueryTestablePermissionsRequest *)object;

@end

/**
 *  Creates a new Role.
 *
 *  Method: iam.projects.roles.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsRolesCreate : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsRolesCreateWithObject:parent:]

/**
 *  The resource name of the parent resource in one of the following formats:
 *  `organizations/{ORGANIZATION_ID}`
 *  `projects/{PROJECT_ID}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRIam_Role.
 *
 *  Creates a new Role.
 *
 *  @param object The @c GTLRIam_CreateRoleRequest to include in the query.
 *  @param parent The resource name of the parent resource in one of the
 *    following formats:
 *    `organizations/{ORGANIZATION_ID}`
 *    `projects/{PROJECT_ID}`
 *
 *  @return GTLRIamQuery_ProjectsRolesCreate
 */
+ (instancetype)queryWithObject:(GTLRIam_CreateRoleRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Soft deletes a role. The role is suspended and cannot be used to create new
 *  IAM Policy Bindings.
 *  The Role will not be included in `ListRoles()` unless `show_deleted` is set
 *  in the `ListRolesRequest`. The Role contains the deleted boolean set.
 *  Existing Bindings remains, but are inactive. The Role can be undeleted
 *  within 7 days. After 7 days the Role is deleted and all Bindings associated
 *  with the role are removed.
 *
 *  Method: iam.projects.roles.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsRolesDelete : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsRolesDeleteWithname:]

/**
 *  Used to perform a consistent read-modify-write.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The resource name of the role in one of the following formats:
 *  `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *  `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_Role.
 *
 *  Soft deletes a role. The role is suspended and cannot be used to create new
 *  IAM Policy Bindings.
 *  The Role will not be included in `ListRoles()` unless `show_deleted` is set
 *  in the `ListRolesRequest`. The Role contains the deleted boolean set.
 *  Existing Bindings remains, but are inactive. The Role can be undeleted
 *  within 7 days. After 7 days the Role is deleted and all Bindings associated
 *  with the role are removed.
 *
 *  @param name The resource name of the role in one of the following formats:
 *    `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *    `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 *
 *  @return GTLRIamQuery_ProjectsRolesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Role definition.
 *
 *  Method: iam.projects.roles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsRolesGet : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsRolesGetWithname:]

/**
 *  The resource name of the role in one of the following formats:
 *  `roles/{ROLE_NAME}`
 *  `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *  `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_Role.
 *
 *  Gets a Role definition.
 *
 *  @param name The resource name of the role in one of the following formats:
 *    `roles/{ROLE_NAME}`
 *    `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *    `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 *
 *  @return GTLRIamQuery_ProjectsRolesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the Roles defined on a resource.
 *
 *  Method: iam.projects.roles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsRolesList : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsRolesListWithparent:]

/** Optional limit on the number of roles to include in the response. */
@property(nonatomic, assign) NSInteger pageSize;

/** Optional pagination token returned in an earlier ListRolesResponse. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The resource name of the parent resource in one of the following formats:
 *  `` (empty string) -- this refers to curated roles.
 *  `organizations/{ORGANIZATION_ID}`
 *  `projects/{PROJECT_ID}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Include Roles that have been deleted. */
@property(nonatomic, assign) BOOL showDeleted;

/**
 *  Optional view for the returned Role objects.
 *
 *  Likely values:
 *    @arg @c kGTLRIamViewBasic Value "BASIC"
 *    @arg @c kGTLRIamViewFull Value "FULL"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRIam_ListRolesResponse.
 *
 *  Lists the Roles defined on a resource.
 *
 *  @param parent The resource name of the parent resource in one of the
 *    following formats:
 *    `` (empty string) -- this refers to curated roles.
 *    `organizations/{ORGANIZATION_ID}`
 *    `projects/{PROJECT_ID}`
 *
 *  @return GTLRIamQuery_ProjectsRolesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a Role definition.
 *
 *  Method: iam.projects.roles.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsRolesPatch : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsRolesPatchWithObject:name:]

/**
 *  The resource name of the role in one of the following formats:
 *  `roles/{ROLE_NAME}`
 *  `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *  `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A mask describing which fields in the Role have changed.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRIam_Role.
 *
 *  Updates a Role definition.
 *
 *  @param object The @c GTLRIam_Role to include in the query.
 *  @param name The resource name of the role in one of the following formats:
 *    `roles/{ROLE_NAME}`
 *    `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *    `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 *
 *  @return GTLRIamQuery_ProjectsRolesPatch
 */
+ (instancetype)queryWithObject:(GTLRIam_Role *)object
                           name:(NSString *)name;

@end

/**
 *  Undelete a Role, bringing it back in its previous state.
 *
 *  Method: iam.projects.roles.undelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsRolesUndelete : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsRolesUndeleteWithObject:name:]

/**
 *  The resource name of the role in one of the following formats:
 *  `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *  `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_Role.
 *
 *  Undelete a Role, bringing it back in its previous state.
 *
 *  @param object The @c GTLRIam_UndeleteRoleRequest to include in the query.
 *  @param name The resource name of the role in one of the following formats:
 *    `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *    `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 *
 *  @return GTLRIamQuery_ProjectsRolesUndelete
 */
+ (instancetype)queryWithObject:(GTLRIam_UndeleteRoleRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a ServiceAccount
 *  and returns it.
 *
 *  Method: iam.projects.serviceAccounts.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsCreate : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsCreateWithObject:name:]

/**
 *  Required. The resource name of the project associated with the service
 *  accounts, such as `projects/my-project-123`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_ServiceAccount.
 *
 *  Creates a ServiceAccount
 *  and returns it.
 *
 *  @param object The @c GTLRIam_CreateServiceAccountRequest to include in the
 *    query.
 *  @param name Required. The resource name of the project associated with the
 *    service
 *    accounts, such as `projects/my-project-123`.
 *
 *  @return GTLRIamQuery_ProjectsServiceAccountsCreate
 */
+ (instancetype)queryWithObject:(GTLRIam_CreateServiceAccountRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a ServiceAccount.
 *
 *  Method: iam.projects.serviceAccounts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsDelete : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsDeleteWithname:]

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *  Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *  the account. The `ACCOUNT` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_Empty.
 *
 *  Deletes a ServiceAccount.
 *
 *  @param name The resource name of the service account in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *    Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *    the account. The `ACCOUNT` value can be the `email` address or the
 *    `unique_id` of the service account.
 *
 *  @return GTLRIamQuery_ProjectsServiceAccountsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a ServiceAccount.
 *
 *  Method: iam.projects.serviceAccounts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsGet : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsGetWithname:]

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *  Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *  the account. The `ACCOUNT` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_ServiceAccount.
 *
 *  Gets a ServiceAccount.
 *
 *  @param name The resource name of the service account in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *    Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *    the account. The `ACCOUNT` value can be the `email` address or the
 *    `unique_id` of the service account.
 *
 *  @return GTLRIamQuery_ProjectsServiceAccountsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the IAM access control policy for a
 *  ServiceAccount.
 *
 *  Method: iam.projects.serviceAccounts.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsGetIamPolicy : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsGetIamPolicyWithresource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRIam_Policy.
 *
 *  Returns the IAM access control policy for a
 *  ServiceAccount.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRIamQuery_ProjectsServiceAccountsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Creates a ServiceAccountKey
 *  and returns it.
 *
 *  Method: iam.projects.serviceAccounts.keys.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsKeysCreate : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsKeysCreateWithObject:name:]

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *  Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *  the account. The `ACCOUNT` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_ServiceAccountKey.
 *
 *  Creates a ServiceAccountKey
 *  and returns it.
 *
 *  @param object The @c GTLRIam_CreateServiceAccountKeyRequest to include in
 *    the query.
 *  @param name The resource name of the service account in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *    Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *    the account. The `ACCOUNT` value can be the `email` address or the
 *    `unique_id` of the service account.
 *
 *  @return GTLRIamQuery_ProjectsServiceAccountsKeysCreate
 */
+ (instancetype)queryWithObject:(GTLRIam_CreateServiceAccountKeyRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a ServiceAccountKey.
 *
 *  Method: iam.projects.serviceAccounts.keys.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsKeysDelete : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsKeysDeleteWithname:]

/**
 *  The resource name of the service account key in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}`.
 *  Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *  the account. The `ACCOUNT` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_Empty.
 *
 *  Deletes a ServiceAccountKey.
 *
 *  @param name The resource name of the service account key in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}`.
 *    Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *    the account. The `ACCOUNT` value can be the `email` address or the
 *    `unique_id` of the service account.
 *
 *  @return GTLRIamQuery_ProjectsServiceAccountsKeysDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the ServiceAccountKey
 *  by key id.
 *
 *  Method: iam.projects.serviceAccounts.keys.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsKeysGet : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsKeysGetWithname:]

/**
 *  The resource name of the service account key in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}`.
 *  Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *  the account. The `ACCOUNT` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The output format of the public key requested.
 *  X509_PEM is the default output format.
 *
 *  Likely values:
 *    @arg @c kGTLRIamPublicKeyTypeTypeNone Value "TYPE_NONE"
 *    @arg @c kGTLRIamPublicKeyTypeTypeX509PemFile Value "TYPE_X509_PEM_FILE"
 *    @arg @c kGTLRIamPublicKeyTypeTypeRawPublicKey Value "TYPE_RAW_PUBLIC_KEY"
 */
@property(nonatomic, copy, nullable) NSString *publicKeyType;

/**
 *  Fetches a @c GTLRIam_ServiceAccountKey.
 *
 *  Gets the ServiceAccountKey
 *  by key id.
 *
 *  @param name The resource name of the service account key in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}`.
 *    Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *    the account. The `ACCOUNT` value can be the `email` address or the
 *    `unique_id` of the service account.
 *
 *  @return GTLRIamQuery_ProjectsServiceAccountsKeysGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists ServiceAccountKeys.
 *
 *  Method: iam.projects.serviceAccounts.keys.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsKeysList : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsKeysListWithname:]

/**
 *  Filters the types of keys the user wants to include in the list
 *  response. Duplicate key types are not allowed. If no key type
 *  is provided, all keys are returned.
 *
 *  Likely values:
 *    @arg @c kGTLRIamKeyTypesKeyTypeUnspecified Value "KEY_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRIamKeyTypesUserManaged Value "USER_MANAGED"
 *    @arg @c kGTLRIamKeyTypesSystemManaged Value "SYSTEM_MANAGED"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *keyTypes;

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *  Using `-` as a wildcard for the `PROJECT_ID`, will infer the project from
 *  the account. The `ACCOUNT` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_ListServiceAccountKeysResponse.
 *
 *  Lists ServiceAccountKeys.
 *
 *  @param name The resource name of the service account in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *    Using `-` as a wildcard for the `PROJECT_ID`, will infer the project from
 *    the account. The `ACCOUNT` value can be the `email` address or the
 *    `unique_id` of the service account.
 *
 *  @return GTLRIamQuery_ProjectsServiceAccountsKeysList
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists ServiceAccounts for a project.
 *
 *  Method: iam.projects.serviceAccounts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsList : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsListWithname:]

/**
 *  Required. The resource name of the project associated with the service
 *  accounts, such as `projects/my-project-123`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional limit on the number of service accounts to include in the
 *  response. Further accounts can subsequently be obtained by including the
 *  ListServiceAccountsResponse.next_page_token
 *  in a subsequent request.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional pagination token returned in an earlier
 *  ListServiceAccountsResponse.next_page_token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRIam_ListServiceAccountsResponse.
 *
 *  Lists ServiceAccounts for a project.
 *
 *  @param name Required. The resource name of the project associated with the
 *    service
 *    accounts, such as `projects/my-project-123`.
 *
 *  @return GTLRIamQuery_ProjectsServiceAccountsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Patches a ServiceAccount.
 *  Currently, only the following fields are updatable:
 *  `display_name` and `description`.
 *  Only fields specified in the request are garaunteed to be returned in
 *  the response. Other fields in the response may be empty.
 *  Note: The field mask is required.
 *
 *  Method: iam.projects.serviceAccounts.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsPatch : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsPatchWithObject:name:]

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *  Requests using `-` as a wildcard for the `PROJECT_ID` will infer the
 *  project from the `account` and the `ACCOUNT` value can be the `email`
 *  address or the `unique_id` of the service account.
 *  In responses the resource name will always be in the format
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_ServiceAccount.
 *
 *  Patches a ServiceAccount.
 *  Currently, only the following fields are updatable:
 *  `display_name` and `description`.
 *  Only fields specified in the request are garaunteed to be returned in
 *  the response. Other fields in the response may be empty.
 *  Note: The field mask is required.
 *
 *  @param object The @c GTLRIam_PatchServiceAccountRequest to include in the
 *    query.
 *  @param name The resource name of the service account in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *    Requests using `-` as a wildcard for the `PROJECT_ID` will infer the
 *    project from the `account` and the `ACCOUNT` value can be the `email`
 *    address or the `unique_id` of the service account.
 *    In responses the resource name will always be in the format
 *    `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *
 *  @return GTLRIamQuery_ProjectsServiceAccountsPatch
 */
+ (instancetype)queryWithObject:(GTLRIam_PatchServiceAccountRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the IAM access control policy for a
 *  ServiceAccount.
 *
 *  Method: iam.projects.serviceAccounts.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsSetIamPolicy : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRIam_Policy.
 *
 *  Sets the IAM access control policy for a
 *  ServiceAccount.
 *
 *  @param object The @c GTLRIam_SetIamPolicyRequest to include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRIamQuery_ProjectsServiceAccountsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRIam_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Signs a blob using a service account's system-managed private key.
 *
 *  Method: iam.projects.serviceAccounts.signBlob
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsSignBlob : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsSignBlobWithObject:name:]

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *  Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *  the account. The `ACCOUNT` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_SignBlobResponse.
 *
 *  Signs a blob using a service account's system-managed private key.
 *
 *  @param object The @c GTLRIam_SignBlobRequest to include in the query.
 *  @param name The resource name of the service account in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *    Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *    the account. The `ACCOUNT` value can be the `email` address or the
 *    `unique_id` of the service account.
 *
 *  @return GTLRIamQuery_ProjectsServiceAccountsSignBlob
 */
+ (instancetype)queryWithObject:(GTLRIam_SignBlobRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Signs a JWT using a service account's system-managed private key.
 *  If no expiry time (`exp`) is provided in the `SignJwtRequest`, IAM sets an
 *  an expiry time of one hour by default. If you request an expiry time of
 *  more than one hour, the request will fail.
 *
 *  Method: iam.projects.serviceAccounts.signJwt
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsSignJwt : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsSignJwtWithObject:name:]

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *  Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *  the account. The `ACCOUNT` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_SignJwtResponse.
 *
 *  Signs a JWT using a service account's system-managed private key.
 *  If no expiry time (`exp`) is provided in the `SignJwtRequest`, IAM sets an
 *  an expiry time of one hour by default. If you request an expiry time of
 *  more than one hour, the request will fail.
 *
 *  @param object The @c GTLRIam_SignJwtRequest to include in the query.
 *  @param name The resource name of the service account in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *    Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *    the account. The `ACCOUNT` value can be the `email` address or the
 *    `unique_id` of the service account.
 *
 *  @return GTLRIamQuery_ProjectsServiceAccountsSignJwt
 */
+ (instancetype)queryWithObject:(GTLRIam_SignJwtRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Tests the specified permissions against the IAM access control policy
 *  for a ServiceAccount.
 *
 *  Method: iam.projects.serviceAccounts.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsTestIamPermissions : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRIam_TestIamPermissionsResponse.
 *
 *  Tests the specified permissions against the IAM access control policy
 *  for a ServiceAccount.
 *
 *  @param object The @c GTLRIam_TestIamPermissionsRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRIamQuery_ProjectsServiceAccountsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRIam_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Updates a ServiceAccount.
 *  Currently, only the following fields are updatable:
 *  `display_name` .
 *  The `etag` is mandatory.
 *
 *  Method: iam.projects.serviceAccounts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsUpdate : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsUpdateWithObject:name:]

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *  Requests using `-` as a wildcard for the `PROJECT_ID` will infer the
 *  project from the `account` and the `ACCOUNT` value can be the `email`
 *  address or the `unique_id` of the service account.
 *  In responses the resource name will always be in the format
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_ServiceAccount.
 *
 *  Updates a ServiceAccount.
 *  Currently, only the following fields are updatable:
 *  `display_name` .
 *  The `etag` is mandatory.
 *
 *  @param object The @c GTLRIam_ServiceAccount to include in the query.
 *  @param name The resource name of the service account in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *    Requests using `-` as a wildcard for the `PROJECT_ID` will infer the
 *    project from the `account` and the `ACCOUNT` value can be the `email`
 *    address or the `unique_id` of the service account.
 *    In responses the resource name will always be in the format
 *    `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *
 *  @return GTLRIamQuery_ProjectsServiceAccountsUpdate
 */
+ (instancetype)queryWithObject:(GTLRIam_ServiceAccount *)object
                           name:(NSString *)name;

@end

/**
 *  Gets a Role definition.
 *
 *  Method: iam.roles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_RolesGet : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForRolesGetWithname:]

/**
 *  The resource name of the role in one of the following formats:
 *  `roles/{ROLE_NAME}`
 *  `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *  `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_Role.
 *
 *  Gets a Role definition.
 *
 *  @param name The resource name of the role in one of the following formats:
 *    `roles/{ROLE_NAME}`
 *    `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
 *    `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
 *
 *  @return GTLRIamQuery_RolesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the Roles defined on a resource.
 *
 *  Method: iam.roles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_RolesList : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForRolesList]

/** Optional limit on the number of roles to include in the response. */
@property(nonatomic, assign) NSInteger pageSize;

/** Optional pagination token returned in an earlier ListRolesResponse. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The resource name of the parent resource in one of the following formats:
 *  `` (empty string) -- this refers to curated roles.
 *  `organizations/{ORGANIZATION_ID}`
 *  `projects/{PROJECT_ID}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Include Roles that have been deleted. */
@property(nonatomic, assign) BOOL showDeleted;

/**
 *  Optional view for the returned Role objects.
 *
 *  Likely values:
 *    @arg @c kGTLRIamViewBasic Value "BASIC"
 *    @arg @c kGTLRIamViewFull Value "FULL"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRIam_ListRolesResponse.
 *
 *  Lists the Roles defined on a resource.
 *
 *  @return GTLRIamQuery_RolesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Queries roles that can be granted on a particular resource.
 *  A role is grantable if it can be used as the role in a binding for a policy
 *  for that resource.
 *
 *  Method: iam.roles.queryGrantableRoles
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_RolesQueryGrantableRoles : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForRolesQueryGrantableRolesWithObject:]

/**
 *  Fetches a @c GTLRIam_QueryGrantableRolesResponse.
 *
 *  Queries roles that can be granted on a particular resource.
 *  A role is grantable if it can be used as the role in a binding for a policy
 *  for that resource.
 *
 *  @param object The @c GTLRIam_QueryGrantableRolesRequest to include in the
 *    query.
 *
 *  @return GTLRIamQuery_RolesQueryGrantableRoles
 */
+ (instancetype)queryWithObject:(GTLRIam_QueryGrantableRolesRequest *)object;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
