// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Identity and Access Management (IAM) API (iam/v1)
// Description:
//   Manages identity and access control for Google Cloud Platform resources,
//   including the creation of service accounts, which you can use to
//   authenticate to Google and make API calls.
// Documentation:
//   https://cloud.google.com/iam/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRIam_CreateServiceAccountKeyRequest;
@class GTLRIam_CreateServiceAccountRequest;
@class GTLRIam_QueryGrantableRolesRequest;
@class GTLRIam_ServiceAccount;
@class GTLRIam_SetIamPolicyRequest;
@class GTLRIam_SignBlobRequest;
@class GTLRIam_SignJwtRequest;
@class GTLRIam_TestIamPermissionsRequest;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// keyTypes

/** Value: "KEY_TYPE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRIamKeyTypesKeyTypeUnspecified;
/** Value: "SYSTEM_MANAGED" */
GTLR_EXTERN NSString * const kGTLRIamKeyTypesSystemManaged;
/** Value: "USER_MANAGED" */
GTLR_EXTERN NSString * const kGTLRIamKeyTypesUserManaged;

// ----------------------------------------------------------------------------
// publicKeyType

/** Value: "TYPE_NONE" */
GTLR_EXTERN NSString * const kGTLRIamPublicKeyTypeTypeNone;
/** Value: "TYPE_RAW_PUBLIC_KEY" */
GTLR_EXTERN NSString * const kGTLRIamPublicKeyTypeTypeRawPublicKey;
/** Value: "TYPE_X509_PEM_FILE" */
GTLR_EXTERN NSString * const kGTLRIamPublicKeyTypeTypeX509PemFile;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other iam query classes.
 */
@interface GTLRIamQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a ServiceAccount
 *  and returns it.
 *
 *  Method: iam.projects.serviceAccounts.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsCreate : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsCreateWithObject:name:]

/**
 *  Required. The resource name of the project associated with the service
 *  accounts, such as `projects/my-project-123`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_ServiceAccount.
 *
 *  Creates a ServiceAccount
 *  and returns it.
 *
 *  @param object The @c GTLRIam_CreateServiceAccountRequest to include in the
 *    query.
 *  @param name Required. The resource name of the project associated with the
 *    service
 *    accounts, such as `projects/my-project-123`.
 *
 *  @returns GTLRIamQuery_ProjectsServiceAccountsCreate
 */
+ (instancetype)queryWithObject:(GTLRIam_CreateServiceAccountRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a ServiceAccount.
 *
 *  Method: iam.projects.serviceAccounts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsDelete : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsDeleteWithname:]

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *  Using `-` as a wildcard for the project will infer the project from
 *  the account. The `account` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_Empty.
 *
 *  Deletes a ServiceAccount.
 *
 *  @param name The resource name of the service account in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *    Using `-` as a wildcard for the project will infer the project from
 *    the account. The `account` value can be the `email` address or the
 *    `unique_id` of the service account.
 *
 *  @returns GTLRIamQuery_ProjectsServiceAccountsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a ServiceAccount.
 *
 *  Method: iam.projects.serviceAccounts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsGet : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsGetWithname:]

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *  Using `-` as a wildcard for the project will infer the project from
 *  the account. The `account` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_ServiceAccount.
 *
 *  Gets a ServiceAccount.
 *
 *  @param name The resource name of the service account in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *    Using `-` as a wildcard for the project will infer the project from
 *    the account. The `account` value can be the `email` address or the
 *    `unique_id` of the service account.
 *
 *  @returns GTLRIamQuery_ProjectsServiceAccountsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the IAM access control policy for a
 *  ServiceAccount.
 *
 *  Method: iam.projects.serviceAccounts.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsGetIamPolicy : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsGetIamPolicyWithresource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRIam_Policy.
 *
 *  Returns the IAM access control policy for a
 *  ServiceAccount.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @returns GTLRIamQuery_ProjectsServiceAccountsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Creates a ServiceAccountKey
 *  and returns it.
 *
 *  Method: iam.projects.serviceAccounts.keys.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsKeysCreate : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsKeysCreateWithObject:name:]

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *  Using `-` as a wildcard for the project will infer the project from
 *  the account. The `account` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_ServiceAccountKey.
 *
 *  Creates a ServiceAccountKey
 *  and returns it.
 *
 *  @param object The @c GTLRIam_CreateServiceAccountKeyRequest to include in
 *    the query.
 *  @param name The resource name of the service account in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *    Using `-` as a wildcard for the project will infer the project from
 *    the account. The `account` value can be the `email` address or the
 *    `unique_id` of the service account.
 *
 *  @returns GTLRIamQuery_ProjectsServiceAccountsKeysCreate
 */
+ (instancetype)queryWithObject:(GTLRIam_CreateServiceAccountKeyRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a ServiceAccountKey.
 *
 *  Method: iam.projects.serviceAccounts.keys.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsKeysDelete : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsKeysDeleteWithname:]

/**
 *  The resource name of the service account key in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}/keys/{key}`.
 *  Using `-` as a wildcard for the project will infer the project from
 *  the account. The `account` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_Empty.
 *
 *  Deletes a ServiceAccountKey.
 *
 *  @param name The resource name of the service account key in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}/keys/{key}`.
 *    Using `-` as a wildcard for the project will infer the project from
 *    the account. The `account` value can be the `email` address or the
 *    `unique_id` of the service account.
 *
 *  @returns GTLRIamQuery_ProjectsServiceAccountsKeysDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the ServiceAccountKey
 *  by key id.
 *
 *  Method: iam.projects.serviceAccounts.keys.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsKeysGet : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsKeysGetWithname:]

/**
 *  The resource name of the service account key in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}/keys/{key}`.
 *  Using `-` as a wildcard for the project will infer the project from
 *  the account. The `account` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The output format of the public key requested.
 *  X509_PEM is the default output format.
 *
 *  Likely values:
 *    @arg @c kGTLRIamPublicKeyTypeTypeNone Value "TYPE_NONE"
 *    @arg @c kGTLRIamPublicKeyTypeTypeX509PemFile Value "TYPE_X509_PEM_FILE"
 *    @arg @c kGTLRIamPublicKeyTypeTypeRawPublicKey Value "TYPE_RAW_PUBLIC_KEY"
 */
@property(nonatomic, copy, nullable) NSString *publicKeyType;

/**
 *  Fetches a @c GTLRIam_ServiceAccountKey.
 *
 *  Gets the ServiceAccountKey
 *  by key id.
 *
 *  @param name The resource name of the service account key in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}/keys/{key}`.
 *    Using `-` as a wildcard for the project will infer the project from
 *    the account. The `account` value can be the `email` address or the
 *    `unique_id` of the service account.
 *
 *  @returns GTLRIamQuery_ProjectsServiceAccountsKeysGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists ServiceAccountKeys.
 *
 *  Method: iam.projects.serviceAccounts.keys.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsKeysList : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsKeysListWithname:]

/**
 *  Filters the types of keys the user wants to include in the list
 *  response. Duplicate key types are not allowed. If no key type
 *  is provided, all keys are returned.
 *
 *  Likely values:
 *    @arg @c kGTLRIamKeyTypesKeyTypeUnspecified Value "KEY_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRIamKeyTypesUserManaged Value "USER_MANAGED"
 *    @arg @c kGTLRIamKeyTypesSystemManaged Value "SYSTEM_MANAGED"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *keyTypes;

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *  Using `-` as a wildcard for the project, will infer the project from
 *  the account. The `account` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_ListServiceAccountKeysResponse.
 *
 *  Lists ServiceAccountKeys.
 *
 *  @param name The resource name of the service account in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *    Using `-` as a wildcard for the project, will infer the project from
 *    the account. The `account` value can be the `email` address or the
 *    `unique_id` of the service account.
 *
 *  @returns GTLRIamQuery_ProjectsServiceAccountsKeysList
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists ServiceAccounts for a project.
 *
 *  Method: iam.projects.serviceAccounts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsList : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsListWithname:]

/**
 *  Required. The resource name of the project associated with the service
 *  accounts, such as `projects/my-project-123`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional limit on the number of service accounts to include in the
 *  response. Further accounts can subsequently be obtained by including the
 *  ListServiceAccountsResponse.next_page_token
 *  in a subsequent request.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional pagination token returned in an earlier
 *  ListServiceAccountsResponse.next_page_token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRIam_ListServiceAccountsResponse.
 *
 *  Lists ServiceAccounts for a project.
 *
 *  @param name Required. The resource name of the project associated with the
 *    service
 *    accounts, such as `projects/my-project-123`.
 *
 *  @returns GTLRIamQuery_ProjectsServiceAccountsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Sets the IAM access control policy for a
 *  ServiceAccount.
 *
 *  Method: iam.projects.serviceAccounts.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsSetIamPolicy : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRIam_Policy.
 *
 *  Sets the IAM access control policy for a
 *  ServiceAccount.
 *
 *  @param object The @c GTLRIam_SetIamPolicyRequest to include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @returns GTLRIamQuery_ProjectsServiceAccountsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRIam_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Signs a blob using a service account's system-managed private key.
 *
 *  Method: iam.projects.serviceAccounts.signBlob
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsSignBlob : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsSignBlobWithObject:name:]

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *  Using `-` as a wildcard for the project will infer the project from
 *  the account. The `account` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_SignBlobResponse.
 *
 *  Signs a blob using a service account's system-managed private key.
 *
 *  @param object The @c GTLRIam_SignBlobRequest to include in the query.
 *  @param name The resource name of the service account in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *    Using `-` as a wildcard for the project will infer the project from
 *    the account. The `account` value can be the `email` address or the
 *    `unique_id` of the service account.
 *
 *  @returns GTLRIamQuery_ProjectsServiceAccountsSignBlob
 */
+ (instancetype)queryWithObject:(GTLRIam_SignBlobRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Signs a JWT using a service account's system-managed private key.
 *  If no expiry time (`exp`) is provided in the `SignJwtRequest`, IAM sets an
 *  an expiry time of one hour by default. If you request an expiry time of
 *  more than one hour, the request will fail.
 *
 *  Method: iam.projects.serviceAccounts.signJwt
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsSignJwt : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsSignJwtWithObject:name:]

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *  Using `-` as a wildcard for the project will infer the project from
 *  the account. The `account` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_SignJwtResponse.
 *
 *  Signs a JWT using a service account's system-managed private key.
 *  If no expiry time (`exp`) is provided in the `SignJwtRequest`, IAM sets an
 *  an expiry time of one hour by default. If you request an expiry time of
 *  more than one hour, the request will fail.
 *
 *  @param object The @c GTLRIam_SignJwtRequest to include in the query.
 *  @param name The resource name of the service account in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *    Using `-` as a wildcard for the project will infer the project from
 *    the account. The `account` value can be the `email` address or the
 *    `unique_id` of the service account.
 *
 *  @returns GTLRIamQuery_ProjectsServiceAccountsSignJwt
 */
+ (instancetype)queryWithObject:(GTLRIam_SignJwtRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Tests the specified permissions against the IAM access control policy
 *  for a ServiceAccount.
 *
 *  Method: iam.projects.serviceAccounts.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsTestIamPermissions : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRIam_TestIamPermissionsResponse.
 *
 *  Tests the specified permissions against the IAM access control policy
 *  for a ServiceAccount.
 *
 *  @param object The @c GTLRIam_TestIamPermissionsRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @returns GTLRIamQuery_ProjectsServiceAccountsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRIam_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Updates a ServiceAccount.
 *  Currently, only the following fields are updatable:
 *  `display_name` .
 *  The `etag` is mandatory.
 *
 *  Method: iam.projects.serviceAccounts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_ProjectsServiceAccountsUpdate : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForProjectsServiceAccountsUpdateWithObject:name:]

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *  Requests using `-` as a wildcard for the project will infer the project
 *  from the `account` and the `account` value can be the `email` address or
 *  the `unique_id` of the service account.
 *  In responses the resource name will always be in the format
 *  `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRIam_ServiceAccount.
 *
 *  Updates a ServiceAccount.
 *  Currently, only the following fields are updatable:
 *  `display_name` .
 *  The `etag` is mandatory.
 *
 *  @param object The @c GTLRIam_ServiceAccount to include in the query.
 *  @param name The resource name of the service account in the following
 *    format:
 *    `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *    Requests using `-` as a wildcard for the project will infer the project
 *    from the `account` and the `account` value can be the `email` address or
 *    the `unique_id` of the service account.
 *    In responses the resource name will always be in the format
 *    `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *
 *  @returns GTLRIamQuery_ProjectsServiceAccountsUpdate
 */
+ (instancetype)queryWithObject:(GTLRIam_ServiceAccount *)object
                           name:(NSString *)name;

@end

/**
 *  Queries roles that can be granted on a particular resource.
 *  A role is grantable if it can be used as the role in a binding for a policy
 *  for that resource.
 *
 *  Method: iam.roles.queryGrantableRoles
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeIamCloudPlatform
 */
@interface GTLRIamQuery_RolesQueryGrantableRoles : GTLRIamQuery
// Previous library name was
//   +[GTLQueryIam queryForRolesQueryGrantableRolesWithObject:]

/**
 *  Fetches a @c GTLRIam_QueryGrantableRolesResponse.
 *
 *  Queries roles that can be granted on a particular resource.
 *  A role is grantable if it can be used as the role in a binding for a policy
 *  for that resource.
 *
 *  @param object The @c GTLRIam_QueryGrantableRolesRequest to include in the
 *    query.
 *
 *  @returns GTLRIamQuery_RolesQueryGrantableRoles
 */
+ (instancetype)queryWithObject:(GTLRIam_QueryGrantableRolesRequest *)object;

@end

NS_ASSUME_NONNULL_END
