// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Identity and Access Management (IAM) API (iam/v1)
// Description:
//   Manages identity and access control for Google Cloud Platform resources,
//   including the creation of service accounts, which you can use to
//   authenticate to Google and make API calls.
// Documentation:
//   https://cloud.google.com/iam/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRIam_AuditableService;
@class GTLRIam_AuditConfig;
@class GTLRIam_AuditLogConfig;
@class GTLRIam_Binding;
@class GTLRIam_BindingDelta;
@class GTLRIam_Expr;
@class GTLRIam_LintPolicyRequest_Context;
@class GTLRIam_LintResult;
@class GTLRIam_Permission;
@class GTLRIam_Policy;
@class GTLRIam_PolicyDelta;
@class GTLRIam_Role;
@class GTLRIam_ServiceAccount;
@class GTLRIam_ServiceAccountKey;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRIam_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
GTLR_EXTERN NSString * const kGTLRIam_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
GTLR_EXTERN NSString * const kGTLRIam_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
GTLR_EXTERN NSString * const kGTLRIam_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRIam_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRIam_BindingDelta.action

/**
 *  Unspecified.
 *
 *  Value: "ACTION_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRIam_BindingDelta_Action_ActionUnspecified;
/**
 *  Addition of a Binding.
 *
 *  Value: "ADD"
 */
GTLR_EXTERN NSString * const kGTLRIam_BindingDelta_Action_Add;
/**
 *  Removal of a Binding.
 *
 *  Value: "REMOVE"
 */
GTLR_EXTERN NSString * const kGTLRIam_BindingDelta_Action_Remove;

// ----------------------------------------------------------------------------
// GTLRIam_CreateServiceAccountKeyRequest.keyAlgorithm

/**
 *  1k RSA Key.
 *
 *  Value: "KEY_ALG_RSA_1024"
 */
GTLR_EXTERN NSString * const kGTLRIam_CreateServiceAccountKeyRequest_KeyAlgorithm_KeyAlgRsa1024;
/**
 *  2k RSA Key.
 *
 *  Value: "KEY_ALG_RSA_2048"
 */
GTLR_EXTERN NSString * const kGTLRIam_CreateServiceAccountKeyRequest_KeyAlgorithm_KeyAlgRsa2048;
/**
 *  An unspecified key algorithm.
 *
 *  Value: "KEY_ALG_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRIam_CreateServiceAccountKeyRequest_KeyAlgorithm_KeyAlgUnspecified;

// ----------------------------------------------------------------------------
// GTLRIam_CreateServiceAccountKeyRequest.privateKeyType

/**
 *  Google Credentials File format.
 *
 *  Value: "TYPE_GOOGLE_CREDENTIALS_FILE"
 */
GTLR_EXTERN NSString * const kGTLRIam_CreateServiceAccountKeyRequest_PrivateKeyType_TypeGoogleCredentialsFile;
/**
 *  PKCS12 format.
 *  The password for the PKCS12 file is `notasecret`.
 *  For more information, see https://tools.ietf.org/html/rfc7292.
 *
 *  Value: "TYPE_PKCS12_FILE"
 */
GTLR_EXTERN NSString * const kGTLRIam_CreateServiceAccountKeyRequest_PrivateKeyType_TypePkcs12File;
/**
 *  Unspecified. Equivalent to `TYPE_GOOGLE_CREDENTIALS_FILE`.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRIam_CreateServiceAccountKeyRequest_PrivateKeyType_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRIam_LintResult.level

/**
 *  A validation unit which operates on an individual binding. It is executed
 *  in both cases where the input object to lint is of type
 *  google.iam.v1.Policy or google.iam.v1.Binding.
 *
 *  Value: "BINDING"
 */
GTLR_EXTERN NSString * const kGTLRIam_LintResult_Level_Binding;
/**
 *  A validation unit which operates on an individual condition within a
 *  binding. It is executed in all three cases where the input object to
 *  lint is of type google.iam.v1.Policy,
 *  google.iam.v1.Binding or
 *  google.iam.v1.Binding.condition.
 *
 *  Value: "CONDITION"
 */
GTLR_EXTERN NSString * const kGTLRIam_LintResult_Level_Condition;
/**
 *  Level is unspecified.
 *
 *  Value: "LEVEL_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRIam_LintResult_Level_LevelUnspecified;
/**
 *  A validation unit which operates on a policy. It is executed only if the
 *  input object to lint is of type google.iam.v1.Policy.
 *
 *  Value: "POLICY"
 */
GTLR_EXTERN NSString * const kGTLRIam_LintResult_Level_Policy;

// ----------------------------------------------------------------------------
// GTLRIam_LintResult.severity

/**
 *  Deprecated severity level.
 *
 *  Value: "DEPRECATED"
 */
GTLR_EXTERN NSString * const kGTLRIam_LintResult_Severity_Deprecated;
/**
 *  A validation unit returns an error only for critical issues. If an
 *  attempt is made to set the problematic policy without rectifying the
 *  critical issue, it causes the `setPolicy` operation to fail.
 *
 *  Value: "ERROR"
 */
GTLR_EXTERN NSString * const kGTLRIam_LintResult_Severity_Error;
/**
 *  Any informative statement which is not severe enough to raise
 *  `ERROR`/`WARNING`/`NOTICE`, like auto-correction recommendations on the
 *  input content. Note that current version of the linter does not utilize
 *  `INFO`.
 *
 *  Value: "INFO"
 */
GTLR_EXTERN NSString * const kGTLRIam_LintResult_Severity_Info;
/**
 *  Reserved for the issues that are not severe as `ERROR`/`WARNING`, but
 *  need special handling. For instance, messages about skipped validation
 *  units are issued as `NOTICE`.
 *
 *  Value: "NOTICE"
 */
GTLR_EXTERN NSString * const kGTLRIam_LintResult_Severity_Notice;
/**
 *  Severity is unspecified.
 *
 *  Value: "SEVERITY_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRIam_LintResult_Severity_SeverityUnspecified;
/**
 *  Any issue which is severe enough but does not cause an error.
 *  For example, suspicious constructs in the input object will not
 *  necessarily fail `setPolicy`, but there is a high likelihood that they
 *  won't behave as expected during policy evaluation in `checkPolicy`.
 *  This includes the following common scenarios:
 *  - Unsatisfiable condition: Expired timestamp in date/time condition.
 *  - Ineffective condition: Condition on a <member, role> pair which is
 *  granted unconditionally in another binding of the same policy.
 *
 *  Value: "WARNING"
 */
GTLR_EXTERN NSString * const kGTLRIam_LintResult_Severity_Warning;

// ----------------------------------------------------------------------------
// GTLRIam_Permission.customRolesSupportLevel

/**
 *  Permission is not supported for custom role use.
 *
 *  Value: "NOT_SUPPORTED"
 */
GTLR_EXTERN NSString * const kGTLRIam_Permission_CustomRolesSupportLevel_NotSupported;
/**
 *  Permission is fully supported for custom role use.
 *
 *  Value: "SUPPORTED"
 */
GTLR_EXTERN NSString * const kGTLRIam_Permission_CustomRolesSupportLevel_Supported;
/**
 *  Permission is being tested to check custom role compatibility.
 *
 *  Value: "TESTING"
 */
GTLR_EXTERN NSString * const kGTLRIam_Permission_CustomRolesSupportLevel_Testing;

// ----------------------------------------------------------------------------
// GTLRIam_Permission.stage

/**
 *  The permission is currently in an alpha phase.
 *
 *  Value: "ALPHA"
 */
GTLR_EXTERN NSString * const kGTLRIam_Permission_Stage_Alpha;
/**
 *  The permission is currently in a beta phase.
 *
 *  Value: "BETA"
 */
GTLR_EXTERN NSString * const kGTLRIam_Permission_Stage_Beta;
/**
 *  The permission is being deprecated.
 *
 *  Value: "DEPRECATED"
 */
GTLR_EXTERN NSString * const kGTLRIam_Permission_Stage_Deprecated;
/**
 *  The permission is generally available.
 *
 *  Value: "GA"
 */
GTLR_EXTERN NSString * const kGTLRIam_Permission_Stage_Ga;

// ----------------------------------------------------------------------------
// GTLRIam_QueryGrantableRolesRequest.view

/**
 *  Omits the `included_permissions` field.
 *  This is the default value.
 *
 *  Value: "BASIC"
 */
GTLR_EXTERN NSString * const kGTLRIam_QueryGrantableRolesRequest_View_Basic;
/**
 *  Returns all fields.
 *
 *  Value: "FULL"
 */
GTLR_EXTERN NSString * const kGTLRIam_QueryGrantableRolesRequest_View_Full;

// ----------------------------------------------------------------------------
// GTLRIam_Role.stage

/**
 *  The user has indicated this role is currently in an Alpha phase. If this
 *  launch stage is selected, the `stage` field will not be included when
 *  requesting the definition for a given role.
 *
 *  Value: "ALPHA"
 */
GTLR_EXTERN NSString * const kGTLRIam_Role_Stage_Alpha;
/**
 *  The user has indicated this role is currently in a Beta phase.
 *
 *  Value: "BETA"
 */
GTLR_EXTERN NSString * const kGTLRIam_Role_Stage_Beta;
/**
 *  The user has indicated this role is being deprecated.
 *
 *  Value: "DEPRECATED"
 */
GTLR_EXTERN NSString * const kGTLRIam_Role_Stage_Deprecated;
/**
 *  This role is disabled and will not contribute permissions to any members
 *  it is granted to in policies.
 *
 *  Value: "DISABLED"
 */
GTLR_EXTERN NSString * const kGTLRIam_Role_Stage_Disabled;
/**
 *  The user has indicated this role is currently in an EAP phase.
 *
 *  Value: "EAP"
 */
GTLR_EXTERN NSString * const kGTLRIam_Role_Stage_Eap;
/**
 *  The user has indicated this role is generally available.
 *
 *  Value: "GA"
 */
GTLR_EXTERN NSString * const kGTLRIam_Role_Stage_Ga;

// ----------------------------------------------------------------------------
// GTLRIam_ServiceAccountKey.keyAlgorithm

/**
 *  1k RSA Key.
 *
 *  Value: "KEY_ALG_RSA_1024"
 */
GTLR_EXTERN NSString * const kGTLRIam_ServiceAccountKey_KeyAlgorithm_KeyAlgRsa1024;
/**
 *  2k RSA Key.
 *
 *  Value: "KEY_ALG_RSA_2048"
 */
GTLR_EXTERN NSString * const kGTLRIam_ServiceAccountKey_KeyAlgorithm_KeyAlgRsa2048;
/**
 *  An unspecified key algorithm.
 *
 *  Value: "KEY_ALG_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRIam_ServiceAccountKey_KeyAlgorithm_KeyAlgUnspecified;

// ----------------------------------------------------------------------------
// GTLRIam_ServiceAccountKey.privateKeyType

/**
 *  Google Credentials File format.
 *
 *  Value: "TYPE_GOOGLE_CREDENTIALS_FILE"
 */
GTLR_EXTERN NSString * const kGTLRIam_ServiceAccountKey_PrivateKeyType_TypeGoogleCredentialsFile;
/**
 *  PKCS12 format.
 *  The password for the PKCS12 file is `notasecret`.
 *  For more information, see https://tools.ietf.org/html/rfc7292.
 *
 *  Value: "TYPE_PKCS12_FILE"
 */
GTLR_EXTERN NSString * const kGTLRIam_ServiceAccountKey_PrivateKeyType_TypePkcs12File;
/**
 *  Unspecified. Equivalent to `TYPE_GOOGLE_CREDENTIALS_FILE`.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRIam_ServiceAccountKey_PrivateKeyType_TypeUnspecified;

/**
 *  Contains information about an auditable service.
 */
@interface GTLRIam_AuditableService : GTLRObject

/**
 *  Public name of the service.
 *  For example, the service name for Cloud IAM is 'iam.googleapis.com'.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Specifies the audit configuration for a service.
 *  The configuration determines which permission types are logged, and what
 *  identities, if any, are exempted from logging.
 *  An AuditConfig must have one or more AuditLogConfigs.
 *  If there are AuditConfigs for both `allServices` and a specific service,
 *  the union of the two AuditConfigs is used for that service: the log_types
 *  specified in each AuditConfig are enabled, and the exempted_members in each
 *  AuditLogConfig are exempted.
 *  Example Policy with multiple AuditConfigs:
 *  {
 *  "audit_configs": [
 *  {
 *  "service": "allServices"
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  "exempted_members": [
 *  "user:foo\@gmail.com"
 *  ]
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  },
 *  {
 *  "log_type": "ADMIN_READ",
 *  }
 *  ]
 *  },
 *  {
 *  "service": "fooservice.googleapis.com"
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  "exempted_members": [
 *  "user:bar\@gmail.com"
 *  ]
 *  }
 *  ]
 *  }
 *  ]
 *  }
 *  For fooservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts foo\@gmail.com from DATA_READ logging, and
 *  bar\@gmail.com from DATA_WRITE logging.
 */
@interface GTLRIam_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRIam_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging.
 *  For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
 *  `allServices` is a special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Audit log information specific to Cloud IAM. This message is serialized
 *  as an `Any` type in the `ServiceData` message of an
 *  `AuditLog` message.
 */
@interface GTLRIam_AuditData : GTLRObject

/** Policy delta between the original policy and the newly set policy. */
@property(nonatomic, strong, nullable) GTLRIam_PolicyDelta *policyDelta;

@end


/**
 *  Provides the configuration for logging a type of permissions.
 *  Example:
 *  {
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  "exempted_members": [
 *  "user:foo\@gmail.com"
 *  ]
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  }
 *  ]
 *  }
 *  This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
 *  foo\@gmail.com from DATA_READ logging.
 */
@interface GTLRIam_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission.
 *  Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRIam_AuditLogConfig_LogType_AdminRead Admin reads. Example:
 *        CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRIam_AuditLogConfig_LogType_DataRead Data reads. Example:
 *        CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRIam_AuditLogConfig_LogType_DataWrite Data writes. Example:
 *        CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRIam_AuditLogConfig_LogType_LogTypeUnspecified Default case.
 *        Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members` with a `role`.
 */
@interface GTLRIam_Binding : GTLRObject

/**
 *  Unimplemented. The condition that is associated with this binding.
 *  NOTE: an unsatisfied condition will not allow user access via current
 *  binding. Different bindings, including their conditions, are examined
 *  independently.
 */
@property(nonatomic, strong, nullable) GTLRIam_Expr *condition;

/**
 *  Specifies the identities requesting access for a Cloud Platform resource.
 *  `members` can have the following values:
 *  * `allUsers`: A special identifier that represents anyone who is
 *  on the internet; with or without a Google account.
 *  * `allAuthenticatedUsers`: A special identifier that represents anyone
 *  who is authenticated with a Google account or a service account.
 *  * `user:{emailid}`: An email address that represents a specific Google
 *  account. For example, `alice\@gmail.com` .
 *  * `serviceAccount:{emailid}`: An email address that represents a service
 *  account. For example, `my-other-app\@appspot.gserviceaccount.com`.
 *  * `group:{emailid}`: An email address that represents a Google group.
 *  For example, `admins\@example.com`.
 *  * `domain:{domain}`: A Google Apps domain name that represents all the
 *  users of that domain. For example, `google.com` or `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to `members`.
 *  For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  One delta entry for Binding. Each individual change (only one member in each
 *  entry) to a binding will be a separate entry.
 */
@interface GTLRIam_BindingDelta : GTLRObject

/**
 *  The action that was performed on a Binding.
 *  Required
 *
 *  Likely values:
 *    @arg @c kGTLRIam_BindingDelta_Action_ActionUnspecified Unspecified.
 *        (Value: "ACTION_UNSPECIFIED")
 *    @arg @c kGTLRIam_BindingDelta_Action_Add Addition of a Binding. (Value:
 *        "ADD")
 *    @arg @c kGTLRIam_BindingDelta_Action_Remove Removal of a Binding. (Value:
 *        "REMOVE")
 */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  Unimplemented. The condition that is associated with this binding.
 *  This field is logged only for Cloud Audit Logging.
 */
@property(nonatomic, strong, nullable) GTLRIam_Expr *condition;

/**
 *  A single identity requesting access for a Cloud Platform resource.
 *  Follows the same format of Binding.members.
 *  Required
 */
@property(nonatomic, copy, nullable) NSString *member;

/**
 *  Role that is assigned to `members`.
 *  For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
 *  Required
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The request to create a new role.
 */
@interface GTLRIam_CreateRoleRequest : GTLRObject

/** The Role resource to create. */
@property(nonatomic, strong, nullable) GTLRIam_Role *role;

/** The role id to use for this role. */
@property(nonatomic, copy, nullable) NSString *roleId;

@end


/**
 *  The service account key create request.
 */
@interface GTLRIam_CreateServiceAccountKeyRequest : GTLRObject

/**
 *  Which type of key and algorithm to use for the key.
 *  The default is currently a 2K RSA key. However this may change in the
 *  future.
 *
 *  Likely values:
 *    @arg @c kGTLRIam_CreateServiceAccountKeyRequest_KeyAlgorithm_KeyAlgRsa1024
 *        1k RSA Key. (Value: "KEY_ALG_RSA_1024")
 *    @arg @c kGTLRIam_CreateServiceAccountKeyRequest_KeyAlgorithm_KeyAlgRsa2048
 *        2k RSA Key. (Value: "KEY_ALG_RSA_2048")
 *    @arg @c kGTLRIam_CreateServiceAccountKeyRequest_KeyAlgorithm_KeyAlgUnspecified
 *        An unspecified key algorithm. (Value: "KEY_ALG_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *keyAlgorithm;

/**
 *  The output format of the private key. The default value is
 *  `TYPE_GOOGLE_CREDENTIALS_FILE`, which is the Google Credentials File
 *  format.
 *
 *  Likely values:
 *    @arg @c kGTLRIam_CreateServiceAccountKeyRequest_PrivateKeyType_TypeGoogleCredentialsFile
 *        Google Credentials File format. (Value:
 *        "TYPE_GOOGLE_CREDENTIALS_FILE")
 *    @arg @c kGTLRIam_CreateServiceAccountKeyRequest_PrivateKeyType_TypePkcs12File
 *        PKCS12 format.
 *        The password for the PKCS12 file is `notasecret`.
 *        For more information, see https://tools.ietf.org/html/rfc7292. (Value:
 *        "TYPE_PKCS12_FILE")
 *    @arg @c kGTLRIam_CreateServiceAccountKeyRequest_PrivateKeyType_TypeUnspecified
 *        Unspecified. Equivalent to `TYPE_GOOGLE_CREDENTIALS_FILE`. (Value:
 *        "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *privateKeyType;

@end


/**
 *  The service account create request.
 */
@interface GTLRIam_CreateServiceAccountRequest : GTLRObject

/**
 *  Required. The account id that is used to generate the service account
 *  email address and a stable unique id. It is unique within a project,
 *  must be 6-30 characters long, and match the regular expression
 *  `[a-z]([-a-z0-9]*[a-z0-9])` to comply with RFC1035.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The ServiceAccount resource to create.
 *  Currently, only the following values are user assignable:
 *  `display_name` .
 */
@property(nonatomic, strong, nullable) GTLRIam_ServiceAccount *serviceAccount;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRIam_Empty : GTLRObject
@end


/**
 *  Represents an expression text. Example:
 *  title: "User account presence"
 *  description: "Determines whether the request has a user account"
 *  expression: "size(request.user) > 0"
 */
@interface GTLRIam_Expr : GTLRObject

/**
 *  An optional description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in
 *  Common Expression Language syntax.
 *  The application context of the containing message determines which
 *  well-known feature set of CEL is supported.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  An optional string indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  An optional title for the expression, i.e. a short string describing
 *  its purpose. This can be used e.g. in UIs which allow to enter the
 *  expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  The request to lint a Cloud IAM policy object. LintPolicy is currently
 *  functional only for `lint_object` of type `condition`.
 */
@interface GTLRIam_LintPolicyRequest : GTLRObject

/**
 *  Binding object to be linted. The functionality of linting a binding is
 *  not yet implemented and if this field is set, it returns NOT_IMPLEMENTED
 *  error.
 */
@property(nonatomic, strong, nullable) GTLRIam_Binding *binding;

/** google.iam.v1.Binding.condition object to be linted. */
@property(nonatomic, strong, nullable) GTLRIam_Expr *condition;

/**
 *  `context` contains additional *permission-controlled* data that any
 *  lint unit may depend on, in form of `{key: value}` pairs. Currently, this
 *  field is non-operational and it will not be used during the lint operation.
 */
@property(nonatomic, strong, nullable) GTLRIam_LintPolicyRequest_Context *context;

/**
 *  The full resource name of the policy this lint request is about.
 *  The name follows the Google Cloud Platform (GCP) resource format.
 *  For example, a GCP project with ID `my-project` will be named
 *  `//cloudresourcemanager.googleapis.com/projects/my-project`.
 *  The resource name is not used to read the policy instance from the Cloud
 *  IAM database. The candidate policy for lint has to be provided in the same
 *  request object.
 */
@property(nonatomic, copy, nullable) NSString *fullResourceName;

/**
 *  Policy object to be linted. The functionality of linting a policy is not
 *  yet implemented and if this field is set, it returns NOT_IMPLEMENTED
 *  error.
 */
@property(nonatomic, strong, nullable) GTLRIam_Policy *policy;

@end


/**
 *  `context` contains additional *permission-controlled* data that any
 *  lint unit may depend on, in form of `{key: value}` pairs. Currently, this
 *  field is non-operational and it will not be used during the lint operation.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRIam_LintPolicyRequest_Context : GTLRObject
@end


/**
 *  The response of a lint operation. An empty response indicates
 *  the operation was able to fully execute and no lint issue was found.
 */
@interface GTLRIam_LintPolicyResponse : GTLRObject

/**
 *  List of lint results sorted by a composite <severity, binding_ordinal> key,
 *  descending order of severity and ascending order of binding_ordinal.
 *  There is no certain order among the same keys.
 *  For cross-binding results (only if the input object to lint is
 *  instance of google.iam.v1.Policy), there will be a
 *  google.iam.admin.v1.LintResult for each of the involved bindings,
 *  and the associated debug_message may enumerate the other involved
 *  binding ordinal number(s).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRIam_LintResult *> *lintResults;

@end


/**
 *  Structured response of a single validation unit.
 */
@interface GTLRIam_LintResult : GTLRObject

/**
 *  0-based index ordinality of the binding in the input object associated
 *  with this result.
 *  This field is populated only if the input object to lint is of type
 *  google.iam.v1.Policy, which can comprise more than one binding.
 *  It is set to -1 if the result is not associated with any particular
 *  binding and only targets the policy as a whole, such as results about
 *  policy size violations.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bindingOrdinal;

/** Human readable debug message associated with the issue. */
@property(nonatomic, copy, nullable) NSString *debugMessage;

/**
 *  The name of the field for which this lint result is about.
 *  For nested messages, `field_name` consists of names of the embedded fields
 *  separated by period character. The top-level qualifier is the input object
 *  to lint in the request. For instance, if the lint request is on a
 *  google.iam.v1.Policy and this lint result is about a condition
 *  expression of one of the input policy bindings, the field would be
 *  populated as `policy.bindings.condition.expression`.
 *  This field does not identify the ordinality of the repetitive fields (for
 *  instance bindings in a policy).
 */
@property(nonatomic, copy, nullable) NSString *fieldName;

/**
 *  The validation unit level.
 *
 *  Likely values:
 *    @arg @c kGTLRIam_LintResult_Level_Binding A validation unit which operates
 *        on an individual binding. It is executed
 *        in both cases where the input object to lint is of type
 *        google.iam.v1.Policy or google.iam.v1.Binding. (Value: "BINDING")
 *    @arg @c kGTLRIam_LintResult_Level_Condition A validation unit which
 *        operates on an individual condition within a
 *        binding. It is executed in all three cases where the input object to
 *        lint is of type google.iam.v1.Policy,
 *        google.iam.v1.Binding or
 *        google.iam.v1.Binding.condition. (Value: "CONDITION")
 *    @arg @c kGTLRIam_LintResult_Level_LevelUnspecified Level is unspecified.
 *        (Value: "LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRIam_LintResult_Level_Policy A validation unit which operates
 *        on a policy. It is executed only if the
 *        input object to lint is of type google.iam.v1.Policy. (Value:
 *        "POLICY")
 */
@property(nonatomic, copy, nullable) NSString *level;

/**
 *  0-based character position of problematic construct within the object
 *  identified by `field_name`. Currently, this is populated only for condition
 *  expression.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *locationOffset;

/**
 *  The validation unit severity.
 *
 *  Likely values:
 *    @arg @c kGTLRIam_LintResult_Severity_Deprecated Deprecated severity level.
 *        (Value: "DEPRECATED")
 *    @arg @c kGTLRIam_LintResult_Severity_Error A validation unit returns an
 *        error only for critical issues. If an
 *        attempt is made to set the problematic policy without rectifying the
 *        critical issue, it causes the `setPolicy` operation to fail. (Value:
 *        "ERROR")
 *    @arg @c kGTLRIam_LintResult_Severity_Info Any informative statement which
 *        is not severe enough to raise
 *        `ERROR`/`WARNING`/`NOTICE`, like auto-correction recommendations on
 *        the
 *        input content. Note that current version of the linter does not
 *        utilize
 *        `INFO`. (Value: "INFO")
 *    @arg @c kGTLRIam_LintResult_Severity_Notice Reserved for the issues that
 *        are not severe as `ERROR`/`WARNING`, but
 *        need special handling. For instance, messages about skipped validation
 *        units are issued as `NOTICE`. (Value: "NOTICE")
 *    @arg @c kGTLRIam_LintResult_Severity_SeverityUnspecified Severity is
 *        unspecified. (Value: "SEVERITY_UNSPECIFIED")
 *    @arg @c kGTLRIam_LintResult_Severity_Warning Any issue which is severe
 *        enough but does not cause an error.
 *        For example, suspicious constructs in the input object will not
 *        necessarily fail `setPolicy`, but there is a high likelihood that they
 *        won't behave as expected during policy evaluation in `checkPolicy`.
 *        This includes the following common scenarios:
 *        - Unsatisfiable condition: Expired timestamp in date/time condition.
 *        - Ineffective condition: Condition on a <member, role> pair which is
 *        granted unconditionally in another binding of the same policy. (Value:
 *        "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *severity;

/**
 *  The validation unit name, for instance
 *  “lintValidationUnits/ConditionComplexityCheck”.
 */
@property(nonatomic, copy, nullable) NSString *validationUnitName;

@end


/**
 *  The response containing the roles defined under a resource.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "roles" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRIam_ListRolesResponse : GTLRCollectionObject

/**
 *  To retrieve the next page of results, set
 *  `ListRolesRequest.page_token` to this value.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The Roles defined on this resource.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRIam_Role *> *roles;

@end


/**
 *  The service account keys list response.
 */
@interface GTLRIam_ListServiceAccountKeysResponse : GTLRObject

/** The public keys for the service account. */
@property(nonatomic, strong, nullable) NSArray<GTLRIam_ServiceAccountKey *> *keys;

@end


/**
 *  The service account list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "accounts" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRIam_ListServiceAccountsResponse : GTLRCollectionObject

/**
 *  The list of matching service accounts.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRIam_ServiceAccount *> *accounts;

/**
 *  To retrieve the next page of results, set
 *  ListServiceAccountsRequest.page_token
 *  to this value.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The patch service account request.
 */
@interface GTLRIam_PatchServiceAccountRequest : GTLRObject

@property(nonatomic, strong, nullable) GTLRIam_ServiceAccount *serviceAccount;

/**
 *  updateMask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  A permission which can be included by a role.
 */
@interface GTLRIam_Permission : GTLRObject

/**
 *  The service API associated with the permission is not enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *apiDisabled;

/**
 *  The current custom role support level.
 *
 *  Likely values:
 *    @arg @c kGTLRIam_Permission_CustomRolesSupportLevel_NotSupported
 *        Permission is not supported for custom role use. (Value:
 *        "NOT_SUPPORTED")
 *    @arg @c kGTLRIam_Permission_CustomRolesSupportLevel_Supported Permission
 *        is fully supported for custom role use. (Value: "SUPPORTED")
 *    @arg @c kGTLRIam_Permission_CustomRolesSupportLevel_Testing Permission is
 *        being tested to check custom role compatibility. (Value: "TESTING")
 */
@property(nonatomic, copy, nullable) NSString *customRolesSupportLevel;

/**
 *  A brief description of what this Permission is used for.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The name of this Permission. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  This permission can ONLY be used in predefined roles.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *onlyInPredefinedRoles;

/**
 *  The current launch stage of the permission.
 *
 *  Likely values:
 *    @arg @c kGTLRIam_Permission_Stage_Alpha The permission is currently in an
 *        alpha phase. (Value: "ALPHA")
 *    @arg @c kGTLRIam_Permission_Stage_Beta The permission is currently in a
 *        beta phase. (Value: "BETA")
 *    @arg @c kGTLRIam_Permission_Stage_Deprecated The permission is being
 *        deprecated. (Value: "DEPRECATED")
 *    @arg @c kGTLRIam_Permission_Stage_Ga The permission is generally
 *        available. (Value: "GA")
 */
@property(nonatomic, copy, nullable) NSString *stage;

/** The title of this Permission. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Defines an Identity and Access Management (IAM) policy. It is used to
 *  specify access control policies for Cloud Platform resources.
 *  A `Policy` consists of a list of `bindings`. A `binding` binds a list of
 *  `members` to a `role`, where the members can be user accounts, Google
 *  groups,
 *  Google domains, and service accounts. A `role` is a named list of
 *  permissions
 *  defined by IAM.
 *  **JSON Example**
 *  {
 *  "bindings": [
 *  {
 *  "role": "roles/owner",
 *  "members": [
 *  "user:mike\@example.com",
 *  "group:admins\@example.com",
 *  "domain:google.com",
 *  "serviceAccount:my-other-app\@appspot.gserviceaccount.com"
 *  ]
 *  },
 *  {
 *  "role": "roles/viewer",
 *  "members": ["user:sean\@example.com"]
 *  }
 *  ]
 *  }
 *  **YAML Example**
 *  bindings:
 *  - members:
 *  - user:mike\@example.com
 *  - group:admins\@example.com
 *  - domain:google.com
 *  - serviceAccount:my-other-app\@appspot.gserviceaccount.com
 *  role: roles/owner
 *  - members:
 *  - user:sean\@example.com
 *  role: roles/viewer
 *  For a description of IAM and its features, see the
 *  [IAM developer's guide](https://cloud.google.com/iam/docs).
 */
@interface GTLRIam_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRIam_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members` to a `role`.
 *  `bindings` with no members will result in an error.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRIam_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help
 *  prevent simultaneous updates of a policy from overwriting each other.
 *  It is strongly suggested that systems make use of the `etag` in the
 *  read-modify-write cycle to perform policy updates in order to avoid race
 *  conditions: An `etag` is returned in the response to `getIamPolicy`, and
 *  systems are expected to put that etag in the request to `setIamPolicy` to
 *  ensure that their change will be applied to the same version of the policy.
 *  If no `etag` is provided in the call to `setIamPolicy`, then the existing
 *  policy is overwritten blindly.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Deprecated.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  The difference delta between two policies.
 */
@interface GTLRIam_PolicyDelta : GTLRObject

/** The delta for Bindings between two policies. */
@property(nonatomic, strong, nullable) NSArray<GTLRIam_BindingDelta *> *bindingDeltas;

@end


/**
 *  A request to get the list of auditable services for a resource.
 */
@interface GTLRIam_QueryAuditableServicesRequest : GTLRObject

/**
 *  Required. The full resource name to query from the list of auditable
 *  services.
 *  The name follows the Google Cloud Platform resource format.
 *  For example, a Cloud Platform project with id `my-project` will be named
 *  `//cloudresourcemanager.googleapis.com/projects/my-project`.
 */
@property(nonatomic, copy, nullable) NSString *fullResourceName;

@end


/**
 *  A response containing a list of auditable services for a resource.
 */
@interface GTLRIam_QueryAuditableServicesResponse : GTLRObject

/** The auditable services for a resource. */
@property(nonatomic, strong, nullable) NSArray<GTLRIam_AuditableService *> *services;

@end


/**
 *  The grantable role query request.
 */
@interface GTLRIam_QueryGrantableRolesRequest : GTLRObject

/**
 *  Required. The full resource name to query from the list of grantable roles.
 *  The name follows the Google Cloud Platform resource format.
 *  For example, a Cloud Platform project with id `my-project` will be named
 *  `//cloudresourcemanager.googleapis.com/projects/my-project`.
 */
@property(nonatomic, copy, nullable) NSString *fullResourceName;

/**
 *  Optional limit on the number of roles to include in the response.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  Optional pagination token returned in an earlier
 *  QueryGrantableRolesResponse.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  view
 *
 *  Likely values:
 *    @arg @c kGTLRIam_QueryGrantableRolesRequest_View_Basic Omits the
 *        `included_permissions` field.
 *        This is the default value. (Value: "BASIC")
 *    @arg @c kGTLRIam_QueryGrantableRolesRequest_View_Full Returns all fields.
 *        (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

@end


/**
 *  The grantable role query response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "roles" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRIam_QueryGrantableRolesResponse : GTLRCollectionObject

/**
 *  To retrieve the next page of results, set
 *  `QueryGrantableRolesRequest.page_token` to this value.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of matching roles.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRIam_Role *> *roles;

@end


/**
 *  A request to get permissions which can be tested on a resource.
 */
@interface GTLRIam_QueryTestablePermissionsRequest : GTLRObject

/**
 *  Required. The full resource name to query from the list of testable
 *  permissions.
 *  The name follows the Google Cloud Platform resource format.
 *  For example, a Cloud Platform project with id `my-project` will be named
 *  `//cloudresourcemanager.googleapis.com/projects/my-project`.
 */
@property(nonatomic, copy, nullable) NSString *fullResourceName;

/**
 *  Optional limit on the number of permissions to include in the response.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  Optional pagination token returned in an earlier
 *  QueryTestablePermissionsRequest.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

@end


/**
 *  The response containing permissions which can be tested on a resource.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "permissions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRIam_QueryTestablePermissionsResponse : GTLRCollectionObject

/**
 *  To retrieve the next page of results, set
 *  `QueryTestableRolesRequest.page_token` to this value.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The Permissions testable on the requested resource.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRIam_Permission *> *permissions;

@end


/**
 *  A role in the Identity and Access Management API.
 */
@interface GTLRIam_Role : GTLRObject

/**
 *  The current deleted state of the role. This field is read only.
 *  It will be ignored in calls to CreateRole and UpdateRole.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleted;

/**
 *  Optional. A human-readable description for the role.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Used to perform a consistent read-modify-write.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The names of the permissions this role grants when bound in an IAM policy.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *includedPermissions;

/**
 *  The name of the role.
 *  When Role is used in CreateRole, the role name must not be set.
 *  When Role is used in output and other input such as UpdateRole, the role
 *  name is the complete path, e.g., roles/logging.viewer for curated roles
 *  and organizations/{ORGANIZATION_ID}/roles/logging.viewer for custom roles.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The current launch stage of the role. If the `ALPHA` launch stage has been
 *  selected for a role, the `stage` field will not be included in the
 *  returned definition for the role.
 *
 *  Likely values:
 *    @arg @c kGTLRIam_Role_Stage_Alpha The user has indicated this role is
 *        currently in an Alpha phase. If this
 *        launch stage is selected, the `stage` field will not be included when
 *        requesting the definition for a given role. (Value: "ALPHA")
 *    @arg @c kGTLRIam_Role_Stage_Beta The user has indicated this role is
 *        currently in a Beta phase. (Value: "BETA")
 *    @arg @c kGTLRIam_Role_Stage_Deprecated The user has indicated this role is
 *        being deprecated. (Value: "DEPRECATED")
 *    @arg @c kGTLRIam_Role_Stage_Disabled This role is disabled and will not
 *        contribute permissions to any members
 *        it is granted to in policies. (Value: "DISABLED")
 *    @arg @c kGTLRIam_Role_Stage_Eap The user has indicated this role is
 *        currently in an EAP phase. (Value: "EAP")
 *    @arg @c kGTLRIam_Role_Stage_Ga The user has indicated this role is
 *        generally available. (Value: "GA")
 */
@property(nonatomic, copy, nullable) NSString *stage;

/**
 *  Optional. A human-readable title for the role. Typically this
 *  is limited to 100 UTF-8 bytes.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  A service account in the Identity and Access Management API.
 *  To create a service account, specify the `project_id` and the `account_id`
 *  for the account. The `account_id` is unique within the project, and is used
 *  to generate the service account email address and a stable
 *  `unique_id`.
 *  If the account already exists, the account's resource name is returned
 *  in the format of projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}. The caller
 *  can use the name in other methods to access the account.
 *  All other methods can identify the service account using the format
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *  Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *  the account. The `ACCOUNT` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@interface GTLRIam_ServiceAccount : GTLRObject

/**
 *  Optional. A user-specified name for the service account.
 *  Must be less than or equal to 100 UTF-8 bytes.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** \@OutputOnly The email address of the service account. */
@property(nonatomic, copy, nullable) NSString *email;

/**
 *  Optional. Note: `etag` is an inoperable legacy field that is only returned
 *  for backwards compatibility.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *  Requests using `-` as a wildcard for the `PROJECT_ID` will infer the
 *  project from the `account` and the `ACCOUNT` value can be the `email`
 *  address or the `unique_id` of the service account.
 *  In responses the resource name will always be in the format
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  \@OutputOnly The OAuth2 client id for the service account.
 *  This is used in conjunction with the OAuth2 clientconfig API to make
 *  three legged OAuth2 (3LO) flows to access the data of Google users.
 */
@property(nonatomic, copy, nullable) NSString *oauth2ClientId;

/** \@OutputOnly The id of the project that owns the service account. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** \@OutputOnly The unique and stable id of the service account. */
@property(nonatomic, copy, nullable) NSString *uniqueId;

@end


/**
 *  Represents a service account key.
 *  A service account has two sets of key-pairs: user-managed, and
 *  system-managed.
 *  User-managed key-pairs can be created and deleted by users. Users are
 *  responsible for rotating these keys periodically to ensure security of
 *  their service accounts. Users retain the private key of these key-pairs,
 *  and Google retains ONLY the public key.
 *  System-managed keys are automatically rotated by Google, and are used for
 *  signing for a maximum of two weeks. The rotation process is probabilistic,
 *  and usage of the new key will gradually ramp up and down over the key's
 *  lifetime. We recommend caching the public key set for a service account for
 *  no more than 24 hours to ensure you have access to the latest keys.
 *  Public keys for all service accounts are also published at the OAuth2
 *  Service Account API.
 */
@interface GTLRIam_ServiceAccountKey : GTLRObject

/**
 *  Specifies the algorithm (and possibly key size) for the key.
 *
 *  Likely values:
 *    @arg @c kGTLRIam_ServiceAccountKey_KeyAlgorithm_KeyAlgRsa1024 1k RSA Key.
 *        (Value: "KEY_ALG_RSA_1024")
 *    @arg @c kGTLRIam_ServiceAccountKey_KeyAlgorithm_KeyAlgRsa2048 2k RSA Key.
 *        (Value: "KEY_ALG_RSA_2048")
 *    @arg @c kGTLRIam_ServiceAccountKey_KeyAlgorithm_KeyAlgUnspecified An
 *        unspecified key algorithm. (Value: "KEY_ALG_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *keyAlgorithm;

/**
 *  The resource name of the service account key in the following format
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The private key data. Only provided in `CreateServiceAccountKey`
 *  responses. Make sure to keep the private key data secure because it
 *  allows for the assertion of the service account identity.
 *  When base64 decoded, the private key data can be used to authenticate with
 *  Google API client libraries and with
 *  <a href="/sdk/gcloud/reference/auth/activate-service-account">gcloud
 *  auth activate-service-account</a>.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *privateKeyData;

/**
 *  The output format for the private key.
 *  Only provided in `CreateServiceAccountKey` responses, not
 *  in `GetServiceAccountKey` or `ListServiceAccountKey` responses.
 *  Google never exposes system-managed private keys, and never retains
 *  user-managed private keys.
 *
 *  Likely values:
 *    @arg @c kGTLRIam_ServiceAccountKey_PrivateKeyType_TypeGoogleCredentialsFile
 *        Google Credentials File format. (Value:
 *        "TYPE_GOOGLE_CREDENTIALS_FILE")
 *    @arg @c kGTLRIam_ServiceAccountKey_PrivateKeyType_TypePkcs12File PKCS12
 *        format.
 *        The password for the PKCS12 file is `notasecret`.
 *        For more information, see https://tools.ietf.org/html/rfc7292. (Value:
 *        "TYPE_PKCS12_FILE")
 *    @arg @c kGTLRIam_ServiceAccountKey_PrivateKeyType_TypeUnspecified
 *        Unspecified. Equivalent to `TYPE_GOOGLE_CREDENTIALS_FILE`. (Value:
 *        "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *privateKeyType;

/**
 *  The public key data. Only provided in `GetServiceAccountKey` responses.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *publicKeyData;

/** The key can be used after this timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *validAfterTime;

/** The key can be used before this timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *validBeforeTime;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRIam_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a
 *  valid policy but certain Cloud Platform services (such as Projects)
 *  might reject them.
 */
@property(nonatomic, strong, nullable) GTLRIam_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used:
 *  paths: "bindings, etag"
 *  This field is only used by Cloud IAM.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  The service account sign blob request.
 */
@interface GTLRIam_SignBlobRequest : GTLRObject

/**
 *  The bytes to sign.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *bytesToSign;

@end


/**
 *  The service account sign blob response.
 */
@interface GTLRIam_SignBlobResponse : GTLRObject

/** The id of the key used to sign the blob. */
@property(nonatomic, copy, nullable) NSString *keyId;

/**
 *  The signed blob.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *signature;

@end


/**
 *  The service account sign JWT request.
 */
@interface GTLRIam_SignJwtRequest : GTLRObject

/** The JWT payload to sign, a JSON JWT Claim set. */
@property(nonatomic, copy, nullable) NSString *payload;

@end


/**
 *  The service account sign JWT response.
 */
@interface GTLRIam_SignJwtResponse : GTLRObject

/** The id of the key used to sign the JWT. */
@property(nonatomic, copy, nullable) NSString *keyId;

/** The signed JWT. */
@property(nonatomic, copy, nullable) NSString *signedJwt;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRIam_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as '*' or 'storage.*') are not allowed. For more
 *  information see
 *  [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRIam_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is
 *  allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  The request to undelete an existing role.
 */
@interface GTLRIam_UndeleteRoleRequest : GTLRObject

/**
 *  Used to perform a consistent read-modify-write.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
