// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Identity and Access Management (IAM) API (iam/v1)
// Description:
//   Manages identity and access control for Google Cloud Platform resources,
//   including the creation of service accounts, which you can use to
//   authenticate to Google and make API calls.
// Documentation:
//   https://cloud.google.com/iam/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRIam_Binding;
@class GTLRIam_BindingDelta;
@class GTLRIam_Policy;
@class GTLRIam_PolicyDelta;
@class GTLRIam_Role;
@class GTLRIam_ServiceAccount;
@class GTLRIam_ServiceAccountKey;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRIam_BindingDelta.action

/**
 *  Unspecified.
 *
 *  Value: "ACTION_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRIam_BindingDelta_Action_ActionUnspecified;
/**
 *  Addition of a Binding.
 *
 *  Value: "ADD"
 */
GTLR_EXTERN NSString * const kGTLRIam_BindingDelta_Action_Add;
/**
 *  Removal of a Binding.
 *
 *  Value: "REMOVE"
 */
GTLR_EXTERN NSString * const kGTLRIam_BindingDelta_Action_Remove;

// ----------------------------------------------------------------------------
// GTLRIam_CreateServiceAccountKeyRequest.keyAlgorithm

/**
 *  1k RSA Key.
 *
 *  Value: "KEY_ALG_RSA_1024"
 */
GTLR_EXTERN NSString * const kGTLRIam_CreateServiceAccountKeyRequest_KeyAlgorithm_KeyAlgRsa1024;
/**
 *  2k RSA Key.
 *
 *  Value: "KEY_ALG_RSA_2048"
 */
GTLR_EXTERN NSString * const kGTLRIam_CreateServiceAccountKeyRequest_KeyAlgorithm_KeyAlgRsa2048;
/**
 *  An unspecified key algorithm.
 *
 *  Value: "KEY_ALG_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRIam_CreateServiceAccountKeyRequest_KeyAlgorithm_KeyAlgUnspecified;

// ----------------------------------------------------------------------------
// GTLRIam_CreateServiceAccountKeyRequest.privateKeyType

/**
 *  Google Credentials File format.
 *
 *  Value: "TYPE_GOOGLE_CREDENTIALS_FILE"
 */
GTLR_EXTERN NSString * const kGTLRIam_CreateServiceAccountKeyRequest_PrivateKeyType_TypeGoogleCredentialsFile;
/**
 *  PKCS12 format.
 *  The password for the PKCS12 file is `notasecret`.
 *  For more information, see https://tools.ietf.org/html/rfc7292.
 *
 *  Value: "TYPE_PKCS12_FILE"
 */
GTLR_EXTERN NSString * const kGTLRIam_CreateServiceAccountKeyRequest_PrivateKeyType_TypePkcs12File;
/**
 *  Unspecified. Equivalent to `TYPE_GOOGLE_CREDENTIALS_FILE`.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRIam_CreateServiceAccountKeyRequest_PrivateKeyType_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRIam_ServiceAccountKey.keyAlgorithm

/**
 *  1k RSA Key.
 *
 *  Value: "KEY_ALG_RSA_1024"
 */
GTLR_EXTERN NSString * const kGTLRIam_ServiceAccountKey_KeyAlgorithm_KeyAlgRsa1024;
/**
 *  2k RSA Key.
 *
 *  Value: "KEY_ALG_RSA_2048"
 */
GTLR_EXTERN NSString * const kGTLRIam_ServiceAccountKey_KeyAlgorithm_KeyAlgRsa2048;
/**
 *  An unspecified key algorithm.
 *
 *  Value: "KEY_ALG_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRIam_ServiceAccountKey_KeyAlgorithm_KeyAlgUnspecified;

// ----------------------------------------------------------------------------
// GTLRIam_ServiceAccountKey.privateKeyType

/**
 *  Google Credentials File format.
 *
 *  Value: "TYPE_GOOGLE_CREDENTIALS_FILE"
 */
GTLR_EXTERN NSString * const kGTLRIam_ServiceAccountKey_PrivateKeyType_TypeGoogleCredentialsFile;
/**
 *  PKCS12 format.
 *  The password for the PKCS12 file is `notasecret`.
 *  For more information, see https://tools.ietf.org/html/rfc7292.
 *
 *  Value: "TYPE_PKCS12_FILE"
 */
GTLR_EXTERN NSString * const kGTLRIam_ServiceAccountKey_PrivateKeyType_TypePkcs12File;
/**
 *  Unspecified. Equivalent to `TYPE_GOOGLE_CREDENTIALS_FILE`.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRIam_ServiceAccountKey_PrivateKeyType_TypeUnspecified;

/**
 *  Audit log information specific to Cloud IAM. This message is serialized
 *  as an `Any` type in the `ServiceData` message of an
 *  `AuditLog` message.
 */
@interface GTLRIam_AuditData : GTLRObject

/** Policy delta between the original policy and the newly set policy. */
@property(nonatomic, strong, nullable) GTLRIam_PolicyDelta *policyDelta;

@end


/**
 *  Associates `members` with a `role`.
 */
@interface GTLRIam_Binding : GTLRObject

/**
 *  Specifies the identities requesting access for a Cloud Platform resource.
 *  `members` can have the following values:
 *  * `allUsers`: A special identifier that represents anyone who is
 *  on the internet; with or without a Google account.
 *  * `allAuthenticatedUsers`: A special identifier that represents anyone
 *  who is authenticated with a Google account or a service account.
 *  * `user:{emailid}`: An email address that represents a specific Google
 *  account. For example, `alice\@gmail.com` or `joe\@example.com`.
 *  * `serviceAccount:{emailid}`: An email address that represents a service
 *  account. For example, `my-other-app\@appspot.gserviceaccount.com`.
 *  * `group:{emailid}`: An email address that represents a Google group.
 *  For example, `admins\@example.com`.
 *  * `domain:{domain}`: A Google Apps domain name that represents all the
 *  users of that domain. For example, `google.com` or `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to `members`.
 *  For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
 *  Required
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  One delta entry for Binding. Each individual change (only one member in each
 *  entry) to a binding will be a separate entry.
 */
@interface GTLRIam_BindingDelta : GTLRObject

/**
 *  The action that was performed on a Binding.
 *  Required
 *
 *  Likely values:
 *    @arg @c kGTLRIam_BindingDelta_Action_ActionUnspecified Unspecified.
 *        (Value: "ACTION_UNSPECIFIED")
 *    @arg @c kGTLRIam_BindingDelta_Action_Add Addition of a Binding. (Value:
 *        "ADD")
 *    @arg @c kGTLRIam_BindingDelta_Action_Remove Removal of a Binding. (Value:
 *        "REMOVE")
 */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  A single identity requesting access for a Cloud Platform resource.
 *  Follows the same format of Binding.members.
 *  Required
 */
@property(nonatomic, copy, nullable) NSString *member;

/**
 *  Role that is assigned to `members`.
 *  For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
 *  Required
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The service account key create request.
 */
@interface GTLRIam_CreateServiceAccountKeyRequest : GTLRObject

/**
 *  includePublicKeyData
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includePublicKeyData;

/**
 *  Which type of key and algorithm to use for the key.
 *  The default is currently a 2K RSA key. However this may change in the
 *  future.
 *
 *  Likely values:
 *    @arg @c kGTLRIam_CreateServiceAccountKeyRequest_KeyAlgorithm_KeyAlgRsa1024
 *        1k RSA Key. (Value: "KEY_ALG_RSA_1024")
 *    @arg @c kGTLRIam_CreateServiceAccountKeyRequest_KeyAlgorithm_KeyAlgRsa2048
 *        2k RSA Key. (Value: "KEY_ALG_RSA_2048")
 *    @arg @c kGTLRIam_CreateServiceAccountKeyRequest_KeyAlgorithm_KeyAlgUnspecified
 *        An unspecified key algorithm. (Value: "KEY_ALG_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *keyAlgorithm;

/**
 *  The output format of the private key. `GOOGLE_CREDENTIALS_FILE` is the
 *  default output format.
 *
 *  Likely values:
 *    @arg @c kGTLRIam_CreateServiceAccountKeyRequest_PrivateKeyType_TypeGoogleCredentialsFile
 *        Google Credentials File format. (Value:
 *        "TYPE_GOOGLE_CREDENTIALS_FILE")
 *    @arg @c kGTLRIam_CreateServiceAccountKeyRequest_PrivateKeyType_TypePkcs12File
 *        PKCS12 format.
 *        The password for the PKCS12 file is `notasecret`.
 *        For more information, see https://tools.ietf.org/html/rfc7292. (Value:
 *        "TYPE_PKCS12_FILE")
 *    @arg @c kGTLRIam_CreateServiceAccountKeyRequest_PrivateKeyType_TypeUnspecified
 *        Unspecified. Equivalent to `TYPE_GOOGLE_CREDENTIALS_FILE`. (Value:
 *        "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *privateKeyType;

@end


/**
 *  The service account create request.
 */
@interface GTLRIam_CreateServiceAccountRequest : GTLRObject

/**
 *  Required. The account id that is used to generate the service account
 *  email address and a stable unique id. It is unique within a project,
 *  must be 6-30 characters long, and match the regular expression
 *  `[a-z]([-a-z0-9]*[a-z0-9])` to comply with RFC1035.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The ServiceAccount resource to create.
 *  Currently, only the following values are user assignable:
 *  `display_name` .
 */
@property(nonatomic, strong, nullable) GTLRIam_ServiceAccount *serviceAccount;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRIam_Empty : GTLRObject
@end


/**
 *  The service account keys list response.
 */
@interface GTLRIam_ListServiceAccountKeysResponse : GTLRObject

/** The public keys for the service account. */
@property(nonatomic, strong, nullable) NSArray<GTLRIam_ServiceAccountKey *> *keys;

@end


/**
 *  The service account list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "accounts" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRIam_ListServiceAccountsResponse : GTLRCollectionObject

/**
 *  The list of matching service accounts.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRIam_ServiceAccount *> *accounts;

/**
 *  To retrieve the next page of results, set
 *  ListServiceAccountsRequest.page_token
 *  to this value.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Defines an Identity and Access Management (IAM) policy. It is used to
 *  specify access control policies for Cloud Platform resources.
 *  A `Policy` consists of a list of `bindings`. A `Binding` binds a list of
 *  `members` to a `role`, where the members can be user accounts, Google
 *  groups,
 *  Google domains, and service accounts. A `role` is a named list of
 *  permissions
 *  defined by IAM.
 *  **Example**
 *  {
 *  "bindings": [
 *  {
 *  "role": "roles/owner",
 *  "members": [
 *  "user:mike\@example.com",
 *  "group:admins\@example.com",
 *  "domain:google.com",
 *  "serviceAccount:my-other-app\@appspot.gserviceaccount.com",
 *  ]
 *  },
 *  {
 *  "role": "roles/viewer",
 *  "members": ["user:sean\@example.com"]
 *  }
 *  ]
 *  }
 *  For a description of IAM and its features, see the
 *  [IAM developer's guide](https://cloud.google.com/iam).
 */
@interface GTLRIam_Policy : GTLRObject

/**
 *  Associates a list of `members` to a `role`.
 *  `bindings` with no members will result in an error.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRIam_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help
 *  prevent simultaneous updates of a policy from overwriting each other.
 *  It is strongly suggested that systems make use of the `etag` in the
 *  read-modify-write cycle to perform policy updates in order to avoid race
 *  conditions: An `etag` is returned in the response to `getIamPolicy`, and
 *  systems are expected to put that etag in the request to `setIamPolicy` to
 *  ensure that their change will be applied to the same version of the policy.
 *  If no `etag` is provided in the call to `setIamPolicy`, then the existing
 *  policy is overwritten blindly.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Version of the `Policy`. The default version is 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  The difference delta between two policies.
 */
@interface GTLRIam_PolicyDelta : GTLRObject

/** The delta for Bindings between two policies. */
@property(nonatomic, strong, nullable) NSArray<GTLRIam_BindingDelta *> *bindingDeltas;

@end


/**
 *  The grantable role query request.
 */
@interface GTLRIam_QueryGrantableRolesRequest : GTLRObject

/**
 *  Required. The full resource name to query from the list of grantable roles.
 *  The name follows the Google Cloud Platform resource format.
 *  For example, a Cloud Platform project with id `my-project` will be named
 *  `//cloudresourcemanager.googleapis.com/projects/my-project`.
 */
@property(nonatomic, copy, nullable) NSString *fullResourceName;

/**
 *  Optional limit on the number of roles to include in the response.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  Optional pagination token returned in an earlier
 *  QueryGrantableRolesResponse.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

@end


/**
 *  The grantable role query response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "roles" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRIam_QueryGrantableRolesResponse : GTLRCollectionObject

/**
 *  To retrieve the next page of results, set
 *  `QueryGrantableRolesRequest.page_token` to this value.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of matching roles.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRIam_Role *> *roles;

@end


/**
 *  A role in the Identity and Access Management API.
 */
@interface GTLRIam_Role : GTLRObject

/**
 *  Optional. A human-readable description for the role.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The name of the role.
 *  When Role is used in CreateRole, the role name must not be set.
 *  When Role is used in output and other input such as UpdateRole, the role
 *  name is the complete path, e.g., roles/logging.viewer for curated roles
 *  and organizations/{ORGANIZATION_ID}/roles/logging.viewer for custom roles.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. A human-readable title for the role. Typically this
 *  is limited to 100 UTF-8 bytes.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  A service account in the Identity and Access Management API.
 *  To create a service account, specify the `project_id` and the `account_id`
 *  for the account. The `account_id` is unique within the project, and is used
 *  to generate the service account email address and a stable
 *  `unique_id`.
 *  If the account already exists, the account's resource name is returned
 *  in util::Status's ResourceInfo.resource_name in the format of
 *  projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}. The caller
 *  can
 *  use the name in other methods to access the account.
 *  All other methods can identify the service account using the format
 *  `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *  Using `-` as a wildcard for the project will infer the project from
 *  the account. The `account` value can be the `email` address or the
 *  `unique_id` of the service account.
 */
@interface GTLRIam_ServiceAccount : GTLRObject

/**
 *  Optional. A user-specified description of the service account. Must be
 *  fewer than 100 UTF-8 bytes.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** \@OutputOnly The email address of the service account. */
@property(nonatomic, copy, nullable) NSString *email;

/**
 *  Used to perform a consistent read-modify-write.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The resource name of the service account in the following format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 *  Requests using `-` as a wildcard for the project will infer the project
 *  from the `account` and the `account` value can be the `email` address or
 *  the `unique_id` of the service account.
 *  In responses the resource name will always be in the format
 *  `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  \@OutputOnly. The OAuth2 client id for the service account.
 *  This is used in conjunction with the OAuth2 clientconfig API to make
 *  three legged OAuth2 (3LO) flows to access the data of Google users.
 */
@property(nonatomic, copy, nullable) NSString *oauth2ClientId;

/** \@OutputOnly The id of the project that owns the service account. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** \@OutputOnly The unique and stable id of the service account. */
@property(nonatomic, copy, nullable) NSString *uniqueId;

@end


/**
 *  Represents a service account key.
 *  A service account has two sets of key-pairs: user-managed, and
 *  system-managed.
 *  User-managed key-pairs can be created and deleted by users. Users are
 *  responsible for rotating these keys periodically to ensure security of
 *  their service accounts. Users retain the private key of these key-pairs,
 *  and Google retains ONLY the public key.
 *  System-managed key-pairs are managed automatically by Google, and rotated
 *  daily without user intervention. The private key never leaves Google's
 *  servers to maximize security.
 *  Public keys for all service accounts are also published at the OAuth2
 *  Service Account API.
 */
@interface GTLRIam_ServiceAccountKey : GTLRObject

/**
 *  Specifies the algorithm (and possibly key size) for the key.
 *
 *  Likely values:
 *    @arg @c kGTLRIam_ServiceAccountKey_KeyAlgorithm_KeyAlgRsa1024 1k RSA Key.
 *        (Value: "KEY_ALG_RSA_1024")
 *    @arg @c kGTLRIam_ServiceAccountKey_KeyAlgorithm_KeyAlgRsa2048 2k RSA Key.
 *        (Value: "KEY_ALG_RSA_2048")
 *    @arg @c kGTLRIam_ServiceAccountKey_KeyAlgorithm_KeyAlgUnspecified An
 *        unspecified key algorithm. (Value: "KEY_ALG_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *keyAlgorithm;

/**
 *  The resource name of the service account key in the following format
 *  `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}/keys/{key}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The private key data. Only provided in `CreateServiceAccountKey`
 *  responses. Make sure to keep the private key data secure because it
 *  allows for the assertion of the service account identity.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *privateKeyData;

/**
 *  The output format for the private key.
 *  Only provided in `CreateServiceAccountKey` responses, not
 *  in `GetServiceAccountKey` or `ListServiceAccountKey` responses.
 *  Google never exposes system-managed private keys, and never retains
 *  user-managed private keys.
 *
 *  Likely values:
 *    @arg @c kGTLRIam_ServiceAccountKey_PrivateKeyType_TypeGoogleCredentialsFile
 *        Google Credentials File format. (Value:
 *        "TYPE_GOOGLE_CREDENTIALS_FILE")
 *    @arg @c kGTLRIam_ServiceAccountKey_PrivateKeyType_TypePkcs12File PKCS12
 *        format.
 *        The password for the PKCS12 file is `notasecret`.
 *        For more information, see https://tools.ietf.org/html/rfc7292. (Value:
 *        "TYPE_PKCS12_FILE")
 *    @arg @c kGTLRIam_ServiceAccountKey_PrivateKeyType_TypeUnspecified
 *        Unspecified. Equivalent to `TYPE_GOOGLE_CREDENTIALS_FILE`. (Value:
 *        "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *privateKeyType;

/**
 *  The public key data. Only provided in `GetServiceAccountKey` responses.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *publicKeyData;

/** The key can be used after this timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *validAfterTime;

/** The key can be used before this timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *validBeforeTime;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRIam_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a
 *  valid policy but certain Cloud Platform services (such as Projects)
 *  might reject them.
 */
@property(nonatomic, strong, nullable) GTLRIam_Policy *policy;

@end


/**
 *  The service account sign blob request.
 */
@interface GTLRIam_SignBlobRequest : GTLRObject

/**
 *  The bytes to sign.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *bytesToSign;

@end


/**
 *  The service account sign blob response.
 */
@interface GTLRIam_SignBlobResponse : GTLRObject

/** The id of the key used to sign the blob. */
@property(nonatomic, copy, nullable) NSString *keyId;

/**
 *  The signed blob.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *signature;

@end


/**
 *  The service account sign JWT request.
 */
@interface GTLRIam_SignJwtRequest : GTLRObject

/** The JWT payload to sign, a JSON JWT Claim set. */
@property(nonatomic, copy, nullable) NSString *payload;

@end


/**
 *  The service account sign JWT response.
 */
@interface GTLRIam_SignJwtResponse : GTLRObject

/** The id of the key used to sign the JWT. */
@property(nonatomic, copy, nullable) NSString *keyId;

/** The signed JWT. */
@property(nonatomic, copy, nullable) NSString *signedJwt;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRIam_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as '*' or 'storage.*') are not allowed. For more
 *  information see
 *  [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRIam_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is
 *  allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end

NS_ASSUME_NONNULL_END
