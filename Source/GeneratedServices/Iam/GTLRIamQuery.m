// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Identity and Access Management (IAM) API (iam/v1)
// Description:
//   Manages identity and access control for Google Cloud Platform resources,
//   including the creation of service accounts, which you can use to
//   authenticate to Google and make API calls.
// Documentation:
//   https://cloud.google.com/iam/

#import "GTLRIamQuery.h"

#import "GTLRIamObjects.h"

// ----------------------------------------------------------------------------
// Constants

// keyTypes
NSString * const kGTLRIamKeyTypesKeyTypeUnspecified = @"KEY_TYPE_UNSPECIFIED";
NSString * const kGTLRIamKeyTypesSystemManaged      = @"SYSTEM_MANAGED";
NSString * const kGTLRIamKeyTypesUserManaged        = @"USER_MANAGED";

// publicKeyType
NSString * const kGTLRIamPublicKeyTypeTypeNone         = @"TYPE_NONE";
NSString * const kGTLRIamPublicKeyTypeTypeRawPublicKey = @"TYPE_RAW_PUBLIC_KEY";
NSString * const kGTLRIamPublicKeyTypeTypeX509PemFile  = @"TYPE_X509_PEM_FILE";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRIamQuery

@dynamic fields;

@end

@implementation GTLRIamQuery_ProjectsServiceAccountsCreate

@dynamic name;

+ (instancetype)queryWithObject:(GTLRIam_CreateServiceAccountRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/serviceAccounts";
  GTLRIamQuery_ProjectsServiceAccountsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRIam_ServiceAccount class];
  query.loggingName = @"iam.projects.serviceAccounts.create";
  return query;
}

@end

@implementation GTLRIamQuery_ProjectsServiceAccountsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRIamQuery_ProjectsServiceAccountsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRIam_Empty class];
  query.loggingName = @"iam.projects.serviceAccounts.delete";
  return query;
}

@end

@implementation GTLRIamQuery_ProjectsServiceAccountsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRIamQuery_ProjectsServiceAccountsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRIam_ServiceAccount class];
  query.loggingName = @"iam.projects.serviceAccounts.get";
  return query;
}

@end

@implementation GTLRIamQuery_ProjectsServiceAccountsGetIamPolicy

@dynamic resource;

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRIamQuery_ProjectsServiceAccountsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRIam_Policy class];
  query.loggingName = @"iam.projects.serviceAccounts.getIamPolicy";
  return query;
}

@end

@implementation GTLRIamQuery_ProjectsServiceAccountsKeysCreate

@dynamic name;

+ (instancetype)queryWithObject:(GTLRIam_CreateServiceAccountKeyRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/keys";
  GTLRIamQuery_ProjectsServiceAccountsKeysCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRIam_ServiceAccountKey class];
  query.loggingName = @"iam.projects.serviceAccounts.keys.create";
  return query;
}

@end

@implementation GTLRIamQuery_ProjectsServiceAccountsKeysDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRIamQuery_ProjectsServiceAccountsKeysDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRIam_Empty class];
  query.loggingName = @"iam.projects.serviceAccounts.keys.delete";
  return query;
}

@end

@implementation GTLRIamQuery_ProjectsServiceAccountsKeysGet

@dynamic name, publicKeyType;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRIamQuery_ProjectsServiceAccountsKeysGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRIam_ServiceAccountKey class];
  query.loggingName = @"iam.projects.serviceAccounts.keys.get";
  return query;
}

@end

@implementation GTLRIamQuery_ProjectsServiceAccountsKeysList

@dynamic keyTypes, name;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"keyTypes" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/keys";
  GTLRIamQuery_ProjectsServiceAccountsKeysList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRIam_ListServiceAccountKeysResponse class];
  query.loggingName = @"iam.projects.serviceAccounts.keys.list";
  return query;
}

@end

@implementation GTLRIamQuery_ProjectsServiceAccountsList

@dynamic name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/serviceAccounts";
  GTLRIamQuery_ProjectsServiceAccountsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRIam_ListServiceAccountsResponse class];
  query.loggingName = @"iam.projects.serviceAccounts.list";
  return query;
}

@end

@implementation GTLRIamQuery_ProjectsServiceAccountsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRIam_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRIamQuery_ProjectsServiceAccountsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRIam_Policy class];
  query.loggingName = @"iam.projects.serviceAccounts.setIamPolicy";
  return query;
}

@end

@implementation GTLRIamQuery_ProjectsServiceAccountsSignBlob

@dynamic name;

+ (instancetype)queryWithObject:(GTLRIam_SignBlobRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:signBlob";
  GTLRIamQuery_ProjectsServiceAccountsSignBlob *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRIam_SignBlobResponse class];
  query.loggingName = @"iam.projects.serviceAccounts.signBlob";
  return query;
}

@end

@implementation GTLRIamQuery_ProjectsServiceAccountsSignJwt

@dynamic name;

+ (instancetype)queryWithObject:(GTLRIam_SignJwtRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:signJwt";
  GTLRIamQuery_ProjectsServiceAccountsSignJwt *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRIam_SignJwtResponse class];
  query.loggingName = @"iam.projects.serviceAccounts.signJwt";
  return query;
}

@end

@implementation GTLRIamQuery_ProjectsServiceAccountsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRIam_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRIamQuery_ProjectsServiceAccountsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRIam_TestIamPermissionsResponse class];
  query.loggingName = @"iam.projects.serviceAccounts.testIamPermissions";
  return query;
}

@end

@implementation GTLRIamQuery_ProjectsServiceAccountsUpdate

@dynamic name;

+ (instancetype)queryWithObject:(GTLRIam_ServiceAccount *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRIamQuery_ProjectsServiceAccountsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRIam_ServiceAccount class];
  query.loggingName = @"iam.projects.serviceAccounts.update";
  return query;
}

@end

@implementation GTLRIamQuery_RolesQueryGrantableRoles

+ (instancetype)queryWithObject:(GTLRIam_QueryGrantableRolesRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/roles:queryGrantableRoles";
  GTLRIamQuery_RolesQueryGrantableRoles *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRIam_QueryGrantableRolesResponse class];
  query.loggingName = @"iam.roles.queryGrantableRoles";
  return query;
}

@end
