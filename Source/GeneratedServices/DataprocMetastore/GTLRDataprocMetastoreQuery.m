// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Dataproc Metastore API (metastore/v1beta)
// Description:
//   The Dataproc Metastore API is used to manage the lifecycle and
//   configuration of metastore services.
// Documentation:
//   https://cloud.google.com/dataproc-metastore/docs

#import "GTLRDataprocMetastoreQuery.h"

#import "GTLRDataprocMetastoreObjects.h"

@implementation GTLRDataprocMetastoreQuery

@dynamic fields;

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRDataprocMetastoreQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataprocMetastore_Location class];
  query.loggingName = @"metastore.projects.locations.get";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}/locations";
  GTLRDataprocMetastoreQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataprocMetastore_ListLocationsResponse class];
  query.loggingName = @"metastore.projects.locations.list";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataprocMetastore_Empty class];
  query.loggingName = @"metastore.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataprocMetastore_Operation class];
  query.loggingName = @"metastore.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}/operations";
  GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataprocMetastore_ListOperationsResponse class];
  query.loggingName = @"metastore.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsServicesCreate

@dynamic parent, requestId, serviceId;

+ (instancetype)queryWithObject:(GTLRDataprocMetastore_Service *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/services";
  GTLRDataprocMetastoreQuery_ProjectsLocationsServicesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataprocMetastore_Operation class];
  query.loggingName = @"metastore.projects.locations.services.create";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataprocMetastore_Operation class];
  query.loggingName = @"metastore.projects.locations.services.delete";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsServicesExportMetadata

@dynamic service;

+ (instancetype)queryWithObject:(GTLRDataprocMetastore_ExportMetadataRequest *)object
                        service:(NSString *)service {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"service" ];
  NSString *pathURITemplate = @"v1beta/{+service}:exportMetadata";
  GTLRDataprocMetastoreQuery_ProjectsLocationsServicesExportMetadata *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.service = service;
  query.expectedObjectClass = [GTLRDataprocMetastore_Operation class];
  query.loggingName = @"metastore.projects.locations.services.exportMetadata";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsServicesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRDataprocMetastoreQuery_ProjectsLocationsServicesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataprocMetastore_Service class];
  query.loggingName = @"metastore.projects.locations.services.get";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsServicesGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1beta/{+resource}:getIamPolicy";
  GTLRDataprocMetastoreQuery_ProjectsLocationsServicesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataprocMetastore_Policy class];
  query.loggingName = @"metastore.projects.locations.services.getIamPolicy";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsServicesList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/services";
  GTLRDataprocMetastoreQuery_ProjectsLocationsServicesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataprocMetastore_ListServicesResponse class];
  query.loggingName = @"metastore.projects.locations.services.list";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsCreate

@dynamic metadataImportId, parent, requestId;

+ (instancetype)queryWithObject:(GTLRDataprocMetastore_MetadataImport *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/metadataImports";
  GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataprocMetastore_Operation class];
  query.loggingName = @"metastore.projects.locations.services.metadataImports.create";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataprocMetastore_MetadataImport class];
  query.loggingName = @"metastore.projects.locations.services.metadataImports.get";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/metadataImports";
  GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataprocMetastore_ListMetadataImportsResponse class];
  query.loggingName = @"metastore.projects.locations.services.metadataImports.list";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsPatch

@dynamic name, requestId, updateMask;

+ (instancetype)queryWithObject:(GTLRDataprocMetastore_MetadataImport *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataprocMetastore_Operation class];
  query.loggingName = @"metastore.projects.locations.services.metadataImports.patch";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsServicesPatch

@dynamic name, requestId, updateMask;

+ (instancetype)queryWithObject:(GTLRDataprocMetastore_Service *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRDataprocMetastoreQuery_ProjectsLocationsServicesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataprocMetastore_Operation class];
  query.loggingName = @"metastore.projects.locations.services.patch";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsServicesSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRDataprocMetastore_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1beta/{+resource}:setIamPolicy";
  GTLRDataprocMetastoreQuery_ProjectsLocationsServicesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataprocMetastore_Policy class];
  query.loggingName = @"metastore.projects.locations.services.setIamPolicy";
  return query;
}

@end

@implementation GTLRDataprocMetastoreQuery_ProjectsLocationsServicesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRDataprocMetastore_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1beta/{+resource}:testIamPermissions";
  GTLRDataprocMetastoreQuery_ProjectsLocationsServicesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataprocMetastore_TestIamPermissionsResponse class];
  query.loggingName = @"metastore.projects.locations.services.testIamPermissions";
  return query;
}

@end
