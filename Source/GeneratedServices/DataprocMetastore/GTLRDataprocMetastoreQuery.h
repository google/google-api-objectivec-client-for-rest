// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Dataproc Metastore API (metastore/v1beta)
// Description:
//   The Dataproc Metastore API is used to manage the lifecycle and
//   configuration of metastore services.
// Documentation:
//   https://cloud.google.com/dataproc-metastore/docs

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDataprocMetastore_ExportMetadataRequest;
@class GTLRDataprocMetastore_MetadataImport;
@class GTLRDataprocMetastore_Service;
@class GTLRDataprocMetastore_SetIamPolicyRequest;
@class GTLRDataprocMetastore_TestIamPermissionsRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Dataproc Metastore query classes.
 */
@interface GTLRDataprocMetastoreQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets information about a location.
 *
 *  Method: metastore.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsGet : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDataprocMetastore_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: metastore.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsList : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDataprocMetastore_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  google.rpc.Code.UNIMPLEMENTED.
 *
 *  Method: metastore.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsDelete : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsOperationsDeleteWithname:]

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDataprocMetastore_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  google.rpc.Code.UNIMPLEMENTED.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: metastore.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsGet : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name
 *  binding allows API services to override the binding to use different
 *  resource name schemes, such as users/ * /operations. To override the
 *  binding, API services can add a binding such as "/v1/{name=users/
 *  *}/operations" to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: metastore.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsList : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsOperationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDataprocMetastore_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name
 *  binding allows API services to override the binding to use different
 *  resource name schemes, such as users/ * /operations. To override the
 *  binding, API services can add a binding such as "/v1/{name=users/
 *  *}/operations" to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a metastore service in a project and location.
 *
 *  Method: metastore.projects.locations.services.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesCreate : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsServicesCreateWithObject:parent:]

/**
 *  Required. The relative resource name of the location in which to create a
 *  metastore service, in the following
 *  form:"projects/{project_number}/locations/{location_id}".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. The ID of the metastore service, which is used as the final
 *  component of the metastore service's name.This value must be between 2 and
 *  63 characters long inclusive, begin with a letter, end with a letter or
 *  number, and consist of alpha-numeric ASCII characters or hyphens.
 */
@property(nonatomic, copy, nullable) NSString *serviceId;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Creates a metastore service in a project and location.
 *
 *  @param object The @c GTLRDataprocMetastore_Service to include in the query.
 *  @param parent Required. The relative resource name of the location in which
 *    to create a metastore service, in the following
 *    form:"projects/{project_number}/locations/{location_id}".
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesCreate
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_Service *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single service.
 *
 *  Method: metastore.projects.locations.services.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDelete : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsServicesDeleteWithname:]

/**
 *  Required. The relative resource name of the metastore service to delete, in
 *  the following
 *  form:"projects/{project_number}/locations/{location_id}/services/{service_id}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Deletes a single service.
 *
 *  @param name Required. The relative resource name of the metastore service to
 *    delete, in the following
 *    form:"projects/{project_number}/locations/{location_id}/services/{service_id}".
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Exports metadata from a service.
 *
 *  Method: metastore.projects.locations.services.exportMetadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesExportMetadata : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsServicesExportMetadataWithObject:service:]

/**
 *  Required. The relative resource name of the metastore service to run export,
 *  in the following
 *  form:"projects/{project_id}/locations/{location_id}/services/{service_id}
 */
@property(nonatomic, copy, nullable) NSString *service;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Exports metadata from a service.
 *
 *  @param object The @c GTLRDataprocMetastore_ExportMetadataRequest to include
 *    in the query.
 *  @param service Required. The relative resource name of the metastore service
 *    to run export, in the following
 *    form:"projects/{project_id}/locations/{location_id}/services/{service_id}
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesExportMetadata
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_ExportMetadataRequest *)object
                        service:(NSString *)service;

@end

/**
 *  Gets the details of a single service.
 *
 *  Method: metastore.projects.locations.services.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesGet : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsServicesGetWithname:]

/**
 *  Required. The relative resource name of the metastore service to retrieve,
 *  in the following
 *  form:"projects/{project_number}/locations/{location_id}/services/{service_id}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDataprocMetastore_Service.
 *
 *  Gets the details of a single service.
 *
 *  @param name Required. The relative resource name of the metastore service to
 *    retrieve, in the following
 *    form:"projects/{project_number}/locations/{location_id}/services/{service_id}".
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: metastore.projects.locations.services.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesGetIamPolicy : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsServicesGetIamPolicyWithresource:]

/**
 *  Optional. The policy format version to be returned.Valid values are 0, 1,
 *  and 3. Requests specifying an invalid value will be rejected.Requests for
 *  policies with any conditional bindings must specify version 3. Policies
 *  without any conditional bindings may specify any valid value or leave the
 *  field unset.To learn which resources support conditions in their IAM
 *  policies, see the IAM documentation
 *  (https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists services in a project and location.
 *
 *  Method: metastore.projects.locations.services.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesList : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsServicesListWithparent:]

/** Optional. The filter to apply to list results. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Specify the ordering of results as described in Sorting Order. If
 *  not specified, the results will be sorted in the default order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of services to return. The response may contain
 *  less than the maximum number. If unspecified, no more than 500 services are
 *  returned. The maximum value is 1000; values above 1000 are changed to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous
 *  DataprocMetastore.ListServices call. Provide this token to retrieve the
 *  subsequent page.To retrieve the first page, supply an empty page token.When
 *  paginating, other parameters provided to DataprocMetastore.ListServices must
 *  match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The relative resource name of the location of metastore services
 *  to list, in the following
 *  form:"projects/{project_number}/locations/{location_id}".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDataprocMetastore_ListServicesResponse.
 *
 *  Lists services in a project and location.
 *
 *  @param parent Required. The relative resource name of the location of
 *    metastore services to list, in the following
 *    form:"projects/{project_number}/locations/{location_id}".
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a new MetadataImport in a given project and location.
 *
 *  Method: metastore.projects.locations.services.metadataImports.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsCreate : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsServicesMetadataImportsCreateWithObject:parent:]

/**
 *  Required. The ID of the metadata import, which is used as the final
 *  component of the metadata import's name.This value must be between 1 and 64
 *  characters long, begin with a letter, end with a letter or number, and
 *  consist of alpha-numeric ASCII characters or hyphens.
 */
@property(nonatomic, copy, nullable) NSString *metadataImportId;

/**
 *  Required. The relative resource name of the service in which to create a
 *  metastore import, in the following
 *  form:"projects/{project_number}/locations/{location_id}/services/{service_id}"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Creates a new MetadataImport in a given project and location.
 *
 *  @param object The @c GTLRDataprocMetastore_MetadataImport to include in the
 *    query.
 *  @param parent Required. The relative resource name of the service in which
 *    to create a metastore import, in the following
 *    form:"projects/{project_number}/locations/{location_id}/services/{service_id}"
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsCreate
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_MetadataImport *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets details of a single import.
 *
 *  Method: metastore.projects.locations.services.metadataImports.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsGet : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsServicesMetadataImportsGetWithname:]

/**
 *  Required. The relative resource name of the metadata import to retrieve, in
 *  the following
 *  form:"projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{import_id}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDataprocMetastore_MetadataImport.
 *
 *  Gets details of a single import.
 *
 *  @param name Required. The relative resource name of the metadata import to
 *    retrieve, in the following
 *    form:"projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{import_id}".
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists imports in a service.
 *
 *  Method: metastore.projects.locations.services.metadataImports.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsList : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsServicesMetadataImportsListWithparent:]

/** Optional. The filter to apply to list results. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Specify the ordering of results as described in Sorting Order. If
 *  not specified, the results will be sorted in the default order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of imports to return. The response may contain
 *  less than the maximum number. If unspecified, no more than 500 imports are
 *  returned. The maximum value is 1000; values above 1000 are changed to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous
 *  DataprocMetastore.ListServices call. Provide this token to retrieve the
 *  subsequent page.To retrieve the first page, supply an empty page token.When
 *  paginating, other parameters provided to DataprocMetastore.ListServices must
 *  match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The relative resource name of the service whose metadata imports
 *  to list, in the following
 *  form:"projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDataprocMetastore_ListMetadataImportsResponse.
 *
 *  Lists imports in a service.
 *
 *  @param parent Required. The relative resource name of the service whose
 *    metadata imports to list, in the following
 *    form:"projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports".
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a single import. Only the description field of MetadataImport is
 *  supported to be updated.
 *
 *  Method: metastore.projects.locations.services.metadataImports.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsPatch : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsServicesMetadataImportsPatchWithObject:name:]

/**
 *  Immutable. The relative resource name of the metadata import, of the
 *  form:"projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. A field mask used to specify the fields to be overwritten in the
 *  metadata import resource by the update. Fields specified in the update_mask
 *  are relative to the resource (not to the full request). A field is
 *  overwritten if it is in the mask.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Updates a single import. Only the description field of MetadataImport is
 *  supported to be updated.
 *
 *  @param object The @c GTLRDataprocMetastore_MetadataImport to include in the
 *    query.
 *  @param name Immutable. The relative resource name of the metadata import, of
 *    the
 *    form:"projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}".
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsPatch
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_MetadataImport *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the parameters of a single service.
 *
 *  Method: metastore.projects.locations.services.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesPatch : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsServicesPatchWithObject:name:]

/**
 *  Immutable. The relative resource name of the metastore service, of the
 *  form:"projects/{project_number}/locations/{location_id}/services/{service_id}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. A field mask used to specify the fields to be overwritten in the
 *  metastore service resource by the update. Fields specified in the
 *  update_mask are relative to the resource (not to the full request). A field
 *  is overwritten if it is in the mask.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Updates the parameters of a single service.
 *
 *  @param object The @c GTLRDataprocMetastore_Service to include in the query.
 *  @param name Immutable. The relative resource name of the metastore service,
 *    of the
 *    form:"projects/{project_number}/locations/{location_id}/services/{service_id}".
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesPatch
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_Service *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
 *  PERMISSION_DENIED errors.
 *
 *  Method: metastore.projects.locations.services.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesSetIamPolicy : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsServicesSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
 *  PERMISSION_DENIED errors.
 *
 *  @param object The @c GTLRDataprocMetastore_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  NOT_FOUND error.Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: metastore.projects.locations.services.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesTestIamPermissions : GTLRDataprocMetastoreQuery
// Previous library name was
//   +[GTLQueryDataprocMetastore queryForProjectsLocationsServicesTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  NOT_FOUND error.Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRDataprocMetastore_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
