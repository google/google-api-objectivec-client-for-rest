// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Real-time Bidding API (realtimebidding/v1)
// Description:
//   Allows external bidders to manage their RTB integration with Google. This
//   includes managing bidder endpoints, QPS quotas, configuring what ad
//   inventory to receive via pretargeting, submitting creatives for
//   verification, and accessing creative metadata such as approval status.
// Documentation:
//   https://developers.google.com/authorized-buyers/apis/realtimebidding/reference/rest/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRRealTimeBidding_AdTechnologyProviders;
@class GTLRRealTimeBidding_AdvertiserAndBrand;
@class GTLRRealTimeBidding_Creative;
@class GTLRRealTimeBidding_CreativeServingDecision;
@class GTLRRealTimeBidding_Date;
@class GTLRRealTimeBidding_DestinationNotCrawlableEvidence;
@class GTLRRealTimeBidding_DestinationNotWorkingEvidence;
@class GTLRRealTimeBidding_DestinationUrlEvidence;
@class GTLRRealTimeBidding_DomainCallEvidence;
@class GTLRRealTimeBidding_DomainCalls;
@class GTLRRealTimeBidding_DownloadSizeEvidence;
@class GTLRRealTimeBidding_HtmlContent;
@class GTLRRealTimeBidding_HttpCallEvidence;
@class GTLRRealTimeBidding_HttpCookieEvidence;
@class GTLRRealTimeBidding_Image;
@class GTLRRealTimeBidding_MediaFile;
@class GTLRRealTimeBidding_NativeContent;
@class GTLRRealTimeBidding_PolicyTopicEntry;
@class GTLRRealTimeBidding_PolicyTopicEvidence;
@class GTLRRealTimeBidding_ServingStatus;
@class GTLRRealTimeBidding_UrlDownloadSize;
@class GTLRRealTimeBidding_UrlRestriction;
@class GTLRRealTimeBidding_UserList;
@class GTLRRealTimeBidding_VideoContent;
@class GTLRRealTimeBidding_VideoMetadata;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRRealTimeBidding_Creative.creativeFormat

/**
 *  The format is unknown.
 *
 *  Value: "CREATIVE_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_CreativeFormat_CreativeFormatUnspecified;
/**
 *  HTML creative.
 *
 *  Value: "HTML"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_CreativeFormat_Html;
/**
 *  Native creative.
 *
 *  Value: "NATIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_CreativeFormat_Native;
/**
 *  Video creative.
 *
 *  Value: "VIDEO"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_CreativeFormat_Video;

// ----------------------------------------------------------------------------
// GTLRRealTimeBidding_Creative.declaredAttributes

/** Value: "ADOBE_FLASH_FLV" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_AdobeFlashFlv;
/** Value: "ANY_INTERSTITIAL" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_AnyInterstitial;
/** Value: "ATTRIBUTE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_AttributeUnspecified;
/** Value: "CREATIVE_TYPE_HTML" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_CreativeTypeHtml;
/** Value: "CREATIVE_TYPE_VAST_VIDEO" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_CreativeTypeVastVideo;
/** Value: "EXPANDING_ACTION_ROLLOVER_TO_EXPAND" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_ExpandingActionRolloverToExpand;
/** Value: "EXPANDING_DIRECTION_ANY_DIAGONAL" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_ExpandingDirectionAnyDiagonal;
/** Value: "EXPANDING_DIRECTION_DOWN" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_ExpandingDirectionDown;
/** Value: "EXPANDING_DIRECTION_DOWN_LEFT" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_ExpandingDirectionDownLeft;
/** Value: "EXPANDING_DIRECTION_DOWN_RIGHT" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_ExpandingDirectionDownRight;
/** Value: "EXPANDING_DIRECTION_LEFT" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_ExpandingDirectionLeft;
/** Value: "EXPANDING_DIRECTION_LEFT_OR_RIGHT" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_ExpandingDirectionLeftOrRight;
/** Value: "EXPANDING_DIRECTION_NONE" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_ExpandingDirectionNone;
/** Value: "EXPANDING_DIRECTION_RIGHT" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_ExpandingDirectionRight;
/** Value: "EXPANDING_DIRECTION_UP" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_ExpandingDirectionUp;
/** Value: "EXPANDING_DIRECTION_UP_LEFT" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_ExpandingDirectionUpLeft;
/** Value: "EXPANDING_DIRECTION_UP_OR_DOWN" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_ExpandingDirectionUpOrDown;
/** Value: "EXPANDING_DIRECTION_UP_RIGHT" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_ExpandingDirectionUpRight;
/** Value: "IMAGE_RICH_MEDIA" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_ImageRichMedia;
/** Value: "IN_BANNER_VIDEO" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_InBannerVideo;
/** Value: "INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_InstreamVastVideoTypeVpaidFlash;
/** Value: "IS_COOKIE_TARGETED" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_IsCookieTargeted;
/** Value: "IS_TAGGED" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_IsTagged;
/** Value: "IS_USER_INTEREST_TARGETED" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_IsUserInterestTargeted;
/** Value: "NATIVE_ELIGIBILITY_ELIGIBLE" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_NativeEligibilityEligible;
/** Value: "NATIVE_ELIGIBILITY_NOT_ELIGIBLE" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_NativeEligibilityNotEligible;
/** Value: "NON_INTERSTITIAL" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_NonInterstitial;
/** Value: "NON_SKIPPABLE_INSTREAM_VIDEO" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_NonSkippableInstreamVideo;
/** Value: "NON_VPAID" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_NonVpaid;
/** Value: "OMSDK_1_0" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_Omsdk10;
/** Value: "RENDERING_SIZELESS_ADX" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_RenderingSizelessAdx;
/** Value: "RICH_MEDIA_CAPABILITY_TYPE_FLASH" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_RichMediaCapabilityTypeFlash;
/** Value: "RICH_MEDIA_CAPABILITY_TYPE_HTML5" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_RichMediaCapabilityTypeHtml5;
/** Value: "RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_RichMediaCapabilityTypeInterstitial;
/** Value: "RICH_MEDIA_CAPABILITY_TYPE_MRAID" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_RichMediaCapabilityTypeMraid;
/** Value: "RICH_MEDIA_CAPABILITY_TYPE_NON_SSL" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_RichMediaCapabilityTypeNonSsl;
/** Value: "RICH_MEDIA_CAPABILITY_TYPE_SSL" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_RichMediaCapabilityTypeSsl;
/** Value: "SKIPPABLE_INSTREAM_VIDEO" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredAttributes_SkippableInstreamVideo;

// ----------------------------------------------------------------------------
// GTLRRealTimeBidding_Creative.declaredRestrictedCategories

/** Value: "ALCOHOL" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredRestrictedCategories_Alcohol;
/** Value: "RESTRICTED_CATEGORY_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_DeclaredRestrictedCategories_RestrictedCategoryUnspecified;

// ----------------------------------------------------------------------------
// GTLRRealTimeBidding_Creative.restrictedCategories

/** Value: "ALCOHOL" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_RestrictedCategories_Alcohol;
/** Value: "RESTRICTED_CATEGORY_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_Creative_RestrictedCategories_RestrictedCategoryUnspecified;

// ----------------------------------------------------------------------------
// GTLRRealTimeBidding_CreativeServingDecision.detectedAttributes

/** Value: "ADOBE_FLASH_FLV" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_AdobeFlashFlv;
/** Value: "ANY_INTERSTITIAL" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_AnyInterstitial;
/** Value: "ATTRIBUTE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_AttributeUnspecified;
/** Value: "CREATIVE_TYPE_HTML" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_CreativeTypeHtml;
/** Value: "CREATIVE_TYPE_VAST_VIDEO" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_CreativeTypeVastVideo;
/** Value: "EXPANDING_ACTION_ROLLOVER_TO_EXPAND" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_ExpandingActionRolloverToExpand;
/** Value: "EXPANDING_DIRECTION_ANY_DIAGONAL" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_ExpandingDirectionAnyDiagonal;
/** Value: "EXPANDING_DIRECTION_DOWN" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_ExpandingDirectionDown;
/** Value: "EXPANDING_DIRECTION_DOWN_LEFT" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_ExpandingDirectionDownLeft;
/** Value: "EXPANDING_DIRECTION_DOWN_RIGHT" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_ExpandingDirectionDownRight;
/** Value: "EXPANDING_DIRECTION_LEFT" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_ExpandingDirectionLeft;
/** Value: "EXPANDING_DIRECTION_LEFT_OR_RIGHT" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_ExpandingDirectionLeftOrRight;
/** Value: "EXPANDING_DIRECTION_NONE" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_ExpandingDirectionNone;
/** Value: "EXPANDING_DIRECTION_RIGHT" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_ExpandingDirectionRight;
/** Value: "EXPANDING_DIRECTION_UP" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_ExpandingDirectionUp;
/** Value: "EXPANDING_DIRECTION_UP_LEFT" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_ExpandingDirectionUpLeft;
/** Value: "EXPANDING_DIRECTION_UP_OR_DOWN" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_ExpandingDirectionUpOrDown;
/** Value: "EXPANDING_DIRECTION_UP_RIGHT" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_ExpandingDirectionUpRight;
/** Value: "IMAGE_RICH_MEDIA" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_ImageRichMedia;
/** Value: "IN_BANNER_VIDEO" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_InBannerVideo;
/** Value: "INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_InstreamVastVideoTypeVpaidFlash;
/** Value: "IS_COOKIE_TARGETED" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_IsCookieTargeted;
/** Value: "IS_TAGGED" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_IsTagged;
/** Value: "IS_USER_INTEREST_TARGETED" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_IsUserInterestTargeted;
/** Value: "NATIVE_ELIGIBILITY_ELIGIBLE" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_NativeEligibilityEligible;
/** Value: "NATIVE_ELIGIBILITY_NOT_ELIGIBLE" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_NativeEligibilityNotEligible;
/** Value: "NON_INTERSTITIAL" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_NonInterstitial;
/** Value: "NON_SKIPPABLE_INSTREAM_VIDEO" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_NonSkippableInstreamVideo;
/** Value: "NON_VPAID" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_NonVpaid;
/** Value: "OMSDK_1_0" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_Omsdk10;
/** Value: "RENDERING_SIZELESS_ADX" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_RenderingSizelessAdx;
/** Value: "RICH_MEDIA_CAPABILITY_TYPE_FLASH" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_RichMediaCapabilityTypeFlash;
/** Value: "RICH_MEDIA_CAPABILITY_TYPE_HTML5" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_RichMediaCapabilityTypeHtml5;
/** Value: "RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_RichMediaCapabilityTypeInterstitial;
/** Value: "RICH_MEDIA_CAPABILITY_TYPE_MRAID" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_RichMediaCapabilityTypeMraid;
/** Value: "RICH_MEDIA_CAPABILITY_TYPE_NON_SSL" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_RichMediaCapabilityTypeNonSsl;
/** Value: "RICH_MEDIA_CAPABILITY_TYPE_SSL" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_RichMediaCapabilityTypeSsl;
/** Value: "SKIPPABLE_INSTREAM_VIDEO" */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_CreativeServingDecision_DetectedAttributes_SkippableInstreamVideo;

// ----------------------------------------------------------------------------
// GTLRRealTimeBidding_DestinationNotCrawlableEvidence.reason

/**
 *  Default value that should never be used.
 *
 *  Value: "REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotCrawlableEvidence_Reason_ReasonUnspecified;
/**
 *  Crawler was disallowed by the site's robots exclusion file (e.g.,
 *  robots.txt).
 *
 *  Value: "ROBOTED_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotCrawlableEvidence_Reason_RobotedDenied;
/**
 *  Timed out reading site's robots exclusion file (e.g., robots.txt).
 *
 *  Value: "TIMEOUT_ROBOTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotCrawlableEvidence_Reason_TimeoutRobots;
/**
 *  Unknown reason.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotCrawlableEvidence_Reason_Unknown;
/**
 *  Site's robots exclusion file (e.g., robots.txt) was unreachable.
 *
 *  Value: "UNREACHABLE_ROBOTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotCrawlableEvidence_Reason_UnreachableRobots;

// ----------------------------------------------------------------------------
// GTLRRealTimeBidding_DestinationNotWorkingEvidence.dnsError

/**
 *  Default value that should never be used.
 *
 *  Value: "DNS_ERROR_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotWorkingEvidence_DnsError_DnsErrorUnspecified;
/**
 *  DNS name was not found.
 *
 *  Value: "ERROR_DNS"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotWorkingEvidence_DnsError_ErrorDns;
/**
 *  An internal issue occurred when Google's crawler tried to resolve the
 *  DNS entry. This is a Google-internal issue and may not be the result
 *  of an issue with the landing page.
 *
 *  Value: "GOOGLE_CRAWLER_DNS_ISSUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotWorkingEvidence_DnsError_GoogleCrawlerDnsIssue;

// ----------------------------------------------------------------------------
// GTLRRealTimeBidding_DestinationNotWorkingEvidence.invalidPage

/**
 *  Page was empty or had an error.
 *
 *  Value: "EMPTY_OR_ERROR_PAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotWorkingEvidence_InvalidPage_EmptyOrErrorPage;
/**
 *  Default value that should never be used.
 *
 *  Value: "INVALID_PAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotWorkingEvidence_InvalidPage_InvalidPageUnspecified;

// ----------------------------------------------------------------------------
// GTLRRealTimeBidding_DestinationNotWorkingEvidence.platform

/**
 *  The Android platform.
 *
 *  Value: "ANDROID"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotWorkingEvidence_Platform_Android;
/**
 *  The iOS platform.
 *
 *  Value: "IOS"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotWorkingEvidence_Platform_Ios;
/**
 *  The personal computer platform.
 *
 *  Value: "PERSONAL_COMPUTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotWorkingEvidence_Platform_PersonalComputer;
/**
 *  Default value that should never be used.
 *
 *  Value: "PLATFORM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotWorkingEvidence_Platform_PlatformUnspecified;

// ----------------------------------------------------------------------------
// GTLRRealTimeBidding_DestinationNotWorkingEvidence.redirectionError

/**
 *  Got a redirect but it was empty.
 *
 *  Value: "EMPTY_REDIRECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotWorkingEvidence_RedirectionError_EmptyRedirect;
/**
 *  Got a redirect but it was invalid.
 *
 *  Value: "INVALID_REDIRECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotWorkingEvidence_RedirectionError_InvalidRedirect;
/**
 *  Default value that should never be used.
 *
 *  Value: "REDIRECTION_ERROR_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotWorkingEvidence_RedirectionError_RedirectionErrorUnspecified;
/**
 *  Too many redirect hops.
 *
 *  Value: "TOO_MANY_REDIRECTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotWorkingEvidence_RedirectionError_TooManyRedirects;

// ----------------------------------------------------------------------------
// GTLRRealTimeBidding_DestinationNotWorkingEvidence.urlRejected

/**
 *  URL rejected because of a malformed request.
 *
 *  Value: "BAD_REQUEST"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotWorkingEvidence_UrlRejected_BadRequest;
/**
 *  URL rejected because of a malformed URL.
 *
 *  Value: "MALFORMED_URL"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotWorkingEvidence_UrlRejected_MalformedUrl;
/**
 *  Default value that should never be used.
 *
 *  Value: "URL_REJECTED_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_DestinationNotWorkingEvidence_UrlRejected_UrlRejectedUnspecified;

// ----------------------------------------------------------------------------
// GTLRRealTimeBidding_MediaFile.mimeType

/**
 *  JavaScript (used for VPAID ads).
 *
 *  Value: "MIME_APPLICATION_JAVASCRIPT"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeApplicationJavascript;
/**
 *  DASH.
 *
 *  Value: "MIME_APPLICATION_MPEGDASH"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeApplicationMpegdash;
/**
 *  HLS/M3U8.
 *
 *  Value: "MIME_APPLICATION_MPEGURL"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeApplicationMpegurl;
/**
 *  Silverlight (used for VPAID ads).
 *
 *  Value: "MIME_APPLICATION_SILVERLIGHT"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeApplicationSilverlight;
/**
 *  Properties of VAST served by consumer survey.
 *
 *  Value: "MIME_APPLICATION_SURVEY"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeApplicationSurvey;
/**
 *  Shockwave Flash (used for VPAID ads).
 *
 *  Value: "MIME_APPLICATION_SWF"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeApplicationSwf;
/**
 *  MPEG-3 audio format.
 *
 *  Value: "MIME_AUDIO_MP3"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeAudioMp3;
/**
 *  MPEG-4 audio format.
 *
 *  Value: "MIME_AUDIO_MP4A"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeAudioMp4a;
/**
 *  Ogg audio format
 *
 *  Value: "MIME_AUDIO_OGG"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeAudioOgg;
/**
 *  3GPP container format used on 3G phones.
 *
 *  Value: "MIME_VIDEO_3GPP"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeVideo3gpp;
/**
 *  Quicktime container format.
 *
 *  Value: "MIME_VIDEO_MOV"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeVideoMov;
/**
 *  MPEG-4 container typically with H.264 codec.
 *
 *  Value: "MIME_VIDEO_MP4"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeVideoMp4;
/**
 *  Ogg container assuming Theora codec.
 *
 *  Value: "MIME_VIDEO_OGG"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeVideoOgg;
/**
 *  WebM container assuming VP9 codec.
 *
 *  Value: "MIME_VIDEO_WEBM"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeVideoWebm;
/**
 *  Flash container.
 *
 *  Value: "MIME_VIDEO_XFLV"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeVideoXflv;
/**
 *  Windows Media Video Codec.
 *
 *  Value: "MIME_VIDEO_X_MS_WMV"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeVideoXMsWmv;
/**
 *  Video files hosted on YouTube.
 *
 *  Value: "MIME_VIDEO_YT_HOSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_MimeVideoYtHosted;
/**
 *  Default value that should never be used.
 *
 *  Value: "VIDEO_MIME_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_MediaFile_MimeType_VideoMimeTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRRealTimeBidding_ServingStatus.status

/**
 *  Creative is approved.
 *
 *  Value: "APPROVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_ServingStatus_Status_Approved;
/**
 *  Creative cannot serve.
 *
 *  Value: "DISAPPROVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_ServingStatus_Status_Disapproved;
/**
 *  Creative is pending review.
 *
 *  Value: "PENDING_REVIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_ServingStatus_Status_PendingReview;
/**
 *  Default value that should never be used.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_ServingStatus_Status_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRRealTimeBidding_UrlRestriction.restrictionType

/**
 *  The tag URL (as recorded by the pixel callback) contains the specified
 *  URL.
 *
 *  Value: "CONTAINS"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_UrlRestriction_RestrictionType_Contains;
/**
 *  The tag URL (as recorded by the pixel callback) does not contain the
 *  specified URL.
 *
 *  Value: "DOES_NOT_CONTAIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_UrlRestriction_RestrictionType_DoesNotContain;
/**
 *  The tag URL (as recorded by the pixel callback) does not end with the
 *  specified URL.
 *
 *  Value: "DOES_NOT_END_WITH"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_UrlRestriction_RestrictionType_DoesNotEndWith;
/**
 *  The tag URL (as recorded by the pixel callback) does not equal the
 *  specified URL.
 *
 *  Value: "DOES_NOT_EQUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_UrlRestriction_RestrictionType_DoesNotEqual;
/**
 *  The tag URL (as recorded by the pixel callback) does not start with the
 *  specified URL.
 *
 *  Value: "DOES_NOT_START_WITH"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_UrlRestriction_RestrictionType_DoesNotStartWith;
/**
 *  The tag URL (as recorded by the pixel callback) ends with the specified
 *  URL.
 *
 *  Value: "ENDS_WITH"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_UrlRestriction_RestrictionType_EndsWith;
/**
 *  The tag URL (as recorded by the pixel callback) exactly matches the
 *  specified URL.
 *
 *  Value: "EQUALS"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_UrlRestriction_RestrictionType_Equals;
/**
 *  Default value that should never be used.
 *
 *  Value: "RESTRICTION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_UrlRestriction_RestrictionType_RestrictionTypeUnspecified;
/**
 *  The tag URL (as recorded by the pixel callback) starts with the specified
 *  URL.
 *
 *  Value: "STARTS_WITH"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_UrlRestriction_RestrictionType_StartsWith;

// ----------------------------------------------------------------------------
// GTLRRealTimeBidding_UserList.status

/**
 *  New users cannot be added to the user list.
 *
 *  Value: "CLOSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_UserList_Status_Closed;
/**
 *  New users can be added to the user list.
 *
 *  Value: "OPEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_UserList_Status_Open;
/**
 *  Default value that should never be used.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_UserList_Status_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRRealTimeBidding_VideoMetadata.vastVersion

/**
 *  VAST 1.0
 *
 *  Value: "VAST_VERSION_1_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_VideoMetadata_VastVersion_VastVersion10;
/**
 *  VAST 2.0
 *
 *  Value: "VAST_VERSION_2_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_VideoMetadata_VastVersion_VastVersion20;
/**
 *  VAST 3.0
 *
 *  Value: "VAST_VERSION_3_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_VideoMetadata_VastVersion_VastVersion30;
/**
 *  VAST 4.0
 *
 *  Value: "VAST_VERSION_4_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_VideoMetadata_VastVersion_VastVersion40;
/**
 *  Default value that should never be used.
 *
 *  Value: "VAST_VERSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBidding_VideoMetadata_VastVersion_VastVersionUnspecified;

/**
 *  Detected ad technology provider information.
 */
@interface GTLRRealTimeBidding_AdTechnologyProviders : GTLRObject

/**
 *  The detected ad technology provider IDs for this creative.
 *  See https://storage.googleapis.com/adx-rtb-dictionaries/providers.csv for
 *  mapping of provider ID to provided name, a privacy policy URL, and a list
 *  of domains which can be attributed to the provider.
 *  If the creative contains provider IDs that are outside of those listed in
 *  the `BidRequest.adslot.consented_providers_settings.consented_providers`
 *  field on the [Google bid
 *  protocol](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto)
 *  and the
 *  `BidRequest.user.ext.consented_providers_settings.consented_providers`
 *  field on the [OpenRTB
 *  protocol](https://developers.google.com/authorized-buyers/rtb/downloads/openrtb-adx-proto),
 *  and a bid is submitted with that creative for an impression
 *  that will serve to an EEA user, the bid will be filtered before the
 *  auction.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *detectedProviderIds;

/**
 *  Whether the creative contains an unidentified ad technology provider.
 *  If true for a given creative, any bid submitted with that creative for an
 *  impression that will serve to an EEA user will be filtered before the
 *  auction.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasUnidentifiedProvider;

@end


/**
 *  Detected advertiser and brand information.
 */
@interface GTLRRealTimeBidding_AdvertiserAndBrand : GTLRObject

/**
 *  See https://storage.googleapis.com/adx-rtb-dictionaries/advertisers.txt
 *  for the list of possible values.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *advertiserId;

/**
 *  Advertiser name.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *advertiserName;

/**
 *  Detected brand ID or zero if no brand has been detected.
 *  See https://storage.googleapis.com/adx-rtb-dictionaries/brands.txt for
 *  the list of possible values.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *brandId;

/**
 *  Brand name.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *brandName;

@end


/**
 *  A request to close a specified user list.
 */
@interface GTLRRealTimeBidding_CloseUserListRequest : GTLRObject
@end


/**
 *  A creative and its classification data.
 */
@interface GTLRRealTimeBidding_Creative : GTLRObject

/**
 *  Output only. ID of the buyer account that this creative is owned by.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method with equality and inequality check.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *accountId;

/**
 *  The link to AdChoices destination page. This is only supported for native
 *  ads.
 */
@property(nonatomic, copy, nullable) NSString *adChoicesDestinationUrl;

/**
 *  The name of the company being advertised in the creative.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *advertiserName;

/**
 *  The agency ID for this creative.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *agencyId;

/** Output only. The last update timestamp of the creative via API. */
@property(nonatomic, strong, nullable) GTLRDateTime *apiUpdateTime;

/**
 *  Output only. The format of this creative.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *
 *  Likely values:
 *    @arg @c kGTLRRealTimeBidding_Creative_CreativeFormat_CreativeFormatUnspecified
 *        The format is unknown. (Value: "CREATIVE_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRRealTimeBidding_Creative_CreativeFormat_Html HTML creative.
 *        (Value: "HTML")
 *    @arg @c kGTLRRealTimeBidding_Creative_CreativeFormat_Native Native
 *        creative. (Value: "NATIVE")
 *    @arg @c kGTLRRealTimeBidding_Creative_CreativeFormat_Video Video creative.
 *        (Value: "VIDEO")
 */
@property(nonatomic, copy, nullable) NSString *creativeFormat;

/**
 *  Buyer-specific creative ID that references this creative in bid responses.
 *  This field is Ignored in update operations. Can be used to filter the
 *  response of the
 *  creatives.list
 *  method.
 *  The maximum length of the creative ID is 128 bytes.
 */
@property(nonatomic, copy, nullable) NSString *creativeId;

/**
 *  Output only. Top level status and detected attributes of a creative (for
 *  example domain,
 *  language, advertiser, product category, etc.) that affect whether (status)
 *  and where (context) a creative will be allowed to serve.
 */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_CreativeServingDecision *creativeServingDecision;

/**
 *  Output only. IDs of all of the deals with which this creative has been used
 *  in bidding.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dealIds;

/**
 *  All declared attributes for the ads that may be shown from this creative.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *  If the `excluded_attribute` field of a [bid
 *  request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto")
 *  contains one of the attributes that were declared or detected for a given
 *  creative, and a bid is submitted with that creative, the bid will be
 *  filtered before the auction.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *declaredAttributes;

/**
 *  The set of declared destination URLs for the creative.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *declaredClickThroughUrls;

/**
 *  All declared restricted categories for the ads that may be shown from this
 *  creative. Can be used to filter the response of the
 *  creatives.list
 *  method.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *declaredRestrictedCategories;

/**
 *  IDs for the declared ad technology vendors that may be used by this
 *  creative. See
 *  https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for
 *  possible values.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *declaredVendorIds;

/** An HTML creative. */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_HtmlContent *html;

/** The set of URLs to be called to record an impression. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *impressionTrackingUrls;

/**
 *  Output only. Name of the creative.
 *  Follows the pattern `buyers/{buyer}/creatives/{creative}`, where
 *  `{buyer}` represents the account ID of the buyer who owns the creative,
 *  and `{creative}` is the buyer-specific creative ID that references this
 *  creative in the bid response.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** A native creative. */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_NativeContent *native;

/**
 *  All restricted categories for the ads that may be shown from this creative.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *restrictedCategories;

/**
 *  Output only. The version of this creative.
 *  Version for a new creative is 1 and it increments during subsequent
 *  creative updates.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

/** A video creative. */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_VideoContent *video;

@end


/**
 *  Top level status and detected attributes of a creative.
 */
@interface GTLRRealTimeBidding_CreativeServingDecision : GTLRObject

/** The detected ad technology providers. */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_AdTechnologyProviders *adTechnologyProviders;

/**
 *  The serving status of this creative in China.
 *  When approved or disapproved, this status applies to both deals and open
 *  auction in China. When pending review, this creative is allowed to serve
 *  for deals but not for open auction.
 */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_ServingStatus *chinaServingStatus;

/**
 *  Status of this creative when bidding on PG and PD deals (outside of
 *  Russia and China).
 */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_ServingStatus *dealsServingStatus;

/** Detected advertisers and brands. */
@property(nonatomic, strong, nullable) NSArray<GTLRRealTimeBidding_AdvertiserAndBrand *> *detectedAdvertisers;

/**
 *  Publisher-excludable attributes that were detected for this creative.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *  If the `excluded_attribute` field of a [bid
 *  request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto)
 *  contains one of the attributes that were declared or detected for a given
 *  creative, and a bid is submitted with that creative, the bid will be
 *  filtered before the auction.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *detectedAttributes;

/**
 *  The set of detected destination URLs for the creative.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *detectedClickThroughUrls;

/** The detected domains for this creative. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *detectedDomains;

/**
 *  The detected languages for this creative. The order is
 *  arbitrary. The codes are 2 or 5 characters and are documented at
 *  https://developers.google.com/adwords/api/docs/appendix/languagecodes.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *detectedLanguages;

/**
 *  Detected product categories, if any.
 *  See the ad-product-categories.txt file in the technical documentation
 *  for a list of IDs.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *detectedProductCategories;

/**
 *  Detected sensitive categories, if any.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *  See the ad-sensitive-categories.txt file in the technical documentation
 *  for a list of IDs. You should use these IDs along with the
 *  excluded-sensitive-category field in the bid request to filter your bids.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *detectedSensitiveCategories;

/**
 *  IDs of the ad technology vendors that were detected to be
 *  used by this creative. See
 *  https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for
 *  possible values.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *  If the `allowed_vendor_type` field of a [bid
 *  request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto)
 *  does not contain one of the vendor type IDs that were declared or
 *  detected for a given creative, and a bid is submitted with that creative,
 *  the bid will be filtered before the auction.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *detectedVendorIds;

/**
 *  The last time the creative status was updated.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastStatusUpdate;

/**
 *  Status of this creative when bidding in open auction, private auction, or
 *  auction packages (outside of Russia and China).
 */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_ServingStatus *openAuctionServingStatus;

/**
 *  The serving status of this creative in Russia.
 *  When approved or disapproved, this status applies to both deals and open
 *  auction in Russia. When pending review, this creative is allowed to serve
 *  for deals but not for open auction.
 */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_ServingStatus *russiaServingStatus;

@end


/**
 *  Represents a whole or partial calendar date, e.g. a birthday. The time of
 *  day
 *  and time zone are either specified elsewhere or are not significant. The
 *  date
 *  is relative to the Proleptic Gregorian Calendar. This can represent:
 *  * A full date, with non-zero year, month and day values
 *  * A month and day value, with a zero year, e.g. an anniversary
 *  * A year on its own, with zero month and day values
 *  * A year and month value, with a zero day, e.g. a credit card expiration
 *  date
 *  Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
 */
@interface GTLRRealTimeBidding_Date : GTLRObject

/**
 *  Day of month. Must be from 1 to 31 and valid for the year and month, or 0
 *  if specifying a year by itself or a year and month where the day is not
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of year. Must be from 1 to 12, or 0 if specifying a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of date. Must be from 1 to 9999, or 0 if specifying a date without
 *  a year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  Evidence that the creative's destination URL was not crawlable by Google.
 */
@interface GTLRRealTimeBidding_DestinationNotCrawlableEvidence : GTLRObject

/** Destination URL that was attempted to be crawled. */
@property(nonatomic, copy, nullable) NSString *crawledUrl;

/** Approximate time of the crawl. */
@property(nonatomic, strong, nullable) GTLRDateTime *crawlTime;

/**
 *  Reason of destination not crawlable.
 *
 *  Likely values:
 *    @arg @c kGTLRRealTimeBidding_DestinationNotCrawlableEvidence_Reason_ReasonUnspecified
 *        Default value that should never be used. (Value: "REASON_UNSPECIFIED")
 *    @arg @c kGTLRRealTimeBidding_DestinationNotCrawlableEvidence_Reason_RobotedDenied
 *        Crawler was disallowed by the site's robots exclusion file (e.g.,
 *        robots.txt). (Value: "ROBOTED_DENIED")
 *    @arg @c kGTLRRealTimeBidding_DestinationNotCrawlableEvidence_Reason_TimeoutRobots
 *        Timed out reading site's robots exclusion file (e.g., robots.txt).
 *        (Value: "TIMEOUT_ROBOTS")
 *    @arg @c kGTLRRealTimeBidding_DestinationNotCrawlableEvidence_Reason_Unknown
 *        Unknown reason. (Value: "UNKNOWN")
 *    @arg @c kGTLRRealTimeBidding_DestinationNotCrawlableEvidence_Reason_UnreachableRobots
 *        Site's robots exclusion file (e.g., robots.txt) was unreachable.
 *        (Value: "UNREACHABLE_ROBOTS")
 */
@property(nonatomic, copy, nullable) NSString *reason;

@end


/**
 *  Evidence of the creative's destination URL not functioning properly or
 *  having been incorrectly set up.
 */
@interface GTLRRealTimeBidding_DestinationNotWorkingEvidence : GTLRObject

/**
 *  DNS lookup errors.
 *
 *  Likely values:
 *    @arg @c kGTLRRealTimeBidding_DestinationNotWorkingEvidence_DnsError_DnsErrorUnspecified
 *        Default value that should never be used. (Value:
 *        "DNS_ERROR_UNSPECIFIED")
 *    @arg @c kGTLRRealTimeBidding_DestinationNotWorkingEvidence_DnsError_ErrorDns
 *        DNS name was not found. (Value: "ERROR_DNS")
 *    @arg @c kGTLRRealTimeBidding_DestinationNotWorkingEvidence_DnsError_GoogleCrawlerDnsIssue
 *        An internal issue occurred when Google's crawler tried to resolve the
 *        DNS entry. This is a Google-internal issue and may not be the result
 *        of an issue with the landing page. (Value: "GOOGLE_CRAWLER_DNS_ISSUE")
 */
@property(nonatomic, copy, nullable) NSString *dnsError;

/** The full non-working URL. */
@property(nonatomic, copy, nullable) NSString *expandedUrl;

/**
 *  HTTP error code (e.g. 404 or 5xx)
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *httpError;

/**
 *  Page was crawled successfully, but was detected as either a page with
 *  no content or an error page.
 *
 *  Likely values:
 *    @arg @c kGTLRRealTimeBidding_DestinationNotWorkingEvidence_InvalidPage_EmptyOrErrorPage
 *        Page was empty or had an error. (Value: "EMPTY_OR_ERROR_PAGE")
 *    @arg @c kGTLRRealTimeBidding_DestinationNotWorkingEvidence_InvalidPage_InvalidPageUnspecified
 *        Default value that should never be used. (Value:
 *        "INVALID_PAGE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *invalidPage;

/** Approximate time when the ad destination was last checked. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastCheckTime;

/**
 *  Platform of the non-working URL.
 *
 *  Likely values:
 *    @arg @c kGTLRRealTimeBidding_DestinationNotWorkingEvidence_Platform_Android
 *        The Android platform. (Value: "ANDROID")
 *    @arg @c kGTLRRealTimeBidding_DestinationNotWorkingEvidence_Platform_Ios
 *        The iOS platform. (Value: "IOS")
 *    @arg @c kGTLRRealTimeBidding_DestinationNotWorkingEvidence_Platform_PersonalComputer
 *        The personal computer platform. (Value: "PERSONAL_COMPUTER")
 *    @arg @c kGTLRRealTimeBidding_DestinationNotWorkingEvidence_Platform_PlatformUnspecified
 *        Default value that should never be used. (Value:
 *        "PLATFORM_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *platform;

/**
 *  HTTP redirect chain error.
 *
 *  Likely values:
 *    @arg @c kGTLRRealTimeBidding_DestinationNotWorkingEvidence_RedirectionError_EmptyRedirect
 *        Got a redirect but it was empty. (Value: "EMPTY_REDIRECT")
 *    @arg @c kGTLRRealTimeBidding_DestinationNotWorkingEvidence_RedirectionError_InvalidRedirect
 *        Got a redirect but it was invalid. (Value: "INVALID_REDIRECT")
 *    @arg @c kGTLRRealTimeBidding_DestinationNotWorkingEvidence_RedirectionError_RedirectionErrorUnspecified
 *        Default value that should never be used. (Value:
 *        "REDIRECTION_ERROR_UNSPECIFIED")
 *    @arg @c kGTLRRealTimeBidding_DestinationNotWorkingEvidence_RedirectionError_TooManyRedirects
 *        Too many redirect hops. (Value: "TOO_MANY_REDIRECTS")
 */
@property(nonatomic, copy, nullable) NSString *redirectionError;

/**
 *  Rejected because of malformed URLs or invalid requests.
 *
 *  Likely values:
 *    @arg @c kGTLRRealTimeBidding_DestinationNotWorkingEvidence_UrlRejected_BadRequest
 *        URL rejected because of a malformed request. (Value: "BAD_REQUEST")
 *    @arg @c kGTLRRealTimeBidding_DestinationNotWorkingEvidence_UrlRejected_MalformedUrl
 *        URL rejected because of a malformed URL. (Value: "MALFORMED_URL")
 *    @arg @c kGTLRRealTimeBidding_DestinationNotWorkingEvidence_UrlRejected_UrlRejectedUnspecified
 *        Default value that should never be used. (Value:
 *        "URL_REJECTED_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *urlRejected;

@end


/**
 *  The full landing page URL of the destination.
 */
@interface GTLRRealTimeBidding_DestinationUrlEvidence : GTLRObject

/** The full landing page URL of the destination. */
@property(nonatomic, copy, nullable) NSString *destinationUrl;

@end


/**
 *  Number of HTTP calls made by a creative, broken down by domain.
 */
@interface GTLRRealTimeBidding_DomainCallEvidence : GTLRObject

/** Breakdown of the most frequent domains called via HTTP by the creative. */
@property(nonatomic, strong, nullable) NSArray<GTLRRealTimeBidding_DomainCalls *> *topHttpCallDomains;

/**
 *  The total number of HTTP calls made by the creative, including but not
 *  limited to the number of calls in the top_http_call_domains.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalHttpCallCount;

@end


/**
 *  The number of HTTP calls made to the given domain.
 */
@interface GTLRRealTimeBidding_DomainCalls : GTLRObject

/** The domain name. */
@property(nonatomic, copy, nullable) NSString *domain;

/**
 *  Number of HTTP calls made to the domain.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *httpCallCount;

@end


/**
 *  Total download size and URL-level download size breakdown for resources in
 *  a creative.
 */
@interface GTLRRealTimeBidding_DownloadSizeEvidence : GTLRObject

/** Download size broken down by URLs with the top download size. */
@property(nonatomic, strong, nullable) NSArray<GTLRRealTimeBidding_UrlDownloadSize *> *topUrlDownloadSizeBreakdowns;

/**
 *  Total download size (in kilobytes) for all the resources in the creative.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalDownloadSizeKb;

@end


/**
 *  Response for a request to get remarketing tag.
 */
@interface GTLRRealTimeBidding_GetRemarketingTagResponse : GTLRObject

/**
 *  A HTML tag that can be placed on the advertiser's page to add users to a
 *  user list. For more information and code samples on using snippet on your
 *  website refer to [Tag your site for remarketing](
 *  https://support.google.com/google-ads/answer/2476688).
 */
@property(nonatomic, copy, nullable) NSString *snippet;

@end


/**
 *  HTML content for a creative.
 */
@interface GTLRRealTimeBidding_HtmlContent : GTLRObject

/**
 *  The height of the HTML snippet in pixels.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *height;

/** The HTML snippet that displays the ad when inserted in the web page. */
@property(nonatomic, copy, nullable) NSString *snippet;

/**
 *  The width of the HTML snippet in pixels.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *width;

@end


/**
 *  HTTP calls made by a creative that resulted in policy violations.
 */
@interface GTLRRealTimeBidding_HttpCallEvidence : GTLRObject

/** URLs of HTTP calls made by the creative. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *urls;

@end


/**
 *  Evidence for HTTP cookie-related policy violations.
 */
@interface GTLRRealTimeBidding_HttpCookieEvidence : GTLRObject

/**
 *  Names of cookies that violate Google policies.
 *  For TOO_MANY_COOKIES policy, this will be the cookie names of top domains
 *  with the largest number of cookies. For other policies, this will be all
 *  the cookie names that violate the policy.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *cookieNames;

/**
 *  The largest number of cookies set by a creative. If this field is set,
 *  cookie_names above will be set to the cookie names of top domains with
 *  the largest number of cookies.
 *  This field will only be set for TOO_MANY_COOKIES policy.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxCookieCount;

@end


/**
 *  An image resource. You may provide a larger image than was requested,
 *  so long as the aspect ratio is preserved.
 */
@interface GTLRRealTimeBidding_Image : GTLRObject

/**
 *  Image height in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *height;

/** The URL of the image. */
@property(nonatomic, copy, nullable) NSString *url;

/**
 *  Image width in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *width;

@end


/**
 *  A response for listing creatives.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "creatives" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRRealTimeBidding_ListCreativesResponse : GTLRCollectionObject

/**
 *  The list of creatives.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRealTimeBidding_Creative *> *creatives;

/**
 *  A token to retrieve the next page of results.
 *  Pass this value in the
 *  ListCreativesRequest.pageToken
 *  field in the subsequent call to the `ListCreatives` method to retrieve the
 *  next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The list user list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "userLists" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRRealTimeBidding_ListUserListsResponse : GTLRCollectionObject

/**
 *  The continuation page token to send back to the server in a subsequent
 *  request.
 *  Due to a currently known issue, it is recommended that the caller keep
 *  invoking the list method till the time a next page token is not returned
 *  (even if the result set is empty).
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of user lists from the search.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRealTimeBidding_UserList *> *userLists;

@end


/**
 *  Information about each media file in the VAST.
 */
@interface GTLRRealTimeBidding_MediaFile : GTLRObject

/**
 *  Bitrate of the video file, in Kbps.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bitrate;

/**
 *  The MIME type of this media file.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *
 *  Likely values:
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeApplicationJavascript
 *        JavaScript (used for VPAID ads). (Value:
 *        "MIME_APPLICATION_JAVASCRIPT")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeApplicationMpegdash
 *        DASH. (Value: "MIME_APPLICATION_MPEGDASH")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeApplicationMpegurl
 *        HLS/M3U8. (Value: "MIME_APPLICATION_MPEGURL")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeApplicationSilverlight
 *        Silverlight (used for VPAID ads). (Value:
 *        "MIME_APPLICATION_SILVERLIGHT")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeApplicationSurvey
 *        Properties of VAST served by consumer survey. (Value:
 *        "MIME_APPLICATION_SURVEY")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeApplicationSwf
 *        Shockwave Flash (used for VPAID ads). (Value: "MIME_APPLICATION_SWF")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeAudioMp3 MPEG-3 audio
 *        format. (Value: "MIME_AUDIO_MP3")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeAudioMp4a MPEG-4 audio
 *        format. (Value: "MIME_AUDIO_MP4A")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeAudioOgg Ogg audio
 *        format (Value: "MIME_AUDIO_OGG")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeVideo3gpp 3GPP
 *        container format used on 3G phones. (Value: "MIME_VIDEO_3GPP")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeVideoMov Quicktime
 *        container format. (Value: "MIME_VIDEO_MOV")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeVideoMp4 MPEG-4
 *        container typically with H.264 codec. (Value: "MIME_VIDEO_MP4")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeVideoOgg Ogg container
 *        assuming Theora codec. (Value: "MIME_VIDEO_OGG")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeVideoWebm WebM
 *        container assuming VP9 codec. (Value: "MIME_VIDEO_WEBM")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeVideoXflv Flash
 *        container. (Value: "MIME_VIDEO_XFLV")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeVideoXMsWmv Windows
 *        Media Video Codec. (Value: "MIME_VIDEO_X_MS_WMV")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_MimeVideoYtHosted Video
 *        files hosted on YouTube. (Value: "MIME_VIDEO_YT_HOSTED")
 *    @arg @c kGTLRRealTimeBidding_MediaFile_MimeType_VideoMimeTypeUnspecified
 *        Default value that should never be used. (Value:
 *        "VIDEO_MIME_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *mimeType;

@end


/**
 *  Native content for a creative.
 */
@interface GTLRRealTimeBidding_NativeContent : GTLRObject

/**
 *  The name of the advertiser or sponsor, to be displayed in the ad creative.
 */
@property(nonatomic, copy, nullable) NSString *advertiserName;

/** The app icon, for app download ads. */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_Image *appIcon;

/** A long description of the ad. */
@property(nonatomic, copy, nullable) NSString *body;

/** A label for the button that the user is supposed to click. */
@property(nonatomic, copy, nullable) NSString *callToAction;

/** The URL that the browser/SDK will load when the user clicks the ad. */
@property(nonatomic, copy, nullable) NSString *clickLinkUrl;

/** The URL to use for click tracking. */
@property(nonatomic, copy, nullable) NSString *clickTrackingUrl;

/** A short title for the ad. */
@property(nonatomic, copy, nullable) NSString *headline;

/** A large image. */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_Image *image;

/** A smaller image, for the advertiser's logo. */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_Image *logo;

/** The price of the promoted app including currency info. */
@property(nonatomic, copy, nullable) NSString *priceDisplayText;

/**
 *  The app rating in the app store. Must be in the range [0-5].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *starRating;

/** The URL to fetch a native video ad. */
@property(nonatomic, copy, nullable) NSString *videoUrl;

@end


/**
 *  A request to open a specified user list.
 */
@interface GTLRRealTimeBidding_OpenUserListRequest : GTLRObject
@end


/**
 *  Each policy topic entry will represent a violation of a policy topic for a
 *  creative, with the policy topic information and optional evidence for the
 *  policy violation.
 */
@interface GTLRRealTimeBidding_PolicyTopicEntry : GTLRObject

/** Pieces of evidence associated with this policy topic entry. */
@property(nonatomic, strong, nullable) NSArray<GTLRRealTimeBidding_PolicyTopicEvidence *> *evidences;

/** URL of the help center article describing this policy topic. */
@property(nonatomic, copy, nullable) NSString *helpCenterUrl;

/**
 *  Policy topic this entry refers to. For example, "ALCOHOL",
 *  "TRADEMARKS_IN_AD_TEXT", or "DESTINATION_NOT_WORKING". The set of possible
 *  policy topics is not fixed for a particular API version and may change at
 *  any time.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method
 */
@property(nonatomic, copy, nullable) NSString *policyTopic;

@end


/**
 *  Evidence associated with a policy topic entry.
 */
@interface GTLRRealTimeBidding_PolicyTopicEvidence : GTLRObject

/** The creative's destination URL was not crawlable by Google. */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_DestinationNotCrawlableEvidence *destinationNotCrawlable;

/**
 *  The creative's destination URL did not function properly or was
 *  incorrectly set up.
 */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_DestinationNotWorkingEvidence *destinationNotWorking;

/** URL of the actual landing page. */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_DestinationUrlEvidence *destinationUrl;

/** Number of HTTP calls made by the creative, broken down by domain. */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_DomainCallEvidence *domainCall;

/**
 *  Total download size and URL-level download size breakdown for resources
 *  in a creative.
 */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_DownloadSizeEvidence *downloadSize;

/** HTTP calls made by the creative that resulted in policy violations. */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_HttpCallEvidence *httpCall;

/** Evidence for HTTP cookie-related policy violations. */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_HttpCookieEvidence *httpCookie;

@end


/**
 *  Serving status of the creative for a transaction type or a region.
 */
@interface GTLRRealTimeBidding_ServingStatus : GTLRObject

/**
 *  Serving status for the given transaction type (e.g., open auction,
 *  deals) or region (e.g., China, Russia).
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *
 *  Likely values:
 *    @arg @c kGTLRRealTimeBidding_ServingStatus_Status_Approved Creative is
 *        approved. (Value: "APPROVED")
 *    @arg @c kGTLRRealTimeBidding_ServingStatus_Status_Disapproved Creative
 *        cannot serve. (Value: "DISAPPROVED")
 *    @arg @c kGTLRRealTimeBidding_ServingStatus_Status_PendingReview Creative
 *        is pending review. (Value: "PENDING_REVIEW")
 *    @arg @c kGTLRRealTimeBidding_ServingStatus_Status_StatusUnspecified
 *        Default value that should never be used. (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Policy topics related to the serving decision for this transaction type
 *  (e.g., open auction, deals) or region (e.g., China, Russia).
 *  Topics may be present only if status is DISAPPROVED.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRealTimeBidding_PolicyTopicEntry *> *topics;

@end


/**
 *  The URL-level breakdown for the download size.
 */
@interface GTLRRealTimeBidding_UrlDownloadSize : GTLRObject

/**
 *  Download size of the URL in kilobytes.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *downloadSizeKb;

/** The normalized URL with query parameters and fragment removed. */
@property(nonatomic, copy, nullable) NSString *normalizedUrl;

@end


/**
 *  Represents the URL restriction (for the URL captured by the pixel callback)
 *  for a user list.
 */
@interface GTLRRealTimeBidding_UrlRestriction : GTLRObject

/**
 *  End date (if specified) of the URL restriction.
 *  End date should be later than the start date for the date range to be
 *  valid.
 */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_Date *endDate;

/**
 *  The restriction type for the specified URL.
 *
 *  Likely values:
 *    @arg @c kGTLRRealTimeBidding_UrlRestriction_RestrictionType_Contains The
 *        tag URL (as recorded by the pixel callback) contains the specified
 *        URL. (Value: "CONTAINS")
 *    @arg @c kGTLRRealTimeBidding_UrlRestriction_RestrictionType_DoesNotContain
 *        The tag URL (as recorded by the pixel callback) does not contain the
 *        specified URL. (Value: "DOES_NOT_CONTAIN")
 *    @arg @c kGTLRRealTimeBidding_UrlRestriction_RestrictionType_DoesNotEndWith
 *        The tag URL (as recorded by the pixel callback) does not end with the
 *        specified URL. (Value: "DOES_NOT_END_WITH")
 *    @arg @c kGTLRRealTimeBidding_UrlRestriction_RestrictionType_DoesNotEqual
 *        The tag URL (as recorded by the pixel callback) does not equal the
 *        specified URL. (Value: "DOES_NOT_EQUAL")
 *    @arg @c kGTLRRealTimeBidding_UrlRestriction_RestrictionType_DoesNotStartWith
 *        The tag URL (as recorded by the pixel callback) does not start with
 *        the
 *        specified URL. (Value: "DOES_NOT_START_WITH")
 *    @arg @c kGTLRRealTimeBidding_UrlRestriction_RestrictionType_EndsWith The
 *        tag URL (as recorded by the pixel callback) ends with the specified
 *        URL. (Value: "ENDS_WITH")
 *    @arg @c kGTLRRealTimeBidding_UrlRestriction_RestrictionType_Equals The tag
 *        URL (as recorded by the pixel callback) exactly matches the
 *        specified URL. (Value: "EQUALS")
 *    @arg @c kGTLRRealTimeBidding_UrlRestriction_RestrictionType_RestrictionTypeUnspecified
 *        Default value that should never be used. (Value:
 *        "RESTRICTION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRRealTimeBidding_UrlRestriction_RestrictionType_StartsWith The
 *        tag URL (as recorded by the pixel callback) starts with the specified
 *        URL. (Value: "STARTS_WITH")
 */
@property(nonatomic, copy, nullable) NSString *restrictionType;

/** Start date (if specified) of the URL restriction. */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_Date *startDate;

/** Required. The URL to use for applying the restriction on the user list. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Represents an Authorized Buyers user list. Authorized Buyers can
 *  create/update/list user lists. Once a user list is created
 *  in the system, Authorized Buyers can add users to the user list using
 *  the bulk uploader API. Alternatively, users can be added by hosting a
 *  tag on the advertiser's page.
 */
@interface GTLRRealTimeBidding_UserList : GTLRObject

/**
 *  The description for the user list.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Required. Display name of the user list. This must be unique across all user
 *  lists
 *  for a given account.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Required. The number of days a user's cookie stays on the user list.
 *  The field must be between 0 and 540 inclusive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *membershipDurationDays;

/**
 *  Output only. Name of the user list that must follow the pattern
 *  `buyers/{buyer}/userLists/{user_list}`, where `{buyer}` represents
 *  the account ID of the buyer who owns the user list. For a bidder accessing
 *  user lists on behalf of a child seat buyer, `{buyer}` represents
 *  the account ID of the child seat buyer. `{user_list}` is an int64
 *  identifier assigned by Google to uniquely identify a user list.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The status of the user list. A new user list starts out as
 *  open.
 *
 *  Likely values:
 *    @arg @c kGTLRRealTimeBidding_UserList_Status_Closed New users cannot be
 *        added to the user list. (Value: "CLOSED")
 *    @arg @c kGTLRRealTimeBidding_UserList_Status_Open New users can be added
 *        to the user list. (Value: "OPEN")
 *    @arg @c kGTLRRealTimeBidding_UserList_Status_StatusUnspecified Default
 *        value that should never be used. (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

/** Required. The URL restriction for the user list. */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_UrlRestriction *urlRestriction;

@end


/**
 *  Video content for a creative.
 */
@interface GTLRRealTimeBidding_VideoContent : GTLRObject

/** Output only. Video metadata. */
@property(nonatomic, strong, nullable) GTLRRealTimeBidding_VideoMetadata *videoMetadata;

/** The URL to fetch a video ad. */
@property(nonatomic, copy, nullable) NSString *videoUrl;

/**
 *  The contents of a VAST document for a video ad.
 *  This document should conform to the VAST 2.0 or 3.0 standard.
 */
@property(nonatomic, copy, nullable) NSString *videoVastXml;

@end


/**
 *  Video metadata for a creative.
 */
@interface GTLRRealTimeBidding_VideoMetadata : GTLRObject

/**
 *  The duration of the ad.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/**
 *  Is this a valid VAST ad?
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isValidVast;

/**
 *  Is this a VPAID ad?
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isVpaid;

/**
 *  The list of all media files declared in the VAST. If there are multiple
 *  VASTs in a wrapper chain, this includes the media files from the deepest
 *  one in the chain.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRealTimeBidding_MediaFile *> *mediaFiles;

/**
 *  The minimum duration that the user has to watch before being able to
 *  skip this ad. If the field is not set, the ad is not skippable. If
 *  the field is set, the ad is skippable.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 */
@property(nonatomic, strong, nullable) GTLRDuration *skipOffset;

/**
 *  The maximum VAST version across all wrapped VAST documents.
 *  Can be used to filter the response of the
 *  creatives.list
 *  method.
 *
 *  Likely values:
 *    @arg @c kGTLRRealTimeBidding_VideoMetadata_VastVersion_VastVersion10 VAST
 *        1.0 (Value: "VAST_VERSION_1_0")
 *    @arg @c kGTLRRealTimeBidding_VideoMetadata_VastVersion_VastVersion20 VAST
 *        2.0 (Value: "VAST_VERSION_2_0")
 *    @arg @c kGTLRRealTimeBidding_VideoMetadata_VastVersion_VastVersion30 VAST
 *        3.0 (Value: "VAST_VERSION_3_0")
 *    @arg @c kGTLRRealTimeBidding_VideoMetadata_VastVersion_VastVersion40 VAST
 *        4.0 (Value: "VAST_VERSION_4_0")
 *    @arg @c kGTLRRealTimeBidding_VideoMetadata_VastVersion_VastVersionUnspecified
 *        Default value that should never be used. (Value:
 *        "VAST_VERSION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *vastVersion;

@end


/**
 *  A request to receive push notifications when any of the creatives belonging
 *  to the bidder changes status.
 */
@interface GTLRRealTimeBidding_WatchCreativesRequest : GTLRObject
@end


/**
 *  A response for the request to receive push notification when a bidder's
 *  creatives change status.
 */
@interface GTLRRealTimeBidding_WatchCreativesResponse : GTLRObject

/**
 *  The Pub/Sub subscription that can be used to pull creative status
 *  notifications. This would be of the format
 *  `projects/{project_id}/subscriptions/{subscription_id}`.
 *  Subscription is created with pull delivery. All service accounts belonging
 *  to the bidder will have read access to this subscription.
 *  Subscriptions that are inactive for more than 90 days will be disabled.
 *  Please use
 *  watchCreatives to
 *  re-enable the subscription.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  The Pub/Sub topic that will be used to publish creative serving
 *  status notifications. This would be of the format
 *  `projects/{project_id}/topics/{topic_id}`.
 */
@property(nonatomic, copy, nullable) NSString *topic;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
