// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Real-time Bidding API (realtimebidding/v1)
// Description:
//   Allows external bidders to manage their RTB integration with Google. This
//   includes managing bidder endpoints, QPS quotas, configuring what ad
//   inventory to receive via pretargeting, submitting creatives for
//   verification, and accessing creative metadata such as approval status.
// Documentation:
//   https://developers.google.com/authorized-buyers/apis/realtimebidding/reference/rest/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRRealTimeBidding_ActivatePretargetingConfigRequest;
@class GTLRRealTimeBidding_AddTargetedAppsRequest;
@class GTLRRealTimeBidding_AddTargetedPublishersRequest;
@class GTLRRealTimeBidding_AddTargetedSitesRequest;
@class GTLRRealTimeBidding_CloseUserListRequest;
@class GTLRRealTimeBidding_Creative;
@class GTLRRealTimeBidding_OpenUserListRequest;
@class GTLRRealTimeBidding_PretargetingConfig;
@class GTLRRealTimeBidding_RemoveTargetedAppsRequest;
@class GTLRRealTimeBidding_RemoveTargetedPublishersRequest;
@class GTLRRealTimeBidding_RemoveTargetedSitesRequest;
@class GTLRRealTimeBidding_SuspendPretargetingConfigRequest;
@class GTLRRealTimeBidding_UserList;
@class GTLRRealTimeBidding_WatchCreativesRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// view

/**
 *  Not specified, equivalent to SERVING_DECISION_ONLY.
 *
 *  Value: "CREATIVE_VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBiddingViewCreativeViewUnspecified;
/**
 *  The entire creative resource (including the declared fields and the creative
 *  content) is included in the response.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBiddingViewFull;
/**
 *  Only creativeServingDecision is included in the response.
 *
 *  Value: "SERVING_DECISION_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRRealTimeBiddingViewServingDecisionOnly;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Real-time Bidding query classes.
 */
@interface GTLRRealTimeBiddingQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Lists creatives.
 *
 *  Method: realtimebidding.bidders.creatives.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BiddersCreativesList : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBiddersCreativesListWithparent:]

/**
 *  Query string to filter creatives. If no filter is specified, all active
 *  creatives will be returned. Example: 'accountId=12345 AND
 *  (dealsStatus:DISAPPROVED AND disapprovalReason:UNACCEPTABLE_CONTENT) OR
 *  declaredAttributes:IS_COOKIE_TARGETED'
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Requested page size. The server may return fewer creatives than requested
 *  (due to timeout constraint) even if more are available via another call. If
 *  unspecified, server will pick an appropriate default. Acceptable values are
 *  1 to 1000, inclusive.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListCreativesResponse.nextPageToken returned from the
 *  previous call to the 'ListCreatives' method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the parent buyer that owns the creatives. The pattern for
 *  this resource is either `buyers/{buyerAccountId}` or
 *  `bidders/{bidderAccountId}`. For `buyers/{buyerAccountId}`, the
 *  `buyerAccountId` can be one of the following: 1. The ID of the buyer that is
 *  accessing their own creatives. 2. The ID of the child seat buyer under a
 *  bidder account. So for listing creatives pertaining to the child seat buyer
 *  (`456`) under bidder account (`123`), you would use the pattern:
 *  `buyers/456`. 3. The ID of the bidder itself. So for listing creatives
 *  pertaining to bidder (`123`), you would use `buyers/123`. If you want to
 *  access all creatives pertaining to both the bidder and all of its child seat
 *  accounts, you would use `bidders/{bidderAccountId}`, e.g., for all creatives
 *  pertaining to bidder (`123`), use `bidders/123`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Controls the amount of information included in the response. By default only
 *  creativeServingDecision is included. To retrieve the entire creative
 *  resource (including the declared fields and the creative content) specify
 *  the view as "FULL".
 *
 *  Likely values:
 *    @arg @c kGTLRRealTimeBiddingViewCreativeViewUnspecified Not specified,
 *        equivalent to SERVING_DECISION_ONLY. (Value:
 *        "CREATIVE_VIEW_UNSPECIFIED")
 *    @arg @c kGTLRRealTimeBiddingViewServingDecisionOnly Only
 *        creativeServingDecision is included in the response. (Value:
 *        "SERVING_DECISION_ONLY")
 *    @arg @c kGTLRRealTimeBiddingViewFull The entire creative resource
 *        (including the declared fields and the creative content) is included
 *        in the response. (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRRealTimeBidding_ListCreativesResponse.
 *
 *  Lists creatives.
 *
 *  @param parent Required. Name of the parent buyer that owns the creatives.
 *    The pattern for this resource is either `buyers/{buyerAccountId}` or
 *    `bidders/{bidderAccountId}`. For `buyers/{buyerAccountId}`, the
 *    `buyerAccountId` can be one of the following: 1. The ID of the buyer that
 *    is accessing their own creatives. 2. The ID of the child seat buyer under
 *    a bidder account. So for listing creatives pertaining to the child seat
 *    buyer (`456`) under bidder account (`123`), you would use the pattern:
 *    `buyers/456`. 3. The ID of the bidder itself. So for listing creatives
 *    pertaining to bidder (`123`), you would use `buyers/123`. If you want to
 *    access all creatives pertaining to both the bidder and all of its child
 *    seat accounts, you would use `bidders/{bidderAccountId}`, e.g., for all
 *    creatives pertaining to bidder (`123`), use `bidders/123`.
 *
 *  @return GTLRRealTimeBiddingQuery_BiddersCreativesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Watches all creatives pertaining to a bidder. It is sufficient to invoke
 *  this endpoint once per bidder. A Pub/Sub topic will be created and
 *  notifications will be pushed to the topic when any of the bidder's creatives
 *  change status. All of the bidder's service accounts will have access to read
 *  from the topic. Subsequent invocations of this method will return the
 *  existing Pub/Sub configuration.
 *
 *  Method: realtimebidding.bidders.creatives.watch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BiddersCreativesWatch : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBiddersCreativesWatchWithObject:parent:]

/**
 *  Required. To watch all creatives pertaining to the bidder and all its child
 *  seat accounts, the bidder must follow the pattern
 *  `bidders/{bidderAccountId}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRRealTimeBidding_WatchCreativesResponse.
 *
 *  Watches all creatives pertaining to a bidder. It is sufficient to invoke
 *  this endpoint once per bidder. A Pub/Sub topic will be created and
 *  notifications will be pushed to the topic when any of the bidder's creatives
 *  change status. All of the bidder's service accounts will have access to read
 *  from the topic. Subsequent invocations of this method will return the
 *  existing Pub/Sub configuration.
 *
 *  @param object The @c GTLRRealTimeBidding_WatchCreativesRequest to include in
 *    the query.
 *  @param parent Required. To watch all creatives pertaining to the bidder and
 *    all its child seat accounts, the bidder must follow the pattern
 *    `bidders/{bidderAccountId}`.
 *
 *  @return GTLRRealTimeBiddingQuery_BiddersCreativesWatch
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_WatchCreativesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Activates a pretargeting configuration.
 *
 *  Method: realtimebidding.bidders.pretargetingConfigs.activate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsActivate : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBiddersPretargetingConfigsActivateWithObject:name:]

/**
 *  Required. The name of the pretargeting configuration. Format:
 *  bidders/{bidderAccountId}/pretargetingConfig/{configId}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRealTimeBidding_PretargetingConfig.
 *
 *  Activates a pretargeting configuration.
 *
 *  @param object The @c GTLRRealTimeBidding_ActivatePretargetingConfigRequest
 *    to include in the query.
 *  @param name Required. The name of the pretargeting configuration. Format:
 *    bidders/{bidderAccountId}/pretargetingConfig/{configId}
 *
 *  @return GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsActivate
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_ActivatePretargetingConfigRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Adds targeted apps to the pretargeting configuration.
 *
 *  Method: realtimebidding.bidders.pretargetingConfigs.addTargetedApps
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsAddTargetedApps : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBiddersPretargetingConfigsAddTargetedAppsWithObject:pretargetingConfig:]

/**
 *  Required. The name of the pretargeting configuration. Format:
 *  bidders/{bidderAccountId}/pretargetingConfig/{configId}
 */
@property(nonatomic, copy, nullable) NSString *pretargetingConfig;

/**
 *  Fetches a @c GTLRRealTimeBidding_PretargetingConfig.
 *
 *  Adds targeted apps to the pretargeting configuration.
 *
 *  @param object The @c GTLRRealTimeBidding_AddTargetedAppsRequest to include
 *    in the query.
 *  @param pretargetingConfig Required. The name of the pretargeting
 *    configuration. Format:
 *    bidders/{bidderAccountId}/pretargetingConfig/{configId}
 *
 *  @return GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsAddTargetedApps
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_AddTargetedAppsRequest *)object
             pretargetingConfig:(NSString *)pretargetingConfig;

@end

/**
 *  Adds targeted publishers to the pretargeting config.
 *
 *  Method: realtimebidding.bidders.pretargetingConfigs.addTargetedPublishers
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsAddTargetedPublishers : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBiddersPretargetingConfigsAddTargetedPublishersWithObject:pretargetingConfig:]

/**
 *  Required. The name of the pretargeting configuration. Format:
 *  bidders/{bidderAccountId}/pretargetingConfig/{configId}
 */
@property(nonatomic, copy, nullable) NSString *pretargetingConfig;

/**
 *  Fetches a @c GTLRRealTimeBidding_PretargetingConfig.
 *
 *  Adds targeted publishers to the pretargeting config.
 *
 *  @param object The @c GTLRRealTimeBidding_AddTargetedPublishersRequest to
 *    include in the query.
 *  @param pretargetingConfig Required. The name of the pretargeting
 *    configuration. Format:
 *    bidders/{bidderAccountId}/pretargetingConfig/{configId}
 *
 *  @return GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsAddTargetedPublishers
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_AddTargetedPublishersRequest *)object
             pretargetingConfig:(NSString *)pretargetingConfig;

@end

/**
 *  Adds targeted sites to the pretargeting configuration.
 *
 *  Method: realtimebidding.bidders.pretargetingConfigs.addTargetedSites
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsAddTargetedSites : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBiddersPretargetingConfigsAddTargetedSitesWithObject:pretargetingConfig:]

/**
 *  Required. The name of the pretargeting configuration. Format:
 *  bidders/{bidderAccountId}/pretargetingConfig/{configId}
 */
@property(nonatomic, copy, nullable) NSString *pretargetingConfig;

/**
 *  Fetches a @c GTLRRealTimeBidding_PretargetingConfig.
 *
 *  Adds targeted sites to the pretargeting configuration.
 *
 *  @param object The @c GTLRRealTimeBidding_AddTargetedSitesRequest to include
 *    in the query.
 *  @param pretargetingConfig Required. The name of the pretargeting
 *    configuration. Format:
 *    bidders/{bidderAccountId}/pretargetingConfig/{configId}
 *
 *  @return GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsAddTargetedSites
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_AddTargetedSitesRequest *)object
             pretargetingConfig:(NSString *)pretargetingConfig;

@end

/**
 *  Creates a pretargeting configuration. A pretargeting configuration's state
 *  (PretargetingConfig.state) is active upon creation, and it will start to
 *  affect traffic shortly after. A bidder may create a maximum of 10
 *  pretargeting configurations. Attempts to exceed this maximum results in a
 *  400 bad request error.
 *
 *  Method: realtimebidding.bidders.pretargetingConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsCreate : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBiddersPretargetingConfigsCreateWithObject:parent:]

/**
 *  Required. Name of the bidder to create the pretargeting configuration for.
 *  Format: bidders/{bidderAccountId}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRRealTimeBidding_PretargetingConfig.
 *
 *  Creates a pretargeting configuration. A pretargeting configuration's state
 *  (PretargetingConfig.state) is active upon creation, and it will start to
 *  affect traffic shortly after. A bidder may create a maximum of 10
 *  pretargeting configurations. Attempts to exceed this maximum results in a
 *  400 bad request error.
 *
 *  @param object The @c GTLRRealTimeBidding_PretargetingConfig to include in
 *    the query.
 *  @param parent Required. Name of the bidder to create the pretargeting
 *    configuration for. Format: bidders/{bidderAccountId}
 *
 *  @return GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_PretargetingConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a pretargeting configuration.
 *
 *  Method: realtimebidding.bidders.pretargetingConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsDelete : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBiddersPretargetingConfigsDeleteWithname:]

/**
 *  Required. The name of the pretargeting configuration to delete. Format:
 *  bidders/{bidderAccountId}/pretargetingConfig/{configId}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRealTimeBidding_Empty.
 *
 *  Deletes a pretargeting configuration.
 *
 *  @param name Required. The name of the pretargeting configuration to delete.
 *    Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}
 *
 *  @return GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a pretargeting configuration.
 *
 *  Method: realtimebidding.bidders.pretargetingConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsGet : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBiddersPretargetingConfigsGetWithname:]

/**
 *  Required. Name of the pretargeting configuration to get. Format:
 *  bidders/{bidderAccountId}/pretargetingConfig/{configId}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRealTimeBidding_PretargetingConfig.
 *
 *  Gets a pretargeting configuration.
 *
 *  @param name Required. Name of the pretargeting configuration to get. Format:
 *    bidders/{bidderAccountId}/pretargetingConfig/{configId}
 *
 *  @return GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all pretargeting configurations for a single bidder.
 *
 *  Method: realtimebidding.bidders.pretargetingConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsList : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBiddersPretargetingConfigsListWithparent:]

/**
 *  The maximum number of pretargeting configurations to return. If unspecified,
 *  at most 10 pretargeting configurations will be returned. The maximum value
 *  is 100; values above 100 will be coerced to 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. This value
 *  is received from a previous `ListPretargetingConfigs` call in
 *  ListPretargetingConfigsResponse.nextPageToken.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the bidder whose pretargeting configurations will be
 *  listed. Format: bidders/{bidderAccountId}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRRealTimeBidding_ListPretargetingConfigsResponse.
 *
 *  Lists all pretargeting configurations for a single bidder.
 *
 *  @param parent Required. Name of the bidder whose pretargeting configurations
 *    will be listed. Format: bidders/{bidderAccountId}
 *
 *  @return GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a pretargeting configuration.
 *
 *  Method: realtimebidding.bidders.pretargetingConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsPatch : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBiddersPretargetingConfigsPatchWithObject:name:]

/**
 *  Output only. Name of the pretargeting configuration that must follow the
 *  pattern `bidders/{bidder_account_id}/pretargetingConfigs/{config_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Field mask to use for partial in-place updates.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRRealTimeBidding_PretargetingConfig.
 *
 *  Updates a pretargeting configuration.
 *
 *  @param object The @c GTLRRealTimeBidding_PretargetingConfig to include in
 *    the query.
 *  @param name Output only. Name of the pretargeting configuration that must
 *    follow the pattern
 *    `bidders/{bidder_account_id}/pretargetingConfigs/{config_id}`
 *
 *  @return GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_PretargetingConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Removes targeted apps from the pretargeting configuration.
 *
 *  Method: realtimebidding.bidders.pretargetingConfigs.removeTargetedApps
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsRemoveTargetedApps : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBiddersPretargetingConfigsRemoveTargetedAppsWithObject:pretargetingConfig:]

/**
 *  Required. The name of the pretargeting configuration. Format:
 *  bidders/{bidderAccountId}/pretargetingConfig/{configId}
 */
@property(nonatomic, copy, nullable) NSString *pretargetingConfig;

/**
 *  Fetches a @c GTLRRealTimeBidding_PretargetingConfig.
 *
 *  Removes targeted apps from the pretargeting configuration.
 *
 *  @param object The @c GTLRRealTimeBidding_RemoveTargetedAppsRequest to
 *    include in the query.
 *  @param pretargetingConfig Required. The name of the pretargeting
 *    configuration. Format:
 *    bidders/{bidderAccountId}/pretargetingConfig/{configId}
 *
 *  @return GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsRemoveTargetedApps
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_RemoveTargetedAppsRequest *)object
             pretargetingConfig:(NSString *)pretargetingConfig;

@end

/**
 *  Removes targeted publishers from the pretargeting config.
 *
 *  Method: realtimebidding.bidders.pretargetingConfigs.removeTargetedPublishers
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsRemoveTargetedPublishers : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBiddersPretargetingConfigsRemoveTargetedPublishersWithObject:pretargetingConfig:]

/**
 *  Required. The name of the pretargeting configuration. Format:
 *  bidders/{bidderAccountId}/pretargetingConfig/{configId}
 */
@property(nonatomic, copy, nullable) NSString *pretargetingConfig;

/**
 *  Fetches a @c GTLRRealTimeBidding_PretargetingConfig.
 *
 *  Removes targeted publishers from the pretargeting config.
 *
 *  @param object The @c GTLRRealTimeBidding_RemoveTargetedPublishersRequest to
 *    include in the query.
 *  @param pretargetingConfig Required. The name of the pretargeting
 *    configuration. Format:
 *    bidders/{bidderAccountId}/pretargetingConfig/{configId}
 *
 *  @return GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsRemoveTargetedPublishers
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_RemoveTargetedPublishersRequest *)object
             pretargetingConfig:(NSString *)pretargetingConfig;

@end

/**
 *  Removes targeted sites from the pretargeting configuration.
 *
 *  Method: realtimebidding.bidders.pretargetingConfigs.removeTargetedSites
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsRemoveTargetedSites : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBiddersPretargetingConfigsRemoveTargetedSitesWithObject:pretargetingConfig:]

/**
 *  Required. The name of the pretargeting configuration. Format:
 *  bidders/{bidderAccountId}/pretargetingConfig/{configId}
 */
@property(nonatomic, copy, nullable) NSString *pretargetingConfig;

/**
 *  Fetches a @c GTLRRealTimeBidding_PretargetingConfig.
 *
 *  Removes targeted sites from the pretargeting configuration.
 *
 *  @param object The @c GTLRRealTimeBidding_RemoveTargetedSitesRequest to
 *    include in the query.
 *  @param pretargetingConfig Required. The name of the pretargeting
 *    configuration. Format:
 *    bidders/{bidderAccountId}/pretargetingConfig/{configId}
 *
 *  @return GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsRemoveTargetedSites
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_RemoveTargetedSitesRequest *)object
             pretargetingConfig:(NSString *)pretargetingConfig;

@end

/**
 *  Suspends a pretargeting configuration.
 *
 *  Method: realtimebidding.bidders.pretargetingConfigs.suspend
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsSuspend : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBiddersPretargetingConfigsSuspendWithObject:name:]

/**
 *  Required. The name of the pretargeting configuration. Format:
 *  bidders/{bidderAccountId}/pretargetingConfig/{configId}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRealTimeBidding_PretargetingConfig.
 *
 *  Suspends a pretargeting configuration.
 *
 *  @param object The @c GTLRRealTimeBidding_SuspendPretargetingConfigRequest to
 *    include in the query.
 *  @param name Required. The name of the pretargeting configuration. Format:
 *    bidders/{bidderAccountId}/pretargetingConfig/{configId}
 *
 *  @return GTLRRealTimeBiddingQuery_BiddersPretargetingConfigsSuspend
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_SuspendPretargetingConfigRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a creative.
 *
 *  Method: realtimebidding.buyers.creatives.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BuyersCreativesCreate : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBuyersCreativesCreateWithObject:parent:]

/**
 *  Required. The name of the parent buyer that the new creative belongs to that
 *  must follow the pattern `buyers/{buyerAccountId}`, where `{buyerAccountId}`
 *  represents the account ID of the buyer who owns a creative. For a bidder
 *  accessing creatives on behalf of a child seat buyer, `{buyerAccountId}`
 *  should represent the account ID of the child seat buyer.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRRealTimeBidding_Creative.
 *
 *  Creates a creative.
 *
 *  @param object The @c GTLRRealTimeBidding_Creative to include in the query.
 *  @param parent Required. The name of the parent buyer that the new creative
 *    belongs to that must follow the pattern `buyers/{buyerAccountId}`, where
 *    `{buyerAccountId}` represents the account ID of the buyer who owns a
 *    creative. For a bidder accessing creatives on behalf of a child seat
 *    buyer, `{buyerAccountId}` should represent the account ID of the child
 *    seat buyer.
 *
 *  @return GTLRRealTimeBiddingQuery_BuyersCreativesCreate
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_Creative *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets a creative.
 *
 *  Method: realtimebidding.buyers.creatives.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BuyersCreativesGet : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBuyersCreativesGetWithname:]

/** Required. Name of the creative to retrieve. See creative.name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Controls the amount of information included in the response. By default only
 *  creativeServingDecision is included. To retrieve the entire creative
 *  resource (including the declared fields and the creative content) specify
 *  the view as "FULL".
 *
 *  Likely values:
 *    @arg @c kGTLRRealTimeBiddingViewCreativeViewUnspecified Not specified,
 *        equivalent to SERVING_DECISION_ONLY. (Value:
 *        "CREATIVE_VIEW_UNSPECIFIED")
 *    @arg @c kGTLRRealTimeBiddingViewServingDecisionOnly Only
 *        creativeServingDecision is included in the response. (Value:
 *        "SERVING_DECISION_ONLY")
 *    @arg @c kGTLRRealTimeBiddingViewFull The entire creative resource
 *        (including the declared fields and the creative content) is included
 *        in the response. (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRRealTimeBidding_Creative.
 *
 *  Gets a creative.
 *
 *  @param name Required. Name of the creative to retrieve. See creative.name.
 *
 *  @return GTLRRealTimeBiddingQuery_BuyersCreativesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists creatives.
 *
 *  Method: realtimebidding.buyers.creatives.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BuyersCreativesList : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBuyersCreativesListWithparent:]

/**
 *  Query string to filter creatives. If no filter is specified, all active
 *  creatives will be returned. Example: 'accountId=12345 AND
 *  (dealsStatus:DISAPPROVED AND disapprovalReason:UNACCEPTABLE_CONTENT) OR
 *  declaredAttributes:IS_COOKIE_TARGETED'
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Requested page size. The server may return fewer creatives than requested
 *  (due to timeout constraint) even if more are available via another call. If
 *  unspecified, server will pick an appropriate default. Acceptable values are
 *  1 to 1000, inclusive.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListCreativesResponse.nextPageToken returned from the
 *  previous call to the 'ListCreatives' method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the parent buyer that owns the creatives. The pattern for
 *  this resource is either `buyers/{buyerAccountId}` or
 *  `bidders/{bidderAccountId}`. For `buyers/{buyerAccountId}`, the
 *  `buyerAccountId` can be one of the following: 1. The ID of the buyer that is
 *  accessing their own creatives. 2. The ID of the child seat buyer under a
 *  bidder account. So for listing creatives pertaining to the child seat buyer
 *  (`456`) under bidder account (`123`), you would use the pattern:
 *  `buyers/456`. 3. The ID of the bidder itself. So for listing creatives
 *  pertaining to bidder (`123`), you would use `buyers/123`. If you want to
 *  access all creatives pertaining to both the bidder and all of its child seat
 *  accounts, you would use `bidders/{bidderAccountId}`, e.g., for all creatives
 *  pertaining to bidder (`123`), use `bidders/123`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Controls the amount of information included in the response. By default only
 *  creativeServingDecision is included. To retrieve the entire creative
 *  resource (including the declared fields and the creative content) specify
 *  the view as "FULL".
 *
 *  Likely values:
 *    @arg @c kGTLRRealTimeBiddingViewCreativeViewUnspecified Not specified,
 *        equivalent to SERVING_DECISION_ONLY. (Value:
 *        "CREATIVE_VIEW_UNSPECIFIED")
 *    @arg @c kGTLRRealTimeBiddingViewServingDecisionOnly Only
 *        creativeServingDecision is included in the response. (Value:
 *        "SERVING_DECISION_ONLY")
 *    @arg @c kGTLRRealTimeBiddingViewFull The entire creative resource
 *        (including the declared fields and the creative content) is included
 *        in the response. (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRRealTimeBidding_ListCreativesResponse.
 *
 *  Lists creatives.
 *
 *  @param parent Required. Name of the parent buyer that owns the creatives.
 *    The pattern for this resource is either `buyers/{buyerAccountId}` or
 *    `bidders/{bidderAccountId}`. For `buyers/{buyerAccountId}`, the
 *    `buyerAccountId` can be one of the following: 1. The ID of the buyer that
 *    is accessing their own creatives. 2. The ID of the child seat buyer under
 *    a bidder account. So for listing creatives pertaining to the child seat
 *    buyer (`456`) under bidder account (`123`), you would use the pattern:
 *    `buyers/456`. 3. The ID of the bidder itself. So for listing creatives
 *    pertaining to bidder (`123`), you would use `buyers/123`. If you want to
 *    access all creatives pertaining to both the bidder and all of its child
 *    seat accounts, you would use `bidders/{bidderAccountId}`, e.g., for all
 *    creatives pertaining to bidder (`123`), use `bidders/123`.
 *
 *  @return GTLRRealTimeBiddingQuery_BuyersCreativesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a creative.
 *
 *  Method: realtimebidding.buyers.creatives.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BuyersCreativesPatch : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBuyersCreativesPatchWithObject:name:]

/**
 *  Output only. Name of the creative. Follows the pattern
 *  `buyers/{buyer}/creatives/{creative}`, where `{buyer}` represents the
 *  account ID of the buyer who owns the creative, and `{creative}` is the
 *  buyer-specific creative ID that references this creative in the bid
 *  response.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Field mask to use for partial in-place updates.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRRealTimeBidding_Creative.
 *
 *  Updates a creative.
 *
 *  @param object The @c GTLRRealTimeBidding_Creative to include in the query.
 *  @param name Output only. Name of the creative. Follows the pattern
 *    `buyers/{buyer}/creatives/{creative}`, where `{buyer}` represents the
 *    account ID of the buyer who owns the creative, and `{creative}` is the
 *    buyer-specific creative ID that references this creative in the bid
 *    response.
 *
 *  @return GTLRRealTimeBiddingQuery_BuyersCreativesPatch
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_Creative *)object
                           name:(NSString *)name;

@end

/**
 *  Gets remarketing tag for a buyer. A remarketing tag is a piece of JavaScript
 *  code that can be placed on a web page. When a user visits a page containing
 *  a remarketing tag, Google adds the user to a user list.
 *
 *  Method: realtimebidding.buyers.getRemarketingTag
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BuyersGetRemarketingTag : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBuyersGetRemarketingTagWithname:]

/**
 *  Required. To fetch remarketing tag for an account, name must follow the
 *  pattern `buyers/{accountId}` where `{accountId}` represents ID of a buyer
 *  that owns the remarketing tag. For a bidder accessing remarketing tag on
 *  behalf of a child seat buyer, `{accountId}` should represent the ID of the
 *  child seat buyer. To fetch remarketing tag for a specific user list, name
 *  must follow the pattern `buyers/{accountId}/userLists/{userListId}`. See
 *  UserList.name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRealTimeBidding_GetRemarketingTagResponse.
 *
 *  Gets remarketing tag for a buyer. A remarketing tag is a piece of JavaScript
 *  code that can be placed on a web page. When a user visits a page containing
 *  a remarketing tag, Google adds the user to a user list.
 *
 *  @param name Required. To fetch remarketing tag for an account, name must
 *    follow the pattern `buyers/{accountId}` where `{accountId}` represents ID
 *    of a buyer that owns the remarketing tag. For a bidder accessing
 *    remarketing tag on behalf of a child seat buyer, `{accountId}` should
 *    represent the ID of the child seat buyer. To fetch remarketing tag for a
 *    specific user list, name must follow the pattern
 *    `buyers/{accountId}/userLists/{userListId}`. See UserList.name.
 *
 *  @return GTLRRealTimeBiddingQuery_BuyersGetRemarketingTag
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Change the status of a user list to CLOSED. This prevents new users from
 *  being added to the user list.
 *
 *  Method: realtimebidding.buyers.userLists.close
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BuyersUserListsClose : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBuyersUserListsCloseWithObject:name:]

/** Required. The name of the user list to close. See UserList.name */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRealTimeBidding_UserList.
 *
 *  Change the status of a user list to CLOSED. This prevents new users from
 *  being added to the user list.
 *
 *  @param object The @c GTLRRealTimeBidding_CloseUserListRequest to include in
 *    the query.
 *  @param name Required. The name of the user list to close. See UserList.name
 *
 *  @return GTLRRealTimeBiddingQuery_BuyersUserListsClose
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_CloseUserListRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Create a new user list.
 *
 *  Method: realtimebidding.buyers.userLists.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BuyersUserListsCreate : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBuyersUserListsCreateWithObject:parent:]

/**
 *  Required. The name of the parent buyer of the user list to be retrieved that
 *  must follow the pattern `buyers/{buyerAccountId}`, where `{buyerAccountId}`
 *  represents the account ID of the buyer who owns user lists. For a bidder
 *  accessing user lists on behalf of a child seat buyer , `{buyerAccountId}`
 *  should represent the account ID of the child seat buyer.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRRealTimeBidding_UserList.
 *
 *  Create a new user list.
 *
 *  @param object The @c GTLRRealTimeBidding_UserList to include in the query.
 *  @param parent Required. The name of the parent buyer of the user list to be
 *    retrieved that must follow the pattern `buyers/{buyerAccountId}`, where
 *    `{buyerAccountId}` represents the account ID of the buyer who owns user
 *    lists. For a bidder accessing user lists on behalf of a child seat buyer ,
 *    `{buyerAccountId}` should represent the account ID of the child seat
 *    buyer.
 *
 *  @return GTLRRealTimeBiddingQuery_BuyersUserListsCreate
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_UserList *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets a user list by its name.
 *
 *  Method: realtimebidding.buyers.userLists.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BuyersUserListsGet : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBuyersUserListsGetWithname:]

/** Required. The name of the user list to be retrieved. See UserList.name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRealTimeBidding_UserList.
 *
 *  Gets a user list by its name.
 *
 *  @param name Required. The name of the user list to be retrieved. See
 *    UserList.name.
 *
 *  @return GTLRRealTimeBiddingQuery_BuyersUserListsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets remarketing tag for a buyer. A remarketing tag is a piece of JavaScript
 *  code that can be placed on a web page. When a user visits a page containing
 *  a remarketing tag, Google adds the user to a user list.
 *
 *  Method: realtimebidding.buyers.userLists.getRemarketingTag
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BuyersUserListsGetRemarketingTag : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBuyersUserListsGetRemarketingTagWithname:]

/**
 *  Required. To fetch remarketing tag for an account, name must follow the
 *  pattern `buyers/{accountId}` where `{accountId}` represents ID of a buyer
 *  that owns the remarketing tag. For a bidder accessing remarketing tag on
 *  behalf of a child seat buyer, `{accountId}` should represent the ID of the
 *  child seat buyer. To fetch remarketing tag for a specific user list, name
 *  must follow the pattern `buyers/{accountId}/userLists/{userListId}`. See
 *  UserList.name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRealTimeBidding_GetRemarketingTagResponse.
 *
 *  Gets remarketing tag for a buyer. A remarketing tag is a piece of JavaScript
 *  code that can be placed on a web page. When a user visits a page containing
 *  a remarketing tag, Google adds the user to a user list.
 *
 *  @param name Required. To fetch remarketing tag for an account, name must
 *    follow the pattern `buyers/{accountId}` where `{accountId}` represents ID
 *    of a buyer that owns the remarketing tag. For a bidder accessing
 *    remarketing tag on behalf of a child seat buyer, `{accountId}` should
 *    represent the ID of the child seat buyer. To fetch remarketing tag for a
 *    specific user list, name must follow the pattern
 *    `buyers/{accountId}/userLists/{userListId}`. See UserList.name.
 *
 *  @return GTLRRealTimeBiddingQuery_BuyersUserListsGetRemarketingTag
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the user lists visible to the current user.
 *
 *  Method: realtimebidding.buyers.userLists.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BuyersUserListsList : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBuyersUserListsListWithparent:]

/** The number of results to return per page. */
@property(nonatomic, assign) NSInteger pageSize;

/** Continuation page token (as received from a previous response). */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the parent buyer for the user lists to be returned
 *  that must follow the pattern `buyers/{buyerAccountId}`, where
 *  `{buyerAccountId}` represents the account ID of the buyer who owns user
 *  lists. For a bidder accessing user lists on behalf of a child seat buyer ,
 *  `{buyerAccountId}` should represent the account ID of the child seat buyer.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRRealTimeBidding_ListUserListsResponse.
 *
 *  Lists the user lists visible to the current user.
 *
 *  @param parent Required. The name of the parent buyer for the user lists to
 *    be returned that must follow the pattern `buyers/{buyerAccountId}`, where
 *    `{buyerAccountId}` represents the account ID of the buyer who owns user
 *    lists. For a bidder accessing user lists on behalf of a child seat buyer ,
 *    `{buyerAccountId}` should represent the account ID of the child seat
 *    buyer.
 *
 *  @return GTLRRealTimeBiddingQuery_BuyersUserListsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Change the status of a user list to OPEN. This allows new users to be added
 *  to the user list.
 *
 *  Method: realtimebidding.buyers.userLists.open
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BuyersUserListsOpen : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBuyersUserListsOpenWithObject:name:]

/** Required. The name of the user list to open. See UserList.name */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRealTimeBidding_UserList.
 *
 *  Change the status of a user list to OPEN. This allows new users to be added
 *  to the user list.
 *
 *  @param object The @c GTLRRealTimeBidding_OpenUserListRequest to include in
 *    the query.
 *  @param name Required. The name of the user list to open. See UserList.name
 *
 *  @return GTLRRealTimeBiddingQuery_BuyersUserListsOpen
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_OpenUserListRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Update the given user list. Only user lists with URLRestrictions can be
 *  updated.
 *
 *  Method: realtimebidding.buyers.userLists.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRealTimeBiddingRealtimeBidding
 */
@interface GTLRRealTimeBiddingQuery_BuyersUserListsUpdate : GTLRRealTimeBiddingQuery
// Previous library name was
//   +[GTLQueryRealTimeBidding queryForBuyersUserListsUpdateWithObject:name:]

/**
 *  Output only. Name of the user list that must follow the pattern
 *  `buyers/{buyer}/userLists/{user_list}`, where `{buyer}` represents the
 *  account ID of the buyer who owns the user list. For a bidder accessing user
 *  lists on behalf of a child seat buyer, `{buyer}` represents the account ID
 *  of the child seat buyer. `{user_list}` is an int64 identifier assigned by
 *  Google to uniquely identify a user list.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRealTimeBidding_UserList.
 *
 *  Update the given user list. Only user lists with URLRestrictions can be
 *  updated.
 *
 *  @param object The @c GTLRRealTimeBidding_UserList to include in the query.
 *  @param name Output only. Name of the user list that must follow the pattern
 *    `buyers/{buyer}/userLists/{user_list}`, where `{buyer}` represents the
 *    account ID of the buyer who owns the user list. For a bidder accessing
 *    user lists on behalf of a child seat buyer, `{buyer}` represents the
 *    account ID of the child seat buyer. `{user_list}` is an int64 identifier
 *    assigned by Google to uniquely identify a user list.
 *
 *  @return GTLRRealTimeBiddingQuery_BuyersUserListsUpdate
 */
+ (instancetype)queryWithObject:(GTLRRealTimeBidding_UserList *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
