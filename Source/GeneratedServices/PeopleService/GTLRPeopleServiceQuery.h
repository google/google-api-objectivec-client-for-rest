// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google People API (people/v1)
// Description:
//   Provides access to information about profiles and contacts.
// Documentation:
//   https://developers.google.com/people/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// sortOrder

/** Value: "FIRST_NAME_ASCENDING" */
GTLR_EXTERN NSString * const kGTLRPeopleServiceSortOrderFirstNameAscending;
/** Value: "LAST_MODIFIED_ASCENDING" */
GTLR_EXTERN NSString * const kGTLRPeopleServiceSortOrderLastModifiedAscending;
/** Value: "LAST_NAME_ASCENDING" */
GTLR_EXTERN NSString * const kGTLRPeopleServiceSortOrderLastNameAscending;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other People Service query classes.
 */
@interface GTLRPeopleServiceQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Provides a list of the authenticated user's contacts merged with any
 *  connected profiles.
 *  <br>
 *  The request throws a 400 error if 'personFields' is not specified.
 *
 *  Method: people.people.connections.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 *    @c kGTLRAuthScopePeopleServiceContactsReadonly
 */
@interface GTLRPeopleServiceQuery_PeopleConnectionsList : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForPeopleConnectionsListWithresourceName:]

/**
 *  The number of connections to include in the response. Valid values are
 *  between 1 and 2000, inclusive. Defaults to 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The token of the page to be returned. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  **Required.** A field mask to restrict which fields on each person are
 *  returned. Valid values are:
 *  * addresses
 *  * ageRanges
 *  * biographies
 *  * birthdays
 *  * braggingRights
 *  * coverPhotos
 *  * emailAddresses
 *  * events
 *  * genders
 *  * imClients
 *  * interests
 *  * locales
 *  * memberships
 *  * metadata
 *  * names
 *  * nicknames
 *  * occupations
 *  * organizations
 *  * phoneNumbers
 *  * photos
 *  * relations
 *  * relationshipInterests
 *  * relationshipStatuses
 *  * residences
 *  * skills
 *  * taglines
 *  * urls
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *personFields;

/**
 *  **Required.** Comma-separated list of person fields to be included in the
 *  response. Each path should start with `person.`: for example,
 *  `person.names` or `person.photos`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *requestMaskIncludeField;

/**
 *  Whether the response should include a sync token, which can be used to get
 *  all changes since the last request.
 */
@property(nonatomic, assign) BOOL requestSyncToken;

/** The resource name to return connections for. Only `people/me` is valid. */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  The order in which the connections should be sorted. Defaults to
 *  `LAST_MODIFIED_ASCENDING`.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleServiceSortOrderLastModifiedAscending Value
 *        "LAST_MODIFIED_ASCENDING"
 *    @arg @c kGTLRPeopleServiceSortOrderFirstNameAscending Value
 *        "FIRST_NAME_ASCENDING"
 *    @arg @c kGTLRPeopleServiceSortOrderLastNameAscending Value
 *        "LAST_NAME_ASCENDING"
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  A sync token, returned by a previous call to `people.connections.list`.
 *  Only resources changed since the sync token was created will be returned.
 */
@property(nonatomic, copy, nullable) NSString *syncToken;

/**
 *  Fetches a @c GTLRPeopleService_ListConnectionsResponse.
 *
 *  Provides a list of the authenticated user's contacts merged with any
 *  connected profiles.
 *  <br>
 *  The request throws a 400 error if 'personFields' is not specified.
 *
 *  @param resourceName The resource name to return connections for. Only
 *    `people/me` is valid.
 *
 *  @returns GTLRPeopleServiceQuery_PeopleConnectionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithResourceName:(NSString *)resourceName;

@end

/**
 *  Provides information about a person by specifying a resource name. Use
 *  `people/me` to indicate the authenticated user.
 *  <br>
 *  The request throws a 400 error if 'personFields' is not specified.
 *
 *  Method: people.people.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 *    @c kGTLRAuthScopePeopleServiceContactsReadonly
 *    @c kGTLRAuthScopePeopleServicePlusLogin
 *    @c kGTLRAuthScopePeopleServiceUserAddressesRead
 *    @c kGTLRAuthScopePeopleServiceUserBirthdayRead
 *    @c kGTLRAuthScopePeopleServiceUserEmailsRead
 *    @c kGTLRAuthScopePeopleServiceUserinfoEmail
 *    @c kGTLRAuthScopePeopleServiceUserinfoProfile
 *    @c kGTLRAuthScopePeopleServiceUserPhonenumbersRead
 */
@interface GTLRPeopleServiceQuery_PeopleGet : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForPeopleGetWithresourceName:]

/**
 *  **Required.** A field mask to restrict which fields on the person are
 *  returned. Valid values are:
 *  * addresses
 *  * ageRanges
 *  * biographies
 *  * birthdays
 *  * braggingRights
 *  * coverPhotos
 *  * emailAddresses
 *  * events
 *  * genders
 *  * imClients
 *  * interests
 *  * locales
 *  * memberships
 *  * metadata
 *  * names
 *  * nicknames
 *  * occupations
 *  * organizations
 *  * phoneNumbers
 *  * photos
 *  * relations
 *  * relationshipInterests
 *  * relationshipStatuses
 *  * residences
 *  * skills
 *  * taglines
 *  * urls
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *personFields;

/**
 *  **Required.** Comma-separated list of person fields to be included in the
 *  response. Each path should start with `person.`: for example,
 *  `person.names` or `person.photos`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *requestMaskIncludeField;

/**
 *  The resource name of the person to provide information about.
 *  - To get information about the authenticated user, specify `people/me`.
 *  - To get information about a google account, specify `people/<account_id>`.
 *  - To get information about a contact, specify the resource name that
 *  identifies the contact as returned by
 *  [`people.connections.list`](/people/api/rest/v1/people.connections/list).
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Fetches a @c GTLRPeopleService_Person.
 *
 *  Provides information about a person by specifying a resource name. Use
 *  `people/me` to indicate the authenticated user.
 *  <br>
 *  The request throws a 400 error if 'personFields' is not specified.
 *
 *  @param resourceName The resource name of the person to provide information
 *    about.
 *    - To get information about the authenticated user, specify `people/me`.
 *    - To get information about a google account, specify
 *    `people/<account_id>`.
 *    - To get information about a contact, specify the resource name that
 *    identifies the contact as returned by
 *    [`people.connections.list`](/people/api/rest/v1/people.connections/list).
 *
 *  @returns GTLRPeopleServiceQuery_PeopleGet
 */
+ (instancetype)queryWithResourceName:(NSString *)resourceName;

@end

/**
 *  Provides information about a list of specific people by specifying a list
 *  of requested resource names. Use `people/me` to indicate the authenticated
 *  user.
 *  <br>
 *  The request throws a 400 error if 'personFields' is not specified.
 *
 *  Method: people.people.getBatchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 *    @c kGTLRAuthScopePeopleServiceContactsReadonly
 *    @c kGTLRAuthScopePeopleServicePlusLogin
 *    @c kGTLRAuthScopePeopleServiceUserAddressesRead
 *    @c kGTLRAuthScopePeopleServiceUserBirthdayRead
 *    @c kGTLRAuthScopePeopleServiceUserEmailsRead
 *    @c kGTLRAuthScopePeopleServiceUserinfoEmail
 *    @c kGTLRAuthScopePeopleServiceUserinfoProfile
 *    @c kGTLRAuthScopePeopleServiceUserPhonenumbersRead
 */
@interface GTLRPeopleServiceQuery_PeopleGetBatchGet : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForPeopleGetBatchGet]

/**
 *  **Required.** A field mask to restrict which fields on each person are
 *  returned. Valid values are:
 *  * addresses
 *  * ageRanges
 *  * biographies
 *  * birthdays
 *  * braggingRights
 *  * coverPhotos
 *  * emailAddresses
 *  * events
 *  * genders
 *  * imClients
 *  * interests
 *  * locales
 *  * memberships
 *  * metadata
 *  * names
 *  * nicknames
 *  * occupations
 *  * organizations
 *  * phoneNumbers
 *  * photos
 *  * relations
 *  * relationshipInterests
 *  * relationshipStatuses
 *  * residences
 *  * skills
 *  * taglines
 *  * urls
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *personFields;

/**
 *  **Required.** Comma-separated list of person fields to be included in the
 *  response. Each path should start with `person.`: for example,
 *  `person.names` or `person.photos`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *requestMaskIncludeField;

/**
 *  The resource name, such as one returned by
 *  [`people.connections.list`](/people/api/rest/v1/people.connections/list),
 *  of one of the people to provide information about. You can include this
 *  parameter up to 50 times in one request.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNames;

/**
 *  Fetches a @c GTLRPeopleService_GetPeopleResponse.
 *
 *  Provides information about a list of specific people by specifying a list
 *  of requested resource names. Use `people/me` to indicate the authenticated
 *  user.
 *  <br>
 *  The request throws a 400 error if 'personFields' is not specified.
 *
 *  @returns GTLRPeopleServiceQuery_PeopleGetBatchGet
 */
+ (instancetype)query;

@end

NS_ASSUME_NONNULL_END
