// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   People API (people/v1)
// Description:
//   Provides access to information about profiles and contacts.
// Documentation:
//   https://developers.google.com/people/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRPeopleService_CopyOtherContactToMyContactsGroupRequest;
@class GTLRPeopleService_CreateContactGroupRequest;
@class GTLRPeopleService_ModifyContactGroupMembersRequest;
@class GTLRPeopleService_Person;
@class GTLRPeopleService_UpdateContactGroupRequest;
@class GTLRPeopleService_UpdateContactPhotoRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// mergeSources

/**
 *  User owned contact.
 *
 *  Value: "DIRECTORY_MERGE_SOURCE_TYPE_CONTACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleServiceMergeSourcesDirectoryMergeSourceTypeContact;
/**
 *  Unspecified.
 *
 *  Value: "DIRECTORY_MERGE_SOURCE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleServiceMergeSourcesDirectoryMergeSourceTypeUnspecified;

// ----------------------------------------------------------------------------
// sortOrder

/**
 *  Sort people by first name.
 *
 *  Value: "FIRST_NAME_ASCENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleServiceSortOrderFirstNameAscending;
/**
 *  Sort people by when they were changed; older entries first.
 *
 *  Value: "LAST_MODIFIED_ASCENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleServiceSortOrderLastModifiedAscending;
/**
 *  Sort people by when they were changed; newer entries first.
 *
 *  Value: "LAST_MODIFIED_DESCENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleServiceSortOrderLastModifiedDescending;
/**
 *  Sort people by last name.
 *
 *  Value: "LAST_NAME_ASCENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleServiceSortOrderLastNameAscending;

// ----------------------------------------------------------------------------
// sources

/**
 *  G Suite domain shared contact.
 *
 *  Value: "DIRECTORY_SOURCE_TYPE_DOMAIN_CONTACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleServiceSourcesDirectorySourceTypeDomainContact;
/**
 *  G Suite domain profile.
 *
 *  Value: "DIRECTORY_SOURCE_TYPE_DOMAIN_PROFILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleServiceSourcesDirectorySourceTypeDomainProfile;
/**
 *  Unspecified.
 *
 *  Value: "DIRECTORY_SOURCE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleServiceSourcesDirectorySourceTypeUnspecified;
/**
 *  Returns SourceType.CONTACT.
 *
 *  Value: "READ_SOURCE_TYPE_CONTACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleServiceSourcesReadSourceTypeContact;
/**
 *  Returns SourceType.DOMAIN_CONTACT.
 *
 *  Value: "READ_SOURCE_TYPE_DOMAIN_CONTACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleServiceSourcesReadSourceTypeDomainContact;
/**
 *  Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and
 *  SourceType.PROFILE.
 *
 *  Value: "READ_SOURCE_TYPE_PROFILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleServiceSourcesReadSourceTypeProfile;
/**
 *  Unspecified.
 *
 *  Value: "READ_SOURCE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleServiceSourcesReadSourceTypeUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other People Service query classes.
 */
@interface GTLRPeopleServiceQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Get a list of contact groups owned by the authenticated user by specifying a
 *  list of contact group resource names.
 *
 *  Method: people.contactGroups.batchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 *    @c kGTLRAuthScopePeopleServiceContactsReadonly
 */
@interface GTLRPeopleServiceQuery_ContactGroupsBatchGet : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForContactGroupsBatchGet]

/**
 *  Optional. A field mask to restrict which fields on the group are returned.
 *  Defaults to `metadata`, `groupType`, `memberCount`, and `name` if not set or
 *  set to empty. Valid fields are: * clientData * groupType * memberCount *
 *  metadata * name
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *groupFields;

/**
 *  Optional. Specifies the maximum number of members to return for each group.
 *  Defaults to 0 if not set, which will return zero members.
 */
@property(nonatomic, assign) NSInteger maxMembers;

/** Required. The resource names of the contact groups to get. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNames;

/**
 *  Fetches a @c GTLRPeopleService_BatchGetContactGroupsResponse.
 *
 *  Get a list of contact groups owned by the authenticated user by specifying a
 *  list of contact group resource names.
 *
 *  @return GTLRPeopleServiceQuery_ContactGroupsBatchGet
 */
+ (instancetype)query;

@end

/**
 *  Create a new contact group owned by the authenticated user.
 *
 *  Method: people.contactGroups.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 */
@interface GTLRPeopleServiceQuery_ContactGroupsCreate : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForContactGroupsCreateWithObject:]

/**
 *  Fetches a @c GTLRPeopleService_ContactGroup.
 *
 *  Create a new contact group owned by the authenticated user.
 *
 *  @param object The @c GTLRPeopleService_CreateContactGroupRequest to include
 *    in the query.
 *
 *  @return GTLRPeopleServiceQuery_ContactGroupsCreate
 */
+ (instancetype)queryWithObject:(GTLRPeopleService_CreateContactGroupRequest *)object;

@end

/**
 *  Delete an existing contact group owned by the authenticated user by
 *  specifying a contact group resource name.
 *
 *  Method: people.contactGroups.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 */
@interface GTLRPeopleServiceQuery_ContactGroupsDelete : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForContactGroupsDeleteWithresourceName:]

/**
 *  Optional. Set to true to also delete the contacts in the specified group.
 */
@property(nonatomic, assign) BOOL deleteContacts;

/** Required. The resource name of the contact group to delete. */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Fetches a @c GTLRPeopleService_Empty.
 *
 *  Delete an existing contact group owned by the authenticated user by
 *  specifying a contact group resource name.
 *
 *  @param resourceName Required. The resource name of the contact group to
 *    delete.
 *
 *  @return GTLRPeopleServiceQuery_ContactGroupsDelete
 */
+ (instancetype)queryWithResourceName:(NSString *)resourceName;

@end

/**
 *  Get a specific contact group owned by the authenticated user by specifying a
 *  contact group resource name.
 *
 *  Method: people.contactGroups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 *    @c kGTLRAuthScopePeopleServiceContactsReadonly
 */
@interface GTLRPeopleServiceQuery_ContactGroupsGet : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForContactGroupsGetWithresourceName:]

/**
 *  Optional. A field mask to restrict which fields on the group are returned.
 *  Defaults to `metadata`, `groupType`, `memberCount`, and `name` if not set or
 *  set to empty. Valid fields are: * clientData * groupType * memberCount *
 *  metadata * name
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *groupFields;

/**
 *  Optional. Specifies the maximum number of members to return. Defaults to 0
 *  if not set, which will return zero members.
 */
@property(nonatomic, assign) NSInteger maxMembers;

/** Required. The resource name of the contact group to get. */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Fetches a @c GTLRPeopleService_ContactGroup.
 *
 *  Get a specific contact group owned by the authenticated user by specifying a
 *  contact group resource name.
 *
 *  @param resourceName Required. The resource name of the contact group to get.
 *
 *  @return GTLRPeopleServiceQuery_ContactGroupsGet
 */
+ (instancetype)queryWithResourceName:(NSString *)resourceName;

@end

/**
 *  List all contact groups owned by the authenticated user. Members of the
 *  contact groups are not populated.
 *
 *  Method: people.contactGroups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 *    @c kGTLRAuthScopePeopleServiceContactsReadonly
 */
@interface GTLRPeopleServiceQuery_ContactGroupsList : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForContactGroupsList]

/**
 *  Optional. A field mask to restrict which fields on the group are returned.
 *  Defaults to `metadata`, `groupType`, `memberCount`, and `name` if not set or
 *  set to empty. Valid fields are: * clientData * groupType * memberCount *
 *  metadata * name
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *groupFields;

/**
 *  Optional. The maximum number of resources to return. Valid values are
 *  between 1 and 1000, inclusive. Defaults to 30 if not set or set to 0.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. The next_page_token value returned from a previous call to
 *  [ListContactGroups](/people/api/rest/v1/contactgroups/list). Requests the
 *  next page of resources.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Optional. A sync token, returned by a previous call to `contactgroups.list`.
 *  Only resources changed since the sync token was created will be returned.
 */
@property(nonatomic, copy, nullable) NSString *syncToken;

/**
 *  Fetches a @c GTLRPeopleService_ListContactGroupsResponse.
 *
 *  List all contact groups owned by the authenticated user. Members of the
 *  contact groups are not populated.
 *
 *  @return GTLRPeopleServiceQuery_ContactGroupsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Modify the members of a contact group owned by the authenticated user. The
 *  only system contact groups that can have members added are
 *  `contactGroups/myContacts` and `contactGroups/starred`. Other system contact
 *  groups are deprecated and can only have contacts removed.
 *
 *  Method: people.contactGroups.members.modify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 */
@interface GTLRPeopleServiceQuery_ContactGroupsMembersModify : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForContactGroupsMembersModifyWithObject:resourceName:]

/** Required. The resource name of the contact group to modify. */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Fetches a @c GTLRPeopleService_ModifyContactGroupMembersResponse.
 *
 *  Modify the members of a contact group owned by the authenticated user. The
 *  only system contact groups that can have members added are
 *  `contactGroups/myContacts` and `contactGroups/starred`. Other system contact
 *  groups are deprecated and can only have contacts removed.
 *
 *  @param object The @c GTLRPeopleService_ModifyContactGroupMembersRequest to
 *    include in the query.
 *  @param resourceName Required. The resource name of the contact group to
 *    modify.
 *
 *  @return GTLRPeopleServiceQuery_ContactGroupsMembersModify
 */
+ (instancetype)queryWithObject:(GTLRPeopleService_ModifyContactGroupMembersRequest *)object
                   resourceName:(NSString *)resourceName;

@end

/**
 *  Update the name of an existing contact group owned by the authenticated
 *  user.
 *
 *  Method: people.contactGroups.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 */
@interface GTLRPeopleServiceQuery_ContactGroupsUpdate : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForContactGroupsUpdateWithObject:resourceName:]

/**
 *  The resource name for the contact group, assigned by the server. An ASCII
 *  string, in the form of `contactGroups/{contact_group_id}`.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Fetches a @c GTLRPeopleService_ContactGroup.
 *
 *  Update the name of an existing contact group owned by the authenticated
 *  user.
 *
 *  @param object The @c GTLRPeopleService_UpdateContactGroupRequest to include
 *    in the query.
 *  @param resourceName The resource name for the contact group, assigned by the
 *    server. An ASCII string, in the form of
 *    `contactGroups/{contact_group_id}`.
 *
 *  @return GTLRPeopleServiceQuery_ContactGroupsUpdate
 */
+ (instancetype)queryWithObject:(GTLRPeopleService_UpdateContactGroupRequest *)object
                   resourceName:(NSString *)resourceName;

@end

/**
 *  Copies an "Other contact" to a new contact in the user's "myContacts" group
 *
 *  Method: people.otherContacts.copyOtherContactToMyContactsGroup
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 *    @c kGTLRAuthScopePeopleServiceContactsOtherReadonly
 */
@interface GTLRPeopleServiceQuery_OtherContactsCopyOtherContactToMyContactsGroup : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForOtherContactsCopyOtherContactToMyContactsGroupWithObject:resourceName:]

/** Required. The resource name of the "Other contact" to copy. */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Fetches a @c GTLRPeopleService_Person.
 *
 *  Copies an "Other contact" to a new contact in the user's "myContacts" group
 *
 *  @param object The @c
 *    GTLRPeopleService_CopyOtherContactToMyContactsGroupRequest to include in
 *    the query.
 *  @param resourceName Required. The resource name of the "Other contact" to
 *    copy.
 *
 *  @return GTLRPeopleServiceQuery_OtherContactsCopyOtherContactToMyContactsGroup
 */
+ (instancetype)queryWithObject:(GTLRPeopleService_CopyOtherContactToMyContactsGroupRequest *)object
                   resourceName:(NSString *)resourceName;

@end

/**
 *  List all "Other contacts", that is contacts that are not in a contact group.
 *  "Other contacts" are typically auto created contacts from interactions.
 *
 *  Method: people.otherContacts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContactsOtherReadonly
 */
@interface GTLRPeopleServiceQuery_OtherContactsList : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForOtherContactsList]

/**
 *  Optional. The number of "Other contacts" to include in the response. Valid
 *  values are between 1 and 1000, inclusive. Defaults to 100 if not set or set
 *  to 0.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListOtherContacts` call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to `ListOtherContacts` must match the call that provided
 *  the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. A field mask to restrict which fields on each person are returned.
 *  Multiple fields can be specified by separating them with commas. Valid
 *  values are: * emailAddresses * names * phoneNumbers
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readMask;

/**
 *  Optional. Whether the response should include `next_sync_token`, which can
 *  be used to get all changes since the last request. For subsequent sync
 *  requests use the `sync_token` param instead. Initial sync requests that
 *  specify `request_sync_token` have an additional rate limit.
 */
@property(nonatomic, assign) BOOL requestSyncToken;

/**
 *  Optional. A sync token, received from a previous `ListOtherContacts` call.
 *  Provide this to retrieve only the resources changed since the last request.
 *  Sync requests that specify `sync_token` have an additional rate limit. When
 *  syncing, all other parameters provided to `ListOtherContacts` must match the
 *  call that provided the sync token.
 */
@property(nonatomic, copy, nullable) NSString *syncToken;

/**
 *  Fetches a @c GTLRPeopleService_ListOtherContactsResponse.
 *
 *  List all "Other contacts", that is contacts that are not in a contact group.
 *  "Other contacts" are typically auto created contacts from interactions.
 *
 *  @return GTLRPeopleServiceQuery_OtherContactsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Provides a list of contacts in the authenticated user's other contacts that
 *  matches the search query.
 *
 *  Method: people.otherContacts.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContactsOtherReadonly
 */
@interface GTLRPeopleServiceQuery_OtherContactsSearch : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForOtherContactsSearch]

/**
 *  Optional. The number of results to return. Defaults to 10 if field is not
 *  set, or set to 0.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Required. The plain-text query for the request. The query is used to match
 *  prefix phrases of the fields on a person. For example, a person with name
 *  "foo name" matches queries such as "f", "fo", "foo", "foo n", "nam", etc.,
 *  but not "oo n".
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Required. A field mask to restrict which fields on each person are returned.
 *  Multiple fields can be specified by separating them with commas. Valid
 *  values are: * emailAddresses * names * phoneNumbers
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readMask;

/**
 *  Fetches a @c GTLRPeopleService_SearchResponse.
 *
 *  Provides a list of contacts in the authenticated user's other contacts that
 *  matches the search query.
 *
 *  @return GTLRPeopleServiceQuery_OtherContactsSearch
 */
+ (instancetype)query;

@end

/**
 *  Provides a list of the authenticated user's contacts. The request returns a
 *  400 error if `personFields` is not specified. The request returns a 410
 *  error if `sync_token` is specified and is expired. Sync tokens expire after
 *  7 days to prevent data drift between clients and the server. To handle a
 *  sync token expired error, a request should be sent without `sync_token` to
 *  get all contacts.
 *
 *  Method: people.people.connections.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 *    @c kGTLRAuthScopePeopleServiceContactsReadonly
 */
@interface GTLRPeopleServiceQuery_PeopleConnectionsList : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForPeopleConnectionsListWithresourceName:]

/**
 *  Optional. The number of connections to include in the response. Valid values
 *  are between 1 and 1000, inclusive. Defaults to 100 if not set or set to 0.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListConnections` call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to `ListConnections` must match the call that provided
 *  the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. A field mask to restrict which fields on each person are returned.
 *  Multiple fields can be specified by separating them with commas. Valid
 *  values are: * addresses * ageRanges * biographies * birthdays * calendarUrls
 *  * clientData * coverPhotos * emailAddresses * events * externalIds * genders
 *  * imClients * interests * locales * locations * memberships * metadata *
 *  miscKeywords * names * nicknames * occupations * organizations *
 *  phoneNumbers * photos * relations * sipAddresses * skills * urls *
 *  userDefined
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *personFields;

/**
 *  Required. Comma-separated list of person fields to be included in the
 *  response. Each path should start with `person.`: for example, `person.names`
 *  or `person.photos`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *requestMaskIncludeField;

/**
 *  Optional. Whether the response should include `next_sync_token` on the last
 *  page, which can be used to get all changes since the last request. For
 *  subsequent sync requests use the `sync_token` param instead. Initial full
 *  sync requests that specify `request_sync_token` and do not specify
 *  `sync_token` have an additional rate limit per user. Each client should
 *  generally only be doing a full sync once every few days per user and so
 *  should not hit this limit.
 */
@property(nonatomic, assign) BOOL requestSyncToken;

/**
 *  Required. The resource name to return connections for. Only `people/me` is
 *  valid.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Optional. The order in which the connections should be sorted. Defaults to
 *  `LAST_MODIFIED_ASCENDING`.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleServiceSortOrderLastModifiedAscending Sort people by
 *        when they were changed; older entries first. (Value:
 *        "LAST_MODIFIED_ASCENDING")
 *    @arg @c kGTLRPeopleServiceSortOrderLastModifiedDescending Sort people by
 *        when they were changed; newer entries first. (Value:
 *        "LAST_MODIFIED_DESCENDING")
 *    @arg @c kGTLRPeopleServiceSortOrderFirstNameAscending Sort people by first
 *        name. (Value: "FIRST_NAME_ASCENDING")
 *    @arg @c kGTLRPeopleServiceSortOrderLastNameAscending Sort people by last
 *        name. (Value: "LAST_NAME_ASCENDING")
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Optional. A mask of what source types to return. Defaults to
 *  READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeUnspecified Unspecified.
 *        (Value: "READ_SOURCE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeProfile Returns
 *        SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.
 *        (Value: "READ_SOURCE_TYPE_PROFILE")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeContact Returns
 *        SourceType.CONTACT. (Value: "READ_SOURCE_TYPE_CONTACT")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeDomainContact Returns
 *        SourceType.DOMAIN_CONTACT. (Value: "READ_SOURCE_TYPE_DOMAIN_CONTACT")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sources;

/**
 *  Optional. A sync token, received from a previous `ListConnections` call.
 *  Provide this to retrieve only the resources changed since the last request.
 *  When syncing, all other parameters provided to `ListConnections` except
 *  `page_size` and `page_token` must match the initial call that provided the
 *  sync token. Sync tokens expire after seven days, after which a full sync
 *  request without a `sync_token` should be made.
 */
@property(nonatomic, copy, nullable) NSString *syncToken;

/**
 *  Fetches a @c GTLRPeopleService_ListConnectionsResponse.
 *
 *  Provides a list of the authenticated user's contacts. The request returns a
 *  400 error if `personFields` is not specified. The request returns a 410
 *  error if `sync_token` is specified and is expired. Sync tokens expire after
 *  7 days to prevent data drift between clients and the server. To handle a
 *  sync token expired error, a request should be sent without `sync_token` to
 *  get all contacts.
 *
 *  @param resourceName Required. The resource name to return connections for.
 *    Only `people/me` is valid.
 *
 *  @return GTLRPeopleServiceQuery_PeopleConnectionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithResourceName:(NSString *)resourceName;

@end

/**
 *  Create a new contact and return the person resource for that contact. The
 *  request returns a 400 error if more than one field is specified on a field
 *  that is a singleton for contact sources: * biographies * birthdays * genders
 *  * names
 *
 *  Method: people.people.createContact
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 */
@interface GTLRPeopleServiceQuery_PeopleCreateContact : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForPeopleCreateContactWithObject:]

/**
 *  Required. A field mask to restrict which fields on each person are returned.
 *  Multiple fields can be specified by separating them with commas. Defaults to
 *  all fields if not set. Valid values are: * addresses * ageRanges *
 *  biographies * birthdays * calendarUrls * clientData * coverPhotos *
 *  emailAddresses * events * externalIds * genders * imClients * interests *
 *  locales * locations * memberships * metadata * miscKeywords * names *
 *  nicknames * occupations * organizations * phoneNumbers * photos * relations
 *  * sipAddresses * skills * urls * userDefined
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *personFields;

/**
 *  Optional. A mask of what source types to return. Defaults to
 *  READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeUnspecified Unspecified.
 *        (Value: "READ_SOURCE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeProfile Returns
 *        SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.
 *        (Value: "READ_SOURCE_TYPE_PROFILE")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeContact Returns
 *        SourceType.CONTACT. (Value: "READ_SOURCE_TYPE_CONTACT")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeDomainContact Returns
 *        SourceType.DOMAIN_CONTACT. (Value: "READ_SOURCE_TYPE_DOMAIN_CONTACT")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sources;

/**
 *  Fetches a @c GTLRPeopleService_Person.
 *
 *  Create a new contact and return the person resource for that contact. The
 *  request returns a 400 error if more than one field is specified on a field
 *  that is a singleton for contact sources: * biographies * birthdays * genders
 *  * names
 *
 *  @param object The @c GTLRPeopleService_Person to include in the query.
 *
 *  @return GTLRPeopleServiceQuery_PeopleCreateContact
 */
+ (instancetype)queryWithObject:(GTLRPeopleService_Person *)object;

@end

/**
 *  Delete a contact person. Any non-contact data will not be deleted.
 *
 *  Method: people.people.deleteContact
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 */
@interface GTLRPeopleServiceQuery_PeopleDeleteContact : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForPeopleDeleteContactWithresourceName:]

/** Required. The resource name of the contact to delete. */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Fetches a @c GTLRPeopleService_Empty.
 *
 *  Delete a contact person. Any non-contact data will not be deleted.
 *
 *  @param resourceName Required. The resource name of the contact to delete.
 *
 *  @return GTLRPeopleServiceQuery_PeopleDeleteContact
 */
+ (instancetype)queryWithResourceName:(NSString *)resourceName;

@end

/**
 *  Delete a contact's photo.
 *
 *  Method: people.people.deleteContactPhoto
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 */
@interface GTLRPeopleServiceQuery_PeopleDeleteContactPhoto : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForPeopleDeleteContactPhotoWithresourceName:]

/**
 *  Optional. A field mask to restrict which fields on the person are returned.
 *  Multiple fields can be specified by separating them with commas. Defaults to
 *  empty if not set, which will skip the post mutate get. Valid values are: *
 *  addresses * ageRanges * biographies * birthdays * calendarUrls * clientData
 *  * coverPhotos * emailAddresses * events * externalIds * genders * imClients
 *  * interests * locales * locations * memberships * metadata * miscKeywords *
 *  names * nicknames * occupations * organizations * phoneNumbers * photos *
 *  relations * sipAddresses * skills * urls * userDefined
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *personFields;

/** Required. The resource name of the contact whose photo will be deleted. */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Optional. A mask of what source types to return. Defaults to
 *  READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeUnspecified Unspecified.
 *        (Value: "READ_SOURCE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeProfile Returns
 *        SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.
 *        (Value: "READ_SOURCE_TYPE_PROFILE")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeContact Returns
 *        SourceType.CONTACT. (Value: "READ_SOURCE_TYPE_CONTACT")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeDomainContact Returns
 *        SourceType.DOMAIN_CONTACT. (Value: "READ_SOURCE_TYPE_DOMAIN_CONTACT")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sources;

/**
 *  Fetches a @c GTLRPeopleService_DeleteContactPhotoResponse.
 *
 *  Delete a contact's photo.
 *
 *  @param resourceName Required. The resource name of the contact whose photo
 *    will be deleted.
 *
 *  @return GTLRPeopleServiceQuery_PeopleDeleteContactPhoto
 */
+ (instancetype)queryWithResourceName:(NSString *)resourceName;

@end

/**
 *  Provides information about a person by specifying a resource name. Use
 *  `people/me` to indicate the authenticated user. The request returns a 400
 *  error if 'personFields' is not specified.
 *
 *  Method: people.people.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 *    @c kGTLRAuthScopePeopleServiceContactsReadonly
 *    @c kGTLRAuthScopePeopleServiceDirectoryReadonly
 *    @c kGTLRAuthScopePeopleServiceUserAddressesRead
 *    @c kGTLRAuthScopePeopleServiceUserBirthdayRead
 *    @c kGTLRAuthScopePeopleServiceUserEmailsRead
 *    @c kGTLRAuthScopePeopleServiceUserGenderRead
 *    @c kGTLRAuthScopePeopleServiceUserinfoEmail
 *    @c kGTLRAuthScopePeopleServiceUserinfoProfile
 *    @c kGTLRAuthScopePeopleServiceUserOrganizationRead
 *    @c kGTLRAuthScopePeopleServiceUserPhonenumbersRead
 */
@interface GTLRPeopleServiceQuery_PeopleGet : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForPeopleGetWithresourceName:]

/**
 *  Required. A field mask to restrict which fields on the person are returned.
 *  Multiple fields can be specified by separating them with commas. Valid
 *  values are: * addresses * ageRanges * biographies * birthdays * calendarUrls
 *  * clientData * coverPhotos * emailAddresses * events * externalIds * genders
 *  * imClients * interests * locales * locations * memberships * metadata *
 *  miscKeywords * names * nicknames * occupations * organizations *
 *  phoneNumbers * photos * relations * sipAddresses * skills * urls *
 *  userDefined
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *personFields;

/**
 *  Required. Comma-separated list of person fields to be included in the
 *  response. Each path should start with `person.`: for example, `person.names`
 *  or `person.photos`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *requestMaskIncludeField;

/**
 *  Required. The resource name of the person to provide information about. - To
 *  get information about the authenticated user, specify `people/me`. - To get
 *  information about a google account, specify `people/{account_id}`. - To get
 *  information about a contact, specify the resource name that identifies the
 *  contact as returned by
 *  [`people.connections.list`](/people/api/rest/v1/people.connections/list).
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Optional. A mask of what source types to return. Defaults to
 *  READ_SOURCE_TYPE_PROFILE and READ_SOURCE_TYPE_CONTACT if not set.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeUnspecified Unspecified.
 *        (Value: "READ_SOURCE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeProfile Returns
 *        SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.
 *        (Value: "READ_SOURCE_TYPE_PROFILE")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeContact Returns
 *        SourceType.CONTACT. (Value: "READ_SOURCE_TYPE_CONTACT")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeDomainContact Returns
 *        SourceType.DOMAIN_CONTACT. (Value: "READ_SOURCE_TYPE_DOMAIN_CONTACT")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sources;

/**
 *  Fetches a @c GTLRPeopleService_Person.
 *
 *  Provides information about a person by specifying a resource name. Use
 *  `people/me` to indicate the authenticated user. The request returns a 400
 *  error if 'personFields' is not specified.
 *
 *  @param resourceName Required. The resource name of the person to provide
 *    information about. - To get information about the authenticated user,
 *    specify `people/me`. - To get information about a google account, specify
 *    `people/{account_id}`. - To get information about a contact, specify the
 *    resource name that identifies the contact as returned by
 *    [`people.connections.list`](/people/api/rest/v1/people.connections/list).
 *
 *  @return GTLRPeopleServiceQuery_PeopleGet
 */
+ (instancetype)queryWithResourceName:(NSString *)resourceName;

@end

/**
 *  Provides information about a list of specific people by specifying a list of
 *  requested resource names. Use `people/me` to indicate the authenticated
 *  user. The request returns a 400 error if 'personFields' is not specified.
 *
 *  Method: people.people.getBatchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 *    @c kGTLRAuthScopePeopleServiceContactsReadonly
 *    @c kGTLRAuthScopePeopleServiceDirectoryReadonly
 *    @c kGTLRAuthScopePeopleServiceUserAddressesRead
 *    @c kGTLRAuthScopePeopleServiceUserBirthdayRead
 *    @c kGTLRAuthScopePeopleServiceUserEmailsRead
 *    @c kGTLRAuthScopePeopleServiceUserGenderRead
 *    @c kGTLRAuthScopePeopleServiceUserinfoEmail
 *    @c kGTLRAuthScopePeopleServiceUserinfoProfile
 *    @c kGTLRAuthScopePeopleServiceUserOrganizationRead
 *    @c kGTLRAuthScopePeopleServiceUserPhonenumbersRead
 */
@interface GTLRPeopleServiceQuery_PeopleGetBatchGet : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForPeopleGetBatchGet]

/**
 *  Required. A field mask to restrict which fields on each person are returned.
 *  Multiple fields can be specified by separating them with commas. Valid
 *  values are: * addresses * ageRanges * biographies * birthdays * calendarUrls
 *  * clientData * coverPhotos * emailAddresses * events * externalIds * genders
 *  * imClients * interests * locales * locations * memberships * metadata *
 *  miscKeywords * names * nicknames * occupations * organizations *
 *  phoneNumbers * photos * relations * sipAddresses * skills * urls *
 *  userDefined
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *personFields;

/**
 *  Required. Comma-separated list of person fields to be included in the
 *  response. Each path should start with `person.`: for example, `person.names`
 *  or `person.photos`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *requestMaskIncludeField;

/**
 *  Required. The resource names of the people to provide information about.
 *  It's repeatable. The URL query parameter should be
 *  resourceNames=<name1>&resourceNames=<name2>&... - To get information about
 *  the authenticated user, specify `people/me`. - To get information about a
 *  google account, specify `people/{account_id}`. - To get information about a
 *  contact, specify the resource name that identifies the contact as returned
 *  by [`people.connections.list`](/people/api/rest/v1/people.connections/list).
 *  You can include up to 50 resource names in one request.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNames;

/**
 *  Optional. A mask of what source types to return. Defaults to
 *  READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeUnspecified Unspecified.
 *        (Value: "READ_SOURCE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeProfile Returns
 *        SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.
 *        (Value: "READ_SOURCE_TYPE_PROFILE")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeContact Returns
 *        SourceType.CONTACT. (Value: "READ_SOURCE_TYPE_CONTACT")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeDomainContact Returns
 *        SourceType.DOMAIN_CONTACT. (Value: "READ_SOURCE_TYPE_DOMAIN_CONTACT")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sources;

/**
 *  Fetches a @c GTLRPeopleService_GetPeopleResponse.
 *
 *  Provides information about a list of specific people by specifying a list of
 *  requested resource names. Use `people/me` to indicate the authenticated
 *  user. The request returns a 400 error if 'personFields' is not specified.
 *
 *  @return GTLRPeopleServiceQuery_PeopleGetBatchGet
 */
+ (instancetype)query;

@end

/**
 *  Provides a list of domain profiles and domain contacts in the authenticated
 *  user's domain directory.
 *
 *  Method: people.people.listDirectoryPeople
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceDirectoryReadonly
 */
@interface GTLRPeopleServiceQuery_PeopleListDirectoryPeople : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForPeopleListDirectoryPeople]

/**
 *  Optional. Additional data to merge into the directory sources if they are
 *  connected through verified join keys such as email addresses or phone
 *  numbers.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleServiceMergeSourcesDirectoryMergeSourceTypeUnspecified
 *        Unspecified. (Value: "DIRECTORY_MERGE_SOURCE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleServiceMergeSourcesDirectoryMergeSourceTypeContact User
 *        owned contact. (Value: "DIRECTORY_MERGE_SOURCE_TYPE_CONTACT")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *mergeSources;

/**
 *  Optional. The number of people to include in the response. Valid values are
 *  between 1 and 1000, inclusive. Defaults to 100 if not set or set to 0.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListDirectoryPeople` call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to `ListDirectoryPeople` must match the call that
 *  provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. A field mask to restrict which fields on each person are returned.
 *  Multiple fields can be specified by separating them with commas. Valid
 *  values are: * addresses * ageRanges * biographies * birthdays * calendarUrls
 *  * clientData * coverPhotos * emailAddresses * events * externalIds * genders
 *  * imClients * interests * locales * locations * memberships * metadata *
 *  miscKeywords * names * nicknames * occupations * organizations *
 *  phoneNumbers * photos * relations * sipAddresses * skills * urls *
 *  userDefined
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readMask;

/**
 *  Optional. Whether the response should include `next_sync_token`, which can
 *  be used to get all changes since the last request. For subsequent sync
 *  requests use the `sync_token` param instead.
 */
@property(nonatomic, assign) BOOL requestSyncToken;

/**
 *  Required. Directory sources to return.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleServiceSourcesDirectorySourceTypeUnspecified
 *        Unspecified. (Value: "DIRECTORY_SOURCE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleServiceSourcesDirectorySourceTypeDomainContact G Suite
 *        domain shared contact. (Value: "DIRECTORY_SOURCE_TYPE_DOMAIN_CONTACT")
 *    @arg @c kGTLRPeopleServiceSourcesDirectorySourceTypeDomainProfile G Suite
 *        domain profile. (Value: "DIRECTORY_SOURCE_TYPE_DOMAIN_PROFILE")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sources;

/**
 *  Optional. A sync token, received from a previous `ListDirectoryPeople` call.
 *  Provide this to retrieve only the resources changed since the last request.
 *  When syncing, all other parameters provided to `ListDirectoryPeople` must
 *  match the call that provided the sync token.
 */
@property(nonatomic, copy, nullable) NSString *syncToken;

/**
 *  Fetches a @c GTLRPeopleService_ListDirectoryPeopleResponse.
 *
 *  Provides a list of domain profiles and domain contacts in the authenticated
 *  user's domain directory.
 *
 *  @return GTLRPeopleServiceQuery_PeopleListDirectoryPeople
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Provides a list of contacts in the authenticated user's grouped contacts
 *  that matches the search query.
 *
 *  Method: people.people.searchContacts
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 *    @c kGTLRAuthScopePeopleServiceContactsReadonly
 */
@interface GTLRPeopleServiceQuery_PeopleSearchContacts : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForPeopleSearchContacts]

/** Optional. The number of results to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Required. The plain-text query for the request. The query is used to match
 *  prefix phrases of the fields on a person. For example, a person with name
 *  "foo name" matches queries such as "f", "fo", "foo", "foo n", "nam", etc.,
 *  but not "oo n".
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Required. A field mask to restrict which fields on each person are returned.
 *  Multiple fields can be specified by separating them with commas. Valid
 *  values are: * addresses * ageRanges * biographies * birthdays * calendarUrls
 *  * clientData * coverPhotos * emailAddresses * events * externalIds * genders
 *  * imClients * interests * locales * locations * memberships * metadata *
 *  miscKeywords * names * nicknames * occupations * organizations *
 *  phoneNumbers * photos * relations * sipAddresses * skills * urls *
 *  userDefined
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readMask;

/**
 *  Fetches a @c GTLRPeopleService_SearchResponse.
 *
 *  Provides a list of contacts in the authenticated user's grouped contacts
 *  that matches the search query.
 *
 *  @return GTLRPeopleServiceQuery_PeopleSearchContacts
 */
+ (instancetype)query;

@end

/**
 *  Provides a list of domain profiles and domain contacts in the authenticated
 *  user's domain directory that match the search query.
 *
 *  Method: people.people.searchDirectoryPeople
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceDirectoryReadonly
 */
@interface GTLRPeopleServiceQuery_PeopleSearchDirectoryPeople : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForPeopleSearchDirectoryPeople]

/**
 *  Optional. Additional data to merge into the directory sources if they are
 *  connected through verified join keys such as email addresses or phone
 *  numbers.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleServiceMergeSourcesDirectoryMergeSourceTypeUnspecified
 *        Unspecified. (Value: "DIRECTORY_MERGE_SOURCE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleServiceMergeSourcesDirectoryMergeSourceTypeContact User
 *        owned contact. (Value: "DIRECTORY_MERGE_SOURCE_TYPE_CONTACT")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *mergeSources;

/**
 *  Optional. The number of people to include in the response. Valid values are
 *  between 1 and 500, inclusive. Defaults to 100 if not set or set to 0.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `SearchDirectoryPeople`
 *  call. Provide this to retrieve the subsequent page. When paginating, all
 *  other parameters provided to `SearchDirectoryPeople` must match the call
 *  that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Prefix query that matches fields in the person. Does NOT use the
 *  read_mask for determining what fields to match.
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Required. A field mask to restrict which fields on each person are returned.
 *  Multiple fields can be specified by separating them with commas. Valid
 *  values are: * addresses * ageRanges * biographies * birthdays * calendarUrls
 *  * clientData * coverPhotos * emailAddresses * events * externalIds * genders
 *  * imClients * interests * locales * locations * memberships * metadata *
 *  miscKeywords * names * nicknames * occupations * organizations *
 *  phoneNumbers * photos * relations * sipAddresses * skills * urls *
 *  userDefined
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readMask;

/**
 *  Required. Directory sources to return.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleServiceSourcesDirectorySourceTypeUnspecified
 *        Unspecified. (Value: "DIRECTORY_SOURCE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleServiceSourcesDirectorySourceTypeDomainContact G Suite
 *        domain shared contact. (Value: "DIRECTORY_SOURCE_TYPE_DOMAIN_CONTACT")
 *    @arg @c kGTLRPeopleServiceSourcesDirectorySourceTypeDomainProfile G Suite
 *        domain profile. (Value: "DIRECTORY_SOURCE_TYPE_DOMAIN_PROFILE")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sources;

/**
 *  Fetches a @c GTLRPeopleService_SearchDirectoryPeopleResponse.
 *
 *  Provides a list of domain profiles and domain contacts in the authenticated
 *  user's domain directory that match the search query.
 *
 *  @return GTLRPeopleServiceQuery_PeopleSearchDirectoryPeople
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Update contact data for an existing contact person. Any non-contact data
 *  will not be modified. Any non-contact data in the person to update will be
 *  ignored. All fields specified in the `update_mask` will be replaced. The
 *  server returns a 400 error if `person.metadata.sources` is not specified for
 *  the contact to be updated or if there is no contact source. The server
 *  returns a 400 error with reason `"failedPrecondition"` if
 *  `person.metadata.sources.etag` is different than the contact's etag, which
 *  indicates the contact has changed since its data was read. Clients should
 *  get the latest person and merge their updates into the latest person. The
 *  server returns a 400 error if `memberships` are being updated and there are
 *  no contact group memberships specified on the person. The server returns a
 *  400 error if more than one field is specified on a field that is a singleton
 *  for contact sources: * biographies * birthdays * genders * names
 *
 *  Method: people.people.updateContact
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 */
@interface GTLRPeopleServiceQuery_PeopleUpdateContact : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForPeopleUpdateContactWithObject:resourceName:]

/**
 *  Optional. A field mask to restrict which fields on each person are returned.
 *  Multiple fields can be specified by separating them with commas. Defaults to
 *  all fields if not set. Valid values are: * addresses * ageRanges *
 *  biographies * birthdays * calendarUrls * clientData * coverPhotos *
 *  emailAddresses * events * externalIds * genders * imClients * interests *
 *  locales * locations * memberships * metadata * miscKeywords * names *
 *  nicknames * occupations * organizations * phoneNumbers * photos * relations
 *  * sipAddresses * skills * urls * userDefined
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *personFields;

/**
 *  The resource name for the person, assigned by the server. An ASCII string
 *  with a max length of 27 characters, in the form of `people/{person_id}`.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Optional. A mask of what source types to return. Defaults to
 *  READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeUnspecified Unspecified.
 *        (Value: "READ_SOURCE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeProfile Returns
 *        SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.
 *        (Value: "READ_SOURCE_TYPE_PROFILE")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeContact Returns
 *        SourceType.CONTACT. (Value: "READ_SOURCE_TYPE_CONTACT")
 *    @arg @c kGTLRPeopleServiceSourcesReadSourceTypeDomainContact Returns
 *        SourceType.DOMAIN_CONTACT. (Value: "READ_SOURCE_TYPE_DOMAIN_CONTACT")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sources;

/**
 *  Required. A field mask to restrict which fields on the person are updated.
 *  Multiple fields can be specified by separating them with commas. All updated
 *  fields will be replaced. Valid values are: * addresses * biographies *
 *  birthdays * calendarUrls * clientData * emailAddresses * events *
 *  externalIds * genders * imClients * interests * locales * locations *
 *  memberships * miscKeywords * names * nicknames * occupations * organizations
 *  * phoneNumbers * relations * sipAddresses * urls * userDefined
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updatePersonFields;

/**
 *  Fetches a @c GTLRPeopleService_Person.
 *
 *  Update contact data for an existing contact person. Any non-contact data
 *  will not be modified. Any non-contact data in the person to update will be
 *  ignored. All fields specified in the `update_mask` will be replaced. The
 *  server returns a 400 error if `person.metadata.sources` is not specified for
 *  the contact to be updated or if there is no contact source. The server
 *  returns a 400 error with reason `"failedPrecondition"` if
 *  `person.metadata.sources.etag` is different than the contact's etag, which
 *  indicates the contact has changed since its data was read. Clients should
 *  get the latest person and merge their updates into the latest person. The
 *  server returns a 400 error if `memberships` are being updated and there are
 *  no contact group memberships specified on the person. The server returns a
 *  400 error if more than one field is specified on a field that is a singleton
 *  for contact sources: * biographies * birthdays * genders * names
 *
 *  @param object The @c GTLRPeopleService_Person to include in the query.
 *  @param resourceName The resource name for the person, assigned by the
 *    server. An ASCII string with a max length of 27 characters, in the form of
 *    `people/{person_id}`.
 *
 *  @return GTLRPeopleServiceQuery_PeopleUpdateContact
 */
+ (instancetype)queryWithObject:(GTLRPeopleService_Person *)object
                   resourceName:(NSString *)resourceName;

@end

/**
 *  Update a contact's photo.
 *
 *  Method: people.people.updateContactPhoto
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleServiceContacts
 */
@interface GTLRPeopleServiceQuery_PeopleUpdateContactPhoto : GTLRPeopleServiceQuery
// Previous library name was
//   +[GTLQueryPeopleService queryForPeopleUpdateContactPhotoWithObject:resourceName:]

/** Required. Person resource name */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Fetches a @c GTLRPeopleService_UpdateContactPhotoResponse.
 *
 *  Update a contact's photo.
 *
 *  @param object The @c GTLRPeopleService_UpdateContactPhotoRequest to include
 *    in the query.
 *  @param resourceName Required. Person resource name
 *
 *  @return GTLRPeopleServiceQuery_PeopleUpdateContactPhoto
 */
+ (instancetype)queryWithObject:(GTLRPeopleService_UpdateContactPhotoRequest *)object
                   resourceName:(NSString *)resourceName;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
