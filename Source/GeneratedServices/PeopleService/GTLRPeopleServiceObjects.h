// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   People API (people/v1)
// Description:
//   Provides access to information about profiles and contacts.
// Documentation:
//   https://developers.google.com/people/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRPeopleService_Address;
@class GTLRPeopleService_AgeRangeType;
@class GTLRPeopleService_Biography;
@class GTLRPeopleService_Birthday;
@class GTLRPeopleService_BraggingRights;
@class GTLRPeopleService_ContactGroup;
@class GTLRPeopleService_ContactGroupMembership;
@class GTLRPeopleService_ContactGroupMetadata;
@class GTLRPeopleService_ContactGroupResponse;
@class GTLRPeopleService_CoverPhoto;
@class GTLRPeopleService_Date;
@class GTLRPeopleService_DomainMembership;
@class GTLRPeopleService_EmailAddress;
@class GTLRPeopleService_Event;
@class GTLRPeopleService_FieldMetadata;
@class GTLRPeopleService_Gender;
@class GTLRPeopleService_ImClient;
@class GTLRPeopleService_Interest;
@class GTLRPeopleService_Locale;
@class GTLRPeopleService_Membership;
@class GTLRPeopleService_Name;
@class GTLRPeopleService_Nickname;
@class GTLRPeopleService_Occupation;
@class GTLRPeopleService_Organization;
@class GTLRPeopleService_Person;
@class GTLRPeopleService_PersonMetadata;
@class GTLRPeopleService_PersonResponse;
@class GTLRPeopleService_PhoneNumber;
@class GTLRPeopleService_Photo;
@class GTLRPeopleService_ProfileMetadata;
@class GTLRPeopleService_Relation;
@class GTLRPeopleService_RelationshipInterest;
@class GTLRPeopleService_RelationshipStatus;
@class GTLRPeopleService_Residence;
@class GTLRPeopleService_SipAddress;
@class GTLRPeopleService_Skill;
@class GTLRPeopleService_Source;
@class GTLRPeopleService_Status;
@class GTLRPeopleService_Status_Details_Item;
@class GTLRPeopleService_Tagline;
@class GTLRPeopleService_Url;
@class GTLRPeopleService_UserDefined;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRPeopleService_AgeRangeType.ageRange

/**
 *  Unspecified.
 *
 *  Value: "AGE_RANGE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_AgeRangeType_AgeRange_AgeRangeUnspecified;
/**
 *  Between eighteen and twenty.
 *
 *  Value: "EIGHTEEN_TO_TWENTY"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_AgeRangeType_AgeRange_EighteenToTwenty;
/**
 *  Younger than eighteen.
 *
 *  Value: "LESS_THAN_EIGHTEEN"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_AgeRangeType_AgeRange_LessThanEighteen;
/**
 *  Twenty-one and older.
 *
 *  Value: "TWENTY_ONE_OR_OLDER"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_AgeRangeType_AgeRange_TwentyOneOrOlder;

// ----------------------------------------------------------------------------
// GTLRPeopleService_Biography.contentType

/**
 *  Unspecified.
 *
 *  Value: "CONTENT_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Biography_ContentType_ContentTypeUnspecified;
/**
 *  HTML text.
 *
 *  Value: "TEXT_HTML"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Biography_ContentType_TextHtml;
/**
 *  Plain text.
 *
 *  Value: "TEXT_PLAIN"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Biography_ContentType_TextPlain;

// ----------------------------------------------------------------------------
// GTLRPeopleService_ContactGroup.groupType

/**
 *  Unspecified.
 *
 *  Value: "GROUP_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_ContactGroup_GroupType_GroupTypeUnspecified;
/**
 *  System defined contact group.
 *
 *  Value: "SYSTEM_CONTACT_GROUP"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_ContactGroup_GroupType_SystemContactGroup;
/**
 *  User defined contact group.
 *
 *  Value: "USER_CONTACT_GROUP"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_ContactGroup_GroupType_UserContactGroup;

// ----------------------------------------------------------------------------
// GTLRPeopleService_Nickname.type

/**
 *  Generic nickname.
 *
 *  Value: "DEFAULT"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Nickname_Type_Default;
/**
 *  Google+ profile nickname.
 *
 *  Value: "GPLUS"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Nickname_Type_Gplus;
/**
 *  Initials.
 *
 *  Value: "INITIALS"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Nickname_Type_Initials;
/**
 *  Maiden name or birth family name. Used when the person's family name has
 *  changed as a result of marriage.
 *
 *  Value: "MAIDEN_NAME"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Nickname_Type_MaidenName;
/**
 *  A professional affiliation or other name; for example, `Dr. Smith.`
 *
 *  Value: "OTHER_NAME"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Nickname_Type_OtherName;

// ----------------------------------------------------------------------------
// GTLRPeopleService_Person.ageRange

/**
 *  Unspecified.
 *
 *  Value: "AGE_RANGE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Person_AgeRange_AgeRangeUnspecified;
/**
 *  Between eighteen and twenty.
 *
 *  Value: "EIGHTEEN_TO_TWENTY"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Person_AgeRange_EighteenToTwenty;
/**
 *  Younger than eighteen.
 *
 *  Value: "LESS_THAN_EIGHTEEN"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Person_AgeRange_LessThanEighteen;
/**
 *  Twenty-one and older.
 *
 *  Value: "TWENTY_ONE_OR_OLDER"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Person_AgeRange_TwentyOneOrOlder;

// ----------------------------------------------------------------------------
// GTLRPeopleService_PersonMetadata.objectType

/**
 *  Unspecified.
 *
 *  Value: "OBJECT_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_PersonMetadata_ObjectType_ObjectTypeUnspecified;
/**
 *  [Google+ Page.](http://www.google.com/+/brands/)
 *
 *  Value: "PAGE"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_PersonMetadata_ObjectType_Page;
/**
 *  Person.
 *
 *  Value: "PERSON"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_PersonMetadata_ObjectType_Person;

// ----------------------------------------------------------------------------
// GTLRPeopleService_ProfileMetadata.objectType

/**
 *  Unspecified.
 *
 *  Value: "OBJECT_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_ProfileMetadata_ObjectType_ObjectTypeUnspecified;
/**
 *  [Google+ Page.](http://www.google.com/+/brands/)
 *
 *  Value: "PAGE"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_ProfileMetadata_ObjectType_Page;
/**
 *  Person.
 *
 *  Value: "PERSON"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_ProfileMetadata_ObjectType_Person;

// ----------------------------------------------------------------------------
// GTLRPeopleService_ProfileMetadata.userTypes

/** Value: "GOOGLE_APPS_USER" */
GTLR_EXTERN NSString * const kGTLRPeopleService_ProfileMetadata_UserTypes_GoogleAppsUser;
/** Value: "GOOGLE_USER" */
GTLR_EXTERN NSString * const kGTLRPeopleService_ProfileMetadata_UserTypes_GoogleUser;
/** Value: "GPLUS_USER" */
GTLR_EXTERN NSString * const kGTLRPeopleService_ProfileMetadata_UserTypes_GplusUser;
/** Value: "USER_TYPE_UNKNOWN" */
GTLR_EXTERN NSString * const kGTLRPeopleService_ProfileMetadata_UserTypes_UserTypeUnknown;

// ----------------------------------------------------------------------------
// GTLRPeopleService_Source.type

/**
 *  [Google Account](https://accounts.google.com).
 *
 *  Value: "ACCOUNT"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Source_Type_Account;
/**
 *  [Google contact](https://contacts.google.com). You can view the
 *  contact at https://contact.google.com/<var>id</var> where <var>id</var>
 *  is the source id.
 *
 *  Value: "CONTACT"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Source_Type_Contact;
/**
 *  [Google Apps domain profile](https://admin.google.com).
 *
 *  Value: "DOMAIN_PROFILE"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Source_Type_DomainProfile;
/**
 *  [Google profile](https://profiles.google.com). You can view the
 *  profile at https://profiles.google.com/<var>id</var> where
 *  <var>id</var> is the source id.
 *
 *  Value: "PROFILE"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Source_Type_Profile;
/**
 *  Unspecified.
 *
 *  Value: "SOURCE_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRPeopleService_Source_Type_SourceTypeUnspecified;

/**
 *  A person's physical address. May be a P.O. box or street address. All fields
 *  are optional.
 */
@interface GTLRPeopleService_Address : GTLRObject

/** The city of the address. */
@property(nonatomic, copy, nullable) NSString *city;

/** The country of the address. */
@property(nonatomic, copy, nullable) NSString *country;

/**
 *  The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country
 *  code of the address.
 */
@property(nonatomic, copy, nullable) NSString *countryCode;

/** The extended address of the address; for example, the apartment number. */
@property(nonatomic, copy, nullable) NSString *extendedAddress;

/**
 *  The read-only type of the address translated and formatted in the viewer's
 *  account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/**
 *  The unstructured value of the address. If this is not set by the user it
 *  will be automatically constructed from structured values.
 */
@property(nonatomic, copy, nullable) NSString *formattedValue;

/** Metadata about the address. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The P.O. box of the address. */
@property(nonatomic, copy, nullable) NSString *poBox;

/** The postal code of the address. */
@property(nonatomic, copy, nullable) NSString *postalCode;

/** The region of the address; for example, the state or province. */
@property(nonatomic, copy, nullable) NSString *region;

/** The street address. */
@property(nonatomic, copy, nullable) NSString *streetAddress;

/**
 *  The type of the address. The type can be custom or one of these predefined
 *  values:
 *  * `home`
 *  * `work`
 *  * `other`
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A person's age range.
 */
@interface GTLRPeopleService_AgeRangeType : GTLRObject

/**
 *  The age range.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_AgeRangeType_AgeRange_AgeRangeUnspecified
 *        Unspecified. (Value: "AGE_RANGE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleService_AgeRangeType_AgeRange_EighteenToTwenty Between
 *        eighteen and twenty. (Value: "EIGHTEEN_TO_TWENTY")
 *    @arg @c kGTLRPeopleService_AgeRangeType_AgeRange_LessThanEighteen Younger
 *        than eighteen. (Value: "LESS_THAN_EIGHTEEN")
 *    @arg @c kGTLRPeopleService_AgeRangeType_AgeRange_TwentyOneOrOlder
 *        Twenty-one and older. (Value: "TWENTY_ONE_OR_OLDER")
 */
@property(nonatomic, copy, nullable) NSString *ageRange;

/** Metadata about the age range. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

@end


/**
 *  The response to a batch get contact groups request.
 */
@interface GTLRPeopleService_BatchGetContactGroupsResponse : GTLRObject

/** The list of responses for each requested contact group resource. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_ContactGroupResponse *> *responses;

@end


/**
 *  A person's short biography.
 */
@interface GTLRPeopleService_Biography : GTLRObject

/**
 *  The content type of the biography.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_Biography_ContentType_ContentTypeUnspecified
 *        Unspecified. (Value: "CONTENT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleService_Biography_ContentType_TextHtml HTML text.
 *        (Value: "TEXT_HTML")
 *    @arg @c kGTLRPeopleService_Biography_ContentType_TextPlain Plain text.
 *        (Value: "TEXT_PLAIN")
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/** Metadata about the biography. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The short biography. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's birthday. At least one of the `date` and `text` fields are
 *  specified. The `date` and `text` fields typically represent the same
 *  date, but are not guaranteed to.
 */
@interface GTLRPeopleService_Birthday : GTLRObject

/** The date of the birthday. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Date *date;

/** Metadata about the birthday. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** A free-form string representing the user's birthday. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A person's bragging rights.
 */
@interface GTLRPeopleService_BraggingRights : GTLRObject

/** Metadata about the bragging rights. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The bragging rights; for example, `climbed mount everest`. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A contact group.
 */
@interface GTLRPeopleService_ContactGroup : GTLRObject

/**
 *  The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the
 *  resource. Used for web cache validation.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The read-only name translated and formatted in the viewer's account locale
 *  or the `Accept-Language` HTTP header locale for system groups names.
 *  Group names set by the owner are the same as name.
 */
@property(nonatomic, copy, nullable) NSString *formattedName;

/**
 *  The read-only contact group type.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_ContactGroup_GroupType_GroupTypeUnspecified
 *        Unspecified. (Value: "GROUP_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleService_ContactGroup_GroupType_SystemContactGroup
 *        System defined contact group. (Value: "SYSTEM_CONTACT_GROUP")
 *    @arg @c kGTLRPeopleService_ContactGroup_GroupType_UserContactGroup User
 *        defined contact group. (Value: "USER_CONTACT_GROUP")
 */
@property(nonatomic, copy, nullable) NSString *groupType;

/**
 *  The total number of contacts in the group irrespective of max members in
 *  specified in the request.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memberCount;

/**
 *  The list of contact person resource names that are members of the contact
 *  group. The field is not populated for LIST requests and can only be updated
 *  through the
 *  [ModifyContactGroupMembers](/people/api/rest/v1/contactgroups/members/modify).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *memberResourceNames;

/** Metadata about the contact group. */
@property(nonatomic, strong, nullable) GTLRPeopleService_ContactGroupMetadata *metadata;

/**
 *  The contact group name set by the group owner or a system provided name
 *  for system groups.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The resource name for the contact group, assigned by the server. An ASCII
 *  string, in the form of `contactGroups/`<var>contact_group_id</var>.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end


/**
 *  A Google contact group membership.
 */
@interface GTLRPeopleService_ContactGroupMembership : GTLRObject

/**
 *  The contact group ID for the contact group membership. The contact group
 *  ID can be custom or one of these predefined values:
 *  * `myContacts`
 *  * `starred`
 *  * A numerical ID for user-created groups.
 */
@property(nonatomic, copy, nullable) NSString *contactGroupId;

@end


/**
 *  The read-only metadata about a contact group.
 */
@interface GTLRPeopleService_ContactGroupMetadata : GTLRObject

/**
 *  True if the contact group resource has been deleted. Populated only for
 *  [`ListContactGroups`](/people/api/rest/v1/contactgroups/list) requests
 *  that include a sync token.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleted;

/** The time the group was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  The response for a specific contact group.
 */
@interface GTLRPeopleService_ContactGroupResponse : GTLRObject

/** The contact group. */
@property(nonatomic, strong, nullable) GTLRPeopleService_ContactGroup *contactGroup;

/** The original requested resource name. */
@property(nonatomic, copy, nullable) NSString *requestedResourceName;

/** The status of the response. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Status *status;

@end


/**
 *  A person's read-only cover photo. A large image shown on the person's
 *  profile page that represents who they are or what they care about.
 */
@interface GTLRPeopleService_CoverPhoto : GTLRObject

/**
 *  True if the cover photo is the default cover photo;
 *  false if the cover photo is a user-provided cover photo.
 *
 *  Remapped to 'defaultProperty' to avoid language reserved word 'default'.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultProperty;

/** Metadata about the cover photo. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The URL of the cover photo. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  A request to create a new contact group.
 */
@interface GTLRPeopleService_CreateContactGroupRequest : GTLRObject

/** The contact group to create. */
@property(nonatomic, strong, nullable) GTLRPeopleService_ContactGroup *contactGroup;

@end


/**
 *  Represents a whole calendar date, for example a date of birth. The time
 *  of day and time zone are either specified elsewhere or are not
 *  significant. The date is relative to the
 *  [Proleptic Gregorian
 *  Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar).
 *  The day may be 0 to represent a year and month where the day is not
 *  significant. The year may be 0 to represent a month and day independent
 *  of year; for example, anniversary date.
 */
@interface GTLRPeopleService_Date : GTLRObject

/**
 *  Day of month. Must be from 1 to 31 and valid for the year and month, or 0
 *  if specifying a year by itself or a year and month where the day is not
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of year. Must be from 1 to 12, or 0 if specifying a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of date. Must be from 1 to 9999, or 0 if specifying a date without
 *  a year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  A Google Apps Domain membership.
 */
@interface GTLRPeopleService_DomainMembership : GTLRObject

/**
 *  True if the person is in the viewer's Google Apps domain.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inViewerDomain;

@end


/**
 *  A person's email address.
 */
@interface GTLRPeopleService_EmailAddress : GTLRObject

/** The display name of the email. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The read-only type of the email address translated and formatted in the
 *  viewer's account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the email address. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The type of the email address. The type can be custom or one of these
 *  predefined values:
 *  * `home`
 *  * `work`
 *  * `other`
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The email address. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRPeopleService_Empty : GTLRObject
@end


/**
 *  An event related to the person.
 */
@interface GTLRPeopleService_Event : GTLRObject

/** The date of the event. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Date *date;

/**
 *  The read-only type of the event translated and formatted in the
 *  viewer's account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the event. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The type of the event. The type can be custom or one of these predefined
 *  values:
 *  * `anniversary`
 *  * `other`
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Metadata about a field.
 */
@interface GTLRPeopleService_FieldMetadata : GTLRObject

/**
 *  True if the field is the primary field; false if the field is a secondary
 *  field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *primary;

/** The source of the field. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Source *source;

/**
 *  True if the field is verified; false if the field is unverified. A
 *  verified field is typically a name, email address, phone number, or
 *  website that has been confirmed to be owned by the person.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verified;

@end


/**
 *  A person's gender.
 */
@interface GTLRPeopleService_Gender : GTLRObject

/**
 *  The read-only value of the gender translated and formatted in the viewer's
 *  account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedValue;

/** Metadata about the gender. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The gender for the person. The gender can be custom or one of these
 *  predefined values:
 *  * `male`
 *  * `female`
 *  * `other`
 *  * `unknown`
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRPeopleService_GetPeopleResponse
 */
@interface GTLRPeopleService_GetPeopleResponse : GTLRObject

/** The response for each requested resource name. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_PersonResponse *> *responses;

@end


/**
 *  A person's instant messaging client.
 */
@interface GTLRPeopleService_ImClient : GTLRObject

/**
 *  The read-only protocol of the IM client formatted in the viewer's account
 *  locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedProtocol;

/**
 *  The read-only type of the IM client translated and formatted in the
 *  viewer's account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the IM client. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The protocol of the IM client. The protocol can be custom or one of these
 *  predefined values:
 *  * `aim`
 *  * `msn`
 *  * `yahoo`
 *  * `skype`
 *  * `qq`
 *  * `googleTalk`
 *  * `icq`
 *  * `jabber`
 *  * `netMeeting`
 */
@property(nonatomic, copy, nullable) NSString *protocol;

/**
 *  The type of the IM client. The type can be custom or one of these
 *  predefined values:
 *  * `home`
 *  * `work`
 *  * `other`
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The user name used in the IM client. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  One of the person's interests.
 */
@interface GTLRPeopleService_Interest : GTLRObject

/** Metadata about the interest. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The interest; for example, `stargazing`. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRPeopleService_ListConnectionsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "connections" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPeopleService_ListConnectionsResponse : GTLRCollectionObject

/**
 *  The list of people that the requestor is connected to.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Person *> *connections;

/** The token that can be used to retrieve the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** The token that can be used to retrieve changes since the last request. */
@property(nonatomic, copy, nullable) NSString *nextSyncToken;

/**
 *  The total number of items in the list without pagination.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalItems;

/**
 *  **DEPRECATED** (Please use totalItems)
 *  The total number of people in the list without pagination.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalPeople;

@end


/**
 *  The response to a list contact groups request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "contactGroups" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPeopleService_ListContactGroupsResponse : GTLRCollectionObject

/**
 *  The list of contact groups. Members of the contact groups are not
 *  populated.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_ContactGroup *> *contactGroups;

/** The token that can be used to retrieve the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** The token that can be used to retrieve changes since the last request. */
@property(nonatomic, copy, nullable) NSString *nextSyncToken;

/**
 *  The total number of items in the list without pagination.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalItems;

@end


/**
 *  A person's locale preference.
 */
@interface GTLRPeopleService_Locale : GTLRObject

/** Metadata about the locale. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47)
 *  language tag representing the locale.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's read-only membership in a group.
 */
@interface GTLRPeopleService_Membership : GTLRObject

/** The contact group membership. */
@property(nonatomic, strong, nullable) GTLRPeopleService_ContactGroupMembership *contactGroupMembership;

/** The domain membership. */
@property(nonatomic, strong, nullable) GTLRPeopleService_DomainMembership *domainMembership;

/** Metadata about the membership. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

@end


/**
 *  A request to modify an existing contact group's members. Contacts can be
 *  removed from any group but they can only be added to a user group or
 *  myContacts or starred system groups.
 */
@interface GTLRPeopleService_ModifyContactGroupMembersRequest : GTLRObject

/**
 *  The resource names of the contact people to add in the form of in the form
 *  `people/`<var>person_id</var>.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNamesToAdd;

/**
 *  The resource names of the contact people to remove in the form of in the
 *  form of `people/`<var>person_id</var>.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNamesToRemove;

@end


/**
 *  The response to a modify contact group members request.
 */
@interface GTLRPeopleService_ModifyContactGroupMembersResponse : GTLRObject

/** The contact people resource names that were not found. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *notFoundResourceNames;

@end


/**
 *  A person's name. If the name is a mononym, the family name is empty.
 */
@interface GTLRPeopleService_Name : GTLRObject

/**
 *  The read-only display name formatted according to the locale specified by
 *  the viewer's account or the `Accept-Language` HTTP header.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The read-only display name with the last name first formatted according to
 *  the locale specified by the viewer's account or the
 *  `Accept-Language` HTTP header.
 */
@property(nonatomic, copy, nullable) NSString *displayNameLastFirst;

/** The family name. */
@property(nonatomic, copy, nullable) NSString *familyName;

/** The given name. */
@property(nonatomic, copy, nullable) NSString *givenName;

/** The honorific prefixes, such as `Mrs.` or `Dr.` */
@property(nonatomic, copy, nullable) NSString *honorificPrefix;

/** The honorific suffixes, such as `Jr.` */
@property(nonatomic, copy, nullable) NSString *honorificSuffix;

/** Metadata about the name. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The middle name(s). */
@property(nonatomic, copy, nullable) NSString *middleName;

/** The family name spelled as it sounds. */
@property(nonatomic, copy, nullable) NSString *phoneticFamilyName;

/** The full name spelled as it sounds. */
@property(nonatomic, copy, nullable) NSString *phoneticFullName;

/** The given name spelled as it sounds. */
@property(nonatomic, copy, nullable) NSString *phoneticGivenName;

/** The honorific prefixes spelled as they sound. */
@property(nonatomic, copy, nullable) NSString *phoneticHonorificPrefix;

/** The honorific suffixes spelled as they sound. */
@property(nonatomic, copy, nullable) NSString *phoneticHonorificSuffix;

/** The middle name(s) spelled as they sound. */
@property(nonatomic, copy, nullable) NSString *phoneticMiddleName;

@end


/**
 *  A person's nickname.
 */
@interface GTLRPeopleService_Nickname : GTLRObject

/** Metadata about the nickname. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The type of the nickname.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_Nickname_Type_Default Generic nickname. (Value:
 *        "DEFAULT")
 *    @arg @c kGTLRPeopleService_Nickname_Type_Gplus Google+ profile nickname.
 *        (Value: "GPLUS")
 *    @arg @c kGTLRPeopleService_Nickname_Type_Initials Initials. (Value:
 *        "INITIALS")
 *    @arg @c kGTLRPeopleService_Nickname_Type_MaidenName Maiden name or birth
 *        family name. Used when the person's family name has
 *        changed as a result of marriage. (Value: "MAIDEN_NAME")
 *    @arg @c kGTLRPeopleService_Nickname_Type_OtherName A professional
 *        affiliation or other name; for example, `Dr. Smith.` (Value:
 *        "OTHER_NAME")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The nickname. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's occupation.
 */
@interface GTLRPeopleService_Occupation : GTLRObject

/** Metadata about the occupation. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The occupation; for example, `carpenter`. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's past or current organization. Overlapping date ranges are
 *  permitted.
 */
@interface GTLRPeopleService_Organization : GTLRObject

/**
 *  True if the organization is the person's current organization;
 *  false if the organization is a past organization.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *current;

/** The person's department at the organization. */
@property(nonatomic, copy, nullable) NSString *department;

/**
 *  The domain name associated with the organization; for example, `google.com`.
 */
@property(nonatomic, copy, nullable) NSString *domain;

/** The end date when the person left the organization. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Date *endDate;

/**
 *  The read-only type of the organization translated and formatted in the
 *  viewer's account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** The person's job description at the organization. */
@property(nonatomic, copy, nullable) NSString *jobDescription;

/** The location of the organization office the person works at. */
@property(nonatomic, copy, nullable) NSString *location;

/** Metadata about the organization. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The name of the organization. */
@property(nonatomic, copy, nullable) NSString *name;

/** The phonetic name of the organization. */
@property(nonatomic, copy, nullable) NSString *phoneticName;

/** The start date when the person joined the organization. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Date *startDate;

/**
 *  The symbol associated with the organization; for example, a stock ticker
 *  symbol, abbreviation, or acronym.
 */
@property(nonatomic, copy, nullable) NSString *symbol;

/** The person's job title at the organization. */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  The type of the organization. The type can be custom or one of these
 *  predefined values:
 *  * `work`
 *  * `school`
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Information about a person merged from various data sources such as the
 *  authenticated user's contacts and profile data.
 *  Most fields can have multiple items. The items in a field have no guaranteed
 *  order, but each non-empty field is guaranteed to have exactly one field with
 *  `metadata.primary` set to true.
 */
@interface GTLRPeopleService_Person : GTLRObject

/** The person's street addresses. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Address *> *addresses;

/**
 *  **DEPRECATED** (Please use `person.ageRanges` instead)**
 *  The person's read-only age range.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_Person_AgeRange_AgeRangeUnspecified
 *        Unspecified. (Value: "AGE_RANGE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleService_Person_AgeRange_EighteenToTwenty Between
 *        eighteen and twenty. (Value: "EIGHTEEN_TO_TWENTY")
 *    @arg @c kGTLRPeopleService_Person_AgeRange_LessThanEighteen Younger than
 *        eighteen. (Value: "LESS_THAN_EIGHTEEN")
 *    @arg @c kGTLRPeopleService_Person_AgeRange_TwentyOneOrOlder Twenty-one and
 *        older. (Value: "TWENTY_ONE_OR_OLDER")
 */
@property(nonatomic, copy, nullable) NSString *ageRange;

/** The person's read-only age ranges. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_AgeRangeType *> *ageRanges;

/** The person's biographies. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Biography *> *biographies;

/** The person's birthdays. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Birthday *> *birthdays;

/** The person's bragging rights. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_BraggingRights *> *braggingRights;

/** The person's read-only cover photos. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_CoverPhoto *> *coverPhotos;

/** The person's email addresses. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_EmailAddress *> *emailAddresses;

/**
 *  The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the
 *  resource. Used for web cache validation.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The person's events. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Event *> *events;

/** The person's genders. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Gender *> *genders;

/** The person's instant messaging clients. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_ImClient *> *imClients;

/** The person's interests. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Interest *> *interests;

/** The person's locale preferences. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Locale *> *locales;

/** The person's read-only group memberships. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Membership *> *memberships;

/** Read-only metadata about the person. */
@property(nonatomic, strong, nullable) GTLRPeopleService_PersonMetadata *metadata;

/** The person's names. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Name *> *names;

/** The person's nicknames. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Nickname *> *nicknames;

/** The person's occupations. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Occupation *> *occupations;

/** The person's past or current organizations. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Organization *> *organizations;

/** The person's phone numbers. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_PhoneNumber *> *phoneNumbers;

/** The person's read-only photos. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Photo *> *photos;

/** The person's relations. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Relation *> *relations;

/** The person's read-only relationship interests. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_RelationshipInterest *> *relationshipInterests;

/** The person's read-only relationship statuses. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_RelationshipStatus *> *relationshipStatuses;

/** The person's residences. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Residence *> *residences;

/**
 *  The resource name for the person, assigned by the server. An ASCII string
 *  with a max length of 27 characters, in the form of
 *  `people/`<var>person_id</var>.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/** The person's SIP addresses. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_SipAddress *> *sipAddresses;

/** The person's skills. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Skill *> *skills;

/** The person's read-only taglines. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Tagline *> *taglines;

/** The person's associated URLs. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Url *> *urls;

/** The person's user defined data. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_UserDefined *> *userDefined;

@end


/**
 *  The read-only metadata about a person.
 */
@interface GTLRPeopleService_PersonMetadata : GTLRObject

/**
 *  True if the person resource has been deleted. Populated only for
 *  [`connections.list`](/people/api/rest/v1/people.connections/list) requests
 *  that include a sync token.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleted;

/** Resource names of people linked to this resource. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *linkedPeopleResourceNames;

/**
 *  **DEPRECATED** (Please use
 *  `person.metadata.sources.profileMetadata.objectType` instead)
 *  The type of the person object.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_PersonMetadata_ObjectType_ObjectTypeUnspecified
 *        Unspecified. (Value: "OBJECT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleService_PersonMetadata_ObjectType_Page [Google+
 *        Page.](http://www.google.com/+/brands/) (Value: "PAGE")
 *    @arg @c kGTLRPeopleService_PersonMetadata_ObjectType_Person Person.
 *        (Value: "PERSON")
 */
@property(nonatomic, copy, nullable) NSString *objectType;

/**
 *  Any former resource names this person has had. Populated only for
 *  [`connections.list`](/people/api/rest/v1/people.connections/list) requests
 *  that include a sync token.
 *  The resource name may change when adding or removing fields that link a
 *  contact and profile such as a verified email, verified phone number, or
 *  profile URL.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *previousResourceNames;

/** The sources of data for the person. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Source *> *sources;

@end


/**
 *  The response for a single person
 */
@interface GTLRPeopleService_PersonResponse : GTLRObject

/**
 *  **DEPRECATED** (Please use status instead)
 *  [HTTP 1.1 status code]
 *  (http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *httpStatusCode;

/** The person. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Person *person;

/**
 *  The original requested resource name. May be different than the resource
 *  name on the returned person.
 *  The resource name can change when adding or removing fields that link a
 *  contact and profile such as a verified email, verified phone number, or a
 *  profile URL.
 */
@property(nonatomic, copy, nullable) NSString *requestedResourceName;

/** The status of the response. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Status *status;

@end


/**
 *  A person's phone number.
 */
@interface GTLRPeopleService_PhoneNumber : GTLRObject

/**
 *  The read-only canonicalized [ITU-T
 *  E.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf)
 *  form of the phone number.
 */
@property(nonatomic, copy, nullable) NSString *canonicalForm;

/**
 *  The read-only type of the phone number translated and formatted in the
 *  viewer's account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the phone number. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The type of the phone number. The type can be custom or one of these
 *  predefined values:
 *  * `home`
 *  * `work`
 *  * `mobile`
 *  * `homeFax`
 *  * `workFax`
 *  * `otherFax`
 *  * `pager`
 *  * `workMobile`
 *  * `workPager`
 *  * `main`
 *  * `googleVoice`
 *  * `other`
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The phone number. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's read-only photo. A picture shown next to the person's name to
 *  help others recognize the person.
 */
@interface GTLRPeopleService_Photo : GTLRObject

/**
 *  True if the photo is a default photo;
 *  false if the photo is a user-provided photo.
 *
 *  Remapped to 'defaultProperty' to avoid language reserved word 'default'.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultProperty;

/** Metadata about the photo. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The URL of the photo. You can change the desired size by appending a query
 *  parameter `sz=`<var>size</var> at the end of the url. Example:
 *  `https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50`
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  The read-only metadata about a profile.
 */
@interface GTLRPeopleService_ProfileMetadata : GTLRObject

/**
 *  The profile object type.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_ProfileMetadata_ObjectType_ObjectTypeUnspecified
 *        Unspecified. (Value: "OBJECT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleService_ProfileMetadata_ObjectType_Page [Google+
 *        Page.](http://www.google.com/+/brands/) (Value: "PAGE")
 *    @arg @c kGTLRPeopleService_ProfileMetadata_ObjectType_Person Person.
 *        (Value: "PERSON")
 */
@property(nonatomic, copy, nullable) NSString *objectType;

/** The user types. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *userTypes;

@end


/**
 *  A person's relation to another person.
 */
@interface GTLRPeopleService_Relation : GTLRObject

/**
 *  The type of the relation translated and formatted in the viewer's account
 *  locale or the locale specified in the Accept-Language HTTP header.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the relation. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The name of the other person this relation refers to. */
@property(nonatomic, copy, nullable) NSString *person;

/**
 *  The person's relation to the other person. The type can be custom or one of
 *  these predefined values:
 *  * `spouse`
 *  * `child`
 *  * `mother`
 *  * `father`
 *  * `parent`
 *  * `brother`
 *  * `sister`
 *  * `friend`
 *  * `relative`
 *  * `domesticPartner`
 *  * `manager`
 *  * `assistant`
 *  * `referredBy`
 *  * `partner`
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A person's read-only relationship interest .
 */
@interface GTLRPeopleService_RelationshipInterest : GTLRObject

/**
 *  The value of the relationship interest translated and formatted in the
 *  viewer's account locale or the locale specified in the Accept-Language
 *  HTTP header.
 */
@property(nonatomic, copy, nullable) NSString *formattedValue;

/** Metadata about the relationship interest. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The kind of relationship the person is looking for. The value can be custom
 *  or one of these predefined values:
 *  * `friend`
 *  * `date`
 *  * `relationship`
 *  * `networking`
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's read-only relationship status.
 */
@interface GTLRPeopleService_RelationshipStatus : GTLRObject

/**
 *  The read-only value of the relationship status translated and formatted in
 *  the viewer's account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedValue;

/** Metadata about the relationship status. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The relationship status. The value can be custom or one of these
 *  predefined values:
 *  * `single`
 *  * `inARelationship`
 *  * `engaged`
 *  * `married`
 *  * `itsComplicated`
 *  * `openRelationship`
 *  * `widowed`
 *  * `inDomesticPartnership`
 *  * `inCivilUnion`
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's past or current residence.
 */
@interface GTLRPeopleService_Residence : GTLRObject

/**
 *  True if the residence is the person's current residence;
 *  false if the residence is a past residence.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *current;

/** Metadata about the residence. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The address of the residence. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's SIP address. Session Initial Protocol addresses are used for VoIP
 *  communications to make voice or video calls over the internet.
 */
@interface GTLRPeopleService_SipAddress : GTLRObject

/**
 *  The read-only type of the SIP address translated and formatted in the
 *  viewer's account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the SIP address. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The type of the SIP address. The type can be custom or or one of these
 *  predefined values:
 *  * `home`
 *  * `work`
 *  * `mobile`
 *  * `other`
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The SIP address in the
 *  [RFC 3261 19.1](https://tools.ietf.org/html/rfc3261#section-19.1) SIP URI
 *  format.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A skill that the person has.
 */
@interface GTLRPeopleService_Skill : GTLRObject

/** Metadata about the skill. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The skill; for example, `underwater basket weaving`. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  The source of a field.
 */
@interface GTLRPeopleService_Source : GTLRObject

/**
 *  **Only populated in `person.metadata.sources`.**
 *  The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the
 *  source. Used for web cache validation.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The unique identifier within the source type generated by the server.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  **Only populated in `person.metadata.sources`.**
 *  Metadata about a source of type PROFILE.
 */
@property(nonatomic, strong, nullable) GTLRPeopleService_ProfileMetadata *profileMetadata;

/**
 *  The source type.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_Source_Type_Account [Google
 *        Account](https://accounts.google.com). (Value: "ACCOUNT")
 *    @arg @c kGTLRPeopleService_Source_Type_Contact [Google
 *        contact](https://contacts.google.com). You can view the
 *        contact at https://contact.google.com/<var>id</var> where
 *        <var>id</var>
 *        is the source id. (Value: "CONTACT")
 *    @arg @c kGTLRPeopleService_Source_Type_DomainProfile [Google Apps domain
 *        profile](https://admin.google.com). (Value: "DOMAIN_PROFILE")
 *    @arg @c kGTLRPeopleService_Source_Type_Profile [Google
 *        profile](https://profiles.google.com). You can view the
 *        profile at https://profiles.google.com/<var>id</var> where
 *        <var>id</var> is the source id. (Value: "PROFILE")
 *    @arg @c kGTLRPeopleService_Source_Type_SourceTypeUnspecified Unspecified.
 *        (Value: "SOURCE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  **Only populated in `person.metadata.sources`.**
 *  Last update timestamp of this source.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRPeopleService_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRPeopleService_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRPeopleService_Status_Details_Item : GTLRObject
@end


/**
 *  A read-only brief one-line description of the person.
 */
@interface GTLRPeopleService_Tagline : GTLRObject

/** Metadata about the tagline. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The tagline. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A request to update an existing user contact group. All updated fields will
 *  be replaced.
 */
@interface GTLRPeopleService_UpdateContactGroupRequest : GTLRObject

/** The contact group to update. */
@property(nonatomic, strong, nullable) GTLRPeopleService_ContactGroup *contactGroup;

@end


/**
 *  A person's associated URLs.
 */
@interface GTLRPeopleService_Url : GTLRObject

/**
 *  The read-only type of the URL translated and formatted in the viewer's
 *  account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the URL. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The type of the URL. The type can be custom or one of these predefined
 *  values:
 *  * `home`
 *  * `work`
 *  * `blog`
 *  * `profile`
 *  * `homePage`
 *  * `ftp`
 *  * `reservations`
 *  * `appInstallPage`: website for a Google+ application.
 *  * `other`
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The URL. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Arbitrary user data that is populated by the end users.
 */
@interface GTLRPeopleService_UserDefined : GTLRObject

/** The end user specified key of the user defined data. */
@property(nonatomic, copy, nullable) NSString *key;

/** Metadata about the user defined data. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The end user specified value of the user defined data. */
@property(nonatomic, copy, nullable) NSString *value;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
