// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Security Command Center API (securitycenter/v1)
// Description:
//   Security Command Center API provides access to temporal views of assets and
//   findings within an organization.
// Documentation:
//   https://console.cloud.google.com/apis/api/securitycenter.googleapis.com/overview

#import "GTLRSecurityCommandCenterQuery.h"

#import "GTLRSecurityCommandCenterObjects.h"

@implementation GTLRSecurityCommandCenterQuery

@dynamic fields;

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsAssetsGroup

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GroupAssetsRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/assets:group";
  GTLRSecurityCommandCenterQuery_OrganizationsAssetsGroup *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_GroupAssetsResponse class];
  query.loggingName = @"securitycenter.organizations.assets.group";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsAssetsList

@dynamic compareDuration, fieldMask, filter, orderBy, pageSize, pageToken,
         parent, readTime;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/assets";
  GTLRSecurityCommandCenterQuery_OrganizationsAssetsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_ListAssetsResponse class];
  query.loggingName = @"securitycenter.organizations.assets.list";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsAssetsRunDiscovery

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_RunAssetDiscoveryRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/assets:runDiscovery";
  GTLRSecurityCommandCenterQuery_OrganizationsAssetsRunDiscovery *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_Operation class];
  query.loggingName = @"securitycenter.organizations.assets.runDiscovery";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsAssetsUpdateSecurityMarks

@dynamic name, startTime, updateMask;

+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SecurityMarks *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecurityCommandCenterQuery_OrganizationsAssetsUpdateSecurityMarks *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_SecurityMarks class];
  query.loggingName = @"securitycenter.organizations.assets.updateSecurityMarks";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsGetOrganizationSettings

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecurityCommandCenterQuery_OrganizationsGetOrganizationSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_OrganizationSettings class];
  query.loggingName = @"securitycenter.organizations.getOrganizationSettings";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsCreate

@dynamic configId, parent;

+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_NotificationConfig *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/notificationConfigs";
  GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_NotificationConfig class];
  query.loggingName = @"securitycenter.organizations.notificationConfigs.create";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_Empty class];
  query.loggingName = @"securitycenter.organizations.notificationConfigs.delete";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_NotificationConfig class];
  query.loggingName = @"securitycenter.organizations.notificationConfigs.get";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/notificationConfigs";
  GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_ListNotificationConfigsResponse class];
  query.loggingName = @"securitycenter.organizations.notificationConfigs.list";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_NotificationConfig *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_NotificationConfig class];
  query.loggingName = @"securitycenter.organizations.notificationConfigs.patch";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRSecurityCommandCenterQuery_OrganizationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_Empty class];
  query.loggingName = @"securitycenter.organizations.operations.cancel";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecurityCommandCenterQuery_OrganizationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_Empty class];
  query.loggingName = @"securitycenter.organizations.operations.delete";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecurityCommandCenterQuery_OrganizationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_Operation class];
  query.loggingName = @"securitycenter.organizations.operations.get";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecurityCommandCenterQuery_OrganizationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_ListOperationsResponse class];
  query.loggingName = @"securitycenter.organizations.operations.list";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsSourcesCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_Source *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/sources";
  GTLRSecurityCommandCenterQuery_OrganizationsSourcesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_Source class];
  query.loggingName = @"securitycenter.organizations.sources.create";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsCreate

@dynamic findingId, parent;

+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_Finding *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/findings";
  GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_Finding class];
  query.loggingName = @"securitycenter.organizations.sources.findings.create";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsGroup

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GroupFindingsRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/findings:group";
  GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsGroup *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_GroupFindingsResponse class];
  query.loggingName = @"securitycenter.organizations.sources.findings.group";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsList

@dynamic compareDuration, fieldMask, filter, orderBy, pageSize, pageToken,
         parent, readTime;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/findings";
  GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_ListFindingsResponse class];
  query.loggingName = @"securitycenter.organizations.sources.findings.list";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_Finding *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_Finding class];
  query.loggingName = @"securitycenter.organizations.sources.findings.patch";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsSetState

@dynamic name;

+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SetFindingStateRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:setState";
  GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsSetState *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_Finding class];
  query.loggingName = @"securitycenter.organizations.sources.findings.setState";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsUpdateSecurityMarks

@dynamic name, startTime, updateMask;

+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SecurityMarks *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsUpdateSecurityMarks *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_SecurityMarks class];
  query.loggingName = @"securitycenter.organizations.sources.findings.updateSecurityMarks";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsSourcesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecurityCommandCenterQuery_OrganizationsSourcesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_Source class];
  query.loggingName = @"securitycenter.organizations.sources.get";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsSourcesGetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRSecurityCommandCenterQuery_OrganizationsSourcesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_Policy class];
  query.loggingName = @"securitycenter.organizations.sources.getIamPolicy";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsSourcesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/sources";
  GTLRSecurityCommandCenterQuery_OrganizationsSourcesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_ListSourcesResponse class];
  query.loggingName = @"securitycenter.organizations.sources.list";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsSourcesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_Source *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecurityCommandCenterQuery_OrganizationsSourcesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_Source class];
  query.loggingName = @"securitycenter.organizations.sources.patch";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsSourcesSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRSecurityCommandCenterQuery_OrganizationsSourcesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_Policy class];
  query.loggingName = @"securitycenter.organizations.sources.setIamPolicy";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsSourcesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRSecurityCommandCenterQuery_OrganizationsSourcesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_TestIamPermissionsResponse class];
  query.loggingName = @"securitycenter.organizations.sources.testIamPermissions";
  return query;
}

@end

@implementation GTLRSecurityCommandCenterQuery_OrganizationsUpdateOrganizationSettings

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_OrganizationSettings *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecurityCommandCenterQuery_OrganizationsUpdateOrganizationSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecurityCommandCenter_OrganizationSettings class];
  query.loggingName = @"securitycenter.organizations.updateOrganizationSettings";
  return query;
}

@end
