// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Security Command Center API (securitycenter/v1)
// Description:
//   Cloud Security Command Center API provides access to temporal views of
//   assets and findings within an organization.
// Documentation:
//   https://console.cloud.google.com/apis/api/securitycenter.googleapis.com/overview

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRSecurityCommandCenter_Asset;
@class GTLRSecurityCommandCenter_Asset_ResourceProperties;
@class GTLRSecurityCommandCenter_AssetDiscoveryConfig;
@class GTLRSecurityCommandCenter_AuditConfig;
@class GTLRSecurityCommandCenter_AuditLogConfig;
@class GTLRSecurityCommandCenter_Binding;
@class GTLRSecurityCommandCenter_Expr;
@class GTLRSecurityCommandCenter_Finding;
@class GTLRSecurityCommandCenter_Finding_SourceProperties;
@class GTLRSecurityCommandCenter_GroupResult;
@class GTLRSecurityCommandCenter_GroupResult_Properties;
@class GTLRSecurityCommandCenter_IamPolicy;
@class GTLRSecurityCommandCenter_ListAssetsResult;
@class GTLRSecurityCommandCenter_ListFindingsResult;
@class GTLRSecurityCommandCenter_Operation;
@class GTLRSecurityCommandCenter_Operation_Metadata;
@class GTLRSecurityCommandCenter_Operation_Response;
@class GTLRSecurityCommandCenter_Policy;
@class GTLRSecurityCommandCenter_SecurityCenterProperties;
@class GTLRSecurityCommandCenter_SecurityMarks;
@class GTLRSecurityCommandCenter_SecurityMarks_Marks;
@class GTLRSecurityCommandCenter_Source;
@class GTLRSecurityCommandCenter_Status;
@class GTLRSecurityCommandCenter_Status_Details_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRSecurityCommandCenter_AssetDiscoveryConfig.inclusionMode

/**
 *  Asset Discovery will ignore all resources under the projects specified.
 *  All other resources will be retrieved.
 *
 *  Value: "EXCLUDE"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_AssetDiscoveryConfig_InclusionMode_Exclude;
/**
 *  Asset Discovery will capture only the resources within the projects
 *  specified. All other resources will be ignored.
 *
 *  Value: "INCLUDE_ONLY"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_AssetDiscoveryConfig_InclusionMode_IncludeOnly;
/**
 *  Unspecified. Setting the mode with this value will disable
 *  inclusion/exclusion filtering for Asset Discovery.
 *
 *  Value: "INCLUSION_MODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_AssetDiscoveryConfig_InclusionMode_InclusionModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSecurityCommandCenter_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSecurityCommandCenter_Finding.state

/**
 *  The finding requires attention and has not been addressed yet.
 *
 *  Value: "ACTIVE"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_Finding_State_Active;
/**
 *  The finding has been fixed, triaged as a non-issue or otherwise addressed
 *  and is no longer active.
 *
 *  Value: "INACTIVE"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_Finding_State_Inactive;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_Finding_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRSecurityCommandCenter_ListAssetsResult.stateChange

/**
 *  Asset was present at both point(s) in time.
 *
 *  Value: "ACTIVE"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_ListAssetsResult_StateChange_Active;
/**
 *  Asset was added between the points in time.
 *
 *  Value: "ADDED"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_ListAssetsResult_StateChange_Added;
/**
 *  Asset was removed between the points in time.
 *
 *  Value: "REMOVED"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_ListAssetsResult_StateChange_Removed;
/**
 *  State change is unused, this is the canonical default for this enum.
 *
 *  Value: "UNUSED"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_ListAssetsResult_StateChange_Unused;

// ----------------------------------------------------------------------------
// GTLRSecurityCommandCenter_ListFindingsResult.stateChange

/**
 *  The finding was created between the points in time.
 *
 *  Value: "ADDED"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_ListFindingsResult_StateChange_Added;
/**
 *  The finding has changed state in some way between the points in time
 *  and existed at both points.
 *
 *  Value: "CHANGED"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_ListFindingsResult_StateChange_Changed;
/**
 *  The finding at timestamp does not match the filter specified, but it
 *  did at timestamp - compare_duration.
 *
 *  Value: "REMOVED"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_ListFindingsResult_StateChange_Removed;
/**
 *  The finding has not changed state between the points in time and
 *  existed at both points.
 *
 *  Value: "UNCHANGED"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_ListFindingsResult_StateChange_Unchanged;
/**
 *  State change is unused, this is the canonical default for this enum.
 *
 *  Value: "UNUSED"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_ListFindingsResult_StateChange_Unused;

// ----------------------------------------------------------------------------
// GTLRSecurityCommandCenter_SetFindingStateRequest.state

/**
 *  The finding requires attention and has not been addressed yet.
 *
 *  Value: "ACTIVE"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_SetFindingStateRequest_State_Active;
/**
 *  The finding has been fixed, triaged as a non-issue or otherwise addressed
 *  and is no longer active.
 *
 *  Value: "INACTIVE"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_SetFindingStateRequest_State_Inactive;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRSecurityCommandCenter_SetFindingStateRequest_State_StateUnspecified;

/**
 *  Cloud Security Command Center's (Cloud SCC) representation of a Google Cloud
 *  Platform (GCP) resource.
 *  The Asset is a Cloud SCC resource that captures information about a single
 *  GCP resource. All modifications to an Asset are only within the context of
 *  Cloud SCC and don't affect the referenced GCP resource.
 */
@interface GTLRSecurityCommandCenter_Asset : GTLRObject

/** The time at which the asset was created in Cloud SCC. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  IAM Policy information associated with the GCP resource described by the
 *  Cloud SCC asset. This information is managed and defined by the GCP
 *  resource and cannot be modified by the user.
 */
@property(nonatomic, strong, nullable) GTLRSecurityCommandCenter_IamPolicy *iamPolicy;

/**
 *  The relative resource name of this asset. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/123/assets/456".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Resource managed properties. These properties are managed and defined by
 *  the GCP resource and cannot be modified by the user.
 */
@property(nonatomic, strong, nullable) GTLRSecurityCommandCenter_Asset_ResourceProperties *resourceProperties;

/**
 *  Cloud SCC managed properties. These properties are managed by
 *  Cloud SCC and cannot be modified by the user.
 */
@property(nonatomic, strong, nullable) GTLRSecurityCommandCenter_SecurityCenterProperties *securityCenterProperties;

/**
 *  User specified security marks. These marks are entirely managed by the user
 *  and come from the SecurityMarks resource that belongs to the asset.
 */
@property(nonatomic, strong, nullable) GTLRSecurityCommandCenter_SecurityMarks *securityMarks;

/**
 *  The time at which the asset was last updated, added, or deleted in Cloud
 *  SCC.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Resource managed properties. These properties are managed and defined by
 *  the GCP resource and cannot be modified by the user.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRSecurityCommandCenter_Asset_ResourceProperties : GTLRObject
@end


/**
 *  The configuration used for Asset Discovery runs.
 */
@interface GTLRSecurityCommandCenter_AssetDiscoveryConfig : GTLRObject

/**
 *  The mode to use for filtering asset discovery.
 *
 *  Likely values:
 *    @arg @c kGTLRSecurityCommandCenter_AssetDiscoveryConfig_InclusionMode_Exclude
 *        Asset Discovery will ignore all resources under the projects
 *        specified.
 *        All other resources will be retrieved. (Value: "EXCLUDE")
 *    @arg @c kGTLRSecurityCommandCenter_AssetDiscoveryConfig_InclusionMode_IncludeOnly
 *        Asset Discovery will capture only the resources within the projects
 *        specified. All other resources will be ignored. (Value:
 *        "INCLUDE_ONLY")
 *    @arg @c kGTLRSecurityCommandCenter_AssetDiscoveryConfig_InclusionMode_InclusionModeUnspecified
 *        Unspecified. Setting the mode with this value will disable
 *        inclusion/exclusion filtering for Asset Discovery. (Value:
 *        "INCLUSION_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *inclusionMode;

/** The project ids to use for filtering asset discovery. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *projectIds;

@end


/**
 *  Specifies the audit configuration for a service.
 *  The configuration determines which permission types are logged, and what
 *  identities, if any, are exempted from logging.
 *  An AuditConfig must have one or more AuditLogConfigs.
 *  If there are AuditConfigs for both `allServices` and a specific service,
 *  the union of the two AuditConfigs is used for that service: the log_types
 *  specified in each AuditConfig are enabled, and the exempted_members in each
 *  AuditLogConfig are exempted.
 *  Example Policy with multiple AuditConfigs:
 *  {
 *  "audit_configs": [
 *  {
 *  "service": "allServices"
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  "exempted_members": [
 *  "user:foo\@gmail.com"
 *  ]
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  },
 *  {
 *  "log_type": "ADMIN_READ",
 *  }
 *  ]
 *  },
 *  {
 *  "service": "fooservice.googleapis.com"
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  "exempted_members": [
 *  "user:bar\@gmail.com"
 *  ]
 *  }
 *  ]
 *  }
 *  ]
 *  }
 *  For fooservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts foo\@gmail.com from DATA_READ logging, and
 *  bar\@gmail.com from DATA_WRITE logging.
 */
@interface GTLRSecurityCommandCenter_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRSecurityCommandCenter_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging.
 *  For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
 *  `allServices` is a special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions.
 *  Example:
 *  {
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  "exempted_members": [
 *  "user:foo\@gmail.com"
 *  ]
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  }
 *  ]
 *  }
 *  This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
 *  foo\@gmail.com from DATA_READ logging.
 */
@interface GTLRSecurityCommandCenter_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission.
 *  Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRSecurityCommandCenter_AuditLogConfig_LogType_AdminRead Admin
 *        reads. Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRSecurityCommandCenter_AuditLogConfig_LogType_DataRead Data
 *        reads. Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRSecurityCommandCenter_AuditLogConfig_LogType_DataWrite Data
 *        writes. Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRSecurityCommandCenter_AuditLogConfig_LogType_LogTypeUnspecified
 *        Default case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members` with a `role`.
 */
@interface GTLRSecurityCommandCenter_Binding : GTLRObject

/**
 *  The condition that is associated with this binding.
 *  NOTE: An unsatisfied condition will not allow user access via current
 *  binding. Different bindings, including their conditions, are examined
 *  independently.
 */
@property(nonatomic, strong, nullable) GTLRSecurityCommandCenter_Expr *condition;

/**
 *  Specifies the identities requesting access for a Cloud Platform resource.
 *  `members` can have the following values:
 *  * `allUsers`: A special identifier that represents anyone who is
 *  on the internet; with or without a Google account.
 *  * `allAuthenticatedUsers`: A special identifier that represents anyone
 *  who is authenticated with a Google account or a service account.
 *  * `user:{emailid}`: An email address that represents a specific Google
 *  account. For example, `alice\@gmail.com` .
 *  * `serviceAccount:{emailid}`: An email address that represents a service
 *  account. For example, `my-other-app\@appspot.gserviceaccount.com`.
 *  * `group:{emailid}`: An email address that represents a Google group.
 *  For example, `admins\@example.com`.
 *  * `domain:{domain}`: The G Suite domain (primary) that represents all the
 *  users of that domain. For example, `google.com` or `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to `members`.
 *  For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRSecurityCommandCenter_Empty : GTLRObject
@end


/**
 *  Represents an expression text. Example:
 *  title: "User account presence"
 *  description: "Determines whether the request has a user account"
 *  expression: "size(request.user) > 0"
 */
@interface GTLRSecurityCommandCenter_Expr : GTLRObject

/**
 *  An optional description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in
 *  Common Expression Language syntax.
 *  The application context of the containing message determines which
 *  well-known feature set of CEL is supported.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  An optional string indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  An optional title for the expression, i.e. a short string describing
 *  its purpose. This can be used e.g. in UIs which allow to enter the
 *  expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Cloud Security Command Center (Cloud SCC) finding.
 *  A finding is a record of assessment data (security, risk, health or privacy)
 *  ingested into Cloud SCC for presentation, notification, analysis,
 *  policy testing, and enforcement. For example, an XSS vulnerability in an
 *  App Engine application is a finding.
 */
@interface GTLRSecurityCommandCenter_Finding : GTLRObject

/**
 *  The additional taxonomy group within findings from a given source.
 *  This field is immutable after creation time.
 *  Example: "XSS_FLASH_INJECTION"
 */
@property(nonatomic, copy, nullable) NSString *category;

/** The time at which the finding was created in Cloud SCC. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The time at which the event took place. For example, if the finding
 *  represents an open firewall it would capture the time the open firewall was
 *  detected.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *eventTime;

/**
 *  The URI that, if available, points to a web page outside of Cloud SCC
 *  where additional information about the finding can be found. This field is
 *  guaranteed to be either empty or a well formed URL.
 */
@property(nonatomic, copy, nullable) NSString *externalUri;

/**
 *  The relative resource name of this finding. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/123/sources/456/findings/789"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The relative resource name of the source the finding belongs to. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  This field is immutable after creation time.
 *  For example:
 *  "organizations/123/sources/456"
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The full resource name of the Google Cloud Platform (GCP) resource this
 *  finding is for. See:
 *  https://cloud.google.com/apis/design/resource_names#full_resource_name
 *  This field is immutable after creation time.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Output only. User specified security marks. These marks are entirely
 *  managed by the user and come from the SecurityMarks resource that belongs
 *  to the finding.
 */
@property(nonatomic, strong, nullable) GTLRSecurityCommandCenter_SecurityMarks *securityMarks;

/**
 *  Source specific properties. These properties are managed by the source
 *  that writes the finding. The key names in the source_properties map must be
 *  between 1 and 255 characters, and must start with a letter and contain
 *  alphanumeric characters or underscores only.
 */
@property(nonatomic, strong, nullable) GTLRSecurityCommandCenter_Finding_SourceProperties *sourceProperties;

/**
 *  The state of the finding.
 *
 *  Likely values:
 *    @arg @c kGTLRSecurityCommandCenter_Finding_State_Active The finding
 *        requires attention and has not been addressed yet. (Value: "ACTIVE")
 *    @arg @c kGTLRSecurityCommandCenter_Finding_State_Inactive The finding has
 *        been fixed, triaged as a non-issue or otherwise addressed
 *        and is no longer active. (Value: "INACTIVE")
 *    @arg @c kGTLRSecurityCommandCenter_Finding_State_StateUnspecified
 *        Unspecified state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Source specific properties. These properties are managed by the source
 *  that writes the finding. The key names in the source_properties map must be
 *  between 1 and 255 characters, and must start with a letter and contain
 *  alphanumeric characters or underscores only.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRSecurityCommandCenter_Finding_SourceProperties : GTLRObject
@end


/**
 *  Request message for `GetIamPolicy` method.
 */
@interface GTLRSecurityCommandCenter_GetIamPolicyRequest : GTLRObject
@end


/**
 *  Request message for grouping by assets.
 */
@interface GTLRSecurityCommandCenter_GroupAssetsRequest : GTLRObject

/**
 *  When compare_duration is set, the GroupResult's "state_change" property is
 *  updated to indicate whether the asset was added, removed, or remained
 *  present during the compare_duration period of time that precedes the
 *  read_time. This is the time between (read_time - compare_duration) and
 *  read_time.
 *  The state change value is derived based on the presence of the asset at the
 *  two points in time. Intermediate state changes between the two times don't
 *  affect the result. For example, the results aren't affected if the asset is
 *  removed and re-created again.
 *  Possible "state_change" values when compare_duration is specified:
 *  * "ADDED": indicates that the asset was not present at the start of
 *  compare_duration, but present at reference_time.
 *  * "REMOVED": indicates that the asset was present at the start of
 *  compare_duration, but not present at reference_time.
 *  * "ACTIVE": indicates that the asset was present at both the
 *  start and the end of the time period defined by
 *  compare_duration and reference_time.
 *  If compare_duration is not specified, then the only possible state_change
 *  is "UNUSED", which will be the state_change set for all assets present at
 *  read_time.
 *  If this field is set then `state_change` must be a specified field in
 *  `group_by`.
 */
@property(nonatomic, strong, nullable) GTLRDuration *compareDuration;

/**
 *  Expression that defines the filter to apply across assets.
 *  The expression is a list of zero or more restrictions combined via logical
 *  operators `AND` and `OR`.
 *  Parentheses are supported, and `OR` has higher precedence than `AND`.
 *  Restrictions have the form `<field> <operator> <value>` and may have a `-`
 *  character in front of them to indicate negation. The fields map to those
 *  defined in the Asset resource. Examples include:
 *  * name
 *  * security_center_properties.resource_name
 *  * resource_properties.a_property
 *  * security_marks.marks.marka
 *  The supported operators are:
 *  * `=` for all value types.
 *  * `>`, `<`, `>=`, `<=` for integer values.
 *  * `:`, meaning substring matching, for strings.
 *  The supported value types are:
 *  * string literals in quotes.
 *  * integer literals without quotes.
 *  * boolean literals `true` and `false` without quotes.
 *  The following field and operator combinations are supported:
 *  name | `=`
 *  update_time | `>`, `<`, `>=`, `<=`
 *  iam_policy.policy_blob | '=', ':'
 *  resource_properties | '=', ':', `>`, `<`, `>=`, `<=`
 *  security_marks | '=', ':'
 *  security_center_properties.resource_name | '=', ':'
 *  security_center_properties.resource_type | '=', ':'
 *  security_center_properties.resource_parent | '=', ':'
 *  security_center_properties.resource_project | '=', ':'
 *  security_center_properties.resource_owners | '=', ':'
 *  For example, `resource_properties.size = 100` is a valid filter string.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Expression that defines what assets fields to use for grouping. The string
 *  value should follow SQL syntax: comma separated list of fields. For
 *  example:
 *  "security_center_properties.resource_project,security_center_properties.project".
 *  The following fields are supported when compare_duration is not set:
 *  * security_center_properties.resource_project
 *  * security_center_properties.resource_type
 *  * security_center_properties.resource_parent
 *  The following fields are supported when compare_duration is set:
 *  * security_center_properties.resource_type
 */
@property(nonatomic, copy, nullable) NSString *groupBy;

/**
 *  The maximum number of results to return in a single response. Default is
 *  10, minimum is 1, maximum is 1000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  The value returned by the last `GroupAssetsResponse`; indicates
 *  that this is a continuation of a prior `GroupAssets` call, and that the
 *  system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Time used as a reference point when filtering assets. The filter is limited
 *  to assets existing at the supplied time and their values are those at that
 *  specific time. Absence of this field will default to the API's version of
 *  NOW.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

@end


/**
 *  Response message for grouping by assets.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "groupByResults" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRSecurityCommandCenter_GroupAssetsResponse : GTLRCollectionObject

/**
 *  Group results. There exists an element for each existing unique
 *  combination of property/values. The element contains a count for the number
 *  of times those specific property/values appear.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSecurityCommandCenter_GroupResult *> *groupByResults;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Time used for executing the groupBy request. */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  The total number of results matching the query.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Request message for grouping by findings.
 */
@interface GTLRSecurityCommandCenter_GroupFindingsRequest : GTLRObject

/**
 *  When compare_duration is set, the GroupResult's "state_change" attribute is
 *  updated to indicate whether the finding had its state changed, the
 *  finding's state remained unchanged, or if the finding was added during the
 *  compare_duration period of time that precedes the read_time. This is the
 *  time between (read_time - compare_duration) and read_time.
 *  The state_change value is derived based on the presence and state of the
 *  finding at the two points in time. Intermediate state changes between the
 *  two times don't affect the result. For example, the results aren't affected
 *  if the finding is made inactive and then active again.
 *  Possible "state_change" values when compare_duration is specified:
 *  * "CHANGED": indicates that the finding was present at the start of
 *  compare_duration, but changed its state at read_time.
 *  * "UNCHANGED": indicates that the finding was present at the start of
 *  compare_duration and did not change state at read_time.
 *  * "ADDED": indicates that the finding was not present at the start
 *  of compare_duration, but was present at read_time.
 *  If compare_duration is not specified, then the only possible state_change
 *  is "UNUSED", which will be the state_change set for all findings present
 *  at read_time.
 *  If this field is set then `state_change` must be a specified field in
 *  `group_by`.
 */
@property(nonatomic, strong, nullable) GTLRDuration *compareDuration;

/**
 *  Expression that defines the filter to apply across findings.
 *  The expression is a list of one or more restrictions combined via logical
 *  operators `AND` and `OR`.
 *  Parentheses are supported, and `OR` has higher precedence than `AND`.
 *  Restrictions have the form `<field> <operator> <value>` and may have a `-`
 *  character in front of them to indicate negation. Examples include:
 *  * name
 *  * source_properties.a_property
 *  * security_marks.marks.marka
 *  The supported operators are:
 *  * `=` for all value types.
 *  * `>`, `<`, `>=`, `<=` for integer values.
 *  * `:`, meaning substring matching, for strings.
 *  The supported value types are:
 *  * string literals in quotes.
 *  * integer literals without quotes.
 *  * boolean literals `true` and `false` without quotes.
 *  The following field and operator combinations are supported:
 *  name | `=`
 *  parent | '=', ':'
 *  resource_name | '=', ':'
 *  state | '=', ':'
 *  category | '=', ':'
 *  external_uri | '=', ':'
 *  event_time | `>`, `<`, `>=`, `<=`
 *  security_marks | '=', ':'
 *  source_properties | '=', ':', `>`, `<`, `>=`, `<=`
 *  For example, `source_properties.size = 100` is a valid filter string.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Expression that defines what assets fields to use for grouping (including
 *  `state_change`). The string value should follow SQL syntax: comma separated
 *  list of fields. For example: "parent,resource_name".
 *  The following fields are supported:
 *  * resource_name
 *  * category
 *  * state
 *  * parent
 *  The following fields are supported when compare_duration is set:
 *  * state_change
 */
@property(nonatomic, copy, nullable) NSString *groupBy;

/**
 *  The maximum number of results to return in a single response. Default is
 *  10, minimum is 1, maximum is 1000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  The value returned by the last `GroupFindingsResponse`; indicates
 *  that this is a continuation of a prior `GroupFindings` call, and
 *  that the system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Time used as a reference point when filtering findings. The filter is
 *  limited to findings existing at the supplied time and their values are
 *  those at that specific time. Absence of this field will default to the
 *  API's version of NOW.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

@end


/**
 *  Response message for group by findings.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "groupByResults" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRSecurityCommandCenter_GroupFindingsResponse : GTLRCollectionObject

/**
 *  Group results. There exists an element for each existing unique
 *  combination of property/values. The element contains a count for the number
 *  of times those specific property/values appear.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSecurityCommandCenter_GroupResult *> *groupByResults;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Time used for executing the groupBy request. */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  The total number of results matching the query.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Result containing the properties and count of a groupBy request.
 */
@interface GTLRSecurityCommandCenter_GroupResult : GTLRObject

/**
 *  Total count of resources for the given properties.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/** Properties matching the groupBy fields in the request. */
@property(nonatomic, strong, nullable) GTLRSecurityCommandCenter_GroupResult_Properties *properties;

@end


/**
 *  Properties matching the groupBy fields in the request.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRSecurityCommandCenter_GroupResult_Properties : GTLRObject
@end


/**
 *  IAM Policy information associated with the GCP resource described by the
 *  Cloud SCC asset. This information is managed and defined by the GCP
 *  resource and cannot be modified by the user.
 */
@interface GTLRSecurityCommandCenter_IamPolicy : GTLRObject

/**
 *  The JSON representation of the Policy associated with the asset.
 *  See https://cloud.google.com/iam/reference/rest/v1/Policy for format
 *  details.
 */
@property(nonatomic, copy, nullable) NSString *policyBlob;

@end


/**
 *  Response message for listing assets.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "listAssetsResults" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRSecurityCommandCenter_ListAssetsResponse : GTLRCollectionObject

/**
 *  Assets matching the list request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSecurityCommandCenter_ListAssetsResult *> *listAssetsResults;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Time used for executing the list request. */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  The total number of assets matching the query.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Result containing the Asset and its State.
 */
@interface GTLRSecurityCommandCenter_ListAssetsResult : GTLRObject

/** Asset matching the search request. */
@property(nonatomic, strong, nullable) GTLRSecurityCommandCenter_Asset *asset;

/**
 *  State change of the asset between the points in time.
 *
 *  Likely values:
 *    @arg @c kGTLRSecurityCommandCenter_ListAssetsResult_StateChange_Active
 *        Asset was present at both point(s) in time. (Value: "ACTIVE")
 *    @arg @c kGTLRSecurityCommandCenter_ListAssetsResult_StateChange_Added
 *        Asset was added between the points in time. (Value: "ADDED")
 *    @arg @c kGTLRSecurityCommandCenter_ListAssetsResult_StateChange_Removed
 *        Asset was removed between the points in time. (Value: "REMOVED")
 *    @arg @c kGTLRSecurityCommandCenter_ListAssetsResult_StateChange_Unused
 *        State change is unused, this is the canonical default for this enum.
 *        (Value: "UNUSED")
 */
@property(nonatomic, copy, nullable) NSString *stateChange;

@end


/**
 *  Response message for listing findings.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "listFindingsResults" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRSecurityCommandCenter_ListFindingsResponse : GTLRCollectionObject

/**
 *  Findings matching the list request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSecurityCommandCenter_ListFindingsResult *> *listFindingsResults;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Time used for executing the list request. */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  The total number of findings matching the query.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Result containing the Finding and its StateChange.
 */
@interface GTLRSecurityCommandCenter_ListFindingsResult : GTLRObject

/** Finding matching the search request. */
@property(nonatomic, strong, nullable) GTLRSecurityCommandCenter_Finding *finding;

/**
 *  State change of the finding between the points in time.
 *
 *  Likely values:
 *    @arg @c kGTLRSecurityCommandCenter_ListFindingsResult_StateChange_Added
 *        The finding was created between the points in time. (Value: "ADDED")
 *    @arg @c kGTLRSecurityCommandCenter_ListFindingsResult_StateChange_Changed
 *        The finding has changed state in some way between the points in time
 *        and existed at both points. (Value: "CHANGED")
 *    @arg @c kGTLRSecurityCommandCenter_ListFindingsResult_StateChange_Removed
 *        The finding at timestamp does not match the filter specified, but it
 *        did at timestamp - compare_duration. (Value: "REMOVED")
 *    @arg @c kGTLRSecurityCommandCenter_ListFindingsResult_StateChange_Unchanged
 *        The finding has not changed state between the points in time and
 *        existed at both points. (Value: "UNCHANGED")
 *    @arg @c kGTLRSecurityCommandCenter_ListFindingsResult_StateChange_Unused
 *        State change is unused, this is the canonical default for this enum.
 *        (Value: "UNUSED")
 */
@property(nonatomic, copy, nullable) NSString *stateChange;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSecurityCommandCenter_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSecurityCommandCenter_Operation *> *operations;

@end


/**
 *  Response message for listing sources.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "sources" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSecurityCommandCenter_ListSourcesResponse : GTLRCollectionObject

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Sources belonging to the requested parent.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSecurityCommandCenter_Source *> *sources;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRSecurityCommandCenter_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRSecurityCommandCenter_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRSecurityCommandCenter_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the
 *  `name` should have the format of `operations/some/unique/name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRSecurityCommandCenter_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRSecurityCommandCenter_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRSecurityCommandCenter_Operation_Response : GTLRObject
@end


/**
 *  User specified settings that are attached to the Cloud Security Command
 *  Center (Cloud SCC) organization.
 */
@interface GTLRSecurityCommandCenter_OrganizationSettings : GTLRObject

/** The configuration used for Asset Discovery runs. */
@property(nonatomic, strong, nullable) GTLRSecurityCommandCenter_AssetDiscoveryConfig *assetDiscoveryConfig;

/**
 *  A flag that indicates if Asset Discovery should be enabled. If the flag is
 *  set to `true`, then discovery of assets will occur. If it is set to `false,
 *  all historical assets will remain, but discovery of future assets will not
 *  occur.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableAssetDiscovery;

/**
 *  The relative resource name of the settings. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/123/organizationSettings".
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Defines an Identity and Access Management (IAM) policy. It is used to
 *  specify access control policies for Cloud Platform resources.
 *  A `Policy` consists of a list of `bindings`. A `binding` binds a list of
 *  `members` to a `role`, where the members can be user accounts, Google
 *  groups,
 *  Google domains, and service accounts. A `role` is a named list of
 *  permissions
 *  defined by IAM.
 *  **JSON Example**
 *  {
 *  "bindings": [
 *  {
 *  "role": "roles/owner",
 *  "members": [
 *  "user:mike\@example.com",
 *  "group:admins\@example.com",
 *  "domain:google.com",
 *  "serviceAccount:my-other-app\@appspot.gserviceaccount.com"
 *  ]
 *  },
 *  {
 *  "role": "roles/viewer",
 *  "members": ["user:sean\@example.com"]
 *  }
 *  ]
 *  }
 *  **YAML Example**
 *  bindings:
 *  - members:
 *  - user:mike\@example.com
 *  - group:admins\@example.com
 *  - domain:google.com
 *  - serviceAccount:my-other-app\@appspot.gserviceaccount.com
 *  role: roles/owner
 *  - members:
 *  - user:sean\@example.com
 *  role: roles/viewer
 *  For a description of IAM and its features, see the
 *  [IAM developer's guide](https://cloud.google.com/iam/docs).
 */
@interface GTLRSecurityCommandCenter_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRSecurityCommandCenter_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members` to a `role`.
 *  `bindings` with no members will result in an error.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSecurityCommandCenter_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help
 *  prevent simultaneous updates of a policy from overwriting each other.
 *  It is strongly suggested that systems make use of the `etag` in the
 *  read-modify-write cycle to perform policy updates in order to avoid race
 *  conditions: An `etag` is returned in the response to `getIamPolicy`, and
 *  systems are expected to put that etag in the request to `setIamPolicy` to
 *  ensure that their change will be applied to the same version of the policy.
 *  If no `etag` is provided in the call to `setIamPolicy`, then the existing
 *  policy is overwritten blindly.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Deprecated.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Request message for running asset discovery for an organization.
 */
@interface GTLRSecurityCommandCenter_RunAssetDiscoveryRequest : GTLRObject
@end


/**
 *  Cloud SCC managed properties. These properties are managed by Cloud SCC and
 *  cannot be modified by the user.
 */
@interface GTLRSecurityCommandCenter_SecurityCenterProperties : GTLRObject

/**
 *  The full resource name of the GCP resource this asset
 *  represents. This field is immutable after create time. See:
 *  https://cloud.google.com/apis/design/resource_names#full_resource_name
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/** Owners of the Google Cloud resource. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceOwners;

/**
 *  The full resource name of the immediate parent of the resource. See:
 *  https://cloud.google.com/apis/design/resource_names#full_resource_name
 */
@property(nonatomic, copy, nullable) NSString *resourceParent;

/**
 *  The full resource name of the project the resource belongs to. See:
 *  https://cloud.google.com/apis/design/resource_names#full_resource_name
 */
@property(nonatomic, copy, nullable) NSString *resourceProject;

/**
 *  The type of the GCP resource. Examples include: APPLICATION,
 *  PROJECT, and ORGANIZATION. This is a case insensitive field defined by
 *  Cloud SCC and/or the producer of the resource and is immutable
 *  after create time.
 */
@property(nonatomic, copy, nullable) NSString *resourceType;

@end


/**
 *  User specified security marks that are attached to the parent Cloud Security
 *  Command Center (Cloud SCC) resource. Security marks are scoped within a
 *  Cloud
 *  SCC organization -- they can be modified and viewed by all users who have
 *  proper permissions on the organization.
 */
@interface GTLRSecurityCommandCenter_SecurityMarks : GTLRObject

/**
 *  Mutable user specified security marks belonging to the parent resource.
 *  Constraints are as follows:
 *  - Keys and values are treated as case insensitive
 *  - Keys must be between 1 - 256 characters (inclusive)
 *  - Keys must be letters, numbers, underscores, or dashes
 *  - Values have leading and trailing whitespace trimmed, remaining
 *  characters must be between 1 - 4096 characters (inclusive)
 */
@property(nonatomic, strong, nullable) GTLRSecurityCommandCenter_SecurityMarks_Marks *marks;

/**
 *  The relative resource name of the SecurityMarks. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Examples:
 *  "organizations/123/assets/456/securityMarks"
 *  "organizations/123/sources/456/findings/789/securityMarks".
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Mutable user specified security marks belonging to the parent resource.
 *  Constraints are as follows:
 *  - Keys and values are treated as case insensitive
 *  - Keys must be between 1 - 256 characters (inclusive)
 *  - Keys must be letters, numbers, underscores, or dashes
 *  - Values have leading and trailing whitespace trimmed, remaining
 *  characters must be between 1 - 4096 characters (inclusive)
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSecurityCommandCenter_SecurityMarks_Marks : GTLRObject
@end


/**
 *  Request message for updating a finding's state.
 */
@interface GTLRSecurityCommandCenter_SetFindingStateRequest : GTLRObject

/** The time at which the updated state takes effect. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The desired State of the finding.
 *
 *  Likely values:
 *    @arg @c kGTLRSecurityCommandCenter_SetFindingStateRequest_State_Active The
 *        finding requires attention and has not been addressed yet. (Value:
 *        "ACTIVE")
 *    @arg @c kGTLRSecurityCommandCenter_SetFindingStateRequest_State_Inactive
 *        The finding has been fixed, triaged as a non-issue or otherwise
 *        addressed
 *        and is no longer active. (Value: "INACTIVE")
 *    @arg @c kGTLRSecurityCommandCenter_SetFindingStateRequest_State_StateUnspecified
 *        Unspecified state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRSecurityCommandCenter_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a
 *  valid policy but certain Cloud Platform services (such as Projects)
 *  might reject them.
 */
@property(nonatomic, strong, nullable) GTLRSecurityCommandCenter_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used:
 *  paths: "bindings, etag"
 *  This field is only used by Cloud IAM.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Cloud Security Command Center's (Cloud SCC) finding source. A finding source
 *  is an entity or a mechanism that can produce a finding. A source is like a
 *  container of findings that come from the same scanner, logger, monitor, etc.
 */
@interface GTLRSecurityCommandCenter_Source : GTLRObject

/**
 *  The description of the source (max of 1024 characters).
 *  Example:
 *  "Cloud Security Scanner is a web security scanner for common
 *  vulnerabilities in App Engine applications. It can automatically
 *  scan and detect four common vulnerabilities, including cross-site-scripting
 *  (XSS), Flash injection, mixed content (HTTP in HTTPS), and
 *  outdated/insecure libraries."
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The source's display name.
 *  A source's display name must be unique amongst its siblings, for example,
 *  two sources with the same parent can't share the same display name.
 *  The display name must start and end with a letter or digit, may contain
 *  letters, digits, spaces, hyphens, and underscores, and can be no longer
 *  than 32 characters. This is captured by the regular expression:
 *  [\\p{L}\\p{N}]({\\p{L}\\p{N}_- ]{0,30}[\\p{L}\\p{N}])?.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The relative resource name of this source. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/123/sources/456"
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message, and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRSecurityCommandCenter_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSecurityCommandCenter_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRSecurityCommandCenter_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRSecurityCommandCenter_Status_Details_Item : GTLRObject
@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRSecurityCommandCenter_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as '*' or 'storage.*') are not allowed. For more
 *  information see
 *  [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRSecurityCommandCenter_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is
 *  allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
