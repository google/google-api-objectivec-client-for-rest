// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Security Command Center API (securitycenter/v1)
// Description:
//   Cloud Security Command Center API provides access to temporal views of
//   assets and findings within an organization.
// Documentation:
//   https://console.cloud.google.com/apis/api/securitycenter.googleapis.com/overview

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRSecurityCommandCenter_Finding;
@class GTLRSecurityCommandCenter_GetIamPolicyRequest;
@class GTLRSecurityCommandCenter_GroupAssetsRequest;
@class GTLRSecurityCommandCenter_GroupFindingsRequest;
@class GTLRSecurityCommandCenter_OrganizationSettings;
@class GTLRSecurityCommandCenter_RunAssetDiscoveryRequest;
@class GTLRSecurityCommandCenter_SecurityMarks;
@class GTLRSecurityCommandCenter_SetFindingStateRequest;
@class GTLRSecurityCommandCenter_SetIamPolicyRequest;
@class GTLRSecurityCommandCenter_Source;
@class GTLRSecurityCommandCenter_TestIamPermissionsRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Security Command Center query classes.
 */
@interface GTLRSecurityCommandCenterQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Filters an organization's assets and groups them by their specified
 *  properties.
 *
 *  Method: securitycenter.organizations.assets.group
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsAssetsGroup : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsAssetsGroupWithObject:parent:]

/**
 *  Name of the organization to groupBy. Its format is
 *  "organizations/[organization_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_GroupAssetsResponse.
 *
 *  Filters an organization's assets and groups them by their specified
 *  properties.
 *
 *  @param object The @c GTLRSecurityCommandCenter_GroupAssetsRequest to include
 *    in the query.
 *  @param parent Name of the organization to groupBy. Its format is
 *    "organizations/[organization_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsAssetsGroup
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GroupAssetsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists an organization's assets.
 *
 *  Method: securitycenter.organizations.assets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsAssetsList : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsAssetsListWithparent:]

/**
 *  When compare_duration is set, the ListAssetsResult's "state_change"
 *  attribute is updated to indicate whether the asset was added, removed, or
 *  remained present during the compare_duration period of time that precedes
 *  the read_time. This is the time between (read_time - compare_duration) and
 *  read_time.
 *  The state_change value is derived based on the presence of the asset at the
 *  two points in time. Intermediate state changes between the two times don't
 *  affect the result. For example, the results aren't affected if the asset is
 *  removed and re-created again.
 *  Possible "state_change" values when compare_duration is specified:
 *  * "ADDED": indicates that the asset was not present at the start of
 *  compare_duration, but present at read_time.
 *  * "REMOVED": indicates that the asset was present at the start of
 *  compare_duration, but not present at read_time.
 *  * "ACTIVE": indicates that the asset was present at both the
 *  start and the end of the time period defined by
 *  compare_duration and read_time.
 *  If compare_duration is not specified, then the only possible state_change
 *  is "UNUSED", which will be the state_change set for all assets present at
 *  read_time.
 */
@property(nonatomic, strong, nullable) GTLRDuration *compareDuration;

/**
 *  Optional.
 *  A field mask to specify the ListAssetsResult fields to be listed in the
 *  response.
 *  An empty field mask will list all fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fieldMask;

/**
 *  Expression that defines the filter to apply across assets.
 *  The expression is a list of zero or more restrictions combined via logical
 *  operators `AND` and `OR`.
 *  Parentheses are supported, and `OR` has higher precedence than `AND`.
 *  Restrictions have the form `<field> <operator> <value>` and may have a `-`
 *  character in front of them to indicate negation. The fields map to those
 *  defined in the Asset resource. Examples include:
 *  * name
 *  * security_center_properties.resource_name
 *  * resource_properties.a_property
 *  * security_marks.marks.marka
 *  The supported operators are:
 *  * `=` for all value types.
 *  * `>`, `<`, `>=`, `<=` for integer values.
 *  * `:`, meaning substring matching, for strings.
 *  The supported value types are:
 *  * string literals in quotes.
 *  * integer literals without quotes.
 *  * boolean literals `true` and `false` without quotes.
 *  The following are the allowed field and operator combinations:
 *  * name: `=`
 *  * update_time: `>`, `<`, `>=`, `<=`
 *  * iam_policy.policy_blob: `=`, `:`
 *  * resource_properties: `=`, `:`, `>`, `<`, `>=`, `<=`
 *  * security_marks: `=`, `:`
 *  * security_center_properties.resource_name: `=`, `:`
 *  * security_center_properties.resource_type: `=`, `:`
 *  * security_center_properties.resource_parent: `=`, `:`
 *  * security_center_properties.resource_project: `=`, `:`
 *  * security_center_properties.resource_owners: `=`, `:`
 *  For example, `resource_properties.size = 100` is a valid filter string.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Expression that defines what fields and order to use for sorting. The
 *  string value should follow SQL syntax: comma separated list of fields. For
 *  example: "name,resource_properties.a_property". The default sorting order
 *  is ascending. To specify descending order for a field, a suffix " desc"
 *  should be appended to the field name. For example: "name
 *  desc,resource_properties.a_property". Redundant space characters in the
 *  syntax are insignificant. "name desc,resource_properties.a_property" and "
 *  name desc , resource_properties.a_property " are equivalent.
 *  The following fields are supported:
 *  name
 *  update_time
 *  resource_properties
 *  security_marks
 *  security_center_properties.resource_name
 *  security_center_properties.resource_parent
 *  security_center_properties.resource_project
 *  security_center_properties.resource_type
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of results to return in a single response. Default is
 *  10, minimum is 1, maximum is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListAssetsResponse`; indicates
 *  that this is a continuation of a prior `ListAssets` call, and
 *  that the system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Name of the organization assets should belong to. Its format is
 *  "organizations/[organization_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Time used as a reference point when filtering assets. The filter is limited
 *  to assets existing at the supplied time and their values are those at that
 *  specific time. Absence of this field will default to the API's version of
 *  NOW.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListAssetsResponse.
 *
 *  Lists an organization's assets.
 *
 *  @param parent Name of the organization assets should belong to. Its format
 *    is
 *    "organizations/[organization_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsAssetsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Runs asset discovery. The discovery is tracked with a long-running
 *  operation.
 *  This API can only be called with limited frequency for an organization. If
 *  it is called too frequently the caller will receive a TOO_MANY_REQUESTS
 *  error.
 *
 *  Method: securitycenter.organizations.assets.runDiscovery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsAssetsRunDiscovery : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsAssetsRunDiscoveryWithObject:parent:]

/**
 *  Name of the organization to run asset discovery for. Its format is
 *  "organizations/[organization_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Operation.
 *
 *  Runs asset discovery. The discovery is tracked with a long-running
 *  operation.
 *  This API can only be called with limited frequency for an organization. If
 *  it is called too frequently the caller will receive a TOO_MANY_REQUESTS
 *  error.
 *
 *  @param object The @c GTLRSecurityCommandCenter_RunAssetDiscoveryRequest to
 *    include in the query.
 *  @param parent Name of the organization to run asset discovery for. Its
 *    format is
 *    "organizations/[organization_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsAssetsRunDiscovery
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_RunAssetDiscoveryRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Updates security marks.
 *
 *  Method: securitycenter.organizations.assets.updateSecurityMarks
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsAssetsUpdateSecurityMarks : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsAssetsUpdateSecurityMarksWithObject:name:]

/**
 *  The relative resource name of the SecurityMarks. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Examples:
 *  "organizations/123/assets/456/securityMarks"
 *  "organizations/123/sources/456/findings/789/securityMarks".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The time at which the updated SecurityMarks take effect.
 *  If not set uses current server time. Updates will be applied to the
 *  SecurityMarks that are active immediately preceding this time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The FieldMask to use when updating the security marks resource.
 *  The field mask must not contain duplicate fields.
 *  If empty or set to "marks", all marks will be replaced. Individual
 *  marks can be updated using "marks.<mark_key>".
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_SecurityMarks.
 *
 *  Updates security marks.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SecurityMarks to include in
 *    the query.
 *  @param name The relative resource name of the SecurityMarks. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Examples:
 *    "organizations/123/assets/456/securityMarks"
 *    "organizations/123/sources/456/findings/789/securityMarks".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsAssetsUpdateSecurityMarks
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SecurityMarks *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the settings for an organization.
 *
 *  Method: securitycenter.organizations.getOrganizationSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsGetOrganizationSettings : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsGetOrganizationSettingsWithname:]

/**
 *  Name of the organization to get organization settings for. Its format is
 *  "organizations/[organization_id]/organizationSettings".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_OrganizationSettings.
 *
 *  Gets the settings for an organization.
 *
 *  @param name Name of the organization to get organization settings for. Its
 *    format is
 *    "organizations/[organization_id]/organizationSettings".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsGetOrganizationSettings
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not
 *  guaranteed. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use
 *  Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation,
 *  the operation is not deleted; instead, it becomes an operation with
 *  an Operation.error value with a google.rpc.Status.code of 1,
 *  corresponding to `Code.CANCELLED`.
 *
 *  Method: securitycenter.organizations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsOperationsCancel : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsOperationsCancelWithname:]

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not
 *  guaranteed. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use
 *  Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation,
 *  the operation is not deleted; instead, it becomes an operation with
 *  an Operation.error value with a google.rpc.Status.code of 1,
 *  corresponding to `Code.CANCELLED`.
 *
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsOperationsCancel
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: securitycenter.organizations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsOperationsDelete : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsOperationsDeleteWithname:]

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: securitycenter.organizations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsOperationsGet : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *  NOTE: the `name` binding allows API services to override the binding
 *  to use different resource name schemes, such as `users/ * /operations`. To
 *  override the binding, API services can add a binding such as
 *  `"/v1/{name=users/ *}/operations"` to their service configuration.
 *  For backwards compatibility, the default name includes the operations
 *  collection id, however overriding users must ensure the name binding
 *  is the parent resource, without the operations collection id.
 *
 *  Method: securitycenter.organizations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsOperationsList : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsOperationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *  NOTE: the `name` binding allows API services to override the binding
 *  to use different resource name schemes, such as `users/ * /operations`. To
 *  override the binding, API services can add a binding such as
 *  `"/v1/{name=users/ *}/operations"` to their service configuration.
 *  For backwards compatibility, the default name includes the operations
 *  collection id, however overriding users must ensure the name binding
 *  is the parent resource, without the operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a source.
 *
 *  Method: securitycenter.organizations.sources.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesCreate : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsSourcesCreateWithObject:parent:]

/**
 *  Resource name of the new source's parent. Its format should be
 *  "organizations/[organization_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Source.
 *
 *  Creates a source.
 *
 *  @param object The @c GTLRSecurityCommandCenter_Source to include in the
 *    query.
 *  @param parent Resource name of the new source's parent. Its format should be
 *    "organizations/[organization_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesCreate
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_Source *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a finding. The corresponding source must exist for finding creation
 *  to succeed.
 *
 *  Method: securitycenter.organizations.sources.findings.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsCreate : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsSourcesFindingsCreateWithObject:parent:]

/**
 *  Unique identifier provided by the client within the parent scope.
 *  It must be alphanumeric and less than or equal to 32 characters and
 *  greater than 0 characters in length.
 */
@property(nonatomic, copy, nullable) NSString *findingId;

/**
 *  Resource name of the new finding's parent. Its format should be
 *  "organizations/[organization_id]/sources/[source_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Finding.
 *
 *  Creates a finding. The corresponding source must exist for finding creation
 *  to succeed.
 *
 *  @param object The @c GTLRSecurityCommandCenter_Finding to include in the
 *    query.
 *  @param parent Resource name of the new finding's parent. Its format should
 *    be
 *    "organizations/[organization_id]/sources/[source_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsCreate
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_Finding *)object
                         parent:(NSString *)parent;

@end

/**
 *  Filters an organization or source's findings and groups them by their
 *  specified properties.
 *  To group across all sources provide a `-` as the source id.
 *  Example: /v1/organizations/123/sources/-/findings
 *
 *  Method: securitycenter.organizations.sources.findings.group
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsGroup : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsSourcesFindingsGroupWithObject:parent:]

/**
 *  Name of the source to groupBy. Its format is
 *  "organizations/[organization_id]/sources/[source_id]". To groupBy across
 *  all sources provide a source_id of `-`. For example:
 *  organizations/123/sources/-
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_GroupFindingsResponse.
 *
 *  Filters an organization or source's findings and groups them by their
 *  specified properties.
 *  To group across all sources provide a `-` as the source id.
 *  Example: /v1/organizations/123/sources/-/findings
 *
 *  @param object The @c GTLRSecurityCommandCenter_GroupFindingsRequest to
 *    include in the query.
 *  @param parent Name of the source to groupBy. Its format is
 *    "organizations/[organization_id]/sources/[source_id]". To groupBy across
 *    all sources provide a source_id of `-`. For example:
 *    organizations/123/sources/-
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsGroup
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GroupFindingsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists an organization or source's findings.
 *  To list across all sources provide a `-` as the source id.
 *  Example: /v1/organizations/123/sources/-/findings
 *
 *  Method: securitycenter.organizations.sources.findings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsList : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsSourcesFindingsListWithparent:]

/**
 *  When compare_duration is set, the ListFindingsResult's "state_change"
 *  attribute is updated to indicate whether the finding had its state changed,
 *  the finding's state remained unchanged, or if the finding was added in any
 *  state during the compare_duration period of time that precedes the
 *  read_time. This is the time between (read_time - compare_duration) and
 *  read_time.
 *  The state_change value is derived based on the presence and state of the
 *  finding at the two points in time. Intermediate state changes between the
 *  two times don't affect the result. For example, the results aren't affected
 *  if the finding is made inactive and then active again.
 *  Possible "state_change" values when compare_duration is specified:
 *  * "CHANGED": indicates that the finding was present at the start of
 *  compare_duration, but changed its state at read_time.
 *  * "UNCHANGED": indicates that the finding was present at the start of
 *  compare_duration and did not change state at read_time.
 *  * "ADDED": indicates that the finding was not present at the start
 *  of compare_duration, but was present at read_time.
 *  If compare_duration is not specified, then the only possible state_change
 *  is "UNUSED", which will be the state_change set for all findings present at
 *  read_time.
 */
@property(nonatomic, strong, nullable) GTLRDuration *compareDuration;

/**
 *  Optional.
 *  A field mask to specify the Finding fields to be listed in the response.
 *  An empty field mask will list all fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fieldMask;

/**
 *  Expression that defines the filter to apply across findings.
 *  The expression is a list of one or more restrictions combined via logical
 *  operators `AND` and `OR`.
 *  Parentheses are supported, and `OR` has higher precedence than `AND`.
 *  Restrictions have the form `<field> <operator> <value>` and may have a `-`
 *  character in front of them to indicate negation. Examples include:
 *  * name
 *  * source_properties.a_property
 *  * security_marks.marks.marka
 *  The supported operators are:
 *  * `=` for all value types.
 *  * `>`, `<`, `>=`, `<=` for integer values.
 *  * `:`, meaning substring matching, for strings.
 *  The supported value types are:
 *  * string literals in quotes.
 *  * integer literals without quotes.
 *  * boolean literals `true` and `false` without quotes.
 *  The following field and operator combinations are supported:
 *  name: `=`
 *  parent: `=`, `:`
 *  resource_name: `=`, `:`
 *  state: `=`, `:`
 *  category: `=`, `:`
 *  external_uri: `=`, `:`
 *  event_time: `>`, `<`, `>=`, `<=`
 *  security_marks: `=`, `:`
 *  source_properties: `=`, `:`, `>`, `<`, `>=`, `<=`
 *  For example, `source_properties.size = 100` is a valid filter string.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Expression that defines what fields and order to use for sorting. The
 *  string value should follow SQL syntax: comma separated list of fields. For
 *  example: "name,resource_properties.a_property". The default sorting order
 *  is ascending. To specify descending order for a field, a suffix " desc"
 *  should be appended to the field name. For example: "name
 *  desc,source_properties.a_property". Redundant space characters in the
 *  syntax are insignificant. "name desc,source_properties.a_property" and "
 *  name desc , source_properties.a_property " are equivalent.
 *  The following fields are supported:
 *  name
 *  parent
 *  state
 *  category
 *  resource_name
 *  event_time
 *  source_properties
 *  security_marks
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of results to return in a single response. Default is
 *  10, minimum is 1, maximum is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListFindingsResponse`; indicates
 *  that this is a continuation of a prior `ListFindings` call, and
 *  that the system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Name of the source the findings belong to. Its format is
 *  "organizations/[organization_id]/sources/[source_id]". To list across all
 *  sources provide a source_id of `-`. For example:
 *  organizations/123/sources/-
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Time used as a reference point when filtering findings. The filter is
 *  limited to findings existing at the supplied time and their values are
 *  those at that specific time. Absence of this field will default to the
 *  API's version of NOW.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListFindingsResponse.
 *
 *  Lists an organization or source's findings.
 *  To list across all sources provide a `-` as the source id.
 *  Example: /v1/organizations/123/sources/-/findings
 *
 *  @param parent Name of the source the findings belong to. Its format is
 *    "organizations/[organization_id]/sources/[source_id]". To list across all
 *    sources provide a source_id of `-`. For example:
 *    organizations/123/sources/-
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates or updates a finding. The corresponding source must exist for a
 *  finding creation to succeed.
 *
 *  Method: securitycenter.organizations.sources.findings.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsPatch : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsSourcesFindingsPatchWithObject:name:]

/**
 *  The relative resource name of this finding. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/123/sources/456/findings/789"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The FieldMask to use when updating the finding resource. This field should
 *  not be specified when creating a finding.
 *  When updating a finding, an empty mask is treated as updating all mutable
 *  fields and replacing source_properties. Individual source_properties can
 *  be added/updated by using "source_properties.<property key>" in the field
 *  mask.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Finding.
 *
 *  Creates or updates a finding. The corresponding source must exist for a
 *  finding creation to succeed.
 *
 *  @param object The @c GTLRSecurityCommandCenter_Finding to include in the
 *    query.
 *  @param name The relative resource name of this finding. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example:
 *    "organizations/123/sources/456/findings/789"
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_Finding *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the state of a finding.
 *
 *  Method: securitycenter.organizations.sources.findings.setState
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsSetState : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsSourcesFindingsSetStateWithObject:name:]

/**
 *  The relative resource name of the finding. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/123/sources/456/finding/789".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Finding.
 *
 *  Updates the state of a finding.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SetFindingStateRequest to
 *    include in the query.
 *  @param name The relative resource name of the finding. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example:
 *    "organizations/123/sources/456/finding/789".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsSetState
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SetFindingStateRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates security marks.
 *
 *  Method: securitycenter.organizations.sources.findings.updateSecurityMarks
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsUpdateSecurityMarks : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsSourcesFindingsUpdateSecurityMarksWithObject:name:]

/**
 *  The relative resource name of the SecurityMarks. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Examples:
 *  "organizations/123/assets/456/securityMarks"
 *  "organizations/123/sources/456/findings/789/securityMarks".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The time at which the updated SecurityMarks take effect.
 *  If not set uses current server time. Updates will be applied to the
 *  SecurityMarks that are active immediately preceding this time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The FieldMask to use when updating the security marks resource.
 *  The field mask must not contain duplicate fields.
 *  If empty or set to "marks", all marks will be replaced. Individual
 *  marks can be updated using "marks.<mark_key>".
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_SecurityMarks.
 *
 *  Updates security marks.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SecurityMarks to include in
 *    the query.
 *  @param name The relative resource name of the SecurityMarks. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Examples:
 *    "organizations/123/assets/456/securityMarks"
 *    "organizations/123/sources/456/findings/789/securityMarks".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsUpdateSecurityMarks
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SecurityMarks *)object
                           name:(NSString *)name;

@end

/**
 *  Gets a source.
 *
 *  Method: securitycenter.organizations.sources.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesGet : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsSourcesGetWithname:]

/**
 *  Relative resource name of the source. Its format is
 *  "organizations/[organization_id]/source/[source_id]".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Source.
 *
 *  Gets a source.
 *
 *  @param name Relative resource name of the source. Its format is
 *    "organizations/[organization_id]/source/[source_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy on the specified Source.
 *
 *  Method: securitycenter.organizations.sources.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesGetIamPolicy : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsSourcesGetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Policy.
 *
 *  Gets the access control policy on the specified Source.
 *
 *  @param object The @c GTLRSecurityCommandCenter_GetIamPolicyRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists all sources belonging to an organization.
 *
 *  Method: securitycenter.organizations.sources.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesList : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsSourcesListWithparent:]

/**
 *  The maximum number of results to return in a single response. Default is
 *  10, minimum is 1, maximum is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListSourcesResponse`; indicates
 *  that this is a continuation of a prior `ListSources` call, and
 *  that the system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Resource name of the parent of sources to list. Its format should be
 *  "organizations/[organization_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListSourcesResponse.
 *
 *  Lists all sources belonging to an organization.
 *
 *  @param parent Resource name of the parent of sources to list. Its format
 *    should be
 *    "organizations/[organization_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a source.
 *
 *  Method: securitycenter.organizations.sources.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesPatch : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsSourcesPatchWithObject:name:]

/**
 *  The relative resource name of this source. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/123/sources/456"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The FieldMask to use when updating the source resource.
 *  If empty all mutable fields will be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Source.
 *
 *  Updates a source.
 *
 *  @param object The @c GTLRSecurityCommandCenter_Source to include in the
 *    query.
 *  @param name The relative resource name of this source. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example:
 *    "organizations/123/sources/456"
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_Source *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified Source.
 *
 *  Method: securitycenter.organizations.sources.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesSetIamPolicy : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsSourcesSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Policy.
 *
 *  Sets the access control policy on the specified Source.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SetIamPolicyRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns the permissions that a caller has on the specified source.
 *
 *  Method: securitycenter.organizations.sources.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesTestIamPermissions : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsSourcesTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_TestIamPermissionsResponse.
 *
 *  Returns the permissions that a caller has on the specified source.
 *
 *  @param object The @c GTLRSecurityCommandCenter_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Updates an organization's settings.
 *
 *  Method: securitycenter.organizations.updateOrganizationSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsUpdateOrganizationSettings : GTLRSecurityCommandCenterQuery
// Previous library name was
//   +[GTLQuerySecurityCommandCenter queryForOrganizationsUpdateOrganizationSettingsWithObject:name:]

/**
 *  The relative resource name of the settings. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/123/organizationSettings".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The FieldMask to use when updating the settings resource.
 *  If empty all mutable fields will be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_OrganizationSettings.
 *
 *  Updates an organization's settings.
 *
 *  @param object The @c GTLRSecurityCommandCenter_OrganizationSettings to
 *    include in the query.
 *  @param name The relative resource name of the settings. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example:
 *    "organizations/123/organizationSettings".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsUpdateOrganizationSettings
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_OrganizationSettings *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
