// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Healthcare API (healthcare/v1)
// Description:
//   Manage, store, and access healthcare data in Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/healthcare

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudHealthcare_CancelOperationRequest;
@class GTLRCloudHealthcare_CreateMessageRequest;
@class GTLRCloudHealthcare_Dataset;
@class GTLRCloudHealthcare_DeidentifyDatasetRequest;
@class GTLRCloudHealthcare_DeidentifyDicomStoreRequest;
@class GTLRCloudHealthcare_DeidentifyFhirStoreRequest;
@class GTLRCloudHealthcare_DicomStore;
@class GTLRCloudHealthcare_ExportDicomDataRequest;
@class GTLRCloudHealthcare_ExportResourcesRequest;
@class GTLRCloudHealthcare_FhirStore;
@class GTLRCloudHealthcare_Hl7V2Store;
@class GTLRCloudHealthcare_HttpBody;
@class GTLRCloudHealthcare_ImportDicomDataRequest;
@class GTLRCloudHealthcare_ImportResourcesRequest;
@class GTLRCloudHealthcare_IngestMessageRequest;
@class GTLRCloudHealthcare_Message;
@class GTLRCloudHealthcare_SearchResourcesRequest;
@class GTLRCloudHealthcare_SetIamPolicyRequest;
@class GTLRCloudHealthcare_TestIamPermissionsRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// view

/**
 *  Server responses include only the name field.
 *
 *  Value: "BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudHealthcareViewBasic;
/**
 *  Server responses include all the message fields.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudHealthcareViewFull;
/**
 *  Not specified, equivalent to FULL.
 *
 *  Value: "MESSAGE_VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudHealthcareViewMessageViewUnspecified;
/**
 *  Server responses include all the message fields except data field.
 *
 *  Value: "PARSED_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudHealthcareViewParsedOnly;
/**
 *  Server responses include all the message fields except parsed_data field.
 *
 *  Value: "RAW_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudHealthcareViewRawOnly;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Cloud Healthcare query classes.
 */
@interface GTLRCloudHealthcareQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new health dataset. Results are returned through the Operation
 *  interface which returns either an `Operation.response` which contains a
 *  Dataset or `Operation.error`. The metadata field type is OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsCreate : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsCreateWithObject:parent:]

/**
 *  The ID of the dataset that is being created. The string must match the
 *  following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.
 */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  The name of the project where the server creates the dataset. For example,
 *  `projects/{project_id}/locations/{location_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Creates a new health dataset. Results are returned through the Operation
 *  interface which returns either an `Operation.response` which contains a
 *  Dataset or `Operation.error`. The metadata field type is OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_Dataset to include in the query.
 *  @param parent The name of the project where the server creates the dataset.
 *    For example, `projects/{project_id}/locations/{location_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Dataset *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a new dataset containing de-identified data from the source dataset.
 *  The metadata field type is OperationMetadata. If the request is successful,
 *  the response field type is DeidentifySummary. If errors occur, error is set.
 *  The LRO result may still be successful if de-identification fails for some
 *  DICOM instances. The new de-identified dataset will not contain these failed
 *  resources. Failed resource totals are tracked in Operation.metadata. Error
 *  details are also logged to Cloud Logging. For more information, see [Viewing
 *  logs](/healthcare/docs/how-tos/logging).
 *
 *  Method: healthcare.projects.locations.datasets.deidentify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDeidentify : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDeidentifyWithObject:sourceDataset:]

/**
 *  Source dataset resource name. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 */
@property(nonatomic, copy, nullable) NSString *sourceDataset;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Creates a new dataset containing de-identified data from the source dataset.
 *  The metadata field type is OperationMetadata. If the request is successful,
 *  the response field type is DeidentifySummary. If errors occur, error is set.
 *  The LRO result may still be successful if de-identification fails for some
 *  DICOM instances. The new de-identified dataset will not contain these failed
 *  resources. Failed resource totals are tracked in Operation.metadata. Error
 *  details are also logged to Cloud Logging. For more information, see [Viewing
 *  logs](/healthcare/docs/how-tos/logging).
 *
 *  @param object The @c GTLRCloudHealthcare_DeidentifyDatasetRequest to include
 *    in the query.
 *  @param sourceDataset Source dataset resource name. For example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDeidentify
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_DeidentifyDatasetRequest *)object
                  sourceDataset:(NSString *)sourceDataset;

@end

/**
 *  Deletes the specified health dataset and all data contained in the dataset.
 *  Deleting a dataset does not affect the sources from which the dataset was
 *  imported (if any).
 *
 *  Method: healthcare.projects.locations.datasets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDeleteWithname:]

/**
 *  The name of the dataset to delete. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified health dataset and all data contained in the dataset.
 *  Deleting a dataset does not affect the sources from which the dataset was
 *  imported (if any).
 *
 *  @param name The name of the dataset to delete. For example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new DICOM store within the parent dataset.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresCreate : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresCreateWithObject:parent:]

/**
 *  The ID of the DICOM store that is being created. Any string value up to 256
 *  characters in length.
 */
@property(nonatomic, copy, nullable) NSString *dicomStoreId;

/** The name of the dataset this DICOM store belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_DicomStore.
 *
 *  Creates a new DICOM store within the parent dataset.
 *
 *  @param object The @c GTLRCloudHealthcare_DicomStore to include in the query.
 *  @param parent The name of the dataset this DICOM store belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_DicomStore *)object
                         parent:(NSString *)parent;

@end

/**
 *  De-identifies data from the source store and writes it to the destination
 *  store. The metadata field type is OperationMetadata. If the request is
 *  successful, the response field type is DeidentifyDicomStoreSummary. If
 *  errors occur, error is set. The LRO result may still be successful if
 *  de-identification fails for some DICOM instances. The output DICOM store
 *  will not contain these failed resources. Failed resource totals are tracked
 *  in Operation.metadata. Error details are also logged to Cloud Logging (see
 *  [Viewing logs](/healthcare/docs/how-tos/logging)).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.deidentify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDeidentify : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDeidentifyWithObject:sourceStore:]

/**
 *  Source DICOM store resource name. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *sourceStore;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  De-identifies data from the source store and writes it to the destination
 *  store. The metadata field type is OperationMetadata. If the request is
 *  successful, the response field type is DeidentifyDicomStoreSummary. If
 *  errors occur, error is set. The LRO result may still be successful if
 *  de-identification fails for some DICOM instances. The output DICOM store
 *  will not contain these failed resources. Failed resource totals are tracked
 *  in Operation.metadata. Error details are also logged to Cloud Logging (see
 *  [Viewing logs](/healthcare/docs/how-tos/logging)).
 *
 *  @param object The @c GTLRCloudHealthcare_DeidentifyDicomStoreRequest to
 *    include in the query.
 *  @param sourceStore Source DICOM store resource name. For example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDeidentify
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_DeidentifyDicomStoreRequest *)object
                    sourceStore:(NSString *)sourceStore;

@end

/**
 *  Deletes the specified DICOM store and removes all images that are contained
 *  within it.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDeleteWithname:]

/** The resource name of the DICOM store to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified DICOM store and removes all images that are contained
 *  within it.
 *
 *  @param name The resource name of the DICOM store to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Exports data to the specified destination by copying it from the DICOM
 *  store. Errors are also logged to Cloud Logging. For more information, see
 *  [Viewing logs](/healthcare/docs/how-tos/logging). The metadata field type is
 *  OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.export
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresExport : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresExportWithObject:name:]

/**
 *  The DICOM store resource name from which to export the data. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Exports data to the specified destination by copying it from the DICOM
 *  store. Errors are also logged to Cloud Logging. For more information, see
 *  [Viewing logs](/healthcare/docs/how-tos/logging). The metadata field type is
 *  OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_ExportDicomDataRequest to include
 *    in the query.
 *  @param name The DICOM store resource name from which to export the data. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresExport
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ExportDicomDataRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the specified DICOM store.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresGetWithname:]

/** The resource name of the DICOM store to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_DicomStore.
 *
 *  Gets the specified DICOM store.
 *
 *  @param name The resource name of the DICOM store to get.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresGetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresGetIamPolicyWithresource:]

/**
 *  Optional. The policy format version to be returned. Valid values are 0, 1,
 *  and 3. Requests specifying an invalid value will be rejected. Requests for
 *  policies with any conditional bindings must specify version 3. Policies
 *  without any conditional bindings may specify any valid value or leave the
 *  field unset. To learn which resources support conditions in their IAM
 *  policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Imports data into the DICOM store by copying it from the specified source.
 *  Errors are logged to Cloud Logging. For more information, see [Viewing
 *  logs](/healthcare/docs/how-tos/logging). The metadata field type is
 *  OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresImport : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresImportWithObject:name:]

/**
 *  The name of the DICOM store resource into which the data is imported. For
 *  example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Imports data into the DICOM store by copying it from the specified source.
 *  Errors are logged to Cloud Logging. For more information, see [Viewing
 *  logs](/healthcare/docs/how-tos/logging). The metadata field type is
 *  OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_ImportDicomDataRequest to include
 *    in the query.
 *  @param name The name of the DICOM store resource into which the data is
 *    imported. For example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresImport
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ImportDicomDataRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists the DICOM stores in the given dataset.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresListWithparent:]

/**
 *  Restricts stores returned to those matching a filter. Syntax:
 *  https://cloud.google.com/appengine/docs/standard/python/search/query_strings
 *  Only filtering on labels is supported. For example, `labels.key=value`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Limit on the number of DICOM stores to return in a single response. If not
 *  specified, 100 is used. May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from the previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the dataset. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListDicomStoresResponse.
 *
 *  Lists the DICOM stores in the given dataset.
 *
 *  @param parent Name of the dataset.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the specified DICOM store.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresPatch : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresPatchWithObject:name:]

/**
 *  Resource name of the DICOM store, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_DicomStore.
 *
 *  Updates the specified DICOM store.
 *
 *  @param object The @c GTLRCloudHealthcare_DicomStore to include in the query.
 *  @param name Resource name of the DICOM store, of the form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_DicomStore *)object
                           name:(NSString *)name;

@end

/**
 *  SearchForInstances returns a list of matching instances. See [Search
 *  Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForInstances, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForInstances, see [Searching for studies, series, instances,
 *  and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.searchForInstances
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSearchForInstances : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresSearchForInstancesWithparent:dicomWebPath:]

/**
 *  The path of the SearchForInstancesRequest DICOMweb request. For example,
 *  `instances`, `series/{series_uid}/instances`, or
 *  `studies/{study_uid}/instances`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForInstances returns a list of matching instances. See [Search
 *  Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForInstances, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForInstances, see [Searching for studies, series, instances,
 *  and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the SearchForInstancesRequest DICOMweb
 *    request. For example, `instances`, `series/{series_uid}/instances`, or
 *    `studies/{study_uid}/instances`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSearchForInstances
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  SearchForSeries returns a list of matching series. See [Search Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForSeries, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForSeries, see [Searching for studies, series, instances, and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.searchForSeries
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSearchForSeries : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresSearchForSeriesWithparent:dicomWebPath:]

/**
 *  The path of the SearchForSeries DICOMweb request. For example, `series` or
 *  `studies/{study_uid}/series`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForSeries returns a list of matching series. See [Search Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForSeries, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForSeries, see [Searching for studies, series, instances, and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the SearchForSeries DICOMweb request. For
 *    example, `series` or `studies/{study_uid}/series`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSearchForSeries
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  SearchForStudies returns a list of matching studies. See [Search
 *  Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForStudies, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForStudies, see [Searching for studies, series, instances, and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.searchForStudies
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSearchForStudies : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresSearchForStudiesWithparent:dicomWebPath:]

/**
 *  The path of the SearchForStudies DICOMweb request. For example, `studies`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForStudies returns a list of matching studies. See [Search
 *  Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForStudies, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForStudies, see [Searching for studies, series, instances, and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the SearchForStudies DICOMweb request. For
 *    example, `studies`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSearchForStudies
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRCloudHealthcare_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  StoreInstances stores DICOM instances associated with study instance unique
 *  identifiers (SUID). See [Store Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5).
 *  For details on the implementation of StoreInstances, see [Store
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call StoreInstances, see [Storing DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.storeInstances
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStoreInstances : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStoreInstancesWithObject:parent:dicomWebPath:]

/**
 *  The path of the StoreInstances DICOMweb request. For example,
 *  `studies/[{study_uid}]`. Note that the `study_uid` is optional.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  StoreInstances stores DICOM instances associated with study instance unique
 *  identifiers (SUID). See [Store Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5).
 *  For details on the implementation of StoreInstances, see [Store
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call StoreInstances, see [Storing DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the StoreInstances DICOMweb request. For
 *    example, `studies/[{study_uid}]`. Note that the `study_uid` is optional.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStoreInstances
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                         parent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  DeleteStudy deletes all instances within the given study. Delete requests
 *  are equivalent to the GET requests specified in the Retrieve transaction.
 *  The method returns an Operation which will be marked successful when the
 *  deletion is complete. Warning: Inserting instances into a study while a
 *  delete operation is running for that study could result in the new instances
 *  not appearing in search results until the deletion operation finishes. For
 *  samples that show how to call DeleteStudy, see [Deleting a study, series, or
 *  instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStudiesDeleteWithparent:dicomWebPath:]

/**
 *  The path of the DeleteStudy request. For example, `studies/{study_uid}`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  DeleteStudy deletes all instances within the given study. Delete requests
 *  are equivalent to the GET requests specified in the Retrieve transaction.
 *  The method returns an Operation which will be marked successful when the
 *  deletion is complete. Warning: Inserting instances into a study while a
 *  delete operation is running for that study could result in the new instances
 *  not appearing in search results until the deletion operation finishes. For
 *  samples that show how to call DeleteStudy, see [Deleting a study, series, or
 *  instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
 *
 *  @param parent NSString
 *  @param dicomWebPath The path of the DeleteStudy request. For example,
 *    `studies/{study_uid}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesDelete
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveStudyMetadata returns instance associated with the given study
 *  presented as metadata with the bulk data removed. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveStudyMetadata, see [Metadata
 *  resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveStudyMetadata, see [Retrieving
 *  metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.retrieveMetadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesRetrieveMetadata : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStudiesRetrieveMetadataWithparent:dicomWebPath:]

/**
 *  The path of the RetrieveStudyMetadata DICOMweb request. For example,
 *  `studies/{study_uid}/metadata`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveStudyMetadata returns instance associated with the given study
 *  presented as metadata with the bulk data removed. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveStudyMetadata, see [Metadata
 *  resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveStudyMetadata, see [Retrieving
 *  metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveStudyMetadata DICOMweb request.
 *    For example, `studies/{study_uid}/metadata`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesRetrieveMetadata
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveStudy returns all instances within the given study. See
 *  [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveStudy, see [DICOM
 *  study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveStudy, see [Retrieving DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.retrieveStudy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesRetrieveStudy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStudiesRetrieveStudyWithparent:dicomWebPath:]

/**
 *  The path of the RetrieveStudy DICOMweb request. For example,
 *  `studies/{study_uid}`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveStudy returns all instances within the given study. See
 *  [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveStudy, see [DICOM
 *  study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveStudy, see [Retrieving DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveStudy DICOMweb request. For
 *    example, `studies/{study_uid}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesRetrieveStudy
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  SearchForInstances returns a list of matching instances. See [Search
 *  Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForInstances, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForInstances, see [Searching for studies, series, instances,
 *  and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.searchForInstances
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSearchForInstances : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStudiesSearchForInstancesWithparent:dicomWebPath:]

/**
 *  The path of the SearchForInstancesRequest DICOMweb request. For example,
 *  `instances`, `series/{series_uid}/instances`, or
 *  `studies/{study_uid}/instances`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForInstances returns a list of matching instances. See [Search
 *  Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForInstances, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForInstances, see [Searching for studies, series, instances,
 *  and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the SearchForInstancesRequest DICOMweb
 *    request. For example, `instances`, `series/{series_uid}/instances`, or
 *    `studies/{study_uid}/instances`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSearchForInstances
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  SearchForSeries returns a list of matching series. See [Search Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForSeries, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForSeries, see [Searching for studies, series, instances, and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.searchForSeries
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSearchForSeries : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStudiesSearchForSeriesWithparent:dicomWebPath:]

/**
 *  The path of the SearchForSeries DICOMweb request. For example, `series` or
 *  `studies/{study_uid}/series`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForSeries returns a list of matching series. See [Search Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForSeries, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForSeries, see [Searching for studies, series, instances, and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the SearchForSeries DICOMweb request. For
 *    example, `series` or `studies/{study_uid}/series`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSearchForSeries
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  DeleteSeries deletes all instances within the given study and series. Delete
 *  requests are equivalent to the GET requests specified in the Retrieve
 *  transaction. The method returns an Operation which will be marked successful
 *  when the deletion is complete. Warning: Inserting instances into a series
 *  while a delete operation is running for that series could result in the new
 *  instances not appearing in search results until the deletion operation
 *  finishes. For samples that show how to call DeleteSeries, see [Deleting a
 *  study, series, or
 *  instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStudiesSeriesDeleteWithparent:dicomWebPath:]

/**
 *  The path of the DeleteSeries request. For example,
 *  `studies/{study_uid}/series/{series_uid}`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  DeleteSeries deletes all instances within the given study and series. Delete
 *  requests are equivalent to the GET requests specified in the Retrieve
 *  transaction. The method returns an Operation which will be marked successful
 *  when the deletion is complete. Warning: Inserting instances into a series
 *  while a delete operation is running for that series could result in the new
 *  instances not appearing in search results until the deletion operation
 *  finishes. For samples that show how to call DeleteSeries, see [Deleting a
 *  study, series, or
 *  instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the DeleteSeries request. For example,
 *    `studies/{study_uid}/series/{series_uid}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesDelete
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  DeleteInstance deletes an instance associated with the given study, series,
 *  and SOP Instance UID. Delete requests are equivalent to the GET requests
 *  specified in the Retrieve transaction. Study and series search results can
 *  take a few seconds to be updated after an instance is deleted using
 *  DeleteInstance. For samples that show how to call DeleteInstance, see
 *  [Deleting a study, series, or
 *  instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesDeleteWithparent:dicomWebPath:]

/**
 *  The path of the DeleteInstance request. For example,
 *  `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  DeleteInstance deletes an instance associated with the given study, series,
 *  and SOP Instance UID. Delete requests are equivalent to the GET requests
 *  specified in the Retrieve transaction. Study and series search results can
 *  take a few seconds to be updated after an instance is deleted using
 *  DeleteInstance. For samples that show how to call DeleteInstance, see
 *  [Deleting a study, series, or
 *  instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the DeleteInstance request. For example,
 *    `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesDelete
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveFrames returns instances associated with the given study, series,
 *  SOP Instance UID and frame numbers. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4}.
 *  For details on the implementation of RetrieveFrames, see [DICOM
 *  frames](https://cloud.google.com/healthcare/docs/dicom#dicom_frames) in the
 *  Cloud Healthcare API conformance statement. For samples that show how to
 *  call RetrieveFrames, see [Retrieving DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveFrames
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesFramesRetrieveFrames : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesFramesRetrieveFramesWithparent:dicomWebPath:]

/**
 *  The path of the RetrieveFrames DICOMweb request. For example,
 *  `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/frames/{frame_list}`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveFrames returns instances associated with the given study, series,
 *  SOP Instance UID and frame numbers. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4}.
 *  For details on the implementation of RetrieveFrames, see [DICOM
 *  frames](https://cloud.google.com/healthcare/docs/dicom#dicom_frames) in the
 *  Cloud Healthcare API conformance statement. For samples that show how to
 *  call RetrieveFrames, see [Retrieving DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveFrames DICOMweb request. For
 *    example,
 *    `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/frames/{frame_list}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesFramesRetrieveFrames
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveRenderedFrames returns instances associated with the given study,
 *  series, SOP Instance UID and frame numbers in an acceptable Rendered Media
 *  Type. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveRenderedFrames, see [Rendered
 *  resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveRenderedFrames, see [Retrieving consumer image
 *  formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveRendered
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesFramesRetrieveRendered : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesFramesRetrieveRenderedWithparent:dicomWebPath:]

/**
 *  The path of the RetrieveRenderedFrames DICOMweb request. For example,
 *  `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/frames/{frame_list}/rendered`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveRenderedFrames returns instances associated with the given study,
 *  series, SOP Instance UID and frame numbers in an acceptable Rendered Media
 *  Type. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveRenderedFrames, see [Rendered
 *  resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveRenderedFrames, see [Retrieving consumer image
 *  formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveRenderedFrames DICOMweb request.
 *    For example,
 *    `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/frames/{frame_list}/rendered`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesFramesRetrieveRendered
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveInstance returns instance associated with the given study, series,
 *  and SOP Instance UID. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveInstance, see [DICOM
 *  study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
 *  and [DICOM
 *  instances](https://cloud.google.com/healthcare/docs/dicom#dicom_instances)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveInstance, see [Retrieving an
 *  instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_an_instance).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveInstance
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesRetrieveInstance : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesRetrieveInstanceWithparent:dicomWebPath:]

/**
 *  The path of the RetrieveInstance DICOMweb request. For example,
 *  `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveInstance returns instance associated with the given study, series,
 *  and SOP Instance UID. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveInstance, see [DICOM
 *  study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
 *  and [DICOM
 *  instances](https://cloud.google.com/healthcare/docs/dicom#dicom_instances)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveInstance, see [Retrieving an
 *  instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_an_instance).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveInstance DICOMweb request. For
 *    example,
 *    `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesRetrieveInstance
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveInstanceMetadata returns instance associated with the given study,
 *  series, and SOP Instance UID presented as metadata with the bulk data
 *  removed. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveInstanceMetadata, see [Metadata
 *  resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveInstanceMetadata, see [Retrieving
 *  metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveMetadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesRetrieveMetadata : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesRetrieveMetadataWithparent:dicomWebPath:]

/**
 *  The path of the RetrieveInstanceMetadata DICOMweb request. For example,
 *  `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/metadata`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveInstanceMetadata returns instance associated with the given study,
 *  series, and SOP Instance UID presented as metadata with the bulk data
 *  removed. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveInstanceMetadata, see [Metadata
 *  resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveInstanceMetadata, see [Retrieving
 *  metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveInstanceMetadata DICOMweb
 *    request. For example,
 *    `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/metadata`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesRetrieveMetadata
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveRenderedInstance returns instance associated with the given study,
 *  series, and SOP Instance UID in an acceptable Rendered Media Type. See
 *  [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveRenderedInstance, see [Rendered
 *  resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveRenderedInstance, see [Retrieving consumer image
 *  formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveRendered
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesRetrieveRendered : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesRetrieveRenderedWithparent:dicomWebPath:]

/**
 *  The path of the RetrieveRenderedInstance DICOMweb request. For example,
 *  `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/rendered`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveRenderedInstance returns instance associated with the given study,
 *  series, and SOP Instance UID in an acceptable Rendered Media Type. See
 *  [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveRenderedInstance, see [Rendered
 *  resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveRenderedInstance, see [Retrieving consumer image
 *  formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveRenderedInstance DICOMweb
 *    request. For example,
 *    `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/rendered`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesRetrieveRendered
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveSeriesMetadata returns instance associated with the given study and
 *  series, presented as metadata with the bulk data removed. See
 *  [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveSeriesMetadata, see [Metadata
 *  resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveSeriesMetadata, see [Retrieving
 *  metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveMetadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesRetrieveMetadata : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStudiesSeriesRetrieveMetadataWithparent:dicomWebPath:]

/**
 *  The path of the RetrieveSeriesMetadata DICOMweb request. For example,
 *  `studies/{study_uid}/series/{series_uid}/metadata`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveSeriesMetadata returns instance associated with the given study and
 *  series, presented as metadata with the bulk data removed. See
 *  [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveSeriesMetadata, see [Metadata
 *  resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveSeriesMetadata, see [Retrieving
 *  metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveSeriesMetadata DICOMweb request.
 *    For example, `studies/{study_uid}/series/{series_uid}/metadata`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesRetrieveMetadata
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveSeries returns all instances within the given study and series. See
 *  [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveSeries, see [DICOM
 *  study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveSeries, see [Retrieving DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveSeries
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesRetrieveSeries : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStudiesSeriesRetrieveSeriesWithparent:dicomWebPath:]

/**
 *  The path of the RetrieveSeries DICOMweb request. For example,
 *  `studies/{study_uid}/series/{series_uid}`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveSeries returns all instances within the given study and series. See
 *  [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveSeries, see [DICOM
 *  study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveSeries, see [Retrieving DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveSeries DICOMweb request. For
 *    example, `studies/{study_uid}/series/{series_uid}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesRetrieveSeries
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  SearchForInstances returns a list of matching instances. See [Search
 *  Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForInstances, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForInstances, see [Searching for studies, series, instances,
 *  and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.searchForInstances
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesSearchForInstances : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStudiesSeriesSearchForInstancesWithparent:dicomWebPath:]

/**
 *  The path of the SearchForInstancesRequest DICOMweb request. For example,
 *  `instances`, `series/{series_uid}/instances`, or
 *  `studies/{study_uid}/instances`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForInstances returns a list of matching instances. See [Search
 *  Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForInstances, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForInstances, see [Searching for studies, series, instances,
 *  and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the SearchForInstancesRequest DICOMweb
 *    request. For example, `instances`, `series/{series_uid}/instances`, or
 *    `studies/{study_uid}/instances`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesSearchForInstances
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  StoreInstances stores DICOM instances associated with study instance unique
 *  identifiers (SUID). See [Store Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5).
 *  For details on the implementation of StoreInstances, see [Store
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call StoreInstances, see [Storing DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.storeInstances
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesStoreInstances : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresStudiesStoreInstancesWithObject:parent:dicomWebPath:]

/**
 *  The path of the StoreInstances DICOMweb request. For example,
 *  `studies/[{study_uid}]`. Note that the `study_uid` is optional.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  StoreInstances stores DICOM instances associated with study instance unique
 *  identifiers (SUID). See [Store Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5).
 *  For details on the implementation of StoreInstances, see [Store
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call StoreInstances, see [Storing DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the StoreInstances DICOMweb request. For
 *    example, `studies/[{study_uid}]`. Note that the `study_uid` is optional.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesStoreInstances
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                         parent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresTestIamPermissions : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRCloudHealthcare_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Creates a new FHIR store within the parent dataset.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresCreate : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresCreateWithObject:parent:]

/**
 *  The ID of the FHIR store that is being created. The string must match the
 *  following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.
 */
@property(nonatomic, copy, nullable) NSString *fhirStoreId;

/** The name of the dataset this FHIR store belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_FhirStore.
 *
 *  Creates a new FHIR store within the parent dataset.
 *
 *  @param object The @c GTLRCloudHealthcare_FhirStore to include in the query.
 *  @param parent The name of the dataset this FHIR store belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_FhirStore *)object
                         parent:(NSString *)parent;

@end

/**
 *  De-identifies data from the source store and writes it to the destination
 *  store. The metadata field type is OperationMetadata. If the request is
 *  successful, the response field type is DeidentifyFhirStoreSummary. If errors
 *  occur, error is set. Error details are also logged to Cloud Logging (see
 *  [Viewing logs](/healthcare/docs/how-tos/logging)).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.deidentify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresDeidentify : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresDeidentifyWithObject:sourceStore:]

/**
 *  Source FHIR store resource name. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *sourceStore;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  De-identifies data from the source store and writes it to the destination
 *  store. The metadata field type is OperationMetadata. If the request is
 *  successful, the response field type is DeidentifyFhirStoreSummary. If errors
 *  occur, error is set. Error details are also logged to Cloud Logging (see
 *  [Viewing logs](/healthcare/docs/how-tos/logging)).
 *
 *  @param object The @c GTLRCloudHealthcare_DeidentifyFhirStoreRequest to
 *    include in the query.
 *  @param sourceStore Source FHIR store resource name. For example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresDeidentify
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_DeidentifyFhirStoreRequest *)object
                    sourceStore:(NSString *)sourceStore;

@end

/**
 *  Deletes the specified FHIR store and removes all resources within it.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresDeleteWithname:]

/** The resource name of the FHIR store to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified FHIR store and removes all resources within it.
 *
 *  @param name The resource name of the FHIR store to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Export resources from the FHIR store to the specified destination. This
 *  method returns an Operation that can be used to track the status of the
 *  export by calling GetOperation. Immediate fatal errors appear in the error
 *  field, errors are also logged to Cloud Logging (see [Viewing
 *  logs](/healthcare/docs/how-tos/logging)). Otherwise, when the operation
 *  finishes, a detailed response of type ExportResourcesResponse is returned in
 *  the response field. The metadata field type for this operation is
 *  OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.export
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresExport : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresExportWithObject:name:]

/**
 *  The name of the FHIR store to export resource from, in the format of
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Export resources from the FHIR store to the specified destination. This
 *  method returns an Operation that can be used to track the status of the
 *  export by calling GetOperation. Immediate fatal errors appear in the error
 *  field, errors are also logged to Cloud Logging (see [Viewing
 *  logs](/healthcare/docs/how-tos/logging)). Otherwise, when the operation
 *  finishes, a detailed response of type ExportResourcesResponse is returned in
 *  the response field. The metadata field type for this operation is
 *  OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_ExportResourcesRequest to include
 *    in the query.
 *  @param name The name of the FHIR store to export resource from, in the
 *    format of
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresExport
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ExportResourcesRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the FHIR capability statement
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/capabilitystatement.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/capabilitystatement.html)),
 *  or the [conformance
 *  statement](http://hl7.org/implement/standards/fhir/DSTU2/conformance.html)
 *  in the DSTU2 case for the store, which contains a description of
 *  functionality supported by the server. Implements the FHIR standard
 *  capabilities interaction
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#capabilities),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#capabilities)), or
 *  the [conformance
 *  interaction](http://hl7.org/implement/standards/fhir/DSTU2/http.html#conformance)
 *  in the DSTU2 case. On success, the response body will contain a JSON-encoded
 *  representation of a `CapabilityStatement` resource.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.capabilities
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirCapabilities : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirCapabilitiesWithname:]

/** Name of the FHIR store to retrieve the capabilities for. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Gets the FHIR capability statement
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/capabilitystatement.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/capabilitystatement.html)),
 *  or the [conformance
 *  statement](http://hl7.org/implement/standards/fhir/DSTU2/conformance.html)
 *  in the DSTU2 case for the store, which contains a description of
 *  functionality supported by the server. Implements the FHIR standard
 *  capabilities interaction
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#capabilities),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#capabilities)), or
 *  the [conformance
 *  interaction](http://hl7.org/implement/standards/fhir/DSTU2/http.html#conformance)
 *  in the DSTU2 case. On success, the response body will contain a JSON-encoded
 *  representation of a `CapabilityStatement` resource.
 *
 *  @param name Name of the FHIR store to retrieve the capabilities for.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirCapabilities
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a FHIR resource. Implements the FHIR standard create interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#create),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#create),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#create)), which
 *  creates a new resource with a server-assigned resource ID. The request body
 *  must contain a JSON-encoded FHIR resource, and the request headers must
 *  contain `Content-Type: application/fhir+json`. On success, the response body
 *  will contain a JSON-encoded representation of the resource as it was created
 *  on the server, including the server-assigned resource ID and version ID.
 *  Errors generated by the FHIR store will contain a JSON-encoded
 *  `OperationOutcome` resource describing the reason for the error. If the
 *  request cannot be mapped to a valid API method on a FHIR store, a generic
 *  GCP error might be returned instead. For samples that show how to call
 *  `create`, see [Creating a FHIR
 *  resource](/healthcare/docs/how-tos/fhir-resources#creating_a_fhir_resource).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirCreate : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirCreateWithObject:parent:type:]

/** The name of the FHIR store this resource belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The FHIR resource type to create, such as Patient or Observation. For a
 *  complete list, see the FHIR Resource Index
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)). Must
 *  match the resource type in the provided content.
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Creates a FHIR resource. Implements the FHIR standard create interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#create),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#create),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#create)), which
 *  creates a new resource with a server-assigned resource ID. The request body
 *  must contain a JSON-encoded FHIR resource, and the request headers must
 *  contain `Content-Type: application/fhir+json`. On success, the response body
 *  will contain a JSON-encoded representation of the resource as it was created
 *  on the server, including the server-assigned resource ID and version ID.
 *  Errors generated by the FHIR store will contain a JSON-encoded
 *  `OperationOutcome` resource describing the reason for the error. If the
 *  request cannot be mapped to a valid API method on a FHIR store, a generic
 *  GCP error might be returned instead. For samples that show how to call
 *  `create`, see [Creating a FHIR
 *  resource](/healthcare/docs/how-tos/fhir-resources#creating_a_fhir_resource).
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param parent The name of the FHIR store this resource belongs to.
 *  @param type The FHIR resource type to create, such as Patient or
 *    Observation. For a complete list, see the FHIR Resource Index
 *    ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
 *    [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html),
 *    [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)). Must
 *    match the resource type in the provided content.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                         parent:(NSString *)parent
                           type:(NSString *)type;

@end

/**
 *  Deletes a FHIR resource. Implements the FHIR standard delete interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#delete),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#delete),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#delete)). Note:
 *  Unless resource versioning is disabled by setting the
 *  disable_resource_versioning flag on the FHIR store, the deleted resources
 *  will be moved to a history repository that can still be retrieved through
 *  vread and related methods, unless they are removed by the purge method. For
 *  samples that show how to call `delete`, see [Deleting a FHIR
 *  resource](/healthcare/docs/how-tos/fhir-resources#deleting_a_fhir_resource).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirDeleteWithname:]

/** The name of the resource to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Deletes a FHIR resource. Implements the FHIR standard delete interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#delete),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#delete),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#delete)). Note:
 *  Unless resource versioning is disabled by setting the
 *  disable_resource_versioning flag on the FHIR store, the deleted resources
 *  will be moved to a history repository that can still be retrieved through
 *  vread and related methods, unless they are removed by the purge method. For
 *  samples that show how to call `delete`, see [Deleting a FHIR
 *  resource](/healthcare/docs/how-tos/fhir-resources#deleting_a_fhir_resource).
 *
 *  @param name The name of the resource to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Executes all the requests in the given Bundle. Implements the FHIR standard
 *  batch/transaction interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#transaction),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#transaction),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#transaction)).
 *  Supports all interactions within a bundle, except search. This method
 *  accepts Bundles of type `batch` and `transaction`, processing them according
 *  to the batch processing rules
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.1),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.1),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#brules)) and
 *  transaction processing rules
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.2),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.2),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#trules)). The
 *  request body must contain a JSON-encoded FHIR `Bundle` resource, and the
 *  request headers must contain `Content-Type: application/fhir+json`. For a
 *  batch bundle or a successful transaction the response body will contain a
 *  JSON-encoded representation of a `Bundle` resource of type `batch-response`
 *  or `transaction-response` containing one entry for each entry in the
 *  request, with the outcome of processing the entry. In the case of an error
 *  for a transaction bundle, the response body will contain a JSON-encoded
 *  `OperationOutcome` resource describing the reason for the error. If the
 *  request cannot be mapped to a valid API method on a FHIR store, a generic
 *  GCP error might be returned instead. For samples that show how to call
 *  `executeBundle`, see [Managing FHIR resources using FHIR
 *  bundles](/healthcare/docs/how-tos/fhir-bundles).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.executeBundle
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirExecuteBundle : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirExecuteBundleWithObject:parent:]

/** Name of the FHIR store in which this bundle will be executed. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Executes all the requests in the given Bundle. Implements the FHIR standard
 *  batch/transaction interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#transaction),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#transaction),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#transaction)).
 *  Supports all interactions within a bundle, except search. This method
 *  accepts Bundles of type `batch` and `transaction`, processing them according
 *  to the batch processing rules
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.1),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.1),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#brules)) and
 *  transaction processing rules
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.2),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.2),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#trules)). The
 *  request body must contain a JSON-encoded FHIR `Bundle` resource, and the
 *  request headers must contain `Content-Type: application/fhir+json`. For a
 *  batch bundle or a successful transaction the response body will contain a
 *  JSON-encoded representation of a `Bundle` resource of type `batch-response`
 *  or `transaction-response` containing one entry for each entry in the
 *  request, with the outcome of processing the entry. In the case of an error
 *  for a transaction bundle, the response body will contain a JSON-encoded
 *  `OperationOutcome` resource describing the reason for the error. If the
 *  request cannot be mapped to a valid API method on a FHIR store, a generic
 *  GCP error might be returned instead. For samples that show how to call
 *  `executeBundle`, see [Managing FHIR resources using FHIR
 *  bundles](/healthcare/docs/how-tos/fhir-bundles).
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param parent Name of the FHIR store in which this bundle will be executed.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirExecuteBundle
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists all the versions of a resource (including the current version and
 *  deleted versions) from the FHIR store. Implements the per-resource form of
 *  the FHIR standard history interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#history),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#history),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#history)). On
 *  success, the response body will contain a JSON-encoded representation of a
 *  `Bundle` resource of type `history`, containing the version history sorted
 *  from most recent to oldest versions. Errors generated by the FHIR store will
 *  contain a JSON-encoded `OperationOutcome` resource describing the reason for
 *  the error. If the request cannot be mapped to a valid API method on a FHIR
 *  store, a generic GCP error might be returned instead. For samples that show
 *  how to call `history`, see [Listing FHIR resource
 *  versions](/healthcare/docs/how-tos/fhir-resources#listing_fhir_resource_versions).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.history
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirHistory : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirHistoryWithname:]

/**
 *  Only include resource versions that were current at some point during the
 *  time period specified in the date time value. The date parameter format is
 *  yyyy-mm-ddThh:mm:ss[Z|(+|-)hh:mm] Clients may specify any of the following:
 *  * An entire year: `_at=2019` * An entire month: `_at=2019-01` * A specific
 *  day: `_at=2019-01-20` * A specific second: `_at=2018-12-31T23:59:58Z`
 */
@property(nonatomic, copy, nullable) NSString *xAt;

/**
 *  The maximum number of search results on a page. If not specified, 100 is
 *  used. May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger xCount;

/**
 *  Used to retrieve the first, previous, next, or last page of resource
 *  versions when using pagination. Value should be set to the value of
 *  `_page_token` set in next or previous page links' URLs. Next and previous
 *  page are returned in the response bundle's links field, where
 *  `link.relation` is "previous" or "next". Omit `_page_token` if no previous
 *  request has been made.
 */
@property(nonatomic, copy, nullable) NSString *xPageToken;

/**
 *  Only include resource versions that were created at or after the given
 *  instant in time. The instant in time uses the format
 *  YYYY-MM-DDThh:mm:ss.sss+zz:zz (for example 2015-02-07T13:28:17.239+02:00 or
 *  2017-01-01T00:00:00Z). The time must be specified to the second and include
 *  a time zone.
 */
@property(nonatomic, copy, nullable) NSString *xSince;

/** The name of the resource to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Lists all the versions of a resource (including the current version and
 *  deleted versions) from the FHIR store. Implements the per-resource form of
 *  the FHIR standard history interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#history),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#history),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#history)). On
 *  success, the response body will contain a JSON-encoded representation of a
 *  `Bundle` resource of type `history`, containing the version history sorted
 *  from most recent to oldest versions. Errors generated by the FHIR store will
 *  contain a JSON-encoded `OperationOutcome` resource describing the reason for
 *  the error. If the request cannot be mapped to a valid API method on a FHIR
 *  store, a generic GCP error might be returned instead. For samples that show
 *  how to call `history`, see [Listing FHIR resource
 *  versions](/healthcare/docs/how-tos/fhir-resources#listing_fhir_resource_versions).
 *
 *  @param name The name of the resource to retrieve.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirHistory
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates part of an existing resource by applying the operations specified in
 *  a [JSON Patch](http://jsonpatch.com/) document. Implements the FHIR standard
 *  patch interaction
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#patch),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#patch)). DSTU2
 *  doesn't define a patch method, but the server supports it in the same way it
 *  supports STU3. The request body must contain a JSON Patch document, and the
 *  request headers must contain `Content-Type: application/json-patch+json`. On
 *  success, the response body will contain a JSON-encoded representation of the
 *  updated resource, including the server-assigned version ID. Errors generated
 *  by the FHIR store will contain a JSON-encoded `OperationOutcome` resource
 *  describing the reason for the error. If the request cannot be mapped to a
 *  valid API method on a FHIR store, a generic GCP error might be returned
 *  instead. For samples that show how to call `patch`, see [Patching a FHIR
 *  resource](/healthcare/docs/how-tos/fhir-resources#patching_a_fhir_resource).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirPatch : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirPatchWithObject:name:]

/** The name of the resource to update. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Updates part of an existing resource by applying the operations specified in
 *  a [JSON Patch](http://jsonpatch.com/) document. Implements the FHIR standard
 *  patch interaction
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#patch),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#patch)). DSTU2
 *  doesn't define a patch method, but the server supports it in the same way it
 *  supports STU3. The request body must contain a JSON Patch document, and the
 *  request headers must contain `Content-Type: application/json-patch+json`. On
 *  success, the response body will contain a JSON-encoded representation of the
 *  updated resource, including the server-assigned version ID. Errors generated
 *  by the FHIR store will contain a JSON-encoded `OperationOutcome` resource
 *  describing the reason for the error. If the request cannot be mapped to a
 *  valid API method on a FHIR store, a generic GCP error might be returned
 *  instead. For samples that show how to call `patch`, see [Patching a FHIR
 *  resource](/healthcare/docs/how-tos/fhir-resources#patching_a_fhir_resource).
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param name The name of the resource to update.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                           name:(NSString *)name;

@end

/**
 *  Retrieves a Patient resource and resources related to that patient.
 *  Implements the FHIR extended operation Patient-everything
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/patient-operations.html#everything),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/patient-operations.html#everything),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/patient-operations.html#everything)).
 *  On success, the response body will contain a JSON-encoded representation of
 *  a `Bundle` resource of type `searchset`, containing the results of the
 *  operation. Errors generated by the FHIR store will contain a JSON-encoded
 *  `OperationOutcome` resource describing the reason for the error. If the
 *  request cannot be mapped to a valid API method on a FHIR store, a generic
 *  GCP error might be returned instead. The resources in scope for the response
 *  are: * The patient resource itself. * All the resources directly referenced
 *  by the patient resource. * Resources directly referencing the patient
 *  resource that meet the inclusion criteria. The inclusion criteria are based
 *  on the membership rules in the patient compartment definition
 *  ([DSTU2](http://hl7.org/fhir/DSTU2/compartment-patient.html),
 *  [STU3](http://www.hl7.org/fhir/stu3/compartmentdefinition-patient.html),
 *  [R4](http://hl7.org/fhir/R4/compartmentdefinition-patient.html)), which
 *  details the eligible resource types and referencing search parameters. For
 *  samples that show how to call `Patient-everything`, see [Getting all patient
 *  compartment
 *  resources](/healthcare/docs/how-tos/fhir-resources#getting_all_patient_compartment_resources).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.Patient-everything
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirPatientEverything : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirPatientEverythingWithname:]

/**
 *  Maximum number of resources in a page. If not specified, 100 is used. May
 *  not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger xCount;

/**
 *  Used to retrieve the next or previous page of results when using pagination.
 *  Set `_page_token` to the value of _page_token set in next or previous page
 *  links' url. Next and previous page are returned in the response bundle's
 *  links field, where `link.relation` is "previous" or "next". Omit
 *  `_page_token` if no previous request has been made.
 */
@property(nonatomic, copy, nullable) NSString *xPageToken;

/**
 *  If provided, only resources updated after this time are returned. The time
 *  uses the format YYYY-MM-DDThh:mm:ss.sss+zz:zz. For example,
 *  `2015-02-07T13:28:17.239+02:00` or `2017-01-01T00:00:00Z`. The time must be
 *  specified to the second and include a time zone.
 */
@property(nonatomic, copy, nullable) NSString *xSince;

/**
 *  String of comma-delimited FHIR resource types. If provided, only resources
 *  of the specified resource type(s) are returned.
 */
@property(nonatomic, copy, nullable) NSString *xType;

/**
 *  The response includes records prior to the end date. If no end date is
 *  provided, all records subsequent to the start date are in scope.
 */
@property(nonatomic, copy, nullable) NSString *end;

/** Name of the `Patient` resource for which the information is required. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The response includes records subsequent to the start date. If no start date
 *  is provided, all records prior to the end date are in scope.
 */
@property(nonatomic, copy, nullable) NSString *start;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Retrieves a Patient resource and resources related to that patient.
 *  Implements the FHIR extended operation Patient-everything
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/patient-operations.html#everything),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/patient-operations.html#everything),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/patient-operations.html#everything)).
 *  On success, the response body will contain a JSON-encoded representation of
 *  a `Bundle` resource of type `searchset`, containing the results of the
 *  operation. Errors generated by the FHIR store will contain a JSON-encoded
 *  `OperationOutcome` resource describing the reason for the error. If the
 *  request cannot be mapped to a valid API method on a FHIR store, a generic
 *  GCP error might be returned instead. The resources in scope for the response
 *  are: * The patient resource itself. * All the resources directly referenced
 *  by the patient resource. * Resources directly referencing the patient
 *  resource that meet the inclusion criteria. The inclusion criteria are based
 *  on the membership rules in the patient compartment definition
 *  ([DSTU2](http://hl7.org/fhir/DSTU2/compartment-patient.html),
 *  [STU3](http://www.hl7.org/fhir/stu3/compartmentdefinition-patient.html),
 *  [R4](http://hl7.org/fhir/R4/compartmentdefinition-patient.html)), which
 *  details the eligible resource types and referencing search parameters. For
 *  samples that show how to call `Patient-everything`, see [Getting all patient
 *  compartment
 *  resources](/healthcare/docs/how-tos/fhir-resources#getting_all_patient_compartment_resources).
 *
 *  @param name Name of the `Patient` resource for which the information is
 *    required.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirPatientEverything
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the contents of a FHIR resource. Implements the FHIR standard read
 *  interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#read),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#read),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#read)). Also
 *  supports the FHIR standard conditional read interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#cread),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#cread),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#cread)) specified
 *  by supplying an `If-Modified-Since` header with a date/time value or an
 *  `If-None-Match` header with an ETag value. On success, the response body
 *  will contain a JSON-encoded representation of the resource. Errors generated
 *  by the FHIR store will contain a JSON-encoded `OperationOutcome` resource
 *  describing the reason for the error. If the request cannot be mapped to a
 *  valid API method on a FHIR store, a generic GCP error might be returned
 *  instead. For samples that show how to call `read`, see [Getting a FHIR
 *  resource](/healthcare/docs/how-tos/fhir-resources#getting_a_fhir_resource).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.read
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirRead : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirReadWithname:]

/** The name of the resource to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Gets the contents of a FHIR resource. Implements the FHIR standard read
 *  interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#read),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#read),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#read)). Also
 *  supports the FHIR standard conditional read interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#cread),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#cread),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#cread)) specified
 *  by supplying an `If-Modified-Since` header with a date/time value or an
 *  `If-None-Match` header with an ETag value. On success, the response body
 *  will contain a JSON-encoded representation of the resource. Errors generated
 *  by the FHIR store will contain a JSON-encoded `OperationOutcome` resource
 *  describing the reason for the error. If the request cannot be mapped to a
 *  valid API method on a FHIR store, a generic GCP error might be returned
 *  instead. For samples that show how to call `read`, see [Getting a FHIR
 *  resource](/healthcare/docs/how-tos/fhir-resources#getting_a_fhir_resource).
 *
 *  @param name The name of the resource to retrieve.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirRead
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes all the historical versions of a resource (excluding the current
 *  version) from the FHIR store. To remove all versions of a resource, first
 *  delete the current version and then call this method. This is not a FHIR
 *  standard operation. For samples that show how to call `Resource-purge`, see
 *  [Deleting historical versions of a FHIR
 *  resource](/healthcare/docs/how-tos/fhir-resources#deleting_historical_versions_of_a_fhir_resource).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.Resource-purge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirResourcePurge : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirResourcePurgeWithname:]

/** The name of the resource to purge. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes all the historical versions of a resource (excluding the current
 *  version) from the FHIR store. To remove all versions of a resource, first
 *  delete the current version and then call this method. This is not a FHIR
 *  standard operation. For samples that show how to call `Resource-purge`, see
 *  [Deleting historical versions of a FHIR
 *  resource](/healthcare/docs/how-tos/fhir-resources#deleting_historical_versions_of_a_fhir_resource).
 *
 *  @param name The name of the resource to purge.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirResourcePurge
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Searches for resources in the given FHIR store according to criteria
 *  specified as query parameters. Implements the FHIR standard search
 *  interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search)) using the
 *  search semantics described in the FHIR Search specification
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/search.html)). Supports
 *  three methods of search defined by the specification: * `GET
 *  [base]?[parameters]` to search across all resources. * `GET
 *  [base]/[type]?[parameters]` to search resources of a specified type. * `POST
 *  [base]/[type]/_search?[parameters]` as an alternate form having the same
 *  semantics as the `GET` method. The `GET` methods do not support compartment
 *  searches. The `POST` method does not support
 *  `application/x-www-form-urlencoded` search parameters. On success, the
 *  response body will contain a JSON-encoded representation of a `Bundle`
 *  resource of type `searchset`, containing the results of the search. Errors
 *  generated by the FHIR store will contain a JSON-encoded `OperationOutcome`
 *  resource describing the reason for the error. If the request cannot be
 *  mapped to a valid API method on a FHIR store, a generic GCP error might be
 *  returned instead. The server's capability statement, retrieved through
 *  capabilities, indicates what search parameters are supported on each FHIR
 *  resource. A list of all search parameters defined by the specification can
 *  be found in the FHIR Search Parameter Registry
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)).
 *  FHIR search parameters for DSTU2 can be found on each resource's definition
 *  page. Supported search modifiers: `:missing`, `:exact`, `:contains`,
 *  `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and
 *  `:recurse`. Supported search result parameters: `_sort`, `_count`,
 *  `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and
 *  `_elements`. The maximum number of search results returned defaults to 100,
 *  which can be overridden by the `_count` parameter up to a maximum limit of
 *  1000. If there are additional results, the returned `Bundle` will contain
 *  pagination links. Resources with a total size larger than 5MB or a field
 *  count larger than 50,000 might not be fully searchable as the server might
 *  trim its generated search index in those cases. Note: FHIR resources are
 *  indexed asynchronously, so there might be a slight delay between the time a
 *  resource is created or changes and when the change is reflected in search
 *  results. For samples and detailed information, see [Searching for FHIR
 *  resources](/healthcare/docs/how-tos/fhir-search) and [Advanced FHIR search
 *  features](/healthcare/docs/how-tos/fhir-advanced-search).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirSearch : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirSearchWithObject:parent:]

/** Name of the FHIR store to retrieve resources from. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Searches for resources in the given FHIR store according to criteria
 *  specified as query parameters. Implements the FHIR standard search
 *  interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search)) using the
 *  search semantics described in the FHIR Search specification
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/search.html)). Supports
 *  three methods of search defined by the specification: * `GET
 *  [base]?[parameters]` to search across all resources. * `GET
 *  [base]/[type]?[parameters]` to search resources of a specified type. * `POST
 *  [base]/[type]/_search?[parameters]` as an alternate form having the same
 *  semantics as the `GET` method. The `GET` methods do not support compartment
 *  searches. The `POST` method does not support
 *  `application/x-www-form-urlencoded` search parameters. On success, the
 *  response body will contain a JSON-encoded representation of a `Bundle`
 *  resource of type `searchset`, containing the results of the search. Errors
 *  generated by the FHIR store will contain a JSON-encoded `OperationOutcome`
 *  resource describing the reason for the error. If the request cannot be
 *  mapped to a valid API method on a FHIR store, a generic GCP error might be
 *  returned instead. The server's capability statement, retrieved through
 *  capabilities, indicates what search parameters are supported on each FHIR
 *  resource. A list of all search parameters defined by the specification can
 *  be found in the FHIR Search Parameter Registry
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)).
 *  FHIR search parameters for DSTU2 can be found on each resource's definition
 *  page. Supported search modifiers: `:missing`, `:exact`, `:contains`,
 *  `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and
 *  `:recurse`. Supported search result parameters: `_sort`, `_count`,
 *  `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and
 *  `_elements`. The maximum number of search results returned defaults to 100,
 *  which can be overridden by the `_count` parameter up to a maximum limit of
 *  1000. If there are additional results, the returned `Bundle` will contain
 *  pagination links. Resources with a total size larger than 5MB or a field
 *  count larger than 50,000 might not be fully searchable as the server might
 *  trim its generated search index in those cases. Note: FHIR resources are
 *  indexed asynchronously, so there might be a slight delay between the time a
 *  resource is created or changes and when the change is reflected in search
 *  results. For samples and detailed information, see [Searching for FHIR
 *  resources](/healthcare/docs/how-tos/fhir-search) and [Advanced FHIR search
 *  features](/healthcare/docs/how-tos/fhir-advanced-search).
 *
 *  @param object The @c GTLRCloudHealthcare_SearchResourcesRequest to include
 *    in the query.
 *  @param parent Name of the FHIR store to retrieve resources from.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirSearch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SearchResourcesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Updates the entire contents of a resource. Implements the FHIR standard
 *  update interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#update),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#update),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#update)). If the
 *  specified resource does not exist and the FHIR store has
 *  enable_update_create set, creates the resource with the client-specified ID.
 *  The request body must contain a JSON-encoded FHIR resource, and the request
 *  headers must contain `Content-Type: application/fhir+json`. The resource
 *  must contain an `id` element having an identical value to the ID in the REST
 *  path of the request. On success, the response body will contain a
 *  JSON-encoded representation of the updated resource, including the
 *  server-assigned version ID. Errors generated by the FHIR store will contain
 *  a JSON-encoded `OperationOutcome` resource describing the reason for the
 *  error. If the request cannot be mapped to a valid API method on a FHIR
 *  store, a generic GCP error might be returned instead. For samples that show
 *  how to call `update`, see [Updating a FHIR
 *  resource](/healthcare/docs/how-tos/fhir-resources#updating_a_fhir_resource).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirUpdate : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirUpdateWithObject:name:]

/** The name of the resource to update. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Updates the entire contents of a resource. Implements the FHIR standard
 *  update interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#update),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#update),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#update)). If the
 *  specified resource does not exist and the FHIR store has
 *  enable_update_create set, creates the resource with the client-specified ID.
 *  The request body must contain a JSON-encoded FHIR resource, and the request
 *  headers must contain `Content-Type: application/fhir+json`. The resource
 *  must contain an `id` element having an identical value to the ID in the REST
 *  path of the request. On success, the response body will contain a
 *  JSON-encoded representation of the updated resource, including the
 *  server-assigned version ID. Errors generated by the FHIR store will contain
 *  a JSON-encoded `OperationOutcome` resource describing the reason for the
 *  error. If the request cannot be mapped to a valid API method on a FHIR
 *  store, a generic GCP error might be returned instead. For samples that show
 *  how to call `update`, see [Updating a FHIR
 *  resource](/healthcare/docs/how-tos/fhir-resources#updating_a_fhir_resource).
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param name The name of the resource to update.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirUpdate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the contents of a version (current or historical) of a FHIR resource by
 *  version ID. Implements the FHIR standard vread interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#vread),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#vread),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#vread)). On
 *  success, the response body will contain a JSON-encoded representation of the
 *  resource. Errors generated by the FHIR store will contain a JSON-encoded
 *  `OperationOutcome` resource describing the reason for the error. If the
 *  request cannot be mapped to a valid API method on a FHIR store, a generic
 *  GCP error might be returned instead. For samples that show how to call
 *  `vread`, see [Retrieving a FHIR resource
 *  version](/healthcare/docs/how-tos/fhir-resources#retrieving_a_fhir_resource_version).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.vread
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirVread : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirVreadWithname:]

/** The name of the resource version to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Gets the contents of a version (current or historical) of a FHIR resource by
 *  version ID. Implements the FHIR standard vread interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#vread),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#vread),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#vread)). On
 *  success, the response body will contain a JSON-encoded representation of the
 *  resource. Errors generated by the FHIR store will contain a JSON-encoded
 *  `OperationOutcome` resource describing the reason for the error. If the
 *  request cannot be mapped to a valid API method on a FHIR store, a generic
 *  GCP error might be returned instead. For samples that show how to call
 *  `vread`, see [Retrieving a FHIR resource
 *  version](/healthcare/docs/how-tos/fhir-resources#retrieving_a_fhir_resource_version).
 *
 *  @param name The name of the resource version to retrieve.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirVread
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the configuration of the specified FHIR store.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresGetWithname:]

/** The resource name of the FHIR store to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_FhirStore.
 *
 *  Gets the configuration of the specified FHIR store.
 *
 *  @param name The resource name of the FHIR store to get.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresGetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresGetIamPolicyWithresource:]

/**
 *  Optional. The policy format version to be returned. Valid values are 0, 1,
 *  and 3. Requests specifying an invalid value will be rejected. Requests for
 *  policies with any conditional bindings must specify version 3. Policies
 *  without any conditional bindings may specify any valid value or leave the
 *  field unset. To learn which resources support conditions in their IAM
 *  policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Imports resources to the FHIR store by loading data from the specified
 *  sources. This method is optimized to load large quantities of data using
 *  import semantics that ignore some FHIR store configuration options and are
 *  not suitable for all use cases. It is primarily intended to load data into
 *  an empty FHIR store that is not being used by other clients. In cases where
 *  this method is not appropriate, consider using ExecuteBundle to load data.
 *  Every resource in the input must contain a client-supplied ID. Each resource
 *  is stored using the supplied ID regardless of the enable_update_create
 *  setting on the FHIR store. The import process does not enforce referential
 *  integrity, regardless of the disable_referential_integrity setting on the
 *  FHIR store. This allows the import of resources with arbitrary
 *  interdependencies without considering grouping or ordering, but if the input
 *  data contains invalid references or if some resources fail to be imported,
 *  the FHIR store might be left in a state that violates referential integrity.
 *  The import process does not trigger Pub/Sub notification or BigQuery
 *  streaming update, regardless of how those are configured on the FHIR store.
 *  If a resource with the specified ID already exists, the most recent version
 *  of the resource is overwritten without creating a new historical version,
 *  regardless of the disable_resource_versioning setting on the FHIR store. If
 *  transient failures occur during the import, it's possible that successfully
 *  imported resources will be overwritten more than once. The import operation
 *  is idempotent unless the input data contains multiple valid resources with
 *  the same ID but different contents. In that case, after the import
 *  completes, the store contains exactly one resource with that ID but there is
 *  no ordering guarantee on which version of the contents it will have. The
 *  operation result counters do not count duplicate IDs as an error and count
 *  one success for each resource in the input, which might result in a success
 *  count larger than the number of resources in the FHIR store. This often
 *  occurs when importing data organized in bundles produced by
 *  Patient-everything where each bundle contains its own copy of a resource
 *  such as Practitioner that might be referred to by many patients. If some
 *  resources fail to import, for example due to parsing errors, successfully
 *  imported resources are not rolled back. The location and format of the input
 *  data is specified by the parameters in ImportResourcesRequest. Note that if
 *  no format is specified, this method assumes the `BUNDLE` format. When using
 *  the `BUNDLE` format this method ignores the `Bundle.type` field, except that
 *  `history` bundles are rejected, and does not apply any of the bundle
 *  processing semantics for batch or transaction bundles. Unlike in
 *  ExecuteBundle, transaction bundles are not executed as a single transaction
 *  and bundle-internal references are not rewritten. The bundle is treated as a
 *  collection of resources to be written as provided in
 *  `Bundle.entry.resource`, ignoring `Bundle.entry.request`. As an example,
 *  this allows the import of `searchset` bundles produced by a FHIR search or
 *  Patient-everything operation. This method returns an Operation that can be
 *  used to track the status of the import by calling GetOperation. Immediate
 *  fatal errors appear in the error field, errors are also logged to Cloud
 *  Logging (see [Viewing logs](/healthcare/docs/how-tos/logging)). Otherwise,
 *  when the operation finishes, a detailed response of type
 *  ImportResourcesResponse is returned in the response field. The metadata
 *  field type for this operation is OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresImport : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresImportWithObject:name:]

/**
 *  The name of the FHIR store to import FHIR resources to, in the format of
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Imports resources to the FHIR store by loading data from the specified
 *  sources. This method is optimized to load large quantities of data using
 *  import semantics that ignore some FHIR store configuration options and are
 *  not suitable for all use cases. It is primarily intended to load data into
 *  an empty FHIR store that is not being used by other clients. In cases where
 *  this method is not appropriate, consider using ExecuteBundle to load data.
 *  Every resource in the input must contain a client-supplied ID. Each resource
 *  is stored using the supplied ID regardless of the enable_update_create
 *  setting on the FHIR store. The import process does not enforce referential
 *  integrity, regardless of the disable_referential_integrity setting on the
 *  FHIR store. This allows the import of resources with arbitrary
 *  interdependencies without considering grouping or ordering, but if the input
 *  data contains invalid references or if some resources fail to be imported,
 *  the FHIR store might be left in a state that violates referential integrity.
 *  The import process does not trigger Pub/Sub notification or BigQuery
 *  streaming update, regardless of how those are configured on the FHIR store.
 *  If a resource with the specified ID already exists, the most recent version
 *  of the resource is overwritten without creating a new historical version,
 *  regardless of the disable_resource_versioning setting on the FHIR store. If
 *  transient failures occur during the import, it's possible that successfully
 *  imported resources will be overwritten more than once. The import operation
 *  is idempotent unless the input data contains multiple valid resources with
 *  the same ID but different contents. In that case, after the import
 *  completes, the store contains exactly one resource with that ID but there is
 *  no ordering guarantee on which version of the contents it will have. The
 *  operation result counters do not count duplicate IDs as an error and count
 *  one success for each resource in the input, which might result in a success
 *  count larger than the number of resources in the FHIR store. This often
 *  occurs when importing data organized in bundles produced by
 *  Patient-everything where each bundle contains its own copy of a resource
 *  such as Practitioner that might be referred to by many patients. If some
 *  resources fail to import, for example due to parsing errors, successfully
 *  imported resources are not rolled back. The location and format of the input
 *  data is specified by the parameters in ImportResourcesRequest. Note that if
 *  no format is specified, this method assumes the `BUNDLE` format. When using
 *  the `BUNDLE` format this method ignores the `Bundle.type` field, except that
 *  `history` bundles are rejected, and does not apply any of the bundle
 *  processing semantics for batch or transaction bundles. Unlike in
 *  ExecuteBundle, transaction bundles are not executed as a single transaction
 *  and bundle-internal references are not rewritten. The bundle is treated as a
 *  collection of resources to be written as provided in
 *  `Bundle.entry.resource`, ignoring `Bundle.entry.request`. As an example,
 *  this allows the import of `searchset` bundles produced by a FHIR search or
 *  Patient-everything operation. This method returns an Operation that can be
 *  used to track the status of the import by calling GetOperation. Immediate
 *  fatal errors appear in the error field, errors are also logged to Cloud
 *  Logging (see [Viewing logs](/healthcare/docs/how-tos/logging)). Otherwise,
 *  when the operation finishes, a detailed response of type
 *  ImportResourcesResponse is returned in the response field. The metadata
 *  field type for this operation is OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_ImportResourcesRequest to include
 *    in the query.
 *  @param name The name of the FHIR store to import FHIR resources to, in the
 *    format of
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresImport
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ImportResourcesRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists the FHIR stores in the given dataset.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresListWithparent:]

/**
 *  Restricts stores returned to those matching a filter. Syntax:
 *  https://cloud.google.com/appengine/docs/standard/python/search/query_strings
 *  Only filtering on labels is supported, for example `labels.key=value`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Limit on the number of FHIR stores to return in a single response. If not
 *  specified, 100 is used. May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from the previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the dataset. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListFhirStoresResponse.
 *
 *  Lists the FHIR stores in the given dataset.
 *
 *  @param parent Name of the dataset.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the configuration of the specified FHIR store.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresPatch : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresPatchWithObject:name:]

/**
 *  Output only. Resource name of the FHIR store, of the form
 *  `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_FhirStore.
 *
 *  Updates the configuration of the specified FHIR store.
 *
 *  @param object The @c GTLRCloudHealthcare_FhirStore to include in the query.
 *  @param name Output only. Resource name of the FHIR store, of the form
 *    `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_FhirStore *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresSetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRCloudHealthcare_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresTestIamPermissions : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRCloudHealthcare_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Gets any metadata associated with a dataset.
 *
 *  Method: healthcare.projects.locations.datasets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsGetWithname:]

/**
 *  The name of the dataset to read. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Dataset.
 *
 *  Gets any metadata associated with a dataset.
 *
 *  @param name The name of the dataset to read. For example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: healthcare.projects.locations.datasets.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsGetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsGetIamPolicyWithresource:]

/**
 *  Optional. The policy format version to be returned. Valid values are 0, 1,
 *  and 3. Requests specifying an invalid value will be rejected. Requests for
 *  policies with any conditional bindings must specify version 3. Policies
 *  without any conditional bindings may specify any valid value or leave the
 *  field unset. To learn which resources support conditions in their IAM
 *  policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Creates a new HL7v2 store within the parent dataset.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresCreate : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresCreateWithObject:parent:]

/**
 *  The ID of the HL7v2 store that is being created. The string must match the
 *  following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.
 */
@property(nonatomic, copy, nullable) NSString *hl7V2StoreId;

/** The name of the dataset this HL7v2 store belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Hl7V2Store.
 *
 *  Creates a new HL7v2 store within the parent dataset.
 *
 *  @param object The @c GTLRCloudHealthcare_Hl7V2Store to include in the query.
 *  @param parent The name of the dataset this HL7v2 store belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Hl7V2Store *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the specified HL7v2 store and removes all messages that it contains.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresDeleteWithname:]

/** The resource name of the HL7v2 store to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified HL7v2 store and removes all messages that it contains.
 *
 *  @param name The resource name of the HL7v2 store to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the specified HL7v2 store.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresGetWithname:]

/** The resource name of the HL7v2 store to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Hl7V2Store.
 *
 *  Gets the specified HL7v2 store.
 *
 *  @param name The resource name of the HL7v2 store to get.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresGetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresGetIamPolicyWithresource:]

/**
 *  Optional. The policy format version to be returned. Valid values are 0, 1,
 *  and 3. Requests specifying an invalid value will be rejected. Requests for
 *  policies with any conditional bindings must specify version 3. Policies
 *  without any conditional bindings may specify any valid value or leave the
 *  field unset. To learn which resources support conditions in their IAM
 *  policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists the HL7v2 stores in the given dataset.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresListWithparent:]

/**
 *  Restricts stores returned to those matching a filter. Syntax:
 *  https://cloud.google.com/appengine/docs/standard/python/search/query_strings
 *  Only filtering on labels is supported. For example, `labels.key=value`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Limit on the number of HL7v2 stores to return in a single response. If not
 *  specified, 100 is used. May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from the previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the dataset. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListHl7V2StoresResponse.
 *
 *  Lists the HL7v2 stores in the given dataset.
 *
 *  @param parent Name of the dataset.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Parses and stores an HL7v2 message. This method triggers an asynchronous
 *  notification to any Cloud Pub/Sub topic configured in
 *  projects.locations.datasets.hl7V2Stores.Hl7V2NotificationConfig, if the
 *  filtering matches the message. If an MLLP adapter is configured to listen to
 *  a Cloud Pub/Sub topic, the adapter transmits the message when a notification
 *  is received.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesCreate : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresMessagesCreateWithObject:parent:]

/** The name of the dataset this message belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Message.
 *
 *  Parses and stores an HL7v2 message. This method triggers an asynchronous
 *  notification to any Cloud Pub/Sub topic configured in
 *  projects.locations.datasets.hl7V2Stores.Hl7V2NotificationConfig, if the
 *  filtering matches the message. If an MLLP adapter is configured to listen to
 *  a Cloud Pub/Sub topic, the adapter transmits the message when a notification
 *  is received.
 *
 *  @param object The @c GTLRCloudHealthcare_CreateMessageRequest to include in
 *    the query.
 *  @param parent The name of the dataset this message belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_CreateMessageRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an HL7v2 message.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresMessagesDeleteWithname:]

/** The resource name of the HL7v2 message to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes an HL7v2 message.
 *
 *  @param name The resource name of the HL7v2 message to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets an HL7v2 message.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresMessagesGetWithname:]

/** The resource name of the HL7v2 message to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies which parts of the Message resource to return in the response.
 *  When unspecified, equivalent to FULL.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudHealthcareViewMessageViewUnspecified Not specified,
 *        equivalent to FULL. (Value: "MESSAGE_VIEW_UNSPECIFIED")
 *    @arg @c kGTLRCloudHealthcareViewRawOnly Server responses include all the
 *        message fields except parsed_data field. (Value: "RAW_ONLY")
 *    @arg @c kGTLRCloudHealthcareViewParsedOnly Server responses include all
 *        the message fields except data field. (Value: "PARSED_ONLY")
 *    @arg @c kGTLRCloudHealthcareViewFull Server responses include all the
 *        message fields. (Value: "FULL")
 *    @arg @c kGTLRCloudHealthcareViewBasic Server responses include only the
 *        name field. (Value: "BASIC")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRCloudHealthcare_Message.
 *
 *  Gets an HL7v2 message.
 *
 *  @param name The resource name of the HL7v2 message to retrieve.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Parses and stores an HL7v2 message. This method triggers an asynchronous
 *  notification to any Cloud Pub/Sub topic configured in
 *  projects.locations.datasets.hl7V2Stores.Hl7V2NotificationConfig, if the
 *  filtering matches the message. If an MLLP adapter is configured to listen to
 *  a Cloud Pub/Sub topic, the adapter transmits the message when a notification
 *  is received. This method also generates a response containing an HL7v2
 *  acknowledgement (`ACK`) message when successful or a negative
 *  acknowledgement (`NACK`) message in case of error, suitable for replying to
 *  HL7v2 interface systems that expect these acknowledgements.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.ingest
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesIngest : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresMessagesIngestWithObject:parent:]

/** The name of the HL7v2 store this message belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_IngestMessageResponse.
 *
 *  Parses and stores an HL7v2 message. This method triggers an asynchronous
 *  notification to any Cloud Pub/Sub topic configured in
 *  projects.locations.datasets.hl7V2Stores.Hl7V2NotificationConfig, if the
 *  filtering matches the message. If an MLLP adapter is configured to listen to
 *  a Cloud Pub/Sub topic, the adapter transmits the message when a notification
 *  is received. This method also generates a response containing an HL7v2
 *  acknowledgement (`ACK`) message when successful or a negative
 *  acknowledgement (`NACK`) message in case of error, suitable for replying to
 *  HL7v2 interface systems that expect these acknowledgements.
 *
 *  @param object The @c GTLRCloudHealthcare_IngestMessageRequest to include in
 *    the query.
 *  @param parent The name of the HL7v2 store this message belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesIngest
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_IngestMessageRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists all the messages in the given HL7v2 store with support for filtering.
 *  Note: HL7v2 messages are indexed asynchronously, so there might be a slight
 *  delay between the time a message is created and when it can be found through
 *  a filter.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresMessagesListWithparent:]

/**
 *  Restricts messages returned to those matching a filter. Syntax:
 *  https://cloud.google.com/appengine/docs/standard/python/search/query_strings
 *  Fields/functions available for filtering are: * `message_type`, from the
 *  MSH-9.1 field. For example, `NOT message_type = "ADT"`. * `send_date` or
 *  `sendDate`, the YYYY-MM-DD date the message was sent in the dataset's
 *  time_zone, from the MSH-7 segment. For example, `send_date < "2017-01-02"`.
 *  * `send_time`, the timestamp when the message was sent, using the RFC3339
 *  time format for comparisons, from the MSH-7 segment. For example, `send_time
 *  < "2017-01-02T00:00:00-05:00"`. * `send_facility`, the care center that the
 *  message came from, from the MSH-4 segment. For example, `send_facility =
 *  "ABC"`. * `PatientId(value, type)`, which matches if the message lists a
 *  patient having an ID of the given value and type in the PID-2, PID-3, or
 *  PID-4 segments. For example, `PatientId("123456", "MRN")`. * `labels.x`, a
 *  string value of the label with key `x` as set using the Message.labels map.
 *  For example, `labels."priority"="high"`. The operator `:*` can be used to
 *  assert the existence of a label. For example, `labels."priority":*`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Orders messages returned by the specified order_by clause. Syntax:
 *  https://cloud.google.com/apis/design/design_patterns#sorting_order Fields
 *  available for ordering are: * `send_time`
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Limit on the number of messages to return in a single response. If not
 *  specified, 100 is used. May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from the previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the HL7v2 store to retrieve messages from. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Specifies the parts of the Message to return in the response. When
 *  unspecified, equivalent to BASIC. Setting this to anything other than BASIC
 *  with a `page_size` larger than the default can generate a large response,
 *  which impacts the performance of this method.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudHealthcareViewMessageViewUnspecified Not specified,
 *        equivalent to FULL. (Value: "MESSAGE_VIEW_UNSPECIFIED")
 *    @arg @c kGTLRCloudHealthcareViewRawOnly Server responses include all the
 *        message fields except parsed_data field. (Value: "RAW_ONLY")
 *    @arg @c kGTLRCloudHealthcareViewParsedOnly Server responses include all
 *        the message fields except data field. (Value: "PARSED_ONLY")
 *    @arg @c kGTLRCloudHealthcareViewFull Server responses include all the
 *        message fields. (Value: "FULL")
 *    @arg @c kGTLRCloudHealthcareViewBasic Server responses include only the
 *        name field. (Value: "BASIC")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListMessagesResponse.
 *
 *  Lists all the messages in the given HL7v2 store with support for filtering.
 *  Note: HL7v2 messages are indexed asynchronously, so there might be a slight
 *  delay between the time a message is created and when it can be found through
 *  a filter.
 *
 *  @param parent Name of the HL7v2 store to retrieve messages from.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update the message. The contents of the message in Message.data and data
 *  extracted from the contents such as Message.create_time cannot be altered.
 *  Only the Message.labels field is allowed to be updated. The labels in the
 *  request are merged with the existing set of labels. Existing labels with the
 *  same keys are updated.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesPatch : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresMessagesPatchWithObject:name:]

/**
 *  Resource name of the Message, of the form
 *  `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.
 *  Assigned by the server.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_Message.
 *
 *  Update the message. The contents of the message in Message.data and data
 *  extracted from the contents such as Message.create_time cannot be altered.
 *  Only the Message.labels field is allowed to be updated. The labels in the
 *  request are merged with the existing set of labels. Existing labels with the
 *  same keys are updated.
 *
 *  @param object The @c GTLRCloudHealthcare_Message to include in the query.
 *  @param name Resource name of the Message, of the form
 *    `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.
 *    Assigned by the server.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Message *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the HL7v2 store.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresPatch : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresPatchWithObject:name:]

/**
 *  Resource name of the HL7v2 store, of the form
 *  `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_Hl7V2Store.
 *
 *  Updates the HL7v2 store.
 *
 *  @param object The @c GTLRCloudHealthcare_Hl7V2Store to include in the query.
 *  @param name Resource name of the HL7v2 store, of the form
 *    `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Hl7V2Store *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresSetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRCloudHealthcare_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresTestIamPermissions : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRCloudHealthcare_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists the health datasets in the current project.
 *
 *  Method: healthcare.projects.locations.datasets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsListWithparent:]

/**
 *  The maximum number of items to return. If not specified, 100 is used. May
 *  not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The name of the project whose datasets should be listed. For example,
 *  `projects/{project_id}/locations/{location_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListDatasetsResponse.
 *
 *  Lists the health datasets in the current project.
 *
 *  @param parent The name of the project whose datasets should be listed. For
 *    example, `projects/{project_id}/locations/{location_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: healthcare.projects.locations.datasets.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsOperationsCancel : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsOperationsCancelWithObject:name:]

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRCloudHealthcare_CancelOperationRequest to include
 *    in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: healthcare.projects.locations.datasets.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsOperationsGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: healthcare.projects.locations.datasets.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsOperationsList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsOperationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates dataset metadata.
 *
 *  Method: healthcare.projects.locations.datasets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsPatch : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsPatchWithObject:name:]

/**
 *  Resource name of the dataset, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_Dataset.
 *
 *  Updates dataset metadata.
 *
 *  @param object The @c GTLRCloudHealthcare_Dataset to include in the query.
 *  @param name Resource name of the dataset, of the form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Dataset *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: healthcare.projects.locations.datasets.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsSetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRCloudHealthcare_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: healthcare.projects.locations.datasets.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsTestIamPermissions : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRCloudHealthcare_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Gets information about a location.
 *
 *  Method: healthcare.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: healthcare.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
