// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Healthcare API (healthcare/v1alpha2)
// Documentation:
//   https://cloud.google.com/healthcare

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudHealthcare_Annotation;
@class GTLRCloudHealthcare_AnnotationStore;
@class GTLRCloudHealthcare_CreateMessageRequest;
@class GTLRCloudHealthcare_Dataset;
@class GTLRCloudHealthcare_DeidentifyDatasetRequest;
@class GTLRCloudHealthcare_DicomStore;
@class GTLRCloudHealthcare_ExportDicomDataRequest;
@class GTLRCloudHealthcare_ExportResourcesRequest;
@class GTLRCloudHealthcare_FhirStore;
@class GTLRCloudHealthcare_GetIamPolicyRequest;
@class GTLRCloudHealthcare_Hl7V2Store;
@class GTLRCloudHealthcare_HttpBody;
@class GTLRCloudHealthcare_ImportDicomDataRequest;
@class GTLRCloudHealthcare_ImportResourcesRequest;
@class GTLRCloudHealthcare_IngestMessageRequest;
@class GTLRCloudHealthcare_Message;
@class GTLRCloudHealthcare_SearchResourcesRequest;
@class GTLRCloudHealthcare_SetIamPolicyRequest;
@class GTLRCloudHealthcare_TestIamPermissionsRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// view

/** Value: "FULL" */
GTLR_EXTERN NSString * const kGTLRCloudHealthcareViewFull;
/** Value: "MESSAGE_VIEW_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRCloudHealthcareViewMessageViewUnspecified;
/** Value: "PARSED_ONLY" */
GTLR_EXTERN NSString * const kGTLRCloudHealthcareViewParsedOnly;
/** Value: "RAW_ONLY" */
GTLR_EXTERN NSString * const kGTLRCloudHealthcareViewRawOnly;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Cloud Healthcare query classes.
 */
@interface GTLRCloudHealthcareQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new Annotation record. It is
 *  valid to create Annotation objects for the same source more than once since
 *  a unique ID is assigned to each record by this service.
 *
 *  Method: healthcare.projects.locations.datasets.annotationStores.annotations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresAnnotationsCreate : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsAnnotationStoresAnnotationsCreateWithObject:parent:]

/**
 *  The name of the Annotation store this annotation belongs to. For example,
 *  `projects/my-project/locations/us-central1/datasets/mydataset/annotationStores/myannotationstore`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Annotation.
 *
 *  Creates a new Annotation record. It is
 *  valid to create Annotation objects for the same source more than once since
 *  a unique ID is assigned to each record by this service.
 *
 *  @param object The @c GTLRCloudHealthcare_Annotation to include in the query.
 *  @param parent The name of the Annotation store this annotation belongs to.
 *    For example,
 *    `projects/my-project/locations/us-central1/datasets/mydataset/annotationStores/myannotationstore`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresAnnotationsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Annotation *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an Annotation or returns
 *  NOT_FOUND if it does not exist.
 *
 *  Method: healthcare.projects.locations.datasets.annotationStores.annotations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresAnnotationsDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsAnnotationStoresAnnotationsDeleteWithname:]

/** The resource name of the Annotation to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes an Annotation or returns
 *  NOT_FOUND if it does not exist.
 *
 *  @param name The resource name of the Annotation to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresAnnotationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets an Annotation.
 *
 *  Method: healthcare.projects.locations.datasets.annotationStores.annotations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresAnnotationsGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsAnnotationStoresAnnotationsGetWithname:]

/** The resource name of the Annotation to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Annotation.
 *
 *  Gets an Annotation.
 *
 *  @param name The resource name of the Annotation to retrieve.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresAnnotationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the Annotations in the given
 *  Annotation store for a source
 *  resource.
 *
 *  Method: healthcare.projects.locations.datasets.annotationStores.annotations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresAnnotationsList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsAnnotationStoresAnnotationsListWithparent:]

/**
 *  Restricts Annotations returned to those matching a filter. Syntax:
 *  https://cloud.google.com/appengine/docs/standard/python/search/query_strings
 *  Fields/functions available for filtering are:
 *  - source_version
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Limit on the number of Annotations to return in a single response.
 *  If zero the default page size of 100 is used.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from the previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the Annotation store to retrieve Annotations from. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListAnnotationsResponse.
 *
 *  Lists the Annotations in the given
 *  Annotation store for a source
 *  resource.
 *
 *  @param parent Name of the Annotation store to retrieve Annotations from.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresAnnotationsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the Annotation.
 *
 *  Method: healthcare.projects.locations.datasets.annotationStores.annotations.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresAnnotationsPatch : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsAnnotationStoresAnnotationsPatchWithObject:name:]

/**
 *  Output only. Resource name of the Annotation, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}/annotations/{annotation_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition,
 *  see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_Annotation.
 *
 *  Updates the Annotation.
 *
 *  @param object The @c GTLRCloudHealthcare_Annotation to include in the query.
 *  @param name Output only. Resource name of the Annotation, of the form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}/annotations/{annotation_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresAnnotationsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Annotation *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new Annotation store within the parent dataset.
 *
 *  Method: healthcare.projects.locations.datasets.annotationStores.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresCreate : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsAnnotationStoresCreateWithObject:parent:]

/**
 *  The ID of the Annotation store that is being created.
 *  The string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.
 */
@property(nonatomic, copy, nullable) NSString *annotationStoreId;

/** The name of the dataset this Annotation store belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_AnnotationStore.
 *
 *  Creates a new Annotation store within the parent dataset.
 *
 *  @param object The @c GTLRCloudHealthcare_AnnotationStore to include in the
 *    query.
 *  @param parent The name of the dataset this Annotation store belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_AnnotationStore *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the specified Annotation store and removes all annotations that are
 *  contained within it.
 *
 *  Method: healthcare.projects.locations.datasets.annotationStores.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsAnnotationStoresDeleteWithname:]

/** The resource name of the Annotation store to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified Annotation store and removes all annotations that are
 *  contained within it.
 *
 *  @param name The resource name of the Annotation store to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the specified Annotation store or returns NOT_FOUND if it does not
 *  exist.
 *
 *  Method: healthcare.projects.locations.datasets.annotationStores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsAnnotationStoresGetWithname:]

/** The resource name of the Annotation store to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_AnnotationStore.
 *
 *  Gets the specified Annotation store or returns NOT_FOUND if it does not
 *  exist.
 *
 *  @param name The resource name of the Annotation store to get.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns NOT_FOUND error if
 *  the resource does not exist. Returns an empty policy if the resource exists
 *  but does not have a policy set.
 *  Authorization requires the Google IAM permission
 *  `healthcare.AnnotationStores.getIamPolicy` on the specified resource
 *
 *  Method: healthcare.projects.locations.datasets.annotationStores.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresGetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsAnnotationStoresGetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Gets the access control policy for a resource. Returns NOT_FOUND error if
 *  the resource does not exist. Returns an empty policy if the resource exists
 *  but does not have a policy set.
 *  Authorization requires the Google IAM permission
 *  `healthcare.AnnotationStores.getIamPolicy` on the specified resource
 *
 *  @param object The @c GTLRCloudHealthcare_GetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists the Annotation stores in the given dataset for a source store.
 *
 *  Method: healthcare.projects.locations.datasets.annotationStores.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsAnnotationStoresListWithparent:]

/**
 *  Restricts stores returned to those matching a filter. Syntax:
 *  https://cloud.google.com/appengine/docs/standard/python/search/query_strings
 *  Only filtering on labels is supported, for example `labels.key=value`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Limit on the number of Annotation stores to return in a single response.
 *  If zero the default page size of 100 is used.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from the previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the dataset. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListAnnotationStoresResponse.
 *
 *  Lists the Annotation stores in the given dataset for a source store.
 *
 *  @param parent Name of the dataset.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the specified Annotation store.
 *
 *  Method: healthcare.projects.locations.datasets.annotationStores.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresPatch : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsAnnotationStoresPatchWithObject:name:]

/**
 *  Output only. Resource name of the Annotation store, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition,
 *  see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_AnnotationStore.
 *
 *  Updates the specified Annotation store.
 *
 *  @param object The @c GTLRCloudHealthcare_AnnotationStore to include in the
 *    query.
 *  @param name Output only. Resource name of the Annotation store, of the form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_AnnotationStore *)object
                           name:(NSString *)name;

@end

/**
 *  POLICIES
 *  Sets the access control policy for a resource. Replaces any existing
 *  policy.
 *  Authorization requires the Google IAM permission
 *  'healthcare.annotationStores.setIamPolicy' on the specified resource
 *
 *  Method: healthcare.projects.locations.datasets.annotationStores.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresSetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsAnnotationStoresSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  POLICIES
 *  Sets the access control policy for a resource. Replaces any existing
 *  policy.
 *  Authorization requires the Google IAM permission
 *  'healthcare.annotationStores.setIamPolicy' on the specified resource
 *
 *  @param object The @c GTLRCloudHealthcare_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  There is no permission required to make this API call.
 *
 *  Method: healthcare.projects.locations.datasets.annotationStores.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresTestIamPermissions : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsAnnotationStoresTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  There is no permission required to make this API call.
 *
 *  @param object The @c GTLRCloudHealthcare_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsAnnotationStoresTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Creates a new health dataset. Results are returned through the
 *  Operation interface which returns either an
 *  `Operation.response` which contains a Dataset or
 *  `Operation.error`. The metadata
 *  field type is OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsCreate : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsCreateWithObject:parent:]

/**
 *  The ID of the dataset that is being created.
 *  The string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.
 */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  The name of the project in which the dataset should be created (e.g.,
 *  `projects/{project_id}/locations/{location_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Creates a new health dataset. Results are returned through the
 *  Operation interface which returns either an
 *  `Operation.response` which contains a Dataset or
 *  `Operation.error`. The metadata
 *  field type is OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_Dataset to include in the query.
 *  @param parent The name of the project in which the dataset should be created
 *    (e.g.,
 *    `projects/{project_id}/locations/{location_id}`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Dataset *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a new dataset containing de-identified data from the source
 *  dataset. The metadata field type
 *  is OperationMetadata.
 *  If the request is successful, the
 *  response field type is
 *  DeidentifySummary.
 *  If errors occur,
 *  details field type is
 *  DeidentifyErrorDetails.
 *
 *  Method: healthcare.projects.locations.datasets.deidentify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDeidentify : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDeidentifyWithObject:sourceDataset:]

/**
 *  Source dataset resource name. (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
 */
@property(nonatomic, copy, nullable) NSString *sourceDataset;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Creates a new dataset containing de-identified data from the source
 *  dataset. The metadata field type
 *  is OperationMetadata.
 *  If the request is successful, the
 *  response field type is
 *  DeidentifySummary.
 *  If errors occur,
 *  details field type is
 *  DeidentifyErrorDetails.
 *
 *  @param object The @c GTLRCloudHealthcare_DeidentifyDatasetRequest to include
 *    in the query.
 *  @param sourceDataset Source dataset resource name. (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDeidentify
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_DeidentifyDatasetRequest *)object
                  sourceDataset:(NSString *)sourceDataset;

@end

/**
 *  Deletes the specified health dataset and all data contained in the dataset.
 *  Deleting a dataset does not affect the sources from which the dataset was
 *  imported (if any).
 *
 *  Method: healthcare.projects.locations.datasets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDeleteWithname:]

/**
 *  The name of the dataset to delete (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified health dataset and all data contained in the dataset.
 *  Deleting a dataset does not affect the sources from which the dataset was
 *  imported (if any).
 *
 *  @param name The name of the dataset to delete (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new DICOM store within the parent dataset.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresCreate : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresCreateWithObject:parent:]

/**
 *  The ID of the DICOM store that is being created.
 *  Any string value up to 256 characters in length.
 */
@property(nonatomic, copy, nullable) NSString *dicomStoreId;

/** The name of the dataset this DICOM store belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_DicomStore.
 *
 *  Creates a new DICOM store within the parent dataset.
 *
 *  @param object The @c GTLRCloudHealthcare_DicomStore to include in the query.
 *  @param parent The name of the dataset this DICOM store belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_DicomStore *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the specified DICOM store and removes all images that are contained
 *  within it.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDeleteWithname:]

/** The resource name of the DICOM store to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified DICOM store and removes all images that are contained
 *  within it.
 *
 *  @param name The resource name of the DICOM store to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  SearchForInstances returns a list of matching instances. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.instances
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebInstances : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebInstancesWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g.,
 *  `instances`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForInstances returns a list of matching instances. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g.,
 *    `instances`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebInstances
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  SearchForStudies returns a list of matching studies. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.searchForStudies
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebSearchForStudies : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebSearchForStudiesWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g.,
 *  `studies`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForStudies returns a list of matching studies. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g.,
 *    `studies`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebSearchForStudies
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  SearchForSeries returns a list of matching series. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.series
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebSeries : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebSeriesWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g.,
 *  `series`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForSeries returns a list of matching series. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g.,
 *    `series`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebSeries
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  StoreInstances stores DICOM instances associated with study instance unique
 *  identifiers (SUID). See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.6.1.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudies : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesWithObject:parent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g., `studies/{study_id}`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  StoreInstances stores DICOM instances associated with study instance unique
 *  identifiers (SUID). See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.6.1.
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g., `studies/{study_id}`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudies
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                         parent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  DeleteStudy deletes all instances within the given study. Delete requests
 *  are equivalent to the GET requests specified in the WADO-RS standard.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesDeleteWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g., `studies/{study_id}`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  DeleteStudy deletes all instances within the given study. Delete requests
 *  are equivalent to the GET requests specified in the WADO-RS standard.
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g., `studies/{study_id}`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesDelete
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  SearchForInstances returns a list of matching instances. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.instances
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesInstances : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesInstancesWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g.,
 *  `instances`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForInstances returns a list of matching instances. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g.,
 *    `instances`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesInstances
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveStudyMetadata returns instance associated with the given study
 *  presented as metadata with the bulk data removed. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.6.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.metadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesMetadata : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesMetadataWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g., `studies/{study_id}/metadata`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveStudyMetadata returns instance associated with the given study
 *  presented as metadata with the bulk data removed. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.6.
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g., `studies/{study_id}/metadata`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesMetadata
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveStudy returns all instances within the given study. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.1.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.retrieveStudy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesRetrieveStudy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesRetrieveStudyWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g., `studies/{study_id}`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveStudy returns all instances within the given study. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.1.
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g., `studies/{study_id}`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesRetrieveStudy
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  SearchForSeries returns a list of matching series. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeries : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g.,
 *  `series`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForSeries returns a list of matching series. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g.,
 *    `series`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeries
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  DeleteSeries deletes all instances within the given study and series.
 *  Delete requests are equivalent to the GET requests specified in the WADO-RS
 *  standard.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesDeleteWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  DeleteSeries deletes all instances within the given study and series.
 *  Delete requests are equivalent to the GET requests specified in the WADO-RS
 *  standard.
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesDelete
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  SearchForInstances returns a list of matching instances. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstances : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g.,
 *  `instances`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForInstances returns a list of matching instances. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g.,
 *    `instances`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstances
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  DeleteInstance deletes an instance associated with the given study, series,
 *  and SOP Instance UID. Delete requests are equivalent to the GET requests
 *  specified in the WADO-RS standard.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesDeleteWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g.,
 *  `studies/{study_id}/series/{series_id}/instances/{instance_id}`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  DeleteInstance deletes an instance associated with the given study, series,
 *  and SOP Instance UID. Delete requests are equivalent to the GET requests
 *  specified in the WADO-RS standard.
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g.,
 *    `studies/{study_id}/series/{series_id}/instances/{instance_id}`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesDelete
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveRenderedFrames returns instances associated with the given study,
 *  series, SOP Instance UID and frame numbers in an acceptable Rendered Media
 *  Type. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.8.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances.frames.rendered
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesFramesRendered : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesFramesRenderedWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g.,
 *  `studies/{study_id}/series/{series_id}/instance/{instance_id}/frames/{frame_list}/rendered`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveRenderedFrames returns instances associated with the given study,
 *  series, SOP Instance UID and frame numbers in an acceptable Rendered Media
 *  Type. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.8.
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g.,
 *    `studies/{study_id}/series/{series_id}/instance/{instance_id}/frames/{frame_list}/rendered`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesFramesRendered
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveFrames returns instances associated with the given study, series,
 *  SOP Instance UID and frame numbers. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.4.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances.frames.retrieveFrames
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesFramesRetrieveFrames : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesFramesRetrieveFramesWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g.,
 *  `studies/{study_id}/series/{series_id}/instance/{instance_id}/frames/{frame_list}`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveFrames returns instances associated with the given study, series,
 *  SOP Instance UID and frame numbers. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.4.
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g.,
 *    `studies/{study_id}/series/{series_id}/instance/{instance_id}/frames/{frame_list}`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesFramesRetrieveFrames
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveInstanceMetadata returns instance associated with the given study,
 *  series, and SOP Instance UID presented as metadata with the bulk data
 *  removed. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.6.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances.metadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesMetadata : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesMetadataWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g.,
 *  `studies/{study_id}/series/{series_id}/instances/{instance_id}/metadata`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveInstanceMetadata returns instance associated with the given study,
 *  series, and SOP Instance UID presented as metadata with the bulk data
 *  removed. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.6.
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g.,
 *    `studies/{study_id}/series/{series_id}/instances/{instance_id}/metadata`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesMetadata
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveRenderedInstance returns instance associated with the given study,
 *  series, and SOP Instance UID in an acceptable Rendered Media Type. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.8.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances.rendered
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesRendered : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesRenderedWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g.,
 *  `studies/{study_id}/series/{series_id}/instance/{instance_id}/rendered`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveRenderedInstance returns instance associated with the given study,
 *  series, and SOP Instance UID in an acceptable Rendered Media Type. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.8.
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g.,
 *    `studies/{study_id}/series/{series_id}/instance/{instance_id}/rendered`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesRendered
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveInstance returns instance associated with the given study, series,
 *  and SOP Instance UID. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.3.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances.retrieveInstance
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesRetrieveInstance : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesRetrieveInstanceWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g.,
 *  `studies/{study_id}/series/{series_id}/instance/{instance_id}`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveInstance returns instance associated with the given study, series,
 *  and SOP Instance UID. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.3.
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g.,
 *    `studies/{study_id}/series/{series_id}/instance/{instance_id}`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesInstancesRetrieveInstance
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveSeriesMetadata returns instance associated with the given study and
 *  series, presented as metadata with the bulk data removed. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.6.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.metadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesMetadata : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesMetadataWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}/metadata`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveSeriesMetadata returns instance associated with the given study and
 *  series, presented as metadata with the bulk data removed. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.6.
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}/metadata`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesMetadata
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveSeries returns all instances within the given study and series. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.2.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.retrieveSeries
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesRetrieveSeries : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesRetrieveSeriesWithparent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveSeries returns all instances within the given study and series. See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.2.
 *
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesSeriesRetrieveSeries
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  StoreInstances stores DICOM instances associated with study instance unique
 *  identifiers (SUID). See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.6.1.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.storeInstances
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesStoreInstances : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresDicomWebStudiesStoreInstancesWithObject:parent:dicomWebPath:]

/**
 *  The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
 *  QIDO-RS standard (e.g., `studies/{study_id}`).
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  StoreInstances stores DICOM instances associated with study instance unique
 *  identifiers (SUID). See
 *  http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.6.1.
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param parent The name of the DICOM store that is being accessed (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *  @param dicomWebPath The path of the DICOMweb request, as specified in the
 *    STOW-RS, WADO-RS, or
 *    QIDO-RS standard (e.g., `studies/{study_id}`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDicomWebStudiesStoreInstances
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                         parent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  Exports data to the specified destination by copying it from the DICOM
 *  store.
 *  The metadata field type is
 *  OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.export
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresExport : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresExportWithObject:name:]

/**
 *  The DICOM store resource name from which the data should be exported (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Exports data to the specified destination by copying it from the DICOM
 *  store.
 *  The metadata field type is
 *  OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_ExportDicomDataRequest to include
 *    in the query.
 *  @param name The DICOM store resource name from which the data should be
 *    exported (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresExport
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ExportDicomDataRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the specified DICOM store.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresGetWithname:]

/** The resource name of the DICOM store to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_DicomStore.
 *
 *  Gets the specified DICOM store.
 *
 *  @param name The resource name of the DICOM store to get.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresGetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresGetIamPolicyWithresource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Imports data into the DICOM store by copying it from the specified source.
 *  For errors, the Operation will be populated with error details (in the form
 *  of ImportDicomDataErrorDetails in error.details), which will hold
 *  finer-grained error information.
 *  The metadata field type is
 *  OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresImport : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresImportWithObject:name:]

/**
 *  The name of the DICOM store resource into which the data is imported (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Imports data into the DICOM store by copying it from the specified source.
 *  For errors, the Operation will be populated with error details (in the form
 *  of ImportDicomDataErrorDetails in error.details), which will hold
 *  finer-grained error information.
 *  The metadata field type is
 *  OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_ImportDicomDataRequest to include
 *    in the query.
 *  @param name The name of the DICOM store resource into which the data is
 *    imported (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresImport
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ImportDicomDataRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists the DICOM stores in the given dataset.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresListWithparent:]

/**
 *  Restricts stores returned to those matching a filter. Syntax:
 *  https://cloud.google.com/appengine/docs/standard/python/search/query_strings
 *  Only filtering on labels is supported, for example `labels.key=value`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Limit on the number of DICOM stores to return in a single response.
 *  If zero the default page size of 100 is used.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from the previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the dataset. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListDicomStoresResponse.
 *
 *  Lists the DICOM stores in the given dataset.
 *
 *  @param parent Name of the dataset.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the specified DICOM store.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresPatch : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresPatchWithObject:name:]

/**
 *  Output only. Resource name of the DICOM store, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition,
 *  see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_DicomStore.
 *
 *  Updates the specified DICOM store.
 *
 *  @param object The @c GTLRCloudHealthcare_DicomStore to include in the query.
 *  @param name Output only. Resource name of the DICOM store, of the form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_DicomStore *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  @param object The @c GTLRCloudHealthcare_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresTestIamPermissions : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsDicomStoresTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  @param object The @c GTLRCloudHealthcare_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Creates a new FHIR store within the parent dataset.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresCreate : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresCreateWithObject:parent:]

/**
 *  The ID of the FHIR store that is being created.
 *  The string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.
 */
@property(nonatomic, copy, nullable) NSString *fhirStoreId;

/** The name of the dataset this FHIR store belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_FhirStore.
 *
 *  Creates a new FHIR store within the parent dataset.
 *
 *  @param object The @c GTLRCloudHealthcare_FhirStore to include in the query.
 *  @param parent The name of the dataset this FHIR store belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_FhirStore *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the FHIR store and removes all resources that are contained within
 *  it.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresDeleteWithname:]

/** The resource name of the FHIR store to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the FHIR store and removes all resources that are contained within
 *  it.
 *
 *  @param name The resource name of the FHIR store to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Export resources from the FHIR store to the specified destination.
 *  Fatal errors will be populated in the
 *  error field.
 *  Otherwise a detailed response will be returned as of type
 *  ExportResourcesResponse contained in the
 *  response field when the operation
 *  finishes.
 *  The metadata field type is
 *  OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.export
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresExport : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresExportWithObject:name:]

/**
 *  The name of the FHIR store to export resource from. The name should be in
 *  the format of
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Export resources from the FHIR store to the specified destination.
 *  Fatal errors will be populated in the
 *  error field.
 *  Otherwise a detailed response will be returned as of type
 *  ExportResourcesResponse contained in the
 *  response field when the operation
 *  finishes.
 *  The metadata field type is
 *  OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_ExportResourcesRequest to include
 *    in the query.
 *  @param name The name of the FHIR store to export resource from. The name
 *    should be in
 *    the format of
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresExport
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ExportResourcesRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Executes all the requests in the given Bundle. Conforms to
 *  http://hl7.org/fhir/http.html#transaction except that only the transaction
 *  update is supported.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhir : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirWithObject:parent:]

/** Name of the FHIR store in which this bundle will be executed. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Executes all the requests in the given Bundle. Conforms to
 *  http://hl7.org/fhir/http.html#transaction except that only the transaction
 *  update is supported.
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param parent Name of the FHIR store in which this bundle will be executed.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhir
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes FHIR resources matching a search query.
 *  Note: unless resource versioning is disabled by setting the
 *  disable_resource_versioning flag
 *  on the FHIR store, the deleted resources will be moved to a history
 *  repository that can still be retrieved through GetResourceVersion and
 *  related methods, unless they are removed by the DeleteResourceVersions
 *  method.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.conditionalDeleteResource
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirConditionalDeleteResource : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirConditionalDeleteResourceWithparent:type:]

/** The name of the FHIR store this resource belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/** The type of the resource to update. */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes FHIR resources matching a search query.
 *  Note: unless resource versioning is disabled by setting the
 *  disable_resource_versioning flag
 *  on the FHIR store, the deleted resources will be moved to a history
 *  repository that can still be retrieved through GetResourceVersion and
 *  related methods, unless they are removed by the DeleteResourceVersions
 *  method.
 *
 *  @param parent The name of the FHIR store this resource belongs to.
 *  @param type The type of the resource to update.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirConditionalDeleteResource
 */
+ (instancetype)queryWithParent:(NSString *)parent
                           type:(NSString *)type;

@end

/**
 *  Updates parts of a resource if the resource exists based on the
 *  search criteria specified via query parameters.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.conditionalPatchResource
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirConditionalPatchResource : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirConditionalPatchResourceWithObject:parent:type:]

/** The name of the FHIR store this resource belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/** The type of the resource to update. */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Updates parts of a resource if the resource exists based on the
 *  search criteria specified via query parameters.
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param parent The name of the FHIR store this resource belongs to.
 *  @param type The type of the resource to update.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirConditionalPatchResource
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                         parent:(NSString *)parent
                           type:(NSString *)type;

@end

/**
 *  Updates the entire resource if the resource exists based on the
 *  search criteria specified via query parameters.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.conditionalUpdateResource
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirConditionalUpdateResource : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirConditionalUpdateResourceWithObject:parent:type:]

/** The name of the FHIR store this resource belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/** The type of the resource to update. */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Updates the entire resource if the resource exists based on the
 *  search criteria specified via query parameters.
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param parent The name of the FHIR store this resource belongs to.
 *  @param type The type of the resource to update.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirConditionalUpdateResource
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                         parent:(NSString *)parent
                           type:(NSString *)type;

@end

/**
 *  Creates a FHIR resource.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.createResource
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirCreateResource : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirCreateResourceWithObject:parent:type:]

/** The name of the FHIR store this resource belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/** The type of the resource to create. */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Creates a FHIR resource.
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param parent The name of the FHIR store this resource belongs to.
 *  @param type The type of the resource to create.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirCreateResource
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                         parent:(NSString *)parent
                           type:(NSString *)type;

@end

/**
 *  Deletes a FHIR resource.
 *  Note: unless resource versioning is disabled by setting the
 *  disable_resource_versioning flag
 *  on the FHIR store, the deleted resources will be moved to a history
 *  repository that can still be retrieved through GetResourceVersion and
 *  related methods, unless they are removed by the DeleteResourceVersions
 *  method.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirDeleteWithname:]

/** The name of the resource to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Deletes a FHIR resource.
 *  Note: unless resource versioning is disabled by setting the
 *  disable_resource_versioning flag
 *  on the FHIR store, the deleted resources will be moved to a history
 *  repository that can still be retrieved through GetResourceVersion and
 *  related methods, unless they are removed by the DeleteResourceVersions
 *  method.
 *
 *  @param name The name of the resource to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes all the historical versions of a resource (excluding current
 *  version) from the FHIR store. To remove all versions of a resource, first
 *  delete the current version and call this API.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.delete$purge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirDeletePurge : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirDeletePurgeWithname:]

/** The name of the resource to purge. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes all the historical versions of a resource (excluding current
 *  version) from the FHIR store. To remove all versions of a resource, first
 *  delete the current version and call this API.
 *
 *  @param name The name of the resource to purge.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirDeletePurge
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a FHIR resource.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirGetWithname:]

/** The name of the resource to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Gets a FHIR resource.
 *
 *  @param name The name of the resource to retrieve.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the capabilities statement for the store.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.getMetadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirGetMetadata : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirGetMetadataWithname:]

/** Name of the FHIR store to retrieve the capabilities for. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Gets the capabilities statement for the store.
 *
 *  @param name Name of the FHIR store to retrieve the capabilities for.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirGetMetadata
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates part of an existing resource.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirPatch : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirPatchWithObject:name:]

/** The name of the resource to update. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Updates part of an existing resource.
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param name The name of the resource to update.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                           name:(NSString *)name;

@end

/**
 *  Gets all the resources in the patient compartment.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.Patient.get$everything
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirPatientGetEverything : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirPatientGetEverythingWithname:]

/**
 *  The response includes records prior to the end date. If no end date is
 *  provided, all records subsequent to the start date are in scope.
 */
@property(nonatomic, copy, nullable) NSString *end;

/** Name of the patient for which the information is required. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The response includes records subsequent to the start date. If no start
 *  date is provided, all records prior to the end date are in scope.
 */
@property(nonatomic, copy, nullable) NSString *start;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Gets all the resources in the patient compartment.
 *
 *  @param name Name of the patient for which the information is required.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirPatientGetEverything
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Searches resources in the given FHIR store.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.searchResources
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirSearchResources : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirSearchResourcesWithparent:resourceType:]

/** Name of the FHIR store to retrieve resources from. */
@property(nonatomic, copy, nullable) NSString *parent;

/** The type of the resource to search. */
@property(nonatomic, copy, nullable) NSString *resourceType;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Searches resources in the given FHIR store.
 *
 *  @param parent Name of the FHIR store to retrieve resources from.
 *  @param resourceType The type of the resource to search.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirSearchResources
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   resourceType:(NSString *)resourceType;

@end

/**
 *  Updates the entire resource or creates a new resource with a client
 *  specified ID if the resource does not exist and the FHIR store has
 *  enable_update_create set.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirUpdate : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirUpdateWithObject:name:]

/** The name of the resource to update. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Updates the entire resource or creates a new resource with a client
 *  specified ID if the resource does not exist and the FHIR store has
 *  enable_update_create set.
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param name The name of the resource to update.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirUpdate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                           name:(NSString *)name;

@end

/**
 *  Gets a version (current or historical) of FHIR resource by version id.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir._history.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirXHistoryGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirXHistoryGetWithname:]

/** The name of the resource version to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Gets a version (current or historical) of FHIR resource by version id.
 *
 *  @param name The name of the resource version to retrieve.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirXHistoryGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all the versions of a resource (including the current version and
 *  deleted versions) from the FHIR store.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir._history.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirXHistoryList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirXHistoryListWithname:]

/** The name of the resource to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Lists all the versions of a resource (including the current version and
 *  deleted versions) from the FHIR store.
 *
 *  @param name The name of the resource to retrieve.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirXHistoryList
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Searches resources in the given FHIR store.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir._search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirXSearch : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresFhirXSearchWithObject:parent:]

/** Name of the FHIR store to retrieve resources from. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Searches resources in the given FHIR store.
 *
 *  @param object The @c GTLRCloudHealthcare_SearchResourcesRequest to include
 *    in the query.
 *  @param parent Name of the FHIR store to retrieve resources from.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirXSearch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SearchResourcesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets the specified FHIR store.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresGetWithname:]

/** The resource name of the FHIR store to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_FhirStore.
 *
 *  Gets the specified FHIR store.
 *
 *  @param name The resource name of the FHIR store to get.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a FHIR store or security label within a
 *  FHIR store. Returns NOT_FOUND error if the resource does not exist. Returns
 *  an empty policy if the resource exists but does not have a policy set.
 *  Authorization requires the Google IAM permission
 *  'healthcare.fhirStores.getIamPolicy' for a FHIR store or
 *  'healthcare.securityLabels.getIamPolicy' for a security label
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresGetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresGetIamPolicyWithresource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Gets the access control policy for a FHIR store or security label within a
 *  FHIR store. Returns NOT_FOUND error if the resource does not exist. Returns
 *  an empty policy if the resource exists but does not have a policy set.
 *  Authorization requires the Google IAM permission
 *  'healthcare.fhirStores.getIamPolicy' for a FHIR store or
 *  'healthcare.securityLabels.getIamPolicy' for a security label
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Gets the capabilities statement for the store.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.getMetadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresGetMetadata : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresGetMetadataWithname:]

/** Name of the FHIR store to retrieve the capabilities for. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Gets the capabilities statement for the store.
 *
 *  @param name Name of the FHIR store to retrieve the capabilities for.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresGetMetadata
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Import resources to the FHIR store by loading data from the specified
 *  sources.
 *  Fatal errors will be populated in the
 *  error field.
 *  Otherwise a detailed response will be returned as of type
 *  ImportResourcesResponse contained in the
 *  response field when the operation
 *  finishes.
 *  The metadata field type is
 *  OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresImport : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresImportWithObject:name:]

/**
 *  The name of the FHIR store to import FHIR resources to. The name should be
 *  in the format of
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Import resources to the FHIR store by loading data from the specified
 *  sources.
 *  Fatal errors will be populated in the
 *  error field.
 *  Otherwise a detailed response will be returned as of type
 *  ImportResourcesResponse contained in the
 *  response field when the operation
 *  finishes.
 *  The metadata field type is
 *  OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_ImportResourcesRequest to include
 *    in the query.
 *  @param name The name of the FHIR store to import FHIR resources to. The name
 *    should be
 *    in the format of
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresImport
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ImportResourcesRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists the FHIR stores in the given dataset.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresListWithparent:]

/**
 *  Restricts stores returned to those matching a filter. Syntax:
 *  https://cloud.google.com/appengine/docs/standard/python/search/query_strings
 *  Only filtering on labels is supported, for example `labels.key=value`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Limit on the number of FHIR stores to return in a single response. If zero
 *  the default page size of 100 is used.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from the previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the dataset. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListFhirStoresResponse.
 *
 *  Lists the FHIR stores in the given dataset.
 *
 *  @param parent Name of the dataset.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the FHIR store.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresPatch : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresPatchWithObject:name:]

/**
 *  Output only. Resource name of the FHIR store, of the form
 *  `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition,
 *  see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_FhirStore.
 *
 *  Updates the FHIR store.
 *
 *  @param object The @c GTLRCloudHealthcare_FhirStore to include in the query.
 *  @param name Output only. Resource name of the FHIR store, of the form
 *    `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_FhirStore *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the access control policy for a FHIR store or security label within a
 *  FHIR store. Returns NOT_FOUND error if the resource does not exist. Returns
 *  an empty policy if the resource exists but does not have a policy set.
 *  Authorization requires the Google IAM permission
 *  'healthcare.fhirStores.getIamPolicy' for a FHIR store or
 *  'healthcare.securityLabels.getIamPolicy' for a security label
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.securityLabels.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresSecurityLabelsGetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresSecurityLabelsGetIamPolicyWithresource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Gets the access control policy for a FHIR store or security label within a
 *  FHIR store. Returns NOT_FOUND error if the resource does not exist. Returns
 *  an empty policy if the resource exists but does not have a policy set.
 *  Authorization requires the Google IAM permission
 *  'healthcare.fhirStores.getIamPolicy' for a FHIR store or
 *  'healthcare.securityLabels.getIamPolicy' for a security label
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresSecurityLabelsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Sets the access control policy for a FHIR store or security label within a
 *  FHIR store. Replaces any existing policy.
 *  Authorization requires the Google IAM permission
 *  'healthcare.fhirStores.setIamPolicy' for a FHIR store or
 *  'healthcare.securityLabels.setIamPolicy' for a security label
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.securityLabels.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresSecurityLabelsSetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresSecurityLabelsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Sets the access control policy for a FHIR store or security label within a
 *  FHIR store. Replaces any existing policy.
 *  Authorization requires the Google IAM permission
 *  'healthcare.fhirStores.setIamPolicy' for a FHIR store or
 *  'healthcare.securityLabels.setIamPolicy' for a security label
 *
 *  @param object The @c GTLRCloudHealthcare_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresSecurityLabelsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Sets the access control policy for a FHIR store or security label within a
 *  FHIR store. Replaces any existing policy.
 *  Authorization requires the Google IAM permission
 *  'healthcare.fhirStores.setIamPolicy' for a FHIR store or
 *  'healthcare.securityLabels.setIamPolicy' for a security label
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresSetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Sets the access control policy for a FHIR store or security label within a
 *  FHIR store. Replaces any existing policy.
 *  Authorization requires the Google IAM permission
 *  'healthcare.fhirStores.setIamPolicy' for a FHIR store or
 *  'healthcare.securityLabels.setIamPolicy' for a security label
 *
 *  @param object The @c GTLRCloudHealthcare_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not
 *  a NOT_FOUND error.
 *  There is no permission required to make this API call.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresTestIamPermissions : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsFhirStoresTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not
 *  a NOT_FOUND error.
 *  There is no permission required to make this API call.
 *
 *  @param object The @c GTLRCloudHealthcare_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Gets any metadata associated with a dataset.
 *
 *  Method: healthcare.projects.locations.datasets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsGetWithname:]

/**
 *  The name of the dataset to read (e.g.,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Dataset.
 *
 *  Gets any metadata associated with a dataset.
 *
 *  @param name The name of the dataset to read (e.g.,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  Method: healthcare.projects.locations.datasets.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsGetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsGetIamPolicyWithresource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Creates a new HL7v2 store within the parent dataset.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresCreate : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresCreateWithObject:parent:]

/**
 *  The ID of the HL7v2 store that is being created.
 *  The string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.
 */
@property(nonatomic, copy, nullable) NSString *hl7V2StoreId;

/** The name of the dataset this HL7v2 store belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Hl7V2Store.
 *
 *  Creates a new HL7v2 store within the parent dataset.
 *
 *  @param object The @c GTLRCloudHealthcare_Hl7V2Store to include in the query.
 *  @param parent The name of the dataset this HL7v2 store belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Hl7V2Store *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the specified HL7v2 store and removes all messages that are
 *  contained within it.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresDeleteWithname:]

/** The resource name of the HL7v2 store to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified HL7v2 store and removes all messages that are
 *  contained within it.
 *
 *  @param name The resource name of the HL7v2 store to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the specified HL7v2 store.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresGetWithname:]

/** The resource name of the HL7v2 store to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Hl7V2Store.
 *
 *  Gets the specified HL7v2 store.
 *
 *  @param name The resource name of the HL7v2 store to get.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresGetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresGetIamPolicyWithresource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists the HL7v2 stores in the given dataset.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresListWithparent:]

/**
 *  Restricts stores returned to those matching a filter. Syntax:
 *  https://cloud.google.com/appengine/docs/standard/python/search/query_strings
 *  Only filtering on labels is supported, for example `labels.key=value`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Limit on the number of HL7v2 stores to return in a single response.
 *  If zero the default page size of 100 is used.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from the previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the dataset. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListHl7V2StoresResponse.
 *
 *  Lists the HL7v2 stores in the given dataset.
 *
 *  @param parent Name of the dataset.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a message and sends a notification to the Cloud Pub/Sub topic. If
 *  configured, the MLLP adapter listens to messages created by this method and
 *  sends those back to the hospital. A successful response indicates the
 *  message has been persisted to storage and a Cloud Pub/Sub notification has
 *  been sent. Sending to the hospital by the MLLP adapter happens
 *  asynchronously.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesCreate : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresMessagesCreateWithObject:parent:]

/** The name of the dataset this message belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Message.
 *
 *  Creates a message and sends a notification to the Cloud Pub/Sub topic. If
 *  configured, the MLLP adapter listens to messages created by this method and
 *  sends those back to the hospital. A successful response indicates the
 *  message has been persisted to storage and a Cloud Pub/Sub notification has
 *  been sent. Sending to the hospital by the MLLP adapter happens
 *  asynchronously.
 *
 *  @param object The @c GTLRCloudHealthcare_CreateMessageRequest to include in
 *    the query.
 *  @param parent The name of the dataset this message belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_CreateMessageRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an HL7v2 message.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesDelete : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresMessagesDeleteWithname:]

/** The resource name of the HL7v2 message to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes an HL7v2 message.
 *
 *  @param name The resource name of the HL7v2 message to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets an HL7v2 message.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresMessagesGetWithname:]

/** The resource name of the HL7v2 message to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies which parts of the Message resource should be returned
 *  in the response.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudHealthcareViewMessageViewUnspecified Value
 *        "MESSAGE_VIEW_UNSPECIFIED"
 *    @arg @c kGTLRCloudHealthcareViewRawOnly Value "RAW_ONLY"
 *    @arg @c kGTLRCloudHealthcareViewParsedOnly Value "PARSED_ONLY"
 *    @arg @c kGTLRCloudHealthcareViewFull Value "FULL"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRCloudHealthcare_Message.
 *
 *  Gets an HL7v2 message.
 *
 *  @param name The resource name of the HL7v2 message to retrieve.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Ingests a new HL7v2 message from the hospital and sends a notification to
 *  the Cloud Pub/Sub topic. Return is an HL7v2 ACK message if the message was
 *  successfully stored. Otherwise an error is returned. If an identical
 *  HL7v2 message is created twice only one resource is created on the server
 *  and no error is reported.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.ingest
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesIngest : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresMessagesIngestWithObject:parent:]

/** The name of the HL7v2 store this message belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_IngestMessageResponse.
 *
 *  Ingests a new HL7v2 message from the hospital and sends a notification to
 *  the Cloud Pub/Sub topic. Return is an HL7v2 ACK message if the message was
 *  successfully stored. Otherwise an error is returned. If an identical
 *  HL7v2 message is created twice only one resource is created on the server
 *  and no error is reported.
 *
 *  @param object The @c GTLRCloudHealthcare_IngestMessageRequest to include in
 *    the query.
 *  @param parent The name of the HL7v2 store this message belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesIngest
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_IngestMessageRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists all the messages in the given HL7v2 store with support for filtering.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresMessagesListWithparent:]

/**
 *  Restricts messages returned to those matching a filter. Syntax:
 *  https://cloud.google.com/appengine/docs/standard/python/search/query_strings
 *  Fields/functions available for filtering are:
 *  - message_type, from the MSH-9 segment, e.g. 'NOT message_type = "ADT"'
 *  - send_date or sendDate, the YYYY-MM-DD date the message was sent in the
 *  dataset's time_zone, from the MSH-7 segment; e.g.
 *  'send_date < "2017-01-02"'
 *  - send_time, the timestamp of when the message was sent, using the RFC3339
 *  time format for comparisons, from the MSH-7 segment; e.g. 'send_time <
 *  "2017-01-02T00:00:00-05:00"'
 *  - send_facility, the hospital/trust that the message came from, from the
 *  MSH-4 segment, e.g. 'send_facility = "RAL"'
 *  - HL7RegExp(expr), which does regular expression matching of expr against
 *  the HL7 message payload using re2 (http://code.google.com/p/re2/)
 *  syntax; e.g. 'HL7RegExp("^.*\\|.*\\|CERNER")'
 *  - PatientId(value, type), which matches if the message lists a patient
 *  having an ID of the given value and type in the PID-2, PID-3, or PID-4
 *  segments; e.g. 'PatientId("123456", "MRN")'
 *  - HasLabel(x), a boolean returning true if the message has a label with
 *  key x (having any value) set using the labels map in Message; e.g.
 *  'HasLabel("priority")'
 *  - Label(x), a string value of the label with key x as set using the labels
 *  map in Message, e.g. 'Label("priority") = "high"'
 *  Negation on the patient ID function and the label function are not
 *  supported, e.g. invalid queries: 'NOT PatientId("123456", "MRN")',
 *  'NOT HasLabel("tag1")', 'NOT Label("tag2") = "val2"'.
 *  Conjunction of multiple patient ID functions is not supported, e.g. an
 *  invalid query: 'PatientId("123456", "MRN") AND PatientId("456789", "MRN")'.
 *  Conjunction of multiple label functions is also not supported, e.g. an
 *  invalid query: 'HasLabel("tag1") AND Label("tag2") = "val2"'.
 *  Conjunction of one patient ID function, one label function and other fields
 *  is supported, e.g. a valid query:
 *  'PatientId("123456", "MRN") AND HasLabel("tag1") AND message_type = "ADT"'.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Orders messages returned by the specified order_by clause.
 *  Syntax: https://cloud.google.com/apis/design/design_patterns#sorting_order
 *  Fields available for ordering are:
 *  - send_time
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Limit on the number of messages to return in a single response.
 *  If zero the default page size of 100 is used.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from the previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the HL7v2 store to retrieve messages from. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListMessagesResponse.
 *
 *  Lists all the messages in the given HL7v2 store with support for filtering.
 *
 *  @param parent Name of the HL7v2 store to retrieve messages from.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update the message.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesPatch : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresMessagesPatchWithObject:name:]

/**
 *  Resource name of the Message, of the form
 *  `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.
 *  Assigned by the server.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition,
 *  see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *  Only the `labels` field is allowed to be updated.
 *  The labels in the request will be merged with the existing set of labels.
 *  Existing labels with the same keys will be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_Message.
 *
 *  Update the message.
 *
 *  @param object The @c GTLRCloudHealthcare_Message to include in the query.
 *  @param name Resource name of the Message, of the form
 *    `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.
 *    Assigned by the server.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Message *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the HL7v2 store.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresPatch : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresPatchWithObject:name:]

/**
 *  Output only. Resource name of the HL7v2 store, of the form
 *  `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition,
 *  see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_Hl7V2Store.
 *
 *  Updates the HL7v2 store.
 *
 *  @param object The @c GTLRCloudHealthcare_Hl7V2Store to include in the query.
 *  @param name Output only. Resource name of the HL7v2 store, of the form
 *    `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Hl7V2Store *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresSetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  @param object The @c GTLRCloudHealthcare_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresTestIamPermissions : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsHl7V2StoresTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  @param object The @c GTLRCloudHealthcare_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists the health datasets in the current project.
 *
 *  Method: healthcare.projects.locations.datasets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsListWithparent:]

/**
 *  The maximum number of items to return. Capped to 100 if not specified.
 *  May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The name of the project whose datasets should be listed (e.g.,
 *  `projects/{project_id}/locations/{location_id}`).
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListDatasetsResponse.
 *
 *  Lists the health datasets in the current project.
 *
 *  @param parent The name of the project whose datasets should be listed (e.g.,
 *    `projects/{project_id}/locations/{location_id}`).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: healthcare.projects.locations.datasets.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsOperationsGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *  NOTE: the `name` binding allows API services to override the binding
 *  to use different resource name schemes, such as `users/ * /operations`. To
 *  override the binding, API services can add a binding such as
 *  `"/v1/{name=users/ *}/operations"` to their service configuration.
 *  For backwards compatibility, the default name includes the operations
 *  collection id, however overriding users must ensure the name binding
 *  is the parent resource, without the operations collection id.
 *
 *  Method: healthcare.projects.locations.datasets.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsOperationsList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsOperationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *  NOTE: the `name` binding allows API services to override the binding
 *  to use different resource name schemes, such as `users/ * /operations`. To
 *  override the binding, API services can add a binding such as
 *  `"/v1/{name=users/ *}/operations"` to their service configuration.
 *  For backwards compatibility, the default name includes the operations
 *  collection id, however overriding users must ensure the name binding
 *  is the parent resource, without the operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates dataset metadata.
 *
 *  Method: healthcare.projects.locations.datasets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsPatch : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsPatchWithObject:name:]

/**
 *  Output only. Resource name of the dataset, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition,
 *  see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_Dataset.
 *
 *  Updates dataset metadata.
 *
 *  @param object The @c GTLRCloudHealthcare_Dataset to include in the query.
 *  @param name Output only. Resource name of the dataset, of the form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Dataset *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  Method: healthcare.projects.locations.datasets.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsSetIamPolicy : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  @param object The @c GTLRCloudHealthcare_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  Method: healthcare.projects.locations.datasets.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsTestIamPermissions : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsDatasetsTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a NOT_FOUND error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  @param object The @c GTLRCloudHealthcare_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Gets information about a location.
 *
 *  Method: healthcare.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsGet : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: healthcare.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsList : GTLRCloudHealthcareQuery
// Previous library name was
//   +[GTLQueryCloudHealthcare queryForProjectsLocationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
