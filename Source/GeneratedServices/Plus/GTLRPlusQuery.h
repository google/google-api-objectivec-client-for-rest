// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google+ API (plus/v1)
// Description:
//   Builds on top of the Google+ platform.
// Documentation:
//   https://developers.google.com/+/api/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// collection

/**
 *  The list of visible people in the authenticated user's circles who also use
 *  the requesting app. This list is limited to users who made their app
 *  activities visible to the authenticated user.
 *
 *  Value: "connected"
 */
GTLR_EXTERN NSString * const kGTLRPlusCollectionConnected;
/**
 *  List all people who have +1'd this activity.
 *
 *  Value: "plusoners"
 */
GTLR_EXTERN NSString * const kGTLRPlusCollectionPlusoners;
/**
 *  All public activities created by the specified user.
 *
 *  Value: "public"
 */
GTLR_EXTERN NSString * const kGTLRPlusCollectionPublic;
/**
 *  List all people who have reshared this activity.
 *
 *  Value: "resharers"
 */
GTLR_EXTERN NSString * const kGTLRPlusCollectionResharers;
/**
 *  The list of people who this user has added to one or more circles, limited
 *  to the circles visible to the requesting application.
 *
 *  Value: "visible"
 */
GTLR_EXTERN NSString * const kGTLRPlusCollectionVisible;

// ----------------------------------------------------------------------------
// orderBy

/**
 *  Order the people by their display name.
 *
 *  Value: "alphabetical"
 */
GTLR_EXTERN NSString * const kGTLRPlusOrderByAlphabetical;
/** Value: "best" */
GTLR_EXTERN NSString * const kGTLRPlusOrderByBest;
/**
 *  Sort activities by published date, most recent first.
 *
 *  Value: "recent"
 */
GTLR_EXTERN NSString * const kGTLRPlusOrderByRecent;

// ----------------------------------------------------------------------------
// sortOrder

/**
 *  Sort oldest comments first.
 *
 *  Value: "ascending"
 */
GTLR_EXTERN NSString * const kGTLRPlusSortOrderAscending;
/**
 *  Sort newest comments first.
 *
 *  Value: "descending"
 */
GTLR_EXTERN NSString * const kGTLRPlusSortOrderDescending;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Plus query classes.
 */
@interface GTLRPlusQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Get an activity.
 *
 *  Method: plus.activities.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusLogin
 *    @c kGTLRAuthScopePlusMe
 */
@interface GTLRPlusQuery_ActivitiesGet : GTLRPlusQuery
// Previous library name was
//   +[GTLQueryPlus queryForActivitiesGetWithactivityId:]

/** The ID of the activity to get. */
@property(nonatomic, copy, nullable) NSString *activityId;

/**
 *  Fetches a @c GTLRPlus_Activity.
 *
 *  Get an activity.
 *
 *  @param activityId The ID of the activity to get.
 *
 *  @return GTLRPlusQuery_ActivitiesGet
 */
+ (instancetype)queryWithActivityId:(NSString *)activityId;

@end

/**
 *  List all of the activities in the specified collection for a particular
 *  user.
 *
 *  Method: plus.activities.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusLogin
 *    @c kGTLRAuthScopePlusMe
 */
@interface GTLRPlusQuery_ActivitiesList : GTLRPlusQuery
// Previous library name was
//   +[GTLQueryPlus queryForActivitiesListWithuserId:collection:]

/**
 *  The collection of activities to list.
 *
 *  Likely values:
 *    @arg @c kGTLRPlusCollectionPublic All public activities created by the
 *        specified user. (Value: "public")
 */
@property(nonatomic, copy, nullable) NSString *collection;

/**
 *  The maximum number of activities to include in the response, which is used
 *  for paging. For any response, the actual number returned might be less than
 *  the specified maxResults.
 *
 *  @note If not set, the documented server-side default will be 20 (from the
 *        range 1..100).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The continuation token, which is used to page through large result sets. To
 *  get the next page of results, set this parameter to the value of
 *  "nextPageToken" from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The ID of the user to get activities for. The special value "me" can be used
 *  to indicate the authenticated user.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRPlus_ActivityFeed.
 *
 *  List all of the activities in the specified collection for a particular
 *  user.
 *
 *  @param userId The ID of the user to get activities for. The special value
 *    "me" can be used to indicate the authenticated user.
 *  @param collection The collection of activities to list.
 *
 *  Likely values for @c collection:
 *    @arg @c kGTLRPlusCollectionPublic All public activities created by the
 *        specified user. (Value: "public")
 *
 *  @return GTLRPlusQuery_ActivitiesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     collection:(NSString *)collection;

@end

/**
 *  Search public activities.
 *
 *  Method: plus.activities.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusLogin
 *    @c kGTLRAuthScopePlusMe
 */
@interface GTLRPlusQuery_ActivitiesSearch : GTLRPlusQuery
// Previous library name was
//   +[GTLQueryPlus queryForActivitiesSearchWithquery:]

/**
 *  Specify the preferred language to search with. See search language codes for
 *  available values.
 *
 *  @note If not set, the documented server-side default will be en-US.
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of activities to include in the response, which is used
 *  for paging. For any response, the actual number returned might be less than
 *  the specified maxResults.
 *
 *  @note If not set, the documented server-side default will be 10 (from the
 *        range 1..20).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Specifies how to order search results.
 *
 *  Likely values:
 *    @arg @c kGTLRPlusOrderByBest Sort activities by relevance to the user,
 *        most relevant first. (Value: "best")
 *    @arg @c kGTLRPlusOrderByRecent Sort activities by published date, most
 *        recent first. (Value: "recent")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRPlusOrderByRecent.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The continuation token, which is used to page through large result sets. To
 *  get the next page of results, set this parameter to the value of
 *  "nextPageToken" from the previous response. This token can be of any length.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Full-text search query string. */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Fetches a @c GTLRPlus_ActivityFeed.
 *
 *  Search public activities.
 *
 *  @param query Full-text search query string.
 *
 *  @return GTLRPlusQuery_ActivitiesSearch
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithQuery:(NSString *)query;

@end

/**
 *  Get a comment.
 *
 *  Method: plus.comments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusLogin
 *    @c kGTLRAuthScopePlusMe
 */
@interface GTLRPlusQuery_CommentsGet : GTLRPlusQuery
// Previous library name was
//   +[GTLQueryPlus queryForCommentsGetWithcommentId:]

/** The ID of the comment to get. */
@property(nonatomic, copy, nullable) NSString *commentId;

/**
 *  Fetches a @c GTLRPlus_Comment.
 *
 *  Get a comment.
 *
 *  @param commentId The ID of the comment to get.
 *
 *  @return GTLRPlusQuery_CommentsGet
 */
+ (instancetype)queryWithCommentId:(NSString *)commentId;

@end

/**
 *  List all of the comments for an activity.
 *
 *  Method: plus.comments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusLogin
 *    @c kGTLRAuthScopePlusMe
 */
@interface GTLRPlusQuery_CommentsList : GTLRPlusQuery
// Previous library name was
//   +[GTLQueryPlus queryForCommentsListWithactivityId:]

/** The ID of the activity to get comments for. */
@property(nonatomic, copy, nullable) NSString *activityId;

/**
 *  The maximum number of comments to include in the response, which is used for
 *  paging. For any response, the actual number returned might be less than the
 *  specified maxResults.
 *
 *  @note If not set, the documented server-side default will be 20 (from the
 *        range 0..500).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The continuation token, which is used to page through large result sets. To
 *  get the next page of results, set this parameter to the value of
 *  "nextPageToken" from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The order in which to sort the list of comments.
 *
 *  Likely values:
 *    @arg @c kGTLRPlusSortOrderAscending Sort oldest comments first. (Value:
 *        "ascending")
 *    @arg @c kGTLRPlusSortOrderDescending Sort newest comments first. (Value:
 *        "descending")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRPlusSortOrderAscending.
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRPlus_CommentFeed.
 *
 *  List all of the comments for an activity.
 *
 *  @param activityId The ID of the activity to get comments for.
 *
 *  @return GTLRPlusQuery_CommentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithActivityId:(NSString *)activityId;

@end

/**
 *  Get a person's profile. If your app uses scope
 *  https://www.googleapis.com/auth/plus.login, this method is guaranteed to
 *  return ageRange and language.
 *
 *  Method: plus.people.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusLogin
 *    @c kGTLRAuthScopePlusMe
 *    @c kGTLRAuthScopePlusUserinfoEmail
 *    @c kGTLRAuthScopePlusUserinfoProfile
 */
@interface GTLRPlusQuery_PeopleGet : GTLRPlusQuery
// Previous library name was
//   +[GTLQueryPlus queryForPeopleGetWithuserId:]

/**
 *  The ID of the person to get the profile for. The special value "me" can be
 *  used to indicate the authenticated user.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRPlus_Person.
 *
 *  Get a person's profile. If your app uses scope
 *  https://www.googleapis.com/auth/plus.login, this method is guaranteed to
 *  return ageRange and language.
 *
 *  @param userId The ID of the person to get the profile for. The special value
 *    "me" can be used to indicate the authenticated user.
 *
 *  @return GTLRPlusQuery_PeopleGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  List all of the people in the specified collection.
 *
 *  Method: plus.people.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusLogin
 *    @c kGTLRAuthScopePlusMe
 */
@interface GTLRPlusQuery_PeopleList : GTLRPlusQuery
// Previous library name was
//   +[GTLQueryPlus queryForPeopleListWithuserId:collection:]

/**
 *  The collection of people to list.
 *
 *  Likely values:
 *    @arg @c kGTLRPlusCollectionConnected The list of visible people in the
 *        authenticated user's circles who also use the requesting app. This
 *        list is limited to users who made their app activities visible to the
 *        authenticated user. (Value: "connected")
 *    @arg @c kGTLRPlusCollectionVisible The list of people who this user has
 *        added to one or more circles, limited to the circles visible to the
 *        requesting application. (Value: "visible")
 */
@property(nonatomic, copy, nullable) NSString *collection;

/**
 *  The maximum number of people to include in the response, which is used for
 *  paging. For any response, the actual number returned might be less than the
 *  specified maxResults.
 *
 *  @note If not set, the documented server-side default will be 100 (from the
 *        range 1..100).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The order to return people in.
 *
 *  Likely values:
 *    @arg @c kGTLRPlusOrderByAlphabetical Order the people by their display
 *        name. (Value: "alphabetical")
 *    @arg @c kGTLRPlusOrderByBest Order people based on the relevence to the
 *        viewer. (Value: "best")
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The continuation token, which is used to page through large result sets. To
 *  get the next page of results, set this parameter to the value of
 *  "nextPageToken" from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Get the collection of people for the person identified. Use "me" to indicate
 *  the authenticated user.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRPlus_PeopleFeed.
 *
 *  List all of the people in the specified collection.
 *
 *  @param userId Get the collection of people for the person identified. Use
 *    "me" to indicate the authenticated user.
 *  @param collection The collection of people to list.
 *
 *  Likely values for @c collection:
 *    @arg @c kGTLRPlusCollectionConnected The list of visible people in the
 *        authenticated user's circles who also use the requesting app. This
 *        list is limited to users who made their app activities visible to the
 *        authenticated user. (Value: "connected")
 *    @arg @c kGTLRPlusCollectionVisible The list of people who this user has
 *        added to one or more circles, limited to the circles visible to the
 *        requesting application. (Value: "visible")
 *
 *  @return GTLRPlusQuery_PeopleList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                     collection:(NSString *)collection;

@end

/**
 *  List all of the people in the specified collection for a particular
 *  activity.
 *
 *  Method: plus.people.listByActivity
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusLogin
 *    @c kGTLRAuthScopePlusMe
 */
@interface GTLRPlusQuery_PeopleListByActivity : GTLRPlusQuery
// Previous library name was
//   +[GTLQueryPlus queryForPeopleListByActivityWithactivityId:collection:]

/** The ID of the activity to get the list of people for. */
@property(nonatomic, copy, nullable) NSString *activityId;

/**
 *  The collection of people to list.
 *
 *  Likely values:
 *    @arg @c kGTLRPlusCollectionPlusoners List all people who have +1'd this
 *        activity. (Value: "plusoners")
 *    @arg @c kGTLRPlusCollectionResharers List all people who have reshared
 *        this activity. (Value: "resharers")
 */
@property(nonatomic, copy, nullable) NSString *collection;

/**
 *  The maximum number of people to include in the response, which is used for
 *  paging. For any response, the actual number returned might be less than the
 *  specified maxResults.
 *
 *  @note If not set, the documented server-side default will be 20 (from the
 *        range 1..100).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The continuation token, which is used to page through large result sets. To
 *  get the next page of results, set this parameter to the value of
 *  "nextPageToken" from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRPlus_PeopleFeed.
 *
 *  List all of the people in the specified collection for a particular
 *  activity.
 *
 *  @param activityId The ID of the activity to get the list of people for.
 *  @param collection The collection of people to list.
 *
 *  Likely values for @c collection:
 *    @arg @c kGTLRPlusCollectionPlusoners List all people who have +1'd this
 *        activity. (Value: "plusoners")
 *    @arg @c kGTLRPlusCollectionResharers List all people who have reshared
 *        this activity. (Value: "resharers")
 *
 *  @return GTLRPlusQuery_PeopleListByActivity
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithActivityId:(NSString *)activityId
                         collection:(NSString *)collection;

@end

/**
 *  Search all public profiles.
 *
 *  Method: plus.people.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePlusLogin
 *    @c kGTLRAuthScopePlusMe
 */
@interface GTLRPlusQuery_PeopleSearch : GTLRPlusQuery
// Previous library name was
//   +[GTLQueryPlus queryForPeopleSearchWithquery:]

/**
 *  Specify the preferred language to search with. See search language codes for
 *  available values.
 *
 *  @note If not set, the documented server-side default will be en-US.
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The maximum number of people to include in the response, which is used for
 *  paging. For any response, the actual number returned might be less than the
 *  specified maxResults.
 *
 *  @note If not set, the documented server-side default will be 25 (from the
 *        range 1..50).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The continuation token, which is used to page through large result sets. To
 *  get the next page of results, set this parameter to the value of
 *  "nextPageToken" from the previous response. This token can be of any length.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Specify a query string for full text search of public text in all profiles.
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Fetches a @c GTLRPlus_PeopleFeed.
 *
 *  Search all public profiles.
 *
 *  @param query Specify a query string for full text search of public text in
 *    all profiles.
 *
 *  @return GTLRPlusQuery_PeopleSearch
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithQuery:(NSString *)query;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
