// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Storage JSON API (storage/v1)
// Description:
//   Stores and retrieves potentially large, immutable data objects.
// Documentation:
//   https://developers.google.com/storage/docs/json_api/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRStorage_Bucket;
@class GTLRStorage_Bucket_Billing;
@class GTLRStorage_Bucket_Cors_Item;
@class GTLRStorage_Bucket_Encryption;
@class GTLRStorage_Bucket_IamConfiguration;
@class GTLRStorage_Bucket_IamConfiguration_BucketPolicyOnly;
@class GTLRStorage_Bucket_Labels;
@class GTLRStorage_Bucket_Lifecycle;
@class GTLRStorage_Bucket_Lifecycle_Rule_Item;
@class GTLRStorage_Bucket_Lifecycle_Rule_Item_Action;
@class GTLRStorage_Bucket_Lifecycle_Rule_Item_Condition;
@class GTLRStorage_Bucket_Logging;
@class GTLRStorage_Bucket_Owner;
@class GTLRStorage_Bucket_RetentionPolicy;
@class GTLRStorage_Bucket_Versioning;
@class GTLRStorage_Bucket_Website;
@class GTLRStorage_BucketAccessControl;
@class GTLRStorage_BucketAccessControl_ProjectTeam;
@class GTLRStorage_Channel_Params;
@class GTLRStorage_ComposeRequest_SourceObjects_Item;
@class GTLRStorage_ComposeRequest_SourceObjects_Item_ObjectPreconditions;
@class GTLRStorage_Notification;
@class GTLRStorage_Notification_CustomAttributes;
@class GTLRStorage_Object;
@class GTLRStorage_Object_CustomerEncryption;
@class GTLRStorage_Object_Metadata;
@class GTLRStorage_Object_Owner;
@class GTLRStorage_ObjectAccessControl;
@class GTLRStorage_ObjectAccessControl_ProjectTeam;
@class GTLRStorage_Policy_Bindings_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  A bucket.
 */
@interface GTLRStorage_Bucket : GTLRObject

/** Access controls on the bucket. */
@property(nonatomic, strong, nullable) NSArray<GTLRStorage_BucketAccessControl *> *acl;

/** The bucket's billing configuration. */
@property(nonatomic, strong, nullable) GTLRStorage_Bucket_Billing *billing;

/** The bucket's Cross-Origin Resource Sharing (CORS) configuration. */
@property(nonatomic, strong, nullable) NSArray<GTLRStorage_Bucket_Cors_Item *> *cors;

/**
 *  The default value for event-based hold on newly created objects in this
 *  bucket. Event-based hold is a way to retain objects indefinitely until an
 *  event occurs, signified by the hold's release. After being released, such
 *  objects will be subject to bucket-level retention (if any). One sample use
 *  case of this flag is for banks to hold loan documents for at least 3 years
 *  after loan is paid in full. Here, bucket-level retention is 3 years and the
 *  event is loan being paid in full. In this example, these objects will be
 *  held intact for any number of years until the event has occurred
 *  (event-based hold on the object is released) and then 3 more years after
 *  that. That means retention duration of the objects begins from the moment
 *  event-based hold transitioned from true to false. Objects under event-based
 *  hold cannot be deleted, overwritten or archived until the hold is removed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultEventBasedHold;

/**
 *  Default access controls to apply to new objects when no ACL is provided.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorage_ObjectAccessControl *> *defaultObjectAcl;

/** Encryption configuration for a bucket. */
@property(nonatomic, strong, nullable) GTLRStorage_Bucket_Encryption *encryption;

/** HTTP 1.1 Entity tag for the bucket. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The bucket's IAM configuration. */
@property(nonatomic, strong, nullable) GTLRStorage_Bucket_IamConfiguration *iamConfiguration;

/**
 *  The ID of the bucket. For buckets, the id and name properties are the same.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The kind of item this is. For buckets, this is always storage#bucket. */
@property(nonatomic, copy, nullable) NSString *kind;

/** User-provided labels, in key/value pairs. */
@property(nonatomic, strong, nullable) GTLRStorage_Bucket_Labels *labels;

/**
 *  The bucket's lifecycle configuration. See lifecycle management for more
 *  information.
 */
@property(nonatomic, strong, nullable) GTLRStorage_Bucket_Lifecycle *lifecycle;

/**
 *  The location of the bucket. Object data for objects in the bucket resides in
 *  physical storage within this region. Defaults to US. See the developer's
 *  guide for the authoritative list.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  The bucket's logging configuration, which defines the destination bucket and
 *  optional name prefix for the current bucket's logs.
 */
@property(nonatomic, strong, nullable) GTLRStorage_Bucket_Logging *logging;

/**
 *  The metadata generation of this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *metageneration;

/** The name of the bucket. */
@property(nonatomic, copy, nullable) NSString *name;

/** The owner of the bucket. This is always the project team's owner group. */
@property(nonatomic, strong, nullable) GTLRStorage_Bucket_Owner *owner;

/**
 *  The project number of the project the bucket belongs to.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *projectNumber;

/**
 *  The bucket's retention policy. The retention policy enforces a minimum
 *  retention time for all objects contained in the bucket, based on their
 *  creation time. Any attempt to overwrite or delete objects younger than the
 *  retention period will result in a PERMISSION_DENIED error. An unlocked
 *  retention policy can be modified or removed from the bucket via a
 *  storage.buckets.update operation. A locked retention policy cannot be
 *  removed or shortened in duration for the lifetime of the bucket. Attempting
 *  to remove or decrease period of a locked retention policy will result in a
 *  PERMISSION_DENIED error.
 */
@property(nonatomic, strong, nullable) GTLRStorage_Bucket_RetentionPolicy *retentionPolicy;

/** The URI of this bucket. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  The bucket's default storage class, used whenever no storageClass is
 *  specified for a newly-created object. This defines how objects in the bucket
 *  are stored and determines the SLA and the cost of storage. Values include
 *  MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, and
 *  DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket
 *  is created, it will default to STANDARD. For more information, see storage
 *  classes.
 */
@property(nonatomic, copy, nullable) NSString *storageClass;

/** The creation time of the bucket in RFC 3339 format. */
@property(nonatomic, strong, nullable) GTLRDateTime *timeCreated;

/** The modification time of the bucket in RFC 3339 format. */
@property(nonatomic, strong, nullable) GTLRDateTime *updated;

/** The bucket's versioning configuration. */
@property(nonatomic, strong, nullable) GTLRStorage_Bucket_Versioning *versioning;

/**
 *  The bucket's website configuration, controlling how the service behaves when
 *  accessing bucket contents as a web site. See the Static Website Examples for
 *  more information.
 */
@property(nonatomic, strong, nullable) GTLRStorage_Bucket_Website *website;

@end


/**
 *  The bucket's billing configuration.
 */
@interface GTLRStorage_Bucket_Billing : GTLRObject

/**
 *  When set to true, Requester Pays is enabled for this bucket.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requesterPays;

@end


/**
 *  GTLRStorage_Bucket_Cors_Item
 */
@interface GTLRStorage_Bucket_Cors_Item : GTLRObject

/**
 *  The value, in seconds, to return in the Access-Control-Max-Age header used
 *  in preflight responses.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxAgeSeconds;

/**
 *  The list of HTTP methods on which to include CORS response headers, (GET,
 *  OPTIONS, POST, etc) Note: "*" is permitted in the list of methods, and means
 *  "any method".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *method;

/**
 *  The list of Origins eligible to receive CORS response headers. Note: "*" is
 *  permitted in the list of origins, and means "any Origin".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *origin;

/**
 *  The list of HTTP headers other than the simple response headers to give
 *  permission for the user-agent to share across domains.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *responseHeader;

@end


/**
 *  Encryption configuration for a bucket.
 */
@interface GTLRStorage_Bucket_Encryption : GTLRObject

/**
 *  A Cloud KMS key that will be used to encrypt objects inserted into this
 *  bucket, if no encryption method is specified.
 */
@property(nonatomic, copy, nullable) NSString *defaultKmsKeyName;

@end


/**
 *  The bucket's IAM configuration.
 */
@interface GTLRStorage_Bucket_IamConfiguration : GTLRObject

@property(nonatomic, strong, nullable) GTLRStorage_Bucket_IamConfiguration_BucketPolicyOnly *bucketPolicyOnly;

@end


/**
 *  User-provided labels, in key/value pairs.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRStorage_Bucket_Labels : GTLRObject
@end


/**
 *  The bucket's lifecycle configuration. See lifecycle management for more
 *  information.
 */
@interface GTLRStorage_Bucket_Lifecycle : GTLRObject

/**
 *  A lifecycle management rule, which is made of an action to take and the
 *  condition(s) under which the action will be taken.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorage_Bucket_Lifecycle_Rule_Item *> *rule;

@end


/**
 *  The bucket's logging configuration, which defines the destination bucket and
 *  optional name prefix for the current bucket's logs.
 */
@interface GTLRStorage_Bucket_Logging : GTLRObject

/**
 *  The destination bucket where the current bucket's logs should be placed.
 */
@property(nonatomic, copy, nullable) NSString *logBucket;

/** A prefix for log object names. */
@property(nonatomic, copy, nullable) NSString *logObjectPrefix;

@end


/**
 *  The owner of the bucket. This is always the project team's owner group.
 */
@interface GTLRStorage_Bucket_Owner : GTLRObject

/** The entity, in the form project-owner-projectId. */
@property(nonatomic, copy, nullable) NSString *entity;

/** The ID for the entity. */
@property(nonatomic, copy, nullable) NSString *entityId;

@end


/**
 *  The bucket's retention policy. The retention policy enforces a minimum
 *  retention time for all objects contained in the bucket, based on their
 *  creation time. Any attempt to overwrite or delete objects younger than the
 *  retention period will result in a PERMISSION_DENIED error. An unlocked
 *  retention policy can be modified or removed from the bucket via a
 *  storage.buckets.update operation. A locked retention policy cannot be
 *  removed or shortened in duration for the lifetime of the bucket. Attempting
 *  to remove or decrease period of a locked retention policy will result in a
 *  PERMISSION_DENIED error.
 */
@interface GTLRStorage_Bucket_RetentionPolicy : GTLRObject

/**
 *  Server-determined value that indicates the time from which policy was
 *  enforced and effective. This value is in RFC 3339 format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *effectiveTime;

/**
 *  Once locked, an object retention policy cannot be modified.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isLocked;

/**
 *  The duration in seconds that objects need to be retained. Retention duration
 *  must be greater than zero and less than 100 years. Note that enforcement of
 *  retention periods less than a day is not guaranteed. Such periods should
 *  only be used for testing purposes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *retentionPeriod;

@end


/**
 *  The bucket's versioning configuration.
 */
@interface GTLRStorage_Bucket_Versioning : GTLRObject

/**
 *  While set to true, versioning is fully enabled for this bucket.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  The bucket's website configuration, controlling how the service behaves when
 *  accessing bucket contents as a web site. See the Static Website Examples for
 *  more information.
 */
@interface GTLRStorage_Bucket_Website : GTLRObject

/**
 *  If the requested object path is missing, the service will ensure the path
 *  has a trailing '/', append this suffix, and attempt to retrieve the
 *  resulting object. This allows the creation of index.html objects to
 *  represent directory pages.
 */
@property(nonatomic, copy, nullable) NSString *mainPageSuffix;

/**
 *  If the requested object path is missing, and any mainPageSuffix object is
 *  missing, if applicable, the service will return the named object from this
 *  bucket as the content for a 404 Not Found result.
 */
@property(nonatomic, copy, nullable) NSString *notFoundPage;

@end


/**
 *  GTLRStorage_Bucket_IamConfiguration_BucketPolicyOnly
 */
@interface GTLRStorage_Bucket_IamConfiguration_BucketPolicyOnly : GTLRObject

/**
 *  If set, access checks only use bucket-level IAM policies or above.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

/**
 *  The deadline time for changing iamConfiguration.bucketPolicyOnly.enabled
 *  from true to false in RFC 3339 format.
 *  iamConfiguration.bucketPolicyOnly.enabled may be changed from true to false
 *  until the locked time, after which the field is immutable.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lockedTime;

@end


/**
 *  GTLRStorage_Bucket_Lifecycle_Rule_Item
 */
@interface GTLRStorage_Bucket_Lifecycle_Rule_Item : GTLRObject

/** The action to take. */
@property(nonatomic, strong, nullable) GTLRStorage_Bucket_Lifecycle_Rule_Item_Action *action;

/** The condition(s) under which the action will be taken. */
@property(nonatomic, strong, nullable) GTLRStorage_Bucket_Lifecycle_Rule_Item_Condition *condition;

@end


/**
 *  The action to take.
 */
@interface GTLRStorage_Bucket_Lifecycle_Rule_Item_Action : GTLRObject

/**
 *  Target storage class. Required iff the type of the action is
 *  SetStorageClass.
 */
@property(nonatomic, copy, nullable) NSString *storageClass;

/**
 *  Type of the action. Currently, only Delete and SetStorageClass are
 *  supported.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The condition(s) under which the action will be taken.
 */
@interface GTLRStorage_Bucket_Lifecycle_Rule_Item_Condition : GTLRObject

/**
 *  Age of an object (in days). This condition is satisfied when an object
 *  reaches the specified age.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *age;

/**
 *  A date in RFC 3339 format with only the date part (for instance,
 *  "2013-01-15"). This condition is satisfied when an object is created before
 *  midnight of the specified date in UTC.
 *
 *  Date only (yyyy-mm-dd).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createdBefore;

/**
 *  Relevant only for versioned objects. If the value is true, this condition
 *  matches live objects; if the value is false, it matches archived objects.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isLive;

/**
 *  A regular expression that satisfies the RE2 syntax. This condition is
 *  satisfied when the name of the object matches the RE2 pattern. Note: This
 *  feature is currently in the "Early Access" launch stage and is only
 *  available to a whitelisted set of users; that means that this feature may be
 *  changed in backward-incompatible ways and that it is not guaranteed to be
 *  released.
 */
@property(nonatomic, copy, nullable) NSString *matchesPattern;

/**
 *  Objects having any of the storage classes specified by this condition will
 *  be matched. Values include MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE,
 *  STANDARD, and DURABLE_REDUCED_AVAILABILITY.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *matchesStorageClass;

/**
 *  Relevant only for versioned objects. If the value is N, this condition is
 *  satisfied when there are at least N versions (including the live version)
 *  newer than this version of the object.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numNewerVersions;

@end


/**
 *  An access-control entry.
 */
@interface GTLRStorage_BucketAccessControl : GTLRObject

/** The name of the bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/** The domain associated with the entity, if any. */
@property(nonatomic, copy, nullable) NSString *domain;

/** The email address associated with the entity, if any. */
@property(nonatomic, copy, nullable) NSString *email;

/**
 *  The entity holding the permission, in one of the following forms:
 *  - user-userId
 *  - user-email
 *  - group-groupId
 *  - group-email
 *  - domain-domain
 *  - project-team-projectId
 *  - allUsers
 *  - allAuthenticatedUsers Examples:
 *  - The user liz\@example.com would be user-liz\@example.com.
 *  - The group example\@googlegroups.com would be
 *  group-example\@googlegroups.com.
 *  - To refer to all members of the Google Apps for Business domain
 *  example.com, the entity would be domain-example.com.
 */
@property(nonatomic, copy, nullable) NSString *entity;

/** The ID for the entity, if any. */
@property(nonatomic, copy, nullable) NSString *entityId;

/** HTTP 1.1 Entity tag for the access-control entry. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The ID of the access-control entry.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The kind of item this is. For bucket access control entries, this is always
 *  storage#bucketAccessControl.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The project team associated with the entity, if any. */
@property(nonatomic, strong, nullable) GTLRStorage_BucketAccessControl_ProjectTeam *projectTeam;

/** The access permission for the entity. */
@property(nonatomic, copy, nullable) NSString *role;

/** The link to this access-control entry. */
@property(nonatomic, copy, nullable) NSString *selfLink;

@end


/**
 *  The project team associated with the entity, if any.
 */
@interface GTLRStorage_BucketAccessControl_ProjectTeam : GTLRObject

/** The project number. */
@property(nonatomic, copy, nullable) NSString *projectNumber;

/** The team. */
@property(nonatomic, copy, nullable) NSString *team;

@end


/**
 *  An access-control list.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRStorage_BucketAccessControls : GTLRCollectionObject

/**
 *  The list of items.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorage_BucketAccessControl *> *items;

/**
 *  The kind of item this is. For lists of bucket access control entries, this
 *  is always storage#bucketAccessControls.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  A list of buckets.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRStorage_Buckets : GTLRCollectionObject

/**
 *  The list of items.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorage_Bucket *> *items;

/**
 *  The kind of item this is. For lists of buckets, this is always
 *  storage#buckets.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The continuation token, used to page through large result sets. Provide this
 *  value in a subsequent request to return the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  An notification channel used to watch for resource changes.
 */
@interface GTLRStorage_Channel : GTLRObject

/** The address where notifications are delivered for this channel. */
@property(nonatomic, copy, nullable) NSString *address;

/**
 *  Date and time of notification channel expiration, expressed as a Unix
 *  timestamp, in milliseconds. Optional.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expiration;

/**
 *  A UUID or similar unique string that identifies this channel.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies this as a notification channel used to watch for changes to a
 *  resource. Value: the fixed string "api#channel".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Additional parameters controlling delivery channel behavior. Optional. */
@property(nonatomic, strong, nullable) GTLRStorage_Channel_Params *params;

/**
 *  A Boolean value to indicate whether payload is wanted. Optional.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *payload;

/**
 *  An opaque ID that identifies the resource being watched on this channel.
 *  Stable across different API versions.
 */
@property(nonatomic, copy, nullable) NSString *resourceId;

/** A version-specific identifier for the watched resource. */
@property(nonatomic, copy, nullable) NSString *resourceUri;

/**
 *  An arbitrary string delivered to the target address with each notification
 *  delivered over this channel. Optional.
 */
@property(nonatomic, copy, nullable) NSString *token;

/** The type of delivery mechanism used for this channel. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Additional parameters controlling delivery channel behavior. Optional.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRStorage_Channel_Params : GTLRObject
@end


/**
 *  A Compose request.
 */
@interface GTLRStorage_ComposeRequest : GTLRObject

/** Properties of the resulting object. */
@property(nonatomic, strong, nullable) GTLRStorage_Object *destination;

/** The kind of item this is. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The list of source objects that will be concatenated into a single object.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorage_ComposeRequest_SourceObjects_Item *> *sourceObjects;

@end


/**
 *  GTLRStorage_ComposeRequest_SourceObjects_Item
 */
@interface GTLRStorage_ComposeRequest_SourceObjects_Item : GTLRObject

/**
 *  The generation of this object to use as the source.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  The source object's name. All source objects must reside in the same bucket.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Conditions that must be met for this operation to execute. */
@property(nonatomic, strong, nullable) GTLRStorage_ComposeRequest_SourceObjects_Item_ObjectPreconditions *objectPreconditions;

@end


/**
 *  Conditions that must be met for this operation to execute.
 */
@interface GTLRStorage_ComposeRequest_SourceObjects_Item_ObjectPreconditions : GTLRObject

/**
 *  Only perform the composition if the generation of the source object that
 *  would be used matches this value. If this value and a generation are both
 *  specified, they must be the same value or the call will fail.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ifGenerationMatch;

@end


/**
 *  A subscription to receive Google PubSub notifications.
 */
@interface GTLRStorage_Notification : GTLRObject

/**
 *  An optional list of additional attributes to attach to each Cloud PubSub
 *  message published for this notification subscription.
 */
@property(nonatomic, strong, nullable) GTLRStorage_Notification_CustomAttributes *customAttributes;

/** HTTP 1.1 Entity tag for this subscription notification. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  If present, only send notifications about listed event types. If empty, sent
 *  notifications for all event types.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *eventTypes;

/**
 *  The ID of the notification.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The kind of item this is. For notifications, this is always
 *  storage#notification.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  If present, only apply this notification configuration to object names that
 *  begin with this prefix.
 */
@property(nonatomic, copy, nullable) NSString *objectNamePrefix;

/** The desired content of the Payload. */
@property(nonatomic, copy, nullable) NSString *payloadFormat;

/** The canonical URL of this notification. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  The Cloud PubSub topic to which this subscription publishes. Formatted as:
 *  '//pubsub.googleapis.com/projects/{project-identifier}/topics/{my-topic}'
 */
@property(nonatomic, copy, nullable) NSString *topic;

@end


/**
 *  An optional list of additional attributes to attach to each Cloud PubSub
 *  message published for this notification subscription.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRStorage_Notification_CustomAttributes : GTLRObject
@end


/**
 *  A list of notification subscriptions.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRStorage_Notifications : GTLRCollectionObject

/**
 *  The list of items.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorage_Notification *> *items;

/**
 *  The kind of item this is. For lists of notifications, this is always
 *  storage#notifications.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  An object.
 */
@interface GTLRStorage_Object : GTLRObject

/** Access controls on the object. */
@property(nonatomic, strong, nullable) NSArray<GTLRStorage_ObjectAccessControl *> *acl;

/** The name of the bucket containing this object. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Cache-Control directive for the object data. If omitted, and the object is
 *  accessible to all anonymous users, the default will be public, max-age=3600.
 */
@property(nonatomic, copy, nullable) NSString *cacheControl;

/**
 *  Number of underlying components that make up this object. Components are
 *  accumulated by compose operations.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *componentCount;

/** Content-Disposition of the object data. */
@property(nonatomic, copy, nullable) NSString *contentDisposition;

/** Content-Encoding of the object data. */
@property(nonatomic, copy, nullable) NSString *contentEncoding;

/** Content-Language of the object data. */
@property(nonatomic, copy, nullable) NSString *contentLanguage;

/**
 *  Content-Type of the object data. If an object is stored without a
 *  Content-Type, it is served as application/octet-stream.
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64
 *  in big-endian byte order. For more information about using the CRC32c
 *  checksum, see Hashes and ETags: Best Practices.
 */
@property(nonatomic, copy, nullable) NSString *crc32c;

/**
 *  Metadata of customer-supplied encryption key, if the object is encrypted by
 *  such a key.
 */
@property(nonatomic, strong, nullable) GTLRStorage_Object_CustomerEncryption *customerEncryption;

/** HTTP 1.1 Entity tag for the object. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Whether an object is under event-based hold. Event-based hold is a way to
 *  retain objects until an event occurs, which is signified by the hold's
 *  release (i.e. this value is set to false). After being released (set to
 *  false), such objects will be subject to bucket-level retention (if any). One
 *  sample use case of this flag is for banks to hold loan documents for at
 *  least 3 years after loan is paid in full. Here, bucket-level retention is 3
 *  years and the event is the loan being paid in full. In this example, these
 *  objects will be held intact for any number of years until the event has
 *  occurred (event-based hold on the object is released) and then 3 more years
 *  after that. That means retention duration of the objects begins from the
 *  moment event-based hold transitioned from true to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *eventBasedHold;

/**
 *  The content generation of this object. Used for object versioning.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  The ID of the object, including the bucket name, object name, and generation
 *  number.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The kind of item this is. For objects, this is always storage#object. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Cloud KMS Key used to encrypt this object, if the object is encrypted by
 *  such a key.
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

/**
 *  MD5 hash of the data; encoded using base64. For more information about using
 *  the MD5 hash, see Hashes and ETags: Best Practices.
 */
@property(nonatomic, copy, nullable) NSString *md5Hash;

/** Media download link. */
@property(nonatomic, copy, nullable) NSString *mediaLink;

/** User-provided metadata, in key/value pairs. */
@property(nonatomic, strong, nullable) GTLRStorage_Object_Metadata *metadata;

/**
 *  The version of the metadata for this object at this generation. Used for
 *  preconditions and for detecting changes in metadata. A metageneration number
 *  is only meaningful in the context of a particular generation of a particular
 *  object.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *metageneration;

/** The name of the object. Required if not specified by URL parameter. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The owner of the object. This will always be the uploader of the object.
 */
@property(nonatomic, strong, nullable) GTLRStorage_Object_Owner *owner;

/**
 *  A server-determined value that specifies the earliest time that the object's
 *  retention period expires. This value is in RFC 3339 format. Note 1: This
 *  field is not provided for objects with an active event-based hold, since
 *  retention expiration is unknown until the hold is removed. Note 2: This
 *  value can be provided even when temporary hold is set (so that the user can
 *  reason about policy without having to first unset the temporary hold).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *retentionExpirationTime;

/** The link to this object. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  Content-Length of the data in bytes.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *size;

/** Storage class of the object. */
@property(nonatomic, copy, nullable) NSString *storageClass;

/**
 *  Whether an object is under temporary hold. While this flag is set to true,
 *  the object is protected against deletion and overwrites. A common use case
 *  of this flag is regulatory investigations where objects need to be retained
 *  while the investigation is ongoing. Note that unlike event-based hold,
 *  temporary hold does not impact retention expiration time of an object.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *temporaryHold;

/** The creation time of the object in RFC 3339 format. */
@property(nonatomic, strong, nullable) GTLRDateTime *timeCreated;

/**
 *  The deletion time of the object in RFC 3339 format. Will be returned if and
 *  only if this version of the object has been deleted.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *timeDeleted;

/**
 *  The time at which the object's storage class was last changed. When the
 *  object is initially created, it will be set to timeCreated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *timeStorageClassUpdated;

/** The modification time of the object metadata in RFC 3339 format. */
@property(nonatomic, strong, nullable) GTLRDateTime *updated;

@end


/**
 *  Metadata of customer-supplied encryption key, if the object is encrypted by
 *  such a key.
 */
@interface GTLRStorage_Object_CustomerEncryption : GTLRObject

/** The encryption algorithm. */
@property(nonatomic, copy, nullable) NSString *encryptionAlgorithm;

/** SHA256 hash value of the encryption key. */
@property(nonatomic, copy, nullable) NSString *keySha256;

@end


/**
 *  User-provided metadata, in key/value pairs.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRStorage_Object_Metadata : GTLRObject
@end


/**
 *  The owner of the object. This will always be the uploader of the object.
 */
@interface GTLRStorage_Object_Owner : GTLRObject

/** The entity, in the form user-userId. */
@property(nonatomic, copy, nullable) NSString *entity;

/** The ID for the entity. */
@property(nonatomic, copy, nullable) NSString *entityId;

@end


/**
 *  An access-control entry.
 */
@interface GTLRStorage_ObjectAccessControl : GTLRObject

/** The name of the bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/** The domain associated with the entity, if any. */
@property(nonatomic, copy, nullable) NSString *domain;

/** The email address associated with the entity, if any. */
@property(nonatomic, copy, nullable) NSString *email;

/**
 *  The entity holding the permission, in one of the following forms:
 *  - user-userId
 *  - user-email
 *  - group-groupId
 *  - group-email
 *  - domain-domain
 *  - project-team-projectId
 *  - allUsers
 *  - allAuthenticatedUsers Examples:
 *  - The user liz\@example.com would be user-liz\@example.com.
 *  - The group example\@googlegroups.com would be
 *  group-example\@googlegroups.com.
 *  - To refer to all members of the Google Apps for Business domain
 *  example.com, the entity would be domain-example.com.
 */
@property(nonatomic, copy, nullable) NSString *entity;

/** The ID for the entity, if any. */
@property(nonatomic, copy, nullable) NSString *entityId;

/** HTTP 1.1 Entity tag for the access-control entry. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The content generation of the object, if applied to an object.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  The ID of the access-control entry.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The kind of item this is. For object access control entries, this is always
 *  storage#objectAccessControl.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The name of the object, if applied to an object. */
@property(nonatomic, copy, nullable) NSString *object;

/** The project team associated with the entity, if any. */
@property(nonatomic, strong, nullable) GTLRStorage_ObjectAccessControl_ProjectTeam *projectTeam;

/** The access permission for the entity. */
@property(nonatomic, copy, nullable) NSString *role;

/** The link to this access-control entry. */
@property(nonatomic, copy, nullable) NSString *selfLink;

@end


/**
 *  The project team associated with the entity, if any.
 */
@interface GTLRStorage_ObjectAccessControl_ProjectTeam : GTLRObject

/** The project number. */
@property(nonatomic, copy, nullable) NSString *projectNumber;

/** The team. */
@property(nonatomic, copy, nullable) NSString *team;

@end


/**
 *  An access-control list.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRStorage_ObjectAccessControls : GTLRCollectionObject

/**
 *  The list of items.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorage_ObjectAccessControl *> *items;

/**
 *  The kind of item this is. For lists of object access control entries, this
 *  is always storage#objectAccessControls.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  A list of objects.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRStorage_Objects : GTLRCollectionObject

/**
 *  The list of items.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorage_Object *> *items;

/**
 *  The kind of item this is. For lists of objects, this is always
 *  storage#objects.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The continuation token, used to page through large result sets. Provide this
 *  value in a subsequent request to return the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of prefixes of objects matching-but-not-listed up to and including
 *  the requested delimiter.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *prefixes;

@end


/**
 *  A bucket/object IAM policy.
 */
@interface GTLRStorage_Policy : GTLRObject

/**
 *  An association between a role, which comes with a set of permissions, and
 *  members who may assume that role.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorage_Policy_Bindings_Item *> *bindings;

/**
 *  HTTP 1.1 Entity tag for the policy.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The kind of item this is. For policies, this is always storage#policy. This
 *  field is ignored on input.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The ID of the resource to which this policy belongs. Will be of the form
 *  projects/_/buckets/bucket for buckets, and
 *  projects/_/buckets/bucket/objects/object for objects. A specific generation
 *  may be specified by appending #generationNumber to the end of the object
 *  name, e.g. projects/_/buckets/my-bucket/objects/data.txt#17. The current
 *  generation can be denoted with #0. This field is ignored on input.
 */
@property(nonatomic, copy, nullable) NSString *resourceId;

@end


/**
 *  GTLRStorage_Policy_Bindings_Item
 */
@interface GTLRStorage_Policy_Bindings_Item : GTLRObject

/**
 *  condition
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id condition;

/**
 *  A collection of identifiers for members who may assume the provided role.
 *  Recognized identifiers are as follows:
 *  - allUsers — A special identifier that represents anyone on the internet;
 *  with or without a Google account.
 *  - allAuthenticatedUsers — A special identifier that represents anyone who is
 *  authenticated with a Google account or a service account.
 *  - user:emailid — An email address that represents a specific account. For
 *  example, user:alice\@gmail.com or user:joe\@example.com.
 *  - serviceAccount:emailid — An email address that represents a service
 *  account. For example,
 *  serviceAccount:my-other-app\@appspot.gserviceaccount.com .
 *  - group:emailid — An email address that represents a Google group. For
 *  example, group:admins\@example.com.
 *  - domain:domain — A Google Apps domain name that represents all the users of
 *  that domain. For example, domain:google.com or domain:example.com.
 *  - projectOwner:projectid — Owners of the given project. For example,
 *  projectOwner:my-example-project
 *  - projectEditor:projectid — Editors of the given project. For example,
 *  projectEditor:my-example-project
 *  - projectViewer:projectid — Viewers of the given project. For example,
 *  projectViewer:my-example-project
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  The role to which members belong. Two types of roles are supported: new IAM
 *  roles, which grant permissions that do not map directly to those provided by
 *  ACLs, and legacy IAM roles, which do map directly to ACL permissions. All
 *  roles are of the format roles/storage.specificRole.
 *  The new IAM roles are:
 *  - roles/storage.admin — Full control of Google Cloud Storage resources.
 *  - roles/storage.objectViewer — Read-Only access to Google Cloud Storage
 *  objects.
 *  - roles/storage.objectCreator — Access to create objects in Google Cloud
 *  Storage.
 *  - roles/storage.objectAdmin — Full control of Google Cloud Storage objects.
 *  The legacy IAM roles are:
 *  - roles/storage.legacyObjectReader — Read-only access to objects without
 *  listing. Equivalent to an ACL entry on an object with the READER role.
 *  - roles/storage.legacyObjectOwner — Read/write access to existing objects
 *  without listing. Equivalent to an ACL entry on an object with the OWNER
 *  role.
 *  - roles/storage.legacyBucketReader — Read access to buckets with object
 *  listing. Equivalent to an ACL entry on a bucket with the READER role.
 *  - roles/storage.legacyBucketWriter — Read access to buckets with object
 *  listing/creation/deletion. Equivalent to an ACL entry on a bucket with the
 *  WRITER role.
 *  - roles/storage.legacyBucketOwner — Read and write access to existing
 *  buckets with object listing/creation/deletion. Equivalent to an ACL entry on
 *  a bucket with the OWNER role.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  A rewrite response.
 */
@interface GTLRStorage_RewriteResponse : GTLRObject

/**
 *  true if the copy is finished; otherwise, false if the copy is in progress.
 *  This property is always present in the response.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The kind of item this is. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The total size of the object being copied in bytes. This property is always
 *  present in the response.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectSize;

/**
 *  A resource containing the metadata for the copied-to object. This property
 *  is present in the response only when copying completes.
 */
@property(nonatomic, strong, nullable) GTLRStorage_Object *resource;

/**
 *  A token to use in subsequent requests to continue copying data. This token
 *  is present in the response only when there is more data to copy.
 */
@property(nonatomic, copy, nullable) NSString *rewriteToken;

/**
 *  The total bytes written so far, which can be used to provide a waiting user
 *  with a progress indicator. This property is always present in the response.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesRewritten;

@end


/**
 *  A subscription to receive Google PubSub notifications.
 */
@interface GTLRStorage_ServiceAccount : GTLRObject

/** The ID of the notification. */
@property(nonatomic, copy, nullable) NSString *emailAddress;

/**
 *  The kind of item this is. For notifications, this is always
 *  storage#notification.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  A storage.(buckets|objects).testIamPermissions response.
 */
@interface GTLRStorage_TestIamPermissionsResponse : GTLRObject

/** The kind of item this is. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The permissions held by the caller. Permissions are always of the format
 *  storage.resource.capability, where resource is one of buckets or objects.
 *  The supported permissions are as follows:
 *  - storage.buckets.delete — Delete bucket.
 *  - storage.buckets.get — Read bucket metadata.
 *  - storage.buckets.getIamPolicy — Read bucket IAM policy.
 *  - storage.buckets.create — Create bucket.
 *  - storage.buckets.list — List buckets.
 *  - storage.buckets.setIamPolicy — Update bucket IAM policy.
 *  - storage.buckets.update — Update bucket metadata.
 *  - storage.objects.delete — Delete object.
 *  - storage.objects.get — Read object data and metadata.
 *  - storage.objects.getIamPolicy — Read object IAM policy.
 *  - storage.objects.create — Create object.
 *  - storage.objects.list — List objects.
 *  - storage.objects.setIamPolicy — Update object IAM policy.
 *  - storage.objects.update — Update object metadata.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
