// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Storage JSON API (storage/v1)
// Description:
//   Stores and retrieves potentially large, immutable data objects.
// Documentation:
//   https://developers.google.com/storage/docs/json_api/

#import "GTLRStorageQuery.h"

#import "GTLRStorageObjects.h"

// ----------------------------------------------------------------------------
// Constants

// destinationPredefinedAcl
NSString * const kGTLRStorageDestinationPredefinedAclAuthenticatedRead = @"authenticatedRead";
NSString * const kGTLRStorageDestinationPredefinedAclBucketOwnerFullControl = @"bucketOwnerFullControl";
NSString * const kGTLRStorageDestinationPredefinedAclBucketOwnerRead = @"bucketOwnerRead";
NSString * const kGTLRStorageDestinationPredefinedAclPrivate   = @"private";
NSString * const kGTLRStorageDestinationPredefinedAclProjectPrivate = @"projectPrivate";
NSString * const kGTLRStorageDestinationPredefinedAclPublicRead = @"publicRead";

// predefinedAcl
NSString * const kGTLRStoragePredefinedAclAuthenticatedRead    = @"authenticatedRead";
NSString * const kGTLRStoragePredefinedAclBucketOwnerFullControl = @"bucketOwnerFullControl";
NSString * const kGTLRStoragePredefinedAclBucketOwnerRead      = @"bucketOwnerRead";
NSString * const kGTLRStoragePredefinedAclPrivate              = @"private";
NSString * const kGTLRStoragePredefinedAclProjectPrivate       = @"projectPrivate";
NSString * const kGTLRStoragePredefinedAclPublicRead           = @"publicRead";
NSString * const kGTLRStoragePredefinedAclPublicReadWrite      = @"publicReadWrite";

// predefinedDefaultObjectAcl
NSString * const kGTLRStoragePredefinedDefaultObjectAclAuthenticatedRead = @"authenticatedRead";
NSString * const kGTLRStoragePredefinedDefaultObjectAclBucketOwnerFullControl = @"bucketOwnerFullControl";
NSString * const kGTLRStoragePredefinedDefaultObjectAclBucketOwnerRead = @"bucketOwnerRead";
NSString * const kGTLRStoragePredefinedDefaultObjectAclPrivate = @"private";
NSString * const kGTLRStoragePredefinedDefaultObjectAclProjectPrivate = @"projectPrivate";
NSString * const kGTLRStoragePredefinedDefaultObjectAclPublicRead = @"publicRead";

// projection
NSString * const kGTLRStorageProjectionFull  = @"full";
NSString * const kGTLRStorageProjectionNoAcl = @"noAcl";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRStorageQuery

@dynamic fields;

@end

@implementation GTLRStorageQuery_BucketAccessControlsDelete

@dynamic bucket, entity, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket
                         entity:(NSString *)entity {
  NSArray *pathParams = @[
    @"bucket", @"entity"
  ];
  NSString *pathURITemplate = @"b/{bucket}/acl/{entity}";
  GTLRStorageQuery_BucketAccessControlsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.entity = entity;
  query.loggingName = @"storage.bucketAccessControls.delete";
  return query;
}

@end

@implementation GTLRStorageQuery_BucketAccessControlsGet

@dynamic bucket, entity, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket
                         entity:(NSString *)entity {
  NSArray *pathParams = @[
    @"bucket", @"entity"
  ];
  NSString *pathURITemplate = @"b/{bucket}/acl/{entity}";
  GTLRStorageQuery_BucketAccessControlsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.entity = entity;
  query.expectedObjectClass = [GTLRStorage_BucketAccessControl class];
  query.loggingName = @"storage.bucketAccessControls.get";
  return query;
}

@end

@implementation GTLRStorageQuery_BucketAccessControlsInsert

@dynamic bucket, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_BucketAccessControl *)object
                         bucket:(NSString *)bucket {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}/acl";
  GTLRStorageQuery_BucketAccessControlsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.expectedObjectClass = [GTLRStorage_BucketAccessControl class];
  query.loggingName = @"storage.bucketAccessControls.insert";
  return query;
}

@end

@implementation GTLRStorageQuery_BucketAccessControlsList

@dynamic bucket, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket {
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}/acl";
  GTLRStorageQuery_BucketAccessControlsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.expectedObjectClass = [GTLRStorage_BucketAccessControls class];
  query.loggingName = @"storage.bucketAccessControls.list";
  return query;
}

@end

@implementation GTLRStorageQuery_BucketAccessControlsPatch

@dynamic bucket, entity, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_BucketAccessControl *)object
                         bucket:(NSString *)bucket
                         entity:(NSString *)entity {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"bucket", @"entity"
  ];
  NSString *pathURITemplate = @"b/{bucket}/acl/{entity}";
  GTLRStorageQuery_BucketAccessControlsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.entity = entity;
  query.expectedObjectClass = [GTLRStorage_BucketAccessControl class];
  query.loggingName = @"storage.bucketAccessControls.patch";
  return query;
}

@end

@implementation GTLRStorageQuery_BucketAccessControlsUpdate

@dynamic bucket, entity, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_BucketAccessControl *)object
                         bucket:(NSString *)bucket
                         entity:(NSString *)entity {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"bucket", @"entity"
  ];
  NSString *pathURITemplate = @"b/{bucket}/acl/{entity}";
  GTLRStorageQuery_BucketAccessControlsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.entity = entity;
  query.expectedObjectClass = [GTLRStorage_BucketAccessControl class];
  query.loggingName = @"storage.bucketAccessControls.update";
  return query;
}

@end

@implementation GTLRStorageQuery_BucketsDelete

@dynamic bucket, ifMetagenerationMatch, ifMetagenerationNotMatch, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket {
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}";
  GTLRStorageQuery_BucketsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.loggingName = @"storage.buckets.delete";
  return query;
}

@end

@implementation GTLRStorageQuery_BucketsGet

@dynamic bucket, ifMetagenerationMatch, ifMetagenerationNotMatch, projection,
         userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket {
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}";
  GTLRStorageQuery_BucketsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.expectedObjectClass = [GTLRStorage_Bucket class];
  query.loggingName = @"storage.buckets.get";
  return query;
}

@end

@implementation GTLRStorageQuery_BucketsGetIamPolicy

@dynamic bucket, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket {
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}/iam";
  GTLRStorageQuery_BucketsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.expectedObjectClass = [GTLRStorage_Policy class];
  query.loggingName = @"storage.buckets.getIamPolicy";
  return query;
}

@end

@implementation GTLRStorageQuery_BucketsInsert

@dynamic predefinedAcl, predefinedDefaultObjectAcl, project, projection,
         userProject;

+ (instancetype)queryWithObject:(GTLRStorage_Bucket *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"b";
  GTLRStorageQuery_BucketsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRStorage_Bucket class];
  query.loggingName = @"storage.buckets.insert";
  return query;
}

@end

@implementation GTLRStorageQuery_BucketsList

@dynamic maxResults, pageToken, prefix, project, projection, userProject;

+ (instancetype)queryWithProject:(NSString *)project {
  NSString *pathURITemplate = @"b";
  GTLRStorageQuery_BucketsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.project = project;
  query.expectedObjectClass = [GTLRStorage_Buckets class];
  query.loggingName = @"storage.buckets.list";
  return query;
}

@end

@implementation GTLRStorageQuery_BucketsLockRetentionPolicy

@dynamic bucket, ifMetagenerationMatch, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket
          ifMetagenerationMatch:(long long)ifMetagenerationMatch {
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}/lockRetentionPolicy";
  GTLRStorageQuery_BucketsLockRetentionPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.ifMetagenerationMatch = ifMetagenerationMatch;
  query.expectedObjectClass = [GTLRStorage_Bucket class];
  query.loggingName = @"storage.buckets.lockRetentionPolicy";
  return query;
}

@end

@implementation GTLRStorageQuery_BucketsPatch

@dynamic bucket, ifMetagenerationMatch, ifMetagenerationNotMatch, predefinedAcl,
         predefinedDefaultObjectAcl, projection, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_Bucket *)object
                         bucket:(NSString *)bucket {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}";
  GTLRStorageQuery_BucketsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.expectedObjectClass = [GTLRStorage_Bucket class];
  query.loggingName = @"storage.buckets.patch";
  return query;
}

@end

@implementation GTLRStorageQuery_BucketsSetIamPolicy

@dynamic bucket, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_Policy *)object
                         bucket:(NSString *)bucket {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}/iam";
  GTLRStorageQuery_BucketsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.expectedObjectClass = [GTLRStorage_Policy class];
  query.loggingName = @"storage.buckets.setIamPolicy";
  return query;
}

@end

@implementation GTLRStorageQuery_BucketsTestIamPermissions

@dynamic bucket, permissions, userProject;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithBucket:(NSString *)bucket
                    permissions:(NSArray<NSString *> *)permissions {
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}/iam/testPermissions";
  GTLRStorageQuery_BucketsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.permissions = permissions;
  query.expectedObjectClass = [GTLRStorage_TestIamPermissionsResponse class];
  query.loggingName = @"storage.buckets.testIamPermissions";
  return query;
}

@end

@implementation GTLRStorageQuery_BucketsUpdate

@dynamic bucket, ifMetagenerationMatch, ifMetagenerationNotMatch, predefinedAcl,
         predefinedDefaultObjectAcl, projection, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_Bucket *)object
                         bucket:(NSString *)bucket {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}";
  GTLRStorageQuery_BucketsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.expectedObjectClass = [GTLRStorage_Bucket class];
  query.loggingName = @"storage.buckets.update";
  return query;
}

@end

@implementation GTLRStorageQuery_ChannelsStop

+ (instancetype)queryWithObject:(GTLRStorage_Channel *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"channels/stop";
  GTLRStorageQuery_ChannelsStop *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.loggingName = @"storage.channels.stop";
  return query;
}

@end

@implementation GTLRStorageQuery_DefaultObjectAccessControlsDelete

@dynamic bucket, entity, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket
                         entity:(NSString *)entity {
  NSArray *pathParams = @[
    @"bucket", @"entity"
  ];
  NSString *pathURITemplate = @"b/{bucket}/defaultObjectAcl/{entity}";
  GTLRStorageQuery_DefaultObjectAccessControlsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.entity = entity;
  query.loggingName = @"storage.defaultObjectAccessControls.delete";
  return query;
}

@end

@implementation GTLRStorageQuery_DefaultObjectAccessControlsGet

@dynamic bucket, entity, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket
                         entity:(NSString *)entity {
  NSArray *pathParams = @[
    @"bucket", @"entity"
  ];
  NSString *pathURITemplate = @"b/{bucket}/defaultObjectAcl/{entity}";
  GTLRStorageQuery_DefaultObjectAccessControlsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.entity = entity;
  query.expectedObjectClass = [GTLRStorage_ObjectAccessControl class];
  query.loggingName = @"storage.defaultObjectAccessControls.get";
  return query;
}

@end

@implementation GTLRStorageQuery_DefaultObjectAccessControlsInsert

@dynamic bucket, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_ObjectAccessControl *)object
                         bucket:(NSString *)bucket {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}/defaultObjectAcl";
  GTLRStorageQuery_DefaultObjectAccessControlsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.expectedObjectClass = [GTLRStorage_ObjectAccessControl class];
  query.loggingName = @"storage.defaultObjectAccessControls.insert";
  return query;
}

@end

@implementation GTLRStorageQuery_DefaultObjectAccessControlsList

@dynamic bucket, ifMetagenerationMatch, ifMetagenerationNotMatch, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket {
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}/defaultObjectAcl";
  GTLRStorageQuery_DefaultObjectAccessControlsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.expectedObjectClass = [GTLRStorage_ObjectAccessControls class];
  query.loggingName = @"storage.defaultObjectAccessControls.list";
  return query;
}

@end

@implementation GTLRStorageQuery_DefaultObjectAccessControlsPatch

@dynamic bucket, entity, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_ObjectAccessControl *)object
                         bucket:(NSString *)bucket
                         entity:(NSString *)entity {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"bucket", @"entity"
  ];
  NSString *pathURITemplate = @"b/{bucket}/defaultObjectAcl/{entity}";
  GTLRStorageQuery_DefaultObjectAccessControlsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.entity = entity;
  query.expectedObjectClass = [GTLRStorage_ObjectAccessControl class];
  query.loggingName = @"storage.defaultObjectAccessControls.patch";
  return query;
}

@end

@implementation GTLRStorageQuery_DefaultObjectAccessControlsUpdate

@dynamic bucket, entity, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_ObjectAccessControl *)object
                         bucket:(NSString *)bucket
                         entity:(NSString *)entity {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"bucket", @"entity"
  ];
  NSString *pathURITemplate = @"b/{bucket}/defaultObjectAcl/{entity}";
  GTLRStorageQuery_DefaultObjectAccessControlsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.entity = entity;
  query.expectedObjectClass = [GTLRStorage_ObjectAccessControl class];
  query.loggingName = @"storage.defaultObjectAccessControls.update";
  return query;
}

@end

@implementation GTLRStorageQuery_NotificationsDelete

@dynamic bucket, notification, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket
                   notification:(NSString *)notification {
  NSArray *pathParams = @[
    @"bucket", @"notification"
  ];
  NSString *pathURITemplate = @"b/{bucket}/notificationConfigs/{notification}";
  GTLRStorageQuery_NotificationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.notification = notification;
  query.loggingName = @"storage.notifications.delete";
  return query;
}

@end

@implementation GTLRStorageQuery_NotificationsGet

@dynamic bucket, notification, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket
                   notification:(NSString *)notification {
  NSArray *pathParams = @[
    @"bucket", @"notification"
  ];
  NSString *pathURITemplate = @"b/{bucket}/notificationConfigs/{notification}";
  GTLRStorageQuery_NotificationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.notification = notification;
  query.expectedObjectClass = [GTLRStorage_Notification class];
  query.loggingName = @"storage.notifications.get";
  return query;
}

@end

@implementation GTLRStorageQuery_NotificationsInsert

@dynamic bucket, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_Notification *)object
                         bucket:(NSString *)bucket {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}/notificationConfigs";
  GTLRStorageQuery_NotificationsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.expectedObjectClass = [GTLRStorage_Notification class];
  query.loggingName = @"storage.notifications.insert";
  return query;
}

@end

@implementation GTLRStorageQuery_NotificationsList

@dynamic bucket, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket {
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}/notificationConfigs";
  GTLRStorageQuery_NotificationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.expectedObjectClass = [GTLRStorage_Notifications class];
  query.loggingName = @"storage.notifications.list";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectAccessControlsDelete

@dynamic bucket, entity, generation, object, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket
                         object:(NSString *)object_param
                         entity:(NSString *)entity {
  NSArray *pathParams = @[
    @"bucket", @"entity", @"object"
  ];
  NSString *pathURITemplate = @"b/{bucket}/o/{object}/acl/{entity}";
  GTLRStorageQuery_ObjectAccessControlsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.object = object_param;
  query.entity = entity;
  query.loggingName = @"storage.objectAccessControls.delete";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectAccessControlsGet

@dynamic bucket, entity, generation, object, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket
                         object:(NSString *)object_param
                         entity:(NSString *)entity {
  NSArray *pathParams = @[
    @"bucket", @"entity", @"object"
  ];
  NSString *pathURITemplate = @"b/{bucket}/o/{object}/acl/{entity}";
  GTLRStorageQuery_ObjectAccessControlsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.object = object_param;
  query.entity = entity;
  query.expectedObjectClass = [GTLRStorage_ObjectAccessControl class];
  query.loggingName = @"storage.objectAccessControls.get";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectAccessControlsInsert

@dynamic bucket, generation, object, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_ObjectAccessControl *)object
                         bucket:(NSString *)bucket
                         object:(NSString *)object_param {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"bucket", @"object"
  ];
  NSString *pathURITemplate = @"b/{bucket}/o/{object}/acl";
  GTLRStorageQuery_ObjectAccessControlsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.object = object_param;
  query.expectedObjectClass = [GTLRStorage_ObjectAccessControl class];
  query.loggingName = @"storage.objectAccessControls.insert";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectAccessControlsList

@dynamic bucket, generation, object, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket
                         object:(NSString *)object_param {
  NSArray *pathParams = @[
    @"bucket", @"object"
  ];
  NSString *pathURITemplate = @"b/{bucket}/o/{object}/acl";
  GTLRStorageQuery_ObjectAccessControlsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.object = object_param;
  query.expectedObjectClass = [GTLRStorage_ObjectAccessControls class];
  query.loggingName = @"storage.objectAccessControls.list";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectAccessControlsPatch

@dynamic bucket, entity, generation, object, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_ObjectAccessControl *)object
                         bucket:(NSString *)bucket
                         object:(NSString *)object_param
                         entity:(NSString *)entity {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"bucket", @"entity", @"object"
  ];
  NSString *pathURITemplate = @"b/{bucket}/o/{object}/acl/{entity}";
  GTLRStorageQuery_ObjectAccessControlsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.object = object_param;
  query.entity = entity;
  query.expectedObjectClass = [GTLRStorage_ObjectAccessControl class];
  query.loggingName = @"storage.objectAccessControls.patch";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectAccessControlsUpdate

@dynamic bucket, entity, generation, object, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_ObjectAccessControl *)object
                         bucket:(NSString *)bucket
                         object:(NSString *)object_param
                         entity:(NSString *)entity {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"bucket", @"entity", @"object"
  ];
  NSString *pathURITemplate = @"b/{bucket}/o/{object}/acl/{entity}";
  GTLRStorageQuery_ObjectAccessControlsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.object = object_param;
  query.entity = entity;
  query.expectedObjectClass = [GTLRStorage_ObjectAccessControl class];
  query.loggingName = @"storage.objectAccessControls.update";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectsCompose

@dynamic destinationBucket, destinationObject, destinationPredefinedAcl,
         ifGenerationMatch, ifMetagenerationMatch, kmsKeyName, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_ComposeRequest *)object
              destinationBucket:(NSString *)destinationBucket
              destinationObject:(NSString *)destinationObject {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"destinationBucket", @"destinationObject"
  ];
  NSString *pathURITemplate = @"b/{destinationBucket}/o/{destinationObject}/compose";
  GTLRStorageQuery_ObjectsCompose *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.destinationBucket = destinationBucket;
  query.destinationObject = destinationObject;
  query.expectedObjectClass = [GTLRStorage_Object class];
  query.loggingName = @"storage.objects.compose";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectsCopy

@dynamic destinationBucket, destinationObject, destinationPredefinedAcl,
         ifGenerationMatch, ifGenerationNotMatch, ifMetagenerationMatch,
         ifMetagenerationNotMatch, ifSourceGenerationMatch,
         ifSourceGenerationNotMatch, ifSourceMetagenerationMatch,
         ifSourceMetagenerationNotMatch, projection, sourceBucket,
         sourceGeneration, sourceObject, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_Object *)object
                   sourceBucket:(NSString *)sourceBucket
                   sourceObject:(NSString *)sourceObject
              destinationBucket:(NSString *)destinationBucket
              destinationObject:(NSString *)destinationObject {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"destinationBucket", @"destinationObject", @"sourceBucket",
    @"sourceObject"
  ];
  NSString *pathURITemplate = @"b/{sourceBucket}/o/{sourceObject}/copyTo/b/{destinationBucket}/o/{destinationObject}";
  GTLRStorageQuery_ObjectsCopy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sourceBucket = sourceBucket;
  query.sourceObject = sourceObject;
  query.destinationBucket = destinationBucket;
  query.destinationObject = destinationObject;
  query.expectedObjectClass = [GTLRStorage_Object class];
  query.loggingName = @"storage.objects.copy";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectsDelete

@dynamic bucket, generation, ifGenerationMatch, ifGenerationNotMatch,
         ifMetagenerationMatch, ifMetagenerationNotMatch, object, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket
                         object:(NSString *)object_param {
  NSArray *pathParams = @[
    @"bucket", @"object"
  ];
  NSString *pathURITemplate = @"b/{bucket}/o/{object}";
  GTLRStorageQuery_ObjectsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.object = object_param;
  query.loggingName = @"storage.objects.delete";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectsGet

@dynamic bucket, generation, ifGenerationMatch, ifGenerationNotMatch,
         ifMetagenerationMatch, ifMetagenerationNotMatch, object, projection,
         userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket
                         object:(NSString *)object_param {
  NSArray *pathParams = @[
    @"bucket", @"object"
  ];
  NSString *pathURITemplate = @"b/{bucket}/o/{object}";
  GTLRStorageQuery_ObjectsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.object = object_param;
  query.expectedObjectClass = [GTLRStorage_Object class];
  query.loggingName = @"storage.objects.get";
  return query;
}

+ (instancetype)queryForMediaWithBucket:(NSString *)bucket
                                 object:(NSString *)object_param {
  GTLRStorageQuery_ObjectsGet *query =
    [self queryWithBucket:bucket
                   object:object_param];
  query.downloadAsDataObjectType = @"media";
  query.useMediaDownloadService = YES;
  query.loggingName = @"Download storage.objects.get";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectsGetIamPolicy

@dynamic bucket, generation, object, userProject;

+ (instancetype)queryWithBucket:(NSString *)bucket
                         object:(NSString *)object_param {
  NSArray *pathParams = @[
    @"bucket", @"object"
  ];
  NSString *pathURITemplate = @"b/{bucket}/o/{object}/iam";
  GTLRStorageQuery_ObjectsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.object = object_param;
  query.expectedObjectClass = [GTLRStorage_Policy class];
  query.loggingName = @"storage.objects.getIamPolicy";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectsInsert

@dynamic bucket, contentEncoding, ifGenerationMatch, ifGenerationNotMatch,
         ifMetagenerationMatch, ifMetagenerationNotMatch, kmsKeyName, name,
         predefinedAcl, projection, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_Object *)object
                         bucket:(NSString *)bucket
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}/o";
  GTLRStorageQuery_ObjectsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRStorage_Object class];
  query.loggingName = @"storage.objects.insert";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectsList

@dynamic bucket, delimiter, includeTrailingDelimiter, maxResults, pageToken,
         prefix, projection, userProject, versions;

+ (instancetype)queryWithBucket:(NSString *)bucket {
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}/o";
  GTLRStorageQuery_ObjectsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.expectedObjectClass = [GTLRStorage_Objects class];
  query.loggingName = @"storage.objects.list";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectsPatch

@dynamic bucket, generation, ifGenerationMatch, ifGenerationNotMatch,
         ifMetagenerationMatch, ifMetagenerationNotMatch, object, predefinedAcl,
         projection, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_Object *)object
                         bucket:(NSString *)bucket
                         object:(NSString *)object_param {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"bucket", @"object"
  ];
  NSString *pathURITemplate = @"b/{bucket}/o/{object}";
  GTLRStorageQuery_ObjectsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.object = object_param;
  query.expectedObjectClass = [GTLRStorage_Object class];
  query.loggingName = @"storage.objects.patch";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectsRewrite

@dynamic destinationBucket, destinationKmsKeyName, destinationObject,
         destinationPredefinedAcl, ifGenerationMatch, ifGenerationNotMatch,
         ifMetagenerationMatch, ifMetagenerationNotMatch,
         ifSourceGenerationMatch, ifSourceGenerationNotMatch,
         ifSourceMetagenerationMatch, ifSourceMetagenerationNotMatch,
         maxBytesRewrittenPerCall, projection, rewriteToken, sourceBucket,
         sourceGeneration, sourceObject, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_Object *)object
                   sourceBucket:(NSString *)sourceBucket
                   sourceObject:(NSString *)sourceObject
              destinationBucket:(NSString *)destinationBucket
              destinationObject:(NSString *)destinationObject {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"destinationBucket", @"destinationObject", @"sourceBucket",
    @"sourceObject"
  ];
  NSString *pathURITemplate = @"b/{sourceBucket}/o/{sourceObject}/rewriteTo/b/{destinationBucket}/o/{destinationObject}";
  GTLRStorageQuery_ObjectsRewrite *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sourceBucket = sourceBucket;
  query.sourceObject = sourceObject;
  query.destinationBucket = destinationBucket;
  query.destinationObject = destinationObject;
  query.expectedObjectClass = [GTLRStorage_RewriteResponse class];
  query.loggingName = @"storage.objects.rewrite";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectsSetIamPolicy

@dynamic bucket, generation, object, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_Policy *)object
                         bucket:(NSString *)bucket
                         object:(NSString *)object_param {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"bucket", @"object"
  ];
  NSString *pathURITemplate = @"b/{bucket}/o/{object}/iam";
  GTLRStorageQuery_ObjectsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.object = object_param;
  query.expectedObjectClass = [GTLRStorage_Policy class];
  query.loggingName = @"storage.objects.setIamPolicy";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectsTestIamPermissions

@dynamic bucket, generation, object, permissions, userProject;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithBucket:(NSString *)bucket
                         object:(NSString *)object_param
                    permissions:(NSArray<NSString *> *)permissions {
  NSArray *pathParams = @[
    @"bucket", @"object"
  ];
  NSString *pathURITemplate = @"b/{bucket}/o/{object}/iam/testPermissions";
  GTLRStorageQuery_ObjectsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.bucket = bucket;
  query.object = object_param;
  query.permissions = permissions;
  query.expectedObjectClass = [GTLRStorage_TestIamPermissionsResponse class];
  query.loggingName = @"storage.objects.testIamPermissions";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectsUpdate

@dynamic bucket, generation, ifGenerationMatch, ifGenerationNotMatch,
         ifMetagenerationMatch, ifMetagenerationNotMatch, object, predefinedAcl,
         projection, userProject;

+ (instancetype)queryWithObject:(GTLRStorage_Object *)object
                         bucket:(NSString *)bucket
                         object:(NSString *)object_param {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"bucket", @"object"
  ];
  NSString *pathURITemplate = @"b/{bucket}/o/{object}";
  GTLRStorageQuery_ObjectsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.object = object_param;
  query.expectedObjectClass = [GTLRStorage_Object class];
  query.loggingName = @"storage.objects.update";
  return query;
}

@end

@implementation GTLRStorageQuery_ObjectsWatchAll

@dynamic bucket, delimiter, includeTrailingDelimiter, maxResults, pageToken,
         prefix, projection, userProject, versions;

+ (instancetype)queryWithObject:(GTLRStorage_Channel *)object
                         bucket:(NSString *)bucket {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"b/{bucket}/o/watch";
  GTLRStorageQuery_ObjectsWatchAll *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.expectedObjectClass = [GTLRStorage_Channel class];
  query.loggingName = @"storage.objects.watchAll";
  return query;
}

@end

@implementation GTLRStorageQuery_ProjectsServiceAccountGet

@dynamic projectId, userProject;

+ (instancetype)queryWithProjectId:(NSString *)projectId {
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"projects/{projectId}/serviceAccount";
  GTLRStorageQuery_ProjectsServiceAccountGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRStorage_ServiceAccount class];
  query.loggingName = @"storage.projects.serviceAccount.get";
  return query;
}

@end
