// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Storage JSON API (storage/v1)
// Description:
//   Stores and retrieves potentially large, immutable data objects.
// Documentation:
//   https://developers.google.com/storage/docs/json_api/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRStorage_Bucket;
@class GTLRStorage_BucketAccessControl;
@class GTLRStorage_Channel;
@class GTLRStorage_ComposeRequest;
@class GTLRStorage_Notification;
@class GTLRStorage_Object;
@class GTLRStorage_ObjectAccessControl;
@class GTLRStorage_Policy;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// destinationPredefinedAcl

/**
 *  Object owner gets OWNER access, and allAuthenticatedUsers get READER access.
 *
 *  Value: "authenticatedRead"
 */
GTLR_EXTERN NSString * const kGTLRStorageDestinationPredefinedAclAuthenticatedRead;
/**
 *  Object owner gets OWNER access, and project team owners get OWNER access.
 *
 *  Value: "bucketOwnerFullControl"
 */
GTLR_EXTERN NSString * const kGTLRStorageDestinationPredefinedAclBucketOwnerFullControl;
/**
 *  Object owner gets OWNER access, and project team owners get READER access.
 *
 *  Value: "bucketOwnerRead"
 */
GTLR_EXTERN NSString * const kGTLRStorageDestinationPredefinedAclBucketOwnerRead;
/**
 *  Object owner gets OWNER access.
 *
 *  Value: "private"
 */
GTLR_EXTERN NSString * const kGTLRStorageDestinationPredefinedAclPrivate;
/**
 *  Object owner gets OWNER access, and project team members get access
 *  according to their roles.
 *
 *  Value: "projectPrivate"
 */
GTLR_EXTERN NSString * const kGTLRStorageDestinationPredefinedAclProjectPrivate;
/**
 *  Object owner gets OWNER access, and allUsers get READER access.
 *
 *  Value: "publicRead"
 */
GTLR_EXTERN NSString * const kGTLRStorageDestinationPredefinedAclPublicRead;

// ----------------------------------------------------------------------------
// predefinedAcl

/** Value: "authenticatedRead" */
GTLR_EXTERN NSString * const kGTLRStoragePredefinedAclAuthenticatedRead;
/**
 *  Object owner gets OWNER access, and project team owners get OWNER access.
 *
 *  Value: "bucketOwnerFullControl"
 */
GTLR_EXTERN NSString * const kGTLRStoragePredefinedAclBucketOwnerFullControl;
/**
 *  Object owner gets OWNER access, and project team owners get READER access.
 *
 *  Value: "bucketOwnerRead"
 */
GTLR_EXTERN NSString * const kGTLRStoragePredefinedAclBucketOwnerRead;
/** Value: "private" */
GTLR_EXTERN NSString * const kGTLRStoragePredefinedAclPrivate;
/** Value: "projectPrivate" */
GTLR_EXTERN NSString * const kGTLRStoragePredefinedAclProjectPrivate;
/** Value: "publicRead" */
GTLR_EXTERN NSString * const kGTLRStoragePredefinedAclPublicRead;
/**
 *  Project team owners get OWNER access, and allUsers get WRITER access.
 *
 *  Value: "publicReadWrite"
 */
GTLR_EXTERN NSString * const kGTLRStoragePredefinedAclPublicReadWrite;

// ----------------------------------------------------------------------------
// predefinedDefaultObjectAcl

/**
 *  Object owner gets OWNER access, and allAuthenticatedUsers get READER access.
 *
 *  Value: "authenticatedRead"
 */
GTLR_EXTERN NSString * const kGTLRStoragePredefinedDefaultObjectAclAuthenticatedRead;
/**
 *  Object owner gets OWNER access, and project team owners get OWNER access.
 *
 *  Value: "bucketOwnerFullControl"
 */
GTLR_EXTERN NSString * const kGTLRStoragePredefinedDefaultObjectAclBucketOwnerFullControl;
/**
 *  Object owner gets OWNER access, and project team owners get READER access.
 *
 *  Value: "bucketOwnerRead"
 */
GTLR_EXTERN NSString * const kGTLRStoragePredefinedDefaultObjectAclBucketOwnerRead;
/**
 *  Object owner gets OWNER access.
 *
 *  Value: "private"
 */
GTLR_EXTERN NSString * const kGTLRStoragePredefinedDefaultObjectAclPrivate;
/**
 *  Object owner gets OWNER access, and project team members get access
 *  according to their roles.
 *
 *  Value: "projectPrivate"
 */
GTLR_EXTERN NSString * const kGTLRStoragePredefinedDefaultObjectAclProjectPrivate;
/**
 *  Object owner gets OWNER access, and allUsers get READER access.
 *
 *  Value: "publicRead"
 */
GTLR_EXTERN NSString * const kGTLRStoragePredefinedDefaultObjectAclPublicRead;

// ----------------------------------------------------------------------------
// projection

/**
 *  Include all properties.
 *
 *  Value: "full"
 */
GTLR_EXTERN NSString * const kGTLRStorageProjectionFull;
/** Value: "noAcl" */
GTLR_EXTERN NSString * const kGTLRStorageProjectionNoAcl;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Storage query classes.
 */
@interface GTLRStorageQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Permanently deletes the ACL entry for the specified entity on the specified
 *  bucket.
 *
 *  Method: storage.bucketAccessControls.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_BucketAccessControlsDelete : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForBucketAccessControlsDeleteWithbucket:entity:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The entity holding the permission. Can be user-userId, user-emailAddress,
 *  group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
 */
@property(nonatomic, copy, nullable) NSString *entity;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Permanently deletes the ACL entry for the specified entity on the specified
 *  bucket.
 *
 *  @param bucket Name of a bucket.
 *  @param entity The entity holding the permission. Can be user-userId,
 *    user-emailAddress, group-groupId, group-emailAddress, allUsers, or
 *    allAuthenticatedUsers.
 *
 *  @return GTLRStorageQuery_BucketAccessControlsDelete
 */
+ (instancetype)queryWithBucket:(NSString *)bucket
                         entity:(NSString *)entity;

@end

/**
 *  Returns the ACL entry for the specified entity on the specified bucket.
 *
 *  Method: storage.bucketAccessControls.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_BucketAccessControlsGet : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForBucketAccessControlsGetWithbucket:entity:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The entity holding the permission. Can be user-userId, user-emailAddress,
 *  group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
 */
@property(nonatomic, copy, nullable) NSString *entity;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_BucketAccessControl.
 *
 *  Returns the ACL entry for the specified entity on the specified bucket.
 *
 *  @param bucket Name of a bucket.
 *  @param entity The entity holding the permission. Can be user-userId,
 *    user-emailAddress, group-groupId, group-emailAddress, allUsers, or
 *    allAuthenticatedUsers.
 *
 *  @return GTLRStorageQuery_BucketAccessControlsGet
 */
+ (instancetype)queryWithBucket:(NSString *)bucket
                         entity:(NSString *)entity;

@end

/**
 *  Creates a new ACL entry on the specified bucket.
 *
 *  Method: storage.bucketAccessControls.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_BucketAccessControlsInsert : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForBucketAccessControlsInsertWithObject:bucket:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_BucketAccessControl.
 *
 *  Creates a new ACL entry on the specified bucket.
 *
 *  @param object The @c GTLRStorage_BucketAccessControl to include in the
 *    query.
 *  @param bucket Name of a bucket.
 *
 *  @return GTLRStorageQuery_BucketAccessControlsInsert
 */
+ (instancetype)queryWithObject:(GTLRStorage_BucketAccessControl *)object
                         bucket:(NSString *)bucket;

@end

/**
 *  Retrieves ACL entries on the specified bucket.
 *
 *  Method: storage.bucketAccessControls.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_BucketAccessControlsList : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForBucketAccessControlsListWithbucket:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_BucketAccessControls.
 *
 *  Retrieves ACL entries on the specified bucket.
 *
 *  @param bucket Name of a bucket.
 *
 *  @return GTLRStorageQuery_BucketAccessControlsList
 */
+ (instancetype)queryWithBucket:(NSString *)bucket;

@end

/**
 *  Patches an ACL entry on the specified bucket.
 *
 *  Method: storage.bucketAccessControls.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_BucketAccessControlsPatch : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForBucketAccessControlsPatchWithObject:bucket:entity:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The entity holding the permission. Can be user-userId, user-emailAddress,
 *  group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
 */
@property(nonatomic, copy, nullable) NSString *entity;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_BucketAccessControl.
 *
 *  Patches an ACL entry on the specified bucket.
 *
 *  @param object The @c GTLRStorage_BucketAccessControl to include in the
 *    query.
 *  @param bucket Name of a bucket.
 *  @param entity The entity holding the permission. Can be user-userId,
 *    user-emailAddress, group-groupId, group-emailAddress, allUsers, or
 *    allAuthenticatedUsers.
 *
 *  @return GTLRStorageQuery_BucketAccessControlsPatch
 */
+ (instancetype)queryWithObject:(GTLRStorage_BucketAccessControl *)object
                         bucket:(NSString *)bucket
                         entity:(NSString *)entity;

@end

/**
 *  Updates an ACL entry on the specified bucket.
 *
 *  Method: storage.bucketAccessControls.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_BucketAccessControlsUpdate : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForBucketAccessControlsUpdateWithObject:bucket:entity:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The entity holding the permission. Can be user-userId, user-emailAddress,
 *  group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
 */
@property(nonatomic, copy, nullable) NSString *entity;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_BucketAccessControl.
 *
 *  Updates an ACL entry on the specified bucket.
 *
 *  @param object The @c GTLRStorage_BucketAccessControl to include in the
 *    query.
 *  @param bucket Name of a bucket.
 *  @param entity The entity holding the permission. Can be user-userId,
 *    user-emailAddress, group-groupId, group-emailAddress, allUsers, or
 *    allAuthenticatedUsers.
 *
 *  @return GTLRStorageQuery_BucketAccessControlsUpdate
 */
+ (instancetype)queryWithObject:(GTLRStorage_BucketAccessControl *)object
                         bucket:(NSString *)bucket
                         entity:(NSString *)entity;

@end

/**
 *  Permanently deletes an empty bucket.
 *
 *  Method: storage.buckets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_BucketsDelete : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForBucketsDeleteWithbucket:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  If set, only deletes the bucket if its metageneration matches this value.
 */
@property(nonatomic, assign) long long ifMetagenerationMatch;

/**
 *  If set, only deletes the bucket if its metageneration does not match this
 *  value.
 */
@property(nonatomic, assign) long long ifMetagenerationNotMatch;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Permanently deletes an empty bucket.
 *
 *  @param bucket Name of a bucket.
 *
 *  @return GTLRStorageQuery_BucketsDelete
 */
+ (instancetype)queryWithBucket:(NSString *)bucket;

@end

/**
 *  Returns metadata for the specified bucket.
 *
 *  Method: storage.buckets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageCloudPlatformReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_BucketsGet : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForBucketsGetWithbucket:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Makes the return of the bucket metadata conditional on whether the bucket's
 *  current metageneration matches the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationMatch;

/**
 *  Makes the return of the bucket metadata conditional on whether the bucket's
 *  current metageneration does not match the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationNotMatch;

/**
 *  Set of properties to return. Defaults to noAcl.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageProjectionFull Include all properties. (Value: "full")
 *    @arg @c kGTLRStorageProjectionNoAcl Omit owner, acl and defaultObjectAcl
 *        properties. (Value: "noAcl")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Bucket.
 *
 *  Returns metadata for the specified bucket.
 *
 *  @param bucket Name of a bucket.
 *
 *  @return GTLRStorageQuery_BucketsGet
 */
+ (instancetype)queryWithBucket:(NSString *)bucket;

@end

/**
 *  Returns an IAM policy for the specified bucket.
 *
 *  Method: storage.buckets.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageCloudPlatformReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_BucketsGetIamPolicy : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForBucketsGetIamPolicyWithbucket:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Policy.
 *
 *  Returns an IAM policy for the specified bucket.
 *
 *  @param bucket Name of a bucket.
 *
 *  @return GTLRStorageQuery_BucketsGetIamPolicy
 */
+ (instancetype)queryWithBucket:(NSString *)bucket;

@end

/**
 *  Creates a new bucket.
 *
 *  Method: storage.buckets.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_BucketsInsert : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForBucketsInsertWithObject:project:]

/**
 *  Apply a predefined set of access controls to this bucket.
 *
 *  Likely values:
 *    @arg @c kGTLRStoragePredefinedAclAuthenticatedRead Project team owners get
 *        OWNER access, and allAuthenticatedUsers get READER access. (Value:
 *        "authenticatedRead")
 *    @arg @c kGTLRStoragePredefinedAclPrivate Project team owners get OWNER
 *        access. (Value: "private")
 *    @arg @c kGTLRStoragePredefinedAclProjectPrivate Project team members get
 *        access according to their roles. (Value: "projectPrivate")
 *    @arg @c kGTLRStoragePredefinedAclPublicRead Project team owners get OWNER
 *        access, and allUsers get READER access. (Value: "publicRead")
 *    @arg @c kGTLRStoragePredefinedAclPublicReadWrite Project team owners get
 *        OWNER access, and allUsers get WRITER access. (Value:
 *        "publicReadWrite")
 */
@property(nonatomic, copy, nullable) NSString *predefinedAcl;

/**
 *  Apply a predefined set of default object access controls to this bucket.
 *
 *  Likely values:
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclAuthenticatedRead Object
 *        owner gets OWNER access, and allAuthenticatedUsers get READER access.
 *        (Value: "authenticatedRead")
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclBucketOwnerFullControl
 *        Object owner gets OWNER access, and project team owners get OWNER
 *        access. (Value: "bucketOwnerFullControl")
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclBucketOwnerRead Object owner
 *        gets OWNER access, and project team owners get READER access. (Value:
 *        "bucketOwnerRead")
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclPrivate Object owner gets
 *        OWNER access. (Value: "private")
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclProjectPrivate Object owner
 *        gets OWNER access, and project team members get access according to
 *        their roles. (Value: "projectPrivate")
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclPublicRead Object owner gets
 *        OWNER access, and allUsers get READER access. (Value: "publicRead")
 */
@property(nonatomic, copy, nullable) NSString *predefinedDefaultObjectAcl;

/** A valid API project identifier. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Set of properties to return. Defaults to noAcl, unless the bucket resource
 *  specifies acl or defaultObjectAcl properties, when it defaults to full.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageProjectionFull Include all properties. (Value: "full")
 *    @arg @c kGTLRStorageProjectionNoAcl Omit owner, acl and defaultObjectAcl
 *        properties. (Value: "noAcl")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/** The project to be billed for this request. */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Bucket.
 *
 *  Creates a new bucket.
 *
 *  @param object The @c GTLRStorage_Bucket to include in the query.
 *  @param project A valid API project identifier.
 *
 *  @return GTLRStorageQuery_BucketsInsert
 */
+ (instancetype)queryWithObject:(GTLRStorage_Bucket *)object
                        project:(NSString *)project;

@end

/**
 *  Retrieves a list of buckets for a given project.
 *
 *  Method: storage.buckets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageCloudPlatformReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_BucketsList : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForBucketsListWithproject:]

/**
 *  Maximum number of buckets to return in a single response. The service will
 *  use this parameter or 1,000 items, whichever is smaller.
 *
 *  @note If not set, the documented server-side default will be 1000.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  A previously-returned page token representing part of the larger set of
 *  results to view.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Filter results to buckets whose names begin with this prefix. */
@property(nonatomic, copy, nullable) NSString *prefix;

/** A valid API project identifier. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Set of properties to return. Defaults to noAcl.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageProjectionFull Include all properties. (Value: "full")
 *    @arg @c kGTLRStorageProjectionNoAcl Omit owner, acl and defaultObjectAcl
 *        properties. (Value: "noAcl")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/** The project to be billed for this request. */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Buckets.
 *
 *  Retrieves a list of buckets for a given project.
 *
 *  @param project A valid API project identifier.
 *
 *  @return GTLRStorageQuery_BucketsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProject:(NSString *)project;

@end

/**
 *  Locks retention policy on a bucket.
 *
 *  Method: storage.buckets.lockRetentionPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_BucketsLockRetentionPolicy : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForBucketsLockRetentionPolicyWithbucket:ifMetagenerationMatch:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Makes the operation conditional on whether bucket's current metageneration
 *  matches the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationMatch;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Bucket.
 *
 *  Locks retention policy on a bucket.
 *
 *  @param bucket Name of a bucket.
 *  @param ifMetagenerationMatch Makes the operation conditional on whether
 *    bucket's current metageneration matches the given value.
 *
 *  @return GTLRStorageQuery_BucketsLockRetentionPolicy
 */
+ (instancetype)queryWithBucket:(NSString *)bucket
          ifMetagenerationMatch:(long long)ifMetagenerationMatch;

@end

/**
 *  Patches a bucket. Changes to the bucket will be readable immediately after
 *  writing, but configuration changes may take time to propagate.
 *
 *  Method: storage.buckets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_BucketsPatch : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForBucketsPatchWithObject:bucket:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Makes the return of the bucket metadata conditional on whether the bucket's
 *  current metageneration matches the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationMatch;

/**
 *  Makes the return of the bucket metadata conditional on whether the bucket's
 *  current metageneration does not match the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationNotMatch;

/**
 *  Apply a predefined set of access controls to this bucket.
 *
 *  Likely values:
 *    @arg @c kGTLRStoragePredefinedAclAuthenticatedRead Project team owners get
 *        OWNER access, and allAuthenticatedUsers get READER access. (Value:
 *        "authenticatedRead")
 *    @arg @c kGTLRStoragePredefinedAclPrivate Project team owners get OWNER
 *        access. (Value: "private")
 *    @arg @c kGTLRStoragePredefinedAclProjectPrivate Project team members get
 *        access according to their roles. (Value: "projectPrivate")
 *    @arg @c kGTLRStoragePredefinedAclPublicRead Project team owners get OWNER
 *        access, and allUsers get READER access. (Value: "publicRead")
 *    @arg @c kGTLRStoragePredefinedAclPublicReadWrite Project team owners get
 *        OWNER access, and allUsers get WRITER access. (Value:
 *        "publicReadWrite")
 */
@property(nonatomic, copy, nullable) NSString *predefinedAcl;

/**
 *  Apply a predefined set of default object access controls to this bucket.
 *
 *  Likely values:
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclAuthenticatedRead Object
 *        owner gets OWNER access, and allAuthenticatedUsers get READER access.
 *        (Value: "authenticatedRead")
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclBucketOwnerFullControl
 *        Object owner gets OWNER access, and project team owners get OWNER
 *        access. (Value: "bucketOwnerFullControl")
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclBucketOwnerRead Object owner
 *        gets OWNER access, and project team owners get READER access. (Value:
 *        "bucketOwnerRead")
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclPrivate Object owner gets
 *        OWNER access. (Value: "private")
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclProjectPrivate Object owner
 *        gets OWNER access, and project team members get access according to
 *        their roles. (Value: "projectPrivate")
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclPublicRead Object owner gets
 *        OWNER access, and allUsers get READER access. (Value: "publicRead")
 */
@property(nonatomic, copy, nullable) NSString *predefinedDefaultObjectAcl;

/**
 *  Set of properties to return. Defaults to full.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageProjectionFull Include all properties. (Value: "full")
 *    @arg @c kGTLRStorageProjectionNoAcl Omit owner, acl and defaultObjectAcl
 *        properties. (Value: "noAcl")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Bucket.
 *
 *  Patches a bucket. Changes to the bucket will be readable immediately after
 *  writing, but configuration changes may take time to propagate.
 *
 *  @param object The @c GTLRStorage_Bucket to include in the query.
 *  @param bucket Name of a bucket.
 *
 *  @return GTLRStorageQuery_BucketsPatch
 */
+ (instancetype)queryWithObject:(GTLRStorage_Bucket *)object
                         bucket:(NSString *)bucket;

@end

/**
 *  Updates an IAM policy for the specified bucket.
 *
 *  Method: storage.buckets.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_BucketsSetIamPolicy : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForBucketsSetIamPolicyWithObject:bucket:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Policy.
 *
 *  Updates an IAM policy for the specified bucket.
 *
 *  @param object The @c GTLRStorage_Policy to include in the query.
 *  @param bucket Name of a bucket.
 *
 *  @return GTLRStorageQuery_BucketsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRStorage_Policy *)object
                         bucket:(NSString *)bucket;

@end

/**
 *  Tests a set of permissions on the given bucket to see which, if any, are
 *  held by the caller.
 *
 *  Method: storage.buckets.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageCloudPlatformReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_BucketsTestIamPermissions : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForBucketsTestIamPermissionsWithbucket:permissions:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/** Permissions to test. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_TestIamPermissionsResponse.
 *
 *  Tests a set of permissions on the given bucket to see which, if any, are
 *  held by the caller.
 *
 *  @param bucket Name of a bucket.
 *  @param permissions Permissions to test.
 *
 *  @return GTLRStorageQuery_BucketsTestIamPermissions
 */
+ (instancetype)queryWithBucket:(NSString *)bucket
                    permissions:(NSArray<NSString *> *)permissions;

@end

/**
 *  Updates a bucket. Changes to the bucket will be readable immediately after
 *  writing, but configuration changes may take time to propagate.
 *
 *  Method: storage.buckets.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_BucketsUpdate : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForBucketsUpdateWithObject:bucket:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Makes the return of the bucket metadata conditional on whether the bucket's
 *  current metageneration matches the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationMatch;

/**
 *  Makes the return of the bucket metadata conditional on whether the bucket's
 *  current metageneration does not match the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationNotMatch;

/**
 *  Apply a predefined set of access controls to this bucket.
 *
 *  Likely values:
 *    @arg @c kGTLRStoragePredefinedAclAuthenticatedRead Project team owners get
 *        OWNER access, and allAuthenticatedUsers get READER access. (Value:
 *        "authenticatedRead")
 *    @arg @c kGTLRStoragePredefinedAclPrivate Project team owners get OWNER
 *        access. (Value: "private")
 *    @arg @c kGTLRStoragePredefinedAclProjectPrivate Project team members get
 *        access according to their roles. (Value: "projectPrivate")
 *    @arg @c kGTLRStoragePredefinedAclPublicRead Project team owners get OWNER
 *        access, and allUsers get READER access. (Value: "publicRead")
 *    @arg @c kGTLRStoragePredefinedAclPublicReadWrite Project team owners get
 *        OWNER access, and allUsers get WRITER access. (Value:
 *        "publicReadWrite")
 */
@property(nonatomic, copy, nullable) NSString *predefinedAcl;

/**
 *  Apply a predefined set of default object access controls to this bucket.
 *
 *  Likely values:
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclAuthenticatedRead Object
 *        owner gets OWNER access, and allAuthenticatedUsers get READER access.
 *        (Value: "authenticatedRead")
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclBucketOwnerFullControl
 *        Object owner gets OWNER access, and project team owners get OWNER
 *        access. (Value: "bucketOwnerFullControl")
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclBucketOwnerRead Object owner
 *        gets OWNER access, and project team owners get READER access. (Value:
 *        "bucketOwnerRead")
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclPrivate Object owner gets
 *        OWNER access. (Value: "private")
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclProjectPrivate Object owner
 *        gets OWNER access, and project team members get access according to
 *        their roles. (Value: "projectPrivate")
 *    @arg @c kGTLRStoragePredefinedDefaultObjectAclPublicRead Object owner gets
 *        OWNER access, and allUsers get READER access. (Value: "publicRead")
 */
@property(nonatomic, copy, nullable) NSString *predefinedDefaultObjectAcl;

/**
 *  Set of properties to return. Defaults to full.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageProjectionFull Include all properties. (Value: "full")
 *    @arg @c kGTLRStorageProjectionNoAcl Omit owner, acl and defaultObjectAcl
 *        properties. (Value: "noAcl")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Bucket.
 *
 *  Updates a bucket. Changes to the bucket will be readable immediately after
 *  writing, but configuration changes may take time to propagate.
 *
 *  @param object The @c GTLRStorage_Bucket to include in the query.
 *  @param bucket Name of a bucket.
 *
 *  @return GTLRStorageQuery_BucketsUpdate
 */
+ (instancetype)queryWithObject:(GTLRStorage_Bucket *)object
                         bucket:(NSString *)bucket;

@end

/**
 *  Stop watching resources through this channel
 *
 *  Method: storage.channels.stop
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageCloudPlatformReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_ChannelsStop : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForChannelsStopWithObject:]

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Stop watching resources through this channel
 *
 *  @param object The @c GTLRStorage_Channel to include in the query.
 *
 *  @return GTLRStorageQuery_ChannelsStop
 */
+ (instancetype)queryWithObject:(GTLRStorage_Channel *)object;

@end

/**
 *  Permanently deletes the default object ACL entry for the specified entity on
 *  the specified bucket.
 *
 *  Method: storage.defaultObjectAccessControls.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_DefaultObjectAccessControlsDelete : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForDefaultObjectAccessControlsDeleteWithbucket:entity:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The entity holding the permission. Can be user-userId, user-emailAddress,
 *  group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
 */
@property(nonatomic, copy, nullable) NSString *entity;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Permanently deletes the default object ACL entry for the specified entity on
 *  the specified bucket.
 *
 *  @param bucket Name of a bucket.
 *  @param entity The entity holding the permission. Can be user-userId,
 *    user-emailAddress, group-groupId, group-emailAddress, allUsers, or
 *    allAuthenticatedUsers.
 *
 *  @return GTLRStorageQuery_DefaultObjectAccessControlsDelete
 */
+ (instancetype)queryWithBucket:(NSString *)bucket
                         entity:(NSString *)entity;

@end

/**
 *  Returns the default object ACL entry for the specified entity on the
 *  specified bucket.
 *
 *  Method: storage.defaultObjectAccessControls.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_DefaultObjectAccessControlsGet : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForDefaultObjectAccessControlsGetWithbucket:entity:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The entity holding the permission. Can be user-userId, user-emailAddress,
 *  group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
 */
@property(nonatomic, copy, nullable) NSString *entity;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_ObjectAccessControl.
 *
 *  Returns the default object ACL entry for the specified entity on the
 *  specified bucket.
 *
 *  @param bucket Name of a bucket.
 *  @param entity The entity holding the permission. Can be user-userId,
 *    user-emailAddress, group-groupId, group-emailAddress, allUsers, or
 *    allAuthenticatedUsers.
 *
 *  @return GTLRStorageQuery_DefaultObjectAccessControlsGet
 */
+ (instancetype)queryWithBucket:(NSString *)bucket
                         entity:(NSString *)entity;

@end

/**
 *  Creates a new default object ACL entry on the specified bucket.
 *
 *  Method: storage.defaultObjectAccessControls.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_DefaultObjectAccessControlsInsert : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForDefaultObjectAccessControlsInsertWithObject:bucket:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_ObjectAccessControl.
 *
 *  Creates a new default object ACL entry on the specified bucket.
 *
 *  @param object The @c GTLRStorage_ObjectAccessControl to include in the
 *    query.
 *  @param bucket Name of a bucket.
 *
 *  @return GTLRStorageQuery_DefaultObjectAccessControlsInsert
 */
+ (instancetype)queryWithObject:(GTLRStorage_ObjectAccessControl *)object
                         bucket:(NSString *)bucket;

@end

/**
 *  Retrieves default object ACL entries on the specified bucket.
 *
 *  Method: storage.defaultObjectAccessControls.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_DefaultObjectAccessControlsList : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForDefaultObjectAccessControlsListWithbucket:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  If present, only return default ACL listing if the bucket's current
 *  metageneration matches this value.
 */
@property(nonatomic, assign) long long ifMetagenerationMatch;

/**
 *  If present, only return default ACL listing if the bucket's current
 *  metageneration does not match the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationNotMatch;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_ObjectAccessControls.
 *
 *  Retrieves default object ACL entries on the specified bucket.
 *
 *  @param bucket Name of a bucket.
 *
 *  @return GTLRStorageQuery_DefaultObjectAccessControlsList
 */
+ (instancetype)queryWithBucket:(NSString *)bucket;

@end

/**
 *  Patches a default object ACL entry on the specified bucket.
 *
 *  Method: storage.defaultObjectAccessControls.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_DefaultObjectAccessControlsPatch : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForDefaultObjectAccessControlsPatchWithObject:bucket:entity:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The entity holding the permission. Can be user-userId, user-emailAddress,
 *  group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
 */
@property(nonatomic, copy, nullable) NSString *entity;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_ObjectAccessControl.
 *
 *  Patches a default object ACL entry on the specified bucket.
 *
 *  @param object The @c GTLRStorage_ObjectAccessControl to include in the
 *    query.
 *  @param bucket Name of a bucket.
 *  @param entity The entity holding the permission. Can be user-userId,
 *    user-emailAddress, group-groupId, group-emailAddress, allUsers, or
 *    allAuthenticatedUsers.
 *
 *  @return GTLRStorageQuery_DefaultObjectAccessControlsPatch
 */
+ (instancetype)queryWithObject:(GTLRStorage_ObjectAccessControl *)object
                         bucket:(NSString *)bucket
                         entity:(NSString *)entity;

@end

/**
 *  Updates a default object ACL entry on the specified bucket.
 *
 *  Method: storage.defaultObjectAccessControls.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_DefaultObjectAccessControlsUpdate : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForDefaultObjectAccessControlsUpdateWithObject:bucket:entity:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The entity holding the permission. Can be user-userId, user-emailAddress,
 *  group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
 */
@property(nonatomic, copy, nullable) NSString *entity;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_ObjectAccessControl.
 *
 *  Updates a default object ACL entry on the specified bucket.
 *
 *  @param object The @c GTLRStorage_ObjectAccessControl to include in the
 *    query.
 *  @param bucket Name of a bucket.
 *  @param entity The entity holding the permission. Can be user-userId,
 *    user-emailAddress, group-groupId, group-emailAddress, allUsers, or
 *    allAuthenticatedUsers.
 *
 *  @return GTLRStorageQuery_DefaultObjectAccessControlsUpdate
 */
+ (instancetype)queryWithObject:(GTLRStorage_ObjectAccessControl *)object
                         bucket:(NSString *)bucket
                         entity:(NSString *)entity;

@end

/**
 *  Permanently deletes a notification subscription.
 *
 *  Method: storage.notifications.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_NotificationsDelete : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForNotificationsDeleteWithbucket:notification:]

/** The parent bucket of the notification. */
@property(nonatomic, copy, nullable) NSString *bucket;

/** ID of the notification to delete. */
@property(nonatomic, copy, nullable) NSString *notification;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Permanently deletes a notification subscription.
 *
 *  @param bucket The parent bucket of the notification.
 *  @param notification ID of the notification to delete.
 *
 *  @return GTLRStorageQuery_NotificationsDelete
 */
+ (instancetype)queryWithBucket:(NSString *)bucket
                   notification:(NSString *)notification;

@end

/**
 *  View a notification configuration.
 *
 *  Method: storage.notifications.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageCloudPlatformReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_NotificationsGet : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForNotificationsGetWithbucket:notification:]

/** The parent bucket of the notification. */
@property(nonatomic, copy, nullable) NSString *bucket;

/** Notification ID */
@property(nonatomic, copy, nullable) NSString *notification;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Notification.
 *
 *  View a notification configuration.
 *
 *  @param bucket The parent bucket of the notification.
 *  @param notification Notification ID
 *
 *  @return GTLRStorageQuery_NotificationsGet
 */
+ (instancetype)queryWithBucket:(NSString *)bucket
                   notification:(NSString *)notification;

@end

/**
 *  Creates a notification subscription for a given bucket.
 *
 *  Method: storage.notifications.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_NotificationsInsert : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForNotificationsInsertWithObject:bucket:]

/** The parent bucket of the notification. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Notification.
 *
 *  Creates a notification subscription for a given bucket.
 *
 *  @param object The @c GTLRStorage_Notification to include in the query.
 *  @param bucket The parent bucket of the notification.
 *
 *  @return GTLRStorageQuery_NotificationsInsert
 */
+ (instancetype)queryWithObject:(GTLRStorage_Notification *)object
                         bucket:(NSString *)bucket;

@end

/**
 *  Retrieves a list of notification subscriptions for a given bucket.
 *
 *  Method: storage.notifications.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageCloudPlatformReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_NotificationsList : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForNotificationsListWithbucket:]

/** Name of a Google Cloud Storage bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Notifications.
 *
 *  Retrieves a list of notification subscriptions for a given bucket.
 *
 *  @param bucket Name of a Google Cloud Storage bucket.
 *
 *  @return GTLRStorageQuery_NotificationsList
 */
+ (instancetype)queryWithBucket:(NSString *)bucket;

@end

/**
 *  Permanently deletes the ACL entry for the specified entity on the specified
 *  object.
 *
 *  Method: storage.objectAccessControls.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_ObjectAccessControlsDelete : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectAccessControlsDeleteWithbucket:object:entity:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The entity holding the permission. Can be user-userId, user-emailAddress,
 *  group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
 */
@property(nonatomic, copy, nullable) NSString *entity;

/**
 *  If present, selects a specific revision of this object (as opposed to the
 *  latest version, the default).
 */
@property(nonatomic, assign) long long generation;

/**
 *  Name of the object. For information about how to URL encode object names to
 *  be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *object;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Permanently deletes the ACL entry for the specified entity on the specified
 *  object.
 *
 *  @param bucket Name of a bucket.
 *  @param object Name of the object. For information about how to URL encode
 *    object names to be path safe, see Encoding URI Path Parts.
 *  @param entity The entity holding the permission. Can be user-userId,
 *    user-emailAddress, group-groupId, group-emailAddress, allUsers, or
 *    allAuthenticatedUsers.
 *
 *  @return GTLRStorageQuery_ObjectAccessControlsDelete
 */
+ (instancetype)queryWithBucket:(NSString *)bucket
                         object:(NSString *)object
                         entity:(NSString *)entity;

@end

/**
 *  Returns the ACL entry for the specified entity on the specified object.
 *
 *  Method: storage.objectAccessControls.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_ObjectAccessControlsGet : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectAccessControlsGetWithbucket:object:entity:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The entity holding the permission. Can be user-userId, user-emailAddress,
 *  group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
 */
@property(nonatomic, copy, nullable) NSString *entity;

/**
 *  If present, selects a specific revision of this object (as opposed to the
 *  latest version, the default).
 */
@property(nonatomic, assign) long long generation;

/**
 *  Name of the object. For information about how to URL encode object names to
 *  be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *object;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_ObjectAccessControl.
 *
 *  Returns the ACL entry for the specified entity on the specified object.
 *
 *  @param bucket Name of a bucket.
 *  @param object Name of the object. For information about how to URL encode
 *    object names to be path safe, see Encoding URI Path Parts.
 *  @param entity The entity holding the permission. Can be user-userId,
 *    user-emailAddress, group-groupId, group-emailAddress, allUsers, or
 *    allAuthenticatedUsers.
 *
 *  @return GTLRStorageQuery_ObjectAccessControlsGet
 */
+ (instancetype)queryWithBucket:(NSString *)bucket
                         object:(NSString *)object
                         entity:(NSString *)entity;

@end

/**
 *  Creates a new ACL entry on the specified object.
 *
 *  Method: storage.objectAccessControls.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_ObjectAccessControlsInsert : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectAccessControlsInsertWithObject:bucket:object:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  If present, selects a specific revision of this object (as opposed to the
 *  latest version, the default).
 */
@property(nonatomic, assign) long long generation;

/**
 *  Name of the object. For information about how to URL encode object names to
 *  be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *object;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_ObjectAccessControl.
 *
 *  Creates a new ACL entry on the specified object.
 *
 *  @param object The @c GTLRStorage_ObjectAccessControl to include in the
 *    query.
 *  @param bucket Name of a bucket.
 *  @param object_param Name of the object. For information about how to URL
 *    encode object names to be path safe, see Encoding URI Path Parts.
 *
 *  @return GTLRStorageQuery_ObjectAccessControlsInsert
 */
+ (instancetype)queryWithObject:(GTLRStorage_ObjectAccessControl *)object
                         bucket:(NSString *)bucket
                         object:(NSString *)object_param;

@end

/**
 *  Retrieves ACL entries on the specified object.
 *
 *  Method: storage.objectAccessControls.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_ObjectAccessControlsList : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectAccessControlsListWithbucket:object:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  If present, selects a specific revision of this object (as opposed to the
 *  latest version, the default).
 */
@property(nonatomic, assign) long long generation;

/**
 *  Name of the object. For information about how to URL encode object names to
 *  be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *object;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_ObjectAccessControls.
 *
 *  Retrieves ACL entries on the specified object.
 *
 *  @param bucket Name of a bucket.
 *  @param object Name of the object. For information about how to URL encode
 *    object names to be path safe, see Encoding URI Path Parts.
 *
 *  @return GTLRStorageQuery_ObjectAccessControlsList
 */
+ (instancetype)queryWithBucket:(NSString *)bucket
                         object:(NSString *)object;

@end

/**
 *  Patches an ACL entry on the specified object.
 *
 *  Method: storage.objectAccessControls.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_ObjectAccessControlsPatch : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectAccessControlsPatchWithObject:bucket:object:entity:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The entity holding the permission. Can be user-userId, user-emailAddress,
 *  group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
 */
@property(nonatomic, copy, nullable) NSString *entity;

/**
 *  If present, selects a specific revision of this object (as opposed to the
 *  latest version, the default).
 */
@property(nonatomic, assign) long long generation;

/**
 *  Name of the object. For information about how to URL encode object names to
 *  be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *object;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_ObjectAccessControl.
 *
 *  Patches an ACL entry on the specified object.
 *
 *  @param object The @c GTLRStorage_ObjectAccessControl to include in the
 *    query.
 *  @param bucket Name of a bucket.
 *  @param object_param Name of the object. For information about how to URL
 *    encode object names to be path safe, see Encoding URI Path Parts.
 *  @param entity The entity holding the permission. Can be user-userId,
 *    user-emailAddress, group-groupId, group-emailAddress, allUsers, or
 *    allAuthenticatedUsers.
 *
 *  @return GTLRStorageQuery_ObjectAccessControlsPatch
 */
+ (instancetype)queryWithObject:(GTLRStorage_ObjectAccessControl *)object
                         bucket:(NSString *)bucket
                         object:(NSString *)object_param
                         entity:(NSString *)entity;

@end

/**
 *  Updates an ACL entry on the specified object.
 *
 *  Method: storage.objectAccessControls.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_ObjectAccessControlsUpdate : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectAccessControlsUpdateWithObject:bucket:object:entity:]

/** Name of a bucket. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  The entity holding the permission. Can be user-userId, user-emailAddress,
 *  group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
 */
@property(nonatomic, copy, nullable) NSString *entity;

/**
 *  If present, selects a specific revision of this object (as opposed to the
 *  latest version, the default).
 */
@property(nonatomic, assign) long long generation;

/**
 *  Name of the object. For information about how to URL encode object names to
 *  be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *object;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_ObjectAccessControl.
 *
 *  Updates an ACL entry on the specified object.
 *
 *  @param object The @c GTLRStorage_ObjectAccessControl to include in the
 *    query.
 *  @param bucket Name of a bucket.
 *  @param object_param Name of the object. For information about how to URL
 *    encode object names to be path safe, see Encoding URI Path Parts.
 *  @param entity The entity holding the permission. Can be user-userId,
 *    user-emailAddress, group-groupId, group-emailAddress, allUsers, or
 *    allAuthenticatedUsers.
 *
 *  @return GTLRStorageQuery_ObjectAccessControlsUpdate
 */
+ (instancetype)queryWithObject:(GTLRStorage_ObjectAccessControl *)object
                         bucket:(NSString *)bucket
                         object:(NSString *)object_param
                         entity:(NSString *)entity;

@end

/**
 *  Concatenates a list of existing objects into a new object in the same
 *  bucket.
 *
 *  Method: storage.objects.compose
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_ObjectsCompose : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectsComposeWithObject:destinationBucket:destinationObject:]

/**
 *  Name of the bucket containing the source objects. The destination object is
 *  stored in this bucket.
 */
@property(nonatomic, copy, nullable) NSString *destinationBucket;

/**
 *  Name of the new object. For information about how to URL encode object names
 *  to be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *destinationObject;

/**
 *  Apply a predefined set of access controls to the destination object.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageDestinationPredefinedAclAuthenticatedRead Object owner
 *        gets OWNER access, and allAuthenticatedUsers get READER access.
 *        (Value: "authenticatedRead")
 *    @arg @c kGTLRStorageDestinationPredefinedAclBucketOwnerFullControl Object
 *        owner gets OWNER access, and project team owners get OWNER access.
 *        (Value: "bucketOwnerFullControl")
 *    @arg @c kGTLRStorageDestinationPredefinedAclBucketOwnerRead Object owner
 *        gets OWNER access, and project team owners get READER access. (Value:
 *        "bucketOwnerRead")
 *    @arg @c kGTLRStorageDestinationPredefinedAclPrivate Object owner gets
 *        OWNER access. (Value: "private")
 *    @arg @c kGTLRStorageDestinationPredefinedAclProjectPrivate Object owner
 *        gets OWNER access, and project team members get access according to
 *        their roles. (Value: "projectPrivate")
 *    @arg @c kGTLRStorageDestinationPredefinedAclPublicRead Object owner gets
 *        OWNER access, and allUsers get READER access. (Value: "publicRead")
 */
@property(nonatomic, copy, nullable) NSString *destinationPredefinedAcl;

/**
 *  Makes the operation conditional on whether the object's current generation
 *  matches the given value. Setting to 0 makes the operation succeed only if
 *  there are no live versions of the object.
 */
@property(nonatomic, assign) long long ifGenerationMatch;

/**
 *  Makes the operation conditional on whether the object's current
 *  metageneration matches the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationMatch;

/**
 *  Resource name of the Cloud KMS key, of the form
 *  projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that
 *  will be used to encrypt the object. Overrides the object metadata's
 *  kms_key_name value, if any.
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Object.
 *
 *  Concatenates a list of existing objects into a new object in the same
 *  bucket.
 *
 *  @param object The @c GTLRStorage_ComposeRequest to include in the query.
 *  @param destinationBucket Name of the bucket containing the source objects.
 *    The destination object is stored in this bucket.
 *  @param destinationObject Name of the new object. For information about how
 *    to URL encode object names to be path safe, see Encoding URI Path Parts.
 *
 *  @return GTLRStorageQuery_ObjectsCompose
 */
+ (instancetype)queryWithObject:(GTLRStorage_ComposeRequest *)object
              destinationBucket:(NSString *)destinationBucket
              destinationObject:(NSString *)destinationObject;

@end

/**
 *  Copies a source object to a destination object. Optionally overrides
 *  metadata.
 *
 *  Method: storage.objects.copy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_ObjectsCopy : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectsCopyWithObject:sourceBucket:sourceObject:destinationBucket:destinationObject:]

/**
 *  Name of the bucket in which to store the new object. Overrides the provided
 *  object metadata's bucket value, if any.For information about how to URL
 *  encode object names to be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *destinationBucket;

/**
 *  Name of the new object. Required when the object metadata is not otherwise
 *  provided. Overrides the object metadata's name value, if any.
 */
@property(nonatomic, copy, nullable) NSString *destinationObject;

/**
 *  Apply a predefined set of access controls to the destination object.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageDestinationPredefinedAclAuthenticatedRead Object owner
 *        gets OWNER access, and allAuthenticatedUsers get READER access.
 *        (Value: "authenticatedRead")
 *    @arg @c kGTLRStorageDestinationPredefinedAclBucketOwnerFullControl Object
 *        owner gets OWNER access, and project team owners get OWNER access.
 *        (Value: "bucketOwnerFullControl")
 *    @arg @c kGTLRStorageDestinationPredefinedAclBucketOwnerRead Object owner
 *        gets OWNER access, and project team owners get READER access. (Value:
 *        "bucketOwnerRead")
 *    @arg @c kGTLRStorageDestinationPredefinedAclPrivate Object owner gets
 *        OWNER access. (Value: "private")
 *    @arg @c kGTLRStorageDestinationPredefinedAclProjectPrivate Object owner
 *        gets OWNER access, and project team members get access according to
 *        their roles. (Value: "projectPrivate")
 *    @arg @c kGTLRStorageDestinationPredefinedAclPublicRead Object owner gets
 *        OWNER access, and allUsers get READER access. (Value: "publicRead")
 */
@property(nonatomic, copy, nullable) NSString *destinationPredefinedAcl;

/**
 *  Makes the operation conditional on whether the destination object's current
 *  generation matches the given value. Setting to 0 makes the operation succeed
 *  only if there are no live versions of the object.
 */
@property(nonatomic, assign) long long ifGenerationMatch;

/**
 *  Makes the operation conditional on whether the destination object's current
 *  generation does not match the given value. If no live object exists, the
 *  precondition fails. Setting to 0 makes the operation succeed only if there
 *  is a live version of the object.
 */
@property(nonatomic, assign) long long ifGenerationNotMatch;

/**
 *  Makes the operation conditional on whether the destination object's current
 *  metageneration matches the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationMatch;

/**
 *  Makes the operation conditional on whether the destination object's current
 *  metageneration does not match the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationNotMatch;

/**
 *  Makes the operation conditional on whether the source object's current
 *  generation matches the given value.
 */
@property(nonatomic, assign) long long ifSourceGenerationMatch;

/**
 *  Makes the operation conditional on whether the source object's current
 *  generation does not match the given value.
 */
@property(nonatomic, assign) long long ifSourceGenerationNotMatch;

/**
 *  Makes the operation conditional on whether the source object's current
 *  metageneration matches the given value.
 */
@property(nonatomic, assign) long long ifSourceMetagenerationMatch;

/**
 *  Makes the operation conditional on whether the source object's current
 *  metageneration does not match the given value.
 */
@property(nonatomic, assign) long long ifSourceMetagenerationNotMatch;

/**
 *  Set of properties to return. Defaults to noAcl, unless the object resource
 *  specifies the acl property, when it defaults to full.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageProjectionFull Include all properties. (Value: "full")
 *    @arg @c kGTLRStorageProjectionNoAcl Omit the owner, acl property. (Value:
 *        "noAcl")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/** Name of the bucket in which to find the source object. */
@property(nonatomic, copy, nullable) NSString *sourceBucket;

/**
 *  If present, selects a specific revision of the source object (as opposed to
 *  the latest version, the default).
 */
@property(nonatomic, assign) long long sourceGeneration;

/**
 *  Name of the source object. For information about how to URL encode object
 *  names to be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *sourceObject;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Object.
 *
 *  Copies a source object to a destination object. Optionally overrides
 *  metadata.
 *
 *  @param object The @c GTLRStorage_Object to include in the query.
 *  @param sourceBucket Name of the bucket in which to find the source object.
 *  @param sourceObject Name of the source object. For information about how to
 *    URL encode object names to be path safe, see Encoding URI Path Parts.
 *  @param destinationBucket Name of the bucket in which to store the new
 *    object. Overrides the provided object metadata's bucket value, if any.For
 *    information about how to URL encode object names to be path safe, see
 *    Encoding URI Path Parts.
 *  @param destinationObject Name of the new object. Required when the object
 *    metadata is not otherwise provided. Overrides the object metadata's name
 *    value, if any.
 *
 *  @return GTLRStorageQuery_ObjectsCopy
 */
+ (instancetype)queryWithObject:(GTLRStorage_Object *)object
                   sourceBucket:(NSString *)sourceBucket
                   sourceObject:(NSString *)sourceObject
              destinationBucket:(NSString *)destinationBucket
              destinationObject:(NSString *)destinationObject;

@end

/**
 *  Deletes an object and its metadata. Deletions are permanent if versioning is
 *  not enabled for the bucket, or if the generation parameter is used.
 *
 *  Method: storage.objects.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_ObjectsDelete : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectsDeleteWithbucket:object:]

/** Name of the bucket in which the object resides. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  If present, permanently deletes a specific revision of this object (as
 *  opposed to the latest version, the default).
 */
@property(nonatomic, assign) long long generation;

/**
 *  Makes the operation conditional on whether the object's current generation
 *  matches the given value. Setting to 0 makes the operation succeed only if
 *  there are no live versions of the object.
 */
@property(nonatomic, assign) long long ifGenerationMatch;

/**
 *  Makes the operation conditional on whether the object's current generation
 *  does not match the given value. If no live object exists, the precondition
 *  fails. Setting to 0 makes the operation succeed only if there is a live
 *  version of the object.
 */
@property(nonatomic, assign) long long ifGenerationNotMatch;

/**
 *  Makes the operation conditional on whether the object's current
 *  metageneration matches the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationMatch;

/**
 *  Makes the operation conditional on whether the object's current
 *  metageneration does not match the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationNotMatch;

/**
 *  Name of the object. For information about how to URL encode object names to
 *  be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *object;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an object and its metadata. Deletions are permanent if versioning is
 *  not enabled for the bucket, or if the generation parameter is used.
 *
 *  @param bucket Name of the bucket in which the object resides.
 *  @param object Name of the object. For information about how to URL encode
 *    object names to be path safe, see Encoding URI Path Parts.
 *
 *  @return GTLRStorageQuery_ObjectsDelete
 */
+ (instancetype)queryWithBucket:(NSString *)bucket
                         object:(NSString *)object;

@end

/**
 *  Retrieves an object or its metadata.
 *
 *  Method: storage.objects.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageCloudPlatformReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_ObjectsGet : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectsGetWithbucket:object:]

/** Name of the bucket in which the object resides. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  If present, selects a specific revision of this object (as opposed to the
 *  latest version, the default).
 */
@property(nonatomic, assign) long long generation;

/**
 *  Makes the operation conditional on whether the object's current generation
 *  matches the given value. Setting to 0 makes the operation succeed only if
 *  there are no live versions of the object.
 */
@property(nonatomic, assign) long long ifGenerationMatch;

/**
 *  Makes the operation conditional on whether the object's current generation
 *  does not match the given value. If no live object exists, the precondition
 *  fails. Setting to 0 makes the operation succeed only if there is a live
 *  version of the object.
 */
@property(nonatomic, assign) long long ifGenerationNotMatch;

/**
 *  Makes the operation conditional on whether the object's current
 *  metageneration matches the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationMatch;

/**
 *  Makes the operation conditional on whether the object's current
 *  metageneration does not match the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationNotMatch;

/**
 *  Name of the object. For information about how to URL encode object names to
 *  be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *object;

/**
 *  Set of properties to return. Defaults to noAcl.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageProjectionFull Include all properties. (Value: "full")
 *    @arg @c kGTLRStorageProjectionNoAcl Omit the owner, acl property. (Value:
 *        "noAcl")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Object.
 *
 *  Retrieves an object or its metadata.
 *
 *  @param bucket Name of the bucket in which the object resides.
 *  @param object Name of the object. For information about how to URL encode
 *    object names to be path safe, see Encoding URI Path Parts.
 *
 *  @return GTLRStorageQuery_ObjectsGet
 */
+ (instancetype)queryWithBucket:(NSString *)bucket
                         object:(NSString *)object;

/**
 *  Fetches the requested resource data as a @c GTLRDataObject.
 *
 *  Retrieves an object or its metadata.
 *
 *  @param bucket Name of the bucket in which the object resides.
 *  @param object Name of the object. For information about how to URL encode
 *    object names to be path safe, see Encoding URI Path Parts.
 *
 *  @return GTLRStorageQuery_ObjectsGet
 */
+ (instancetype)queryForMediaWithBucket:(NSString *)bucket
                                 object:(NSString *)object;

@end

/**
 *  Returns an IAM policy for the specified object.
 *
 *  Method: storage.objects.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageCloudPlatformReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_ObjectsGetIamPolicy : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectsGetIamPolicyWithbucket:object:]

/** Name of the bucket in which the object resides. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  If present, selects a specific revision of this object (as opposed to the
 *  latest version, the default).
 */
@property(nonatomic, assign) long long generation;

/**
 *  Name of the object. For information about how to URL encode object names to
 *  be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *object;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Policy.
 *
 *  Returns an IAM policy for the specified object.
 *
 *  @param bucket Name of the bucket in which the object resides.
 *  @param object Name of the object. For information about how to URL encode
 *    object names to be path safe, see Encoding URI Path Parts.
 *
 *  @return GTLRStorageQuery_ObjectsGetIamPolicy
 */
+ (instancetype)queryWithBucket:(NSString *)bucket
                         object:(NSString *)object;

@end

/**
 *  Stores a new object and metadata.
 *
 *  Method: storage.objects.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_ObjectsInsert : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectsInsertWithObject:bucket:]

/**
 *  Name of the bucket in which to store the new object. Overrides the provided
 *  object metadata's bucket value, if any.
 */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  If set, sets the contentEncoding property of the final object to this value.
 *  Setting this parameter is equivalent to setting the contentEncoding metadata
 *  property. This can be useful when uploading an object with uploadType=media
 *  to indicate the encoding of the content being uploaded.
 */
@property(nonatomic, copy, nullable) NSString *contentEncoding;

/**
 *  Makes the operation conditional on whether the object's current generation
 *  matches the given value. Setting to 0 makes the operation succeed only if
 *  there are no live versions of the object.
 */
@property(nonatomic, assign) long long ifGenerationMatch;

/**
 *  Makes the operation conditional on whether the object's current generation
 *  does not match the given value. If no live object exists, the precondition
 *  fails. Setting to 0 makes the operation succeed only if there is a live
 *  version of the object.
 */
@property(nonatomic, assign) long long ifGenerationNotMatch;

/**
 *  Makes the operation conditional on whether the object's current
 *  metageneration matches the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationMatch;

/**
 *  Makes the operation conditional on whether the object's current
 *  metageneration does not match the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationNotMatch;

/**
 *  Resource name of the Cloud KMS key, of the form
 *  projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that
 *  will be used to encrypt the object. Overrides the object metadata's
 *  kms_key_name value, if any.
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

/**
 *  Name of the object. Required when the object metadata is not otherwise
 *  provided. Overrides the object metadata's name value, if any. For
 *  information about how to URL encode object names to be path safe, see
 *  Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Apply a predefined set of access controls to this object.
 *
 *  Likely values:
 *    @arg @c kGTLRStoragePredefinedAclAuthenticatedRead Object owner gets OWNER
 *        access, and allAuthenticatedUsers get READER access. (Value:
 *        "authenticatedRead")
 *    @arg @c kGTLRStoragePredefinedAclBucketOwnerFullControl Object owner gets
 *        OWNER access, and project team owners get OWNER access. (Value:
 *        "bucketOwnerFullControl")
 *    @arg @c kGTLRStoragePredefinedAclBucketOwnerRead Object owner gets OWNER
 *        access, and project team owners get READER access. (Value:
 *        "bucketOwnerRead")
 *    @arg @c kGTLRStoragePredefinedAclPrivate Object owner gets OWNER access.
 *        (Value: "private")
 *    @arg @c kGTLRStoragePredefinedAclProjectPrivate Object owner gets OWNER
 *        access, and project team members get access according to their roles.
 *        (Value: "projectPrivate")
 *    @arg @c kGTLRStoragePredefinedAclPublicRead Object owner gets OWNER
 *        access, and allUsers get READER access. (Value: "publicRead")
 */
@property(nonatomic, copy, nullable) NSString *predefinedAcl;

/**
 *  Set of properties to return. Defaults to noAcl, unless the object resource
 *  specifies the acl property, when it defaults to full.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageProjectionFull Include all properties. (Value: "full")
 *    @arg @c kGTLRStorageProjectionNoAcl Omit the owner, acl property. (Value:
 *        "noAcl")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Object.
 *
 *  Stores a new object and metadata.
 *
 *  @param object The @c GTLRStorage_Object to include in the query.
 *  @param bucket Name of the bucket in which to store the new object. Overrides
 *    the provided object metadata's bucket value, if any.
 *  @param uploadParameters The media to include in this query. Accepted MIME
 *    type: * / *
 *
 *  @return GTLRStorageQuery_ObjectsInsert
 */
+ (instancetype)queryWithObject:(GTLRStorage_Object *)object
                         bucket:(NSString *)bucket
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Retrieves a list of objects matching the criteria.
 *
 *  Method: storage.objects.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageCloudPlatformReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_ObjectsList : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectsListWithbucket:]

/** Name of the bucket in which to look for objects. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Returns results in a directory-like mode. items will contain only objects
 *  whose names, aside from the prefix, do not contain delimiter. Objects whose
 *  names, aside from the prefix, contain delimiter will have their name,
 *  truncated after the delimiter, returned in prefixes. Duplicate prefixes are
 *  omitted.
 */
@property(nonatomic, copy, nullable) NSString *delimiter;

/**
 *  If true, objects that end in exactly one instance of delimiter will have
 *  their metadata included in items in addition to prefixes.
 */
@property(nonatomic, assign) BOOL includeTrailingDelimiter;

/**
 *  Maximum number of items plus prefixes to return in a single page of
 *  responses. As duplicate prefixes are omitted, fewer total results may be
 *  returned than requested. The service will use this parameter or 1,000 items,
 *  whichever is smaller.
 *
 *  @note If not set, the documented server-side default will be 1000.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  A previously-returned page token representing part of the larger set of
 *  results to view.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Filter results to objects whose names begin with this prefix. */
@property(nonatomic, copy, nullable) NSString *prefix;

/**
 *  Set of properties to return. Defaults to noAcl.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageProjectionFull Include all properties. (Value: "full")
 *    @arg @c kGTLRStorageProjectionNoAcl Omit the owner, acl property. (Value:
 *        "noAcl")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  If true, lists all versions of an object as distinct results. The default is
 *  false. For more information, see Object Versioning.
 */
@property(nonatomic, assign) BOOL versions;

/**
 *  Fetches a @c GTLRStorage_Objects.
 *
 *  Retrieves a list of objects matching the criteria.
 *
 *  @param bucket Name of the bucket in which to look for objects.
 *
 *  @return GTLRStorageQuery_ObjectsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithBucket:(NSString *)bucket;

@end

/**
 *  Patches an object's metadata.
 *
 *  Method: storage.objects.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_ObjectsPatch : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectsPatchWithObject:bucket:object:]

/** Name of the bucket in which the object resides. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  If present, selects a specific revision of this object (as opposed to the
 *  latest version, the default).
 */
@property(nonatomic, assign) long long generation;

/**
 *  Makes the operation conditional on whether the object's current generation
 *  matches the given value. Setting to 0 makes the operation succeed only if
 *  there are no live versions of the object.
 */
@property(nonatomic, assign) long long ifGenerationMatch;

/**
 *  Makes the operation conditional on whether the object's current generation
 *  does not match the given value. If no live object exists, the precondition
 *  fails. Setting to 0 makes the operation succeed only if there is a live
 *  version of the object.
 */
@property(nonatomic, assign) long long ifGenerationNotMatch;

/**
 *  Makes the operation conditional on whether the object's current
 *  metageneration matches the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationMatch;

/**
 *  Makes the operation conditional on whether the object's current
 *  metageneration does not match the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationNotMatch;

/**
 *  Name of the object. For information about how to URL encode object names to
 *  be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *object;

/**
 *  Apply a predefined set of access controls to this object.
 *
 *  Likely values:
 *    @arg @c kGTLRStoragePredefinedAclAuthenticatedRead Object owner gets OWNER
 *        access, and allAuthenticatedUsers get READER access. (Value:
 *        "authenticatedRead")
 *    @arg @c kGTLRStoragePredefinedAclBucketOwnerFullControl Object owner gets
 *        OWNER access, and project team owners get OWNER access. (Value:
 *        "bucketOwnerFullControl")
 *    @arg @c kGTLRStoragePredefinedAclBucketOwnerRead Object owner gets OWNER
 *        access, and project team owners get READER access. (Value:
 *        "bucketOwnerRead")
 *    @arg @c kGTLRStoragePredefinedAclPrivate Object owner gets OWNER access.
 *        (Value: "private")
 *    @arg @c kGTLRStoragePredefinedAclProjectPrivate Object owner gets OWNER
 *        access, and project team members get access according to their roles.
 *        (Value: "projectPrivate")
 *    @arg @c kGTLRStoragePredefinedAclPublicRead Object owner gets OWNER
 *        access, and allUsers get READER access. (Value: "publicRead")
 */
@property(nonatomic, copy, nullable) NSString *predefinedAcl;

/**
 *  Set of properties to return. Defaults to full.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageProjectionFull Include all properties. (Value: "full")
 *    @arg @c kGTLRStorageProjectionNoAcl Omit the owner, acl property. (Value:
 *        "noAcl")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/** The project to be billed for this request, for Requester Pays buckets. */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Object.
 *
 *  Patches an object's metadata.
 *
 *  @param object The @c GTLRStorage_Object to include in the query.
 *  @param bucket Name of the bucket in which the object resides.
 *  @param object_param Name of the object. For information about how to URL
 *    encode object names to be path safe, see Encoding URI Path Parts.
 *
 *  @return GTLRStorageQuery_ObjectsPatch
 */
+ (instancetype)queryWithObject:(GTLRStorage_Object *)object
                         bucket:(NSString *)bucket
                         object:(NSString *)object_param;

@end

/**
 *  Rewrites a source object to a destination object. Optionally overrides
 *  metadata.
 *
 *  Method: storage.objects.rewrite
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_ObjectsRewrite : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectsRewriteWithObject:sourceBucket:sourceObject:destinationBucket:destinationObject:]

/**
 *  Name of the bucket in which to store the new object. Overrides the provided
 *  object metadata's bucket value, if any.
 */
@property(nonatomic, copy, nullable) NSString *destinationBucket;

/**
 *  Resource name of the Cloud KMS key, of the form
 *  projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that
 *  will be used to encrypt the object. Overrides the object metadata's
 *  kms_key_name value, if any.
 */
@property(nonatomic, copy, nullable) NSString *destinationKmsKeyName;

/**
 *  Name of the new object. Required when the object metadata is not otherwise
 *  provided. Overrides the object metadata's name value, if any. For
 *  information about how to URL encode object names to be path safe, see
 *  Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *destinationObject;

/**
 *  Apply a predefined set of access controls to the destination object.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageDestinationPredefinedAclAuthenticatedRead Object owner
 *        gets OWNER access, and allAuthenticatedUsers get READER access.
 *        (Value: "authenticatedRead")
 *    @arg @c kGTLRStorageDestinationPredefinedAclBucketOwnerFullControl Object
 *        owner gets OWNER access, and project team owners get OWNER access.
 *        (Value: "bucketOwnerFullControl")
 *    @arg @c kGTLRStorageDestinationPredefinedAclBucketOwnerRead Object owner
 *        gets OWNER access, and project team owners get READER access. (Value:
 *        "bucketOwnerRead")
 *    @arg @c kGTLRStorageDestinationPredefinedAclPrivate Object owner gets
 *        OWNER access. (Value: "private")
 *    @arg @c kGTLRStorageDestinationPredefinedAclProjectPrivate Object owner
 *        gets OWNER access, and project team members get access according to
 *        their roles. (Value: "projectPrivate")
 *    @arg @c kGTLRStorageDestinationPredefinedAclPublicRead Object owner gets
 *        OWNER access, and allUsers get READER access. (Value: "publicRead")
 */
@property(nonatomic, copy, nullable) NSString *destinationPredefinedAcl;

/**
 *  Makes the operation conditional on whether the object's current generation
 *  matches the given value. Setting to 0 makes the operation succeed only if
 *  there are no live versions of the object.
 */
@property(nonatomic, assign) long long ifGenerationMatch;

/**
 *  Makes the operation conditional on whether the object's current generation
 *  does not match the given value. If no live object exists, the precondition
 *  fails. Setting to 0 makes the operation succeed only if there is a live
 *  version of the object.
 */
@property(nonatomic, assign) long long ifGenerationNotMatch;

/**
 *  Makes the operation conditional on whether the destination object's current
 *  metageneration matches the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationMatch;

/**
 *  Makes the operation conditional on whether the destination object's current
 *  metageneration does not match the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationNotMatch;

/**
 *  Makes the operation conditional on whether the source object's current
 *  generation matches the given value.
 */
@property(nonatomic, assign) long long ifSourceGenerationMatch;

/**
 *  Makes the operation conditional on whether the source object's current
 *  generation does not match the given value.
 */
@property(nonatomic, assign) long long ifSourceGenerationNotMatch;

/**
 *  Makes the operation conditional on whether the source object's current
 *  metageneration matches the given value.
 */
@property(nonatomic, assign) long long ifSourceMetagenerationMatch;

/**
 *  Makes the operation conditional on whether the source object's current
 *  metageneration does not match the given value.
 */
@property(nonatomic, assign) long long ifSourceMetagenerationNotMatch;

/**
 *  The maximum number of bytes that will be rewritten per rewrite request. Most
 *  callers shouldn't need to specify this parameter - it is primarily in place
 *  to support testing. If specified the value must be an integral multiple of 1
 *  MiB (1048576). Also, this only applies to requests where the source and
 *  destination span locations and/or storage classes. Finally, this value must
 *  not change across rewrite calls else you'll get an error that the
 *  rewriteToken is invalid.
 */
@property(nonatomic, assign) long long maxBytesRewrittenPerCall;

/**
 *  Set of properties to return. Defaults to noAcl, unless the object resource
 *  specifies the acl property, when it defaults to full.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageProjectionFull Include all properties. (Value: "full")
 *    @arg @c kGTLRStorageProjectionNoAcl Omit the owner, acl property. (Value:
 *        "noAcl")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  Include this field (from the previous rewrite response) on each rewrite
 *  request after the first one, until the rewrite response 'done' flag is true.
 *  Calls that provide a rewriteToken can omit all other request fields, but if
 *  included those fields must match the values provided in the first rewrite
 *  request.
 */
@property(nonatomic, copy, nullable) NSString *rewriteToken;

/** Name of the bucket in which to find the source object. */
@property(nonatomic, copy, nullable) NSString *sourceBucket;

/**
 *  If present, selects a specific revision of the source object (as opposed to
 *  the latest version, the default).
 */
@property(nonatomic, assign) long long sourceGeneration;

/**
 *  Name of the source object. For information about how to URL encode object
 *  names to be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *sourceObject;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_RewriteResponse.
 *
 *  Rewrites a source object to a destination object. Optionally overrides
 *  metadata.
 *
 *  @param object The @c GTLRStorage_Object to include in the query.
 *  @param sourceBucket Name of the bucket in which to find the source object.
 *  @param sourceObject Name of the source object. For information about how to
 *    URL encode object names to be path safe, see Encoding URI Path Parts.
 *  @param destinationBucket Name of the bucket in which to store the new
 *    object. Overrides the provided object metadata's bucket value, if any.
 *  @param destinationObject Name of the new object. Required when the object
 *    metadata is not otherwise provided. Overrides the object metadata's name
 *    value, if any. For information about how to URL encode object names to be
 *    path safe, see Encoding URI Path Parts.
 *
 *  @return GTLRStorageQuery_ObjectsRewrite
 */
+ (instancetype)queryWithObject:(GTLRStorage_Object *)object
                   sourceBucket:(NSString *)sourceBucket
                   sourceObject:(NSString *)sourceObject
              destinationBucket:(NSString *)destinationBucket
              destinationObject:(NSString *)destinationObject;

@end

/**
 *  Updates an IAM policy for the specified object.
 *
 *  Method: storage.objects.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_ObjectsSetIamPolicy : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectsSetIamPolicyWithObject:bucket:object:]

/** Name of the bucket in which the object resides. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  If present, selects a specific revision of this object (as opposed to the
 *  latest version, the default).
 */
@property(nonatomic, assign) long long generation;

/**
 *  Name of the object. For information about how to URL encode object names to
 *  be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *object;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Policy.
 *
 *  Updates an IAM policy for the specified object.
 *
 *  @param object The @c GTLRStorage_Policy to include in the query.
 *  @param bucket Name of the bucket in which the object resides.
 *  @param object_param Name of the object. For information about how to URL
 *    encode object names to be path safe, see Encoding URI Path Parts.
 *
 *  @return GTLRStorageQuery_ObjectsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRStorage_Policy *)object
                         bucket:(NSString *)bucket
                         object:(NSString *)object_param;

@end

/**
 *  Tests a set of permissions on the given object to see which, if any, are
 *  held by the caller.
 *
 *  Method: storage.objects.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageCloudPlatformReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_ObjectsTestIamPermissions : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectsTestIamPermissionsWithbucket:object:permissions:]

/** Name of the bucket in which the object resides. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  If present, selects a specific revision of this object (as opposed to the
 *  latest version, the default).
 */
@property(nonatomic, assign) long long generation;

/**
 *  Name of the object. For information about how to URL encode object names to
 *  be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *object;

/** Permissions to test. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_TestIamPermissionsResponse.
 *
 *  Tests a set of permissions on the given object to see which, if any, are
 *  held by the caller.
 *
 *  @param bucket Name of the bucket in which the object resides.
 *  @param object Name of the object. For information about how to URL encode
 *    object names to be path safe, see Encoding URI Path Parts.
 *  @param permissions Permissions to test.
 *
 *  @return GTLRStorageQuery_ObjectsTestIamPermissions
 */
+ (instancetype)queryWithBucket:(NSString *)bucket
                         object:(NSString *)object
                    permissions:(NSArray<NSString *> *)permissions;

@end

/**
 *  Updates an object's metadata.
 *
 *  Method: storage.objects.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 */
@interface GTLRStorageQuery_ObjectsUpdate : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectsUpdateWithObject:bucket:object:]

/** Name of the bucket in which the object resides. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  If present, selects a specific revision of this object (as opposed to the
 *  latest version, the default).
 */
@property(nonatomic, assign) long long generation;

/**
 *  Makes the operation conditional on whether the object's current generation
 *  matches the given value. Setting to 0 makes the operation succeed only if
 *  there are no live versions of the object.
 */
@property(nonatomic, assign) long long ifGenerationMatch;

/**
 *  Makes the operation conditional on whether the object's current generation
 *  does not match the given value. If no live object exists, the precondition
 *  fails. Setting to 0 makes the operation succeed only if there is a live
 *  version of the object.
 */
@property(nonatomic, assign) long long ifGenerationNotMatch;

/**
 *  Makes the operation conditional on whether the object's current
 *  metageneration matches the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationMatch;

/**
 *  Makes the operation conditional on whether the object's current
 *  metageneration does not match the given value.
 */
@property(nonatomic, assign) long long ifMetagenerationNotMatch;

/**
 *  Name of the object. For information about how to URL encode object names to
 *  be path safe, see Encoding URI Path Parts.
 */
@property(nonatomic, copy, nullable) NSString *object;

/**
 *  Apply a predefined set of access controls to this object.
 *
 *  Likely values:
 *    @arg @c kGTLRStoragePredefinedAclAuthenticatedRead Object owner gets OWNER
 *        access, and allAuthenticatedUsers get READER access. (Value:
 *        "authenticatedRead")
 *    @arg @c kGTLRStoragePredefinedAclBucketOwnerFullControl Object owner gets
 *        OWNER access, and project team owners get OWNER access. (Value:
 *        "bucketOwnerFullControl")
 *    @arg @c kGTLRStoragePredefinedAclBucketOwnerRead Object owner gets OWNER
 *        access, and project team owners get READER access. (Value:
 *        "bucketOwnerRead")
 *    @arg @c kGTLRStoragePredefinedAclPrivate Object owner gets OWNER access.
 *        (Value: "private")
 *    @arg @c kGTLRStoragePredefinedAclProjectPrivate Object owner gets OWNER
 *        access, and project team members get access according to their roles.
 *        (Value: "projectPrivate")
 *    @arg @c kGTLRStoragePredefinedAclPublicRead Object owner gets OWNER
 *        access, and allUsers get READER access. (Value: "publicRead")
 */
@property(nonatomic, copy, nullable) NSString *predefinedAcl;

/**
 *  Set of properties to return. Defaults to full.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageProjectionFull Include all properties. (Value: "full")
 *    @arg @c kGTLRStorageProjectionNoAcl Omit the owner, acl property. (Value:
 *        "noAcl")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_Object.
 *
 *  Updates an object's metadata.
 *
 *  @param object The @c GTLRStorage_Object to include in the query.
 *  @param bucket Name of the bucket in which the object resides.
 *  @param object_param Name of the object. For information about how to URL
 *    encode object names to be path safe, see Encoding URI Path Parts.
 *
 *  @return GTLRStorageQuery_ObjectsUpdate
 */
+ (instancetype)queryWithObject:(GTLRStorage_Object *)object
                         bucket:(NSString *)bucket
                         object:(NSString *)object_param;

@end

/**
 *  Watch for changes on all objects in a bucket.
 *
 *  Method: storage.objects.watchAll
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageCloudPlatformReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_ObjectsWatchAll : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForObjectsWatchAllWithObject:bucket:]

/** Name of the bucket in which to look for objects. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Returns results in a directory-like mode. items will contain only objects
 *  whose names, aside from the prefix, do not contain delimiter. Objects whose
 *  names, aside from the prefix, contain delimiter will have their name,
 *  truncated after the delimiter, returned in prefixes. Duplicate prefixes are
 *  omitted.
 */
@property(nonatomic, copy, nullable) NSString *delimiter;

/**
 *  If true, objects that end in exactly one instance of delimiter will have
 *  their metadata included in items in addition to prefixes.
 */
@property(nonatomic, assign) BOOL includeTrailingDelimiter;

/**
 *  Maximum number of items plus prefixes to return in a single page of
 *  responses. As duplicate prefixes are omitted, fewer total results may be
 *  returned than requested. The service will use this parameter or 1,000 items,
 *  whichever is smaller.
 *
 *  @note If not set, the documented server-side default will be 1000.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  A previously-returned page token representing part of the larger set of
 *  results to view.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Filter results to objects whose names begin with this prefix. */
@property(nonatomic, copy, nullable) NSString *prefix;

/**
 *  Set of properties to return. Defaults to noAcl.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageProjectionFull Include all properties. (Value: "full")
 *    @arg @c kGTLRStorageProjectionNoAcl Omit the owner, acl property. (Value:
 *        "noAcl")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  The project to be billed for this request. Required for Requester Pays
 *  buckets.
 */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  If true, lists all versions of an object as distinct results. The default is
 *  false. For more information, see Object Versioning.
 */
@property(nonatomic, assign) BOOL versions;

/**
 *  Fetches a @c GTLRStorage_Channel.
 *
 *  Watch for changes on all objects in a bucket.
 *
 *  @param object The @c GTLRStorage_Channel to include in the query.
 *  @param bucket Name of the bucket in which to look for objects.
 *
 *  @return GTLRStorageQuery_ObjectsWatchAll
 */
+ (instancetype)queryWithObject:(GTLRStorage_Channel *)object
                         bucket:(NSString *)bucket;

@end

/**
 *  Get the email address of this project's Google Cloud Storage service
 *  account.
 *
 *  Method: storage.projects.serviceAccount.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageCloudPlatform
 *    @c kGTLRAuthScopeStorageCloudPlatformReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageFullControl
 *    @c kGTLRAuthScopeStorageDevstorageReadOnly
 *    @c kGTLRAuthScopeStorageDevstorageReadWrite
 */
@interface GTLRStorageQuery_ProjectsServiceAccountGet : GTLRStorageQuery
// Previous library name was
//   +[GTLQueryStorage queryForProjectsServiceAccountGetWithprojectId:]

/** Project ID */
@property(nonatomic, copy, nullable) NSString *projectId;

/** The project to be billed for this request. */
@property(nonatomic, copy, nullable) NSString *userProject;

/**
 *  Fetches a @c GTLRStorage_ServiceAccount.
 *
 *  Get the email address of this project's Google Cloud Storage service
 *  account.
 *
 *  @param projectId Project ID
 *
 *  @return GTLRStorageQuery_ProjectsServiceAccountGet
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
