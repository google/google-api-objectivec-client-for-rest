// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Perspective Comment Analyzer API (commentanalyzer/v1alpha1)
// Description:
//   The Perspective Comment Analyzer API provides information about the
//   potential impact of a comment on a conversation (e.g. it can provide a
//   score for the "toxicity" of a comment). Users can leverage the
//   "SuggestCommentScore" method to submit corrections to improve Perspective
//   over time. Users can set the "doNotStore" flag to ensure that all submitted
//   comments are automatically deleted after scores are returned.
// Documentation:
//   https://github.com/conversationai/perspectiveapi/blob/master/README.md

#import "GTLRCommentAnalyzerObjects.h"

// ----------------------------------------------------------------------------
// Constants

// GTLRCommentAnalyzer_AttributeParameters.scoreType
NSString * const kGTLRCommentAnalyzer_AttributeParameters_ScoreType_Percentile = @"PERCENTILE";
NSString * const kGTLRCommentAnalyzer_AttributeParameters_ScoreType_Probability = @"PROBABILITY";
NSString * const kGTLRCommentAnalyzer_AttributeParameters_ScoreType_Raw = @"RAW";
NSString * const kGTLRCommentAnalyzer_AttributeParameters_ScoreType_ScoreTypeUnspecified = @"SCORE_TYPE_UNSPECIFIED";
NSString * const kGTLRCommentAnalyzer_AttributeParameters_ScoreType_StdDevScore = @"STD_DEV_SCORE";

// GTLRCommentAnalyzer_Score.type
NSString * const kGTLRCommentAnalyzer_Score_Type_Percentile    = @"PERCENTILE";
NSString * const kGTLRCommentAnalyzer_Score_Type_Probability   = @"PROBABILITY";
NSString * const kGTLRCommentAnalyzer_Score_Type_Raw           = @"RAW";
NSString * const kGTLRCommentAnalyzer_Score_Type_ScoreTypeUnspecified = @"SCORE_TYPE_UNSPECIFIED";
NSString * const kGTLRCommentAnalyzer_Score_Type_StdDevScore   = @"STD_DEV_SCORE";

// GTLRCommentAnalyzer_TextEntry.type
NSString * const kGTLRCommentAnalyzer_TextEntry_Type_Html      = @"HTML";
NSString * const kGTLRCommentAnalyzer_TextEntry_Type_PlainText = @"PLAIN_TEXT";
NSString * const kGTLRCommentAnalyzer_TextEntry_Type_TextTypeUnspecified = @"TEXT_TYPE_UNSPECIFIED";

// ----------------------------------------------------------------------------
//
//   GTLRCommentAnalyzer_AnalyzeCommentRequest
//

@implementation GTLRCommentAnalyzer_AnalyzeCommentRequest
@dynamic clientToken, comment, communityId, context, doNotStore, languages,
         requestedAttributes, sessionId, spanAnnotations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"languages" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCommentAnalyzer_AnalyzeCommentRequest_RequestedAttributes
//

@implementation GTLRCommentAnalyzer_AnalyzeCommentRequest_RequestedAttributes

+ (Class)classForAdditionalProperties {
  return [GTLRCommentAnalyzer_AttributeParameters class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCommentAnalyzer_AnalyzeCommentResponse
//

@implementation GTLRCommentAnalyzer_AnalyzeCommentResponse
@dynamic attributeScores, clientToken, detectedLanguages, languages;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"detectedLanguages" : [NSString class],
    @"languages" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCommentAnalyzer_AnalyzeCommentResponse_AttributeScores
//

@implementation GTLRCommentAnalyzer_AnalyzeCommentResponse_AttributeScores

+ (Class)classForAdditionalProperties {
  return [GTLRCommentAnalyzer_AttributeScores class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCommentAnalyzer_ArticleAndParentComment
//

@implementation GTLRCommentAnalyzer_ArticleAndParentComment
@dynamic article, parentComment;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCommentAnalyzer_AttributeParameters
//

@implementation GTLRCommentAnalyzer_AttributeParameters
@dynamic scoreThreshold, scoreType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCommentAnalyzer_AttributeScores
//

@implementation GTLRCommentAnalyzer_AttributeScores
@dynamic spanScores, summaryScore;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"spanScores" : [GTLRCommentAnalyzer_SpanScore class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCommentAnalyzer_Context
//

@implementation GTLRCommentAnalyzer_Context
@dynamic articleAndParentComment, entries;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"entries" : [GTLRCommentAnalyzer_TextEntry class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCommentAnalyzer_Score
//

@implementation GTLRCommentAnalyzer_Score
@dynamic type, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCommentAnalyzer_SpanScore
//

@implementation GTLRCommentAnalyzer_SpanScore
@dynamic begin, end, score;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCommentAnalyzer_SuggestCommentScoreRequest
//

@implementation GTLRCommentAnalyzer_SuggestCommentScoreRequest
@dynamic attributeScores, clientToken, comment, communityId, context, languages,
         sessionId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"languages" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCommentAnalyzer_SuggestCommentScoreRequest_AttributeScores
//

@implementation GTLRCommentAnalyzer_SuggestCommentScoreRequest_AttributeScores

+ (Class)classForAdditionalProperties {
  return [GTLRCommentAnalyzer_AttributeScores class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCommentAnalyzer_SuggestCommentScoreResponse
//

@implementation GTLRCommentAnalyzer_SuggestCommentScoreResponse
@dynamic clientToken, detectedLanguages, requestedLanguages;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"detectedLanguages" : [NSString class],
    @"requestedLanguages" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCommentAnalyzer_TextEntry
//

@implementation GTLRCommentAnalyzer_TextEntry
@dynamic text, type;
@end
