// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Perspective Comment Analyzer API (commentanalyzer/v1alpha1)
// Description:
//   The Perspective Comment Analyzer API provides information about the
//   potential impact of a comment on a conversation (e.g. it can provide a
//   score for the "toxicity" of a comment). Users can leverage the
//   "SuggestCommentScore" method to submit corrections to improve Perspective
//   over time. Users can set the "doNotStore" flag to ensure that all submitted
//   comments are automatically deleted after scores are returned.
// Documentation:
//   https://github.com/conversationai/perspectiveapi/blob/master/README.md

#import "GTLRCommentAnalyzerQuery.h"

#import "GTLRCommentAnalyzerObjects.h"

@implementation GTLRCommentAnalyzerQuery

@dynamic fields;

@end

@implementation GTLRCommentAnalyzerQuery_CommentsAnalyze

+ (instancetype)queryWithObject:(GTLRCommentAnalyzer_AnalyzeCommentRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1alpha1/comments:analyze";
  GTLRCommentAnalyzerQuery_CommentsAnalyze *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRCommentAnalyzer_AnalyzeCommentResponse class];
  query.loggingName = @"commentanalyzer.comments.analyze";
  return query;
}

@end

@implementation GTLRCommentAnalyzerQuery_CommentsSuggestscore

+ (instancetype)queryWithObject:(GTLRCommentAnalyzer_SuggestCommentScoreRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1alpha1/comments:suggestscore";
  GTLRCommentAnalyzerQuery_CommentsSuggestscore *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRCommentAnalyzer_SuggestCommentScoreResponse class];
  query.loggingName = @"commentanalyzer.comments.suggestscore";
  return query;
}

@end
