// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Perspective Comment Analyzer API (commentanalyzer/v1alpha1)
// Description:
//   The Perspective Comment Analyzer API provides information about the
//   potential impact of a comment on a conversation (e.g. it can provide a
//   score for the "toxicity" of a comment). Users can leverage the
//   "SuggestCommentScore" method to submit corrections to improve Perspective
//   over time. Users can set the "doNotStore" flag to ensure that all submitted
//   comments are automatically deleted after scores are returned.
// Documentation:
//   https://conversationai.github.io/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCommentAnalyzer_AnalyzeCommentRequest_RequestedAttributes;
@class GTLRCommentAnalyzer_AnalyzeCommentResponse_AttributeScores;
@class GTLRCommentAnalyzer_ArticleAndParentComment;
@class GTLRCommentAnalyzer_AttributeParameters;
@class GTLRCommentAnalyzer_AttributeScores;
@class GTLRCommentAnalyzer_Context;
@class GTLRCommentAnalyzer_Score;
@class GTLRCommentAnalyzer_SpanScore;
@class GTLRCommentAnalyzer_SuggestCommentScoreRequest_AttributeScores;
@class GTLRCommentAnalyzer_TextEntry;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCommentAnalyzer_AttributeParameters.scoreType

/**
 *  Percentile scores are in the range [0, 1] and indicate the percentile of
 *  the raw score, normalized with a test dataset. This is not generally
 *  recommended, as the normalization is dependent on the dataset used, which
 *  may not match other usecases.
 *
 *  Value: "PERCENTILE"
 */
GTLR_EXTERN NSString * const kGTLRCommentAnalyzer_AttributeParameters_ScoreType_Percentile;
/**
 *  Probability scores are in the range [0, 1] and indicate level of confidence
 *  in the attribute label.
 *
 *  Value: "PROBABILITY"
 */
GTLR_EXTERN NSString * const kGTLRCommentAnalyzer_AttributeParameters_ScoreType_Probability;
/**
 *  Raw scores are the raw values from the model, and may take any value. This
 *  is primarily for debugging/testing, and not generally recommended.
 *
 *  Value: "RAW"
 */
GTLR_EXTERN NSString * const kGTLRCommentAnalyzer_AttributeParameters_ScoreType_Raw;
/**
 *  Unspecified. Defaults to PROBABILITY scores if available, and otherwise
 *  RAW. Every model has a RAW score.
 *
 *  Value: "SCORE_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCommentAnalyzer_AttributeParameters_ScoreType_ScoreTypeUnspecified;
/**
 *  Standard deviation scores are in the range (-inf, +inf).
 *
 *  Value: "STD_DEV_SCORE"
 */
GTLR_EXTERN NSString * const kGTLRCommentAnalyzer_AttributeParameters_ScoreType_StdDevScore;

// ----------------------------------------------------------------------------
// GTLRCommentAnalyzer_Score.type

/**
 *  Percentile scores are in the range [0, 1] and indicate the percentile of
 *  the raw score, normalized with a test dataset. This is not generally
 *  recommended, as the normalization is dependent on the dataset used, which
 *  may not match other usecases.
 *
 *  Value: "PERCENTILE"
 */
GTLR_EXTERN NSString * const kGTLRCommentAnalyzer_Score_Type_Percentile;
/**
 *  Probability scores are in the range [0, 1] and indicate level of confidence
 *  in the attribute label.
 *
 *  Value: "PROBABILITY"
 */
GTLR_EXTERN NSString * const kGTLRCommentAnalyzer_Score_Type_Probability;
/**
 *  Raw scores are the raw values from the model, and may take any value. This
 *  is primarily for debugging/testing, and not generally recommended.
 *
 *  Value: "RAW"
 */
GTLR_EXTERN NSString * const kGTLRCommentAnalyzer_Score_Type_Raw;
/**
 *  Unspecified. Defaults to PROBABILITY scores if available, and otherwise
 *  RAW. Every model has a RAW score.
 *
 *  Value: "SCORE_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCommentAnalyzer_Score_Type_ScoreTypeUnspecified;
/**
 *  Standard deviation scores are in the range (-inf, +inf).
 *
 *  Value: "STD_DEV_SCORE"
 */
GTLR_EXTERN NSString * const kGTLRCommentAnalyzer_Score_Type_StdDevScore;

// ----------------------------------------------------------------------------
// GTLRCommentAnalyzer_TextEntry.type

/**
 *  HTML.
 *
 *  Value: "HTML"
 */
GTLR_EXTERN NSString * const kGTLRCommentAnalyzer_TextEntry_Type_Html;
/**
 *  Plain text.
 *
 *  Value: "PLAIN_TEXT"
 */
GTLR_EXTERN NSString * const kGTLRCommentAnalyzer_TextEntry_Type_PlainText;
/**
 *  The content type is not specified. Text will be interpreted as plain text
 *  by default.
 *
 *  Value: "TEXT_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCommentAnalyzer_TextEntry_Type_TextTypeUnspecified;

/**
 *  The comment analysis request message.
 */
@interface GTLRCommentAnalyzer_AnalyzeCommentRequest : GTLRObject

/** Opaque token that is echoed from the request to the response. */
@property(nonatomic, copy, nullable) NSString *clientToken;

/** The comment to analyze. */
@property(nonatomic, strong, nullable) GTLRCommentAnalyzer_TextEntry *comment;

/**
 *  Optional identifier associating this AnalyzeCommentRequest with a
 *  particular client's community. Different communities may have different
 *  norms and rules. Specifying this value enables us to explore building
 *  community-specific models for clients.
 */
@property(nonatomic, copy, nullable) NSString *communityId;

/** The context of the comment. */
@property(nonatomic, strong, nullable) GTLRCommentAnalyzer_Context *context;

/**
 *  Do not store the comment or context sent in this request. By default, the
 *  service may store comments/context for debugging purposes.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *doNotStore;

/**
 *  The language(s) of the comment and context (if none are specified, the
 *  language is automatically detected). If multiple languages are specified,
 *  the text is checked in all of them that are supported. Both ISO and BCP-47
 *  language codes are accepted.
 *  Current Language Restrictions:
 *  * Only English text ("en") is supported.
 *  If none of the languages specified by the caller are supported, an
 *  `UNIMPLEMENTED` error is returned.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *languages;

/**
 *  Specification of requested attributes. The AttributeParameters serve as
 *  configuration for each associated attribute. The map keys are attribute
 *  names. The following attributes are available:
 *  "ATTACK_ON_AUTHOR" - Attack on author of original article or post.
 *  "ATTACK_ON_COMMENTER" - Attack on fellow commenter.
 *  "ATTACK_ON_PUBLISHER" - Attack on publisher of article/post.
 *  "INCOHERENT" - Difficult to understand, nonsensical.
 *  "INFLAMMATORY" - Intending to provoke or inflame.
 *  "OBSCENE" - Obscene, such as cursing.
 *  "OFF_TOPIC" - Not related to the original topic.
 *  "SPAM" - Commercial/advertising spam content.
 *  "UNSUBSTANTIAL" - Trivial.
 */
@property(nonatomic, strong, nullable) GTLRCommentAnalyzer_AnalyzeCommentRequest_RequestedAttributes *requestedAttributes;

/**
 *  Session ID. Used to join related RPCs into a single session. For example,
 *  an interactive tool that calls both the AnalyzeComment and
 *  SuggestCommentScore RPCs should set all invocations of both RPCs to the
 *  same Session ID, typically a random 64-bit integer.
 */
@property(nonatomic, copy, nullable) NSString *sessionId;

/**
 *  An advisory parameter that will return span annotations if the model
 *  is capable of providing scores with sub-comment resolution. This will
 *  likely increase the size of the returned message.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *spanAnnotations;

@end


/**
 *  Specification of requested attributes. The AttributeParameters serve as
 *  configuration for each associated attribute. The map keys are attribute
 *  names. The following attributes are available:
 *  "ATTACK_ON_AUTHOR" - Attack on author of original article or post.
 *  "ATTACK_ON_COMMENTER" - Attack on fellow commenter.
 *  "ATTACK_ON_PUBLISHER" - Attack on publisher of article/post.
 *  "INCOHERENT" - Difficult to understand, nonsensical.
 *  "INFLAMMATORY" - Intending to provoke or inflame.
 *  "OBSCENE" - Obscene, such as cursing.
 *  "OFF_TOPIC" - Not related to the original topic.
 *  "SPAM" - Commercial/advertising spam content.
 *  "UNSUBSTANTIAL" - Trivial.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCommentAnalyzer_AttributeParameters. Use @c -additionalJSONKeys
 *        and @c -additionalPropertyForName: to get the list of properties and
 *        then fetch them; or @c -additionalProperties to fetch them all at
 *        once.
 */
@interface GTLRCommentAnalyzer_AnalyzeCommentRequest_RequestedAttributes : GTLRObject
@end


/**
 *  The comment analysis response message.
 */
@interface GTLRCommentAnalyzer_AnalyzeCommentResponse : GTLRObject

/**
 *  Scores for the requested attributes. The map keys are attribute names (same
 *  as the requested_attribute field in AnalyzeCommentRequest, for example
 *  "ATTACK_ON_AUTHOR", "INFLAMMATORY", etc).
 */
@property(nonatomic, strong, nullable) GTLRCommentAnalyzer_AnalyzeCommentResponse_AttributeScores *attributeScores;

/** Same token from the original AnalyzeCommentRequest. */
@property(nonatomic, copy, nullable) NSString *clientToken;

/**
 *  Contains the language as detected from the text content. If no language
 *  was specified in the request, the first (the most likely) language is used
 *  to select an appropriate model. Sorted in order of likelihood.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *detectedLanguages;

/**
 *  The language(s) requested by the client, as specified in the request. If
 *  the request did not specify any language, this will be empty and the
 *  detected_languages field will be populated.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *languages;

@end


/**
 *  Scores for the requested attributes. The map keys are attribute names (same
 *  as the requested_attribute field in AnalyzeCommentRequest, for example
 *  "ATTACK_ON_AUTHOR", "INFLAMMATORY", etc).
 *
 *  @note This class is documented as having more properties of
 *        GTLRCommentAnalyzer_AttributeScores. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCommentAnalyzer_AnalyzeCommentResponse_AttributeScores : GTLRObject
@end


/**
 *  A type of context specific to a comment left on a single-threaded comment
 *  message board, where comments are either a top level comment or the child of
 *  a top level comment.
 */
@interface GTLRCommentAnalyzer_ArticleAndParentComment : GTLRObject

/**
 *  The source content about which the comment was made (article text, article
 *  summary, video transcript, etc).
 */
@property(nonatomic, strong, nullable) GTLRCommentAnalyzer_TextEntry *article;

/**
 *  Refers to text that is a direct parent of the source comment, such as in a
 *  one-deep threaded message board. This field will only be present for
 *  comments that are replies to other comments and will not be populated for
 *  direct comments on the article_text.
 */
@property(nonatomic, strong, nullable) GTLRCommentAnalyzer_TextEntry *parentComment;

@end


/**
 *  Configurable parameters for attribute scoring.
 */
@interface GTLRCommentAnalyzer_AttributeParameters : GTLRObject

/**
 *  Don't return scores for this attribute that are below this threshold. If
 *  unset, a default threshold will be applied. A FloatValue wrapper is used to
 *  distinguish between 0 vs. default/unset.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scoreThreshold;

/**
 *  What type of scores to return. If unset, defaults to probability scores.
 *
 *  Likely values:
 *    @arg @c kGTLRCommentAnalyzer_AttributeParameters_ScoreType_Percentile
 *        Percentile scores are in the range [0, 1] and indicate the percentile
 *        of
 *        the raw score, normalized with a test dataset. This is not generally
 *        recommended, as the normalization is dependent on the dataset used,
 *        which
 *        may not match other usecases. (Value: "PERCENTILE")
 *    @arg @c kGTLRCommentAnalyzer_AttributeParameters_ScoreType_Probability
 *        Probability scores are in the range [0, 1] and indicate level of
 *        confidence
 *        in the attribute label. (Value: "PROBABILITY")
 *    @arg @c kGTLRCommentAnalyzer_AttributeParameters_ScoreType_Raw Raw scores
 *        are the raw values from the model, and may take any value. This
 *        is primarily for debugging/testing, and not generally recommended.
 *        (Value: "RAW")
 *    @arg @c kGTLRCommentAnalyzer_AttributeParameters_ScoreType_ScoreTypeUnspecified
 *        Unspecified. Defaults to PROBABILITY scores if available, and
 *        otherwise
 *        RAW. Every model has a RAW score. (Value: "SCORE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCommentAnalyzer_AttributeParameters_ScoreType_StdDevScore
 *        Standard deviation scores are in the range (-inf, +inf). (Value:
 *        "STD_DEV_SCORE")
 */
@property(nonatomic, copy, nullable) NSString *scoreType;

@end


/**
 *  This holds score values for a single attribute. It contains both per-span
 *  scores as well as an overall summary score..
 */
@interface GTLRCommentAnalyzer_AttributeScores : GTLRObject

/** Per-span scores. */
@property(nonatomic, strong, nullable) NSArray<GTLRCommentAnalyzer_SpanScore *> *spanScores;

/** Overall score for comment as a whole. */
@property(nonatomic, strong, nullable) GTLRCommentAnalyzer_Score *summaryScore;

@end


/**
 *  Context is typically something that a Comment is referencing or replying to
 *  (such as an article, or previous comment).
 *  Note: Populate only ONE OF the following fields. The oneof syntax cannot be
 *  used because that would require nesting entries inside another message and
 *  breaking backwards compatibility. The server will return an error if more
 *  than one of the following fields is present.
 */
@interface GTLRCommentAnalyzer_Context : GTLRObject

/**
 *  Information about the source for which the original comment was made, and
 *  any parent comment info.
 */
@property(nonatomic, strong, nullable) GTLRCommentAnalyzer_ArticleAndParentComment *articleAndParentComment;

/**
 *  A list of messages. For example, a linear comments section or forum thread.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCommentAnalyzer_TextEntry *> *entries;

@end


/**
 *  Analysis scores are described by a value and a ScoreType.
 */
@interface GTLRCommentAnalyzer_Score : GTLRObject

/**
 *  The type of the above value.
 *
 *  Likely values:
 *    @arg @c kGTLRCommentAnalyzer_Score_Type_Percentile Percentile scores are
 *        in the range [0, 1] and indicate the percentile of
 *        the raw score, normalized with a test dataset. This is not generally
 *        recommended, as the normalization is dependent on the dataset used,
 *        which
 *        may not match other usecases. (Value: "PERCENTILE")
 *    @arg @c kGTLRCommentAnalyzer_Score_Type_Probability Probability scores are
 *        in the range [0, 1] and indicate level of confidence
 *        in the attribute label. (Value: "PROBABILITY")
 *    @arg @c kGTLRCommentAnalyzer_Score_Type_Raw Raw scores are the raw values
 *        from the model, and may take any value. This
 *        is primarily for debugging/testing, and not generally recommended.
 *        (Value: "RAW")
 *    @arg @c kGTLRCommentAnalyzer_Score_Type_ScoreTypeUnspecified Unspecified.
 *        Defaults to PROBABILITY scores if available, and otherwise
 *        RAW. Every model has a RAW score. (Value: "SCORE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCommentAnalyzer_Score_Type_StdDevScore Standard deviation
 *        scores are in the range (-inf, +inf). (Value: "STD_DEV_SCORE")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Score value. Semantics described by type below.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *value;

@end


/**
 *  This is a single score for a given span of text.
 */
@interface GTLRCommentAnalyzer_SpanScore : GTLRObject

/**
 *  "begin" and "end" describe the span of the original text that the attribute
 *  score applies to. The values are the UTF-16 codepoint range. "end" is
 *  exclusive. For example, with the text "Hi there", the begin/end pair (0,2)
 *  describes the text "Hi".
 *  If "begin" and "end" are unset, the score applies to the full text.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *begin;

/**
 *  end
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/** The score value. */
@property(nonatomic, strong, nullable) GTLRCommentAnalyzer_Score *score;

@end


/**
 *  The comment score suggestion request message.
 */
@interface GTLRCommentAnalyzer_SuggestCommentScoreRequest : GTLRObject

/**
 *  Attribute scores for the comment. The map keys are attribute names, same as
 *  the requested_attribute field in AnalyzeCommentRequest (for example
 *  "ATTACK_ON_AUTHOR", "INFLAMMATORY", etc.). This field has the same type as
 *  the `attribute_scores` field in AnalyzeCommentResponse.
 *  To specify an overall attribute score for the entire comment as a whole,
 *  use the `summary_score` field of the mapped AttributeScores object. To
 *  specify scores on specific subparts of the comment, use the `span_scores`
 *  field. All SpanScore objects must have begin and end fields set.
 *  All Score objects must be explicitly set (for binary classification, use
 *  the score values 0 and 1). If Score objects don't include a ScoreType,
 *  `PROBABILITY` is assumed.
 *  `attribute_scores` must not be empty. The mapped AttributeScores objects
 *  also must not be empty. An `INVALID_ARGUMENT` error is returned for all
 *  malformed requests.
 */
@property(nonatomic, strong, nullable) GTLRCommentAnalyzer_SuggestCommentScoreRequest_AttributeScores *attributeScores;

/** Opaque token that is echoed from the request to the response. */
@property(nonatomic, copy, nullable) NSString *clientToken;

/** The comment being scored. */
@property(nonatomic, strong, nullable) GTLRCommentAnalyzer_TextEntry *comment;

/**
 *  Optional identifier associating this comment score suggestion with a
 *  particular sub-community. Different communities may have different norms
 *  and rules. Specifying this value enables training community-specific
 *  models.
 */
@property(nonatomic, copy, nullable) NSString *communityId;

/** The context of the comment. */
@property(nonatomic, strong, nullable) GTLRCommentAnalyzer_Context *context;

/**
 *  The language(s) of the comment and context (if none are specified, the
 *  language is automatically detected). If multiple languages are specified,
 *  the text is checked in all of them that are supported. Both ISO and BCP-47
 *  language codes are accepted.
 *  Current Language Restrictions:
 *  * Only English text ("en") is supported.
 *  If none of the languages specified by the caller are supported, an
 *  `UNIMPLEMENTED` error is returned.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *languages;

/**
 *  Session ID. Used to join related RPCs into a single session. For example,
 *  an interactive tool that calls both the AnalyzeComment and
 *  SuggestCommentScore RPCs should set all invocations of both RPCs to the
 *  same Session ID, typically a random 64-bit integer.
 */
@property(nonatomic, copy, nullable) NSString *sessionId;

@end


/**
 *  Attribute scores for the comment. The map keys are attribute names, same as
 *  the requested_attribute field in AnalyzeCommentRequest (for example
 *  "ATTACK_ON_AUTHOR", "INFLAMMATORY", etc.). This field has the same type as
 *  the `attribute_scores` field in AnalyzeCommentResponse.
 *  To specify an overall attribute score for the entire comment as a whole,
 *  use the `summary_score` field of the mapped AttributeScores object. To
 *  specify scores on specific subparts of the comment, use the `span_scores`
 *  field. All SpanScore objects must have begin and end fields set.
 *  All Score objects must be explicitly set (for binary classification, use
 *  the score values 0 and 1). If Score objects don't include a ScoreType,
 *  `PROBABILITY` is assumed.
 *  `attribute_scores` must not be empty. The mapped AttributeScores objects
 *  also must not be empty. An `INVALID_ARGUMENT` error is returned for all
 *  malformed requests.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCommentAnalyzer_AttributeScores. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCommentAnalyzer_SuggestCommentScoreRequest_AttributeScores : GTLRObject
@end


/**
 *  The comment score suggestion response message.
 */
@interface GTLRCommentAnalyzer_SuggestCommentScoreResponse : GTLRObject

/** Same token from the original SuggestCommentScoreRequest. */
@property(nonatomic, copy, nullable) NSString *clientToken;

/** The list of languages detected from the comment text. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *detectedLanguages;

/** The list of languages provided in the request. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestedLanguages;

@end


/**
 *  Represents a body of text.
 */
@interface GTLRCommentAnalyzer_TextEntry : GTLRObject

/** UTF-8 encoded text. */
@property(nonatomic, copy, nullable) NSString *text;

/**
 *  Type of the text field.
 *
 *  Likely values:
 *    @arg @c kGTLRCommentAnalyzer_TextEntry_Type_Html HTML. (Value: "HTML")
 *    @arg @c kGTLRCommentAnalyzer_TextEntry_Type_PlainText Plain text. (Value:
 *        "PLAIN_TEXT")
 *    @arg @c kGTLRCommentAnalyzer_TextEntry_Type_TextTypeUnspecified The
 *        content type is not specified. Text will be interpreted as plain text
 *        by default. (Value: "TEXT_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
