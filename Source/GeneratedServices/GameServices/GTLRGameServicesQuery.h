// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Game Services API (gameservices/v1beta)
// Description:
//   Deploy and manage infrastructure for global multiplayer gaming experiences.
// Documentation:
//   https://cloud.google.com/solutions/gaming/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRGameServices_CancelOperationRequest;
@class GTLRGameServices_FetchDeploymentStateRequest;
@class GTLRGameServices_GameServerCluster;
@class GTLRGameServices_GameServerConfig;
@class GTLRGameServices_GameServerDeployment;
@class GTLRGameServices_GameServerDeploymentRollout;
@class GTLRGameServices_Realm;
@class GTLRGameServices_SetIamPolicyRequest;
@class GTLRGameServices_TestIamPermissionsRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Game Services query classes.
 */
@interface GTLRGameServicesQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new Game Server Config in a given project, Location, and Game
 *  Server Deployment. Game Server Configs are immutable, and are not applied
 *  until referenced in the Game Server Deployment Rollout resource.
 *
 *  Method: gameservices.projects.locations.gameServerDeployments.configs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsConfigsCreate : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGameServerDeploymentsConfigsCreateWithObject:parent:]

/** Required. The ID of the Game Server Config resource to be created. */
@property(nonatomic, copy, nullable) NSString *configId;

/**
 *  Required. The parent resource name. Uses the form:
 *  `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRGameServices_Operation.
 *
 *  Creates a new Game Server Config in a given project, Location, and Game
 *  Server Deployment. Game Server Configs are immutable, and are not applied
 *  until referenced in the Game Server Deployment Rollout resource.
 *
 *  @param object The @c GTLRGameServices_GameServerConfig to include in the
 *    query.
 *  @param parent Required. The parent resource name. Uses the form:
 *    `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRGameServices_GameServerConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Game Server Config. The deletion will fail if the Game
 *  Server Config is referenced in a Game Server Deployment Rollout.
 *
 *  Method: gameservices.projects.locations.gameServerDeployments.configs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsConfigsDelete : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGameServerDeploymentsConfigsDeleteWithname:]

/**
 *  Required. The name of the Game Server Config to delete. Uses the form:
 *  `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/configs/{config}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRGameServices_Operation.
 *
 *  Deletes a single Game Server Config. The deletion will fail if the Game
 *  Server Config is referenced in a Game Server Deployment Rollout.
 *
 *  @param name Required. The name of the Game Server Config to delete. Uses the
 *    form:
 *    `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/configs/{config}`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single Game Server Config.
 *
 *  Method: gameservices.projects.locations.gameServerDeployments.configs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsConfigsGet : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGameServerDeploymentsConfigsGetWithname:]

/**
 *  Required. The name of the Game Server Config to retrieve. Uses the form:
 *  `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/configs/{config}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRGameServices_GameServerConfig.
 *
 *  Gets details of a single Game Server Config.
 *
 *  @param name Required. The name of the Game Server Config to retrieve. Uses
 *    the form:
 *    `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/configs/{config}`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Game Server Configs in a given project, Location, and Game Server
 *  Deployment.
 *
 *  Method: gameservices.projects.locations.gameServerDeployments.configs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsConfigsList : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGameServerDeploymentsConfigsListWithparent:]

/** Optional. The filter to apply to list results. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Specifies the ordering of results following syntax at
 *  https://cloud.google.com/apis/design/design_patterns#sorting_order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of items to return. If unspecified, server
 *  will pick an appropriate default. Server may return fewer items than
 *  requested. A caller should only rely on response's
 *  next_page_token to
 *  determine if there are more GameServerConfigs left to be queried.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. The next_page_token value returned from a previous List request,
 *  if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource name. Uses the form:
 *  `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/configs/
 *  *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRGameServices_ListGameServerConfigsResponse.
 *
 *  Lists Game Server Configs in a given project, Location, and Game Server
 *  Deployment.
 *
 *  @param parent Required. The parent resource name. Uses the form:
 *    `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/configs/
 *    *`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a new Game Server Deployment in a given project and Location.
 *
 *  Method: gameservices.projects.locations.gameServerDeployments.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsCreate : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGameServerDeploymentsCreateWithObject:parent:]

/** Required. The ID of the Game Server Deployment resource to be created. */
@property(nonatomic, copy, nullable) NSString *deploymentId;

/**
 *  Required. The parent resource name. Uses the form:
 *  `projects/{project}/locations/{location}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRGameServices_Operation.
 *
 *  Creates a new Game Server Deployment in a given project and Location.
 *
 *  @param object The @c GTLRGameServices_GameServerDeployment to include in the
 *    query.
 *  @param parent Required. The parent resource name. Uses the form:
 *    `projects/{project}/locations/{location}`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsCreate
 */
+ (instancetype)queryWithObject:(GTLRGameServices_GameServerDeployment *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Game Server Deployment.
 *
 *  Method: gameservices.projects.locations.gameServerDeployments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsDelete : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGameServerDeploymentsDeleteWithname:]

/**
 *  Required. The name of the Game Server Deployment to delete. Uses the form:
 *  `projects/{project}/locations/{location}/gameServerDeployments/{deployment}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRGameServices_Operation.
 *
 *  Deletes a single Game Server Deployment.
 *
 *  @param name Required. The name of the Game Server Deployment to delete. Uses
 *    the form:
 *    `projects/{project}/locations/{location}/gameServerDeployments/{deployment}`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieves information about the current state of the Game Server
 *  Ddeployment. Gathers all the Agones fleets and Agones autoscalers,
 *  including fleets running an older version of the Game Server Deployment.
 *
 *  Method: gameservices.projects.locations.gameServerDeployments.fetchDeploymentState
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsFetchDeploymentState : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGameServerDeploymentsFetchDeploymentStateWithObject:name:]

/**
 *  Required. The name of the Game Server Deployment. Uses the form:
 *  `projects/{project}/locations/{location}/gameServerDeployments/{deployment}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRGameServices_FetchDeploymentStateResponse.
 *
 *  Retrieves information about the current state of the Game Server
 *  Ddeployment. Gathers all the Agones fleets and Agones autoscalers,
 *  including fleets running an older version of the Game Server Deployment.
 *
 *  @param object The @c GTLRGameServices_FetchDeploymentStateRequest to include
 *    in the query.
 *  @param name Required. The name of the Game Server Deployment. Uses the form:
 *    `projects/{project}/locations/{location}/gameServerDeployments/{deployment}`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsFetchDeploymentState
 */
+ (instancetype)queryWithObject:(GTLRGameServices_FetchDeploymentStateRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets details of a single Game Server Deployment.
 *
 *  Method: gameservices.projects.locations.gameServerDeployments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsGet : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGameServerDeploymentsGetWithname:]

/**
 *  Required. The name of the Game Server Deployment to retrieve. Uses the form:
 *  `projects/{project}/locations/{location}/gameServerDeployments/{deployment}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRGameServices_GameServerDeployment.
 *
 *  Gets details of a single Game Server Deployment.
 *
 *  @param name Required. The name of the Game Server Deployment to retrieve.
 *    Uses the form:
 *    `projects/{project}/locations/{location}/gameServerDeployments/{deployment}`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  Method: gameservices.projects.locations.gameServerDeployments.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsGetIamPolicy : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGameServerDeploymentsGetIamPolicyWithresource:]

/**
 *  Optional. The policy format version to be returned.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected.
 *  Requests for policies with any conditional bindings must specify version 3.
 *  Policies without any conditional bindings may specify any valid value or
 *  leave the field unset.
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRGameServices_Policy.
 *
 *  Gets the access control policy for a resource.
 *  Returns an empty policy if the resource exists and does not have a policy
 *  set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Gets details a single Game Server Deployment Rollout.
 *
 *  Method: gameservices.projects.locations.gameServerDeployments.getRollout
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsGetRollout : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGameServerDeploymentsGetRolloutWithname:]

/**
 *  Required. The name of the Game Server Deployment to retrieve. Uses the form:
 *  `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/rollout`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRGameServices_GameServerDeploymentRollout.
 *
 *  Gets details a single Game Server Deployment Rollout.
 *
 *  @param name Required. The name of the Game Server Deployment to retrieve.
 *    Uses the form:
 *    `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/rollout`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsGetRollout
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Game Server Deployments in a given project and Location.
 *
 *  Method: gameservices.projects.locations.gameServerDeployments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsList : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGameServerDeploymentsListWithparent:]

/** Optional. The filter to apply to list results. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Specifies the ordering of results following syntax at
 *  https://cloud.google.com/apis/design/design_patterns#sorting_order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of items to return. If unspecified, server
 *  will pick an appropriate default. Server may return fewer items than
 *  requested. A caller should only rely on response's
 *  next_page_token to
 *  determine if there are more GameServerDeployments left to be queried.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. The next_page_token value returned from a previous List request,
 *  if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource name. Uses the form:
 *  `projects/{project}/locations/{location}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRGameServices_ListGameServerDeploymentsResponse.
 *
 *  Lists Game Server Deployments in a given project and Location.
 *
 *  @param parent Required. The parent resource name. Uses the form:
 *    `projects/{project}/locations/{location}`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Patches a Game Server Deployment.
 *
 *  Method: gameservices.projects.locations.gameServerDeployments.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsPatch : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGameServerDeploymentsPatchWithObject:name:]

/**
 *  The resource name of the Game Server Deployment. Uses the form:
 *  `projects/{project}/locations/{location}/gameServerDeployments/{deployment}`.
 *  For example,
 *  `projects/my-project/locations/{location}/gameServerDeployments/my-deployment`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Mask of fields to update. At least one path must be supplied in
 *  this field. For the `FieldMask` definition, see
 *  https:
 *  //developers.google.com/protocol-buffers
 *  // /docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRGameServices_Operation.
 *
 *  Patches a Game Server Deployment.
 *
 *  @param object The @c GTLRGameServices_GameServerDeployment to include in the
 *    query.
 *  @param name The resource name of the Game Server Deployment. Uses the form:
 *    `projects/{project}/locations/{location}/gameServerDeployments/{deployment}`.
 *    For example,
 *    `projects/my-project/locations/{location}/gameServerDeployments/my-deployment`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsPatch
 */
+ (instancetype)queryWithObject:(GTLRGameServices_GameServerDeployment *)object
                           name:(NSString *)name;

@end

/**
 *  Previews the Game Server Deployment Rollout. This API does not mutate the
 *  Rollout resource.
 *
 *  Method: gameservices.projects.locations.gameServerDeployments.previewRollout
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsPreviewRollout : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGameServerDeploymentsPreviewRolloutWithObject:name:]

/**
 *  The resource name of the Game Server Deployment Rollout. Uses the form:
 *  `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/rollout`.
 *  For example,
 *  `projects/my-project/locations/{location}/gameServerDeployments/my-deployment/rollout`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The target timestamp to compute the preview. Defaults to the
 *  immediately
 *  after the proposed Rollout completes.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *previewTime;

/**
 *  Optional. Mask of fields to update. At least one path must be supplied in
 *  this field. For the `FieldMask` definition, see
 *  https:
 *  //developers.google.com/protocol-buffers
 *  // /docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRGameServices_PreviewGameServerDeploymentRolloutResponse.
 *
 *  Previews the Game Server Deployment Rollout. This API does not mutate the
 *  Rollout resource.
 *
 *  @param object The @c GTLRGameServices_GameServerDeploymentRollout to include
 *    in the query.
 *  @param name The resource name of the Game Server Deployment Rollout. Uses
 *    the form:
 *    `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/rollout`.
 *    For example,
 *    `projects/my-project/locations/{location}/gameServerDeployments/my-deployment/rollout`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsPreviewRollout
 */
+ (instancetype)queryWithObject:(GTLRGameServices_GameServerDeploymentRollout *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *  Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
 *
 *  Method: gameservices.projects.locations.gameServerDeployments.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsSetIamPolicy : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGameServerDeploymentsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRGameServices_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *  Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRGameServices_SetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRGameServices_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a `NOT_FOUND` error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  Method: gameservices.projects.locations.gameServerDeployments.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsTestIamPermissions : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGameServerDeploymentsTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRGameServices_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource.
 *  If the resource does not exist, this will return an empty set of
 *  permissions, not a `NOT_FOUND` error.
 *  Note: This operation is designed to be used for building permission-aware
 *  UIs and command-line tools, not for authorization checking. This operation
 *  may "fail open" without warning.
 *
 *  @param object The @c GTLRGameServices_TestIamPermissionsRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRGameServices_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Patches a single Game Server Deployment Rollout.
 *  The method will not return an error if the update does not affect any
 *  existing realms. For example - if the default_game_server_config is changed
 *  but all existing realms use the override, that is valid. Similarly, if a
 *  non existing realm is explicitly called out in game_server_config_overrides
 *  field, that will also not result in an error.
 *
 *  Method: gameservices.projects.locations.gameServerDeployments.updateRollout
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsUpdateRollout : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGameServerDeploymentsUpdateRolloutWithObject:name:]

/**
 *  The resource name of the Game Server Deployment Rollout. Uses the form:
 *  `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/rollout`.
 *  For example,
 *  `projects/my-project/locations/{location}/gameServerDeployments/my-deployment/rollout`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Mask of fields to update. At least one path must be supplied in
 *  this field. For the `FieldMask` definition, see
 *  https:
 *  //developers.google.com/protocol-buffers
 *  // /docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRGameServices_Operation.
 *
 *  Patches a single Game Server Deployment Rollout.
 *  The method will not return an error if the update does not affect any
 *  existing realms. For example - if the default_game_server_config is changed
 *  but all existing realms use the override, that is valid. Similarly, if a
 *  non existing realm is explicitly called out in game_server_config_overrides
 *  field, that will also not result in an error.
 *
 *  @param object The @c GTLRGameServices_GameServerDeploymentRollout to include
 *    in the query.
 *  @param name The resource name of the Game Server Deployment Rollout. Uses
 *    the form:
 *    `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/rollout`.
 *    For example,
 *    `projects/my-project/locations/{location}/gameServerDeployments/my-deployment/rollout`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGameServerDeploymentsUpdateRollout
 */
+ (instancetype)queryWithObject:(GTLRGameServices_GameServerDeploymentRollout *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a location.
 *
 *  Method: gameservices.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsGet : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRGameServices_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: gameservices.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsList : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  If true, the returned list will include locations which are not yet
 *  revealed.
 */
@property(nonatomic, assign) BOOL includeUnrevealedLocations;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRGameServices_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not
 *  guaranteed. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use
 *  Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation,
 *  the operation is not deleted; instead, it becomes an operation with
 *  an Operation.error value with a google.rpc.Status.code of 1,
 *  corresponding to `Code.CANCELLED`.
 *
 *  Method: gameservices.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsOperationsCancel : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsOperationsCancelWithObject:name:]

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRGameServices_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not
 *  guaranteed. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use
 *  Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation,
 *  the operation is not deleted; instead, it becomes an operation with
 *  an Operation.error value with a google.rpc.Status.code of 1,
 *  corresponding to `Code.CANCELLED`.
 *
 *  @param object The @c GTLRGameServices_CancelOperationRequest to include in
 *    the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRGameServices_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: gameservices.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsOperationsDelete : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsOperationsDeleteWithname:]

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRGameServices_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: gameservices.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsOperationsGet : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRGameServices_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *  NOTE: the `name` binding allows API services to override the binding
 *  to use different resource name schemes, such as `users/ * /operations`. To
 *  override the binding, API services can add a binding such as
 *  `"/v1/{name=users/ *}/operations"` to their service configuration.
 *  For backwards compatibility, the default name includes the operations
 *  collection id, however overriding users must ensure the name binding
 *  is the parent resource, without the operations collection id.
 *
 *  Method: gameservices.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsOperationsList : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsOperationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRGameServices_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *  NOTE: the `name` binding allows API services to override the binding
 *  to use different resource name schemes, such as `users/ * /operations`. To
 *  override the binding, API services can add a binding such as
 *  `"/v1/{name=users/ *}/operations"` to their service configuration.
 *  For backwards compatibility, the default name includes the operations
 *  collection id, however overriding users must ensure the name binding
 *  is the parent resource, without the operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new Realm in a given project and Location.
 *
 *  Method: gameservices.projects.locations.realms.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsRealmsCreate : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsRealmsCreateWithObject:parent:]

/**
 *  Required. The parent resource name. Uses the form:
 *  `projects/{project}/locations/{location}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. The ID of the Realm resource to be created. */
@property(nonatomic, copy, nullable) NSString *realmId;

/**
 *  Fetches a @c GTLRGameServices_Operation.
 *
 *  Creates a new Realm in a given project and Location.
 *
 *  @param object The @c GTLRGameServices_Realm to include in the query.
 *  @param parent Required. The parent resource name. Uses the form:
 *    `projects/{project}/locations/{location}`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsRealmsCreate
 */
+ (instancetype)queryWithObject:(GTLRGameServices_Realm *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Realm.
 *
 *  Method: gameservices.projects.locations.realms.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsRealmsDelete : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsRealmsDeleteWithname:]

/**
 *  Required. The name of the Realm to delete. Uses the form:
 *  `projects/{project}/locations/{location}/realms/{realm}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRGameServices_Operation.
 *
 *  Deletes a single Realm.
 *
 *  @param name Required. The name of the Realm to delete. Uses the form:
 *    `projects/{project}/locations/{location}/realms/{realm}`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsRealmsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new game server cluster in a given project and location.
 *
 *  Method: gameservices.projects.locations.realms.gameServerClusters.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsRealmsGameServerClustersCreate : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsRealmsGameServerClustersCreateWithObject:parent:]

/** Required. The ID of the Game Server Cluster resource to be created. */
@property(nonatomic, copy, nullable) NSString *gameServerClusterId;

/**
 *  Required. The parent resource name. Uses the form:
 *  `projects/{project}/locations/{location}/realms/{realm-id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRGameServices_Operation.
 *
 *  Creates a new game server cluster in a given project and location.
 *
 *  @param object The @c GTLRGameServices_GameServerCluster to include in the
 *    query.
 *  @param parent Required. The parent resource name. Uses the form:
 *    `projects/{project}/locations/{location}/realms/{realm-id}`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsRealmsGameServerClustersCreate
 */
+ (instancetype)queryWithObject:(GTLRGameServices_GameServerCluster *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single game server cluster.
 *
 *  Method: gameservices.projects.locations.realms.gameServerClusters.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsRealmsGameServerClustersDelete : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsRealmsGameServerClustersDeleteWithname:]

/**
 *  Required. The name of the Game Server Cluster to delete. Uses the form:
 *  `projects/{project}/locations/{location}/gameServerClusters/{cluster}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRGameServices_Operation.
 *
 *  Deletes a single game server cluster.
 *
 *  @param name Required. The name of the Game Server Cluster to delete. Uses
 *    the form:
 *    `projects/{project}/locations/{location}/gameServerClusters/{cluster}`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsRealmsGameServerClustersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single game server cluster.
 *
 *  Method: gameservices.projects.locations.realms.gameServerClusters.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsRealmsGameServerClustersGet : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsRealmsGameServerClustersGetWithname:]

/**
 *  Required. The name of the Game Server Cluster to retrieve. Uses the form:
 *  `projects/{project}/locations/{location}/realms/{realm-id}/gameServerClusters/{cluster}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRGameServices_GameServerCluster.
 *
 *  Gets details of a single game server cluster.
 *
 *  @param name Required. The name of the Game Server Cluster to retrieve. Uses
 *    the form:
 *    `projects/{project}/locations/{location}/realms/{realm-id}/gameServerClusters/{cluster}`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsRealmsGameServerClustersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Game Server Clusters in a given project and location.
 *
 *  Method: gameservices.projects.locations.realms.gameServerClusters.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsRealmsGameServerClustersList : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsRealmsGameServerClustersListWithparent:]

/** Optional. The filter to apply to list results. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Specifies the ordering of results following syntax at
 *  https://cloud.google.com/apis/design/design_patterns#sorting_order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of items to return. If unspecified, server
 *  will pick an appropriate default. Server may return fewer items than
 *  requested. A caller should only rely on response's
 *  next_page_token to
 *  determine if there are more GameServerClusters left to be queried.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. The next_page_token value returned from a previous List request,
 *  if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource name. Uses the form:
 *  "projects/{project}/locations/{location}/realms/{realm}".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRGameServices_ListGameServerClustersResponse.
 *
 *  Lists Game Server Clusters in a given project and location.
 *
 *  @param parent Required. The parent resource name. Uses the form:
 *    "projects/{project}/locations/{location}/realms/{realm}".
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsRealmsGameServerClustersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Patches a single game server cluster.
 *
 *  Method: gameservices.projects.locations.realms.gameServerClusters.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsRealmsGameServerClustersPatch : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsRealmsGameServerClustersPatchWithObject:name:]

/**
 *  Required. The resource name of the Game Server Cluster. Uses the form:
 *  `projects/{project}/locations/{location}/realms/{realm}/gameServerClusters/{cluster}`.
 *  For example,
 *  `projects/my-project/locations/{location}/realms/zanzibar/gameServerClusters/my-onprem-cluster`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Mask of fields to update. At least one path must be supplied in
 *  this field. For the `FieldMask` definition, see
 *  https:
 *  //developers.google.com/protocol-buffers
 *  // /docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRGameServices_Operation.
 *
 *  Patches a single game server cluster.
 *
 *  @param object The @c GTLRGameServices_GameServerCluster to include in the
 *    query.
 *  @param name Required. The resource name of the Game Server Cluster. Uses the
 *    form:
 *    `projects/{project}/locations/{location}/realms/{realm}/gameServerClusters/{cluster}`.
 *    For example,
 *    `projects/my-project/locations/{location}/realms/zanzibar/gameServerClusters/my-onprem-cluster`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsRealmsGameServerClustersPatch
 */
+ (instancetype)queryWithObject:(GTLRGameServices_GameServerCluster *)object
                           name:(NSString *)name;

@end

/**
 *  Previews creation of a new game server cluster in a given project and
 *  location.
 *
 *  Method: gameservices.projects.locations.realms.gameServerClusters.previewCreate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsRealmsGameServerClustersPreviewCreate : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsRealmsGameServerClustersPreviewCreateWithObject:parent:]

/** Required. The ID of the Game Server Cluster resource to be created. */
@property(nonatomic, copy, nullable) NSString *gameServerClusterId;

/**
 *  Required. The parent resource name. Uses the form:
 *  `projects/{project}/locations/{location}/realms/{realm}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Optional. The target timestamp to compute the preview. */
@property(nonatomic, strong, nullable) GTLRDateTime *previewTime;

/**
 *  Fetches a @c GTLRGameServices_PreviewCreateGameServerClusterResponse.
 *
 *  Previews creation of a new game server cluster in a given project and
 *  location.
 *
 *  @param object The @c GTLRGameServices_GameServerCluster to include in the
 *    query.
 *  @param parent Required. The parent resource name. Uses the form:
 *    `projects/{project}/locations/{location}/realms/{realm}`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsRealmsGameServerClustersPreviewCreate
 */
+ (instancetype)queryWithObject:(GTLRGameServices_GameServerCluster *)object
                         parent:(NSString *)parent;

@end

/**
 *  Previews deletion of a single game server cluster.
 *
 *  Method: gameservices.projects.locations.realms.gameServerClusters.previewDelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsRealmsGameServerClustersPreviewDelete : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsRealmsGameServerClustersPreviewDeleteWithname:]

/**
 *  Required. The name of the Game Server Cluster to delete. Uses the form:
 *  `projects/{project}/locations/{location}/gameServerClusters/{cluster}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Optional. The target timestamp to compute the preview. */
@property(nonatomic, strong, nullable) GTLRDateTime *previewTime;

/**
 *  Fetches a @c GTLRGameServices_PreviewDeleteGameServerClusterResponse.
 *
 *  Previews deletion of a single game server cluster.
 *
 *  @param name Required. The name of the Game Server Cluster to delete. Uses
 *    the form:
 *    `projects/{project}/locations/{location}/gameServerClusters/{cluster}`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsRealmsGameServerClustersPreviewDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Previews updating a GameServerCluster.
 *
 *  Method: gameservices.projects.locations.realms.gameServerClusters.previewUpdate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsRealmsGameServerClustersPreviewUpdate : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsRealmsGameServerClustersPreviewUpdateWithObject:name:]

/**
 *  Required. The resource name of the Game Server Cluster. Uses the form:
 *  `projects/{project}/locations/{location}/realms/{realm}/gameServerClusters/{cluster}`.
 *  For example,
 *  `projects/my-project/locations/{location}/realms/zanzibar/gameServerClusters/my-onprem-cluster`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Optional. The target timestamp to compute the preview. */
@property(nonatomic, strong, nullable) GTLRDateTime *previewTime;

/**
 *  Required. Mask of fields to update. At least one path must be supplied in
 *  this field. For the `FieldMask` definition, see
 *  https:
 *  //developers.google.com/protocol-buffers
 *  // /docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRGameServices_PreviewUpdateGameServerClusterResponse.
 *
 *  Previews updating a GameServerCluster.
 *
 *  @param object The @c GTLRGameServices_GameServerCluster to include in the
 *    query.
 *  @param name Required. The resource name of the Game Server Cluster. Uses the
 *    form:
 *    `projects/{project}/locations/{location}/realms/{realm}/gameServerClusters/{cluster}`.
 *    For example,
 *    `projects/my-project/locations/{location}/realms/zanzibar/gameServerClusters/my-onprem-cluster`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsRealmsGameServerClustersPreviewUpdate
 */
+ (instancetype)queryWithObject:(GTLRGameServices_GameServerCluster *)object
                           name:(NSString *)name;

@end

/**
 *  Gets details of a single Realm.
 *
 *  Method: gameservices.projects.locations.realms.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsRealmsGet : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsRealmsGetWithname:]

/**
 *  Required. The name of the Realm to retrieve. Uses the form:
 *  `projects/{project}/locations/{location}/realms/{realm}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRGameServices_Realm.
 *
 *  Gets details of a single Realm.
 *
 *  @param name Required. The name of the Realm to retrieve. Uses the form:
 *    `projects/{project}/locations/{location}/realms/{realm}`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsRealmsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Realms in a given project and Location.
 *
 *  Method: gameservices.projects.locations.realms.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsRealmsList : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsRealmsListWithparent:]

/** Optional. The filter to apply to list results. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Specifies the ordering of results following syntax at
 *  https://cloud.google.com/apis/design/design_patterns#sorting_order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of items to return. If unspecified, server
 *  will pick an appropriate default. Server may return fewer items than
 *  requested. A caller should only rely on response's
 *  next_page_token to
 *  determine if there are more Realms left to be queried.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. The next_page_token value returned from a previous List request,
 *  if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource name. Uses the form:
 *  `projects/{project}/locations/{location}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRGameServices_ListRealmsResponse.
 *
 *  Lists Realms in a given project and Location.
 *
 *  @param parent Required. The parent resource name. Uses the form:
 *    `projects/{project}/locations/{location}`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsRealmsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Patches a single Realm.
 *
 *  Method: gameservices.projects.locations.realms.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsRealmsPatch : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsRealmsPatchWithObject:name:]

/**
 *  The resource name of the Realm. Uses the form:
 *  `projects/{project}/locations/{location}/realms/{realm}`. For
 *  example, `projects/my-project/locations/{location}/realms/my-realm`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The update mask applies to the resource. For the `FieldMask`
 *  definition, see
 *  https:
 *  //developers.google.com/protocol-buffers
 *  // /docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRGameServices_Operation.
 *
 *  Patches a single Realm.
 *
 *  @param object The @c GTLRGameServices_Realm to include in the query.
 *  @param name The resource name of the Realm. Uses the form:
 *    `projects/{project}/locations/{location}/realms/{realm}`. For
 *    example, `projects/my-project/locations/{location}/realms/my-realm`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsRealmsPatch
 */
+ (instancetype)queryWithObject:(GTLRGameServices_Realm *)object
                           name:(NSString *)name;

@end

/**
 *  Previews patches to a single Realm.
 *
 *  Method: gameservices.projects.locations.realms.previewUpdate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGameServicesCloudPlatform
 */
@interface GTLRGameServicesQuery_ProjectsLocationsRealmsPreviewUpdate : GTLRGameServicesQuery
// Previous library name was
//   +[GTLQueryGameServices queryForProjectsLocationsRealmsPreviewUpdateWithObject:name:]

/**
 *  The resource name of the Realm. Uses the form:
 *  `projects/{project}/locations/{location}/realms/{realm}`. For
 *  example, `projects/my-project/locations/{location}/realms/my-realm`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Optional. The target timestamp to compute the preview. */
@property(nonatomic, strong, nullable) GTLRDateTime *previewTime;

/**
 *  Required. The update mask applies to the resource. For the `FieldMask`
 *  definition, see
 *  https:
 *  //developers.google.com/protocol-buffers
 *  // /docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRGameServices_PreviewRealmUpdateResponse.
 *
 *  Previews patches to a single Realm.
 *
 *  @param object The @c GTLRGameServices_Realm to include in the query.
 *  @param name The resource name of the Realm. Uses the form:
 *    `projects/{project}/locations/{location}/realms/{realm}`. For
 *    example, `projects/my-project/locations/{location}/realms/my-realm`.
 *
 *  @return GTLRGameServicesQuery_ProjectsLocationsRealmsPreviewUpdate
 */
+ (instancetype)queryWithObject:(GTLRGameServices_Realm *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
