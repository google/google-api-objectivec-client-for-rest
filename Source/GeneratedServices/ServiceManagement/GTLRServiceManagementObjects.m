// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Service Management API (servicemanagement/v1)
// Description:
//   Google Service Management allows service producers to publish their
//   services on Google Cloud Platform so that they can be discovered and used
//   by service consumers.
// Documentation:
//   https://cloud.google.com/service-management/

#import "GTLRServiceManagementObjects.h"

// ----------------------------------------------------------------------------
// Constants

// GTLRServiceManagement_Api.syntax
NSString * const kGTLRServiceManagement_Api_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRServiceManagement_Api_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// GTLRServiceManagement_AuditLogConfig.logType
NSString * const kGTLRServiceManagement_AuditLogConfig_LogType_AdminRead = @"ADMIN_READ";
NSString * const kGTLRServiceManagement_AuditLogConfig_LogType_DataRead = @"DATA_READ";
NSString * const kGTLRServiceManagement_AuditLogConfig_LogType_DataWrite = @"DATA_WRITE";
NSString * const kGTLRServiceManagement_AuditLogConfig_LogType_LogTypeUnspecified = @"LOG_TYPE_UNSPECIFIED";

// GTLRServiceManagement_BackendRule.pathTranslation
NSString * const kGTLRServiceManagement_BackendRule_PathTranslation_AppendPathToAddress = @"APPEND_PATH_TO_ADDRESS";
NSString * const kGTLRServiceManagement_BackendRule_PathTranslation_ConstantAddress = @"CONSTANT_ADDRESS";
NSString * const kGTLRServiceManagement_BackendRule_PathTranslation_PathTranslationUnspecified = @"PATH_TRANSLATION_UNSPECIFIED";

// GTLRServiceManagement_ConfigChange.changeType
NSString * const kGTLRServiceManagement_ConfigChange_ChangeType_Added = @"ADDED";
NSString * const kGTLRServiceManagement_ConfigChange_ChangeType_ChangeTypeUnspecified = @"CHANGE_TYPE_UNSPECIFIED";
NSString * const kGTLRServiceManagement_ConfigChange_ChangeType_Modified = @"MODIFIED";
NSString * const kGTLRServiceManagement_ConfigChange_ChangeType_Removed = @"REMOVED";

// GTLRServiceManagement_ConfigFile.fileType
NSString * const kGTLRServiceManagement_ConfigFile_FileType_FileDescriptorSetProto = @"FILE_DESCRIPTOR_SET_PROTO";
NSString * const kGTLRServiceManagement_ConfigFile_FileType_FileTypeUnspecified = @"FILE_TYPE_UNSPECIFIED";
NSString * const kGTLRServiceManagement_ConfigFile_FileType_OpenApiJson = @"OPEN_API_JSON";
NSString * const kGTLRServiceManagement_ConfigFile_FileType_OpenApiYaml = @"OPEN_API_YAML";
NSString * const kGTLRServiceManagement_ConfigFile_FileType_ProtoFile = @"PROTO_FILE";
NSString * const kGTLRServiceManagement_ConfigFile_FileType_ServiceConfigYaml = @"SERVICE_CONFIG_YAML";

// GTLRServiceManagement_Diagnostic.kind
NSString * const kGTLRServiceManagement_Diagnostic_Kind_Error  = @"ERROR";
NSString * const kGTLRServiceManagement_Diagnostic_Kind_Warning = @"WARNING";

// GTLRServiceManagement_Enum.syntax
NSString * const kGTLRServiceManagement_Enum_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRServiceManagement_Enum_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// GTLRServiceManagement_Field.cardinality
NSString * const kGTLRServiceManagement_Field_Cardinality_CardinalityOptional = @"CARDINALITY_OPTIONAL";
NSString * const kGTLRServiceManagement_Field_Cardinality_CardinalityRepeated = @"CARDINALITY_REPEATED";
NSString * const kGTLRServiceManagement_Field_Cardinality_CardinalityRequired = @"CARDINALITY_REQUIRED";
NSString * const kGTLRServiceManagement_Field_Cardinality_CardinalityUnknown = @"CARDINALITY_UNKNOWN";

// GTLRServiceManagement_Field.kind
NSString * const kGTLRServiceManagement_Field_Kind_TypeBool    = @"TYPE_BOOL";
NSString * const kGTLRServiceManagement_Field_Kind_TypeBytes   = @"TYPE_BYTES";
NSString * const kGTLRServiceManagement_Field_Kind_TypeDouble  = @"TYPE_DOUBLE";
NSString * const kGTLRServiceManagement_Field_Kind_TypeEnum    = @"TYPE_ENUM";
NSString * const kGTLRServiceManagement_Field_Kind_TypeFixed32 = @"TYPE_FIXED32";
NSString * const kGTLRServiceManagement_Field_Kind_TypeFixed64 = @"TYPE_FIXED64";
NSString * const kGTLRServiceManagement_Field_Kind_TypeFloat   = @"TYPE_FLOAT";
NSString * const kGTLRServiceManagement_Field_Kind_TypeGroup   = @"TYPE_GROUP";
NSString * const kGTLRServiceManagement_Field_Kind_TypeInt32   = @"TYPE_INT32";
NSString * const kGTLRServiceManagement_Field_Kind_TypeInt64   = @"TYPE_INT64";
NSString * const kGTLRServiceManagement_Field_Kind_TypeMessage = @"TYPE_MESSAGE";
NSString * const kGTLRServiceManagement_Field_Kind_TypeSfixed32 = @"TYPE_SFIXED32";
NSString * const kGTLRServiceManagement_Field_Kind_TypeSfixed64 = @"TYPE_SFIXED64";
NSString * const kGTLRServiceManagement_Field_Kind_TypeSint32  = @"TYPE_SINT32";
NSString * const kGTLRServiceManagement_Field_Kind_TypeSint64  = @"TYPE_SINT64";
NSString * const kGTLRServiceManagement_Field_Kind_TypeString  = @"TYPE_STRING";
NSString * const kGTLRServiceManagement_Field_Kind_TypeUint32  = @"TYPE_UINT32";
NSString * const kGTLRServiceManagement_Field_Kind_TypeUint64  = @"TYPE_UINT64";
NSString * const kGTLRServiceManagement_Field_Kind_TypeUnknown = @"TYPE_UNKNOWN";

// GTLRServiceManagement_LabelDescriptor.valueType
NSString * const kGTLRServiceManagement_LabelDescriptor_ValueType_Bool = @"BOOL";
NSString * const kGTLRServiceManagement_LabelDescriptor_ValueType_Int64 = @"INT64";
NSString * const kGTLRServiceManagement_LabelDescriptor_ValueType_String = @"STRING";

// GTLRServiceManagement_Method.syntax
NSString * const kGTLRServiceManagement_Method_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRServiceManagement_Method_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// GTLRServiceManagement_MetricDescriptor.metricKind
NSString * const kGTLRServiceManagement_MetricDescriptor_MetricKind_Cumulative = @"CUMULATIVE";
NSString * const kGTLRServiceManagement_MetricDescriptor_MetricKind_Delta = @"DELTA";
NSString * const kGTLRServiceManagement_MetricDescriptor_MetricKind_Gauge = @"GAUGE";
NSString * const kGTLRServiceManagement_MetricDescriptor_MetricKind_MetricKindUnspecified = @"METRIC_KIND_UNSPECIFIED";

// GTLRServiceManagement_MetricDescriptor.valueType
NSString * const kGTLRServiceManagement_MetricDescriptor_ValueType_Bool = @"BOOL";
NSString * const kGTLRServiceManagement_MetricDescriptor_ValueType_Distribution = @"DISTRIBUTION";
NSString * const kGTLRServiceManagement_MetricDescriptor_ValueType_Double = @"DOUBLE";
NSString * const kGTLRServiceManagement_MetricDescriptor_ValueType_Int64 = @"INT64";
NSString * const kGTLRServiceManagement_MetricDescriptor_ValueType_Money = @"MONEY";
NSString * const kGTLRServiceManagement_MetricDescriptor_ValueType_String = @"STRING";
NSString * const kGTLRServiceManagement_MetricDescriptor_ValueType_ValueTypeUnspecified = @"VALUE_TYPE_UNSPECIFIED";

// GTLRServiceManagement_MetricDescriptorMetadata.launchStage
NSString * const kGTLRServiceManagement_MetricDescriptorMetadata_LaunchStage_Alpha = @"ALPHA";
NSString * const kGTLRServiceManagement_MetricDescriptorMetadata_LaunchStage_Beta = @"BETA";
NSString * const kGTLRServiceManagement_MetricDescriptorMetadata_LaunchStage_Deprecated = @"DEPRECATED";
NSString * const kGTLRServiceManagement_MetricDescriptorMetadata_LaunchStage_EarlyAccess = @"EARLY_ACCESS";
NSString * const kGTLRServiceManagement_MetricDescriptorMetadata_LaunchStage_Ga = @"GA";
NSString * const kGTLRServiceManagement_MetricDescriptorMetadata_LaunchStage_LaunchStageUnspecified = @"LAUNCH_STAGE_UNSPECIFIED";

// GTLRServiceManagement_Rollout.status
NSString * const kGTLRServiceManagement_Rollout_Status_Cancelled = @"CANCELLED";
NSString * const kGTLRServiceManagement_Rollout_Status_Failed  = @"FAILED";
NSString * const kGTLRServiceManagement_Rollout_Status_FailedRolledBack = @"FAILED_ROLLED_BACK";
NSString * const kGTLRServiceManagement_Rollout_Status_InProgress = @"IN_PROGRESS";
NSString * const kGTLRServiceManagement_Rollout_Status_Pending = @"PENDING";
NSString * const kGTLRServiceManagement_Rollout_Status_RolloutStatusUnspecified = @"ROLLOUT_STATUS_UNSPECIFIED";
NSString * const kGTLRServiceManagement_Rollout_Status_Success = @"SUCCESS";

// GTLRServiceManagement_Step.status
NSString * const kGTLRServiceManagement_Step_Status_Cancelled  = @"CANCELLED";
NSString * const kGTLRServiceManagement_Step_Status_Done       = @"DONE";
NSString * const kGTLRServiceManagement_Step_Status_Failed     = @"FAILED";
NSString * const kGTLRServiceManagement_Step_Status_InProgress = @"IN_PROGRESS";
NSString * const kGTLRServiceManagement_Step_Status_NotStarted = @"NOT_STARTED";
NSString * const kGTLRServiceManagement_Step_Status_StatusUnspecified = @"STATUS_UNSPECIFIED";

// GTLRServiceManagement_Type.syntax
NSString * const kGTLRServiceManagement_Type_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRServiceManagement_Type_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Advice
//

@implementation GTLRServiceManagement_Advice
@dynamic descriptionProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Api
//

@implementation GTLRServiceManagement_Api
@dynamic methods, mixins, name, options, sourceContext, syntax, version;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"methods" : [GTLRServiceManagement_Method class],
    @"mixins" : [GTLRServiceManagement_Mixin class],
    @"options" : [GTLRServiceManagement_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_AuditConfig
//

@implementation GTLRServiceManagement_AuditConfig
@dynamic auditLogConfigs, service;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditLogConfigs" : [GTLRServiceManagement_AuditLogConfig class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_AuditLogConfig
//

@implementation GTLRServiceManagement_AuditLogConfig
@dynamic exemptedMembers, logType;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"exemptedMembers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Authentication
//

@implementation GTLRServiceManagement_Authentication
@dynamic providers, rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"providers" : [GTLRServiceManagement_AuthProvider class],
    @"rules" : [GTLRServiceManagement_AuthenticationRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_AuthenticationRule
//

@implementation GTLRServiceManagement_AuthenticationRule
@dynamic allowWithoutCredential, oauth, requirements, selector;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requirements" : [GTLRServiceManagement_AuthRequirement class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_AuthorizationConfig
//

@implementation GTLRServiceManagement_AuthorizationConfig
@dynamic provider;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_AuthProvider
//

@implementation GTLRServiceManagement_AuthProvider
@dynamic audiences, authorizationUrl, identifier, issuer, jwksUri;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_AuthRequirement
//

@implementation GTLRServiceManagement_AuthRequirement
@dynamic audiences, providerId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Backend
//

@implementation GTLRServiceManagement_Backend
@dynamic rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceManagement_BackendRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_BackendRule
//

@implementation GTLRServiceManagement_BackendRule
@dynamic address, deadline, jwtAudience, minDeadline, operationDeadline,
         pathTranslation, selector;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Billing
//

@implementation GTLRServiceManagement_Billing
@dynamic consumerDestinations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"consumerDestinations" : [GTLRServiceManagement_BillingDestination class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_BillingDestination
//

@implementation GTLRServiceManagement_BillingDestination
@dynamic metrics, monitoredResource;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metrics" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Binding
//

@implementation GTLRServiceManagement_Binding
@dynamic condition, members, role;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"members" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_ChangeReport
//

@implementation GTLRServiceManagement_ChangeReport
@dynamic configChanges;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"configChanges" : [GTLRServiceManagement_ConfigChange class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_ConfigChange
//

@implementation GTLRServiceManagement_ConfigChange
@dynamic advices, changeType, element, newValue, oldValue;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"advices" : [GTLRServiceManagement_Advice class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_ConfigFile
//

@implementation GTLRServiceManagement_ConfigFile
@dynamic fileContents, filePath, fileType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_ConfigRef
//

@implementation GTLRServiceManagement_ConfigRef
@dynamic name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_ConfigSource
//

@implementation GTLRServiceManagement_ConfigSource
@dynamic files, identifier;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"files" : [GTLRServiceManagement_ConfigFile class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Context
//

@implementation GTLRServiceManagement_Context
@dynamic rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceManagement_ContextRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_ContextRule
//

@implementation GTLRServiceManagement_ContextRule
@dynamic allowedRequestExtensions, allowedResponseExtensions, provided,
         requested, selector;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"allowedRequestExtensions" : [NSString class],
    @"allowedResponseExtensions" : [NSString class],
    @"provided" : [NSString class],
    @"requested" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Control
//

@implementation GTLRServiceManagement_Control
@dynamic environment;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_CustomError
//

@implementation GTLRServiceManagement_CustomError
@dynamic rules, types;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceManagement_CustomErrorRule class],
    @"types" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_CustomErrorRule
//

@implementation GTLRServiceManagement_CustomErrorRule
@dynamic isErrorType, selector;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_CustomHttpPattern
//

@implementation GTLRServiceManagement_CustomHttpPattern
@dynamic kind, path;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_DeleteServiceStrategy
//

@implementation GTLRServiceManagement_DeleteServiceStrategy
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Diagnostic
//

@implementation GTLRServiceManagement_Diagnostic
@dynamic kind, location, message;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_DisableServiceRequest
//

@implementation GTLRServiceManagement_DisableServiceRequest
@dynamic consumerId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Documentation
//

@implementation GTLRServiceManagement_Documentation
@dynamic documentationRootUrl, overview, pages, rules, summary;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"pages" : [GTLRServiceManagement_Page class],
    @"rules" : [GTLRServiceManagement_DocumentationRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_DocumentationRule
//

@implementation GTLRServiceManagement_DocumentationRule
@dynamic deprecationDescription, descriptionProperty, selector;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_EnableServiceRequest
//

@implementation GTLRServiceManagement_EnableServiceRequest
@dynamic consumerId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Endpoint
//

@implementation GTLRServiceManagement_Endpoint
@dynamic aliases, allowCors, features, name, target;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"aliases" : [NSString class],
    @"features" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Enum
//

@implementation GTLRServiceManagement_Enum
@dynamic enumvalue, name, options, sourceContext, syntax;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"enumvalue" : [GTLRServiceManagement_EnumValue class],
    @"options" : [GTLRServiceManagement_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_EnumValue
//

@implementation GTLRServiceManagement_EnumValue
@dynamic name, number, options;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"options" : [GTLRServiceManagement_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Experimental
//

@implementation GTLRServiceManagement_Experimental
@dynamic authorization;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Expr
//

@implementation GTLRServiceManagement_Expr
@dynamic descriptionProperty, expression, location, title;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Field
//

@implementation GTLRServiceManagement_Field
@dynamic cardinality, defaultValue, jsonName, kind, name, number, oneofIndex,
         options, packed, typeUrl;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"options" : [GTLRServiceManagement_Option class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_GenerateConfigReportRequest
//

@implementation GTLRServiceManagement_GenerateConfigReportRequest
@dynamic newConfig, oldConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_GenerateConfigReportRequest_NewConfig
//

@implementation GTLRServiceManagement_GenerateConfigReportRequest_NewConfig

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_GenerateConfigReportRequest_OldConfig
//

@implementation GTLRServiceManagement_GenerateConfigReportRequest_OldConfig

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_GenerateConfigReportResponse
//

@implementation GTLRServiceManagement_GenerateConfigReportResponse
@dynamic changeReports, diagnostics, identifier, serviceName;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"changeReports" : [GTLRServiceManagement_ChangeReport class],
    @"diagnostics" : [GTLRServiceManagement_Diagnostic class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_GetIamPolicyRequest
//

@implementation GTLRServiceManagement_GetIamPolicyRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Http
//

@implementation GTLRServiceManagement_Http
@dynamic fullyDecodeReservedExpansion, rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceManagement_HttpRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_HttpRule
//

@implementation GTLRServiceManagement_HttpRule
@dynamic additionalBindings, body, custom, deleteProperty, get, patch, post,
         put, responseBody, selector;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"deleteProperty" : @"delete" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"additionalBindings" : [GTLRServiceManagement_HttpRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_LabelDescriptor
//

@implementation GTLRServiceManagement_LabelDescriptor
@dynamic descriptionProperty, key, valueType;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_ListOperationsResponse
//

@implementation GTLRServiceManagement_ListOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRServiceManagement_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_ListServiceConfigsResponse
//

@implementation GTLRServiceManagement_ListServiceConfigsResponse
@dynamic nextPageToken, serviceConfigs;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"serviceConfigs" : [GTLRServiceManagement_Service class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"serviceConfigs";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_ListServiceRolloutsResponse
//

@implementation GTLRServiceManagement_ListServiceRolloutsResponse
@dynamic nextPageToken, rollouts;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rollouts" : [GTLRServiceManagement_Rollout class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"rollouts";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_ListServicesResponse
//

@implementation GTLRServiceManagement_ListServicesResponse
@dynamic nextPageToken, services;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"services" : [GTLRServiceManagement_ManagedService class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"services";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_LogDescriptor
//

@implementation GTLRServiceManagement_LogDescriptor
@dynamic descriptionProperty, displayName, labels, name;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labels" : [GTLRServiceManagement_LabelDescriptor class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Logging
//

@implementation GTLRServiceManagement_Logging
@dynamic consumerDestinations, producerDestinations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"consumerDestinations" : [GTLRServiceManagement_LoggingDestination class],
    @"producerDestinations" : [GTLRServiceManagement_LoggingDestination class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_LoggingDestination
//

@implementation GTLRServiceManagement_LoggingDestination
@dynamic logs, monitoredResource;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"logs" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_ManagedService
//

@implementation GTLRServiceManagement_ManagedService
@dynamic producerProjectId, serviceName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Method
//

@implementation GTLRServiceManagement_Method
@dynamic name, options, requestStreaming, requestTypeUrl, responseStreaming,
         responseTypeUrl, syntax;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"options" : [GTLRServiceManagement_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_MetricDescriptor
//

@implementation GTLRServiceManagement_MetricDescriptor
@dynamic descriptionProperty, displayName, labels, metadata, metricKind, name,
         type, unit, valueType;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labels" : [GTLRServiceManagement_LabelDescriptor class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_MetricDescriptorMetadata
//

@implementation GTLRServiceManagement_MetricDescriptorMetadata
@dynamic ingestDelay, launchStage, samplePeriod;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_MetricRule
//

@implementation GTLRServiceManagement_MetricRule
@dynamic metricCosts, selector;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_MetricRule_MetricCosts
//

@implementation GTLRServiceManagement_MetricRule_MetricCosts

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Mixin
//

@implementation GTLRServiceManagement_Mixin
@dynamic name, root;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_MonitoredResourceDescriptor
//

@implementation GTLRServiceManagement_MonitoredResourceDescriptor
@dynamic descriptionProperty, displayName, labels, name, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labels" : [GTLRServiceManagement_LabelDescriptor class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Monitoring
//

@implementation GTLRServiceManagement_Monitoring
@dynamic consumerDestinations, producerDestinations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"consumerDestinations" : [GTLRServiceManagement_MonitoringDestination class],
    @"producerDestinations" : [GTLRServiceManagement_MonitoringDestination class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_MonitoringDestination
//

@implementation GTLRServiceManagement_MonitoringDestination
@dynamic metrics, monitoredResource;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metrics" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_OAuthRequirements
//

@implementation GTLRServiceManagement_OAuthRequirements
@dynamic canonicalScopes;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Operation
//

@implementation GTLRServiceManagement_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Operation_Metadata
//

@implementation GTLRServiceManagement_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Operation_Response
//

@implementation GTLRServiceManagement_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_OperationMetadata
//

@implementation GTLRServiceManagement_OperationMetadata
@dynamic progressPercentage, resourceNames, startTime, steps;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resourceNames" : [NSString class],
    @"steps" : [GTLRServiceManagement_Step class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Option
//

@implementation GTLRServiceManagement_Option
@dynamic name, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Option_Value
//

@implementation GTLRServiceManagement_Option_Value

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Page
//

@implementation GTLRServiceManagement_Page
@dynamic content, name, subpages;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"subpages" : [GTLRServiceManagement_Page class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Policy
//

@implementation GTLRServiceManagement_Policy
@dynamic auditConfigs, bindings, ETag, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditConfigs" : [GTLRServiceManagement_AuditConfig class],
    @"bindings" : [GTLRServiceManagement_Binding class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Quota
//

@implementation GTLRServiceManagement_Quota
@dynamic limits, metricRules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"limits" : [GTLRServiceManagement_QuotaLimit class],
    @"metricRules" : [GTLRServiceManagement_MetricRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_QuotaLimit
//

@implementation GTLRServiceManagement_QuotaLimit
@dynamic defaultLimit, descriptionProperty, displayName, duration, freeTier,
         maxLimit, metric, name, unit, values;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_QuotaLimit_Values
//

@implementation GTLRServiceManagement_QuotaLimit_Values

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Rollout
//

@implementation GTLRServiceManagement_Rollout
@dynamic createdBy, createTime, deleteServiceStrategy, rolloutId, serviceName,
         status, trafficPercentStrategy;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Service
//

@implementation GTLRServiceManagement_Service
@dynamic apis, authentication, backend, billing, configVersion, context,
         control, customError, documentation, endpoints, enums, experimental,
         http, identifier, logging, logs, metrics, monitoredResources,
         monitoring, name, producerProjectId, quota, sourceInfo,
         systemParameters, systemTypes, title, types, usage;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"apis" : [GTLRServiceManagement_Api class],
    @"endpoints" : [GTLRServiceManagement_Endpoint class],
    @"enums" : [GTLRServiceManagement_Enum class],
    @"logs" : [GTLRServiceManagement_LogDescriptor class],
    @"metrics" : [GTLRServiceManagement_MetricDescriptor class],
    @"monitoredResources" : [GTLRServiceManagement_MonitoredResourceDescriptor class],
    @"systemTypes" : [GTLRServiceManagement_Type class],
    @"types" : [GTLRServiceManagement_Type class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_SetIamPolicyRequest
//

@implementation GTLRServiceManagement_SetIamPolicyRequest
@dynamic policy, updateMask;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_SourceContext
//

@implementation GTLRServiceManagement_SourceContext
@dynamic fileName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_SourceInfo
//

@implementation GTLRServiceManagement_SourceInfo
@dynamic sourceFiles;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sourceFiles" : [GTLRServiceManagement_SourceInfo_SourceFiles_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_SourceInfo_SourceFiles_Item
//

@implementation GTLRServiceManagement_SourceInfo_SourceFiles_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Status
//

@implementation GTLRServiceManagement_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRServiceManagement_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Status_Details_Item
//

@implementation GTLRServiceManagement_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Step
//

@implementation GTLRServiceManagement_Step
@dynamic descriptionProperty, status;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_SubmitConfigSourceRequest
//

@implementation GTLRServiceManagement_SubmitConfigSourceRequest
@dynamic configSource, validateOnly;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_SubmitConfigSourceResponse
//

@implementation GTLRServiceManagement_SubmitConfigSourceResponse
@dynamic serviceConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_SystemParameter
//

@implementation GTLRServiceManagement_SystemParameter
@dynamic httpHeader, name, urlQueryParameter;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_SystemParameterRule
//

@implementation GTLRServiceManagement_SystemParameterRule
@dynamic parameters, selector;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"parameters" : [GTLRServiceManagement_SystemParameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_SystemParameters
//

@implementation GTLRServiceManagement_SystemParameters
@dynamic rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceManagement_SystemParameterRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_TestIamPermissionsRequest
//

@implementation GTLRServiceManagement_TestIamPermissionsRequest
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_TestIamPermissionsResponse
//

@implementation GTLRServiceManagement_TestIamPermissionsResponse
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_TrafficPercentStrategy
//

@implementation GTLRServiceManagement_TrafficPercentStrategy
@dynamic percentages;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_TrafficPercentStrategy_Percentages
//

@implementation GTLRServiceManagement_TrafficPercentStrategy_Percentages

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Type
//

@implementation GTLRServiceManagement_Type
@dynamic fields, name, oneofs, options, sourceContext, syntax;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fields" : [GTLRServiceManagement_Field class],
    @"oneofs" : [NSString class],
    @"options" : [GTLRServiceManagement_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_UndeleteServiceResponse
//

@implementation GTLRServiceManagement_UndeleteServiceResponse
@dynamic service;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_Usage
//

@implementation GTLRServiceManagement_Usage
@dynamic producerNotificationChannel, requirements, rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requirements" : [NSString class],
    @"rules" : [GTLRServiceManagement_UsageRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceManagement_UsageRule
//

@implementation GTLRServiceManagement_UsageRule
@dynamic allowUnregisteredCalls, selector, skipServiceControl;
@end
