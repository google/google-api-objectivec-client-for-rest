// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Service Management API (servicemanagement/v1)
// Description:
//   Google Service Management allows service producers to publish their
//   services on Google Cloud Platform so that they can be discovered and used
//   by service consumers.
// Documentation:
//   https://cloud.google.com/service-management/

#import "GTLRServiceManagementQuery.h"

#import "GTLRServiceManagementObjects.h"

// ----------------------------------------------------------------------------
// Constants

// view
NSString * const kGTLRServiceManagementViewBasic = @"BASIC";
NSString * const kGTLRServiceManagementViewFull  = @"FULL";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRServiceManagementQuery

@dynamic fields;

@end

@implementation GTLRServiceManagementQuery_OperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRServiceManagementQuery_OperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRServiceManagement_Operation class];
  query.loggingName = @"servicemanagement.operations.get";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_OperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/operations";
  GTLRServiceManagementQuery_OperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRServiceManagement_ListOperationsResponse class];
  query.loggingName = @"servicemanagement.operations.list";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesConfigsCreate

@dynamic serviceName;

+ (instancetype)queryWithObject:(GTLRServiceManagement_Service *)object
                    serviceName:(NSString *)serviceName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}/configs";
  GTLRServiceManagementQuery_ServicesConfigsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceManagement_Service class];
  query.loggingName = @"servicemanagement.services.configs.create";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesConfigsGet

@dynamic configId, serviceName, view;

+ (instancetype)queryWithServiceName:(NSString *)serviceName
                            configId:(NSString *)configId {
  NSArray *pathParams = @[
    @"configId", @"serviceName"
  ];
  NSString *pathURITemplate = @"v1/services/{serviceName}/configs/{configId}";
  GTLRServiceManagementQuery_ServicesConfigsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.serviceName = serviceName;
  query.configId = configId;
  query.expectedObjectClass = [GTLRServiceManagement_Service class];
  query.loggingName = @"servicemanagement.services.configs.get";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesConfigsList

@dynamic pageSize, pageToken, serviceName;

+ (instancetype)queryWithServiceName:(NSString *)serviceName {
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}/configs";
  GTLRServiceManagementQuery_ServicesConfigsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceManagement_ListServiceConfigsResponse class];
  query.loggingName = @"servicemanagement.services.configs.list";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesConfigsSubmit

@dynamic serviceName;

+ (instancetype)queryWithObject:(GTLRServiceManagement_SubmitConfigSourceRequest *)object
                    serviceName:(NSString *)serviceName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}/configs:submit";
  GTLRServiceManagementQuery_ServicesConfigsSubmit *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceManagement_Operation class];
  query.loggingName = @"servicemanagement.services.configs.submit";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesConsumersGetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRServiceManagement_GetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRServiceManagementQuery_ServicesConsumersGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRServiceManagement_Policy class];
  query.loggingName = @"servicemanagement.services.consumers.getIamPolicy";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesConsumersSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRServiceManagement_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRServiceManagementQuery_ServicesConsumersSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRServiceManagement_Policy class];
  query.loggingName = @"servicemanagement.services.consumers.setIamPolicy";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesConsumersTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRServiceManagement_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRServiceManagementQuery_ServicesConsumersTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRServiceManagement_TestIamPermissionsResponse class];
  query.loggingName = @"servicemanagement.services.consumers.testIamPermissions";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesCreate

+ (instancetype)queryWithObject:(GTLRServiceManagement_ManagedService *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/services";
  GTLRServiceManagementQuery_ServicesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRServiceManagement_Operation class];
  query.loggingName = @"servicemanagement.services.create";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesDelete

@dynamic serviceName;

+ (instancetype)queryWithServiceName:(NSString *)serviceName {
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}";
  GTLRServiceManagementQuery_ServicesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceManagement_Operation class];
  query.loggingName = @"servicemanagement.services.delete";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesDisable

@dynamic serviceName;

+ (instancetype)queryWithObject:(GTLRServiceManagement_DisableServiceRequest *)object
                    serviceName:(NSString *)serviceName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}:disable";
  GTLRServiceManagementQuery_ServicesDisable *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceManagement_Operation class];
  query.loggingName = @"servicemanagement.services.disable";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesEnable

@dynamic serviceName;

+ (instancetype)queryWithObject:(GTLRServiceManagement_EnableServiceRequest *)object
                    serviceName:(NSString *)serviceName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}:enable";
  GTLRServiceManagementQuery_ServicesEnable *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceManagement_Operation class];
  query.loggingName = @"servicemanagement.services.enable";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesGenerateConfigReport

+ (instancetype)queryWithObject:(GTLRServiceManagement_GenerateConfigReportRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/services:generateConfigReport";
  GTLRServiceManagementQuery_ServicesGenerateConfigReport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRServiceManagement_GenerateConfigReportResponse class];
  query.loggingName = @"servicemanagement.services.generateConfigReport";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesGet

@dynamic serviceName;

+ (instancetype)queryWithServiceName:(NSString *)serviceName {
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}";
  GTLRServiceManagementQuery_ServicesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceManagement_ManagedService class];
  query.loggingName = @"servicemanagement.services.get";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesGetConfig

@dynamic configId, serviceName, view;

+ (instancetype)queryWithServiceName:(NSString *)serviceName {
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}/config";
  GTLRServiceManagementQuery_ServicesGetConfig *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceManagement_Service class];
  query.loggingName = @"servicemanagement.services.getConfig";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesGetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRServiceManagement_GetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRServiceManagementQuery_ServicesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRServiceManagement_Policy class];
  query.loggingName = @"servicemanagement.services.getIamPolicy";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesList

@dynamic consumerId, pageSize, pageToken, producerProjectId;

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/services";
  GTLRServiceManagementQuery_ServicesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRServiceManagement_ListServicesResponse class];
  query.loggingName = @"servicemanagement.services.list";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesRolloutsCreate

@dynamic serviceName;

+ (instancetype)queryWithObject:(GTLRServiceManagement_Rollout *)object
                    serviceName:(NSString *)serviceName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}/rollouts";
  GTLRServiceManagementQuery_ServicesRolloutsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceManagement_Operation class];
  query.loggingName = @"servicemanagement.services.rollouts.create";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesRolloutsGet

@dynamic rolloutId, serviceName;

+ (instancetype)queryWithServiceName:(NSString *)serviceName
                           rolloutId:(NSString *)rolloutId {
  NSArray *pathParams = @[
    @"rolloutId", @"serviceName"
  ];
  NSString *pathURITemplate = @"v1/services/{serviceName}/rollouts/{rolloutId}";
  GTLRServiceManagementQuery_ServicesRolloutsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.serviceName = serviceName;
  query.rolloutId = rolloutId;
  query.expectedObjectClass = [GTLRServiceManagement_Rollout class];
  query.loggingName = @"servicemanagement.services.rollouts.get";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesRolloutsList

@dynamic filter, pageSize, pageToken, serviceName;

+ (instancetype)queryWithServiceName:(NSString *)serviceName {
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}/rollouts";
  GTLRServiceManagementQuery_ServicesRolloutsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceManagement_ListServiceRolloutsResponse class];
  query.loggingName = @"servicemanagement.services.rollouts.list";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRServiceManagement_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRServiceManagementQuery_ServicesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRServiceManagement_Policy class];
  query.loggingName = @"servicemanagement.services.setIamPolicy";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRServiceManagement_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRServiceManagementQuery_ServicesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRServiceManagement_TestIamPermissionsResponse class];
  query.loggingName = @"servicemanagement.services.testIamPermissions";
  return query;
}

@end

@implementation GTLRServiceManagementQuery_ServicesUndelete

@dynamic serviceName;

+ (instancetype)queryWithServiceName:(NSString *)serviceName {
  NSArray *pathParams = @[ @"serviceName" ];
  NSString *pathURITemplate = @"v1/services/{serviceName}:undelete";
  GTLRServiceManagementQuery_ServicesUndelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.serviceName = serviceName;
  query.expectedObjectClass = [GTLRServiceManagement_Operation class];
  query.loggingName = @"servicemanagement.services.undelete";
  return query;
}

@end
