// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Key Management Service (KMS) API (cloudkms/v1)
// Description:
//   Manages keys and performs cryptographic operations in a central cloud
//   service, for direct use by other cloud resources and applications.
// Documentation:
//   https://cloud.google.com/kms/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudKMS_AuditConfig;
@class GTLRCloudKMS_AuditLogConfig;
@class GTLRCloudKMS_Binding;
@class GTLRCloudKMS_CertificateChains;
@class GTLRCloudKMS_CryptoKey;
@class GTLRCloudKMS_CryptoKey_Labels;
@class GTLRCloudKMS_CryptoKeyVersion;
@class GTLRCloudKMS_CryptoKeyVersionTemplate;
@class GTLRCloudKMS_Digest;
@class GTLRCloudKMS_Expr;
@class GTLRCloudKMS_ExternalProtectionLevelOptions;
@class GTLRCloudKMS_ImportJob;
@class GTLRCloudKMS_KeyOperationAttestation;
@class GTLRCloudKMS_KeyRing;
@class GTLRCloudKMS_Location;
@class GTLRCloudKMS_Location_Labels;
@class GTLRCloudKMS_Location_Metadata;
@class GTLRCloudKMS_Policy;
@class GTLRCloudKMS_WrappingPublicKey;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudKMS_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudKMS_CryptoKey.purpose

/**
 *  CryptoKeys with this purpose may be used with AsymmetricDecrypt and
 *  GetPublicKey.
 *
 *  Value: "ASYMMETRIC_DECRYPT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKey_Purpose_AsymmetricDecrypt;
/**
 *  CryptoKeys with this purpose may be used with AsymmetricSign and
 *  GetPublicKey.
 *
 *  Value: "ASYMMETRIC_SIGN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKey_Purpose_AsymmetricSign;
/**
 *  Not specified.
 *
 *  Value: "CRYPTO_KEY_PURPOSE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKey_Purpose_CryptoKeyPurposeUnspecified;
/**
 *  CryptoKeys with this purpose may be used with Encrypt and Decrypt.
 *
 *  Value: "ENCRYPT_DECRYPT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKey_Purpose_EncryptDecrypt;

// ----------------------------------------------------------------------------
// GTLRCloudKMS_CryptoKeyVersion.algorithm

/**
 *  Not specified.
 *
 *  Value: "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_CryptoKeyVersionAlgorithmUnspecified;
/**
 *  ECDSA on the NIST P-256 curve with a SHA256 digest.
 *
 *  Value: "EC_SIGN_P256_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_EcSignP256Sha256;
/**
 *  ECDSA on the NIST P-384 curve with a SHA384 digest.
 *
 *  Value: "EC_SIGN_P384_SHA384"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_EcSignP384Sha384;
/**
 *  Algorithm representing symmetric encryption by an external key manager.
 *
 *  Value: "EXTERNAL_SYMMETRIC_ENCRYPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_ExternalSymmetricEncryption;
/**
 *  Creates symmetric encryption keys.
 *
 *  Value: "GOOGLE_SYMMETRIC_ENCRYPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_GoogleSymmetricEncryption;
/**
 *  RSAES-OAEP 2048 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaDecryptOaep2048Sha256;
/**
 *  RSAES-OAEP 3072 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaDecryptOaep3072Sha256;
/**
 *  RSAES-OAEP 4096 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaDecryptOaep4096Sha256;
/**
 *  RSAES-OAEP 4096 bit key with a SHA512 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaDecryptOaep4096Sha512;
/**
 *  RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaSignPkcs12048Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaSignPkcs13072Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaSignPkcs14096Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaSignPkcs14096Sha512;
/**
 *  RSASSA-PSS 2048 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaSignPss2048Sha256;
/**
 *  RSASSA-PSS 3072 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaSignPss3072Sha256;
/**
 *  RSASSA-PSS 4096 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaSignPss4096Sha256;
/**
 *  RSASSA-PSS 4096 bit key with a SHA512 digest.
 *
 *  Value: "RSA_SIGN_PSS_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaSignPss4096Sha512;

// ----------------------------------------------------------------------------
// GTLRCloudKMS_CryptoKeyVersion.protectionLevel

/**
 *  Crypto operations are performed by an external key manager.
 *
 *  Value: "EXTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_ProtectionLevel_External;
/**
 *  Crypto operations are performed in a Hardware Security Module.
 *
 *  Value: "HSM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_ProtectionLevel_Hsm;
/**
 *  Not specified.
 *
 *  Value: "PROTECTION_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_ProtectionLevel_ProtectionLevelUnspecified;
/**
 *  Crypto operations are performed in software.
 *
 *  Value: "SOFTWARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_ProtectionLevel_Software;

// ----------------------------------------------------------------------------
// GTLRCloudKMS_CryptoKeyVersion.state

/**
 *  Not specified.
 *
 *  Value: "CRYPTO_KEY_VERSION_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_State_CryptoKeyVersionStateUnspecified;
/**
 *  This version is destroyed, and the key material is no longer stored. A
 *  version may not leave this state once entered.
 *
 *  Value: "DESTROYED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_State_Destroyed;
/**
 *  This version is scheduled for destruction, and will be destroyed soon. Call
 *  RestoreCryptoKeyVersion to put it back into the DISABLED state.
 *
 *  Value: "DESTROY_SCHEDULED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_State_DestroyScheduled;
/**
 *  This version may not be used, but the key material is still available, and
 *  the version can be placed back into the ENABLED state.
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_State_Disabled;
/**
 *  This version may be used for cryptographic operations.
 *
 *  Value: "ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_State_Enabled;
/**
 *  This version was not imported successfully. It may not be used, enabled,
 *  disabled, or destroyed. The submitted key material has been discarded.
 *  Additional details can be found in CryptoKeyVersion.import_failure_reason.
 *
 *  Value: "IMPORT_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_State_ImportFailed;
/**
 *  This version is still being generated. It may not be used, enabled,
 *  disabled, or destroyed yet. Cloud KMS will automatically mark this version
 *  ENABLED as soon as the version is ready.
 *
 *  Value: "PENDING_GENERATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_State_PendingGeneration;
/**
 *  This version is still being imported. It may not be used, enabled, disabled,
 *  or destroyed yet. Cloud KMS will automatically mark this version ENABLED as
 *  soon as the version is ready.
 *
 *  Value: "PENDING_IMPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersion_State_PendingImport;

// ----------------------------------------------------------------------------
// GTLRCloudKMS_CryptoKeyVersionTemplate.algorithm

/**
 *  Not specified.
 *
 *  Value: "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_CryptoKeyVersionAlgorithmUnspecified;
/**
 *  ECDSA on the NIST P-256 curve with a SHA256 digest.
 *
 *  Value: "EC_SIGN_P256_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_EcSignP256Sha256;
/**
 *  ECDSA on the NIST P-384 curve with a SHA384 digest.
 *
 *  Value: "EC_SIGN_P384_SHA384"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_EcSignP384Sha384;
/**
 *  Algorithm representing symmetric encryption by an external key manager.
 *
 *  Value: "EXTERNAL_SYMMETRIC_ENCRYPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_ExternalSymmetricEncryption;
/**
 *  Creates symmetric encryption keys.
 *
 *  Value: "GOOGLE_SYMMETRIC_ENCRYPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_GoogleSymmetricEncryption;
/**
 *  RSAES-OAEP 2048 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep2048Sha256;
/**
 *  RSAES-OAEP 3072 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep3072Sha256;
/**
 *  RSAES-OAEP 4096 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep4096Sha256;
/**
 *  RSAES-OAEP 4096 bit key with a SHA512 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep4096Sha512;
/**
 *  RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaSignPkcs12048Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaSignPkcs13072Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaSignPkcs14096Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaSignPkcs14096Sha512;
/**
 *  RSASSA-PSS 2048 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaSignPss2048Sha256;
/**
 *  RSASSA-PSS 3072 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaSignPss3072Sha256;
/**
 *  RSASSA-PSS 4096 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaSignPss4096Sha256;
/**
 *  RSASSA-PSS 4096 bit key with a SHA512 digest.
 *
 *  Value: "RSA_SIGN_PSS_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaSignPss4096Sha512;

// ----------------------------------------------------------------------------
// GTLRCloudKMS_CryptoKeyVersionTemplate.protectionLevel

/**
 *  Crypto operations are performed by an external key manager.
 *
 *  Value: "EXTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_ProtectionLevel_External;
/**
 *  Crypto operations are performed in a Hardware Security Module.
 *
 *  Value: "HSM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_ProtectionLevel_Hsm;
/**
 *  Not specified.
 *
 *  Value: "PROTECTION_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_ProtectionLevel_ProtectionLevelUnspecified;
/**
 *  Crypto operations are performed in software.
 *
 *  Value: "SOFTWARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_CryptoKeyVersionTemplate_ProtectionLevel_Software;

// ----------------------------------------------------------------------------
// GTLRCloudKMS_ImportCryptoKeyVersionRequest.algorithm

/**
 *  Not specified.
 *
 *  Value: "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_CryptoKeyVersionAlgorithmUnspecified;
/**
 *  ECDSA on the NIST P-256 curve with a SHA256 digest.
 *
 *  Value: "EC_SIGN_P256_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_EcSignP256Sha256;
/**
 *  ECDSA on the NIST P-384 curve with a SHA384 digest.
 *
 *  Value: "EC_SIGN_P384_SHA384"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_EcSignP384Sha384;
/**
 *  Algorithm representing symmetric encryption by an external key manager.
 *
 *  Value: "EXTERNAL_SYMMETRIC_ENCRYPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_ExternalSymmetricEncryption;
/**
 *  Creates symmetric encryption keys.
 *
 *  Value: "GOOGLE_SYMMETRIC_ENCRYPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_GoogleSymmetricEncryption;
/**
 *  RSAES-OAEP 2048 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaDecryptOaep2048Sha256;
/**
 *  RSAES-OAEP 3072 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaDecryptOaep3072Sha256;
/**
 *  RSAES-OAEP 4096 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaDecryptOaep4096Sha256;
/**
 *  RSAES-OAEP 4096 bit key with a SHA512 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaDecryptOaep4096Sha512;
/**
 *  RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaSignPkcs12048Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaSignPkcs13072Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaSignPkcs14096Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaSignPkcs14096Sha512;
/**
 *  RSASSA-PSS 2048 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaSignPss2048Sha256;
/**
 *  RSASSA-PSS 3072 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaSignPss3072Sha256;
/**
 *  RSASSA-PSS 4096 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaSignPss4096Sha256;
/**
 *  RSASSA-PSS 4096 bit key with a SHA512 digest.
 *
 *  Value: "RSA_SIGN_PSS_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaSignPss4096Sha512;

// ----------------------------------------------------------------------------
// GTLRCloudKMS_ImportJob.importMethod

/**
 *  Not specified.
 *
 *  Value: "IMPORT_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportJob_ImportMethod_ImportMethodUnspecified;
/**
 *  This ImportMethod represents the CKM_RSA_AES_KEY_WRAP key wrapping scheme
 *  defined in the PKCS #11 standard. In summary, this involves wrapping the raw
 *  key with an ephemeral AES key, and wrapping the ephemeral AES key with a
 *  3072 bit RSA key. For more details, see [RSA AES key wrap
 *  mechanism](http://docs.oasis-open.org/pkcs11/pkcs11-curr/v2.40/cos01/pkcs11-curr-v2.40-cos01.html#_Toc408226908).
 *
 *  Value: "RSA_OAEP_3072_SHA1_AES_256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportJob_ImportMethod_RsaOaep3072Sha1Aes256;
/**
 *  This ImportMethod represents the CKM_RSA_AES_KEY_WRAP key wrapping scheme
 *  defined in the PKCS #11 standard. In summary, this involves wrapping the raw
 *  key with an ephemeral AES key, and wrapping the ephemeral AES key with a
 *  4096 bit RSA key. For more details, see [RSA AES key wrap
 *  mechanism](http://docs.oasis-open.org/pkcs11/pkcs11-curr/v2.40/cos01/pkcs11-curr-v2.40-cos01.html#_Toc408226908).
 *
 *  Value: "RSA_OAEP_4096_SHA1_AES_256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportJob_ImportMethod_RsaOaep4096Sha1Aes256;

// ----------------------------------------------------------------------------
// GTLRCloudKMS_ImportJob.protectionLevel

/**
 *  Crypto operations are performed by an external key manager.
 *
 *  Value: "EXTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportJob_ProtectionLevel_External;
/**
 *  Crypto operations are performed in a Hardware Security Module.
 *
 *  Value: "HSM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportJob_ProtectionLevel_Hsm;
/**
 *  Not specified.
 *
 *  Value: "PROTECTION_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportJob_ProtectionLevel_ProtectionLevelUnspecified;
/**
 *  Crypto operations are performed in software.
 *
 *  Value: "SOFTWARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportJob_ProtectionLevel_Software;

// ----------------------------------------------------------------------------
// GTLRCloudKMS_ImportJob.state

/**
 *  This job may be used in CreateCryptoKey and CreateCryptoKeyVersion requests.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportJob_State_Active;
/**
 *  This job can no longer be used and may not leave this state once entered.
 *
 *  Value: "EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportJob_State_Expired;
/**
 *  Not specified.
 *
 *  Value: "IMPORT_JOB_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportJob_State_ImportJobStateUnspecified;
/**
 *  The wrapping key for this job is still being generated. It may not be used.
 *  Cloud KMS will automatically mark this job as ACTIVE as soon as the wrapping
 *  key is generated.
 *
 *  Value: "PENDING_GENERATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_ImportJob_State_PendingGeneration;

// ----------------------------------------------------------------------------
// GTLRCloudKMS_KeyOperationAttestation.format

/**
 *  Not specified.
 *
 *  Value: "ATTESTATION_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_KeyOperationAttestation_Format_AttestationFormatUnspecified;
/**
 *  Cavium HSM attestation compressed with gzip. Note that this format is
 *  defined by Cavium and subject to change at any time.
 *
 *  Value: "CAVIUM_V1_COMPRESSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_KeyOperationAttestation_Format_CaviumV1Compressed;
/**
 *  Cavium HSM attestation V2 compressed with gzip. This is a new format
 *  introduced in Cavium's version 3.2-08.
 *
 *  Value: "CAVIUM_V2_COMPRESSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_KeyOperationAttestation_Format_CaviumV2Compressed;

// ----------------------------------------------------------------------------
// GTLRCloudKMS_PublicKey.algorithm

/**
 *  Not specified.
 *
 *  Value: "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_CryptoKeyVersionAlgorithmUnspecified;
/**
 *  ECDSA on the NIST P-256 curve with a SHA256 digest.
 *
 *  Value: "EC_SIGN_P256_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_EcSignP256Sha256;
/**
 *  ECDSA on the NIST P-384 curve with a SHA384 digest.
 *
 *  Value: "EC_SIGN_P384_SHA384"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_EcSignP384Sha384;
/**
 *  Algorithm representing symmetric encryption by an external key manager.
 *
 *  Value: "EXTERNAL_SYMMETRIC_ENCRYPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_ExternalSymmetricEncryption;
/**
 *  Creates symmetric encryption keys.
 *
 *  Value: "GOOGLE_SYMMETRIC_ENCRYPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_GoogleSymmetricEncryption;
/**
 *  RSAES-OAEP 2048 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_RsaDecryptOaep2048Sha256;
/**
 *  RSAES-OAEP 3072 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_RsaDecryptOaep3072Sha256;
/**
 *  RSAES-OAEP 4096 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_RsaDecryptOaep4096Sha256;
/**
 *  RSAES-OAEP 4096 bit key with a SHA512 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_RsaDecryptOaep4096Sha512;
/**
 *  RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_RsaSignPkcs12048Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_RsaSignPkcs13072Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_RsaSignPkcs14096Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_RsaSignPkcs14096Sha512;
/**
 *  RSASSA-PSS 2048 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_RsaSignPss2048Sha256;
/**
 *  RSASSA-PSS 3072 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_RsaSignPss3072Sha256;
/**
 *  RSASSA-PSS 4096 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_RsaSignPss4096Sha256;
/**
 *  RSASSA-PSS 4096 bit key with a SHA512 digest.
 *
 *  Value: "RSA_SIGN_PSS_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudKMS_PublicKey_Algorithm_RsaSignPss4096Sha512;

/**
 *  Request message for KeyManagementService.AsymmetricDecrypt.
 */
@interface GTLRCloudKMS_AsymmetricDecryptRequest : GTLRObject

/**
 *  Required. The data encrypted with the named CryptoKeyVersion's public key
 *  using OAEP.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ciphertext;

/**
 *  Optional. An optional CRC32C checksum of the
 *  AsymmetricDecryptRequest.ciphertext. If specified, KeyManagementService will
 *  verify the integrity of the received AsymmetricDecryptRequest.ciphertext
 *  using this checksum. KeyManagementService will report an error if the
 *  checksum verification fails. If you receive a checksum error, your client
 *  should verify that CRC32C(AsymmetricDecryptRequest.ciphertext) is equal to
 *  AsymmetricDecryptRequest.ciphertext_crc32c, and if so, perform a limited
 *  number of retries. A persistent mismatch may indicate an issue in your
 *  computation of the CRC32C checksum. Note: This field is defined as int64 for
 *  reasons of compatibility across different languages. However, it is a
 *  non-negative integer, which will never exceed 2^32-1, and can be safely
 *  downconverted to uint32 in languages that support this type. NOTE: This
 *  field is in Beta.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ciphertextCrc32c;

@end


/**
 *  Response message for KeyManagementService.AsymmetricDecrypt.
 */
@interface GTLRCloudKMS_AsymmetricDecryptResponse : GTLRObject

/**
 *  The decrypted data originally encrypted with the matching public key.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *plaintext;

/**
 *  Integrity verification field. A CRC32C checksum of the returned
 *  AsymmetricDecryptResponse.plaintext. An integrity check of
 *  AsymmetricDecryptResponse.plaintext can be performed by computing the CRC32C
 *  checksum of AsymmetricDecryptResponse.plaintext and comparing your results
 *  to this field. Discard the response in case of non-matching checksum values,
 *  and perform a limited number of retries. A persistent mismatch may indicate
 *  an issue in your computation of the CRC32C checksum. Note: This field is
 *  defined as int64 for reasons of compatibility across different languages.
 *  However, it is a non-negative integer, which will never exceed 2^32-1, and
 *  can be safely downconverted to uint32 in languages that support this type.
 *  NOTE: This field is in Beta.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *plaintextCrc32c;

/**
 *  Integrity verification field. A flag indicating whether
 *  AsymmetricDecryptRequest.ciphertext_crc32c was received by
 *  KeyManagementService and used for the integrity verification of the
 *  ciphertext. A false value of this field indicates either that
 *  AsymmetricDecryptRequest.ciphertext_crc32c was left unset or that it was not
 *  delivered to KeyManagementService. If you've set
 *  AsymmetricDecryptRequest.ciphertext_crc32c but this field is still false,
 *  discard the response and perform a limited number of retries. NOTE: This
 *  field is in Beta.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verifiedCiphertextCrc32c;

@end


/**
 *  Request message for KeyManagementService.AsymmetricSign.
 */
@interface GTLRCloudKMS_AsymmetricSignRequest : GTLRObject

/**
 *  Optional. The digest of the data to sign. The digest must be produced with
 *  the same digest algorithm as specified by the key version's algorithm.
 */
@property(nonatomic, strong, nullable) GTLRCloudKMS_Digest *digest;

/**
 *  Optional. An optional CRC32C checksum of the AsymmetricSignRequest.digest.
 *  If specified, KeyManagementService will verify the integrity of the received
 *  AsymmetricSignRequest.digest using this checksum. KeyManagementService will
 *  report an error if the checksum verification fails. If you receive a
 *  checksum error, your client should verify that
 *  CRC32C(AsymmetricSignRequest.digest) is equal to
 *  AsymmetricSignRequest.digest_crc32c, and if so, perform a limited number of
 *  retries. A persistent mismatch may indicate an issue in your computation of
 *  the CRC32C checksum. Note: This field is defined as int64 for reasons of
 *  compatibility across different languages. However, it is a non-negative
 *  integer, which will never exceed 2^32-1, and can be safely downconverted to
 *  uint32 in languages that support this type. NOTE: This field is in Beta.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *digestCrc32c;

@end


/**
 *  Response message for KeyManagementService.AsymmetricSign.
 */
@interface GTLRCloudKMS_AsymmetricSignResponse : GTLRObject

/**
 *  The resource name of the CryptoKeyVersion used for signing. Check this field
 *  to verify that the intended resource was used for signing. NOTE: This field
 *  is in Beta.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The created signature.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *signature;

/**
 *  Integrity verification field. A CRC32C checksum of the returned
 *  AsymmetricSignResponse.signature. An integrity check of
 *  AsymmetricSignResponse.signature can be performed by computing the CRC32C
 *  checksum of AsymmetricSignResponse.signature and comparing your results to
 *  this field. Discard the response in case of non-matching checksum values,
 *  and perform a limited number of retries. A persistent mismatch may indicate
 *  an issue in your computation of the CRC32C checksum. Note: This field is
 *  defined as int64 for reasons of compatibility across different languages.
 *  However, it is a non-negative integer, which will never exceed 2^32-1, and
 *  can be safely downconverted to uint32 in languages that support this type.
 *  NOTE: This field is in Beta.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *signatureCrc32c;

/**
 *  Integrity verification field. A flag indicating whether
 *  AsymmetricSignRequest.digest_crc32c was received by KeyManagementService and
 *  used for the integrity verification of the digest. A false value of this
 *  field indicates either that AsymmetricSignRequest.digest_crc32c was left
 *  unset or that it was not delivered to KeyManagementService. If you've set
 *  AsymmetricSignRequest.digest_crc32c but this field is still false, discard
 *  the response and perform a limited number of retries. NOTE: This field is in
 *  Beta.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verifiedDigestCrc32c;

@end


/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts jose\@example.com from DATA_READ logging, and
 *  aliya\@example.com from DATA_WRITE logging.
 */
@interface GTLRCloudKMS_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudKMS_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRCloudKMS_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudKMS_AuditLogConfig_LogType_AdminRead Admin reads.
 *        Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRCloudKMS_AuditLogConfig_LogType_DataRead Data reads. Example:
 *        CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRCloudKMS_AuditLogConfig_LogType_DataWrite Data writes.
 *        Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRCloudKMS_AuditLogConfig_LogType_LogTypeUnspecified Default
 *        case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members` with a `role`.
 */
@interface GTLRCloudKMS_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the members in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRCloudKMS_Expr *condition;

/**
 *  Specifies the identities requesting access for a Cloud Platform resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. *
 *  `user:{emailid}`: An email address that represents a specific Google
 *  account. For example, `alice\@example.com` . * `serviceAccount:{emailid}`:
 *  An email address that represents a service account. For example,
 *  `my-other-app\@appspot.gserviceaccount.com`. * `group:{emailid}`: An email
 *  address that represents a Google group. For example, `admins\@example.com`.
 *  * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. * `domain:{domain}`: The G Suite domain (primary) that
 *  represents all the users of that domain. For example, `google.com` or
 *  `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to `members`. For example, `roles/viewer`,
 *  `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  Certificate chains needed to verify the attestation. Certificates in chains
 *  are PEM-encoded and are ordered based on
 *  https://tools.ietf.org/html/rfc5246#section-7.4.2.
 */
@interface GTLRCloudKMS_CertificateChains : GTLRObject

/** Cavium certificate chain corresponding to the attestation. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *caviumCerts;

/** Google card certificate chain corresponding to the attestation. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *googleCardCerts;

/** Google partition certificate chain corresponding to the attestation. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *googlePartitionCerts;

@end


/**
 *  A CryptoKey represents a logical key that can be used for cryptographic
 *  operations. A CryptoKey is made up of zero or more versions, which represent
 *  the actual key material used in cryptographic operations.
 */
@interface GTLRCloudKMS_CryptoKey : GTLRObject

/** Output only. The time at which this CryptoKey was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Labels with user-defined metadata. For more information, see [Labeling
 *  Keys](https://cloud.google.com/kms/docs/labeling-keys).
 */
@property(nonatomic, strong, nullable) GTLRCloudKMS_CryptoKey_Labels *labels;

/**
 *  Output only. The resource name for this CryptoKey in the format `projects/ *
 *  /locations/ * /keyRings/ * /cryptoKeys/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  At next_rotation_time, the Key Management Service will automatically: 1.
 *  Create a new version of this CryptoKey. 2. Mark the new version as primary.
 *  Key rotations performed manually via CreateCryptoKeyVersion and
 *  UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with
 *  purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this
 *  field must be omitted.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *nextRotationTime;

/**
 *  Output only. A copy of the "primary" CryptoKeyVersion that will be used by
 *  Encrypt when this CryptoKey is given in EncryptRequest.name. The CryptoKey's
 *  primary version can be updated via UpdateCryptoKeyPrimaryVersion. Keys with
 *  purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will
 *  be omitted.
 */
@property(nonatomic, strong, nullable) GTLRCloudKMS_CryptoKeyVersion *primary;

/**
 *  Immutable. The immutable purpose of this CryptoKey.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudKMS_CryptoKey_Purpose_AsymmetricDecrypt CryptoKeys with
 *        this purpose may be used with AsymmetricDecrypt and GetPublicKey.
 *        (Value: "ASYMMETRIC_DECRYPT")
 *    @arg @c kGTLRCloudKMS_CryptoKey_Purpose_AsymmetricSign CryptoKeys with
 *        this purpose may be used with AsymmetricSign and GetPublicKey. (Value:
 *        "ASYMMETRIC_SIGN")
 *    @arg @c kGTLRCloudKMS_CryptoKey_Purpose_CryptoKeyPurposeUnspecified Not
 *        specified. (Value: "CRYPTO_KEY_PURPOSE_UNSPECIFIED")
 *    @arg @c kGTLRCloudKMS_CryptoKey_Purpose_EncryptDecrypt CryptoKeys with
 *        this purpose may be used with Encrypt and Decrypt. (Value:
 *        "ENCRYPT_DECRYPT")
 */
@property(nonatomic, copy, nullable) NSString *purpose;

/**
 *  next_rotation_time will be advanced by this period when the service
 *  automatically rotates a key. Must be at least 24 hours and at most 876,000
 *  hours. If rotation_period is set, next_rotation_time must also be set. Keys
 *  with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys,
 *  this field must be omitted.
 */
@property(nonatomic, strong, nullable) GTLRDuration *rotationPeriod;

/**
 *  A template describing settings for new CryptoKeyVersion instances. The
 *  properties of new CryptoKeyVersion instances created by either
 *  CreateCryptoKeyVersion or auto-rotation are controlled by this template.
 */
@property(nonatomic, strong, nullable) GTLRCloudKMS_CryptoKeyVersionTemplate *versionTemplate;

@end


/**
 *  Labels with user-defined metadata. For more information, see [Labeling
 *  Keys](https://cloud.google.com/kms/docs/labeling-keys).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudKMS_CryptoKey_Labels : GTLRObject
@end


/**
 *  A CryptoKeyVersion represents an individual cryptographic key, and the
 *  associated key material. An ENABLED version can be used for cryptographic
 *  operations. For security reasons, the raw cryptographic key material
 *  represented by a CryptoKeyVersion can never be viewed or exported. It can
 *  only be used to encrypt, decrypt, or sign data when an authorized user or
 *  application invokes Cloud KMS.
 */
@interface GTLRCloudKMS_CryptoKeyVersion : GTLRObject

/**
 *  Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion
 *  supports.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_CryptoKeyVersionAlgorithmUnspecified
 *        Not specified. (Value: "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_EcSignP256Sha256 ECDSA on
 *        the NIST P-256 curve with a SHA256 digest. (Value:
 *        "EC_SIGN_P256_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_EcSignP384Sha384 ECDSA on
 *        the NIST P-384 curve with a SHA384 digest. (Value:
 *        "EC_SIGN_P384_SHA384")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_ExternalSymmetricEncryption
 *        Algorithm representing symmetric encryption by an external key
 *        manager. (Value: "EXTERNAL_SYMMETRIC_ENCRYPTION")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_GoogleSymmetricEncryption
 *        Creates symmetric encryption keys. (Value:
 *        "GOOGLE_SYMMETRIC_ENCRYPTION")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaDecryptOaep2048Sha256
 *        RSAES-OAEP 2048 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_2048_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaDecryptOaep3072Sha256
 *        RSAES-OAEP 3072 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_3072_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaDecryptOaep4096Sha256
 *        RSAES-OAEP 4096 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_4096_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaDecryptOaep4096Sha512
 *        RSAES-OAEP 4096 bit key with a SHA512 digest. (Value:
 *        "RSA_DECRYPT_OAEP_4096_SHA512")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaSignPkcs12048Sha256
 *        RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_2048_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaSignPkcs13072Sha256
 *        RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_3072_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaSignPkcs14096Sha256
 *        RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_4096_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaSignPkcs14096Sha512
 *        RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest. (Value:
 *        "RSA_SIGN_PKCS1_4096_SHA512")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaSignPss2048Sha256
 *        RSASSA-PSS 2048 bit key with a SHA256 digest. (Value:
 *        "RSA_SIGN_PSS_2048_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaSignPss3072Sha256
 *        RSASSA-PSS 3072 bit key with a SHA256 digest. (Value:
 *        "RSA_SIGN_PSS_3072_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaSignPss4096Sha256
 *        RSASSA-PSS 4096 bit key with a SHA256 digest. (Value:
 *        "RSA_SIGN_PSS_4096_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_Algorithm_RsaSignPss4096Sha512
 *        RSASSA-PSS 4096 bit key with a SHA512 digest. (Value:
 *        "RSA_SIGN_PSS_4096_SHA512")
 */
@property(nonatomic, copy, nullable) NSString *algorithm;

/**
 *  Output only. Statement that was generated and signed by the HSM at key
 *  creation time. Use this statement to verify attributes of the key as stored
 *  on the HSM, independently of Google. Only provided for key versions with
 *  protection_level HSM.
 */
@property(nonatomic, strong, nullable) GTLRCloudKMS_KeyOperationAttestation *attestation;

/** Output only. The time at which this CryptoKeyVersion was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The time this CryptoKeyVersion's key material was destroyed.
 *  Only present if state is DESTROYED.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *destroyEventTime;

/**
 *  Output only. The time this CryptoKeyVersion's key material is scheduled for
 *  destruction. Only present if state is DESTROY_SCHEDULED.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *destroyTime;

/**
 *  ExternalProtectionLevelOptions stores a group of additional fields for
 *  configuring a CryptoKeyVersion that are specific to the EXTERNAL protection
 *  level.
 */
@property(nonatomic, strong, nullable) GTLRCloudKMS_ExternalProtectionLevelOptions *externalProtectionLevelOptions;

/**
 *  Output only. The time this CryptoKeyVersion's key material was generated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *generateTime;

/**
 *  Output only. The root cause of an import failure. Only present if state is
 *  IMPORT_FAILED.
 */
@property(nonatomic, copy, nullable) NSString *importFailureReason;

/**
 *  Output only. The name of the ImportJob used to import this CryptoKeyVersion.
 *  Only present if the underlying key material was imported.
 */
@property(nonatomic, copy, nullable) NSString *importJob;

/**
 *  Output only. The time at which this CryptoKeyVersion's key material was
 *  imported.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *importTime;

/**
 *  Output only. The resource name for this CryptoKeyVersion in the format
 *  `projects/ * /locations/ * /keyRings/ * /cryptoKeys/ * /cryptoKeyVersions/
 *  *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The ProtectionLevel describing how crypto operations are
 *  performed with this CryptoKeyVersion.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_ProtectionLevel_External Crypto
 *        operations are performed by an external key manager. (Value:
 *        "EXTERNAL")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_ProtectionLevel_Hsm Crypto
 *        operations are performed in a Hardware Security Module. (Value: "HSM")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_ProtectionLevel_ProtectionLevelUnspecified
 *        Not specified. (Value: "PROTECTION_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_ProtectionLevel_Software Crypto
 *        operations are performed in software. (Value: "SOFTWARE")
 */
@property(nonatomic, copy, nullable) NSString *protectionLevel;

/**
 *  The current state of the CryptoKeyVersion.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_State_CryptoKeyVersionStateUnspecified
 *        Not specified. (Value: "CRYPTO_KEY_VERSION_STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_State_Destroyed This version is
 *        destroyed, and the key material is no longer stored. A version may not
 *        leave this state once entered. (Value: "DESTROYED")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_State_DestroyScheduled This version
 *        is scheduled for destruction, and will be destroyed soon. Call
 *        RestoreCryptoKeyVersion to put it back into the DISABLED state.
 *        (Value: "DESTROY_SCHEDULED")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_State_Disabled This version may not
 *        be used, but the key material is still available, and the version can
 *        be placed back into the ENABLED state. (Value: "DISABLED")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_State_Enabled This version may be
 *        used for cryptographic operations. (Value: "ENABLED")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_State_ImportFailed This version was
 *        not imported successfully. It may not be used, enabled, disabled, or
 *        destroyed. The submitted key material has been discarded. Additional
 *        details can be found in CryptoKeyVersion.import_failure_reason.
 *        (Value: "IMPORT_FAILED")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_State_PendingGeneration This
 *        version is still being generated. It may not be used, enabled,
 *        disabled, or destroyed yet. Cloud KMS will automatically mark this
 *        version ENABLED as soon as the version is ready. (Value:
 *        "PENDING_GENERATION")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersion_State_PendingImport This version is
 *        still being imported. It may not be used, enabled, disabled, or
 *        destroyed yet. Cloud KMS will automatically mark this version ENABLED
 *        as soon as the version is ready. (Value: "PENDING_IMPORT")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  A CryptoKeyVersionTemplate specifies the properties to use when creating a
 *  new CryptoKeyVersion, either manually with CreateCryptoKeyVersion or
 *  automatically as a result of auto-rotation.
 */
@interface GTLRCloudKMS_CryptoKeyVersionTemplate : GTLRObject

/**
 *  Required. Algorithm to use when creating a CryptoKeyVersion based on this
 *  template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is
 *  implied if both this field is omitted and CryptoKey.purpose is
 *  ENCRYPT_DECRYPT.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_CryptoKeyVersionAlgorithmUnspecified
 *        Not specified. (Value: "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_EcSignP256Sha256
 *        ECDSA on the NIST P-256 curve with a SHA256 digest. (Value:
 *        "EC_SIGN_P256_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_EcSignP384Sha384
 *        ECDSA on the NIST P-384 curve with a SHA384 digest. (Value:
 *        "EC_SIGN_P384_SHA384")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_ExternalSymmetricEncryption
 *        Algorithm representing symmetric encryption by an external key
 *        manager. (Value: "EXTERNAL_SYMMETRIC_ENCRYPTION")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_GoogleSymmetricEncryption
 *        Creates symmetric encryption keys. (Value:
 *        "GOOGLE_SYMMETRIC_ENCRYPTION")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep2048Sha256
 *        RSAES-OAEP 2048 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_2048_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep3072Sha256
 *        RSAES-OAEP 3072 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_3072_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep4096Sha256
 *        RSAES-OAEP 4096 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_4096_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep4096Sha512
 *        RSAES-OAEP 4096 bit key with a SHA512 digest. (Value:
 *        "RSA_DECRYPT_OAEP_4096_SHA512")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaSignPkcs12048Sha256
 *        RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_2048_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaSignPkcs13072Sha256
 *        RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_3072_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaSignPkcs14096Sha256
 *        RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_4096_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaSignPkcs14096Sha512
 *        RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest. (Value:
 *        "RSA_SIGN_PKCS1_4096_SHA512")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaSignPss2048Sha256
 *        RSASSA-PSS 2048 bit key with a SHA256 digest. (Value:
 *        "RSA_SIGN_PSS_2048_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaSignPss3072Sha256
 *        RSASSA-PSS 3072 bit key with a SHA256 digest. (Value:
 *        "RSA_SIGN_PSS_3072_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaSignPss4096Sha256
 *        RSASSA-PSS 4096 bit key with a SHA256 digest. (Value:
 *        "RSA_SIGN_PSS_4096_SHA256")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_Algorithm_RsaSignPss4096Sha512
 *        RSASSA-PSS 4096 bit key with a SHA512 digest. (Value:
 *        "RSA_SIGN_PSS_4096_SHA512")
 */
@property(nonatomic, copy, nullable) NSString *algorithm;

/**
 *  ProtectionLevel to use when creating a CryptoKeyVersion based on this
 *  template. Immutable. Defaults to SOFTWARE.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_ProtectionLevel_External
 *        Crypto operations are performed by an external key manager. (Value:
 *        "EXTERNAL")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_ProtectionLevel_Hsm Crypto
 *        operations are performed in a Hardware Security Module. (Value: "HSM")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_ProtectionLevel_ProtectionLevelUnspecified
 *        Not specified. (Value: "PROTECTION_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRCloudKMS_CryptoKeyVersionTemplate_ProtectionLevel_Software
 *        Crypto operations are performed in software. (Value: "SOFTWARE")
 */
@property(nonatomic, copy, nullable) NSString *protectionLevel;

@end


/**
 *  Request message for KeyManagementService.Decrypt.
 */
@interface GTLRCloudKMS_DecryptRequest : GTLRObject

/**
 *  Optional. Optional data that must match the data originally supplied in
 *  EncryptRequest.additional_authenticated_data.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *additionalAuthenticatedData;

/**
 *  Optional. An optional CRC32C checksum of the
 *  DecryptRequest.additional_authenticated_data. If specified,
 *  KeyManagementService will verify the integrity of the received
 *  DecryptRequest.additional_authenticated_data using this checksum.
 *  KeyManagementService will report an error if the checksum verification
 *  fails. If you receive a checksum error, your client should verify that
 *  CRC32C(DecryptRequest.additional_authenticated_data) is equal to
 *  DecryptRequest.additional_authenticated_data_crc32c, and if so, perform a
 *  limited number of retries. A persistent mismatch may indicate an issue in
 *  your computation of the CRC32C checksum. Note: This field is defined as
 *  int64 for reasons of compatibility across different languages. However, it
 *  is a non-negative integer, which will never exceed 2^32-1, and can be safely
 *  downconverted to uint32 in languages that support this type. NOTE: This
 *  field is in Beta.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *additionalAuthenticatedDataCrc32c;

/**
 *  Required. The encrypted data originally returned in
 *  EncryptResponse.ciphertext.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ciphertext;

/**
 *  Optional. An optional CRC32C checksum of the DecryptRequest.ciphertext. If
 *  specified, KeyManagementService will verify the integrity of the received
 *  DecryptRequest.ciphertext using this checksum. KeyManagementService will
 *  report an error if the checksum verification fails. If you receive a
 *  checksum error, your client should verify that
 *  CRC32C(DecryptRequest.ciphertext) is equal to
 *  DecryptRequest.ciphertext_crc32c, and if so, perform a limited number of
 *  retries. A persistent mismatch may indicate an issue in your computation of
 *  the CRC32C checksum. Note: This field is defined as int64 for reasons of
 *  compatibility across different languages. However, it is a non-negative
 *  integer, which will never exceed 2^32-1, and can be safely downconverted to
 *  uint32 in languages that support this type. NOTE: This field is in Beta.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ciphertextCrc32c;

@end


/**
 *  Response message for KeyManagementService.Decrypt.
 */
@interface GTLRCloudKMS_DecryptResponse : GTLRObject

/**
 *  The decrypted data originally supplied in EncryptRequest.plaintext.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *plaintext;

/**
 *  Integrity verification field. A CRC32C checksum of the returned
 *  DecryptResponse.plaintext. An integrity check of DecryptResponse.plaintext
 *  can be performed by computing the CRC32C checksum of
 *  DecryptResponse.plaintext and comparing your results to this field. Discard
 *  the response in case of non-matching checksum values, and perform a limited
 *  number of retries. A persistent mismatch may indicate an issue in your
 *  computation of the CRC32C checksum. Note: receiving this response message
 *  indicates that KeyManagementService is able to successfully decrypt the
 *  ciphertext. Note: This field is defined as int64 for reasons of
 *  compatibility across different languages. However, it is a non-negative
 *  integer, which will never exceed 2^32-1, and can be safely downconverted to
 *  uint32 in languages that support this type. NOTE: This field is in Beta.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *plaintextCrc32c;

@end


/**
 *  Request message for KeyManagementService.DestroyCryptoKeyVersion.
 */
@interface GTLRCloudKMS_DestroyCryptoKeyVersionRequest : GTLRObject
@end


/**
 *  A Digest holds a cryptographic message digest.
 */
@interface GTLRCloudKMS_Digest : GTLRObject

/**
 *  A message digest produced with the SHA-256 algorithm.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *sha256;

/**
 *  A message digest produced with the SHA-384 algorithm.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *sha384;

/**
 *  A message digest produced with the SHA-512 algorithm.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *sha512;

@end


/**
 *  Request message for KeyManagementService.Encrypt.
 */
@interface GTLRCloudKMS_EncryptRequest : GTLRObject

/**
 *  Optional. Optional data that, if specified, must also be provided during
 *  decryption through DecryptRequest.additional_authenticated_data. The maximum
 *  size depends on the key version's protection_level. For SOFTWARE keys, the
 *  AAD must be no larger than 64KiB. For HSM keys, the combined length of the
 *  plaintext and additional_authenticated_data fields must be no larger than
 *  8KiB.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *additionalAuthenticatedData;

/**
 *  Optional. An optional CRC32C checksum of the
 *  EncryptRequest.additional_authenticated_data. If specified,
 *  KeyManagementService will verify the integrity of the received
 *  EncryptRequest.additional_authenticated_data using this checksum.
 *  KeyManagementService will report an error if the checksum verification
 *  fails. If you receive a checksum error, your client should verify that
 *  CRC32C(EncryptRequest.additional_authenticated_data) is equal to
 *  EncryptRequest.additional_authenticated_data_crc32c, and if so, perform a
 *  limited number of retries. A persistent mismatch may indicate an issue in
 *  your computation of the CRC32C checksum. Note: This field is defined as
 *  int64 for reasons of compatibility across different languages. However, it
 *  is a non-negative integer, which will never exceed 2^32-1, and can be safely
 *  downconverted to uint32 in languages that support this type. NOTE: This
 *  field is in Beta.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *additionalAuthenticatedDataCrc32c;

/**
 *  Required. The data to encrypt. Must be no larger than 64KiB. The maximum
 *  size depends on the key version's protection_level. For SOFTWARE keys, the
 *  plaintext must be no larger than 64KiB. For HSM keys, the combined length of
 *  the plaintext and additional_authenticated_data fields must be no larger
 *  than 8KiB.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *plaintext;

/**
 *  Optional. An optional CRC32C checksum of the EncryptRequest.plaintext. If
 *  specified, KeyManagementService will verify the integrity of the received
 *  EncryptRequest.plaintext using this checksum. KeyManagementService will
 *  report an error if the checksum verification fails. If you receive a
 *  checksum error, your client should verify that
 *  CRC32C(EncryptRequest.plaintext) is equal to
 *  EncryptRequest.plaintext_crc32c, and if so, perform a limited number of
 *  retries. A persistent mismatch may indicate an issue in your computation of
 *  the CRC32C checksum. Note: This field is defined as int64 for reasons of
 *  compatibility across different languages. However, it is a non-negative
 *  integer, which will never exceed 2^32-1, and can be safely downconverted to
 *  uint32 in languages that support this type. NOTE: This field is in Beta.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *plaintextCrc32c;

@end


/**
 *  Response message for KeyManagementService.Encrypt.
 */
@interface GTLRCloudKMS_EncryptResponse : GTLRObject

/**
 *  The encrypted data.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ciphertext;

/**
 *  Integrity verification field. A CRC32C checksum of the returned
 *  EncryptResponse.ciphertext. An integrity check of EncryptResponse.ciphertext
 *  can be performed by computing the CRC32C checksum of
 *  EncryptResponse.ciphertext and comparing your results to this field. Discard
 *  the response in case of non-matching checksum values, and perform a limited
 *  number of retries. A persistent mismatch may indicate an issue in your
 *  computation of the CRC32C checksum. Note: This field is defined as int64 for
 *  reasons of compatibility across different languages. However, it is a
 *  non-negative integer, which will never exceed 2^32-1, and can be safely
 *  downconverted to uint32 in languages that support this type. NOTE: This
 *  field is in Beta.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ciphertextCrc32c;

/**
 *  The resource name of the CryptoKeyVersion used in encryption. Check this
 *  field to verify that the intended resource was used for encryption.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Integrity verification field. A flag indicating whether
 *  EncryptRequest.additional_authenticated_data_crc32c was received by
 *  KeyManagementService and used for the integrity verification of the AAD. A
 *  false value of this field indicates either that
 *  EncryptRequest.additional_authenticated_data_crc32c was left unset or that
 *  it was not delivered to KeyManagementService. If you've set
 *  EncryptRequest.additional_authenticated_data_crc32c but this field is still
 *  false, discard the response and perform a limited number of retries. NOTE:
 *  This field is in Beta.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verifiedAdditionalAuthenticatedDataCrc32c;

/**
 *  Integrity verification field. A flag indicating whether
 *  EncryptRequest.plaintext_crc32c was received by KeyManagementService and
 *  used for the integrity verification of the plaintext. A false value of this
 *  field indicates either that EncryptRequest.plaintext_crc32c was left unset
 *  or that it was not delivered to KeyManagementService. If you've set
 *  EncryptRequest.plaintext_crc32c but this field is still false, discard the
 *  response and perform a limited number of retries. NOTE: This field is in
 *  Beta.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verifiedPlaintextCrc32c;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRCloudKMS_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  ExternalProtectionLevelOptions stores a group of additional fields for
 *  configuring a CryptoKeyVersion that are specific to the EXTERNAL protection
 *  level.
 */
@interface GTLRCloudKMS_ExternalProtectionLevelOptions : GTLRObject

/** The URI for an external resource that this CryptoKeyVersion represents. */
@property(nonatomic, copy, nullable) NSString *externalKeyUri;

@end


/**
 *  Request message for KeyManagementService.ImportCryptoKeyVersion.
 */
@interface GTLRCloudKMS_ImportCryptoKeyVersionRequest : GTLRObject

/**
 *  Required. The algorithm of the key being imported. This does not need to
 *  match the version_template of the CryptoKey this version imports into.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_CryptoKeyVersionAlgorithmUnspecified
 *        Not specified. (Value: "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED")
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_EcSignP256Sha256
 *        ECDSA on the NIST P-256 curve with a SHA256 digest. (Value:
 *        "EC_SIGN_P256_SHA256")
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_EcSignP384Sha384
 *        ECDSA on the NIST P-384 curve with a SHA384 digest. (Value:
 *        "EC_SIGN_P384_SHA384")
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_ExternalSymmetricEncryption
 *        Algorithm representing symmetric encryption by an external key
 *        manager. (Value: "EXTERNAL_SYMMETRIC_ENCRYPTION")
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_GoogleSymmetricEncryption
 *        Creates symmetric encryption keys. (Value:
 *        "GOOGLE_SYMMETRIC_ENCRYPTION")
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaDecryptOaep2048Sha256
 *        RSAES-OAEP 2048 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_2048_SHA256")
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaDecryptOaep3072Sha256
 *        RSAES-OAEP 3072 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_3072_SHA256")
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaDecryptOaep4096Sha256
 *        RSAES-OAEP 4096 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_4096_SHA256")
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaDecryptOaep4096Sha512
 *        RSAES-OAEP 4096 bit key with a SHA512 digest. (Value:
 *        "RSA_DECRYPT_OAEP_4096_SHA512")
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaSignPkcs12048Sha256
 *        RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_2048_SHA256")
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaSignPkcs13072Sha256
 *        RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_3072_SHA256")
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaSignPkcs14096Sha256
 *        RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_4096_SHA256")
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaSignPkcs14096Sha512
 *        RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest. (Value:
 *        "RSA_SIGN_PKCS1_4096_SHA512")
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaSignPss2048Sha256
 *        RSASSA-PSS 2048 bit key with a SHA256 digest. (Value:
 *        "RSA_SIGN_PSS_2048_SHA256")
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaSignPss3072Sha256
 *        RSASSA-PSS 3072 bit key with a SHA256 digest. (Value:
 *        "RSA_SIGN_PSS_3072_SHA256")
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaSignPss4096Sha256
 *        RSASSA-PSS 4096 bit key with a SHA256 digest. (Value:
 *        "RSA_SIGN_PSS_4096_SHA256")
 *    @arg @c kGTLRCloudKMS_ImportCryptoKeyVersionRequest_Algorithm_RsaSignPss4096Sha512
 *        RSASSA-PSS 4096 bit key with a SHA512 digest. (Value:
 *        "RSA_SIGN_PSS_4096_SHA512")
 */
@property(nonatomic, copy, nullable) NSString *algorithm;

/**
 *  Required. The name of the ImportJob that was used to wrap this key material.
 */
@property(nonatomic, copy, nullable) NSString *importJob;

/**
 *  Wrapped key material produced with RSA_OAEP_3072_SHA1_AES_256 or
 *  RSA_OAEP_4096_SHA1_AES_256. This field contains the concatenation of two
 *  wrapped keys: 1. An ephemeral AES-256 wrapping key wrapped with the
 *  public_key using RSAES-OAEP with SHA-1, MGF1 with SHA-1, and an empty label.
 *  2. The key to be imported, wrapped with the ephemeral AES-256 key using
 *  AES-KWP (RFC 5649). If importing symmetric key material, it is expected that
 *  the unwrapped key contains plain bytes. If importing asymmetric key
 *  material, it is expected that the unwrapped key is in PKCS#8-encoded DER
 *  format (the PrivateKeyInfo structure from RFC 5208). This format is the same
 *  as the format produced by PKCS#11 mechanism CKM_RSA_AES_KEY_WRAP.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *rsaAesWrappedKey;

@end


/**
 *  An ImportJob can be used to create CryptoKeys and CryptoKeyVersions using
 *  pre-existing key material, generated outside of Cloud KMS. When an ImportJob
 *  is created, Cloud KMS will generate a "wrapping key", which is a
 *  public/private key pair. You use the wrapping key to encrypt (also known as
 *  wrap) the pre-existing key material to protect it during the import process.
 *  The nature of the wrapping key depends on the choice of import_method. When
 *  the wrapping key generation is complete, the state will be set to ACTIVE and
 *  the public_key can be fetched. The fetched public key can then be used to
 *  wrap your pre-existing key material. Once the key material is wrapped, it
 *  can be imported into a new CryptoKeyVersion in an existing CryptoKey by
 *  calling ImportCryptoKeyVersion. Multiple CryptoKeyVersions can be imported
 *  with a single ImportJob. Cloud KMS uses the private key portion of the
 *  wrapping key to unwrap the key material. Only Cloud KMS has access to the
 *  private key. An ImportJob expires 3 days after it is created. Once expired,
 *  Cloud KMS will no longer be able to import or unwrap any key material that
 *  was wrapped with the ImportJob's public key. For more information, see
 *  [Importing a key](https://cloud.google.com/kms/docs/importing-a-key).
 */
@interface GTLRCloudKMS_ImportJob : GTLRObject

/**
 *  Output only. Statement that was generated and signed by the key creator (for
 *  example, an HSM) at key creation time. Use this statement to verify
 *  attributes of the key as stored on the HSM, independently of Google. Only
 *  present if the chosen ImportMethod is one with a protection level of HSM.
 */
@property(nonatomic, strong, nullable) GTLRCloudKMS_KeyOperationAttestation *attestation;

/** Output only. The time at which this ImportJob was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The time this ImportJob expired. Only present if state is
 *  EXPIRED.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireEventTime;

/**
 *  Output only. The time at which this ImportJob is scheduled for expiration
 *  and can no longer be used to import key material.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/** Output only. The time this ImportJob's key material was generated. */
@property(nonatomic, strong, nullable) GTLRDateTime *generateTime;

/**
 *  Required. Immutable. The wrapping method to be used for incoming key
 *  material.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudKMS_ImportJob_ImportMethod_ImportMethodUnspecified Not
 *        specified. (Value: "IMPORT_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRCloudKMS_ImportJob_ImportMethod_RsaOaep3072Sha1Aes256 This
 *        ImportMethod represents the CKM_RSA_AES_KEY_WRAP key wrapping scheme
 *        defined in the PKCS #11 standard. In summary, this involves wrapping
 *        the raw key with an ephemeral AES key, and wrapping the ephemeral AES
 *        key with a 3072 bit RSA key. For more details, see [RSA AES key wrap
 *        mechanism](http://docs.oasis-open.org/pkcs11/pkcs11-curr/v2.40/cos01/pkcs11-curr-v2.40-cos01.html#_Toc408226908).
 *        (Value: "RSA_OAEP_3072_SHA1_AES_256")
 *    @arg @c kGTLRCloudKMS_ImportJob_ImportMethod_RsaOaep4096Sha1Aes256 This
 *        ImportMethod represents the CKM_RSA_AES_KEY_WRAP key wrapping scheme
 *        defined in the PKCS #11 standard. In summary, this involves wrapping
 *        the raw key with an ephemeral AES key, and wrapping the ephemeral AES
 *        key with a 4096 bit RSA key. For more details, see [RSA AES key wrap
 *        mechanism](http://docs.oasis-open.org/pkcs11/pkcs11-curr/v2.40/cos01/pkcs11-curr-v2.40-cos01.html#_Toc408226908).
 *        (Value: "RSA_OAEP_4096_SHA1_AES_256")
 */
@property(nonatomic, copy, nullable) NSString *importMethod;

/**
 *  Output only. The resource name for this ImportJob in the format `projects/ *
 *  /locations/ * /keyRings/ * /importJobs/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Immutable. The protection level of the ImportJob. This must match
 *  the protection_level of the version_template on the CryptoKey you attempt to
 *  import into.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudKMS_ImportJob_ProtectionLevel_External Crypto operations
 *        are performed by an external key manager. (Value: "EXTERNAL")
 *    @arg @c kGTLRCloudKMS_ImportJob_ProtectionLevel_Hsm Crypto operations are
 *        performed in a Hardware Security Module. (Value: "HSM")
 *    @arg @c kGTLRCloudKMS_ImportJob_ProtectionLevel_ProtectionLevelUnspecified
 *        Not specified. (Value: "PROTECTION_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRCloudKMS_ImportJob_ProtectionLevel_Software Crypto operations
 *        are performed in software. (Value: "SOFTWARE")
 */
@property(nonatomic, copy, nullable) NSString *protectionLevel;

/**
 *  Output only. The public key with which to wrap key material prior to import.
 *  Only returned if state is ACTIVE.
 */
@property(nonatomic, strong, nullable) GTLRCloudKMS_WrappingPublicKey *publicKey;

/**
 *  Output only. The current state of the ImportJob, indicating if it can be
 *  used.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudKMS_ImportJob_State_Active This job may be used in
 *        CreateCryptoKey and CreateCryptoKeyVersion requests. (Value: "ACTIVE")
 *    @arg @c kGTLRCloudKMS_ImportJob_State_Expired This job can no longer be
 *        used and may not leave this state once entered. (Value: "EXPIRED")
 *    @arg @c kGTLRCloudKMS_ImportJob_State_ImportJobStateUnspecified Not
 *        specified. (Value: "IMPORT_JOB_STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudKMS_ImportJob_State_PendingGeneration The wrapping key
 *        for this job is still being generated. It may not be used. Cloud KMS
 *        will automatically mark this job as ACTIVE as soon as the wrapping key
 *        is generated. (Value: "PENDING_GENERATION")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Contains an HSM-generated attestation about a key operation. For more
 *  information, see [Verifying attestations]
 *  (https://cloud.google.com/kms/docs/attest-key).
 */
@interface GTLRCloudKMS_KeyOperationAttestation : GTLRObject

/** Output only. The certificate chains needed to validate the attestation */
@property(nonatomic, strong, nullable) GTLRCloudKMS_CertificateChains *certChains;

/**
 *  Output only. The attestation data provided by the HSM when the key operation
 *  was performed.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *content;

/**
 *  Output only. The format of the attestation data.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudKMS_KeyOperationAttestation_Format_AttestationFormatUnspecified
 *        Not specified. (Value: "ATTESTATION_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRCloudKMS_KeyOperationAttestation_Format_CaviumV1Compressed
 *        Cavium HSM attestation compressed with gzip. Note that this format is
 *        defined by Cavium and subject to change at any time. (Value:
 *        "CAVIUM_V1_COMPRESSED")
 *    @arg @c kGTLRCloudKMS_KeyOperationAttestation_Format_CaviumV2Compressed
 *        Cavium HSM attestation V2 compressed with gzip. This is a new format
 *        introduced in Cavium's version 3.2-08. (Value: "CAVIUM_V2_COMPRESSED")
 */
@property(nonatomic, copy, nullable) NSString *format;

@end


/**
 *  A KeyRing is a toplevel logical grouping of CryptoKeys.
 */
@interface GTLRCloudKMS_KeyRing : GTLRObject

/** Output only. The time at which this KeyRing was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The resource name for the KeyRing in the format `projects/ *
 *  /locations/ * /keyRings/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Response message for KeyManagementService.ListCryptoKeys.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "cryptoKeys" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudKMS_ListCryptoKeysResponse : GTLRCollectionObject

/**
 *  The list of CryptoKeys.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudKMS_CryptoKey *> *cryptoKeys;

/**
 *  A token to retrieve next page of results. Pass this value in
 *  ListCryptoKeysRequest.page_token to retrieve the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The total number of CryptoKeys that matched the query.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Response message for KeyManagementService.ListCryptoKeyVersions.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "cryptoKeyVersions" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRCloudKMS_ListCryptoKeyVersionsResponse : GTLRCollectionObject

/**
 *  The list of CryptoKeyVersions.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudKMS_CryptoKeyVersion *> *cryptoKeyVersions;

/**
 *  A token to retrieve next page of results. Pass this value in
 *  ListCryptoKeyVersionsRequest.page_token to retrieve the next page of
 *  results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The total number of CryptoKeyVersions that matched the query.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Response message for KeyManagementService.ListImportJobs.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "importJobs" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudKMS_ListImportJobsResponse : GTLRCollectionObject

/**
 *  The list of ImportJobs.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudKMS_ImportJob *> *importJobs;

/**
 *  A token to retrieve next page of results. Pass this value in
 *  ListImportJobsRequest.page_token to retrieve the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The total number of ImportJobs that matched the query.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Response message for KeyManagementService.ListKeyRings.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "keyRings" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudKMS_ListKeyRingsResponse : GTLRCollectionObject

/**
 *  The list of KeyRings.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudKMS_KeyRing *> *keyRings;

/**
 *  A token to retrieve next page of results. Pass this value in
 *  ListKeyRingsRequest.page_token to retrieve the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The total number of KeyRings that matched the query.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudKMS_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudKMS_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRCloudKMS_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCloudKMS_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRCloudKMS_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudKMS_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudKMS_Location_Metadata : GTLRObject
@end


/**
 *  Cloud KMS metadata for the given google.cloud.location.Location.
 */
@interface GTLRCloudKMS_LocationMetadata : GTLRObject

/**
 *  Indicates whether CryptoKeys with protection_level EXTERNAL can be created
 *  in this location.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ekmAvailable;

/**
 *  Indicates whether CryptoKeys with protection_level HSM can be created in
 *  this location.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hsmAvailable;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members` to a single `role`.
 *  Members can be user accounts, service accounts, Google groups, and domains
 *  (such as G Suite). A `role` is a named list of permissions; each `role` can
 *  be an IAM predefined role or a user-created custom role. For some types of
 *  Google Cloud resources, a `binding` can also specify a `condition`, which is
 *  a logical expression that allows access to a resource only if the expression
 *  evaluates to `true`. A condition can add constraints based on attributes of
 *  the request, the resource, or both. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= -
 *  version: 3 For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRCloudKMS_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudKMS_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members` to a `role`. Optionally, may specify a
 *  `condition` that determines how and when the `bindings` are applied. Each of
 *  the `bindings` must contain at least one member.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudKMS_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  The public key for a given CryptoKeyVersion. Obtained via GetPublicKey.
 */
@interface GTLRCloudKMS_PublicKey : GTLRObject

/**
 *  The Algorithm associated with this key.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_CryptoKeyVersionAlgorithmUnspecified
 *        Not specified. (Value: "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED")
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_EcSignP256Sha256 ECDSA on the
 *        NIST P-256 curve with a SHA256 digest. (Value: "EC_SIGN_P256_SHA256")
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_EcSignP384Sha384 ECDSA on the
 *        NIST P-384 curve with a SHA384 digest. (Value: "EC_SIGN_P384_SHA384")
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_ExternalSymmetricEncryption
 *        Algorithm representing symmetric encryption by an external key
 *        manager. (Value: "EXTERNAL_SYMMETRIC_ENCRYPTION")
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_GoogleSymmetricEncryption
 *        Creates symmetric encryption keys. (Value:
 *        "GOOGLE_SYMMETRIC_ENCRYPTION")
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_RsaDecryptOaep2048Sha256
 *        RSAES-OAEP 2048 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_2048_SHA256")
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_RsaDecryptOaep3072Sha256
 *        RSAES-OAEP 3072 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_3072_SHA256")
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_RsaDecryptOaep4096Sha256
 *        RSAES-OAEP 4096 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_4096_SHA256")
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_RsaDecryptOaep4096Sha512
 *        RSAES-OAEP 4096 bit key with a SHA512 digest. (Value:
 *        "RSA_DECRYPT_OAEP_4096_SHA512")
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_RsaSignPkcs12048Sha256
 *        RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_2048_SHA256")
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_RsaSignPkcs13072Sha256
 *        RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_3072_SHA256")
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_RsaSignPkcs14096Sha256
 *        RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_4096_SHA256")
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_RsaSignPkcs14096Sha512
 *        RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest. (Value:
 *        "RSA_SIGN_PKCS1_4096_SHA512")
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_RsaSignPss2048Sha256 RSASSA-PSS
 *        2048 bit key with a SHA256 digest. (Value: "RSA_SIGN_PSS_2048_SHA256")
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_RsaSignPss3072Sha256 RSASSA-PSS
 *        3072 bit key with a SHA256 digest. (Value: "RSA_SIGN_PSS_3072_SHA256")
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_RsaSignPss4096Sha256 RSASSA-PSS
 *        4096 bit key with a SHA256 digest. (Value: "RSA_SIGN_PSS_4096_SHA256")
 *    @arg @c kGTLRCloudKMS_PublicKey_Algorithm_RsaSignPss4096Sha512 RSASSA-PSS
 *        4096 bit key with a SHA512 digest. (Value: "RSA_SIGN_PSS_4096_SHA512")
 */
@property(nonatomic, copy, nullable) NSString *algorithm;

/**
 *  The name of the CryptoKeyVersion public key. Provided here for verification.
 *  NOTE: This field is in Beta.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The public key, encoded in PEM format. For more information, see the [RFC
 *  7468](https://tools.ietf.org/html/rfc7468) sections for [General
 *  Considerations](https://tools.ietf.org/html/rfc7468#section-2) and [Textual
 *  Encoding of Subject Public Key Info]
 *  (https://tools.ietf.org/html/rfc7468#section-13).
 */
@property(nonatomic, copy, nullable) NSString *pem;

/**
 *  Integrity verification field. A CRC32C checksum of the returned
 *  PublicKey.pem. An integrity check of PublicKey.pem can be performed by
 *  computing the CRC32C checksum of PublicKey.pem and comparing your results to
 *  this field. Discard the response in case of non-matching checksum values,
 *  and perform a limited number of retries. A persistent mismatch may indicate
 *  an issue in your computation of the CRC32C checksum. Note: This field is
 *  defined as int64 for reasons of compatibility across different languages.
 *  However, it is a non-negative integer, which will never exceed 2^32-1, and
 *  can be safely downconverted to uint32 in languages that support this type.
 *  NOTE: This field is in Beta.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pemCrc32c;

@end


/**
 *  Request message for KeyManagementService.RestoreCryptoKeyVersion.
 */
@interface GTLRCloudKMS_RestoreCryptoKeyVersionRequest : GTLRObject
@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRCloudKMS_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Cloud Platform services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRCloudKMS_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRCloudKMS_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as '*' or 'storage.*') are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRCloudKMS_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Request message for KeyManagementService.UpdateCryptoKeyPrimaryVersion.
 */
@interface GTLRCloudKMS_UpdateCryptoKeyPrimaryVersionRequest : GTLRObject

/** Required. The id of the child CryptoKeyVersion to use as primary. */
@property(nonatomic, copy, nullable) NSString *cryptoKeyVersionId;

@end


/**
 *  The public key component of the wrapping key. For details of the type of key
 *  this public key corresponds to, see the ImportMethod.
 */
@interface GTLRCloudKMS_WrappingPublicKey : GTLRObject

/**
 *  The public key, encoded in PEM format. For more information, see the [RFC
 *  7468](https://tools.ietf.org/html/rfc7468) sections for [General
 *  Considerations](https://tools.ietf.org/html/rfc7468#section-2) and [Textual
 *  Encoding of Subject Public Key Info]
 *  (https://tools.ietf.org/html/rfc7468#section-13).
 */
@property(nonatomic, copy, nullable) NSString *pem;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
