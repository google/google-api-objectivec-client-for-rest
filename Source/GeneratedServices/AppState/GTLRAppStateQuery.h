// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google App State API (appstate/v1)
// Description:
//   The Google App State API.
// Documentation:
//   https://developers.google.com/games/services/web/api/states

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAppState_UpdateRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other App State query classes.
 */
@interface GTLRAppStateQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Clears (sets to empty) the data for the passed key if and only if the passed
 *  version matches the currently stored version. This method results in a
 *  conflict error on version mismatch.
 *
 *  Method: appstate.states.clear
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppState
 */
@interface GTLRAppStateQuery_StatesClear : GTLRAppStateQuery
// Previous library name was
//   +[GTLQueryAppState queryForStatesClearWithstateKey:]

/**
 *  The version of the data to be cleared. Version strings are returned by the
 *  server.
 */
@property(nonatomic, copy, nullable) NSString *currentDataVersion;

/**
 *  The key for the data to be retrieved.
 *
 *  @note The documented range is 0..3.
 */
@property(nonatomic, assign) NSInteger stateKey;

/**
 *  Fetches a @c GTLRAppState_WriteResult.
 *
 *  Clears (sets to empty) the data for the passed key if and only if the passed
 *  version matches the currently stored version. This method results in a
 *  conflict error on version mismatch.
 *
 *  @param stateKey The key for the data to be retrieved. (Range 0..3)
 *
 *  @return GTLRAppStateQuery_StatesClear
 */
+ (instancetype)queryWithStateKey:(NSInteger)stateKey;

@end

/**
 *  Deletes a key and the data associated with it. The key is removed and no
 *  longer counts against the key quota. Note that since this method is not safe
 *  in the face of concurrent modifications, it should only be used for
 *  development and testing purposes. Invoking this method in shipping code can
 *  result in data loss and data corruption.
 *
 *  Method: appstate.states.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppState
 */
@interface GTLRAppStateQuery_StatesDelete : GTLRAppStateQuery
// Previous library name was
//   +[GTLQueryAppState queryForStatesDeleteWithstateKey:]

/**
 *  The key for the data to be retrieved.
 *
 *  @note The documented range is 0..3.
 */
@property(nonatomic, assign) NSInteger stateKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a key and the data associated with it. The key is removed and no
 *  longer counts against the key quota. Note that since this method is not safe
 *  in the face of concurrent modifications, it should only be used for
 *  development and testing purposes. Invoking this method in shipping code can
 *  result in data loss and data corruption.
 *
 *  @param stateKey The key for the data to be retrieved. (Range 0..3)
 *
 *  @return GTLRAppStateQuery_StatesDelete
 */
+ (instancetype)queryWithStateKey:(NSInteger)stateKey;

@end

/**
 *  Retrieves the data corresponding to the passed key. If the key does not
 *  exist on the server, an HTTP 404 will be returned.
 *
 *  Method: appstate.states.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppState
 */
@interface GTLRAppStateQuery_StatesGet : GTLRAppStateQuery
// Previous library name was
//   +[GTLQueryAppState queryForStatesGetWithstateKey:]

/**
 *  The key for the data to be retrieved.
 *
 *  @note The documented range is 0..3.
 */
@property(nonatomic, assign) NSInteger stateKey;

/**
 *  Fetches a @c GTLRAppState_GetResponse.
 *
 *  Retrieves the data corresponding to the passed key. If the key does not
 *  exist on the server, an HTTP 404 will be returned.
 *
 *  @param stateKey The key for the data to be retrieved. (Range 0..3)
 *
 *  @return GTLRAppStateQuery_StatesGet
 */
+ (instancetype)queryWithStateKey:(NSInteger)stateKey;

@end

/**
 *  Lists all the states keys, and optionally the state data.
 *
 *  Method: appstate.states.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppState
 */
@interface GTLRAppStateQuery_StatesList : GTLRAppStateQuery
// Previous library name was
//   +[GTLQueryAppState queryForStatesList]

/**
 *  Whether to include the full data in addition to the version number
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL includeData;

/**
 *  Fetches a @c GTLRAppState_ListResponse.
 *
 *  Lists all the states keys, and optionally the state data.
 *
 *  @return GTLRAppStateQuery_StatesList
 */
+ (instancetype)query;

@end

/**
 *  Update the data associated with the input key if and only if the passed
 *  version matches the currently stored version. This method is safe in the
 *  face of concurrent writes. Maximum per-key size is 128KB.
 *
 *  Method: appstate.states.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAppState
 */
@interface GTLRAppStateQuery_StatesUpdate : GTLRAppStateQuery
// Previous library name was
//   +[GTLQueryAppState queryForStatesUpdateWithObject:stateKey:]

/**
 *  The version of the app state your application is attempting to update. If
 *  this does not match the current version, this method will return a conflict
 *  error. If there is no data stored on the server for this key, the update
 *  will succeed irrespective of the value of this parameter.
 */
@property(nonatomic, copy, nullable) NSString *currentStateVersion;

/**
 *  The key for the data to be retrieved.
 *
 *  @note The documented range is 0..3.
 */
@property(nonatomic, assign) NSInteger stateKey;

/**
 *  Fetches a @c GTLRAppState_WriteResult.
 *
 *  Update the data associated with the input key if and only if the passed
 *  version matches the currently stored version. This method is safe in the
 *  face of concurrent writes. Maximum per-key size is 128KB.
 *
 *  @param object The @c GTLRAppState_UpdateRequest to include in the query.
 *  @param stateKey The key for the data to be retrieved. (Range 0..3)
 *
 *  @return GTLRAppStateQuery_StatesUpdate
 */
+ (instancetype)queryWithObject:(GTLRAppState_UpdateRequest *)object
                       stateKey:(NSInteger)stateKey;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
