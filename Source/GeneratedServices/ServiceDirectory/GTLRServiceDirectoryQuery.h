// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Service Directory API (servicedirectory/v1beta1)
// Description:
//   Service Directory is a platform for discovering, publishing, and connecting
//   services.
// Documentation:
//   https://cloud.google.com/service-directory

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRServiceDirectory_Endpoint;
@class GTLRServiceDirectory_GetIamPolicyRequest;
@class GTLRServiceDirectory_Namespace;
@class GTLRServiceDirectory_ResolveServiceRequest;
@class GTLRServiceDirectory_Service;
@class GTLRServiceDirectory_SetIamPolicyRequest;
@class GTLRServiceDirectory_TestIamPermissionsRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Service Directory query classes.
 */
@interface GTLRServiceDirectoryQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets information about a location.
 *
 *  Method: servicedirectory.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsGet : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRServiceDirectory_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: servicedirectory.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsList : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRServiceDirectory_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a namespace, and returns the new Namespace.
 *
 *  Method: servicedirectory.projects.locations.namespaces.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesCreate : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesCreateWithObject:parent:]

/**
 *  Required. The Resource ID must be 1-63 characters long, and comply with
 *  <a href="https://www.ietf.org/rfc/rfc1035.txt" target="_blank">RFC1035</a>.
 *  Specifically, the name must be 1-63 characters long and match the regular
 *  expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first
 *  character must be a lowercase letter, and all following characters must
 *  be a dash, lowercase letter, or digit, except the last character, which
 *  cannot be a dash.
 */
@property(nonatomic, copy, nullable) NSString *namespaceId;

/**
 *  Required. The resource name of the project and location the namespace
 *  will be created in.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRServiceDirectory_Namespace.
 *
 *  Creates a namespace, and returns the new Namespace.
 *
 *  @param object The @c GTLRServiceDirectory_Namespace to include in the query.
 *  @param parent Required. The resource name of the project and location the
 *    namespace
 *    will be created in.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesCreate
 */
+ (instancetype)queryWithObject:(GTLRServiceDirectory_Namespace *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a namespace. This also deletes all services and endpoints in
 *  the namespace.
 *
 *  Method: servicedirectory.projects.locations.namespaces.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesDelete : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesDeleteWithname:]

/** Required. The name of the namespace to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRServiceDirectory_Empty.
 *
 *  Deletes a namespace. This also deletes all services and endpoints in
 *  the namespace.
 *
 *  @param name Required. The name of the namespace to delete.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a namespace.
 *
 *  Method: servicedirectory.projects.locations.namespaces.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesGet : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesGetWithname:]

/** Required. The name of the namespace to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRServiceDirectory_Namespace.
 *
 *  Gets a namespace.
 *
 *  @param name Required. The name of the namespace to retrieve.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the IAM Policy for a resource (namespace or service only).
 *
 *  Method: servicedirectory.projects.locations.namespaces.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesGetIamPolicy : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesGetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRServiceDirectory_Policy.
 *
 *  Gets the IAM Policy for a resource (namespace or service only).
 *
 *  @param object The @c GTLRServiceDirectory_GetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRServiceDirectory_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists all namespaces.
 *
 *  Method: servicedirectory.projects.locations.namespaces.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesList : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesListWithparent:]

/**
 *  Optional. The filter to list result by.
 *  General filter string syntax:
 *  <field> <operator> <value> (<logical connector>)
 *  <field> can be "name", or "labels.<key>" for map field.
 *  <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and
 *  is roughly the same as "=".
 *  <value> must be the same data type as field.
 *  <logical connector> can be "AND, OR, NOT".
 *  Examples of valid filters:
 *  * "labels.owner" returns Namespaces that have a label with the key "owner"
 *  this is the same as "labels:owner".
 *  * "labels.protocol=gRPC" returns Namespaces that have key/value
 *  "protocol=gRPC".
 *  * "name>projects/my-project/locations/us-east/namespaces/namespace-c"
 *  returns Namespaces that have name that is alphabetically later than the
 *  string, so "namespace-e" will be returned but "namespace-a" will not be.
 *  * "labels.owner!=sd AND labels.foo=bar" returns Namespaces that have
 *  "owner" in label key but value is not "sd" AND have key/value foo=bar.
 *  * "doesnotexist.foo=bar" returns an empty list. Note that Namespace doesn't
 *  have a field called "doesnotexist". Since the filter does not match any
 *  Namespaces, it returns no results.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The order to list result by.
 *  General order by string syntax:
 *  <field> (<asc|desc>) (,)
 *  <field> allows values {"name"}
 *  <asc/desc> ascending or descending order by <field>. If this is left
 *  blank, "asc" is used.
 *  Note that an empty order_by string result in default order, which is order
 *  by name in ascending order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Optional. The maximum number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. The next_page_token value returned from a previous List request,
 *  if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name of the project and location whose namespaces
 *  we'd like to
 *  list.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRServiceDirectory_ListNamespacesResponse.
 *
 *  Lists all namespaces.
 *
 *  @param parent Required. The resource name of the project and location whose
 *    namespaces we'd like to
 *    list.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a namespace.
 *
 *  Method: servicedirectory.projects.locations.namespaces.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesPatch : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesPatchWithObject:name:]

/**
 *  Immutable. The resource name for the namespace in the format
 *  'projects/ * /locations/ * /namespaces/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. List of fields to be updated in this request.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRServiceDirectory_Namespace.
 *
 *  Updates a namespace.
 *
 *  @param object The @c GTLRServiceDirectory_Namespace to include in the query.
 *  @param name Immutable. The resource name for the namespace in the format
 *    'projects/ * /locations/ * /namespaces/ *'.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesPatch
 */
+ (instancetype)queryWithObject:(GTLRServiceDirectory_Namespace *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a service, and returns the new Service.
 *
 *  Method: servicedirectory.projects.locations.namespaces.services.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesCreate : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesServicesCreateWithObject:parent:]

/**
 *  Required. The resource name of the namespace this service will belong to.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. The Resource ID must be 1-63 characters long, and comply with
 *  <a href="https://www.ietf.org/rfc/rfc1035.txt" target="_blank">RFC1035</a>.
 *  Specifically, the name must be 1-63 characters long and match the regular
 *  expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first
 *  character must be a lowercase letter, and all following characters must
 *  be a dash, lowercase letter, or digit, except the last character, which
 *  cannot be a dash.
 */
@property(nonatomic, copy, nullable) NSString *serviceId;

/**
 *  Fetches a @c GTLRServiceDirectory_Service.
 *
 *  Creates a service, and returns the new Service.
 *
 *  @param object The @c GTLRServiceDirectory_Service to include in the query.
 *  @param parent Required. The resource name of the namespace this service will
 *    belong to.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesCreate
 */
+ (instancetype)queryWithObject:(GTLRServiceDirectory_Service *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a service. This also deletes all endpoints associated with
 *  the service.
 *
 *  Method: servicedirectory.projects.locations.namespaces.services.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesDelete : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesServicesDeleteWithname:]

/** Required. The name of the service to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRServiceDirectory_Empty.
 *
 *  Deletes a service. This also deletes all endpoints associated with
 *  the service.
 *
 *  @param name Required. The name of the service to delete.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a endpoint, and returns the new Endpoint.
 *
 *  Method: servicedirectory.projects.locations.namespaces.services.endpoints.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsCreate : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesServicesEndpointsCreateWithObject:parent:]

/**
 *  Required. The Resource ID must be 1-63 characters long, and comply with
 *  <a href="https://www.ietf.org/rfc/rfc1035.txt" target="_blank">RFC1035</a>.
 *  Specifically, the name must be 1-63 characters long and match the regular
 *  expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first
 *  character must be a lowercase letter, and all following characters must
 *  be a dash, lowercase letter, or digit, except the last character, which
 *  cannot be a dash.
 */
@property(nonatomic, copy, nullable) NSString *endpointId;

/** Required. The resource name of the service that this endpoint provides. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRServiceDirectory_Endpoint.
 *
 *  Creates a endpoint, and returns the new Endpoint.
 *
 *  @param object The @c GTLRServiceDirectory_Endpoint to include in the query.
 *  @param parent Required. The resource name of the service that this endpoint
 *    provides.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsCreate
 */
+ (instancetype)queryWithObject:(GTLRServiceDirectory_Endpoint *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a endpoint.
 *
 *  Method: servicedirectory.projects.locations.namespaces.services.endpoints.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsDelete : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesServicesEndpointsDeleteWithname:]

/** Required. The name of the endpoint to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRServiceDirectory_Empty.
 *
 *  Deletes a endpoint.
 *
 *  @param name Required. The name of the endpoint to delete.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a endpoint.
 *
 *  Method: servicedirectory.projects.locations.namespaces.services.endpoints.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsGet : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesServicesEndpointsGetWithname:]

/** Required. The name of the endpoint to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRServiceDirectory_Endpoint.
 *
 *  Gets a endpoint.
 *
 *  @param name Required. The name of the endpoint to get.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all endpoints.
 *
 *  Method: servicedirectory.projects.locations.namespaces.services.endpoints.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsList : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesServicesEndpointsListWithparent:]

/**
 *  Optional. The filter to list result by.
 *  General filter string syntax:
 *  <field> <operator> <value> (<logical connector>)
 *  <field> can be "name", "address", "port" or "metadata.<key>" for map field.
 *  <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and
 *  is roughly the same as "=".
 *  <value> must be the same data type as field.
 *  <logical connector> can be "AND, OR, NOT".
 *  Examples of valid filters:
 *  * "metadata.owner" returns Endpoints that have a label with the key "owner"
 *  this is the same as "metadata:owner".
 *  * "metadata.protocol=gRPC" returns Endpoints that have key/value
 *  "protocol=gRPC".
 *  * "address=192.108.1.105" returns Endpoints that have this address.
 *  * "port>8080" returns Endpoints that have port number larger than 8080.
 *  *
 *  "name>projects/my-project/locations/us-east/namespaces/my-namespace/services/my-service/endpoints/endpoint-c"
 *  returns Endpoints that have name that is alphabetically later than the
 *  string, so "endpoint-e" will be returned but "endpoint-a" will not be.
 *  * "metadata.owner!=sd AND metadata.foo=bar" returns Endpoints that have
 *  "owner" in label key but value is not "sd" AND have key/value foo=bar.
 *  * "doesnotexist.foo=bar" returns an empty list. Note that Endpoint doesn't
 *  have a field called "doesnotexist". Since the filter does not match any
 *  Endpoints, it returns no results.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. The order to list result by. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Optional. The maximum number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. The next_page_token value returned from a previous List request,
 *  if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name of the service whose endpoints we'd like to
 *  list.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRServiceDirectory_ListEndpointsResponse.
 *
 *  Lists all endpoints.
 *
 *  @param parent Required. The resource name of the service whose endpoints
 *    we'd like to
 *    list.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a endpoint.
 *
 *  Method: servicedirectory.projects.locations.namespaces.services.endpoints.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsPatch : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesServicesEndpointsPatchWithObject:name:]

/**
 *  Immutable. The resource name for the endpoint in the format
 *  'projects/ * /locations/ * /namespaces/ * /services/ * /endpoints/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. List of fields to be updated in this request.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRServiceDirectory_Endpoint.
 *
 *  Updates a endpoint.
 *
 *  @param object The @c GTLRServiceDirectory_Endpoint to include in the query.
 *  @param name Immutable. The resource name for the endpoint in the format
 *    'projects/ * /locations/ * /namespaces/ * /services/ * /endpoints/ *'.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsPatch
 */
+ (instancetype)queryWithObject:(GTLRServiceDirectory_Endpoint *)object
                           name:(NSString *)name;

@end

/**
 *  Gets a service.
 *
 *  Method: servicedirectory.projects.locations.namespaces.services.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesGet : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesServicesGetWithname:]

/** Required. The name of the service to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRServiceDirectory_Service.
 *
 *  Gets a service.
 *
 *  @param name Required. The name of the service to get.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the IAM Policy for a resource (namespace or service only).
 *
 *  Method: servicedirectory.projects.locations.namespaces.services.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesGetIamPolicy : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesServicesGetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRServiceDirectory_Policy.
 *
 *  Gets the IAM Policy for a resource (namespace or service only).
 *
 *  @param object The @c GTLRServiceDirectory_GetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRServiceDirectory_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists all services belonging to a namespace.
 *
 *  Method: servicedirectory.projects.locations.namespaces.services.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesList : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesServicesListWithparent:]

/**
 *  Optional. The filter to list result by.
 *  General filter string syntax:
 *  <field> <operator> <value> (<logical connector>)
 *  <field> can be "name", or "metadata.<key>" for map field.
 *  <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and
 *  is roughly the same as "=".
 *  <value> must be the same data type as field.
 *  <logical connector> can be "AND, OR, NOT".
 *  Examples of valid filters:
 *  * "metadata.owner" returns Services that have a label with the key "owner"
 *  this is the same as "metadata:owner".
 *  * "metadata.protocol=gRPC" returns Services that have key/value
 *  "protocol=gRPC".
 *  *
 *  "name>projects/my-project/locations/us-east/namespaces/my-namespace/services/service-c"
 *  returns Services that have name that is alphabetically later than the
 *  string, so "service-e" will be returned but "service-a" will not be.
 *  * "metadata.owner!=sd AND metadata.foo=bar" returns Services that have
 *  "owner" in label key but value is not "sd" AND have key/value foo=bar.
 *  * "doesnotexist.foo=bar" returns an empty list. Note that Service doesn't
 *  have a field called "doesnotexist". Since the filter does not match any
 *  Services, it returns no results.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. The order to list result by. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Optional. The maximum number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. The next_page_token value returned from a previous List request,
 *  if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name of the namespace whose services we'd
 *  like to list.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRServiceDirectory_ListServicesResponse.
 *
 *  Lists all services belonging to a namespace.
 *
 *  @param parent Required. The resource name of the namespace whose services
 *    we'd
 *    like to list.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a service.
 *
 *  Method: servicedirectory.projects.locations.namespaces.services.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesPatch : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesServicesPatchWithObject:name:]

/**
 *  Immutable. The resource name for the service in the format
 *  'projects/ * /locations/ * /namespaces/ * /services/ *'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. List of fields to be updated in this request.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRServiceDirectory_Service.
 *
 *  Updates a service.
 *
 *  @param object The @c GTLRServiceDirectory_Service to include in the query.
 *  @param name Immutable. The resource name for the service in the format
 *    'projects/ * /locations/ * /namespaces/ * /services/ *'.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesPatch
 */
+ (instancetype)queryWithObject:(GTLRServiceDirectory_Service *)object
                           name:(NSString *)name;

@end

/**
 *  Returns a service and its
 *  associated endpoints.
 *  Resolving a service is not considered an active developer method.
 *
 *  Method: servicedirectory.projects.locations.namespaces.services.resolve
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesResolve : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesServicesResolveWithObject:name:]

/** Required. The name of the service to resolve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRServiceDirectory_ResolveServiceResponse.
 *
 *  Returns a service and its
 *  associated endpoints.
 *  Resolving a service is not considered an active developer method.
 *
 *  @param object The @c GTLRServiceDirectory_ResolveServiceRequest to include
 *    in the query.
 *  @param name Required. The name of the service to resolve.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesResolve
 */
+ (instancetype)queryWithObject:(GTLRServiceDirectory_ResolveServiceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the IAM Policy for a resource (namespace or service only).
 *
 *  Method: servicedirectory.projects.locations.namespaces.services.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesSetIamPolicy : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesServicesSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRServiceDirectory_Policy.
 *
 *  Sets the IAM Policy for a resource (namespace or service only).
 *
 *  @param object The @c GTLRServiceDirectory_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRServiceDirectory_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Tests IAM permissions for a resource (namespace or service only).
 *
 *  Method: servicedirectory.projects.locations.namespaces.services.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesTestIamPermissions : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesServicesTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRServiceDirectory_TestIamPermissionsResponse.
 *
 *  Tests IAM permissions for a resource (namespace or service only).
 *
 *  @param object The @c GTLRServiceDirectory_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRServiceDirectory_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Sets the IAM Policy for a resource (namespace or service only).
 *
 *  Method: servicedirectory.projects.locations.namespaces.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesSetIamPolicy : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRServiceDirectory_Policy.
 *
 *  Sets the IAM Policy for a resource (namespace or service only).
 *
 *  @param object The @c GTLRServiceDirectory_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRServiceDirectory_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Tests IAM permissions for a resource (namespace or service only).
 *
 *  Method: servicedirectory.projects.locations.namespaces.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServiceDirectoryCloudPlatform
 */
@interface GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesTestIamPermissions : GTLRServiceDirectoryQuery
// Previous library name was
//   +[GTLQueryServiceDirectory queryForProjectsLocationsNamespacesTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRServiceDirectory_TestIamPermissionsResponse.
 *
 *  Tests IAM permissions for a resource (namespace or service only).
 *
 *  @param object The @c GTLRServiceDirectory_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRServiceDirectory_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
