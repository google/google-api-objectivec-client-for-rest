// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Dialogflow API (dialogflow/v2beta1)
// Description:
//   An end-to-end development suite for conversational interfaces (e.g.,
//   chatbots, voice-powered apps and devices).
// Documentation:
//   https://cloud.google.com/dialogflow-enterprise/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDialogflow_Agent;
@class GTLRDialogflow_Context;
@class GTLRDialogflow_Context_Parameters;
@class GTLRDialogflow_EntityType;
@class GTLRDialogflow_EntityTypeBatch;
@class GTLRDialogflow_EntityTypeEntity;
@class GTLRDialogflow_EventInput;
@class GTLRDialogflow_EventInput_Parameters;
@class GTLRDialogflow_InputAudioConfig;
@class GTLRDialogflow_Intent;
@class GTLRDialogflow_IntentBatch;
@class GTLRDialogflow_IntentFollowupIntentInfo;
@class GTLRDialogflow_IntentMessage;
@class GTLRDialogflow_IntentMessage_Payload;
@class GTLRDialogflow_IntentMessageBasicCard;
@class GTLRDialogflow_IntentMessageBasicCardButton;
@class GTLRDialogflow_IntentMessageBasicCardButtonOpenUriAction;
@class GTLRDialogflow_IntentMessageCard;
@class GTLRDialogflow_IntentMessageCardButton;
@class GTLRDialogflow_IntentMessageCarouselSelect;
@class GTLRDialogflow_IntentMessageCarouselSelectItem;
@class GTLRDialogflow_IntentMessageImage;
@class GTLRDialogflow_IntentMessageLinkOutSuggestion;
@class GTLRDialogflow_IntentMessageListSelect;
@class GTLRDialogflow_IntentMessageListSelectItem;
@class GTLRDialogflow_IntentMessageQuickReplies;
@class GTLRDialogflow_IntentMessageSelectItemInfo;
@class GTLRDialogflow_IntentMessageSimpleResponse;
@class GTLRDialogflow_IntentMessageSimpleResponses;
@class GTLRDialogflow_IntentMessageSuggestion;
@class GTLRDialogflow_IntentMessageSuggestions;
@class GTLRDialogflow_IntentMessageText;
@class GTLRDialogflow_IntentParameter;
@class GTLRDialogflow_IntentTrainingPhrase;
@class GTLRDialogflow_IntentTrainingPhrasePart;
@class GTLRDialogflow_LatLng;
@class GTLRDialogflow_Operation_Metadata;
@class GTLRDialogflow_Operation_Response;
@class GTLRDialogflow_OriginalDetectIntentRequest;
@class GTLRDialogflow_OriginalDetectIntentRequest_Payload;
@class GTLRDialogflow_QueryInput;
@class GTLRDialogflow_QueryParameters;
@class GTLRDialogflow_QueryParameters_Payload;
@class GTLRDialogflow_QueryResult;
@class GTLRDialogflow_QueryResult_DiagnosticInfo;
@class GTLRDialogflow_QueryResult_Parameters;
@class GTLRDialogflow_QueryResult_WebhookPayload;
@class GTLRDialogflow_SessionEntityType;
@class GTLRDialogflow_Status;
@class GTLRDialogflow_Status_Details_Item;
@class GTLRDialogflow_TextInput;
@class GTLRDialogflow_WebhookResponse_Payload;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRDialogflow_Agent.matchMode

/**
 *  Best for agents with a small number of examples in intents and/or wide
 *  use of templates syntax and composite entities.
 *
 *  Value: "MATCH_MODE_HYBRID"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_Agent_MatchMode_MatchModeHybrid;
/**
 *  Can be used for agents with a large number of examples in intents,
 *  especially the ones using \@sys.any or very large developer entities.
 *
 *  Value: "MATCH_MODE_ML_ONLY"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_Agent_MatchMode_MatchModeMlOnly;
/**
 *  Not specified.
 *
 *  Value: "MATCH_MODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_Agent_MatchMode_MatchModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDialogflow_BatchUpdateIntentsRequest.intentView

/**
 *  All fields are populated.
 *
 *  Value: "INTENT_VIEW_FULL"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_BatchUpdateIntentsRequest_IntentView_IntentViewFull;
/**
 *  Training phrases field is not populated in the response.
 *
 *  Value: "INTENT_VIEW_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_BatchUpdateIntentsRequest_IntentView_IntentViewUnspecified;

// ----------------------------------------------------------------------------
// GTLRDialogflow_EntityType.autoExpansionMode

/**
 *  Allows an agent to recognize values that have not been explicitly
 *  listed in the entity.
 *
 *  Value: "AUTO_EXPANSION_MODE_DEFAULT"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_EntityType_AutoExpansionMode_AutoExpansionModeDefault;
/**
 *  Auto expansion disabled for the entity.
 *
 *  Value: "AUTO_EXPANSION_MODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_EntityType_AutoExpansionMode_AutoExpansionModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDialogflow_EntityType.kind

/**
 *  List entity types contain a set of entries that do not map to canonical
 *  values. However, list entity types can contain references to other entity
 *  types (with or without aliases).
 *
 *  Value: "KIND_LIST"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_EntityType_Kind_KindList;
/**
 *  Map entity types allow mapping of a group of synonyms to a canonical
 *  value.
 *
 *  Value: "KIND_MAP"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_EntityType_Kind_KindMap;
/**
 *  Not specified. This value should be never used.
 *
 *  Value: "KIND_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_EntityType_Kind_KindUnspecified;

// ----------------------------------------------------------------------------
// GTLRDialogflow_InputAudioConfig.audioEncoding

/**
 *  Adaptive Multi-Rate Narrowband codec. `sample_rate_hertz` must be 8000.
 *
 *  Value: "AUDIO_ENCODING_AMR"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_InputAudioConfig_AudioEncoding_AudioEncodingAmr;
/**
 *  Adaptive Multi-Rate Wideband codec. `sample_rate_hertz` must be 16000.
 *
 *  Value: "AUDIO_ENCODING_AMR_WB"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_InputAudioConfig_AudioEncoding_AudioEncodingAmrWb;
/**
 *  [`FLAC`](https://xiph.org/flac/documentation.html) (Free Lossless Audio
 *  Codec) is the recommended encoding because it is lossless (therefore
 *  recognition is not compromised) and requires only about half the
 *  bandwidth of `LINEAR16`. `FLAC` stream encoding supports 16-bit and
 *  24-bit samples, however, not all fields in `STREAMINFO` are supported.
 *
 *  Value: "AUDIO_ENCODING_FLAC"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_InputAudioConfig_AudioEncoding_AudioEncodingFlac;
/**
 *  Uncompressed 16-bit signed little-endian samples (Linear PCM).
 *
 *  Value: "AUDIO_ENCODING_LINEAR_16"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_InputAudioConfig_AudioEncoding_AudioEncodingLinear16;
/**
 *  8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
 *
 *  Value: "AUDIO_ENCODING_MULAW"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_InputAudioConfig_AudioEncoding_AudioEncodingMulaw;
/**
 *  Opus encoded audio frames in Ogg container
 *  ([OggOpus](https://wiki.xiph.org/OggOpus)).
 *  `sample_rate_hertz` must be 16000.
 *
 *  Value: "AUDIO_ENCODING_OGG_OPUS"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_InputAudioConfig_AudioEncoding_AudioEncodingOggOpus;
/**
 *  Although the use of lossy encodings is not recommended, if a very low
 *  bitrate encoding is required, `OGG_OPUS` is highly preferred over
 *  Speex encoding. The [Speex](https://speex.org/) encoding supported by
 *  Dialogflow API has a header byte in each block, as in MIME type
 *  `audio/x-speex-with-header-byte`.
 *  It is a variant of the RTP Speex encoding defined in
 *  [RFC 5574](https://tools.ietf.org/html/rfc5574).
 *  The stream is a sequence of blocks, one block per RTP packet. Each block
 *  starts with a byte containing the length of the block, in bytes, followed
 *  by one or more frames of Speex data, padded to an integral number of
 *  bytes (octets) as specified in RFC 5574. In other words, each RTP header
 *  is replaced with a single byte containing the block length. Only Speex
 *  wideband is supported. `sample_rate_hertz` must be 16000.
 *
 *  Value: "AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_InputAudioConfig_AudioEncoding_AudioEncodingSpeexWithHeaderByte;
/**
 *  Not specified.
 *
 *  Value: "AUDIO_ENCODING_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_InputAudioConfig_AudioEncoding_AudioEncodingUnspecified;

// ----------------------------------------------------------------------------
// GTLRDialogflow_Intent.defaultResponsePlatforms

/** Value: "ACTIONS_ON_GOOGLE" */
GTLR_EXTERN NSString * const kGTLRDialogflow_Intent_DefaultResponsePlatforms_ActionsOnGoogle;
/** Value: "FACEBOOK" */
GTLR_EXTERN NSString * const kGTLRDialogflow_Intent_DefaultResponsePlatforms_Facebook;
/** Value: "KIK" */
GTLR_EXTERN NSString * const kGTLRDialogflow_Intent_DefaultResponsePlatforms_Kik;
/** Value: "LINE" */
GTLR_EXTERN NSString * const kGTLRDialogflow_Intent_DefaultResponsePlatforms_Line;
/** Value: "PLATFORM_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRDialogflow_Intent_DefaultResponsePlatforms_PlatformUnspecified;
/** Value: "SKYPE" */
GTLR_EXTERN NSString * const kGTLRDialogflow_Intent_DefaultResponsePlatforms_Skype;
/** Value: "SLACK" */
GTLR_EXTERN NSString * const kGTLRDialogflow_Intent_DefaultResponsePlatforms_Slack;
/** Value: "TELEGRAM" */
GTLR_EXTERN NSString * const kGTLRDialogflow_Intent_DefaultResponsePlatforms_Telegram;
/** Value: "VIBER" */
GTLR_EXTERN NSString * const kGTLRDialogflow_Intent_DefaultResponsePlatforms_Viber;

// ----------------------------------------------------------------------------
// GTLRDialogflow_Intent.webhookState

/**
 *  Webhook is enabled in the agent and in the intent.
 *
 *  Value: "WEBHOOK_STATE_ENABLED"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_Intent_WebhookState_WebhookStateEnabled;
/**
 *  Webhook is enabled in the agent and in the intent. Also, each slot
 *  filling prompt is forwarded to the webhook.
 *
 *  Value: "WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_Intent_WebhookState_WebhookStateEnabledForSlotFilling;
/**
 *  Webhook is disabled in the agent and in the intent.
 *
 *  Value: "WEBHOOK_STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_Intent_WebhookState_WebhookStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRDialogflow_IntentMessage.platform

/**
 *  Actions on Google.
 *
 *  Value: "ACTIONS_ON_GOOGLE"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_IntentMessage_Platform_ActionsOnGoogle;
/**
 *  Facebook.
 *
 *  Value: "FACEBOOK"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_IntentMessage_Platform_Facebook;
/**
 *  Kik.
 *
 *  Value: "KIK"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_IntentMessage_Platform_Kik;
/**
 *  Line.
 *
 *  Value: "LINE"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_IntentMessage_Platform_Line;
/**
 *  Not specified.
 *
 *  Value: "PLATFORM_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_IntentMessage_Platform_PlatformUnspecified;
/**
 *  Skype.
 *
 *  Value: "SKYPE"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_IntentMessage_Platform_Skype;
/**
 *  Slack.
 *
 *  Value: "SLACK"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_IntentMessage_Platform_Slack;
/**
 *  Telegram.
 *
 *  Value: "TELEGRAM"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_IntentMessage_Platform_Telegram;
/**
 *  Viber.
 *
 *  Value: "VIBER"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_IntentMessage_Platform_Viber;

// ----------------------------------------------------------------------------
// GTLRDialogflow_IntentTrainingPhrase.type

/**
 *  Examples do not contain \@-prefixed entity type names, but example parts
 *  can be annotated with entity types.
 *
 *  Value: "EXAMPLE"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_IntentTrainingPhrase_Type_Example;
/**
 *  Templates are not annotated with entity types, but they can contain
 *  \@-prefixed entity type names as substrings.
 *
 *  Value: "TEMPLATE"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_IntentTrainingPhrase_Type_Template;
/**
 *  Not specified. This value should never be used.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_IntentTrainingPhrase_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDialogflow_SessionEntityType.entityOverrideMode

/**
 *  The collection of session entities overrides the collection of entities
 *  in the corresponding developer entity type.
 *
 *  Value: "ENTITY_OVERRIDE_MODE_OVERRIDE"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_SessionEntityType_EntityOverrideMode_EntityOverrideModeOverride;
/**
 *  The collection of session entities extends the collection of entities in
 *  the corresponding developer entity type.
 *  Calls to `ListSessionEntityTypes`, `GetSessionEntityType`,
 *  `CreateSessionEntityType` and `UpdateSessionEntityType` return the full
 *  collection of entities from the developer entity type in the agent's
 *  default language and the session entity type.
 *
 *  Value: "ENTITY_OVERRIDE_MODE_SUPPLEMENT"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_SessionEntityType_EntityOverrideMode_EntityOverrideModeSupplement;
/**
 *  Not specified. This value should be never used.
 *
 *  Value: "ENTITY_OVERRIDE_MODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDialogflow_SessionEntityType_EntityOverrideMode_EntityOverrideModeUnspecified;

/**
 *  Represents a conversational agent.
 */
@interface GTLRDialogflow_Agent : GTLRObject

/**
 *  Optional. The URI of the agent's avatar.
 *  Avatars are used throughout API.AI console and in the self-hosted
 *  [Web Demo](https://dialogflow.com/docs/integrations/web-demo) integration.
 */
@property(nonatomic, copy, nullable) NSString *avatarUri;

/**
 *  Optional. To filter out false positive results and still get variety in
 *  matched natural language inputs for your agent, you can tune the machine
 *  learning classification threshold. If the returned score value is less than
 *  the threshold value, then a fallback intent is be triggered or, if there
 *  are no fallback intents defined, no intent will be triggered. The score
 *  values range from 0.0 (completely uncertain) to 1.0 (completely certain).
 *  If set to 0.0, the default of 0.3 is used.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *classificationThreshold;

/**
 *  Required. The default language of the agent as a language tag. See
 *  [Language Support](https://dialogflow.com/docs/reference/language) for a
 *  list of the currently supported language codes.
 *  This field cannot be set by the `Update` method.
 */
@property(nonatomic, copy, nullable) NSString *defaultLanguageCode;

/**
 *  Optional. The description of this agent.
 *  The maximum length is 500 characters. If exceeded, the request is rejected.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Required. The name of this agent. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Optional. Determines whether this agent should log conversation queries.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableLogging;

/**
 *  Optional. Determines how intents are detected from user queries.
 *
 *  Likely values:
 *    @arg @c kGTLRDialogflow_Agent_MatchMode_MatchModeHybrid Best for agents
 *        with a small number of examples in intents and/or wide
 *        use of templates syntax and composite entities. (Value:
 *        "MATCH_MODE_HYBRID")
 *    @arg @c kGTLRDialogflow_Agent_MatchMode_MatchModeMlOnly Can be used for
 *        agents with a large number of examples in intents,
 *        especially the ones using \@sys.any or very large developer entities.
 *        (Value: "MATCH_MODE_ML_ONLY")
 *    @arg @c kGTLRDialogflow_Agent_MatchMode_MatchModeUnspecified Not
 *        specified. (Value: "MATCH_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *matchMode;

/**
 *  Required. The project of this agent.
 *  Format: `projects/<Project ID>`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. The list of all languages supported by this agent (except for the
 *  `default_language_code`).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedLanguageCodes;

/**
 *  Required. The time zone of this agent from the
 *  [time zone database](https://www.iana.org/time-zones), e.g.,
 *  America/New_York, Europe/Paris.
 */
@property(nonatomic, copy, nullable) NSString *timeZone;

@end


/**
 *  The request message for EntityTypes.BatchCreateEntities.
 */
@interface GTLRDialogflow_BatchCreateEntitiesRequest : GTLRObject

/** Required. The collection of entities to create. */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_EntityTypeEntity *> *entities;

/**
 *  Optional. The language of entity synonyms defined in `entities`. If not
 *  specified, the agent's default language is used.
 *  [More than a dozen
 *  languages](https://dialogflow.com/docs/reference/language) are supported.
 *  Note: languages must be enabled in the agent, before they can be used.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

@end


/**
 *  The request message for EntityTypes.BatchDeleteEntities.
 */
@interface GTLRDialogflow_BatchDeleteEntitiesRequest : GTLRObject

/**
 *  Required. The canonical `values` of the entities to delete. Note that
 *  these are not fully-qualified names, i.e. they don't start with
 *  `projects/<Project ID>`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *entityValues;

/**
 *  Optional. The language of entity synonyms defined in `entities`. If not
 *  specified, the agent's default language is used.
 *  [More than a dozen
 *  languages](https://dialogflow.com/docs/reference/language) are supported.
 *  Note: languages must be enabled in the agent, before they can be used.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

@end


/**
 *  The request message for EntityTypes.BatchDeleteEntityTypes.
 */
@interface GTLRDialogflow_BatchDeleteEntityTypesRequest : GTLRObject

/**
 *  Required. The names entity types to delete. All names must point to the
 *  same agent as `parent`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *entityTypeNames;

@end


/**
 *  The request message for Intents.BatchDeleteIntents.
 */
@interface GTLRDialogflow_BatchDeleteIntentsRequest : GTLRObject

/**
 *  Required. The collection of intents to delete. Only intent `name` must be
 *  filled in.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_Intent *> *intents;

@end


/**
 *  The response message for EntityTypes.BatchCreateEntities.
 */
@interface GTLRDialogflow_BatchUpdateEntitiesRequest : GTLRObject

/**
 *  Required. The collection of new entities to replace the existing entities.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_EntityTypeEntity *> *entities;

/**
 *  Optional. The language of entity synonyms defined in `entities`. If not
 *  specified, the agent's default language is used.
 *  [More than a dozen
 *  languages](https://dialogflow.com/docs/reference/language) are supported.
 *  Note: languages must be enabled in the agent, before they can be used.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Optional. The mask to control which fields get updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  The request message for EntityTypes.BatchUpdateEntityTypes.
 */
@interface GTLRDialogflow_BatchUpdateEntityTypesRequest : GTLRObject

/** The collection of entity type to update or create. */
@property(nonatomic, strong, nullable) GTLRDialogflow_EntityTypeBatch *entityTypeBatchInline;

/**
 *  Warning: Importing entity types from a URI is not implemented yet.
 *  This feature is coming soon.
 *  The URI to a Google Cloud Storage file containing entity types to update
 *  or create. The file format can either be a serialized proto (of
 *  EntityBatch type) or a JSON object. Note: The URI must start with
 *  "gs://".
 */
@property(nonatomic, copy, nullable) NSString *entityTypeBatchUri;

/**
 *  Optional. The language of entity synonyms defined in `entity_types`. If not
 *  specified, the agent's default language is used.
 *  [More than a dozen
 *  languages](https://dialogflow.com/docs/reference/language) are supported.
 *  Note: languages must be enabled in the agent, before they can be used.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Optional. The mask to control which fields get updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  The response message for EntityTypes.BatchUpdateEntityTypes.
 */
@interface GTLRDialogflow_BatchUpdateEntityTypesResponse : GTLRObject

/** The collection of updated or created entity types. */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_EntityType *> *entityTypes;

@end


/**
 *  The request message for Intents.BatchUpdateIntents.
 */
@interface GTLRDialogflow_BatchUpdateIntentsRequest : GTLRObject

/** The collection of intents to update or create. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentBatch *intentBatchInline;

/**
 *  Warning: Importing intents from a URI is not implemented yet.
 *  This feature is coming soon.
 *  The URI to a Google Cloud Storage file containing intents to update or
 *  create. The file format can either be a serialized proto (of IntentBatch
 *  type) or JSON object. Note: The URI must start with "gs://".
 */
@property(nonatomic, copy, nullable) NSString *intentBatchUri;

/**
 *  Optional. The resource view to apply to the returned intent.
 *
 *  Likely values:
 *    @arg @c kGTLRDialogflow_BatchUpdateIntentsRequest_IntentView_IntentViewFull
 *        All fields are populated. (Value: "INTENT_VIEW_FULL")
 *    @arg @c kGTLRDialogflow_BatchUpdateIntentsRequest_IntentView_IntentViewUnspecified
 *        Training phrases field is not populated in the response. (Value:
 *        "INTENT_VIEW_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *intentView;

/**
 *  Optional. The language of training phrases, parameters and rich messages
 *  defined in `intents`. If not specified, the agent's default language is
 *  used. [More than a dozen
 *  languages](https://dialogflow.com/docs/reference/language) are supported.
 *  Note: languages must be enabled in the agent, before they can be used.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Optional. The mask to control which fields get updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  The response message for Intents.BatchUpdateIntents.
 */
@interface GTLRDialogflow_BatchUpdateIntentsResponse : GTLRObject

/** The collection of updated or created intents. */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_Intent *> *intents;

@end


/**
 *  Represents a context.
 */
@interface GTLRDialogflow_Context : GTLRObject

/**
 *  Optional. The number of conversational query requests after which the
 *  context expires. If set to `0` (the default) the context expires
 *  immediately. Contexts expire automatically after 10 minutes even if there
 *  are no matching queries.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lifespanCount;

/**
 *  Required. The unique identifier of the context. Format:
 *  `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context ID>`.
 *  Note: The Context ID is always converted to lowercase.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The collection of parameters associated with this context.
 *  Refer to [this doc](https://dialogflow.com/docs/actions-and-parameters) for
 *  syntax.
 */
@property(nonatomic, strong, nullable) GTLRDialogflow_Context_Parameters *parameters;

@end


/**
 *  Optional. The collection of parameters associated with this context.
 *  Refer to [this doc](https://dialogflow.com/docs/actions-and-parameters) for
 *  syntax.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDialogflow_Context_Parameters : GTLRObject
@end


/**
 *  The request to detect user's intent.
 */
@interface GTLRDialogflow_DetectIntentRequest : GTLRObject

/**
 *  Optional. The natural language speech audio to be processed. This field
 *  should be populated iff `query_input` is set to an input audio config.
 *  A single request can contain up to 1 minute of speech audio data.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *inputAudio;

/**
 *  Required. The input specification. It can be set to:
 *  1. an audio config
 *  which instructs the speech recognizer how to process the speech audio,
 *  2. a conversational query in the form of text, or
 *  3. an event that specifies which intent to trigger.
 */
@property(nonatomic, strong, nullable) GTLRDialogflow_QueryInput *queryInput;

/** Optional. The parameters of this query. */
@property(nonatomic, strong, nullable) GTLRDialogflow_QueryParameters *queryParams;

@end


/**
 *  The message returned from the DetectIntent method.
 */
@interface GTLRDialogflow_DetectIntentResponse : GTLRObject

/** The results of the conversational query or event processing. */
@property(nonatomic, strong, nullable) GTLRDialogflow_QueryResult *queryResult;

/**
 *  The unique identifier of the response. It can be used to
 *  locate a response in the training example set or for reporting issues.
 */
@property(nonatomic, copy, nullable) NSString *responseId;

/**
 *  Specifies the status of the webhook request. `webhook_status`
 *  is never populated in webhook requests.
 */
@property(nonatomic, strong, nullable) GTLRDialogflow_Status *webhookStatus;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRDialogflow_Empty : GTLRObject
@end


/**
 *  Represents an entity type.
 *  Entity types serve as a tool for extracting parameter values from natural
 *  language queries.
 */
@interface GTLRDialogflow_EntityType : GTLRObject

/**
 *  Optional. Indicates whether the entity type can be automatically
 *  expanded.
 *
 *  Likely values:
 *    @arg @c kGTLRDialogflow_EntityType_AutoExpansionMode_AutoExpansionModeDefault
 *        Allows an agent to recognize values that have not been explicitly
 *        listed in the entity. (Value: "AUTO_EXPANSION_MODE_DEFAULT")
 *    @arg @c kGTLRDialogflow_EntityType_AutoExpansionMode_AutoExpansionModeUnspecified
 *        Auto expansion disabled for the entity. (Value:
 *        "AUTO_EXPANSION_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *autoExpansionMode;

/** Required. The name of the entity. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Optional. The collection of entities associated with the entity type. */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_EntityTypeEntity *> *entities;

/**
 *  Required. Indicates the kind of entity type.
 *
 *  Likely values:
 *    @arg @c kGTLRDialogflow_EntityType_Kind_KindList List entity types contain
 *        a set of entries that do not map to canonical
 *        values. However, list entity types can contain references to other
 *        entity
 *        types (with or without aliases). (Value: "KIND_LIST")
 *    @arg @c kGTLRDialogflow_EntityType_Kind_KindMap Map entity types allow
 *        mapping of a group of synonyms to a canonical
 *        value. (Value: "KIND_MAP")
 *    @arg @c kGTLRDialogflow_EntityType_Kind_KindUnspecified Not specified.
 *        This value should be never used. (Value: "KIND_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Required for all methods except `create` (`create` populates the name
 *  automatically.
 *  The unique identifier of the entity type. Format:
 *  `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  This message is a wrapper around a collection of entity types.
 */
@interface GTLRDialogflow_EntityTypeBatch : GTLRObject

/** A collection of entity types. */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_EntityType *> *entityTypes;

@end


/**
 *  Optional. Represents an entity.
 */
@interface GTLRDialogflow_EntityTypeEntity : GTLRObject

/**
 *  Required. A collection of synonyms. For `KIND_LIST` entity types this
 *  must contain exactly one synonym equal to `value`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *synonyms;

/**
 *  Required.
 *  For `KIND_MAP` entity types:
 *  A canonical name to be used in place of synonyms.
 *  For `KIND_LIST` entity types:
 *  A string that can contain references to other entity types (with or
 *  without aliases).
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Events allow for matching intents by event name instead of the natural
 *  language input. For instance, input
 *  `<event: { name: “welcome_event”, 
 parameters: { name: “Sam” } }>` can
 *  trigger a personalized welcome response.
 *  The parameter `name` may be used by the agent in the response:
 *  `“Hello #welcome_event.name! What can I do for you today?”`.
 */
@interface GTLRDialogflow_EventInput : GTLRObject

/**
 *  Required. The language of this query. See [Language
 *  Support](https://dialogflow.com/docs/languages) for a list of the
 *  currently supported language codes. Note that queries in the same session
 *  do not necessarily need to specify the same language.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/** Required. The unique identifier of the event. */
@property(nonatomic, copy, nullable) NSString *name;

/** Optional. The collection of parameters associated with the event. */
@property(nonatomic, strong, nullable) GTLRDialogflow_EventInput_Parameters *parameters;

@end


/**
 *  Optional. The collection of parameters associated with the event.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDialogflow_EventInput_Parameters : GTLRObject
@end


/**
 *  The request message for Agents.ExportAgent.
 */
@interface GTLRDialogflow_ExportAgentRequest : GTLRObject

/**
 *  Warning: Exporting agents to a URI is not implemented yet.
 *  This feature is coming soon.
 *  Optional. The Google Cloud Storage URI to export the agent to.
 *  Note: The URI must start with
 *  "gs://". If left unspecified, the serialized agent is returned inline.
 */
@property(nonatomic, copy, nullable) NSString *agentUri;

@end


/**
 *  The response message for Agents.ExportAgent.
 */
@interface GTLRDialogflow_ExportAgentResponse : GTLRObject

/**
 *  The exported agent.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *agentContent;

/**
 *  The URI to a file containing the exported agent. This field is populated
 *  only if `agent_uri`
 */
@property(nonatomic, copy, nullable) NSString *agentUri;

@end


/**
 *  The request message for Agents.ImportAgent.
 */
@interface GTLRDialogflow_ImportAgentRequest : GTLRObject

/**
 *  The agent to import.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *agentContent;

/**
 *  Warning: Importing agents from a URI is not implemented yet.
 *  This feature is coming soon.
 *  The URI to a Google Cloud Storage file containing the agent to import.
 *  Note: The URI must start with "gs://".
 */
@property(nonatomic, copy, nullable) NSString *agentUri;

@end


/**
 *  Instructs the speech recognizer how to process the audio content.
 */
@interface GTLRDialogflow_InputAudioConfig : GTLRObject

/**
 *  Required. Audio encoding of the audio content to process.
 *
 *  Likely values:
 *    @arg @c kGTLRDialogflow_InputAudioConfig_AudioEncoding_AudioEncodingAmr
 *        Adaptive Multi-Rate Narrowband codec. `sample_rate_hertz` must be
 *        8000. (Value: "AUDIO_ENCODING_AMR")
 *    @arg @c kGTLRDialogflow_InputAudioConfig_AudioEncoding_AudioEncodingAmrWb
 *        Adaptive Multi-Rate Wideband codec. `sample_rate_hertz` must be 16000.
 *        (Value: "AUDIO_ENCODING_AMR_WB")
 *    @arg @c kGTLRDialogflow_InputAudioConfig_AudioEncoding_AudioEncodingFlac
 *        [`FLAC`](https://xiph.org/flac/documentation.html) (Free Lossless
 *        Audio
 *        Codec) is the recommended encoding because it is lossless (therefore
 *        recognition is not compromised) and requires only about half the
 *        bandwidth of `LINEAR16`. `FLAC` stream encoding supports 16-bit and
 *        24-bit samples, however, not all fields in `STREAMINFO` are supported.
 *        (Value: "AUDIO_ENCODING_FLAC")
 *    @arg @c kGTLRDialogflow_InputAudioConfig_AudioEncoding_AudioEncodingLinear16
 *        Uncompressed 16-bit signed little-endian samples (Linear PCM). (Value:
 *        "AUDIO_ENCODING_LINEAR_16")
 *    @arg @c kGTLRDialogflow_InputAudioConfig_AudioEncoding_AudioEncodingMulaw
 *        8-bit samples that compand 14-bit audio samples using G.711
 *        PCMU/mu-law. (Value: "AUDIO_ENCODING_MULAW")
 *    @arg @c kGTLRDialogflow_InputAudioConfig_AudioEncoding_AudioEncodingOggOpus
 *        Opus encoded audio frames in Ogg container
 *        ([OggOpus](https://wiki.xiph.org/OggOpus)).
 *        `sample_rate_hertz` must be 16000. (Value: "AUDIO_ENCODING_OGG_OPUS")
 *    @arg @c kGTLRDialogflow_InputAudioConfig_AudioEncoding_AudioEncodingSpeexWithHeaderByte
 *        Although the use of lossy encodings is not recommended, if a very low
 *        bitrate encoding is required, `OGG_OPUS` is highly preferred over
 *        Speex encoding. The [Speex](https://speex.org/) encoding supported by
 *        Dialogflow API has a header byte in each block, as in MIME type
 *        `audio/x-speex-with-header-byte`.
 *        It is a variant of the RTP Speex encoding defined in
 *        [RFC 5574](https://tools.ietf.org/html/rfc5574).
 *        The stream is a sequence of blocks, one block per RTP packet. Each
 *        block
 *        starts with a byte containing the length of the block, in bytes,
 *        followed
 *        by one or more frames of Speex data, padded to an integral number of
 *        bytes (octets) as specified in RFC 5574. In other words, each RTP
 *        header
 *        is replaced with a single byte containing the block length. Only Speex
 *        wideband is supported. `sample_rate_hertz` must be 16000. (Value:
 *        "AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE")
 *    @arg @c kGTLRDialogflow_InputAudioConfig_AudioEncoding_AudioEncodingUnspecified
 *        Not specified. (Value: "AUDIO_ENCODING_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *audioEncoding;

/**
 *  Required. The language of the supplied audio. Dialogflow does not do
 *  translations. See [Language
 *  Support](https://dialogflow.com/docs/languages) for a list of the
 *  currently supported language codes. Note that queries in the same session
 *  do not necessarily need to specify the same language.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Optional. The collection of phrase hints which are used to boost accuracy
 *  of speech recognition.
 *  Refer to [Cloud Speech API documentation](/speech/docs/basics#phrase-hints)
 *  for more details.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *phraseHints;

/**
 *  Required. Sample rate (in Hertz) of the audio content sent in the query.
 *  Refer to [Cloud Speech API documentation](/speech/docs/basics) for more
 *  details.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sampleRateHertz;

@end


/**
 *  Represents an intent.
 *  Intents convert a number of user expressions or patterns into an action. An
 *  action is an extraction of a user command or sentence semantics.
 */
@interface GTLRDialogflow_Intent : GTLRObject

/** Optional. The name of the action associated with the intent. */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  Optional. The list of platforms for which the first response will be
 *  taken from among the messages assigned to the DEFAULT_PLATFORM.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *defaultResponsePlatforms;

/** Required. The name of this intent. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Optional. The collection of event names that trigger the intent.
 *  If the collection of input contexts is not empty, all of the contexts must
 *  be present in the active user session for an event to trigger this intent.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *events;

/**
 *  Optional. Collection of information about all followup intents that have
 *  name of this intent as a root_name.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_IntentFollowupIntentInfo *> *followupIntentInfo;

/**
 *  Optional. The list of context names required for this intent to be
 *  triggered.
 *  Format: `projects/<Project ID>/agent/sessions/-/contexts/<Context ID>`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *inputContextNames;

/**
 *  Optional. Indicates whether this is a fallback intent.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isFallback;

/**
 *  Optional. The collection of rich messages corresponding to the
 *  `Response` field in API.AI console.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_IntentMessage *> *messages;

/**
 *  Optional. Indicates whether Machine Learning is enabled for the intent.
 *  Note: If `ml_enabled` setting is set to false, then this intent is not
 *  taken into account during inference in `ML ONLY` match mode. Also,
 *  auto-markup in the UI is turned off.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *mlEnabled;

/**
 *  Required for all methods except `create` (`create` populates the name
 *  automatically.
 *  The unique identifier of this intent.
 *  Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The collection of contexts that are activated when the intent
 *  is matched. Context messages in this collection should not set the
 *  parameters field. Setting the `lifespan_count` to 0 will reset the context
 *  when the intent is matched.
 *  Format: `projects/<Project ID>/agent/sessions/-/contexts/<Context ID>`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_Context *> *outputContexts;

/** Optional. The collection of parameters associated with the intent. */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_IntentParameter *> *parameters;

/**
 *  The unique identifier of the parent intent in the chain of followup
 *  intents.
 *  It identifies the parent followup intent.
 *  Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
 */
@property(nonatomic, copy, nullable) NSString *parentFollowupIntentName;

/**
 *  Optional. The priority of this intent. Higher numbers represent higher
 *  priorities. Zero or negative numbers mean that the intent is disabled.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *priority;

/**
 *  Optional. Indicates whether to delete all contexts in the current
 *  session when this intent is matched.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resetContexts;

/**
 *  The unique identifier of the root intent in the chain of followup intents.
 *  It identifies the correct followup intents chain for this intent.
 *  Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
 */
@property(nonatomic, copy, nullable) NSString *rootFollowupIntentName;

/**
 *  Optional. The collection of examples/templates that the agent is
 *  trained on.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_IntentTrainingPhrase *> *trainingPhrases;

/**
 *  Required. Indicates whether webhooks are enabled for the intent.
 *
 *  Likely values:
 *    @arg @c kGTLRDialogflow_Intent_WebhookState_WebhookStateEnabled Webhook is
 *        enabled in the agent and in the intent. (Value:
 *        "WEBHOOK_STATE_ENABLED")
 *    @arg @c kGTLRDialogflow_Intent_WebhookState_WebhookStateEnabledForSlotFilling
 *        Webhook is enabled in the agent and in the intent. Also, each slot
 *        filling prompt is forwarded to the webhook. (Value:
 *        "WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING")
 *    @arg @c kGTLRDialogflow_Intent_WebhookState_WebhookStateUnspecified
 *        Webhook is disabled in the agent and in the intent. (Value:
 *        "WEBHOOK_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *webhookState;

@end


/**
 *  This message is a wrapper around a collection of intents.
 */
@interface GTLRDialogflow_IntentBatch : GTLRObject

/** A collection of intents. */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_Intent *> *intents;

@end


/**
 *  Represents a single followup intent in the chain.
 */
@interface GTLRDialogflow_IntentFollowupIntentInfo : GTLRObject

/**
 *  The unique identifier of the followup intent.
 *  Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
 */
@property(nonatomic, copy, nullable) NSString *followupIntentName;

/**
 *  The unique identifier of the followup intent parent.
 *  Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
 */
@property(nonatomic, copy, nullable) NSString *parentFollowupIntentName;

@end


/**
 *  Corresponds to the `Response` field in API.AI console.
 */
@interface GTLRDialogflow_IntentMessage : GTLRObject

/** The basic card response for Actions on Google. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessageBasicCard *basicCard;

/** The card response. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessageCard *card;

/** The carousel card response for Actions on Google. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessageCarouselSelect *carouselSelect;

/** The image response. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessageImage *image;

/** The link out suggestion chip for Actions on Google. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessageLinkOutSuggestion *linkOutSuggestion;

/** The list card response for Actions on Google. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessageListSelect *listSelect;

/** The response containing a custom payload. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessage_Payload *payload;

/**
 *  Optional. The platform that this message is intended for.
 *
 *  Likely values:
 *    @arg @c kGTLRDialogflow_IntentMessage_Platform_ActionsOnGoogle Actions on
 *        Google. (Value: "ACTIONS_ON_GOOGLE")
 *    @arg @c kGTLRDialogflow_IntentMessage_Platform_Facebook Facebook. (Value:
 *        "FACEBOOK")
 *    @arg @c kGTLRDialogflow_IntentMessage_Platform_Kik Kik. (Value: "KIK")
 *    @arg @c kGTLRDialogflow_IntentMessage_Platform_Line Line. (Value: "LINE")
 *    @arg @c kGTLRDialogflow_IntentMessage_Platform_PlatformUnspecified Not
 *        specified. (Value: "PLATFORM_UNSPECIFIED")
 *    @arg @c kGTLRDialogflow_IntentMessage_Platform_Skype Skype. (Value:
 *        "SKYPE")
 *    @arg @c kGTLRDialogflow_IntentMessage_Platform_Slack Slack. (Value:
 *        "SLACK")
 *    @arg @c kGTLRDialogflow_IntentMessage_Platform_Telegram Telegram. (Value:
 *        "TELEGRAM")
 *    @arg @c kGTLRDialogflow_IntentMessage_Platform_Viber Viber. (Value:
 *        "VIBER")
 */
@property(nonatomic, copy, nullable) NSString *platform;

/** The quick replies response. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessageQuickReplies *quickReplies;

/** The voice and text-only responses for Actions on Google. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessageSimpleResponses *simpleResponses;

/** The suggestion chips for Actions on Google. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessageSuggestions *suggestions;

/** The text response. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessageText *text;

@end


/**
 *  The response containing a custom payload.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDialogflow_IntentMessage_Payload : GTLRObject
@end


/**
 *  The basic card message. Useful for displaying information.
 */
@interface GTLRDialogflow_IntentMessageBasicCard : GTLRObject

/** Optional. The collection of card buttons. */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_IntentMessageBasicCardButton *> *buttons;

/** Required, unless image is present. The body text of the card. */
@property(nonatomic, copy, nullable) NSString *formattedText;

/** Optional. The image for the card. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessageImage *image;

/** Optional. The subtitle of the card. */
@property(nonatomic, copy, nullable) NSString *subtitle;

/** Optional. The title of the card. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  The button object that appears at the bottom of a card.
 */
@interface GTLRDialogflow_IntentMessageBasicCardButton : GTLRObject

/** Required. Action to take when a user taps on the button. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessageBasicCardButtonOpenUriAction *openUriAction;

/** Required. The title of the button. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Opens the given URI.
 */
@interface GTLRDialogflow_IntentMessageBasicCardButtonOpenUriAction : GTLRObject

/** Required. The HTTP or HTTPS scheme URI. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  The card response message.
 */
@interface GTLRDialogflow_IntentMessageCard : GTLRObject

/** Optional. The collection of card buttons. */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_IntentMessageCardButton *> *buttons;

/** Optional. The public URI to an image file for the card. */
@property(nonatomic, copy, nullable) NSString *imageUri;

/** Optional. The subtitle of the card. */
@property(nonatomic, copy, nullable) NSString *subtitle;

/** Optional. The title of the card. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Optional. Contains information about a button.
 */
@interface GTLRDialogflow_IntentMessageCardButton : GTLRObject

/**
 *  Optional. The text to send back to the Dialogflow API or a URI to
 *  open.
 */
@property(nonatomic, copy, nullable) NSString *postback;

/** Optional. The text to show on the button. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  The card for presenting a carousel of options to select from.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRDialogflow_IntentMessageCarouselSelect : GTLRCollectionObject

/**
 *  Required. Carousel items.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_IntentMessageCarouselSelectItem *> *items;

@end


/**
 *  An item in the carousel.
 */
@interface GTLRDialogflow_IntentMessageCarouselSelectItem : GTLRObject

/**
 *  Optional. The body text of the card.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Optional. The image to display. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessageImage *image;

/** Required. Additional info about the option item. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessageSelectItemInfo *info;

/** Required. Title of the carousel item. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  The image response message.
 */
@interface GTLRDialogflow_IntentMessageImage : GTLRObject

/** Optional. The public URI to an image file. */
@property(nonatomic, copy, nullable) NSString *imageUri;

@end


/**
 *  The suggestion chip message that allows the user to jump out to the app
 *  or website associated with this agent.
 */
@interface GTLRDialogflow_IntentMessageLinkOutSuggestion : GTLRObject

/** Required. The name of the app or site this chip is linking to. */
@property(nonatomic, copy, nullable) NSString *destinationName;

/**
 *  Required. The URI of the app or site to open when the user taps the
 *  suggestion chip.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  The card for presenting a list of options to select from.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRDialogflow_IntentMessageListSelect : GTLRCollectionObject

/**
 *  Required. List items.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_IntentMessageListSelectItem *> *items;

/** Optional. The overall title of the list. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  An item in the list.
 */
@interface GTLRDialogflow_IntentMessageListSelectItem : GTLRObject

/**
 *  Optional. The main text describing the item.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Optional. The image to display. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessageImage *image;

/** Required. Additional information about this option. */
@property(nonatomic, strong, nullable) GTLRDialogflow_IntentMessageSelectItemInfo *info;

/** Required. The title of the list item. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  The quick replies response message.
 */
@interface GTLRDialogflow_IntentMessageQuickReplies : GTLRObject

/** Optional. The collection of quick replies. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *quickReplies;

/** Optional. The title of the collection of quick replies. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Additional info about the select item for when it is triggered in a
 *  dialog.
 */
@interface GTLRDialogflow_IntentMessageSelectItemInfo : GTLRObject

/**
 *  Required. A unique key that will be sent back to the agent if this
 *  response is given.
 */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  Optional. A list of synonyms that can also be used to trigger this
 *  item in dialog.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *synonyms;

@end


/**
 *  The simple response message containing speech or text.
 */
@interface GTLRDialogflow_IntentMessageSimpleResponse : GTLRObject

/** Optional. The text to display. */
@property(nonatomic, copy, nullable) NSString *displayText;

/**
 *  One of text_to_speech or ssml must be provided. Structured spoken
 *  response to the user in the SSML format. Mutually exclusive with
 *  text_to_speech.
 */
@property(nonatomic, copy, nullable) NSString *ssml;

/**
 *  One of text_to_speech or ssml must be provided. The plain text of the
 *  speech output. Mutually exclusive with ssml.
 */
@property(nonatomic, copy, nullable) NSString *textToSpeech;

@end


/**
 *  The collection of simple response candidates.
 *  This message in `QueryResult.fulfillment_messages` and
 *  `WebhookResponse.fulfillment_messages` should contain only one
 *  `SimpleResponse`.
 */
@interface GTLRDialogflow_IntentMessageSimpleResponses : GTLRObject

/** Required. The list of simple responses. */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_IntentMessageSimpleResponse *> *simpleResponses;

@end


/**
 *  The suggestion chip message that the user can tap to quickly post a reply
 *  to the conversation.
 */
@interface GTLRDialogflow_IntentMessageSuggestion : GTLRObject

/** Required. The text shown the in the suggestion chip. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  The collection of suggestions.
 */
@interface GTLRDialogflow_IntentMessageSuggestions : GTLRObject

/** Required. The list of suggested replies. */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_IntentMessageSuggestion *> *suggestions;

@end


/**
 *  The text response message.
 */
@interface GTLRDialogflow_IntentMessageText : GTLRObject

/** Optional. The collection of the agent's responses. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *text;

@end


/**
 *  Represents intent parameters.
 */
@interface GTLRDialogflow_IntentParameter : GTLRObject

/**
 *  Optional. The default value to use when the `value` yields an empty
 *  result.
 *  Default values can be extracted from contexts by using the following
 *  syntax: `#context_name.parameter_name`.
 */
@property(nonatomic, copy, nullable) NSString *defaultValue;

/** Required. The name of the parameter. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Optional. The name of the entity type, prefixed with `\@`, that
 *  describes values of the parameter. If the parameter is
 *  required, this must be provided.
 */
@property(nonatomic, copy, nullable) NSString *entityTypeDisplayName;

/**
 *  Optional. Indicates whether the parameter represents a list of values.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isList;

/**
 *  Optional. Indicates whether the parameter is required. That is,
 *  whether the intent cannot be completed without collecting the parameter
 *  value.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *mandatory;

/** The unique identifier of this parameter. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The collection of prompts that the agent can present to the
 *  user in order to collect value for the parameter.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *prompts;

/**
 *  Optional. The definition of the parameter value. It can be:
 *  - a constant string,
 *  - a parameter value defined as `$parameter_name`,
 *  - an original parameter value defined as `$parameter_name.original`,
 *  - a parameter value from some context defined as
 *  `#context_name.parameter_name`.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Represents an example or template that the agent is trained on.
 */
@interface GTLRDialogflow_IntentTrainingPhrase : GTLRObject

/** Required. The unique identifier of this training phrase. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The collection of training phrase parts (can be annotated).
 *  Fields: `entity_type`, `alias` and `user_defined` should be populated
 *  only for the annotated parts of the training phrase.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_IntentTrainingPhrasePart *> *parts;

/**
 *  Optional. Indicates how many times this example or template was added to
 *  the intent. Each time a developer adds an existing sample by editing an
 *  intent or training, this counter is increased.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timesAddedCount;

/**
 *  Required. The type of the training phrase.
 *
 *  Likely values:
 *    @arg @c kGTLRDialogflow_IntentTrainingPhrase_Type_Example Examples do not
 *        contain \@-prefixed entity type names, but example parts
 *        can be annotated with entity types. (Value: "EXAMPLE")
 *    @arg @c kGTLRDialogflow_IntentTrainingPhrase_Type_Template Templates are
 *        not annotated with entity types, but they can contain
 *        \@-prefixed entity type names as substrings. (Value: "TEMPLATE")
 *    @arg @c kGTLRDialogflow_IntentTrainingPhrase_Type_TypeUnspecified Not
 *        specified. This value should never be used. (Value:
 *        "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents a part of a training phrase.
 */
@interface GTLRDialogflow_IntentTrainingPhrasePart : GTLRObject

/**
 *  Optional. The parameter name for the value extracted from the
 *  annotated part of the example.
 */
@property(nonatomic, copy, nullable) NSString *alias;

/**
 *  Optional. The entity type name prefixed with `\@`. This field is
 *  required for the annotated part of the text and applies only to
 *  examples.
 */
@property(nonatomic, copy, nullable) NSString *entityType;

/**
 *  Required. The text corresponding to the example or template,
 *  if there are no annotations. For
 *  annotated examples, it is the text for one of the example's parts.
 */
@property(nonatomic, copy, nullable) NSString *text;

/**
 *  Optional. Indicates whether the text was manually annotated by the
 *  developer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *userDefined;

@end


/**
 *  An object representing a latitude/longitude pair. This is expressed as a
 *  pair
 *  of doubles representing degrees latitude and degrees longitude. Unless
 *  specified otherwise, this must conform to the
 *  <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
 *  standard</a>. Values must be within normalized ranges.
 */
@interface GTLRDialogflow_LatLng : GTLRObject

/**
 *  The latitude in degrees. It must be in the range [-90.0, +90.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latitude;

/**
 *  The longitude in degrees. It must be in the range [-180.0, +180.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longitude;

@end


/**
 *  The response message for Contexts.ListContexts.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "contexts" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDialogflow_ListContextsResponse : GTLRCollectionObject

/**
 *  The list of contexts. There will be a maximum number of items
 *  returned based on the page_size field in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_Context *> *contexts;

/**
 *  Token to retrieve the next page of results, or empty if there are no
 *  more results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for EntityTypes.ListEntityTypes.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "entityTypes" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDialogflow_ListEntityTypesResponse : GTLRCollectionObject

/**
 *  The list of agent entity types. There will be a maximum number of items
 *  returned based on the page_size field in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_EntityType *> *entityTypes;

/**
 *  Token to retrieve the next page of results, or empty if there are no
 *  more results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Intents.ListIntents.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "intents" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDialogflow_ListIntentsResponse : GTLRCollectionObject

/**
 *  The list of agent intents. There will be a maximum number of items
 *  returned based on the page_size field in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_Intent *> *intents;

/**
 *  Token to retrieve the next page of results, or empty if there are no
 *  more results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for SessionEntityTypes.ListSessionEntityTypes.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "sessionEntityTypes" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRDialogflow_ListSessionEntityTypesResponse : GTLRCollectionObject

/**
 *  Token to retrieve the next page of results, or empty if there are no
 *  more results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of session entity types. There will be a maximum number of items
 *  returned based on the page_size field in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_SessionEntityType *> *sessionEntityTypes;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRDialogflow_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRDialogflow_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRDialogflow_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the
 *  `name` should have the format of `operations/some/unique/name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRDialogflow_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDialogflow_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDialogflow_Operation_Response : GTLRObject
@end


/**
 *  Represents the contents of the original request that was passed to
 *  the `[Streaming]DetectIntent` call.
 */
@interface GTLRDialogflow_OriginalDetectIntentRequest : GTLRObject

/**
 *  Optional. This field is set to the value of `QueryParameters.payload` field
 *  passed in the request.
 */
@property(nonatomic, strong, nullable) GTLRDialogflow_OriginalDetectIntentRequest_Payload *payload;

/**
 *  The source of this request, e.g., `google`, `facebook`, `slack`. It is set
 *  by Dialogflow-owned servers. Possible values of this field correspond to
 *  Intent.Message.Platform.
 */
@property(nonatomic, copy, nullable) NSString *source;

@end


/**
 *  Optional. This field is set to the value of `QueryParameters.payload` field
 *  passed in the request.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDialogflow_OriginalDetectIntentRequest_Payload : GTLRObject
@end


/**
 *  Represents the query input. It can contain either:
 *  1. an audio config which
 *  instructs the speech recognizer how to process the speech audio,
 *  2. a conversational query in the form of text, or
 *  3. an event that specifies which intent to trigger.
 */
@interface GTLRDialogflow_QueryInput : GTLRObject

/** Instructs the speech recognizer how to process the speech audio. */
@property(nonatomic, strong, nullable) GTLRDialogflow_InputAudioConfig *audioConfig;

/** The event to be processed. */
@property(nonatomic, strong, nullable) GTLRDialogflow_EventInput *event;

/** The natural language text to be processed. */
@property(nonatomic, strong, nullable) GTLRDialogflow_TextInput *text;

@end


/**
 *  Represents the parameters of the conversational query.
 */
@interface GTLRDialogflow_QueryParameters : GTLRObject

/**
 *  Optional. The collection of contexts to be activated before this query is
 *  executed.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_Context *> *contexts;

/** Optional. The geo location of this conversational query. */
@property(nonatomic, strong, nullable) GTLRDialogflow_LatLng *geoLocation;

/**
 *  Optional. This field can be used to pass custom data into the webhook
 *  associated with the agent. Arbitrary JSON objects are supported.
 */
@property(nonatomic, strong, nullable) GTLRDialogflow_QueryParameters_Payload *payload;

/**
 *  Optional. Specifies whether to delete all contexts in the current session
 *  before the new ones are activated.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resetContexts;

/**
 *  Optional. The collection of session entity types to replace or extend
 *  developer entities with for this query only. The entity synonyms apply
 *  to all languages.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_SessionEntityType *> *sessionEntityTypes;

/**
 *  Optional. The time zone of this conversational query from the
 *  [time zone database](https://www.iana.org/time-zones), e.g.,
 *  America/New_York, Europe/Paris. If not provided, the time zone specified in
 *  agent settings is used.
 */
@property(nonatomic, copy, nullable) NSString *timeZone;

@end


/**
 *  Optional. This field can be used to pass custom data into the webhook
 *  associated with the agent. Arbitrary JSON objects are supported.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDialogflow_QueryParameters_Payload : GTLRObject
@end


/**
 *  Represents the result of conversational query or event processing.
 */
@interface GTLRDialogflow_QueryResult : GTLRObject

/** The action name from the matched intent. */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  This field is set to:
 *  - `false` if the matched intent has required parameters and not all of
 *  the required parameter values have been collected.
 *  - `true` if all required parameter values have been collected, or if the
 *  matched intent doesn't contain any required parameters.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allRequiredParamsPresent;

/**
 *  The free-form diagnostic info. For example, this field
 *  could contain webhook call latency.
 */
@property(nonatomic, strong, nullable) GTLRDialogflow_QueryResult_DiagnosticInfo *diagnosticInfo;

/** The collection of rich messages to present to the user. */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_IntentMessage *> *fulfillmentMessages;

/** The text to be pronounced to the user or shown on the screen. */
@property(nonatomic, copy, nullable) NSString *fulfillmentText;

/**
 *  The intent that matched the conversational query. Some, not
 *  all fields are filled in this message, including but not limited to:
 *  `name`, `display_name` and `webhook_state`.
 */
@property(nonatomic, strong, nullable) GTLRDialogflow_Intent *intent;

/**
 *  The intent detection confidence. Values range from 0.0
 *  (completely uncertain) to 1.0 (completely certain).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *intentDetectionConfidence;

/**
 *  The language that was triggered during intent detection.
 *  See [Language Support](https://dialogflow.com/docs/reference/language)
 *  for a list of the currently supported language codes.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  The collection of output contexts. If applicable,
 *  `output_contexts.parameters` contains entries with name
 *  `<parameter name>.original` containing the original parameter values
 *  before the query.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_Context *> *outputContexts;

/** The collection of extracted parameters. */
@property(nonatomic, strong, nullable) GTLRDialogflow_QueryResult_Parameters *parameters;

/**
 *  The original conversational query text:
 *  - If natural language text was provided as input, `query_text` contains
 *  a copy of the input.
 *  - If natural language speech audio was provided as input, `query_text`
 *  contains the speech recognition result. If speech recognizer produced
 *  multiple alternatives, a particular one is picked.
 *  - If an event was provided as input, `query_text` is not set.
 */
@property(nonatomic, copy, nullable) NSString *queryText;

/**
 *  The confidence estimate between 0.0 and 1.0. A higher number
 *  indicates an estimated greater likelihood that the recognized words are
 *  correct. The default of 0.0 is a sentinel value indicating that confidence
 *  was not set. This field is populated if natural speech audio was provided
 *  as input.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *speechRecognitionConfidence;

/**
 *  If the query was fulfilled by a webhook call, this field is set to the
 *  value of the `payload` field returned in the webhook response.
 */
@property(nonatomic, strong, nullable) GTLRDialogflow_QueryResult_WebhookPayload *webhookPayload;

/**
 *  If the query was fulfilled by a webhook call, this field is set to the
 *  value of the `source` field returned in the webhook response.
 */
@property(nonatomic, copy, nullable) NSString *webhookSource;

@end


/**
 *  The free-form diagnostic info. For example, this field
 *  could contain webhook call latency.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDialogflow_QueryResult_DiagnosticInfo : GTLRObject
@end


/**
 *  The collection of extracted parameters.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDialogflow_QueryResult_Parameters : GTLRObject
@end


/**
 *  If the query was fulfilled by a webhook call, this field is set to the
 *  value of the `payload` field returned in the webhook response.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDialogflow_QueryResult_WebhookPayload : GTLRObject
@end


/**
 *  The request message for Agents.RestoreAgent.
 */
@interface GTLRDialogflow_RestoreAgentRequest : GTLRObject

/**
 *  The agent to restore.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *agentContent;

/**
 *  Warning: Restoring agents from a URI is not implemented yet.
 *  This feature is coming soon.
 *  The URI to a Google Cloud Storage file containing the agent to restore.
 *  Note: The URI must start with "gs://".
 */
@property(nonatomic, copy, nullable) NSString *agentUri;

@end


/**
 *  The response message for Agents.SearchAgents.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "agents" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDialogflow_SearchAgentsResponse : GTLRCollectionObject

/**
 *  The list of agents. There will be a maximum number of items returned based
 *  on the page_size field in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_Agent *> *agents;

/**
 *  Token to retrieve the next page of results, or empty if there are no
 *  more results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Represents a session entity type.
 *  Extends or replaces a developer entity type at the user session level (we
 *  refer to the entity types defined at the agent level as "developer entity
 *  types").
 *  Note: session entity types apply to all queries, regardless of the language.
 */
@interface GTLRDialogflow_SessionEntityType : GTLRObject

/**
 *  Required. The collection of entities associated with this session entity
 *  type.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_EntityTypeEntity *> *entities;

/**
 *  Required. Indicates whether the additional data should override or
 *  supplement the developer entity type definition.
 *
 *  Likely values:
 *    @arg @c kGTLRDialogflow_SessionEntityType_EntityOverrideMode_EntityOverrideModeOverride
 *        The collection of session entities overrides the collection of
 *        entities
 *        in the corresponding developer entity type. (Value:
 *        "ENTITY_OVERRIDE_MODE_OVERRIDE")
 *    @arg @c kGTLRDialogflow_SessionEntityType_EntityOverrideMode_EntityOverrideModeSupplement
 *        The collection of session entities extends the collection of entities
 *        in
 *        the corresponding developer entity type.
 *        Calls to `ListSessionEntityTypes`, `GetSessionEntityType`,
 *        `CreateSessionEntityType` and `UpdateSessionEntityType` return the
 *        full
 *        collection of entities from the developer entity type in the agent's
 *        default language and the session entity type. (Value:
 *        "ENTITY_OVERRIDE_MODE_SUPPLEMENT")
 *    @arg @c kGTLRDialogflow_SessionEntityType_EntityOverrideMode_EntityOverrideModeUnspecified
 *        Not specified. This value should be never used. (Value:
 *        "ENTITY_OVERRIDE_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *entityOverrideMode;

/**
 *  Required. The unique identifier of this session entity type. Format:
 *  `projects/<Project ID>/agent/sessions/<Session
 *  ID>/entityTypes/<Entity Type 
 Display Name>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRDialogflow_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRDialogflow_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDialogflow_Status_Details_Item : GTLRObject
@end


/**
 *  Represents the natural language text to be processed.
 */
@interface GTLRDialogflow_TextInput : GTLRObject

/**
 *  Required. The language of this conversational query. See [Language
 *  Support](https://dialogflow.com/docs/languages) for a list of the
 *  currently supported language codes. Note that queries in the same session
 *  do not necessarily need to specify the same language.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Required. The UTF-8 encoded natural language text to be processed.
 *  Text length must not exceed 256 bytes.
 */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  The request message for Agents.TrainAgent.
 */
@interface GTLRDialogflow_TrainAgentRequest : GTLRObject
@end


/**
 *  The request message for a webhook call.
 */
@interface GTLRDialogflow_WebhookRequest : GTLRObject

/**
 *  Optional. The contents of the original request that was passed to
 *  `[Streaming]DetectIntent` call.
 */
@property(nonatomic, strong, nullable) GTLRDialogflow_OriginalDetectIntentRequest *originalDetectIntentRequest;

/**
 *  The result of the conversational query or event processing. Contains the
 *  same value as `[Streaming]DetectIntentResponse.query_result`.
 */
@property(nonatomic, strong, nullable) GTLRDialogflow_QueryResult *queryResult;

/**
 *  The unique identifier of the response. Contains the same value as
 *  `[Streaming]DetectIntentResponse.response_id`.
 */
@property(nonatomic, copy, nullable) NSString *responseId;

/**
 *  The unique identifier of detectIntent request session.
 *  Can be used to identify end-user inside webhook implementation.
 *  Format: `projects/<Project ID>/agent/sessions/<Session ID>`.
 */
@property(nonatomic, copy, nullable) NSString *session;

@end


/**
 *  The response message for a webhook call.
 */
@interface GTLRDialogflow_WebhookResponse : GTLRObject

/**
 *  Optional. Makes the platform immediately invoke another `DetectIntent` call
 *  internally with the specified event as input.
 */
@property(nonatomic, strong, nullable) GTLRDialogflow_EventInput *followupEventInput;

/**
 *  Optional. The collection of rich messages to present to the user. This
 *  value is passed directly to `QueryResult.fulfillment_messages`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_IntentMessage *> *fulfillmentMessages;

/**
 *  Optional. The text to be shown on the screen. This value is passed directly
 *  to `QueryResult.fulfillment_text`.
 */
@property(nonatomic, copy, nullable) NSString *fulfillmentText;

/**
 *  Optional. The collection of output contexts. This value is passed directly
 *  to `QueryResult.output_contexts`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDialogflow_Context *> *outputContexts;

/**
 *  Optional. This value is passed directly to `QueryResult.webhook_payload`.
 */
@property(nonatomic, strong, nullable) GTLRDialogflow_WebhookResponse_Payload *payload;

/**
 *  Optional. This value is passed directly to `QueryResult.webhook_source`.
 */
@property(nonatomic, copy, nullable) NSString *source;

@end


/**
 *  Optional. This value is passed directly to `QueryResult.webhook_payload`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDialogflow_WebhookResponse_Payload : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
