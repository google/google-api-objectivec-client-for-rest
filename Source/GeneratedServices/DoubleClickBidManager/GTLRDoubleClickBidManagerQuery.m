// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   DoubleClick Bid Manager API (doubleclickbidmanager/v1.1)
// Description:
//   DoubleClick Bid Manager API allows users to manage and create campaigns and
//   reports.
// Documentation:
//   https://developers.google.com/bid-manager/

#import "GTLRDoubleClickBidManagerQuery.h"

#import "GTLRDoubleClickBidManagerObjects.h"

@implementation GTLRDoubleClickBidManagerQuery

@dynamic fields;

@end

@implementation GTLRDoubleClickBidManagerQuery_QueriesCreatequery

@dynamic asynchronous;

+ (instancetype)queryWithObject:(GTLRDoubleClickBidManager_Query *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"query";
  GTLRDoubleClickBidManagerQuery_QueriesCreatequery *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRDoubleClickBidManager_Query class];
  query.loggingName = @"doubleclickbidmanager.queries.createquery";
  return query;
}

@end

@implementation GTLRDoubleClickBidManagerQuery_QueriesDeletequery

@dynamic queryId;

+ (instancetype)queryWithQueryId:(long long)queryId {
  NSArray *pathParams = @[ @"queryId" ];
  NSString *pathURITemplate = @"query/{queryId}";
  GTLRDoubleClickBidManagerQuery_QueriesDeletequery *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.queryId = queryId;
  query.loggingName = @"doubleclickbidmanager.queries.deletequery";
  return query;
}

@end

@implementation GTLRDoubleClickBidManagerQuery_QueriesGetquery

@dynamic queryId;

+ (instancetype)queryWithQueryId:(long long)queryId {
  NSArray *pathParams = @[ @"queryId" ];
  NSString *pathURITemplate = @"query/{queryId}";
  GTLRDoubleClickBidManagerQuery_QueriesGetquery *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.queryId = queryId;
  query.expectedObjectClass = [GTLRDoubleClickBidManager_Query class];
  query.loggingName = @"doubleclickbidmanager.queries.getquery";
  return query;
}

@end

@implementation GTLRDoubleClickBidManagerQuery_QueriesListqueries

@dynamic pageSize, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"queries";
  GTLRDoubleClickBidManagerQuery_QueriesListqueries *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRDoubleClickBidManager_ListQueriesResponse class];
  query.loggingName = @"doubleclickbidmanager.queries.listqueries";
  return query;
}

@end

@implementation GTLRDoubleClickBidManagerQuery_QueriesRunquery

@dynamic asynchronous, queryId;

+ (instancetype)queryWithObject:(GTLRDoubleClickBidManager_RunQueryRequest *)object
                        queryId:(long long)queryId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"queryId" ];
  NSString *pathURITemplate = @"query/{queryId}";
  GTLRDoubleClickBidManagerQuery_QueriesRunquery *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.queryId = queryId;
  query.loggingName = @"doubleclickbidmanager.queries.runquery";
  return query;
}

@end

@implementation GTLRDoubleClickBidManagerQuery_ReportsListreports

@dynamic pageSize, pageToken, queryId;

+ (instancetype)queryWithQueryId:(long long)queryId {
  NSArray *pathParams = @[ @"queryId" ];
  NSString *pathURITemplate = @"queries/{queryId}/reports";
  GTLRDoubleClickBidManagerQuery_ReportsListreports *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.queryId = queryId;
  query.expectedObjectClass = [GTLRDoubleClickBidManager_ListReportsResponse class];
  query.loggingName = @"doubleclickbidmanager.reports.listreports";
  return query;
}

@end
