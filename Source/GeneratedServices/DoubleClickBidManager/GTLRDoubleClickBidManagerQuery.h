// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   DoubleClick Bid Manager API (doubleclickbidmanager/v1.1)
// Description:
//   DoubleClick Bid Manager API allows users to manage and create campaigns and
//   reports.
// Documentation:
//   https://developers.google.com/bid-manager/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDoubleClickBidManager_Query;
@class GTLRDoubleClickBidManager_RunQueryRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other DoubleClick Bid Manager query classes.
 */
@interface GTLRDoubleClickBidManagerQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a query.
 *
 *  Method: doubleclickbidmanager.queries.createquery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDoubleClickBidManager
 */
@interface GTLRDoubleClickBidManagerQuery_QueriesCreatequery : GTLRDoubleClickBidManagerQuery

/**
 *  If true, tries to run the query asynchronously. Only applicable when the
 *  frequency is ONE_TIME.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL asynchronous;

/**
 *  Fetches a @c GTLRDoubleClickBidManager_Query.
 *
 *  Creates a query.
 *
 *  @param object The @c GTLRDoubleClickBidManager_Query to include in the
 *    query.
 *
 *  @return GTLRDoubleClickBidManagerQuery_QueriesCreatequery
 */
+ (instancetype)queryWithObject:(GTLRDoubleClickBidManager_Query *)object;

@end

/**
 *  Deletes a stored query as well as the associated stored reports.
 *
 *  Method: doubleclickbidmanager.queries.deletequery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDoubleClickBidManager
 */
@interface GTLRDoubleClickBidManagerQuery_QueriesDeletequery : GTLRDoubleClickBidManagerQuery

/** Query ID to delete. */
@property(nonatomic, assign) long long queryId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a stored query as well as the associated stored reports.
 *
 *  @param queryId Query ID to delete.
 *
 *  @return GTLRDoubleClickBidManagerQuery_QueriesDeletequery
 */
+ (instancetype)queryWithQueryId:(long long)queryId;

@end

/**
 *  Retrieves a stored query.
 *
 *  Method: doubleclickbidmanager.queries.getquery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDoubleClickBidManager
 */
@interface GTLRDoubleClickBidManagerQuery_QueriesGetquery : GTLRDoubleClickBidManagerQuery

/** Query ID to retrieve. */
@property(nonatomic, assign) long long queryId;

/**
 *  Fetches a @c GTLRDoubleClickBidManager_Query.
 *
 *  Retrieves a stored query.
 *
 *  @param queryId Query ID to retrieve.
 *
 *  @return GTLRDoubleClickBidManagerQuery_QueriesGetquery
 */
+ (instancetype)queryWithQueryId:(long long)queryId;

@end

/**
 *  Retrieves stored queries.
 *
 *  Method: doubleclickbidmanager.queries.listqueries
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDoubleClickBidManager
 */
@interface GTLRDoubleClickBidManagerQuery_QueriesListqueries : GTLRDoubleClickBidManagerQuery

/**
 *  Maximum number of results per page. Must be between 1 and 100. Defaults to
 *  100 if unspecified.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** Optional pagination token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDoubleClickBidManager_ListQueriesResponse.
 *
 *  Retrieves stored queries.
 *
 *  @return GTLRDoubleClickBidManagerQuery_QueriesListqueries
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Runs a stored query to generate a report.
 *
 *  Method: doubleclickbidmanager.queries.runquery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDoubleClickBidManager
 */
@interface GTLRDoubleClickBidManagerQuery_QueriesRunquery : GTLRDoubleClickBidManagerQuery

/**
 *  If true, tries to run the query asynchronously.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL asynchronous;

/** Query ID to run. */
@property(nonatomic, assign) long long queryId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Runs a stored query to generate a report.
 *
 *  @param object The @c GTLRDoubleClickBidManager_RunQueryRequest to include in
 *    the query.
 *  @param queryId Query ID to run.
 *
 *  @return GTLRDoubleClickBidManagerQuery_QueriesRunquery
 */
+ (instancetype)queryWithObject:(GTLRDoubleClickBidManager_RunQueryRequest *)object
                        queryId:(long long)queryId;

@end

/**
 *  Retrieves stored reports.
 *
 *  Method: doubleclickbidmanager.reports.listreports
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDoubleClickBidManager
 */
@interface GTLRDoubleClickBidManagerQuery_ReportsListreports : GTLRDoubleClickBidManagerQuery

/**
 *  Maximum number of results per page. Must be between 1 and 100. Defaults to
 *  100 if unspecified.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** Optional pagination token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Query ID with which the reports are associated. */
@property(nonatomic, assign) long long queryId;

/**
 *  Fetches a @c GTLRDoubleClickBidManager_ListReportsResponse.
 *
 *  Retrieves stored reports.
 *
 *  @param queryId Query ID with which the reports are associated.
 *
 *  @return GTLRDoubleClickBidManagerQuery_ReportsListreports
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithQueryId:(long long)queryId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
