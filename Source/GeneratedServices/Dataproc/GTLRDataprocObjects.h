// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Cloud Dataproc API (dataproc/v1)
// Description:
//   Manages Hadoop-based clusters and jobs on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/dataproc/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDataproc_AcceleratorConfig;
@class GTLRDataproc_Cluster;
@class GTLRDataproc_Cluster_Labels;
@class GTLRDataproc_ClusterConfig;
@class GTLRDataproc_ClusterMetrics;
@class GTLRDataproc_ClusterMetrics_HdfsMetrics;
@class GTLRDataproc_ClusterMetrics_YarnMetrics;
@class GTLRDataproc_ClusterOperationMetadata_Labels;
@class GTLRDataproc_ClusterOperationStatus;
@class GTLRDataproc_ClusterStatus;
@class GTLRDataproc_DiskConfig;
@class GTLRDataproc_GceClusterConfig;
@class GTLRDataproc_GceClusterConfig_Metadata;
@class GTLRDataproc_HadoopJob;
@class GTLRDataproc_HadoopJob_Properties;
@class GTLRDataproc_HiveJob;
@class GTLRDataproc_HiveJob_Properties;
@class GTLRDataproc_HiveJob_ScriptVariables;
@class GTLRDataproc_InstanceGroupConfig;
@class GTLRDataproc_Job;
@class GTLRDataproc_Job_Labels;
@class GTLRDataproc_JobPlacement;
@class GTLRDataproc_JobReference;
@class GTLRDataproc_JobScheduling;
@class GTLRDataproc_JobStatus;
@class GTLRDataproc_LoggingConfig;
@class GTLRDataproc_LoggingConfig_DriverLogLevels;
@class GTLRDataproc_ManagedGroupConfig;
@class GTLRDataproc_NodeInitializationAction;
@class GTLRDataproc_Operation;
@class GTLRDataproc_Operation_Metadata;
@class GTLRDataproc_Operation_Response;
@class GTLRDataproc_PigJob;
@class GTLRDataproc_PigJob_Properties;
@class GTLRDataproc_PigJob_ScriptVariables;
@class GTLRDataproc_PySparkJob;
@class GTLRDataproc_PySparkJob_Properties;
@class GTLRDataproc_QueryList;
@class GTLRDataproc_SoftwareConfig;
@class GTLRDataproc_SoftwareConfig_Properties;
@class GTLRDataproc_SparkJob;
@class GTLRDataproc_SparkJob_Properties;
@class GTLRDataproc_SparkSqlJob;
@class GTLRDataproc_SparkSqlJob_Properties;
@class GTLRDataproc_SparkSqlJob_ScriptVariables;
@class GTLRDataproc_Status;
@class GTLRDataproc_Status_Details_Item;
@class GTLRDataproc_YarnApplication;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRDataproc_ClusterOperationStatus.state

/**
 *  The operation is done; either cancelled or completed.
 *
 *  Value: "DONE"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_ClusterOperationStatus_State_Done;
/**
 *  The operation has been created.
 *
 *  Value: "PENDING"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_ClusterOperationStatus_State_Pending;
/**
 *  The operation is running.
 *
 *  Value: "RUNNING"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_ClusterOperationStatus_State_Running;
/**
 *  Unused.
 *
 *  Value: "UNKNOWN"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_ClusterOperationStatus_State_Unknown;

// ----------------------------------------------------------------------------
// GTLRDataproc_ClusterStatus.state

/**
 *  The cluster is being created and set up. It is not ready for use.
 *
 *  Value: "CREATING"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_ClusterStatus_State_Creating;
/**
 *  The cluster is being deleted. It cannot be used.
 *
 *  Value: "DELETING"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_ClusterStatus_State_Deleting;
/**
 *  The cluster encountered an error. It is not ready for use.
 *
 *  Value: "ERROR"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_ClusterStatus_State_Error;
/**
 *  The cluster is currently running and healthy. It is ready for use.
 *
 *  Value: "RUNNING"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_ClusterStatus_State_Running;
/**
 *  The cluster state is unknown.
 *
 *  Value: "UNKNOWN"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_ClusterStatus_State_Unknown;
/**
 *  The cluster is being updated. It continues to accept and process jobs.
 *
 *  Value: "UPDATING"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_ClusterStatus_State_Updating;

// ----------------------------------------------------------------------------
// GTLRDataproc_ClusterStatus.substate

/**
 *  The agent-reported status is out of date (may occur if Cloud Dataproc loses
 *  communication with Agent).Applies to RUNNING state.
 *
 *  Value: "STALE_STATUS"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_ClusterStatus_Substate_StaleStatus;
/**
 *  The cluster is known to be in an unhealthy state (for example, critical
 *  daemons are not running or HDFS capacity is exhausted).Applies to RUNNING
 *  state.
 *
 *  Value: "UNHEALTHY"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_ClusterStatus_Substate_Unhealthy;
/** Value: "UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRDataproc_ClusterStatus_Substate_Unspecified;

// ----------------------------------------------------------------------------
// GTLRDataproc_JobStatus.state

/**
 *  Job attempt has failed. The detail field contains failure details for this
 *  attempt.Applies to restartable jobs only.
 *
 *  Value: "ATTEMPT_FAILURE"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_JobStatus_State_AttemptFailure;
/**
 *  The job cancellation was successful.
 *
 *  Value: "CANCELLED"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_JobStatus_State_Cancelled;
/**
 *  A CancelJob request has been received, but is pending.
 *
 *  Value: "CANCEL_PENDING"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_JobStatus_State_CancelPending;
/**
 *  Transient in-flight resources have been canceled, and the request to cancel
 *  the running job has been issued to the cluster.
 *
 *  Value: "CANCEL_STARTED"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_JobStatus_State_CancelStarted;
/**
 *  The job has completed successfully.
 *
 *  Value: "DONE"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_JobStatus_State_Done;
/**
 *  The job has completed, but encountered an error.
 *
 *  Value: "ERROR"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_JobStatus_State_Error;
/**
 *  The job is pending; it has been submitted, but is not yet running.
 *
 *  Value: "PENDING"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_JobStatus_State_Pending;
/**
 *  The job is running on the cluster.
 *
 *  Value: "RUNNING"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_JobStatus_State_Running;
/**
 *  Job has been received by the service and completed initial setup; it will
 *  soon be submitted to the cluster.
 *
 *  Value: "SETUP_DONE"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_JobStatus_State_SetupDone;
/**
 *  The job state is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_JobStatus_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRDataproc_JobStatus.substate

/**
 *  The Job has been received and is awaiting execution (it may be waiting for a
 *  condition to be met). See the "details" field for the reason for the
 *  delay.Applies to RUNNING state.
 *
 *  Value: "QUEUED"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_JobStatus_Substate_Queued;
/**
 *  The agent-reported status is out of date, which may be caused by a loss of
 *  communication between the agent and Cloud Dataproc. If the agent does not
 *  send a timely update, the job will fail.Applies to RUNNING state.
 *
 *  Value: "STALE_STATUS"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_JobStatus_Substate_StaleStatus;
/**
 *  The Job is submitted to the agent.Applies to RUNNING state.
 *
 *  Value: "SUBMITTED"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_JobStatus_Substate_Submitted;
/** Value: "UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRDataproc_JobStatus_Substate_Unspecified;

// ----------------------------------------------------------------------------
// GTLRDataproc_LoggingConfig_DriverLogLevels.driverLogLevel

/** Value: "ALL" */
GTLR_EXTERN NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_All;
/** Value: "DEBUG" */
GTLR_EXTERN NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Debug;
/** Value: "ERROR" */
GTLR_EXTERN NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Error;
/** Value: "FATAL" */
GTLR_EXTERN NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Fatal;
/** Value: "INFO" */
GTLR_EXTERN NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Info;
/** Value: "LEVEL_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_LevelUnspecified;
/** Value: "OFF" */
GTLR_EXTERN NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Off;
/** Value: "TRACE" */
GTLR_EXTERN NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Trace;
/** Value: "WARN" */
GTLR_EXTERN NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Warn;

// ----------------------------------------------------------------------------
// GTLRDataproc_YarnApplication.state

/**
 *  Status is ACCEPTED.
 *
 *  Value: "ACCEPTED"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_YarnApplication_State_Accepted;
/**
 *  Status is FAILED.
 *
 *  Value: "FAILED"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_YarnApplication_State_Failed;
/**
 *  Status is FINISHED.
 *
 *  Value: "FINISHED"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_YarnApplication_State_Finished;
/**
 *  Status is KILLED.
 *
 *  Value: "KILLED"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_YarnApplication_State_Killed;
/**
 *  Status is NEW.
 *
 *  Value: "NEW"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_YarnApplication_State_New;
/**
 *  Status is NEW_SAVING.
 *
 *  Value: "NEW_SAVING"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_YarnApplication_State_NewSaving;
/**
 *  Status is RUNNING.
 *
 *  Value: "RUNNING"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_YarnApplication_State_Running;
/**
 *  Status is unspecified.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_YarnApplication_State_StateUnspecified;
/**
 *  Status is SUBMITTED.
 *
 *  Value: "SUBMITTED"
 */
GTLR_EXTERN NSString * const kGTLRDataproc_YarnApplication_State_Submitted;

/**
 *  Specifies the type and number of accelerator cards attached to the instances
 *  of an instance group (see GPUs on Compute Engine).
 */
@interface GTLRDataproc_AcceleratorConfig : GTLRObject

/**
 *  The number of the accelerator cards of this type exposed to this instance.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *acceleratorCount;

/**
 *  Full URL, partial URI, or short name of the accelerator type resource to
 *  expose to this instance. See Google Compute Engine AcceleratorTypes(
 *  /compute/docs/reference/beta/acceleratorTypes)Examples *
 *  https://www.googleapis.com/compute/beta/projects/[project_id]/zones/us-east1-a/acceleratorTypes/nvidia-tesla-k80
 *  * projects/[project_id]/zones/us-east1-a/acceleratorTypes/nvidia-tesla-k80 *
 *  nvidia-tesla-k80
 */
@property(nonatomic, copy, nullable) NSString *acceleratorTypeUri;

@end


/**
 *  A request to cancel a job.
 */
@interface GTLRDataproc_CancelJobRequest : GTLRObject
@end


/**
 *  Describes the identifying information, config, and status of a cluster of
 *  Google Compute Engine instances.
 */
@interface GTLRDataproc_Cluster : GTLRObject

/**
 *  Required. The cluster name. Cluster names within a project must be unique.
 *  Names of deleted clusters can be reused.
 */
@property(nonatomic, copy, nullable) NSString *clusterName;

/**
 *  Output-only. A cluster UUID (Unique Universal Identifier). Cloud Dataproc
 *  generates this value when it creates the cluster.
 */
@property(nonatomic, copy, nullable) NSString *clusterUuid;

/**
 *  Required. The cluster config. Note that Cloud Dataproc may set default
 *  values, and values may change when clusters are updated.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_ClusterConfig *config;

/**
 *  Optional. The labels to associate with this cluster. Label keys must contain
 *  1 to 63 characters, and must conform to RFC 1035
 *  (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if
 *  present, must contain 1 to 63 characters, and must conform to RFC 1035
 *  (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
 *  associated with a cluster.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_Cluster_Labels *labels;

/**
 *  Contains cluster daemon metrics such as HDFS and YARN stats.Beta Feature:
 *  This report is available for testing purposes only. It may be changed before
 *  final release.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_ClusterMetrics *metrics;

/**
 *  Required. The Google Cloud Platform project ID that the cluster belongs to.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Output-only. Cluster status. */
@property(nonatomic, strong, nullable) GTLRDataproc_ClusterStatus *status;

/** Output-only. The previous cluster status. */
@property(nonatomic, strong, nullable) NSArray<GTLRDataproc_ClusterStatus *> *statusHistory;

@end


/**
 *  Optional. The labels to associate with this cluster. Label keys must contain
 *  1 to 63 characters, and must conform to RFC 1035
 *  (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if
 *  present, must contain 1 to 63 characters, and must conform to RFC 1035
 *  (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
 *  associated with a cluster.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataproc_Cluster_Labels : GTLRObject
@end


/**
 *  The cluster config.
 */
@interface GTLRDataproc_ClusterConfig : GTLRObject

/**
 *  Optional. A Google Cloud Storage staging bucket used for sharing generated
 *  SSH keys and config. If you do not specify a staging bucket, Cloud Dataproc
 *  will determine an appropriate Cloud Storage location (US, ASIA, or EU) for
 *  your cluster's staging bucket according to the Google Compute Engine zone
 *  where your cluster is deployed, and then it will create and manage this
 *  project-level, per-location bucket for you.
 */
@property(nonatomic, copy, nullable) NSString *configBucket;

/**
 *  Required. The shared Google Compute Engine config settings for all instances
 *  in a cluster.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_GceClusterConfig *gceClusterConfig;

/**
 *  Optional. Commands to execute on each node after config is completed. By
 *  default, executables are run on master and all worker nodes. You can test a
 *  node's role metadata to run an executable on a master or worker node, as
 *  shown below using curl (you can also use wget):
 *  ROLE=$(curl -H Metadata-Flavor:Google
 *  http://metadata/computeMetadata/v1/instance/attributes/dataproc-role)
 *  if [[ "${ROLE}" == 'Master' ]]; then
 *  ... master specific actions ...
 *  else
 *  ... worker specific actions ...
 *  fi
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataproc_NodeInitializationAction *> *initializationActions;

/**
 *  Optional. The Google Compute Engine config settings for the master instance
 *  in a cluster.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_InstanceGroupConfig *masterConfig;

/**
 *  Optional. The Google Compute Engine config settings for additional worker
 *  instances in a cluster.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_InstanceGroupConfig *secondaryWorkerConfig;

/** Optional. The config settings for software inside the cluster. */
@property(nonatomic, strong, nullable) GTLRDataproc_SoftwareConfig *softwareConfig;

/**
 *  Optional. The Google Compute Engine config settings for worker instances in
 *  a cluster.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_InstanceGroupConfig *workerConfig;

@end


/**
 *  Contains cluster daemon metrics, such as HDFS and YARN stats.Beta Feature:
 *  This report is available for testing purposes only. It may be changed before
 *  final release.
 */
@interface GTLRDataproc_ClusterMetrics : GTLRObject

/** The HDFS metrics. */
@property(nonatomic, strong, nullable) GTLRDataproc_ClusterMetrics_HdfsMetrics *hdfsMetrics;

/** The YARN metrics. */
@property(nonatomic, strong, nullable) GTLRDataproc_ClusterMetrics_YarnMetrics *yarnMetrics;

@end


/**
 *  The HDFS metrics.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of longLongValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDataproc_ClusterMetrics_HdfsMetrics : GTLRObject
@end


/**
 *  The YARN metrics.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of longLongValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDataproc_ClusterMetrics_YarnMetrics : GTLRObject
@end


/**
 *  Metadata describing the operation.
 */
@interface GTLRDataproc_ClusterOperationMetadata : GTLRObject

/** Output-only. Name of the cluster for the operation. */
@property(nonatomic, copy, nullable) NSString *clusterName;

/** Output-only. Cluster UUID for the operation. */
@property(nonatomic, copy, nullable) NSString *clusterUuid;

/**
 *  Output-only. Short description of operation.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Output-only. Labels associated with the operation */
@property(nonatomic, strong, nullable) GTLRDataproc_ClusterOperationMetadata_Labels *labels;

/** Output-only. The operation type. */
@property(nonatomic, copy, nullable) NSString *operationType;

/** Output-only. Current operation status. */
@property(nonatomic, strong, nullable) GTLRDataproc_ClusterOperationStatus *status;

/** Output-only. The previous operation status. */
@property(nonatomic, strong, nullable) NSArray<GTLRDataproc_ClusterOperationStatus *> *statusHistory;

/** Output-only. Errors encountered during operation execution. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *warnings;

@end


/**
 *  Output-only. Labels associated with the operation
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataproc_ClusterOperationMetadata_Labels : GTLRObject
@end


/**
 *  The status of the operation.
 */
@interface GTLRDataproc_ClusterOperationStatus : GTLRObject

/** Output-only.A message containing any operation metadata details. */
@property(nonatomic, copy, nullable) NSString *details;

/** Output-only. A message containing the detailed operation state. */
@property(nonatomic, copy, nullable) NSString *innerState;

/**
 *  Output-only. A message containing the operation state.
 *
 *  Likely values:
 *    @arg @c kGTLRDataproc_ClusterOperationStatus_State_Done The operation is
 *        done; either cancelled or completed. (Value: "DONE")
 *    @arg @c kGTLRDataproc_ClusterOperationStatus_State_Pending The operation
 *        has been created. (Value: "PENDING")
 *    @arg @c kGTLRDataproc_ClusterOperationStatus_State_Running The operation
 *        is running. (Value: "RUNNING")
 *    @arg @c kGTLRDataproc_ClusterOperationStatus_State_Unknown Unused. (Value:
 *        "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output-only. The time this state was entered. */
@property(nonatomic, strong, nullable) GTLRDateTime *stateStartTime;

@end


/**
 *  The status of a cluster and its instances.
 */
@interface GTLRDataproc_ClusterStatus : GTLRObject

/** Output-only. Optional details of cluster's state. */
@property(nonatomic, copy, nullable) NSString *detail;

/**
 *  Output-only. The cluster's state.
 *
 *  Likely values:
 *    @arg @c kGTLRDataproc_ClusterStatus_State_Creating The cluster is being
 *        created and set up. It is not ready for use. (Value: "CREATING")
 *    @arg @c kGTLRDataproc_ClusterStatus_State_Deleting The cluster is being
 *        deleted. It cannot be used. (Value: "DELETING")
 *    @arg @c kGTLRDataproc_ClusterStatus_State_Error The cluster encountered an
 *        error. It is not ready for use. (Value: "ERROR")
 *    @arg @c kGTLRDataproc_ClusterStatus_State_Running The cluster is currently
 *        running and healthy. It is ready for use. (Value: "RUNNING")
 *    @arg @c kGTLRDataproc_ClusterStatus_State_Unknown The cluster state is
 *        unknown. (Value: "UNKNOWN")
 *    @arg @c kGTLRDataproc_ClusterStatus_State_Updating The cluster is being
 *        updated. It continues to accept and process jobs. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output-only. Time when this state was entered. */
@property(nonatomic, strong, nullable) GTLRDateTime *stateStartTime;

/**
 *  Output-only. Additional state information that includes status reported by
 *  the agent.
 *
 *  Likely values:
 *    @arg @c kGTLRDataproc_ClusterStatus_Substate_StaleStatus The
 *        agent-reported status is out of date (may occur if Cloud Dataproc
 *        loses communication with Agent).Applies to RUNNING state. (Value:
 *        "STALE_STATUS")
 *    @arg @c kGTLRDataproc_ClusterStatus_Substate_Unhealthy The cluster is
 *        known to be in an unhealthy state (for example, critical daemons are
 *        not running or HDFS capacity is exhausted).Applies to RUNNING state.
 *        (Value: "UNHEALTHY")
 *    @arg @c kGTLRDataproc_ClusterStatus_Substate_Unspecified Value
 *        "UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *substate;

@end


/**
 *  A request to collect cluster diagnostic information.
 */
@interface GTLRDataproc_DiagnoseClusterRequest : GTLRObject
@end


/**
 *  The location of diagnostic output.
 */
@interface GTLRDataproc_DiagnoseClusterResults : GTLRObject

/**
 *  Output-only. The Google Cloud Storage URI of the diagnostic output. The
 *  output report is a plain text file with a summary of collected diagnostics.
 */
@property(nonatomic, copy, nullable) NSString *outputUri;

@end


/**
 *  Specifies the config of disk options for a group of VM instances.
 */
@interface GTLRDataproc_DiskConfig : GTLRObject

/**
 *  Optional. Size in GB of the boot disk (default is 500GB).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bootDiskSizeGb;

/**
 *  Optional. Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are
 *  not attached, the boot disk is used to store runtime logs and HDFS
 *  (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or
 *  more SSDs are attached, this runtime bulk data is spread across them, and
 *  the boot disk contains only basic config and installed binaries.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numLocalSsds;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for Empty is empty JSON object {}.
 */
@interface GTLRDataproc_Empty : GTLRObject
@end


/**
 *  Common config settings for resources of Google Compute Engine cluster
 *  instances, applicable to all instances in the cluster.
 */
@interface GTLRDataproc_GceClusterConfig : GTLRObject

/**
 *  Optional. If true, all instances in the cluster will only have internal IP
 *  addresses. By default, clusters are not restricted to internal IP addresses,
 *  and will have ephemeral external IP addresses assigned to each instance.
 *  This internal_ip_only restriction can only be enabled for subnetwork enabled
 *  networks, and all off-cluster dependencies must be configured to be
 *  accessible without external IP addresses.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *internalIpOnly;

/**
 *  The Google Compute Engine metadata entries to add to all instances (see
 *  Project and instance metadata
 *  (https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
 */
@property(nonatomic, strong, nullable) GTLRDataproc_GceClusterConfig_Metadata *metadata;

/**
 *  Optional. The Google Compute Engine network to be used for machine
 *  communications. Cannot be specified with subnetwork_uri. If neither
 *  network_uri nor subnetwork_uri is specified, the "default" network of the
 *  project is used, if it exists. Cannot be a "Custom Subnet Network" (see
 *  Using Subnetworks for more information).A full URL, partial URI, or short
 *  name are valid. Examples:
 *  https://www.googleapis.com/compute/v1/projects/[project_id]/regions/global/default
 *  projects/[project_id]/regions/global/default
 *  default
 */
@property(nonatomic, copy, nullable) NSString *networkUri;

/**
 *  Optional. The service account of the instances. Defaults to the default
 *  Google Compute Engine service account. Custom service accounts need
 *  permissions equivalent to the folloing IAM roles:
 *  roles/logging.logWriter
 *  roles/storage.objectAdmin(see
 *  https://cloud.google.com/compute/docs/access/service-accounts#custom_service_accounts
 *  for more information). Example:
 *  [account_id]\@[project_id].iam.gserviceaccount.com
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Optional. The URIs of service account scopes to be included in Google
 *  Compute Engine instances. The following base set of scopes is always
 *  included:
 *  https://www.googleapis.com/auth/cloud.useraccounts.readonly
 *  https://www.googleapis.com/auth/devstorage.read_write
 *  https://www.googleapis.com/auth/logging.writeIf no scopes are specified, the
 *  following defaults are also provided:
 *  https://www.googleapis.com/auth/bigquery
 *  https://www.googleapis.com/auth/bigtable.admin.table
 *  https://www.googleapis.com/auth/bigtable.data
 *  https://www.googleapis.com/auth/devstorage.full_control
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *serviceAccountScopes;

/**
 *  Optional. The Google Compute Engine subnetwork to be used for machine
 *  communications. Cannot be specified with network_uri.A full URL, partial
 *  URI, or short name are valid. Examples:
 *  https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/sub0
 *  projects/[project_id]/regions/us-east1/sub0
 *  sub0
 */
@property(nonatomic, copy, nullable) NSString *subnetworkUri;

/**
 *  The Google Compute Engine tags to add to all instances (see Tagging
 *  instances).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

/**
 *  Optional. The zone where the Google Compute Engine cluster will be located.
 *  On a create request, it is required in the "global" region. If omitted in a
 *  non-global Cloud Dataproc region, the service will pick a zone in the
 *  corresponding GCE region. On a get request, zone will always be present.A
 *  full URL, partial URI, or short name are valid. Examples:
 *  https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone]
 *  projects/[project_id]/zones/[zone]
 *  us-central1-f
 */
@property(nonatomic, copy, nullable) NSString *zoneUri;

@end


/**
 *  The Google Compute Engine metadata entries to add to all instances (see
 *  Project and instance metadata
 *  (https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataproc_GceClusterConfig_Metadata : GTLRObject
@end


/**
 *  A Cloud Dataproc job for running Apache Hadoop MapReduce
 *  (https://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html)
 *  jobs on Apache Hadoop YARN
 *  (https://hadoop.apache.org/docs/r2.7.1/hadoop-yarn/hadoop-yarn-site/YARN.html).
 */
@interface GTLRDataproc_HadoopJob : GTLRObject

/**
 *  Optional. HCFS URIs of archives to be extracted in the working directory of
 *  Hadoop drivers and tasks. Supported file types: .jar, .tar, .tar.gz, .tgz,
 *  or .zip.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *archiveUris;

/**
 *  Optional. The arguments to pass to the driver. Do not include arguments,
 *  such as -libjars or -Dfoo=bar, that can be set as job properties, since a
 *  collision may occur that causes an incorrect job submission.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *args;

/**
 *  Optional. HCFS (Hadoop Compatible Filesystem) URIs of files to be copied to
 *  the working directory of Hadoop drivers and distributed tasks. Useful for
 *  naively parallel tasks.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *fileUris;

/**
 *  Optional. Jar file URIs to add to the CLASSPATHs of the Hadoop driver and
 *  tasks.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *jarFileUris;

/** Optional. The runtime log config for job execution. */
@property(nonatomic, strong, nullable) GTLRDataproc_LoggingConfig *loggingConfig;

/**
 *  The name of the driver's main class. The jar file containing the class must
 *  be in the default CLASSPATH or specified in jar_file_uris.
 */
@property(nonatomic, copy, nullable) NSString *mainClass;

/**
 *  The HCFS URI of the jar file containing the main class. Examples:
 *  'gs://foo-bucket/analytics-binaries/extract-useful-metrics-mr.jar'
 *  'hdfs:/tmp/test-samples/custom-wordcount.jar'
 *  'file:///home/usr/lib/hadoop-mapreduce/hadoop-mapreduce-examples.jar'
 */
@property(nonatomic, copy, nullable) NSString *mainJarFileUri;

/**
 *  Optional. A mapping of property names to values, used to configure Hadoop.
 *  Properties that conflict with values set by the Cloud Dataproc API may be
 *  overwritten. Can include properties set in /etc/hadoop/conf/ *-site and
 *  classes in user code.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_HadoopJob_Properties *properties;

@end


/**
 *  Optional. A mapping of property names to values, used to configure Hadoop.
 *  Properties that conflict with values set by the Cloud Dataproc API may be
 *  overwritten. Can include properties set in /etc/hadoop/conf/ *-site and
 *  classes in user code.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataproc_HadoopJob_Properties : GTLRObject
@end


/**
 *  A Cloud Dataproc job for running Apache Hive (https://hive.apache.org/)
 *  queries on YARN.
 */
@interface GTLRDataproc_HiveJob : GTLRObject

/**
 *  Optional. Whether to continue executing queries if a query fails. The
 *  default value is false. Setting to true can be useful when executing
 *  independent parallel queries.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *continueOnFailure;

/**
 *  Optional. HCFS URIs of jar files to add to the CLASSPATH of the Hive server
 *  and Hadoop MapReduce (MR) tasks. Can contain Hive SerDes and UDFs.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *jarFileUris;

/**
 *  Optional. A mapping of property names and values, used to configure Hive.
 *  Properties that conflict with values set by the Cloud Dataproc API may be
 *  overwritten. Can include properties set in /etc/hadoop/conf/ *-site.xml,
 *  /etc/hive/conf/hive-site.xml, and classes in user code.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_HiveJob_Properties *properties;

/** The HCFS URI of the script that contains Hive queries. */
@property(nonatomic, copy, nullable) NSString *queryFileUri;

/** A list of queries. */
@property(nonatomic, strong, nullable) GTLRDataproc_QueryList *queryList;

/**
 *  Optional. Mapping of query variable names to values (equivalent to the Hive
 *  command: SET name="value";).
 */
@property(nonatomic, strong, nullable) GTLRDataproc_HiveJob_ScriptVariables *scriptVariables;

@end


/**
 *  Optional. A mapping of property names and values, used to configure Hive.
 *  Properties that conflict with values set by the Cloud Dataproc API may be
 *  overwritten. Can include properties set in /etc/hadoop/conf/ *-site.xml,
 *  /etc/hive/conf/hive-site.xml, and classes in user code.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataproc_HiveJob_Properties : GTLRObject
@end


/**
 *  Optional. Mapping of query variable names to values (equivalent to the Hive
 *  command: SET name="value";).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataproc_HiveJob_ScriptVariables : GTLRObject
@end


/**
 *  Optional. The config settings for Google Compute Engine resources in an
 *  instance group, such as a master or worker group.
 */
@interface GTLRDataproc_InstanceGroupConfig : GTLRObject

/**
 *  Optional. The Google Compute Engine accelerator configuration for these
 *  instances.Beta Feature: This feature is still under development. It may be
 *  changed before final release.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataproc_AcceleratorConfig *> *accelerators;

/** Optional. Disk option config settings. */
@property(nonatomic, strong, nullable) GTLRDataproc_DiskConfig *diskConfig;

/**
 *  Output-only. The Google Compute Engine image resource used for cluster
 *  instances. Inferred from SoftwareConfig.image_version.
 */
@property(nonatomic, copy, nullable) NSString *imageUri;

/**
 *  Optional. The list of instance names. Cloud Dataproc derives the names from
 *  cluster_name, num_instances, and the instance group if not set by user
 *  (recommended practice is to let Cloud Dataproc derive the name).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *instanceNames;

/**
 *  Optional. Specifies that this instance group contains preemptible instances.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isPreemptible;

/**
 *  Optional. The Google Compute Engine machine type used for cluster
 *  instances.A full URL, partial URI, or short name are valid. Examples:
 *  https://www.googleapis.com/compute/v1/projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2
 *  projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2
 *  n1-standard-2
 */
@property(nonatomic, copy, nullable) NSString *machineTypeUri;

/**
 *  Output-only. The config for Google Compute Engine Instance Group Manager
 *  that manages this group. This is only used for preemptible instance groups.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_ManagedGroupConfig *managedGroupConfig;

/**
 *  Optional. The number of VM instances in the instance group. For master
 *  instance groups, must be set to 1.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numInstances;

@end


/**
 *  A Cloud Dataproc job resource.
 */
@interface GTLRDataproc_Job : GTLRObject

/**
 *  Output-only. If present, the location of miscellaneous control files which
 *  may be used as part of job setup and handling. If not present, control files
 *  may be placed in the same location as driver_output_uri.
 */
@property(nonatomic, copy, nullable) NSString *driverControlFilesUri;

/**
 *  Output-only. A URI pointing to the location of the stdout of the job's
 *  driver program.
 */
@property(nonatomic, copy, nullable) NSString *driverOutputResourceUri;

/** Job is a Hadoop job. */
@property(nonatomic, strong, nullable) GTLRDataproc_HadoopJob *hadoopJob;

/** Job is a Hive job. */
@property(nonatomic, strong, nullable) GTLRDataproc_HiveJob *hiveJob;

/**
 *  Optional. The labels to associate with this job. Label keys must contain 1
 *  to 63 characters, and must conform to RFC 1035
 *  (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if
 *  present, must contain 1 to 63 characters, and must conform to RFC 1035
 *  (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
 *  associated with a job.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_Job_Labels *labels;

/** Job is a Pig job. */
@property(nonatomic, strong, nullable) GTLRDataproc_PigJob *pigJob;

/**
 *  Required. Job information, including how, when, and where to run the job.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_JobPlacement *placement;

/** Job is a Pyspark job. */
@property(nonatomic, strong, nullable) GTLRDataproc_PySparkJob *pysparkJob;

/**
 *  Optional. The fully qualified reference to the job, which can be used to
 *  obtain the equivalent REST path of the job resource. If this property is not
 *  specified when a job is created, the server generates a <code>job_id</code>.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_JobReference *reference;

/** Optional. Job scheduling configuration. */
@property(nonatomic, strong, nullable) GTLRDataproc_JobScheduling *scheduling;

/** Job is a Spark job. */
@property(nonatomic, strong, nullable) GTLRDataproc_SparkJob *sparkJob;

/** Job is a SparkSql job. */
@property(nonatomic, strong, nullable) GTLRDataproc_SparkSqlJob *sparkSqlJob;

/**
 *  Output-only. The job status. Additional application-specific status
 *  information may be contained in the <code>type_job</code> and
 *  <code>yarn_applications</code> fields.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_JobStatus *status;

/** Output-only. The previous job status. */
@property(nonatomic, strong, nullable) NSArray<GTLRDataproc_JobStatus *> *statusHistory;

/**
 *  Output-only. The collection of YARN applications spun up by this job.Beta
 *  Feature: This report is available for testing purposes only. It may be
 *  changed before final release.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataproc_YarnApplication *> *yarnApplications;

@end


/**
 *  Optional. The labels to associate with this job. Label keys must contain 1
 *  to 63 characters, and must conform to RFC 1035
 *  (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if
 *  present, must contain 1 to 63 characters, and must conform to RFC 1035
 *  (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
 *  associated with a job.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataproc_Job_Labels : GTLRObject
@end


/**
 *  Cloud Dataproc job config.
 */
@interface GTLRDataproc_JobPlacement : GTLRObject

/** Required. The name of the cluster where the job will be submitted. */
@property(nonatomic, copy, nullable) NSString *clusterName;

/**
 *  Output-only. A cluster UUID generated by the Cloud Dataproc service when the
 *  job is submitted.
 */
@property(nonatomic, copy, nullable) NSString *clusterUuid;

@end


/**
 *  Encapsulates the full scoping used to reference a job.
 */
@interface GTLRDataproc_JobReference : GTLRObject

/**
 *  Optional. The job ID, which must be unique within the project. The job ID is
 *  generated by the server upon job submission or provided by the user as a
 *  means to perform retries without creating duplicate jobs. The ID must
 *  contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or hyphens
 *  (-). The maximum length is 100 characters.
 */
@property(nonatomic, copy, nullable) NSString *jobId;

/**
 *  Required. The ID of the Google Cloud Platform project that the job belongs
 *  to.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  Job scheduling options.Beta Feature: These options are available for testing
 *  purposes only. They may be changed before final release.
 */
@interface GTLRDataproc_JobScheduling : GTLRObject

/**
 *  Optional. Maximum number of times per hour a driver may be restarted as a
 *  result of driver terminating with non-zero code before job is reported
 *  failed.A job may be reported as thrashing if driver exits with non-zero code
 *  4 times within 10 minute window.Maximum value is 10.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxFailuresPerHour;

@end


/**
 *  Cloud Dataproc job status.
 */
@interface GTLRDataproc_JobStatus : GTLRObject

/**
 *  Output-only. Optional job state details, such as an error description if the
 *  state is <code>ERROR</code>.
 */
@property(nonatomic, copy, nullable) NSString *details;

/**
 *  Output-only. A state message specifying the overall job state.
 *
 *  Likely values:
 *    @arg @c kGTLRDataproc_JobStatus_State_AttemptFailure Job attempt has
 *        failed. The detail field contains failure details for this
 *        attempt.Applies to restartable jobs only. (Value: "ATTEMPT_FAILURE")
 *    @arg @c kGTLRDataproc_JobStatus_State_Cancelled The job cancellation was
 *        successful. (Value: "CANCELLED")
 *    @arg @c kGTLRDataproc_JobStatus_State_CancelPending A CancelJob request
 *        has been received, but is pending. (Value: "CANCEL_PENDING")
 *    @arg @c kGTLRDataproc_JobStatus_State_CancelStarted Transient in-flight
 *        resources have been canceled, and the request to cancel the running
 *        job has been issued to the cluster. (Value: "CANCEL_STARTED")
 *    @arg @c kGTLRDataproc_JobStatus_State_Done The job has completed
 *        successfully. (Value: "DONE")
 *    @arg @c kGTLRDataproc_JobStatus_State_Error The job has completed, but
 *        encountered an error. (Value: "ERROR")
 *    @arg @c kGTLRDataproc_JobStatus_State_Pending The job is pending; it has
 *        been submitted, but is not yet running. (Value: "PENDING")
 *    @arg @c kGTLRDataproc_JobStatus_State_Running The job is running on the
 *        cluster. (Value: "RUNNING")
 *    @arg @c kGTLRDataproc_JobStatus_State_SetupDone Job has been received by
 *        the service and completed initial setup; it will soon be submitted to
 *        the cluster. (Value: "SETUP_DONE")
 *    @arg @c kGTLRDataproc_JobStatus_State_StateUnspecified The job state is
 *        unknown. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output-only. The time when this state was entered. */
@property(nonatomic, strong, nullable) GTLRDateTime *stateStartTime;

/**
 *  Output-only. Additional state information, which includes status reported by
 *  the agent.
 *
 *  Likely values:
 *    @arg @c kGTLRDataproc_JobStatus_Substate_Queued The Job has been received
 *        and is awaiting execution (it may be waiting for a condition to be
 *        met). See the "details" field for the reason for the delay.Applies to
 *        RUNNING state. (Value: "QUEUED")
 *    @arg @c kGTLRDataproc_JobStatus_Substate_StaleStatus The agent-reported
 *        status is out of date, which may be caused by a loss of communication
 *        between the agent and Cloud Dataproc. If the agent does not send a
 *        timely update, the job will fail.Applies to RUNNING state. (Value:
 *        "STALE_STATUS")
 *    @arg @c kGTLRDataproc_JobStatus_Substate_Submitted The Job is submitted to
 *        the agent.Applies to RUNNING state. (Value: "SUBMITTED")
 *    @arg @c kGTLRDataproc_JobStatus_Substate_Unspecified Value "UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *substate;

@end


/**
 *  The list of all clusters in a project.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "clusters" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDataproc_ListClustersResponse : GTLRCollectionObject

/**
 *  Output-only. The clusters in the project.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataproc_Cluster *> *clusters;

/**
 *  Output-only. This token is included in the response if there are more
 *  results to fetch. To fetch additional results, provide this value as the
 *  page_token in a subsequent ListClustersRequest.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  A list of jobs in a project.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "jobs" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDataproc_ListJobsResponse : GTLRCollectionObject

/**
 *  Output-only. Jobs list.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataproc_Job *> *jobs;

/**
 *  Optional. This token is included in the response if there are more results
 *  to fetch. To fetch additional results, provide this value as the page_token
 *  in a subsequent <code>ListJobsRequest</code>.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDataproc_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataproc_Operation *> *operations;

@end


/**
 *  The runtime logging config of the job.
 */
@interface GTLRDataproc_LoggingConfig : GTLRObject

/**
 *  The per-package log levels for the driver. This may include "root" package
 *  name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO',
 *  'org.apache = DEBUG'
 */
@property(nonatomic, strong, nullable) GTLRDataproc_LoggingConfig_DriverLogLevels *driverLogLevels;

@end


/**
 *  The per-package log levels for the driver. This may include "root" package
 *  name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO',
 *  'org.apache = DEBUG'
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataproc_LoggingConfig_DriverLogLevels : GTLRObject
@end


/**
 *  Specifies the resources used to actively manage an instance group.
 */
@interface GTLRDataproc_ManagedGroupConfig : GTLRObject

/** Output-only. The name of the Instance Group Manager for this group. */
@property(nonatomic, copy, nullable) NSString *instanceGroupManagerName;

/**
 *  Output-only. The name of the Instance Template used for the Managed Instance
 *  Group.
 */
@property(nonatomic, copy, nullable) NSString *instanceTemplateName;

@end


/**
 *  Specifies an executable to run on a fully configured node and a timeout
 *  period for executable completion.
 */
@interface GTLRDataproc_NodeInitializationAction : GTLRObject

/** Required. Google Cloud Storage URI of executable file. */
@property(nonatomic, copy, nullable) NSString *executableFile;

/**
 *  Optional. Amount of time executable has to complete. Default is 10 minutes.
 *  Cluster creation fails with an explanatory error message (the name of the
 *  executable that caused the error and the exceeded timeout period) if the
 *  executable is not completed at end of the timeout period.
 */
@property(nonatomic, strong, nullable) GTLRDuration *executionTimeout;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRDataproc_Operation : GTLRObject

/**
 *  If the value is false, it means the operation is still in progress. If true,
 *  the operation is completed, and either error or response is available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRDataproc_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the name should
 *  have the format of operations/some/unique/name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as Delete, the response is
 *  google.protobuf.Empty. If the original method is standard Get/Create/Update,
 *  the response should be the resource. For other methods, the response should
 *  have the type XxxResponse, where Xxx is the original method name. For
 *  example, if the original method name is TakeSnapshot(), the inferred
 *  response type is TakeSnapshotResponse.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDataproc_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as Delete, the response is
 *  google.protobuf.Empty. If the original method is standard Get/Create/Update,
 *  the response should be the resource. For other methods, the response should
 *  have the type XxxResponse, where Xxx is the original method name. For
 *  example, if the original method name is TakeSnapshot(), the inferred
 *  response type is TakeSnapshotResponse.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDataproc_Operation_Response : GTLRObject
@end


/**
 *  A Cloud Dataproc job for running Apache Pig (https://pig.apache.org/)
 *  queries on YARN.
 */
@interface GTLRDataproc_PigJob : GTLRObject

/**
 *  Optional. Whether to continue executing queries if a query fails. The
 *  default value is false. Setting to true can be useful when executing
 *  independent parallel queries.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *continueOnFailure;

/**
 *  Optional. HCFS URIs of jar files to add to the CLASSPATH of the Pig Client
 *  and Hadoop MapReduce (MR) tasks. Can contain Pig UDFs.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *jarFileUris;

/** Optional. The runtime log config for job execution. */
@property(nonatomic, strong, nullable) GTLRDataproc_LoggingConfig *loggingConfig;

/**
 *  Optional. A mapping of property names to values, used to configure Pig.
 *  Properties that conflict with values set by the Cloud Dataproc API may be
 *  overwritten. Can include properties set in /etc/hadoop/conf/ *-site.xml,
 *  /etc/pig/conf/pig.properties, and classes in user code.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_PigJob_Properties *properties;

/** The HCFS URI of the script that contains the Pig queries. */
@property(nonatomic, copy, nullable) NSString *queryFileUri;

/** A list of queries. */
@property(nonatomic, strong, nullable) GTLRDataproc_QueryList *queryList;

/**
 *  Optional. Mapping of query variable names to values (equivalent to the Pig
 *  command: name=[value]).
 */
@property(nonatomic, strong, nullable) GTLRDataproc_PigJob_ScriptVariables *scriptVariables;

@end


/**
 *  Optional. A mapping of property names to values, used to configure Pig.
 *  Properties that conflict with values set by the Cloud Dataproc API may be
 *  overwritten. Can include properties set in /etc/hadoop/conf/ *-site.xml,
 *  /etc/pig/conf/pig.properties, and classes in user code.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataproc_PigJob_Properties : GTLRObject
@end


/**
 *  Optional. Mapping of query variable names to values (equivalent to the Pig
 *  command: name=[value]).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataproc_PigJob_ScriptVariables : GTLRObject
@end


/**
 *  A Cloud Dataproc job for running Apache PySpark
 *  (https://spark.apache.org/docs/0.9.0/python-programming-guide.html)
 *  applications on YARN.
 */
@interface GTLRDataproc_PySparkJob : GTLRObject

/**
 *  Optional. HCFS URIs of archives to be extracted in the working directory of
 *  .jar, .tar, .tar.gz, .tgz, and .zip.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *archiveUris;

/**
 *  Optional. The arguments to pass to the driver. Do not include arguments,
 *  such as --conf, that can be set as job properties, since a collision may
 *  occur that causes an incorrect job submission.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *args;

/**
 *  Optional. HCFS URIs of files to be copied to the working directory of Python
 *  drivers and distributed tasks. Useful for naively parallel tasks.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *fileUris;

/**
 *  Optional. HCFS URIs of jar files to add to the CLASSPATHs of the Python
 *  driver and tasks.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *jarFileUris;

/** Optional. The runtime log config for job execution. */
@property(nonatomic, strong, nullable) GTLRDataproc_LoggingConfig *loggingConfig;

/**
 *  Required. The HCFS URI of the main Python file to use as the driver. Must be
 *  a .py file.
 */
@property(nonatomic, copy, nullable) NSString *mainPythonFileUri;

/**
 *  Optional. A mapping of property names to values, used to configure PySpark.
 *  Properties that conflict with values set by the Cloud Dataproc API may be
 *  overwritten. Can include properties set in
 *  /etc/spark/conf/spark-defaults.conf and classes in user code.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_PySparkJob_Properties *properties;

/**
 *  Optional. HCFS file URIs of Python files to pass to the PySpark framework.
 *  Supported file types: .py, .egg, and .zip.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *pythonFileUris;

@end


/**
 *  Optional. A mapping of property names to values, used to configure PySpark.
 *  Properties that conflict with values set by the Cloud Dataproc API may be
 *  overwritten. Can include properties set in
 *  /etc/spark/conf/spark-defaults.conf and classes in user code.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataproc_PySparkJob_Properties : GTLRObject
@end


/**
 *  A list of queries to run on a cluster.
 */
@interface GTLRDataproc_QueryList : GTLRObject

/**
 *  Required. The queries to execute. You do not need to terminate a query with
 *  a semicolon. Multiple queries can be specified in one string by separating
 *  each with a semicolon. Here is an example of an Cloud Dataproc API snippet
 *  that uses a QueryList to specify a HiveJob:
 *  "hiveJob": {
 *  "queryList": {
 *  "queries": [
 *  "query1",
 *  "query2",
 *  "query3;query4",
 *  ]
 *  }
 *  }
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *queries;

@end


/**
 *  Specifies the selection and config of software inside the cluster.
 */
@interface GTLRDataproc_SoftwareConfig : GTLRObject

/**
 *  Optional. The version of software inside the cluster. It must match the
 *  regular expression [0-9]+\\.[0-9]+. If unspecified, it defaults to the
 *  latest version (see Cloud Dataproc Versioning).
 */
@property(nonatomic, copy, nullable) NSString *imageVersion;

/**
 *  Optional. The properties to set on daemon config files.Property keys are
 *  specified in prefix:property format, such as core:fs.defaultFS. The
 *  following are supported prefixes and their mappings:
 *  capacity-scheduler: capacity-scheduler.xml
 *  core: core-site.xml
 *  distcp: distcp-default.xml
 *  hdfs: hdfs-site.xml
 *  hive: hive-site.xml
 *  mapred: mapred-site.xml
 *  pig: pig.properties
 *  spark: spark-defaults.conf
 *  yarn: yarn-site.xml
 */
@property(nonatomic, strong, nullable) GTLRDataproc_SoftwareConfig_Properties *properties;

@end


/**
 *  Optional. The properties to set on daemon config files.Property keys are
 *  specified in prefix:property format, such as core:fs.defaultFS. The
 *  following are supported prefixes and their mappings:
 *  capacity-scheduler: capacity-scheduler.xml
 *  core: core-site.xml
 *  distcp: distcp-default.xml
 *  hdfs: hdfs-site.xml
 *  hive: hive-site.xml
 *  mapred: mapred-site.xml
 *  pig: pig.properties
 *  spark: spark-defaults.conf
 *  yarn: yarn-site.xml
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataproc_SoftwareConfig_Properties : GTLRObject
@end


/**
 *  A Cloud Dataproc job for running Apache Spark (http://spark.apache.org/)
 *  applications on YARN.
 */
@interface GTLRDataproc_SparkJob : GTLRObject

/**
 *  Optional. HCFS URIs of archives to be extracted in the working directory of
 *  Spark drivers and tasks. Supported file types: .jar, .tar, .tar.gz, .tgz,
 *  and .zip.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *archiveUris;

/**
 *  Optional. The arguments to pass to the driver. Do not include arguments,
 *  such as --conf, that can be set as job properties, since a collision may
 *  occur that causes an incorrect job submission.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *args;

/**
 *  Optional. HCFS URIs of files to be copied to the working directory of Spark
 *  drivers and distributed tasks. Useful for naively parallel tasks.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *fileUris;

/**
 *  Optional. HCFS URIs of jar files to add to the CLASSPATHs of the Spark
 *  driver and tasks.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *jarFileUris;

/** Optional. The runtime log config for job execution. */
@property(nonatomic, strong, nullable) GTLRDataproc_LoggingConfig *loggingConfig;

/**
 *  The name of the driver's main class. The jar file that contains the class
 *  must be in the default CLASSPATH or specified in jar_file_uris.
 */
@property(nonatomic, copy, nullable) NSString *mainClass;

/** The HCFS URI of the jar file that contains the main class. */
@property(nonatomic, copy, nullable) NSString *mainJarFileUri;

/**
 *  Optional. A mapping of property names to values, used to configure Spark.
 *  Properties that conflict with values set by the Cloud Dataproc API may be
 *  overwritten. Can include properties set in
 *  /etc/spark/conf/spark-defaults.conf and classes in user code.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_SparkJob_Properties *properties;

@end


/**
 *  Optional. A mapping of property names to values, used to configure Spark.
 *  Properties that conflict with values set by the Cloud Dataproc API may be
 *  overwritten. Can include properties set in
 *  /etc/spark/conf/spark-defaults.conf and classes in user code.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataproc_SparkJob_Properties : GTLRObject
@end


/**
 *  A Cloud Dataproc job for running Apache Spark SQL
 *  (http://spark.apache.org/sql/) queries.
 */
@interface GTLRDataproc_SparkSqlJob : GTLRObject

/** Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *jarFileUris;

/** Optional. The runtime log config for job execution. */
@property(nonatomic, strong, nullable) GTLRDataproc_LoggingConfig *loggingConfig;

/**
 *  Optional. A mapping of property names to values, used to configure Spark
 *  SQL's SparkConf. Properties that conflict with values set by the Cloud
 *  Dataproc API may be overwritten.
 */
@property(nonatomic, strong, nullable) GTLRDataproc_SparkSqlJob_Properties *properties;

/** The HCFS URI of the script that contains SQL queries. */
@property(nonatomic, copy, nullable) NSString *queryFileUri;

/** A list of queries. */
@property(nonatomic, strong, nullable) GTLRDataproc_QueryList *queryList;

/**
 *  Optional. Mapping of query variable names to values (equivalent to the Spark
 *  SQL command: SET name="value";).
 */
@property(nonatomic, strong, nullable) GTLRDataproc_SparkSqlJob_ScriptVariables *scriptVariables;

@end


/**
 *  Optional. A mapping of property names to values, used to configure Spark
 *  SQL's SparkConf. Properties that conflict with values set by the Cloud
 *  Dataproc API may be overwritten.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataproc_SparkSqlJob_Properties : GTLRObject
@end


/**
 *  Optional. Mapping of query variable names to values (equivalent to the Spark
 *  SQL command: SET name="value";).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataproc_SparkSqlJob_ScriptVariables : GTLRObject
@end


/**
 *  The Status type defines a logical error model that is suitable for different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  gRPC (https://github.com/grpc). The error model is designed to be:
 *  Simple to use and understand for most users
 *  Flexible enough to meet unexpected needsOverviewThe Status message contains
 *  three pieces of data: error code, error message, and error details. The
 *  error code should be an enum value of google.rpc.Code, but it may accept
 *  additional error codes if needed. The error message should be a
 *  developer-facing English message that helps developers understand and
 *  resolve the error. If a localized user-facing error message is needed, put
 *  the localized message in the error details or localize it in the client. The
 *  optional error details may contain arbitrary information about the error.
 *  There is a predefined set of error detail types in the package google.rpc
 *  that can be used for common error conditions.Language mappingThe Status
 *  message is the logical representation of the error model, but it is not
 *  necessarily the actual wire format. When the Status message is exposed in
 *  different client libraries and different wire protocols, it can be mapped
 *  differently. For example, it will likely be mapped to some exceptions in
 *  Java, but more likely mapped to some error codes in C.Other usesThe error
 *  model and the Status message can be used in a variety of environments,
 *  either with or without APIs, to provide a consistent developer experience
 *  across different environments.Example uses of this error model include:
 *  Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the Status in the normal response to indicate the partial
 *  errors.
 *  Workflow errors. A typical workflow has multiple steps. Each step may have a
 *  Status message for error reporting.
 *  Batch operations. If a client uses batch request and batch response, the
 *  Status message should be used directly inside batch response, one for each
 *  error sub-response.
 *  Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the Status message.
 *  Logging. If some API errors are stored in logs, the message Status could be
 *  used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRDataproc_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There will be a common set
 *  of message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataproc_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRDataproc_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDataproc_Status_Details_Item : GTLRObject
@end


/**
 *  A request to submit a job.
 */
@interface GTLRDataproc_SubmitJobRequest : GTLRObject

/** Required. The job resource. */
@property(nonatomic, strong, nullable) GTLRDataproc_Job *job;

@end


/**
 *  A YARN application created by a job. Application information is a subset of
 *  <code>org.apache.hadoop.yarn.proto.YarnProtos.ApplicationReportProto</code>.Beta
 *  Feature: This report is available for testing purposes only. It may be
 *  changed before final release.
 */
@interface GTLRDataproc_YarnApplication : GTLRObject

/** Required. The application name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The numerical progress of the application, from 1 to 100.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *progress;

/**
 *  Required. The application state.
 *
 *  Likely values:
 *    @arg @c kGTLRDataproc_YarnApplication_State_Accepted Status is ACCEPTED.
 *        (Value: "ACCEPTED")
 *    @arg @c kGTLRDataproc_YarnApplication_State_Failed Status is FAILED.
 *        (Value: "FAILED")
 *    @arg @c kGTLRDataproc_YarnApplication_State_Finished Status is FINISHED.
 *        (Value: "FINISHED")
 *    @arg @c kGTLRDataproc_YarnApplication_State_Killed Status is KILLED.
 *        (Value: "KILLED")
 *    @arg @c kGTLRDataproc_YarnApplication_State_New Status is NEW. (Value:
 *        "NEW")
 *    @arg @c kGTLRDataproc_YarnApplication_State_NewSaving Status is
 *        NEW_SAVING. (Value: "NEW_SAVING")
 *    @arg @c kGTLRDataproc_YarnApplication_State_Running Status is RUNNING.
 *        (Value: "RUNNING")
 *    @arg @c kGTLRDataproc_YarnApplication_State_StateUnspecified Status is
 *        unspecified. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRDataproc_YarnApplication_State_Submitted Status is SUBMITTED.
 *        (Value: "SUBMITTED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Optional. The HTTP URL of the ApplicationMaster, HistoryServer, or
 *  TimelineServer that provides application-specific information. The URL uses
 *  the internal hostname, and requires a proxy server for resolution and,
 *  possibly, access.
 */
@property(nonatomic, copy, nullable) NSString *trackingUrl;

@end

NS_ASSUME_NONNULL_END
